[
  {
    "label": "UCLASS",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Marks a class as a UObject-derived type.",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Required in UE class declarations.",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UPROPERTY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose class member to UE reflection.",
    "insertText": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\\\"DefaultCategory\\\")\nType VariableName;",
    "isMultiline": true
  },
  {
    "label": "UFUNCTION",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose function to UE reflection / Blueprints.",
    "insertText": "UFUNCTION(BlueprintCallable, Category=\\\"DefaultCategory\\\")\nvoid FunctionName();",
    "isMultiline": true
  },
  {
    "label": "AActor class stub",
    "kind": "Snippet",
    "detail": "Actor C++ header skeleton",
    "documentation": "Minimal Actor-derived class boilerplate.",
    "insertText": "UCLASS()\nclass MYMODULE_API AMyActor : public AActor\n{\n  GENERATED_BODY()\n\npublic:\n  AMyActor();\n\nprotected:\n  virtual void BeginPlay() override;\n\npublic:\n  virtual void Tick(float DeltaSeconds) override;\n};",
    "isMultiline": true
  },
  {
    "label": "AActor class def",
    "kind": "Snippet",
    "detail": "Actor C++ source skeleton",
    "documentation": "Minimal Actor-derived class implementation.",
    "insertText": "AMyActor::AMyActor()\n{\n  PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyActor::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "ACharacter class stub",
    "kind": "Snippet",
    "detail": "Character C++ header skeleton",
    "documentation": "Minimal Character-derived class boilerplate.",
    "insertText": "UCLASS()\nclass MYMODULE_API AMyCharacter : public ACharacter\n{\n  GENERATED_BODY()\n\npublic:\n  AMyCharacter();\n\nprotected:\n  virtual void BeginPlay() override;\n\npublic:\n  virtual void Tick(float DeltaSeconds) override;\n};",
    "isMultiline": true
  },
  {
    "label": "ACharacter class def",
    "kind": "Snippet",
    "detail": "Character C++ source skeleton",
    "documentation": "Minimal Character-derived class implementation.",
    "insertText": "AMyCharacter::AMyCharacter()\n{\n  PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "BeginPlay def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for BeginPlay override.",
    "insertText": "void AMyActor::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}",
    "isMultiline": true
  },
  {
    "label": "Tick def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for Tick override.",
    "insertText": "void AMyActor::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "UE_LOG",
    "kind": "Snippet",
    "detail": "Logging macro",
    "documentation": "UE_LOG(LogTemp, Warning, TEXT(\"Hello\"));",
    "insertText": "UE_LOG(LogTemp, Warning, TEXT(\"Message\"));"
  },
  {
    "label": "UENUM",
    "kind": "Snippet",
    "detail": "Unreal enum declaration",
    "documentation": "Declares an enum type for use in Unreal Engine.",
    "insertText": "UENUM(BlueprintType)\nenum class MyEnum : uint8\n{\n  Value1,\n  Value2,\n  Value3\n};",
    "isMultiline": true
  },
  {
    "label": "USTRUCT",
    "kind": "Snippet",
    "detail": "Unreal struct declaration",
    "documentation": "Declares a struct type for use in Unreal Engine.",
    "insertText": "USTRUCT(BlueprintType)\nstruct MyStruct\n{\n  GENERATED_BODY()\n\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = 'DefaultCategory')\n  int32 MyVariable;\n};",
    "isMultiline": true
  },
  {
    "label": "FVector constructor",
    "kind": "Snippet",
    "detail": "FVector constructor",
    "documentation": "Constructs an FVector with X, Y, Z values.",
    "insertText": "FVector(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FRotator constructor",
    "kind": "Snippet",
    "detail": "FRotator constructor",
    "documentation": "Constructs an FRotator with Pitch, Yaw, Roll values.",
    "insertText": "FRotator(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FTransform constructor",
    "kind": "Snippet",
    "detail": "FTransform constructor",
    "documentation": "Constructs an FTransform with location, rotation, scale.",
    "insertText": "FTransform(FRotator(0.0f, 0.0f, 0.0f), FVector(0.0f, 0.0f, 0.0f), FVector(1.0f, 1.0f, 1.0f))"
  }
]