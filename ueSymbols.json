[
  {
    "label": "UCLASS",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Marks a class as a UObject-derived type.",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Required in UE class declarations.",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UPROPERTY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose class member to UE reflection.",
    "insertText": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\\\"DefaultCategory\\\")\nType VariableName;",
    "isMultiline": true
  },
  {
    "label": "UFUNCTION",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose function to UE reflection / Blueprints.",
    "insertText": "UFUNCTION(BlueprintCallable, Category=\\\"DefaultCategory\\\")\nvoid FunctionName();",
    "isMultiline": true
  },
  {
    "label": "AActor class stub",
    "kind": "Snippet",
    "detail": "Actor C++ header skeleton",
    "documentation": "Minimal Actor-derived class boilerplate.",
    "insertText": "UCLASS()\nclass MYMODULE_API AMyActor : public AActor\n{\n  GENERATED_BODY()\n\npublic:\n  AMyActor();\n\nprotected:\n  virtual void BeginPlay() override;\n\npublic:\n  virtual void Tick(float DeltaSeconds) override;\n};",
    "isMultiline": true
  },
  {
    "label": "AActor class def",
    "kind": "Snippet",
    "detail": "Actor C++ source skeleton",
    "documentation": "Minimal Actor-derived class implementation.",
    "insertText": "AMyActor::AMyActor()\n{\n  PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyActor::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}\n\nvoid AMyActor::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "ACharacter class stub",
    "kind": "Snippet",
    "detail": "Character C++ header skeleton",
    "documentation": "Minimal Character-derived class boilerplate.",
    "insertText": "UCLASS()\nclass MYMODULE_API AMyCharacter : public ACharacter\n{\n  GENERATED_BODY()\n\npublic:\n  AMyCharacter();\n\nprotected:\n  virtual void BeginPlay() override;\n\npublic:\n  virtual void Tick(float DeltaSeconds) override;\n};",
    "isMultiline": true
  },
  {
    "label": "ACharacter class def",
    "kind": "Snippet",
    "detail": "Character C++ source skeleton",
    "documentation": "Minimal Character-derived class implementation.",
    "insertText": "AMyCharacter::AMyCharacter()\n{\n  PrimaryActorTick.bCanEverTick = true;\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "BeginPlay def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for BeginPlay override.",
    "insertText": "void AMyActor::BeginPlay()\n{\n  Super::BeginPlay();\n  // TODO: Init here\n}",
    "isMultiline": true
  },
  {
    "label": "Tick def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for Tick override.",
    "insertText": "void AMyActor::Tick(float DeltaTime)\n{\n  Super::Tick(DeltaTime);\n  // TODO: per-frame logic\n}",
    "isMultiline": true
  },
  {
    "label": "UE_LOG",
    "kind": "Snippet",
    "detail": "Logging macro",
    "documentation": "UE_LOG(LogTemp, Warning, TEXT(\"Hello\"));",
    "insertText": "UE_LOG(LogTemp, Warning, TEXT(\"Message\"));"
  },
  {
    "label": "UENUM",
    "kind": "Snippet",
    "detail": "Unreal enum declaration",
    "documentation": "Declares an enum type for use in Unreal Engine.",
    "insertText": "UENUM(BlueprintType)\nenum class MyEnum : uint8\n{\n  Value1,\n  Value2,\n  Value3\n};",
    "isMultiline": true
  },
  {
    "label": "USTRUCT",
    "kind": "Snippet",
    "detail": "Unreal struct declaration",
    "documentation": "Declares a struct type for use in Unreal Engine.",
    "insertText": "USTRUCT(BlueprintType)\nstruct MyStruct\n{\n  GENERATED_BODY()\n\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = 'DefaultCategory')\n  int32 MyVariable;\n};",
    "isMultiline": true
  },
  {
    "label": "FVector constructor",
    "kind": "Snippet",
    "detail": "FVector constructor",
    "documentation": "Constructs an FVector with X, Y, Z values.",
    "insertText": "FVector(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FRotator constructor",
    "kind": "Snippet",
    "detail": "FRotator constructor",
    "documentation": "Constructs an FRotator with Pitch, Yaw, Roll values.",
    "insertText": "FRotator(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FTransform constructor",
    "kind": "Snippet",
    "detail": "FTransform constructor",
    "documentation": "Constructs an FTransform with location, rotation, scale.",
    "insertText": "FTransform(FRotator(0.0f, 0.0f, 0.0f), FVector(0.0f, 0.0f, 0.0f), FVector(1.0f, 1.0f, 1.0f))"
  },
  {
    "label": "bool",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Boolean type",
    "insertText": "bool"
  },
  {
    "label": "char",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Character type",
    "insertText": "char"
  },
  {
    "label": "double",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Double precision floating-point",
    "insertText": "double"
  },
  {
    "label": "float",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Floating-point type",
    "insertText": "float"
  },
  {
    "label": "int",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Integer type",
    "insertText": "int"
  },
  {
    "label": "long",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Long integer type",
    "insertText": "long"
  },
  {
    "label": "short",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Short integer type",
    "insertText": "short"
  },
  {
    "label": "unsigned",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Unsigned integer modifier",
    "insertText": "unsigned"
  },
  {
    "label": "void",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Void type",
    "insertText": "void"
  },
  {
    "label": "auto",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Automatic type deduction",
    "insertText": "auto"
  },
  {
    "label": "constexpr",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Constant expression",
    "insertText": "constexpr"
  },
  {
    "label": "const",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Constant modifier",
    "insertText": "const"
  },
  {
    "label": "static",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Static storage duration",
    "insertText": "static"
  },
  {
    "label": "mutable",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Mutable member modifier",
    "insertText": "mutable"
  },
  {
    "label": "namespace",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Namespace declaration",
    "insertText": "namespace ${1:name} {\n\t$0\n}"
  },
  {
    "label": "template",
    "kind": "keyword",
    "detail": "C++ keyword",
    "documentation": "Template declaration",
    "insertText": "template <typename ${1:T}>\n$0"
  },
  {
    "label": "for",
    "kind": "snippet",
    "detail": "For loop",
    "documentation": "For loop snippet",
    "insertText": "for (int ${1:i} = 0; ${1:i} < ${2:N}; ++${1:i}) {\n\t$0\n}"
  },
  {
    "label": "while",
    "kind": "snippet",
    "detail": "While loop",
    "documentation": "While loop snippet",
    "insertText": "while (${1:condition}) {\n\t$0\n}"
  },
  {
    "label": "do-while",
    "kind": "snippet",
    "detail": "Do-while loop",
    "documentation": "Do-while loop snippet",
    "insertText": "do {\n\t$0\n} while (${1:condition});"
  },
  {
    "label": "if",
    "kind": "snippet",
    "detail": "If statement",
    "documentation": "If statement snippet",
    "insertText": "if (${1:condition}) {\n\t$0\n}"
  },
  {
    "label": "if-else",
    "kind": "snippet",
    "detail": "If-else statement",
    "documentation": "If-else statement snippet",
    "insertText": "if (${1:condition}) {\n\t$0\n} else {\n\t\n}"
  },
  {
    "label": "switch",
    "kind": "snippet",
    "detail": "Switch statement",
    "documentation": "Switch statement snippet",
    "insertText": "switch (${1:expression}) {\n\tcase ${2:val}:\n\t\t$0\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}"
  },
  {
    "label": "std::vector",
    "kind": "class",
    "detail": "STL vector",
    "documentation": "Sequence container representing dynamic array",
    "insertText": "std::vector<${1:T}> ${2:vec};"
  },
  {
    "label": "std::map",
    "kind": "class",
    "detail": "STL map",
    "documentation": "Associative container with key-value pairs",
    "insertText": "std::map<${1:Key}, ${2:Value}> ${3:map};"
  },
  {
    "label": "std::unordered_map",
    "kind": "class",
    "detail": "STL unordered_map",
    "documentation": "Hash table-based associative container",
    "insertText": "std::unordered_map<${1:Key}, ${2:Value}> ${3:umap};"
  },
  {
    "label": "std::set",
    "kind": "class",
    "detail": "STL set",
    "documentation": "Associative container with unique keys",
    "insertText": "std::set<${1:T}> ${2:set};"
  },
  {
    "label": "std::string",
    "kind": "class",
    "detail": "STL string",
    "documentation": "Standard string class",
    "insertText": "std::string ${1:str};"
  },
  {
    "label": "func",
    "kind": "snippet",
    "detail": "Function declaration",
    "documentation": "Basic function declaration snippet",
    "insertText": "${1:void} ${2:funcName}(${3:params}) {\n\t$0\n}"
  },
  {
    "label": "class",
    "kind": "snippet",
    "detail": "Class declaration",
    "documentation": "Basic class declaration snippet",
    "insertText": "class ${1:ClassName} {\npublic:\n\t${1:ClassName}();\n\t~${1:ClassName}();\n\nprivate:\n\t$0\n};"
  },
  {
    "label": "struct",
    "kind": "snippet",
    "detail": "Struct declaration",
    "documentation": "Basic struct declaration snippet",
    "insertText": "struct ${1:StructName} {\n\t$0\n};"
  },
  {
    "label": "include",
    "kind": "snippet",
    "detail": "Include directive",
    "documentation": "Standard include header directive",
    "insertText": "#include <${1:header}>"
  }
]