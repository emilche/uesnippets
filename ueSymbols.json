[
  {
    "label": "UCLASS",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Marks a class as a UObject-derived type.",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Required in UE class declarations.",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UPROPERTY",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose class member to UE reflection.",
    "insertText": "UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\\\"${1:Category}\\\")\\n${2:Type} ${3:VariableName};",
    "isMultiline": true
  },
  {
    "label": "UFUNCTION",
    "kind": "Snippet",
    "detail": "Unreal macro",
    "documentation": "Expose function to UE reflection / Blueprints.",
    "insertText": "UFUNCTION(BlueprintCallable, Category=\\\"${1:Category}\\\")\\n${2:void} ${3:FunctionName}();",
    "isMultiline": true
  },
  {
    "label": "AActor class stub",
    "kind": "Snippet",
    "detail": "Actor C++ header skeleton",
    "documentation": "Minimal Actor-derived class boilerplate.",
    "insertText": "UCLASS()\\nclass ${1:MYMODULE}_API ${2:AMyActor} : public AActor\\n{\\n  GENERATED_BODY()\\n\\npublic:\\n  ${2:AMyActor}();\\n\\nprotected:\\n  virtual void BeginPlay() override;\\n\\npublic:\\n  virtual void Tick(float DeltaSeconds) override;\\n};",
    "isMultiline": true
  },
  {
    "label": "AActor class def",
    "kind": "Snippet",
    "detail": "Actor C++ source skeleton",
    "documentation": "Minimal Actor-derived class implementation.",
    "insertText": "${1:AMyActor}::${1:AMyActor}()\\n{\\n  PrimaryActorTick.bCanEverTick = true;\\n}\\n\\nvoid ${1:AMyActor}::BeginPlay()\\n{\\n  Super::BeginPlay();\\n  // TODO: Init here\\n}\\n\\nvoid ${1:AMyActor}::Tick(float DeltaTime)\\n{\\n  Super::Tick(DeltaTime);\\n  // TODO: per-frame logic\\n}",
    "isMultiline": true
  },
  {
    "label": "ACharacter class stub",
    "kind": "Snippet",
    "detail": "Character C++ header skeleton",
    "documentation": "Minimal Character-derived class boilerplate.",
    "insertText": "UCLASS()\\nclass ${1:MYMODULE}_API ${2:AMyCharacter} : public ACharacter\\n{\\n  GENERATED_BODY()\\n\\npublic:\\n  ${2:AMyCharacter}();\\n\\nprotected:\\n  virtual void BeginPlay() override;\\n\\npublic:\\n  virtual void Tick(float DeltaSeconds) override;\\n};",
    "isMultiline": true
  },
  {
    "label": "ACharacter class def",
    "kind": "Snippet",
    "detail": "Character C++ source skeleton",
    "documentation": "Minimal Character-derived class implementation.",
    "insertText": "${1:AMyCharacter}::${1:AMyCharacter}()\\n{\\n  PrimaryActorTick.bCanEverTick = true;\\n}\\n\\nvoid ${1:AMyCharacter}::BeginPlay()\\n{\\n  Super::BeginPlay();\\n  // TODO: Init here\\n}\\n\\nvoid ${1:AMyCharacter}::Tick(float DeltaTime)\\n{\\n  Super::Tick(DeltaTime);\\n  // TODO: per-frame logic\\n}",
    "isMultiline": true
  },
  {
    "label": "BeginPlay def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for BeginPlay override.",
    "insertText": "void ${1:AMyActor}::BeginPlay()\\n{\\n  Super::BeginPlay();\\n  // TODO: Init here\\n}",
    "isMultiline": true
  },
  {
    "label": "Tick def",
    "kind": "Snippet",
    "detail": "AActor .cpp body",
    "documentation": "Definition for Tick override.",
    "insertText": "void ${1:AMyActor}::Tick(float DeltaTime)\\n{\\n  Super::Tick(DeltaTime);\\n  // TODO: per-frame logic\\n}",
    "isMultiline": true
  },
  {
    "label": "UE_LOG",
    "kind": "Snippet",
    "detail": "Logging macro",
    "documentation": "UE_LOG(LogTemp, Warning, TEXT(\\\"Hello\\\"));",
    "insertText": "UE_LOG(LogTemp, Warning, TEXT(\\\"${1:Message}\\\"));"
  },
  {
    "label": "UENUM",
    "kind": "Snippet",
    "detail": "Unreal enum declaration",
    "documentation": "Declares an enum type for use in Unreal Engine.",
    "insertText": "UENUM(BlueprintType)\\nenum class ${1:MyEnum} : uint8\\n{\\n  ${2:Value1},\\n  ${3:Value2},\\n  ${4:Value3}\\n};",
    "isMultiline": true
  },
  {
    "label": "USTRUCT",
    "kind": "Snippet",
    "detail": "Unreal struct declaration",
    "documentation": "Declares a struct type for use in Unreal Engine.",
    "insertText": "USTRUCT(BlueprintType)\\nstruct ${1:MyStruct}\\n{\\n  GENERATED_BODY()\\n\\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = '${2:Category}')\\n  ${3:int32} ${4:MyVariable};\\n};",
    "isMultiline": true
  },
  { "label": "AActor", "kind": "Text", "detail": "UE base Actor", "insertText": "AActor" },
  { "label": "ACharacter", "kind": "Text", "detail": "Playable character", "insertText": "ACharacter" },
  { "label": "APawn", "kind": "Text", "detail": "Controllable pawn", "insertText": "APawn" },
  { "label": "UObject", "kind": "Text", "detail": "Base UE object", "insertText": "UObject" },
  { "label": "USceneComponent", "kind": "Text", "detail": "Scene component", "insertText": "USceneComponent" },
  { "label": "FVector", "kind": "Text", "detail": "3D vector", "insertText": "FVector" },
  { "label": "FRotator", "kind": "Text", "detail": "Rotation (pitch/yaw/roll)", "insertText": "FRotator" },
  { "label": "GetWorld()", "kind": "Method", "detail": "World accessor", "insertText": "GetWorld()" },
  { "label": "GetActorLocation()", "kind": "Method", "detail": "Actor location", "insertText": "GetActorLocation()" },
  { "label": "SetActorLocation()", "kind": "Method", "detail": "Move actor", "insertText": "SetActorLocation(${1:NewLocation});" },
  { "label": "AddMovementInput()", "kind": "Method", "detail": "Movement input", "insertText": "AddMovementInput(${1:WorldDirection}, ${2:ScaleValue});" },
  { "label": "GetActorRotation()", "kind": "Method", "detail": "Actor rotation", "insertText": "GetActorRotation()" },
  { "label": "SetActorRotation()", "kind": "Method", "detail": "Set actor rotation", "insertText": "SetActorRotation(${1:NewRotation});" },
  { "label": "GetActorForwardVector()", "kind": "Method", "detail": "Get forward vector", "insertText": "GetActorForwardVector()" },
  { "label": "GetActorRightVector()", "kind": "Method", "detail": "Get right vector", "insertText": "GetActorRightVector()" },
  { "label": "GetActorUpVector()", "kind": "Method", "detail": "Get up vector", "insertText": "GetActorUpVector()" },
  { "label": "GetComponentLocation()", "kind": "Method", "detail": "Get component location", "insertText": "${1:UYourComponent}->GetComponentLocation();" },
  { "label": "SetComponentLocation()", "kind": "Method", "detail": "Set component location", "insertText": "${1:UYourComponent}->SetWorldLocation(${2:NewLocation});" },
  { "label": "GetComponentRotation()", "kind": "Method", "detail": "Get component rotation", "insertText": "${1:UYourComponent}->GetComponentRotation();" },
  { "label": "SetComponentRotation()", "kind": "Method", "detail": "Set component rotation", "insertText": "${1:UYourComponent}->SetWorldRotation(${2:NewRotation});" },
  { "label": "GetActorBounds()", "kind": "Method", "detail": "Get actor bounds", "insertText": "GetActorBounds(${1:bOnlyCollidingComponents}, ${2:Origin}, ${3:BoxExtent});" },
  { "label": "GetDistanceTo()", "kind": "Method", "detail": "Get distance to another actor", "insertText": "${1:OtherActor}->GetDistanceTo(this);" },
  { "label": "GetOverlappingActors()", "kind": "Method", "detail": "Get overlapping actors", "insertText": "GetOverlappingActors(OutActors, ${1:FilterClass});" },
  { "label": "GetOverlappingComponents()", "kind": "Method", "detail": "Get overlapping components", "insertText": "GetOverlappingComponents(OutComponents);" },
  { "label": "LineTraceSingleByChannel()", "kind": "Method", "detail": "Line trace single by channel", "insertText": "GetWorld()->LineTraceSingleByChannel(${1:HitResult}, ${2:Start}, ${3:End}, ${4:TraceChannel});" },
  { "label": "SphereTraceSingleByChannel()", "kind": "Method", "detail": "Sphere trace single by channel", "insertText": "GetWorld()->SphereTraceSingleByChannel(${1:HitResult}, ${2:Start}, ${3:End}, ${4:Radius}, ${5:TraceChannel});" },
  { "label": "BoxTraceSingleByChannel()", "kind": "Method", "detail": "Box trace single by channel", "insertText": "GetWorld()->BoxTraceSingleByChannel(${1:HitResult}, ${2:Start}, ${3:End}, ${4:HalfSize}, ${5:Orientation}, ${6:TraceChannel});" },
  { "label": "CapsuleTraceSingleByChannel()", "kind": "Method", "detail": "Capsule trace single by channel", "insertText": "GetWorld()->CapsuleTraceSingleByChannel(${1:HitResult}, ${2:Start}, ${3:End}, ${4:Radius}, ${5:HalfHeight}, ${6:TraceChannel});" },
  { "label": "SpawnActor()", "kind": "Method", "detail": "Spawn actor", "insertText": "GetWorld()->SpawnActor<${1:AMyActor}>(${2:SpawnLocation}, ${3:SpawnRotation});" },
  { "label": "GetPlayerController()", "kind": "Method", "detail": "Get player controller", "insertText": "GetWorld()->GetFirstPlayerController();" },
  { "label": "GetGameState()", "kind": "Method", "detail": "Get game state", "insertText": "GetWorld()->GetGameState();" },
  { "label": "GetGameInstance()", "kind": "Method", "detail": "Get game instance", "insertText": "GetGameInstance()" },
  { "label": "GetGameMode()", "kind": "Method", "detail": "Get game mode", "insertText": "GetWorld()->GetAuthGameMode();" },
  { "label": "GetPlayerPawn()", "kind": "Method", "detail": "Get player pawn", "insertText": "GetWorld()->GetFirstPlayerController()->GetPawn();" },
  { "label": "GetComponentByClass()", "kind": "Method", "detail": "Get component by class", "insertText": "GetComponentByClass<${1:UYourComponentClass}>();" },
  { "label": "GetComponentsByClass()", "kind": "Method", "detail": "Get components by class", "insertText": "GetComponentsByClass<${1:UYourComponentClass}>(OutComponents);" },
  { "label": "IsValid()", "kind": "Method", "detail": "Check if object is valid", "insertText": "IsValid(${1:Object})" },
  { "label": "Cast()", "kind": "Method", "detail": "Cast to type", "insertText": "Cast<${1:TargetType}>(${2:Object})" },
  { "label": "StaticClass()", "kind": "Method", "detail": "Get static class type", "insertText": "${1:UYourClass}::StaticClass()" },
  { "label": "FVector::ZeroVector", "kind": "Constant", "detail": "Zero vector constant", "insertText": "FVector::ZeroVector" },
  { "label": "FRotator::ZeroRotator", "kind": "Constant", "detail": "Zero rotator constant", "insertText": "FRotator::ZeroRotator" },
  { "label": "FVector::UpVector", "kind": "Constant", "detail": "Up vector constant", "insertText": "FVector::UpVector" },
  { "label": "FVector::ForwardVector", "kind": "Constant", "detail": "Forward vector constant", "insertText": "FVector::ForwardVector" },
  { "label": "FVector::RightVector", "kind": "Constant", "detail": "Right vector constant", "insertText": "FVector::RightVector" },
  { "label": "TEXT()", "kind": "Macro", "detail": "String literal macro", "insertText": "TEXT('${1:YourString}')" },
  { "label": "__FUNCTION__", "kind": "Macro", "detail": "__FUNCTION__ macro for current function name", "insertText": "__FUNCTION__" },
  { "label": "FString", "kind": "Type", "detail": "String type", "insertText": "FString" },
  { "label": "TArray", "kind": "Type", "detail": "Dynamic array type", "insertText": "TArray<${1:Type}>" },
  { "label": "TMap", "kind": "Type", "detail": "Key-value map type", "insertText": "TMap<${1:KeyType}, ${2:ValueType}>" },
  { "label": "TSet", "kind": "Type", "detail": "Set type", "insertText": "TSet<${1:ElementType}>" },
  { "label": "FName", "kind": "Type", "detail": "Name type", "insertText": "FName" },
  { "label": "FText", "kind": "Type", "detail": "Text type", "insertText": "FText" },
  { "label": "FColor", "kind": "Type", "detail": "Color type", "insertText": "FColor" },
  { "label": "FLinearColor", "kind": "Type", "detail": "Linear color type", "insertText": "FLinearColor" },
  { "label": "FQuat", "kind": "Type", "detail": "Quaternion type", "insertText": "FQuat" },
  { "label": "FHitResult", "kind": "Type", "detail": "Hit result type", "insertText": "FHitResult" },
  { "label": "FTransform", "kind": "Type", "detail": "Transform type", "insertText": "FTransform" },
  { "label": "FDelegate", "kind": "Type", "detail": "Delegate type", "insertText": "FDelegate" },
  { "label": "FTimerHandle", "kind": "Type", "detail": "Timer handle type", "insertText": "FTimerHandle" },
  { "label": "FVector2D", "kind": "Type", "detail": "2D vector type", "insertText": "FVector2D" },
  { "label": "FVector4", "kind": "Type", "detail": "4D vector type", "insertText": "FVector4" },
  { "label": "FBox", "kind": "Type", "detail": "Axis-aligned bounding box", "insertText": "FBox" },
  { "label": "FPlane", "kind": "Type", "detail": "Plane type", "insertText": "FPlane" },
  { "label": "FMatrix", "kind": "Type", "detail": "Matrix type", "insertText": "FMatrix" },
  { "label": "FMath", "kind": "Class", "detail": "Math utility class", "insertText": "FMath" },
  { "label": "FPlatformMisc", "kind": "Class", "detail": "Platform utilities", "insertText": "FPlatformMisc" },
  { "label": "FPlatformTime", "kind": "Class", "detail": "Platform time utilities", "insertText": "FPlatformTime" },
  { "label": "FPlatformFileManager", "kind": "Class", "detail": "File system manager", "insertText": "FPlatformFileManager" }
]