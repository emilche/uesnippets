[
  {
    "label": "TestLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLeaf"
  },
  {
    "label": "LeafBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafBuffer"
  },
  {
    "label": "FileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileInfo"
  },
  {
    "label": "LeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafNode"
  },
  {
    "label": "FileInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TREE_LEAFBUFFER_HAS_BEEN_INCLUDED # define OPENVDB_TREE_LEAFBUFFER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / io / Compression . h> # include<openvdb / util / NodeMasks . h> # include<tbb / spin_mutex . h> # include<algorithm> # include<atomic> # include<cstddef> # include<iostream> # include<memory> # include<type_traits> class TestLeaf ; namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tree { template<T,Index Log2Dim> class LeafBuffer { public : using ValueType = T ; using StorageType = ValueType ; using NodeMaskType = util::NodeMask<Log2Dim> ; const Index SIZE = 1<<3* Log2Dim ; struct FileInfo {)",
    "insertText": "FileInfo(): bufpos(0) , maskpos(0)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (} std::streamoff bufpos ; std::streamoff maskpos ; io::MappedFile::Ptr mapping ; SharedPtr<io::StreamMetadata> meta ; } ;)",
    "insertText": "LeafBuffer(): mData(new ValueType[SIZE])"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (mOutOfCore = 0 ; })",
    "insertText": "LeafBuffer(const ValueType&)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeafBuffer(const LeafBuffer&)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeafBuffer(PartialCreate, const ValueType&): mData(nullptr)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (mOutOfCore = 0 ; } ~)",
    "insertText": "LeafBuffer()"
  },
  {
    "label": "isOutOfCore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOutOfCore()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "allocate()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueType&)",
    "insertText": "getValue(Index i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ValueType&)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(Index i, const ValueType&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LeafBuffer&)",
    "insertText": "operator(const LeafBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const LeafBuffer& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(LeafBuffer&)"
  },
  {
    "label": "memUsage()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "memUsage()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (ValueType*)",
    "insertText": "data()"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (private : const ValueType&)",
    "insertText": "at(Index i)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "deallocate()"
  },
  {
    "label": "setOutOfCore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOutOfCore(bool b)"
  },
  {
    "label": "loadValues()",
    "kind": "Method",
    "detail": "Function (mOutOfCore = b ; } void)",
    "insertText": "loadValues()"
  },
  {
    "label": "doLoad()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doLoad()"
  },
  {
    "label": "detachFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "detachFromFile()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using FlagsType = std::atomic<Index32> ; union { ValueType* mData ; FileInfo* mFileInfo ; } ; FlagsType mOutOfCore ; tbb::spin_mutex mMutex ; const ValueType sZero ; class::TestLeaf ; template<,Index> class LeafNode ; } ; template<T,Index Log2Dim> const T LeafBuffer<T,Log2Dim>::sZero = zeroVal<)",
    "insertText": "T()"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (template<T,Index Log2Dim> LeafBuffer<T,Log2Dim)",
    "insertText": "LeafBuffer(const ValueType& val) : mData(new ValueType[SIZE])"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (mOutOfCore = 0 ; this ->)",
    "insertText": "fill(val)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (} } template<T,Index Log2Dim> LeafBuffer<T,Log2Dim)",
    "insertText": "LeafBuffer(const LeafBuffer& other) : mData(nullptr) , mOutOfCore(other.mOutOfCore.load())"
  },
  {
    "label": "FileInfo()",
    "kind": "Method",
    "detail": "Function (mFileInfo = new)",
    "insertText": "FileInfo(*other.mFileInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(other.mData != nullptr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ValueType* target = mData ; const ValueType* source = other . mData ; Index n = SIZE ;)",
    "insertText": "while(n--)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} } template<T,Index Log2Dim> void LeafBuffer<T,Log2Dim)",
    "insertText": "setValue(Index i, const ValueType& val)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < SIZE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(other.isOutOfCore()) this->deallocate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(other.isOutOfCore())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (mOutOfCore .)",
    "insertText": "store(other.mOutOfCore.load(std::memory_order_acquire), std::memory_order_release)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } template<T,Index Log2Dim> void LeafBuffer<T,Log2Dim)",
    "insertText": "fill(const ValueType& val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ValueType* target = mData,* source = other . mData ;)",
    "insertText": "if(!target && !source)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index n = SIZE ;)",
    "insertText": "while(n && math::isExactlyEqual(*target++, *source++))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(mData, other.mData)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (auto tmp = other . mOutOfCore .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (tmp = mOutOfCore .)",
    "insertText": "exchange(std::move(tmp))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (other . mOutOfCore .)",
    "insertText": "store(std::move(tmp), std::memory_order_release)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t n =)",
    "insertText": "sizeof(*this)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (LeafBuffer* self = const_cast<)",
    "insertText": "LeafBuffer(this)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (tbb::spin_mutex::scoped_lock)",
    "insertText": "lock(self->mMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (tbb::spin_mutex::scoped_lock)",
    "insertText": "lock(mMutex)"
  },
  {
    "label": "Log2Dim()",
    "kind": "Method",
    "detail": "Function (LeafBuffer<T,Log2Dim>* self = const_cast<LeafBuffer<T,)",
    "insertText": "Log2Dim(this)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FileInfo>)",
    "insertText": "info(self->mFileInfo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(info.get() != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(info->mapping.get() != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(info->meta.get() != nullptr)"
  },
  {
    "label": "createBuffer()",
    "kind": "Method",
    "detail": "Function (SharedPtr<std::streambuf> buf = info -> mapping ->)",
    "insertText": "createBuffer()"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (std::istream)",
    "insertText": "is(buf.get())"
  },
  {
    "label": "setStreamMetadataPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStreamMetadataPtr(is, info->meta, true)"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (NodeMaskType mask ; is .)",
    "insertText": "seekg(info->maskpos)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "load(is)"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "seekg(info->bufpos)"
  },
  {
    "label": "readCompressedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readCompressedValues(is, self->mData, SIZE, mask, io::getHalfFloat(is))"
  },
  {
    "label": "setOutOfCore()",
    "kind": "Method",
    "detail": "Function (self ->)",
    "insertText": "setOutOfCore(false)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafBuffer(bool on): mData(on)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafBuffer(const NodeMaskType& other): mData(other)"
  },
  {
    "label": "LeafBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafBuffer(const LeafBuffer& other): mData(other.mData)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fill(bool val)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (mData .)",
    "insertText": "set(val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LeafBuffer&)",
    "insertText": "operator(const LeafBuffer& b)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (mData .)",
    "insertText": "set(i, val)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(LeafBuffer& other)"
  }
]