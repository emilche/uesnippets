[
  {
    "label": "DesktopCaptureOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopCaptureOptions"
  },
  {
    "label": "DesktopFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopFrame"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Callback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Callback"
  },
  {
    "label": "Source",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Source"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURER_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<type_traits> # include<vector> # include \" modules / desktop_capture / delegated_source_list_controller . h \" # if)",
    "insertText": "defined(WEBRTC_USE_GIO)"
  },
  {
    "label": "OnCaptureResult()",
    "kind": "Method",
    "detail": "Function (class DesktopCaptureOptions ; class DesktopFrame ; class RTC_EXPORT DesktopCapturer { public : enum class Result { SUCCESS,ERROR_TEMPORARY,ERROR_PERMANENT,MAX_VALUE = ERROR_PERMANENT } ; class Callback { public : void)",
    "insertText": "OnCaptureResult(Result result, std::unique_ptr<DesktopFrame> frame)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Callback()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "defined(CHROMEOS)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else typedef intptr_t SourceId ; # endif)",
    "insertText": "static_assert(std::is_same<SourceId, ScreenId>::value, \"SourceId should be a same type as ScreenId.\")"
  },
  {
    "label": "DesktopCapturer()",
    "kind": "Method",
    "detail": "Function (# endif } ; typedef std::vector<Source> SourceList ; ~)",
    "insertText": "DesktopCapturer()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Callback* callback)"
  },
  {
    "label": "GetDelegatedSourceListController()",
    "kind": "Method",
    "detail": "Function (DelegatedSourceListController*)",
    "insertText": "GetDelegatedSourceListController()"
  },
  {
    "label": "SetSharedMemoryFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedMemoryFactory(std::unique_ptr<SharedMemoryFactory> shared_memory_factory)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "SetExcludedWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedWindow(WindowId window)"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* sources)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "FocusOnSelectedSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FocusOnSelectedSource()"
  },
  {
    "label": "IsOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOccluded(const DesktopVector& pos)"
  },
  {
    "label": "CreateWindowCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateWindowCapturer(const DesktopCaptureOptions& options)"
  },
  {
    "label": "CreateScreenCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateScreenCapturer(const DesktopCaptureOptions& options)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_PIPEWIRE) || defined(WEBRTC_USE_X11) static bool IsRunningUnderWayland()"
  },
  {
    "label": "UpdateResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResolution(uint32_t width, uint32_t height)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if)",
    "insertText": "defined(WEBRTC_USE_GIO) virtual DesktopCaptureMetadata GetMetadata()"
  },
  {
    "label": "CreateRawScreenCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateRawScreenCapturer(const DesktopCaptureOptions& options)"
  }
]