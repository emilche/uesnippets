[
  {
    "label": "UMessagePatternApostropheMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternApostropheMode"
  },
  {
    "label": "UMessagePatternPartType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternPartType"
  },
  {
    "label": "UMessagePatternArgType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternArgType"
  },
  {
    "label": "MessagePatternDoubleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePatternDoubleList"
  },
  {
    "label": "MessagePatternPartsList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePatternPartsList"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "Part",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Part"
  },
  {
    "label": "MessagePattern",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePattern"
  },
  {
    "label": "UMSGPAT_ARG_TYPE_HAS_PLURAL_STYLE()",
    "kind": "Method",
    "detail": "Function (# ifndef __MESSAGEPATTERN_H__ # define __MESSAGEPATTERN_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / parseerr . h \" # include \" unicode / unistr . h \" enum UMessagePatternApostropheMode { UMSGPAT_APOS_DOUBLE_OPTIONAL,UMSGPAT_APOS_DOUBLE_REQUIRED } ; typedef enum UMessagePatternApostropheMode UMessagePatternApostropheMode ; enum UMessagePatternPartType { UMSGPAT_PART_TYPE_MSG_START,UMSGPAT_PART_TYPE_MSG_LIMIT,UMSGPAT_PART_TYPE_SKIP_SYNTAX,UMSGPAT_PART_TYPE_INSERT_CHAR,UMSGPAT_PART_TYPE_REPLACE_NUMBER,UMSGPAT_PART_TYPE_ARG_START,UMSGPAT_PART_TYPE_ARG_LIMIT,UMSGPAT_PART_TYPE_ARG_NUMBER,UMSGPAT_PART_TYPE_ARG_NAME,UMSGPAT_PART_TYPE_ARG_TYPE,UMSGPAT_PART_TYPE_ARG_STYLE,UMSGPAT_PART_TYPE_ARG_SELECTOR,UMSGPAT_PART_TYPE_ARG_INT,UMSGPAT_PART_TYPE_ARG_DOUBLE } ; typedef enum UMessagePatternPartType UMessagePatternPartType ; enum UMessagePatternArgType { UMSGPAT_ARG_TYPE_NONE,UMSGPAT_ARG_TYPE_SIMPLE,UMSGPAT_ARG_TYPE_CHOICE,UMSGPAT_ARG_TYPE_PLURAL,UMSGPAT_ARG_TYPE_SELECT,UMSGPAT_ARG_TYPE_SELECTORDINAL } ; typedef enum UMessagePatternArgType UMessagePatternArgType ; # define)",
    "insertText": "UMSGPAT_ARG_TYPE_HAS_PLURAL_STYLE(argType) \\ ((argType)==UMSGPAT_ARG_TYPE_PLURAL || (argType)==UMSGPAT_ARG_TYPE_SELECTORDINAL)"
  },
  {
    "label": "UMSGPAT_NO_NUMERIC_VALUE()",
    "kind": "Method",
    "detail": "Function (UMSGPAT_ARG_NAME_NOT_NUMBER = - 1,UMSGPAT_ARG_NAME_NOT_VALID = - 2 } ; # define)",
    "insertText": "UMSGPAT_NO_NUMERIC_VALUE((double)(-123456789))"
  },
  {
    "label": "MessagePattern()",
    "kind": "Method",
    "detail": "Function (class MessagePatternPartsList ; class MessagePattern : public UObject { public :)",
    "insertText": "MessagePattern(UErrorCode &errorCode)"
  },
  {
    "label": "MessagePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePattern(UMessagePatternApostropheMode mode, UErrorCode &errorCode)"
  },
  {
    "label": "MessagePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePattern(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "MessagePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePattern(const MessagePattern &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePattern&)",
    "insertText": "operator(const MessagePattern &other)"
  },
  {
    "label": "MessagePattern()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessagePattern()"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (MessagePattern&)",
    "insertText": "parse(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseChoiceStyle()",
    "kind": "Method",
    "detail": "Function (MessagePattern&)",
    "insertText": "parseChoiceStyle(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parsePluralStyle()",
    "kind": "Method",
    "detail": "Function (MessagePattern&)",
    "insertText": "parsePluralStyle(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseSelectStyle()",
    "kind": "Method",
    "detail": "Function (MessagePattern&)",
    "insertText": "parseSelectStyle(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "clearPatternAndSetApostropheMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearPatternAndSetApostropheMode(UMessagePatternApostropheMode mode)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "hashCode()"
  },
  {
    "label": "getApostropheMode()",
    "kind": "Method",
    "detail": "Function (UMessagePatternApostropheMode)",
    "insertText": "getApostropheMode()"
  },
  {
    "label": "autoQuoteApostropheDeep()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "autoQuoteApostropheDeep()"
  },
  {
    "label": "countParts()",
    "kind": "Method",
    "detail": "Function (class Part ; int32_t)",
    "insertText": "countParts()"
  },
  {
    "label": "getPatternIndex()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getPatternIndex(int32_t partIndex)"
  },
  {
    "label": "getSubstring()",
    "kind": "Method",
    "detail": "Function (} UnicodeString)",
    "insertText": "getSubstring(const Part &part)"
  },
  {
    "label": "partSubstringMatches()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "partSubstringMatches(const Part &part, const UnicodeString &s)"
  },
  {
    "label": "getNumericValue()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getNumericValue(const Part &part)"
  },
  {
    "label": "getLimitPartIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getLimitPartIndex(int32_t start)"
  },
  {
    "label": "getPart()",
    "kind": "Method",
    "detail": "Function (int32_t limit =)",
    "insertText": "getPart(start)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} UMessagePatternPartType)",
    "insertText": "getType()"
  },
  {
    "label": "hasNumericValue()",
    "kind": "Method",
    "detail": "Function (} else { return UMSGPAT_ARG_TYPE_NONE ; } } UBool)",
    "insertText": "hasNumericValue(UMessagePatternPartType type)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Part &other)"
  },
  {
    "label": "preParse()",
    "kind": "Method",
    "detail": "Function (} private : class MessagePattern ; const int32_t MAX_LENGTH = 0 xffff ; const int32_t MAX_VALUE = 0 x7fff ; UMessagePatternPartType type ; int32_t index ; uint16_t length ; int16_t value ; int32_t limitPartIndex ; } ; private : void)",
    "insertText": "preParse(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "postParse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postParse()"
  },
  {
    "label": "parseMessage()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseMessage(int32_t index, int32_t msgStartLength, int32_t nestingLevel, UMessagePatternArgType parentType, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseArg()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseArg(int32_t index, int32_t argStartLength, int32_t nestingLevel, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseSimpleStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseSimpleStyle(int32_t index, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseChoiceStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseChoiceStyle(int32_t index, int32_t nestingLevel, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parsePluralOrSelectStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parsePluralOrSelectStyle(UMessagePatternArgType argType, int32_t index, int32_t nestingLevel, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseArgNumber()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseArgNumber(const UnicodeString &s, int32_t start, int32_t limit)"
  },
  {
    "label": "parseArgNumber()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseArgNumber(int32_t start, int32_t limit)"
  },
  {
    "label": "parseDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "parseDouble(int32_t start, int32_t limit, UBool allowInfinity, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "skipWhiteSpace()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipWhiteSpace(int32_t index)"
  },
  {
    "label": "skipIdentifier()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipIdentifier(int32_t index)"
  },
  {
    "label": "skipDouble()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipDouble(int32_t index)"
  },
  {
    "label": "isArgTypeChar()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isArgTypeChar(UChar32 c)"
  },
  {
    "label": "isChoice()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isChoice(int32_t index)"
  },
  {
    "label": "isPlural()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isPlural(int32_t index)"
  },
  {
    "label": "isSelect()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isSelect(int32_t index)"
  },
  {
    "label": "isOrdinal()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isOrdinal(int32_t index)"
  },
  {
    "label": "inMessageFormatPattern()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inMessageFormatPattern(int32_t nestingLevel)"
  },
  {
    "label": "inTopLevelChoiceMessage()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inTopLevelChoiceMessage(int32_t nestingLevel, UMessagePatternArgType parentType)"
  },
  {
    "label": "addPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPart(UMessagePatternPartType type, int32_t index, int32_t length, int32_t value, UErrorCode &errorCode)"
  },
  {
    "label": "addLimitPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLimitPart(int32_t start, UMessagePatternPartType type, int32_t index, int32_t length, int32_t value, UErrorCode &errorCode)"
  },
  {
    "label": "addArgDoublePart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addArgDoublePart(double numericValue, int32_t start, int32_t length, UErrorCode &errorCode)"
  },
  {
    "label": "setParseError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseError(UParseError *parseError, int32_t index)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "init(UErrorCode &errorCode)"
  },
  {
    "label": "copyStorage()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "copyStorage(const MessagePattern &other, UErrorCode &errorCode)"
  }
]