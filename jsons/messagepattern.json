[
  {
    "label": "UMessagePatternApostropheMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternApostropheMode"
  },
  {
    "label": "UMessagePatternApostropheMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternApostropheMode"
  },
  {
    "label": "UMessagePatternPartType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternPartType"
  },
  {
    "label": "UMessagePatternPartType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternPartType"
  },
  {
    "label": "UMessagePatternArgType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternArgType"
  },
  {
    "label": "UMessagePatternArgType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMessagePatternArgType"
  },
  {
    "label": "MessagePatternDoubleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePatternDoubleList"
  },
  {
    "label": "MessagePatternPartsList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePatternPartsList"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "Part",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Part"
  },
  {
    "label": "Part",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Part"
  },
  {
    "label": "MessagePattern",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePattern"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "validateArgumentName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "validateArgumentName(const UnicodeString &name)"
  },
  {
    "label": "preParse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preParse(const UnicodeString &pattern, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "postParse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postParse()"
  },
  {
    "label": "parseMessage()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseMessage(int32_t index, int32_t msgStartLength,\n                         int32_t nestingLevel, UMessagePatternArgType parentType,\n                         UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseArg()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseArg(int32_t index, int32_t argStartLength, int32_t nestingLevel,\n                     UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseSimpleStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseSimpleStyle(int32_t index, UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseChoiceStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseChoiceStyle(int32_t index, int32_t nestingLevel,\n                             UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parsePluralOrSelectStyle()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parsePluralOrSelectStyle(UMessagePatternArgType argType, int32_t index, int32_t nestingLevel,\n                                     UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "parseArgNumber()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "parseArgNumber(const UnicodeString &s, int32_t start, int32_t limit)"
  },
  {
    "label": "parseArgNumber()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "parseArgNumber(msg, start, limit)"
  },
  {
    "label": "parseDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseDouble(int32_t start, int32_t limit, UBool allowInfinity,\n                     UParseError *parseError, UErrorCode &errorCode)"
  },
  {
    "label": "skipWhiteSpace()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipWhiteSpace(int32_t index)"
  },
  {
    "label": "skipIdentifier()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipIdentifier(int32_t index)"
  },
  {
    "label": "skipDouble()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipDouble(int32_t index)"
  },
  {
    "label": "isArgTypeChar()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isArgTypeChar(UChar32 c)"
  },
  {
    "label": "isChoice()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isChoice(int32_t index)"
  },
  {
    "label": "isPlural()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isPlural(int32_t index)"
  },
  {
    "label": "isSelect()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isSelect(int32_t index)"
  },
  {
    "label": "isOrdinal()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isOrdinal(int32_t index)"
  },
  {
    "label": "inMessageFormatPattern()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inMessageFormatPattern(int32_t nestingLevel)"
  },
  {
    "label": "inTopLevelChoiceMessage()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inTopLevelChoiceMessage(int32_t nestingLevel, UMessagePatternArgType parentType)"
  },
  {
    "label": "addPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPart(UMessagePatternPartType type, int32_t index, int32_t length,\n                 int32_t value, UErrorCode &errorCode)"
  },
  {
    "label": "addLimitPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLimitPart(int32_t start,\n                      UMessagePatternPartType type, int32_t index, int32_t length,\n                      int32_t value, UErrorCode &errorCode)"
  },
  {
    "label": "addArgDoublePart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addArgDoublePart(double numericValue, int32_t start, int32_t length, UErrorCode &errorCode)"
  },
  {
    "label": "setParseError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseError(UParseError *parseError, int32_t index)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "init(UErrorCode &errorCode)"
  },
  {
    "label": "copyStorage()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "copyStorage(const MessagePattern &other, UErrorCode &errorCode)"
  }
]