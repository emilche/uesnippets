[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Candidate()",
    "kind": "Method",
    "detail": "Function (# ifndef API_CANDIDATE_H_ # define API_CANDIDATE_H_ # include<limits . h> # include<stdint . h> # include<algorithm> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / network_constants . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { class RTC_EXPORT Candidate { public :)",
    "insertText": "Candidate()"
  },
  {
    "label": "Candidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Candidate(int component, absl::string_view protocol, const rtc::SocketAddress& address, uint32_t priority, absl::string_view username, absl::string_view password, absl::string_view type, uint32_t generation, absl::string_view foundation, uint16_t network_id = 0, uint16_t network_cost = 0)"
  },
  {
    "label": "Candidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Candidate(const Candidate&)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "id()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(id_, id)"
  },
  {
    "label": "component()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "component()"
  },
  {
    "label": "protocol()",
    "kind": "Method",
    "detail": "Function (component_ = component ; } const std::string&)",
    "insertText": "protocol()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(protocol_, protocol)"
  },
  {
    "label": "relay_protocol()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "relay_protocol()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(relay_protocol_, protocol)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} const rtc::SocketAddress&)",
    "insertText": "address()"
  },
  {
    "label": "priority()",
    "kind": "Method",
    "detail": "Function (address_ = address ; } uint32_t)",
    "insertText": "priority()"
  },
  {
    "label": "preference()",
    "kind": "Method",
    "detail": "Function (priority_ = priority ; } float)",
    "insertText": "preference()"
  },
  {
    "label": "set_preference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_preference(float preference)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t prio_val = static_cast<)",
    "insertText": "uint64_t(preference * 127)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (priority_ = static_cast<)",
    "insertText": "uint32_t(std::min(prio_val, static_cast<uint64_t>(UINT_MAX)))"
  },
  {
    "label": "username()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "username()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(username_, username)"
  },
  {
    "label": "password()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "password()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(password_, password)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "type()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(type_, type)"
  },
  {
    "label": "network_name()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "network_name()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(network_name_, network_name)"
  },
  {
    "label": "network_type()",
    "kind": "Method",
    "detail": "Function (} rtc::AdapterType)",
    "insertText": "network_type()"
  },
  {
    "label": "underlying_type_for_vpn()",
    "kind": "Method",
    "detail": "Function (network_type_ = network_type ; } rtc::AdapterType)",
    "insertText": "underlying_type_for_vpn()"
  },
  {
    "label": "generation()",
    "kind": "Method",
    "detail": "Function (underlying_type_for_vpn_ = network_type ; } uint32_t)",
    "insertText": "generation()"
  },
  {
    "label": "set_network_cost()",
    "kind": "Method",
    "detail": "Function (generation_ = generation ; } void)",
    "insertText": "set_network_cost(uint16_t network_cost)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(network_cost, rtc::kNetworkCostMax)"
  },
  {
    "label": "network_cost()",
    "kind": "Method",
    "detail": "Function (network_cost_ = network_cost ; } uint16_t)",
    "insertText": "network_cost()"
  },
  {
    "label": "foundation()",
    "kind": "Method",
    "detail": "Function (network_id_ = network_id ; } const std::string&)",
    "insertText": "foundation()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(foundation_, foundation)"
  },
  {
    "label": "related_address()",
    "kind": "Method",
    "detail": "Function (} const rtc::SocketAddress&)",
    "insertText": "related_address()"
  },
  {
    "label": "tcptype()",
    "kind": "Method",
    "detail": "Function (related_address_ = related_address ; } const std::string&)",
    "insertText": "tcptype()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(tcptype_, tcptype)"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "transport_name()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(transport_name_, transport_name)"
  },
  {
    "label": "url()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "url()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(url_, url)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(const Candidate& c)"
  },
  {
    "label": "MatchesForRemoval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesForRemoval(const Candidate& c)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToSensitiveString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToSensitiveString()"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetPriority(uint32_t type_preference, int network_adapter_preference, int relay_preference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Candidate& o)"
  },
  {
    "label": "ToSanitizedCopy()",
    "kind": "Method",
    "detail": "Function (Candidate)",
    "insertText": "ToSanitizedCopy(bool use_hostname_address, bool filter_related_address)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Assign(std::string& s, absl::string_view view)"
  },
  {
    "label": "ToStringInternal()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToStringInternal(bool sensitive)"
  }
]