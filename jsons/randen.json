[
  {
    "label": "Randen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Randen"
  },
  {
    "label": "Randen()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_RANDEN_H_ # define ABSL_RANDOM_INTERNAL_RANDEN_H_ # include<cstddef> # include \" absl / random / internal / platform . h \" # include \" absl / random / internal / randen_hwaes . h \" # include \" absl / random / internal / randen_slow . h \" # include \" absl / random / internal / randen_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class Randen { public : size_t kStateBytes = RandenTraits::kStateBytes ; size_t kCapacityBytes = RandenTraits::kCapacityBytes ; size_t kSeedBytes = RandenTraits::kSeedBytes ; ~)",
    "insertText": "Randen()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Generate(void* state)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ABSL_RANDOM_INTERNAL_AES_DISPATCH)",
    "insertText": "if(has_crypto_)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Generate(keys_, state)"
  },
  {
    "label": "Absorb()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Absorb(const void* seed, void* state)"
  },
  {
    "label": "Absorb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Absorb(seed, state)"
  }
]