[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UAnyButtonInputBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnyButtonInputBehavior"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputBehavior . h \" # include \" InputState . h \" # include \" Math / Ray . h \" # include \" Math / Vector2D . h \" # include \" Templates / Function . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" AnyButtonInputBehavior . generated . h \" class UObject ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API UAnyButtonInputBehavior()"
  },
  {
    "label": "GetSupportedDevices()",
    "kind": "Method",
    "detail": "Function (EInputDevices)",
    "insertText": "GetSupportedDevices()"
  },
  {
    "label": "IsPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPressed(const FInputDeviceState& input)"
  },
  {
    "label": "IsDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDown(const FInputDeviceState& input)"
  },
  {
    "label": "IsReleased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReleased(const FInputDeviceState& input)"
  },
  {
    "label": "IsDoubleClicked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDoubleClicked(const FInputDeviceState& input)"
  },
  {
    "label": "GetClickPoint()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetClickPoint(const FInputDeviceState& input)"
  },
  {
    "label": "GetWorldRay()",
    "kind": "Method",
    "detail": "Function (FRay)",
    "insertText": "GetWorldRay(const FInputDeviceState& input)"
  },
  {
    "label": "GetDeviceRay()",
    "kind": "Method",
    "detail": "Function (FInputDeviceRay)",
    "insertText": "GetDeviceRay(const FInputDeviceState& input)"
  },
  {
    "label": "GetActiveDevice()",
    "kind": "Method",
    "detail": "Function (EInputDevices)",
    "insertText": "GetActiveDevice()"
  },
  {
    "label": "SetUseLeftMouseButton()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetUseLeftMouseButton()"
  },
  {
    "label": "SetUseMiddleMouseButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseMiddleMouseButton()"
  },
  {
    "label": "SetUseRightMouseButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseRightMouseButton()"
  },
  {
    "label": "SetUseCustomMouseButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseCustomMouseButton(TUniqueFunction<FDeviceButtonState(const FInputDeviceState& Input)>)"
  },
  {
    "label": "FDeviceButtonState()",
    "kind": "Method",
    "detail": "Function (protected : EInputDevices ActiveDevice ; TUniqueFunction<)",
    "insertText": "FDeviceButtonState(const FInputDeviceState& Input)"
  },
  {
    "label": "GetButtonStateFunc()",
    "kind": "Method",
    "detail": "Function (FDeviceButtonState)",
    "insertText": "GetButtonStateFunc(const FInputDeviceState& Input)"
  }
]