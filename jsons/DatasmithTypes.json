[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DATASMITHCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHCORE_API"
  },
  {
    "label": "FDatasmithTextureSampler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Quat . h \" # include \" Math / Vector . h \" enum class EDatasmithCurveInterpMode { Linear,Constant,Cubic } ; class FDatasmithTextureSampler { public :)",
    "insertText": "FDatasmithTextureSampler()"
  },
  {
    "label": "FDatasmithTextureSampler()",
    "kind": "Method",
    "detail": "Function (CoordinateIndex = 0 ; ScaleX = 1 . 0 f ; ScaleY = 1 . 0 f ; OffsetX = 0 . 0 f ; OffsetY = 0 . 0 f ; Rotation = 0 . 0 f ; bInvert = false ; Multiplier = 1 . 0 f ; OutputChannel = 0 ; bCroppedTexture = false ; MirrorX = 0 ; MirrorY = 0 ; })",
    "insertText": "FDatasmithTextureSampler(int InCoordinateIndex, float InSx, float InSy, float InOx, float InOy, float InRotation, float InMultiplier, bool bInInvert, int InOutputChannel, bool InCroppedTexture, int InMirrorX, int InMirrorY)"
  },
  {
    "label": "FDatasmithTransformFrameInfo()",
    "kind": "Method",
    "detail": "Function (CoordinateIndex = InCoordinateIndex ; ScaleX = InSx ; ScaleY = InSy ; OffsetX = InOx ; OffsetY = InOy ; Rotation = InRotation ; Multiplier = InMultiplier ; bInvert = bInInvert ; OutputChannel = InOutputChannel ; bCroppedTexture = InCroppedTexture ; MirrorX = InMirrorX ; MirrorY = InMirrorY ; } int CoordinateIndex ; float ScaleX ; float ScaleY ; float OffsetX ; float OffsetY ; float Rotation ; float Multiplier ; bool bInvert ; int OutputChannel ; bool bCroppedTexture ; int MirrorX ; int MirrorY ; } ; struct FDatasmithTransformFrameInfo {)",
    "insertText": "FDatasmithTransformFrameInfo(int32 InFrameNumber, const FVector& InVec) : FrameNumber(InFrameNumber) , X(InVec.X) , Y(InVec.Y) , Z(InVec.Z)"
  },
  {
    "label": "FDatasmithTransformFrameInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDatasmithTransformFrameInfo(int32 InFrameNumber, const FQuat& InQuat) : FrameNumber(InFrameNumber)"
  },
  {
    "label": "Euler()",
    "kind": "Method",
    "detail": "Function (const FVector EulerAngles = InQuat .)",
    "insertText": "Euler()"
  },
  {
    "label": "FDatasmithTransformFrameInfo()",
    "kind": "Method",
    "detail": "Function (X = EulerAngles . X ; Y = EulerAngles . Y ; Z = EulerAngles . Z ; })",
    "insertText": "FDatasmithTransformFrameInfo(int32 InFrameNumber, double InX, double InY, double InZ) : FrameNumber(InFrameNumber) , X(InX) , Y(InY) , Z(InZ)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDatasmithTransformFrameInfo& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FDatasmithVisibilityFrameInfo()",
    "kind": "Method",
    "detail": "Function (int32 FrameNumber ; double X ; double Y ; double Z ; FDatasmithTransformFrameInfo InvalidFrameInfo ; } ; struct FDatasmithVisibilityFrameInfo {)",
    "insertText": "FDatasmithVisibilityFrameInfo(int32 InFrameNumber, bool bInVisible) : FrameNumber(InFrameNumber) , bVisible(bInVisible)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDatasmithVisibilityFrameInfo& Other)"
  }
]