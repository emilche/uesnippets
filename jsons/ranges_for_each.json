[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Func"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_FOR_EACH_H # define _LIBCPP___ALGORITHM_RANGES_FOR_EACH_H # include<__algorithm / in_fun_result . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__for_each_impl()",
    "kind": "Method",
    "detail": "Function (template<class _Iter,class _Func> using for_each_result = in_fun_result<_Iter,_Func> ; namespace __for_each { struct __fn { private : template<class _Iter,class _Sent,class _Proj,class _Func> _LIBCPP_HIDE_FROM_ABI for_each_result<_Iter,_Func>)",
    "insertText": "__for_each_impl(_Iter __first, _Sent __last, _Func& __func, _Proj& __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : template<input_iterator _Iter,sentinel_for<_Iter> _Sent,class _Proj = identity,indirectly_unary_invocable<projected<_Iter,_Proj>> _Func> _LIBCPP_HIDE_FROM_ABI for_each_result<_Iter,_Func>)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Func __func, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,class _Proj = identity,indirectly_unary_invocable<projected<iterator_t<_Range>,_Proj>> _Func> _LIBCPP_HIDE_FROM_ABI for_each_result<borrowed_iterator_t<_Range>,_Func>)",
    "insertText": "operator()(_Range&& __range, _Func __func, _Proj __proj = {})"
  }
]