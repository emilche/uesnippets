[
  {
    "label": "TGlobalHeapPtrImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGlobalHeapPtrImpl"
  },
  {
    "label": "TGlobalHeapPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGlobalHeapPtr"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "TGlobalHeapPtrImpl()",
    "kind": "Method",
    "detail": "Function (template<T> struct TGlobalHeapPtrImpl : FGlobalHeapRoot,TWriteBarrier<T> {)",
    "insertText": "TGlobalHeapPtrImpl()"
  },
  {
    "label": "TGlobalHeapPtrImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TGlobalHeapPtrImpl(FAccessContext Context, typename TWriteBarrier<T>::TValue Value) : FGlobalHeapRoot() , TWriteBarrier<T>(Context, Value)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitImpl(Visitor)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor)"
  },
  {
    "label": "VisitImpl()",
    "kind": "Method",
    "detail": "Function (} template<TVisitor> void)",
    "insertText": "VisitImpl(TVisitor& Visitor)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(*this, TEXT(\"GlobalHeapPtr\"))"
  },
  {
    "label": "TGlobalHeapPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TGlobalHeapPtr { bool bIsVValue = std::is_same_v<T,VValue> ; using TValue = std::conditional<bIsVValue,VValue,T*>::type ;)",
    "insertText": "TGlobalHeapPtr()"
  },
  {
    "label": "TGlobalHeapPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TGlobalHeapPtr(const TGlobalHeapPtr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TGlobalHeapPtr&)",
    "insertText": "operator(const TGlobalHeapPtr&)"
  },
  {
    "label": "TGlobalHeapPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TGlobalHeapPtr(TGlobalHeapPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TGlobalHeapPtr&)",
    "insertText": "operator(TGlobalHeapPtr&&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FAccessContext Context, TValue NewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Impl ->)",
    "insertText": "Set(Context, NewValue)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (} template<TResult = void> std::enable_if_t<bIsVValue,TResult>)",
    "insertText": "SetNonCellNorPlaceholder(VValue NewValue)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (Impl ->)",
    "insertText": "SetNonCellNorPlaceholder(NewValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} TValue)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TResult = TValue> std::enable_if_t<! bIsVValue,TResult>)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  }
]