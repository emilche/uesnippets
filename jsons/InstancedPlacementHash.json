[
  {
    "label": "FInstancedPlacementHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedPlacementHash"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_EDITORONLY_DATA # include \" Misc / HashBuilder . h \" struct FInstancedPlacementHash { private : int32 MaxHashCellBits = 9 ; struct FKey { int64 X ; int64 Y ; int64 Z ;)",
    "insertText": "FKey()"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKey(int64 InX, int64 InY, int64 InZ) : X(InX), Y(InY), Z(InZ)"
  },
  {
    "label": "GetMinDistSquared()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMinDistSquared(const FVector& Position, const int32 LocalHashCellBits)"
  },
  {
    "label": "CellSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CellSize(1 << LocalHashCellBits)"
  },
  {
    "label": "CellCenter()",
    "kind": "Method",
    "detail": "Function (int32 HalfCellSize = CellSize>> 1 ; FVector)",
    "insertText": "CellCenter(static_cast<FVector::FReal>(X * CellSize + HalfCellSize), static_cast<FVector::FReal>(Y * CellSize + HalfCellSize), static_cast<FVector::FReal>(Z * CellSize + HalfCellSize))"
  },
  {
    "label": "AbsRelativePosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "AbsRelativePosition(Position - CellCenter).GetAbs()"
  },
  {
    "label": "CubeDeltaVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CubeDeltaVector(AbsRelativePosition - HalfCellSize).ComponentMax(FVector::ZeroVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FKey& Key)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (FHashBuilder HashBuilder ; HashBuilder<<Key . X<<Key . Y<<Key . Z ; return HashBuilder .)",
    "insertText": "GetHash()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FKey& Key)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (Ar<<Key . X ; Ar<<Key . Y ; Ar<<Key . Z ; return Ar ; } } ; const int32 HashCellBits ; TMap<FKey,TSet<int32>> CellMap ; FKey)",
    "insertText": "MakeKey(const FVector& Location)"
  },
  {
    "label": "MakeLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "MakeLocation(FKey CellKey)"
  },
  {
    "label": "FInstancedPlacementHash()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FInstancedPlacementHash(int32 InHashCellBits = MaxHashCellBits) : HashCellBits(InHashCellBits)"
  },
  {
    "label": "FInstancedPlacementHash()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FInstancedPlacementHash()"
  },
  {
    "label": "InsertInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertInstance(const FVector& InstanceLocation, int32 InstanceIndex)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (FKey Key =)",
    "insertText": "MakeKey(InstanceLocation)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (CellMap .)",
    "insertText": "FindOrAdd(Key).Add(InstanceIndex)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInstance(const FVector& InstanceLocation, int32 InstanceIndex, bool bChecked = true)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (int32 RemoveCount = CellMap .)",
    "insertText": "FindChecked(Key).Remove(InstanceIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TSet<int32>* Value = CellMap.Find(Key))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Value ->)",
    "insertText": "Remove(InstanceIndex)"
  },
  {
    "label": "SwapInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SwapInstance(const FVector& InstanceLocation, int32 OldIndex, int32 NewIndex, bool bCheckedRemoval = true)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstance(InstanceLocation, OldIndex, bCheckedRemoval)"
  },
  {
    "label": "InsertInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertInstance(InstanceLocation, NewIndex)"
  },
  {
    "label": "IsAnyInstanceInSphere()",
    "kind": "Method",
    "detail": "Function (} template<FunctionType> bool)",
    "insertText": "IsAnyInstanceInSphere(FunctionType InstanceLocationGetter, const FVector& SphereCenter, double SphereRadius)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(IsAnyInstanceInSphere)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (FKey MinKey =)",
    "insertText": "MakeKey(SphereBox.Min)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (FKey MaxKey =)",
    "insertText": "MakeKey(SphereBox.Max)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (FKey)",
    "insertText": "Key(x, y, z)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (auto* SetPtr = CellMap .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "DistSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistSquared(InstanceLocationGetter(InstanceIndex) - SphereCenter).SizeSquared()"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (FKey MinKey =)",
    "insertText": "MakeKey(InBox.Min)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (FKey MaxKey =)",
    "insertText": "MakeKey(InBox.Max)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutInstanceIndices .)",
    "insertText": "Reserve(OutInstanceIndices.Num() + Pair.Value.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutInstanceIndices .)",
    "insertText": "Add(InstanceIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(int64 z = MinKey.Z; z <= MaxKey.Z; ++z)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (auto* SetPtr = CellMap .)",
    "insertText": "Find(FKey(x, y, z))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutInstanceIndices .)",
    "insertText": "Reserve(OutInstanceIndices.Num() + SetPtr->Num())"
  },
  {
    "label": "GetInstancesOverlappingBox()",
    "kind": "Method",
    "detail": "Function (} } } } } } } TArray<int32>)",
    "insertText": "GetInstancesOverlappingBox(const FBox& InBox)"
  },
  {
    "label": "GetInstancesOverlappingBox()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Result ;)",
    "insertText": "GetInstancesOverlappingBox(InBox, Result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 HashCount = 0 ;)",
    "insertText": "for(const auto& Pair : CellMap)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (HashCount + = Pair . Value .)",
    "insertText": "Num()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(HashCount == InCount)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetBounds()"
  },
  {
    "label": "HashBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "HashBounds(ForceInit)"
  },
  {
    "label": "MakeLocation()",
    "kind": "Method",
    "detail": "Function (HashBounds + =)",
    "insertText": "MakeLocation(Pair.Key)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} return HashBounds ; } void)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FInstancedPlacementHash& Hash)"
  }
]