[
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FUObjectThreadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUObjectThreadContext"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FArchiveDiffStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveDiffStats"
  },
  {
    "label": "FArchiveStackTraceIgnoreScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveStackTraceIgnoreScope"
  },
  {
    "label": "FArchiveStackTraceDisabledScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveStackTraceDisabledScope"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FDeleteByFree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleteByFree"
  },
  {
    "label": "FArchiveDiffInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveDiffInfo"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FCallstackAtOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstackAtOffset"
  },
  {
    "label": "FCallstackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstackData"
  },
  {
    "label": "FArchiveStackTraceReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveStackTraceReader"
  },
  {
    "label": "FSerializeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializeData"
  },
  {
    "label": "FArchiveDiffStats()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Serialization / Archive . h \" # include \" Serialization / LargeMemoryReader . h \" # include \" Serialization / LargeMemoryWriter . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FLinkerLoad ; class FProperty ; class FUObjectThreadContext ; class UObject ; struct FArchiveDiffStats { int64 DiffSize ; int64 NumDiffs ; int64 OriginalFileTotalSize ; int64 NewFileTotalSize ;)",
    "insertText": "FArchiveDiffStats() : DiffSize(0) , NumDiffs(0) , OriginalFileTotalSize(0) , NewFileTotalSize(0)"
  },
  {
    "label": "FArchiveStackTraceIgnoreScope()",
    "kind": "Method",
    "detail": "Function (} } ; class FArchiveStackTraceIgnoreScope { const bool bIgnore ; public :)",
    "insertText": "FArchiveStackTraceIgnoreScope(bool bInIgnore = true)"
  },
  {
    "label": "FArchiveStackTraceIgnoreScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveStackTraceIgnoreScope()"
  },
  {
    "label": "FArchiveStackTraceDisabledScope()",
    "kind": "Method",
    "detail": "Function (} ; class FArchiveStackTraceDisabledScope { public :)",
    "insertText": "FArchiveStackTraceDisabledScope()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::ArchiveStackTrace { struct FPackageData { uint8* Data = nullptr ; int64 Size = 0 ; int64 HeaderSize = 0 ; int64 StartOffset = 0 ; } ; struct FDeleteByFree { void)",
    "insertText": "operator()(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "LoadPackageIntoMemory()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "LoadPackageIntoMemory(const TCHAR* InFilename, FPackageData& OutPackageData, TUniquePtr<uint8, FDeleteByFree>& OutLoadedBytes)"
  },
  {
    "label": "ForceKillPackageAndLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceKillPackageAndLinker(FLinkerLoad* Linker)"
  },
  {
    "label": "ShouldIgnoreDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIgnoreDiff()"
  },
  {
    "label": "ShouldBypassDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBypassDiff()"
  },
  {
    "label": "FArchiveDiffInfo()",
    "kind": "Method",
    "detail": "Function (} struct FArchiveDiffInfo { int64 Offset ; int64 Size ;)",
    "insertText": "FArchiveDiffInfo() : Offset(0) , Size(0)"
  },
  {
    "label": "FArchiveDiffInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FArchiveDiffInfo(int64 InOffset, int64 InSize) : Offset(InOffset) , Size(InSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FArchiveDiffInfo& InOther)"
  },
  {
    "label": "ContainsOffset()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ContainsOffset(int64 Offset)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (public : struct FCallstackAtOffset { int64 Offset = - 1 ; uint32 Callstack = 0 ; bool bIgnore = false ; } ; struct FCallstackData { TUniquePtr<ANSICHAR [ ]> Callstack ; FString SerializedObjectName ; FProperty* SerializedProp = nullptr ; FString SerializedPropertyName ;)",
    "insertText": "FCallstackData()"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(TUniquePtr<ANSICHAR[]>&& InCallstack, UObject* InSerializedObject, FProperty* InSerializedProperty)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(FCallstackData&&)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(const FCallstackData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCallstackData&)",
    "insertText": "operator(FCallstackData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCallstackData&)",
    "insertText": "operator(const FCallstackData&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const TCHAR* CallstackCutoffText)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (FCallstackData)",
    "insertText": "Clone()"
  },
  {
    "label": "FArchiveCallstacks()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FArchiveCallstacks(UObject* InAsset)"
  },
  {
    "label": "GetAssetClass()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAssetClass()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(int64 Offset, int64 Length, UObject* SerializedObject, FProperty* SerializedProperty, TArrayView<const FName> DebugDataStack, bool bIsCollectingCallstacks, bool bCollectCurrentCallstack, int32 StackIgnoreCount)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FArchiveCallstacks& Other, int64 Offset = 0)"
  },
  {
    "label": "GetCallstackIndexAtOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCallstackIndexAtOffset(int64 Offset, int32 MinOffsetIndex = 0)"
  },
  {
    "label": "GetCallstack()",
    "kind": "Method",
    "detail": "Function (const FCallstackAtOffset&)",
    "insertText": "GetCallstack(int32 CallstackIndex)"
  },
  {
    "label": "FArchiveStackTraceWriter()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS ;)",
    "insertText": "FArchiveStackTraceWriter(FArchive& InInner, FArchiveCallstacks& InCallstacks, const FArchiveDiffMap* InDiffMap = nullptr, int64 InDiffMapStartOffset = 0)"
  },
  {
    "label": "FArchiveStackTraceWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveStackTraceWriter()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "Serialize(void* Data, int64 Length)"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PushDebugDataString(const FName& DebugData)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (DebugDataStack .)",
    "insertText": "Push(DebugData)"
  },
  {
    "label": "PopDebugDataString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopDebugDataString()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (DebugDataStack .)",
    "insertText": "Pop()"
  },
  {
    "label": "GetDiffMap()",
    "kind": "Method",
    "detail": "Function (} # endif const FArchiveDiffMap&)",
    "insertText": "GetDiffMap()"
  },
  {
    "label": "SetDisableInnerArchive()",
    "kind": "Method",
    "detail": "Function (FArchiveDiffMap Empty ; return DiffMap ! = nullptr ?* DiffMap : Empty ; } void)",
    "insertText": "SetDisableInnerArchive(bool bDisable)"
  },
  {
    "label": "GetStackIgnoreCount()",
    "kind": "Method",
    "detail": "Function (bInnerArchiveDisabled = bDisable ; } int32)",
    "insertText": "GetStackIgnoreCount()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (StackIgnoreCount = IgnoreCount ; } struct FPackageData { uint8* Data = nullptr ; int64 Size = 0 ; int64 HeaderSize = 0 ; int64 StartOffset = 0 ; } ; using EPackageHeaderFormat = ICookedPackageWriter::EPackageHeaderFormat ; void)",
    "insertText": "Compare(const FPackageData& SourcePackage, const FPackageData& DestPackage, const FArchiveCallstacks& Callstacks, const FArchiveDiffMap& DiffMap, const TCHAR* AssetFilename, const TCHAR* CallstackCutoffText, const int64 MaxDiffsToLog, int32& InOutDiffsLogged, TMap<FName, FArchiveDiffStats>& OutStats, bool bSuppressLogging = false)"
  },
  {
    "label": "GenerateDiffMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDiffMap(const FPackageData& SourcePackage, const FPackageData& DestPackage, const FArchiveCallstacks& Callstacks, int32 MaxDiffsToFind, FArchiveDiffMap& OutDiffMap)"
  },
  {
    "label": "DumpPackageHeaderDiffs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpPackageHeaderDiffs(const FPackageData& SourcePackage, const FPackageData& DestPackage, const FString& AssetFilename, const int32 MaxDiffsToLog, const EPackageHeaderFormat PackageHeaderFormat = EPackageHeaderFormat::PackageFileSummary)"
  },
  {
    "label": "CreateLinkerForPackage()",
    "kind": "Method",
    "detail": "Function (FLinkerLoad*)",
    "insertText": "CreateLinkerForPackage(FUObjectSerializeContext* LoadContext, const FString& InPackageName, const FString& InFilename, const FPackageData& PackageData)"
  },
  {
    "label": "FArchiveStackTraceMemoryWriter()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS ;)",
    "insertText": "FArchiveStackTraceMemoryWriter(FArchiveCallstacks& Callstacks, const FArchiveDiffMap* DiffMap = nullptr, const int64 DiffMapOffset = 0, const int64 PreAllocateBytes = 0, bool bIsPersistent = false, const TCHAR* Filename = nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "Serialize(void* Memory, int64 Length)"
  },
  {
    "label": "FArchiveStackTrace()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS ; using FPackageData = FArchiveStackTraceWriter::FPackageData ;)",
    "insertText": "FArchiveStackTrace(UObject* InAsset, const TCHAR* InFilename, bool bInCollectCallstacks = true, const FArchiveDiffMap* InDiffMap = nullptr)"
  },
  {
    "label": "FArchiveStackTrace()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArchiveStackTrace()"
  },
  {
    "label": "GetCallstacks()",
    "kind": "Method",
    "detail": "Function (FArchiveCallstacks&)",
    "insertText": "GetCallstacks()"
  },
  {
    "label": "CompareWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareWith(const TCHAR* InFilename, const int64 TotalHeaderSize, const TCHAR* CallstackCutoffText, const int32 MaxDiffsToLog, TMap<FName, FArchiveDiffStats>& OutStats)"
  },
  {
    "label": "CompareWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareWith(const FPackageData& SourcePackage, const TCHAR* FileDisplayName, const int64 TotalHeaderSize, const TCHAR* CallstackCutoffText, const int32 MaxDiffsToLog, TMap<FName, FArchiveDiffStats>& OutStats, const FArchiveStackTraceWriter::EPackageHeaderFormat PackageHeaderFormat = FArchiveStackTraceWriter::EPackageHeaderFormat::PackageFileSummary)"
  },
  {
    "label": "GenerateDiffMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDiffMap(const TCHAR* InFilename, int64 TotalHeaderSize, int32 MaxDiffsToFind, FArchiveDiffMap& OutDiffMap)"
  },
  {
    "label": "GenerateDiffMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDiffMap(const FPackageData& SourcePackage, int64 TotalHeaderSize, int32 MaxDiffsToFind, FArchiveDiffMap& OutDiffMap)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const TCHAR* InFilename, int64 BufferSize, const uint8* BufferData)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const FPackageData& SourcePackage, int64 BufferSize, const uint8* BufferData)"
  },
  {
    "label": "LoadPackageIntoMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadPackageIntoMemory(const TCHAR* InFilename, FPackageData& OutPackageData, TUniquePtr<uint8, UE::ArchiveStackTrace::FDeleteByFree>& OutLoadedBytes)"
  },
  {
    "label": "FSerializeData()",
    "kind": "Method",
    "detail": "Function (private : FArchiveCallstacks Callstacks ; FArchiveStackTraceWriter StackTraceWriter ; PRAGMA_ENABLE_DEPRECATION_WARNINGS ; } ; class FArchiveStackTraceReader : public FLargeMemoryReader { public : struct FSerializeData {)",
    "insertText": "FSerializeData() : Offset(0) , Size(0) , Count(0) , Object(nullptr) , PropertyName(NAME_None)"
  },
  {
    "label": "FSerializeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSerializeData(int64 InOffset, int64 InSize, UObject* InObject, FProperty* InProperty)"
  },
  {
    "label": "IsContiguousSerialization()",
    "kind": "Method",
    "detail": "Function (int64 Offset ; int64 Size ; int64 Count ; UObject* Object ; FName PropertyName ; FString FullPropertyName ; bool)",
    "insertText": "IsContiguousSerialization(const FSerializeData& Other)"
  },
  {
    "label": "FArchiveStackTraceReader()",
    "kind": "Method",
    "detail": "Function (} } ; private : TArray<FSerializeData> SerializeTrace ; FUObjectThreadContext& ThreadContext ; public :)",
    "insertText": "FArchiveStackTraceReader(const TCHAR* InFilename, const uint8* InData, const int64 Num)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* OutData, int64 Num)"
  },
  {
    "label": "GetSerializeTrace()",
    "kind": "Method",
    "detail": "Function (const TArray<FSerializeData>&)",
    "insertText": "GetSerializeTrace()"
  }
]