[
  {
    "label": "_OVERLAPPED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_OVERLAPPED"
  },
  {
    "label": "tagMSG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagMSG"
  },
  {
    "label": "tagTOUCHINPUT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagTOUCHINPUT"
  },
  {
    "label": "tagPOINTER_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagPOINTER_INFO"
  },
  {
    "label": "_RTL_SRWLOCK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_RTL_SRWLOCK"
  },
  {
    "label": "_GUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_GUID"
  },
  {
    "label": "tagLOGFONTW",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagLOGFONTW"
  },
  {
    "label": "_FILETIME",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_FILETIME"
  },
  {
    "label": "tagMENUITEMINFOW",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagMENUITEMINFOW"
  },
  {
    "label": "tagNMHDR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagNMHDR"
  },
  {
    "label": "_SP_DEVINFO_DATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SP_DEVINFO_DATA"
  },
  {
    "label": "tagDVTARGETDEVICE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagDVTARGETDEVICE"
  },
  {
    "label": "tagFORMATETC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagFORMATETC"
  },
  {
    "label": "_WIN32_FIND_DATAW",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_WIN32_FIND_DATAW"
  },
  {
    "label": "_PROCESS_INFORMATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_PROCESS_INFORMATION"
  },
  {
    "label": "_SECURITY_CAPABILITIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SECURITY_CAPABILITIES"
  },
  {
    "label": "_ACL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ACL"
  },
  {
    "label": "CHROME_SRWLOCK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_SRWLOCK"
  },
  {
    "label": "CHROME_CONDITION_VARIABLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_CONDITION_VARIABLE"
  },
  {
    "label": "CHROME_LUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_LUID"
  },
  {
    "label": "CHROME_WIN32_FIND_DATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_WIN32_FIND_DATA"
  },
  {
    "label": "CHROME_FORMATETC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_FORMATETC"
  },
  {
    "label": "CHROME_POINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_POINT"
  },
  {
    "label": "CHROME_MSG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHROME_MSG"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_WINDOWS_TYPES_H_ # define BASE_WIN_WINDOWS_TYPES_H_ # include<concurrencysal . h> # include<sal . h> # include<specstrings . h> # include \" base / win / win_handle_types . h \" # ifdef __cplusplus \" C \" { # endif typedef unsigned long DWORD ; typedef long LONG ; typedef __int64 LONGLONG ; typedef unsigned __int64 ULONGLONG ; # define VOID void typedef char CHAR ; typedef short SHORT ; typedef long LONG ; typedef int INT ; typedef unsigned int UINT ; typedef unsigned int* PUINT ; typedef unsigned __int64 UINT64 ; typedef void* LPVOID ; typedef void* PVOID ; typedef void* HANDLE ; typedef int BOOL ; typedef unsigned char BYTE ; typedef BYTE BOOLEAN ; typedef DWORD ULONG ; typedef unsigned short WORD ; typedef WORD UWORD ; typedef WORD ATOM ; # if)",
    "insertText": "defined(_WIN64)"
  },
  {
    "label": "_Return_type_success_()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int64 UINT_PTR,* PUINT_PTR ; typedef __int64 LONG_PTR,* PLONG_PTR ; typedef unsigned __int64 ULONG_PTR,* PULONG_PTR ; # else typedef __w64 int INT_PTR,* PINT_PTR ; typedef __w64 unsigned int UINT_PTR,* PUINT_PTR ; typedef __w64 long LONG_PTR,* PLONG_PTR ; typedef __w64 unsigned long ULONG_PTR,* PULONG_PTR ; # endif typedef UINT_PTR WPARAM ; typedef LONG_PTR LPARAM ; typedef LONG_PTR LRESULT ; # define LRESULT LONG_PTR typedef)",
    "insertText": "_Return_type_success_(return >= 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (typedef ULONG_PTR SIZE_T,* PSIZE_T ; typedef LONG_PTR SSIZE_T,* PSSIZE_T ; typedef DWORD ACCESS_MASK ; typedef ACCESS_MASK REGSAM ; typedef LONG NTSTATUS ; # ifndef _REFGUID_DEFINED # define _REFGUID_DEFINED # define REFGUID const GUID& # endif typedef LPVOID HINTERNET ; typedef HICON HCURSOR ; typedef HINSTANCE HMODULE ; typedef PVOID LSA_HANDLE ; typedef PVOID HDEVINFO ; typedef struct _OVERLAPPED OVERLAPPED ; typedef struct tagMSG MSG,* PMSG,* NPMSG,* LPMSG ; typedef struct tagTOUCHINPUT TOUCHINPUT ; typedef struct tagPOINTER_INFO POINTER_INFO ; typedef struct _RTL_SRWLOCK RTL_SRWLOCK ; typedef RTL_SRWLOCK SRWLOCK,* PSRWLOCK ; typedef struct _GUID GUID ; typedef GUID CLSID ; typedef GUID IID ; typedef struct tagLOGFONTW LOGFONTW,* PLOGFONTW,* NPLOGFONTW,* LPLOGFONTW ; typedef LOGFONTW LOGFONT ; typedef struct _FILETIME FILETIME ; typedef struct tagMENUITEMINFOW MENUITEMINFOW,MENUITEMINFO ; typedef struct tagNMHDR NMHDR ; typedef struct _SP_DEVINFO_DATA SP_DEVINFO_DATA ; typedef PVOID PSID ; typedef HANDLE HLOCAL ; typedef WORD CLIPFORMAT ; typedef struct tagDVTARGETDEVICE DVTARGETDEVICE ; typedef struct tagFORMATETC FORMATETC ; typedef struct _WIN32_FIND_DATAW WIN32_FIND_DATAW ; typedef WIN32_FIND_DATAW WIN32_FIND_DATA ; typedef UINT_PTR SOCKET ; typedef struct _PROCESS_INFORMATION PROCESS_INFORMATION ; typedef struct _SECURITY_CAPABILITIES SECURITY_CAPABILITIES ; typedef struct _ACL ACL ; struct CHROME_SRWLOCK { PVOID Ptr ; } ; struct CHROME_CONDITION_VARIABLE { PVOID Ptr ; } ; struct CHROME_LUID { DWORD LowPart ; LONG HighPart ; bool)",
    "insertText": "operator(CHROME_LUID const& that)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; struct CHROME_WIN32_FIND_DATA { DWORD buffer [ 5 9 2 /)",
    "insertText": "sizeof(DWORD)"
  },
  {
    "label": "INVALID_HANDLE_VALUE()",
    "kind": "Method",
    "detail": "Function (} ; struct CHROME_FORMATETC { CLIPFORMAT cfFormat ; DVTARGETDEVICE* ptd ; DWORD dwAspect ; LONG lindex ; DWORD tymed ; } ; struct CHROME_POINT { LONG x ; LONG y ; } ; struct CHROME_MSG { HWND hwnd ; UINT message ; WPARAM wParam ; LPARAM lParam ; DWORD time ; CHROME_POINT pt ; } ; # ifndef INVALID_HANDLE_VALUE # define)",
    "insertText": "INVALID_HANDLE_VALUE((HANDLE)(LONG_PTR)-1) #endif #define TLS_OUT_OF_INDEXES ((DWORD)0xFFFFFFFF) #define HTNOWHERE 0 #define MAX_PATH 260 #define CS_GLOBALCLASS 0x4000 #define ERROR_SUCCESS 0L #define ERROR_FILE_NOT_FOUND 2L #define ERROR_ACCESS_DENIED 5L #define ERROR_INVALID_HANDLE 6L #define ERROR_SHARING_VIOLATION 32L #define ERROR_LOCK_VIOLATION 33L #define ERROR_MORE_DATA 234L #define REG_BINARY ( 3ul ) #define REG_NONE ( 0ul ) #define STATUS_PENDING ((DWORD )0x00000103L) #define STILL_ACTIVE STATUS_PENDING #define SUCCEEDED(hr) (((HRESULT)(hr)) >= 0) #define FAILED(hr) (((HRESULT)(hr)) < 0) #define HKEY_CLASSES_ROOT (( HKEY ) (ULONG_PTR)((LONG)0x80000000) ) #define HKEY_LOCAL_MACHINE (( HKEY ) (ULONG_PTR)((LONG)0x80000002) ) #define HKEY_CURRENT_USER (( HKEY ) (ULONG_PTR)((LONG)0x80000001) ) #define KEY_QUERY_VALUE (0x0001) #define KEY_SET_VALUE (0x0002) #define KEY_CREATE_SUB_KEY (0x0004) #define KEY_ENUMERATE_SUB_KEYS (0x0008) #define KEY_NOTIFY (0x0010) #define KEY_CREATE_LINK (0x0020) #define KEY_WOW64_32KEY (0x0200) #define KEY_WOW64_64KEY (0x0100) #define KEY_WOW64_RES (0x0300) #define PROCESS_QUERY_INFORMATION (0x0400) #define READ_CONTROL (0x00020000L) #define SYNCHRONIZE (0x00100000L) #define STANDARD_RIGHTS_READ (READ_CONTROL) #define STANDARD_RIGHTS_WRITE (READ_CONTROL) #define STANDARD_RIGHTS_ALL (0x001F0000L) #define KEY_READ ((STANDARD_RIGHTS_READ |\\ KEY_QUERY_VALUE |\\ KEY_ENUMERATE_SUB_KEYS |\\ KEY_NOTIFY) \\ & \\ (~SYNCHRONIZE)) #define KEY_WRITE ((STANDARD_RIGHTS_WRITE |\\ KEY_SET_VALUE |\\ KEY_CREATE_SUB_KEY) \\ & \\ (~SYNCHRONIZE)) #define KEY_ALL_ACCESS ((STANDARD_RIGHTS_ALL |\\ KEY_QUERY_VALUE |\\ KEY_SET_VALUE |\\ KEY_CREATE_SUB_KEY |\\ KEY_ENUMERATE_SUB_KEYS |\\ KEY_NOTIFY |\\ KEY_CREATE_LINK) \\ & \\ (~SYNCHRONIZE))"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (0 } # define SRWLOCK_INIT RTL_SRWLOCK_INIT # define DECLSPEC_IMPORT)",
    "insertText": "__declspec(dllimport) #define WINBASEAPI DECLSPEC_IMPORT #define WINUSERAPI DECLSPEC_IMPORT #define WINAPI __stdcall #define APIENTRY WINAPI #define CALLBACK __stdcall WINBASEAPI _Releases_exclusive_lock_(*SRWLock) VOID WINAPI ReleaseSRWLockExclusive(_Inout_ PSRWLOCK SRWLock)"
  },
  {
    "label": "TryAcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI BOOLEAN WINAPI)",
    "insertText": "TryAcquireSRWLockExclusive(_Inout_ PSRWLOCK SRWLock)"
  },
  {
    "label": "GetMessageW()",
    "kind": "Method",
    "detail": "Function (WINUSERAPI BOOL WINAPI)",
    "insertText": "GetMessageW(_Out_ LPMSG lpMsg, _In_opt_ HWND hWnd, _In_ UINT wMsgFilterMin, _In_ UINT wMsgFilterMax)"
  },
  {
    "label": "TlsGetValue()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI LPVOID WINAPI)",
    "insertText": "TlsGetValue(_In_ DWORD dwTlsIndex)"
  },
  {
    "label": "TlsSetValue()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI BOOL WINAPI)",
    "insertText": "TlsSetValue(_In_ DWORD dwTlsIndex, _In_opt_ LPVOID lpTlsValue)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI _Check_return_ _Post_equals_last_error_ DWORD WINAPI)",
    "insertText": "GetLastError(VOID)"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI VOID WINAPI)",
    "insertText": "SetLastError(_In_ DWORD dwErrCode)"
  },
  {
    "label": "TerminateProcess()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI BOOL WINAPI)",
    "insertText": "TerminateProcess(_In_ HANDLE hProcess, _In_ UINT uExitCode)"
  },
  {
    "label": "LocalFree()",
    "kind": "Method",
    "detail": "Function (WINBASEAPI HLOCAL WINAPI)",
    "insertText": "LocalFree(_In_ HLOCAL hMem)"
  },
  {
    "label": "ChromeToWindowsType()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } WIN32_FIND_DATA*)",
    "insertText": "ChromeToWindowsType(CHROME_WIN32_FIND_DATA* p)"
  },
  {
    "label": "ChromeToWindowsType()",
    "kind": "Method",
    "detail": "Function (} const WIN32_FIND_DATA*)",
    "insertText": "ChromeToWindowsType(const CHROME_WIN32_FIND_DATA* p)"
  },
  {
    "label": "ChromeToWindowsType()",
    "kind": "Method",
    "detail": "Function (} FORMATETC*)",
    "insertText": "ChromeToWindowsType(CHROME_FORMATETC* p)"
  },
  {
    "label": "ChromeToWindowsType()",
    "kind": "Method",
    "detail": "Function (} const FORMATETC*)",
    "insertText": "ChromeToWindowsType(const CHROME_FORMATETC* p)"
  },
  {
    "label": "ChromeToWindowsType()",
    "kind": "Method",
    "detail": "Function (} MSG*)",
    "insertText": "ChromeToWindowsType(CHROME_MSG* p)"
  }
]