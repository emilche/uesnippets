[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "SProjectLauncherProjectPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherProjectPicker"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" class Error ; class SProjectLauncherProjectPicker : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherProjectPicker)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(ILauncherProfilePtr, LaunchProfile) SLATE_END_ARGS() public: ~SProjectLauncherProjectPicker()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "MakeProjectMenuWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "MakeProjectMenuWidget()"
  },
  {
    "label": "MakeProjectWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeProjectWidget()"
  },
  {
    "label": "HandleProjectComboButtonText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "HandleProjectComboButtonText()"
  },
  {
    "label": "HandleProjectComboButtonToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleProjectComboButtonToolTip()"
  },
  {
    "label": "HandleAnyProjectClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnyProjectClicked(FString ProjectPath)"
  },
  {
    "label": "HandleProjectMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProjectMenuEntryClicked(FString ProjectPath)"
  },
  {
    "label": "HandleValidationErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleValidationErrorIconVisibility(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "SetProjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectPath(FString ProjectPath)"
  }
]