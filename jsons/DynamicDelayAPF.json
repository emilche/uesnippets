[
  {
    "label": "FDynamicDelayAPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicDelayAPF"
  },
  {
    "label": "FDynamicDelayAPF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IntegerDelay . h \" # include \" BufferVectorOperations . h \" # include \" AllPassFractionalDelay . h \" # include \" LinearInterpFractionalDelay . h \" namespace Audio { class FDynamicDelayAPF { public :)",
    "insertText": "FDynamicDelayAPF(float InG, int32 InMinDelay, int32 InMaxDelay, int32 InMaxNumInternalBufferSamples, float InSampleRate)"
  },
  {
    "label": "FDynamicDelayAPF()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicDelayAPF()"
  },
  {
    "label": "SetG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetG(float InG)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "SetValue(InG, EaseTimeInSec)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAudio(const FAlignedFloatBuffer& InSamples, const FAlignedFloatBuffer& InDelays, FAlignedFloatBuffer& OutSamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetEaseTimeInSec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEaseTimeInSec(float InEaseTimeInSec)"
  },
  {
    "label": "ProcessAudioBlock()",
    "kind": "Method",
    "detail": "Function (EaseTimeInSec = InEaseTimeInSec ; } protected : void)",
    "insertText": "ProcessAudioBlock(const float* InSamples, const FAlignedFloatBuffer& InFractionalDelays, const int32 InNum, float* OutSamples)"
  }
]