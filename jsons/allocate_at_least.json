[
  {
    "label": "_Pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pointer"
  },
  {
    "label": "allocation_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "allocation_result"
  },
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "__allocation_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__allocation_result"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_ALLOCATE_AT_LEAST_H # define _LIBCPP___MEMORY_ALLOCATE_AT_LEAST_H # include<__config> # include<__memory / allocator_traits . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "allocate_at_least()",
    "kind": "Method",
    "detail": "Function (_Pointer ptr ; size_t count ; } ; template<class _Alloc> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI allocation_result<allocator_traits<_Alloc>::pointer>)",
    "insertText": "allocate_at_least(_Alloc& __alloc, size_t __n)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} else { return { __alloc .)",
    "insertText": "allocate(__n)"
  },
  {
    "label": "__allocate_at_least()",
    "kind": "Method",
    "detail": "Function (} } template<class _Alloc> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__allocate_at_least(_Alloc& __alloc, size_t __n)"
  }
]