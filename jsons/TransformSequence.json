[
  {
    "label": "TTransformSequence3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTransformSequence3"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TransformTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TTransformSequence3 { protected : TArray<TTransformSRT3<RealType>,TInlineAllocator<2>> Transforms ; public : void)",
    "insertText": "Append(const TTransformSRT3<RealType>& Transform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "Add(Transform)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const FTransform& Transform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "Add(TTransformSRT3<RealType>(Transform))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const TTransformSequence3<RealType>& SequenceToAppend)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Transform)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetTransforms()",
    "kind": "Method",
    "detail": "Function (} const TArray<TTransformSRT3<RealType>,TInlineAllocator<2>>&)",
    "insertText": "GetTransforms()"
  },
  {
    "label": "AppendInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendInverse(TTransformSRT3<RealType>(Transform), Tolerance)"
  },
  {
    "label": "AppendInverse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendInverse(const TTransformSRT3<RealType>& Transform, const RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Transform.InverseUnsafe(Tolerance))"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (} else { TTransformSRT3<RealType> InvS = TTransformSRT3<RealType)",
    "insertText": "Identity()"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (InvS .)",
    "insertText": "SetScale(TTransformSRT3<RealType>::GetSafeScaleReciprocal(Transform.GetScale3D(), Tolerance))"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (TTransformSRT3<RealType> InvRT = Transform ; InvRT .)",
    "insertText": "SetScale(TVector<RealType>::One())"
  },
  {
    "label": "InverseUnsafe()",
    "kind": "Method",
    "detail": "Function (InvRT = InvRT .)",
    "insertText": "InverseUnsafe()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(InvRT)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(InvS)"
  },
  {
    "label": "AppendInverse()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AppendInverse(const TTransformSequence3<RealType>& SequenceToAppend, const RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "AppendInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendInverse(Transforms[Idx], Tolerance)"
  },
  {
    "label": "GetInverse()",
    "kind": "Method",
    "detail": "Function (} } TTransformSequence3<RealType>)",
    "insertText": "GetInverse(const RealType Tolerance = TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TTransformSequence3<RealType> InverseTransformSeq ;)",
    "insertText": "for(int32 Idx = Transforms.Num() - 1; Idx >= 0; --Idx)"
  },
  {
    "label": "AppendInverse()",
    "kind": "Method",
    "detail": "Function (InverseTransformSeq .)",
    "insertText": "AppendInverse(Transforms[Idx])"
  },
  {
    "label": "GetAccumulatedScale()",
    "kind": "Method",
    "detail": "Function (} return InverseTransformSeq ; } TVector<RealType>)",
    "insertText": "GetAccumulatedScale()"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> FinalScale = TVector<RealType)",
    "insertText": "One()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (FinalScale = FinalScale* Transform .)",
    "insertText": "GetScale()"
  },
  {
    "label": "WillInvert()",
    "kind": "Method",
    "detail": "Function (} return FinalScale ; } bool)",
    "insertText": "WillInvert()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealType Det = 1 ;)",
    "insertText": "for(const TTransformSRT3<RealType>& Transform : Transforms)"
  },
  {
    "label": "GetDeterminant()",
    "kind": "Method",
    "detail": "Function (Det* = Transform .)",
    "insertText": "GetDeterminant()"
  },
  {
    "label": "ClearScales()",
    "kind": "Method",
    "detail": "Function (} return Det<0 ; } void)",
    "insertText": "ClearScales()"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (} } TVector<RealType>)",
    "insertText": "TransformPosition(UE::Math::TVector<RealType> P)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (P = Transform .)",
    "insertText": "TransformPosition(P)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (} return P ; } TVector<RealType>)",
    "insertText": "InverseTransformPosition(UE::Math::TVector<RealType> P)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (P = Transforms [ k ] .)",
    "insertText": "InverseTransformPosition(P)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} return P ; } TVector<RealType>)",
    "insertText": "TransformVector(UE::Math::TVector<RealType> V)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (V = Transform .)",
    "insertText": "TransformVector(V)"
  },
  {
    "label": "TransformNormal()",
    "kind": "Method",
    "detail": "Function (} return V ; } TVector<RealType>)",
    "insertText": "TransformNormal(UE::Math::TVector<RealType> Normal)"
  },
  {
    "label": "TransformNormal()",
    "kind": "Method",
    "detail": "Function (Normal = Transform .)",
    "insertText": "TransformNormal(Normal)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} return Normal ; } template<TransformsEquivalentFunc> bool)",
    "insertText": "IsEquivalent(const TTransformSequence3<RealType>& OtherSeq, TransformsEquivalentFunc TransformsTest)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAllTransformsEqual = true ;)",
    "insertText": "for(int32 k = 0; k < N && bAllTransformsEqual; ++k)"
  },
  {
    "label": "TransformsTest()",
    "kind": "Method",
    "detail": "Function (bAllTransformsEqual = bAllTransformsEqual&&)",
    "insertText": "TransformsTest(Transforms[k], OtherSeq.Transforms[k])"
  }
]