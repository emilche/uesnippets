[
  {
    "label": "TSparseMatrixAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSparseMatrixAssembler"
  },
  {
    "label": "FPositionConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPositionConstraint"
  },
  {
    "label": "FUVConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVConstraint"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VectorTypes . h \" namespace UE { namespace Solvers { using namespace UE::Geometry ; template<RealType> class TSparseMatrixAssembler { public : TUniqueFunction<)",
    "insertText": "void(int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "void(int32, int32, RealType)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSparseMatrixAssembler<double> FSparseMatrixAssemblerd ; typedef TSparseMatrixAssembler<float> FSparseMatrixAssemblerf ; struct FPositionConstraint { int32 ElementID = - 1 ; int32 ConstraintIndex = - 1 ; FVector3d Position =)",
    "insertText": "Zero()"
  }
]