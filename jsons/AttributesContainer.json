[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAttributeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeId"
  },
  {
    "label": "BoneIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoneIndexType"
  },
  {
    "label": "TAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeContainer"
  },
  {
    "label": "OtherBoneIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherBoneIndexType"
  },
  {
    "label": "TAttributeContainerAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeContainerAccessor"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "BoneAttributeNamespace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Class . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / WrappedAttribute . h \" # include \" BoneContainer . h \" # include \" BoneIndices . h \" enum class ECustomAttributeBlendType : uint8 ; namespace UE { namespace Anim { FName)",
    "insertText": "BoneAttributeNamespace(\"bone\")"
  },
  {
    "label": "FAttributeId()",
    "kind": "Method",
    "detail": "Function (struct FAttributeId {)",
    "insertText": "FAttributeId(const FName& InName, const FCompactPoseBoneIndex& InCompactBoneIndex) : Namespace(BoneAttributeNamespace), Name(InName), Index(InCompactBoneIndex.GetInt())"
  },
  {
    "label": "FAttributeId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeId(const FName& InName, int32 InIndex, const FName& InNamespace) : Namespace(InNamespace), Name(InName), Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAttributeId& Other)"
  },
  {
    "label": "MakeIndex()",
    "kind": "Method",
    "detail": "Function (} template<> FMeshPoseBoneIndex)",
    "insertText": "MakeIndex(FCompactPoseBoneIndex BoneIndex, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "MakeIndex()",
    "kind": "Method",
    "detail": "Function (} template<> FCompactPoseBoneIndex)",
    "insertText": "MakeIndex(FMeshPoseBoneIndex BoneIndex, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } template<class BoneIndexType,InAllocator> struct TAttributeContainer { template<OtherAllocator> void)",
    "insertText": "CopyFrom(const TAttributeContainer<BoneIndexType, OtherAllocator>& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (AttributeIdentifiers = Other . AttributeIdentifiers ; UniqueTypedBoneIndices = Other . UniqueTypedBoneIndices ; UniqueTypes = Other . UniqueTypes ; Values .)",
    "insertText": "Empty(Other.Values.Num())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumTypes = UniqueTypes .)",
    "insertText": "Num()"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (const TArray<TWrappedAttribute<OtherAllocator>>& Array = Other . Values [ TypeIndex ] ; TArray<TWrappedAttribute<InAllocator>>& ValuesArray = Values .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<const UScriptStruct>& WeakScriptStruct = UniqueTypes [ TypeIndex ] ;)",
    "insertText": "for(const TWrappedAttribute<OtherAllocator>& StructOnScope : Array)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (TWrappedAttribute<InAllocator>& StructData = ValuesArray .)",
    "insertText": "Add_GetRef(WeakScriptStruct.Get())"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (WeakScriptStruct ->)",
    "insertText": "CopyScriptStruct(StructData.template GetPtr<void>(), StructOnScope.template GetPtr<void>())"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } } public : template<class OtherBoneIndexType,OtherAllocator> void)",
    "insertText": "CopyFrom(const TAttributeContainer<OtherBoneIndexType, OtherAllocator>& Other, const FBoneContainer& BoneContainer)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (UniqueTypes = Other . UniqueTypes ; AttributeIdentifiers .)",
    "insertText": "Empty(Other.AttributeIdentifiers.Num())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (UniqueTypedBoneIndices .)",
    "insertText": "Empty(Other.UniqueTypedBoneIndices.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<int32,BoneIndexType> IndexMapping ; const TArray<int32>& OtherTypeBoneIndices = Other . UniqueTypedBoneIndices [ TypeIndex ] ;)",
    "insertText": "for(int32 Index : OtherTypeBoneIndices)"
  },
  {
    "label": "OtherIndex()",
    "kind": "Method",
    "detail": "Function (OtherBoneIndexType)",
    "insertText": "OtherIndex(Index)"
  },
  {
    "label": "BoneIndexType()",
    "kind": "Method",
    "detail": "Function (BoneIndexType MyIndex = Conversion::MakeIndex<OtherBoneIndexType,)",
    "insertText": "BoneIndexType(OtherIndex, BoneContainer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IndexMapping .)",
    "insertText": "Add(Index, MyIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FAttributeId& Id = OtherTypeAttributeIdentifiers [ AttributeIndex ] ; const TWrappedAttribute<OtherAllocator>& Value = OtherValuesArray [ AttributeIndex ] ;)",
    "insertText": "if(const BoneIndexType* MyIndexPtr = IndexMapping.Find(Id.GetIndex()))"
  },
  {
    "label": "MappedId()",
    "kind": "Method",
    "detail": "Function (FAttributeId)",
    "insertText": "MappedId(Id.GetName(), MyIndexPtr->GetInt(), Id.GetNamespace())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypeAttributeIdentifiers .)",
    "insertText": "Add(MappedId)"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (WeakScriptStruct ->)",
    "insertText": "CopyScriptStruct(StructData.template GetPtr<void>(), Value.template GetPtr<void>())"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (TypeBoneIndices .)",
    "insertText": "AddUnique(MyIndexPtr->GetInt())"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "CopyFrom(const TAttributeContainer<BoneIndexType, InAllocator>& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<const UScriptStruct>& WeakScriptStruct = UniqueTypes [ TypeIndex ] ;)",
    "insertText": "for(const TWrappedAttribute<InAllocator>& StructOnScope : Array)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "MoveFrom(TAttributeContainer<BoneIndexType, InAllocator>& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AttributeIdentifiers =)",
    "insertText": "MoveTemp(Other.AttributeIdentifiers)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (UniqueTypedBoneIndices =)",
    "insertText": "MoveTemp(Other.UniqueTypedBoneIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Values =)",
    "insertText": "MoveTemp(Other.Values)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (UniqueTypes =)",
    "insertText": "MoveTemp(Other.UniqueTypes)"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TAttributeContainer<BoneIndexType, InAllocator>& Other)"
  },
  {
    "label": "FindTypeIndex()",
    "kind": "Method",
    "detail": "Function (const TWeakObjectPtr<const UScriptStruct>& ThisType = UniqueTypes [ ThisTypeIndex ] ; const int32 OtherTypeIndex = Other .)",
    "insertText": "FindTypeIndex(ThisType.Get())"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeId& ThisAttributeId = AttributeIdentifiers [ ThisTypeIndex ] [ ThisAttributeIndex ] ; const int32 OtherAttributeIndex = Other . AttributeIdentifiers [ OtherTypeIndex ] .)",
    "insertText": "IndexOfByKey(ThisAttributeId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TWrappedAttribute<InAllocator>& ThisAttributeValue = Values [ ThisTypeIndex ] [ ThisAttributeIndex ] ; const TWrappedAttribute<InAllocator>& OtherAttributeValue = Other . Values [ OtherTypeIndex ] [ OtherAttributeIndex ] ;)",
    "insertText": "if(!ThisType->CompareScriptStruct(ThisAttributeValue.template GetPtr<void>(), OtherAttributeValue.template GetPtr<void>(), 0))"
  },
  {
    "label": "AddedPtr()",
    "kind": "Method",
    "detail": "Function (AttributeType*)",
    "insertText": "AddedPtr(AttributeType*)Add(AttributeType::StaticStruct(), InAttributeId)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticStruct()->CopyScriptStruct(AddedPtr, &Attribute)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} return AddedPtr ; } uint8*)",
    "insertText": "Add(const UScriptStruct* InScriptStruct, const FAttributeId& InAttributeId)"
  },
  {
    "label": "FindOrAddTypeIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIndex =)",
    "insertText": "FindOrAddTypeIndex(InScriptStruct)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (TArray<FAttributeId>& AttributeIds = AttributeIdentifiers [ TypeIndex ] ; const int32 ExistingAttributeIndex = AttributeIds .)",
    "insertText": "IndexOfByKey(InAttributeId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = INDEX_NONE ; AttributeIds .)",
    "insertText": "Add(InAttributeId)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (UniqueTypedBoneIndices [ TypeIndex ] .)",
    "insertText": "AddUnique(InAttributeId.GetIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<TWrappedAttribute<InAllocator>>& TypedArray = Values [ TypeIndex ] ; NewIndex = TypedArray .)",
    "insertText": "Add(InScriptStruct)"
  },
  {
    "label": "InitializeStruct()",
    "kind": "Method",
    "detail": "Function (TWrappedAttribute<InAllocator>& StructData = TypedArray [ NewIndex ] ; InScriptStruct ->)",
    "insertText": "InitializeStruct(StructData.template GetPtr<void>())"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<AttributeType> AttributeType*)",
    "insertText": "FindOrAdd(const FAttributeId& InAttributeId)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindOrAdd(const UScriptStruct* InScriptStruct, const FAttributeId& InAttributeId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TWrappedAttribute<InAllocator>>& TypedArray = Values [ TypeIndex ] ;)",
    "insertText": "if(AttributeIndex == INDEX_NONE)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(TypedArray.IsValidIndex(AttributeIndex))"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (TWrappedAttribute<InAllocator>& StructData = TypedArray [ AttributeIndex ] ; return StructData . template GetPtr<)",
    "insertText": "uint8()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> AttributeType*)",
    "insertText": "Find(const FAttributeId& InAttributeId)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "Find(const UScriptStruct* InScriptStruct, const FAttributeId& InAttributeId)"
  },
  {
    "label": "FindTypeIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIndex =)",
    "insertText": "FindTypeIndex(InScriptStruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TWrappedAttribute<InAllocator>>& TypedArray = Values [ TypeIndex ] ;)",
    "insertText": "if(AttributeIndex != INDEX_NONE)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<AttributeType> AttributeType&)",
    "insertText": "FindChecked(const FAttributeId& InAttributeId)"
  },
  {
    "label": "FindTypeIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIndex =)",
    "insertText": "FindTypeIndex(AttributeType::StaticStruct())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (TWrappedAttribute<InAllocator>& StructData = TypedArray [ AttributeIndex ] ;)",
    "insertText": "return(AttributeType*)(TypedArray[AttributeIndex].template GetPtr<void>())"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(false, TEXT(\"Failed TAttributeContainer::FindChecked\"))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const TWrappedAttribute<InAllocator>& StructData = TypedArray [ AttributeIndex ] ;)",
    "insertText": "return(const AttributeType*)(TypedArray[AttributeIndex].template GetPtr<void>())"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> int32)",
    "insertText": "IndexOfByKey(const FAttributeId& InAttributeId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>& UniqueBoneIndices = UniqueTypedBoneIndices [ TypeIndex ] ;)",
    "insertText": "if(UniqueBoneIndices.Contains(InAttributeId.GetIndex()))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(const UScriptStruct* InScriptStruct, const FAttributeId& InAttributeId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TWrappedAttribute<InAllocator>>& TypedArray = Values [ TypeIndex ] ;)",
    "insertText": "if(TypedArray.Num() == 1)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (AttributeIdentifiers .)",
    "insertText": "RemoveAtSwap(TypeIndex)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} else { AttributeIds .)",
    "insertText": "RemoveAtSwap(AttributeIndex)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} return true ; } } return false ; } template<AttributeType> bool)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveAll(const UScriptStruct* InScriptStruct, const FAttributeId& InAttributeId)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} const TArray<FAttributeId>&)",
    "insertText": "GetKeys(int32 TypeIndex)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutAttributeKeyNames .)",
    "insertText": "AddUnique(AttributeId.GetName())"
  },
  {
    "label": "GetUniqueTypedBoneIndices()",
    "kind": "Method",
    "detail": "Function (} } return true ; } return false ; } const TArray<int32>&)",
    "insertText": "GetUniqueTypedBoneIndices(int32 TypeIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumAttributes = 0 ;)",
    "insertText": "for(const TArray<FAttributeId>& AttributesPerType : AttributeIdentifiers)"
  },
  {
    "label": "GetValuesInternal()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Array ; return Array ; } protected : TArray<TWrappedAttribute<InAllocator>>&)",
    "insertText": "GetValuesInternal(int32 TypeIndex)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (const int32 TypeIndex = UniqueTypes .)",
    "insertText": "AddUnique(const_cast<UScriptStruct*>(InScriptStruct))"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (UniqueTypedBoneIndices .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "FCustomAttributeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomAttributeInfo(const FName& InName, const FCompactPoseBoneIndex& InCompactBoneIndex) : UE::Anim::FAttributeId(InName, InCompactBoneIndex)"
  },
  {
    "label": "FCustomAttributeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomAttributeInfo(const FName& InName, int32 InIndex) : UE::Anim::FAttributeId(InName, InIndex, UE::Anim::BoneAttributeNamespace)"
  }
]