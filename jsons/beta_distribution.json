[
  {
    "label": "beta_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "beta_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "Method",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Method"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_BETA_DISTRIBUTION_H_ # define ABSL_RANDOM_BETA_DISTRIBUTION_H_ # include<cassert> # include<cmath> # include<istream> # include<limits> # include<ostream> # include<type_traits> # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / fastmath . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<RealType = double> class beta_distribution { public : using result_type = RealType ; class param_type { public : using distribution_type = beta_distribution ;)",
    "insertText": "param_type(result_type alpha, result_type beta) : alpha_(alpha), beta_(beta)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(alpha >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(beta >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(alpha <= (std::numeric_limits<result_type>::max)())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(beta <= (std::numeric_limits<result_type>::max)())"
  },
  {
    "label": "x_()",
    "kind": "Method",
    "detail": "Function (method_ = DEGENERATE_SMALL ;)",
    "insertText": "x_(alpha >= beta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inverted_ = true ; a_ = beta ; b_ = alpha ; } else { inverted_ = false ; a_ = alpha ; b_ = beta ; })",
    "insertText": "if(a_ <= 1 && b_ >= ThresholdForLargeA())"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (method_ = DEGENERATE_SMALL ; x_ = inverted_ ?)",
    "insertText": "result_type(1) : result_type(0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (method_ = JOEHNK ; a_ =)",
    "insertText": "result_type(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "if(a_ >= ThresholdForLargeA())"
  },
  {
    "label": "x_()",
    "kind": "Method",
    "detail": "Function (method_ = DEGENERATE_LARGE ; result_type r = a_ / b_ ;)",
    "insertText": "x_(inverted_ ? result_type(1) : r) / (1 + r)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (gamma_ = a_ + a_ ; return ; } method_ = CHENG_BB ; result_type)",
    "insertText": "r(a_ - 1) / (b_ - 1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (y_ =)",
    "insertText": "sqrt((1 + r) / (b_ * r * 2 - r + 1))"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "alpha()"
  },
  {
    "label": "ThresholdForSmallA()",
    "kind": "Method",
    "detail": "Function (} private : class beta_distribution ; # ifdef _MSC_VER # define ABSL_RANDOM_INTERNAL_LOG_EXP_CONSTEXPR # else # define ABSL_RANDOM_INTERNAL_LOG_EXP_CONSTEXPR # endif ABSL_RANDOM_INTERNAL_LOG_EXP_CONSTEXPR result_type)",
    "insertText": "ThresholdForSmallA()"
  },
  {
    "label": "ThresholdForLargeA()",
    "kind": "Method",
    "detail": "Function (} ABSL_RANDOM_INTERNAL_LOG_EXP_CONSTEXPR result_type)",
    "insertText": "ThresholdForLargeA()"
  },
  {
    "label": "ThresholdPadding()",
    "kind": "Method",
    "detail": "Function (} # undef ABSL_RANDOM_INTERNAL_LOG_EXP_CONSTEXPR result_type)",
    "insertText": "ThresholdPadding()"
  },
  {
    "label": "beta_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "beta_distribution() : beta_distribution(1)"
  },
  {
    "label": "beta_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "beta_distribution(result_type alpha, result_type beta = 1) : param_(alpha, beta)"
  },
  {
    "label": "beta_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "beta_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = p ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "beta()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const beta_distribution& a, const beta_distribution& b)"
  },
  {
    "label": "AlgorithmCheng()",
    "kind": "Method",
    "detail": "Function (template<URBG> result_type)",
    "insertText": "AlgorithmCheng(URBG& g, const param_type& p)"
  },
  {
    "label": "DegenerateCase()",
    "kind": "Method",
    "detail": "Function (template<URBG> result_type)",
    "insertText": "DegenerateCase(URBG& g, const param_type& p)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (random_internal::FastUniformBits<uint8_t> fast_u8 ; return static_cast<)",
    "insertText": "result_type((fast_u8(g) & 0x10) != 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} return p . x_ ; } param_type param_ ; random_internal::FastUniformBits<uint64_t> fast_u64_ ; } ; # if)",
    "insertText": "defined(__powerpc64__) || defined(__PPC64__) || defined(__powerpc__) || \\ defined(__ppc__) || defined(__PPC__) template <> constexpr long double beta_distribution<long double>::param_type::ThresholdPadding()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; using real_type = absl::conditional_t<std::is_same<RealType,float>::value,float,double> ; result_type u,v,x,y,z ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (u = GenerateRealFromBits<real_type,GeneratePositiveTag,)",
    "insertText": "false(fast_u64_(g))"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pow(u, p.a_)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pow(v, p.b_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z = x + y ;)",
    "insertText": "if(z > 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(z > 0)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "log(v)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (continue ; } z = x>)",
    "insertText": "y(x + std::log(1 + std::exp(y - x))) : (y + std::log(1 + std::exp(x - y)))"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (continue ; } return)",
    "insertText": "exp(x - z)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; using real_type = absl::conditional_t<std::is_same<RealType,float>::value,float,double> ; result_type kLogFour =)",
    "insertText": "result_type(1.3862943611198906188344642429163531361)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (result_type kS =)",
    "insertText": "result_type(2.6094379124341003746007593332261876)"
  },
  {
    "label": "use_algorithm_ba()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "use_algorithm_ba(p.method_ == param_type::CHENG_BA)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (v = p . y_*)",
    "insertText": "log(u1 / (1 - u1))"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (w = p . a_*)",
    "insertText": "exp(v)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (bw_inv =)",
    "insertText": "result_type(1) / (p.b_ + w)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (r = p . gamma_* v - kLogFour ; s = p . a_ + r - w ; z = u1* u1* u2 ;)",
    "insertText": "if(!use_algorithm_ba && s + kS >= 5 * z)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (break ; } t =)",
    "insertText": "log(z)"
  },
  {
    "label": "x_()",
    "kind": "Method",
    "detail": "Function (break ; } lhs = p .)",
    "insertText": "x_(p.log_x_ + std::log(bw_inv))"
  },
  {
    "label": "inverted_()",
    "kind": "Method",
    "detail": "Function (break ; } } return p .)",
    "insertText": "inverted_(1 - w * bw_inv)"
  },
  {
    "label": "DegenerateCase()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "DegenerateCase(g, p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<CharT,Traits,RealType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const beta_distribution<RealType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<RealType>::kPrecision)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (os<<x .)",
    "insertText": "alpha() << os.fill() << x.beta()"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using result_type = beta_distribution<RealType>::result_type ; using param_type = beta_distribution<RealType>::param_type ; result_type alpha,beta ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (alpha = random_internal::read_floating_point<)",
    "insertText": "result_type(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(alpha, beta))"
  }
]