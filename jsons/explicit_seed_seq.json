[
  {
    "label": "ExplicitSeedSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExplicitSeedSeq"
  },
  {
    "label": "ExplicitSeedSeq()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_EXPLICIT_SEED_SEQ_H_ # define ABSL_RANDOM_INTERNAL_EXPLICIT_SEED_SEQ_H_ # include<algorithm> # include<cstddef> # include<cstdint> # include<initializer_list> # include<iterator> # include<vector> # include \" absl / base / config . h \" # include \" absl / base / internal / endian . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class ExplicitSeedSeq { public : using result_type = uint32_t ;)",
    "insertText": "ExplicitSeedSeq() : state_()"
  },
  {
    "label": "ExplicitSeedSeq()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExplicitSeedSeq(const ExplicitSeedSeq& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExplicitSeedSeq&)",
    "insertText": "operator(const ExplicitSeedSeq& other)"
  },
  {
    "label": "ExplicitSeedSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExplicitSeedSeq(ExplicitSeedSeq&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExplicitSeedSeq&)",
    "insertText": "operator(ExplicitSeedSeq&& other)"
  },
  {
    "label": "ExplicitSeedSeq()",
    "kind": "Method",
    "detail": "Function (template<Iterator>)",
    "insertText": "ExplicitSeedSeq(Iterator begin, Iterator end)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (state_ .)",
    "insertText": "push_back(*it & 0xffffffff)"
  },
  {
    "label": "ExplicitSeedSeq()",
    "kind": "Method",
    "detail": "Function (} } template<T>)",
    "insertText": "ExplicitSeedSeq(std::initializer_list<T> il) : ExplicitSeedSeq(il.begin(), il.end())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} template<OutIterator> void)",
    "insertText": "param(OutIterator out)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(std::begin(state_), std::end(state_), out)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (} template<OutIterator> void)",
    "insertText": "generate(OutIterator begin, OutIterator end)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (* begin = state_ .)",
    "insertText": "empty()"
  }
]