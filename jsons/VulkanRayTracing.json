[
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanResourceMultiBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanResourceMultiBuffer"
  },
  {
    "label": "FVulkanRayTracingGeometryParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanRayTracingGeometryParameters"
  },
  {
    "label": "FVulkanRayTracingPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingPlatform"
  },
  {
    "label": "FVulkanHitGroupSystemParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanHitGroupSystemParameters"
  },
  {
    "label": "FVkRtTLASBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVkRtTLASBuildData"
  },
  {
    "label": "FVkRtBLASBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVkRtBLASBuildData"
  },
  {
    "label": "FVulkanRayTracingShaderTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingShaderTable"
  },
  {
    "label": "FVulkanShaderTableAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanShaderTableAllocation"
  },
  {
    "label": "FVulkanRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingGeometry"
  },
  {
    "label": "FVulkanRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingScene"
  },
  {
    "label": "FVulkanRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingPipelineState"
  },
  {
    "label": "ShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShaderData"
  },
  {
    "label": "FVulkanRayTracingCompactedSizeQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingCompactedSizeQueryPool"
  },
  {
    "label": "FVulkanRayTracingCompactionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingCompactionRequestHandler"
  },
  {
    "label": "CheckVulkanInstanceFunctions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanRHIPrivate . h \" # include \" RayTracingBuiltInResources . h \" class FVulkanCommandListContext ; class FVulkanResourceMultiBuffer ; struct FVulkanRayTracingGeometryParameters ; class FVulkanRayTracingPlatform { public : bool)",
    "insertText": "CheckVulkanInstanceFunctions(VkInstance inInstance)"
  },
  {
    "label": "FVkRtTLASBuildData()",
    "kind": "Method",
    "detail": "Function (} ; struct FVulkanHitGroupSystemParameters { FHitGroupSystemRootConstants RootConstants ; uint32 BindlessHitGroupSystemIndexBuffer ; uint32 BindlessHitGroupSystemVertexBuffer ; uint32 BindlessUniformBuffers [ 3 2 ] ; } ; struct FVkRtTLASBuildData {)",
    "insertText": "FVkRtTLASBuildData()"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(Geometry, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(GeometryInfo, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(SizesInfo, VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR)"
  },
  {
    "label": "FVkRtBLASBuildData()",
    "kind": "Method",
    "detail": "Function (} VkAccelerationStructureGeometryKHR Geometry ; VkAccelerationStructureBuildGeometryInfoKHR GeometryInfo ; VkAccelerationStructureBuildSizesInfoKHR SizesInfo ; } ; struct FVkRtBLASBuildData {)",
    "insertText": "FVkRtBLASBuildData()"
  },
  {
    "label": "FVulkanRayTracingShaderTable()",
    "kind": "Method",
    "detail": "Function (} TArray<VkAccelerationStructureGeometryKHR,TInlineAllocator<1>> Segments ; TArray<VkAccelerationStructureBuildRangeInfoKHR,TInlineAllocator<1>> Ranges ; VkAccelerationStructureBuildGeometryInfoKHR GeometryInfo ; VkAccelerationStructureBuildSizesInfoKHR SizesInfo ; } ; class FVulkanRayTracingShaderTable : public FRHIShaderBindingTable,public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanRayTracingShaderTable(FRHICommandListBase& RHICmdList, FVulkanDevice* Device, const FRayTracingShaderBindingTableInitializer& InInitializer)"
  },
  {
    "label": "FVulkanRayTracingShaderTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRayTracingShaderTable()"
  },
  {
    "label": "ReleaseLocalBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLocalBuffers()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (const VkStridedDeviceAddressRegionKHR*)",
    "insertText": "GetRegion(EShaderFrequency Frequency)"
  },
  {
    "label": "SetSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlot(EShaderFrequency Frequency, uint32 DstSlot, uint32 SrcHandleIndex, TConstArrayView<uint8> SrcHandleData)"
  },
  {
    "label": "CommitRayGenShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitRayGenShader(FVulkanCommandListContext& Context, EShaderFrequency ShaderFrequency, uint32 SrcHandleIndex, TConstArrayView<uint8> SrcHandleData)"
  },
  {
    "label": "SetLocalShaderParameters()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SetLocalShaderParameters(EShaderFrequency Frequency, uint32 RecordIndex, uint32 InOffsetWithinRootSignature, const T& Parameters)"
  },
  {
    "label": "SetLocalShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalShaderParameters(Frequency, RecordIndex, InOffsetWithinRootSignature, &Parameters, sizeof(Parameters))"
  },
  {
    "label": "SetLocalShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalShaderParameters(EShaderFrequency Frequency, uint32 RecordIndex, uint32 OffsetWithinRecord, const void* InData, uint32 InDataSize)"
  },
  {
    "label": "SetLooseParameterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLooseParameterData(EShaderFrequency Frequency, uint32 RecordIndex, const void* InData, uint32 InDataSize)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const uint32 LooseParameterDataOffset =)",
    "insertText": "Align(sizeof(FVulkanHitGroupSystemParameters), 4)"
  },
  {
    "label": "SetLocalShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalShaderParameters(Frequency, RecordIndex, LooseParameterDataOffset, InData, InDataSize)"
  },
  {
    "label": "SetInlineGeometryParameters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetInlineGeometryParameters(uint32 SegmentIndex, const void* InData, uint32 InDataSize)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(FVulkanCommandListContext& Context)"
  },
  {
    "label": "GetOrCreateInlineBufferSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetOrCreateInlineBufferSRV(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "AddUBRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUBRef(FRHIUniformBuffer* UB)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ReferencedUniformBuffers .)",
    "insertText": "AddUnique(UB)"
  },
  {
    "label": "GetUBRefs()",
    "kind": "Method",
    "detail": "Function (} TArrayView<TRefCountPtr<FRHIUniformBuffer>>)",
    "insertText": "GetUBRefs()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Region)"
  },
  {
    "label": "GetAlloc()",
    "kind": "Method",
    "detail": "Function (} uint32 HandleCount = 0 ; bool bUseLocalRecord = false ; TArray<uint8> HostBuffer ; VkBuffer LocalBuffer = VK_NULL_HANDLE ; VulkanRHI::FVulkanAllocation LocalAllocation ; VkStridedDeviceAddressRegionKHR Region ; bool bIsDirty = true ; } ; FVulkanShaderTableAllocation&)",
    "insertText": "GetAlloc(EShaderFrequency Frequency)"
  },
  {
    "label": "ReleaseLocalBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLocalBuffer(FVulkanDevice* Device, FVulkanShaderTableAllocation& Alloc)"
  },
  {
    "label": "FVulkanRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (ERayTracingShaderBindingMode ShaderBindingMode = ERayTracingShaderBindingMode::Disabled ; ERayTracingHitGroupIndexingMode HitGroupIndexingMode = ERayTracingHitGroupIndexingMode::Allow ; UE::FMutex RaygenMutex ; FVulkanShaderTableAllocation Raygen ; FVulkanShaderTableAllocation Miss ; FVulkanShaderTableAllocation HitGroup ; FVulkanShaderTableAllocation Callable ; TArray<uint8> InlineGeometryParameterData ; TRefCountPtr<FVulkanResourceMultiBuffer> InlineGeometryParameterBuffer ; FShaderResourceViewRHIRef InlineGeometryParameterSRV ; TArray<TRefCountPtr<FRHIUniformBuffer>> ReferencedUniformBuffers ; const uint32 HandleSize ; const uint32 HandleSizeAligned ; } ; class FVulkanRayTracingGeometry : public FRHIRayTracingGeometry { public : uint32 IndicesPerPrimitive = 3 ;)",
    "insertText": "FVulkanRayTracingGeometry(ENoInit)"
  },
  {
    "label": "FVulkanRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanRayTracingGeometry(FRHICommandListBase& RHICmdList, const FRayTracingGeometryInitializer& Initializer, FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRayTracingGeometry()"
  },
  {
    "label": "GetAccelerationStructureAddress()",
    "kind": "Method",
    "detail": "Function (FRayTracingAccelerationStructureAddress)",
    "insertText": "GetAccelerationStructureAddress(uint64 GPUIndex)"
  },
  {
    "label": "RemoveCompactionRequest()",
    "kind": "Method",
    "detail": "Function (using FRHIRayTracingGeometry::Initializer ; using FRHIRayTracingGeometry::SizeInfo ; void)",
    "insertText": "RemoveCompactionRequest()"
  },
  {
    "label": "CompactAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactAccelerationStructure(FVulkanCmdBuffer& CmdBuffer, uint64 InSizeAfterCompaction)"
  },
  {
    "label": "SetupHitGroupSystemParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupHitGroupSystemParameters()"
  },
  {
    "label": "ReleaseBindlessHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBindlessHandles()"
  },
  {
    "label": "SetupInlineGeometryParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInlineGeometryParameters(uint32 GeometrySegmentIndex, FVulkanRayTracingGeometryParameters& Parameters)"
  },
  {
    "label": "FVulkanRayTracingScene()",
    "kind": "Method",
    "detail": "Function (VkAccelerationStructureKHR Handle = VK_NULL_HANDLE ; VkDeviceAddress Address = 0 ; TRefCountPtr<FVulkanResourceMultiBuffer> AccelerationStructureBuffer ; bool bHasPendingCompactionRequests = false ; uint64 AccelerationStructureCompactedSize = 0 ; FVulkanDevice* const Device = nullptr ; TArray<FVulkanHitGroupSystemParameters> HitGroupSystemParameters ; TArray<FRHIDescriptorHandle> HitGroupSystemVertexViews ; FRHIDescriptorHandle HitGroupSystemIndexView ; FDebugName DebugName ; FName OwnerName ; } ; class FVulkanRayTracingScene : public FRHIRayTracingScene,public VulkanRHI::FDeviceChild { FVulkanCommandListContext ; public :)",
    "insertText": "FVulkanRayTracingScene(FRayTracingSceneInitializer Initializer, FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanRayTracingScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRayTracingScene()"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (const FRayTracingSceneInitializer&)",
    "insertText": "GetInitializer()"
  },
  {
    "label": "CommitShaderTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitShaderTables(FVulkanCommandListContext& Context)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (Pair . Value ->)",
    "insertText": "Commit(Context)"
  },
  {
    "label": "FindOrCreateShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} } FRHIShaderBindingTable*)",
    "insertText": "FindOrCreateShaderBindingTable(const FRHIRayTracingPipelineState* Pipeline)"
  },
  {
    "label": "IsBuilt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuilt()"
  },
  {
    "label": "FVulkanRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanRayTracingPipelineState(FVulkanDevice* const InDevice, const FRayTracingPipelineStateInitializer& Initializer)"
  },
  {
    "label": "FVulkanRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRayTracingPipelineState()"
  },
  {
    "label": "GetPipeline()",
    "kind": "Method",
    "detail": "Function (VkPipeline)",
    "insertText": "GetPipeline()"
  },
  {
    "label": "GetVulkanShader()",
    "kind": "Method",
    "detail": "Function (const FVulkanRayTracingShader*)",
    "insertText": "GetVulkanShader(EShaderFrequency Frequency, int32 ShaderIndex)"
  },
  {
    "label": "GetShaderHandles()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetShaderHandles(EShaderFrequency Frequency)"
  },
  {
    "label": "GetShaderData()",
    "kind": "Method",
    "detail": "Function (private : struct ShaderData { TArray<TRefCountPtr<FVulkanRayTracingShader>> Shaders ; TArray<uint8> ShaderHandles ; } ; const ShaderData&)",
    "insertText": "GetShaderData(EShaderFrequency Frequency)"
  },
  {
    "label": "FVulkanRayTracingCompactedSizeQueryPool()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandListContext ; FVulkanRayTracingScene ; } ; class FVulkanRayTracingCompactedSizeQueryPool : public FVulkanQueryPool { public :)",
    "insertText": "FVulkanRayTracingCompactedSizeQueryPool(FVulkanDevice* InDevice, uint32 InMaxQueries) : FVulkanQueryPool(InDevice, nullptr, InMaxQueries, VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR, false)"
  },
  {
    "label": "EndBatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndBatch(FVulkanCmdBuffer* InCmdBuffer)"
  },
  {
    "label": "TryGetResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetResults(uint32 NumResults)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FVulkanCmdBuffer* InCmdBuffer)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (FVulkanCmdBuffer* CmdBuffer = nullptr ; uint64 FenceSignaledCounter = 0 ; } ; class FVulkanRayTracingCompactionRequestHandler : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "UE_NONCOPYABLE(FVulkanRayTracingCompactionRequestHandler) FVulkanRayTracingCompactionRequestHandler(FVulkanDevice* const InDevice)"
  },
  {
    "label": "FVulkanRayTracingCompactionRequestHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRayTracingCompactionRequestHandler()"
  },
  {
    "label": "RequestCompact()",
    "kind": "Method",
    "detail": "Function (delete QueryPool ; } void)",
    "insertText": "RequestCompact(FVulkanRayTracingGeometry* InRTGeometry)"
  },
  {
    "label": "ReleaseRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReleaseRequest(FVulkanRayTracingGeometry* InRTGeometry)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FVulkanCommandListContext& InCommandContext)"
  },
  {
    "label": "IsUsingCmdBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingCmdBuffer(FVulkanCmdBuffer* CmdBuffer)"
  }
]