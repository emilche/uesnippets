[
  {
    "label": "ASceneCapture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASceneCapture2D"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "UInitialActiveSoundParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInitialActiveSoundParams"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "UDialogueWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDialogueWave"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "USaveGame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USaveGame"
  },
  {
    "label": "USceneCaptureComponent2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponent2D"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FMemoryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReader"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FDialogueContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContext"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "UGameplayStatics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayStatics"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "FSuggestProjectileVelocityParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestProjectileVelocityParameters"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "FDialogueContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContext"
  },
  {
    "label": "FDialogueContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContext"
  },
  {
    "label": "UDialogueWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDialogueWave"
  },
  {
    "label": "FDialogueContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContext"
  },
  {
    "label": "UForceFeedbackAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackAttenuation"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "adjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjuster"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "holding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "holding"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "GetActorArrayAverageLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetActorArrayAverageLocation(const TArray<AActor*>& Actors)"
  },
  {
    "label": "GetActorArrayBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorArrayBounds(const TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent)"
  },
  {
    "label": "GetAllActorsOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllActorsOfClass(const UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetAllActorsWithInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllActorsWithInterface(const UObject* WorldContextObject, TSubclassOf<UInterface> Interface, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetAllActorsWithTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllActorsWithTag(const UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetAllActorsOfClassWithTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllActorsOfClassWithTag(const UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, FName Tag, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetNumPlayerStates()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPlayerStates(const UObject* WorldContextObject)"
  },
  {
    "label": "GetNumPlayerControllers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPlayerControllers(const UObject* WorldContextObject)"
  },
  {
    "label": "GetNumLocalPlayerControllers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLocalPlayerControllers(const UObject* WorldContextObject)"
  },
  {
    "label": "IsAnyLocalPlayerCameraWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyLocalPlayerCameraWithinRange(const UObject* WorldContextObject, const FVector& Location, float MaximumRange)"
  },
  {
    "label": "RemovePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlayer(APlayerController* Player, bool bDestroyPawn)"
  },
  {
    "label": "GetPlayerControllerID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlayerControllerID(APlayerController* Player)"
  },
  {
    "label": "SetPlayerControllerID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerControllerID(APlayerController* Player, int32 ControllerId)"
  },
  {
    "label": "SetPlayerPlatformUserId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerPlatformUserId(APlayerController* PlayerController, FPlatformUserId UserId)"
  },
  {
    "label": "level()",
    "kind": "Method",
    "detail": "Function (the)",
    "insertText": "level(by Name)"
  },
  {
    "label": "LoadStreamLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStreamLevel(const UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "level()",
    "kind": "Method",
    "detail": "Function (the)",
    "insertText": "level(by Object Reference)"
  },
  {
    "label": "LoadStreamLevelBySoftObjectPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStreamLevelBySoftObjectPtr(const UObject* WorldContextObject, const TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "UnloadStreamLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadStreamLevel(const UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload)"
  },
  {
    "label": "UnloadStreamLevelBySoftObjectPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadStreamLevelBySoftObjectPtr(const UObject* WorldContextObject, const TSoftObjectPtr<UWorld> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload)"
  },
  {
    "label": "FlushLevelStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushLevelStreaming(const UObject* WorldContextObject)"
  },
  {
    "label": "CancelAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAsyncLoading()"
  },
  {
    "label": "GetCurrentLevelName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentLevelName(const UObject* WorldContextObject, bool bRemovePrefixString = true)"
  },
  {
    "label": "ObjectIsA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ObjectIsA(const UObject* Object, TSubclassOf<UObject> ObjectClass)"
  },
  {
    "label": "GetGlobalTimeDilation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGlobalTimeDilation(const UObject* WorldContextObject)"
  },
  {
    "label": "SetGlobalTimeDilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTimeDilation(const UObject* WorldContextObject, float TimeDilation)"
  },
  {
    "label": "SetGamePaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGamePaused(const UObject* WorldContextObject, bool bPaused)"
  },
  {
    "label": "IsGamePaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGamePaused(const UObject* WorldContextObject)"
  },
  {
    "label": "SetForceDisableSplitscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceDisableSplitscreen(const UObject* WorldContextObject, bool bDisable)"
  },
  {
    "label": "IsSplitscreenForceDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplitscreenForceDisabled(const UObject* WorldContextObject)"
  },
  {
    "label": "SetEnableWorldRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableWorldRendering(const UObject* WorldContextObject, bool bEnable)"
  },
  {
    "label": "GetEnableWorldRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableWorldRendering(const UObject* WorldContextObject)"
  },
  {
    "label": "GetViewportMouseCaptureMode()",
    "kind": "Method",
    "detail": "Function (EMouseCaptureMode)",
    "insertText": "GetViewportMouseCaptureMode(const UObject* WorldContextObject)"
  },
  {
    "label": "SetViewportMouseCaptureMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportMouseCaptureMode(const UObject* WorldContextObject, const EMouseCaptureMode MouseCaptureMode)"
  },
  {
    "label": "ApplyRadialDamage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRadialDamage(const UObject* WorldContextObject, float BaseDamage, const FVector& Origin, float DamageRadius, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<AActor*>& IgnoreActors, AActor* DamageCauser = NULL, AController* InstigatedByController = NULL, bool bDoFullDamage = false, ECollisionChannel DamagePreventionChannel = ECC_Visibility)"
  },
  {
    "label": "ApplyRadialDamageWithFalloff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRadialDamageWithFalloff(const UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<AActor*>& IgnoreActors, AActor* DamageCauser = NULL, AController* InstigatedByController = NULL, ECollisionChannel DamagePreventionChannel = ECC_Visibility)"
  },
  {
    "label": "ApplyPointDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ApplyPointDamage(AActor* DamagedActor, float BaseDamage, const FVector& HitFromDirection, const FHitResult& HitInfo, AController* EventInstigator, AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass)"
  },
  {
    "label": "ApplyDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass)"
  },
  {
    "label": "PlayWorldCameraShake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayWorldCameraShake(const UObject* WorldContextObject, TSubclassOf<class UCameraShakeBase> Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff = 1.f, bool bOrientShakeTowardsEpicenter = false)"
  },
  {
    "label": "AreAnyListenersWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnyListenersWithinRange(const UObject* WorldContextObject, const FVector& Location, float MaximumRange)"
  },
  {
    "label": "GetClosestListenerLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClosestListenerLocation(const UObject* WorldContextObject, const FVector& Location, float MaximumRange, const bool bAllowAttenuationOverride, FVector& ListenerPosition)"
  },
  {
    "label": "SetGlobalPitchModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalPitchModulation(const UObject* WorldContextObject, float PitchModulation, float TimeSec)"
  },
  {
    "label": "SetSoundClassDistanceScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundClassDistanceScale(const UObject* WorldContextObject, USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec = 0.0f)"
  },
  {
    "label": "SetGlobalListenerFocusParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalListenerFocusParameters(const UObject* WorldContextObject, float FocusAzimuthScale = 1.0f, float NonFocusAzimuthScale = 1.0f, float FocusDistanceScale = 1.0f, float NonFocusDistanceScale = 1.0f, float FocusVolumeScale = 1.0f, float NonFocusVolumeScale = 1.0f, float FocusPriorityScale = 1.0f, float NonFocusPriorityScale = 1.0f)"
  },
  {
    "label": "PlaySound2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound2D(const UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, USoundConcurrency* ConcurrencySettings = nullptr, const AActor* OwningActor = nullptr, bool bIsUISound = true)"
  },
  {
    "label": "PlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySoundAtLocation(const UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, class USoundAttenuation* AttenuationSettings = nullptr, USoundConcurrency* ConcurrencySettings = nullptr, const AActor* OwningActor = nullptr, const UInitialActiveSoundParams* InitialParams = nullptr)"
  },
  {
    "label": "SpawnSoundAttached()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SpawnSoundAttached(Sound, AttachToComponent, AttachPointName, Location, FRotator::ZeroRotator, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy)"
  },
  {
    "label": "PlayDialogue2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayDialogue2D(const UObject* WorldContextObject, UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f)"
  },
  {
    "label": "PlayDialogueAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayDialogueAtLocation(const UObject* WorldContextObject, class UDialogueWave* Dialogue, const FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, USoundAttenuation* AttenuationSettings = nullptr)"
  },
  {
    "label": "SpawnDialogueAttached()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SpawnDialogueAttached(Dialogue, Context, AttachToComponent, AttachPointName, Location, FRotator::ZeroRotator, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy)"
  },
  {
    "label": "SetSubtitlesEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubtitlesEnabled(bool bEnabled)"
  },
  {
    "label": "AreSubtitlesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSubtitlesEnabled()"
  },
  {
    "label": "SetBaseSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseSoundMix(const UObject* WorldContextObject, class USoundMix* InSoundMix)"
  },
  {
    "label": "PrimeSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimeSound(USoundBase* InSound)"
  },
  {
    "label": "GetAvailableSpatialPluginNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetAvailableSpatialPluginNames(const UObject* WorldContextObject)"
  },
  {
    "label": "GetActiveSpatialPluginName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetActiveSpatialPluginName(const UObject* WorldContextObject)"
  },
  {
    "label": "SetActiveSpatialPluginByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActiveSpatialPluginByName(const UObject* WorldContextObject, FName InPluginName)"
  },
  {
    "label": "PrimeAllSoundsInSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimeAllSoundsInSoundClass(class USoundClass* InSoundClass)"
  },
  {
    "label": "UnRetainAllSoundsInSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRetainAllSoundsInSoundClass(class USoundClass* InSoundClass)"
  },
  {
    "label": "SetSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundMixClassOverride(const UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume = 1.0f, float Pitch = 1.0f, float FadeInTime = 1.0f, bool bApplyToChildren = true)"
  },
  {
    "label": "ClearSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixClassOverride(const UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime = 1.0f)"
  },
  {
    "label": "PushSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSoundMixModifier(const UObject* WorldContextObject, class USoundMix* InSoundMixModifier)"
  },
  {
    "label": "PopSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSoundMixModifier(const UObject* WorldContextObject, class USoundMix* InSoundMixModifier)"
  },
  {
    "label": "ClearSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixModifiers(const UObject* WorldContextObject)"
  },
  {
    "label": "ActivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateReverbEffect(const UObject* WorldContextObject, class UReverbEffect* ReverbEffect, FName TagName, float Priority = 0.f, float Volume = 0.5f, float FadeTime = 2.f)"
  },
  {
    "label": "DeactivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateReverbEffect(const UObject* WorldContextObject, FName TagName)"
  },
  {
    "label": "SetMaxAudioChannelsScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxAudioChannelsScaled(const UObject* WorldContextObject, float MaxChannelCountScale)"
  },
  {
    "label": "GetMaxAudioChannelCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxAudioChannelCount(const UObject* WorldContextObject)"
  },
  {
    "label": "BreakHitResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakHitResult(const struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, class UPhysicalMaterial*& PhysMat, class AActor*& HitActor, class UPrimitiveComponent*& HitComponent, FName& HitBoneName, FName& BoneName, int32& HitItem, int32& ElementIndex, int32& FaceIndex, FVector& TraceStart, FVector& TraceEnd)"
  },
  {
    "label": "MakeHitResult()",
    "kind": "Method",
    "detail": "Function (FHitResult)",
    "insertText": "MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, FName HitBoneName, FName BoneName, int32 HitItem, int32 ElementIndex, int32 FaceIndex, FVector TraceStart, FVector TraceEnd)"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (EPhysicalSurface)",
    "insertText": "GetSurfaceType(const struct FHitResult& Hit)"
  },
  {
    "label": "FindCollisionUV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindCollisionUV(const struct FHitResult& Hit, int32 UVChannel, FVector2D& UV)"
  },
  {
    "label": "SaveGameToMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveGameToMemory(USaveGame* SaveGameObject, TArray<uint8>& OutSaveData)"
  },
  {
    "label": "SaveDataToSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDataToSlot(const TArray<uint8>& InSaveData, const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "SaveGameToSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveGameToSlot(USaveGame* SaveGameObject, const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "DoesSaveGameExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSaveGameExist(const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "LoadDataFromSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadDataFromSlot(TArray<uint8>& OutSaveData, const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "AsyncLoadGameFromSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLoadGameFromSlot(const FString& SlotName, const int32 UserIndex, FAsyncLoadGameFromSlotDelegate LoadedDelegate)"
  },
  {
    "label": "StripSaveGameHeader()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "StripSaveGameHeader(const TArray<uint8>& SaveData)"
  },
  {
    "label": "DeleteGameInSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteGameInSlot(const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "GetWorldDeltaSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldDeltaSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetTimeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTimeSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetUnpausedTimeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetUnpausedTimeSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetRealTimeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetRealTimeSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetAudioTimeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAudioTimeSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetAccurateRealTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAccurateRealTime(int32& Seconds, float& PartialSeconds)"
  },
  {
    "label": "GetAccurateRealTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAccurateRealTime(int32& Seconds, double& PartialSeconds)"
  },
  {
    "label": "EnableLiveStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableLiveStreaming(bool Enable)"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "BlueprintSuggestProjectileVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintSuggestProjectileVelocity(const UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, ESuggestProjVelocityTraceOption::Type TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, bool bAcceptClosestOnNoSolutions = false)"
  },
  {
    "label": "SuggestProjectileVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestProjectileVelocity(const FSuggestProjectileVelocityParameters& ProjectileParams, FVector& OutTossVelocity)"
  },
  {
    "label": "Blueprint_PredictProjectilePath_ByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Blueprint_PredictProjectilePath_ByObjectType(const UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, const TArray<TEnumAsByte<EObjectTypeQuery> >& ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, float DrawDebugTime, float SimFrequency = 15.f, float MaxSimTime = 2.f, float OverrideGravityZ = 0)"
  },
  {
    "label": "Blueprint_PredictProjectilePath_ByTraceChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Blueprint_PredictProjectilePath_ByTraceChannel(const UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, float DrawDebugTime, float SimFrequency = 15.f, float MaxSimTime = 2.f, float OverrideGravityZ = 0)"
  },
  {
    "label": "PredictProjectilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PredictProjectilePath(const UObject* WorldContextObject, const FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult)"
  },
  {
    "label": "Blueprint_PredictProjectilePath_Advanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Blueprint_PredictProjectilePath_Advanced(const UObject* WorldContextObject, const FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult)"
  },
  {
    "label": "SuggestProjectileVelocity_CustomArc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestProjectileVelocity_CustomArc(const UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ = 0, float ArcParam = 0.5f)"
  },
  {
    "label": "SuggestProjectileVelocity_MovingTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestProjectileVelocity_MovingTarget(const UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector ProjectileStartLocation, AActor* TargetActor, FVector TargetLocationOffset = FVector::ZeroVector, double GravityZOverride = 0.f, double TimeToTarget = 1.f, EDrawDebugTrace::Type DrawDebugType = EDrawDebugTrace::Type::None, float DrawDebugTime = 3.f, FLinearColor DrawDebugColor = FLinearColor::Red)"
  },
  {
    "label": "GetWorldOriginLocation()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetWorldOriginLocation(const UObject* WorldContextObject)"
  },
  {
    "label": "SetWorldOriginLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldOriginLocation(const UObject* WorldContextObject, FIntVector NewLocation)"
  },
  {
    "label": "RebaseLocalOriginOntoZero()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RebaseLocalOriginOntoZero(UObject* WorldContextObject, FVector WorldLocation)"
  },
  {
    "label": "RebaseZeroOriginOntoLocal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RebaseZeroOriginOntoLocal(UObject* WorldContextObject, FVector WorldLocation)"
  },
  {
    "label": "GrassOverlappingSphereCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GrassOverlappingSphereCount(const UObject* WorldContextObject, const UStaticMesh* StaticMesh, FVector CenterPosition, float Radius)"
  },
  {
    "label": "DeprojectScreenToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeprojectScreenToWorld(APlayerController const* Player, const FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection)"
  },
  {
    "label": "DeprojectSceneCaptureToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeprojectSceneCaptureToWorld(ASceneCapture2D const* SceneCapture2D, const FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection)"
  },
  {
    "label": "DeprojectSceneCaptureComponentToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeprojectSceneCaptureComponentToWorld(USceneCaptureComponent2D* SceneCaptureComponent2D, const FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection)"
  },
  {
    "label": "ProjectWorldToScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectWorldToScreen(APlayerController const* Player, const FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative = false)"
  },
  {
    "label": "TransformWorldToFirstPerson()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TransformWorldToFirstPerson(const FMinimalViewInfo& ViewInfo, const FVector& WorldPosition, bool bIgnoreFirstPersonScale)"
  },
  {
    "label": "GetViewProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix &ViewMatrix, FMatrix &ProjectionMatrix, FMatrix &ViewProjectionMatrix)"
  },
  {
    "label": "CalculateViewProjectionMatricesFromViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateViewProjectionMatricesFromViewTarget(AActor* InViewTarget, FMatrix& OutViewMatrix, FMatrix& OutProjectionMatrix, FMatrix& OutViewProjectionMatrix)"
  },
  {
    "label": "CalculateViewProjectionMatricesFromMinimalView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateViewProjectionMatricesFromMinimalView(const FMinimalViewInfo& MinimalViewInfo, const TOptional<FMatrix>& CustomProjectionMatrix, FMatrix& OutViewMatrix, FMatrix& OutProjectionMatrix, FMatrix& OutViewProjectionMatrix)"
  },
  {
    "label": "GrabOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GrabOption( FString& Options, FString& ResultString )"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyValue( const FString& Pair, FString& Key, FString& Value )"
  },
  {
    "label": "ParseOption()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ParseOption( FString Options, const FString& Key )"
  },
  {
    "label": "HasOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOption( FString Options, const FString& InKey )"
  },
  {
    "label": "GetIntOption()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIntOption( const FString& Options, const FString& Key, int32 DefaultValue)"
  },
  {
    "label": "HasLaunchOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLaunchOption(const FString& OptionToCheck)"
  },
  {
    "label": "AnnounceAccessibleString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnounceAccessibleString(const FString& AnnouncementString)"
  }
]