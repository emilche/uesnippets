[
  {
    "label": "ASceneCapture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASceneCapture2D"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "UInitialActiveSoundParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInitialActiveSoundParams"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "UDialogueWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDialogueWave"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "USaveGame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USaveGame"
  },
  {
    "label": "USceneCaptureComponent2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponent2D"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FMemoryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReader"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FDialogueContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContext"
  },
  {
    "label": "UGameplayStatics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayStatics"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "UCameraShakeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraShakeBase"
  },
  {
    "label": "FSuggestProjectileVelocityParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestProjectileVelocityParameters"
  },
  {
    "label": "UForceFeedbackAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UForceFeedbackAttenuation"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / Interface . h \" # include \" GameFramework / Actor . h \" # include \" CollisionQueryParams . h \" # include \" Engine / LatentActionManager . h \" # include \" GameFramework / PlayerController . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Kismet / KismetSystemLibrary . h \" # include \" Sound / DialogueTypes . h \" # include \" GameplayStaticsTypes . h \" # include \" Particles / WorldPSCPool . h \" # include \" GameplayStatics . generated . h \" class ASceneCapture2D ; class UAudioComponent ; class UInitialActiveSoundParams ; class UBlueprint ; class UDecalComponent ; class UDialogueWave ; class UParticleSystem ; class UParticleSystemComponent ; class USaveGame ; class USceneCaptureComponent2D ; class USceneComponent ; class USoundAttenuation ; class USoundBase ; class USoundConcurrency ; class UStaticMesh ; class FMemoryReader ; class APlayerController ; struct FDialogueContext ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FAsyncSaveGameToSlotDelegate, const FString&, const int32, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FAsyncLoadGameFromSlotDelegate, const FString&, const int32, USaveGame*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UFUNCTION(BlueprintCallable, Category = \"Spawning\", meta = (BlueprintInternalUseOnly = \"true\", DefaultToSelf = \"Outer\")) static ENGINE_API UObject* SpawnObject(TSubclassOf<UObject> ObjectClass, UObject* Outer)"
  },
  {
    "label": "SpawnEmitterAtLocation()",
    "kind": "Method",
    "detail": "Function (UParticleSystemComponent*)",
    "insertText": "SpawnEmitterAtLocation(const UObject* WorldContextObject, UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, bool bAutoDestroy, EPSCPoolMethod PoolingMethod = EPSCPoolMethod::None, bool bAutoActivateSystem =true)"
  },
  {
    "label": "SpawnEmitterAtLocation()",
    "kind": "Method",
    "detail": "Function (UParticleSystemComponent*)",
    "insertText": "SpawnEmitterAtLocation(UWorld* World, UParticleSystem* EmitterTemplate, const FTransform& SpawnTransform, bool bAutoDestroy = true, EPSCPoolMethod PoolingMethod = EPSCPoolMethod::None, bool bAutoActivate = true)"
  },
  {
    "label": "InternalSpawnEmitterAtLocation()",
    "kind": "Method",
    "detail": "Function (private : UParticleSystemComponent*)",
    "insertText": "InternalSpawnEmitterAtLocation(UWorld* World, UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod = EPSCPoolMethod::None, bool bAutoActivate = true)"
  },
  {
    "label": "AActor()",
    "kind": "Method",
    "detail": "Function (public : struct FSuggestProjectileVelocityParameters { public : const UObject* WorldContextObject = nullptr ; FVector Start = FVector::ZeroVector ; FVector End = FVector::ZeroVector ; float TossSpeed = 0 . f ; bool bFavorHighArc = false ; float CollisionRadius = 0 . f ; float OverrideGravityZ = 0 ; ESuggestProjVelocityTraceOption::Type TraceOption = ESuggestProjVelocityTraceOption::TraceFullPath ; FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam ; TArray<AActor*> ActorsToIgnore = TArray<)",
    "insertText": "AActor()"
  },
  {
    "label": "FSuggestProjectileVelocityParameters()",
    "kind": "Method",
    "detail": "Function (bool bDrawDebug = false ; bool bAcceptClosestOnNoSolutions = false ;)",
    "insertText": "FSuggestProjectileVelocityParameters(const UObject* World, FVector StartLocation, FVector EndLocation, float Speed)"
  },
  {
    "label": "SpawnEmitterAttached()",
    "kind": "Method",
    "detail": "Function (UParticleSystemComponent*)",
    "insertText": "SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, EAttachLocation::Type LocationType, bool bAutoDestroy = true, EPSCPoolMethod PoolingMethod = EPSCPoolMethod::None, bool bAutoActivate=true)"
  },
  {
    "label": "PlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySoundAtLocation(const UObject* WorldContextObject, USoundBase* Sound, FVector Location, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, class USoundAttenuation* AttenuationSettings = nullptr, USoundConcurrency* ConcurrencySettings = nullptr, const UInitialActiveSoundParams* InitialParams = nullptr)"
  },
  {
    "label": "PlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySoundAtLocation(WorldContextObject, Sound, Location, FRotator::ZeroRotator, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, nullptr, InitialParams)"
  },
  {
    "label": "SpawnSoundAttached()",
    "kind": "Method",
    "detail": "Function (class UAudioComponent*)",
    "insertText": "SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, EAttachLocation::Type LocationType = EAttachLocation::KeepRelativeOffset, bool bStopWhenAttachedToDestroyed = false, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, USoundAttenuation* AttenuationSettings = nullptr, USoundConcurrency* ConcurrencySettings = nullptr, bool bAutoDestroy = true)"
  },
  {
    "label": "PlayDialogueAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayDialogueAtLocation(const UObject* WorldContextObject, UDialogueWave* Dialogue, const FDialogueContext& Context, FVector Location, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, USoundAttenuation* AttenuationSettings = nullptr)"
  },
  {
    "label": "PlayDialogueAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayDialogueAtLocation(WorldContextObject, Dialogue, Context, Location, FRotator::ZeroRotator, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings)"
  },
  {
    "label": "SpawnDialogueAttached()",
    "kind": "Method",
    "detail": "Function (UAudioComponent*)",
    "insertText": "SpawnDialogueAttached(UDialogueWave* Dialogue, const FDialogueContext& Context, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, EAttachLocation::Type LocationType = EAttachLocation::KeepRelativeOffset, bool bStopWhenAttachedToDestroyed = false, float VolumeMultiplier = 1.f, float PitchMultiplier = 1.f, float StartTime = 0.f, USoundAttenuation* AttenuationSettings = nullptr, bool bAutoDestroy = true)"
  },
  {
    "label": "SaveGameToMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveGameToMemory(USaveGame* SaveGameObject, TArray<uint8>& OutSaveData)"
  },
  {
    "label": "SaveDataToSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDataToSlot(const TArray<uint8>& InSaveData, const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "AsyncSaveGameToSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncSaveGameToSlot(USaveGame* SaveGameObject, const FString& SlotName, const int32 UserIndex, FAsyncSaveGameToSlotDelegate SavedDelegate = FAsyncSaveGameToSlotDelegate())"
  },
  {
    "label": "LoadGameFromMemory()",
    "kind": "Method",
    "detail": "Function (USaveGame*)",
    "insertText": "LoadGameFromMemory(const TArray<uint8>& InSaveData)"
  },
  {
    "label": "LoadDataFromSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadDataFromSlot(TArray<uint8>& OutSaveData, const FString& SlotName, const int32 UserIndex)"
  },
  {
    "label": "AsyncLoadGameFromSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLoadGameFromSlot(const FString& SlotName, const int32 UserIndex, FAsyncLoadGameFromSlotDelegate LoadedDelegate)"
  },
  {
    "label": "StripSaveGameHeader()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "StripSaveGameHeader(const TArray<uint8>& SaveData)"
  },
  {
    "label": "SuggestProjectileVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestProjectileVelocity(const FSuggestProjectileVelocityParameters& ProjectileParams, FVector& OutTossVelocity)"
  },
  {
    "label": "IsProjectileTrajectoryBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProjectileTrajectoryBlocked(const UWorld* World, FVector StartLocation, FVector& ProjectileVelocity, float TargetDeltaXY, float GravityZ, float CollisionRadius = 0.f, ESuggestProjVelocityTraceOption::Type TraceOption = ESuggestProjVelocityTraceOption::TraceFullPath, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam, const TArray<AActor*>& ActorsToIgnore = TArray<AActor*>(), bool bDrawDebug = false)"
  },
  {
    "label": "PredictProjectilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PredictProjectilePath(const UObject* WorldContextObject, const FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult)"
  },
  {
    "label": "CalculateViewProjectionMatricesFromViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateViewProjectionMatricesFromViewTarget(AActor* InViewTarget, FMatrix& OutViewMatrix, FMatrix& OutProjectionMatrix, FMatrix& OutViewProjectionMatrix)"
  },
  {
    "label": "CalculateViewProjectionMatricesFromMinimalView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateViewProjectionMatricesFromMinimalView(const FMinimalViewInfo& MinimalViewInfo, const TOptional<FMatrix>& CustomProjectionMatrix, FMatrix& OutViewMatrix, FMatrix& OutProjectionMatrix, FMatrix& OutViewProjectionMatrix)"
  },
  {
    "label": "GrabOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GrabOption(FString& Options, FString& ResultString)"
  }
]