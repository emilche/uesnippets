[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FFilterCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterCategory"
  },
  {
    "label": "FFrontendFilterExternalActivationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrontendFilterExternalActivationHelper"
  },
  {
    "label": "FFilterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterBase"
  },
  {
    "label": "FFilterCategory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FilterCollection . h \" # include \" Misc / IFilter . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" UObject / NameTypes . h \" class FMenuBuilder ; class FFilterCategory { public :)",
    "insertText": "FFilterCategory(const FText& InTitle, const FText& InTooltip) : Title(InTitle), Tooltip(InTooltip)"
  },
  {
    "label": "FFilterBase()",
    "kind": "Method",
    "detail": "Function (} const FText Title ; const FText Tooltip ; } ; template<FilterType> struct FFrontendFilterExternalActivationHelper ; template<FilterType> class FFilterBase : public IFilter<FilterType> { public :)",
    "insertText": "FFilterBase(TSharedPtr<FFilterCategory> InCategory) : FilterCategory(MoveTemp(InCategory))"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "IsInverseFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInverseFilter()"
  },
  {
    "label": "ActiveStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActiveStateChanged(bool bActive)"
  },
  {
    "label": "ModifyContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(bool bActive)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (SetActiveEvent .)",
    "insertText": "Broadcast(bActive)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "SetActiveInCollection()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "SetActiveInCollection(TSharedRef<FFilterBase<FilterType>> This, bool bActive, TFilterCollection<FilterType>& Collection)"
  },
  {
    "label": "ActiveStateChanged()",
    "kind": "Method",
    "detail": "Function (bActive = ! bActive ; } This ->)",
    "insertText": "ActiveStateChanged(bActive)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Collection .)",
    "insertText": "Add(This)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { Collection .)",
    "insertText": "Remove(This)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "DECLARE_DERIVED_EVENT(FFilterBase, IFilter<FilterType>::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (} FChangedEvent ChangedEvent ;)",
    "insertText": "DECLARE_EVENT_OneParam(FFilterBase, FSetActiveEvent, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (FSetActiveEvent SetActiveEvent ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FIsActiveEvent)"
  }
]