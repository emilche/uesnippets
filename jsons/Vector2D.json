[
  {
    "label": "TVector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVector2"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "ComponentwiseAllLessThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentwiseAllLessThan(Other)"
  },
  {
    "label": "ComponentwiseAllGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentwiseAllGreaterThan(Other)"
  },
  {
    "label": "ComponentwiseAllLessOrEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentwiseAllLessOrEqual(Other)"
  },
  {
    "label": "ComponentwiseAllGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentwiseAllGreaterOrEqual(Other)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DotProduct(const TVector2<T>& A, const TVector2<T>& B)"
  },
  {
    "label": "DistSquared()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DistSquared(const TVector2<T>& V1, const TVector2<T>& V2)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Distance(const TVector2<T>& V1, const TVector2<T>& V2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "CrossProduct(const TVector2<T>& A, const TVector2<T>& B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (TVector2<T>)",
    "insertText": "Max(const TVector2<T>& A, const TVector2<T>& B)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (TVector2<T>)",
    "insertText": "Min(const TVector2<T>& A, const TVector2<T>& B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TVector2<T>)",
    "insertText": "Clamp(const TVector2<T>& V, const TVector2<T>& MinValue, const TVector2<T>& MaxValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(T InX, T InY)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Size()"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Normalize(T Tolerance=UE_SMALL_NUMBER)"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromString(const FString& InSourceString)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (UE)",
    "insertText": "UE_DECLARE_LWC_TYPE(Vector2,, FVector2D)"
  },
  {
    "label": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG(Ar, Vector2D, Vector2f, Vector2d)"
  },
  {
    "label": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG(Ar, Vector2D, Vector2d, Vector2f)"
  }
]