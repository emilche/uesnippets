[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedCallbackMayRunLongObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCallbackMayRunLongObserver"
  },
  {
    "label": "ThreadGroupNativeWin()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_THREAD_GROUP_NATIVE_WIN_H_ # define BASE_TASK_THREAD_POOL_THREAD_GROUP_NATIVE_WIN_H_ # include<windows . h> # include \" base / base_export . h \" # include \" base / task / thread_pool / thread_group_native . h \" namespace base { namespace internal { class BASE_EXPORT ThreadGroupNativeWin : public ThreadGroupNative { public :)",
    "insertText": "ThreadGroupNativeWin(TrackedRef<TaskTracker> task_tracker, TrackedRef<Delegate> delegate, ThreadGroup* predecessor_thread_group = nullptr)"
  },
  {
    "label": "ThreadGroupNativeWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadGroupNativeWin(const ThreadGroupNativeWin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadGroupNativeWin&)",
    "insertText": "operator(const ThreadGroupNativeWin&)"
  },
  {
    "label": "ThreadGroupNativeWin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadGroupNativeWin()"
  },
  {
    "label": "RunNextTaskSource()",
    "kind": "Method",
    "detail": "Function (private : class ScopedCallbackMayRunLongObserver ; void CALLBACK)",
    "insertText": "RunNextTaskSource(PTP_CALLBACK_INSTANCE callback_instance, void* thread_group_windows_impl, PTP_WORK)"
  },
  {
    "label": "JoinImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinImpl()"
  },
  {
    "label": "StartImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartImpl()"
  },
  {
    "label": "SubmitWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitWork()"
  }
]