[
  {
    "label": "FPBDShapeConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDShapeConstraints"
  },
  {
    "label": "FPBDShapeConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDShapeConstraintsBase . h \" namespace Chaos::Softs { class FPBDShapeConstraints : public FPBDShapeConstraintsBase { typedef FPBDShapeConstraintsBase Base ; using Base::ParticleOffset ; using Base::TargetPositions ; public :)",
    "insertText": "FPBDShapeConstraints(int32 InParticleOffset, int32 InParticleCount, const TArray<FSolverVec3>& StartPositions, const TArray<FSolverVec3>& TargetPositions, const FSolverReal Stiffness = (FSolverReal)1. ) : Base(InParticleOffset, InParticleCount, StartPositions, TargetPositions, Stiffness)"
  },
  {
    "label": "FPBDShapeConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDShapeConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(Index) -= InParticles.InvM(Index) * Base::GetDelta(InParticles, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(InParticles, Dt, Index)"
  }
]