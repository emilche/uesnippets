[
  {
    "label": "FCanvasRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderContext"
  },
  {
    "label": "FDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleter"
  },
  {
    "label": "FCanvasRenderThreadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderThreadScope"
  },
  {
    "label": "FCanvasRenderContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CanvasTypes . h \" # include \" RenderGraphBuilder . h \" class FCanvasRenderContext { public :)",
    "insertText": "FCanvasRenderContext(FRDGBuilder& InGraphBuilder, const FRenderTarget* RenderTarget, FIntRect InViewportRect, FIntRect InScissorRect, bool bScaledToRenderTarget)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (template<ExecuteLambdaType,ParameterStructType> void)",
    "insertText": "AddPass(FRDGEventName&& PassName, const ParameterStructType* PassParameters, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), PassParameters, ERDGPassFlags::Raster, [LocalScissorRect = ScissorRect, LocalViewportRect = ViewportRect, LocalExecuteLambda = Forward<ExecuteLambdaType&&>(ExecuteLambda)](FRDGAsyncTask, FRHICommandList& RHICmdList) { RHICmdList.SetViewport(static_cast<float>(LocalViewportRect.Min.X), static_cast<float>(LocalViewportRect.Min.Y), 0.0f, static_cast<float>(LocalViewportRect.Max.X), static_cast<float>(LocalViewportRect.Max.Y), 1.0f); if (LocalScissorRect.Area() > 0) { RHICmdList.SetScissorRect(true, static_cast<uint32>(LocalScissorRect.Min.X), static_cast<uint32>(LocalScissorRect.Min.Y), static_cast<uint32>(LocalScissorRect.Max.X), static_cast<uint32>(LocalScissorRect.Max.Y)); } LocalExecuteLambda(RHICmdList); })"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<ExecuteLambdaType> void)",
    "insertText": "AddPass(FRDGEventName&& PassName, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "FRenderTargetParameters()",
    "kind": "Method",
    "detail": "Function (FRenderTargetParameters* PassParameters = GraphBuilder . AllocParameters<)",
    "insertText": "FRenderTargetParameters()"
  },
  {
    "label": "FRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (PassParameters -> RenderTargets [ 0 ] =)",
    "insertText": "FRenderTargetBinding(RenderTarget, ERenderTargetLoadAction::ELoad)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPass(Forward<FRDGEventName&&>(PassName), PassParameters, Forward<ExecuteLambdaType&&>(ExecuteLambda))"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> T*)",
    "insertText": "Alloc(TArgs&&... Args)"
  },
  {
    "label": "DeferredRelease()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "DeferredRelease(TSharedPtr<T>&& Ptr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Alloc<TSharedPtr<)",
    "insertText": "T(Forward<TSharedPtr<T>&&>(Ptr))"
  },
  {
    "label": "DeferredDelete()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "DeferredDelete(const T* Ptr)"
  },
  {
    "label": "FDeleter()",
    "kind": "Method",
    "detail": "Function (struct FDeleter {)",
    "insertText": "FDeleter(const T* InPtr) : Ptr(InPtr)"
  },
  {
    "label": "FDeleter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDeleter()"
  },
  {
    "label": "FDeleter()",
    "kind": "Method",
    "detail": "Function (delete Ptr ; } const T* Ptr ; } ; Alloc<)",
    "insertText": "FDeleter(Ptr)"
  },
  {
    "label": "GetRenderTarget()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "GetRenderTarget()"
  },
  {
    "label": "FCanvasRenderThreadScope()",
    "kind": "Method",
    "detail": "Function (using RenderCommandFunctionArray = TArray<RenderCommandFunction> ; public :)",
    "insertText": "FCanvasRenderThreadScope(const FCanvas& Canvas)"
  },
  {
    "label": "FCanvasRenderThreadScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCanvasRenderThreadScope()"
  },
  {
    "label": "EnqueueRenderCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueRenderCommand(RenderCommandFunction&& Lambda)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenderCommands ->)",
    "insertText": "Add(MoveTemp(Lambda))"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<ExecuteLambdaType> void)",
    "insertText": "AddPass(const TCHAR* PassName, ExecuteLambdaType&& Lambda)"
  },
  {
    "label": "EnqueueRenderCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueRenderCommand([PassName, InLambda = Forward<ExecuteLambdaType&&>(Lambda)] (FCanvasRenderContext& RenderContext) mutable { RenderContext.AddPass(RDG_EVENT_NAME(\"%s\", PassName), Forward<ExecuteLambdaType&&>(InLambda)); })"
  },
  {
    "label": "EnqueueRenderCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueRenderCommand([Ptr](FCanvasRenderContext& RenderContext) { RenderContext.DeferredDelete(Ptr); })"
  }
]