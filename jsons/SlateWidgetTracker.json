[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ISlateMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateMetaData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateWidgetTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWidgetTracker"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class SWidget ; class ISlateMetaData ; enum class ETrackedSlateWidgetOperations : uint8 { AddedTrackedWidget,RemovedTrackedWidget } ;)",
    "insertText": "DECLARE_EVENT_ThreeParams(FSlateWidgetTracker, FTrackedWidgetsChangedEvent, const SWidget*, const FName&, ETrackedSlateWidgetOperations)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : FSlateWidgetTracker&)",
    "insertText": "Get()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "AddTrackedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackedWidget(const SWidget* WidgetToTrack, const TArray<FName>& Tags)"
  },
  {
    "label": "AddTrackedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackedWidget(const SWidget* WidgetToTrack, FName Tag)"
  },
  {
    "label": "RemoveTrackedWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTrackedWidget(const SWidget* WidgetToStopTracking)"
  },
  {
    "label": "OnTrackedWidgetsChanged()",
    "kind": "Method",
    "detail": "Function (FTrackedWidgetsChangedEvent&)",
    "insertText": "OnTrackedWidgetsChanged(const FName& Tag)"
  },
  {
    "label": "ForEachTrackedWidget()",
    "kind": "Method",
    "detail": "Function (template<class Predicate> void)",
    "insertText": "ForEachTrackedWidget(FName Tag, Predicate Pred)"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(Widget)"
  },
  {
    "label": "FSlateWidgetTracker()",
    "kind": "Method",
    "detail": "Function (} } } private :)",
    "insertText": "FSlateWidgetTracker()"
  }
]