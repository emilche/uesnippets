[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FReplayHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplayHelper"
  },
  {
    "label": "FReplayResultHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplayResultHandler"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "UDemoNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetConnection"
  },
  {
    "label": "UReplayNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplayNetConnection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRepActorsCheckpointParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepActorsCheckpointParams"
  },
  {
    "label": "FExternalDataWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalDataWrapper"
  },
  {
    "label": "FCheckpointStepHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckpointStepHelper"
  },
  {
    "label": "FPendingCheckPointActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCheckPointActor"
  },
  {
    "label": "FNetGuidCacheItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetGuidCacheItem"
  },
  {
    "label": "FCheckpointSaveStateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckpointSaveStateContext"
  },
  {
    "label": "FLevelStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelStatus"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "InitResultHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / PackageMapClient . h \" # include \" NetworkReplayStreaming . h \" # include \" Net / Core / Connection / NetResult . h \" # include \" Net / ReplayResult . h \" # include \" ReplayTypes . h \" # include \" Containers / ArrayView . h \" class APlayerController ; class UNetConnection ; class FReplayHelper ; class FReplayResultHandler final : public UE::Net::FNetResultHandler { class FReplayHelper ; private : void)",
    "insertText": "InitResultHandler(FReplayHelper* InReplayHelper)"
  },
  {
    "label": "HandleNetResult()",
    "kind": "Method",
    "detail": "Function (UE::Net::EHandleNetResult)",
    "insertText": "HandleNetResult(UE::Net::FNetResult&& InResult)"
  },
  {
    "label": "FReplayHelper()",
    "kind": "Method",
    "detail": "Function (private : FReplayHelper* ReplayHelper = nullptr ; } ; class FReplayHelper { class UDemoNetDriver ; class UDemoNetConnection ; class UReplayNetConnection ; class FReplayResultHandler ; public :)",
    "insertText": "FReplayHelper()"
  },
  {
    "label": "FReplayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReplayHelper(FReplayHelper&&)"
  },
  {
    "label": "FReplayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReplayHelper(const FReplayHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FReplayHelper&)",
    "insertText": "operator(const FReplayHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FReplayHelper&)",
    "insertText": "operator(FReplayHelper&&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "Init(const FURL& URL)"
  },
  {
    "label": "SetPlaybackNetworkVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackNetworkVersions(FArchive& Ar)"
  },
  {
    "label": "SetPlaybackNetworkVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackNetworkVersions(UNetConnection* Connection)"
  },
  {
    "label": "GetPlaybackReplayVersion()",
    "kind": "Method",
    "detail": "Function (FReplayCustomVersion::Type)",
    "insertText": "GetPlaybackReplayVersion()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording(UNetConnection* Connection)"
  },
  {
    "label": "StopReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopReplay()"
  },
  {
    "label": "OnStartRecordingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartRecordingComplete(const FStartStreamingResult& Result)"
  },
  {
    "label": "WriteNetworkDemoHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetworkDemoHeader(UNetConnection* Connection)"
  },
  {
    "label": "ReadPlaybackDemoHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPlaybackDemoHeader(FString& Error)"
  },
  {
    "label": "FlushNetChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushNetChecked(UNetConnection& NetConnection)"
  },
  {
    "label": "WritePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePacket(FArchive& Ar, uint8* Data, int32 Count)"
  },
  {
    "label": "OnSeamlessTravelStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeamlessTravelStart(UWorld* InWorld, const FString& LevelName, UNetConnection* Connection)"
  },
  {
    "label": "CreateSpectatorController()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "CreateSpectatorController(UNetConnection* Connection)"
  },
  {
    "label": "HasLevelStreamingFixes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLevelStreamingFixes()"
  },
  {
    "label": "TickRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRecording(float DeltaSeconds, UNetConnection* Connection)"
  },
  {
    "label": "SaveCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCheckpoint(UNetConnection* Connection)"
  },
  {
    "label": "TickCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCheckpoint(UNetConnection* Connection)"
  },
  {
    "label": "ShouldSaveCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSaveCheckpoint()"
  },
  {
    "label": "GetCheckpointSaveMaxMSPerFrame()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCheckpointSaveMaxMSPerFrame()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnReplayRecordError, const UE::Net::TNetResult<EReplayResult>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnReplayRecordError OnReplayRecordError ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnReplayPlaybackError, const UE::Net::TNetResult<EReplayResult>&)"
  },
  {
    "label": "GetClampedDeltaSeconds()",
    "kind": "Method",
    "detail": "Function (FOnReplayPlaybackError OnReplayPlaybackError ; float)",
    "insertText": "GetClampedDeltaSeconds(UWorld* World, const float DeltaSeconds)"
  },
  {
    "label": "GetDemoCurrentTimeInMS()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDemoCurrentTimeInMS()"
  },
  {
    "label": "GetLastCheckpointTimeInMS()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLastCheckpointTimeInMS()"
  },
  {
    "label": "ResetState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetState()"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "SetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsProvider(TSharedPtr<IAnalyticsProvider> InProvider)"
  },
  {
    "label": "RequestCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCheckpoint()"
  },
  {
    "label": "RemoveActorFromCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorFromCheckpoint(UNetConnection* Connection, AActor* Actor)"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(UNetConnection* Connection, AActor* Actor)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnLevelAddedToWorld(ULevel* Level, UWorld* World)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(ULevel* Level, UWorld* World)"
  },
  {
    "label": "RecordFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFrame(float DeltaSeconds, UNetConnection* Connection)"
  },
  {
    "label": "WriteDemoFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDemoFrame(UNetConnection* Connection, FArchive& Ar, TArray<FQueuedDemoPacket>& QueuedPackets, float FrameTime, EWriteDemoFrameFlags Flags)"
  },
  {
    "label": "ReadDemoFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDemoFrame(UNetConnection* Connection, FArchive& Ar, TArray<FPlaybackPacket>& InPlaybackPackets, const bool bForLevelFastForward, const FArchivePos MaxArchiveReadPos, float* OutTime)"
  },
  {
    "label": "ReadPacket()",
    "kind": "Method",
    "detail": "Function (enum class EReadPacketState { Success,End,Error,} ; enum class EReadPacketMode { Default,SkipData } ; const EReadPacketState)",
    "insertText": "ReadPacket(FArchive& Archive, TArray<uint8>& OutBuffer, const EReadPacketMode Mode)"
  },
  {
    "label": "CacheNetGuids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheNetGuids(UNetConnection* Connection)"
  },
  {
    "label": "SerializeGuidCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeGuidCache(UNetConnection* Connection, const FRepActorsCheckpointParams& Params, FArchive* CheckpointArchive)"
  },
  {
    "label": "SerializeDeletedStartupActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeDeletedStartupActors(UNetConnection* Connection, const FRepActorsCheckpointParams& Params, FArchive* CheckpointArchive)"
  },
  {
    "label": "SerializeDeltaDynamicDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeDeltaDynamicDestroyed(UNetConnection* Connection, const FRepActorsCheckpointParams& Params, FArchive* CheckpointArchive)"
  },
  {
    "label": "SerializeDeltaClosedChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeDeltaClosedChannels(UNetConnection* Connection, const FRepActorsCheckpointParams& Params, FArchive* CheckpointArchive)"
  },
  {
    "label": "ReplicateCheckpointActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateCheckpointActor(AActor* ToReplicate, UNetConnection* Connection, class FRepActorsCheckpointParams& Params)"
  },
  {
    "label": "ReplicateActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateActor(AActor* Actor, UNetConnection* Connection, bool bMustReplicate)"
  },
  {
    "label": "SaveExternalData()",
    "kind": "Method",
    "detail": "Function (TMap<TWeakObjectPtr<UObject>,FNetworkGUID,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<UObject>,FNetworkGUID>> ObjectsWithExternalDataMap ; struct FExternalDataWrapper { FNetworkGUID NetGUID ; TArray<uint8> Data ; int32 NumBits ; } ; TMap<TWeakObjectPtr<UObject>,FExternalDataWrapper,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<UObject>,FExternalDataWrapper>> ExternalDataMap ; void)",
    "insertText": "SaveExternalData(UNetConnection* Connection, FArchive& Ar)"
  },
  {
    "label": "LoadExternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadExternalData(FArchive& Ar, const float TimeSeconds)"
  },
  {
    "label": "SetExternalDataForObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetExternalDataForObject(UNetConnection* Connection, UObject* OwningObject, const uint8* Src, const int32 NumBits)"
  },
  {
    "label": "ResetDeltaCheckpointTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDeltaCheckpointTracking(UNetConnection* Connection)"
  },
  {
    "label": "FCheckpointStepHelper()",
    "kind": "Method",
    "detail": "Function (FURL DemoURL ; FString ActiveReplayName ; TSharedPtr<INetworkReplayStreamer> ReplayStreamer ; TWeakObjectPtr<UWorld> World ; TArray<FLevelNameAndTime> LevelNamesAndTimes ; int32 CurrentLevelIndex ; int32 DemoFrameNum ; float DemoCurrentTime ; float DemoTotalTime ; double LastCheckpointTime ; float LatestReadFrameTime ; bool bWasStartRecordingSuccessful ; bool bIsWaitingForStream ; bool bIsLoadingCheckpoint ; bool bHasLevelStreamingFixes ; bool bHasDeltaCheckpoints ; bool bHasGameSpecificFrameData ; bool bPauseRecording ; bool bRecordMapChanges ; float CheckpointSaveMaxMSPerFrame ; FNetworkDemoHeader PlaybackDemoHeader ; enum class ECheckpointSaveState { Idle,ProcessCheckpointActors,SerializeDeletedStartupActors,SerializeDeltaDynamicDestroyed,SerializeDeltaClosedChannels,CacheNetGuids,SerializeGuidCache,SerializeNetFieldExportGroupMap,SerializeDemoFrameFromQueuedDemoPackets,Finalize,} ; struct FCheckpointStepHelper {)",
    "insertText": "FCheckpointStepHelper()"
  },
  {
    "label": "FCheckpointStepHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCheckpointStepHelper(ECheckpointSaveState InCheckpointState, const double InCheckpointStartTime, int32* InCurrentIndex, int32 InTotalCount) : CheckpointState(InCheckpointState) , CheckpointStartTime(InCheckpointStartTime) , CurrentIndex(InCurrentIndex) , TotalCount(InTotalCount)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "TotalTimeInMS()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "TotalTimeInMS(EndTime - CheckpointStartTime)"
  },
  {
    "label": "StepTimeInMS()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "StepTimeInMS(EndTime - StartTime)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* StateStr =)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case ECheckpointSaveState::SerializeDeletedStartupActors : StateStr =)",
    "insertText": "TEXT(\"SerializeDeletedStartupActors\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case ECheckpointSaveState::SerializeDeltaDynamicDestroyed : StateStr =)",
    "insertText": "TEXT(\"SerializeDeltaDynamicDestroyed\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case ECheckpointSaveState::SerializeDeltaClosedChannels : StateStr =)",
    "insertText": "TEXT(\"SerializeDeltaClosedChannels\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case ECheckpointSaveState::SerializeGuidCache : StateStr =)",
    "insertText": "TEXT(\"SerializeGuidCache\")"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "ensureMsgf(false, TEXT(\"FCheckpointStepHelper: Unsupported checkpoint state: %d\"), CheckpointState)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "UE_LOG(LogDemo, Verbose, TEXT(\"Checkpoint. %s: %i/%i, took %.2fms (Total this frame: %.2fms)\"), StateStr, *CurrentIndex, TotalCount, StepTimeInMS, TotalTimeInMS)"
  },
  {
    "label": "FCheckpointSaveStateContext()",
    "kind": "Method",
    "detail": "Function (} private : ECheckpointSaveState CheckpointState ; double StartTime = 0 . 0 ; double CheckpointStartTime = 0 . 0 ; int32* CurrentIndex = nullptr ; int32 TotalCount = 0 ; } ; struct FPendingCheckPointActor { TWeakObjectPtr<AActor> Actor ; int32 LevelIndex ; } ; struct FNetGuidCacheItem { FNetworkGUID NetGuid ; FNetGuidCacheObject NetGuidCacheObject ; } ; struct FCheckpointSaveStateContext {)",
    "insertText": "FCheckpointSaveStateContext() : CheckpointSaveState(ECheckpointSaveState::Idle) , TotalCheckpointSaveTimeSeconds(0.0) , TotalCheckpointReplicationTimeSeconds(0.0) , bWriteCheckpointOffset(false) , TotalCheckpointSaveFrames(0) , TotalCheckpointActors(0) , CheckpointOffset(0) , GuidCacheSize(0) , NextAmortizedItem(0) , NumNetGuidsForRecording(0) , NetGuidsCountPos(0)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} ECheckpointSaveState CheckpointSaveState ; FPackageMapAckState CheckpointAckState ; TArray<FPendingCheckPointActor> PendingCheckpointActors ; TMap<TWeakObjectPtr<AActor>,int32,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor>,int32>> PendingActorToIndex ; double TotalCheckpointSaveTimeSeconds ; double TotalCheckpointReplicationTimeSeconds ; bool bWriteCheckpointOffset ; int32 TotalCheckpointSaveFrames ; int32 TotalCheckpointActors ; FArchivePos CheckpointOffset ; uint32 GuidCacheSize ; FDeltaCheckpointData DeltaCheckpointData ; TArray<FNetworkGUID> DeltaChannelCloseKeys ; TArray<FNetGuidCacheItem> NetGuidCacheSnapshot ; int32 NextAmortizedItem ; int32 NumNetGuidsForRecording ; FArchivePos NetGuidsCountPos ; TArray<FString> CheckpointDeletedNetStartupActors ; TMap<FName,uint32> NameTableMap ; void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "FLevelStatus()",
    "kind": "Method",
    "detail": "Function (} ; FCheckpointSaveStateContext CheckpointSaveContext ; FDeltaCheckpointData RecordingDeltaCheckpointData ; TArray<TUniquePtr<FDeltaCheckpointData>> PlaybackDeltaCheckpointData ; TSet<TWeakObjectPtr<UObject>> UniqueStreamingLevels ; TSet<TWeakObjectPtr<UObject>> NewStreamingLevelsThisFrame ; TArray<FQueuedDemoPacket> QueuedDemoPackets ; TArray<FQueuedDemoPacket> QueuedCheckpointPackets ; struct FLevelStatus {)",
    "insertText": "FLevelStatus(const FString& LevelPackageName) : LevelName(LevelPackageName), LevelIndex(INDEX_NONE), bIsReady(false), bHasBeenSeen(false)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (LevelName .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "ResetLevelMap()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FLevelStatus> AllLevelStatuses ; TMap<FString,int32> LevelStatusesByName ; TMap<const ULevel*,int32> LevelStatusIndexByLevel ; TMap<FName,TWeakObjectPtr<ULevel>> WeakLevelsByName ; void)",
    "insertText": "ResetLevelMap()"
  },
  {
    "label": "ClearLevelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLevelMap()"
  },
  {
    "label": "GetLevelPackageName()",
    "kind": "Method",
    "detail": "Function (TArray<int32> SeenLevelStatuses ; uint32 NumLevelsAddedThisFrame ; TSet<class ULevel*> LevelsPendingFastForward ; bool bPendingCheckpointRequest ; UE::Net::FNetResultManager ResultManager ; FString)",
    "insertText": "GetLevelPackageName(const ULevel& InLevel)"
  },
  {
    "label": "ResetLevelStatuses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLevelStatuses()"
  },
  {
    "label": "ClearLevelStreamingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLevelStreamingState()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (AllLevelStatuses .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumLevelsAddedThisFrame = 0 ; LevelStatusIndexByLevel .)",
    "insertText": "Reset()"
  },
  {
    "label": "FindOrAddLevelStatus()",
    "kind": "Method",
    "detail": "Function (} FLevelStatus&)",
    "insertText": "FindOrAddLevelStatus(const ULevel& Level)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32* LevelStatusIndex = LevelStatusIndexByLevel .)",
    "insertText": "Find(&Level)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LevelStatusIndexByLevel .)",
    "insertText": "Add(&Level, LevelStatus.LevelIndex)"
  },
  {
    "label": "FindOrAddLevelStatus()",
    "kind": "Method",
    "detail": "Function (} FLevelStatus&)",
    "insertText": "FindOrAddLevelStatus(FString&& LevelPackageName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllLevelStatuses [ Index ] . LevelIndex = Index ; LevelStatusesByName .)",
    "insertText": "Add(MoveTemp(LevelPackageName), Index)"
  },
  {
    "label": "GetLevelStatus()",
    "kind": "Method",
    "detail": "Function (NumLevelsAddedThisFrame + + ; return AllLevelStatuses [ Index ] ; } FLevelStatus&)",
    "insertText": "GetLevelStatus(const int32 SeenLevelIndex)"
  },
  {
    "label": "GetCheckpointSaveState()",
    "kind": "Method",
    "detail": "Function (ECheckpointSaveState)",
    "insertText": "GetCheckpointSaveState()"
  },
  {
    "label": "NotifyReplayError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyReplayError(UE::Net::TNetResult<EReplayResult>&& Result)"
  }
]