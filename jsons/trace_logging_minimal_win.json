[
  {
    "label": "TlmProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TlmProvider"
  },
  {
    "label": "DataDescCountSum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataDescCountSum"
  },
  {
    "label": "FieldTy1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTy1"
  },
  {
    "label": "FieldTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTy"
  },
  {
    "label": "TlmFieldBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TlmFieldBase"
  },
  {
    "label": "TlmMbcsStringField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TlmMbcsStringField"
  },
  {
    "label": "TlmUtf8StringField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TlmUtf8StringField"
  },
  {
    "label": "TlmProvider()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_LOGGING_MINIMAL_WIN_H_ # define BASE_TRACE_EVENT_TRACE_LOGGING_MINIMAL_WIN_H_ # include<stdint . h> # include<windows . h> # include<evntprov . h> # include \" base / memory / raw_ptr . h \" class TlmProvider { public :)",
    "insertText": "TlmProvider()"
  },
  {
    "label": "TlmProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TlmProvider(const char* provider_name, const GUID& provider_guid, PENABLECALLBACK enable_callback = nullptr, void* enable_callback_context = nullptr)"
  },
  {
    "label": "TlmProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TlmProvider(const TlmProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TlmProvider&)",
    "insertText": "operator(const TlmProvider&)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (ULONG)",
    "insertText": "Register(const char* provider_name, const GUID& provider_guid, PENABLECALLBACK enable_callback = nullptr, void* enable_callback_context = nullptr)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(uint8_t level)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(uint8_t level, uint64_t keyword)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const EVENT_DESCRIPTOR& event_descriptor)"
  },
  {
    "label": "WriteEvent()",
    "kind": "Method",
    "detail": "Function (template<class . . . FieldTys> ULONG)",
    "insertText": "WriteEvent(const char* event_name, const EVENT_DESCRIPTOR& event_descriptor, const FieldTys&... event_fields)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function ({ char dummy [)",
    "insertText": "sizeof(FieldTys) == 0 ? 1 : sizeof...(FieldTys)"
  },
  {
    "label": "EventAddField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventAddField(metadata, &metadata_index, event_fields.in_type_, event_fields.out_type_, event_fields.Name())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(dummy)"
  },
  {
    "label": "EventDescriptorFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventDescriptorFill(descriptors, &descriptors_index, event_fields)"
  },
  {
    "label": "EventEnd()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "EventEnd(metadata, metadata_index, descriptors, descriptors_index, event_descriptor)"
  },
  {
    "label": "EventDescriptorFill()",
    "kind": "Method",
    "detail": "Function (} private : uint16_t kMaxProviderMetadataSize = 1 2 8 ; uint16_t kMaxEventMetadataSize = 2 5 6 ; template<class . . . FieldTys> struct DataDescCountSum ; template<> struct DataDescCountSum<> { uint8_t value = 0 ; } ; template<class FieldTy1,class . . . FieldTyRest> struct DataDescCountSum<FieldTy1,FieldTyRest . . .> { uint8_t value = FieldTy1::data_desc_count_ + DataDescCountSum<FieldTyRest . . .>::value ; } ; template<class FieldTy> char)",
    "insertText": "EventDescriptorFill(EVENT_DATA_DESCRIPTOR* descriptors, uint8_t* pdescriptors_index, const FieldTy& event_field)"
  },
  {
    "label": "FillEventDescriptor()",
    "kind": "Method",
    "detail": "Function (event_field .)",
    "insertText": "FillEventDescriptor(&descriptors[*pdescriptors_index])"
  },
  {
    "label": "StaticEnableCallback()",
    "kind": "Method",
    "detail": "Function (* pdescriptors_index + = FieldTy::data_desc_count_ ; return 0 ; } void __stdcall)",
    "insertText": "StaticEnableCallback(const GUID* source_id, ULONG is_enabled, UCHAR level, ULONGLONG match_any_keyword, ULONGLONG match_all_keyword, PEVENT_FILTER_DESCRIPTOR FilterData, PVOID callback_context)"
  },
  {
    "label": "EventBegin()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "EventBegin(char* metadata, const char* event_name)"
  },
  {
    "label": "EventAddField()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "EventAddField(char* metadata, uint16_t* metadata_index, uint8_t in_type, uint8_t out_type, const char* field_name)"
  },
  {
    "label": "EventEnd()",
    "kind": "Method",
    "detail": "Function (ULONG)",
    "insertText": "EventEnd(char* metadata, uint16_t metadata_index, EVENT_DATA_DESCRIPTOR* descriptors, uint32_t descriptors_index, const EVENT_DESCRIPTOR& event_descriptor)"
  },
  {
    "label": "KeywordEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeywordEnabled(uint64_t keyword)"
  },
  {
    "label": "AppendNameToMetadata()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "AppendNameToMetadata(char* metadata, uint16_t metadata_size, uint16_t metadata_index, const char* name)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (uint32_t level_plus1_ = 0 ; uint16_t provider_metadata_size_ = 0 ; uint64_t keyword_any_ = 0 ; uint64_t keyword_all_ = 0 ; uint64_t reg_handle_ = 0 ; PENABLECALLBACK enable_callback_ = nullptr ; raw_ptr<void> enable_callback_context_ = nullptr ; char provider_metadata_ [ kMaxProviderMetadataSize ] = { } ; } ; template<uint8_t data_desc_count,uint8_t in_type,uint8_t out_type = 0> class TlmFieldBase { public : const char*)",
    "insertText": "Name()"
  },
  {
    "label": "TlmMbcsStringField()",
    "kind": "Method",
    "detail": "Function (} private : class TlmProvider ; uint8_t data_desc_count_ = data_desc_count ; uint8_t in_type_ = in_type ; uint8_t out_type_ = out_type ; const char* name_ ; } ; class TlmMbcsStringField : public TlmFieldBase<1,2> { public :)",
    "insertText": "TlmMbcsStringField(const char* name, const char* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Value()"
  },
  {
    "label": "FillEventDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillEventDescriptor(EVENT_DATA_DESCRIPTOR* descriptors)"
  },
  {
    "label": "TlmUtf8StringField()",
    "kind": "Method",
    "detail": "Function (private : const char* value_ ; } ; class TlmUtf8StringField : public TlmFieldBase<1,2,3 5> { public :)",
    "insertText": "TlmUtf8StringField(const char* name, const char* value)"
  },
  {
    "label": "TlmEventDescriptor()",
    "kind": "Method",
    "detail": "Function (private : const char* value_ ; } ; EVENT_DESCRIPTOR)",
    "insertText": "TlmEventDescriptor(uint8_t level, uint64_t keyword)"
  }
]