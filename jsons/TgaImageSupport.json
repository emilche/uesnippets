[
  {
    "label": "FTGAFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTGAFileHeader"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Serialization / Archive . h \" # pragma)",
    "insertText": "pack(push,1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint8 IdFieldLength ; uint8 ColorMapType ; uint8 ImageTypeCode ; uint16 ColorMapOrigin ; uint16 ColorMapLength ; uint8 ColorMapEntrySize ; uint16 XOrigin ; uint16 YOrigin ; uint16 Width ; uint16 Height ; uint8 BitsPerPixel ; uint8 ImageDescriptor ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FTGAFileHeader& H)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (Ar<<H . IdFieldLength<<H . ColorMapType<<H . ImageTypeCode ; Ar<<H . ColorMapOrigin<<H . ColorMapLength<<H . ColorMapEntrySize ; Ar<<H . XOrigin<<H . YOrigin<<H . Width<<H . Height<<H . BitsPerPixel ; Ar<<H . ImageDescriptor ; return Ar ; } } ; # pragma)",
    "insertText": "pack(pop) IMAGEWRAPPER_API bool DecompressTGA_helper( const FTGAFileHeader* TGA, const int64 TGABufferLength, uint32* TextureData, const int64 TextureDataSize)"
  }
]