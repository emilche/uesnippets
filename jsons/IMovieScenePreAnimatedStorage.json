[
  {
    "label": "FObjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectKey"
  },
  {
    "label": "FMovieSceneEvaluationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationKey"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FRestoreStateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRestoreStateParams"
  },
  {
    "label": "FCustomPropertyIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyIndex"
  },
  {
    "label": "FPreAnimatedStateExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateExtension"
  },
  {
    "label": "IPreAnimatedObjectEntityStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPreAnimatedObjectEntityStorage"
  },
  {
    "label": "IPreAnimatedObjectPropertyStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPreAnimatedObjectPropertyStorage"
  },
  {
    "label": "IPreAnimatedStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPreAnimatedStorage"
  },
  {
    "label": "IPreAnimatedStateTokenStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPreAnimatedStateTokenStorage"
  },
  {
    "label": "IPreAnimatedStorage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" EntitySystem / EntityAllocationIterator . h \" # include \" EntitySystem / MovieSceneComponentPtr . h \" # include \" EntitySystem / MovieScenePropertyBinding . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStorageID . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateTypes . h \" struct FObjectKey ; struct FMovieSceneEvaluationKey ; class FReferenceCollector ; class FTrackInstancePropertyBindings ; class UMovieSceneEntitySystemLinker ; namespace UE { namespace MovieScene { struct FRestoreStateParams ; struct FCustomPropertyIndex ; struct FPreAnimatedStateExtension ; struct IPreAnimatedObjectEntityStorage ; struct IPreAnimatedObjectPropertyStorage ; struct IPreAnimatedStorage : TSharedFromThis<IPreAnimatedStorage> { ~)",
    "insertText": "IPreAnimatedStorage()"
  },
  {
    "label": "GetStorageType()",
    "kind": "Method",
    "detail": "Function (} FPreAnimatedStorageID)",
    "insertText": "GetStorageType()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FPreAnimatedStorageID StorageID, FPreAnimatedStateExtension* ParentExtension)"
  },
  {
    "label": "OnObjectReplaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnObjectReplaced(FPreAnimatedStorageIndex StorageIndex, const FObjectKey& OldObject, const FObjectKey& NewObject)"
  },
  {
    "label": "RestorePreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (} EPreAnimatedStorageRequirement)",
    "insertText": "RestorePreAnimatedStateStorage(FPreAnimatedStorageIndex StorageIndex, EPreAnimatedStorageRequirement SourceRequirement, EPreAnimatedStorageRequirement TargetRequirement, const FRestoreStateParams& Params)"
  },
  {
    "label": "DiscardPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (EPreAnimatedStorageRequirement)",
    "insertText": "DiscardPreAnimatedStateStorage(FPreAnimatedStorageIndex StorageIndex, EPreAnimatedStorageRequirement SourceRequirement)"
  },
  {
    "label": "AsPropertyStorage()",
    "kind": "Method",
    "detail": "Function (IPreAnimatedObjectPropertyStorage*)",
    "insertText": "AsPropertyStorage()"
  },
  {
    "label": "BeginTrackingEntities()",
    "kind": "Method",
    "detail": "Function (} } ; struct IPreAnimatedObjectEntityStorage { void)",
    "insertText": "BeginTrackingEntities(const FPreAnimatedTrackerParams& Params, TRead<FMovieSceneEntityID> EntityIDs, TRead<FRootInstanceHandle> InstanceHandles, TRead<UObject*> BoundObjects)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingEntity(FMovieSceneEntityID EntityID, bool bWantsRestoreState, FRootInstanceHandle InstanceHandle, UObject* BoundObject)"
  },
  {
    "label": "CachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValues(const FCachePreAnimatedValueParams& Params, TArrayView<UObject* const> BoundObjects)"
  },
  {
    "label": "RestoreState()",
    "kind": "Method",
    "detail": "Function (} ; struct IPreAnimatedStateTokenStorage { void)",
    "insertText": "RestoreState(UMovieSceneEntitySystemLinker* Linker, const FMovieSceneEvaluationKey& Key, FRootInstanceHandle InstanceHandle)"
  },
  {
    "label": "BeginTrackingEntities()",
    "kind": "Method",
    "detail": "Function (} ; struct IPreAnimatedObjectPropertyStorage { using FThreeWayAccessor = TMultiReadOptional<FCustomPropertyIndex,uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; void)",
    "insertText": "BeginTrackingEntities(const FPreAnimatedTrackerParams& Params, TRead<FMovieSceneEntityID> EntityIDs, TRead<FRootInstanceHandle> InstanceHandles, TRead<UObject*> BoundObjects, TRead<FMovieScenePropertyBinding> PropertyBindings)"
  },
  {
    "label": "CachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValues(const FCachePreAnimatedValueParams& Params, FEntityAllocationProxy Item, TRead<UObject*> Objects, TRead<FMovieScenePropertyBinding> PropertyBindings, FThreeWayAccessor Properties)"
  }
]