[
  {
    "label": "FIntNetSerializerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntNetSerializerBase"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / Serialization / BitPacking . h \" # include \" Iris / Serialization / NetBitStreamReader . h \" # include \" Iris / Serialization / NetBitStreamWriter . h \" # include \" Iris / Serialization / NetSerializationContext . h \" # include \" Iris / Serialization / NetSerializer . h \" # include \" Iris / Core / BitTwiddling . h \" # include<type_traits> namespace UE::Net::Private { template<InSourceType,InConfigType> struct FIntNetSerializerBase { const uint32 Version = 0 ; using SourceType = InSourceType ; using QuantizedType = std::make_unsigned_t<SourceType> ; typedef InConfigType ConfigType ; void)",
    "insertText": "Serialize(FNetSerializationContext& Context, const FNetSerializeArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType Value =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source)"
  },
  {
    "label": "GetBitStreamWriter()",
    "kind": "Method",
    "detail": "Function (FNetBitStreamWriter* Writer = Context .)",
    "insertText": "GetBitStreamWriter()"
  },
  {
    "label": "ConfigType()",
    "kind": "Method",
    "detail": "Function (const ConfigType* Config = static_cast<const)",
    "insertText": "ConfigType(Args.NetSerializerConfig)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 BitCount = Config -> BitCount ;)",
    "insertText": "if(BitCount >= ZeroValueOptimizationBitCount)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer ->)",
    "insertText": "WriteBits(static_cast<uint32>(Value), FMath::Min(BitCount, 32U))"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer ->)",
    "insertText": "WriteBits(static_cast<uint32>(Value >> 32U), BitCount - 32U)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (} } else { Writer ->)",
    "insertText": "WriteBits(Value, BitCount)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Deserialize(FNetSerializationContext& Context, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (QuantizedType* Target = reinterpret_cast<)",
    "insertText": "QuantizedType(Args.Target)"
  },
  {
    "label": "GetBitStreamReader()",
    "kind": "Method",
    "detail": "Function (FNetBitStreamReader* Reader = Context .)",
    "insertText": "GetBitStreamReader()"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (* Target =)",
    "insertText": "SourceType(0)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (Value = Reader ->)",
    "insertText": "ReadBits(FMath::Min(BitCount, 32U))"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (Value | = static_cast<)",
    "insertText": "QuantizedType(Reader->ReadBits(BitCount - 32U))"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (} } else { Value = static_cast<)",
    "insertText": "QuantizedType(Reader->ReadBits(BitCount))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(std::is_signed_v<SourceType>)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType SignMask = static_cast<)",
    "insertText": "QuantizedType(QuantizedType(1) << (BitCount - 1U))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Value ^ SignMask)"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (}* Target = Value ; } void)",
    "insertText": "SerializeDelta(FNetSerializationContext& Context, const FNetSerializeDeltaArgs& Args)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType Value =* reinterpret_cast<const)",
    "insertText": "SourceType(Args.Source)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType PrevValue =* reinterpret_cast<const)",
    "insertText": "SourceType(Args.Prev)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint8 MaxBitCount = Config -> BitCount ;)",
    "insertText": "if(MaxBitCount == 0)"
  },
  {
    "label": "SerializeIntDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIntDelta(*Writer, Value, PrevValue, BitCountTable, BitCountTableEntryCount, MaxBitCount)"
  },
  {
    "label": "SerializeUintDelta()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SerializeUintDelta(*Writer, Value, PrevValue, BitCountTable, BitCountTableEntryCount, MaxBitCount)"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DeserializeDelta(FNetSerializationContext& Context, const FNetDeserializeDeltaArgs& Args)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (SourceType& Target =* reinterpret_cast<)",
    "insertText": "SourceType(Args.Target)"
  },
  {
    "label": "DeserializeIntDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeIntDelta(*Reader, Target, PrevValue, BitCountTable, BitCountTableEntryCount, MaxBitCount)"
  },
  {
    "label": "DeserializeUintDelta()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DeserializeUintDelta(*Reader, Target, PrevValue, BitCountTable, BitCountTableEntryCount, MaxBitCount)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Quantize(FNetSerializationContext& Context, const FNetQuantizeArgs& Args)"
  },
  {
    "label": "SignMask()",
    "kind": "Method",
    "detail": "Function (const QuantizedType ValueMask =)",
    "insertText": "SignMask(SignMask - QuantizedType(1))"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (Value = static_cast<)",
    "insertText": "QuantizedType(Source)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (} else { QuantizedType MaxValueForType = ~)",
    "insertText": "QuantizedType(0)"
  },
  {
    "label": "MaxValueForType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType ValueMask =)",
    "insertText": "MaxValueForType(sizeof(QuantizedType)*8U - BitCount)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (Target = Value ; } void)",
    "insertText": "Dequantize(FNetSerializationContext& Context, const FNetDequantizeArgs& Args)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (Target = Source ; } bool)",
    "insertText": "IsEqual(FNetSerializationContext& Context, const FNetIsEqualArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType Value0 =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source0)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType Value1 =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source1)"
  },
  {
    "label": "MaxValueForType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType ValueMask =)",
    "insertText": "MaxValueForType(sizeof(SourceType)*8U - BitCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 BitCount = Config -> BitCount ;)",
    "insertText": "if(BitCount < 1 || BitCount > sizeof(SourceType)*8U)"
  },
  {
    "label": "GetBitsNeeded()",
    "kind": "Method",
    "detail": "Function (const bool bIsValidValue =)",
    "insertText": "GetBitsNeeded(Value)"
  },
  {
    "label": "LUTShiftAmount()",
    "kind": "Method",
    "detail": "Function (uint64 TableIndexLUT = 0 b1111111110100100U ; uint32 MaxTableIndex = 3 U ; const uint32)",
    "insertText": "LUTShiftAmount(uint8(BitCount - 1) >> 3U)"
  },
  {
    "label": "TableIndex()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "TableIndex(TableIndexLUT >> LUTShiftAmount)"
  }
]