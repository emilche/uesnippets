[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Misc / CompressionFlags . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(OodleDataCompression, Log, All)"
  },
  {
    "label": "ECompressorToString()",
    "kind": "Method",
    "detail": "Function (namespace FOodleDataCompression { enum class ECompressor : uint8 { NotSet = 0,Selkie = 1,Mermaid = 2,Kraken = 3,Leviathan = 4 } ; bool)",
    "insertText": "ECompressorToString(ECompressor InCompressor, const TCHAR** OutName)"
  },
  {
    "label": "ECompressorFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ECompressorFromString(const class FString& InName, ECompressor& OutCompressor)"
  },
  {
    "label": "ECompressorToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ECompressorToString(ECompressor InCompressor)"
  },
  {
    "label": "ECompressionLevelFromValue()",
    "kind": "Method",
    "detail": "Function (enum class ECompressionLevel : int8 { HyperFast4 = - 4,HyperFast3 = - 3,HyperFast2 = - 2,HyperFast1 = - 1,None = 0,SuperFast = 1,VeryFast = 2,Fast = 3,Normal = 4,Optimal1 = 5,Optimal2 = 6,Optimal3 = 7,Optimal4 = 8,Optimal5 = 9,} ; bool)",
    "insertText": "ECompressionLevelFromValue(int8 InValue, ECompressionLevel& OutLevel)"
  },
  {
    "label": "ECompressionLevelToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ECompressionLevelToString(ECompressionLevel InLevel, const TCHAR** OutName)"
  },
  {
    "label": "ECompressionLevelToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ECompressionLevelToString(ECompressionLevel InLevel)"
  },
  {
    "label": "ECompressionLevelFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ECompressionLevelFromString(const TCHAR* InName, ECompressionLevel& OutLevel)"
  },
  {
    "label": "GetCommonUsageFromLegacyCompressionFlags()",
    "kind": "Method",
    "detail": "Function (enum class ECompressionCommonUsage : uint8 { Default = 0,FastRealtimeEncode = 1,SlowerSmallerEncode = 2,SlowestOfflineDistributionEncode = 3 } ; ECompressionCommonUsage)",
    "insertText": "GetCommonUsageFromLegacyCompressionFlags(ECompressionFlags Flags)"
  },
  {
    "label": "GetCompressorAndLevelForCommonUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompressorAndLevelForCommonUsage(ECompressionCommonUsage Usage,ECompressor & OutCompressor,ECompressionLevel & OutLevel)"
  },
  {
    "label": "CompressedBufferSizeNeeded()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CompressedBufferSizeNeeded(int64 UncompressedSize)"
  },
  {
    "label": "GetMaximumCompressedSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMaximumCompressedSize(int64 UncompressedSize)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Compress(void * OutCompressedData, int64 CompressedBufferSize, const void * InUncompressedData, int64 UncompressedSize, ECompressor Compressor, ECompressionLevel Level, bool CompressIndependentChunks = false, int64 DictionaryBackup = 0)"
  },
  {
    "label": "CompressParallel()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CompressParallel(void * OutCompressedData, int64 CompressedBufferSize, const void * InUncompressedData, int64 UncompressedSize, ECompressor Compressor, ECompressionLevel Level, bool CompressIndependentChunks = false)"
  },
  {
    "label": "CompressParallel()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CompressParallel(TArray64<uint8> & OutCompressedData, const void * InUncompressedData, int64 UncompressedSize, ECompressor Compressor, ECompressionLevel Level, bool CompressIndependentChunks = false)"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Decompress(void * OutUncompressedData, int64 UncompressedSize, const void * InCompressedData, int64 CompressedSize)"
  },
  {
    "label": "DecompressParallel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressParallel(void * OutUncompressedData, int64 UncompressedSize, const void * InCompressedData, int64 CompressedSize)"
  },
  {
    "label": "CompressionFormatInitOnFirstUseFromLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressionFormatInitOnFirstUseFromLock()"
  },
  {
    "label": "StartupPreInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupPreInit()"
  }
]