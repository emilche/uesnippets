[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IMATH_EXPORT_TEMPLATE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMATH_EXPORT_TEMPLATE_TYPE"
  },
  {
    "label": "S",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "S"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHSHEAR_H # define INCLUDED_IMATHSHEAR_H # include \" ImathExport . h \" # include \" ImathNamespace . h \" # include \" ImathMath . h \" # include \" ImathVec . h \" # include<iostream> IMATH_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> class IMATH_EXPORT_TEMPLATE_TYPE Shear6 { public : T xy,xz,yz,yx,zx,zy ; IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T&)",
    "insertText": "operator(int i)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6()"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(T XY, T XZ, T YZ)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(const Vec3<T>& v)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(const Vec3<S>& v)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(T XY, T XZ, T YZ, T YX, T ZX, T ZY)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(const Shear6& h)"
  },
  {
    "label": "Shear6()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Shear6(const Shear6<S>& h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Shear6&)",
    "insertText": "operator(const Shear6& h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Shear6&)",
    "insertText": "operator(const Vec3<S>& v)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE void)",
    "insertText": "setValue(S XY, S XZ, S YZ, S YX, S ZX, S ZY)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE void)",
    "insertText": "setValue(const Shear6<S>& h)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE void)",
    "insertText": "getValue(S& XY, S& XZ, S& YZ, S& YX, S& ZX, S& ZY)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE void)",
    "insertText": "getValue(Shear6<S>& h)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE T*)",
    "insertText": "getValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class S> IMATH_HOSTDEVICE bool)",
    "insertText": "operator(const Shear6<S>& h)"
  },
  {
    "label": "equalWithAbsError()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "equalWithAbsError(const Shear6<T>& h, T e)"
  },
  {
    "label": "equalWithRelError()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "equalWithRelError(const Shear6<T>& h, T e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE Shear6)",
    "insertText": "operator()"
  },
  {
    "label": "negate()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Shear6&)",
    "insertText": "negate()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 const Shear6&)",
    "insertText": "operator(T a)"
  },
  {
    "label": "baseTypeLowest()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE T)",
    "insertText": "baseTypeLowest()"
  },
  {
    "label": "baseTypeMax()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE T)",
    "insertText": "baseTypeMax()"
  },
  {
    "label": "baseTypeSmallest()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE T)",
    "insertText": "baseTypeSmallest()"
  },
  {
    "label": "baseTypeEpsilon()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE T)",
    "insertText": "baseTypeEpsilon()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE unsigned int)",
    "insertText": "dimensions()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class S,class T> IMATH_HOSTDEVICE Shear6<T>)",
    "insertText": "operator(S a, const Shear6<T>& h)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xy =)",
    "insertText": "T(v.x)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xz =)",
    "insertText": "T(v.y)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (yz =)",
    "insertText": "T(v.z)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xy =)",
    "insertText": "T(h.xy)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xz =)",
    "insertText": "T(h.xz)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (yz =)",
    "insertText": "T(h.yz)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (yx =)",
    "insertText": "T(h.yx)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (zx =)",
    "insertText": "T(h.zx)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (zy =)",
    "insertText": "T(h.zy)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xy =)",
    "insertText": "T(XY)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (xz =)",
    "insertText": "T(XZ)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (yz =)",
    "insertText": "T(YZ)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (yx =)",
    "insertText": "T(YX)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (zx =)",
    "insertText": "T(ZX)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (zy =)",
    "insertText": "T(ZY)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (XY =)",
    "insertText": "S(xy)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (XZ =)",
    "insertText": "S(xz)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (YZ =)",
    "insertText": "S(yz)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (YX =)",
    "insertText": "S(yx)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (ZX =)",
    "insertText": "S(zx)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (ZY =)",
    "insertText": "S(zy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& s, const Shear6<T>& h)"
  }
]