[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorGeneratorOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorGeneratorOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "BlockIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockIteratorState"
  },
  {
    "label": "TensorGeneratorOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_GENERATOR_H # define EIGEN_CXX11_TENSOR_TENSOR_GENERATOR_H namespace Eigen { namespace internal { template<Generator,XprType> struct traits<TensorGeneratorOp<Generator,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Generator,XprType> struct eval<TensorGeneratorOp<Generator,XprType>,Eigen::Dense> { typedef const TensorGeneratorOp<Generator,XprType>& type ; } ; template<Generator,XprType> struct nested<TensorGeneratorOp<Generator,XprType>,1,eval<TensorGeneratorOp<Generator,XprType>>::type> { typedef TensorGeneratorOp<Generator,XprType> type ; } ; } template<Generator,XprType> class TensorGeneratorOp : public TensorBase<TensorGeneratorOp<Generator,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorGeneratorOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorGeneratorOp>::type Nested ; typedef Eigen::internal::traits<TensorGeneratorOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorGeneratorOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorGeneratorOp(const XprType& expr, const Generator& generator) : m_xpr(expr), m_generator(generator)"
  },
  {
    "label": "generator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Generator&)",
    "insertText": "generator()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorIntDivisor<Index> IndexDivisor ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorMaterializedBlock<CoeffReturnType,NumDims,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_device(device), m_generator(op.generator())"
  },
  {
    "label": "argImpl()",
    "kind": "Method",
    "detail": "Function (TensorEvaluator<ArgType,Device>)",
    "insertText": "argImpl(op.expression(), device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions = argImpl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_strides [ 0 ] = 1 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_strides [ i ] = m_strides [ i - 1 ]* m_dimensions [ i - 1 ] ;)",
    "insertText": "if(m_strides[i] != 0) m_fast_strides[i] = IndexDivisor(m_strides[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { m_strides [ NumDims - 1 ] = 1 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "extract_coordinates()",
    "kind": "Method",
    "detail": "Function (array<Index,NumDims> coords ;)",
    "insertText": "extract_coordinates(index, coords)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int packetSize = PacketType<CoeffReturnType,Device>::size ;)",
    "insertText": "EIGEN_STATIC_ASSERT((packetSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+packetSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ packetSize ] ;)",
    "insertText": "for(int i = 0; i < packetSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "firstLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "firstLevelCacheSize()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} struct BlockIteratorState { Index stride ; Index span ; Index size ; Index count ; } ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const bool is_col_major = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "extract_coordinates()",
    "kind": "Method",
    "detail": "Function (array<Index,NumDims> coords ;)",
    "insertText": "extract_coordinates(desc.offset(), coords)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array<Index,NumDims> initial_coords = coords ; Index offset = 0 ; array<BlockIteratorState,NumDims> it ;)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (const int dim = is_col_major ? i : NumDims - 1 - i ; it [ i ] . size = desc .)",
    "insertText": "dimension(dim)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (it [ i ] . stride =)",
    "insertText": "i(it[i - 1].size * it[i - 1].stride)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . span = it [ i ] .)",
    "insertText": "stride(it[i].size - 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (it [ i ] . count = 0 ; })",
    "insertText": "eigen_assert(it[0].stride == 1)"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (CoeffReturnType* block_buffer = block_storage .)",
    "insertText": "data()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const int packet_size = PacketType<CoeffReturnType,Device>::size ; const int inner_dim = is_col_major ? 0 : NumDims - 1 ; const Index inner_dim_size = it [ 0 ] . size ; const Index inner_dim_vectorized = inner_dim_size - packet_size ;)",
    "insertText": "while(it[NumDims - 1].count < it[NumDims - 1].size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "for(; i <= inner_dim_vectorized; i += packet_size)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (array<Index,NumDims> j_coords = coords ; j_coords [ inner_dim ] + =)",
    "insertText": "j(block_buffer + offset + i + j) = m_generator(j_coords)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} coords [ inner_dim ] + = packet_size ; })",
    "insertText": "for(; i < inner_dim_size; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (coords [ inner_dim ] + + ; } coords [ inner_dim ] = initial_coords [ inner_dim ] ;)",
    "insertText": "if(NumDims == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (offset + = it [ i ] . stride ; coords [ is_col_major ? i : NumDims - 1 - i ] + + ; break ; })",
    "insertText": "if(i != NumDims - 1)"
  },
  {
    "label": "AsTensorMaterializedBlock()",
    "kind": "Method",
    "detail": "Function (coords [ is_col_major ? i : NumDims - 1 - i ] = initial_coords [ is_col_major ? i : NumDims - 1 - i ] ; offset - = it [ i ] . span ; } } return block_storage .)",
    "insertText": "AsTensorMaterializedBlock()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool)"
  },
  {
    "label": "extract_coordinates()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "extract_coordinates(Index index, array<Index, NumDims>& coords)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_fast_strides [ i ] ; index - = idx* m_strides [ i ] ; coords [ i ] = idx ; } coords [ 0 ] = index ; } else {)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  }
]