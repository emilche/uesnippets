[
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TStringBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringBuilderBase"
  },
  {
    "label": "TStringBuilderWithBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringBuilderWithBuffer"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FAppendChar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAppendChar"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformString . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Templates / Requires . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" Traits / IsCharEncodingSimplyConvertibleTo . h \" # include \" Traits / IsCharType . h \" # include \" Traits / IsContiguousContainer . h \" # include<type_traits> template<T> struct TIsContiguousContainer ; template<CharType> class TStringBuilderBase { public : using ElementType = CharType ; using BuilderType = TStringBuilderBase<ElementType> ; using ViewType = TStringView<ElementType> ; template<AppendType> bool TCanAppend_V = std::is_same_v<BuilderType&,)",
    "insertText": "decltype(DeclVal<BuilderType&>() << DeclVal<AppendType>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<RangeType> bool TCanAppendRange_V = TIsContiguousContainer<RangeType>::Value&& TCanAppend_V<)",
    "insertText": "decltype(*::GetData(DeclVal<RangeType>()))"
  },
  {
    "label": "TStringBuilderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStringBuilderBase()"
  },
  {
    "label": "TStringBuilderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStringBuilderBase(const TStringBuilderBase&)"
  },
  {
    "label": "TStringBuilderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStringBuilderBase(TStringBuilderBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringBuilderBase&)",
    "insertText": "operator(const TStringBuilderBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringBuilderBase&)",
    "insertText": "operator(TStringBuilderBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringBuilderBase&)",
    "insertText": "operator(ViewType Str)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TStringBuilderBase&)",
    "insertText": "operator(const CharType* Str)"
  },
  {
    "label": "TStringBuilderBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStringBuilderBase(CharType* BufferPointer, int32 BufferCapacity)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(BufferPointer, BufferCapacity)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Len()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} CharType*)",
    "insertText": "GetData()"
  },
  {
    "label": "LastChar()",
    "kind": "Method",
    "detail": "Function (} const CharType)",
    "insertText": "LastChar()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (CurPos = Base ; } int32)",
    "insertText": "AddUninitialized(int32 InCount)"
  },
  {
    "label": "RemoveSuffix()",
    "kind": "Method",
    "detail": "Function (CurPos + = InCount ; return OldCount ; } void)",
    "insertText": "RemoveSuffix(int32 InCount)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CurPos - = InCount ; } template<OtherCharType,std::enable_if_t<TIsCharType<OtherCharType>::Value>* = nullptr> BuilderType&)",
    "insertText": "Append(const OtherCharType* const String, const int32 Length)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (int32 ConvertedLength = FPlatformString::ConvertedLength<)",
    "insertText": "CharType(String, Length)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (CurPos =)",
    "insertText": "Convert(CurPos, ConvertedLength, String, Length)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<CharRangeType> auto)",
    "insertText": "Append(CharRangeType&& Range) -> decltype(Append(MakeStringView(Forward<CharRangeType>(Range)).GetData(), int32(0)))"
  },
  {
    "label": "MakeStringView()",
    "kind": "Method",
    "detail": "Function (const TStringView View =)",
    "insertText": "MakeStringView(Forward<CharRangeType>(Range))"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (} template<AppendedCharType,std::enable_if_t<TIsCharType<AppendedCharType>::Value>* = nullptr> BuilderType&)",
    "insertText": "AppendChar(AppendedCharType Char)"
  },
  {
    "label": "CurPos()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "CurPos(CharType)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (} else { int32 ConvertedLength = FPlatformString::ConvertedLength<)",
    "insertText": "CharType(&Char, 1)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (CurPos =)",
    "insertText": "Convert(CurPos, ConvertedLength, &Char, 1)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceAt(int32 Pos, int32 RemoveLen, ViewType Str)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurPos + = DeltaLen ;)",
    "insertText": "for(CharType* It = Base + Pos, *NewEnd = CurPos; It != NewEnd; ++It)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "It(It - DeltaLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(DeltaLen > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurPos + = DeltaLen ;)",
    "insertText": "for(CharType* It = CurPos - 1, *StopIt = Base + Pos + Str.Len() - 1; It != StopIt; --It)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Str.Len())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Base + Pos, Str.GetData(), Str.Len() * sizeof(CharType))"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertAt(int32 Pos, ViewType Str)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAt(Pos, 0, Str)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(int32 Pos, int32 RemoveLen)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAt(Pos, RemoveLen, ViewType())"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Prepend(ViewType Str)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAt(0, 0, Str)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,DelimiterType,std::enable_if_t<TCanAppendRange_V<RangeType&&>&& TCanAppend_V<DelimiterType&&>>* = nullptr> BuilderType&)",
    "insertText": "Join(RangeType&& InRange, DelimiterType&& InDelimiter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "for(auto&& Elem : Forward<RangeType>(InRange))"
  },
  {
    "label": "JoinQuoted()",
    "kind": "Method",
    "detail": "Function (bFirst = false ; } else {* this<<InDelimiter ; }* this<<Elem ; } return* this ; } template<RangeType,DelimiterType,QuoteType,std::enable_if_t<TCanAppendRange_V<RangeType>&& TCanAppend_V<DelimiterType&&>&& TCanAppend_V<QuoteType&&>>* = nullptr> BuilderType&)",
    "insertText": "JoinQuoted(RangeType&& InRange, DelimiterType&& InDelimiter, QuoteType&& InQuote)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (bFirst = false ; } else {* this<<InDelimiter ; }* this<<InQuote<<Elem<<InQuote ; } return* this ; } private : template<SrcEncoding> using TIsCharEncodingCompatibleWithCharType = TIsCharEncodingCompatibleWith<SrcEncoding,CharType> ; public : template<FmtType,. . . Types)",
    "insertText": "UE_REQUIRES(TIsArrayOrRefOfTypeByPredicate<FmtType, TIsCharEncodingCompatibleWithCharType>::Value)> BuilderType& Appendf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "AppendV()",
    "kind": "Method",
    "detail": "Function (} BuilderType&)",
    "insertText": "AppendV(const CharType* Fmt, va_list Args)"
  },
  {
    "label": "AppendfImpl()",
    "kind": "Method",
    "detail": "Function (private : BuilderType& VARARGS)",
    "insertText": "AppendfImpl(BuilderType& Self, const CharType* Fmt, ...)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Initialize(CharType* InBase, int32 InCapacity)"
  },
  {
    "label": "EnsureNulTerminated()",
    "kind": "Method",
    "detail": "Function (Base = InBase ; CurPos = InBase ; End = Base + InCapacity ; } void)",
    "insertText": "EnsureNulTerminated()"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (* CurPos =)",
    "insertText": "CharType(0)"
  },
  {
    "label": "EnsureAdditionalCapacity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureAdditionalCapacity(int32 RequiredAdditionalCapacity)"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Extend(SIZE_T ExtraCapacity)"
  },
  {
    "label": "AllocBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocBuffer(SIZE_T CharCount)"
  },
  {
    "label": "FreeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBuffer(void* Buffer, SIZE_T CharCount)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (CharType EmptyBuffer [ 1 ] { } ; CharType* Base = EmptyBuffer ; CharType* CurPos = Base ; CharType* End = Base + 1 ; bool bIsDynamic = false ; } ; template<CharType> int32)",
    "insertText": "GetNum(const TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "TStringBuilderWithBuffer()",
    "kind": "Method",
    "detail": "Function (} template<CharType,int32 BufferSize> class TStringBuilderWithBuffer : public TStringBuilderBase<CharType> { public :)",
    "insertText": "TStringBuilderWithBuffer() : TStringBuilderBase<CharType>(StringBuffer, BufferSize)"
  },
  {
    "label": "TStringBuilderWithBuffer()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TStringBuilderWithBuffer(EInPlace, ArgTypes&&... Args) : TStringBuilderBase<CharType>(StringBuffer, BufferSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using TStringBuilderBase<CharType>::operator = ; private : CharType StringBuffer [ BufferSize ] ; } ; template<CharType,CharRangeType> auto)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, CharRangeType&& Str) -> decltype(Builder.Append(MakeStringView(Forward<CharRangeType>(Str))))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} else { return Builder .)",
    "insertText": "Append(MakeStringView(Forward<CharRangeType>(Str)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, ANSICHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, UTF8CHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, WIDECHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, ANSICHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, UTF8CHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, WIDECHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, ANSICHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, UTF8CHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, WIDECHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, ANSICHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, WIDECHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, UTF8CHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, FWideStringView Str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, FUtf8StringView Str)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_same_v<bool, T>)> inline FAnsiStringBuilderBase& operator<<(FAnsiStringBuilderBase& Builder, T Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_same_v<bool, T>)> inline FWideStringBuilderBase& operator<<(FWideStringBuilderBase& Builder, T Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_same_v<bool, T>)> inline FUtf8StringBuilderBase& operator<<(FUtf8StringBuilderBase& Builder, T Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T> bool TIsFormattedStringBuilderType_V = false ; template<> bool TIsFormattedStringBuilderType_V<uint8> = true ; template<> bool TIsFormattedStringBuilderType_V<uint16> = true ; template<> bool TIsFormattedStringBuilderType_V<uint32> = true ; template<> bool TIsFormattedStringBuilderType_V<uint64> = true ; template<> bool TIsFormattedStringBuilderType_V<int8> = true ; template<> bool TIsFormattedStringBuilderType_V<int16> = true ; template<> bool TIsFormattedStringBuilderType_V<int32> = true ; template<> bool TIsFormattedStringBuilderType_V<int64> = true ; template<> bool TIsFormattedStringBuilderType_V<float> = true ; template<> bool TIsFormattedStringBuilderType_V<double> = true ; template<> bool TIsFormattedStringBuilderType_V<long double> = true ; template<> bool TIsFormattedStringBuilderType_V<long> = true ; template<> bool TIsFormattedStringBuilderType_V<unsigned long> = true ; template<T> bool TIsFormattedStringBuilderType_V<const T> = TIsFormattedStringBuilderType_V<T> ; template<T> bool TIsFormattedStringBuilderType_V<volatile T> = TIsFormattedStringBuilderType_V<T> ; template<T> bool TIsFormattedStringBuilderType_V<const volatile T> = TIsFormattedStringBuilderType_V<T> ; template<CharType,T)",
    "insertText": "UE_REQUIRES(TIsFormattedStringBuilderType_V<T>) > inline TStringBuilderBase<CharType>& operator<<(TStringBuilderBase<CharType>& Builder, const T& Value)"
  },
  {
    "label": "TWriteToString()",
    "kind": "Method",
    "detail": "Function (public : template<. . . ArgTypes>)",
    "insertText": "TWriteToString(ArgTypes&&... Args)"
  },
  {
    "label": "WriteToString()",
    "kind": "Method",
    "detail": "Function (} } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS template<CharType,int32 BufferSize> struct TIsContiguousContainer<TWriteToString<CharType,BufferSize>> { bool Value = true ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS template<int32 BufferSize,. . . ArgTypes> TStringBuilderWithBuffer<TCHAR,BufferSize>)",
    "insertText": "WriteToString(ArgTypes&&... Args)"
  },
  {
    "label": "WriteToAnsiString()",
    "kind": "Method",
    "detail": "Function (} template<int32 BufferSize,. . . ArgTypes> TStringBuilderWithBuffer<ANSICHAR,BufferSize>)",
    "insertText": "WriteToAnsiString(ArgTypes&&... Args)"
  },
  {
    "label": "WriteToWideString()",
    "kind": "Method",
    "detail": "Function (} template<int32 BufferSize,. . . ArgTypes> TStringBuilderWithBuffer<WIDECHAR,BufferSize>)",
    "insertText": "WriteToWideString(ArgTypes&&... Args)"
  },
  {
    "label": "WriteToUtf8String()",
    "kind": "Method",
    "detail": "Function (} template<int32 BufferSize,. . . ArgTypes> TStringBuilderWithBuffer<UTF8CHAR,BufferSize>)",
    "insertText": "WriteToUtf8String(ArgTypes&&... Args)"
  },
  {
    "label": "AppendChars()",
    "kind": "Method",
    "detail": "Function (} template<CharType> auto)",
    "insertText": "AppendChars(TStringBuilderBase<CharType>& Builder)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (struct FAppendChar { TStringBuilderBase<CharType>& Builder ; void)",
    "insertText": "Add(CharType Char)"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "AppendChar(Char)"
  }
]