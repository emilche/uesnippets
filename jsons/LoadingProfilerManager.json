[
  {
    "label": "SLoadingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLoadingProfilerWindow"
  },
  {
    "label": "FLoadingProfilerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadingProfilerManager"
  },
  {
    "label": "FLoadingProfilerActionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadingProfilerActionManager"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Ticker . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Logging / LogMacros . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Common / AvailabilityCheck . h \" # include \" Insights / IUnrealInsightsModule . h \" # include \" Insights / LoadingProfiler / LoadingProfilerCommands . h \" namespace UE::Insights::LoadingProfiler { class SLoadingProfilerWindow ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LoadingProfiler, Log, All)"
  },
  {
    "label": "FLoadingProfilerManager()",
    "kind": "Method",
    "detail": "Function (class FLoadingProfilerManager : public TSharedFromThis<FLoadingProfilerManager>,public IInsightsComponent { class FLoadingProfilerActionManager ; public :)",
    "insertText": "FLoadingProfilerManager(TSharedRef<FUICommandList> InCommandList)"
  },
  {
    "label": "FLoadingProfilerManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLoadingProfilerManager()"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLoadingProfilerManager>)",
    "insertText": "CreateInstance()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLoadingProfilerManager>)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "RegisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMajorTabs(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "UnregisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMajorTabs()"
  },
  {
    "label": "OnWindowClosedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowClosedEvent()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "GetCommands()",
    "kind": "Method",
    "detail": "Function (const FLoadingProfilerCommands&)",
    "insertText": "GetCommands()"
  },
  {
    "label": "GetActionManager()",
    "kind": "Method",
    "detail": "Function (FLoadingProfilerActionManager&)",
    "insertText": "GetActionManager()"
  },
  {
    "label": "GetProfilerWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SLoadingProfilerWindow>)",
    "insertText": "GetProfilerWindow()"
  },
  {
    "label": "IsTimingViewVisible()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsTimingViewVisible()"
  },
  {
    "label": "ShowHideTimingView()",
    "kind": "Method",
    "detail": "Function (bIsTimingViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideTimingView(const bool bIsVisible)"
  },
  {
    "label": "IsEventAggregationTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsEventAggregationTreeViewVisible()"
  },
  {
    "label": "ShowHideEventAggregationTreeView()",
    "kind": "Method",
    "detail": "Function (bIsEventAggregationTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideEventAggregationTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsObjectTypeAggregationTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsObjectTypeAggregationTreeViewVisible()"
  },
  {
    "label": "ShowHideObjectTypeAggregationTreeView()",
    "kind": "Method",
    "detail": "Function (bIsObjectTypeAggregationTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideObjectTypeAggregationTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsPackageDetailsTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsPackageDetailsTreeViewVisible()"
  },
  {
    "label": "ShowHidePackageDetailsTreeView()",
    "kind": "Method",
    "detail": "Function (bIsPackageDetailsTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHidePackageDetailsTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsExportDetailsTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsExportDetailsTreeViewVisible()"
  },
  {
    "label": "ShowHideExportDetailsTreeView()",
    "kind": "Method",
    "detail": "Function (bIsExportDetailsTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideExportDetailsTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsRequestsTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsRequestsTreeViewVisible()"
  },
  {
    "label": "ShowHideRequestsTreeView()",
    "kind": "Method",
    "detail": "Function (bIsRequestsTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideRequestsTreeView(const bool bIsVisible)"
  },
  {
    "label": "OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSessionChanged()"
  },
  {
    "label": "GetLogListingName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetLogListingName()"
  },
  {
    "label": "SpawnTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "CanSpawnTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpawnTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "OnTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabClosed(TSharedRef<SDockTab> TabBeingClosed)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "AssignProfilerWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignProfilerWindow(const TSharedRef<SLoadingProfilerWindow>& InProfilerWindow)"
  },
  {
    "label": "RemoveProfilerWindow()",
    "kind": "Method",
    "detail": "Function (ProfilerWindowWeakPtr = InProfilerWindow ; } void)",
    "insertText": "RemoveProfilerWindow()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ProfilerWindowWeakPtr .)",
    "insertText": "Reset()"
  }
]