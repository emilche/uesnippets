[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UPawnNoiseEmitterComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnNoiseEmitterComponent"
  },
  {
    "label": "UE_DEPRECATED_FORGAME",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED_FORGAME"
  },
  {
    "label": "UPawnSensingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnSensingComponent"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Components / ActorComponent . h \" # include \" PawnSensingComponent . generated . h \" class AActor ; class AController ; class APawn ; class UPawnNoiseEmitterComponent ; class)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Pawn sensing is deprecated. AI Perception should be used instead.\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup=AI, HideCategories=(Activation, \"Components|Activation\", Collision), meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FSeePawnDelegate, APawn*, Pawn)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FHearNoiseDelegate, APawn*, Instigator, const FVector&, Location, float, Volume)"
  },
  {
    "label": "IsSensorActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSensorActor(const AActor* Actor)"
  },
  {
    "label": "CanSenseAnything()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSenseAnything()"
  },
  {
    "label": "ShouldCheckVisibilityOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckVisibilityOf(APawn* Pawn)"
  },
  {
    "label": "CouldSeePawn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CouldSeePawn(const APawn* Other, bool bMaySkipChecks = false)"
  },
  {
    "label": "ShouldCheckAudibilityOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckAudibilityOf(APawn* Pawn)"
  },
  {
    "label": "HasLineOfSightTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLineOfSightTo(const AActor* Other)"
  },
  {
    "label": "IsNoiseRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNoiseRelevant(const APawn& Pawn, const UPawnNoiseEmitterComponent& NoiseEmitterComponent, bool bSourceWithinNoiseEmitter)"
  },
  {
    "label": "CanHear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHear(const FVector& NoiseLoc, float Loudness, bool bFailedLOS)"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "GetSensorLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetSensorLocation()"
  },
  {
    "label": "GetSensorRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetSensorRotation()"
  },
  {
    "label": "SensePawn()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SensePawn(APawn& Pawn)"
  },
  {
    "label": "OnTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimer()"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (FTimerHandle TimerHandle_OnTimer ; void)",
    "insertText": "SetTimer(const float TimeDelay)"
  },
  {
    "label": "UpdateAISensing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAISensing()"
  },
  {
    "label": "GetSensorActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetSensorActor()"
  },
  {
    "label": "GetSensorController()",
    "kind": "Method",
    "detail": "Function (AController*)",
    "insertText": "GetSensorController()"
  },
  {
    "label": "BroadcastOnSeePawn()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BroadcastOnSeePawn(APawn& Pawn)"
  },
  {
    "label": "BroadcastOnHearLocalNoise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOnHearLocalNoise(APawn& Instigator, const FVector& Location, float Volume)"
  },
  {
    "label": "BroadcastOnHearRemoteNoise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOnHearRemoteNoise(APawn& Instigator, const FVector& Location, float Volume)"
  },
  {
    "label": "GetPeripheralVisionAngle()",
    "kind": "Method",
    "detail": "Function (} ; float)",
    "insertText": "GetPeripheralVisionAngle()"
  }
]