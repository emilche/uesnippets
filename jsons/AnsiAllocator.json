[
  {
    "label": "FAnsiAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnsiAllocator"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "FAnsiSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnsiSetAllocator"
  },
  {
    "label": "OnInvalidAnsiAllocatorNum()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / ContainerAllocationPolicies . h \" namespace UE::Core::Private { [ [ noreturn ] ] void)",
    "insertText": "OnInvalidAnsiAllocatorNum(int32 NewNum, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} class FAnsiAllocator { public : using SizeType = int32 ; enum { NeedsElementType = false } ; enum { RequireRangeCheck = true } ; typedef FAnsiAllocator ElementAllocator ; typedef FAnsiAllocator BitArrayAllocator ; class ForAnyElementType { public :)",
    "insertText": "ForAnyElementType() : Data(nullptr)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveToEmpty(ForAnyElementType& Other)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(Data)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} Data = Other . Data ; Other . Data = nullptr ; } ~)",
    "insertText": "ForAnyElementType()"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (} } FScriptContainerElement*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (SizeType)",
    "insertText": "CalculateSlackReserve(SizeType NewMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackShrink(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackGrow(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (FScriptContainerElement* Data ; } ; template<ElementType> class ForElementType : public ForAnyElementType { public :)",
    "insertText": "ForElementType()"
  }
]