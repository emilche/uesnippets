[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "FIntermediateResultNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntermediateResultNode"
  },
  {
    "label": "SWidgetHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidgetHittestGrid"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnWidgetSelected, TSharedPtr<const SWidget>)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<const SWidget> InReflectorWidget)"
  },
  {
    "label": "SetPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPause(bool bNewPaused)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "HandleDrawDebuggerVisual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDrawDebuggerVisual(const FPaintArgs& InArgs, const FGeometry& InAllottedGeometry, FSlateWindowElementList& InOutDrawElements, int32& InOutLayerId)"
  },
  {
    "label": "HandleFindNextFocusableWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFindNextFocusableWidget(const FHittestGrid* HittestGrid, const FHittestGrid::FDebuggingFindNextFocusableWidgetArgs& Info)"
  },
  {
    "label": "GetDisplayMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetDisplayMenuContent()"
  },
  {
    "label": "HandleDisplayButtonClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisplayButtonClicked(TWeakPtr<SWindow> Window)"
  },
  {
    "label": "HandleDisplayAllClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisplayAllClicked()"
  },
  {
    "label": "GetFlagsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetFlagsMenuContent()"
  },
  {
    "label": "HandleDisplayFlagsButtonClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisplayFlagsButtonClicked(FHittestGrid::EDisplayGridFlags Flag)"
  },
  {
    "label": "HandleVisualizeOnNavigationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVisualizeOnNavigationChanged(ECheckBoxState InCheck)"
  },
  {
    "label": "HandleRejectWidgetReflectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRejectWidgetReflectorChanged(ECheckBoxState InCheck)"
  },
  {
    "label": "HandleWidgetHittestGridGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleWidgetHittestGridGenerateRow(TSharedRef<WidgetHittestGridInternal::FIntermediateResultNode> InReflectorNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleWidgetHittestGridSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWidgetHittestGridSelectionChanged(TSharedPtr<WidgetHittestGridInternal::FIntermediateResultNode>, ESelectInfo::Type /*SelectInfo*/)"
  }
]