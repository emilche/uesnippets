[
  {
    "label": "FTaperedCylinderSpecializeSamplingHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaperedCylinderSpecializeSamplingHelper"
  },
  {
    "label": "FTaperedCylinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaperedCylinder"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FTaperedCylinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Cylinder . h \" # include \" Chaos / Plane . h \" namespace Chaos { struct FTaperedCylinderSpecializeSamplingHelper ; class FTaperedCylinder : public FImplicitObject { public :)",
    "insertText": "FTaperedCylinder() : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCylinder)"
  },
  {
    "label": "FTaperedCylinder()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; })",
    "insertText": "FTaperedCylinder(const FVec3& x1, const FVec3& x2, const FReal Radius1, const FReal Radius2) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCylinder) , MPlane1(x1, (x2 - x1).GetSafeNormal()) , MPlane2(x2, -MPlane1.Normal()) , MHeight((x2 - x1).Size()) , MRadius1(Radius1) , MRadius2(Radius2) , MLocalBoundingBox(x1, x1)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; MLocalBoundingBox .)",
    "insertText": "GrowToInclude(x2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FReal MaxRadius = MRadius1 ;)",
    "insertText": "if(MaxRadius < MRadius2)"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox =)",
    "insertText": "FAABB3(MLocalBoundingBox.Min() - FVec3(MaxRadius), MLocalBoundingBox.Max() + FVec3(MaxRadius))"
  },
  {
    "label": "FTaperedCylinder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaperedCylinder(const FTaperedCylinder& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCylinder) , MPlane1(Other.MPlane1) , MPlane2(Other.MPlane2) , MHeight(Other.MHeight) , MRadius1(Other.MRadius1) , MRadius2(Other.MRadius2) , MLocalBoundingBox(Other.MLocalBoundingBox)"
  },
  {
    "label": "FTaperedCylinder()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; })",
    "insertText": "FTaperedCylinder(FTaperedCylinder&& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::TaperedCylinder) , MPlane1(MoveTemp(Other.MPlane1)) , MPlane2(MoveTemp(Other.MPlane2)) , MHeight(Other.MHeight) , MRadius1(Other.MRadius1) , MRadius2(Other.MRadius2) , MLocalBoundingBox(MoveTemp(Other.MLocalBoundingBox))"
  },
  {
    "label": "FTaperedCylinder()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = true ; } ~)",
    "insertText": "FTaperedCylinder()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const FReal PointsPerUnitArea, const bool IncludeEndCaps = true, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const FReal PointsPerUnitArea, const bool IncludeEndCaps = true, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (} const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (const FVec3& Normal1 = MPlane1 .)",
    "insertText": "Normal()"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (const FReal Distance1 = MPlane1 .)",
    "insertText": "SignedDistance(x)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 v = x -)",
    "insertText": "FVec3(Normal1 * Distance1 + MPlane1.X())"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 Corner = v .)",
    "insertText": "GetSafeNormal() * MRadius1 + MPlane1.X()"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 CornerVector = x - Corner ; Normal = CornerVector .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal Distance2 = MHeight - Distance1 ;)",
    "insertText": "if(Distance2 < UE_SMALL_NUMBER)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 v = x -)",
    "insertText": "FVec3(Normal2 * Distance2 + MPlane2.X())"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 Corner = v .)",
    "insertText": "GetSafeNormal() * MRadius2 + MPlane2.X()"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} else { Normal = - Normal2 ; return - Distance2 ; } })",
    "insertText": "ensure(Distance1 <= MHeight && Distance2 <= MHeight)"
  },
  {
    "label": "SideVector()",
    "kind": "Method",
    "detail": "Function (const FVec3)",
    "insertText": "SideVector(x - FVec3(Normal1 * Distance1 + MPlane1.X()))"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FReal SideDistance = SideVector .)",
    "insertText": "Size() - GetRadiusAtDistance(Distance1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal TopDistance = Distance1<Distance2 ? Distance1 : Distance2 ;)",
    "insertText": "if(TopDistance < -SideDistance)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (TArray<Pair<FReal,FVec3>> Intersections ; FReal DeltaRadius =)",
    "insertText": "Abs(MRadius2 - MRadius1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVec3 BaseNormal ; FReal BaseRadius ; FVec3 BaseCenter ;)",
    "insertText": "if(MRadius2 > MRadius1)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (BaseRadius = MRadius2 + Thickness ; BaseCenter = MPlane2 .)",
    "insertText": "X()"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (} FVec3 Top = BaseRadius / DeltaRadius* MHeight* BaseNormal + BaseCenter ; FReal theta =)",
    "insertText": "atan2(BaseRadius, (Top - BaseCenter).Size())"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (FReal costheta =)",
    "insertText": "cos(theta)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FReal cossqtheta = costheta* costheta ;)",
    "insertText": "check(theta > 0 && theta < UE_PI / 2)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FVec3 Direction = EndPoint - StartPoint ; FReal Length = Direction .)",
    "insertText": "Size()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (auto DDotN =)",
    "insertText": "DotProduct(Direction, -BaseNormal)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (auto SMT = StartPoint - Top ; auto SMTDotN =)",
    "insertText": "DotProduct(SMT, -BaseNormal)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (FReal a = DDotN* DDotN - cossqtheta ; FReal)",
    "insertText": "b(DDotN * SMTDotN - FVec3::DotProduct(Direction, SMT) * cossqtheta)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (FReal c = SMTDotN* SMTDotN - SMT .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FReal Determinant = b* b - 4* a* c ;)",
    "insertText": "if(Determinant == 0)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (FReal Root = -)",
    "insertText": "b(2 * a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVec3 RootPoint = Root* Direction + StartPoint ;)",
    "insertText": "if(Root >= 0 && Root <= Length && FVec3::DotProduct(RootPoint - Top, -BaseNormal) >= 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Add(MakePair(Root, RootPoint))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Determinant > 0)"
  },
  {
    "label": "Root1()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "Root1(-b - sqrt(Determinant)) / (2 * a)"
  },
  {
    "label": "Root2()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "Root2(-b + sqrt(Determinant)) / (2 * a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVec3 Root1Point = Root1* Direction + StartPoint ; FVec3 Root2Point = Root2* Direction + StartPoint ;)",
    "insertText": "if(Root1 < 0 || Root1 > Length || FVec3::DotProduct(Root1Point - Top, -BaseNormal) < 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Add(MakePair(Root2, Root2Point))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Root2 < 0 || Root2 > Length || FVec3::DotProduct(Root2Point - Top, -BaseNormal) < 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Add(MakePair(Root1, Root1Point))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Root1 < Root2 && FVec3::DotProduct(Root1Point - Top, -BaseNormal) >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FVec3::DotProduct(Root2Point - Top, -BaseNormal) >= 0)"
  },
  {
    "label": "FindClosestIntersection()",
    "kind": "Method",
    "detail": "Function (} } auto Plane1Intersection = MPlane1 .)",
    "insertText": "FindClosestIntersection(StartPoint, EndPoint, Thickness)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Sort([](const Pair<FReal, FVec3>& Elem1, const Pair<FReal, FVec3>& Elem2) { return Elem1.First < Elem2.First; })"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MakePair(FVec3(0), false)"
  },
  {
    "label": "GetRadius1()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRadius1()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const FReal R1mR2 = MRadius1 - MRadius2 ; return)",
    "insertText": "Sqrt(R1mR2*R1mR2 + MHeight*MHeight)"
  },
  {
    "label": "GetX1()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetX1()"
  },
  {
    "label": "GetX2()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetX2()"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetInsertion()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetInsertion()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FReal R1R1 = MRadius1* MRadius1 ; const FReal R2R2 = MRadius2* MRadius2 ; const FReal R1R2 = MRadius1* MRadius2 ; return)",
    "insertText": "FVec3(0, 0, static_cast<FReal>(MHeight*(R1R1 + 2.*R1R2 + 3.*R2R2) / 4.*(R1R1 + R1R2 + R2R2)))"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetAxis()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const bool IncludeEndCaps = true)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const FReal Height, const FReal Radius1, const FReal Radius2, const bool IncludeEndCaps)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal TwoPI = UE_PI* 2 ;)",
    "insertText": "if(Radius1 == Radius2)"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (const FReal TwoPIR1 = TwoPI* Radius1 ; return IncludeEndCaps ? TwoPIR1* Height + TwoPIR1* Radius1 : TwoPIR1* Height ; } else { const FReal R1_R2 = Radius1 - Radius2 ; const FReal CylArea =)",
    "insertText": "UE_PI(Radius1 + Radius2) * FMath::Sqrt((R1_R2 * R1_R2) + (Height * Height))"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume(const FReal Height, const FReal Radius1, const FReal Radius2)"
  },
  {
    "label": "Height()",
    "kind": "Method",
    "detail": "Function (const FReal PI_3 = UE_PI / 3 ; return PI_3*)",
    "insertText": "Height(Radius1 * Radius1 + Radius1 * Radius2 + Radius2 * Radius2)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass, const FReal Height, const FReal Radius1, const FReal Radius2)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FReal R1 =)",
    "insertText": "Min(Radius1, Radius2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FReal R2 =)",
    "insertText": "Max(Radius1, Radius2)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal HH = Height* Height ; const FReal R1R1 = R1* R1 ; const FReal R1R2 = R1* R2 ; const FReal R2R2 = R2* R2 ; const FReal Num1 = static_cast<)",
    "insertText": "FReal(2. * HH * (R1R1 + 3. * R1R2 + 6. * R2R2))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal Num2 = static_cast<)",
    "insertText": "FReal(3. * (R1R1 * R1R1 + R1R1 * R1R2 + R1R2 * R1R2 + R1R2 * R2R2 + R2R2 * R2R2))"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (const FReal Den1 =)",
    "insertText": "UE_PI(R1R1 + R1R2 + R2R2)"
  },
  {
    "label": "Mass()",
    "kind": "Method",
    "detail": "Function (const FReal Diag12 =)",
    "insertText": "Mass(Num1 + Num2) / (static_cast<FReal>(20.) * Den1)"
  },
  {
    "label": "Num2()",
    "kind": "Method",
    "detail": "Function (const FReal Diag3 = Mass*)",
    "insertText": "Num2(static_cast<FReal>(10.) * Den1)"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass(const FVec3& Axis)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 PlaneHashes =)",
    "insertText": "HashCombine(MPlane1.GetTypeHash(), MPlane2.GetTypeHash())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 PropertyHash =)",
    "insertText": "HashCombine(::GetTypeHash(MHeight), HashCombine(::GetTypeHash(MRadius1), ::GetTypeHash(MRadius2)))"
  },
  {
    "label": "OffsetOfMPlane1()",
    "kind": "Method",
    "detail": "Function (} # if INTEL_ISPC struct FISPCDataVerifier { int32)",
    "insertText": "OffsetOfMPlane1()"
  },
  {
    "label": "SizeOfMPlane1()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMPlane1()"
  },
  {
    "label": "OffsetOfMPlane2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfMPlane2()"
  },
  {
    "label": "SizeOfMPlane2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMPlane2()"
  },
  {
    "label": "OffsetOfMHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfMHeight()"
  },
  {
    "label": "SizeOfMHeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMHeight()"
  },
  {
    "label": "OffsetOfMRadius1()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfMRadius1()"
  },
  {
    "label": "SizeOfMRadius1()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMRadius1()"
  },
  {
    "label": "OffsetOfMRadius2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfMRadius2()"
  },
  {
    "label": "SizeOfMRadius2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMRadius2()"
  },
  {
    "label": "GetRadiusAtDistance()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : FReal)",
    "insertText": "GetRadiusAtDistance(const FReal& Phi)"
  },
  {
    "label": "MRadius1()",
    "kind": "Method",
    "detail": "Function (const FReal Alpha = Phi / MHeight ; return)",
    "insertText": "MRadius1(static_cast<FReal>(1.) - Alpha)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TPlaneConcrete<FReal,3> MPlane1,MPlane2 ; FReal MHeight,MRadius1,MRadius2 ; FAABB3 MLocalBoundingBox ; } ; struct FTaperedCylinderSpecializeSamplingHelper { void)",
    "insertText": "ComputeSamplePoints(TArray<FVec3>& Points, const FTaperedCylinder& Cylinder, const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "SetNumUninitialized(Offset + 1)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { Points .)",
    "insertText": "SetNumUninitialized(Offset + 3)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "ComputeGoldenSpiralPoints(Points, Cylinder, NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FTaperedCylinder& Cylinder, const int32 NumPoints, const bool IncludeEndCaps = true)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Cylinder.GetOrigin(), Cylinder.GetAxis(), Cylinder.GetRadius1(), Cylinder.GetRadius2(), Cylinder.GetHeight(), NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FVec3& Origin, const FVec3& Axis, const FReal Radius1, const FReal Radius2, const FReal Height, const int32 NumPoints, const bool IncludeEndCaps = true, int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(Points, Radius1, Radius2, Height, NumPoints, IncludeEndCaps, SpiralSeed)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; const FRotation3 Rotation =)",
    "insertText": "FromRotatedVector(FVec3(0, 0, 1), Axis)"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (FVec3& Point = Points [ i ] ; const FVec3 PointNew = Rotation .)",
    "insertText": "RotateVector(Point + FVec3(0, 0, HalfHeight))"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (Point = PointNew ; } } void)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(TArray<FVec3>& Points, const FReal Radius1, const FReal Radius2, const FReal Height, const int32 NumPoints, const bool IncludeEndCaps = true, int32 SpiralSeed = 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumPointsEndCap1 ; int32 NumPointsEndCap2 ; int32 NumPointsCylinder ;)",
    "insertText": "if(IncludeEndCaps)"
  },
  {
    "label": "Radius2()",
    "kind": "Method",
    "detail": "Function (const FReal Cap1Area = UE_PI* Radius1* Radius1 ; const FReal Cap2Area = UE_PI* Radius2* Radius2 ; const FReal CylArea = UE_PI*)",
    "insertText": "Radius2(Radius2 + FMath::Sqrt(Height * Height + Radius2 * Radius2)) - UE_PI * Radius1 * (Radius1 + FMath::Sqrt(Height * Height + Radius1 * Radius1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal AllArea = CylArea + Cap1Area + Cap2Area ;)",
    "insertText": "if(AllArea > UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumPointsEndCap1 = static_cast<)",
    "insertText": "int32(round(Cap1Area / AllArea * static_cast<FReal>(NumPoints)))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumPointsEndCap2 = static_cast<)",
    "insertText": "int32(round(Cap2Area / AllArea * static_cast<FReal>(NumPoints)))"
  },
  {
    "label": "NumPointsEndCap2()",
    "kind": "Method",
    "detail": "Function (NumPointsCylinder = NumPoints - NumPointsEndCap1 - NumPointsEndCap2 ; } else { NumPointsCylinder = 0 ; NumPointsEndCap1 =)",
    "insertText": "NumPointsEndCap2(NumPoints - (NumPoints % 2))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } else { NumPointsCylinder = NumPoints ; NumPointsEndCap1 = 0 ; NumPointsEndCap2 = 0 ; } const int32 NumPointsToAdd = NumPointsCylinder + NumPointsEndCap1 + NumPointsEndCap2 ; Points .)",
    "insertText": "Reserve(Points.Num() + NumPointsToAdd)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; TArray<FVec2> Points2D ; Points2D .)",
    "insertText": "Reserve(NumPointsEndCap1)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (TSphereSpecializeSamplingHelper<FReal,2)",
    "insertText": "ComputeGoldenSpiralPoints(Points2D, FVec2((FReal)0.0), Radius1, NumPointsEndCap1, SpiralSeed)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Offset = Points .)",
    "insertText": "AddUninitialized(Points2D.Num())"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const FVec2& Pt = Points2D [ i ] ;)",
    "insertText": "checkSlow(Pt.Size() < Radius1 + UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(Pt[0], Pt[1], -HalfHeight)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} Offset = Points .)",
    "insertText": "AddUninitialized(NumPointsCylinder)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ Offset ] =)",
    "insertText": "FVec3(0, 0, HalfHeight)"
  },
  {
    "label": "UE_PI()",
    "kind": "Method",
    "detail": "Function (} else { const FRealSingle Increment =)",
    "insertText": "UE_PI(1.0f + FMath::Sqrt(5.0f))"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const FReal R =)",
    "insertText": "Lerp(Radius1, Radius2, static_cast<FReal>(i) / static_cast<FReal>(NumPointsCylinder - 1))"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (const FReal Theta =)",
    "insertText": "Increment(0.5f + static_cast<FReal>(i + SpiralSeed))"
  },
  {
    "label": "LerpStable()",
    "kind": "Method",
    "detail": "Function (const FReal Z =)",
    "insertText": "LerpStable(-HalfHeight, HalfHeight, static_cast<FReal>(i) / static_cast<FReal>(NumPointsCylinder - 1))"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(R * FMath::Cos(Theta), R * FMath::Sin(Theta), Z)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Points2D .)",
    "insertText": "Reset()"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (TSphereSpecializeSamplingHelper<FReal,2)",
    "insertText": "ComputeGoldenSpiralPoints(Points2D, FVec2((FReal)0.0), Radius2, NumPointsEndCap2, SpiralSeed)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const FVec2& Pt = Points2D [ i ] ;)",
    "insertText": "checkSlow(Pt.Size() < Radius2 + UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Points [ i + Offset ] =)",
    "insertText": "FVec3(Pt[0], Pt[1], HalfHeight)"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (} } } } ; TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const int32 NumPoints, const bool IncludeEndCaps)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSamplePoints(Points, FTaperedCylinder(MPlane1.X() - Mid, MPlane2.X() - Mid, GetRadius1(), GetRadius2()), NumPoints, IncludeEndCaps)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> Points ;)",
    "insertText": "ComputeSamplePoints(Points, *this, NumPoints, IncludeEndCaps)"
  }
]