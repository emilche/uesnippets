[
  {
    "label": "ClassName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassName"
  },
  {
    "label": "BaseName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseName"
  },
  {
    "label": "StructName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructName"
  },
  {
    "label": "CefCppToCRefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCppToCRefCounted"
  },
  {
    "label": "WrapperStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WrapperStruct"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_LIBCEF_DLL_CPPTOC_CPPTOC_REF_COUNTED_H_ # define CEF_LIBCEF_DLL_CPPTOC_CPPTOC_REF_COUNTED_H_ # pragma once # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" # include \" include / capi / cef_base_capi . h \" # include \" include / cef_base . h \" # include \" libcef_dll / wrapper_types . h \" template<class ClassName,class BaseName,class StructName> class CefCppToCRefCounted : public CefBaseRefCounted { public : StructName*)",
    "insertText": "Wrap(CefRefPtr<BaseName> c)"
  },
  {
    "label": "ClassName()",
    "kind": "Method",
    "detail": "Function (ClassName* wrapper = new)",
    "insertText": "ClassName()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (wrapper -> wrapper_struct_ . object_ = c .)",
    "insertText": "get()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (wrapper ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} CefRefPtr<BaseName>)",
    "insertText": "Unwrap(StructName* s)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(s)"
  },
  {
    "label": "objectPtr()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<BaseName>)",
    "insertText": "objectPtr(wrapperStruct->object_)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (wrapperStruct -> wrapper_ ->)",
    "insertText": "Release()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(s)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(kWrapperType, wrapperStruct->type_)"
  },
  {
    "label": "UnderlyingAddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnderlyingAddRef()"
  },
  {
    "label": "UnderlyingRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnderlyingRelease()"
  },
  {
    "label": "HasOneRef()",
    "kind": "Method",
    "detail": "Function (delete this ; return true ; } return false ; } bool)",
    "insertText": "HasOneRef()"
  },
  {
    "label": "HasAtLeastOneRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAtLeastOneRef()"
  },
  {
    "label": "CefCppToCRefCounted()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "CefCppToCRefCounted()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (wrapper_struct_ . type_ = kWrapperType ; wrapper_struct_ . wrapper_ = this ;)",
    "insertText": "memset(GetStruct(), 0, sizeof(StructName))"
  },
  {
    "label": "cef_base_ref_counted_t()",
    "kind": "Method",
    "detail": "Function (cef_base_ref_counted_t* base = reinterpret_cast<)",
    "insertText": "cef_base_ref_counted_t(GetStruct())"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (base -> size =)",
    "insertText": "sizeof(StructName)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (} private : struct WrapperStruct { CefWrapperType type_ ; BaseName* object_ ; CefCppToCRefCounted<ClassName,BaseName,StructName>* wrapper_ ; StructName struct_ ; } ; WrapperStruct*)",
    "insertText": "GetWrapperStruct(StructName* s)"
  },
  {
    "label": "UnwrapDerived()",
    "kind": "Method",
    "detail": "Function (} CefRefPtr<BaseName>)",
    "insertText": "UnwrapDerived(CefWrapperType type, StructName* s)"
  },
  {
    "label": "UnderlyingHasOneRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UnderlyingHasOneRef()"
  },
  {
    "label": "UnderlyingHasAtLeastOneRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UnderlyingHasAtLeastOneRef()"
  },
  {
    "label": "struct_add_ref()",
    "kind": "Method",
    "detail": "Function (} void CEF_CALLBACK)",
    "insertText": "struct_add_ref(cef_base_ref_counted_t* base)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(base)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(reinterpret_cast<StructName*>(base))"
  },
  {
    "label": "struct_release()",
    "kind": "Method",
    "detail": "Function (} int CEF_CALLBACK)",
    "insertText": "struct_release(cef_base_ref_counted_t* base)"
  },
  {
    "label": "struct_has_one_ref()",
    "kind": "Method",
    "detail": "Function (} int CEF_CALLBACK)",
    "insertText": "struct_has_one_ref(cef_base_ref_counted_t* base)"
  },
  {
    "label": "struct_has_at_least_one_ref()",
    "kind": "Method",
    "detail": "Function (} int CEF_CALLBACK)",
    "insertText": "struct_has_at_least_one_ref(cef_base_ref_counted_t* base)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} WrapperStruct wrapper_struct_ ; CefRefCount ref_count_ ; CefWrapperType kWrapperType ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefCppToCRefCounted)"
  }
]