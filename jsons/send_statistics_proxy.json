[
  {
    "label": "SendStatisticsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendStatisticsProxy"
  },
  {
    "label": "SampleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleCounter"
  },
  {
    "label": "BoolSampleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoolSampleCounter"
  },
  {
    "label": "StatsUpdateTimes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsUpdateTimes"
  },
  {
    "label": "TargetRateUpdates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetRateUpdates"
  },
  {
    "label": "FallbackEncoderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FallbackEncoderInfo"
  },
  {
    "label": "FallbackEncoderInfoDisabled",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FallbackEncoderInfoDisabled"
  },
  {
    "label": "StatsTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsTimer"
  },
  {
    "label": "QpCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QpCounters"
  },
  {
    "label": "AdaptChanges",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdaptChanges"
  },
  {
    "label": "TimestampOlderThan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimestampOlderThan"
  },
  {
    "label": "Frame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Frame"
  },
  {
    "label": "MaskedAdaptationCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskedAdaptationCounts"
  },
  {
    "label": "Adaptations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Adaptations"
  },
  {
    "label": "EncoderChangeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderChangeEvent"
  },
  {
    "label": "UmaSamplesContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UmaSamplesContainer"
  },
  {
    "label": "SendStatisticsProxy()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_SEND_STATISTICS_PROXY_H_ # define VIDEO_SEND_STATISTICS_PROXY_H_ # include<array> # include<map> # include<memory> # include<string> # include<vector> # include \" api / field_trials_view . h \" # include \" api / video / video_codec_constants . h \" # include \" call / video_send_stream . h \" # include \" modules / include / module_common_types_public . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" rtc_base / numerics / exp_filter . h \" # include \" rtc_base / rate_tracker . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" video / config / video_encoder_config . h \" # include \" video / quality_limitation_reason_tracker . h \" # include \" video / report_block_stats . h \" # include \" video / stats_counter . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { class SendStatisticsProxy : public VideoStreamEncoderObserver,public ReportBlockDataObserver,public RtcpPacketTypeCounterObserver,public StreamDataCountersCallback,public BitrateStatisticsObserver,public FrameCountObserver,public SendSideDelayObserver { public : const int kStatsTimeoutMs ; const int kMinRequiredMetricsSamples = 2 0 0 ;)",
    "insertText": "SendStatisticsProxy(Clock* clock, const VideoSendStream::Config& config, VideoEncoderConfig::ContentType content_type, const FieldTrialsView& field_trials)"
  },
  {
    "label": "SendStatisticsProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SendStatisticsProxy()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (VideoSendStream::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "OnSendEncodedImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_info)"
  },
  {
    "label": "OnEncoderImplementationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderImplementationChanged(EncoderImplementation implementation)"
  },
  {
    "label": "OnIncomingFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncomingFrame(int width, int height)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(DropReason)"
  },
  {
    "label": "OnAdaptationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdaptationChanged(VideoAdaptationReason reason, const VideoAdaptationCounters& cpu_counters, const VideoAdaptationCounters& quality_counters)"
  },
  {
    "label": "ClearAdaptationStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAdaptationStats()"
  },
  {
    "label": "UpdateAdaptationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAdaptationSettings(AdaptationSettings cpu_settings, AdaptationSettings quality_settings)"
  },
  {
    "label": "OnBitrateAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateAllocationUpdated(const VideoCodec& codec, const VideoBitrateAllocation& allocation)"
  },
  {
    "label": "OnEncoderInternalScalerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderInternalScalerUpdate(bool is_scaled)"
  },
  {
    "label": "OnMinPixelLimitReached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMinPixelLimitReached()"
  },
  {
    "label": "OnInitialQualityResolutionAdaptDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialQualityResolutionAdaptDown()"
  },
  {
    "label": "OnSuspendChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSuspendChange(bool is_suspended)"
  },
  {
    "label": "OnInactiveSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInactiveSsrc(uint32_t ssrc)"
  },
  {
    "label": "OnEncoderReconfigured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderReconfigured(const VideoEncoderConfig& encoder_config, const std::vector<VideoStream>& streams)"
  },
  {
    "label": "OnSetEncoderTargetRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetEncoderTargetRate(uint32_t bitrate_bps)"
  },
  {
    "label": "OnEncodedFrameTimeMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodedFrameTimeMeasured(int encode_time_ms, int encode_usage_percent)"
  },
  {
    "label": "GetInputFrameRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInputFrameRate()"
  },
  {
    "label": "GetSendFrameRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetSendFrameRate()"
  },
  {
    "label": "OnReportBlockDataUpdated()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnReportBlockDataUpdated(ReportBlockData report_block_data)"
  },
  {
    "label": "RtcpPacketTypesCounterUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpPacketTypesCounterUpdated(uint32_t ssrc, const RtcpPacketTypeCounter& packet_counter)"
  },
  {
    "label": "DataCountersUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataCountersUpdated(const StreamDataCounters& counters, uint32_t ssrc)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify(uint32_t total_bitrate_bps, uint32_t retransmit_bitrate_bps, uint32_t ssrc)"
  },
  {
    "label": "FrameCountUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameCountUpdated(const FrameCounts& frame_counts, uint32_t ssrc)"
  },
  {
    "label": "SendSideDelayUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSideDelayUpdated(int avg_delay_ms, int max_delay_ms, uint32_t ssrc)"
  },
  {
    "label": "SampleCounter()",
    "kind": "Method",
    "detail": "Function (private : class SampleCounter { public :)",
    "insertText": "SampleCounter() : sum(0), num_samples(0)"
  },
  {
    "label": "SampleCounter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SampleCounter()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "Avg()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Avg(int64_t min_required_samples)"
  },
  {
    "label": "BoolSampleCounter()",
    "kind": "Method",
    "detail": "Function (private : int64_t sum ; int64_t num_samples ; } ; class BoolSampleCounter { public :)",
    "insertText": "BoolSampleCounter() : sum(0), num_samples(0)"
  },
  {
    "label": "BoolSampleCounter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BoolSampleCounter()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(bool sample)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(bool sample, int64_t count)"
  },
  {
    "label": "Percent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Percent(int64_t min_required_samples)"
  },
  {
    "label": "Permille()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Permille(int64_t min_required_samples)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "Fraction(int64_t min_required_samples, float multiplier)"
  },
  {
    "label": "StatsUpdateTimes()",
    "kind": "Method",
    "detail": "Function (int64_t sum ; int64_t num_samples ; } ; struct StatsUpdateTimes {)",
    "insertText": "StatsUpdateTimes() : resolution_update_ms(0), bitrate_update_ms(0)"
  },
  {
    "label": "TargetRateUpdates()",
    "kind": "Method",
    "detail": "Function (} int64_t resolution_update_ms ; int64_t bitrate_update_ms ; } ; struct TargetRateUpdates {)",
    "insertText": "TargetRateUpdates() : pause_resume_events(0), last_paused_or_resumed(false), last_ms(-1)"
  },
  {
    "label": "FallbackEncoderInfo()",
    "kind": "Method",
    "detail": "Function (} int pause_resume_events ; bool last_paused_or_resumed ; int64_t last_ms ; } ; struct FallbackEncoderInfo {)",
    "insertText": "FallbackEncoderInfo()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool is_possible = true ; bool is_active = false ; int on_off_events = 0 ; int64_t elapsed_ms = 0 ; absl::optional<int64_t> last_update_ms ; const int max_frame_diff_ms = 2 0 0 0 ; } ; struct FallbackEncoderInfoDisabled { bool is_possible = true ; bool min_pixel_limit_reached = false ; } ; struct StatsTimer { void)",
    "insertText": "Start(int64_t now_ms)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(int64_t now_ms)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(int64_t now_ms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int64_t start_ms = - 1 ; int64_t total_ms = 0 ; } ; struct QpCounters { SampleCounter vp8 ; SampleCounter vp9 ; SampleCounter h264 ; } ; struct AdaptChanges { int down = 0 ; int up = 0 ; } ; struct TimestampOlderThan { bool)",
    "insertText": "operator()(uint32_t ts1, uint32_t ts2)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (} } ; struct Frame {)",
    "insertText": "Frame(int64_t send_ms, uint32_t width, uint32_t height, int simulcast_idx) : send_ms(send_ms), max_width(width), max_height(height), max_simulcast_idx(simulcast_idx)"
  },
  {
    "label": "PurgeOldStats()",
    "kind": "Method",
    "detail": "Function (} const int64_t send_ms ; uint32_t max_width ; uint32_t max_height ; int max_simulcast_idx ; } ; typedef std::map<uint32_t,Frame,TimestampOlderThan> EncodedFrameMap ; void)",
    "insertText": "PurgeOldStats() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetStatsEntry()",
    "kind": "Method",
    "detail": "Function (VideoSendStream::StreamStats*)",
    "insertText": "GetStatsEntry(uint32_t ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "MaskedCpuCounts()",
    "kind": "Method",
    "detail": "Function (struct MaskedAdaptationCounts { absl::optional<int> resolution_adaptations = absl::nullopt ; absl::optional<int> num_framerate_reductions = absl::nullopt ; } ; struct Adaptations { public : MaskedAdaptationCounts)",
    "insertText": "MaskedCpuCounts()"
  },
  {
    "label": "MaskedQualityCounts()",
    "kind": "Method",
    "detail": "Function (MaskedAdaptationCounts)",
    "insertText": "MaskedQualityCounts()"
  },
  {
    "label": "set_cpu_counts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_cpu_counts(const VideoAdaptationCounters& cpu_counts)"
  },
  {
    "label": "set_quality_counts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_quality_counts(const VideoAdaptationCounters& quality_counts)"
  },
  {
    "label": "cpu_counts()",
    "kind": "Method",
    "detail": "Function (VideoAdaptationCounters)",
    "insertText": "cpu_counts()"
  },
  {
    "label": "quality_counts()",
    "kind": "Method",
    "detail": "Function (VideoAdaptationCounters)",
    "insertText": "quality_counts()"
  },
  {
    "label": "UpdateMaskingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaskingSettings(AdaptationSettings cpu_settings, AdaptationSettings quality_settings)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (private : VideoAdaptationCounters cpu_counts_ ; AdaptationSettings cpu_settings_ ; VideoAdaptationCounters quality_counts_ ; AdaptationSettings quality_settings_ ; MaskedAdaptationCounts)",
    "insertText": "Mask(const VideoAdaptationCounters& counters, const AdaptationSettings& settings)"
  },
  {
    "label": "SetAdaptTimer()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetAdaptTimer(const MaskedAdaptationCounts& counts, StatsTimer* timer) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateAdaptationStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAdaptationStats() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "TryUpdateInitialQualityResolutionAdaptUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryUpdateInitialQualityResolutionAdaptUp(absl::optional<int> old_quality_downscales, absl::optional<int> updated_quality_downscales) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateEncoderFallbackStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEncoderFallbackStats(const CodecSpecificInfo* codec_info, int pixels, int simulcast_index) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateFallbackDisabledStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFallbackDisabledStats(const CodecSpecificInfo* codec_info, int pixels, int simulcast_index) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const std::string payload_name_ ; const RtpConfig rtp_config_ ; const absl::optional<int> fallback_max_pixels_ ; const absl::optional<int> fallback_max_pixels_disabled_ ; Mutex mutex_ ; VideoEncoderConfig::ContentType content_type_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "UmaSamplesContainer()",
    "kind": "Method",
    "detail": "Function (struct EncoderChangeEvent { std::string previous_encoder_implementation ; std::string new_encoder_implementation ; } ; absl::optional<EncoderChangeEvent> encoder_changed_ ; struct UmaSamplesContainer {)",
    "insertText": "UmaSamplesContainer(const char* prefix, const VideoSendStream::Stats& start_stats, Clock* clock)"
  },
  {
    "label": "UmaSamplesContainer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UmaSamplesContainer()"
  },
  {
    "label": "UpdateHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHistograms(const RtpConfig& rtp_config, const VideoSendStream::Stats& current_stats)"
  },
  {
    "label": "InitializeBitrateCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBitrateCounters(const VideoSendStream::Stats& stats)"
  },
  {
    "label": "InsertEncodedFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertEncodedFrame(const EncodedImage& encoded_frame, int simulcast_idx)"
  },
  {
    "label": "RemoveOld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOld(int64_t now_ms)"
  }
]