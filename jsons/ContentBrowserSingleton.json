[
  {
    "label": "FCollectionAssetRegistryBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionAssetRegistryBridge"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPathPermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathPermissionList"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FWorkspaceItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkspaceItem"
  },
  {
    "label": "SContentBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SContentBrowser"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FContentBrowserItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserItem"
  },
  {
    "label": "FTabSpawnerEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabSpawnerEntry"
  },
  {
    "label": "FContentBrowserPluginSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserPluginSettings"
  },
  {
    "label": "FShowPrivateContentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShowPrivateContentState"
  },
  {
    "label": "FContentBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserSingleton"
  },
  {
    "label": "SAssetDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetDialog"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" ContentBrowserDataSubsystem . h \" # include \" ContentBrowserDelegates . h \" # include \" ContentBrowserItemPath . h \" # include \" HAL / Platform . h \" # include \" IContentBrowserSingleton . h \" # include \" Internationalization / Text . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" ContentBrowserSingleton . generated . h \" class FCollectionAssetRegistryBridge ; class FMenuBuilder ; class FPathPermissionList ; class FSpawnTabArgs ; class FTabManager ; class FViewport ; class FWorkspaceItem ; class SContentBrowser ; class SDockTab ; class SWidget ; class UClass ; class UFactory ; class UObject ; class UToolMenu ; struct FAssetData ; struct FContentBrowserItem ; struct FTabSpawnerEntry ; # define MAX_CONTENT_BROWSERS 4)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FContentBrowserPluginSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContentBrowserPluginSettings() : RootFolderSortPriority(0.f)"
  },
  {
    "label": "FContentBrowserSingleton()",
    "kind": "Method",
    "detail": "Function (} } ; struct FShowPrivateContentState { TSharedPtr<FPathPermissionList> InvariantPaths ; TSharedPtr<FPathPermissionList> CachedVirtualPaths ; } ; class FContentBrowserSingleton : public IContentBrowserSingleton { public :)",
    "insertText": "FContentBrowserSingleton()"
  },
  {
    "label": "CreateContentBrowser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateContentBrowser(const FName InstanceName, TSharedPtr<SDockTab> ContainingTab, const FContentBrowserConfig* ContentBrowserConfig)"
  },
  {
    "label": "CreateAssetPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateAssetPicker(const FAssetPickerConfig& AssetPickerConfig)"
  },
  {
    "label": "GetAssetPickerSearchBox()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetAssetPickerSearchBox(const TSharedRef<SWidget>& AssetPickerWidget)"
  },
  {
    "label": "CreatePathPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreatePathPicker(const FPathPickerConfig& PathPickerConfig)"
  },
  {
    "label": "CreateCollectionPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateCollectionPicker(const FCollectionPickerConfig& CollectionPickerConfig)"
  },
  {
    "label": "CreateContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateContentBrowserDrawer(const FContentBrowserConfig& ContentBrowserConfig, TFunction<TSharedPtr<SDockTab>()> InOnGetTabForDrawer)"
  },
  {
    "label": "CreateOpenAssetDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOpenAssetDialog(const FOpenAssetDialogConfig& OpenAssetConfig, const FOnAssetsChosenForOpen& OnAssetsChosenForOpen, const FOnAssetDialogCancelled& OnAssetDialogCancelled)"
  },
  {
    "label": "CreateModalOpenAssetDialog()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData>)",
    "insertText": "CreateModalOpenAssetDialog(const FOpenAssetDialogConfig& InConfig)"
  },
  {
    "label": "CreateSaveAssetDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSaveAssetDialog(const FSaveAssetDialogConfig& SaveAssetConfig, const FOnObjectPathChosenForSave& OnAssetNameChosenForSave, const FOnAssetDialogCancelled& OnAssetDialogCancelled)"
  },
  {
    "label": "CreateModalSaveAssetDialog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateModalSaveAssetDialog(const FSaveAssetDialogConfig& SaveAssetConfig)"
  },
  {
    "label": "HasPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrimaryContentBrowser()"
  },
  {
    "label": "SetPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPrimaryContentBrowser(FName InstanceName)"
  },
  {
    "label": "FocusPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusPrimaryContentBrowser(bool bFocusSearch)"
  },
  {
    "label": "FocusContentBrowserSearchField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusContentBrowserSearchField(TSharedPtr<SWidget> ContentBrowserWidget)"
  },
  {
    "label": "CreateNewAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewAsset(const FString& DefaultAssetName, const FString& PackagePath, UClass* AssetClass, UFactory* Factory)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<struct FAssetData>& AssetDataList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<UObject*>& AssetList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToFolders(const TArray<FString>& FolderList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToItems(const TArray<FContentBrowserItem>& ItemsToSync, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserTo(const FContentBrowserSelection& ItemSelection, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "GetSelectedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedAssets(TArray<FAssetData>& SelectedAssets)"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedFolders(TArray<FString>& SelectedFolders)"
  },
  {
    "label": "GetSelectedPathViewFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedPathViewFolders(TArray<FString>& SelectedFolders)"
  },
  {
    "label": "GetCurrentPath()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FString)",
    "insertText": "GetCurrentPath(const EContentBrowserPathType PathType)"
  },
  {
    "label": "GetCurrentPath()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FContentBrowserItemPath)",
    "insertText": "GetCurrentPath()"
  },
  {
    "label": "CaptureThumbnailFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThumbnailFromViewport(FViewport* InViewport, TArray<FAssetData>& SelectedAssets)"
  },
  {
    "label": "SetSelectedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPaths(const TArray<FString>& FolderPaths, bool bNeedsRefresh = false, bool bPathsAreVirtual = false)"
  },
  {
    "label": "ForceShowPluginContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceShowPluginContent(bool bEnginePlugin)"
  },
  {
    "label": "GetInitialPathToSaveAsset()",
    "kind": "Method",
    "detail": "Function (FContentBrowserItemPath)",
    "insertText": "GetInitialPathToSaveAsset(const FContentBrowserItemPath& InPath)"
  },
  {
    "label": "SaveContentBrowserSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveContentBrowserSettings(TSharedPtr<SWidget> ContentBrowserWidget)"
  },
  {
    "label": "ExecuteRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteRename(TSharedPtr<SWidget> PickerWidget)"
  },
  {
    "label": "ExecuteAddFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAddFolder(TSharedPtr<SWidget> PathPickerWidget)"
  },
  {
    "label": "RefreshPathView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPathView(TSharedPtr<SWidget> PathPickerWidget)"
  },
  {
    "label": "IsShowingPrivateContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingPrivateContent(const FStringView VirtualFolderPath)"
  },
  {
    "label": "IsFolderShowPrivateContentToggleable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFolderShowPrivateContentToggleable(const FStringView VirtualFolderPath)"
  },
  {
    "label": "GetShowPrivateContentPermissionList()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FPathPermissionList>&)",
    "insertText": "GetShowPrivateContentPermissionList()"
  },
  {
    "label": "SetPrivateContentPermissionListDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrivateContentPermissionListDirty()"
  },
  {
    "label": "RegisterIsFolderShowPrivateContentToggleableDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterIsFolderShowPrivateContentToggleableDelegate(FIsFolderShowPrivateContentToggleableDelegate InIsFolderShowPrivateContentToggleableDelegate)"
  },
  {
    "label": "UnregisterIsFolderShowPrivateContentToggleableDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterIsFolderShowPrivateContentToggleableDelegate()"
  },
  {
    "label": "RegisterOnFavoritesChangedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnFavoritesChangedHandler(FSimpleDelegate OnFavoritesChanged)"
  },
  {
    "label": "UnregisterOnFavoritesChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnFavoritesChangedDelegate(FDelegateHandle Handle)"
  },
  {
    "label": "GetAliasesForPath()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAliasesForPath(const FSoftObjectPath& InPath)"
  },
  {
    "label": "BroadcastFavoritesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastFavoritesChanged()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FContentBrowserSingleton&)",
    "insertText": "Get()"
  },
  {
    "label": "SetPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryContentBrowser(const TSharedRef<SContentBrowser>& NewPrimaryBrowser)"
  },
  {
    "label": "ContentBrowserClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentBrowserClosed(const TSharedRef<SContentBrowser>& ClosedBrowser)"
  },
  {
    "label": "GetPluginSettings()",
    "kind": "Method",
    "detail": "Function (const FContentBrowserPluginSettings&)",
    "insertText": "GetPluginSettings(FName PluginName)"
  },
  {
    "label": "DockContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (TArray<FString> FavoriteFolderPaths ; void)",
    "insertText": "DockContentBrowserDrawer()"
  },
  {
    "label": "FindContentBrowserToSync()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SContentBrowser>)",
    "insertText": "FindContentBrowserToSync(bool bAllowLockedBrowsers, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SharedCreateAssetDialogWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedCreateAssetDialogWindow(const TSharedRef<class SAssetDialog>& AssetDialog, const FSharedAssetDialogConfig& InConfig, bool bModal)"
  },
  {
    "label": "OnEditorLoadSelectedAssetsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorLoadSelectedAssetsIfNeeded()"
  },
  {
    "label": "ChooseNewPrimaryBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseNewPrimaryBrowser()"
  },
  {
    "label": "FocusContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusContentBrowser(const TSharedPtr<SContentBrowser>& BrowserToFocus)"
  },
  {
    "label": "SummonNewBrowser()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SummonNewBrowser(bool bAllowLockedBrowsers = false, TSharedPtr<FTabManager> SpecificTabManager = nullptr)"
  },
  {
    "label": "SpawnContentBrowserTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnContentBrowserTab(const FSpawnTabArgs& SpawnTabArgs, int32 BrowserIdx)"
  },
  {
    "label": "GetContentBrowserTabLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetContentBrowserTabLabel(int32 BrowserIdx)"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocked(const FName& InstanceName)"
  },
  {
    "label": "GetContentBrowserLabelWithIndex()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetContentBrowserLabelWithIndex(int32 BrowserIdx)"
  },
  {
    "label": "PopulateConfigValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateConfigValues()"
  },
  {
    "label": "GetContentBrowserSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContentBrowserSubMenu(UToolMenu* Menu, TSharedRef<FWorkspaceItem> ContentBrowserGroup)"
  },
  {
    "label": "ExtendContentBrowserTabContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendContentBrowserTabContextMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "RebuildPrivateContentStateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPrivateContentStateCache()"
  },
  {
    "label": "SDockTab()",
    "kind": "Method",
    "detail": "Function (public : FName ContentBrowserTabIDs [ MAX_CONTENT_BROWSERS ] ; private : FIsFolderShowPrivateContentToggleableDelegate IsFolderShowPrivateContentToggleableDelegate ; TArray<TWeakPtr<SContentBrowser>> AllContentBrowsers ; TWeakPtr<SContentBrowser> ContentBrowserDrawer ; TFunction<TSharedPtr<)",
    "insertText": "SDockTab()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TWeakPtr<FTabManager>> BrowserToLastKnownTabManagerMap ; TWeakPtr<SContentBrowser> PrimaryContentBrowser ; TSharedRef<FCollectionAssetRegistryBridge> CollectionAssetRegistryBridge ; TArray<FContentBrowserPluginSettings> PluginSettings ; TArray<TSharedPtr<FTabSpawnerEntry>> ContentBrowserTabs ; int32 SettingsStringID ; FShowPrivateContentState ShowPrivateContentState ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnFavoritesChangedDelegate)"
  }
]