[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UInteractiveToolManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveToolManager"
  },
  {
    "label": "UInteractiveGizmoManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveGizmoManager"
  },
  {
    "label": "FSceneQueryVisibilityFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneQueryVisibilityFilter"
  },
  {
    "label": "FSceneHitQueryRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneHitQueryRequest"
  },
  {
    "label": "FSceneHitQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneHitQueryResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneSnapQueryRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneSnapQueryRequest"
  },
  {
    "label": "FSceneSnapQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneSnapQueryResult"
  },
  {
    "label": "USceneSnappingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneSnappingManager"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Object . h \" # include \" Misc / Optional . h \" # include \" Math / Vector . h \" # include \" Math / Ray . h \" # include \" Engine / HitResult . h \" # include \" SceneSnappingManager . generated . h \" class AActor ; class UActorComponent ; class UPrimitiveComponent ; class UInteractiveToolManager ; class UInteractiveGizmoManager ; struct FSceneQueryVisibilityFilter { const TArray<const UPrimitiveComponent*>* ComponentsToIgnore = nullptr ; const TArray<const UPrimitiveComponent*>* InvisibleComponentsToInclude = nullptr ; bool)",
    "insertText": "IsVisible(const UPrimitiveComponent* Component)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} ; struct FSceneHitQueryRequest { FRay3d WorldRay ; bool bWantHitGeometryInfo = false ; FSceneQueryVisibilityFilter VisibilityFilter ; } ; struct FSceneHitQueryResult { AActor* TargetActor = nullptr ; UPrimitiveComponent* TargetComponent = nullptr ; FVector3d Position =)",
    "insertText": "Zero()"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (FVector3d Normal =)",
    "insertText": "UnitZ()"
  },
  {
    "label": "InitializeHitResult()",
    "kind": "Method",
    "detail": "Function (int HitTriIndex = - 1 ; FVector3d TriVertices [ 3 ] ; FHitResult HitResult ; void)",
    "insertText": "InitializeHitResult(const FSceneHitQueryRequest& FromRequest)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,MeshVertex = 1,MeshEdge = 2,Grid = 4,All = MeshVertex | MeshEdge | Grid } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESceneSnapQueryTargetType)"
  },
  {
    "label": "FQuat()",
    "kind": "Method",
    "detail": "Function (struct FSceneSnapQueryRequest { ESceneSnapQueryType RequestType = ESceneSnapQueryType::Position ; ESceneSnapQueryTargetType TargetTypes = ESceneSnapQueryTargetType::Grid ; TOptional<FVector> GridSize { } ; TOptional<FRotator> RotGridSize { } ; FVector Position = FVector::ZeroVector ; float VisualAngleThresholdDegrees = 1 5 . 0 ; FQuat DeltaRotation =)",
    "insertText": "FQuat(EForceInit::ForceInitToZero)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (const TArray<const UPrimitiveComponent*>* ComponentsToIgnore = nullptr ; const TArray<const UPrimitiveComponent*>* InvisibleComponentsToInclude = nullptr ; } ; struct FSceneSnapQueryResult { AActor* TargetActor = nullptr ; UActorComponent* TargetComponent = nullptr ; ESceneSnapQueryTargetType TargetType = ESceneSnapQueryTargetType::None ; FVector Position ; FVector Normal ; FQuat DeltaRotation ; FVector TriVertices [ 3 ] ; int TriSnapIndex ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual bool ExecuteSceneHitQuery(const FSceneHitQueryRequest& Request, FSceneHitQueryResult& ResultOut)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (USceneSnappingManager*)",
    "insertText": "Find(UInteractiveGizmoManager* GizmoManager)"
  }
]