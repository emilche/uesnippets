[
  {
    "label": "_TIFFFieldArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_TIFFFieldArray"
  },
  {
    "label": "_TIFFField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_TIFFField"
  },
  {
    "label": "FIELD_LAST()",
    "kind": "Method",
    "detail": "Function (# ifndef _TIFFDIR_ # define _TIFFDIR_ # include \" tiff . h \" # include \" tiffio . h \" typedef struct { const TIFFField* info ; int count ; void* value ; } TIFFTagValue ; typedef struct { uint16 tdir_tag ; uint16 tdir_type ; uint64 tdir_count ; union { uint16 toff_short ; uint32 toff_long ; uint64 toff_long8 ; } tdir_offset ; uint8 tdir_ignore ; } TIFFDirEntry ; typedef struct { # define FIELD_SETLONGS 4 unsigned long td_fieldsset [ FIELD_SETLONGS ] ; uint32 td_imagewidth,td_imagelength,td_imagedepth ; uint32 td_tilewidth,td_tilelength,td_tiledepth ; uint32 td_subfiletype ; uint16 td_bitspersample ; uint16 td_sampleformat ; uint16 td_compression ; uint16 td_photometric ; uint16 td_threshholding ; uint16 td_fillorder ; uint16 td_orientation ; uint16 td_samplesperpixel ; uint32 td_rowsperstrip ; uint16 td_minsamplevalue,td_maxsamplevalue ; double* td_sminsamplevalue ; double* td_smaxsamplevalue ; float td_xresolution,td_yresolution ; uint16 td_resolutionunit ; uint16 td_planarconfig ; float td_xposition,td_yposition ; uint16 td_pagenumber [ 2 ] ; uint16* td_colormap [ 3 ] ; uint16 td_halftonehints [ 2 ] ; uint16 td_extrasamples ; uint16* td_sampleinfo ; uint32 td_stripsperimage ; uint32 td_nstrips ; uint64* td_stripoffset_p ; uint64* td_stripbytecount_p ; uint32 td_stripoffsetbyteallocsize ; # ifdef STRIPBYTECOUNTSORTED_UNUSED int td_stripbytecountsorted ; # endif TIFFDirEntry td_stripoffset_entry ; TIFFDirEntry td_stripbytecount_entry ; uint16 td_nsubifd ; uint64* td_subifd ; uint16 td_ycbcrsubsampling [ 2 ] ; uint16 td_ycbcrpositioning ; uint16* td_transferfunction [ 3 ] ; float* td_refblackwhite ; int td_inknameslen ; char* td_inknames ; int td_customValueCount ; TIFFTagValue* td_customValues ; unsigned char td_deferstrilearraywriting ; } TIFFDirectory ; # define FIELD_IGNORE 0 # define FIELD_IMAGEDIMENSIONS 1 # define FIELD_TILEDIMENSIONS 2 # define FIELD_RESOLUTION 3 # define FIELD_POSITION 4 # define FIELD_SUBFILETYPE 5 # define FIELD_BITSPERSAMPLE 6 # define FIELD_COMPRESSION 7 # define FIELD_PHOTOMETRIC 8 # define FIELD_THRESHHOLDING 9 # define FIELD_FILLORDER 1 0 # define FIELD_ORIENTATION 1 5 # define FIELD_SAMPLESPERPIXEL 1 6 # define FIELD_ROWSPERSTRIP 1 7 # define FIELD_MINSAMPLEVALUE 1 8 # define FIELD_MAXSAMPLEVALUE 1 9 # define FIELD_PLANARCONFIG 2 0 # define FIELD_RESOLUTIONUNIT 2 2 # define FIELD_PAGENUMBER 2 3 # define FIELD_STRIPBYTECOUNTS 2 4 # define FIELD_STRIPOFFSETS 2 5 # define FIELD_COLORMAP 2 6 # define FIELD_EXTRASAMPLES 3 1 # define FIELD_SAMPLEFORMAT 3 2 # define FIELD_SMINSAMPLEVALUE 3 3 # define FIELD_SMAXSAMPLEVALUE 3 4 # define FIELD_IMAGEDEPTH 3 5 # define FIELD_TILEDEPTH 3 6 # define FIELD_HALFTONEHINTS 3 7 # define FIELD_YCBCRSUBSAMPLING 3 9 # define FIELD_YCBCRPOSITIONING 4 0 # define FIELD_REFBLACKWHITE 4 1 # define FIELD_TRANSFERFUNCTION 4 4 # define FIELD_INKNAMES 4 6 # define FIELD_SUBIFD 4 9 # define FIELD_CODEC 6 6 # define FIELD_PSEUDO 0 # define)",
    "insertText": "FIELD_LAST(32*FIELD_SETLONGS-1) #define BITn(n) (((unsigned long)1L)<<((n)&0x1f)) #define BITFIELDn(tif, n) ((tif)->tif_dir.td_fieldsset[(n)/32]) #define TIFFFieldSet(tif, field) (BITFIELDn(tif, field) & BITn(field)) #define TIFFSetFieldBit(tif, field) (BITFIELDn(tif, field) |= BITn(field)) #define TIFFClrFieldBit(tif, field) (BITFIELDn(tif, field) &= ~BITn(field)) #define FieldSet(fields, f) (fields[(f)/32] & BITn(f)) #define ResetFieldBit(fields, f) (fields[(f)/32] &= ~BITn(f))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (TIFF_SETGET_UNDEFINED = 0,TIFF_SETGET_ASCII = 1,TIFF_SETGET_UINT8 = 2,TIFF_SETGET_SINT8 = 3,TIFF_SETGET_UINT16 = 4,TIFF_SETGET_SINT16 = 5,TIFF_SETGET_UINT32 = 6,TIFF_SETGET_SINT32 = 7,TIFF_SETGET_UINT64 = 8,TIFF_SETGET_SINT64 = 9,TIFF_SETGET_FLOAT = 1 0,TIFF_SETGET_DOUBLE = 1 1,TIFF_SETGET_IFD8 = 1 2,TIFF_SETGET_INT = 1 3,TIFF_SETGET_UINT16_PAIR = 1 4,TIFF_SETGET_C0_ASCII = 1 5,TIFF_SETGET_C0_UINT8 = 1 6,TIFF_SETGET_C0_SINT8 = 1 7,TIFF_SETGET_C0_UINT16 = 1 8,TIFF_SETGET_C0_SINT16 = 1 9,TIFF_SETGET_C0_UINT32 = 2 0,TIFF_SETGET_C0_SINT32 = 2 1,TIFF_SETGET_C0_UINT64 = 2 2,TIFF_SETGET_C0_SINT64 = 2 3,TIFF_SETGET_C0_FLOAT = 2 4,TIFF_SETGET_C0_DOUBLE = 2 5,TIFF_SETGET_C0_IFD8 = 2 6,TIFF_SETGET_C16_ASCII = 2 7,TIFF_SETGET_C16_UINT8 = 2 8,TIFF_SETGET_C16_SINT8 = 2 9,TIFF_SETGET_C16_UINT16 = 3 0,TIFF_SETGET_C16_SINT16 = 3 1,TIFF_SETGET_C16_UINT32 = 3 2,TIFF_SETGET_C16_SINT32 = 3 3,TIFF_SETGET_C16_UINT64 = 3 4,TIFF_SETGET_C16_SINT64 = 3 5,TIFF_SETGET_C16_FLOAT = 3 6,TIFF_SETGET_C16_DOUBLE = 3 7,TIFF_SETGET_C16_IFD8 = 3 8,TIFF_SETGET_C32_ASCII = 3 9,TIFF_SETGET_C32_UINT8 = 4 0,TIFF_SETGET_C32_SINT8 = 4 1,TIFF_SETGET_C32_UINT16 = 4 2,TIFF_SETGET_C32_SINT16 = 4 3,TIFF_SETGET_C32_UINT32 = 4 4,TIFF_SETGET_C32_SINT32 = 4 5,TIFF_SETGET_C32_UINT64 = 4 6,TIFF_SETGET_C32_SINT64 = 4 7,TIFF_SETGET_C32_FLOAT = 4 8,TIFF_SETGET_C32_DOUBLE = 4 9,TIFF_SETGET_C32_IFD8 = 5 0,TIFF_SETGET_OTHER = 5 1 } TIFFSetGetFieldType ; # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "_TIFFGetFields()",
    "kind": "Method",
    "detail": "Function (# endif const TIFFFieldArray*)",
    "insertText": "_TIFFGetFields(void)"
  },
  {
    "label": "_TIFFGetExifFields()",
    "kind": "Method",
    "detail": "Function (const TIFFFieldArray*)",
    "insertText": "_TIFFGetExifFields(void)"
  },
  {
    "label": "_TIFFGetGpsFields()",
    "kind": "Method",
    "detail": "Function (const TIFFFieldArray*)",
    "insertText": "_TIFFGetGpsFields(void)"
  },
  {
    "label": "_TIFFSetupFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_TIFFSetupFields(TIFF* tif, const TIFFFieldArray* infoarray)"
  },
  {
    "label": "_TIFFPrintFieldInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_TIFFPrintFieldInfo(TIFF*, FILE*)"
  },
  {
    "label": "_TIFFFillStriles()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_TIFFFillStriles(TIFF*)"
  },
  {
    "label": "_TIFFMergeFields()",
    "kind": "Method",
    "detail": "Function (typedef enum { tfiatImage,tfiatExif,tfiatGps,tfiatOther } TIFFFieldArrayType ; struct _TIFFFieldArray { TIFFFieldArrayType type ; uint32 allocated_size ; uint32 count ; TIFFField* fields ; } ; struct _TIFFField { uint32 field_tag ; short field_readcount ; short field_writecount ; TIFFDataType field_type ; uint32 reserved ; TIFFSetGetFieldType set_field_type ; TIFFSetGetFieldType get_field_type ; unsigned short field_bit ; unsigned char field_oktochange ; unsigned char field_passcount ; char* field_name ; TIFFFieldArray* field_subfields ; } ; int)",
    "insertText": "_TIFFMergeFields(TIFF*, const TIFFField[], uint32)"
  },
  {
    "label": "_TIFFFindOrRegisterField()",
    "kind": "Method",
    "detail": "Function (const TIFFField*)",
    "insertText": "_TIFFFindOrRegisterField(TIFF *, uint32, TIFFDataType)"
  },
  {
    "label": "_TIFFCreateAnonField()",
    "kind": "Method",
    "detail": "Function (TIFFField*)",
    "insertText": "_TIFFCreateAnonField(TIFF *, uint32, TIFFDataType)"
  },
  {
    "label": "_TIFFCheckFieldIsValidForCodec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_TIFFCheckFieldIsValidForCodec(TIFF *tif, ttag_t tag)"
  }
]