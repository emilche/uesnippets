[
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl_cl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl_cl"
  },
  {
    "label": "isa_impl_wrap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl_wrap"
  },
  {
    "label": "X",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "X"
  },
  {
    "label": "Y",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Y"
  },
  {
    "label": "To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "To"
  },
  {
    "label": "From",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "From"
  },
  {
    "label": "cast_retty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cast_retty"
  },
  {
    "label": "cast_retty_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cast_retty_impl"
  },
  {
    "label": "SimpleFrom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleFrom"
  },
  {
    "label": "cast_retty_wrap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cast_retty_wrap"
  },
  {
    "label": "FromTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FromTy"
  },
  {
    "label": "cast_convert_val",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cast_convert_val"
  },
  {
    "label": "is_simple_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_simple_type"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_CASTING_H # define LLVM_SUPPORT_CASTING_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / type_traits . h \" # include<cassert> namespace llvm { template<From> struct simplify_type { typedef From SimpleType ; SimpleType&)",
    "insertText": "getSimplifiedValue(From &Val)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } ; template<To,From,Enabler = void> struct isa_impl { bool)",
    "insertText": "doit(const From &Val)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } ; template<To,From> struct isa_impl<To,From,std::enable_if<std::is_base_of<To,From>::value>::type> { bool)",
    "insertText": "doit(const From &)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } ; template<To,From> struct isa_impl_cl<To,From*> { bool)",
    "insertText": "doit(const From *Val)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Val && \"isa<> used on a null pointer\")"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } ; template<To,FromTy> struct isa_impl_wrap<To,FromTy,FromTy> { bool)",
    "insertText": "doit(const FromTy &Val)"
  },
  {
    "label": "isa()",
    "kind": "Method",
    "detail": "Function (} } ; template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT bool)",
    "insertText": "isa(const Y &Val)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} template<class To,class From> struct cast_retty ; template<class To,class From> struct cast_retty_impl { typedef To& ret_type ; } ; template<class To,class From> struct cast_retty_impl<To,const From> { typedef const To& ret_type ; } ; template<class To,class From> struct cast_retty_impl<To,From*> { typedef To* ret_type ; } ; template<class To,class From> struct cast_retty_impl<To,const From*> { typedef const To* ret_type ; } ; template<class To,class From> struct cast_retty_impl<To,const From* const> { typedef const To* ret_type ; } ; template<class To,class From,class SimpleFrom> struct cast_retty_wrap { typedef cast_retty<To,SimpleFrom>::ret_type ret_type ; } ; template<class To,class FromTy> struct cast_retty_wrap<To,FromTy,FromTy> { typedef cast_retty_impl<To,FromTy>::ret_type ret_type ; } ; template<class To,class From> struct cast_retty { typedef cast_retty_wrap<To,From,simplify_type<From>::SimpleType>::ret_type ret_type ; } ; template<class To,class From,class SimpleFrom> struct cast_convert_val { cast_retty<To,From>::ret_type)",
    "insertText": "doit(From &Val)"
  },
  {
    "label": "Res2()",
    "kind": "Method",
    "detail": "Function (cast_retty<To,FromTy>::ret_type)",
    "insertText": "Res2(typename cast_retty<To, FromTy>::ret_type)const_cast<FromTy&>(Val)"
  },
  {
    "label": "llvm_cast_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_cast_assert(X, Val)"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> cast_retty<X,Y>::ret_type)",
    "insertText": "cast(Y &Val)"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> cast_retty<X,Y*>::ret_type)",
    "insertText": "cast(Y *Val)"
  },
  {
    "label": "cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT std::enable_if<! is_simple_type<Y>::value,cast_retty<X,const Y>::ret_type>::type)",
    "insertText": "cast_or_null(const Y &Val)"
  },
  {
    "label": "cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT std::enable_if<! is_simple_type<Y>::value,cast_retty<X,Y>::ret_type>::type)",
    "insertText": "cast_or_null(Y &Val)"
  },
  {
    "label": "cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT cast_retty<X,Y*>::ret_type)",
    "insertText": "cast_or_null(Y *Val)"
  },
  {
    "label": "dyn_cast()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT std::enable_if<! is_simple_type<Y>::value,cast_retty<X,const Y>::ret_type>::type)",
    "insertText": "dyn_cast(const Y &Val)"
  },
  {
    "label": "dyn_cast()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT cast_retty<X,Y>::ret_type)",
    "insertText": "dyn_cast(Y &Val)"
  },
  {
    "label": "dyn_cast()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT cast_retty<X,Y*>::ret_type)",
    "insertText": "dyn_cast(Y *Val)"
  },
  {
    "label": "dyn_cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT std::enable_if<! is_simple_type<Y>::value,cast_retty<X,const Y>::ret_type>::type)",
    "insertText": "dyn_cast_or_null(const Y &Val)"
  },
  {
    "label": "dyn_cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT std::enable_if<! is_simple_type<Y>::value,cast_retty<X,Y>::ret_type>::type)",
    "insertText": "dyn_cast_or_null(Y &Val)"
  },
  {
    "label": "dyn_cast_or_null()",
    "kind": "Method",
    "detail": "Function (} template<class X,class Y> LLVM_ATTRIBUTE_UNUSED_RESULT cast_retty<X,Y*>::ret_type)",
    "insertText": "dyn_cast_or_null(Y *Val)"
  }
]