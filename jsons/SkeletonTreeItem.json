[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "SKELETONEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKELETONEDITOR_API"
  },
  {
    "label": "FSkeletonTreeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeBuilder"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SKELETON_TREE_ITEM_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Framework / SlateDelegates . h \" # include \" ISkeletonTree . h \" # include \" ISkeletonTreeItem . h \" # include \" Input / Reply . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" class FDragDropEvent ; class FText ; class ITableRow ; class STableViewBase ; class SWidget ; class UObject ; struct FGeometry ; struct FPointerEvent ; class FSkeletonTreeItem : public ISkeletonTreeItem { public :)",
    "insertText": "SKELETON_TREE_ITEM_TYPE(FSkeletonTreeItem, ISkeletonTreeItem)"
  },
  {
    "label": "FSkeletonTreeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletonTreeItem(const TSharedRef<class ISkeletonTree>& InSkeletonTree) : SkeletonTreePtr(InSkeletonTree) , FilterResult(ESkeletonTreeFilterResult::Shown)"
  },
  {
    "label": "MakeTreeRowWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITableRow>)",
    "insertText": "MakeTreeRowWidget(const TSharedRef<STableViewBase>& InOwnerTable, const TAttribute<FText>& InFilterText)"
  },
  {
    "label": "GenerateWidgetForDataColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForDataColumn(const FName& DataColumnName, FIsSelected InIsSelected)"
  },
  {
    "label": "IsInlineEditorExpanded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInlineEditorExpanded()"
  },
  {
    "label": "CanRenameItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRenameItem()"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemDoubleClicked()"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDrop()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleDrop(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISkeletonTreeItem>)",
    "insertText": "GetParent()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParent(TSharedPtr<ISkeletonTreeItem> InParent)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (Parent = InParent ; } TArray<TSharedPtr<ISkeletonTreeItem>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "GetFilterResult()",
    "kind": "Method",
    "detail": "Function (} ESkeletonTreeFilterResult)",
    "insertText": "GetFilterResult()"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FilterResult = InResult ; } FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetObject()"
  }
]