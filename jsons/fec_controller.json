[
  {
    "label": "VCMProtectionCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMProtectionCallback"
  },
  {
    "label": "FecController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecController"
  },
  {
    "label": "FecControllerFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecControllerFactoryInterface"
  },
  {
    "label": "ProtectionRequest()",
    "kind": "Method",
    "detail": "Function (# ifndef API_FEC_CONTROLLER_H_ # define API_FEC_CONTROLLER_H_ # include<memory> # include<vector> # include \" api / video / video_frame_type . h \" # include \" modules / include / module_fec_types . h \" namespace webrtc { class VCMProtectionCallback { public : int)",
    "insertText": "ProtectionRequest(const FecProtectionParams* delta_params, const FecProtectionParams* key_params, uint32_t* sent_video_rate_bps, uint32_t* sent_nack_rate_bps, uint32_t* sent_fec_rate_bps)"
  },
  {
    "label": "VCMProtectionCallback()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "VCMProtectionCallback()"
  },
  {
    "label": "FecController()",
    "kind": "Method",
    "detail": "Function (} } ; class FecController { public : ~)",
    "insertText": "FecController()"
  },
  {
    "label": "SetProtectionCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProtectionCallback(VCMProtectionCallback* protection_callback)"
  },
  {
    "label": "SetProtectionMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProtectionMethod(bool enable_fec, bool enable_nack)"
  },
  {
    "label": "SetEncodingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncodingData(size_t width, size_t height, size_t num_temporal_layers, size_t max_payload_size)"
  },
  {
    "label": "UpdateFecRates()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "UpdateFecRates(uint32_t estimated_bitrate_bps, int actual_framerate, uint8_t fraction_lost, std::vector<bool> loss_mask_vector, int64_t round_trip_time_ms)"
  },
  {
    "label": "UpdateWithEncodedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithEncodedData(size_t encoded_image_length, VideoFrameType encoded_image_frametype)"
  },
  {
    "label": "UseLossVectorMask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLossVectorMask()"
  },
  {
    "label": "CreateFecController()",
    "kind": "Method",
    "detail": "Function (} ; class FecControllerFactoryInterface { public : std::unique_ptr<FecController>)",
    "insertText": "CreateFecController()"
  },
  {
    "label": "FecControllerFactoryInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FecControllerFactoryInterface()"
  }
]