[
  {
    "label": "split_ordered_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "split_ordered_list"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "Solist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Solist"
  },
  {
    "label": "flist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flist_iterator"
  },
  {
    "label": "split_ordered_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "split_ordered_list"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "flist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flist_iterator"
  },
  {
    "label": "Solist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Solist"
  },
  {
    "label": "solist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "solist_iterator"
  },
  {
    "label": "split_ordered_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "split_ordered_list"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "solist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "solist_iterator"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "definitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "definitions"
  },
  {
    "label": "split_ordered_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "split_ordered_list"
  },
  {
    "label": "node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "node"
  },
  {
    "label": "node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "node"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "concurrent_unordered_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_base"
  },
  {
    "label": "call_internal_clear_on_exit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "call_internal_clear_on_exit"
  },
  {
    "label": "const_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_range_type"
  },
  {
    "label": "range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "range_type"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "nodeptr_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nodeptr_t()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (list)",
    "insertText": "clear()"
  },
  {
    "label": "raw_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "raw_iterator(my_head)"
  },
  {
    "label": "raw_const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "raw_const_iterator(my_head)"
  },
  {
    "label": "raw_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "raw_iterator(0)"
  },
  {
    "label": "raw_const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "raw_const_iterator(0)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(it.my_node_ptr, it.my_list_ptr)"
  },
  {
    "label": "check_range()",
    "kind": "Method",
    "detail": "Function (count)",
    "insertText": "check_range(it, next)"
  },
  {
    "label": "check_range()",
    "kind": "Method",
    "detail": "Function (violations)",
    "insertText": "check_range(it, where)"
  },
  {
    "label": "raw_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "raw_iterator(dummy_node)"
  },
  {
    "label": "internal_init()",
    "kind": "Method",
    "detail": "Function (here)",
    "insertText": "internal_init()"
  },
  {
    "label": "clear_buckets_on_exception()",
    "kind": "Method",
    "detail": "Function (call_internal_clear_on_exit)",
    "insertText": "clear_buckets_on_exception(this)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (moving)",
    "insertText": "swap(this->my_solist.my_node_allocator, other.my_solist.my_node_allocator)"
  },
  {
    "label": "internal_clear()",
    "kind": "Method",
    "detail": "Function (segments)",
    "insertText": "internal_clear()"
  },
  {
    "label": "range_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "range_type( *this )"
  },
  {
    "label": "const_range_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_range_type( *this )"
  },
  {
    "label": "internal_erase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_erase(where)"
  },
  {
    "label": "node_type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "node_type()"
  },
  {
    "label": "internal_clear()",
    "kind": "Method",
    "detail": "Function (buckets)",
    "insertText": "internal_clear()"
  },
  {
    "label": "internal_find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_find(key)"
  },
  {
    "label": "internal_equal_range()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_equal_range(key)"
  },
  {
    "label": "segment_size()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "segment_size(pointers_per_table-1)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "adjust_table_size()",
    "kind": "Method",
    "detail": "Function (needed)",
    "insertText": "adjust_table_size(new_count, my_number_of_buckets)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "pairii_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "pairii_t(first, last)"
  }
]