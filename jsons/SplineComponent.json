[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "USplineMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMetadata"
  },
  {
    "label": "FSplineCurves",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineCurves"
  },
  {
    "label": "FSplinePositionLinearApproximation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplinePositionLinearApproximation"
  },
  {
    "label": "FSplinePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplinePoint"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "FSplineInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineInstanceData"
  },
  {
    "label": "FSplineComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineComponentVisualizer"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / PrimitiveComponent . h \" # include \" Math / InterpCurve . h \" # include \" SplineComponent . generated . h \" class FPrimitiveSceneProxy ; class FPrimitiveDrawInterface ; class FSceneView ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Linear,Curve,Constant,CurveClamped,CurveCustomTangent } ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Local,World } ; })",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API virtual void InsertPoint(int32 Index, float t, bool bClosedLoop) PURE_VIRTUAL(USplineMetadata::InsertPoint,)"
  },
  {
    "label": "UpdatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePoint(int32 Index, float t, bool bClosedLoop) PURE_VIRTUAL(USplineMetadata::UpdatePoint,)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(float InputKey) PURE_VIRTUAL(USplineMetadata::AddPoint,)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoint(int32 Index) PURE_VIRTUAL(USplineMetadata::RemovePoint,)"
  },
  {
    "label": "DuplicatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicatePoint(int32 Index) PURE_VIRTUAL(USplineMetadata::DuplicatePoint,)"
  },
  {
    "label": "CopyPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPoint(const USplineMetadata* FromSplineMetadata, int32 FromIndex, int32 ToIndex) PURE_VIRTUAL(USplineMetadata::CopyPoint,)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 NumPoints) PURE_VIRTUAL(USplineMetadata::Reset,)"
  },
  {
    "label": "Fixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fixup(int32 NumPoints, USplineComponent* SplineComp) PURE_VIRTUAL(USplineMetadata::Fixup,)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSplineCurves& Other)"
  },
  {
    "label": "UpdateSpline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSpline(bool bClosedLoop = false, bool bStationaryEndpoints = false, int32 ReparamStepsPerSegment = 10, bool bLoopPositionOverride = false, float LoopPosition = 0.0f, const FVector& Scale3D = FVector(1.0f))"
  },
  {
    "label": "GetSegmentLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSegmentLength(const int32 Index, const float Param, bool bClosedLoop = false, const FVector& Scale3D = FVector(1.0f))"
  },
  {
    "label": "GetSplineLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSplineLength()"
  },
  {
    "label": "FSplinePositionLinearApproximation()",
    "kind": "Method",
    "detail": "Function (} ; struct FSplinePositionLinearApproximation {)",
    "insertText": "FSplinePositionLinearApproximation(const FVector& InPosition, float InSplineParam) : Position(InPosition) , SplineParam(InSplineParam)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Build(const FSplineCurves& InCurves, TArray<FSplinePositionLinearApproximation>& OutPoints, float InDensity = 0.5f)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (FVector Position ; float SplineParam ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = SplinePoint)"
  },
  {
    "label": "FSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSplinePoint() : InputKey(0.0f), Position(0.0f), ArriveTangent(0.0f), LeaveTangent(0.0f), Rotation(0.0f), Scale(1.0f), Type(ESplinePointType::Curve)"
  },
  {
    "label": "FSplinePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplinePoint(float InInputKey, const FVector& InPosition) : InputKey(InInputKey), Position(InPosition), ArriveTangent(0.0f), LeaveTangent(0.0f), Rotation(0.0f), Scale(1.0f), Type(ESplinePointType::Curve)"
  },
  {
    "label": "FSplinePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplinePoint(float InInputKey, const FVector& InPosition, ESplinePointType::Type InType, const FRotator& InRotation = FRotator(0.0f), const FVector& InScale = FVector(1.0f)) : InputKey(InInputKey), Position(InPosition), ArriveTangent(0.0f), LeaveTangent(0.0f), Rotation(InRotation), Scale(InScale), Type(InType)"
  },
  {
    "label": "FSplinePoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplinePoint(float InInputKey, const FVector& InPosition, const FVector& InArriveTangent, const FVector& InLeaveTangent, const FRotator& InRotation = FRotator(0.0f), const FVector& InScale = FVector(1.0f), ESplinePointType::Type InType = ESplinePointType::CurveCustomTangent) : InputKey(InInputKey), Position(InPosition), ArriveTangent(InArriveTangent), LeaveTangent(InLeaveTangent), Rotation(InRotation), Scale(InScale), Type(InType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(ClassGroup=Utility, ShowCategories = (Mobility), HideCategories = (Physics, Collision, Lighting, Rendering, Mobile), meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Replicated, Category=Points)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(DeselectedInEditorDelegate, TObjectPtr<USplineComponent>)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetIgnoreBoundsForEditorFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreBoundsForEditorFocus()"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (# endif TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "PushSelectionToProxy()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "PushSelectionToProxy()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI, const FSceneView* View, const FInterpCurveVector& SplineInfo, const FMatrix& LocalToWorld, const FLinearColor& LineColor, uint8 DepthPriorityGroup)"
  },
  {
    "label": "GetSplinePointsPosition()",
    "kind": "Method",
    "detail": "Function (# endif FInterpCurveVector&)",
    "insertText": "GetSplinePointsPosition()"
  },
  {
    "label": "AllowsSpinePointLocationEditing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsSpinePointLocationEditing()"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "GetQuaternionAtSplineInputKey()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetQuaternionAtSplineInputKey(float InKey, ESplineCoordinateSpace::Type CoordinateSpace)"
  },
  {
    "label": "GetQuaternionAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetQuaternionAtSplinePoint(int32 PointIndex, ESplineCoordinateSpace::Type CoordinateSpace)"
  },
  {
    "label": "GetQuaternionAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetQuaternionAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace::Type CoordinateSpace)"
  },
  {
    "label": "GetQuaternionAtTime()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetQuaternionAtTime(float Time, ESplineCoordinateSpace::Type CoordinateSpace, bool bUseConstantVelocity = false)"
  },
  {
    "label": "FindQuaternionClosestToWorldLocation()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "FindQuaternionClosestToWorldLocation(const FVector& WorldLocation, ESplineCoordinateSpace::Type CoordinateSpace)"
  },
  {
    "label": "SetDefaultSpline()",
    "kind": "Method",
    "detail": "Function (private : const FInterpCurvePointVector DummyPointPosition ; const FInterpCurvePointQuat DummyPointRotation ; const FInterpCurvePointVector DummyPointScale ; private : void)",
    "insertText": "SetDefaultSpline()"
  },
  {
    "label": "GetSegmentLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSegmentLength(const int32 Index, const float Param = 1.0f)"
  },
  {
    "label": "GetSegmentParamFromLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSegmentParamFromLength(const int32 Index, const float Length, const float SegmentLength)"
  },
  {
    "label": "DivideSplineIntoPolylineRecursiveWithDistancesHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DivideSplineIntoPolylineRecursiveWithDistancesHelper(float StartDistanceAlongSpline, float EndDistanceAlongSpline, ESplineCoordinateSpace::Type CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline)"
  },
  {
    "label": "DivideSplineIntoPolylineRecursiveHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DivideSplineIntoPolylineRecursiveHelper(float StartDistanceAlongSpline, float EndDistanceAlongSpline, ESplineCoordinateSpace::Type CoordinateSpace, const float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints)"
  },
  {
    "label": "GetPositionPointSafe()",
    "kind": "Method",
    "detail": "Function (const FInterpCurvePointVector&)",
    "insertText": "GetPositionPointSafe(int32 PointIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const TArray<FInterpCurvePointVector>& Points = SplineCurves . Position . Points ; const int32 NumPoints = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "ClampedIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ClampedIndex(bClosedLoop && PointIndex >= NumPoints) ? 0 : FMath::Clamp(PointIndex, 0, NumPoints - 1)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FSplineInstanceData() : bSplineHasBeenEdited(false)"
  },
  {
    "label": "FSplineInstanceData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplineInstanceData(const USplineComponent* SourceComponent) : FSceneComponentInstanceData(SourceComponent) , bSplineHasBeenEdited(false)"
  },
  {
    "label": "FSplineInstanceData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSplineInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyToComponent(UActorComponent* Component, const ECacheApplyPhase CacheApplyPhase)"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(Component, CacheApplyPhase)"
  },
  {
    "label": "USplineComponent()",
    "kind": "Method",
    "detail": "Function (CastChecked<)",
    "insertText": "USplineComponent(Component)->ApplyComponentInstanceData(this, (CacheApplyPhase == ECacheApplyPhase::PostUserConstructionScript))"
  },
  {
    "label": "ConvertSplinePointTypeToInterpCurveMode()",
    "kind": "Method",
    "detail": "Function (} ; EInterpCurveMode)",
    "insertText": "ConvertSplinePointTypeToInterpCurveMode(ESplinePointType::Type SplinePointType)"
  },
  {
    "label": "ConvertInterpCurveModeToSplinePointType()",
    "kind": "Method",
    "detail": "Function (ESplinePointType::Type)",
    "insertText": "ConvertInterpCurveModeToSplinePointType(EInterpCurveMode InterpCurveMode)"
  },
  {
    "label": "AddSplineWorldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplineWorldPoint(const FVector& Position)"
  },
  {
    "label": "AddSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplinePoint(Position, ESplineCoordinateSpace::World)"
  },
  {
    "label": "AddSplineLocalPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSplineLocalPoint(const FVector& Position)"
  },
  {
    "label": "AddSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplinePoint(Position, ESplineCoordinateSpace::Local)"
  },
  {
    "label": "SetSplineWorldPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSplineWorldPoints(const TArray<FVector>& Points)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(Points, ESplineCoordinateSpace::World)"
  },
  {
    "label": "SetSplineLocalPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSplineLocalPoints(const TArray<FVector>& Points)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(Points, ESplineCoordinateSpace::Local)"
  },
  {
    "label": "SetWorldLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldLocationAtSplinePoint(int32 PointIndex, const FVector& InLocation)"
  },
  {
    "label": "SetLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocationAtSplinePoint(PointIndex, InLocation, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetWorldLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldLocationAtSplinePoint(int32 PointIndex)"
  },
  {
    "label": "GetLocalLocationAndTangentAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLocalLocationAndTangentAtSplinePoint(int32 PointIndex, FVector& LocalLocation, FVector& LocalTangent)"
  },
  {
    "label": "GetLocationAndTangentAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocationAndTangentAtSplinePoint(PointIndex, LocalLocation, LocalTangent, ESplineCoordinateSpace::Local)"
  },
  {
    "label": "GetWorldLocationAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldLocationAtDistanceAlongSpline(float Distance)"
  },
  {
    "label": "GetWorldDirectionAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldDirectionAtDistanceAlongSpline(float Distance)"
  },
  {
    "label": "GetWorldTangentAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldTangentAtDistanceAlongSpline(float Distance)"
  },
  {
    "label": "GetWorldRotationAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetWorldRotationAtDistanceAlongSpline(float Distance)"
  },
  {
    "label": "GetWorldLocationAtTime()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)"
  },
  {
    "label": "GetWorldDirectionAtTime()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)"
  },
  {
    "label": "GetWorldRotationAtTime()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)"
  }
]