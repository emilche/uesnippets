[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "USplineMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMetadata"
  },
  {
    "label": "FSplineCurves",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineCurves"
  },
  {
    "label": "FSplinePositionLinearApproximation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplinePositionLinearApproximation"
  },
  {
    "label": "FSplinePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplinePoint"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "FSplineInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineInstanceData"
  },
  {
    "label": "FSplineComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineComponentVisualizer"
  },
  {
    "label": "FSplineInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineInstanceData"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(const FSplineCurves& InCurves, TArray<FSplinePositionLinearApproximation>& OutPoints, float InDensity = 0.5f)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI, const FSceneView* View, const FInterpCurveVector& SplineInfo, const FMatrix& LocalToWorld, const FLinearColor& LineColor, uint8 DepthPriorityGroup)"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FSplineInstanceData* ComponentInstanceData, const bool bPostUCS)"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "UpdateSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpline()"
  },
  {
    "label": "SetOverrideConstructionScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideConstructionScript(bool InOverride)"
  },
  {
    "label": "SetUnselectedSplineSegmentColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnselectedSplineSegmentColor(const FLinearColor& SegmentColor)"
  },
  {
    "label": "SetSelectedSplineSegmentColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSplineSegmentColor(const FLinearColor& SegmentColor)"
  },
  {
    "label": "SetTangentColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentColor(const FLinearColor& TangentColor)"
  },
  {
    "label": "SetDrawDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawDebug(bool bShow)"
  },
  {
    "label": "SetClosedLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline = true)"
  },
  {
    "label": "SetClosedLoopAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline = true)"
  },
  {
    "label": "ClearSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSplinePoints(bool bUpdateSpline = true)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(const FSplinePoint& Point, bool bUpdateSpline = true)"
  },
  {
    "label": "AddPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoints(const TArray<FSplinePoint>& Points, bool bUpdateSpline = true)"
  },
  {
    "label": "AddSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplinePoint(const FVector& Position, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "AddSplinePointAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplinePointAtIndex(const FVector& Position, int32 Index, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "RemoveSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSplinePoint(int32 Index, bool bUpdateSpline = true)"
  },
  {
    "label": "AddSplineWorldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplineWorldPoint(const FVector& Position)"
  },
  {
    "label": "AddSplineLocalPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplineLocalPoint(const FVector& Position)"
  },
  {
    "label": "SetSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePoints(const TArray<FVector>& Points, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetSplineWorldPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplineWorldPoints(const TArray<FVector>& Points)"
  },
  {
    "label": "SetSplineLocalPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplineLocalPoints(const TArray<FVector>& Points)"
  },
  {
    "label": "SetLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocationAtSplinePoint(int32 PointIndex, const FVector& InLocation, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetWorldLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldLocationAtSplinePoint(int32 PointIndex, const FVector& InLocation)"
  },
  {
    "label": "SetTangentAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentAtSplinePoint(int32 PointIndex, const FVector& InTangent, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetTangentsAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentsAtSplinePoint(int32 PointIndex, const FVector& InArriveTangent, const FVector& InLeaveTangent, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetUpVectorAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpVectorAtSplinePoint(int32 PointIndex, const FVector& InUpVector, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetRotationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationAtSplinePoint(int32 PointIndex, const FRotator& InRotation, ESplineCoordinateSpace::Type CoordinateSpace, bool bUpdateSpline = true)"
  },
  {
    "label": "SetScaleAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScaleAtSplinePoint(int32 PointIndex, const FVector& InScaleVector, bool bUpdateSpline = true)"
  },
  {
    "label": "SetSplinePointType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinePointType(int32 PointIndex, ESplinePointType::Type Type, bool bUpdateSpline = true)"
  },
  {
    "label": "SetDefaultUpVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultUpVector(const FVector& UpVector, ESplineCoordinateSpace::Type CoordinateSpace)"
  },
  {
    "label": "SetDefaultSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSpline()"
  },
  {
    "label": "ConvertSplinePointTypeToInterpCurveMode()",
    "kind": "Method",
    "detail": "Function (EInterpCurveMode)",
    "insertText": "ConvertSplinePointTypeToInterpCurveMode(ESplinePointType::Type SplinePointType)"
  },
  {
    "label": "ConvertInterpCurveModeToSplinePointType()",
    "kind": "Method",
    "detail": "Function (ESplinePointType::Type)",
    "insertText": "ConvertInterpCurveModeToSplinePointType(EInterpCurveMode InterpCurveMode)"
  },
  {
    "label": "GetLocationAtSplinePoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLocationAtSplinePoint(PointIndex, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetLocationAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLocationAtDistanceAlongSpline(Distance, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetDirectionAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetDirectionAtDistanceAlongSpline(Distance, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetTangentAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTangentAtDistanceAlongSpline(Distance, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetRotationAtDistanceAlongSpline()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRotationAtDistanceAlongSpline(Distance, ESplineCoordinateSpace::World)"
  },
  {
    "label": "GetLocationAtTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLocationAtTime(Time, ESplineCoordinateSpace::World, bUseConstantVelocity)"
  },
  {
    "label": "GetDirectionAtTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetDirectionAtTime(Time, ESplineCoordinateSpace::World, bUseConstantVelocity)"
  },
  {
    "label": "GetRotationAtTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRotationAtTime(Time, ESplineCoordinateSpace::World, bUseConstantVelocity)"
  }
]