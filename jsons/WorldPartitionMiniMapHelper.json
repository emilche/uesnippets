[
  {
    "label": "AWorldPartitionMiniMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldPartitionMiniMap"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FWorldPartitionMiniMapHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionMiniMapHelper"
  },
  {
    "label": "GetWorldPartitionMiniMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Math / Box . h \" # include \" Math / Matrix . h \" # include \" Engine / EngineTypes . h \" class AWorldPartitionMiniMap ; class UWorld ; class UTexture2D ; class AActor ; class FWorldPartitionMiniMapHelper { public : AWorldPartitionMiniMap*)",
    "insertText": "GetWorldPartitionMiniMap(UWorld* World, bool bCreateNewMiniMap=false)"
  },
  {
    "label": "CaptureBoundsMiniMapToTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureBoundsMiniMapToTexture(UWorld* InWorld, UObject* InOuterForTexture, uint32 InMiniMapSize, UTexture2D*& InOutMiniMapTexture, const FString& InTextureName, const FBox& InBounds)"
  },
  {
    "label": "CaptureBoundsMiniMapToTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureBoundsMiniMapToTexture(UWorld* InWorld, UObject* InOuterForTexture, uint32 InMiniMapSizeX, uint32 InMiniMapSizeY, UTexture2D*& InOutMiniMapTexture, const FString& InTextureName, const FBox& InBounds, ESceneCaptureSource InCaptureSource, uint32 InNumWarmupFrames)"
  },
  {
    "label": "CalTopViewOfWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CalTopViewOfWorld(FMatrix& OutProjectionMatrix, const FBox& WorldBox, uint32 ViewportWidth, uint32 ViewportHeight)"
  }
]