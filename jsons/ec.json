[
  {
    "label": "ec_method_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_method_st"
  },
  {
    "label": "ec_group_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_group_st"
  },
  {
    "label": "ec_point_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_point_st"
  },
  {
    "label": "ecpk_parameters_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ecpk_parameters_st"
  },
  {
    "label": "ec_parameters_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_parameters_st"
  },
  {
    "label": "ECDSA_SIG_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECDSA_SIG_st"
  },
  {
    "label": "EC_GROUP_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_free(EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_clear_free(EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src)"
  },
  {
    "label": "EC_METHOD_get_field_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_METHOD_get_field_type(const EC_METHOD *meth)"
  },
  {
    "label": "EC_GROUP_set_generator()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,\n                           const BIGNUM *order, const BIGNUM *cofactor)"
  },
  {
    "label": "EC_GROUP_get_order()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_order_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_order_bits(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_get_cofactor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,\n                          BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_set_curve_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_curve_name(EC_GROUP *group, int nid)"
  },
  {
    "label": "EC_GROUP_get_curve_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_curve_name(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_set_asn1_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag)"
  },
  {
    "label": "EC_GROUP_get_asn1_flag()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_asn1_flag(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_set_point_conversion_form()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_point_conversion_form(EC_GROUP *group,\n                                        point_conversion_form_t form)"
  },
  {
    "label": "EC_GROUP_get_point_conversion_form()",
    "kind": "Method",
    "detail": "Function (point_conversion_form_t)",
    "insertText": "EC_GROUP_get_point_conversion_form(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_get_seed_len()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_GROUP_get_seed_len(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_set_seed()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len)"
  },
  {
    "label": "EC_GROUP_set_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,\n                       const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_get_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,\n                       BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_get_degree()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_degree(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_check_discriminant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_get_builtin_curves()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)"
  },
  {
    "label": "EC_curve_nist2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_curve_nist2nid(const char *name)"
  },
  {
    "label": "EC_POINT_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_POINT_free(EC_POINT *point)"
  },
  {
    "label": "EC_POINT_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_POINT_clear_free(EC_POINT *point)"
  },
  {
    "label": "EC_POINT_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_copy(EC_POINT *dst, const EC_POINT *src)"
  },
  {
    "label": "EC_POINT_set_to_infinity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)"
  },
  {
    "label": "EC_POINT_set_Jprojective_coordinates_GFp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,\n                                             EC_POINT *p, const BIGNUM *x,\n                                             const BIGNUM *y, const BIGNUM *z,\n                                             BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_get_Jprojective_coordinates_GFp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,\n                                             const EC_POINT *p, BIGNUM *x,\n                                             BIGNUM *y, BIGNUM *z,\n                                             BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_set_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p,\n                                    const BIGNUM *x, const BIGNUM *y,\n                                    BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_get_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p,\n                                    BIGNUM *x, BIGNUM *y, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_set_compressed_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p,\n                                        const BIGNUM *x, int y_bit,\n                                        BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_point2oct()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,\n                          point_conversion_form_t form,\n                          unsigned char *buf, size_t len, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_oct2point()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,\n                       const unsigned char *buf, size_t len, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_point2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,\n                          point_conversion_form_t form,\n                          unsigned char **pbuf, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,\n                 const EC_POINT *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_dbl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,\n                 BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_invert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_is_at_infinity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p)"
  },
  {
    "label": "EC_POINT_is_on_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,\n                         BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,\n                 BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_make_affine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINTs_make_affine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINTs_make_affine(const EC_GROUP *group, size_t num,\n                          EC_POINT *points[], BN_CTX *ctx)"
  },
  {
    "label": "EC_POINTs_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,\n                  size_t num, const EC_POINT *p[], const BIGNUM *m[],\n                  BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,\n                 const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_have_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_have_precompute_mult(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_get_basis_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_basis_type(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_get_trinomial_basis()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k)"
  },
  {
    "label": "EC_GROUP_get_pentanomial_basis()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,\n                                   unsigned int *k2, unsigned int *k3)"
  },
  {
    "label": "i2d_ECPKParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPKParameters(const EC_GROUP *, unsigned char **out)"
  },
  {
    "label": "ECPKParameters_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)"
  },
  {
    "label": "ECPKParameters_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)"
  },
  {
    "label": "EC_KEY_get_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_get_flags(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_flags(EC_KEY *key, int flags)"
  },
  {
    "label": "EC_KEY_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_clear_flags(EC_KEY *key, int flags)"
  },
  {
    "label": "EC_KEY_decoded_from_explicit_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_decoded_from_explicit_params(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_free(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_up_ref(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_group()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)"
  },
  {
    "label": "EC_KEY_set_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv)"
  },
  {
    "label": "EC_KEY_set_public_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub)"
  },
  {
    "label": "EC_KEY_get_enc_flags()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "EC_KEY_get_enc_flags(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_enc_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags)"
  },
  {
    "label": "EC_KEY_get_conv_form()",
    "kind": "Method",
    "detail": "Function (point_conversion_form_t)",
    "insertText": "EC_KEY_get_conv_form(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_conv_form()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform)"
  },
  {
    "label": "EC_KEY_set_ex_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg)"
  },
  {
    "label": "EC_KEY_set_asn1_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag)"
  },
  {
    "label": "EC_KEY_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_generate_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_generate_key(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_check_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_check_key(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_can_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_can_sign(const EC_KEY *eckey)"
  },
  {
    "label": "EC_KEY_set_public_key_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,\n                                             BIGNUM *y)"
  },
  {
    "label": "EC_KEY_key2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,\n                      unsigned char **pbuf, BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_oct2key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,\n                   BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_oct2priv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_oct2priv(EC_KEY *key, const unsigned char *buf, size_t len)"
  },
  {
    "label": "EC_KEY_priv2oct()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_priv2oct(const EC_KEY *key, unsigned char *buf, size_t len)"
  },
  {
    "label": "EC_KEY_priv2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf)"
  },
  {
    "label": "i2d_ECPrivateKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPrivateKey(EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "i2d_ECParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECParameters(EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "i2o_ECPublicKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2o_ECPublicKey(const EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "ECParameters_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECParameters_print(BIO *bp, const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_print(BIO *bp, const EC_KEY *key, int off)"
  },
  {
    "label": "ECParameters_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECParameters_print_fp(FILE *fp, const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_print_fp(FILE *fp, const EC_KEY *key, int off)"
  },
  {
    "label": "EC_KEY_set_default_method()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_default_method(const EC_KEY_METHOD *meth)"
  },
  {
    "label": "EC_KEY_set_method()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth)"
  },
  {
    "label": "ECDH_KDF_X9_62()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDH_KDF_X9_62(unsigned char *out, size_t outlen,\n                   const unsigned char *Z, size_t Zlen,\n                   const unsigned char *sinfo, size_t sinfolen,\n                   const EVP_MD *md)"
  },
  {
    "label": "ECDSA_SIG_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ECDSA_SIG_free(ECDSA_SIG *sig)"
  },
  {
    "label": "i2d_ECDSA_SIG()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp)"
  },
  {
    "label": "ECDSA_SIG_get0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)"
  },
  {
    "label": "ECDSA_SIG_set0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)"
  },
  {
    "label": "ECDSA_do_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_do_verify(const unsigned char *dgst, int dgst_len,\n                    const ECDSA_SIG *sig, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_sign_setup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp)"
  },
  {
    "label": "ECDSA_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,\n               unsigned char *sig, unsigned int *siglen, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_sign_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,\n                  unsigned char *sig, unsigned int *siglen,\n                  const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,\n                 const unsigned char *sig, int siglen, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_size(const EC_KEY *eckey)"
  },
  {
    "label": "EC_KEY_METHOD_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_free(EC_KEY_METHOD *meth)"
  }
]