[
  {
    "label": "ec_method_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_method_st"
  },
  {
    "label": "ec_group_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_group_st"
  },
  {
    "label": "ec_point_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_point_st"
  },
  {
    "label": "ecpk_parameters_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ecpk_parameters_st"
  },
  {
    "label": "ec_parameters_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ec_parameters_st"
  },
  {
    "label": "ECDSA_SIG_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECDSA_SIG_st"
  },
  {
    "label": "EC_GFp_simple_method()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_EC_H # define HEADER_EC_H # include<openssl / opensslconf . h> # ifndef OPENSSL_NO_EC # include<openssl / asn1 . h> # include<openssl / symhacks . h> # if OPENSSL_API_COMPAT<0 x10100000L # include<openssl / bn . h> # endif # include<openssl / ecerr . h> # ifdef __cplusplus \" C \" { # endif # ifndef OPENSSL_ECC_MAX_FIELD_BITS # define OPENSSL_ECC_MAX_FIELD_BITS 6 6 1 # endif typedef enum { POINT_CONVERSION_COMPRESSED = 2,POINT_CONVERSION_UNCOMPRESSED = 4,POINT_CONVERSION_HYBRID = 6 } point_conversion_form_t ; typedef struct ec_method_st EC_METHOD ; typedef struct ec_group_st EC_GROUP ; typedef struct ec_point_st EC_POINT ; typedef struct ecpk_parameters_st ECPKPARAMETERS ; typedef struct ec_parameters_st ECPARAMETERS ; const EC_METHOD*)",
    "insertText": "EC_GFp_simple_method(void)"
  },
  {
    "label": "EC_GFp_mont_method()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_GFp_mont_method(void)"
  },
  {
    "label": "EC_GFp_nist_method()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_GFp_nist_method(void)"
  },
  {
    "label": "EC_GFp_nistp224_method()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_EC_NISTP_64_GCC_128 const EC_METHOD*)",
    "insertText": "EC_GFp_nistp224_method(void)"
  },
  {
    "label": "EC_GFp_nistp256_method()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_GFp_nistp256_method(void)"
  },
  {
    "label": "EC_GFp_nistp521_method()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_GFp_nistp521_method(void)"
  },
  {
    "label": "EC_GF2m_simple_method()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef OPENSSL_NO_EC2M const EC_METHOD*)",
    "insertText": "EC_GF2m_simple_method(void)"
  },
  {
    "label": "EC_GROUP_new()",
    "kind": "Method",
    "detail": "Function (# endif EC_GROUP*)",
    "insertText": "EC_GROUP_new(const EC_METHOD *meth)"
  },
  {
    "label": "EC_GROUP_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_free(EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_clear_free(EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src)"
  },
  {
    "label": "EC_GROUP_dup()",
    "kind": "Method",
    "detail": "Function (EC_GROUP*)",
    "insertText": "EC_GROUP_dup(const EC_GROUP *src)"
  },
  {
    "label": "EC_GROUP_method_of()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_GROUP_method_of(const EC_GROUP *group)"
  },
  {
    "label": "EC_METHOD_get_field_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_METHOD_get_field_type(const EC_METHOD *meth)"
  },
  {
    "label": "EC_GROUP_set_generator()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor)"
  },
  {
    "label": "EC_GROUP_get0_generator()",
    "kind": "Method",
    "detail": "Function (const EC_POINT*)",
    "insertText": "EC_GROUP_get0_generator(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_get_mont_data()",
    "kind": "Method",
    "detail": "Function (BN_MONT_CTX*)",
    "insertText": "EC_GROUP_get_mont_data(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_get_order()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_get0_order()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "EC_GROUP_get0_order(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_order_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_order_bits(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_get_cofactor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_get0_cofactor()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "EC_GROUP_get0_cofactor(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_set_curve_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_curve_name(EC_GROUP *group, int nid)"
  },
  {
    "label": "EC_GROUP_get_curve_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_curve_name(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_set_asn1_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag)"
  },
  {
    "label": "EC_GROUP_get_asn1_flag()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_asn1_flag(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_set_point_conversion_form()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_GROUP_set_point_conversion_form(EC_GROUP *group, point_conversion_form_t form)"
  },
  {
    "label": "EC_GROUP_get_point_conversion_form()",
    "kind": "Method",
    "detail": "Function (point_conversion_form_t)",
    "insertText": "EC_GROUP_get_point_conversion_form(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_get0_seed()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "EC_GROUP_get0_seed(const EC_GROUP *x)"
  },
  {
    "label": "EC_GROUP_get_seed_len()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_GROUP_get_seed_len(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_set_seed()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len)"
  },
  {
    "label": "EC_GROUP_set_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_get_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "DEPRECATEDIN_1_2_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)) DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)) # ifndef OPENSSL_NO_EC2M DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)) DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)) # endif int EC_GROUP_get_degree(const EC_GROUP *group)"
  },
  {
    "label": "EC_GROUP_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_check_discriminant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_new_curve_GFp()",
    "kind": "Method",
    "detail": "Function (EC_GROUP*)",
    "insertText": "EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_new_curve_GF2m()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_EC2M EC_GROUP*)",
    "insertText": "EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_new_by_curve_name()",
    "kind": "Method",
    "detail": "Function (# endif EC_GROUP*)",
    "insertText": "EC_GROUP_new_by_curve_name(int nid)"
  },
  {
    "label": "EC_GROUP_new_from_ecparameters()",
    "kind": "Method",
    "detail": "Function (EC_GROUP*)",
    "insertText": "EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params)"
  },
  {
    "label": "EC_GROUP_get_ecparameters()",
    "kind": "Method",
    "detail": "Function (ECPARAMETERS*)",
    "insertText": "EC_GROUP_get_ecparameters(const EC_GROUP *group, ECPARAMETERS *params)"
  },
  {
    "label": "EC_GROUP_new_from_ecpkparameters()",
    "kind": "Method",
    "detail": "Function (EC_GROUP*)",
    "insertText": "EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)"
  },
  {
    "label": "EC_GROUP_get_ecpkparameters()",
    "kind": "Method",
    "detail": "Function (ECPKPARAMETERS*)",
    "insertText": "EC_GROUP_get_ecpkparameters(const EC_GROUP *group, ECPKPARAMETERS *params)"
  },
  {
    "label": "EC_get_builtin_curves()",
    "kind": "Method",
    "detail": "Function (typedef struct { int nid ; const char* comment ; } EC_builtin_curve ; size_t)",
    "insertText": "EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)"
  },
  {
    "label": "EC_curve_nid2nist()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "EC_curve_nid2nist(int nid)"
  },
  {
    "label": "EC_curve_nist2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_curve_nist2nid(const char *name)"
  },
  {
    "label": "EC_POINT_new()",
    "kind": "Method",
    "detail": "Function (EC_POINT*)",
    "insertText": "EC_POINT_new(const EC_GROUP *group)"
  },
  {
    "label": "EC_POINT_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_POINT_free(EC_POINT *point)"
  },
  {
    "label": "EC_POINT_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_POINT_clear_free(EC_POINT *point)"
  },
  {
    "label": "EC_POINT_copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_copy(EC_POINT *dst, const EC_POINT *src)"
  },
  {
    "label": "EC_POINT_dup()",
    "kind": "Method",
    "detail": "Function (EC_POINT*)",
    "insertText": "EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group)"
  },
  {
    "label": "EC_POINT_method_of()",
    "kind": "Method",
    "detail": "Function (const EC_METHOD*)",
    "insertText": "EC_POINT_method_of(const EC_POINT *point)"
  },
  {
    "label": "EC_POINT_set_to_infinity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)"
  },
  {
    "label": "EC_POINT_set_Jprojective_coordinates_GFp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_get_Jprojective_coordinates_GFp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_set_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_get_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)"
  },
  {
    "label": "DEPRECATEDIN_1_2_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx)) DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)) int EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx)"
  },
  {
    "label": "DEPRECATEDIN_1_2_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx)) # ifndef OPENSSL_NO_EC2M DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx)) DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)) DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx)) # endif size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p, point_conversion_form_t form, unsigned char *buf, size_t len, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_oct2point()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p, const unsigned char *buf, size_t len, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_point2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point, point_conversion_form_t form, unsigned char **pbuf, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_point2bn()",
    "kind": "Method",
    "detail": "Function (BIGNUM*)",
    "insertText": "EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BIGNUM *, BN_CTX *)"
  },
  {
    "label": "EC_POINT_bn2point()",
    "kind": "Method",
    "detail": "Function (EC_POINT*)",
    "insertText": "EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *)"
  },
  {
    "label": "EC_POINT_point2hex()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *)"
  },
  {
    "label": "EC_POINT_hex2point()",
    "kind": "Method",
    "detail": "Function (EC_POINT*)",
    "insertText": "EC_POINT_hex2point(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *)"
  },
  {
    "label": "EC_POINT_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_dbl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_invert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_is_at_infinity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p)"
  },
  {
    "label": "EC_POINT_is_on_curve()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_make_affine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)"
  },
  {
    "label": "EC_POINTs_make_affine()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINTs_make_affine(const EC_GROUP *group, size_t num, EC_POINT *points[], BN_CTX *ctx)"
  },
  {
    "label": "EC_POINTs_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, size_t num, const EC_POINT *p[], const BIGNUM *m[], BN_CTX *ctx)"
  },
  {
    "label": "EC_POINT_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n, const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)"
  },
  {
    "label": "EC_GROUP_have_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_have_precompute_mult(const EC_GROUP *group)"
  },
  {
    "label": "DECLARE_ASN1_ITEM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_ITEM(ECPKPARAMETERS) DECLARE_ASN1_ALLOC_FUNCTIONS(ECPKPARAMETERS) DECLARE_ASN1_ITEM(ECPARAMETERS) DECLARE_ASN1_ALLOC_FUNCTIONS(ECPARAMETERS) int EC_GROUP_get_basis_type(const EC_GROUP *)"
  },
  {
    "label": "EC_GROUP_get_trinomial_basis()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_EC2M int)",
    "insertText": "EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k)"
  },
  {
    "label": "EC_GROUP_get_pentanomial_basis()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1, unsigned int *k2, unsigned int *k3)"
  },
  {
    "label": "d2i_ECPKParameters()",
    "kind": "Method",
    "detail": "Function (# endif # define OPENSSL_EC_EXPLICIT_CURVE 0 x000 # define OPENSSL_EC_NAMED_CURVE 0 x001 EC_GROUP*)",
    "insertText": "d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len)"
  },
  {
    "label": "i2d_ECPKParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPKParameters(const EC_GROUP *, unsigned char **out)"
  },
  {
    "label": "d2i_ECPKParameters_bio()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "d2i_ECPKParameters_bio(bp,x) \\ ASN1_d2i_bio_of(EC_GROUP, NULL, d2i_ECPKParameters, bp, x) # define i2d_ECPKParameters_bio(bp,x) \\ ASN1_i2d_bio_of_const(EC_GROUP, i2d_ECPKParameters, bp, x) # define d2i_ECPKParameters_fp(fp,x) \\ (EC_GROUP *)ASN1_d2i_fp(NULL, (d2i_of_void *)d2i_ECPKParameters, (fp), \\ (void **)(x)) # define i2d_ECPKParameters_fp(fp,x) \\ ASN1_i2d_fp((i2d_of_void *)i2d_ECPKParameters, (fp), (void *)(x)) int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)"
  },
  {
    "label": "ECPKParameters_print_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)"
  },
  {
    "label": "EC_KEY_new()",
    "kind": "Method",
    "detail": "Function (# endif # define EC_PKEY_NO_PARAMETERS 0 x001 # define EC_PKEY_NO_PUBKEY 0 x002 # define EC_FLAG_NON_FIPS_ALLOW 0 x1 # define EC_FLAG_FIPS_CHECKED 0 x2 # define EC_FLAG_COFACTOR_ECDH 0 x1000 EC_KEY*)",
    "insertText": "EC_KEY_new(void)"
  },
  {
    "label": "EC_KEY_get_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_get_flags(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_flags(EC_KEY *key, int flags)"
  },
  {
    "label": "EC_KEY_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_clear_flags(EC_KEY *key, int flags)"
  },
  {
    "label": "EC_KEY_decoded_from_explicit_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_decoded_from_explicit_params(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_new_by_curve_name()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "EC_KEY_new_by_curve_name(int nid)"
  },
  {
    "label": "EC_KEY_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_free(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_copy()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "EC_KEY_copy(EC_KEY *dst, const EC_KEY *src)"
  },
  {
    "label": "EC_KEY_dup()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "EC_KEY_dup(const EC_KEY *src)"
  },
  {
    "label": "EC_KEY_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_up_ref(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_get0_engine()",
    "kind": "Method",
    "detail": "Function (ENGINE*)",
    "insertText": "EC_KEY_get0_engine(const EC_KEY *eckey)"
  },
  {
    "label": "EC_KEY_get0_group()",
    "kind": "Method",
    "detail": "Function (const EC_GROUP*)",
    "insertText": "EC_KEY_get0_group(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_group()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)"
  },
  {
    "label": "EC_KEY_get0_private_key()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "EC_KEY_get0_private_key(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_private_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv)"
  },
  {
    "label": "EC_KEY_get0_public_key()",
    "kind": "Method",
    "detail": "Function (const EC_POINT*)",
    "insertText": "EC_KEY_get0_public_key(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_public_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub)"
  },
  {
    "label": "EC_KEY_get_enc_flags()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "EC_KEY_get_enc_flags(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_enc_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags)"
  },
  {
    "label": "EC_KEY_get_conv_form()",
    "kind": "Method",
    "detail": "Function (point_conversion_form_t)",
    "insertText": "EC_KEY_get_conv_form(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_conv_form()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform)"
  },
  {
    "label": "EC_KEY_get_ex_new_index()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EC_KEY_get_ex_new_index(l, p, newf, dupf, freef) \\ CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_EC_KEY, l, p, newf, dupf, freef) int EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg)"
  },
  {
    "label": "EC_KEY_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "EC_KEY_get_ex_data(const EC_KEY *key, int idx)"
  },
  {
    "label": "EC_KEY_set_asn1_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag)"
  },
  {
    "label": "EC_KEY_precompute_mult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_generate_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_generate_key(EC_KEY *key)"
  },
  {
    "label": "EC_KEY_check_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_check_key(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_can_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_can_sign(const EC_KEY *eckey)"
  },
  {
    "label": "EC_KEY_set_public_key_affine_coordinates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x, BIGNUM *y)"
  },
  {
    "label": "EC_KEY_key2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form, unsigned char **pbuf, BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_oct2key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len, BN_CTX *ctx)"
  },
  {
    "label": "EC_KEY_oct2priv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_oct2priv(EC_KEY *key, const unsigned char *buf, size_t len)"
  },
  {
    "label": "EC_KEY_priv2oct()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_priv2oct(const EC_KEY *key, unsigned char *buf, size_t len)"
  },
  {
    "label": "EC_KEY_priv2buf()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf)"
  },
  {
    "label": "d2i_ECPrivateKey()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len)"
  },
  {
    "label": "i2d_ECPrivateKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECPrivateKey(EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "d2i_ECParameters()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "d2i_ECParameters(EC_KEY **key, const unsigned char **in, long len)"
  },
  {
    "label": "i2d_ECParameters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECParameters(EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "o2i_ECPublicKey()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "o2i_ECPublicKey(EC_KEY **key, const unsigned char **in, long len)"
  },
  {
    "label": "i2o_ECPublicKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2o_ECPublicKey(const EC_KEY *key, unsigned char **out)"
  },
  {
    "label": "ECParameters_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECParameters_print(BIO *bp, const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_print(BIO *bp, const EC_KEY *key, int off)"
  },
  {
    "label": "ECParameters_print_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "ECParameters_print_fp(FILE *fp, const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_print_fp(FILE *fp, const EC_KEY *key, int off)"
  },
  {
    "label": "EC_KEY_OpenSSL()",
    "kind": "Method",
    "detail": "Function (# endif const EC_KEY_METHOD*)",
    "insertText": "EC_KEY_OpenSSL(void)"
  },
  {
    "label": "EC_KEY_get_default_method()",
    "kind": "Method",
    "detail": "Function (const EC_KEY_METHOD*)",
    "insertText": "EC_KEY_get_default_method(void)"
  },
  {
    "label": "EC_KEY_set_default_method()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_set_default_method(const EC_KEY_METHOD *meth)"
  },
  {
    "label": "EC_KEY_get_method()",
    "kind": "Method",
    "detail": "Function (const EC_KEY_METHOD*)",
    "insertText": "EC_KEY_get_method(const EC_KEY *key)"
  },
  {
    "label": "EC_KEY_set_method()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth)"
  },
  {
    "label": "EC_KEY_new_method()",
    "kind": "Method",
    "detail": "Function (EC_KEY*)",
    "insertText": "EC_KEY_new_method(ENGINE *engine)"
  },
  {
    "label": "ECDH_KDF_X9_62()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDH_KDF_X9_62(unsigned char *out, size_t outlen, const unsigned char *Z, size_t Zlen, const unsigned char *sinfo, size_t sinfolen, const EVP_MD *md)"
  },
  {
    "label": "ECDH_compute_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key, const EC_KEY *ecdh, void *(*KDF) (const void *in, size_t inlen, void *out, size_t *outlen))"
  },
  {
    "label": "ECDSA_SIG_new()",
    "kind": "Method",
    "detail": "Function (typedef struct ECDSA_SIG_st ECDSA_SIG ; ECDSA_SIG*)",
    "insertText": "ECDSA_SIG_new(void)"
  },
  {
    "label": "ECDSA_SIG_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ECDSA_SIG_free(ECDSA_SIG *sig)"
  },
  {
    "label": "i2d_ECDSA_SIG()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp)"
  },
  {
    "label": "d2i_ECDSA_SIG()",
    "kind": "Method",
    "detail": "Function (ECDSA_SIG*)",
    "insertText": "d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len)"
  },
  {
    "label": "ECDSA_SIG_get0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)"
  },
  {
    "label": "ECDSA_SIG_get0_r()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "ECDSA_SIG_get0_r(const ECDSA_SIG *sig)"
  },
  {
    "label": "ECDSA_SIG_get0_s()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "ECDSA_SIG_get0_s(const ECDSA_SIG *sig)"
  },
  {
    "label": "ECDSA_SIG_set0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)"
  },
  {
    "label": "ECDSA_do_sign()",
    "kind": "Method",
    "detail": "Function (ECDSA_SIG*)",
    "insertText": "ECDSA_do_sign(const unsigned char *dgst, int dgst_len, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_do_sign_ex()",
    "kind": "Method",
    "detail": "Function (ECDSA_SIG*)",
    "insertText": "ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_do_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_do_verify(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_sign_setup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp)"
  },
  {
    "label": "ECDSA_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_sign_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_verify(int type, const unsigned char *dgst, int dgstlen, const unsigned char *sig, int siglen, EC_KEY *eckey)"
  },
  {
    "label": "ECDSA_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ECDSA_size(const EC_KEY *eckey)"
  },
  {
    "label": "EC_KEY_METHOD_new()",
    "kind": "Method",
    "detail": "Function (EC_KEY_METHOD*)",
    "insertText": "EC_KEY_METHOD_new(const EC_KEY_METHOD *meth)"
  },
  {
    "label": "EC_KEY_METHOD_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_free(EC_KEY_METHOD *meth)"
  },
  {
    "label": "EC_KEY_METHOD_set_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth, int (*init)(EC_KEY *key), void (*finish)(EC_KEY *key), int (*copy)(EC_KEY *dest, const EC_KEY *src), int (*set_group)(EC_KEY *key, const EC_GROUP *grp), int (*set_private)(EC_KEY *key, const BIGNUM *priv_key), int (*set_public)(EC_KEY *key, const EC_POINT *pub_key))"
  },
  {
    "label": "EC_KEY_METHOD_set_keygen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_set_keygen(EC_KEY_METHOD *meth, int (*keygen)(EC_KEY *key))"
  },
  {
    "label": "EC_KEY_METHOD_set_compute_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth, int (*ckey)(unsigned char **psec, size_t *pseclen, const EC_POINT *pub_key, const EC_KEY *ecdh))"
  },
  {
    "label": "EC_KEY_METHOD_set_sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth, int (*sign)(int type, const unsigned char *dgst, int dlen, unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *r, EC_KEY *eckey), int (*sign_setup)(EC_KEY *eckey, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp), ECDSA_SIG *(*sign_sig)(const unsigned char *dgst, int dgst_len, const BIGNUM *in_kinv, const BIGNUM *in_r, EC_KEY *eckey))"
  },
  {
    "label": "EC_KEY_METHOD_set_verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth, int (*verify)(int type, const unsigned char *dgst, int dgst_len, const unsigned char *sigbuf, int sig_len, EC_KEY *eckey), int (*verify_sig)(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey))"
  },
  {
    "label": "EC_KEY_METHOD_get_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth, int (**pinit)(EC_KEY *key), void (**pfinish)(EC_KEY *key), int (**pcopy)(EC_KEY *dest, const EC_KEY *src), int (**pset_group)(EC_KEY *key, const EC_GROUP *grp), int (**pset_private)(EC_KEY *key, const BIGNUM *priv_key), int (**pset_public)(EC_KEY *key, const EC_POINT *pub_key))"
  },
  {
    "label": "EC_KEY_METHOD_get_keygen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD *meth, int (**pkeygen)(EC_KEY *key))"
  },
  {
    "label": "EC_KEY_METHOD_get_compute_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth, int (**pck)(unsigned char **psec, size_t *pseclen, const EC_POINT *pub_key, const EC_KEY *ecdh))"
  },
  {
    "label": "EC_KEY_METHOD_get_sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth, int (**psign)(int type, const unsigned char *dgst, int dlen, unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *r, EC_KEY *eckey), int (**psign_setup)(EC_KEY *eckey, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp), ECDSA_SIG *(**psign_sig)(const unsigned char *dgst, int dgst_len, const BIGNUM *in_kinv, const BIGNUM *in_r, EC_KEY *eckey))"
  },
  {
    "label": "EC_KEY_METHOD_get_verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EC_KEY_METHOD_get_verify(const EC_KEY_METHOD *meth, int (**pverify)(int type, const unsigned char *dgst, int dgst_len, const unsigned char *sigbuf, int sig_len, EC_KEY *eckey), int (**pverify_sig)(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey))"
  }
]