[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FReplyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplyBase"
  },
  {
    "label": "TReplyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReplyBase"
  },
  {
    "label": "FEventRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventRouter"
  },
  {
    "label": "FNoReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNoReply"
  },
  {
    "label": "IsEventHandled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class SWidget ; class FReplyBase { public : bool)",
    "insertText": "IsEventHandled()"
  },
  {
    "label": "TReplyBase()",
    "kind": "Method",
    "detail": "Function (} bool bIsHandled ; TSharedPtr<SWidget> EventHandler ; } ; template<ReplyType> class TReplyBase : public FReplyBase { public :)",
    "insertText": "TReplyBase(bool bIsHandled ) : FReplyBase( bIsHandled)"
  },
  {
    "label": "SetHandler()",
    "kind": "Method",
    "detail": "Function (} protected : class FEventRouter ; ReplyType&)",
    "insertText": "SetHandler(const TSharedRef<SWidget>& InHandler)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (this -> EventHandler = InHandler ; return)",
    "insertText": "Me()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } ; class FNoReply : public TReplyBase<FNoReply> { public : FNoReply)",
    "insertText": "Unhandled()"
  },
  {
    "label": "FNoReply()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNoReply() : TReplyBase<FNoReply>(false)"
  }
]