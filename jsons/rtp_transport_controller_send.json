[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "RtpTransportControllerSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransportControllerSend"
  },
  {
    "label": "PacerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacerSettings"
  },
  {
    "label": "RtpTransportControllerSend()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RTP_TRANSPORT_CONTROLLER_SEND_H_ # define CALL_RTP_TRANSPORT_CONTROLLER_SEND_H_ # include<atomic> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / network_state_predictor . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / transport / network_control . h \" # include \" api / units / data_rate . h \" # include \" call / rtp_bitrate_configurator . h \" # include \" call / rtp_transport_controller_send_interface . h \" # include \" call / rtp_video_sender . h \" # include \" modules / congestion_controller / rtp / control_handler . h \" # include \" modules / congestion_controller / rtp / transport_feedback_adapter . h \" # include \" modules / congestion_controller / rtp / transport_feedback_demuxer . h \" # include \" modules / pacing / packet_router . h \" # include \" modules / pacing / rtp_packet_pacer . h \" # include \" modules / pacing / task_queue_paced_sender . h \" # include \" modules / utility / maybe_worker_thread . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / task_utils / repeating_task . h \" namespace webrtc { class Clock ; class FrameEncryptorInterface ; class RtcEventLog ; class RtpTransportControllerSend final : public RtpTransportControllerSendInterface,public RtcpBandwidthObserver,public TransportFeedbackObserver,public NetworkStateEstimateObserver { public :)",
    "insertText": "RtpTransportControllerSend(Clock* clock, RtcEventLog* event_log, NetworkStatePredictorFactoryInterface* predictor_factory, NetworkControllerFactoryInterface* controller_factory, const BitrateConstraints& bitrate_config, TaskQueueFactory* task_queue_factory, const FieldTrialsView& trials)"
  },
  {
    "label": "RtpTransportControllerSend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpTransportControllerSend()"
  },
  {
    "label": "RtpTransportControllerSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransportControllerSend(const RtpTransportControllerSend&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpTransportControllerSend&)",
    "insertText": "operator(const RtpTransportControllerSend&)"
  },
  {
    "label": "CreateRtpVideoSender()",
    "kind": "Method",
    "detail": "Function (RtpVideoSenderInterface*)",
    "insertText": "CreateRtpVideoSender(const std::map<uint32_t, RtpState>& suspended_ssrcs, const std::map<uint32_t, RtpPayloadState>& states, const RtpConfig& rtp_config, int rtcp_report_interval_ms, Transport* send_transport, const RtpSenderObservers& observers, RtcEventLog* event_log, std::unique_ptr<FecController> fec_controller, const RtpSenderFrameEncryptionConfig& frame_encryption_config, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "DestroyRtpVideoSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRtpVideoSender(RtpVideoSenderInterface* rtp_video_sender)"
  },
  {
    "label": "GetWorkerQueue()",
    "kind": "Method",
    "detail": "Function (MaybeWorkerThread*)",
    "insertText": "GetWorkerQueue()"
  },
  {
    "label": "packet_router()",
    "kind": "Method",
    "detail": "Function (PacketRouter*)",
    "insertText": "packet_router()"
  },
  {
    "label": "network_state_estimate_observer()",
    "kind": "Method",
    "detail": "Function (NetworkStateEstimateObserver*)",
    "insertText": "network_state_estimate_observer()"
  },
  {
    "label": "transport_feedback_observer()",
    "kind": "Method",
    "detail": "Function (TransportFeedbackObserver*)",
    "insertText": "transport_feedback_observer()"
  },
  {
    "label": "packet_sender()",
    "kind": "Method",
    "detail": "Function (RtpPacketSender*)",
    "insertText": "packet_sender()"
  },
  {
    "label": "SetAllocatedSendBitrateLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllocatedSendBitrateLimits(BitrateAllocationLimits limits)"
  },
  {
    "label": "SetPacingFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacingFactor(float pacing_factor)"
  },
  {
    "label": "SetQueueTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueTimeLimit(int limit_ms)"
  },
  {
    "label": "GetStreamFeedbackProvider()",
    "kind": "Method",
    "detail": "Function (StreamFeedbackProvider*)",
    "insertText": "GetStreamFeedbackProvider()"
  },
  {
    "label": "RegisterTargetTransferRateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTargetTransferRateObserver(TargetTransferRateObserver* observer)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkAvailability(bool network_available)"
  },
  {
    "label": "GetBandwidthObserver()",
    "kind": "Method",
    "detail": "Function (RtcpBandwidthObserver*)",
    "insertText": "GetBandwidthObserver()"
  },
  {
    "label": "GetPacerQueuingDelayMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetPacerQueuingDelayMs()"
  },
  {
    "label": "GetFirstPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<Timestamp>)",
    "insertText": "GetFirstPacketTime()"
  },
  {
    "label": "EnablePeriodicAlrProbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePeriodicAlrProbing(bool enable)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedPacket(const ReceivedPacket& packet_msg)"
  },
  {
    "label": "SetSdpBitrateParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSdpBitrateParameters(const BitrateConstraints& constraints)"
  },
  {
    "label": "SetClientBitratePreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientBitratePreferences(const BitrateSettings& preferences)"
  },
  {
    "label": "OnTransportOverheadChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportOverheadChanged(size_t transport_overhead_bytes_per_packet)"
  },
  {
    "label": "AccountForAudioPacketsInPacedSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccountForAudioPacketsInPacedSender(bool account_for_audio)"
  },
  {
    "label": "IncludeOverheadInPacedSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeOverheadInPacedSender()"
  },
  {
    "label": "EnsureStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureStarted()"
  },
  {
    "label": "OnReceivedEstimatedBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedEstimatedBitrate(uint32_t bitrate)"
  },
  {
    "label": "OnReceivedRtcpReceiverReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtcpReceiverReport(const ReportBlockList& report_blocks, int64_t rtt, int64_t now_ms)"
  },
  {
    "label": "OnAddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddPacket(const RtpPacketSendInfo& packet_info)"
  },
  {
    "label": "OnTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportFeedback(const rtcp::TransportFeedback& feedback)"
  },
  {
    "label": "OnRemoteNetworkEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoteNetworkEstimate(NetworkStateEstimate estimate)"
  },
  {
    "label": "PacerSettings()",
    "kind": "Method",
    "detail": "Function (private : struct PacerSettings {)",
    "insertText": "PacerSettings(const FieldTrialsView& trials)"
  },
  {
    "label": "MaybeCreateControllers()",
    "kind": "Method",
    "detail": "Function (FieldTrialParameter<TimeDelta> holdback_window ; FieldTrialParameter<int> holdback_packets ; } ; void)",
    "insertText": "MaybeCreateControllers() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "UpdateInitialConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInitialConstraints(TargetRateConstraints new_contraints) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "StartProcessPeriodicTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartProcessPeriodicTasks() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "UpdateControllerWithTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControllerWithTimeInterval() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "ApplyOrLiftRelayCap()",
    "kind": "Method",
    "detail": "Function (absl::optional<BitrateConstraints>)",
    "insertText": "ApplyOrLiftRelayCap(bool is_relayed)"
  },
  {
    "label": "IsRelevantRouteChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantRouteChange(const rtc::NetworkRoute& old_route, const rtc::NetworkRoute& new_route)"
  },
  {
    "label": "UpdateBitrateConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBitrateConstraints(const BitrateConstraints& updated)"
  },
  {
    "label": "UpdateStreamsConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamsConfig() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "OnReceivedRtcpReceiverReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtcpReceiverReportBlocks(const ReportBlockList& report_blocks, int64_t now_ms) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "PostUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdates(NetworkControlUpdate update) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "UpdateControlState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControlState() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "UpdateCongestedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCongestedState() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; RtcEventLog* const event_log_ ; TaskQueueFactory* const task_queue_factory_ ; SequenceChecker main_thread_ ; PacketRouter packet_router_ ; std::vector<std::unique_ptr<RtpVideoSenderInterface>> video_rtp_senders_)",
    "insertText": "RTC_GUARDED_BY(&main_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RtpBitrateConfigurator bitrate_configurator_ ; std::map<std::string,rtc::NetworkRoute> network_routes_ ; bool pacer_started_ ; const PacerSettings pacer_settings_ ; TaskQueuePacedSender pacer_ ; TargetTransferRateObserver* observer_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (NetworkControllerFactoryInterface* const controller_factory_override_)",
    "insertText": "RTC_PT_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<CongestionControlHandler> control_handler_)",
    "insertText": "RTC_GUARDED_BY(task_queue_) RTC_PT_GUARDED_BY(task_queue_)"
  }
]