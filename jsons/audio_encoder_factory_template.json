[
  {
    "label": "Helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Helper"
  },
  {
    "label": "AudioEncoderFactoryT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderFactoryT"
  },
  {
    "label": "AppendSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_AUDIO_ENCODER_FACTORY_TEMPLATE_H_ # define API_AUDIO_CODECS_AUDIO_ENCODER_FACTORY_TEMPLATE_H_ # include<memory> # include<vector> # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / field_trials_view . h \" # include \" api / make_ref_counted . h \" # include \" api / scoped_refptr . h \" namespace webrtc { namespace audio_encoder_factory_template_impl { template<. . . Ts> struct Helper ; template<> struct Helper<> { void)",
    "insertText": "AppendSupportedEncoders(std::vector<AudioCodecSpec>* specs)"
  },
  {
    "label": "QueryAudioEncoder()",
    "kind": "Method",
    "detail": "Function (} absl::optional<AudioCodecInfo>)",
    "insertText": "QueryAudioEncoder(const SdpAudioFormat& format)"
  },
  {
    "label": "AppendSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSupportedEncoders(specs)"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (auto opt_config =)",
    "insertText": "SdpToConfig(format)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(int payload_type, const SdpAudioFormat& format, absl::optional<AudioCodecPairId> codec_pair_id, const FieldTrialsView* field_trials)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (} else { return Helper<Ts . . .)",
    "insertText": "MakeAudioEncoder(payload_type, format, codec_pair_id, field_trials)"
  },
  {
    "label": "AudioEncoderFactoryT()",
    "kind": "Method",
    "detail": "Function (} } } ; template<. . . Ts> class AudioEncoderFactoryT : public AudioEncoderFactory { public :)",
    "insertText": "AudioEncoderFactoryT(const FieldTrialsView* field_trials)"
  },
  {
    "label": "GetSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (field_trials_ = field_trials ; } std::vector<AudioCodecSpec>)",
    "insertText": "GetSupportedEncoders()"
  },
  {
    "label": "AppendSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (std::vector<AudioCodecSpec> specs ; Helper<Ts . . .)",
    "insertText": "AppendSupportedEncoders(&specs)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(int payload_type, const SdpAudioFormat& format, absl::optional<AudioCodecPairId> codec_pair_id)"
  },
  {
    "label": "CreateAudioEncoderFactory()",
    "kind": "Method",
    "detail": "Function (} const FieldTrialsView* field_trials_ ; } ; } template<. . . Ts> rtc::scoped_refptr<AudioEncoderFactory>)",
    "insertText": "CreateAudioEncoderFactory(const FieldTrialsView* field_trials = nullptr)"
  }
]