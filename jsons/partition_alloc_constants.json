[
  {
    "label": "AllocFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocFlags"
  },
  {
    "label": "FreeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FreeFlags"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CONSTANTS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CONSTANTS_H_ # include<algorithm> # include<climits> # include<cstddef> # include<limits> # include \" base / allocator / partition_allocator / address_pool_manager_types . h \" # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE) && defined(ARCH_CPU_64_BITS)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (struct AllocFlags { unsigned int kReturnNull = 1<<0 ; unsigned int kZeroFill = 1<<1 ; unsigned int kNoOverrideHooks = 1<<2 ; unsigned int kNoMemoryToolOverride = 1<<3 ; unsigned int kNoHooks = 1<<4 ; unsigned int kFastPathOrReturnNull = 1<<5 ; unsigned int kLastFlag = kFastPathOrReturnNull ; } ; struct FreeFlags { unsigned int kNoMemoryToolOverride = 1<<0 ; unsigned int kLastFlag = kNoMemoryToolOverride ; } ; namespace internal { size_t kPartitionCachelineSize = 6 4 ; # if)",
    "insertText": "defined(_MIPS_ARCH_LOONGSON) || defined(ARCH_CPU_LOONG64) PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t PartitionPageShift()"
  },
  {
    "label": "PartitionPageShift()",
    "kind": "Method",
    "detail": "Function (} # else PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PartitionPageShift()"
  },
  {
    "label": "PartitionPageOffsetMask()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PartitionPageOffsetMask()"
  },
  {
    "label": "PartitionPageBaseMask()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PartitionPageBaseMask()"
  },
  {
    "label": "NumSystemPagesPerPartitionPage()",
    "kind": "Method",
    "detail": "Function (} size_t kMaxPartitionPagesPerRegularSlotSpan = 4 ; PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "NumSystemPagesPerPartitionPage()"
  },
  {
    "label": "MaxSystemPagesPerRegularSlotSpan()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "MaxSystemPagesPerRegularSlotSpan()"
  },
  {
    "label": "MaxRegularSlotSpanSize()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "MaxRegularSlotSpanSize()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else 1<<1 6 ; # endif size_t kGiB = 1 0 2 4* 1 0 2 4* 1 0 2 4 ull ; size_t kSuperPageShift = 2 1 ; size_t kSuperPageSize = 1<<kSuperPageShift ; size_t kSuperPageAlignment = kSuperPageSize ; size_t kSuperPageOffsetMask = kSuperPageAlignment - 1 ; size_t kSuperPageBaseMask = ~ kSuperPageOffsetMask ; # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_IOS)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else size_t kPoolMaxSize = 1 6* kGiB ; # endif # else size_t kNumPools = 2 ; size_t kPoolMaxSize = 4* kGiB ; # endif size_t kMaxSuperPagesInPool = kPoolMaxSize / kSuperPageSize ; pool_handle kRegularPoolHandle = 1 ; pool_handle kBRPPoolHandle = 2 ; pool_handle kConfigurablePoolHandle = 3 ; size_t kMaxMemoryTaggingSize = 1 0 2 4 ; # if)",
    "insertText": "defined(PA_HAS_MEMORY_TAGGING) PA_ALWAYS_INLINE bool HasOverflowTag(void* object)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uintptr_t kOverflowTag = 0 x0f00000000000000uLL ;)",
    "insertText": "static_assert((kOverflowTag & kPtrTagMask) != 0, \"Overflow tag must be in tag bits\")"
  },
  {
    "label": "NumPartitionPagesPerSuperPage()",
    "kind": "Method",
    "detail": "Function (} # endif PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "NumPartitionPagesPerSuperPage()"
  },
  {
    "label": "MaxSuperPagesInPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "MaxSuperPagesInPool()"
  },
  {
    "label": "DirectMapAllocationGranularityShift()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "DirectMapAllocationGranularityShift()"
  },
  {
    "label": "DirectMapAllocationGranularityOffsetMask()",
    "kind": "Method",
    "detail": "Function (} # endif PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "DirectMapAllocationGranularityOffsetMask()"
  },
  {
    "label": "kNumBucketedOrders()",
    "kind": "Method",
    "detail": "Function (} size_t kMinBucketedOrder = kAlignment = = 1 6 ? 5 : 4 ; size_t kMaxBucketedOrder = 2 0 ; size_t)",
    "insertText": "kNumBucketedOrders(kMaxBucketedOrder - kMinBucketedOrder)"
  },
  {
    "label": "kSmallestBucket()",
    "kind": "Method",
    "detail": "Function (size_t kNumBucketsPerOrderBits = 3 ; size_t kNumBucketsPerOrder = 1<<kNumBucketsPerOrderBits ; size_t kNumBuckets = kNumBucketedOrders* kNumBucketsPerOrder ; size_t)",
    "insertText": "kSmallestBucket(kMinBucketedOrder - 1)"
  },
  {
    "label": "kMaxBucketSpacing()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kMaxBucketSpacing((kMaxBucketedOrder - 1) - kNumBucketsPerOrderBits)"
  },
  {
    "label": "kMaxBucketed()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kMaxBucketed(1 << (kMaxBucketedOrder - 1)) + ((kNumBucketsPerOrder - 1) * kMaxBucketSpacing)"
  },
  {
    "label": "MaxDirectMapped()",
    "kind": "Method",
    "detail": "Function (size_t kMinDirectMappedDownsize = kMaxBucketed + 1 ; PA_ALWAYS_INLINE size_t)",
    "insertText": "MaxDirectMapped()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} size_t kMaxSupportedAlignment = kSuperPageSize / 2 ; size_t kBitsPerSizeT =)",
    "insertText": "sizeof(void*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (size_t kEmptyCacheIndexBits = 7 ; size_t kMaxFreeableSpans = 1<<kEmptyCacheIndexBits ; size_t kDefaultEmptySlotSpanRingSize = 1 6 ; size_t kReasonableSizeOfUnusedPages = 1 0 2 4* 1 0 2 4* 1 0 2 4 ; unsigned char kUninitializedByte = 0 xAB ; unsigned char kFreedByte = 0 xCD ; unsigned char kQuarantinedByte = 0 xEF ; size_t kInvalidBucketSize = 1 ; # if)",
    "insertText": "defined(PA_ENABLE_MAC11_MALLOC_SIZE_HACK)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (size_t kMac11MallocSizeHackUsableSize = # if)",
    "insertText": "BUILDFLAG(ENABLE_DANGLING_RAW_PTR_CHECKS) || \\ defined(PA_REF_COUNT_STORE_REQUESTED_SIZE) || \\ defined(PA_REF_COUNT_CHECK_COOKIE)"
  }
]