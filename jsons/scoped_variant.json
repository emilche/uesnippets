[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_VARIANT_H_ # define BASE_WIN_SCOPED_VARIANT_H_ # include<windows . h> # include<oleauto . h> # include<stdint . h> # include \" base / base_export . h \" namespace base { namespace win { class BASE_EXPORT ScopedVariant { public : const VARIANT kEmptyVariant ;)",
    "insertText": "ScopedVariant()"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (var_ . vt = VT_EMPTY ; })",
    "insertText": "ScopedVariant(const wchar_t* str)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(const wchar_t* str, UINT length)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(long value, VARTYPE vt = VT_I4)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(int value)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(bool value)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(double value, VARTYPE vt = VT_R8)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(IDispatch* dispatch)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(IUnknown* unknown)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(SAFEARRAY* safearray)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(const VARIANT& var)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(ScopedVariant&& var)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedVariant(const ScopedVariant&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedVariant&)",
    "insertText": "operator(const ScopedVariant&)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (VARTYPE)",
    "insertText": "type()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (VARIANT)",
    "insertText": "Release()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ScopedVariant& var)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (VARIANT)",
    "insertText": "Copy()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const VARIANT& other, bool ignore_case = false)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (VARIANT*)",
    "insertText": "Receive()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const wchar_t* str)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int8_t i8)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint8_t ui8)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int16_t i16)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint16_t ui16)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int32_t i32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint32_t ui32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t i64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint64_t ui64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(float r32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(double r64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(bool b)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const VARIANT& var)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(IDispatch* disp)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(IUnknown* unk)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(SAFEARRAY* array)"
  },
  {
    "label": "SetDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDate(DATE date)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (const VARIANT*)",
    "insertText": "ptr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedVariant&)",
    "insertText": "operator(const VARIANT& var)"
  },
  {
    "label": "AsInput()",
    "kind": "Method",
    "detail": "Function (VARIANT*)",
    "insertText": "AsInput()"
  },
  {
    "label": "VARIANT()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "VARIANT()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : VARIANT var_ ; private : bool)",
    "insertText": "operator(const ScopedVariant& var)"
  }
]