[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(const wchar_t* str)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(int value)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(bool value)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(double value, VARTYPE vt = VT_R8)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(IDispatch* dispatch)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(IUnknown* unknown)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(SAFEARRAY* safearray)"
  },
  {
    "label": "ScopedVariant()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedVariant(const VARIANT& var)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const VARIANT& var = kEmptyVariant)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (VARIANT)",
    "insertText": "Release()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ScopedVariant& var)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const wchar_t* str)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int8_t i8)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint8_t ui8)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int16_t i16)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint16_t ui16)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int32_t i32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint32_t ui32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t i64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint64_t ui64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(float r32)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(double r64)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(bool b)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const VARIANT& var)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(IDispatch* disp)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(IUnknown* unk)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(SAFEARRAY* array)"
  },
  {
    "label": "SetDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDate(DATE date)"
  },
  {
    "label": "IsLeakableVarType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLeakableVarType(VARTYPE vt)"
  }
]