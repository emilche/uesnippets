[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FCpuProfilerTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCpuProfilerTrace"
  },
  {
    "label": "FEventScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventScope"
  },
  {
    "label": "FDynamicEventScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicEventScope"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Misc / Build . h \" # include \" Trace / Config . h \" # include \" Trace / Detail / Channel . h \" # include \" Trace / Detail / Channel . inl \" # include \" Trace / Trace . h \" # if !)",
    "insertText": "defined(CPUPROFILERTRACE_ENABLED) #if UE_TRACE_ENABLED && !UE_BUILD_SHIPPING #define CPUPROFILERTRACE_ENABLED 1 #else #define CPUPROFILERTRACE_ENABLED 0 #endif #endif #if CPUPROFILERTRACE_ENABLED UE_TRACE_CHANNEL_EXTERN(CpuChannel, CORE_API)"
  },
  {
    "label": "OutputEventType()",
    "kind": "Method",
    "detail": "Function (class FName ; struct FCpuProfilerTrace { FORCENOINLINE uint32)",
    "insertText": "OutputEventType(const ANSICHAR* Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginEvent(uint32 SpecId)"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEvent(const ANSICHAR* Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEvent(const TCHAR* Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEvent(const FName Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputBeginDynamicEventWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEventWithId(const FName Id, const ANSICHAR* Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputBeginDynamicEventWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEventWithId(const FName Id, const TCHAR* Name, const ANSICHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "OutputEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndEvent()"
  },
  {
    "label": "OutputResumeEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputResumeEvent(uint64 SpecId, uint32& TimerScopeDepth)"
  },
  {
    "label": "OutputSuspendEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSuspendEvent()"
  },
  {
    "label": "FlushThreadBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushThreadBuffer()"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (class FEventScope { public :)",
    "insertText": "FEventScope(uint32 InSpecId, bool bInCondition) : bEnabled(bInCondition && CpuChannel)"
  },
  {
    "label": "BeginEventCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEventCommon(InSpecId)"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventScope(uint32 InSpecId, const UE::Trace::FChannel& InChannel, bool bInCondition) : bEnabled(bInCondition && (CpuChannel | InChannel))"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventScope(uint32& InOutSpecId, const ANSICHAR* InEventString, bool bInCondition, const ANSICHAR* File, uint32 Line) : bEnabled(bInCondition && CpuChannel)"
  },
  {
    "label": "BeginEventCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEventCommon(InOutSpecId, InEventString, File, Line)"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventScope(uint32& InOutSpecId, const ANSICHAR* InEventString, const UE::Trace::FChannel& InChannel, bool bInCondition, const ANSICHAR* File, uint32 Line) : bEnabled(bInCondition && (CpuChannel | InChannel))"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventScope(uint32& InOutSpecId, const TCHAR* InEventString, bool bInCondition, const ANSICHAR* File, uint32 Line) : bEnabled(bInCondition && CpuChannel)"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventScope(uint32& InOutSpecId, const TCHAR* InEventString, const UE::Trace::FChannel& InChannel, bool bInCondition, const ANSICHAR* File, uint32 Line) : bEnabled(bInCondition && (CpuChannel | InChannel))"
  },
  {
    "label": "FEventScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEventScope()"
  },
  {
    "label": "BeginEventCommon()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "BeginEventCommon(uint32 InSpecId)"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginEvent(InSpecId)"
  },
  {
    "label": "BeginEventCommon()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BeginEventCommon(uint32& InOutSpecId, const ANSICHAR* InEventString, const ANSICHAR* File, uint32 Line)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicStore_Relaxed((volatile int32*)&InOutSpecId, FCpuProfilerTrace::OutputEventType(InEventString, File, Line))"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OutputBeginEvent(FPlatformAtomics::AtomicRead_Relaxed((volatile int32*)&InOutSpecId))"
  },
  {
    "label": "BeginEventCommon()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BeginEventCommon(uint32& InOutSpecId, const TCHAR* InEventString, const ANSICHAR* File, uint32 Line)"
  },
  {
    "label": "FDynamicEventScope()",
    "kind": "Method",
    "detail": "Function (} } bool bEnabled ; } ; struct FDynamicEventScope {)",
    "insertText": "FDynamicEventScope(const ANSICHAR* InEventName, bool bInCondition, const ANSICHAR* InFile = nullptr, uint32 InLine = 0) : bEnabled(bInCondition && CpuChannel)"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEvent(InEventName, InFile, InLine)"
  },
  {
    "label": "FDynamicEventScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FDynamicEventScope(const ANSICHAR* InEventName, const UE::Trace::FChannel& InChannel, bool bInCondition, const ANSICHAR* InFile = nullptr, uint32 InLine = 0) : bEnabled(bInCondition && (CpuChannel | InChannel))"
  },
  {
    "label": "FDynamicEventScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FDynamicEventScope(const TCHAR* InEventName, bool bInCondition, const ANSICHAR* InFile = nullptr, uint32 InLine = 0) : bEnabled(bInCondition && CpuChannel)"
  },
  {
    "label": "FDynamicEventScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FDynamicEventScope(const TCHAR* InEventName, const UE::Trace::FChannel& InChannel, bool bInCondition, const ANSICHAR* InFile = nullptr, uint32 InLine = 0) : bEnabled(bInCondition && (CpuChannel | InChannel))"
  },
  {
    "label": "FDynamicEventScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FDynamicEventScope()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_DECLARE()",
    "kind": "Method",
    "detail": "Function (} } bool bEnabled ; } ; } ; # define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_DECLARE(DeclName)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_USE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_USE(DeclName, NameStr, ScopeName, Condition) \\ FCpuProfilerTrace::FEventScope ScopeName(DeclName, NameStr, Condition, __FILE__, __LINE__)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL(DeclName, NameStr, ScopeName, Channel, Condition) \\ FCpuProfilerTrace::FEventScope ScopeName(DeclName, NameStr, Channel, Condition, __FILE__, __LINE__)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_MANUAL_START()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_MANUAL_START(EventNameStr) \\ if (CpuChannel)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ uint32)",
    "insertText": "PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__) = FCpuProfilerTrace::OutputEventType(EventNameStr, __FILE__, __LINE__)"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OutputBeginEvent(PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_MANUAL_END()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_MANUAL_END() \\ if (CpuChannel)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_MANUAL_IS_ENABLED()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_MANUAL_IS_ENABLED() \\ bool(CpuChannel) #define TRACE_CPUPROFILER_EVENT_SCOPE_STR_CONDITIONAL(NameStr, Condition) \\ TRACE_CPUPROFILER_EVENT_DECLARE(PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_USE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_USE(PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__), NameStr, PREPROCESSOR_JOIN(__CpuProfilerEventScope, __LINE__), (Condition))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_STR(NameStr) \\ TRACE_CPUPROFILER_EVENT_SCOPE_STR_CONDITIONAL(NameStr, true) #define TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR_CONDITIONAL(NameStr, Channel, Condition) \\ TRACE_CPUPROFILER_EVENT_DECLARE(PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL(PREPROCESSOR_JOIN(__CpuProfilerEventSpecId, __LINE__), NameStr, PREPROCESSOR_JOIN(__CpuProfilerEventScope, __LINE__), Channel, (Condition))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR(NameStr, Channel) \\ TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR_CONDITIONAL(NameStr, Channel, true) #define TRACE_CPUPROFILER_EVENT_SCOPE_CONDITIONAL(Name, Condition) \\ TRACE_CPUPROFILER_EVENT_SCOPE_STR_CONDITIONAL(#Name, (Condition)) #define TRACE_CPUPROFILER_EVENT_SCOPE(Name) \\ TRACE_CPUPROFILER_EVENT_SCOPE_CONDITIONAL(Name, true) #define TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_CONDITIONAL(Name, Channel, Condition) \\ TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR_CONDITIONAL(#Name, Channel, (Condition)) #define TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL(Name, Channel) \\ TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_CONDITIONAL(Name, Channel, true) #define TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL_CONDITIONAL(Name, Channel, Condition) \\ FCpuProfilerTrace::FDynamicEventScope PREPROCESSOR_JOIN(__CpuProfilerEventScope, __LINE__)(Name, Channel, (Condition), __FILE__, __LINE__)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(Name, Channel) \\ TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL_CONDITIONAL(Name, Channel, true) #define TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_CONDITIONAL(Name, Condition) \\ FCpuProfilerTrace::FDynamicEventScope PREPROCESSOR_JOIN(__CpuProfilerEventScope, __LINE__)(Name, (Condition), __FILE__, __LINE__)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT(Name) \\ TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_CONDITIONAL(Name, true) #define TRACE_CPUPROFILER_EVENT_FLUSH() \\ FCpuProfilerTrace::FlushThreadBuffer()"
  }
]