[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAutomationTestExcludelistSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutomationTestExcludelistSettings"
  },
  {
    "label": "FAutomationTestExcludeOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationTestExcludeOptions"
  },
  {
    "label": "FAutomationTestExcludelistEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationTestExcludelistEntry"
  },
  {
    "label": "UAutomationTestExcludelistConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutomationTestExcludelistConfig"
  },
  {
    "label": "UAutomationTestExcludelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutomationTestExcludelist"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AutomationTestPlatform . h \" # include \" CoreMinimal . h \" # include \" Misc / SecureHash . h \" # include \" AutomationTestExcludelist . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (DirectX11,DirectX12,Vulkan,Metal,Null } ; FString)",
    "insertText": "LexToString(ETEST_RHI_Options Option)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (SM5,SM6 } ; FString)",
    "insertText": "LexToString(ETEST_RHI_FeatureLevel_Options Option)"
  },
  {
    "label": "SetToString()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "SetToString(const TSet<FName>& Set)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} TArray<FString> List ;)",
    "insertText": "for(auto& Item : Set)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (List .)",
    "insertText": "Add(Item.ToString())"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} List .)",
    "insertText": "Sort()"
  },
  {
    "label": "SetToShortString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "SetToShortString(const TSet<FName>& Set)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(List.Num() == 1)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UCLASS(config = Engine, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(Config)"
  },
  {
    "label": "InitializeSettingsDefault()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeSettingsDefault()"
  },
  {
    "label": "GetSectionName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetSectionName()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() template<typename EnumType> static const TSet<FName>& GetAllRHIOptionNames()"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"AutomationTest/Settings\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<FName> NameSet ;)",
    "insertText": "if(NameSet.IsEmpty())"
  },
  {
    "label": "EnumType()",
    "kind": "Method",
    "detail": "Function (UEnum* Enum = StaticEnum<)",
    "insertText": "EnumType()"
  },
  {
    "label": "NumEnums()",
    "kind": "Method",
    "detail": "Function (int32 Num_Flags = Enum ->)",
    "insertText": "NumEnums()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NameSet .)",
    "insertText": "Add(*LexToString((EnumType)Enum->GetValueByIndex(i)))"
  },
  {
    "label": "GetAllRHIOptionNamesFromSettings()",
    "kind": "Method",
    "detail": "Function (} } } return NameSet ; } const TSet<FName>&)",
    "insertText": "GetAllRHIOptionNamesFromSettings()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NameSet .)",
    "insertText": "Append(CastChecked<UAutomationTestExcludelistSettings>(Settings)->SupportedRHIs)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} NameSet .)",
    "insertText": "Sort([](const FName& A, const FName& B) { return A.ToString() < B.ToString(); })"
  },
  {
    "label": "GetPlatformRHIOptionNamesFromSettings()",
    "kind": "Method",
    "detail": "Function (} return NameSet ; } const TSet<FName>&)",
    "insertText": "GetPlatformRHIOptionNamesFromSettings(const FName& Platform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSet<FName>> PlatformSettings ;)",
    "insertText": "if(PlatformSettings.IsEmpty())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (PlatformSettings .)",
    "insertText": "Emplace(Settings->GetPlatformName()).Append(CastChecked<UAutomationTestExcludelistSettings>(Settings)->SupportedRHIs)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} } return PlatformSettings .)",
    "insertText": "FindOrAdd(Platform)"
  },
  {
    "label": "UpdateReason()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "UpdateReason(const FString& BeautifiedReason, const FString& TaskTrackerTicketId)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FAutomationTestExcludelistEntry()"
  },
  {
    "label": "FAutomationTestExcludelistEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationTestExcludelistEntry(const FAutomationTestExcludeOptions& Options) : Platforms(Options.Platforms) , Test(Options.Test) , Reason(Options.Reason) , RHIs(Options.RHIs) , Warn(Options.Warn)"
  },
  {
    "label": "GetOptions()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FAutomationTestExcludeOptions>)",
    "insertText": "GetOptions()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAutomationTestExcludeOptions> Options =)",
    "insertText": "MakeShareable(new FAutomationTestExcludeOptions())"
  },
  {
    "label": "NumRHIType()",
    "kind": "Method",
    "detail": "Function (Options -> Test = Test ; Options -> Reason = Reason ; Options -> Warn = Warn ; Options -> RHIs = RHIs ; Options -> Platforms = Platforms ; return Options ; } int8)",
    "insertText": "NumRHIType()"
  },
  {
    "label": "ETEST_RHI_FeatureLevel_Options()",
    "kind": "Method",
    "detail": "Function (Num + + ; } const TSet<FName> AllRHI_FeatureLevel_OptionNames = FAutomationTestExcludeOptions::GetAllRHIOptionNames<)",
    "insertText": "ETEST_RHI_FeatureLevel_Options()"
  },
  {
    "label": "SetPropagation()",
    "kind": "Method",
    "detail": "Function (Num + + ; } return Num ; } void)",
    "insertText": "SetPropagation(const FString& ForTestName)"
  },
  {
    "label": "TrimStartAndEnd()",
    "kind": "Method",
    "detail": "Function (bIsPropagated = FullTestName ! = ForTestName .)",
    "insertText": "TrimStartAndEnd().ToLower()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FullTestName .)",
    "insertText": "Empty()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bIsPropagated = false ; } void)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetStringForHash()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStringForHash()"
  },
  {
    "label": "HasConditions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConditions()"
  },
  {
    "label": "RemoveConditions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveConditions(const FAutomationTestExcludelistEntry& Entry)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (RHIs = RHIs .)",
    "insertText": "Difference(Entry.RHIs)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (GotRemoved = GotRemoved | | Length ! = RHIs .)",
    "insertText": "Num()"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (Platforms = Platforms .)",
    "insertText": "Difference(Entry.Platforms)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void Reset()"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(const FAutomationTestExcludelistEntry& Entry)"
  },
  {
    "label": "GetEntries()",
    "kind": "Method",
    "detail": "Function (const TArray<FAutomationTestExcludelistEntry>&)",
    "insertText": "GetEntries()"
  },
  {
    "label": "GetTaskTrackerURLHashtag()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskTrackerURLHashtag()"
  },
  {
    "label": "LoadTaskTrackerProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadTaskTrackerProperties()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateHash(const FAutomationTestExcludelistEntry& Entry)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FString PlatformName ; FSHAHash EntriesHash ; FSHAHash SavedEntriesHash ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UAutomationTestExcludelist()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; UAutomationTestExcludelist*)",
    "insertText": "Get()"
  },
  {
    "label": "AddToExcludeTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToExcludeTest(const FString& TestName, const FAutomationTestExcludelistEntry& ExcludelistEntry)"
  },
  {
    "label": "RemoveFromExcludeTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromExcludeTest(const FString& TestName)"
  },
  {
    "label": "IsTestExcluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestExcluded(const FString& TestName)"
  },
  {
    "label": "IsTestExcluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestExcluded(const FString& TestName, const TSet<FName>& RHI, FName* OutReason, bool* OutWarn)"
  },
  {
    "label": "IsTestExcluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestExcluded(const FString& TestName, const FName& Platform, const TSet<FName>& RHI, FName* OutReason, bool* OutWarn)"
  },
  {
    "label": "GetExcludeTestEntry()",
    "kind": "Method",
    "detail": "Function (const FAutomationTestExcludelistEntry*)",
    "insertText": "GetExcludeTestEntry(const FString& TestName)"
  },
  {
    "label": "GetExcludeTestEntry()",
    "kind": "Method",
    "detail": "Function (const FAutomationTestExcludelistEntry*)",
    "insertText": "GetExcludeTestEntry(const FString& TestName, const TSet<FName>& RHI)"
  },
  {
    "label": "GetExcludeTestEntry()",
    "kind": "Method",
    "detail": "Function (const FAutomationTestExcludelistEntry*)",
    "insertText": "GetExcludeTestEntry(const FString& TestName, const FName& Platform, const TSet<FName>& RHI)"
  },
  {
    "label": "GetConfigFilenameForEntry()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigFilenameForEntry(const FAutomationTestExcludelistEntry& Entry)"
  },
  {
    "label": "GetConfigFilenameForEntry()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigFilenameForEntry(const FAutomationTestExcludelistEntry& Entry, const FName& Platform)"
  },
  {
    "label": "GetTaskTrackerURLBase()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskTrackerURLBase()"
  },
  {
    "label": "GetConfigTaskTrackerHashtag()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigTaskTrackerHashtag()"
  },
  {
    "label": "GetTaskTrackerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskTrackerName()"
  },
  {
    "label": "GetTaskTrackerTicketTag()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskTrackerTicketTag()"
  },
  {
    "label": "SaveToConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveToConfigs()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "LoadPlatformConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPlatformConfigs()"
  },
  {
    "label": "PopulateEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateEntries()"
  },
  {
    "label": "GetBeautifiedTaskTrackerTicketTagSuffix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBeautifiedTaskTrackerTicketTagSuffix()"
  }
]