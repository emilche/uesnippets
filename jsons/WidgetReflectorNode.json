[
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWidgetHitTestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetHitTestInfo"
  },
  {
    "label": "FWidgetReflectorNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetReflectorNodeBase"
  },
  {
    "label": "FLiveWidgetReflectorNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLiveWidgetReflectorNode"
  },
  {
    "label": "FSnapshotWidgetReflectorNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSnapshotWidgetReflectorNode"
  },
  {
    "label": "FWidgetReflectorNodeUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetReflectorNodeUtils"
  },
  {
    "label": "FWidgetReflectorNodeBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Rendering / SlateLayoutTransform . h \" # include \" Layout / Geometry . h \" # include \" Widgets / SNullWidget . h \" # include \" Layout / ArrangedWidget . h \" # include \" AssetRegistry / AssetData . h \" class FJsonValue ; class FWidgetPath ; class SWidget ; enum class EWidgetReflectorNodeType : uint8 { Live,Snapshot,} ; struct FWidgetHitTestInfo { bool IsHitTestVisible = false ; bool AreChildrenHitTestVisible = false ; } ; class FWidgetReflectorNodeBase { public : using TPointerAsInt = uint64 ; ~)",
    "insertText": "FWidgetReflectorNodeBase()"
  },
  {
    "label": "GetNodeType()",
    "kind": "Method",
    "detail": "Function (} EWidgetReflectorNodeType)",
    "insertText": "GetNodeType()"
  },
  {
    "label": "GetLiveWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetLiveWidget()"
  },
  {
    "label": "GetWidgetType()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetType()"
  },
  {
    "label": "GetWidgetTypeAndShortName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetTypeAndShortName()"
  },
  {
    "label": "GetWidgetVisibilityText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetVisibilityText()"
  },
  {
    "label": "GetWidgetClippingText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetClippingText()"
  },
  {
    "label": "GetWidgetLayerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLayerId()"
  },
  {
    "label": "GetWidgetLayerIdOut()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLayerIdOut()"
  },
  {
    "label": "GetWidgetFocusable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetFocusable()"
  },
  {
    "label": "GetWidgetVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetVisible()"
  },
  {
    "label": "GetWidgetVisibilityInherited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetVisibilityInherited()"
  },
  {
    "label": "GetWidgetNeedsTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetNeedsTick()"
  },
  {
    "label": "GetWidgetIsVolatile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsVolatile()"
  },
  {
    "label": "GetWidgetIsVolatileIndirectly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsVolatileIndirectly()"
  },
  {
    "label": "GetWidgetHasActiveTimers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetHasActiveTimers()"
  },
  {
    "label": "GetWidgetIsInvalidationRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsInvalidationRoot()"
  },
  {
    "label": "GetWidgetAttributeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetAttributeCount()"
  },
  {
    "label": "GetWidgetCollapsedAttributeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetCollapsedAttributeCount()"
  },
  {
    "label": "GetWidgetReadableLocation()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetReadableLocation()"
  },
  {
    "label": "GetWidgetFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWidgetFile()"
  },
  {
    "label": "GetWidgetLineNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLineNumber()"
  },
  {
    "label": "HasValidWidgetAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidWidgetAssetData()"
  },
  {
    "label": "GetWidgetAssetData()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetWidgetAssetData()"
  },
  {
    "label": "GetWidgetDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWidgetDesiredSize()"
  },
  {
    "label": "GetWidgetForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetWidgetForegroundColor()"
  },
  {
    "label": "GetWidgetAddress()",
    "kind": "Method",
    "detail": "Function (TPointerAsInt)",
    "insertText": "GetWidgetAddress()"
  },
  {
    "label": "GetWidgetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetEnabled()"
  },
  {
    "label": "IsWidgetLive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetLive()"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry&)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "GetAccumulatedLayoutTransform()",
    "kind": "Method",
    "detail": "Function (FSlateLayoutTransform)",
    "insertText": "GetAccumulatedLayoutTransform()"
  },
  {
    "label": "GetAccumulatedRenderTransform()",
    "kind": "Method",
    "detail": "Function (const FSlateRenderTransform&)",
    "insertText": "GetAccumulatedRenderTransform()"
  },
  {
    "label": "GetLocalSize()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetLocalSize()"
  },
  {
    "label": "GetHitTestInfo()",
    "kind": "Method",
    "detail": "Function (const FWidgetHitTestInfo&)",
    "insertText": "GetHitTestInfo()"
  },
  {
    "label": "GetTint()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetTint()"
  },
  {
    "label": "SetTint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTint(const FLinearColor& InTint)"
  },
  {
    "label": "AddChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildNode(TSharedRef<FWidgetReflectorNodeBase> InParentNode, TSharedRef<FWidgetReflectorNodeBase> InChildNode)"
  },
  {
    "label": "GetChildNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<FWidgetReflectorNodeBase>>&)",
    "insertText": "GetChildNodes()"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FWidgetReflectorNodeBase>)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "FWidgetReflectorNodeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetReflectorNodeBase(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "FLiveWidgetReflectorNode()",
    "kind": "Method",
    "detail": "Function (protected : FGeometry WidgetGeometry ; FWidgetHitTestInfo HitTestInfo ; TArray<TSharedRef<FWidgetReflectorNodeBase>> ChildNodes ; TWeakPtr<FWidgetReflectorNodeBase> ParentNode ; FLinearColor Tint ; } ; class FLiveWidgetReflectorNode : public FWidgetReflectorNodeBase { public : ~)",
    "insertText": "FLiveWidgetReflectorNode()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FLiveWidgetReflectorNode>)",
    "insertText": "Create(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "FSnapshotWidgetReflectorNode()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SWidget> Widget ; } ; class FSnapshotWidgetReflectorNode : public FWidgetReflectorNodeBase { public : ~)",
    "insertText": "FSnapshotWidgetReflectorNode()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSnapshotWidgetReflectorNode>)",
    "insertText": "Create()"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSnapshotWidgetReflectorNode>)",
    "insertText": "FromJson(const TSharedRef<FJsonValue>& RootJsonValue)"
  },
  {
    "label": "FSnapshotWidgetReflectorNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSnapshotWidgetReflectorNode(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "NewLiveNode()",
    "kind": "Method",
    "detail": "Function (private : FText CachedWidgetType ; FText CachedWidgetTypeAndShortName ; FText CachedWidgetVisibilityText ; bool bCachedWidgetVisible ; bool bCachedWidgetVisibleInherited ; bool bCachedWidgetFocusable ; bool bCachedWidgetNeedsTick ; bool bCachedWidgetIsVolatile ; bool bCachedWidgetIsVolatileIndirectly ; bool bCachedWidgetHasActiveTimers ; bool bCachedWidgetIsInvalidationRoot ; bool bCachedWidgetEnabled ; FText CachedWidgetClippingText ; int32 CachedWidgetLayerId ; int32 CachedWidgetLayerIdOut ; FText CachedWidgetReadableLocation ; FString CachedWidgetFile ; int32 CachedWidgetLineNumber ; int32 CachedWidgetAttributeCount ; int32 CachedWidgetCollapsedAttributeCount ; FAssetData CachedWidgetAssetData ; FVector2D CachedWidgetDesiredSize ; FSlateColor CachedWidgetForegroundColor ; TPointerAsInt CachedWidgetAddress ; } ; class FWidgetReflectorNodeUtils { public : TSharedRef<FLiveWidgetReflectorNode>)",
    "insertText": "NewLiveNode(const FArrangedWidget& InWidgetGeometry = FArrangedWidget(SNullWidget::NullWidget, FGeometry()))"
  },
  {
    "label": "NewLiveNodeTreeFrom()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLiveWidgetReflectorNode>)",
    "insertText": "NewLiveNodeTreeFrom(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "NewSnapshotNode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSnapshotWidgetReflectorNode>)",
    "insertText": "NewSnapshotNode(const FArrangedWidget& InWidgetGeometry = FArrangedWidget(SNullWidget::NullWidget, FGeometry()))"
  },
  {
    "label": "NewSnapshotNodeTreeFrom()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSnapshotWidgetReflectorNode>)",
    "insertText": "NewSnapshotNodeTreeFrom(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "NewNode()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<FWidgetReflectorNodeBase>)",
    "insertText": "NewNode(const EWidgetReflectorNodeType InNodeType, const FArrangedWidget& InWidgetGeometry = FArrangedWidget(SNullWidget::NullWidget, FGeometry()))"
  },
  {
    "label": "NewNodeTreeFrom()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FWidgetReflectorNodeBase>)",
    "insertText": "NewNodeTreeFrom(const EWidgetReflectorNodeType InNodeType, const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "FindLiveWidgetPath()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FindLiveWidgetPath(const TArray<TSharedRef<FWidgetReflectorNodeBase>>& CandidateNodes, const FWidgetPath& WidgetPathToFind, TArray<TSharedRef<FWidgetReflectorNodeBase>>& SearchResult)"
  },
  {
    "label": "FindLiveWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLiveWidget(const TArray<TSharedRef<FWidgetReflectorNodeBase>>& CandidateNodes, const TSharedPtr<const SWidget>& WidgetToFind, TArray<TSharedRef<FWidgetReflectorNodeBase>>& SearchResult)"
  },
  {
    "label": "FindSnaphotWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSnaphotWidget(const TArray<TSharedRef<FWidgetReflectorNodeBase>>& CandidateNodes, FWidgetReflectorNodeBase::TPointerAsInt WidgetToFind, TArray<TSharedRef<FWidgetReflectorNodeBase>>& SearchResult)"
  },
  {
    "label": "GetWidgetType()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "GetWidgetType(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetTypeAndShortName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetTypeAndShortName(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetVisibilityText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetVisibilityText(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetVisibility(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetVisibilityInherited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetVisibilityInherited(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetClippingText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetClippingText(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetLayerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLayerId(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetLayerIdOut()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLayerIdOut(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetFocusable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetFocusable(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetNeedsTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetNeedsTick(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetIsVolatile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsVolatile(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetIsVolatileIndirectly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsVolatileIndirectly(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetHasActiveTimers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetHasActiveTimers(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetIsInvalidationRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetIsInvalidationRoot(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetAttributeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetAttributeCount(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetCollapsedAttributeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetCollapsedAttributeCount(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetReadableLocation()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWidgetReadableLocation(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWidgetFile(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetLineNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidgetLineNumber(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "HasValidWidgetAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidWidgetAssetData(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetAssetData()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetWidgetAssetData(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWidgetDesiredSize(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetAddressAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWidgetAddressAsString(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetAddress()",
    "kind": "Method",
    "detail": "Function (FWidgetReflectorNodeBase::TPointerAsInt)",
    "insertText": "GetWidgetAddress(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "WidgetAddressToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "WidgetAddressToString(FWidgetReflectorNodeBase::TPointerAsInt InWidgetPtr)"
  },
  {
    "label": "GetWidgetForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetWidgetForegroundColor(const TSharedPtr<const SWidget>& InWidget)"
  },
  {
    "label": "GetWidgetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetEnabled(const TSharedPtr<const SWidget>& InWidget)"
  }
]