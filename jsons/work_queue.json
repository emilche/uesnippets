[
  {
    "label": "TaskOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskOrder"
  },
  {
    "label": "WorkQueueSets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueSets"
  },
  {
    "label": "keeps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "keeps"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueue"
  },
  {
    "label": "StackCapacity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StackCapacity"
  },
  {
    "label": "AssignToWorkQueueSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignToWorkQueueSets(WorkQueueSets* work_queue_sets)"
  },
  {
    "label": "AssignSetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSetIndex(size_t work_queue_set_index)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Task task)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Task task)"
  },
  {
    "label": "TaskPusher()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TaskPusher(WorkQueue* work_queue)"
  },
  {
    "label": "CreateTaskPusher()",
    "kind": "Method",
    "detail": "Function (TaskPusher)",
    "insertText": "CreateTaskPusher()"
  },
  {
    "label": "PushNonNestableTaskToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushNonNestableTaskToFront(Task task)"
  },
  {
    "label": "TakeImmediateIncomingQueueTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeImmediateIncomingQueueTasks()"
  },
  {
    "label": "TakeTaskFromWorkQueue()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "TakeTaskFromWorkQueue()"
  },
  {
    "label": "RemoveAllCanceledTasksFromFront()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllCanceledTasksFromFront()"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertFence(Fence fence)"
  },
  {
    "label": "InsertFenceSilently()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFenceSilently(Fence fence)"
  },
  {
    "label": "RemoveFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFence()"
  },
  {
    "label": "MaybeShrinkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeShrinkQueue()"
  },
  {
    "label": "PopTaskForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTaskForTesting()"
  },
  {
    "label": "ConfigureCapacityFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureCapacityFieldTrial()"
  },
  {
    "label": "IsDifferentWorkQueueCapacitiesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDifferentWorkQueueCapacitiesEnabled()"
  },
  {
    "label": "GetStackCapacityChoice()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetStackCapacityChoice()"
  },
  {
    "label": "RemoveAllCancelledTasksFromFrontImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllCancelledTasksFromFrontImpl()"
  },
  {
    "label": "InsertFenceImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertFenceImpl(Fence fence)"
  }
]