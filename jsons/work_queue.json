[
  {
    "label": "TaskOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskOrder"
  },
  {
    "label": "WorkQueueSets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueSets"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueue"
  },
  {
    "label": "StackCapacity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StackCapacity"
  },
  {
    "label": "WorkQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_WORK_QUEUE_H_ # define BASE_TASK_SEQUENCE_MANAGER_WORK_QUEUE_H_ # include \" base / base_export . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / sequence_manager / fence . h \" # include \" base / task / sequence_manager / sequenced_task_source . h \" # include \" base / task / sequence_manager / task_queue_impl . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { class TaskOrder ; namespace internal { class WorkQueueSets ; class BASE_EXPORT WorkQueue { public : using QueueType = internal::TaskQueueImpl::WorkQueueType ;)",
    "insertText": "WorkQueue(TaskQueueImpl* task_queue, const char* name, QueueType queue_type)"
  },
  {
    "label": "WorkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkQueue(const WorkQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WorkQueue&)",
    "insertText": "operator(const WorkQueue&)"
  },
  {
    "label": "WorkQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WorkQueue()"
  },
  {
    "label": "AssignToWorkQueueSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignToWorkQueueSets(WorkQueueSets* work_queue_sets)"
  },
  {
    "label": "AssignSetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSetIndex(size_t work_queue_set_index)"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::List)",
    "insertText": "AsValue(TimeTicks now)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "GetFrontTaskOrder()",
    "kind": "Method",
    "detail": "Function (} absl::optional<TaskOrder>)",
    "insertText": "GetFrontTaskOrder()"
  },
  {
    "label": "GetFrontTask()",
    "kind": "Method",
    "detail": "Function (const Task*)",
    "insertText": "GetFrontTask()"
  },
  {
    "label": "GetBackTask()",
    "kind": "Method",
    "detail": "Function (const Task*)",
    "insertText": "GetBackTask()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Task task)"
  },
  {
    "label": "TaskPusher()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT TaskPusher { public :)",
    "insertText": "TaskPusher(const TaskPusher&)"
  },
  {
    "label": "TaskPusher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskPusher(TaskPusher&& other)"
  },
  {
    "label": "TaskPusher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskPusher()"
  },
  {
    "label": "TaskPusher()",
    "kind": "Method",
    "detail": "Function (private : class WorkQueue ;)",
    "insertText": "TaskPusher(WorkQueue* work_queue)"
  },
  {
    "label": "CreateTaskPusher()",
    "kind": "Method",
    "detail": "Function (RAW_PTR_EXCLUSION WorkQueue* work_queue_ ; const bool was_empty_ ; } ; TaskPusher)",
    "insertText": "CreateTaskPusher()"
  },
  {
    "label": "PushNonNestableTaskToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushNonNestableTaskToFront(Task task)"
  },
  {
    "label": "TakeImmediateIncomingQueueTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeImmediateIncomingQueueTasks()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Capacity()"
  },
  {
    "label": "TakeTaskFromWorkQueue()",
    "kind": "Method",
    "detail": "Function (} Task)",
    "insertText": "TakeTaskFromWorkQueue()"
  },
  {
    "label": "RemoveAllCanceledTasksFromFront()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllCanceledTasksFromFront()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "name()"
  },
  {
    "label": "queue_type()",
    "kind": "Method",
    "detail": "Function (heap_handle_ = handle ; } QueueType)",
    "insertText": "queue_type()"
  },
  {
    "label": "InsertFenceSilently()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFenceSilently(Fence fence)"
  },
  {
    "label": "RemoveFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFence()"
  },
  {
    "label": "BlockedByFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlockedByFence()"
  },
  {
    "label": "MaybeShrinkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeShrinkQueue()"
  },
  {
    "label": "PopTaskForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTaskForTesting()"
  },
  {
    "label": "CollectTasksOlderThan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectTasksOlderThan(TaskOrder reference, std::vector<const Task*>* result)"
  },
  {
    "label": "ConfigureCapacityFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureCapacityFieldTrial()"
  },
  {
    "label": "IsDifferentWorkQueueCapacitiesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDifferentWorkQueueCapacitiesEnabled()"
  },
  {
    "label": "GetStackCapacityChoice()",
    "kind": "Method",
    "detail": "Function (private : enum StackCapacity : size_t { kSmall = 4,kMedium = 1 6,kLarge = 2 4,kDefault = 8,} ; size_t)",
    "insertText": "GetStackCapacityChoice()"
  },
  {
    "label": "RemoveAllCancelledTasksFromFrontImpl()",
    "kind": "Method",
    "detail": "Function (template<size_t stack_capacity> bool)",
    "insertText": "RemoveAllCancelledTasksFromFrontImpl()"
  },
  {
    "label": "InsertFenceImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertFenceImpl(Fence fence)"
  }
]