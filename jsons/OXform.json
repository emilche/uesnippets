[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Data"
  },
  {
    "label": "OXformSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OXform_h # define Alembic_AbcGeom_OXform_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / XformSample . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { const double kXFORM_DELTA_TOLERANCE = 1 . 0 e - 1 2 ; class ALEMBIC_EXPORT OXformSchema : public Abc::OSchema<XformSchemaInfo> { public : typedef Abc::OSchema<XformSchemaInfo> super_type ; typedef OXformSchema this_type ; typedef XformSample sample_type ;)",
    "insertText": "OXformSchema()"
  },
  {
    "label": "OXformSchema()",
    "kind": "Method",
    "detail": "Function (m_numChannels = 0 ; m_numOps = 0 ; m_useArrayProp = false ; m_isIdentity = true ; })",
    "insertText": "OXformSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OXformSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OXformSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(XformSample &ioSamp)"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "getArbGeomParams()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getArbGeomParams()"
  },
  {
    "label": "getUserProperties()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getUserProperties()"
  },
  {
    "label": "getChildBoundsProperty()",
    "kind": "Method",
    "detail": "Function (Abc::OBox3dProperty)",
    "insertText": "getChildBoundsProperty()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(const AbcA::index_t iTSIndex)"
  },
  {
    "label": "setChannelValues()",
    "kind": "Method",
    "detail": "Function (std::size_t m_numChannels ; std::size_t m_numOps ; bool m_useArrayProp { false } ; AbcA::DataType m_arrayValuesDataType ; Alembic::Util::Dimensions m_arraySampleDimensions ; void)",
    "insertText": "setChannelValues(const std::vector<double> &iVals)"
  }
]