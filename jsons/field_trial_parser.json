[
  {
    "label": "FieldTrialParameterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialParameterInterface"
  },
  {
    "label": "FieldTrialParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialParameter"
  },
  {
    "label": "FieldTrialConstrained",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialConstrained"
  },
  {
    "label": "AbstractFieldTrialEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbstractFieldTrialEnum"
  },
  {
    "label": "FieldTrialEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialEnum"
  },
  {
    "label": "FieldTrialOptional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialOptional"
  },
  {
    "label": "FieldTrialFlag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialFlag"
  },
  {
    "label": "FieldTrialParameterInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_FIELD_TRIAL_PARSER_H_ # define RTC_BASE_EXPERIMENTS_FIELD_TRIAL_PARSER_H_ # include<stdint . h> # include<initializer_list> # include<map> # include<set> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" namespace webrtc { class FieldTrialParameterInterface { public : ~)",
    "insertText": "FieldTrialParameterInterface()"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "key()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FieldTrialParameterInterface&)",
    "insertText": "operator(const FieldTrialParameterInterface&)"
  },
  {
    "label": "FieldTrialParameterInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldTrialParameterInterface(absl::string_view key)"
  },
  {
    "label": "ParseFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFieldTrial(std::initializer_list<FieldTrialParameterInterface*> fields, absl::string_view trial_string)"
  },
  {
    "label": "MarkAsUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsUsed()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (used_ = true ; } bool)",
    "insertText": "Parse(absl::optional<std::string> str_value)"
  },
  {
    "label": "ParseDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseDone()"
  },
  {
    "label": "ParseTypedParameter()",
    "kind": "Method",
    "detail": "Function (template<T> absl::optional<T>)",
    "insertText": "ParseTypedParameter(absl::string_view)"
  },
  {
    "label": "FieldTrialParameter()",
    "kind": "Method",
    "detail": "Function (template<T> class FieldTrialParameter : public FieldTrialParameterInterface { public :)",
    "insertText": "FieldTrialParameter(absl::string_view key, T default_value) : FieldTrialParameterInterface(key), value_(default_value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "operator()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (absl::optional<T> value = ParseTypedParameter<)",
    "insertText": "T(*str_value)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (value_ = value .)",
    "insertText": "value()"
  },
  {
    "label": "AbstractFieldTrialEnum()",
    "kind": "Method",
    "detail": "Function (value_ =* value ; return true ; } } return false ; } private : T value_ ; absl::optional<T> lower_limit_ ; absl::optional<T> upper_limit_ ; } ; class AbstractFieldTrialEnum : public FieldTrialParameterInterface { public :)",
    "insertText": "AbstractFieldTrialEnum(absl::string_view key, int default_value, std::map<std::string, int> mapping)"
  },
  {
    "label": "AbstractFieldTrialEnum()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AbstractFieldTrialEnum()"
  },
  {
    "label": "AbstractFieldTrialEnum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbstractFieldTrialEnum(const AbstractFieldTrialEnum&)"
  },
  {
    "label": "FieldTrialEnum()",
    "kind": "Method",
    "detail": "Function (protected : int value_ ; std::map<std::string,int> enum_mapping_ ; std::set<int> valid_values_ ; } ; template<T> class FieldTrialEnum : public AbstractFieldTrialEnum { public :)",
    "insertText": "FieldTrialEnum(absl::string_view key, T default_value, std::map<std::string, T> mapping) : AbstractFieldTrialEnum(key, static_cast<int>(default_value), ToIntMap(mapping))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "ToIntMap()",
    "kind": "Method",
    "detail": "Function (} private : std::map<std::string,int>)",
    "insertText": "ToIntMap(std::map<std::string, T> mapping)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,int> res ;)",
    "insertText": "for(const auto& it : mapping) res[it.first] = static_cast<int>(it.second)"
  },
  {
    "label": "FieldTrialOptional()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FieldTrialOptional(absl::string_view key, absl::optional<T> default_value) : FieldTrialParameterInterface(key), value_(default_value)"
  },
  {
    "label": "GetOptional()",
    "kind": "Method",
    "detail": "Function (} absl::optional<T>)",
    "insertText": "GetOptional()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "FieldTrialFlag()",
    "kind": "Method",
    "detail": "Function (} else { value_ = absl::nullopt ; } return true ; } private : absl::optional<T> value_ ; } ; class FieldTrialFlag : public FieldTrialParameterInterface { public :)",
    "insertText": "FieldTrialFlag(absl::string_view key)"
  },
  {
    "label": "FieldTrialFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldTrialFlag(absl::string_view key, bool default_value)"
  },
  {
    "label": "ParseOptionalParameter()",
    "kind": "Method",
    "detail": "Function (private : bool value_ ; } ; template<T> absl::optional<absl::optional<T>>)",
    "insertText": "ParseOptionalParameter(absl::string_view str)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto parsed = ParseTypedParameter<)",
    "insertText": "T(str)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (template<> absl::optional<double> ParseTypedParameter<)",
    "insertText": "double(absl::string_view str)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (template<> absl::optional<int> ParseTypedParameter<)",
    "insertText": "int(absl::string_view str)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (template<> absl::optional<unsigned> ParseTypedParameter<)",
    "insertText": "unsigned(absl::string_view str)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (template<> absl::optional<std::string> ParseTypedParameter<)",
    "insertText": "string(absl::string_view str)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<> absl::optional<absl::optional<bool>> ParseTypedParameter<absl::optional<)",
    "insertText": "bool(absl::string_view str)"
  }
]