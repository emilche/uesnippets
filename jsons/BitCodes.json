[
  {
    "label": "StandardWidths",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StandardWidths"
  },
  {
    "label": "FixedAbbrevIDs",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FixedAbbrevIDs"
  },
  {
    "label": "StandardBlockIDs",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StandardBlockIDs"
  },
  {
    "label": "BlockInfoCodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BlockInfoCodes"
  },
  {
    "label": "BitCodeAbbrevOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitCodeAbbrevOp"
  },
  {
    "label": "Encoding",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Encoding"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "BitCodeAbbrev",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitCodeAbbrev"
  },
  {
    "label": "RefCountedBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedBase"
  },
  {
    "label": "BitCodeAbbrevOp()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_BITCODE_BITCODES_H # define LLVM_BITCODE_BITCODES_H # include \" llvm / ADT / IntrusiveRefCntPtr . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include<cassert> namespace llvm { namespace bitc { enum StandardWidths { BlockIDWidth = 8,CodeLenWidth = 4,BlockSizeWidth = 3 2 } ; enum FixedAbbrevIDs { END_BLOCK = 0,ENTER_SUBBLOCK = 1,DEFINE_ABBREV = 2,UNABBREV_RECORD = 3,FIRST_APPLICATION_ABBREV = 4 } ; enum StandardBlockIDs { BLOCKINFO_BLOCK_ID = 0,FIRST_APPLICATION_BLOCKID = 8 } ; enum BlockInfoCodes { BLOCKINFO_CODE_SETBID = 1,BLOCKINFO_CODE_BLOCKNAME = 2,BLOCKINFO_CODE_SETRECORDNAME = 3 } ; } class BitCodeAbbrevOp { uint64_t Val ; bool IsLiteral : 1 ; unsigned Enc : 3 ; public : enum Encoding { Fixed = 1,VBR = 2,Array = 3,Char6 = 4,Blob = 5 } ;)",
    "insertText": "BitCodeAbbrevOp(uint64_t V) : Val(V), IsLiteral(true)"
  },
  {
    "label": "BitCodeAbbrevOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitCodeAbbrevOp(Encoding E, uint64_t Data = 0) : Val(Data), IsLiteral(false), Enc(E)"
  },
  {
    "label": "isLiteral()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiteral()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isLiteral())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isEncoding())"
  },
  {
    "label": "getEncodingData()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getEncodingData()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isEncoding() && hasEncodingData())"
  },
  {
    "label": "hasEncodingData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasEncodingData(Encoding E)"
  },
  {
    "label": "isChar6()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isChar6(char C)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Not a value Char6 character!\")"
  },
  {
    "label": "DecodeChar6()",
    "kind": "Method",
    "detail": "Function (} char)",
    "insertText": "DecodeChar6(unsigned V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((V & ~63) == 0 && \"Not a Char6 encoded character!\")"
  },
  {
    "label": "BitCodeAbbrev()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct isPodLike<BitCodeAbbrevOp> { const bool value = true ; } ; class BitCodeAbbrev : public RefCountedBase<BitCodeAbbrev> { SmallVector<BitCodeAbbrevOp,3 2> OperandList ; ~)",
    "insertText": "BitCodeAbbrev()"
  },
  {
    "label": "getNumOperandInfos()",
    "kind": "Method",
    "detail": "Function (class RefCountedBase<BitCodeAbbrev> ; public : unsigned)",
    "insertText": "getNumOperandInfos()"
  },
  {
    "label": "getOperandInfo()",
    "kind": "Method",
    "detail": "Function (} const BitCodeAbbrevOp&)",
    "insertText": "getOperandInfo(unsigned N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (OperandList .)",
    "insertText": "push_back(OpInfo)"
  }
]