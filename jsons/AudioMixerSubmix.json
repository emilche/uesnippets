[
  {
    "label": "FOnSubmixEnvelopeBP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnSubmixEnvelopeBP"
  },
  {
    "label": "USoundEffectSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmix"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "IAudioMixerEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerEffect"
  },
  {
    "label": "FMixerSourceVoice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceVoice"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "EMixerSourceSubmixSendStage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMixerSourceSubmixSendStage"
  },
  {
    "label": "FSubmixVoiceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmixVoiceData"
  },
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FChildSubmixInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChildSubmixInfo"
  },
  {
    "label": "AUDIOMIXER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AUDIOMIXER_API"
  },
  {
    "label": "FSubmixEffectFadeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmixEffectFadeInfo"
  },
  {
    "label": "FSoundfieldEffectProcessorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldEffectProcessorData"
  },
  {
    "label": "FSoundfieldStreams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldStreams"
  },
  {
    "label": "FEndpointData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndpointData"
  },
  {
    "label": "FSpectralAnalysisBandInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectralAnalysisBandInfo"
  },
  {
    "label": "FSpectrumAnalysisDelegateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectrumAnalysisDelegateInfo"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioBusSubsystem . h \" # include \" AudioMixer . h \" # include \" AudioDefines . h \" # include \" CoreMinimal . h \" # include \" SampleBuffer . h \" # include \" IAudioEndpoint . h \" # include \" ISoundfieldEndpoint . h \" # include \" Sound / SoundSubmix . h \" # include \" Sound / SoundModulationDestination . h \" # include \" DSP / EnvelopeFollower . h \" # include \" DSP / MultithreadedPatching . h \" # include \" DSP / SpectrumAnalyzer . h \" # include \" Templates / SharedPointer . h \" # include \" AudioDynamicParameter . h \" # include \" Stats / Stats . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" IAudioLinkFactory . h \")",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Graph\"), STAT_AudioMixerSubmixes, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Graph Endpoint\"), STAT_AudioMixerEndpointSubmixes, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Graph Child Processing\"), STAT_AudioMixerSubmixChildren, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Graph Source Mixing\"), STAT_AudioMixerSubmixSource, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Graph Effect Processing\"), STAT_AudioMixerSubmixEffectProcessing, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Buffer Listeners\"), STAT_AudioMixerSubmixBufferListeners, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Soundfield Children\"), STAT_AudioMixerSubmixSoundfieldChildren, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Soundfield Sources\"), STAT_AudioMixerSubmixSoundfieldSources, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submix Soundfield Processors\"), STAT_AudioMixerSubmixSoundfieldProcessors, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "FSubmixVoiceData()",
    "kind": "Method",
    "detail": "Function (class FOnSubmixEnvelopeBP ; class USoundEffectSubmix ; class USoundSubmix ; class USoundSubmixBase ; class USoundModulatorBase ; namespace Audio { class IAudioMixerEffect ; class FMixerSourceVoice ; class FMixerDevice ; enum EMixerSourceSubmixSendStage { PostDistanceAttenuation,PreDistanceAttenuation,} ; struct FSubmixVoiceData { float SendLevel ; EMixerSourceSubmixSendStage SubmixSendStage ;)",
    "insertText": "FSubmixVoiceData() : SendLevel(1.0f) , SubmixSendStage(EMixerSourceSubmixSendStage::PostDistanceAttenuation)"
  },
  {
    "label": "FChildSubmixInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FMixerSubmix ; struct FChildSubmixInfo : FNoncopyable { TWeakPtr<FMixerSubmix,ESPMode::ThreadSafe> SubmixPtr ; TUniquePtr<ISoundfieldEncoderStream> Encoder ; TUniquePtr<ISoundfieldTranscodeStream> Transcoder ; TUniquePtr<ISoundfieldAudioPacket> IncomingPacketToTranscode ;)",
    "insertText": "FChildSubmixInfo()"
  },
  {
    "label": "FChildSubmixInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChildSubmixInfo(TWeakPtr<FMixerSubmix, ESPMode::ThreadSafe> SubmixWeakPtr) : SubmixPtr(SubmixWeakPtr)"
  },
  {
    "label": "FMixerSubmix()",
    "kind": "Method",
    "detail": "Function (} } ; class FMixerSubmix { public :)",
    "insertText": "FMixerSubmix(FMixerDevice* InMixerDevice)"
  },
  {
    "label": "FMixerSubmix()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerSubmix()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const USoundSubmixBase* InSoundSubmix, bool bAllowReInit = true)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetId()"
  },
  {
    "label": "AddChildSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildSubmix(TWeakPtr<FMixerSubmix, ESPMode::ThreadSafe> Submix)"
  },
  {
    "label": "RemoveChildSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildSubmix(TWeakPtr<FMixerSubmix, ESPMode::ThreadSafe> SubmixWeakPtr)"
  },
  {
    "label": "RegisterAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAudioBus(const Audio::FAudioBusKey& InAudioBusKey, Audio::FPatchInput&& InPatchInput)"
  },
  {
    "label": "UnregisterAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAudioBus(const Audio::FAudioBusKey& InAudioBusKey)"
  },
  {
    "label": "SetOutputVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputVolume(float InOutputLevel)"
  },
  {
    "label": "SetDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDryLevel(float InDryLevel)"
  },
  {
    "label": "SetWetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWetLevel(float InWetLevel)"
  },
  {
    "label": "UpdateModulationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulationSettings(const TSet<TObjectPtr<USoundModulatorBase>>& InOutputModulators, const TSet<TObjectPtr<USoundModulatorBase>>& InWetLevelModulators, const TSet<TObjectPtr<USoundModulatorBase>>& InDryLevelModulators)"
  },
  {
    "label": "SetModulationBaseLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationBaseLevels(float InVolumeModBaseDb, float InWetModeBaseDb, float InDryModBaseDb)"
  },
  {
    "label": "GetOutputVolumeDestination()",
    "kind": "Method",
    "detail": "Function (FModulationDestination*)",
    "insertText": "GetOutputVolumeDestination()"
  },
  {
    "label": "GetWetVolumeDestination()",
    "kind": "Method",
    "detail": "Function (FModulationDestination*)",
    "insertText": "GetWetVolumeDestination()"
  },
  {
    "label": "GetSubmixChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSubmixChannels()"
  },
  {
    "label": "GetParentSubmix()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FMixerSubmix,ESPMode::ThreadSafe>)",
    "insertText": "GetParentSubmix()"
  },
  {
    "label": "GetNumSourceVoices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSourceVoices()"
  },
  {
    "label": "GetNumEffects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumEffects()"
  },
  {
    "label": "GetSizeOfSubmixChain()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSizeOfSubmixChain()"
  },
  {
    "label": "AddOrSetSourceVoice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrSetSourceVoice(FMixerSourceVoice* InSourceVoice, const float SendLevel, EMixerSourceSubmixSendStage InSubmixSendStage)"
  },
  {
    "label": "AddPatch()",
    "kind": "Method",
    "detail": "Function (FPatchOutputStrongPtr)",
    "insertText": "AddPatch(float InGain)"
  },
  {
    "label": "RemoveSourceVoice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSourceVoice(FMixerSourceVoice* InSourceVoice)"
  },
  {
    "label": "AddSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSoundEffectSubmix(FSoundEffectSubmixPtr InSoundEffectSubmix)"
  },
  {
    "label": "RemoveSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundEffectSubmix(uint32 SubmixPresetId)"
  },
  {
    "label": "RemoveSoundEffectSubmixAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundEffectSubmixAtIndex(int32 InIndex)"
  },
  {
    "label": "ClearSoundEffectSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundEffectSubmixes()"
  },
  {
    "label": "SetSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixEffectChainOverride(const TArray<FSoundEffectSubmixPtr>& InSubmixEffectPresetChain, float InFadeTimeSec)"
  },
  {
    "label": "ClearSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubmixEffectChainOverride(float InFadeTimeSec)"
  },
  {
    "label": "ReplaceSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSoundEffectSubmix(int32 InIndex, FSoundEffectSubmixPtr InEffectInstance)"
  },
  {
    "label": "SetBackgroundMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundMuted(bool bInMuted)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(FAlignedFloatBuffer& OutAudio)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(ISoundfieldAudioPacket& OutputAudio)"
  },
  {
    "label": "SendAudioToSubmixBufferListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendAudioToSubmixBufferListeners(FAlignedFloatBuffer& OutAudioBuffer)"
  },
  {
    "label": "ProcessAudioAndSendToEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioAndSendToEndpoint()"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "GetNumOutputChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumOutputChannels()"
  },
  {
    "label": "GetNumChainEffects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChainEffects()"
  },
  {
    "label": "GetSubmixEffect()",
    "kind": "Method",
    "detail": "Function (FSoundEffectSubmixPtr)",
    "insertText": "GetSubmixEffect(const int32 InIndex)"
  },
  {
    "label": "SetSoundfieldFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundfieldFactory(ISoundfieldFactory* InSoundfieldFactory)"
  },
  {
    "label": "SetupSoundfieldStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundfieldStreams(const USoundfieldEncodingSettingsBase* SoundfieldSettings, TArray<USoundfieldEffectBase*>& Processors, ISoundfieldFactory* InSoundfieldFactory)"
  },
  {
    "label": "TeardownSoundfieldStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownSoundfieldStreams()"
  },
  {
    "label": "SetupEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupEndpoint(IAudioEndpointFactory* InFactory, const UAudioEndpointSettingsBase* InSettings)"
  },
  {
    "label": "SetupEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupEndpoint(ISoundfieldEndpointFactory* InFactory, const USoundfieldEndpointSettingsBase* InSettings)"
  },
  {
    "label": "UpdateEndpointSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEndpointSettings(TUniquePtr<IAudioEndpointSettingsProxy>&& InSettings)"
  },
  {
    "label": "UpdateEndpointSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEndpointSettings(TUniquePtr<ISoundfieldEndpointSettingsProxy>&& InSettings)"
  },
  {
    "label": "OnStartRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartRecordingOutput(float ExpectedDuration)"
  },
  {
    "label": "OnStopRecordingOutput()",
    "kind": "Method",
    "detail": "Function (FAlignedFloatBuffer&)",
    "insertText": "OnStopRecordingOutput(float& OutNumChannels, float& OutSampleRate)"
  },
  {
    "label": "PauseRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecordingOutput()"
  },
  {
    "label": "ResumeRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeRecordingOutput()"
  },
  {
    "label": "RegisterBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> BufferListener)"
  },
  {
    "label": "UnregisterBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> BufferListener)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEnvelopeFollowing(int32 AttackTime, int32 ReleaseTime)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEnvelopeFollowing()"
  },
  {
    "label": "AddEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvelopeFollowerDelegate(const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "RemoveEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnvelopeFollowerDelegate(const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "StartSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectrumAnalysis(const FSoundSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "StopSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectrumAnalysis()"
  },
  {
    "label": "AddSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpectralAnalysisDelegate(const FSoundSpectrumAnalyzerDelegateSettings& InDelegateSettings, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "RemoveSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpectralAnalysisDelegate(const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "GetMagnitudeForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMagnitudeForFrequencies(const TArray<float>& InFrequencies, TArray<float>& OutMagnitudes)"
  },
  {
    "label": "GetPhaseForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPhaseForFrequencies(const TArray<float>& InFrequencies, TArray<float>& OutPhases)"
  },
  {
    "label": "BroadcastDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDelegates()"
  },
  {
    "label": "IsSoundfieldSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoundfieldSubmix()"
  },
  {
    "label": "IsDefaultEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultEndpointSubmix()"
  },
  {
    "label": "IsExternalEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalEndpointSubmix()"
  },
  {
    "label": "IsSoundfieldEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoundfieldEndpointSubmix()"
  },
  {
    "label": "IsDummyEndpointSubmix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDummyEndpointSubmix()"
  },
  {
    "label": "IsRenderingAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderingAudio()"
  },
  {
    "label": "SetAutoDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoDisable(bool bInAutoDisable)"
  },
  {
    "label": "SetAutoDisableTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoDisableTime(float InAutoDisableTime)"
  },
  {
    "label": "GetKeyForSubmixEncoding()",
    "kind": "Method",
    "detail": "Function (FSoundfieldEncodingKey)",
    "insertText": "GetKeyForSubmixEncoding()"
  },
  {
    "label": "GetSoundfieldFactory()",
    "kind": "Method",
    "detail": "Function (ISoundfieldFactory*)",
    "insertText": "GetSoundfieldFactory()"
  },
  {
    "label": "GetSoundfieldSettings()",
    "kind": "Method",
    "detail": "Function (ISoundfieldEncodingSettingsProxy&)",
    "insertText": "GetSoundfieldSettings()"
  },
  {
    "label": "GetInitializationParamsForSoundfieldStream()",
    "kind": "Method",
    "detail": "Function (FAudioPluginInitializationParams)",
    "insertText": "GetInitializationParamsForSoundfieldStream()"
  },
  {
    "label": "GetDefaultPositionalDataForAudioDevice()",
    "kind": "Method",
    "detail": "Function (FSoundfieldSpeakerPositionalData)",
    "insertText": "GetDefaultPositionalDataForAudioDevice()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FMixerSubmix,ESPMode::ThreadSafe>)",
    "insertText": "GetParent()"
  },
  {
    "label": "DownmixBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DownmixBuffer(const int32 InChannels, const FAlignedFloatBuffer& InBuffer, const int32 OutChannels, FAlignedFloatBuffer& OutNewBuffer)"
  },
  {
    "label": "MixBufferDownToMono()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixBufferDownToMono(const FAlignedFloatBuffer& InBuffer, int32 NumInputChannels, FAlignedFloatBuffer& OutBuffer)"
  },
  {
    "label": "SetupSoundfieldEncodersForChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundfieldEncodersForChildren()"
  },
  {
    "label": "SetupSoundfieldEncodingForChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundfieldEncodingForChild(FChildSubmixInfo& InChild)"
  },
  {
    "label": "SetupSoundfieldStreamForParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSoundfieldStreamForParent()"
  },
  {
    "label": "SetUpSoundfieldPositionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpSoundfieldPositionalData(const TSharedPtr<Audio::FMixerSubmix, ESPMode::ThreadSafe>& InParentSubmix)"
  },
  {
    "label": "MixInSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixInSource(const ISoundfieldAudioPacket& InAudio, const ISoundfieldEncodingSettingsProxy& InSettings, ISoundfieldAudioPacket& PacketToSumTo)"
  },
  {
    "label": "UpdateListenerRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateListenerRotation(const FQuat& InRotation)"
  },
  {
    "label": "MixInChildSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixInChildSubmix(FChildSubmixInfo& Child, ISoundfieldAudioPacket& PacketToSumTo)"
  },
  {
    "label": "GetSoundfieldFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSoundfieldFormat()"
  },
  {
    "label": "GetTranscoderForChildSubmix()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldTranscodeStream>)",
    "insertText": "GetTranscoderForChildSubmix(const TSharedPtr<Audio::FMixerSubmix, ESPMode::ThreadSafe>& InChildSubmix)"
  },
  {
    "label": "PumpCommandQueue()",
    "kind": "Method",
    "detail": "Function (protected : struct FSubmixBufferListenerInfo { ISubmixBufferListener* Listener = nullptr ; FString Descriptor ; } ; void)",
    "insertText": "PumpCommandQueue()"
  },
  {
    "label": "SubmixCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmixCommand(TFunction<void()> Command)"
  },
  {
    "label": "GenerateEffectChainAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateEffectChainAudio(FSoundEffectSubmixInputData& InputData, const FAlignedFloatBuffer& InAudioBuffer, TArray<FSoundEffectSubmixPtr>& InEffectChain, FAlignedFloatBuffer& OutBuffer)"
  },
  {
    "label": "FDynamicParameter()",
    "kind": "Method",
    "detail": "Function (FString SubmixName ; uint32 Id ; TWeakPtr<FMixerSubmix,ESPMode::ThreadSafe> ParentSubmix ; TMap<uint32,FChildSubmixInfo> ChildSubmixes ; struct FSubmixEffectFadeInfo { TArray<FSoundEffectSubmixPtr> EffectChain ; FDynamicParameter FadeVolume =)",
    "insertText": "FDynamicParameter(1.0f)"
  },
  {
    "label": "FSoundfieldEffectProcessorData()",
    "kind": "Method",
    "detail": "Function (bool bIsCurrentChain = false ; bool bIsBaseEffect = false ; } ; TArray<FSubmixEffectFadeInfo> EffectChains ; FAlignedFloatBuffer EffectChainOutputBuffer ; FMixerDevice* MixerDevice ; TMap<FMixerSourceVoice*,FSubmixVoiceData> MixerSourceVoices ; FAlignedFloatBuffer ScratchBuffer ; FAlignedFloatBuffer SubmixChainMixBuffer ; FAlignedFloatBuffer InputBuffer ; FAlignedFloatBuffer DownmixedBuffer ; FAlignedFloatBuffer SourceInputBuffer ; int32 NumChannels ; int32 NumSamples ; struct FSoundfieldEffectProcessorData { TUniquePtr<ISoundfieldEffectSettingsProxy> Settings ; TUniquePtr<ISoundfieldEffectInstance> Processor ;)",
    "insertText": "FSoundfieldEffectProcessorData(ISoundfieldFactory* InFactory, ISoundfieldEncodingSettingsProxy& InSettings, USoundfieldEffectBase* InProcessorBase)"
  },
  {
    "label": "PrivateGetNewProcessor()",
    "kind": "Method",
    "detail": "Function (Processor = InProcessorBase ->)",
    "insertText": "PrivateGetNewProcessor(InSettings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const USoundfieldEffectSettingsBase* ProcessorSettings = InProcessorBase -> Settings ;)",
    "insertText": "if(!ProcessorSettings)"
  },
  {
    "label": "PrivateGetDefaultSettings()",
    "kind": "Method",
    "detail": "Function (ProcessorSettings = InProcessorBase ->)",
    "insertText": "PrivateGetDefaultSettings()"
  },
  {
    "label": "PrivateGetProxy()",
    "kind": "Method",
    "detail": "Function (} Settings = ProcessorSettings ->)",
    "insertText": "PrivateGetProxy()"
  },
  {
    "label": "FSoundfieldStreams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundfieldStreams { ISoundfieldFactory* Factory ; TUniquePtr<ISoundfieldEncoderStream> DownmixedChildrenEncoder ; TUniquePtr<ISoundfieldDecoderStream> ParentDecoder ; FSoundfieldSpeakerPositionalData CachedPositionalData ; TUniquePtr<ISoundfieldMixerStream> Mixer ; TUniquePtr<ISoundfieldAudioPacket> MixedDownAudio ; TUniquePtr<ISoundfieldEncodingSettingsProxy> Settings ; TArray<FSoundfieldEffectProcessorData> EffectProcessors ; FCriticalSection StreamsLock ;)",
    "insertText": "FSoundfieldStreams() : Factory(nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FEndpointData()",
    "kind": "Method",
    "detail": "Function (} } ; FSoundfieldStreams SoundfieldStreams ; struct FEndpointData { Audio::FPatchInput Input ; TUniquePtr<IAudioEndpoint> NonSoundfieldEndpoint ; TUniquePtr<ISoundfieldEndpoint> SoundfieldEndpoint ; FAlignedFloatBuffer AudioBuffer ; FAlignedFloatBuffer ResampledAudioBuffer ; FAlignedFloatBuffer DownmixedResampledAudioBuffer ; FAlignedFloatBuffer DownmixChannelMap ; int32 NumChannels ; float SampleRate ; Audio::FResampler Resampler ; bool bShouldResample ; TUniquePtr<ISoundfieldAudioPacket> AudioPacket ;)",
    "insertText": "FEndpointData() : NumChannels(0) , SampleRate(0.0f) , bShouldResample(false)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; FEndpointData EndpointData ; float CurrentOutputVolume ; float TargetOutputVolume ; float CurrentWetLevel ; float TargetWetLevel ; float CurrentDryLevel ; float TargetDryLevel ; FModulationDestination VolumeMod ; FModulationDestination DryLevelMod ; FModulationDestination WetLevelMod ; float VolumeModBaseDb = 0 . f ; float DryModBaseDb = MIN_VOLUME_DECIBELS ; float WetModBaseDb = 0 . f ; float VolumeModifier = 1 . f ; float DryLevelModifier = 1 . f ; float WetLevelModifier = 1 . f ; float EnvelopeValues [ AUDIO_MIXER_MAX_OUTPUT_CHANNELS ] ; Audio::FEnvelopeFollower EnvelopeFollower ; int32 EnvelopeNumChannels ; FCriticalSection EnvelopeCriticalSection ; FCriticalSection SpectrumAnalyzerCriticalSection ; FSoundSpectrumAnalyzerSettings SpectrumAnalyzerSettings ; TSharedPtr<FAsyncSpectrumAnalyzer,ESPMode::ThreadSafe> SpectrumAnalyzer ; FAlignedFloatBuffer MonoMixBuffer ; FAlignedFloatBuffer DryChannelBuffer ; TQueue<TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FSpectrumAnalysisDelegateInfo()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<ISubmixBufferListener>> BufferListenerPtrs ; FCriticalSection BufferListenerCriticalSection ; FAlignedFloatBuffer RecordingData ; int32 NumSubmixEffects ; uint8 bIsRecording : 1 ; uint8 bIsBackgroundMuted : 1 ; uint8 bAutoDisable : 1 ; uint8 bIsSilent : 1 ; uint8 bIsCurrentlyDisabled : 1 ; double AutoDisableTime ; double SilenceTimeStartSeconds ; FThreadSafeBool bIsEnvelopeFollowing ; FOnSubmixEnvelope OnSubmixEnvelope ; struct FSpectralAnalysisBandInfo { FInlineEnvelopeFollower EnvelopeFollower ; } ; struct FSpectrumAnalysisDelegateInfo { FSoundSpectrumAnalyzerDelegateSettings DelegateSettings ; FOnSubmixSpectralAnalysis OnSubmixSpectralAnalysis ; TUniquePtr<ISpectrumBandExtractor> SpectrumBandExtractor ; TArray<FSpectralAnalysisBandInfo> SpectralBands ; float LastUpdateTime = - 1 . 0 f ; float UpdateDelta = 0 . 0 f ;)",
    "insertText": "FSpectrumAnalysisDelegateInfo()"
  },
  {
    "label": "FSpectrumAnalysisDelegateInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSpectrumAnalysisDelegateInfo(FSpectrumAnalysisDelegateInfo&& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OnSubmixSpectralAnalysis = Other . OnSubmixSpectralAnalysis ; SpectrumBandExtractor .)",
    "insertText": "Reset(Other.SpectrumBandExtractor.Release())"
  },
  {
    "label": "SendAudioToRegisteredAudioBuses()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FSpectrumAnalysisDelegateInfo> SpectralAnalysisDelegates ; FThreadSafeBool bIsSpectrumAnalyzing ; FCriticalSection RecordingCriticalSection ; FCriticalSection EffectChainMutationCriticalSection ; TWeakObjectPtr<const USoundSubmixBase> OwningSubmixObject ; Audio::FPatchSplitter PatchSplitter ; TUniquePtr<IAudioLink> AudioLinkInstance ; class FMixerDevice ; private : void)",
    "insertText": "SendAudioToRegisteredAudioBuses(FAlignedFloatBuffer& OutAudioBuffer)"
  },
  {
    "label": "UnregisterBufferListenerInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterBufferListenerInternal(UPTRINT ListenerBufferPtr)"
  },
  {
    "label": "PruneSubmixBufferListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneSubmixBufferListeners()"
  }
]