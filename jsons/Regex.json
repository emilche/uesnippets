[
  {
    "label": "llvm_regex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "llvm_regex"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "Regex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Regex"
  },
  {
    "label": "Regex()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_REGEX_H # define LLVM_SUPPORT_REGEX_H # include<string> struct llvm_regex ; namespace llvm { class StringRef ; template<T> class SmallVectorImpl ; class Regex { public : enum { NoFlags = 0,IgnoreCase = 1,Newline = 2,BasicRegex = 4 } ;)",
    "insertText": "Regex(StringRef Regex, unsigned Flags = NoFlags)"
  },
  {
    "label": "Regex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Regex(const Regex &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Regex&)",
    "insertText": "operator(Regex regex)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(preg, regex.preg)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(error, regex.error)"
  },
  {
    "label": "Regex()",
    "kind": "Method",
    "detail": "Function (preg = regex . preg ; error = regex . error ; regex . preg = nullptr ; } ~)",
    "insertText": "Regex()"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValid(std::string &Error)"
  },
  {
    "label": "getNumMatches()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumMatches()"
  },
  {
    "label": "match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "match(StringRef String, SmallVectorImpl<StringRef> *Matches = nullptr)"
  },
  {
    "label": "sub()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "sub(StringRef Repl, StringRef String, std::string *Error = nullptr)"
  },
  {
    "label": "isLiteralERE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLiteralERE(StringRef Str)"
  },
  {
    "label": "escape()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "escape(StringRef String)"
  }
]