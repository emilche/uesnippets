[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_RANGES_UNINITIALIZED_ALGORITHMS_H # define _LIBCPP___MEMORY_RANGES_UNINITIALIZED_ALGORITHMS_H # include<__algorithm / in_out_result . h> # include<__concepts / constructible . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iterator_traits . h> # include<__iterator / readable_traits . h> # include<__memory / concepts . h> # include<__memory / uninitialized_algorithms . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __uninitialized_default_construct { struct __fn { template<__nothrow_forward_iterator _ForwardIterator,__nothrow_sentinel_for<_ForwardIterator> _Sentinel> requires default_initializable<iter_value_t<_ForwardIterator>> _ForwardIterator)",
    "insertText": "operator()(_ForwardIterator __first, _Sentinel __last)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_ForwardIterator>> ; return _VSTD::__uninitialized_default_construct<)",
    "insertText": "_ValueType(_VSTD::move(__first), _VSTD::move(__last))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__nothrow_forward_range _ForwardRange> requires default_initializable<range_value_t<_ForwardRange>> borrowed_iterator_t<_ForwardRange>)",
    "insertText": "operator()(_ForwardRange&& __range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto uninitialized_default_construct = __uninitialized_default_construct::__fn { } ; } namespace __uninitialized_default_construct_n { struct __fn { template<__nothrow_forward_iterator _ForwardIterator> requires default_initializable<iter_value_t<_ForwardIterator>> _ForwardIterator)",
    "insertText": "operator()(_ForwardIterator __first, iter_difference_t<_ForwardIterator> __n)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_ForwardIterator>> ; return _VSTD::__uninitialized_default_construct_n<)",
    "insertText": "_ValueType(_VSTD::move(__first), __n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto uninitialized_value_construct_n = __uninitialized_value_construct_n::__fn { } ; } namespace __uninitialized_fill { struct __fn { template<__nothrow_forward_iterator _ForwardIterator,__nothrow_sentinel_for<_ForwardIterator> _Sentinel,class _Tp> requires constructible_from<iter_value_t<_ForwardIterator>,const _Tp&> _ForwardIterator)",
    "insertText": "operator()(_ForwardIterator __first, _Sentinel __last, const _Tp& __x)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_ForwardIterator>> ; return _VSTD::__uninitialized_fill<)",
    "insertText": "_ValueType(_VSTD::move(__first), _VSTD::move(__last), __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__nothrow_forward_range _ForwardRange,class _Tp> requires constructible_from<range_value_t<_ForwardRange>,const _Tp&> borrowed_iterator_t<_ForwardRange>)",
    "insertText": "operator()(_ForwardRange&& __range, const _Tp& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto uninitialized_fill = __uninitialized_fill::__fn { } ; } namespace __uninitialized_fill_n { struct __fn { template<__nothrow_forward_iterator _ForwardIterator,class _Tp> requires constructible_from<iter_value_t<_ForwardIterator>,const _Tp&> _ForwardIterator)",
    "insertText": "operator()(_ForwardIterator __first, iter_difference_t<_ForwardIterator> __n, const _Tp& __x)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_ForwardIterator>> ; return _VSTD::__uninitialized_fill_n<)",
    "insertText": "_ValueType(_VSTD::move(__first), __n, __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto uninitialized_fill_n = __uninitialized_fill_n::__fn { } ; } template<class _InputIterator,class _OutputIterator> using uninitialized_copy_result = in_out_result<_InputIterator,_OutputIterator> ; namespace __uninitialized_copy { struct __fn { template<input_iterator _InputIterator,sentinel_for<_InputIterator> _Sentinel1,__nothrow_forward_iterator _OutputIterator,__nothrow_sentinel_for<_OutputIterator> _Sentinel2> requires constructible_from<iter_value_t<_OutputIterator>,iter_reference_t<_InputIterator>> uninitialized_copy_result<_InputIterator,_OutputIterator>)",
    "insertText": "operator()(_InputIterator __ifirst, _Sentinel1 __ilast, _OutputIterator __ofirst, _Sentinel2 __olast)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_OutputIterator>> ; auto __result = _VSTD::__uninitialized_copy<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), _VSTD::move(__ilast), _VSTD::move(__ofirst), _VSTD::move(__olast))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _InputRange,__nothrow_forward_range _OutputRange> requires constructible_from<range_value_t<_OutputRange>,range_reference_t<_InputRange>> uninitialized_copy_result<borrowed_iterator_t<_InputRange>,borrowed_iterator_t<_OutputRange>>)",
    "insertText": "operator()( _InputRange&& __in_range, _OutputRange&& __out_range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto uninitialized_copy = __uninitialized_copy::__fn { } ; } template<class _InputIterator,class _OutputIterator> using uninitialized_copy_n_result = in_out_result<_InputIterator,_OutputIterator> ; namespace __uninitialized_copy_n { struct __fn { template<input_iterator _InputIterator,__nothrow_forward_iterator _OutputIterator,__nothrow_sentinel_for<_OutputIterator> _Sentinel> requires constructible_from<iter_value_t<_OutputIterator>,iter_reference_t<_InputIterator>> uninitialized_copy_n_result<_InputIterator,_OutputIterator>)",
    "insertText": "operator()(_InputIterator __ifirst, iter_difference_t<_InputIterator> __n, _OutputIterator __ofirst, _Sentinel __olast)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_OutputIterator>> ; auto __result = _VSTD::__uninitialized_copy_n<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), __n, _VSTD::move(__ofirst), _VSTD::move(__olast))"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (using _ValueType = remove_reference_t<iter_reference_t<_OutputIterator>> ; auto)",
    "insertText": "__iter_move(auto&& __iter) -> decltype(auto)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (} ; auto __result = _VSTD::__uninitialized_move<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), _VSTD::move(__ilast), _VSTD::move(__ofirst), _VSTD::move(__olast), __iter_move)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _InputRange,__nothrow_forward_range _OutputRange> requires constructible_from<range_value_t<_OutputRange>,range_reference_t<_InputRange>> uninitialized_move_result<borrowed_iterator_t<_InputRange>,borrowed_iterator_t<_OutputRange>>)",
    "insertText": "operator()(_InputRange&& __in_range, _OutputRange&& __out_range)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (} ; auto __result = _VSTD::__uninitialized_move_n<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), __n, _VSTD::move(__ofirst), _VSTD::move(__olast), __iter_move)"
  }
]