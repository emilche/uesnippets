[
  {
    "label": "FSlateDynamicImageBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDynamicImageBrush"
  },
  {
    "label": "FStarshipCoreStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStarshipCoreStyle"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStyle"
  },
  {
    "label": "FStyleFonts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStyleFonts"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / AppStyle . h \" struct FSlateDynamicImageBrush ; class FStarshipCoreStyle { public : TSharedRef<class ISlateStyle>)",
    "insertText": "Create()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const ISlateStyle&)",
    "insertText": "Get()"
  },
  {
    "label": "GetCoreStyle()",
    "kind": "Method",
    "detail": "Function (} const ISlateStyle&)",
    "insertText": "GetCoreStyle()"
  },
  {
    "label": "GetDefaultFont()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FCompositeFont>)",
    "insertText": "GetDefaultFont()"
  },
  {
    "label": "GetDefaultFontStyle()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetDefaultFontStyle(const FName InTypefaceFontName, const float InSize, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "SetSelectorColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectorColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetInactiveSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInactiveSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetPressedSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPressedSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetFocusBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusBrush(FSlateBrush* NewBrush)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, FName TextureName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, const ANSICHAR* Specifier, class UTexture2D* TextureResource, FName TextureName)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, class UTexture2D* TextureResource, FName TextureName)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (const int32 RegularTextSize = 1 0 ; const int32 SmallTextSize = 8 ; bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} private : class FStyle ; void)",
    "insertText": "SetStyle(const TSharedRef<class ISlateStyle>& NewStyle)"
  },
  {
    "label": "SetupColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupColors(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupTextStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTextStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupButtonStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupButtonStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupComboButtonStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupComboButtonStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupCheckboxStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCheckboxStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupDockingStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDockingStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupColorPickerStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupColorPickerStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupTableViewStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTableViewStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "SetupMultiboxStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMultiboxStyles(TSharedRef<FStyle>& Style)"
  },
  {
    "label": "FStyleFonts()",
    "kind": "Method",
    "detail": "Function (Instance = MakeUnique<)",
    "insertText": "FStyleFonts(FStyleFonts())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(Instance.Get())"
  },
  {
    "label": "FStyleFonts()",
    "kind": "Method",
    "detail": "Function (} const FSlateFontInfo Normal ; const FSlateFontInfo NormalItalic ; const FSlateFontInfo NormalBold ; const FSlateFontInfo NormalBoldItalic ; const FSlateFontInfo Small ; const FSlateFontInfo SmallBold ; const FSlateFontInfo Large ; const FSlateFontInfo LargeBold ; const FSlateFontInfo HeadingMedium ; const FSlateFontInfo HeadingSmall ; const FSlateFontInfo HeadingExtraSmall ; private :)",
    "insertText": "FStyleFonts()"
  }
]