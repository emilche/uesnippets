[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_macos_common_H)"
  },
  {
    "label": "__TBB_Yield()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_macos_common_H # include<sched . h> # define)",
    "insertText": "__TBB_Yield() sched_yield() #include <unistd.h> #define __TBB_Sleep(v) usleep((v)*1000) #include <sys/types.h> #include <sys/sysctl.h> static inline int __TBB_macos_available_cpu()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int name [ 2 ] = { CTL_HW,HW_AVAILCPU } ; int ncpu ; size_t size =)",
    "insertText": "sizeof(ncpu)"
  },
  {
    "label": "sysctl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sysctl(name, 2, &ncpu, &size, NULL, 0)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(tbb::internal::is_aligned(ptr,8), \"address not properly aligned for macOS* atomics\")"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (int64_t*)",
    "insertText": "address(int64_t*)"
  },
  {
    "label": "OSAtomicAdd64()",
    "kind": "Method",
    "detail": "Function (# if __TBB_WORDSIZE = = 8 int64_t snapshot =* address ; # else int64_t snapshot =)",
    "insertText": "OSAtomicAdd64(0, address)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(snapshot!=comparand)"
  },
  {
    "label": "__TBB_control_consistency_helper()",
    "kind": "Method",
    "detail": "Function (} return comparand ; } # define __TBB_machine_cmpswp8 __TBB_machine_cmpswp8_OsX # endif # if __TBB_UnknownArchitecture # ifndef __TBB_WORDSIZE # define __TBB_WORDSIZE __SIZEOF_POINTER__ # endif # ifdef __TBB_ENDIANNESS # elif __BIG_ENDIAN__ # define __TBB_ENDIANNESS __TBB_ENDIAN_BIG # elif __LITTLE_ENDIAN__ # define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE # else # define __TBB_ENDIANNESS __TBB_ENDIAN_UNSUPPORTED # endif # define)",
    "insertText": "__TBB_control_consistency_helper() OSMemoryBarrier() #define __TBB_acquire_consistency_helper() OSMemoryBarrier() #define __TBB_release_consistency_helper() OSMemoryBarrier() #define __TBB_full_memory_fence() OSMemoryBarrier() static inline int32_t __TBB_machine_cmpswp4(volatile void *ptr, int32_t value, int32_t comparand)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(tbb::internal::is_aligned(ptr,4), \"address not properly aligned for macOS atomics\")"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (int32_t*)",
    "insertText": "address(int32_t*)"
  },
  {
    "label": "__TBB_machine_fetchadd4()",
    "kind": "Method",
    "detail": "Function (} return comparand ; } int32_t)",
    "insertText": "__TBB_machine_fetchadd4(volatile void *ptr, int32_t addend)"
  },
  {
    "label": "__TBB_machine_fetchadd8()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "__TBB_machine_fetchadd8(volatile void *ptr, int64_t addend)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(tbb::internal::is_aligned(ptr,8), \"address not properly aligned for macOS atomics\")"
  }
]