[
  {
    "label": "FTickableEditorObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickableEditorObject"
  },
  {
    "label": "FTickableCookObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickableCookObject"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreGlobals . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / AssertionMacros . h \" # include \" Tickable . h \" class FTickableEditorObject : public FTickableObjectBase { public :)",
    "insertText": "UE_NONCOPYABLE(FTickableEditorObject)"
  },
  {
    "label": "TickObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickObjects(const float DeltaSeconds)"
  },
  {
    "label": "GetStatics()",
    "kind": "Method",
    "detail": "Function (FTickableStatics& Statics =)",
    "insertText": "GetStatics()"
  },
  {
    "label": "SimpleTickObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTickObjects(Statics, [DeltaSeconds](FTickableObjectBase* TickableObject) { ObjectBeingTicked = TickableObject; TickableObject->Tick(DeltaSeconds); ObjectBeingTicked = nullptr; })"
  },
  {
    "label": "FTickableEditorObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTickableEditorObject()"
  },
  {
    "label": "QueueTickableObjectForAdd()",
    "kind": "Method",
    "detail": "Function (Statics .)",
    "insertText": "QueueTickableObjectForAdd(this)"
  },
  {
    "label": "SetTickTypeForTickableObject()",
    "kind": "Method",
    "detail": "Function (Statics .)",
    "insertText": "SetTickTypeForTickableObject(this, ETickableTickType::Never)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} ; class FTickableCookObject : public FTickableObjectBase { public :)",
    "insertText": "UE_NONCOPYABLE(FTickableCookObject)"
  },
  {
    "label": "TickObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickObjects(const float DeltaSeconds, bool bCookComplete)"
  },
  {
    "label": "SimpleTickObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTickObjects(Statics, [DeltaSeconds, bCookComplete](FTickableObjectBase* TickableObject) { FTickableCookObject* CookTickableObject = static_cast<FTickableCookObject*>(TickableObject); ObjectBeingTicked = TickableObject; CookTickableObject->TickCook(DeltaSeconds, bCookComplete); ObjectBeingTicked = nullptr; })"
  },
  {
    "label": "FTickableCookObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTickableCookObject()"
  },
  {
    "label": "TickCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickCook(float DeltaTime, bool bCookCompete)"
  }
]