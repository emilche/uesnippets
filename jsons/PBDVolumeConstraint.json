[
  {
    "label": "FPBDVolumeConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDVolumeConstraint"
  },
  {
    "label": "FPBDVolumeConstraint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDVolumeConstraintBase . h \" namespace Chaos::Softs { class FPBDVolumeConstraint : public FPBDVolumeConstraintBase { typedef FPBDVolumeConstraintBase Base ; public :)",
    "insertText": "FPBDVolumeConstraint(const FSolverParticles& InParticles, TArray<TVec3<int32>>&& InConstraints, const FSolverReal InStiffness = (FSolverReal)1.) : Base(InParticles, MoveTemp(InConstraints), InStiffness)"
  },
  {
    "label": "FPBDVolumeConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDVolumeConstraint()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal dt)"
  },
  {
    "label": "GetWeights()",
    "kind": "Method",
    "detail": "Function (const TArray<FSolverReal> W =)",
    "insertText": "GetWeights(InParticles, (FSolverReal)1.)"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (const TArray<FSolverVec3> Grads =)",
    "insertText": "GetGradients(InParticles)"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "GetScalingFactor(InParticles, Grads, W)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i)"
  }
]