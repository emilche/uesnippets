[
  {
    "label": "SProjectLauncherCultureListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherCultureListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Models / ProjectLauncherModel . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Views / SListView . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherCultureListRow \" class SProjectLauncherCultureListRow : public SMultiColumnTableRow<TSharedPtr<FString>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherCultureListRow)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, HighlightString) SLATE_ARGUMENT(TSharedPtr<STableViewBase>, OwnerTableView) SLATE_ARGUMENT(TSharedPtr<FString>, CultureName) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (HighlightString = InArgs . _HighlightString ; CultureName = InArgs . _CultureName ; Model = InModel ; SMultiColumnTableRow<TSharedPtr<FString>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InArgs._OwnerTableView.ToSharedRef())"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "HandleCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } private : void)",
    "insertText": "HandleCheckBoxCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetSelectedProfile()",
    "kind": "Method",
    "detail": "Function (ILauncherProfilePtr SelectedProfile = Model ->)",
    "insertText": "GetSelectedProfile()"
  },
  {
    "label": "AddCookedCulture()",
    "kind": "Method",
    "detail": "Function (SelectedProfile ->)",
    "insertText": "AddCookedCulture(*CultureName)"
  },
  {
    "label": "RemoveCookedCulture()",
    "kind": "Method",
    "detail": "Function (} else { SelectedProfile ->)",
    "insertText": "RemoveCookedCulture(*CultureName)"
  },
  {
    "label": "HandleCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} } } ECheckBoxState)",
    "insertText": "HandleCheckBoxIsChecked()"
  }
]