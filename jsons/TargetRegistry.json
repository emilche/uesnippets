[
  {
    "label": "AsmPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmPrinter"
  },
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCAsmParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmParser"
  },
  {
    "label": "MCCodeEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeEmitter"
  },
  {
    "label": "MCCodeGenInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeGenInfo"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCDisassembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDisassembler"
  },
  {
    "label": "MCInstrAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrAnalysis"
  },
  {
    "label": "MCInstPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstPrinter"
  },
  {
    "label": "MCInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrInfo"
  },
  {
    "label": "MCRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfo"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "MCSymbolizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolizer"
  },
  {
    "label": "MCRelocationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRelocationInfo"
  },
  {
    "label": "MCTargetAsmParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetAsmParser"
  },
  {
    "label": "MCTargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetOptions"
  },
  {
    "label": "MCTargetStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetStreamer"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetOptions"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "raw_pwrite_stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_pwrite_stream"
  },
  {
    "label": "formatted_raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "formatted_raw_ostream"
  },
  {
    "label": "Target",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Target"
  },
  {
    "label": "TargetRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetRegistry"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "RegisterTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterTarget"
  },
  {
    "label": "MCAsmInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfoImpl"
  },
  {
    "label": "RegisterMCAsmInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCAsmInfo"
  },
  {
    "label": "RegisterMCAsmInfoFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCAsmInfoFn"
  },
  {
    "label": "MCCodeGenInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeGenInfoImpl"
  },
  {
    "label": "RegisterMCCodeGenInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCCodeGenInfo"
  },
  {
    "label": "RegisterMCCodeGenInfoFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCCodeGenInfoFn"
  },
  {
    "label": "MCInstrInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrInfoImpl"
  },
  {
    "label": "RegisterMCInstrInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCInstrInfo"
  },
  {
    "label": "RegisterMCInstrInfoFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCInstrInfoFn"
  },
  {
    "label": "MCInstrAnalysisImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrAnalysisImpl"
  },
  {
    "label": "RegisterMCInstrAnalysis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCInstrAnalysis"
  },
  {
    "label": "RegisterMCInstrAnalysisFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCInstrAnalysisFn"
  },
  {
    "label": "MCRegisterInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfoImpl"
  },
  {
    "label": "RegisterMCRegInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCRegInfo"
  },
  {
    "label": "RegisterMCRegInfoFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCRegInfoFn"
  },
  {
    "label": "MCSubtargetInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfoImpl"
  },
  {
    "label": "RegisterMCSubtargetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCSubtargetInfo"
  },
  {
    "label": "RegisterMCSubtargetInfoFn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCSubtargetInfoFn"
  },
  {
    "label": "TargetMachineImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachineImpl"
  },
  {
    "label": "RegisterTargetMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterTargetMachine"
  },
  {
    "label": "MCAsmBackendImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackendImpl"
  },
  {
    "label": "RegisterMCAsmBackend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCAsmBackend"
  },
  {
    "label": "MCAsmParserImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmParserImpl"
  },
  {
    "label": "RegisterMCAsmParser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCAsmParser"
  },
  {
    "label": "AsmPrinterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmPrinterImpl"
  },
  {
    "label": "RegisterAsmPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterAsmPrinter"
  },
  {
    "label": "MCCodeEmitterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeEmitterImpl"
  },
  {
    "label": "RegisterMCCodeEmitter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterMCCodeEmitter"
  },
  {
    "label": "createNullStreamer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_TARGETREGISTRY_H # define LLVM_SUPPORT_TARGETREGISTRY_H # include \" llvm - c / Disassembler . h \" # include \" llvm / ADT / Triple . h \" # include \" llvm / Support / CodeGen . h \" # include \" llvm / Support / FormattedStream . h \" # include<cassert> # include<memory> # include<string> namespace llvm { class AsmPrinter ; class MCAsmBackend ; class MCAsmInfo ; class MCAsmParser ; class MCCodeEmitter ; class MCCodeGenInfo ; class MCContext ; class MCDisassembler ; class MCInstrAnalysis ; class MCInstPrinter ; class MCInstrInfo ; class MCRegisterInfo ; class MCStreamer ; class MCSubtargetInfo ; class MCSymbolizer ; class MCRelocationInfo ; class MCTargetAsmParser ; class MCTargetOptions ; class MCTargetStreamer ; class TargetMachine ; class TargetOptions ; class raw_ostream ; class raw_pwrite_stream ; class formatted_raw_ostream ; MCStreamer*)",
    "insertText": "createNullStreamer(MCContext &Ctx)"
  },
  {
    "label": "createAsmStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer*)",
    "insertText": "createAsmStreamer(MCContext &Ctx, std::unique_ptr<formatted_raw_ostream> OS, bool isVerboseAsm, bool useDwarfDirectory, MCInstPrinter *InstPrint, MCCodeEmitter *CE, MCAsmBackend *TAB, bool ShowInst)"
  },
  {
    "label": "createELFStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer*)",
    "insertText": "createELFStreamer(MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *CE, bool RelaxAll)"
  },
  {
    "label": "createMachOStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer*)",
    "insertText": "createMachOStreamer(MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *CE, bool RelaxAll, bool DWARFMustBeAtTheEnd, bool LabelSections = false)"
  },
  {
    "label": "createMCRelocationInfo()",
    "kind": "Method",
    "detail": "Function (MCRelocationInfo*)",
    "insertText": "createMCRelocationInfo(const Triple &TT, MCContext &Ctx)"
  },
  {
    "label": "createMCSymbolizer()",
    "kind": "Method",
    "detail": "Function (MCSymbolizer*)",
    "insertText": "createMCSymbolizer(const Triple &TT, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp, void *DisInfo, MCContext *Ctx, std::unique_ptr<MCRelocationInfo> &&RelInfo)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (class Target { public : struct TargetRegistry ; typedef)",
    "insertText": "bool(*ArchMatchFnTy)(Triple::ArchType Arch)"
  },
  {
    "label": "MCAsmInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCAsmInfo(*MCAsmInfoCtorFnTy)(const MCRegisterInfo &MRI, const Triple &TT)"
  },
  {
    "label": "MCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCCodeGenInfo(*MCCodeGenInfoCtorFnTy)(const Triple &TT, Reloc::Model RM, CodeModel::Model CM, CodeGenOpt::Level OL)"
  },
  {
    "label": "MCInstrInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCInstrInfo(*MCInstrInfoCtorFnTy)(void)"
  },
  {
    "label": "MCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCInstrAnalysis(*MCInstrAnalysisCtorFnTy)(const MCInstrInfo *Info)"
  },
  {
    "label": "MCRegisterInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCRegisterInfo(*MCRegInfoCtorFnTy)(const Triple &TT)"
  },
  {
    "label": "MCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCSubtargetInfo(*MCSubtargetInfoCtorFnTy)(const Triple &TT, StringRef CPU, StringRef Features)"
  },
  {
    "label": "TargetMachine()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "TargetMachine(*TargetMachineCtorTy)( const Target &T, const Triple &TT, StringRef CPU, StringRef Features, const TargetOptions &Options, Reloc::Model RM, CodeModel::Model CM, CodeGenOpt::Level OL)"
  },
  {
    "label": "AsmPrinter()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "AsmPrinter(*AsmPrinterCtorTy)( TargetMachine &TM, std::unique_ptr<MCStreamer> &&Streamer)"
  },
  {
    "label": "MCAsmBackend()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCAsmBackend(*MCAsmBackendCtorTy)(const Target &T, const MCRegisterInfo &MRI, const Triple &TT, StringRef CPU)"
  },
  {
    "label": "MCTargetAsmParser()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCTargetAsmParser(*MCAsmParserCtorTy)( MCSubtargetInfo &STI, MCAsmParser &P, const MCInstrInfo &MII, const MCTargetOptions &Options)"
  },
  {
    "label": "MCDisassembler()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCDisassembler(*MCDisassemblerCtorTy)(const Target &T, const MCSubtargetInfo &STI, MCContext &Ctx)"
  },
  {
    "label": "MCInstPrinter()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCInstPrinter(*MCInstPrinterCtorTy)(const Triple &T, unsigned SyntaxVariant, const MCAsmInfo &MAI, const MCInstrInfo &MII, const MCRegisterInfo &MRI)"
  },
  {
    "label": "MCCodeEmitter()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCCodeEmitter(*MCCodeEmitterCtorTy)(const MCInstrInfo &II, const MCRegisterInfo &MRI, MCContext &Ctx)"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCStreamer(*ELFStreamerCtorTy)(const Triple &T, MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter, bool RelaxAll)"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCStreamer(*MachOStreamerCtorTy)(MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter, bool RelaxAll, bool DWARFMustBeAtTheEnd)"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCStreamer(*COFFStreamerCtorTy)(MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter, bool RelaxAll)"
  },
  {
    "label": "MCTargetStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCTargetStreamer(*NullTargetStreamerCtorTy)(MCStreamer &S)"
  },
  {
    "label": "MCTargetStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCTargetStreamer(*AsmTargetStreamerCtorTy)( MCStreamer &S, formatted_raw_ostream &OS, MCInstPrinter *InstPrint, bool IsVerboseAsm)"
  },
  {
    "label": "MCTargetStreamer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCTargetStreamer(*ObjectTargetStreamerCtorTy)( MCStreamer &S, const MCSubtargetInfo &STI)"
  },
  {
    "label": "MCRelocationInfo()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCRelocationInfo(*MCRelocationInfoCtorTy)(const Triple &TT, MCContext &Ctx)"
  },
  {
    "label": "MCSymbolizer()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "MCSymbolizer(*MCSymbolizerCtorTy)( const Triple &TT, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp, void *DisInfo, MCContext *Ctx, std::unique_ptr<MCRelocationInfo> &&RelInfo)"
  },
  {
    "label": "Target()",
    "kind": "Method",
    "detail": "Function (private : Target* Next ; ArchMatchFnTy ArchMatchFn ; const char* Name ; const char* ShortDesc ; bool HasJIT ; MCAsmInfoCtorFnTy MCAsmInfoCtorFn ; MCCodeGenInfoCtorFnTy MCCodeGenInfoCtorFn ; MCInstrInfoCtorFnTy MCInstrInfoCtorFn ; MCInstrAnalysisCtorFnTy MCInstrAnalysisCtorFn ; MCRegInfoCtorFnTy MCRegInfoCtorFn ; MCSubtargetInfoCtorFnTy MCSubtargetInfoCtorFn ; TargetMachineCtorTy TargetMachineCtorFn ; MCAsmBackendCtorTy MCAsmBackendCtorFn ; MCAsmParserCtorTy MCAsmParserCtorFn ; AsmPrinterCtorTy AsmPrinterCtorFn ; MCDisassemblerCtorTy MCDisassemblerCtorFn ; MCInstPrinterCtorTy MCInstPrinterCtorFn ; MCCodeEmitterCtorTy MCCodeEmitterCtorFn ; COFFStreamerCtorTy COFFStreamerCtorFn ; MachOStreamerCtorTy MachOStreamerCtorFn ; ELFStreamerCtorTy ELFStreamerCtorFn ; NullTargetStreamerCtorTy NullTargetStreamerCtorFn ; AsmTargetStreamerCtorTy AsmTargetStreamerCtorFn ; ObjectTargetStreamerCtorTy ObjectTargetStreamerCtorFn ; MCRelocationInfoCtorTy MCRelocationInfoCtorFn ; MCSymbolizerCtorTy MCSymbolizerCtorFn ; public :)",
    "insertText": "Target() : COFFStreamerCtorFn(nullptr), MachOStreamerCtorFn(nullptr), ELFStreamerCtorFn(nullptr), NullTargetStreamerCtorFn(nullptr), AsmTargetStreamerCtorFn(nullptr), ObjectTargetStreamerCtorFn(nullptr), MCRelocationInfoCtorFn(nullptr), MCSymbolizerCtorFn(nullptr)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} const Target*)",
    "insertText": "getNext()"
  },
  {
    "label": "createMCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (} MCCodeGenInfo*)",
    "insertText": "createMCCodeGenInfo(StringRef TT, Reloc::Model RM, CodeModel::Model CM, CodeGenOpt::Level OL)"
  },
  {
    "label": "createMCInstrInfo()",
    "kind": "Method",
    "detail": "Function (} MCInstrInfo*)",
    "insertText": "createMCInstrInfo()"
  },
  {
    "label": "createMCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (} MCInstrAnalysis*)",
    "insertText": "createMCInstrAnalysis(const MCInstrInfo *Info)"
  },
  {
    "label": "createMCRegInfo()",
    "kind": "Method",
    "detail": "Function (} MCRegisterInfo*)",
    "insertText": "createMCRegInfo(StringRef TT)"
  },
  {
    "label": "createMCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (} MCSubtargetInfo*)",
    "insertText": "createMCSubtargetInfo(StringRef TheTriple, StringRef CPU, StringRef Features)"
  },
  {
    "label": "createTargetMachine()",
    "kind": "Method",
    "detail": "Function (} TargetMachine*)",
    "insertText": "createTargetMachine(StringRef TT, StringRef CPU, StringRef Features, const TargetOptions &Options, Reloc::Model RM = Reloc::Default, CodeModel::Model CM = CodeModel::Default, CodeGenOpt::Level OL = CodeGenOpt::Default)"
  },
  {
    "label": "createMCAsmBackend()",
    "kind": "Method",
    "detail": "Function (} MCAsmBackend*)",
    "insertText": "createMCAsmBackend(const MCRegisterInfo &MRI, StringRef TheTriple, StringRef CPU)"
  },
  {
    "label": "createMCAsmParser()",
    "kind": "Method",
    "detail": "Function (} MCTargetAsmParser*)",
    "insertText": "createMCAsmParser(MCSubtargetInfo &STI, MCAsmParser &Parser, const MCInstrInfo &MII, const MCTargetOptions &Options)"
  },
  {
    "label": "createAsmPrinter()",
    "kind": "Method",
    "detail": "Function (} AsmPrinter*)",
    "insertText": "createAsmPrinter(TargetMachine &TM, std::unique_ptr<MCStreamer> &&Streamer)"
  },
  {
    "label": "createMCDisassembler()",
    "kind": "Method",
    "detail": "Function (} MCDisassembler*)",
    "insertText": "createMCDisassembler(const MCSubtargetInfo &STI, MCContext &Ctx)"
  },
  {
    "label": "createMCInstPrinter()",
    "kind": "Method",
    "detail": "Function (} MCInstPrinter*)",
    "insertText": "createMCInstPrinter(const Triple &T, unsigned SyntaxVariant, const MCAsmInfo &MAI, const MCInstrInfo &MII, const MCRegisterInfo &MRI)"
  },
  {
    "label": "createMCCodeEmitter()",
    "kind": "Method",
    "detail": "Function (} MCCodeEmitter*)",
    "insertText": "createMCCodeEmitter(const MCInstrInfo &II, const MCRegisterInfo &MRI, MCContext &Ctx)"
  },
  {
    "label": "createMCObjectStreamer()",
    "kind": "Method",
    "detail": "Function (} MCStreamer*)",
    "insertText": "createMCObjectStreamer(const Triple &T, MCContext &Ctx, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter, const MCSubtargetInfo &STI, bool RelaxAll, bool DWARFMustBeAtTheEnd)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (MCStreamer* S ;)",
    "insertText": "switch(T.getObjectFormat())"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown object format\")"
  },
  {
    "label": "COFFStreamerCtorFn()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "COFFStreamerCtorFn(Ctx, TAB, OS, Emitter, RelaxAll)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case Triple::MachO :)",
    "insertText": "if(MachOStreamerCtorFn) S = MachOStreamerCtorFn(Ctx, TAB, OS, Emitter, RelaxAll, DWARFMustBeAtTheEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case Triple::ELF :)",
    "insertText": "if(ELFStreamerCtorFn) S = ELFStreamerCtorFn(T, Ctx, TAB, OS, Emitter, RelaxAll)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(ObjectTargetStreamerCtorFn) ObjectTargetStreamerCtorFn(*S, STI)"
  },
  {
    "label": "createAsmTargetStreamer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createAsmTargetStreamer(*S, OSRef, InstPrint, IsVerboseAsm)"
  },
  {
    "label": "createNullStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer* S =)",
    "insertText": "createNullStreamer(Ctx)"
  },
  {
    "label": "createNullTargetStreamer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createNullTargetStreamer(*S)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (MCRelocationInfoCtorTy Fn = MCRelocationInfoCtorFn ? MCRelocationInfoCtorFn : llvm::createMCRelocationInfo ; return)",
    "insertText": "Fn(Triple(TT), Ctx)"
  },
  {
    "label": "createMCSymbolizer()",
    "kind": "Method",
    "detail": "Function (} MCSymbolizer*)",
    "insertText": "createMCSymbolizer(StringRef TT, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp, void *DisInfo, MCContext *Ctx, std::unique_ptr<MCRelocationInfo> &&RelInfo)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (MCSymbolizerCtorTy Fn = MCSymbolizerCtorFn ? MCSymbolizerCtorFn : llvm::createMCSymbolizer ; return)",
    "insertText": "Fn(Triple(TT), GetOpInfo, SymbolLookUp, DisInfo, Ctx, std::move(RelInfo))"
  },
  {
    "label": "TargetRegistry()",
    "kind": "Method",
    "detail": "Function (} } ; struct TargetRegistry {)",
    "insertText": "TargetRegistry()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (class iterator { const Target* Current ;)",
    "insertText": "iterator(Target *T) : Current(T)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} struct TargetRegistry ; public : using iterator_category = std::forward_iterator_tag ; using value_type = Target ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "iterator() : Current(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const iterator &x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Current && \"Cannot increment end iterator!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Current && \"Cannot dereference end iterator!\")"
  },
  {
    "label": "printRegisteredTargetsForVersion()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "printRegisteredTargetsForVersion()"
  },
  {
    "label": "targets()",
    "kind": "Method",
    "detail": "Function (iterator_range<iterator>)",
    "insertText": "targets()"
  },
  {
    "label": "lookupTarget()",
    "kind": "Method",
    "detail": "Function (const Target*)",
    "insertText": "lookupTarget(const std::string &Triple, std::string &Error)"
  },
  {
    "label": "lookupTarget()",
    "kind": "Method",
    "detail": "Function (const Target*)",
    "insertText": "lookupTarget(const std::string &ArchName, Triple &TheTriple, std::string &Error)"
  },
  {
    "label": "RegisterTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTarget(Target &T, const char *Name, const char *ShortDesc, Target::ArchMatchFnTy ArchMatchFn, bool HasJIT = false)"
  },
  {
    "label": "RegisterMCAsmInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCAsmInfo(Target &T, Target::MCAsmInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (T . MCAsmInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterMCCodeGenInfo(Target &T, Target::MCCodeGenInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCInstrInfo()",
    "kind": "Method",
    "detail": "Function (T . MCCodeGenInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterMCInstrInfo(Target &T, Target::MCInstrInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (T . MCInstrInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterMCInstrAnalysis(Target &T, Target::MCInstrAnalysisCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCRegInfo()",
    "kind": "Method",
    "detail": "Function (T . MCInstrAnalysisCtorFn = Fn ; } void)",
    "insertText": "RegisterMCRegInfo(Target &T, Target::MCRegInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (T . MCRegInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterMCSubtargetInfo(Target &T, Target::MCSubtargetInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterTargetMachine()",
    "kind": "Method",
    "detail": "Function (T . MCSubtargetInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterTargetMachine(Target &T, Target::TargetMachineCtorTy Fn)"
  },
  {
    "label": "RegisterMCAsmBackend()",
    "kind": "Method",
    "detail": "Function (T . TargetMachineCtorFn = Fn ; } void)",
    "insertText": "RegisterMCAsmBackend(Target &T, Target::MCAsmBackendCtorTy Fn)"
  },
  {
    "label": "RegisterMCAsmParser()",
    "kind": "Method",
    "detail": "Function (T . MCAsmBackendCtorFn = Fn ; } void)",
    "insertText": "RegisterMCAsmParser(Target &T, Target::MCAsmParserCtorTy Fn)"
  },
  {
    "label": "RegisterAsmPrinter()",
    "kind": "Method",
    "detail": "Function (T . MCAsmParserCtorFn = Fn ; } void)",
    "insertText": "RegisterAsmPrinter(Target &T, Target::AsmPrinterCtorTy Fn)"
  },
  {
    "label": "RegisterMCDisassembler()",
    "kind": "Method",
    "detail": "Function (T . AsmPrinterCtorFn = Fn ; } void)",
    "insertText": "RegisterMCDisassembler(Target &T, Target::MCDisassemblerCtorTy Fn)"
  },
  {
    "label": "RegisterMCInstPrinter()",
    "kind": "Method",
    "detail": "Function (T . MCDisassemblerCtorFn = Fn ; } void)",
    "insertText": "RegisterMCInstPrinter(Target &T, Target::MCInstPrinterCtorTy Fn)"
  },
  {
    "label": "RegisterMCCodeEmitter()",
    "kind": "Method",
    "detail": "Function (T . MCInstPrinterCtorFn = Fn ; } void)",
    "insertText": "RegisterMCCodeEmitter(Target &T, Target::MCCodeEmitterCtorTy Fn)"
  },
  {
    "label": "RegisterCOFFStreamer()",
    "kind": "Method",
    "detail": "Function (T . MCCodeEmitterCtorFn = Fn ; } void)",
    "insertText": "RegisterCOFFStreamer(Target &T, Target::COFFStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterMachOStreamer()",
    "kind": "Method",
    "detail": "Function (T . COFFStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterMachOStreamer(Target &T, Target::MachOStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterELFStreamer()",
    "kind": "Method",
    "detail": "Function (T . MachOStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterELFStreamer(Target &T, Target::ELFStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterNullTargetStreamer()",
    "kind": "Method",
    "detail": "Function (T . ELFStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterNullTargetStreamer(Target &T, Target::NullTargetStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterAsmTargetStreamer()",
    "kind": "Method",
    "detail": "Function (T . NullTargetStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterAsmTargetStreamer(Target &T, Target::AsmTargetStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterObjectTargetStreamer()",
    "kind": "Method",
    "detail": "Function (T . AsmTargetStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterObjectTargetStreamer(Target &T, Target::ObjectTargetStreamerCtorTy Fn)"
  },
  {
    "label": "RegisterMCRelocationInfo()",
    "kind": "Method",
    "detail": "Function (T . ObjectTargetStreamerCtorFn = Fn ; } void)",
    "insertText": "RegisterMCRelocationInfo(Target &T, Target::MCRelocationInfoCtorTy Fn)"
  },
  {
    "label": "RegisterMCSymbolizer()",
    "kind": "Method",
    "detail": "Function (T . MCRelocationInfoCtorFn = Fn ; } void)",
    "insertText": "RegisterMCSymbolizer(Target &T, Target::MCSymbolizerCtorTy Fn)"
  },
  {
    "label": "RegisterTarget()",
    "kind": "Method",
    "detail": "Function (T . MCSymbolizerCtorFn = Fn ; } } ; template<Triple::ArchType TargetArchType = Triple::UnknownArch,bool HasJIT = false> struct RegisterTarget {)",
    "insertText": "RegisterTarget(Target &T, const char *Name, const char *Desc)"
  },
  {
    "label": "RegisterTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTarget(T, Name, Desc, &getArchMatch, HasJIT)"
  },
  {
    "label": "getArchMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getArchMatch(Triple::ArchType Arch)"
  },
  {
    "label": "RegisterMCAsmInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCAsmInfo(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCAsmInfo*)",
    "insertText": "Allocator(const MCRegisterInfo & , const Triple &TT)"
  },
  {
    "label": "RegisterMCAsmInfoFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCAsmInfoFn {)",
    "insertText": "RegisterMCAsmInfoFn(Target &T, Target::MCAsmInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCAsmInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCAsmInfo(T, Fn)"
  },
  {
    "label": "RegisterMCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCCodeGenInfoImpl> struct RegisterMCCodeGenInfo {)",
    "insertText": "RegisterMCCodeGenInfo(Target &T)"
  },
  {
    "label": "RegisterMCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCCodeGenInfo(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCCodeGenInfo*)",
    "insertText": "Allocator(const Triple & , Reloc::Model , CodeModel::Model , CodeGenOpt::Level)"
  },
  {
    "label": "RegisterMCCodeGenInfoFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCCodeGenInfoFn {)",
    "insertText": "RegisterMCCodeGenInfoFn(Target &T, Target::MCCodeGenInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCCodeGenInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCCodeGenInfo(T, Fn)"
  },
  {
    "label": "RegisterMCInstrInfo()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCInstrInfoImpl> struct RegisterMCInstrInfo {)",
    "insertText": "RegisterMCInstrInfo(Target &T)"
  },
  {
    "label": "RegisterMCInstrInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCInstrInfo(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCInstrInfo*)",
    "insertText": "Allocator()"
  },
  {
    "label": "RegisterMCInstrInfoFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCInstrInfoFn {)",
    "insertText": "RegisterMCInstrInfoFn(Target &T, Target::MCInstrInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCInstrInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCInstrInfo(T, Fn)"
  },
  {
    "label": "RegisterMCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCInstrAnalysisImpl> struct RegisterMCInstrAnalysis {)",
    "insertText": "RegisterMCInstrAnalysis(Target &T)"
  },
  {
    "label": "RegisterMCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCInstrAnalysis(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCInstrAnalysis*)",
    "insertText": "Allocator(const MCInstrInfo *Info)"
  },
  {
    "label": "RegisterMCInstrAnalysisFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCInstrAnalysisFn {)",
    "insertText": "RegisterMCInstrAnalysisFn(Target &T, Target::MCInstrAnalysisCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCInstrAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCInstrAnalysis(T, Fn)"
  },
  {
    "label": "RegisterMCRegInfo()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCRegisterInfoImpl> struct RegisterMCRegInfo {)",
    "insertText": "RegisterMCRegInfo(Target &T)"
  },
  {
    "label": "RegisterMCRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCRegInfo(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCRegisterInfo*)",
    "insertText": "Allocator(const Triple &)"
  },
  {
    "label": "RegisterMCRegInfoFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCRegInfoFn {)",
    "insertText": "RegisterMCRegInfoFn(Target &T, Target::MCRegInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCRegInfo(T, Fn)"
  },
  {
    "label": "RegisterMCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCSubtargetInfoImpl> struct RegisterMCSubtargetInfo {)",
    "insertText": "RegisterMCSubtargetInfo(Target &T)"
  },
  {
    "label": "RegisterMCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCSubtargetInfo(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCSubtargetInfo*)",
    "insertText": "Allocator(const Triple & , StringRef , StringRef)"
  },
  {
    "label": "RegisterMCSubtargetInfoFn()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegisterMCSubtargetInfoFn {)",
    "insertText": "RegisterMCSubtargetInfoFn(Target &T, Target::MCSubtargetInfoCtorFnTy Fn)"
  },
  {
    "label": "RegisterMCSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCSubtargetInfo(T, Fn)"
  },
  {
    "label": "RegisterTargetMachine()",
    "kind": "Method",
    "detail": "Function (} } ; template<class TargetMachineImpl> struct RegisterTargetMachine {)",
    "insertText": "RegisterTargetMachine(Target &T)"
  },
  {
    "label": "RegisterTargetMachine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTargetMachine(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : TargetMachine*)",
    "insertText": "Allocator(const Target &T, const Triple &TT, StringRef CPU, StringRef FS, const TargetOptions &Options, Reloc::Model RM, CodeModel::Model CM, CodeGenOpt::Level OL)"
  },
  {
    "label": "RegisterMCAsmBackend()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCAsmBackendImpl> struct RegisterMCAsmBackend {)",
    "insertText": "RegisterMCAsmBackend(Target &T)"
  },
  {
    "label": "RegisterMCAsmBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCAsmBackend(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCAsmBackend*)",
    "insertText": "Allocator(const Target &T, const MCRegisterInfo &MRI, const Triple &TheTriple, StringRef CPU)"
  },
  {
    "label": "RegisterMCAsmParser()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCAsmParserImpl> struct RegisterMCAsmParser {)",
    "insertText": "RegisterMCAsmParser(Target &T)"
  },
  {
    "label": "RegisterMCAsmParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCAsmParser(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCTargetAsmParser*)",
    "insertText": "Allocator(MCSubtargetInfo &STI, MCAsmParser &P, const MCInstrInfo &MII, const MCTargetOptions &Options)"
  },
  {
    "label": "RegisterAsmPrinter()",
    "kind": "Method",
    "detail": "Function (} } ; template<class AsmPrinterImpl> struct RegisterAsmPrinter {)",
    "insertText": "RegisterAsmPrinter(Target &T)"
  },
  {
    "label": "RegisterAsmPrinter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsmPrinter(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : AsmPrinter*)",
    "insertText": "Allocator(TargetMachine &TM, std::unique_ptr<MCStreamer> &&Streamer)"
  },
  {
    "label": "RegisterMCCodeEmitter()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MCCodeEmitterImpl> struct RegisterMCCodeEmitter {)",
    "insertText": "RegisterMCCodeEmitter(Target &T)"
  },
  {
    "label": "RegisterMCCodeEmitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMCCodeEmitter(T, &Allocator)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} private : MCCodeEmitter*)",
    "insertText": "Allocator(const MCInstrInfo & , const MCRegisterInfo & , MCContext &)"
  }
]