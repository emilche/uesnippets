[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "ISlateRunRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateRunRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "FWidgetDesiredSizeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetDesiredSizeArgs"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FSlateTextBlockLayout()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FSlateTextBlockLayout(SWidget* InOwner, FTextBlockStyle InDefaultTextStyle, const TOptional<ETextShapingMethod> InTextShapingMethod, const TOptional<ETextFlowDirection> InTextFlowDirection, const FCreateSlateTextLayout& InCreateSlateTextLayout, TSharedRef<ITextLayoutMarshaller> InMarshaller, TSharedPtr<IBreakIterator> InLineBreakPolicy)"
  },
  {
    "label": "ConditionallyUpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyUpdateTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "ConditionallyUpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyUpdateTextStyle(const FTextBlockStyle::CompareParams& InNewStyleParams)"
  },
  {
    "label": "UpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "UpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextStyle(const FTextBlockStyle::CompareParams& InNewStyleParams)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const FWidgetDesiredSizeArgs& InWidgetArgs, const float InScale)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const FWidgetDesiredSizeArgs& InWidgetArgs, const float InScale, const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const FWidgetArgs& InWidgetArgs, const float InScale, const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& InPaintArgs, const FGeometry& InAllottedGeometry, const FSlateRect& InClippingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "DirtyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLayout()"
  },
  {
    "label": "DirtyContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyContent()"
  },
  {
    "label": "OverrideTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(const TOptional<ETextOverflowPolicy> InTextOverflowPolicy)"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "UpdateTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextLayout(const FText& InText)"
  },
  {
    "label": "UpdateTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextLayout(const FString& InText)"
  },
  {
    "label": "UpdateTextHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextHighlights(const FText& InHighlightText)"
  }
]