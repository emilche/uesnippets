[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "ISlateRunRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateRunRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "FWidgetDesiredSizeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetDesiredSizeArgs"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FWidgetDesiredSizeArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Text / ITextLayoutMarshaller . h \" # include \" Framework / Text / SlateTextLayoutFactory . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; class IBreakIterator ; class ISlateRunRenderer ; enum class ETextShapingMethod : uint8 ; class FSlateTextBlockLayout { public : struct FWidgetDesiredSizeArgs {)",
    "insertText": "FWidgetDesiredSizeArgs(const FText& InText, const FText& InHighlightText, const float InWrapTextAt, const bool InAutoWrapText, const ETextWrappingPolicy InWrappingPolicy, const ETextTransformPolicy InTransformPolicy, const FMargin& InMargin, const float InLineHeightPercentage, const bool InApplyLineHeightToBottomLine, const ETextJustify::Type InJustification ) : Text(InText) , HighlightText(InHighlightText) , Margin(InMargin) , WrapTextAt(InWrapTextAt) , LineHeightPercentage(InLineHeightPercentage) , ApplyLineHeightToBottomLine(InApplyLineHeightToBottomLine) , WrappingPolicy(InWrappingPolicy) , TransformPolicy(InTransformPolicy) , Justification(InJustification) , AutoWrapText(InAutoWrapText)"
  },
  {
    "label": "FWidgetDesiredSizeArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetDesiredSizeArgs(const FText& InText, const FText& InHighlightText, const float InWrapTextAt, const bool InAutoWrapText, const ETextWrappingPolicy InWrappingPolicy, const ETextTransformPolicy InTransformPolicy, const FMargin& InMargin, const float InLineHeightPercentage, const ETextJustify::Type InJustification ) : Text(InText) , HighlightText(InHighlightText) , Margin(InMargin) , WrapTextAt(InWrapTextAt) , LineHeightPercentage(InLineHeightPercentage) , ApplyLineHeightToBottomLine(true) , WrappingPolicy(InWrappingPolicy) , TransformPolicy(InTransformPolicy) , Justification(InJustification) , AutoWrapText(InAutoWrapText)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} const FText Text =)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "FSlateTextBlockLayout()",
    "kind": "Method",
    "detail": "Function (} const TAttribute<FText>& Text ; const TAttribute<FText>& HighlightText ; const TAttribute<float>& WrapTextAt ; const TAttribute<bool>& AutoWrapText ; const TAttribute<ETextWrappingPolicy> WrappingPolicy ; const TAttribute<ETextTransformPolicy> TransformPolicy ; const TAttribute<FMargin>& Margin ; const TAttribute<float>& LineHeightPercentage ; const TAttribute<ETextJustify::Type>& Justification ; } ;)",
    "insertText": "FSlateTextBlockLayout(SWidget* InOwner, FTextBlockStyle InDefaultTextStyle, const TOptional<ETextShapingMethod> InTextShapingMethod, const TOptional<ETextFlowDirection> InTextFlowDirection, const FCreateSlateTextLayout& InCreateSlateTextLayout, TSharedRef<ITextLayoutMarshaller> InMarshaller, TSharedPtr<IBreakIterator> InLineBreakPolicy)"
  },
  {
    "label": "ConditionallyUpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyUpdateTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "ConditionallyUpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyUpdateTextStyle(const FTextBlockStyle::CompareParams& InNewStyleParams)"
  },
  {
    "label": "UpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "UpdateTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextStyle(const FTextBlockStyle::CompareParams& InNewStyleParams)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const FWidgetDesiredSizeArgs& InWidgetArgs, const float InScale)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const FWidgetDesiredSizeArgs& InWidgetArgs, const float InScale, const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "GetDesiredSize()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FVector2D)",
    "insertText": "GetDesiredSize()"
  },
  {
    "label": "GetLayoutScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLayoutScale()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& InPaintArgs, const FGeometry& InAllottedGeometry, const FSlateRect& InClippingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "DirtyLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLayout()"
  },
  {
    "label": "DirtyContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyContent()"
  },
  {
    "label": "OverrideTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(const TOptional<ETextOverflowPolicy> InTextOverflowPolicy)"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "UpdateTextLayout()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateTextLayout(const FText& InText)"
  },
  {
    "label": "UpdateTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextLayout(const FString& InText)"
  },
  {
    "label": "UpdateTextHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextHighlights(const FText& InHighlightText)"
  },
  {
    "label": "IsStyleUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStyleUpToDate(const FTextBlockStyle& NewStyle)"
  },
  {
    "label": "IsStyleUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStyleUpToDate(const FTextBlockStyle::CompareParams& InNewStyleParams)"
  },
  {
    "label": "CalculateWrappingWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateWrappingWidth()"
  }
]