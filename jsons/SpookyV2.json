[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Hash128()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Util_SpookyV2_h # define Alembic_Util_SpookyV2_h # include<Alembic / Util / Export . h> # include<Alembic / Util / PlainOldDataType . h> namespace Alembic { namespace Util { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT SpookyHash { public : void)",
    "insertText": "Hash128(const void *message, size_t length, uint64_t *hash1, uint64_t *hash2)"
  },
  {
    "label": "Hash64()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Hash64(const void *message, size_t length, uint64_t seed)"
  },
  {
    "label": "Hash128()",
    "kind": "Method",
    "detail": "Function (uint64_t hash1 = seed ;)",
    "insertText": "Hash128(message, length, &hash1, &seed)"
  },
  {
    "label": "Hash128()",
    "kind": "Method",
    "detail": "Function (uint64_t hash1 = seed,hash2 = seed ;)",
    "insertText": "Hash128(message, length, &hash1, &hash2)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(uint64_t seed1, uint64_t seed2)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const void *message, size_t length)"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Final(uint64_t *hash1, uint64_t *hash2)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Rot64(uint64_t x, int k)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Mix(const uint64_t *data, uint64_t &s0, uint64_t &s1, uint64_t &s2, uint64_t &s3, uint64_t &s4, uint64_t &s5, uint64_t &s6, uint64_t &s7, uint64_t &s8, uint64_t &s9, uint64_t &s10,uint64_t &s11)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s0 + = data [ 0 ] ; s2 ^ = s10 ; s11 ^ = s0 ; s0 =)",
    "insertText": "Rot64(s0,11)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s11 + = s1 ; s1 + = data [ 1 ] ; s3 ^ = s11 ; s0 ^ = s1 ; s1 =)",
    "insertText": "Rot64(s1,32)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s0 + = s2 ; s2 + = data [ 2 ] ; s4 ^ = s0 ; s1 ^ = s2 ; s2 =)",
    "insertText": "Rot64(s2,43)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s1 + = s3 ; s3 + = data [ 3 ] ; s5 ^ = s1 ; s2 ^ = s3 ; s3 =)",
    "insertText": "Rot64(s3,31)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s2 + = s4 ; s4 + = data [ 4 ] ; s6 ^ = s2 ; s3 ^ = s4 ; s4 =)",
    "insertText": "Rot64(s4,17)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s3 + = s5 ; s5 + = data [ 5 ] ; s7 ^ = s3 ; s4 ^ = s5 ; s5 =)",
    "insertText": "Rot64(s5,28)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s4 + = s6 ; s6 + = data [ 6 ] ; s8 ^ = s4 ; s5 ^ = s6 ; s6 =)",
    "insertText": "Rot64(s6,39)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s5 + = s7 ; s7 + = data [ 7 ] ; s9 ^ = s5 ; s6 ^ = s7 ; s7 =)",
    "insertText": "Rot64(s7,57)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s6 + = s8 ; s8 + = data [ 8 ] ; s10 ^ = s6 ; s7 ^ = s8 ; s8 =)",
    "insertText": "Rot64(s8,55)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s7 + = s9 ; s9 + = data [ 9 ] ; s11 ^ = s7 ; s8 ^ = s9 ; s9 =)",
    "insertText": "Rot64(s9,54)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s8 + = s10 ; s10 + = data [ 1 0 ] ; s0 ^ = s8 ; s9 ^ = s10 ; s10 =)",
    "insertText": "Rot64(s10,22)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (s9 + = s11 ; s11 + = data [ 1 1 ] ; s1 ^ = s9 ; s10 ^ = s11 ; s11 =)",
    "insertText": "Rot64(s11,46)"
  },
  {
    "label": "EndPartial()",
    "kind": "Method",
    "detail": "Function (s10 + = s0 ; } void)",
    "insertText": "EndPartial(uint64_t &h0, uint64_t &h1, uint64_t &h2, uint64_t &h3, uint64_t &h4, uint64_t &h5, uint64_t &h6, uint64_t &h7, uint64_t &h8, uint64_t &h9, uint64_t &h10,uint64_t &h11)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h11 + = h1 ; h2 ^ = h11 ; h1 =)",
    "insertText": "Rot64(h1,44)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h2 ; h3 ^ = h0 ; h2 =)",
    "insertText": "Rot64(h2,15)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h1 + = h3 ; h4 ^ = h1 ; h3 =)",
    "insertText": "Rot64(h3,34)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 + = h4 ; h5 ^ = h2 ; h4 =)",
    "insertText": "Rot64(h4,21)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h5 ; h6 ^ = h3 ; h5 =)",
    "insertText": "Rot64(h5,38)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h4 + = h6 ; h7 ^ = h4 ; h6 =)",
    "insertText": "Rot64(h6,33)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h5 + = h7 ; h8 ^ = h5 ; h7 =)",
    "insertText": "Rot64(h7,10)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h6 + = h8 ; h9 ^ = h6 ; h8 =)",
    "insertText": "Rot64(h8,13)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h7 + = h9 ; h10 ^ = h7 ; h9 =)",
    "insertText": "Rot64(h9,38)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h8 + = h10 ; h11 ^ = h8 ; h10 =)",
    "insertText": "Rot64(h10,53)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h9 + = h11 ; h0 ^ = h9 ; h11 =)",
    "insertText": "Rot64(h11,42)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h10 + = h0 ; h1 ^ = h10 ; h0 =)",
    "insertText": "Rot64(h0,54)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "End(const uint64_t *data, uint64_t &h0, uint64_t &h1, uint64_t &h2, uint64_t &h3, uint64_t &h4, uint64_t &h5, uint64_t &h6, uint64_t &h7, uint64_t &h8, uint64_t &h9, uint64_t &h10,uint64_t &h11)"
  },
  {
    "label": "EndPartial()",
    "kind": "Method",
    "detail": "Function (h0 + = data [ 0 ] ; h1 + = data [ 1 ] ; h2 + = data [ 2 ] ; h3 + = data [ 3 ] ; h4 + = data [ 4 ] ; h5 + = data [ 5 ] ; h6 + = data [ 6 ] ; h7 + = data [ 7 ] ; h8 + = data [ 8 ] ; h9 + = data [ 9 ] ; h10 + = data [ 1 0 ] ; h11 + = data [ 1 1 ] ;)",
    "insertText": "EndPartial(h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11)"
  },
  {
    "label": "ShortMix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShortMix(uint64_t &h0, uint64_t &h1, uint64_t &h2, uint64_t &h3)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 =)",
    "insertText": "Rot64(h2,50)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 + = h3 ; h0 ^ = h2 ; h3 =)",
    "insertText": "Rot64(h3,52)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h0 ; h1 ^ = h3 ; h0 =)",
    "insertText": "Rot64(h0,30)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h1 ; h2 ^ = h0 ; h1 =)",
    "insertText": "Rot64(h1,41)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h1 + = h2 ; h3 ^ = h1 ; h2 =)",
    "insertText": "Rot64(h2,54)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 + = h3 ; h0 ^ = h2 ; h3 =)",
    "insertText": "Rot64(h3,48)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h0 ; h1 ^ = h3 ; h0 =)",
    "insertText": "Rot64(h0,38)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h1 ; h2 ^ = h0 ; h1 =)",
    "insertText": "Rot64(h1,37)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h1 + = h2 ; h3 ^ = h1 ; h2 =)",
    "insertText": "Rot64(h2,62)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h0 ; h1 ^ = h3 ; h0 =)",
    "insertText": "Rot64(h0,5)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h1 ; h2 ^ = h0 ; h1 =)",
    "insertText": "Rot64(h1,36)"
  },
  {
    "label": "ShortEnd()",
    "kind": "Method",
    "detail": "Function (h1 + = h2 ; h3 ^ = h1 ; } void)",
    "insertText": "ShortEnd(uint64_t &h0, uint64_t &h1, uint64_t &h2, uint64_t &h3)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h3 ; h1 ^ = h0 ; h0 =)",
    "insertText": "Rot64(h0,26)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h1 + = h0 ; h2 ^ = h1 ; h1 =)",
    "insertText": "Rot64(h1,51)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 + = h1 ; h3 ^ = h2 ; h2 =)",
    "insertText": "Rot64(h2,28)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h2 ; h0 ^ = h3 ; h3 =)",
    "insertText": "Rot64(h3,9)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h3 ; h1 ^ = h0 ; h0 =)",
    "insertText": "Rot64(h0,47)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h1 + = h0 ; h2 ^ = h1 ; h1 =)",
    "insertText": "Rot64(h1,54)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h2 + = h1 ; h3 ^ = h2 ; h2 =)",
    "insertText": "Rot64(h2,32)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h3 + = h2 ; h0 ^ = h3 ; h3 =)",
    "insertText": "Rot64(h3,25)"
  },
  {
    "label": "Rot64()",
    "kind": "Method",
    "detail": "Function (h0 + = h3 ; h1 ^ = h0 ; h0 =)",
    "insertText": "Rot64(h0,63)"
  },
  {
    "label": "Short()",
    "kind": "Method",
    "detail": "Function (h1 + = h0 ; } private : void)",
    "insertText": "Short(const void *message, size_t length, uint64_t *hash1, uint64_t *hash2)"
  }
]