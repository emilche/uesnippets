[
  {
    "label": "DxcDllSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcDllSupport"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (# ifndef __DXCAPI_USE_H__ # define __DXCAPI_USE_H__ # include \" dxc / dxcapi . h \" namespace dxc { const char* kDxCompilerLib ; const char* kDxilLib ; class DxcDllSupport { protected : HMODULE m_dll ; DxcCreateInstanceProc m_createFn ; DxcCreateInstance2Proc m_createFn2 ; HRESULT)",
    "insertText": "InitializeInternal(LPCSTR dllName, LPCSTR fnName)"
  },
  {
    "label": "LoadLibraryA()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 m_dll =)",
    "insertText": "LoadLibraryA(dllName)"
  },
  {
    "label": "m_createFn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_createFn(DxcCreateInstanceProc)GetProcAddress(m_dll, fnName)"
  },
  {
    "label": "HRESULT_FROM_WIN32()",
    "kind": "Method",
    "detail": "Function (HRESULT hr =)",
    "insertText": "HRESULT_FROM_WIN32(GetLastError())"
  },
  {
    "label": "FreeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeLibrary(m_dll)"
  },
  {
    "label": "dlopen()",
    "kind": "Method",
    "detail": "Function (m_dll = nullptr ; return hr ; } # else m_dll)",
    "insertText": "dlopen(dllName, RTLD_LAZY)"
  },
  {
    "label": "m_createFn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_createFn(DxcCreateInstanceProc)::dlsym(m_dll, fnName)"
  },
  {
    "label": "dlclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dlclose(m_dll)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (m_dll = nullptr ; return E_FAIL ; } # endif m_createFn2 = nullptr ; char fnName2 [ 1 2 8 ] ; size_t s =)",
    "insertText": "strlen(fnName)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(fnName2, fnName, s)"
  },
  {
    "label": "m_createFn2()",
    "kind": "Method",
    "detail": "Function (fnName2 [ s ] = ' 2 ' ; fnName2 [ s + 1 ] = ' \\ 0 ' ; # ifdef _WIN32)",
    "insertText": "m_createFn2(DxcCreateInstance2Proc)GetProcAddress(m_dll, fnName2)"
  },
  {
    "label": "m_createFn2()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "m_createFn2(DxcCreateInstance2Proc)::dlsym(m_dll, fnName2)"
  },
  {
    "label": "DxcDllSupport()",
    "kind": "Method",
    "detail": "Function (# endif } return S_OK ; } public :)",
    "insertText": "DxcDllSupport() : m_dll(nullptr), m_createFn(nullptr), m_createFn2(nullptr)"
  },
  {
    "label": "DxcDllSupport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DxcDllSupport(DxcDllSupport &&other)"
  },
  {
    "label": "DxcDllSupport()",
    "kind": "Method",
    "detail": "Function (m_dll = other . m_dll ; other . m_dll = nullptr ; m_createFn = other . m_createFn ; other . m_createFn = nullptr ; m_createFn2 = other . m_createFn2 ; other . m_createFn2 = nullptr ; } ~)",
    "insertText": "DxcDllSupport()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "Initialize()"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (# ifdef _WIN32 return)",
    "insertText": "InitializeInternal(\"dxcompiler.dll\", \"DxcCreateInstance\")"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (# elif __APPLE__ return)",
    "insertText": "InitializeInternal(\"libdxcompiler.dylib\", \"DxcCreateInstance\")"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "InitializeInternal(\"libdxcompiler.so\", \"DxcCreateInstance\")"
  },
  {
    "label": "InitializeForDll()",
    "kind": "Method",
    "detail": "Function (# endif } HRESULT)",
    "insertText": "InitializeForDll(LPCSTR dll, LPCSTR entryPoint)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} template<TInterface> HRESULT)",
    "insertText": "CreateInstance(REFCLSID clsid, TInterface **pResult)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CreateInstance(REFCLSID clsid, REFIID riid, IUnknown **pResult)"
  },
  {
    "label": "m_createFn()",
    "kind": "Method",
    "detail": "Function (HRESULT hr =)",
    "insertText": "m_createFn(clsid, riid, (LPVOID *)pResult)"
  },
  {
    "label": "CreateInstance2()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CreateInstance2(IMalloc *pMalloc, REFCLSID clsid, REFIID riid, IUnknown **pResult)"
  },
  {
    "label": "m_createFn2()",
    "kind": "Method",
    "detail": "Function (HRESULT hr =)",
    "insertText": "m_createFn2(pMalloc, clsid, riid, (LPVOID *)pResult)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (# endif m_dll = nullptr ; } } HMODULE)",
    "insertText": "Detach()"
  },
  {
    "label": "GetDefine()",
    "kind": "Method",
    "detail": "Function (HMODULE hModule = m_dll ; m_dll = nullptr ; return hModule ; } } ; DxcDefine)",
    "insertText": "GetDefine(LPCWSTR name, LPCWSTR value)"
  },
  {
    "label": "IFT_Data()",
    "kind": "Method",
    "detail": "Function (DxcDefine result ; result . Name = name ; result . Value = value ; return result ; } void)",
    "insertText": "IFT_Data(HRESULT hr, LPCWSTR data)"
  },
  {
    "label": "EnsureEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureEnabled(DxcDllSupport &dxcSupport)"
  },
  {
    "label": "ReadFileIntoBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFileIntoBlob(DxcDllSupport &dxcSupport, LPCWSTR pFileName, IDxcBlobEncoding **ppBlobEncoding)"
  },
  {
    "label": "WriteBlobToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlobToConsole(IDxcBlob *pBlob, DWORD streamType = STD_OUTPUT_HANDLE)"
  },
  {
    "label": "WriteBlobToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlobToFile(IDxcBlob *pBlob, LPCWSTR pFileName, UINT32 textCodePage)"
  },
  {
    "label": "WriteBlobToHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlobToHandle(IDxcBlob *pBlob, HANDLE hFile, LPCWSTR pFileName, UINT32 textCodePage)"
  },
  {
    "label": "WriteUtf8ToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUtf8ToConsole(const char *pText, int charCount, DWORD streamType = STD_OUTPUT_HANDLE)"
  },
  {
    "label": "WriteUtf8ToConsoleSizeT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUtf8ToConsoleSizeT(const char *pText, size_t charCount, DWORD streamType = STD_OUTPUT_HANDLE)"
  },
  {
    "label": "WriteOperationErrorsToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOperationErrorsToConsole(IDxcOperationResult *pResult, bool outputWarnings)"
  },
  {
    "label": "WriteOperationResultToConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOperationResultToConsole(IDxcOperationResult *pRewriteResult, bool outputWarnings)"
  }
]