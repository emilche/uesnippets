[
  {
    "label": "CacheClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CacheClient"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Config"
  },
  {
    "label": "ConfigTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConfigTable"
  },
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "RootPaths",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootPaths"
  },
  {
    "label": "SessionServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionServer"
  },
  {
    "label": "NextProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NextProcessInfo"
  },
  {
    "label": "ProcessStartInfoHolder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfoHolder"
  },
  {
    "label": "SchedulerCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchedulerCreateInfo"
  },
  {
    "label": "EnqueueProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnqueueProcessInfo"
  },
  {
    "label": "Scheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scheduler"
  },
  {
    "label": "ExitProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExitProcessInfo"
  },
  {
    "label": "ProcessStartInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfo2"
  },
  {
    "label": "ProcessStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcessStatus"
  },
  {
    "label": "ProcessEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessEntry"
  },
  {
    "label": "SchedulerCreateInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaMemory . h \" # include \" UbaProcessStartInfo . h \" # include \" UbaThread . h \" namespace uba { class CacheClient ; class Config ; class ConfigTable ; class Process ; class RootPaths ; class SessionServer ; struct NextProcessInfo ; struct ProcessStartInfoHolder ; struct SchedulerCreateInfo {)",
    "insertText": "SchedulerCreateInfo(SessionServer& s) : session(s)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(Config& config)"
  },
  {
    "label": "EnqueueProcessInfo()",
    "kind": "Method",
    "detail": "Function (SessionServer& session ; CacheClient* cacheClient = nullptr ; u32 maxLocalProcessors = ~ 0 u ; bool enableProcessReuse = false ; bool forceRemote = false ; bool forceNative = false ; bool writeToCache = false ; ConfigTable* processConfigs = nullptr ; } ; struct EnqueueProcessInfo {)",
    "insertText": "EnqueueProcessInfo(const ProcessStartInfo& i) : info(i)"
  },
  {
    "label": "Scheduler()",
    "kind": "Method",
    "detail": "Function (} const ProcessStartInfo& info ; float weight = 1 . 0 f ; bool canDetour = true ; bool canExecuteRemotely = true ; const void* knownInputs = nullptr ; u32 knownInputsBytes = 0 ; u32 knownInputsCount = 0 ; const u32* dependencies = nullptr ; u32 dependencyCount = 0 ; } ; class Scheduler { public :)",
    "insertText": "Scheduler(const SchedulerCreateInfo& info)"
  },
  {
    "label": "Scheduler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Scheduler()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetMaxLocalProcessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxLocalProcessors(u32 maxLocalProcessors)"
  },
  {
    "label": "EnqueueProcess()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "EnqueueProcess(const EnqueueProcessInfo& info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(u32& outQueued, u32& outActiveLocal, u32& outActiveRemote, u32& outFinished)"
  },
  {
    "label": "EnqueueFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueFromFile(const tchar* yamlFilename)"
  },
  {
    "label": "SetProcessFinishedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessFinishedCallback(const Function<void(const ProcessHandle&)>& processFinished)"
  },
  {
    "label": "GetSession()",
    "kind": "Method",
    "detail": "Function (SessionServer&)",
    "insertText": "GetSession()"
  },
  {
    "label": "ThreadLoop()",
    "kind": "Method",
    "detail": "Function (private : struct ExitProcessInfo ; struct ProcessStartInfo2 ; enum ProcessStatus : u8 { ProcessStatus_QueuedForCache,ProcessStatus_QueuedForRun,ProcessStatus_Running,ProcessStatus_Success,ProcessStatus_Failed,ProcessStatus_Skipped,} ; void)",
    "insertText": "ThreadLoop()"
  },
  {
    "label": "RemoteProcessReturned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteProcessReturned(Process& process)"
  },
  {
    "label": "HandleCacheMissed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCacheMissed(ExitProcessInfo* ei)"
  },
  {
    "label": "RemoteSlotAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteSlotAvailable()"
  },
  {
    "label": "ProcessExited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExited(ExitProcessInfo* info, const ProcessHandle& handle)"
  },
  {
    "label": "PopProcess()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "PopProcess(bool isLocal, ProcessStatus& outPrevStatus)"
  },
  {
    "label": "RunQueuedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunQueuedProcess(bool isLocal)"
  },
  {
    "label": "HandleReuseMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleReuseMessage(Process& process, NextProcessInfo& outNextProcess, u32 prevExitCode)"
  },
  {
    "label": "ExitProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitProcess(ExitProcessInfo& info, Process& process, u32 exitCode, bool fromCache)"
  },
  {
    "label": "SkipProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipProcess(ProcessStartInfo2& info)"
  },
  {
    "label": "UpdateQueueCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQueueCounter(int offset)"
  },
  {
    "label": "UpdateActiveProcessCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveProcessCounter(bool isLocal, int offset)"
  },
  {
    "label": "FinishProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishProcess(const ProcessHandle& handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (SessionServer& m_session ; u32 m_maxLocalProcessors ; struct ProcessEntry { ProcessStartInfo2* info ; u32* dependencies ; u32 dependencyCount ; ProcessStatus status ; bool canDetour ; bool canExecuteRemotely ; } ; ReaderWriterLock m_processEntriesLock ; Vector<ProcessEntry> m_processEntries ; u32 m_processEntriesStart = 0 ; Function<)",
    "insertText": "void(const ProcessHandle&)"
  },
  {
    "label": "Scheduler()",
    "kind": "Method",
    "detail": "Function (Event m_updateThreadLoop ; Thread m_thread ; Atomic<bool> m_loop ; bool m_enableProcessReuse ; bool m_forceRemote ; bool m_forceNative ; ConfigTable* m_processConfigs = nullptr ; float m_activeLocalProcessWeight = 0 . 0 f ; u32 m_activeCacheQueries = 0 ; Atomic<u32> m_queuedProcesses ; Atomic<u32> m_activeLocalProcesses ; Atomic<u32> m_activeRemoteProcesses ; Atomic<u32> m_finishedProcesses ; CacheClient* m_cacheClient ; Vector<RootPaths*> m_rootPaths ; bool m_writeToCache ;)",
    "insertText": "Scheduler(const Scheduler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const Scheduler&)"
  }
]