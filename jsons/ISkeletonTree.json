[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "ISkeletonTreeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeBuilder"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "IPinnedCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPinnedCommandList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSkeletonTreeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonTreeArgs"
  },
  {
    "label": "SKELETONEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKELETONEDITOR_API"
  },
  {
    "label": "Columns",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Columns"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Containers / ArrayView . h \" struct FAssetData ; class IPersonaPreviewScene ; class UBlendProfile ; struct FSelectedSocketInfo ; class ISkeletonTreeBuilder ; class ISkeletonTreeItem ; class FMenuBuilder ; class FExtender ; class IPinnedCommandList ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSkeletonTreeSelectionChangedMulticast, const TArrayView<TSharedPtr<ISkeletonTreeItem>>& , ESelectInfo::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (typedef FOnSkeletonTreeSelectionChangedMulticast::FDelegate FOnSkeletonTreeSelectionChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnObjectSelectedMulticast, UObject*)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (typedef FOnObjectSelectedMulticast::FDelegate FOnObjectSelected ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGetFilterText, TArray<FText>&)"
  },
  {
    "label": "FSkeletonTreeArgs()",
    "kind": "Method",
    "detail": "Function (enum class ESkeletonTreeMode { Editor,Picker,} ; struct FSkeletonTreeArgs {)",
    "insertText": "FSkeletonTreeArgs() : Mode(ESkeletonTreeMode::Editor) , ContextName(TEXT(\"SkeletonTree\")) , bShowBlendProfiles(true) , bShowFilterMenu(true) , bShowDebugVisualizationOptions(false) , bAllowMeshOperations(true) , bAllowSkeletonOperations(true) , bHideBonesByDefault(false)"
  },
  {
    "label": "DebugVisualizationOptionsName()",
    "kind": "Method",
    "detail": "Function (} FOnSkeletonTreeSelectionChanged OnSelectionChanged ; FOnGetFilterText OnGetFilterText ; TSharedPtr<IPersonaPreviewScene> PreviewScene ; TSharedPtr<ISkeletonTreeBuilder> Builder ; TSharedPtr<FExtender> Extenders ; ESkeletonTreeMode Mode ; FName ContextName ; bool bShowBlendProfiles ; bool bShowFilterMenu ; bool bShowDebugVisualizationOptions ; bool bAllowMeshOperations ; bool bAllowSkeletonOperations ; bool bHideBonesByDefault ; } ; class ISkeletonTree : public SCompoundWidget { public : struct Columns { const FName Name ; const FName Retargeting ; const FName BlendProfile ; const FName DebugVisualization ; } ; const FName)",
    "insertText": "DebugVisualizationOptionsName()"
  },
  {
    "label": "RefreshFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFilter()"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "SetSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeletalMesh(class USkeletalMesh* NewSkeletalMesh)"
  },
  {
    "label": "SetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSocket(const struct FSelectedSocketInfo& InSocketInfo)"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBone(InBoneName, ESelectInfo::Direct)"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedBone(const FName& InBoneName, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ISkeletonTreeItem>>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "SelectItemsBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectItemsBy(TFunctionRef<bool(const TSharedRef<ISkeletonTreeItem>& , bool& )> Predicate)"
  },
  {
    "label": "DuplicateAndSelectSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateAndSelectSocket(const FSelectedSocketInfo& SocketInfoToDuplicate, const FName& NewParentBoneName = FName())"
  },
  {
    "label": "RegisterOnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSelectionChanged(const FOnSkeletonTreeSelectionChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSelectionChanged(FDelegateHandle DelegateHandle)"
  },
  {
    "label": "GetSelectedBlendProfile()",
    "kind": "Method",
    "detail": "Function (UBlendProfile*)",
    "insertText": "GetSelectedBlendProfile()"
  },
  {
    "label": "AttachAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAssets(const TSharedRef<class ISkeletonTreeItem>& TargetItem, const TArray<FAssetData>& AssetData)"
  },
  {
    "label": "GetSearchWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSearchWidget()"
  },
  {
    "label": "GetPinnedCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPinnedCommandList>)",
    "insertText": "GetPinnedCommandList()"
  }
]