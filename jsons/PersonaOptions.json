[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FViewportConfigOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportConfigOptions"
  },
  {
    "label": "FAssetEditorOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetEditorOptions"
  },
  {
    "label": "UPersonaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPersonaOptions"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Misc / NamePermissionList . h \" # include \" PersonaOptions . generated . h \" enum class EFrameNumberDisplayFormats : uint8 ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (None,Bounds,Bone,Root } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, config, Category = \"Viewport\")"
  },
  {
    "label": "FViewportConfigOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewportConfigOptions() : ViewModeIndex(EViewModeIndex::VMI_Lit) , ViewFOV(53.43f) , CameraSpeedSetting(4) , CameraSpeedScalar(1.0f) , CameraFollowMode(EAnimationViewportCameraFollowMode::None)"
  },
  {
    "label": "SetToDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetToDefault()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FAssetEditorOptions()"
  },
  {
    "label": "SetViewportConfigsToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportConfigsToDefault()"
  },
  {
    "label": "FAssetEditorOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetEditorOptions(const FName& InContext) : Context(InContext)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FAssetEditorOptions& InOptions)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(hidecategories=Object, config=EditorPerProjectUserSettings, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, config, Category = \"Preview Scene\")"
  },
  {
    "label": "SetShowGrid()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetShowGrid(bool bInShowGrid)"
  },
  {
    "label": "SetHighlightOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightOrigin(bool bInHighlightOrigin)"
  },
  {
    "label": "SetAutoAlignFloorToMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoAlignFloorToMesh(bool bInAutoAlignFloorToMesh)"
  },
  {
    "label": "SetMuteAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMuteAudio(bool bInMuteAudio)"
  },
  {
    "label": "SetViewModeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewModeIndex(FName InContext, EViewModeIndex InViewModeIndex, int32 InViewportIndex)"
  },
  {
    "label": "SetViewFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewFOV(FName InContext, float InViewFOV, int32 InViewportIndex)"
  },
  {
    "label": "SetCameraSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeed(FName InContext, int32 InCameraSpeed, int32 InViewportIndex)"
  },
  {
    "label": "SetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedScalar(FName InContext, float InCameraSpeedScalar, int32 InViewportIndex)"
  },
  {
    "label": "SetViewCameraFollow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewCameraFollow(FName InContext, EAnimationViewportCameraFollowMode InCameraFollowMode, FName InCameraFollowBoneName, int32 InViewportIndex)"
  },
  {
    "label": "SetDefaultLocalAxesSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultLocalAxesSelection(uint32 InDefaultLocalAxesSelection)"
  },
  {
    "label": "SetDefaultBoneDrawSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultBoneDrawSelection(uint32 InDefaultBoneAxesSelection)"
  },
  {
    "label": "SetShowMeshStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowMeshStats(int32 InShowMeshStats)"
  },
  {
    "label": "SetSectionTimingNodeColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionTimingNodeColor(const FLinearColor& InColor)"
  },
  {
    "label": "SetNotifyTimingNodeColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotifyTimingNodeColor(const FLinearColor& InColor)"
  },
  {
    "label": "SetBranchingPointTimingNodeColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBranchingPointTimingNodeColor(const FLinearColor& InColor)"
  },
  {
    "label": "GetAssetEditorOptions()",
    "kind": "Method",
    "detail": "Function (FAssetEditorOptions&)",
    "insertText": "GetAssetEditorOptions(const FName& InContext)"
  },
  {
    "label": "GetAllowIncompatibleSkeletonSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowIncompatibleSkeletonSelection()"
  },
  {
    "label": "SetAllowIncompatibleSkeletonSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowIncompatibleSkeletonSelection(bool bState)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnUpdateSettingsMulticaster, const UPersonaOptions*, EPropertyChangeType::Type)"
  },
  {
    "label": "RegisterOnUpdateSettings()",
    "kind": "Method",
    "detail": "Function (FOnUpdateSettingsMulticaster OnSettingsChange ; FDelegateHandle)",
    "insertText": "RegisterOnUpdateSettings(const FOnUpdateSettingsMulticaster::FDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnUpdateSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnUpdateSettings(FDelegateHandle Object)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnSettingsChange .)",
    "insertText": "Remove(Object)"
  },
  {
    "label": "GetAllowedAnimationEditorTracks()",
    "kind": "Method",
    "detail": "Function (} FNamePermissionList&)",
    "insertText": "GetAllowedAnimationEditorTracks()"
  },
  {
    "label": "SetOnIsClassAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnIsClassAllowed(const FOnIsClassAllowed& InOnIsClassAllowed)"
  },
  {
    "label": "IsAllowedClass()",
    "kind": "Method",
    "detail": "Function (OnIsClassAllowedDelegate = InOnIsClassAllowed ; } bool)",
    "insertText": "IsAllowedClass(const UClass* InClass)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnIsPropertyAllowed, const FProperty*)"
  },
  {
    "label": "SetOnIsPropertyAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnIsPropertyAllowed(const FOnIsPropertyAllowed& InOnIsPropertyAllowed)"
  },
  {
    "label": "IsAllowedProperty()",
    "kind": "Method",
    "detail": "Function (OnIsPropertyAllowedDelegate = InOnIsPropertyAllowed ; } bool)",
    "insertText": "IsAllowedProperty(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  }
]