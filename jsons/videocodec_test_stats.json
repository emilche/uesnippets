[
  {
    "label": "VideoCodecTestStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCodecTestStats"
  },
  {
    "label": "FrameStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameStatistics"
  },
  {
    "label": "VideoStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoStatistics"
  },
  {
    "label": "FrameStatistics()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_VIDEOCODEC_TEST_STATS_H_ # define API_TEST_VIDEOCODEC_TEST_STATS_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<string> # include<vector> # include \" api / video / video_frame_type . h \" namespace webrtc { namespace test { class VideoCodecTestStats { public : struct FrameStatistics {)",
    "insertText": "FrameStatistics(size_t frame_number, size_t rtp_timestamp, size_t spatial_idx)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToMap()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,std::string>)",
    "insertText": "ToMap()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (size_t frame_number = 0 ; size_t rtp_timestamp = 0 ; int64_t encode_start_ns = 0 ; int encode_return_code = 0 ; bool encoding_successful = false ; size_t encode_time_us = 0 ; size_t target_bitrate_kbps = 0 ; double target_framerate_fps = 0 . 0 ; size_t length_bytes = 0 ; VideoFrameType frame_type = VideoFrameType::kVideoFrameDelta ; size_t spatial_idx = 0 ; size_t temporal_idx = 0 ; bool inter_layer_predicted = false ; bool non_ref_for_inter_layer_pred = true ; size_t max_nalu_size_bytes = 0 ; int64_t decode_start_ns = 0 ; int decode_return_code = 0 ; bool decoding_successful = false ; size_t decode_time_us = 0 ; size_t decoded_width = 0 ; size_t decoded_height = 0 ; int qp = - 1 ; bool quality_analysis_successful = false ; float psnr_y = 0 . 0 f ; float psnr_u = 0 . 0 f ; float psnr_v = 0 . 0 f ; float psnr = 0 . 0 f ; float ssim = 0 . 0 f ; } ; struct VideoStatistics { std::string)",
    "insertText": "ToString(std::string prefix)"
  },
  {
    "label": "VideoCodecTestStats()",
    "kind": "Method",
    "detail": "Function (size_t target_bitrate_kbps = 0 ; float input_framerate_fps = 0 . 0 f ; size_t spatial_idx = 0 ; size_t temporal_idx = 0 ; size_t width = 0 ; size_t height = 0 ; size_t length_bytes = 0 ; size_t bitrate_kbps = 0 ; float framerate_fps = 0 ; float enc_speed_fps = 0 . 0 f ; float dec_speed_fps = 0 . 0 f ; float avg_encode_latency_sec = 0 . 0 f ; float max_encode_latency_sec = 0 . 0 f ; float avg_decode_latency_sec = 0 . 0 f ; float max_decode_latency_sec = 0 . 0 f ; float avg_delay_sec = 0 . 0 f ; float max_key_frame_delay_sec = 0 . 0 f ; float max_delta_frame_delay_sec = 0 . 0 f ; float time_to_reach_target_bitrate_sec = 0 . 0 f ; float avg_bitrate_mismatch_pct = 0 . 0 f ; float avg_framerate_mismatch_pct = 0 . 0 f ; float avg_key_frame_size_bytes = 0 . 0 f ; float avg_delta_frame_size_bytes = 0 . 0 f ; float avg_qp = 0 . 0 f ; float avg_psnr_y = 0 . 0 f ; float avg_psnr_u = 0 . 0 f ; float avg_psnr_v = 0 . 0 f ; float avg_psnr = 0 . 0 f ; float min_psnr = 0 . 0 f ; float avg_ssim = 0 . 0 f ; float min_ssim = 0 . 0 f ; size_t num_input_frames = 0 ; size_t num_encoded_frames = 0 ; size_t num_decoded_frames = 0 ; size_t num_key_frames = 0 ; size_t num_spatial_resizes = 0 ; size_t max_nalu_size_bytes = 0 ; } ; ~)",
    "insertText": "VideoCodecTestStats()"
  },
  {
    "label": "GetFrameStatistics()",
    "kind": "Method",
    "detail": "Function (std::vector<FrameStatistics>)",
    "insertText": "GetFrameStatistics()"
  },
  {
    "label": "SliceAndCalcLayerVideoStatistic()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoStatistics>)",
    "insertText": "SliceAndCalcLayerVideoStatistic(size_t first_frame_num, size_t last_frame_num)"
  }
]