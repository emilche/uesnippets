[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Arg"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__libcpp_is_nothrow_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_nothrow_assignable"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_NOTHROW_ASSIGNABLE_H # define _LIBCPP___TYPE_TRAITS_IS_NOTHROW_ASSIGNABLE_H # include<__config> # include<__type_traits / add_const . h> # include<__type_traits / integral_constant . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_nothrow_assignable) template <class _Tp, class _Arg> struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)"
  },
  {
    "label": "noexcept()",
    "kind": "Method",
    "detail": "Function (} ; # else template<bool,class _Tp,class _Arg> struct __libcpp_is_nothrow_assignable ; template<class _Tp,class _Arg> struct __libcpp_is_nothrow_assignable<false,_Tp,_Arg> : public false_type { } ; template<class _Tp,class _Arg> struct __libcpp_is_nothrow_assignable<true,_Tp,_Arg> : public integral_constant<bool,)",
    "insertText": "noexcept(declval<_Tp>() = declval<_Arg>())"
  }
]