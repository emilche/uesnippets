[
  {
    "label": "astc_compressed_image",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "astc_compressed_image"
  },
  {
    "label": "cli_config_options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cli_config_options"
  },
  {
    "label": "load_ncimage()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTCENCCLI_INTERNAL_INCLUDED # define ASTCENCCLI_INTERNAL_INCLUDED # include<cstddef> # include<cstdint> # include<cstdio> # include<cstdlib> # include \" astcenc . h \" # include \" astcenc_mathlib . h \" struct astc_compressed_image { unsigned int block_x ; unsigned int block_y ; unsigned int block_z ; unsigned int dim_x ; unsigned int dim_y ; unsigned int dim_z ; uint8_t* data ; size_t data_len ; } ; struct cli_config_options { unsigned int thread_count ; unsigned int repeat_count ; unsigned int array_size ; bool silentmode ; bool y_flip ; bool diagnostic_images ; int low_fstop ; int high_fstop ; astcenc_swizzle swz_encode ; astcenc_swizzle swz_decode ; } ; astcenc_image*)",
    "insertText": "load_ncimage(const char* filename, bool y_flip, bool& is_hdr, unsigned int& component_count)"
  },
  {
    "label": "load_png_with_wuffs()",
    "kind": "Method",
    "detail": "Function (astcenc_image*)",
    "insertText": "load_png_with_wuffs(const char* filename, bool y_flip, bool& is_hdr, unsigned int& component_count)"
  },
  {
    "label": "store_ncimage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "store_ncimage(const astcenc_image* img, const char* filename, int y_flip)"
  },
  {
    "label": "get_output_filename_enforced_bitness()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_output_filename_enforced_bitness(const char* filename)"
  },
  {
    "label": "alloc_image()",
    "kind": "Method",
    "detail": "Function (astcenc_image*)",
    "insertText": "alloc_image(unsigned int bitness, unsigned int dim_x, unsigned int dim_y, unsigned int dim_z)"
  },
  {
    "label": "free_image()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free_image(astcenc_image* img)"
  },
  {
    "label": "determine_image_components()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "determine_image_components(const astcenc_image* img)"
  },
  {
    "label": "load_cimage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "load_cimage(const char* filename, astc_compressed_image& img)"
  },
  {
    "label": "store_cimage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "store_cimage(const astc_compressed_image& img, const char* filename)"
  },
  {
    "label": "load_ktx_compressed_image()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "load_ktx_compressed_image(const char* filename, bool& is_srgb, astc_compressed_image& img)"
  },
  {
    "label": "store_ktx_compressed_image()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "store_ktx_compressed_image(const astc_compressed_image& img, const char* filename, bool is_srgb)"
  },
  {
    "label": "astc_img_from_floatx4_array()",
    "kind": "Method",
    "detail": "Function (astcenc_image*)",
    "insertText": "astc_img_from_floatx4_array(const float* data, unsigned int dim_x, unsigned int dim_y, bool y_flip)"
  },
  {
    "label": "astc_img_from_unorm8x4_array()",
    "kind": "Method",
    "detail": "Function (astcenc_image*)",
    "insertText": "astc_img_from_unorm8x4_array(const uint8_t* data, unsigned int dim_x, unsigned int dim_y, bool y_flip)"
  },
  {
    "label": "floatx4_array_from_astc_img()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "floatx4_array_from_astc_img(const astcenc_image* img, bool y_flip)"
  },
  {
    "label": "unorm8x4_array_from_astc_img()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "unorm8x4_array_from_astc_img(const astcenc_image* img, bool y_flip)"
  },
  {
    "label": "astcenc_print_header()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "astcenc_print_header()"
  },
  {
    "label": "astcenc_print_shorthelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "astcenc_print_shorthelp()"
  },
  {
    "label": "astcenc_print_longhelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "astcenc_print_longhelp()"
  },
  {
    "label": "compute_error_metrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_error_metrics(bool compute_hdr_metrics, bool compute_normal_metrics, int input_components, const astcenc_image* img1, const astcenc_image* img2, int fstop_lo, int fstop_hi)"
  },
  {
    "label": "get_cpu_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_cpu_count()"
  },
  {
    "label": "launch_threads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "launch_threads(int thread_count, void (*func)(int, int, void*), void *payload)"
  }
]