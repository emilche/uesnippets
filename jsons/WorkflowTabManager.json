[
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "FGenericTabHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericTabHistory"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FWorkflowAllowedTabSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowAllowedTabSet"
  },
  {
    "label": "FWorkflowTabFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowTabFactory"
  },
  {
    "label": "FDocumentTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDocumentTracker"
  },
  {
    "label": "FTabInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabInfo"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FDocumentTabFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDocumentTabFactory"
  },
  {
    "label": "EOpenDocumentCause",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenDocumentCause"
  },
  {
    "label": "GetFactory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Docking / TabManager . h \" # include \" WorkflowOrientedApp / WorkflowTabFactory . h \" class SMenuAnchor ; struct FGenericTabHistory ; namespace EDocumentOpenBehavior { enum Type { OnlyReturnExisting,AutomaticallyOpen } ; } class FWorkflowAllowedTabSet { public : TSharedPtr<class FWorkflowTabFactory>)",
    "insertText": "GetFactory(FName FactoryID)"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFactory(TSharedPtr<class FWorkflowTabFactory> Factory)"
  },
  {
    "label": "UnregisterFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFactory(FName FactoryID)"
  },
  {
    "label": "MergeInSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeInSet(const FWorkflowAllowedTabSet& OtherSet)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSharedPtr<class FWorkflowTabFactory>>::TIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "FTabInfo()",
    "kind": "Method",
    "detail": "Function (private : TMap<FName,TSharedPtr<class FWorkflowTabFactory>> Factories ; class FDocumentTracker ; } ; class FTabInfo : public TSharedFromThis<FTabInfo> { public :)",
    "insertText": "FTabInfo(const TSharedRef<SDockTab>& InTab, const TSharedPtr<FDocumentTabFactory>& InSpawner, const TSharedPtr<class FDocumentTracker>& InTracker)"
  },
  {
    "label": "PayloadMatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PayloadMatches(const TSharedPtr<FTabPayload> TestPayload)"
  },
  {
    "label": "PayloadMatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PayloadMatches(TSharedPtr<FTabPayload> A, TSharedPtr<FTabPayload> B)"
  },
  {
    "label": "AddTabHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTabHistory(TSharedPtr< struct FGenericTabHistory > InHistoryNode, bool bInSaveHistory = true)"
  },
  {
    "label": "GetCurrentHistory()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<struct FGenericTabHistory>)",
    "insertText": "GetCurrentHistory()"
  },
  {
    "label": "SetCurrentHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentHistory(TSharedPtr<struct FGenericTabHistory> NewHistory, bool bInSaveHistory = true, bool bShouldRestore = true)"
  },
  {
    "label": "OnGoForwardInHistory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoForwardInHistory()"
  },
  {
    "label": "OnGoBackInHistory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnGoBackInHistory()"
  },
  {
    "label": "JumpToNearestValidHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToNearestValidHistoryData()"
  },
  {
    "label": "GetFactory()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FDocumentTabFactory>)",
    "insertText": "GetFactory()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabPayload>)",
    "insertText": "GetPayload()"
  },
  {
    "label": "GetTab()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class SDockTab>)",
    "insertText": "GetTab()"
  },
  {
    "label": "CanStepBackwardInHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepBackwardInHistory()"
  },
  {
    "label": "CanStepForwardInHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepForwardInHistory()"
  },
  {
    "label": "CreateHistoryNavigationWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateHistoryNavigationWidget()"
  },
  {
    "label": "OnMouseDownHistory()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnMouseDownHistory(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TWeakPtr< SMenuAnchor > InMenuAnchor)"
  },
  {
    "label": "CreateHistoryMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateHistoryMenu(bool bInBackHistory)"
  },
  {
    "label": "FGenericTabHistory()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWidget> HistoryNavigationWidget ; TWeakPtr<class SDockTab> Tab ; TSharedPtr<struct FGenericTabHistory> CurrentHistory ; TWeakPtr<class FDocumentTracker> WeakTracker ; } ; struct FGenericTabHistory { public :)",
    "insertText": "FGenericTabHistory(TSharedPtr<class FDocumentTabFactory> InFactory, TSharedPtr<FTabPayload> InPayload) : FactoryPtr(InFactory) , Payload(InPayload)"
  },
  {
    "label": "FGenericTabHistory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGenericTabHistory()"
  },
  {
    "label": "EvokeHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvokeHistory(TSharedPtr<FTabInfo> InTabInfo, bool bPrevTabMatches)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FWorkflowTabSpawnInfo SpawnInfo ; SpawnInfo . Payload = Payload ; SpawnInfo . TabInfo = InTabInfo ;)",
    "insertText": "if(!bPrevTabMatches)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (FactoryPtr .)",
    "insertText": "Pin()->UpdateTab(InTabInfo->GetTab().Pin(), SpawnInfo, FactoryPtr.Pin()->CreateTabBody(SpawnInfo))"
  },
  {
    "label": "SaveHistory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SaveHistory()"
  },
  {
    "label": "RestoreHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreHistory()"
  },
  {
    "label": "GetHistoryTitle()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FText>)",
    "insertText": "GetHistoryTitle()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (FWorkflowTabSpawnInfo SpawnInfo ; SpawnInfo . Payload = Payload ; return FactoryPtr .)",
    "insertText": "Pin()->ConstructTabName(SpawnInfo)"
  },
  {
    "label": "GetBoundTab()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FTabInfo>)",
    "insertText": "GetBoundTab()"
  },
  {
    "label": "BindToTab()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindToTab(const TSharedPtr<FTabInfo>& InTab)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (BoundTab = InTab ; } protected : TWeakPtr<class FDocumentTabFactory> FactoryPtr ; TSharedPtr<FTabPayload> Payload ; TWeakPtr<FTabInfo> BoundTab ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTabActivated, TSharedPtr<SDockTab>)"
  },
  {
    "label": "FDocumentTracker()",
    "kind": "Method",
    "detail": "Function (class FDocumentTracker : public TSharedFromThis<FDocumentTracker> { public :)",
    "insertText": "FDocumentTracker(FName InDefaultDocumentId = \"Document\")"
  },
  {
    "label": "FDocumentTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDocumentTracker()"
  },
  {
    "label": "ClearDocumentFactories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDocumentFactories()"
  },
  {
    "label": "RegisterDocumentFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDocumentFactory(TSharedPtr<class FDocumentTabFactory> Factory)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TSharedPtr<FAssetEditorToolkit> InHostingApp)"
  },
  {
    "label": "SetTabManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabManager(const TSharedRef<FTabManager>& InTabManager)"
  },
  {
    "label": "OpenDocument()",
    "kind": "Method",
    "detail": "Function (enum EOpenDocumentCause { OpenNewDocument,ForceOpenNewDocument,RestorePreviousDocument,NavigatingCurrentDocument,QuickNavigateCurrentDocument,NavigateBackwards,NavigateForwards,NavigatingHistory,SpawnManagedDocument,CreateHistoryEvent,} ; TSharedPtr<SDockTab>)",
    "insertText": "OpenDocument(TSharedPtr<FTabPayload> InPayload, EOpenDocumentCause InOpenCause)"
  },
  {
    "label": "CloseTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseTab(TSharedPtr<FTabPayload> Payload)"
  },
  {
    "label": "CleanInvalidTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanInvalidTabs()"
  },
  {
    "label": "RefreshAllTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllTabs()"
  },
  {
    "label": "FindSupportingFactory()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDocumentTabFactory>)",
    "insertText": "FindSupportingFactory(TSharedRef<FTabPayload> Payload)"
  },
  {
    "label": "FindMatchingTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindMatchingTabs(TSharedPtr<FTabPayload> Payload, TArray< TSharedPtr<SDockTab> >& Results)"
  },
  {
    "label": "FindAllTabsForFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllTabsForFactory(const TWeakPtr<FDocumentTabFactory>& Factory, TArray< TSharedPtr<SDockTab> >& Results)"
  },
  {
    "label": "SaveAllState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAllState()"
  },
  {
    "label": "ReplacePayloadInTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplacePayloadInTab(TSharedPtr<SDockTab> TargetTab, TSharedPtr<FTabPayload> NewPayload)"
  },
  {
    "label": "GetAllDocumentTabs()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<SDockTab>>)",
    "insertText": "GetAllDocumentTabs()"
  },
  {
    "label": "GetActiveTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetActiveTab()"
  },
  {
    "label": "GetSpawnedList()",
    "kind": "Method",
    "detail": "Function (private : typedef TArray<TSharedPtr<FTabInfo>> FTabList ; private : FTabList SpawnedTabs ; TMap<FName,TSharedPtr<class FDocumentTabFactory>> PotentialTabFactories ; TWeakPtr<FAssetEditorToolkit> HostingAppPtr ; TSharedPtr<FTabManager> TabManager ; TWeakPtr<FTabInfo> WeakLastEditedTabInfo ; FDelegateHandle OnActiveTabChangedDelegateHandle ; FDelegateHandle TabForegroundedDelegateHandle ; TArray<TSharedPtr<FGenericTabHistory>> History ; int32 CurrentHistoryIndex ; FName DefaultDocumentId ; private : FTabList&)",
    "insertText": "GetSpawnedList()"
  },
  {
    "label": "GetLastEditedTabInfo()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabInfo>)",
    "insertText": "GetLastEditedTabInfo()"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "OnTabForegrounded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabForegrounded(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "OnNavigateTab()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNavigateTab(FDocumentTracker::EOpenDocumentCause InCause)"
  },
  {
    "label": "FindTabInForeground()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FTabInfo>)",
    "insertText": "FindTabInForeground()"
  },
  {
    "label": "NavigateToTabHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavigateToTabHistory(int32 InHistoryIdx)"
  },
  {
    "label": "GetCurrentTabHistory()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericTabHistory>)",
    "insertText": "GetCurrentTabHistory()"
  },
  {
    "label": "NavigateCurrentTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "NavigateCurrentTab(TSharedPtr<FTabPayload> InPayload, EOpenDocumentCause InNavigateCause)"
  },
  {
    "label": "OpenNewTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "OpenNewTab(TSharedPtr<FGenericTabHistory> InTabHistory, EOpenDocumentCause InOpenCause)"
  }
]