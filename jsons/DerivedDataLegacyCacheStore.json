[
  {
    "label": "FDerivedDataCacheStatsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedDataCacheStatsNode"
  },
  {
    "label": "FLegacyCacheKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCacheKey"
  },
  {
    "label": "FBackendDebugOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBackendDebugOptions"
  },
  {
    "label": "FLegacyCacheDeleteRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCacheDeleteRequest"
  },
  {
    "label": "FLegacyCacheDeleteResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCacheDeleteResponse"
  },
  {
    "label": "FLegacyCacheGetRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCacheGetRequest"
  },
  {
    "label": "FLegacyCacheGetResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCacheGetResponse"
  },
  {
    "label": "FLegacyCachePutRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCachePutRequest"
  },
  {
    "label": "FLegacyCachePutResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyCachePutResponse"
  },
  {
    "label": "FLegacyCacheKeyShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCacheKeyShared"
  },
  {
    "label": "FLegacyCacheValueShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCacheValueShared"
  },
  {
    "label": "ILegacyCacheStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyCacheStore"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FLegacyCacheValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCacheValue"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DerivedDataCacheStore . h \" # include \" HAL / CriticalSection . h \" # include \" Logging / LogMacros . h \" # include \" Templates / RefCounting . h \" # include<atomic> class FDerivedDataCacheStatsNode ; namespace UE::DerivedData { class FLegacyCacheKey ; } namespace UE::DerivedData { struct FBackendDebugOptions ; } namespace UE::DerivedData { struct FLegacyCacheDeleteRequest ; } namespace UE::DerivedData { struct FLegacyCacheDeleteResponse ; } namespace UE::DerivedData { struct FLegacyCacheGetRequest ; } namespace UE::DerivedData { struct FLegacyCacheGetResponse ; } namespace UE::DerivedData { struct FLegacyCachePutRequest ; } namespace UE::DerivedData { struct FLegacyCachePutResponse ; } namespace UE::DerivedData::Private { class FLegacyCacheKeyShared ; } namespace UE::DerivedData::Private { class FLegacyCacheValueShared ; })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDerivedDataCache, Log, All)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (namespace UE::DerivedData { using FOnLegacyCachePutComplete = TUniqueFunction<)",
    "insertText": "void(FLegacyCachePutResponse&& Response)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FOnLegacyCacheGetComplete = TUniqueFunction<)",
    "insertText": "void(FLegacyCacheGetResponse&& Response)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FOnLegacyCacheDeleteComplete = TUniqueFunction<)",
    "insertText": "void(FLegacyCacheDeleteResponse&& Response)"
  },
  {
    "label": "LegacyPut()",
    "kind": "Method",
    "detail": "Function (class ILegacyCacheStore : public ICacheStore { public : void)",
    "insertText": "LegacyPut(TConstArrayView<FLegacyCachePutRequest> Requests, IRequestOwner& Owner, FOnLegacyCachePutComplete&& OnComplete)"
  },
  {
    "label": "LegacyGet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyGet(TConstArrayView<FLegacyCacheGetRequest> Requests, IRequestOwner& Owner, FOnLegacyCacheGetComplete&& OnComplete)"
  },
  {
    "label": "LegacyDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyDelete(TConstArrayView<FLegacyCacheDeleteRequest> Requests, IRequestOwner& Owner, FOnLegacyCacheDeleteComplete&& OnComplete)"
  },
  {
    "label": "LegacyStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyStats(FDerivedDataCacheStatsNode& OutNode)"
  },
  {
    "label": "LegacyDebugOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegacyDebugOptions(FBackendDebugOptions& Options)"
  },
  {
    "label": "FLegacyCacheKeyShared()",
    "kind": "Method",
    "detail": "Function (} ; class Private::FLegacyCacheKeyShared final { public :)",
    "insertText": "FLegacyCacheKeyShared(FStringView FullKey, int32 MaxKeyLength)"
  },
  {
    "label": "FLegacyCacheKeyShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheKeyShared(const FLegacyCacheKeyShared&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLegacyCacheKeyShared&)",
    "insertText": "operator(const FLegacyCacheKeyShared&)"
  },
  {
    "label": "HasShortKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasShortKey()"
  },
  {
    "label": "GetFullKey()",
    "kind": "Method",
    "detail": "Function (} const FSharedString&)",
    "insertText": "GetFullKey()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (ReferenceCount .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "FLegacyCacheKey()",
    "kind": "Method",
    "detail": "Function (delete this ; } } private : FSharedString FullKey ; FSharedString ShortKey ; int32 MaxKeyLength ; std::atomic<uint32> ReferenceCount { 0 } ; FRWLock Lock ; } ; class FLegacyCacheKey { public :)",
    "insertText": "FLegacyCacheKey()"
  },
  {
    "label": "FLegacyCacheKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheKey(FStringView FullKey, int32 MaxKeyLength)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] const FCacheKey&)",
    "insertText": "GetKey()"
  },
  {
    "label": "GetShortKey()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FSharedString&)",
    "insertText": "GetShortKey()"
  },
  {
    "label": "ReadValueTrailer()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "ReadValueTrailer(FCompositeBuffer& Value)"
  },
  {
    "label": "WriteValueTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueTrailer(FCompositeBuffer& Value)"
  },
  {
    "label": "FLegacyCacheValueShared()",
    "kind": "Method",
    "detail": "Function (private : FCacheKey Key ; TRefCountPtr<Private::FLegacyCacheKeyShared> Shared ; } ; class Private::FLegacyCacheValueShared final { public :)",
    "insertText": "FLegacyCacheValueShared(const FValue& Value)"
  },
  {
    "label": "FLegacyCacheValueShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheValueShared(const FCompositeBuffer& RawData)"
  },
  {
    "label": "FLegacyCacheValueShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheValueShared(const FLegacyCacheValueShared&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLegacyCacheValueShared&)",
    "insertText": "operator(const FLegacyCacheValueShared&)"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasData()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} const FValue&)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetRawData()",
    "kind": "Method",
    "detail": "Function (const FCompositeBuffer&)",
    "insertText": "GetRawData()"
  },
  {
    "label": "GetRawHash()",
    "kind": "Method",
    "detail": "Function (FIoHash)",
    "insertText": "GetRawHash()"
  },
  {
    "label": "GetRawSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetRawSize()"
  },
  {
    "label": "FLegacyCacheValue()",
    "kind": "Method",
    "detail": "Function (delete this ; } } private : FValue Value ; FCompositeBuffer RawData ; std::atomic<uint32> ReferenceCount { 0 } ; FRWLock Lock ; } ; class FLegacyCacheValue { public :)",
    "insertText": "FLegacyCacheValue()"
  },
  {
    "label": "FLegacyCacheValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheValue(const FValue& Value)"
  },
  {
    "label": "FLegacyCacheValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLegacyCacheValue(const FCompositeBuffer& RawData)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (Shared .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "MakeResponse()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<Private::FLegacyCacheValueShared> Shared ; } ; struct FLegacyCachePutRequest { FSharedString Name ; FLegacyCacheKey Key ; FLegacyCacheValue Value ; ECachePolicy Policy = ECachePolicy::Default ; uint64 UserData = 0 ; FLegacyCachePutResponse)",
    "insertText": "MakeResponse(EStatus Status)"
  }
]