[
  {
    "label": "FBlueprintNamespacePathTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintNamespacePathTree"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FBlueprintNamespacePathTree { public : const TCHAR PathSeparator [ ] =)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "FindOrAddChild()",
    "kind": "Method",
    "detail": "Function (struct FNode : TSharedFromThis<FNode> { bool bIsAddedPath = false ; TMap<FName,TSharedPtr<struct FNode>> Children ; TSharedRef<FNode>)",
    "insertText": "FindOrAddChild(const FName& InKey)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FNode> NewNode = MakeShared<)",
    "insertText": "FNode()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(InKey, NewNode)"
  },
  {
    "label": "FBlueprintNamespacePathTree()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FBlueprintNamespacePathTree()"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FNode>)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "FindPathNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FNode>)",
    "insertText": "FindPathNode(const FString& InPath, bool bMatchFirstInclusivePath = false)"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> PathSegments ; InPath .)",
    "insertText": "ParseIntoArray(PathSegments, PathSeparator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Node =* ChildNodePtr ;)",
    "insertText": "if(bMatchFirstInclusivePath && Node->bIsAddedPath)"
  },
  {
    "label": "AddPath()",
    "kind": "Method",
    "detail": "Function (break ; } } else { Node = nullptr ; break ; } } return Node ; } void)",
    "insertText": "AddPath(const FString& InPath)"
  },
  {
    "label": "FindOrAddChild()",
    "kind": "Method",
    "detail": "Function (Node = Node ->)",
    "insertText": "FindOrAddChild(FName(*PathSegment))"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (} Node -> bIsAddedPath = true ; } void)",
    "insertText": "RemovePath(const FString& InPath)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (using FPathTraceNode = TTuple<FName,TSharedPtr<FNode>> ; TArray<FPathTraceNode> PathTrace ; PathTrace .)",
    "insertText": "Reserve(PathSegments.Num() + 1)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (PathTrace .)",
    "insertText": "Push(MakeTuple(NAME_None, Node))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName SubPathName =)",
    "insertText": "FName(*PathSegment)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Node =* NodePtr ; PathTrace .)",
    "insertText": "Push(MakeTuple(SubPathName, Node))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } FName LastKey = NAME_None ; TSharedPtr<FNode> LastNode ;)",
    "insertText": "while(PathTrace.Num() > 0)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const FPathTraceNode& PathTraceNode = PathTrace .)",
    "insertText": "Pop()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNode> CurrNode = PathTraceNode .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrNode -> bIsAddedPath = false ; } else)",
    "insertText": "if(!LastNode->bIsAddedPath && LastNode->Children.Num() == 0)"
  },
  {
    "label": "FindAndRemoveChecked()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNode> RemovedNode = CurrNode -> Children .)",
    "insertText": "FindAndRemoveChecked(LastKey)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (LastNode = CurrNode ; } } typedef TFunctionRef<)",
    "insertText": "void(const TArray<FName>& , TSharedRef<const FBlueprintNamespacePathTree::FNode>)"
  },
  {
    "label": "ForeachNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForeachNode(FNodeVisitorFunc VisitorFunc)"
  },
  {
    "label": "RecursiveNodeVisitor()",
    "kind": "Method",
    "detail": "Function (TArray<FName> CurrentPath ;)",
    "insertText": "RecursiveNodeVisitor(GetRootNode(), CurrentPath, VisitorFunc)"
  },
  {
    "label": "RecursiveNodeVisitor()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RecursiveNodeVisitor(TSharedPtr<FBlueprintNamespacePathTree::FNode> Node, TArray<FName>& CurrentPath, FNodeVisitorFunc VisitorFunc)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (CurrentPath .)",
    "insertText": "Push(ChildIt.Key())"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNode> ChildNode = ChildIt .)",
    "insertText": "Value()"
  },
  {
    "label": "VisitorFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitorFunc(CurrentPath, ChildNode.ToSharedRef())"
  },
  {
    "label": "RecursiveNodeVisitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveNodeVisitor(ChildNode, CurrentPath, VisitorFunc)"
  }
]