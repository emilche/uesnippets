[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "HComponentVisProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HComponentVisProxy"
  },
  {
    "label": "FPropertyNameAndIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyNameAndIndex"
  },
  {
    "label": "FComponentPropertyPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentPropertyPath"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FCachedComponentVisualizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedComponentVisualizer"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / ActorComponent . h \" # include \" Containers / Array . h \" # include \" ConvexVolume . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" GameFramework / Actor . h \" # include \" GenericPlatform / ICursor . h \" # include \" HitProxies . h \" # include \" InputCoreTypes . h \" # include \" Math / Box . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / Rotator . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Elements / Framework / EngineElementsLibrary . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" ComponentVisualizer . generated . h \" class AActor ; class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class SWidget ; struct FViewportClick ; struct HComponentVisProxy : public HHitProxy {)",
    "insertText": "DECLARE_HIT_PROXY(UNREALED_API)"
  },
  {
    "label": "HComponentVisProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HComponentVisProxy(const UActorComponent* InComponent, EHitProxyPriority InPriority = HPP_Wireframe) : HHitProxy(InPriority) , Component(InComponent)"
  },
  {
    "label": "GetMouseCursor()",
    "kind": "Method",
    "detail": "Function (} EMouseCursor::Type)",
    "insertText": "GetMouseCursor()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<const UActorComponent> Component ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_USTRUCT_BODY() FPropertyNameAndIndex() : Name(NAME_None) , Index(INDEX_NONE)"
  },
  {
    "label": "FPropertyNameAndIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyNameAndIndex(FName InName, int32 InIndex = 0) : Name(InName) , Index(InIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Name = NAME_None ; Index = INDEX_NONE ; } bool)",
    "insertText": "operator(const FPropertyNameAndIndex& InRHS)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_USTRUCT_BODY() FComponentPropertyPath()"
  },
  {
    "label": "FComponentPropertyPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentPropertyPath(const UActorComponent* Component)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Component)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetParentOwningActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetParentOwningActor()"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} UActorComponent*)",
    "insertText": "GetComponent()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FComponentPropertyPath& InRHS)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Set(const UActorComponent* Component)"
  },
  {
    "label": "FComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (} ; class FComponentVisualizer : public TSharedFromThis<FComponentVisualizer> { public :)",
    "insertText": "FComponentVisualizer()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "DrawVisualizationHUD()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawVisualizationHUD(const UActorComponent* Component, const FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "VisProxyHandleClick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VisProxyHandleClick(FEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick& Click)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWidgetLocation(const FEditorViewportClient* ViewportClient, FVector& OutLocation)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackingStopped(FEditorViewportClient* InViewportClient, bool bInDidMove)"
  },
  {
    "label": "GetEditedComponent()",
    "kind": "Method",
    "detail": "Function (} UActorComponent*)",
    "insertText": "GetEditedComponent()"
  },
  {
    "label": "IsVisualizingArchetype()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisualizingArchetype()"
  },
  {
    "label": "NotifyPropertyModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPropertyModified(UActorComponent* Component, FProperty* Property, EPropertyChangeType::Type PropertyChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "NotifyPropertiesModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPropertiesModified(UActorComponent* Component, const TArray<FProperty*>& Properties, EPropertyChangeType::Type PropertyChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "FCachedComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (} ; struct FCachedComponentVisualizer { FComponentPropertyPath ComponentPropertyPath ; TSharedPtr<FComponentVisualizer> Visualizer ;)",
    "insertText": "FCachedComponentVisualizer(UActorComponent* InComponent, TSharedPtr<FComponentVisualizer>& InVisualizer) : ComponentPropertyPath(InComponent) , Visualizer(InVisualizer)"
  }
]