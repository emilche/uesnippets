[
  {
    "label": "SDL_AtomicTryLock()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_atomic_h_ # define SDL_atomic_h_ # include \" SDL_stdinc . h \" # include \" SDL_platform . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif typedef int SDL_SpinLock ; DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_AtomicTryLock(SDL_SpinLock *lock)"
  },
  {
    "label": "SDL_AtomicLock()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_AtomicLock(SDL_SpinLock *lock)"
  },
  {
    "label": "SDL_AtomicUnlock()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_AtomicUnlock(SDL_SpinLock *lock)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER > 1200) && !defined(__clang__) void _ReadWriteBarrier(void)"
  },
  {
    "label": "intrinsic()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "intrinsic(_ReadWriteBarrier) #define SDL_CompilerBarrier() _ReadWriteBarrier() #elif (defined(__GNUC__) && !defined(__EMSCRIPTEN__)) || (defined(__SUNPRO_C) && (__SUNPRO_C >= 0x5120)) #define SDL_CompilerBarrier() __asm__ __volatile__ (\"\" : : : \"memory\") #elif defined(__WATCOMC__) extern __inline void SDL_CompilerBarrier(void)"
  },
  {
    "label": "SDL_CompilerBarrier()",
    "kind": "Method",
    "detail": "Function (# pragma aux SDL_CompilerBarrier = \" \" parm [ ] modify exact [ ] ; # else # define)",
    "insertText": "SDL_CompilerBarrier()"
  },
  {
    "label": "SDL_AtomicLock()",
    "kind": "Method",
    "detail": "Function (SDL_SpinLock _tmp = 0 ;)",
    "insertText": "SDL_AtomicLock(&_tmp)"
  },
  {
    "label": "SDL_AtomicUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_AtomicUnlock(&_tmp)"
  },
  {
    "label": "SDL_MemoryBarrierReleaseFunction()",
    "kind": "Method",
    "detail": "Function (} # endif DECLSPEC void SDLCALL)",
    "insertText": "SDL_MemoryBarrierReleaseFunction(void)"
  },
  {
    "label": "SDL_MemoryBarrierAcquireFunction()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_MemoryBarrierAcquireFunction(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__)) #define SDL_MemoryBarrierRelease() __asm__ __volatile__ (\"lwsync\" : : : \"memory\") #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ (\"lwsync\" : : : \"memory\") #elif defined(__GNUC__) && defined(__aarch64__) #define SDL_MemoryBarrierRelease() __asm__ __volatile__ (\"dmb ish\" : : : \"memory\") #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ (\"dmb ish\" : : : \"memory\") #elif defined(__GNUC__) && defined(__arm__) #if 0 typedef void (*SDL_KernelMemoryBarrierFunc)()"
  },
  {
    "label": "SDL_MemoryBarrierRelease()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MemoryBarrierRelease() ((SDL_KernelMemoryBarrierFunc)0xffff0fa0)() #define SDL_MemoryBarrierAcquire() ((SDL_KernelMemoryBarrierFunc)0xffff0fa0)() #elif 0 #include <sys/cpuinline.h> #define SDL_MemoryBarrierRelease() __cpu_membarrier() #define SDL_MemoryBarrierAcquire() __cpu_membarrier() #else #if defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7EM__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__) || defined(__ARM_ARCH_8A__) #define SDL_MemoryBarrierRelease() __asm__ __volatile__ (\"dmb ish\" : : : \"memory\") #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ (\"dmb ish\" : : : \"memory\") #elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6T2__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__) #ifdef __thumb__ #define SDL_MEMORY_BARRIER_USES_FUNCTION #define SDL_MemoryBarrierRelease() SDL_MemoryBarrierReleaseFunction() #define SDL_MemoryBarrierAcquire() SDL_MemoryBarrierAcquireFunction() #else #define SDL_MemoryBarrierRelease() __asm__ __volatile__ (\"mcr p15, 0, %0, c7, c10, 5\" : : \"r\"(0) : \"memory\") #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ (\"mcr p15, 0, %0, c7, c10, 5\" : : \"r\"(0) : \"memory\") #endif #else #define SDL_MemoryBarrierRelease() __asm__ __volatile__ (\"\" : : : \"memory\") #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ (\"\" : : : \"memory\") #endif #endif #else #if (defined(__SUNPRO_C) && (__SUNPRO_C >= 0x5120)) #include <mbarrier.h> #define SDL_MemoryBarrierRelease() __machine_rel_barrier() #define SDL_MemoryBarrierAcquire() __machine_acq_barrier() #else #define SDL_MemoryBarrierRelease() SDL_CompilerBarrier() #define SDL_MemoryBarrierAcquire() SDL_CompilerBarrier() #endif #endif #if (defined(__GNUC__) || defined(__clang__)) && (defined(__i386__) || defined(__x86_64__)) #define SDL_CPUPauseInstruction() __asm__ __volatile__(\"pause\\n\") #elif (defined(__arm__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7) || defined(__aarch64__) #define SDL_CPUPauseInstruction() __asm__ __volatile__(\"yield\" ::: \"memory\") #elif (defined(__powerpc__) || defined(__powerpc64__)) #define SDL_CPUPauseInstruction() __asm__ __volatile__(\"or 27,27,27\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64)) #define SDL_CPUPauseInstruction() _mm_pause() #elif defined(_MSC_VER) && (defined(_M_ARM) || defined(_M_ARM64)) #define SDL_CPUPauseInstruction() __yield() #elif defined(__WATCOMC__) && defined(__386__) extern __inline void SDL_CPUPauseInstruction(void)"
  },
  {
    "label": "SDL_CPUPauseInstruction()",
    "kind": "Method",
    "detail": "Function (# pragma aux SDL_CPUPauseInstruction = \" . 6 8 6 p \" \" . xmm2 \" \" pause \" # else # define)",
    "insertText": "SDL_CPUPauseInstruction()"
  },
  {
    "label": "SDL_AtomicCAS()",
    "kind": "Method",
    "detail": "Function (int value ; } SDL_atomic_t ; DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval)"
  },
  {
    "label": "SDL_AtomicSet()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AtomicSet(SDL_atomic_t *a, int v)"
  },
  {
    "label": "SDL_AtomicGet()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AtomicGet(SDL_atomic_t *a)"
  },
  {
    "label": "SDL_AtomicAdd()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_AtomicAdd(SDL_atomic_t *a, int v)"
  },
  {
    "label": "SDL_AtomicIncRef()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_AtomicIncRef # define)",
    "insertText": "SDL_AtomicIncRef(a) SDL_AtomicAdd(a, 1) #endif #ifndef SDL_AtomicDecRef #define SDL_AtomicDecRef(a) (SDL_AtomicAdd(a, -1) == 1) #endif extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCASPtr(void **a, void *oldval, void *newval)"
  },
  {
    "label": "SDL_AtomicSetPtr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_AtomicSetPtr(void **a, void* v)"
  },
  {
    "label": "SDL_AtomicGetPtr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_AtomicGetPtr(void **a)"
  }
]