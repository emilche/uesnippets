[
  {
    "label": "MockLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockLog"
  },
  {
    "label": "MockLog()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_MOCK_LOG_H_ # define BASE_TEST_MOCK_LOG_H_ # include<stddef . h> # include<string> # include \" base / logging . h \" # include \" base / synchronization / lock . h \" # include \" testing / gmock / include / gmock / gmock . h \" namespace base { namespace test { class MockLog { public :)",
    "insertText": "MockLog()"
  },
  {
    "label": "MockLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockLog(const MockLog&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MockLog&)",
    "insertText": "operator(const MockLog&)"
  },
  {
    "label": "StartCapturingLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCapturingLogs()"
  },
  {
    "label": "StopCapturingLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCapturingLogs()"
  },
  {
    "label": "MOCK_METHOD5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD5(Log, bool(int severity, const char* file, int line, size_t message_start, const std::string& str))"
  },
  {
    "label": "LogMessageHandler()",
    "kind": "Method",
    "detail": "Function (private : MockLog* g_instance_ ; Lock g_lock ; bool)",
    "insertText": "LogMessageHandler(int severity, const char* file, int line, size_t message_start, const std::string& str)"
  }
]