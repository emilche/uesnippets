[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSyncState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyncState"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TGeometryParticlesImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticlesImp"
  },
  {
    "label": "FSpatialAccelerationIdx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatialAccelerationIdx"
  },
  {
    "label": "FUniqueIdx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueIdx"
  },
  {
    "label": "FSyncState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Real . h \" namespace Chaos { enum class EParticleType : uint8 {,Kinematic,Rigid,Clustered,StaticMesh,SkeletalMesh,GeometryCollection,Unknown } ; enum class EGeometryParticlesSimType { RigidBodySim,Other } ; enum class ESyncState : uint8 { InSync,HardDesync,} ; struct FSyncState { ESyncState State ;)",
    "insertText": "FSyncState() : State(ESyncState::InSync)"
  },
  {
    "label": "FSpatialAccelerationIdx()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,int d,EGeometryParticlesSimType SimType> class TGeometryParticlesImp ; template<T,int d> using TGeometryParticles = TGeometryParticlesImp<T,d,EGeometryParticlesSimType::RigidBodySim> ; using FGeometryParticles = TGeometryParticles<FReal,3> ; template<T,int d> using TGeometryClothParticles = TGeometryParticlesImp<T,d,EGeometryParticlesSimType::Other> ; struct FSpatialAccelerationIdx { uint16 Bucket : 3 ; uint16 InnerIdx : 1 3 ; uint16 MaxBucketEntries = 1<<1 3 ; uint16 MaxBuckets = 1<<3 ;)",
    "insertText": "FSpatialAccelerationIdx() : Bucket(0), InnerIdx(0)"
  },
  {
    "label": "FSpatialAccelerationIdx()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FSpatialAccelerationIdx(uint16 inBucket, uint16 inInnerIdx) : Bucket(inBucket), InnerIdx(inInnerIdx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FSpatialAccelerationIdx& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32)",
    "insertText": "GetTypeHash(const FSpatialAccelerationIdx& Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FSpatialAccelerationIdx& Idx)"
  },
  {
    "label": "FUniqueIdx()",
    "kind": "Method",
    "detail": "Function (} struct FUniqueIdx { int32 Idx ;)",
    "insertText": "FUniqueIdx(): Idx(INDEX_NONE)"
  },
  {
    "label": "FUniqueIdx()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueIdx(int32 InIdx): Idx(InIdx)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} enum class EInternalClusterType : uint8 { None,KinematicOrStatic,Dynamic,ClusterUnion } ; enum class EGeometryParticleListMask { None = 0,StaticParticles = 1<<0,StaticDisabledParticles = 1<<1,KinematicParticles = 1<<2,KinematicDisabledParticles = 1<<3,DynamicDisabledParticles = 1<<4,DynamicParticles = 1<<5,DynamicKinematicParticles = 1<<6,ClusteredParticles = 1<<7,GeometryCollectionParticles = 1<<8,StaticGeometryCollectionArray = 1<<9,KinematicGeometryCollectionArray = 1<<1 0,SleepingGeometryCollectionArray = 1<<1 1,DynamicGeometryCollectionArray = 1<<1 2,ActiveParticlesMapArray = 1<<1 3,TransientDirtyMapArray = 1<<1 4,MovingKinematicsMapArray = 1<<1 5,StaticClusteredMapArray = 1<<1 6,KinematicClusteredMapArray = 1<<1 8,DynamicClusteredMapArray = 1<<1 9,ResimActiveParticlesMapArray = 1<<2 0,ResimDynamicParticles = 1<<2 1,ResimDynamicKinematicParticles = 1<<2 2,ResimStaticParticles = 1<<2 3,ResimKinematicParticles = 1<<2 4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EGeometryParticleListMask)"
  }
]