[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLFO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLFO"
  },
  {
    "label": "FLFO()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / Osc . h \" # include \" DSP / ModulationMatrix . h \" namespace Audio { namespace ELFO { enum Type { Sine = 0,UpSaw,DownSaw,Square,Triangle,Exponential,RandomSampleHold,NumLFOTypes } ; } namespace ELFOMode { enum Type { Sync = 0,OneShot,Free,NumLFOModes } ; } class FLFO : public IOscBase { public :)",
    "insertText": "FLFO()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InVoiceId = 0, FModulationMatrix* InMatrix = nullptr, const int32 ModMatrixStage = 0)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Generate(float* QuadPhaseOutput = nullptr)"
  },
  {
    "label": "SetBipolar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBipolar(const bool bInBipolar)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const ELFO::Type InLFOType)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (ELFO::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(const ELFOMode::Type InLFOMode)"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (ELFOMode::Type)",
    "insertText": "GetMode()"
  },
  {
    "label": "SetPhaseOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhaseOffset(const float InOffset)"
  },
  {
    "label": "SetExponentialFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExponentialFactor(const float InExpFactor)"
  },
  {
    "label": "GetModSourceNormalPhase()",
    "kind": "Method",
    "detail": "Function (FPatchSource)",
    "insertText": "GetModSourceNormalPhase()"
  },
  {
    "label": "GetModSourceQuadPhase()",
    "kind": "Method",
    "detail": "Function (FPatchSource)",
    "insertText": "GetModSourceQuadPhase()"
  },
  {
    "label": "ComputeLFO()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "ComputeLFO(float InputPhase, float* OutQuad = nullptr)"
  },
  {
    "label": "GetInitPhase()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInitPhase()"
  },
  {
    "label": "ResetPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPhase()"
  }
]