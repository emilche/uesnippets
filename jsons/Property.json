[
  {
    "label": "Property",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Property"
  },
  {
    "label": "PropertyAssign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertyAssign"
  },
  {
    "label": "PropertySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertySet"
  },
  {
    "label": "PropertySetAssign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertySetAssign"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_PROPERTY_H # define MATERIALX_PROPERTY_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Geom . h> MATERIALX_NAMESPACE_BEGIN class Property ; class PropertyAssign ; class PropertySet ; class PropertySetAssign ; using PropertyPtr = shared_ptr<Property> ; using ConstPropertyPtr = shared_ptr<const Property> ; using PropertyAssignPtr = shared_ptr<PropertyAssign> ; using ConstPropertyAssignPtr = shared_ptr<const PropertyAssign> ; using PropertySetPtr = shared_ptr<PropertySet> ; using ConstPropertySetPtr = shared_ptr<const PropertySet> ; using PropertySetAssignPtr = shared_ptr<PropertySetAssign> ; using ConstPropertySetAssignPtr = shared_ptr<const PropertySetAssign> ; class Property : public ValueElement { public :)",
    "insertText": "Property(ElementPtr parent, const string& name) : ValueElement(parent, CATEGORY, name)"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Property()"
  },
  {
    "label": "PropertyAssign()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class PropertyAssign : public ValueElement { public :)",
    "insertText": "PropertyAssign(ElementPtr parent, const string& name) : ValueElement(parent, CATEGORY, name)"
  },
  {
    "label": "PropertyAssign()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PropertyAssign()"
  },
  {
    "label": "setProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setProperty(const string& property)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(PROPERTY_ATTRIBUTE, property)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasProperty()"
  },
  {
    "label": "getProperty()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getProperty()"
  },
  {
    "label": "setGeom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGeom(const string& geom)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(GEOM_ATTRIBUTE, geom)"
  },
  {
    "label": "hasGeom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasGeom()"
  },
  {
    "label": "getGeom()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getGeom()"
  },
  {
    "label": "setCollectionString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCollectionString(const string& collection)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(COLLECTION_ATTRIBUTE, collection)"
  },
  {
    "label": "hasCollectionString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasCollectionString()"
  },
  {
    "label": "getCollectionString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getCollectionString()"
  },
  {
    "label": "setCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCollection(ConstCollectionPtr collection)"
  },
  {
    "label": "getCollection()",
    "kind": "Method",
    "detail": "Function (CollectionPtr)",
    "insertText": "getCollection()"
  },
  {
    "label": "PropertySet()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string PROPERTY_ATTRIBUTE ; const string GEOM_ATTRIBUTE ; const string COLLECTION_ATTRIBUTE ; } ; class PropertySet : public Element { public :)",
    "insertText": "PropertySet(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "PropertySet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PropertySet()"
  },
  {
    "label": "addProperty()",
    "kind": "Method",
    "detail": "Function (} PropertyPtr)",
    "insertText": "addProperty(const string& name)"
  },
  {
    "label": "getProperty()",
    "kind": "Method",
    "detail": "Function (} PropertyPtr)",
    "insertText": "getProperty(const string& name)"
  },
  {
    "label": "getProperties()",
    "kind": "Method",
    "detail": "Function (} vector<PropertyPtr>)",
    "insertText": "getProperties()"
  },
  {
    "label": "removeProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeProperty(const string& name)"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Property(name)"
  },
  {
    "label": "setPropertyValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> PropertyPtr)",
    "insertText": "setPropertyValue(const string& name, const T& value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (property ->)",
    "insertText": "setValue(value, type)"
  },
  {
    "label": "getProperty()",
    "kind": "Method",
    "detail": "Function (PropertyPtr property =)",
    "insertText": "getProperty(name)"
  },
  {
    "label": "PropertySetAssign()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class PropertySetAssign : public GeomElement { public :)",
    "insertText": "PropertySetAssign(ElementPtr parent, const string& name) : GeomElement(parent, CATEGORY, name)"
  },
  {
    "label": "PropertySetAssign()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PropertySetAssign()"
  },
  {
    "label": "setPropertySetString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPropertySetString(const string& propertySet)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(PROPERTY_SET_ATTRIBUTE, propertySet)"
  },
  {
    "label": "hasPropertySetString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPropertySetString()"
  },
  {
    "label": "getPropertySetString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getPropertySetString()"
  },
  {
    "label": "setPropertySet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPropertySet(ConstPropertySetPtr propertySet)"
  },
  {
    "label": "getPropertySet()",
    "kind": "Method",
    "detail": "Function (PropertySetPtr)",
    "insertText": "getPropertySet()"
  }
]