[
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FPluginReferenceDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginReferenceDescriptor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FExternalPluginPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalPluginPath"
  },
  {
    "label": "FPluginStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginStatus"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "IPluginManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPluginManager"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" PluginDescriptor . h \" # include \" Containers / VersePathFwd . h \" # include \" Templates / SharedPointer . h \" struct FProjectDescriptor ; class FJsonObject ; struct FPluginReferenceDescriptor ; enum class EPluginLoadedFrom { Engine,Project } ; enum class EPluginType { Engine,Enterprise,Project,External,Mod,} ; enum class EPluginExternalSource { ProjectDescriptor,CommandLine,Environment,Other,} ; struct FExternalPluginPath { FString Path ; EPluginExternalSource Source ; bool)",
    "insertText": "operator(const FExternalPluginPath& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FExternalPluginPath& ExternalPluginPath)"
  },
  {
    "label": "IPlugin()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPluginStatus { FString Name ; FString PluginDirectory ; bool bIsEnabled ; EPluginLoadedFrom LoadedFrom ; FPluginDescriptor Descriptor ; } ; class IPlugin : public TSharedFromThis<IPlugin> { public : ~)",
    "insertText": "IPlugin()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetDescriptorFileName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDescriptorFileName()"
  },
  {
    "label": "GetBaseDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaseDir()"
  },
  {
    "label": "GetExtensionBaseDirs()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetExtensionBaseDirs()"
  },
  {
    "label": "GetContentDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentDir()"
  },
  {
    "label": "GetMountedAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountedAssetPath()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EPluginType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsEnabledByDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledByDefault(bool bAllowEnginePluginsEnabledByDefault)"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "CanContainContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanContainContent()"
  },
  {
    "label": "CanContainVerse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanContainVerse()"
  },
  {
    "label": "GetVersePath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetVersePath()"
  },
  {
    "label": "SetVersePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVersePath(FString&& InVersePath)"
  },
  {
    "label": "GetVerseVersion()",
    "kind": "Method",
    "detail": "Function (TOptional<uint32>)",
    "insertText": "GetVerseVersion()"
  },
  {
    "label": "SetVerseVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerseVersion(TOptional<uint32> InVerseVersion)"
  },
  {
    "label": "GetLoadedFrom()",
    "kind": "Method",
    "detail": "Function (EPluginLoadedFrom)",
    "insertText": "GetLoadedFrom()"
  },
  {
    "label": "GetDescriptor()",
    "kind": "Method",
    "detail": "Function (const FPluginDescriptor&)",
    "insertText": "GetDescriptor()"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDescriptor(const FPluginDescriptor& NewDescriptor, FText& OutFailReason)"
  },
  {
    "label": "GetDescriptorJson()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TSharedPtr<FJsonObject>&)",
    "insertText": "GetDescriptorJson()"
  },
  {
    "label": "IPluginManager()",
    "kind": "Method",
    "detail": "Function (# endif } ; class IPluginManager { public : ~)",
    "insertText": "IPluginManager()"
  },
  {
    "label": "RefreshPluginsList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshPluginsList()"
  },
  {
    "label": "AddToPluginsList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToPluginsList(const FString& PluginFilename, FText* OutFailReason = nullptr)"
  },
  {
    "label": "RemoveFromPluginsList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromPluginsList(const FString& PluginFilename, FText* OutFailReason = nullptr)"
  },
  {
    "label": "LoadModulesForEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadModulesForEnabledPlugins(const ELoadingPhase::Type LoadingPhase)"
  },
  {
    "label": "GetLastCompletedLoadingPhase()",
    "kind": "Method",
    "detail": "Function (ELoadingPhase::Type)",
    "insertText": "GetLastCompletedLoadingPhase()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(IPluginManager, FLoadingModulesForPhaseEvent, ELoadingPhase::Type , bool)"
  },
  {
    "label": "OnLoadingPhaseComplete()",
    "kind": "Method",
    "detail": "Function (FLoadingModulesForPhaseEvent&)",
    "insertText": "OnLoadingPhaseComplete()"
  },
  {
    "label": "GetLocalizationPathsForEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalizationPathsForEnabledPlugins(TArray<FString>& OutLocResPaths)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FRegisterMountPointDelegate, const FString& , const FString&)"
  },
  {
    "label": "SetRegisterMountPointDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRegisterMountPointDelegate(const FRegisterMountPointDelegate& Delegate)"
  },
  {
    "label": "SetUnRegisterMountPointDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnRegisterMountPointDelegate(const FRegisterMountPointDelegate& Delegate)"
  },
  {
    "label": "AreRequiredPluginsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreRequiredPluginsAvailable()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FGetExplanationForUnavailablePackageWithPluginInfoDelegate, const FString& , class IPlugin* , FStringBuilderBase&)"
  },
  {
    "label": "GetExplanationForUnavailablePackageWithPluginInfoDelegate()",
    "kind": "Method",
    "detail": "Function (FGetExplanationForUnavailablePackageWithPluginInfoDelegate&)",
    "insertText": "GetExplanationForUnavailablePackageWithPluginInfoDelegate()"
  },
  {
    "label": "GetExplanationForUnavailablePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExplanationForUnavailablePackage(const FName& UnavailablePackageName, FStringBuilderBase& InOutExplanation)"
  },
  {
    "label": "CheckModuleCompatibility()",
    "kind": "Method",
    "detail": "Function (# if ! IS_MONOLITHIC bool)",
    "insertText": "CheckModuleCompatibility(TArray<FString>& OutIncompatibleModules, TArray<FString>& OutIncompatibleEngineModules)"
  },
  {
    "label": "FindPlugin()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<IPlugin>)",
    "insertText": "FindPlugin(const FStringView Name)"
  },
  {
    "label": "FindPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindPlugin(const ANSICHAR* Name)"
  },
  {
    "label": "FindPluginFromPath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindPluginFromPath(const FString& PluginPath)"
  },
  {
    "label": "FindPluginFromDescriptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindPluginFromDescriptor(const FPluginReferenceDescriptor& PluginDesc)"
  },
  {
    "label": "FindEnabledPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPlugin(const FStringView Name)"
  },
  {
    "label": "FindEnabledPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPlugin(const ANSICHAR* Name)"
  },
  {
    "label": "FindEnabledPluginFromPath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPluginFromPath(const FString& PluginPath)"
  },
  {
    "label": "FindEnabledPluginFromDescriptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "FindEnabledPluginFromDescriptor(const FPluginReferenceDescriptor& PluginDesc)"
  },
  {
    "label": "CanEnablePluginInCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnablePluginInCurrentTarget(const FStringView Name)"
  },
  {
    "label": "CanEnablePluginInCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnablePluginInCurrentTarget(const ANSICHAR* Name)"
  },
  {
    "label": "FindPluginsUnderDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPluginsUnderDirectory(const FString& Directory, TArray<FString>& OutPluginFilePaths)"
  },
  {
    "label": "GetEnabledPlugins()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPlugins()"
  },
  {
    "label": "GetEnabledPluginsWithContent()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithContent()"
  },
  {
    "label": "GetEnabledPluginsWithVerse()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithVerse()"
  },
  {
    "label": "GetEnabledPluginsWithContentOrVerse()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetEnabledPluginsWithContentOrVerse()"
  },
  {
    "label": "GetDiscoveredPlugins()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetDiscoveredPlugins()"
  },
  {
    "label": "GetBuiltInPluginNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TSet<FString>&)",
    "insertText": "GetBuiltInPluginNames()"
  },
  {
    "label": "GetModuleOwnerPlugin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "GetModuleOwnerPlugin(FName ModuleName)"
  },
  {
    "label": "AddPluginSearchPath()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "AddPluginSearchPath(const FString& ExtraDiscoveryPath, bool bRefresh = true)"
  },
  {
    "label": "RemovePluginSearchPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePluginSearchPath(const FString& PathToRemove, bool bRefresh = true)"
  },
  {
    "label": "GetAdditionalPluginSearchPaths()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>&)",
    "insertText": "GetAdditionalPluginSearchPaths()"
  },
  {
    "label": "GetExternalPluginSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExternalPluginSources(TSet<FExternalPluginPath>& OutPluginSources)"
  },
  {
    "label": "GetPluginsWithPakFile()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<IPlugin>>)",
    "insertText": "GetPluginsWithPakFile()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IPluginManager, FNewPluginMountedEvent, IPlugin&)"
  },
  {
    "label": "OnNewPluginCreated()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginCreated()"
  },
  {
    "label": "OnNewPluginMounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginMounted()"
  },
  {
    "label": "OnNewPluginContentMounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnNewPluginContentMounted()"
  },
  {
    "label": "OnPluginEdited()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnPluginEdited()"
  },
  {
    "label": "OnPluginUnmounted()",
    "kind": "Method",
    "detail": "Function (FNewPluginMountedEvent&)",
    "insertText": "OnPluginUnmounted()"
  },
  {
    "label": "MountNewlyCreatedPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountNewlyCreatedPlugin(const FString& PluginName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin(const FString& PluginName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin_FromFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin_FromFileName(const FString& PluginFileName)"
  },
  {
    "label": "MountExplicitlyLoadedPlugin_FromDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPlugin_FromDescriptor(const FPluginReferenceDescriptor& PluginDescriptor)"
  },
  {
    "label": "MountExplicitlyLoadedPluginLocalizationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountExplicitlyLoadedPluginLocalizationData(const FString& PluginName)"
  },
  {
    "label": "UnmountExplicitlyLoadedPluginLocalizationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountExplicitlyLoadedPluginLocalizationData(const FString& PluginName)"
  },
  {
    "label": "UnmountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountExplicitlyLoadedPlugin(const FString& PluginName, FText* OutReason)"
  },
  {
    "label": "UnmountExplicitlyLoadedPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountExplicitlyLoadedPlugin(const FString& PluginName, FText* OutReason, bool bAllowUnloadCode)"
  },
  {
    "label": "GetPluginDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies(const FString& PluginName, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "GetPluginDependencies_FromFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies_FromFileName(const FString& PluginFileName, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "GetPluginDependencies_FromDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPluginDependencies_FromDescriptor(const FPluginReferenceDescriptor& PluginDescriptor, TArray<FPluginReferenceDescriptor>& PluginDependencies)"
  },
  {
    "label": "PackageNameFromModuleName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "PackageNameFromModuleName(FName ModuleName)"
  },
  {
    "label": "TrySplitVersePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySplitVersePath(const UE::Core::FVersePath& VersePath, FName& OutPackageName, FString& OutLeafPath)"
  },
  {
    "label": "RequiresTempTargetForCodePlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTempTargetForCodePlugin(const FProjectDescriptor* ProjectDescriptor, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType, FText& OutReason)"
  },
  {
    "label": "IntegratePluginsIntoConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntegratePluginsIntoConfig(FConfigCacheIni& ConfigSystem, const TCHAR* EngineIniName, const TCHAR* PlatformName, const TCHAR* StagedPluginsFile)"
  },
  {
    "label": "SetBinariesRootDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBinariesRootDirectories(const FString& EngineBinariesRootDir, const FString& ProjectBinariesRootDir)"
  },
  {
    "label": "SetPreloadBinaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreloadBinaries()"
  },
  {
    "label": "GetPreloadBinaries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreloadBinaries()"
  },
  {
    "label": "SuppressPluginUnloadGC()",
    "kind": "Method",
    "detail": "Function (UE_INTERNAL void)",
    "insertText": "SuppressPluginUnloadGC()"
  },
  {
    "label": "ResumePluginUnloadGC()",
    "kind": "Method",
    "detail": "Function (UE_INTERNAL void)",
    "insertText": "ResumePluginUnloadGC()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : IPluginManager&)",
    "insertText": "Get()"
  }
]