[
  {
    "label": "OslRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OslRenderer"
  },
  {
    "label": "MX_RENDEROSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDEROSL_API"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_OSLRENDERER_H # define MATERIALX_OSLRENDERER_H # include<MaterialXRenderOsl / Export . h> # include<MaterialXRender / ImageHandler . h> # include<MaterialXRender / ShaderRenderer . h> MATERIALX_NAMESPACE_BEGIN using OslRendererPtr = std::shared_ptr<class OslRenderer> ; class OslRenderer : public ShaderRenderer { public : OslRendererPtr)",
    "insertText": "create(unsigned int width = 512, unsigned int height = 512, Image::BaseType baseType = Image::BaseType::UINT8)"
  },
  {
    "label": "OslRenderer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OslRenderer()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (string OSL_CLOSURE_COLOR_STRING ; void)",
    "insertText": "initialize()"
  },
  {
    "label": "createProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createProgram(ShaderPtr shader)"
  },
  {
    "label": "createProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createProgram(const StageMap& stages)"
  },
  {
    "label": "validateInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "validateInputs()"
  },
  {
    "label": "setSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSize(unsigned int width, unsigned int height)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render()"
  },
  {
    "label": "captureImage()",
    "kind": "Method",
    "detail": "Function (ImagePtr)",
    "insertText": "captureImage(ImagePtr image = nullptr)"
  },
  {
    "label": "setOslCompilerExecutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOslCompilerExecutable(const FilePath& executableFilePath)"
  },
  {
    "label": "setOslIncludePath()",
    "kind": "Method",
    "detail": "Function (_oslCompilerExecutable = executableFilePath ; } void)",
    "insertText": "setOslIncludePath(const FileSearchPath& dirPath)"
  },
  {
    "label": "setOslOutputFilePath()",
    "kind": "Method",
    "detail": "Function (_oslIncludePath = dirPath ; } void)",
    "insertText": "setOslOutputFilePath(const FilePath& dirPath)"
  },
  {
    "label": "setShaderParameterOverrides()",
    "kind": "Method",
    "detail": "Function (_oslOutputFilePath = dirPath ; } void)",
    "insertText": "setShaderParameterOverrides(const StringVec& parameterOverrides)"
  },
  {
    "label": "setEnvShaderParameterOverrides()",
    "kind": "Method",
    "detail": "Function (_oslShaderParameterOverrides = parameterOverrides ; } void)",
    "insertText": "setEnvShaderParameterOverrides(const StringVec& parameterOverrides)"
  },
  {
    "label": "setOslShaderOutput()",
    "kind": "Method",
    "detail": "Function (_envOslShaderParameterOverrides = parameterOverrides ; } void)",
    "insertText": "setOslShaderOutput(const string& outputName, const string& outputType)"
  },
  {
    "label": "setOslTestShadeExecutable()",
    "kind": "Method",
    "detail": "Function (_oslShaderOutputName = outputName ; _oslShaderOutputType = outputType ; } void)",
    "insertText": "setOslTestShadeExecutable(const FilePath& executableFilePath)"
  },
  {
    "label": "setOslTestRenderExecutable()",
    "kind": "Method",
    "detail": "Function (_oslTestShadeExecutable = executableFilePath ; } void)",
    "insertText": "setOslTestRenderExecutable(const FilePath& executableFilePath)"
  },
  {
    "label": "setOslTestRenderSceneTemplateFile()",
    "kind": "Method",
    "detail": "Function (_oslTestRenderExecutable = executableFilePath ; } void)",
    "insertText": "setOslTestRenderSceneTemplateFile(const FilePath& templateFilePath)"
  },
  {
    "label": "setOslShaderName()",
    "kind": "Method",
    "detail": "Function (_oslTestRenderSceneTemplateFile = templateFilePath ; } void)",
    "insertText": "setOslShaderName(const string& shaderName)"
  },
  {
    "label": "setOslUtilityOSOPath()",
    "kind": "Method",
    "detail": "Function (_oslShaderName = shaderName ; } void)",
    "insertText": "setOslUtilityOSOPath(const FilePath& dirPath)"
  },
  {
    "label": "useTestRender()",
    "kind": "Method",
    "detail": "Function (_oslUtilityOSOPath = dirPath ; } void)",
    "insertText": "useTestRender(bool useTestRender)"
  },
  {
    "label": "setRaysPerPixelLit()",
    "kind": "Method",
    "detail": "Function (_useTestRender = useTestRender ; } void)",
    "insertText": "setRaysPerPixelLit(int rays)"
  },
  {
    "label": "setRaysPerPixelUnlit()",
    "kind": "Method",
    "detail": "Function (_raysPerPixelLit = rays ; } void)",
    "insertText": "setRaysPerPixelUnlit(int rays)"
  },
  {
    "label": "compileOSL()",
    "kind": "Method",
    "detail": "Function (_raysPerPixelUnlit = rays ; } void)",
    "insertText": "compileOSL(const FilePath& oslFilePath)"
  },
  {
    "label": "shadeOSL()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "shadeOSL(const FilePath& dirPath, const string& shaderName, const string& outputName)"
  },
  {
    "label": "renderOSL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renderOSL(const FilePath& dirPath, const string& shaderName, const string& outputName)"
  },
  {
    "label": "OslRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OslRenderer(unsigned int width, unsigned int height, Image::BaseType baseType)"
  }
]