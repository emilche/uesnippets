[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "IMediaCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaCache"
  },
  {
    "label": "IMediaControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaControls"
  },
  {
    "label": "IMediaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOptions"
  },
  {
    "label": "IMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaSamples"
  },
  {
    "label": "IMediaTracks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTracks"
  },
  {
    "label": "IMediaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaView"
  },
  {
    "label": "IMediaMetadataItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaMetadataItem"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FMediaPlayerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaPlayerOptions"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IAsyncResourceReleaseNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncResourceReleaseNotification"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Internationalization / Text . h \" # include \" Math / Interval . h \" # include \" Math / IntPoint . h \" # include \" Math / MathFwd . h \" # include \" Misc / Paths . h \" # include \" Misc / Timespan . h \" # include \" Misc / Variant . h \" class FArchive ; class IMediaCache ; class IMediaControls ; class IMediaOptions ; class IMediaSamples ; class IMediaTracks ; class IMediaView ; class IMediaMetadataItem ; struct FGuid ; struct FMediaPlayerOptions ; class IMediaPlayer { public : void)",
    "insertText": "Close()"
  },
  {
    "label": "GetCache()",
    "kind": "Method",
    "detail": "Function (IMediaCache&)",
    "insertText": "GetCache()"
  },
  {
    "label": "GetControls()",
    "kind": "Method",
    "detail": "Function (IMediaControls&)",
    "insertText": "GetControls()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetPlayerPluginGUID()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetPlayerPluginGUID()"
  },
  {
    "label": "GetSamples()",
    "kind": "Method",
    "detail": "Function (IMediaSamples&)",
    "insertText": "GetSamples()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetTracks()",
    "kind": "Method",
    "detail": "Function (IMediaTracks&)",
    "insertText": "GetTracks()"
  },
  {
    "label": "GetUrl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUrl()"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (IMediaView&)",
    "insertText": "GetView()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const FString& Url, const IMediaOptions* Options)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const TSharedRef<FArchive, ESPMode::ThreadSafe>& Archive, const FString& OriginalUrl, const IMediaOptions* Options)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Open(const FString& Url, const IMediaOptions* Options, const FMediaPlayerOptions* PlayerOptions)"
  },
  {
    "label": "GetMediaInfo()",
    "kind": "Method",
    "detail": "Function (} FVariant)",
    "insertText": "GetMediaInfo(FName InfoName)"
  },
  {
    "label": "GetMediaMetadata()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<TMap<FString,TArray<TUniquePtr<IMediaMetadataItem>>>,ESPMode::ThreadSafe>)",
    "insertText": "GetMediaMetadata()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(FPaths::GetBaseFilename(Url))"
  },
  {
    "label": "SetGuid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGuid(const FGuid& Guid)"
  },
  {
    "label": "SetNativeVolume()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetNativeVolume(float Volume)"
  },
  {
    "label": "TickAudio()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickAudio()"
  },
  {
    "label": "TickFetch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickFetch(FTimespan DeltaTime, FTimespan Timecode)"
  },
  {
    "label": "TickInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickInput(FTimespan DeltaTime, FTimespan Timecode)"
  },
  {
    "label": "FlushOnSeekStarted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FlushOnSeekStarted()"
  },
  {
    "label": "GetPlayerFeatureFlag()",
    "kind": "Method",
    "detail": "Function (} enum class EFeatureFlag { AllowShutdownOnClose = 0,UsePlaybackTimingV2,UseRealtimeWithVideoOnly,AlwaysPullNewestVideoFrame,PlayerUsesInternalFlushOnSeek,IsTrackSwitchSeamless,PlayerSelectsDefaultTracks,} ; bool)",
    "insertText": "GetPlayerFeatureFlag(EFeatureFlag)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Signal(uint32 ResourceFlags)"
  },
  {
    "label": "SetAsyncResourceReleaseNotification()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedRef<IAsyncResourceReleaseNotification,ESPMode::ThreadSafe> IAsyncResourceReleaseNotificationRef ; bool)",
    "insertText": "SetAsyncResourceReleaseNotification(IAsyncResourceReleaseNotificationRef AsyncDestructNotification)"
  }
]