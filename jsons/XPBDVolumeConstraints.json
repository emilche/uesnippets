[
  {
    "label": "FXPBDVolumeConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDVolumeConstraints"
  },
  {
    "label": "FXPBDVolumeConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" namespace Chaos::Softs { class FXPBDVolumeConstraints { public :)",
    "insertText": "FXPBDVolumeConstraints(const Chaos::Softs::FSolverParticles& InParticles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVector<int32, 4>>& InMesh, const FSolverReal InStiffness ) : MeshConstraints(InMesh), Stiffness(InStiffness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaArray .)",
    "insertText": "Init((FSolverReal)0., MeshConstraints.Num())"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (TVec4<int32> Constraint = InMesh [ ElementIndex ] ; const FSolverVec3& P1 = InParticles .)",
    "insertText": "GetX(Constraint[0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "GetX(Constraint[1])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "GetX(Constraint[2])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "GetX(Constraint[3])"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Volumes [ ElementIndex ] =)",
    "insertText": "DotProduct(FSolverVec3::CrossProduct(P2 - P1, P3 - P1), P4 - P1) / (FSolverReal)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "FXPBDVolumeConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDVolumeConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Lambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambdas(FSolverReal)"
  },
  {
    "label": "ApplyOneElement()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyOneElement(FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "GetVolumeDelta()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3> VolumeDelta =)",
    "insertText": "GetVolumeDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyInSerial(FSolverParticles& Particles, const FSolverReal Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDVolumeApplySerial)"
  },
  {
    "label": "ApplyOneElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyOneElement(Particles, Dt, ElementIndex)"
  },
  {
    "label": "ApplyInParallel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyInParallel(FSolverParticles& Particles, const FSolverReal Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDVolumeApply)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintColorNum = ConstraintsPerColorStartIndex .)",
    "insertText": "Num()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (const int32 ColorStart = ConstraintsPerColorStartIndex [ ConstraintColorIndex ] ; const int32 ColorSize = ConstraintsPerColorStartIndex [ ConstraintColorIndex + 1 ] - ColorStart ;)",
    "insertText": "PhysicsParallelFor(ColorSize, [&](const int32 Index) { const int32 ConstraintIndex = ColorStart + Index; ApplyOneElement(Particles, Dt, ConstraintIndex); })"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} } } } private : void)",
    "insertText": "InitColor(const FSolverParticles& Particles)"
  },
  {
    "label": "ComputeGraphColoring()",
    "kind": "Method",
    "detail": "Function (const TArray<TArray<int32>> ConstraintsPerColor =)",
    "insertText": "ComputeGraphColoring(MeshConstraints, Particles)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<TVec4<int32>> ReorderedConstraints ; TArray<FSolverReal> ReorderedRestLength ; TArray<FSolverReal> ReorderedVolumes ; TArray<int32> OrigToReorderedIndices ; ReorderedConstraints .)",
    "insertText": "SetNumUninitialized(MeshConstraints.Num())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ReorderedVolumes .)",
    "insertText": "SetNumUninitialized(Volumes.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Reset(ConstraintsPerColor.Num() + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ReorderedIndex = 0 ;)",
    "insertText": "for(const TArray<int32>& ConstraintsBatch : ConstraintsPerColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Add(ReorderedIndex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MeshConstraints =)",
    "insertText": "MoveTemp(ReorderedConstraints)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Volumes =)",
    "insertText": "MoveTemp(ReorderedVolumes)"
  },
  {
    "label": "GetVolumeDelta()",
    "kind": "Method",
    "detail": "Function (} protected : TVec4<FSolverVec3>)",
    "insertText": "GetVolumeDelta(const FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3> Grads ; const TVec4<int32>& Constraint = MeshConstraints [ ElementIndex ] ; const FSolverVec3& P1 = Particles .)",
    "insertText": "P(Constraint[0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(Constraint[1])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "P(Constraint[2])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = Particles .)",
    "insertText": "P(Constraint[3])"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P2P1 = P2 - P1 ; const FSolverVec3 P4P1 = P4 - P1 ; const FSolverVec3 P3P1 = P3 - P1 ; Grads [ 1 ] =)",
    "insertText": "CrossProduct(P3P1, P4P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 2 ] =)",
    "insertText": "CrossProduct(P4P1, P2P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 3 ] =)",
    "insertText": "CrossProduct(P2P1, P3P1) / (FSolverReal)"
  },
  {
    "label": "Grads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grads(Grads[1] + Grads[2] + Grads[3])"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "AlphaTilde(FSolverReal)1. / (Stiffness * Dt * Dt)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FSolverReal DLambda = Volumes [ ElementIndex ] - Volume - AlphaTilde* LambdaArray [ ElementIndex ] ; FSolverReal Denom = AlphaTilde ;)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = Grads [ i ] [ j ]* Particles .)",
    "insertText": "InvM(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} } DLambda / = Denom ; LambdaArray [ ElementIndex ] + = DLambda ; TVec4<FSolverVec3>)",
    "insertText": "Delta(FSolverVec3((FSolverReal)0.))"
  }
]