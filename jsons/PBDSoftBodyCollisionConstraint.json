[
  {
    "label": "FPBDSoftBodyCollisionConstraintBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSoftBodyCollisionConstraintBase"
  },
  {
    "label": "FPBDSoftBodyCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSoftBodyCollisionConstraint"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverCollisionParticles . h \" # include \" Chaos / SoftsSolverCollisionParticlesRange . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / CollectionPropertyFacade . h \" # if !)",
    "insertText": "defined(CHAOS_PER_PARTICLE_COLLISION_ISPC_ENABLED_DEFAULT)"
  },
  {
    "label": "FPBDSoftBodyCollisionConstraintBase()",
    "kind": "Method",
    "detail": "Function (# else bool bChaos_SoftBodyCollision_ISPC_Enabled ; # endif namespace Chaos::Softs { class FPBDSoftBodyCollisionConstraintBase { public :)",
    "insertText": "FPBDSoftBodyCollisionConstraintBase(const TArray<FSolverRigidTransform3>& InLastCollisionTransforms, FSolverReal InCollisionThickness, FSolverReal InFrictionCoefficient, bool bInUseCCD, FSolverReal InProximityStiffness, TArray<bool>* InCollisionParticleCollided = nullptr, TArray<FSolverVec3>* InContacts = nullptr, TArray<FSolverVec3>* InNormals = nullptr, TArray<FSolverReal>* InPhis = nullptr ) : LastCollisionTransforms(InLastCollisionTransforms) , CollisionThickness(InCollisionThickness) , FrictionCoefficient(InFrictionCoefficient) , bUseCCD(bInUseCCD) , ProximityStiffness(InProximityStiffness) , CollisionParticleCollided(InCollisionParticleCollided) , Contacts(InContacts) , Normals(InNormals) , Phis(InPhis)"
  },
  {
    "label": "SetWriteDebugContacts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWriteDebugContacts(bool bWrite)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bWriteDebugContacts = bWrite ; } void)",
    "insertText": "Apply(FSolverParticlesRange& Particles, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>& CollisionParticles)"
  },
  {
    "label": "UpdateLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinearSystem(const FSolverParticlesRange& Particles, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>& CollisionParticles, FEvolutionLinearSystem& LinearSystem)"
  },
  {
    "label": "ApplyInternal()",
    "kind": "Method",
    "detail": "Function (private : template<bool bLockAndWriteContacts,bool bWithFriction> void)",
    "insertText": "ApplyInternal(FSolverParticlesRange& Particles, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>& CollisionParticles)"
  },
  {
    "label": "ApplyInternalCCD()",
    "kind": "Method",
    "detail": "Function (template<bool bLockAndWriteContacts,bool bWithFriction> void)",
    "insertText": "ApplyInternalCCD(FSolverParticlesRange& Particles, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>& CollisionParticles)"
  },
  {
    "label": "ApplyInternalISPC()",
    "kind": "Method",
    "detail": "Function (template<bool bWithFriction> void)",
    "insertText": "ApplyInternalISPC(FSolverParticlesRange& Particles, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>& CollisionParticles)"
  },
  {
    "label": "DefaultCollisionThickness()",
    "kind": "Method",
    "detail": "Function (protected : const TArray<FSolverRigidTransform3>& LastCollisionTransforms ; FSolverReal CollisionThickness ; FSolverReal FrictionCoefficient ; bool bUseCCD ; FSolverReal ProximityStiffness ; bool bWriteDebugContacts = false ; TArray<bool>* const CollisionParticleCollided ; TArray<FSolverVec3>* const Contacts ; TArray<FSolverVec3>* const Normals ; TArray<FSolverReal>* const Phis ; FCriticalSection DebugMutex ; } ; class FPBDSoftBodyCollisionConstraint : public FPBDSoftBodyCollisionConstraintBase { typedef FPBDSoftBodyCollisionConstraintBase Base ; public : FSolverReal)",
    "insertText": "DefaultCollisionThickness(FSolverReal)"
  },
  {
    "label": "DefaultFrictionCoefficient()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultFrictionCoefficient(FSolverReal)"
  },
  {
    "label": "DefaultProximityStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultProximityStiffness(FSolverReal)"
  },
  {
    "label": "FPBDSoftBodyCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDSoftBodyCollisionConstraint(const TArray<FSolverRigidTransform3>& InLastCollisionTransforms, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal InMeshScale, TArray<bool>* InCollisionParticleCollided = nullptr, TArray<FSolverVec3>* InContacts = nullptr, TArray<FSolverVec3>* InNormals = nullptr, TArray<FSolverReal>* InPhis = nullptr) : Base(InLastCollisionTransforms, InMeshScale * GetCollisionThickness(PropertyCollection, DefaultCollisionThickness), GetFrictionCoefficient(PropertyCollection, DefaultFrictionCoefficient), GetUseCCD(PropertyCollection, false), GetProximityStiffness(PropertyCollection, DefaultProximityStiffness), InCollisionParticleCollided, InContacts, InNormals, InPhis) , MeshScale(InMeshScale) , CollisionThicknessIndex(PropertyCollection) , FrictionCoefficientIndex(PropertyCollection) , UseCCDIndex(PropertyCollection) , ProximityStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : const FSolverReal MeshScale ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(CollisionThickness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(FrictionCoefficient, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(UseCCD, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(ProximityStiffness, float)"
  }
]