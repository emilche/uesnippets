[
  {
    "label": "ReConfigChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReConfigChunkConfig"
  },
  {
    "label": "ReConfigChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReConfigChunk"
  },
  {
    "label": "ReConfigChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_RECONFIG_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_RECONFIG_CHUNK_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / parameter / parameter . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct ReConfigChunkConfig : ChunkConfig { int kType = 1 3 0 ; size_t kHeaderSize = 4 ; size_t kVariableLengthAlignment = 1 ; } ; class ReConfigChunk : public Chunk,public TLVTrait<ReConfigChunkConfig> { public : int kType = ReConfigChunkConfig::kType ;)",
    "insertText": "ReConfigChunk(Parameters parameters) : parameters_(std::move(parameters))"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<ReConfigChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "parameters()",
    "kind": "Method",
    "detail": "Function (const Parameters&)",
    "insertText": "parameters()"
  }
]