[
  {
    "label": "UInputSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputSettings"
  },
  {
    "label": "FInputAxisConfigEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisConfigEntry"
  },
  {
    "label": "FInputActionKeyMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionKeyMapping"
  },
  {
    "label": "FInputAxisKeyMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAxisKeyMapping"
  },
  {
    "label": "FInputActionSpeechMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputActionSpeechMapping"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHardwareDeviceIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHardwareDeviceIdentifier"
  },
  {
    "label": "UInputPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputPlatformSettings"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" GameFramework / PlayerInput . h \" # include \" Components / InputComponent . h \" # include \" Engine / PlatformSettings . h \" # include \" InputSettings . generated . h \")",
    "insertText": "UCLASS(config=Input, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config, EditAnywhere, EditFixedSize, Category=\"Bindings\", meta=(ToolTip=\"List of Axis Properties\"), AdvancedDisplay)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(struct FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostReloadConfig()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostReloadConfig(class FProperty* PropertyThatWasLoaded)"
  },
  {
    "label": "RemoveInvalidKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInvalidKeys()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "GetUniqueActionName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueActionName(const FName BaseActionMappingName)"
  },
  {
    "label": "GetUniqueAxisName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueAxisName(const FName BaseAxisMappingName)"
  },
  {
    "label": "AddActionMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActionMapping(FInputActionKeyMapping& NewMapping)"
  },
  {
    "label": "AddAxisMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAxisMapping(FInputAxisKeyMapping& NewMapping)"
  },
  {
    "label": "GetActionMappings()",
    "kind": "Method",
    "detail": "Function (const TArray<FInputActionKeyMapping>&)",
    "insertText": "GetActionMappings()"
  },
  {
    "label": "GetAxisMappings()",
    "kind": "Method",
    "detail": "Function (const TArray<FInputAxisKeyMapping>&)",
    "insertText": "GetAxisMappings()"
  },
  {
    "label": "GetSpeechMappings()",
    "kind": "Method",
    "detail": "Function (const TArray<FInputActionSpeechMapping>&)",
    "insertText": "GetSpeechMappings()"
  },
  {
    "label": "DoesActionExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesActionExist(const FName InActionName)"
  },
  {
    "label": "DoesAxisExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAxisExist(const FName InAxisName)"
  },
  {
    "label": "DoesSpeechExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSpeechExist(const FName InSpeechName)"
  },
  {
    "label": "GetActionMappingsPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetActionMappingsPropertyName()"
  },
  {
    "label": "GetAxisMappingsPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetAxisMappingsPropertyName()"
  },
  {
    "label": "GetDefaultPlayerInputClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetDefaultPlayerInputClass()"
  },
  {
    "label": "GetDefaultInputComponentClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetDefaultInputComponentClass()"
  },
  {
    "label": "SetDefaultPlayerInputClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultPlayerInputClass(TSubclassOf<UPlayerInput> NewDefaultPlayerInputClass)"
  },
  {
    "label": "SetDefaultInputComponentClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultInputComponentClass(TSubclassOf<UInputComponent> NewDefaultInputComponentClass)"
  },
  {
    "label": "PopulateAxisConfigs()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PopulateAxisConfigs()"
  },
  {
    "label": "AddInternationalConsoleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternationalConsoleKey()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM(BlueprintType, Meta = (Bitflags, UseEnumValuesAsMaskValuesInEditor = \"true\"))"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int32 { Unspecified = 0 x00000000,Keypress = 0 x00000001,Pointer = 0 x00000002,Gamepad = 0 x00000004,Touch = 0 x00000008,Camera = 0 x00000010,MotionTracking = 0 x00000020,Lights = 0 x00000040,TriggerHaptics = 0 x00000080,ForceFeedback = 0 x00000100,AudioBasedVibrations = 0 x00000200,Acceleration = 0 x00000400,= 0 x00000800,Microphone = 0 x00001000,Orientation = 0 x00002000,Guitar = 0 x00004000,Drums = 0 x00008000,CustomA = 0 x01000000,CustomB = 0 x02000000,CustomC = 0 x04000000,CustomD = 0 x08000000,All = 0 x7FFFFFFF)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ENUM_CLASS_FLAGS(EHardwareDeviceSupportedFeatures::Type)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Unspecified,KeyboardAndMouse,Gamepad,Touch,MotionTracking,RacingWheel,FlightStick,Camera,Instrument,CustomTypeA,CustomTypeB,CustomTypeC,CustomTypeD,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API FHardwareDeviceIdentifier()"
  },
  {
    "label": "FHardwareDeviceIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHardwareDeviceIdentifier(const FName InClassName, const FName InHardwareDeviceIdentifier, EHardwareDevicePrimaryType InPrimaryType = EHardwareDevicePrimaryType::Unspecified, EHardwareDeviceSupportedFeatures::Type Flags = EHardwareDeviceSupportedFeatures::Unspecified)"
  },
  {
    "label": "HasAnySupportedFeatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySupportedFeatures(const EHardwareDeviceSupportedFeatures::Type FlagsToCheck)"
  },
  {
    "label": "HasAllSupportedFeatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllSupportedFeatures(const EHardwareDeviceSupportedFeatures::Type FlagsToCheck)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FHardwareDeviceIdentifier Invalid ; FHardwareDeviceIdentifier DefaultKeyboardAndMouse ; FHardwareDeviceIdentifier DefaultGamepad ; FHardwareDeviceIdentifier DefaultMobileTouch ; bool)",
    "insertText": "operator(const FHardwareDeviceIdentifier& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FHardwareDeviceIdentifier& InDevice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FHardwareDeviceIdentifier& InDevice)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UInputPlatformSettings()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UInputPlatformSettings*)",
    "insertText": "Get()"
  },
  {
    "label": "GetHardwareDeviceForClassName()",
    "kind": "Method",
    "detail": "Function (# endif const FHardwareDeviceIdentifier*)",
    "insertText": "GetHardwareDeviceForClassName(const FName InHardwareDeviceIdentifier)"
  },
  {
    "label": "AddHardwareDeviceIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHardwareDeviceIdentifier(const FHardwareDeviceIdentifier& InHardwareDevice)"
  },
  {
    "label": "GetHardwareDevices()",
    "kind": "Method",
    "detail": "Function (const TArray<FHardwareDeviceIdentifier>&)",
    "insertText": "GetHardwareDevices()"
  }
]