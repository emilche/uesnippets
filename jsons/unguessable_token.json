[
  {
    "label": "UnguessableTokenHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnguessableTokenHash"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_UNGUESSABLE_TOKEN_H_ # define BASE_UNGUESSABLE_TOKEN_H_ # include<stdint . h> # include<string . h> # include<iosfwd> # include<tuple> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / hash / hash . h \" # include \" base / token . h \" namespace base { struct UnguessableTokenHash ; class BASE_EXPORT UnguessableToken { public : UnguessableToken)",
    "insertText": "Create()"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (const UnguessableToken&)",
    "insertText": "Null()"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (UnguessableToken)",
    "insertText": "Deserialize(uint64_t high, uint64_t low)"
  },
  {
    "label": "UnguessableToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnguessableToken()"
  },
  {
    "label": "UnguessableToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnguessableToken(const UnguessableToken&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnguessableToken&)",
    "insertText": "operator(const UnguessableToken&)"
  },
  {
    "label": "UnguessableToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnguessableToken(UnguessableToken&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnguessableToken&)",
    "insertText": "operator(UnguessableToken&&)"
  },
  {
    "label": "GetHighForSerialization()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetHighForSerialization()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!is_empty())"
  },
  {
    "label": "GetLowForSerialization()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "GetLowForSerialization()"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "AsBytes()",
    "kind": "Method",
    "detail": "Function (} span<const uint8_t,1 6>)",
    "insertText": "AsBytes()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const UnguessableToken& other)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(UNIT_TEST) static UnguessableToken CreateForTesting(uint64_t high, uint64_t low)"
  },
  {
    "label": "UnguessableToken()",
    "kind": "Method",
    "detail": "Function (} # endif private : struct UnguessableTokenHash ;)",
    "insertText": "UnguessableToken(const Token& token)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (base::Token token_ ; } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const UnguessableToken& token)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct UnguessableTokenHash { size_t)",
    "insertText": "operator()(const base::UnguessableToken& token)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(token)"
  }
]