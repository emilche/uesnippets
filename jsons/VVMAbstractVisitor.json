[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "VCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCell"
  },
  {
    "label": "VRestValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VRestValue"
  },
  {
    "label": "FAbstractVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbstractVisitor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReferrerToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferrerToken"
  },
  {
    "label": "FReferrerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferrerContext"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (class UObject ; namespace Verse { struct VCell ; struct VRestValue ; struct FAbstractVisitor {)",
    "insertText": "UE_NONCOPYABLE(FAbstractVisitor)"
  },
  {
    "label": "FReferrerToken()",
    "kind": "Method",
    "detail": "Function (bool bIsAbstractVisitor = true ; enum class EReferrerType { Cell,UObject,} ; struct FReferrerToken {)",
    "insertText": "FReferrerToken(VCell* Cell)"
  },
  {
    "label": "FReferrerToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReferrerToken(UObject* Object)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EReferrerType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsCell()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCell()"
  },
  {
    "label": "AsCell()",
    "kind": "Method",
    "detail": "Function (VCell*)",
    "insertText": "AsCell()"
  },
  {
    "label": "IsUObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUObject()"
  },
  {
    "label": "AsUObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "AsUObject()"
  },
  {
    "label": "FReferrerContext()",
    "kind": "Method",
    "detail": "Function (private : uint64 EncodingBits = 0 b1 ; uint64 EncodedBits { 0 } ; } ; struct FReferrerContext {)",
    "insertText": "FReferrerContext(FAbstractVisitor& InVisitor, FReferrerToken InReferrer)"
  },
  {
    "label": "FReferrerContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FReferrerContext()"
  },
  {
    "label": "GetReferrer()",
    "kind": "Method",
    "detail": "Function (FReferrerToken)",
    "insertText": "GetReferrer()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (FReferrerContext*)",
    "insertText": "GetContext()"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(UObject*& InObject, const TCHAR* ElementName)"
  },
  {
    "label": "VisitAuxNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAuxNonNull(void* InAux, const TCHAR* ElementName)"
  },
  {
    "label": "VisitEmergentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitEmergentType(const VEmergentType* InEmergentType)"
  },
  {
    "label": "VisitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitObject(const TCHAR* ElementName, FUtf8StringView TypeName, TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitObject(const TCHAR* ElementName, TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitObject(ElementName, \"\", VisitBody)"
  },
  {
    "label": "VisitPair()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitPair(TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitClass(FUtf8StringView ClassName, TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitFunction(FUtf8StringView FunctionName, TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitConstrainedInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitConstrainedInt(TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "VisitConstrainedFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitConstrainedFloat(TFunctionRef<void()> VisitBody)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(bool& bValue, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(FString& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint64& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int64& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint32& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int32& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint16& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int16& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint8& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int8& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VFloat&, const TCHAR* ElementName)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArray(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndArray()"
  },
  {
    "label": "BeginString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginString(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndString()"
  },
  {
    "label": "BeginSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSet(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSet()"
  },
  {
    "label": "BeginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginMap(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMap()"
  },
  {
    "label": "BeginOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginOption()"
  },
  {
    "label": "EndOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOption()"
  },
  {
    "label": "VisitBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitBulkData(void* Data, uint64 DataSize, const TCHAR* ElementName)"
  },
  {
    "label": "IsMarked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMarked(VCell* InCell, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(UObject*& InObject, const TCHAR* ElementName)"
  },
  {
    "label": "VisitAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAux(void* InAux, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VValue& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VPlaceholder&, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VRestValue& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Visit(TWriteBarrier<T>& Value, const TCHAR* ElementName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using TValue = TWriteBarrier<T>::TValue ;)",
    "insertText": "if(IsLoading())"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (TValue Scratch = TValue { } ;)",
    "insertText": "Visit(Scratch, ElementName)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Set(GetLoadingContext(), Scratch)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TWriteBarrier<T>::bIsAux)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Set(GetLoadingContext(), Scratch->StaticCast<T>())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { Value .)",
    "insertText": "Reset()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } } else { if)",
    "insertText": "constexpr(TWriteBarrier<T>::bIsVValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TValue Scratch = Value .)",
    "insertText": "Get()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "Visit(T Begin, T End)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<ElementType,AllocatorType> void)",
    "insertText": "Visit(TArray<ElementType, AllocatorType>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<ElementType,KeyFuncs,Allocator> void)",
    "insertText": "Visit(const TSet<ElementType, KeyFuncs, Allocator>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<KeyType,ValueType,SetAllocator,KeyFuncs> void)",
    "insertText": "Visit(TMap<KeyType, ValueType, SetAllocator, KeyFuncs>& Values, const TCHAR* ElementName)"
  },
  {
    "label": "ReportNativeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportNativeBytes(size_t Bytes)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (} FArchive*)",
    "insertText": "GetUnderlyingArchive()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "IsTextFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextFormat()"
  },
  {
    "label": "GetLoadingContext()",
    "kind": "Method",
    "detail": "Function (FAccessContext)",
    "insertText": "GetLoadingContext()"
  },
  {
    "label": "FAbstractVisitor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FAbstractVisitor()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (private : FReferrerContext* Context { nullptr } ; } ; template<ValueType> void)",
    "insertText": "Visit(FAbstractVisitor& Visitor, ValueType& Value, const TCHAR* ElementName)"
  }
]