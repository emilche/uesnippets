[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "IsWheelPowered()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" SimpleVehicle . h \" # include \" TransmissionSystem . h \" # include \" WheelSystem . h \" namespace Chaos { class FTransmissionUtility { public : bool)",
    "insertText": "IsWheelPowered(const EDifferentialType DifferentialType, const FSimpleWheelSim& PWheel)"
  },
  {
    "label": "IsWheelPowered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWheelPowered(const EDifferentialType DifferentialType, const FSimpleWheelConfig::EAxleType AxleType, const bool EngineEnabled = false)"
  },
  {
    "label": "GetNumWheelsOnAxle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumWheelsOnAxle(FSimpleWheelConfig::EAxleType AxleType, const TArray<FSimpleWheelSim>& Wheels)"
  },
  {
    "label": "GetNumDrivenWheels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumDrivenWheels(const TArray<FSimpleWheelSim>& Wheels)"
  },
  {
    "label": "GetTorqueRatioForWheel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTorqueRatioForWheel(const FSimpleDifferentialSim& PDifferential, const int WheelIndex, const TArray<FSimpleWheelSim>& Wheels)"
  }
]