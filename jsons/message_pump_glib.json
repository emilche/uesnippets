[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpGlib",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpGlib"
  },
  {
    "label": "MessagePumpGLibFdWatchTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpGLibFdWatchTest"
  },
  {
    "label": "GMainContextDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GMainContextDeleter"
  },
  {
    "label": "GSourceDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSourceDeleter"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_GLIB_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_GLIB_H_ # include<glib . h> # include<memory> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / message_loop / watchable_io_message_pump_posix . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT MessagePumpGlib : public MessagePump,public WatchableIOMessagePumpPosix { public : class FdWatchController : public FdWatchControllerInterface { public :)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FdWatchController(const FdWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FdWatchController&)",
    "insertText": "operator(const FdWatchController&)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FdWatchController()"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor()"
  },
  {
    "label": "InitOrUpdate()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpGlib ; class MessagePumpGLibFdWatchTest ; bool)",
    "insertText": "InitOrUpdate(int fd, int mode, FdWatcher* watcher)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Attach(MessagePumpGlib* pump)"
  },
  {
    "label": "NotifyCanRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyCanRead()"
  },
  {
    "label": "NotifyCanWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyCanWrite()"
  },
  {
    "label": "MessagePumpGlib()",
    "kind": "Method",
    "detail": "Function (raw_ptr<FdWatcher> watcher_ = nullptr ; raw_ptr<GSource> source_ = nullptr ; std::unique_ptr<GPollFD> poll_fd_ ; raw_ptr<bool> was_destroyed_ = nullptr ; } ;)",
    "insertText": "MessagePumpGlib()"
  },
  {
    "label": "MessagePumpGlib()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpGlib(const MessagePumpGlib&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpGlib&)",
    "insertText": "operator(const MessagePumpGlib&)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, int mode, FdWatchController* controller, FdWatcher* delegate)"
  },
  {
    "label": "HandlePrepare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandlePrepare()"
  },
  {
    "label": "HandleCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCheck()"
  },
  {
    "label": "HandleDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDispatch()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "HandleFdWatchCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFdWatchCheck(FdWatchController* controller)"
  },
  {
    "label": "HandleFdWatchDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFdWatchDispatch(FdWatchController* controller)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct GMainContextDeleter { void)",
    "insertText": "operator()(GMainContext* context)"
  },
  {
    "label": "g_main_context_pop_thread_default()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g_main_context_pop_thread_default(context)"
  },
  {
    "label": "g_main_context_unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g_main_context_unref(context)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } ; struct GSourceDeleter { void)",
    "insertText": "operator()(GSource* source)"
  },
  {
    "label": "g_source_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g_source_destroy(source)"
  },
  {
    "label": "g_source_unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g_source_unref(source)"
  },
  {
    "label": "ShouldQuit()",
    "kind": "Method",
    "detail": "Function (} } } ; bool)",
    "insertText": "ShouldQuit()"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (struct RunState ; raw_ptr<RunState> state_ ; std::unique_ptr<GMainContext,GMainContextDeleter> owned_context_ ; raw_ptr<GMainContext> context_ = nullptr ; std::unique_ptr<GSource,GSourceDeleter> work_source_ ; int wakeup_pipe_read_ ; int wakeup_pipe_write_ ; std::unique_ptr<GPollFD> wakeup_gpollfd_ ;)",
    "insertText": "THREAD_CHECKER(watch_fd_caller_checker_)"
  }
]