[
  {
    "label": "EmptyTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmptyTrait"
  },
  {
    "label": "Exclude",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Exclude"
  },
  {
    "label": "CallSecondTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallSecondTag"
  },
  {
    "label": "CallFirstTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallFirstTag"
  },
  {
    "label": "InvalidTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InvalidTrait"
  },
  {
    "label": "TraitFilterType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraitFilterType"
  },
  {
    "label": "ArgType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgType"
  },
  {
    "label": "CheckArgumentIsCompatible",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckArgumentIsCompatible"
  },
  {
    "label": "TestCompatibleArgument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestCompatibleArgument"
  },
  {
    "label": "BasicTraitFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BasicTraitFilter"
  },
  {
    "label": "EnumTraitFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnumTraitFilter"
  },
  {
    "label": "OptionalEnumTraitFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OptionalEnumTraitFilter"
  },
  {
    "label": "RequiredEnumTraitFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequiredEnumTraitFilter"
  },
  {
    "label": "ValidTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValidTraits"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HasTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasTrait"
  },
  {
    "label": "NotATraitTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotATraitTag"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRAITS_BAG_H_ # define BASE_TRAITS_BAG_H_ # include<initializer_list> # include<tuple> # include<type_traits> # include<utility> # include \" base / parameter_pack . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace trait_helpers { struct EmptyTrait { } ; template<. . . TraitsToExclude> struct Exclude { template<T,std::enable_if_t<ParameterPack<TraitsToExclude . . .>::template HasType<T>::value>* = nullptr> EmptyTrait)",
    "insertText": "Filter(T t)"
  },
  {
    "label": "GetTraitFromArg()",
    "kind": "Method",
    "detail": "Function (} template<class TraitFilterType,class ArgType> InvalidTrait)",
    "insertText": "GetTraitFromArg(CallSecondTag, ArgType arg)"
  },
  {
    "label": "any_of()",
    "kind": "Method",
    "detail": "Function (} template<class TraitFilterType,class . . . ArgTypes,class TestCompatibleArgument = std::enable_if_t<)",
    "insertText": "any_of({std::is_constructible<TraitFilterType, ArgTypes>::value...})>> constexpr TraitFilterType GetTraitFromArgListImpl(CallFirstTag, ArgTypes... args)"
  },
  {
    "label": "GetTraitFromArgListImpl()",
    "kind": "Method",
    "detail": "Function (} template<class TraitFilterType,class . . . ArgTypes> TraitFilterType)",
    "insertText": "GetTraitFromArgListImpl(CallSecondTag, ArgTypes... args)"
  },
  {
    "label": "GetTraitFromArgList()",
    "kind": "Method",
    "detail": "Function (} template<class TraitFilterType,class . . . ArgTypes> TraitFilterType::ValueType)",
    "insertText": "GetTraitFromArgList(ArgTypes... args)"
  },
  {
    "label": "BasicTraitFilter()",
    "kind": "Method",
    "detail": "Function (} template<T,_ValueType = T> struct BasicTraitFilter { using ValueType = _ValueType ;)",
    "insertText": "BasicTraitFilter(ValueType v) : value(v)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "ValueType()"
  },
  {
    "label": "EnumTraitFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EnumTraitFilter(ArgType arg) : BasicTraitFilter<ArgType>(arg)"
  },
  {
    "label": "OptionalEnumTraitFilter()",
    "kind": "Method",
    "detail": "Function (} } ; template<ArgType> struct OptionalEnumTraitFilter : public BasicTraitFilter<ArgType,absl::optional<ArgType>> {)",
    "insertText": "OptionalEnumTraitFilter() : BasicTraitFilter<ArgType, absl::optional<ArgType>>(absl::nullopt)"
  },
  {
    "label": "OptionalEnumTraitFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OptionalEnumTraitFilter(ArgType arg) : BasicTraitFilter<ArgType, absl::optional<ArgType>>(arg)"
  },
  {
    "label": "RequiredEnumTraitFilter()",
    "kind": "Method",
    "detail": "Function (} } ; template<ArgType> struct RequiredEnumTraitFilter : public BasicTraitFilter<ArgType> {)",
    "insertText": "RequiredEnumTraitFilter(ArgType arg) : BasicTraitFilter<ArgType>(arg)"
  },
  {
    "label": "all_of()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ValidTraits,class T> using IsValidTrait = std::disjunction<std::is_constructible<ValidTraits,T>,std::is_same<T,EmptyTrait>> ; template<class ValidTraits,class . . . ArgTypes> using AreValidTraits = std::bool_constant<)",
    "insertText": "all_of({IsValidTrait<ValidTraits, ArgTypes>::value...})"
  },
  {
    "label": "GetEnum()",
    "kind": "Method",
    "detail": "Function (template<Enum,. . . Args> Enum)",
    "insertText": "GetEnum(Args... args)"
  },
  {
    "label": "GetOptionalEnum()",
    "kind": "Method",
    "detail": "Function (} template<Enum,. . . Args> absl::optional<Enum>)",
    "insertText": "GetOptionalEnum(Args... args)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<Trait,. . . Args> struct HasTrait : ParameterPack<Args . . .>::template HasType<Trait> {)",
    "insertText": "static_assert(count({std::is_constructible<Trait, Args>::value...}, true) <= 1, \"The traits bag contains multiple traits of the same type.\")"
  }
]