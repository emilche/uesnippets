[
  {
    "label": "UMaterialExpressionTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionTextureSample"
  },
  {
    "label": "FWebBrowserTextureSamplePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserTextureSamplePool"
  },
  {
    "label": "SAndroidWebBrowserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAndroidWebBrowserWidget"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& Args)"
  },
  {
    "label": "ExecuteJavascript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteJavascript(const FString& Script)"
  },
  {
    "label": "LoadURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadURL(const FString& NewURL)"
  },
  {
    "label": "LoadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadString(const FString& Content, const FString& BaseUrl)"
  },
  {
    "label": "StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoad()"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reload()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoBack()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoForward()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "SendTouchDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchDown(FVector2D Position)"
  },
  {
    "label": "SendTouchUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchUp(FVector2D Position)"
  },
  {
    "label": "SendTouchMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchMove(FVector2D Position)"
  },
  {
    "label": "HandleShouldInterceptRequest()",
    "kind": "Method",
    "detail": "Function (jbyteArray)",
    "insertText": "HandleShouldInterceptRequest(jstring JUrl)"
  },
  {
    "label": "HandleShouldOverrideUrlLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShouldOverrideUrlLoading(jstring JUrl)"
  },
  {
    "label": "HandleJsDialog()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HandleJsDialog(Dialog)"
  },
  {
    "label": "HandleJsDialog()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HandleJsDialog(Dialog)"
  },
  {
    "label": "HandleReceivedTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedTitle(jstring JTitle)"
  },
  {
    "label": "HandlePageLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePageLoad(jstring JUrl, bool bIsLoading, int InHistorySize, int InHistoryPosition)"
  },
  {
    "label": "HandleReceivedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedError(jint ErrorCode, jstring JMessage, jstring JUrl)"
  },
  {
    "label": "GetWidgetPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAndroidWebBrowserWidget>)",
    "insertText": "GetWidgetPtr(JNIEnv* JEnv, jobject Jobj)"
  },
  {
    "label": "SetWebBrowserVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWebBrowserVisibility(bool InIsVisible)"
  },
  {
    "label": "HandleJsDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleJsDialog(TSharedPtr<IWebBrowserDialog>& Dialog)"
  },
  {
    "label": "ConvertMouseEventToLocal()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ConvertMouseEventToLocal(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]