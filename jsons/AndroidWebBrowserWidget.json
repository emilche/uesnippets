[
  {
    "label": "UMaterialExpressionTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionTextureSample"
  },
  {
    "label": "FWebBrowserTextureSamplePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserTextureSamplePool"
  },
  {
    "label": "SAndroidWebBrowserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAndroidWebBrowserWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if USE_ANDROID_JNI # include \" Widgets / SLeafWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" AndroidWebBrowserWindow . h \" # include \" AndroidWebBrowserDialog . h \" # include \" Android / AndroidJava . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" UObject / Class . h \" # include \" UObject / UObjectGlobals . h \" # include \" AndroidJavaWebBrowser . h \" # include \" Engine / Texture2D . h \" # include \" Materials / MaterialInstanceDynamic . h \" # include \" WebBrowserTexture . h \" # include<jni . h> class UMaterialExpressionTextureSample ; class FWebBrowserTextureSamplePool ; class SAndroidWebBrowserWidget : public SViewport {)",
    "insertText": "SLATE_BEGIN_ARGS(SAndroidWebBrowserWidget) : _InitialURL(\"about:blank\") , _UseTransparency(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FString, InitialURL)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, UseTransparency)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FAndroidWebBrowserWindow>, WebBrowserWindow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(FString, UserAgentApplication)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() public: virtual ~SAndroidWebBrowserWidget()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& Args)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ExecuteJavascript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteJavascript(const FString& Script)"
  },
  {
    "label": "LoadURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadURL(const FString& NewURL)"
  },
  {
    "label": "LoadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadString(const FString& Content, const FString& BaseUrl)"
  },
  {
    "label": "StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoad()"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reload()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoBack()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoForward()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SendTouchDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchDown(FVector2D Position)"
  },
  {
    "label": "SendTouchUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchUp(FVector2D Position)"
  },
  {
    "label": "SendTouchMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTouchMove(FVector2D Position)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "HandleShouldInterceptRequest()",
    "kind": "Method",
    "detail": "Function (jbyteArray)",
    "insertText": "HandleShouldInterceptRequest(jstring JUrl)"
  },
  {
    "label": "HandleShouldOverrideUrlLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShouldOverrideUrlLoading(jstring JUrl)"
  },
  {
    "label": "HandleJsDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleJsDialog(EWebBrowserDialogType Type, jstring JUrl, jstring MessageText, jobject ResultCallback)"
  },
  {
    "label": "Dialog()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserDialog>)",
    "insertText": "Dialog(new FWebBrowserDialog(Type, MessageText, ResultCallback))"
  },
  {
    "label": "HandleJsPrompt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleJsPrompt(jstring JUrl, jstring MessageText, jstring DefaultPrompt, jobject ResultCallback)"
  },
  {
    "label": "Dialog()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IWebBrowserDialog>)",
    "insertText": "Dialog(new FWebBrowserDialog(MessageText, DefaultPrompt, ResultCallback))"
  },
  {
    "label": "HandleReceivedTitle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleReceivedTitle(jstring JTitle)"
  },
  {
    "label": "HandlePageLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePageLoad(jstring JUrl, bool bIsLoading, int InHistorySize, int InHistoryPosition)"
  },
  {
    "label": "HandleReceivedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedError(jint ErrorCode, jstring JMessage, jstring JUrl)"
  },
  {
    "label": "GetWidgetPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAndroidWebBrowserWidget>)",
    "insertText": "GetWidgetPtr(JNIEnv* JEnv, jobject Jobj)"
  },
  {
    "label": "SetWebBrowserVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWebBrowserVisibility(bool InIsVisible)"
  },
  {
    "label": "HandleJsDialog()",
    "kind": "Method",
    "detail": "Function (protected : FCriticalSection WebControlsCS ; TMap<int64,TWeakPtr<SAndroidWebBrowserWidget>> AllWebControls ; bool)",
    "insertText": "HandleJsDialog(TSharedPtr<IWebBrowserDialog>& Dialog)"
  },
  {
    "label": "ConvertMouseEventToLocal()",
    "kind": "Method",
    "detail": "Function (int HistorySize ; int HistoryPosition ; TWeakPtr<FAndroidWebBrowserWindow> WebBrowserWindowPtr ; private : FVector2D)",
    "insertText": "ConvertMouseEventToLocal(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]