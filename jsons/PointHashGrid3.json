[
  {
    "label": "TPointHashGrid3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointHashGrid3"
  },
  {
    "label": "TPointHashGrid3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" # include \" Util / GridIndexing3 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<PointDataType,RealType> class TPointHashGrid3 { private : TMultiMap<FVector3i,PointDataType> Hash ; FCriticalSection CriticalSection ; TScaleGridIndexer3<RealType> Indexer ; PointDataType InvalidValue ; public :)",
    "insertText": "TPointHashGrid3(RealType cellSize, PointDataType InvalidValue) : Indexer(cellSize), InvalidValue(InvalidValue)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "GetInvalidValue()",
    "kind": "Method",
    "detail": "Function (} PointDataType)",
    "insertText": "GetInvalidValue()"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i idx = Indexer .)",
    "insertText": "ToGrid(Position)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function ({ FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Add(idx, Value)"
  },
  {
    "label": "InsertPointUnsafe()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertPointUnsafe(const PointDataType& Value, const TVector<RealType>& Position)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemovePoint(const PointDataType& Value, const TVector<RealType>& Position)"
  },
  {
    "label": "RemovePointUnsafe()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "RemovePointUnsafe(const PointDataType& Value, const TVector<RealType>& Position)"
  },
  {
    "label": "IsCellEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCellEmpty(const TVector<RealType>& Position)"
  },
  {
    "label": "IsCellEmptyUnsafe()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsCellEmptyUnsafe(const TVector<RealType>& Position)"
  },
  {
    "label": "UpdatePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePoint(const PointDataType& Value, const TVector<RealType>& OldPosition, const TVector<RealType>& NewPosition)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i old_idx = Indexer .)",
    "insertText": "ToGrid(OldPosition)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i new_idx = Indexer .)",
    "insertText": "ToGrid(NewPosition)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (bWasAtOldPos = Hash .)",
    "insertText": "RemoveSingle(old_idx, Value)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(bWasAtOldPos)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Add(new_idx, Value)"
  },
  {
    "label": "UpdatePointUnsafe()",
    "kind": "Method",
    "detail": "Function (} return ; } void)",
    "insertText": "UpdatePointUnsafe(const PointDataType& Value, const TVector<RealType>& OldPosition, const TVector<RealType>& NewPosition)"
  },
  {
    "label": "FindNearestInRadius()",
    "kind": "Method",
    "detail": "Function (} TPair<PointDataType,RealType>)",
    "insertText": "FindNearestInRadius(const TVector<RealType>& QueryPoint, RealType Radius, TFunctionRef<RealType(const PointDataType&)> DistanceSqFunc)"
  },
  {
    "label": "FindAnyInRadius()",
    "kind": "Method",
    "detail": "Function (} TPair<PointDataType,RealType>)",
    "insertText": "FindAnyInRadius(const TVector<RealType>& QueryPoint, RealType Radius, TFunctionRef<RealType(const PointDataType&)> DistanceSqFunc, TFunctionRef<bool(const PointDataType&)> IgnoreFunc)"
  },
  {
    "label": "FindAnyInRadius()",
    "kind": "Method",
    "detail": "Function (} TPair<PointDataType,RealType>)",
    "insertText": "FindAnyInRadius(const TVector<RealType>& QueryPoint, RealType Radius, TFunctionRef<RealType(const PointDataType&)> DistanceSqFunc)"
  },
  {
    "label": "FindPointsInBall()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "FindPointsInBall(const TVector<RealType>& QueryPoint, RealType Radius, TFunctionRef<RealType(const PointDataType&)> DistanceSqFunc, TArray<PointDataType>& ResultsOut, TFunctionRef<bool(const PointDataType&)> IgnoreFunc = [](const PointDataType& data) { return false; })"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i min_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint - Radius * TVector<RealType>::One())"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i max_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint + Radius * TVector<RealType>::One())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealType RadiusSquared = Radius* Radius ;)",
    "insertText": "for(int zi = min_idx.Z; zi <= max_idx.Z; zi++)"
  },
  {
    "label": "idx()",
    "kind": "Method",
    "detail": "Function (FVector3i)",
    "insertText": "idx(xi, yi, zi)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const PointDataType& Value = It .)",
    "insertText": "Value()"
  },
  {
    "label": "DistanceSqFunc()",
    "kind": "Method",
    "detail": "Function (continue ; } RealType distsq =)",
    "insertText": "DistanceSqFunc(Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResultsOut .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } } } } return ResultsOut .)",
    "insertText": "Num()"
  },
  {
    "label": "EnumeratePointsInBall()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumeratePointsInBall(const TVector<RealType>& QueryPoint, RealType Radius, TFunctionRef<RealType(const PointDataType&)> DistanceSqFunc, TFunctionRef<bool(PointDataType, double)> ProcessPointFunc, TFunctionRef<bool(const PointDataType&)> IgnoreFunc = [](const PointDataType& data) { return false; })"
  },
  {
    "label": "IgnoreFunc()",
    "kind": "Method",
    "detail": "Function (auto SearchCell = [ this,& Nearest,& MinDistSq,& DistanceSqFunc,&)",
    "insertText": "IgnoreFunc(FVector3i CellIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFound = false ;)",
    "insertText": "for(typename TMultiMap<FVector3i, PointDataType>::TConstKeyIterator It = Hash.CreateConstKeyIterator(CellIdx); It; ++It)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nearest = Value ; MinDistSq = DistSq ;)",
    "insertText": "if(bEarlyOut)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType SearchRadius = Radius ;)",
    "insertText": "if(SearchCell(CenterIdx))"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} SearchRadius =)",
    "insertText": "Sqrt(MinDistSq)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector3i min_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint - SearchRadius * TVector<RealType>::One())"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector3i max_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint + SearchRadius * TVector<RealType>::One())"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (FVector3i)",
    "insertText": "Idx(xi, yi, zi)"
  },
  {
    "label": "SearchCell()",
    "kind": "Method",
    "detail": "Function (bool bFound =)",
    "insertText": "SearchCell(Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "if(Nearest == GetInvalidValue())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MinDistSq = TNumericLimits<RealType)",
    "insertText": "Max()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (} return TPair<PointDataType,)",
    "insertText": "RealType(Nearest, MinDistSq)"
  }
]