[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "BitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitVector"
  },
  {
    "label": "BlockFrequency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFrequency"
  },
  {
    "label": "LiveRangeCalc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRangeCalc"
  },
  {
    "label": "LiveVariables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveVariables"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "MachineBlockFrequencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBlockFrequencyInfo"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "HMEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HMEditor"
  },
  {
    "label": "LiveIntervals()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVEINTERVALANALYSIS_H # define LLVM_CODEGEN_LIVEINTERVALANALYSIS_H # include \" llvm / ADT / IndexedMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / CodeGen / LiveInterval . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / SlotIndexes . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / CommandLine . h \" # include \" llvm / Target / TargetRegisterInfo . h \" # include<cmath> # include<iterator> namespace llvm { cl::opt<bool> UseSegmentSetForPhysRegs ; class AliasAnalysis ; class BitVector ; class BlockFrequency ; class LiveRangeCalc ; class LiveVariables ; class MachineDominatorTree ; class MachineLoopInfo ; class TargetRegisterInfo ; class MachineRegisterInfo ; class TargetInstrInfo ; class TargetRegisterClass ; class VirtRegMap ; class MachineBlockFrequencyInfo ; class LiveIntervals : public MachineFunctionPass { MachineFunction* MF ; MachineRegisterInfo* MRI ; const TargetRegisterInfo* TRI ; const TargetInstrInfo* TII ; AliasAnalysis* AA ; SlotIndexes* Indexes ; MachineDominatorTree* DomTree ; LiveRangeCalc* LRCalc ; VNInfo::Allocator VNInfoAllocator ; IndexedMap<LiveInterval*,VirtReg2IndexFunctor> VirtRegIntervals ; SmallVector<SlotIndex,8> RegMaskSlots ; SmallVector<const uint32_t*,8> RegMaskBits ; SmallVector<std::pair<unsigned,unsigned>,8> RegMaskBlocks ; SmallVector<LiveRange*,0> RegUnitRanges ; public : char ID ;)",
    "insertText": "LiveIntervals()"
  },
  {
    "label": "getSpillWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getSpillWeight(bool isDef, bool isUse, const MachineBlockFrequencyInfo *MBFI, const MachineInstr *Instr)"
  },
  {
    "label": "getInterval()",
    "kind": "Method",
    "detail": "Function (LiveInterval&)",
    "insertText": "getInterval(unsigned Reg)"
  },
  {
    "label": "hasInterval()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasInterval(unsigned Reg)"
  },
  {
    "label": "createEmptyInterval()",
    "kind": "Method",
    "detail": "Function (} LiveInterval&)",
    "insertText": "createEmptyInterval(unsigned Reg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!hasInterval(Reg) && \"Interval already exists!\")"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (VirtRegIntervals .)",
    "insertText": "grow(Reg)"
  },
  {
    "label": "createInterval()",
    "kind": "Method",
    "detail": "Function (VirtRegIntervals [ Reg ] =)",
    "insertText": "createInterval(Reg)"
  },
  {
    "label": "createEmptyInterval()",
    "kind": "Method",
    "detail": "Function (LiveInterval& LI =)",
    "insertText": "createEmptyInterval(Reg)"
  },
  {
    "label": "computeVirtRegInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeVirtRegInterval(LI)"
  },
  {
    "label": "addSegmentToEndOfBlock()",
    "kind": "Method",
    "detail": "Function (delete VirtRegIntervals [ Reg ] ; VirtRegIntervals [ Reg ] = nullptr ; } LiveInterval::Segment)",
    "insertText": "addSegmentToEndOfBlock(unsigned reg, MachineInstr* startInst)"
  },
  {
    "label": "shrinkToUses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "shrinkToUses(LiveInterval *li, SmallVectorImpl<MachineInstr*> *dead = nullptr)"
  },
  {
    "label": "shrinkToUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrinkToUses(LiveInterval::SubRange &SR, unsigned Reg)"
  },
  {
    "label": "extendToIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extendToIndices(LiveRange &LR, ArrayRef<SlotIndex> Indices)"
  },
  {
    "label": "pruneValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneValue(LiveRange &LR, SlotIndex Kill, SmallVectorImpl<SlotIndex> *EndPoints)"
  },
  {
    "label": "getSlotIndexes()",
    "kind": "Method",
    "detail": "Function (SlotIndexes*)",
    "insertText": "getSlotIndexes()"
  },
  {
    "label": "getInstructionIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getInstructionIndex(const MachineInstr *instr)"
  },
  {
    "label": "getInstructionFromIndex()",
    "kind": "Method",
    "detail": "Function (} MachineInstr*)",
    "insertText": "getInstructionFromIndex(SlotIndex index)"
  },
  {
    "label": "getMBBStartIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBStartIdx(const MachineBasicBlock *mbb)"
  },
  {
    "label": "getMBBEndIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBEndIdx(const MachineBasicBlock *mbb)"
  },
  {
    "label": "isLiveInToMBB()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiveInToMBB(const LiveRange &LR, const MachineBasicBlock *mbb)"
  },
  {
    "label": "isLiveOutOfMBB()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiveOutOfMBB(const LiveRange &LR, const MachineBasicBlock *mbb)"
  },
  {
    "label": "getMBBFromIndex()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "getMBBFromIndex(SlotIndex index)"
  },
  {
    "label": "insertMBBInMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insertMBBInMaps(MachineBasicBlock *MBB)"
  },
  {
    "label": "insertMBBInMaps()",
    "kind": "Method",
    "detail": "Function (Indexes ->)",
    "insertText": "insertMBBInMaps(MBB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(MBB->getNumber()) == RegMaskBlocks.size() && \"Blocks must be added in order.\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (RegMaskBlocks .)",
    "insertText": "push_back(std::make_pair(RegMaskSlots.size(), 0))"
  },
  {
    "label": "InsertMachineInstrInMaps()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "InsertMachineInstrInMaps(MachineInstr *MI)"
  },
  {
    "label": "InsertMachineInstrRangeInMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertMachineInstrRangeInMaps(MachineBasicBlock::iterator B, MachineBasicBlock::iterator E)"
  },
  {
    "label": "RemoveMachineInstrFromMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveMachineInstrFromMaps(MachineInstr *MI)"
  },
  {
    "label": "removeMachineInstrFromMaps()",
    "kind": "Method",
    "detail": "Function (Indexes ->)",
    "insertText": "removeMachineInstrFromMaps(MI)"
  },
  {
    "label": "ReplaceMachineInstrInMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceMachineInstrInMaps(MachineInstr *MI, MachineInstr *NewMI)"
  },
  {
    "label": "replaceMachineInstrInMaps()",
    "kind": "Method",
    "detail": "Function (Indexes ->)",
    "insertText": "replaceMachineInstrInMaps(MI, NewMI)"
  },
  {
    "label": "findLiveInMBBs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "findLiveInMBBs(SlotIndex Start, SlotIndex End, SmallVectorImpl<MachineBasicBlock*> &MBBs)"
  },
  {
    "label": "getVNInfoAllocator()",
    "kind": "Method",
    "detail": "Function (} VNInfo::Allocator&)",
    "insertText": "getVNInfoAllocator()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction&)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &O, const Module* = nullptr)"
  },
  {
    "label": "intervalIsInOneMBB()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock*)",
    "insertText": "intervalIsInOneMBB(const LiveInterval &LI)"
  },
  {
    "label": "hasPHIKill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasPHIKill(const LiveInterval &LI, const VNInfo *VNI)"
  },
  {
    "label": "addKillFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addKillFlags(const VirtRegMap*)"
  },
  {
    "label": "handleMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleMove(MachineInstr* MI, bool UpdateFlags = false)"
  },
  {
    "label": "handleMoveIntoBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleMoveIntoBundle(MachineInstr* MI, MachineInstr* BundleStart, bool UpdateFlags = false)"
  },
  {
    "label": "repairIntervalsInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repairIntervalsInRange(MachineBasicBlock *MBB, MachineBasicBlock::iterator Begin, MachineBasicBlock::iterator End, ArrayRef<unsigned> OrigRegs)"
  },
  {
    "label": "getRegMaskSlots()",
    "kind": "Method",
    "detail": "Function (ArrayRef<SlotIndex>)",
    "insertText": "getRegMaskSlots()"
  },
  {
    "label": "getRegMaskSlots()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,unsigned> P = RegMaskBlocks [ MBBNum ] ; return)",
    "insertText": "getRegMaskSlots().slice(P.first, P.second)"
  },
  {
    "label": "getRegMaskBits()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<const uint32_t*>)",
    "insertText": "getRegMaskBits()"
  },
  {
    "label": "getRegMaskBits()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,unsigned> P = RegMaskBlocks [ MBBNum ] ; return)",
    "insertText": "getRegMaskBits().slice(P.first, P.second)"
  },
  {
    "label": "checkRegMaskInterference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "checkRegMaskInterference(LiveInterval &LI, BitVector &UsableRegs)"
  },
  {
    "label": "getRegUnit()",
    "kind": "Method",
    "detail": "Function (LiveRange&)",
    "insertText": "getRegUnit(unsigned Unit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LiveRange* LR = RegUnitRanges [ Unit ] ;)",
    "insertText": "if(!LR)"
  },
  {
    "label": "LiveRange()",
    "kind": "Method",
    "detail": "Function (RegUnitRanges [ Unit ] = LR = new)",
    "insertText": "LiveRange(UseSegmentSetForPhysRegs)"
  },
  {
    "label": "computeRegUnitRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegUnitRange(*LR, Unit)"
  },
  {
    "label": "getCachedRegUnit()",
    "kind": "Method",
    "detail": "Function (} return* LR ; } LiveRange*)",
    "insertText": "getCachedRegUnit(unsigned Unit)"
  },
  {
    "label": "removeVRegDefAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeVRegDefAt(LiveInterval &LI, SlotIndex Pos)"
  },
  {
    "label": "computeVirtRegs()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "computeVirtRegs()"
  },
  {
    "label": "computeRegMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegMasks()"
  },
  {
    "label": "computeDeadValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeDeadValues(LiveInterval &LI, SmallVectorImpl<MachineInstr*> *dead)"
  },
  {
    "label": "createInterval()",
    "kind": "Method",
    "detail": "Function (LiveInterval*)",
    "insertText": "createInterval(unsigned Reg)"
  },
  {
    "label": "printInstrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printInstrs(raw_ostream &O)"
  },
  {
    "label": "dumpInstrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpInstrs()"
  },
  {
    "label": "computeLiveInRegUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeLiveInRegUnits()"
  },
  {
    "label": "computeRegUnitRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegUnitRange(LiveRange&, unsigned Unit)"
  },
  {
    "label": "computeVirtRegInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeVirtRegInterval(LiveInterval&)"
  },
  {
    "label": "repairOldRegInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repairOldRegInRange(MachineBasicBlock::iterator Begin, MachineBasicBlock::iterator End, const SlotIndex endIdx, LiveRange &LR, unsigned Reg, unsigned LaneMask = ~0u)"
  }
]