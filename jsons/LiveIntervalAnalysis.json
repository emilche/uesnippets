[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "BitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitVector"
  },
  {
    "label": "BlockFrequency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFrequency"
  },
  {
    "label": "LiveRangeCalc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRangeCalc"
  },
  {
    "label": "LiveVariables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveVariables"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "MachineBlockFrequencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBlockFrequencyInfo"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "HMEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HMEditor"
  },
  {
    "label": "LiveIntervals()",
    "kind": "Method",
    "detail": "Function (typeid)",
    "insertText": "LiveIntervals()"
  },
  {
    "label": "getSpillWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getSpillWeight(bool isDef, bool isUse,\n                                const MachineBlockFrequencyInfo *MBFI,\n                                const MachineInstr *Instr)"
  },
  {
    "label": "createAndComputeVirtRegInterval()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "createAndComputeVirtRegInterval(Reg)"
  },
  {
    "label": "addSegmentToEndOfBlock()",
    "kind": "Method",
    "detail": "Function (LiveInterval::Segment)",
    "insertText": "addSegmentToEndOfBlock(unsigned reg,\n                                                 MachineInstr* startInst)"
  },
  {
    "label": "shrinkToUses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "shrinkToUses(LiveInterval *li,\n                      SmallVectorImpl<MachineInstr*> *dead = nullptr)"
  },
  {
    "label": "shrinkToUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrinkToUses(LiveInterval::SubRange &SR, unsigned Reg)"
  },
  {
    "label": "extendToIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extendToIndices(LiveRange &LR, ArrayRef<SlotIndex> Indices)"
  },
  {
    "label": "pruneValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneValue(LiveRange &LR, SlotIndex Kill,\n                    SmallVectorImpl<SlotIndex> *EndPoints)"
  },
  {
    "label": "addKillFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addKillFlags(const VirtRegMap*)"
  },
  {
    "label": "handleMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleMove(MachineInstr* MI, bool UpdateFlags = false)"
  },
  {
    "label": "handleMoveIntoBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleMoveIntoBundle(MachineInstr* MI, MachineInstr* BundleStart,\n                              bool UpdateFlags = false)"
  },
  {
    "label": "repairIntervalsInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repairIntervalsInRange(MachineBasicBlock *MBB,\n                                MachineBasicBlock::iterator Begin,\n                                MachineBasicBlock::iterator End,\n                                ArrayRef<unsigned> OrigRegs)"
  },
  {
    "label": "checkRegMaskInterference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkRegMaskInterference(LiveInterval &LI,\n                                  BitVector &UsableRegs)"
  },
  {
    "label": "LiveRange()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LiveRange(UseSegmentSetForPhysRegs)"
  },
  {
    "label": "removePhysRegDefAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePhysRegDefAt(unsigned Reg, SlotIndex Pos)"
  },
  {
    "label": "removeVRegDefAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeVRegDefAt(LiveInterval &LI, SlotIndex Pos)"
  },
  {
    "label": "computeVirtRegs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeVirtRegs()"
  },
  {
    "label": "computeRegMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegMasks()"
  },
  {
    "label": "computeDeadValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeDeadValues(LiveInterval &LI,\n                           SmallVectorImpl<MachineInstr*> *dead)"
  },
  {
    "label": "computeLiveInRegUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeLiveInRegUnits()"
  },
  {
    "label": "computeRegUnitRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegUnitRange(LiveRange&, unsigned Unit)"
  },
  {
    "label": "computeVirtRegInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeVirtRegInterval(LiveInterval&)"
  },
  {
    "label": "repairOldRegInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repairOldRegInRange(MachineBasicBlock::iterator Begin,\n                             MachineBasicBlock::iterator End,\n                             const SlotIndex endIdx, LiveRange &LR,\n                             unsigned Reg, unsigned LaneMask = ~0u)"
  }
]