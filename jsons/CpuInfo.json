[
  {
    "label": "CpuInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CpuInfo"
  },
  {
    "label": "Cpu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cpu"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CpuInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<sched . h> # include<map> # include<string> # include<vector> namespace swappy { class CpuInfo { public : struct Cpu { enum class Type { Little,Big } ; int id ; int package_id ; long frequency ; Type type ; } ;)",
    "insertText": "CpuInfo()"
  },
  {
    "label": "getNumberOfCpus()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getNumberOfCpus()"
  },
  {
    "label": "getCpus()",
    "kind": "Method",
    "detail": "Function (const std::vector<Cpu>&)",
    "insertText": "getCpus()"
  },
  {
    "label": "getHardware()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "getHardware()"
  },
  {
    "label": "getNumberOfLittleCores()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getNumberOfLittleCores()"
  },
  {
    "label": "getNumberOfBigCores()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getNumberOfBigCores()"
  },
  {
    "label": "getLittleCoresMask()",
    "kind": "Method",
    "detail": "Function (cpu_set_t)",
    "insertText": "getLittleCoresMask()"
  },
  {
    "label": "getBigCoresMask()",
    "kind": "Method",
    "detail": "Function (cpu_set_t)",
    "insertText": "getBigCoresMask()"
  },
  {
    "label": "to_mask()",
    "kind": "Method",
    "detail": "Function (private : std::vector<Cpu> mCpus ; std::string mHardware ; unsigned int mNumberOfLittleCores = 0 ; unsigned int mNumberOfBigCores = 0 ; cpu_set_t mLittleCoresMask ; cpu_set_t mBigCoresMask ; } ; unsigned int)",
    "insertText": "to_mask(cpu_set_t cpu_set)"
  }
]