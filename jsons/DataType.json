[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_DataType_h # define Alembic_AbcCoreAbstract_DataType_h # include<Alembic / AbcCoreAbstract / Foundation . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT DataType : Alembic::Util::totally_ordered<DataType> { public :)",
    "insertText": "DataType() : m_pod( kUnknownPOD ), m_extent( 0)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DataType(PlainOldDataType iPod, uint8_t iExtent = 1 ) : m_pod( iPod ), m_extent( iExtent)"
  },
  {
    "label": "getPod()",
    "kind": "Method",
    "detail": "Function (} PlainOldDataType)",
    "insertText": "getPod()"
  },
  {
    "label": "getExtent()",
    "kind": "Method",
    "detail": "Function (m_pod = iPod ; } uint8_t)",
    "insertText": "getExtent()"
  },
  {
    "label": "getNumBytes()",
    "kind": "Method",
    "detail": "Function (m_extent = iExtent ; } size_t)",
    "insertText": "getNumBytes()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const DataType &b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } private : PlainOldDataType m_pod ; uint8_t m_extent ; } ; std::ostream&)",
    "insertText": "operator(std::ostream &ostr, const DataType &a)"
  },
  {
    "label": "PODName()",
    "kind": "Method",
    "detail": "Function (ostr<<)",
    "insertText": "PODName(a.getPod())"
  },
  {
    "label": "ostr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ostr(size_t )a.getExtent()"
  }
]