[
  {
    "label": "LibyuvFrameBufferUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibyuvFrameBufferUtils"
  },
  {
    "label": "LibyuvFrameBufferUtils()",
    "kind": "Method",
    "detail": "Function (# ifndef TENSORFLOW_LITE_SUPPORT_CC_TASK_VISION_UTILS_LIBYUV_FRAME_BUFFER_UTILS_H_ # define TENSORFLOW_LITE_SUPPORT_CC_TASK_VISION_UTILS_LIBYUV_FRAME_BUFFER_UTILS_H_ # include \" absl / status / status . h \" # include \" tensorflow_lite_support / cc / task / vision / core / frame_buffer . h \" # include \" tensorflow_lite_support / cc / task / vision / utils / frame_buffer_utils_interface . h \" namespace tflite { namespace task { namespace vision { class LibyuvFrameBufferUtils : public FrameBufferUtilsInterface { public :)",
    "insertText": "LibyuvFrameBufferUtils()"
  },
  {
    "label": "Crop()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "Crop(const FrameBuffer& buffer, int x0, int y0, int x1, int y1, FrameBuffer* output_buffer)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "Resize(const FrameBuffer& buffer, FrameBuffer* output_buffer)"
  },
  {
    "label": "ResizeNearestNeighbor()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "ResizeNearestNeighbor(const FrameBuffer& buffer, FrameBuffer* output_buffer)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "Rotate(const FrameBuffer& buffer, int angle_deg, FrameBuffer* output_buffer)"
  },
  {
    "label": "FlipHorizontally()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "FlipHorizontally(const FrameBuffer& buffer, FrameBuffer* output_buffer)"
  },
  {
    "label": "FlipVertically()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "FlipVertically(const FrameBuffer& buffer, FrameBuffer* output_buffer)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (absl::Status)",
    "insertText": "Convert(const FrameBuffer& buffer, FrameBuffer* output_buffer)"
  }
]