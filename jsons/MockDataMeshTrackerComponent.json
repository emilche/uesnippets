[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMockDataMeshTrackerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMockDataMeshTrackerComponent"
  },
  {
    "label": "UMRMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FMockDataMeshTrackerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockDataMeshTrackerImpl"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / SceneComponent . h \" # include \" Delegates / DelegateCombinations . h \" # include \" MockDataMeshTrackerComponent . generated . h \")",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogMockMeshDataTracker, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None)",
    "insertText": "UMETA(DisplayName = \"No Vertex Color\"), Confidence UMETA(DisplayName = \"Vertex Confidence\"), Block UMETA(DisplayName = \"Blocks Colored\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup = Rendering, BlueprintType, Blueprintable, EditInlineNew, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: MRMESH_API ~UMockDataMeshTrackerComponent()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams(FOnMockDataMeshTrackerUpdated, int32, Index, const TArray<FVector>&, Vertices, const TArray<int32>&, Triangles, const TArray<FVector>&, Normals, const TArray<float>&, Confidence)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& e)"
  },
  {
    "label": "UpdateBlock()",
    "kind": "Method",
    "detail": "Function (# endif private : class FMockDataMeshTrackerImpl* Impl ; float LastUpdateTime = 0 . 0 f ; float CurrentTime = 0 . 0 f ; int32 UpdateCount = 0 ; int32 NumBlocks = 4 ; void)",
    "insertText": "UpdateBlock(int32 BlockIndex)"
  },
  {
    "label": "RemoveBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlock(int32 BlockIndex)"
  },
  {
    "label": "PrePIEEnded()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR private : void)",
    "insertText": "PrePIEEnded(bool bWasSimulatingInEditor)"
  }
]