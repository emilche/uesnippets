[
  {
    "label": "BufferSlots",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferSlots"
  },
  {
    "label": "StorageStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StorageStats"
  },
  {
    "label": "FileSender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileSender"
  },
  {
    "label": "FileFetcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileFetcher"
  },
  {
    "label": "CalculateCasKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBinaryReaderWriter . h \" # include \" UbaHash . h \" # include \" UbaNetworkMessage . h \" # include<oodle2 . h> namespace uba { struct BufferSlots ; struct StorageStats ; u8 DefaultCompressor = OodleLZ_Compressor_Kraken ; u8 DefaultCompressionLevel = OodleLZ_CompressionLevel_SuperFast ; CasKey)",
    "insertText": "CalculateCasKey(u8* fileMem, u64 fileSize, bool storeCompressed, WorkManager* workManager, const tchar* hint)"
  },
  {
    "label": "SendBatchMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendBatchMessages(Logger& logger, NetworkClient& client, u16 fetchId, u8* slot, u64 capacity, u64 left, u32 messageMaxSize, u32& readIndex, u32& responseSize, const Function<bool()>& runInWaitFunc = {})"
  },
  {
    "label": "SendFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendFile(Logger& logger, NetworkClient& client, const CasKey& casKey, const u8* sourceMem, u64 sourceSize, const tchar* hint)"
  },
  {
    "label": "SendFileCompressed()",
    "kind": "Method",
    "detail": "Function (struct FileSender { bool)",
    "insertText": "SendFileCompressed(const CasKey& casKey, const tchar* fileName, const u8* sourceMem, u64 sourceSize, const tchar* hint)"
  },
  {
    "label": "RetrieveFile()",
    "kind": "Method",
    "detail": "Function (Logger& m_logger ; NetworkClient& m_client ; BufferSlots& m_bufferSlots ; StorageStats& m_stats ; ReaderWriterLock& m_sendOneAtTheTimeLock ; u8 m_casCompressor = DefaultCompressor ; u8 m_casCompressionLevel = DefaultCompressionLevel ; u64 m_bytesSent = 0 ; } ; struct FileFetcher { bool)",
    "insertText": "RetrieveFile(Logger& logger, NetworkClient& client, const CasKey& casKey, const tchar* destination, bool destinationIsCompressed, MemoryBlock* destinationMem = nullptr)"
  }
]