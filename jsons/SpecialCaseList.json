[
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "Regex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Regex"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "SpecialCaseList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpecialCaseList"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_SPECIALCASELIST_H # define LLVM_SUPPORT_SPECIALCASELIST_H # include \" llvm / ADT / StringMap . h \" # include<string> # include<vector> namespace llvm { class MemoryBuffer ; class Regex ; class StringRef ; class SpecialCaseList { public : std::unique_ptr<SpecialCaseList>)",
    "insertText": "create(const std::vector<std::string> &Paths, std::string &Error)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SpecialCaseList>)",
    "insertText": "create(const MemoryBuffer *MB, std::string &Error)"
  },
  {
    "label": "createOrDie()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SpecialCaseList>)",
    "insertText": "createOrDie(const std::vector<std::string> &Paths)"
  },
  {
    "label": "SpecialCaseList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SpecialCaseList()"
  },
  {
    "label": "inSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "inSection(StringRef Section, StringRef Query, StringRef Category = StringRef())"
  },
  {
    "label": "SpecialCaseList()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SpecialCaseList(SpecialCaseList const &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpecialCaseList&)",
    "insertText": "operator(SpecialCaseList const &)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(const MemoryBuffer *MB, std::string &Error)"
  },
  {
    "label": "compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compile()"
  }
]