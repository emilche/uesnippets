[
  {
    "label": "FEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventNode"
  },
  {
    "label": "DisabledField",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DisabledField"
  },
  {
    "label": "TFieldType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFieldType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLiteralName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiteralName"
  },
  {
    "label": "FFieldDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldDesc"
  },
  {
    "label": "TField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TField"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EventProps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EventProps"
  },
  {
    "label": "Field_WriteAuxData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Config . h \" # if TRACE_PRIVATE_MINIMAL_ENABLED # include \" Atomic . h \" # include \" Protocol . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Trace . h \" # include \" Writer . inl \" # define STATICALLY_SIZED_ARRAY_FIELDS_SUPPORT 0 namespace UE { namespace Trace { namespace Private { void)",
    "insertText": "Field_WriteAuxData(uint32, const uint8*, int32)"
  },
  {
    "label": "Field_WriteStringAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Field_WriteStringAnsi(uint32, const ANSICHAR*, int32)"
  },
  {
    "label": "Field_WriteStringAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Field_WriteStringAnsi(uint32, const WIDECHAR*, int32)"
  },
  {
    "label": "Field_WriteStringWide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Field_WriteStringWide(uint32, const WIDECHAR*, int32)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (class FEventNode ; } enum DisabledField { } ; template<Type> struct TFieldType ; template<> struct TFieldType<DisabledField> { enum { Tid = 0,Size = 0 } ; } ; template<> struct TFieldType<bool> { enum { Tid =)",
    "insertText": "int(EFieldType::Bool), Size = sizeof(bool)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<int8> { enum { Tid =)",
    "insertText": "int(EFieldType::Int8), Size = sizeof(int8)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<int16> { enum { Tid =)",
    "insertText": "int(EFieldType::Int16), Size = sizeof(int16)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<int32> { enum { Tid =)",
    "insertText": "int(EFieldType::Int32), Size = sizeof(int32)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<int64> { enum { Tid =)",
    "insertText": "int(EFieldType::Int64), Size = sizeof(int64)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<uint8> { enum { Tid =)",
    "insertText": "int(EFieldType::Uint8), Size = sizeof(uint8)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<uint16> { enum { Tid =)",
    "insertText": "int(EFieldType::Uint16), Size = sizeof(uint16)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<uint32> { enum { Tid =)",
    "insertText": "int(EFieldType::Uint32), Size = sizeof(uint32)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<uint64> { enum { Tid =)",
    "insertText": "int(EFieldType::Uint64), Size = sizeof(uint64)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<float> { enum { Tid =)",
    "insertText": "int(EFieldType::Float32),Size = sizeof(float)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<double> { enum { Tid =)",
    "insertText": "int(EFieldType::Float64),Size = sizeof(double)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct TFieldType<T*> { enum { Tid =)",
    "insertText": "int(EFieldType::Pointer),Size = sizeof(void*)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TFieldType<T [ ]> { enum { Tid =)",
    "insertText": "int(TFieldType<T>::Tid)|int(EFieldType::Array)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; # if STATICALLY_SIZED_ARRAY_FIELDS_SUPPORT template<T,int N> struct TFieldType<T [ N ]> { enum { Tid =)",
    "insertText": "int(TFieldType<T>::Tid)|int(EFieldType::Array), Size = sizeof(T[N])"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<> struct TFieldType<AnsiString> { enum { Tid =)",
    "insertText": "int(EFieldType::AnsiString)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TFieldType<WideString> { enum { Tid =)",
    "insertText": "int(EFieldType::WideString)"
  },
  {
    "label": "FLiteralName()",
    "kind": "Method",
    "detail": "Function (} ; struct FLiteralName { template<uint32 Size>)",
    "insertText": "FLiteralName(const ANSICHAR (&Name)[Size]) : Ptr(Name) , Length(Size - 1)"
  },
  {
    "label": "FFieldDesc()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR* Ptr ; uint8 Length ; } ; struct FFieldDesc {)",
    "insertText": "FFieldDesc(const FLiteralName& Name, uint8 Type, uint16 Offset, uint16 Size, uint32 ReferencedUid = 0) : Name(Name.Ptr) , ValueOffset(Offset) , ValueSize(Size) , NameSize(Name.Length) , TypeInfo(Type) , Reference(ReferencedUid)"
  },
  {
    "label": "NumFieldsMask()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR* Name ; uint16 ValueOffset ; uint16 ValueSize ; uint8 NameSize ; uint8 TypeInfo ; uint32 Reference ; } ; template<int InIndex,int InOffset,Type> struct TField ; enum class EIndexPack { NumFieldsMax = 1<<FAuxHeader::FieldBits,NumFieldsShift = 8,)",
    "insertText": "NumFieldsMask(1 << NumFieldsShift)"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex, InOffset, Type)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\ Index = InIndex,\\ Offset = InOffset,\\ Tid = TFieldType<Type>::Tid,\\ Size = TFieldType<Type>::Size,\\ } ; \\)",
    "insertText": "static_assert((Index & int(EIndexPack::NumFieldsMask)) < int(EIndexPack::NumFieldsMax), \"Trace events may only have up to EIndexPack::NumFieldsMax fields\")"
  },
  {
    "label": "TField()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ FFieldDesc FieldDesc ; \\ public : \\)",
    "insertText": "TField(const FLiteralName& Name) \\ : FieldDesc(Name, Tid, Offset, Size)"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (\\ } template<int InIndex,int InOffset,Type> struct TField<InIndex,InOffset,Type [ ]> {)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex + int(EIndexPack::AuxFieldCounter), InOffset, Type[])"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; # if STATICALLY_SIZED_ARRAY_FIELDS_SUPPORT template<int InIndex,int InOffset,Type,int Count> struct TField<InIndex,InOffset,Type [ Count ]> {)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex, InOffset, Type[Count])"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<int InIndex,int InOffset> struct TField<InIndex,InOffset,AnsiString> {)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex + int(EIndexPack::AuxFieldCounter), InOffset, AnsiString)"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; template<int InIndex,int InOffset> struct TField<InIndex,InOffset,WideString> {)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex + int(EIndexPack::AuxFieldCounter), InOffset, WideString)"
  },
  {
    "label": "TRACE_PRIVATE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; template<int InIndex,int InOffset,DefinitionType> struct TField<InIndex,InOffset,TEventRef<DefinitionType>> {)",
    "insertText": "TRACE_PRIVATE_FIELD(InIndex, InOffset, DefinitionType)"
  },
  {
    "label": "TField()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TField(const FLiteralName& Name, uint32 ReferencedUid) : FieldDesc(Name, Tid, Offset, Size, ReferencedUid)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; # undef TRACE_PRIVATE_FIELD enum EventProps { } ; template<int InNumFields,int InSize> struct TField<InNumFields,InSize,EventProps> { enum : uint16 { NumFields = InNumFields&)",
    "insertText": "int(EIndexPack::NumFieldsMask), Size = InSize, NumAuxFields = (InNumFields >> int(EIndexPack::NumFieldsShift)) & int(EIndexPack::NumFieldsMask)"
  }
]