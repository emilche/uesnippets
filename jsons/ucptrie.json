[
  {
    "label": "UCPTrie",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UCPTrie"
  },
  {
    "label": "UCPTrieType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCPTrieType"
  },
  {
    "label": "UCPTrieValueWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCPTrieValueWidth"
  },
  {
    "label": "ucptrie_openFromBinary()",
    "kind": "Method",
    "detail": "Function (# ifndef __UCPTRIE_H__ # define __UCPTRIE_H__ # include \" unicode / utypes . h \" # ifndef # include \" unicode / localpointer . h \" # include \" unicode / ucpmap . h \" # include \" unicode / utf8 . h \" U_CDECL_BEGIN # ifndef U_IN_DOXYGEN typedef union UCPTrieData { const void* ptr0 ; const uint16_t* ptr16 ; const uint32_t* ptr32 ; const uint8_t* ptr8 ; } UCPTrieData ; # endif struct UCPTrie { # ifndef U_IN_DOXYGEN const uint16_t* index ; UCPTrieData data ; int32_t indexLength ; int32_t dataLength ; UChar32 highStart ; uint16_t shifted12HighStart ; int8_t type ; int8_t valueWidth ; uint32_t reserved32 ; uint16_t reserved16 ; uint16_t index3NullOffset ; int32_t dataNullOffset ; uint32_t nullValue ; # ifdef UCPTRIE_DEBUG const char* name ; # endif # endif } ; # ifndef U_IN_DOXYGEN typedef struct UCPTrie UCPTrie ; # endif enum UCPTrieType { UCPTRIE_TYPE_ANY = - 1,UCPTRIE_TYPE_FAST,UCPTRIE_TYPE_SMALL } ; # ifndef U_IN_DOXYGEN typedef enum UCPTrieType UCPTrieType ; # endif enum UCPTrieValueWidth { UCPTRIE_VALUE_BITS_ANY = - 1,UCPTRIE_VALUE_BITS_16,UCPTRIE_VALUE_BITS_32,UCPTRIE_VALUE_BITS_8 } ; # ifndef U_IN_DOXYGEN typedef enum UCPTrieValueWidth UCPTrieValueWidth ; # endif U_CAPI UCPTrie* U_EXPORT2)",
    "insertText": "ucptrie_openFromBinary(UCPTrieType type, UCPTrieValueWidth valueWidth, const void *data, int32_t length, int32_t *pActualLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucptrie_close()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "ucptrie_close(UCPTrie *trie)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUCPTriePointer, UCPTrie, ucptrie_close)"
  },
  {
    "label": "ucptrie_getType()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_CAPI UCPTrieType U_EXPORT2)",
    "insertText": "ucptrie_getType(const UCPTrie *trie)"
  },
  {
    "label": "ucptrie_getValueWidth()",
    "kind": "Method",
    "detail": "Function (U_CAPI UCPTrieValueWidth U_EXPORT2)",
    "insertText": "ucptrie_getValueWidth(const UCPTrie *trie)"
  },
  {
    "label": "ucptrie_get()",
    "kind": "Method",
    "detail": "Function (U_CAPI uint32_t U_EXPORT2)",
    "insertText": "ucptrie_get(const UCPTrie *trie, UChar32 c)"
  },
  {
    "label": "ucptrie_getRange()",
    "kind": "Method",
    "detail": "Function (U_CAPI UChar32 U_EXPORT2)",
    "insertText": "ucptrie_getRange(const UCPTrie *trie, UChar32 start, UCPMapRangeOption option, uint32_t surrogateValue, UCPMapValueFilter *filter, const void *context, uint32_t *pValue)"
  },
  {
    "label": "ucptrie_toBinary()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "ucptrie_toBinary(const UCPTrie *trie, void *data, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "UCPTRIE_16()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UCPTRIE_16(trie, i) ((trie)->data.ptr16[i]) #define UCPTRIE_32(trie, i) ((trie)->data.ptr32[i]) #define UCPTRIE_8(trie, i) ((trie)->data.ptr8[i]) #define UCPTRIE_FAST_GET(trie, dataAccess, c) dataAccess(trie, _UCPTRIE_CP_INDEX(trie, 0xffff, c)) #define UCPTRIE_SMALL_GET(trie, dataAccess, c) \\ dataAccess(trie, _UCPTRIE_CP_INDEX(trie, UCPTRIE_SMALL_MAX, c)) #define UCPTRIE_FAST_U16_NEXT(trie, dataAccess, src, limit, c, result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ int32_t __index ; \\)",
    "insertText": "if(!U16_IS_SURROGATE(c))"
  },
  {
    "label": "_UCPTRIE_FAST_INDEX()",
    "kind": "Method",
    "detail": "Function (\\ __index =)",
    "insertText": "_UCPTRIE_FAST_INDEX(trie, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ uint16_t __c2 ; \\)",
    "insertText": "if(U16_IS_SURROGATE_LEAD(c) && (src) != (limit) && U16_IS_TRAIL(__c2 = *(src)))"
  },
  {
    "label": "_UCPTRIE_SMALL_INDEX()",
    "kind": "Method",
    "detail": "Function (\\ __index =)",
    "insertText": "_UCPTRIE_SMALL_INDEX(trie, c)"
  },
  {
    "label": "__index()",
    "kind": "Method",
    "detail": "Function (dataLength - UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET)",
    "insertText": "__index(trie)"
  },
  {
    "label": "UCPTRIE_FAST_U16_PREV()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UCPTRIE_FAST_U16_PREV(trie, dataAccess, start, src, c, result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ uint16_t __c2 ; \\)",
    "insertText": "if(U16_IS_SURROGATE_TRAIL(c) && (src) != (start) && U16_IS_LEAD(__c2 = *((src) - 1)))"
  },
  {
    "label": "UCPTRIE_FAST_U8_NEXT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UCPTRIE_FAST_U8_NEXT(trie, dataAccess, src, limit, result)"
  },
  {
    "label": "__lead()",
    "kind": "Method",
    "detail": "Function (\\ int32_t)",
    "insertText": "__lead(uint8_t)*(src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!U8_IS_SINGLE(__lead))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ uint8_t __t1,__t2,__t3 ; \\)",
    "insertText": "if((src) != (limit) && \\ (__lead >= 0xe0 ? \\ __lead < 0xf0 ? \\ U8_LEAD3_T1_BITS[__lead &= 0xf] & (1 << ((__t1 = *(src)) >> 5)) && \\ ++(src) != (limit) && (__t2 = *(src) - 0x80) <= 0x3f && \\ (__lead = ((int32_t)(trie)->index[(__lead << 6) + (__t1 & 0x3f)]) + __t2, 1) \\ : \\ (__lead -= 0xf0) <= 4 && \\ U8_LEAD4_T1_BITS[(__t1 = *(src)) >> 4] & (1 << __lead) && \\ (__lead = (__lead << 6) | (__t1 & 0x3f), ++(src) != (limit)) && \\ (__t2 = *(src) - 0x80) <= 0x3f && \\ ++(src) != (limit) && (__t3 = *(src) - 0x80) <= 0x3f && \\ (__lead = __lead >= (trie)->shifted12HighStart ? \\ (trie)->dataLength - UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET : \\ ucptrie_internalSmallU8Index((trie), __lead, __t2, __t3), 1) \\ : \\ __lead >= 0xc2 && (__t1 = *(src) - 0x80) <= 0x3f && \\ (__lead = (int32_t)(trie)->index[__lead & 0x1f] + __t1, 1)))"
  },
  {
    "label": "__lead()",
    "kind": "Method",
    "detail": "Function (dataLength - UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET)",
    "insertText": "__lead(trie)"
  },
  {
    "label": "UCPTRIE_FAST_U8_PREV()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UCPTRIE_FAST_U8_PREV(trie, dataAccess, start, src, result)"
  },
  {
    "label": "__index()",
    "kind": "Method",
    "detail": "Function (\\ int32_t)",
    "insertText": "__index(uint8_t)*--(src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!U8_IS_SINGLE(__index))"
  },
  {
    "label": "ucptrie_internalU8PrevIndex()",
    "kind": "Method",
    "detail": "Function (\\ __index =)",
    "insertText": "ucptrie_internalU8PrevIndex((trie), __index, (const uint8_t *)(start), \\ (const uint8_t *)(src))"
  },
  {
    "label": "__index()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__index(result) = dataAccess(trie, __index)"
  },
  {
    "label": "UCPTRIE_ASCII_GET()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UCPTRIE_ASCII_GET(trie, dataAccess, c) dataAccess(trie, c) #define UCPTRIE_FAST_BMP_GET(trie, dataAccess, c) dataAccess(trie, _UCPTRIE_FAST_INDEX(trie, c)) #define UCPTRIE_FAST_SUPP_GET(trie, dataAccess, c) dataAccess(trie, _UCPTRIE_SMALL_INDEX(trie, c))"
  },
  {
    "label": "ucptrie_internalSmallIndex()",
    "kind": "Method",
    "detail": "Function (UCPTRIE_FAST_SHIFT = 6,UCPTRIE_FAST_DATA_BLOCK_LENGTH = 1<<UCPTRIE_FAST_SHIFT,UCPTRIE_FAST_DATA_MASK = UCPTRIE_FAST_DATA_BLOCK_LENGTH - 1,UCPTRIE_SMALL_MAX = 0 xfff,UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1,UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2 } ; U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "ucptrie_internalSmallIndex(const UCPTrie *trie, UChar32 c)"
  },
  {
    "label": "ucptrie_internalSmallU8Index()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "ucptrie_internalSmallU8Index(const UCPTrie *trie, int32_t lt1, uint8_t t2, uint8_t t3)"
  },
  {
    "label": "ucptrie_internalU8PrevIndex()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "ucptrie_internalU8PrevIndex(const UCPTrie *trie, UChar32 c, const uint8_t *start, const uint8_t *src)"
  }
]