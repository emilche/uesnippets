[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "EParticleVertexFactoryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleVertexFactoryType"
  },
  {
    "label": "FParticleVertexFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleVertexFactoryBase"
  },
  {
    "label": "FParticleSpriteVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSpriteVertexFactory"
  },
  {
    "label": "FParticleVertexFactoryBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" VertexFactory . h \" # include \" SceneView . h \" class FMaterial ; enum EParticleVertexFactoryType { PVFT_Sprite,PVFT_BeamTrail,PVFT_Mesh,PVFT_MAX } ; class FParticleVertexFactoryBase : public FVertexFactory { public :)",
    "insertText": "FParticleVertexFactoryBase(ERHIFeatureLevel::Type InFeatureLevel) : FVertexFactory(InFeatureLevel)"
  },
  {
    "label": "FParticleVertexFactoryBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FParticleVertexFactoryBase(EParticleVertexFactoryType Type, ERHIFeatureLevel::Type InFeatureLevel ) : FVertexFactory(InFeatureLevel)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"PARTICLE_FACTORY\"),TEXT(\"1\"))"
  },
  {
    "label": "GetParticleFactoryType()",
    "kind": "Method",
    "detail": "Function (} EParticleVertexFactoryType)",
    "insertText": "GetParticleFactoryType()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ParticleFactoryType = InType ; } ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} private : EParticleVertexFactoryType ParticleFactoryType ; } ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FParticleSpriteUniformParameters, ENGINE_API) SHADER_PARAMETER_EX( FVector4f, AxisLockRight, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector4f, AxisLockUp, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector4f, TangentSelector, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector4f, NormalsSphereCenter, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector4f, NormalsCylinderUnitDirection, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector4f, SubImageSize, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( FVector3f, CameraFacingBlend, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( float, RemoveHMDRoll, EShaderPrecisionModifier::Half ) SHADER_PARAMETER( FVector4f, MacroUVParameters ) SHADER_PARAMETER_EX( float, RotationScale, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( float, RotationBias, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( float, NormalsType, EShaderPrecisionModifier::Half ) SHADER_PARAMETER_EX( float, InvDeltaSeconds, EShaderPrecisionModifier::Half ) SHADER_PARAMETER( FVector3f, LWCTile ) SHADER_PARAMETER_EX( FVector2f, PivotOffset, EShaderPrecisionModifier::Half ) SHADER_PARAMETER(float, UseVelocityForMotionBlur) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE()",
    "kind": "Method",
    "detail": "Function (class FParticleSpriteVertexFactory : public FParticleVertexFactoryBase {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE(FParticleSpriteVertexFactory)"
  },
  {
    "label": "FParticleSpriteVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FParticleSpriteVertexFactory(EParticleVertexFactoryType InType, ERHIFeatureLevel::Type InFeatureLevel ) : FParticleVertexFactoryBase(InType, InFeatureLevel), NumVertsInInstanceBuffer(0), NumCutoutVerticesPerFrame(0), CutoutGeometrySRV(nullptr), bCustomAlignment(false), bUsesDynamicParameter(true), DynamicParameterStride(0)"
  },
  {
    "label": "FParticleSpriteVertexFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FParticleSpriteVertexFactory(ERHIFeatureLevel::Type InFeatureLevel) : FParticleVertexFactoryBase(PVFT_MAX, InFeatureLevel), NumVertsInInstanceBuffer(0), NumCutoutVerticesPerFrame(0), CutoutGeometrySRV(nullptr), bCustomAlignment(false), bUsesDynamicParameter(true), DynamicParameterStride(0)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "RendersPrimitivesAsCameraFacingSprites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RendersPrimitivesAsCameraFacingSprites()"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "GetPSOPrecacheVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FRHIVertexDeclaration*)",
    "insertText": "GetPSOPrecacheVertexDeclaration(bool bUsesDynamicParameter)"
  },
  {
    "label": "SetInstanceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceBuffer(const FVertexBuffer* InInstanceBuffer, uint32 StreamOffset, uint32 Stride)"
  },
  {
    "label": "SetTexCoordBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTexCoordBuffer(const FVertexBuffer* InTexCoordBuffer)"
  },
  {
    "label": "SetNumVertsInInstanceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumVertsInInstanceBuffer(int32 InNumVertsInInstanceBuffer)"
  },
  {
    "label": "SetDynamicParameterBuffer()",
    "kind": "Method",
    "detail": "Function (NumVertsInInstanceBuffer = InNumVertsInInstanceBuffer ; } void)",
    "insertText": "SetDynamicParameterBuffer(const FVertexBuffer* InDynamicParameterBuffer, uint32 StreamOffset, uint32 Stride)"
  },
  {
    "label": "SetUsesDynamicParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUsesDynamicParameter(bool bInUsesDynamicParameter, uint32 Stride)"
  },
  {
    "label": "SetSpriteUniformBuffer()",
    "kind": "Method",
    "detail": "Function (bUsesDynamicParameter = bInUsesDynamicParameter ; DynamicParameterStride = Stride ; } void)",
    "insertText": "SetSpriteUniformBuffer(const FParticleSpriteUniformBufferRef& InSpriteUniformBuffer)"
  },
  {
    "label": "GetSpriteUniformBuffer()",
    "kind": "Method",
    "detail": "Function (SpriteUniformBuffer = InSpriteUniformBuffer ; } FRHIUniformBuffer*)",
    "insertText": "GetSpriteUniformBuffer()"
  },
  {
    "label": "GetNumCutoutVerticesPerFrame()",
    "kind": "Method",
    "detail": "Function (NumCutoutVerticesPerFrame = InNumCutoutVerticesPerFrame ; CutoutGeometrySRV = InCutoutGeometrySRV ; } int32)",
    "insertText": "GetNumCutoutVerticesPerFrame()"
  },
  {
    "label": "GetCustomAlignment()",
    "kind": "Method",
    "detail": "Function (bCustomAlignment = bAlign ; } bool)",
    "insertText": "GetCustomAlignment()"
  }
]