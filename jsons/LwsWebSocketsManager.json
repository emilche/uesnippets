[
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FLwsWebSocketsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLwsWebSocketsManager"
  },
  {
    "label": "FSingleThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleThreadRunnable"
  },
  {
    "label": "FLwsWebSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLwsWebSocket"
  },
  {
    "label": "FLwsWebSocketsManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_WEBSOCKETS&& WITH_LIBWEBSOCKETS # include \" IWebSocketsManager . h \" # include \" LwsWebSocket . h \" # include \" HAL / Runnable . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Containers / Ticker . h \" # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # endif THIRD_PARTY_INCLUDES_START # include \" libwebsockets . h \" THIRD_PARTY_INCLUDES_END # if PLATFORM_WINDOWS # include \" Windows / HideWindowsPlatformTypes . h \" # endif class FRunnableThread ; class FLwsWebSocketsManager : public IWebSocketsManager,public FRunnable,public FSingleThreadRunnable { public :)",
    "insertText": "FLwsWebSocketsManager()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FLwsWebSocketsManager&)",
    "insertText": "Get()"
  },
  {
    "label": "StartProcessingWebSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartProcessingWebSocket(FLwsWebSocket* Socket)"
  },
  {
    "label": "InitWebSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWebSockets(TArrayView<const FString> Protocols)"
  },
  {
    "label": "ShutdownWebSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownWebSockets()"
  },
  {
    "label": "CreateWebSocket()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IWebSocket>)",
    "insertText": "CreateWebSocket(const FString& Url, const TArray<FString>& Protocols, const TMap<FString, FString>& UpgradeHeaders)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (class FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "GameThreadTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GameThreadTick(float DeltaTime)"
  },
  {
    "label": "StaticCallbackWrapper()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StaticCallbackWrapper(lws* Connection, lws_callback_reasons Reason, void* UserData, void* Data, size_t Length)"
  },
  {
    "label": "CallbackWrapper()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CallbackWrapper(lws* Connection, lws_callback_reasons Reason, void* UserData, void* Data, size_t Length)"
  }
]