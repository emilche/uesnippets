[
  {
    "label": "FWorkCoordinator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkCoordinator"
  },
  {
    "label": "FWorkerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkerContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGCInternals",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGCInternals"
  },
  {
    "label": "FGarbageCollectionTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGarbageCollectionTracer"
  },
  {
    "label": "FStructArrayBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructArrayBlock"
  },
  {
    "label": "FPrefetchingObjectIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrefetchingObjectIterator"
  },
  {
    "label": "FWorkBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkBlock"
  },
  {
    "label": "FWorkstealingQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkstealingQueue"
  },
  {
    "label": "FWorkBlockifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkBlockifier"
  },
  {
    "label": "FSlowARO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowARO"
  },
  {
    "label": "FProcessorStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessorStats"
  },
  {
    "label": "FStructArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructArray"
  },
  {
    "label": "FSuspendedStructBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuspendedStructBatch"
  },
  {
    "label": "FWeakReferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakReferenceInfo"
  },
  {
    "label": "FDebugSchemaStackNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugSchemaStackNode"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "TFastReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastReferenceCollector"
  },
  {
    "label": "FSlowAROManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlowAROManager"
  },
  {
    "label": "FDebugSchemaStackScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugSchemaStackScope"
  },
  {
    "label": "FDebugSchemaStackNoOpScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugSchemaStackNoOpScope"
  },
  {
    "label": "FMemberUnpacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemberUnpacked"
  },
  {
    "label": "FMemberWordUnpacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemberWordUnpacked"
  },
  {
    "label": "FStridedReferenceArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStridedReferenceArray"
  },
  {
    "label": "FStridedReferenceView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStridedReferenceView"
  },
  {
    "label": "FStridedReferenceIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStridedReferenceIterator"
  },
  {
    "label": "DispatcherType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DispatcherType"
  },
  {
    "label": "ArrayType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayType"
  },
  {
    "label": "did",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "did"
  },
  {
    "label": "member",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "member"
  },
  {
    "label": "HasHandleTokenStreamVerseCellReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasHandleTokenStreamVerseCellReference"
  },
  {
    "label": "ProcessorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessorType"
  },
  {
    "label": "TDirectDispatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDirectDispatcher"
  },
  {
    "label": "CollectorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollectorType"
  },
  {
    "label": "TGetDispatcherType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetDispatcherType"
  },
  {
    "label": "HasFlushWork",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasFlushWork"
  },
  {
    "label": "TDefaultCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDefaultCollector"
  },
  {
    "label": "FSimpleReferenceProcessorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleReferenceProcessorBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / GarbageCollection . h \" # include \" UObject / GarbageCollectionSchema . h \" # include \" UObject / Class . h \" # include \" UObject / Package . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" UObject / UnrealType . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / PlatformProcess . h \" # include \" UObject / FieldPath . h \" # include \" Async / ParallelFor . h \" # include \" UObject / UObjectArray . h \" # include \" UObject / DynamicallyTypedValue . h \" # include \" UObject / GCObject . h \" # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EGCOptions)"
  },
  {
    "label": "IsParallel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParallel(EGCOptions Options)"
  },
  {
    "label": "IsEliminatingGarbage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEliminatingGarbage(EGCOptions Options)"
  },
  {
    "label": "GetResolvedOwner()",
    "kind": "Method",
    "detail": "Function (} struct FGCInternals { FUObjectItem*)",
    "insertText": "GetResolvedOwner(FFieldPath& Path)"
  },
  {
    "label": "ClearCachedField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCachedField(FFieldPath& Path)"
  },
  {
    "label": "ClearCachedFieldInternal()",
    "kind": "Method",
    "detail": "Function (Path .)",
    "insertText": "ClearCachedFieldInternal()"
  },
  {
    "label": "FGarbageCollectionTracer()",
    "kind": "Method",
    "detail": "Function (} } ; class FGarbageCollectionTracer { public : ~)",
    "insertText": "FGarbageCollectionTracer()"
  },
  {
    "label": "PerformReachabilityAnalysisOnObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PerformReachabilityAnalysisOnObjects(UE::GC::FWorkerContext* Context, EGCOptions Options)"
  },
  {
    "label": "FPrefetchingObjectIterator()",
    "kind": "Method",
    "detail": "Function (# endif struct FStructArrayBlock ; uint32 ObjectLookahead = 1 6 ; class FPrefetchingObjectIterator { public :)",
    "insertText": "FPrefetchingObjectIterator(TConstArrayView<UObject*> Objects) : It(Objects.begin()) , End(Objects.end()) , PrefetchedSchema(Objects.Num() ? &It[1]->GetClass()->ReferenceSchema.Get() : nullptr)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Advance()"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(PrefetchedSchema->GetWords())"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (PrefetchedSchema =& It [ 2 ] ->)",
    "insertText": "GetClass()->ReferenceSchema.Get()"
  },
  {
    "label": "PrefetchOuter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchOuter(It[6])"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(It[6]->GetClass(), offsetof(UClass, ReferenceSchema))"
  },
  {
    "label": "PrefetchClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchClass(It[ObjectLookahead])"
  },
  {
    "label": "HasMore()",
    "kind": "Method",
    "detail": "Function (+ + It ; } bool)",
    "insertText": "HasMore()"
  },
  {
    "label": "GetObjects()",
    "kind": "Method",
    "detail": "Function (struct FWorkBlock { uint32 ObjectCapacity = 5 1 2 - 1 - ObjectLookahead ; FWorkBlock* Previous ; UObject* Objects [ ObjectCapacity + ObjectLookahead ] ; TArrayView<UObject*>)",
    "insertText": "GetObjects()"
  },
  {
    "label": "GetPadding()",
    "kind": "Method",
    "detail": "Function (} TArrayView<UObject*>)",
    "insertText": "GetPadding()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} } ; class FWorkstealingQueue ; class FWorkBlockifier { public :)",
    "insertText": "UE_NONCOPYABLE(FWorkBlockifier)"
  },
  {
    "label": "FWorkBlockifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorkBlockifier()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "AllocateWipBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateWipBlock()"
  },
  {
    "label": "SetAsyncQueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsyncQueue(FWorkstealingQueue& Queue)"
  },
  {
    "label": "ResetAsyncQueue()",
    "kind": "Method",
    "detail": "Function (AsyncQueue =& Queue ; } void)",
    "insertText": "ResetAsyncQueue()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<EGCOptions Options> void)",
    "insertText": "Add(UObject* Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* WipIt = Object ;)",
    "insertText": "if(++WipIt == Wip->GetPadding().GetData())"
  },
  {
    "label": "PushFullBlockAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFullBlockAsync()"
  },
  {
    "label": "PushFullBlockSync()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PushFullBlockSync()"
  },
  {
    "label": "PopPartialBlock()",
    "kind": "Method",
    "detail": "Function (} } } FWorkBlock*)",
    "insertText": "PopPartialBlock(int32& OutNum)"
  },
  {
    "label": "PopWipBlock()",
    "kind": "Method",
    "detail": "Function (OutNum = Num ; return)",
    "insertText": "PopWipBlock()"
  },
  {
    "label": "PopFullBlock()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<EGCOptions Options> FWorkBlock*)",
    "insertText": "PopFullBlock()"
  },
  {
    "label": "StealFullBlock()",
    "kind": "Method",
    "detail": "Function (} FWorkBlock*)",
    "insertText": "StealFullBlock()"
  },
  {
    "label": "FreeOwningBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeOwningBlock(UObject*const* BlockObjects)"
  },
  {
    "label": "SetWorkerIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorkerIndex(int32 Idx)"
  },
  {
    "label": "GetWorkerIndex()",
    "kind": "Method",
    "detail": "Function (WorkerIndex = Idx ; } int32)",
    "insertText": "GetWorkerIndex()"
  },
  {
    "label": "PopFullBlockSync()",
    "kind": "Method",
    "detail": "Function (FWorkBlock*)",
    "insertText": "PopFullBlockSync()"
  },
  {
    "label": "PopFullBlockAsync()",
    "kind": "Method",
    "detail": "Function (FWorkBlock*)",
    "insertText": "PopFullBlockAsync()"
  },
  {
    "label": "StealAsyncBlock()",
    "kind": "Method",
    "detail": "Function (FWorkBlock*)",
    "insertText": "StealAsyncBlock()"
  },
  {
    "label": "CallSync()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlowARO { void)",
    "insertText": "CallSync(uint32 SlowAROIndex, UObject* Object, FReferenceCollector& Collector)"
  },
  {
    "label": "TryQueueCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryQueueCall(uint32 SlowAROIndex, UObject* Object, FWorkerContext& Context)"
  },
  {
    "label": "ProcessUnbalancedCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUnbalancedCalls(FWorkerContext& Context, FReferenceCollector& Collector)"
  },
  {
    "label": "ProcessAllCalls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAllCalls(FWorkerContext& Context, FReferenceCollector& Collector)"
  },
  {
    "label": "AddObjects()",
    "kind": "Method",
    "detail": "Function (} ; struct FProcessorStats { # if UE_BUILD_SHIPPING uint32 NumObjects = 0 ; uint32 NumReferences = 0 ; uint32 NumVerseCells = 0 ; bool bFoundGarbageRef = false ; void)",
    "insertText": "AddObjects(uint32)"
  },
  {
    "label": "AddReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferences(uint32)"
  },
  {
    "label": "AddVerseCells()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVerseCells(uint32)"
  },
  {
    "label": "TrackPotentialGarbageReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackPotentialGarbageReference(bool)"
  },
  {
    "label": "AddObjects()",
    "kind": "Method",
    "detail": "Function (} # else uint32 NumObjects = 0 ; uint32 NumReferences = 0 ; uint32 NumVerseCells = 0 ; bool bFoundGarbageRef = false ; void)",
    "insertText": "AddObjects(uint32 Num)"
  },
  {
    "label": "AddReferences()",
    "kind": "Method",
    "detail": "Function (NumObjects + = Num ; } void)",
    "insertText": "AddReferences(uint32 Num)"
  },
  {
    "label": "AddVerseCells()",
    "kind": "Method",
    "detail": "Function (NumReferences + = Num ; } void)",
    "insertText": "AddVerseCells(uint32 Num)"
  },
  {
    "label": "TrackPotentialGarbageReference()",
    "kind": "Method",
    "detail": "Function (NumVerseCells + = Num ; } void)",
    "insertText": "TrackPotentialGarbageReference(bool bDetectedGarbage)"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (bFoundGarbageRef | = bDetectedGarbage ; } # endif void)",
    "insertText": "AddStats(FProcessorStats Stats)"
  },
  {
    "label": "AddObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjects(Stats.NumObjects)"
  },
  {
    "label": "AddReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferences(Stats.NumReferences)"
  },
  {
    "label": "AddVerseCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVerseCells(Stats.NumVerseCells)"
  },
  {
    "label": "TrackPotentialGarbageReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackPotentialGarbageReference(Stats.bFoundGarbageRef)"
  },
  {
    "label": "ContainsBatchData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStructArray { FSchemaView Schema { NoInit } ; uint8* Data ; int32 Num ; uint32 Stride ; } ; struct FSuspendedStructBatch { FStructArrayBlock* Wip = nullptr ; FStructArray* WipIt = nullptr ; bool)",
    "insertText": "ContainsBatchData()"
  },
  {
    "label": "FDebugSchemaStackNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugSchemaStackNode(FSchemaView InSchema, FDebugSchemaStackNode* PrevNode) : Member(0) , Schema(InSchema) , Prev(PrevNode)"
  },
  {
    "label": "SetMemberId()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetMemberId(FMemberId MemberId)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING Member = MemberId ; # endif } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} ; struct)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (private : template<ProcessorType,CollectorType> class TFastReferenceCollector ; class FSlowAROManager ; UObject* ReferencingObject = nullptr ; TConstArrayView<UObject*> InitialObjects ; public :)",
    "insertText": "UE_NONCOPYABLE(FWorkerContext)"
  },
  {
    "label": "FWorkerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorkerContext()"
  },
  {
    "label": "GetReferencingObject()",
    "kind": "Method",
    "detail": "Function (FWorkBlockifier ObjectsToSerialize ; TConstArrayView<UObject**> InitialNativeReferences ; FWorkCoordinator* Coordinator = nullptr ; TArray<FWeakReferenceInfo> WeakReferences ; FProcessorStats Stats ; # if ! UE_BUILD_SHIPPING TArray<FGarbageReferenceInfo> GarbageReferences ; # endif # if ENABLE_GC_HISTORY TMap<FReferenceToken,TArray<FGCDirectReference>*> History ; # endif FSuspendedStructBatch IncrementalStructs ; bool bIsSuspended = false ; bool bDidWork = false ; FDebugSchemaStackNode* SchemaStack = nullptr ; UObject*)",
    "insertText": "GetReferencingObject()"
  },
  {
    "label": "SetInitialObjectsUnpadded()",
    "kind": "Method",
    "detail": "Function (InitialObjects = { } ; } void)",
    "insertText": "SetInitialObjectsUnpadded(TArray<UObject*>& Objects)"
  },
  {
    "label": "PadObjectArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PadObjectArray(Objects)"
  },
  {
    "label": "SetInitialObjectsPrepadded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialObjectsPrepadded(Objects)"
  },
  {
    "label": "SetInitialObjectsPrepadded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInitialObjectsPrepadded(TConstArrayView<UObject*> PaddedObjects)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (InitialObjects = PaddedObjects ; } int64)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "AllocateWorkerIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateWorkerIndex()"
  },
  {
    "label": "FreeWorkerIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeWorkerIndex()"
  },
  {
    "label": "FDebugSchemaStackScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FDebugSchemaStackScope { # if ! UE_BUILD_SHIPPING FWorkerContext& Context ; FDebugSchemaStackNode Node ; # endif)",
    "insertText": "FDebugSchemaStackScope(FWorkerContext& InContext, FSchemaView Schema) #if !UE_BUILD_SHIPPING : Context(InContext) , Node(Schema, InContext.SchemaStack)"
  },
  {
    "label": "FDebugSchemaStackScope()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING InContext . SchemaStack =& Node ; # endif } ~)",
    "insertText": "FDebugSchemaStackScope()"
  },
  {
    "label": "FDebugSchemaStackNoOpScope()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING Context . SchemaStack = Node . Prev ; # endif } } ; struct FDebugSchemaStackNoOpScope {)",
    "insertText": "FDebugSchemaStackNoOpScope(FWorkerContext& InContext, FSchemaView Schema)"
  },
  {
    "label": "FMemberUnpacked()",
    "kind": "Method",
    "detail": "Function (} } ; namespace Private { struct FMemberUnpacked {)",
    "insertText": "FMemberUnpacked(FMemberPacked In) : Type(static_cast<EMemberType>(In.Type)) , WordOffset(In.WordOffset)"
  },
  {
    "label": "FMemberWordUnpacked()",
    "kind": "Method",
    "detail": "Function (} EMemberType Type ; uint32 WordOffset ; } ; struct FMemberWordUnpacked {)",
    "insertText": "FMemberWordUnpacked(const FMemberPacked In[4])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (In [ 0 ],In [ 1 ],In [ 2 ],In [ 3 ] } { } FMemberUnpacked Members [ 4 ] ; } ; struct FStridedReferenceArray { FScriptArray* Array ; FStridedLayout Layout ; } ; struct FStridedReferenceView { UObject** Data ; int32 Num ; uint32 Stride ; } ; struct FStridedReferenceIterator { UObject** It ; uint32 Stride ; UObject*&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (It + = Stride ; return* this ; } bool)",
    "insertText": "operator(FStridedReferenceIterator Rhs)"
  },
  {
    "label": "GetSparseData()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetSparseData(FScriptSparseArray& Array)"
  },
  {
    "label": "GetSparseData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetSparseData(const FScriptSparseArray& Array)"
  },
  {
    "label": "VisitNestedStructMembers()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType> FORCENOINLINE void)",
    "insertText": "VisitNestedStructMembers(DispatcherType& Dispatcher, FSchemaView Schema, uint8* Instance)"
  },
  {
    "label": "VisitStructs()",
    "kind": "Method",
    "detail": "Function (template<class DispatcherType> void)",
    "insertText": "VisitStructs(DispatcherType& Dispatcher, FSchemaView StructSchema, uint8* It, const int32 Num)"
  },
  {
    "label": "QueueStructArray()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "QueueStructArray(StructSchema, It, Num)"
  },
  {
    "label": "GetStructStride()",
    "kind": "Method",
    "detail": "Function (} else { uint32 Stride = StructSchema .)",
    "insertText": "GetStructStride()"
  },
  {
    "label": "VisitNestedStructMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNestedStructMembers(Dispatcher, StructSchema, It)"
  },
  {
    "label": "VisitStructArray()",
    "kind": "Method",
    "detail": "Function (} } } template<class DispatcherType,class ArrayType> void)",
    "insertText": "VisitStructArray(DispatcherType& Dispatcher, FSchemaView StructSchema, ArrayType& Array)"
  },
  {
    "label": "SchemaStack()",
    "kind": "Method",
    "detail": "Function (DispatcherType::SchemaStackScopeType)",
    "insertText": "SchemaStack(Dispatcher.Context, StructSchema)"
  },
  {
    "label": "VisitStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitStructs(Dispatcher, StructSchema, (uint8*)Array.GetData(), Array.Num())"
  },
  {
    "label": "VisitSparseStructArray()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType> void)",
    "insertText": "VisitSparseStructArray(DispatcherType& Dispatcher, FSchemaView StructSchema, FScriptSparseArray& Array)"
  },
  {
    "label": "QueueSparseStructArray()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "QueueSparseStructArray(StructSchema, Array)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(int32 Num = Array.Num())"
  },
  {
    "label": "GetSparseData()",
    "kind": "Method",
    "detail": "Function (uint8* It =)",
    "insertText": "GetSparseData(Array)"
  },
  {
    "label": "VisitFieldPath()",
    "kind": "Method",
    "detail": "Function (} } } } template<class DispatcherType> void)",
    "insertText": "VisitFieldPath(DispatcherType& Dispatcher, FFieldPath& FieldPath, EOrigin Origin, uint32 MemberIdx)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* OwnerObject = static_cast<)",
    "insertText": "UObject(FieldOwnerItem->Object)"
  },
  {
    "label": "HandleReferenceDirectly()",
    "kind": "Method",
    "detail": "Function (UObject* PreviousOwner = OwnerObject ; Dispatcher .)",
    "insertText": "HandleReferenceDirectly(Dispatcher.Context.GetReferencingObject(), OwnerObject, FMemberId(MemberIdx), Origin, true)"
  },
  {
    "label": "ClearCachedField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedField(FieldPath)"
  },
  {
    "label": "VisitFieldPathArray()",
    "kind": "Method",
    "detail": "Function (} } } template<class DispatcherType> void)",
    "insertText": "VisitFieldPathArray(DispatcherType& Dispatcher, TArray<FFieldPath>& FieldPaths, EOrigin Origin, uint32 MemberIdx)"
  },
  {
    "label": "VisitFieldPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitFieldPath(Dispatcher, FieldPath, Origin, MemberIdx)"
  },
  {
    "label": "VisitOptional()",
    "kind": "Method",
    "detail": "Function (} } template<class DispatcherType> void)",
    "insertText": "VisitOptional(DispatcherType& Dispatcher, FSchemaView StructSchema, uint8* Instance)"
  },
  {
    "label": "bIsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bIsSet(bool*)(Instance + ValueSize)"
  },
  {
    "label": "VisitStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitStructs(Dispatcher, StructSchema, Instance, bIsSet)"
  },
  {
    "label": "VisitDynamicallyTypedValue()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType> void)",
    "insertText": "VisitDynamicallyTypedValue(DispatcherType& Dispatcher, UE::FDynamicallyTypedValue& Value)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "GetType().MarkReachable(Dispatcher.Collector)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "GetType().MarkValueReachable(Value.GetDataPointer(), Dispatcher.Collector)"
  },
  {
    "label": "CalledSuperARO()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_EDITORONLY_DATA bool&)",
    "insertText": "CalledSuperARO()"
  },
  {
    "label": "CallARO()",
    "kind": "Method",
    "detail": "Function (# endif template<class DispatcherType> void)",
    "insertText": "CallARO(DispatcherType& Dispatcher, UObject* Instance, FMemberWord Word)"
  },
  {
    "label": "CalledSuperAROScope()",
    "kind": "Method",
    "detail": "Function (TGuardValue<bool>)",
    "insertText": "CalledSuperAROScope(bCalledSuperARO, false)"
  },
  {
    "label": "ObjectARO()",
    "kind": "Method",
    "detail": "Function (Word .)",
    "insertText": "ObjectARO(Instance, Dispatcher.Collector)"
  },
  {
    "label": "CallARO()",
    "kind": "Method",
    "detail": "Function (# endif } template<class DispatcherType> void)",
    "insertText": "CallARO(DispatcherType& Dispatcher, uint8* Instance, FMemberWord Word)"
  },
  {
    "label": "StructARO()",
    "kind": "Method",
    "detail": "Function (Word .)",
    "insertText": "StructARO(Instance, Dispatcher.Collector)"
  },
  {
    "label": "CallSlowARO()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType> void)",
    "insertText": "CallSlowARO(DispatcherType& Dispatcher, uint32 SlowAROIdx, UObject* Instance, uint32 MemberIdx)"
  },
  {
    "label": "CallSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallSync(SlowAROIdx, Instance, Dispatcher.Collector)"
  },
  {
    "label": "LogIllegalTypeFatal()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE void)",
    "insertText": "LogIllegalTypeFatal(EMemberType Type, uint32 Idx, UObject* Instance)"
  },
  {
    "label": "LogIllegalTypeFatal()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "LogIllegalTypeFatal(EMemberType Type, uint32 Idx, uint8*)"
  },
  {
    "label": "CallSlowARO()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType> void)",
    "insertText": "CallSlowARO(DispatcherType&, uint32 SlowAROIdx, uint8* Instance, uint32 MemberIdx)"
  },
  {
    "label": "LogIllegalTypeFatal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogIllegalTypeFatal(EMemberType::SlowARO, MemberIdx, Instance)"
  },
  {
    "label": "VisitMembers()",
    "kind": "Method",
    "detail": "Function (} template<class DispatcherType,ObjectType> void)",
    "insertText": "VisitMembers(DispatcherType& Dispatcher, FSchemaView Schema, ObjectType* Instance)"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (const EOrigin Origin = Schema .)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "InstanceCursor()",
    "kind": "Method",
    "detail": "Function (uint64*)",
    "insertText": "InstanceCursor(uint64*)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 DebugIdx = 0 ;)",
    "insertText": "for(const FMemberWord* WordIt = Schema.GetWords(); true; ++WordIt)"
  },
  {
    "label": "Quad()",
    "kind": "Method",
    "detail": "Function (const FMemberWordUnpacked)",
    "insertText": "Quad(WordIt->Members)"
  },
  {
    "label": "MemberPtr()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "MemberPtr(uint8*)(InstanceCursor + Member.WordOffset)"
  },
  {
    "label": "SetDebugSchemaStackMemberId()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "SetDebugSchemaStackMemberId(FMemberId(DebugIdx))"
  },
  {
    "label": "HandleKillableArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::ReferenceArray : Dispatcher .)",
    "insertText": "HandleKillableArray(*(TArray<UObject*>*)MemberPtr, FMemberId(DebugIdx), Origin)"
  },
  {
    "label": "HandleKillableArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::StridedArray : Dispatcher .)",
    "insertText": "HandleKillableArray(FStridedReferenceArray{(FScriptArray*)MemberPtr, (++WordIt)->StridedLayout}, FMemberId(DebugIdx), Origin)"
  },
  {
    "label": "HandleKillableReferences()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::FreezableReferenceArray : Dispatcher .)",
    "insertText": "HandleKillableReferences(*(TArray<UObject*, FMemoryImageAllocator>*)MemberPtr, FMemberId(DebugIdx), Origin)"
  },
  {
    "label": "VisitStructArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::StructArray :)",
    "insertText": "VisitStructArray(Dispatcher, FSchemaView((++WordIt)->InnerSchema, Origin), *(FScriptArray*)MemberPtr)"
  },
  {
    "label": "VisitSparseStructArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::SparseStructArray :)",
    "insertText": "VisitSparseStructArray(Dispatcher, FSchemaView((++WordIt)->InnerSchema, Origin), *(FScriptSparseArray*)MemberPtr)"
  },
  {
    "label": "VisitStructArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::FreezableStructArray :)",
    "insertText": "VisitStructArray(Dispatcher, FSchemaView((++WordIt)->InnerSchema, Origin), *(FFreezableScriptArray*)MemberPtr)"
  },
  {
    "label": "VisitOptional()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::Optional :)",
    "insertText": "VisitOptional(Dispatcher, FSchemaView((++WordIt)->InnerSchema, Origin), MemberPtr)"
  },
  {
    "label": "VisitFieldPath()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::FieldPath :)",
    "insertText": "VisitFieldPath(Dispatcher, *(FFieldPath*)MemberPtr, Origin, DebugIdx)"
  },
  {
    "label": "VisitFieldPathArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::FieldPathArray :)",
    "insertText": "VisitFieldPathArray(Dispatcher, *(TArray<FFieldPath>*)MemberPtr, Origin, DebugIdx)"
  },
  {
    "label": "VisitDynamicallyTypedValue()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::DynamicallyTypedValue :)",
    "insertText": "VisitDynamicallyTypedValue(Dispatcher, *(UE::FDynamicallyTypedValue*)MemberPtr)"
  },
  {
    "label": "InstanceCursor()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::Jump :)",
    "insertText": "InstanceCursor(Member.WordOffset + 1)"
  },
  {
    "label": "CallARO()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::MemberARO :)",
    "insertText": "CallARO(Dispatcher, MemberPtr, *++WordIt)"
  },
  {
    "label": "CallARO()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::ARO :)",
    "insertText": "CallARO(Dispatcher, Instance, *++WordIt)"
  },
  {
    "label": "HandleVerseValueArray()",
    "kind": "Method",
    "detail": "Function (break ; case EMemberType::VerseValueArray : Dispatcher .)",
    "insertText": "HandleVerseValueArray(*(TArray<Verse::VValue>*)MemberPtr, FMemberId(DebugIdx), Origin)"
  },
  {
    "label": "LogIllegalTypeFatal()",
    "kind": "Method",
    "detail": "Function (break ; # endif default :)",
    "insertText": "LogIllegalTypeFatal(Member.Type, DebugIdx, Instance)"
  },
  {
    "label": "VisitMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitMembers(Dispatcher, Schema, Instance)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T> using HandleTokenStreamVerseCellReference_t =)",
    "insertText": "decltype(std::declval<T>().HandleTokenStreamVerseCellReference(std::declval<FWorkerContext&>(), std::declval<UObject*>(), std::declval<Verse::VCell*>(), std::declval<FMemberId>(), std::declval<EOrigin>()))"
  },
  {
    "label": "IsParallel()",
    "kind": "Method",
    "detail": "Function (template<T> struct HasHandleTokenStreamVerseCellReference<T,std::void_t<HandleTokenStreamVerseCellReference_t<T>>> : std::true_type { } ; # endif template<class ProcessorType> struct TDirectDispatcher { bool bBatching = false ; bool bParallel =)",
    "insertText": "IsParallel(ProcessorType::Options)"
  },
  {
    "label": "HandleReferenceDirectly()",
    "kind": "Method",
    "detail": "Function (typedef FDebugSchemaStackScope SchemaStackScopeType ; ProcessorType& Processor ; FWorkerContext& Context ; FReferenceCollector& Collector ; void)",
    "insertText": "HandleReferenceDirectly(UObject* ReferencingObject, UObject*& Object, FMemberId MemberId, EOrigin Origin, bool bAllowReferenceElimination)"
  },
  {
    "label": "HandleTokenStreamObjectReference()",
    "kind": "Method",
    "detail": "Function (Processor .)",
    "insertText": "HandleTokenStreamObjectReference(Context, ReferencingObject, Object, MemberId, Origin, bAllowReferenceElimination)"
  },
  {
    "label": "AddReferences()",
    "kind": "Method",
    "detail": "Function (} Context . Stats .)",
    "insertText": "AddReferences(1)"
  },
  {
    "label": "HandleKillableReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleKillableReference(UObject*& Object, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleReferenceDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReferenceDirectly(Context.GetReferencingObject(), Object, MemberId, Origin, true)"
  },
  {
    "label": "HandleImmutableReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleImmutableReference(UObject* Object, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleReferenceDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReferenceDirectly(Context.GetReferencingObject(), Object, MemberId, Origin, false)"
  },
  {
    "label": "HandleKillableReferences()",
    "kind": "Method",
    "detail": "Function (} template<class ArrayType> void)",
    "insertText": "HandleKillableReferences(ArrayType&& Objects , FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleKillableArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HandleKillableArray(TArray<UObject*>& Array, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleKillableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKillableReferences(Array, MemberId, Origin)"
  },
  {
    "label": "HandleKillableArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleKillableArray(Private::FStridedReferenceArray Array, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleKillableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKillableReferences(ToView(Array), MemberId, Origin)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) FORCEINLINE_DEBUGGABLE void HandleVerseCellDirectly(UObject* ReferencingObject, Verse::VCell* Cell, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleTokenStreamVerseCellReference()",
    "kind": "Method",
    "detail": "Function (Processor .)",
    "insertText": "HandleTokenStreamVerseCellReference(Context, ReferencingObject, Cell, MemberId, Origin)"
  },
  {
    "label": "AddVerseCells()",
    "kind": "Method",
    "detail": "Function (} Context . Stats .)",
    "insertText": "AddVerseCells(1)"
  },
  {
    "label": "HandleVerseValueDirectly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleVerseValueDirectly(UObject* ReferencingObject, Verse::VValue Value, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleVerseCellDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVerseCellDirectly(ReferencingObject, Cell, MemberId, Origin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(UObject* Object = Value.ExtractUObject())"
  },
  {
    "label": "HandleImmutableReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleImmutableReference(Object, MemberId, Origin)"
  },
  {
    "label": "HandleVerseValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HandleVerseValue(Verse::VValue Value, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "HandleVerseValueDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVerseValueDirectly(Context.GetReferencingObject(), Value, MemberId, Origin)"
  },
  {
    "label": "HandleVerseValueArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleVerseValueArray(TArrayView<Verse::VValue> Values, FMemberId MemberId, EOrigin Origin)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "Suspend()"
  },
  {
    "label": "SetDebugSchemaStackMemberId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDebugSchemaStackMemberId(FMemberId Member)"
  },
  {
    "label": "SetMemberId()",
    "kind": "Method",
    "detail": "Function (Context . SchemaStack ->)",
    "insertText": "SetMemberId(Member)"
  },
  {
    "label": "GetDispatcher()",
    "kind": "Method",
    "detail": "Function (} } ; template<class CollectorType,class ProcessorType> TDirectDispatcher<ProcessorType>)",
    "insertText": "GetDispatcher(CollectorType& Collector, ProcessorType& Processor, FWorkerContext& Context)"
  },
  {
    "label": "StealWork()",
    "kind": "Method",
    "detail": "Function (using Type = std::remove_reference_t<RetType> ; } ; enum class ELoot { Nothing,Block,ARO,Context } ; ELoot)",
    "insertText": "StealWork(FWorkerContext& Context, FReferenceCollector& Collector, FWorkBlock*& OutBlock, EGCOptions Options)"
  },
  {
    "label": "SuspendWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendWork(FWorkerContext& Context)"
  },
  {
    "label": "ProcessAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsync(void (*ProcessSync)(void*, FWorkerContext&), void* Processor, FWorkerContext& InitialContext)"
  },
  {
    "label": "TFastReferenceCollector()",
    "kind": "Method",
    "detail": "Function (template<ProcessorType,CollectorType> class TFastReferenceCollector : public FGCInternals { public :)",
    "insertText": "TFastReferenceCollector(ProcessorType& InProcessor) : Processor(InProcessor)"
  },
  {
    "label": "ProcessObjectArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessObjectArray(FWorkerContext& Context)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Context . bDidWork = true ; Context . bIsSuspended = false ;)",
    "insertText": "static_assert(!EnumHasAllFlags(Options, EGCOptions::Parallel | EGCOptions::AutogenerateSchemas), \"Can't assemble token streams in parallel\")"
  },
  {
    "label": "Collector()",
    "kind": "Method",
    "detail": "Function (CollectorType)",
    "insertText": "Collector(Processor, Context)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decltype(GetDispatcher(Collector, Processor, Context)) Dispatcher = GetDispatcher(Collector, Processor, Context)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (StoleContext : Context . ReferencingObject = FGCObject::GGCObjectReferencer ;)",
    "insertText": "for(UObject** InitialReference : Context.InitialNativeReferences)"
  },
  {
    "label": "HandleKillableReference()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "HandleKillableReference(*InitialReference, EMemberlessId::InitialReference, EOrigin::Other)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<UObject*> CurrentObjects = Context . InitialObjects ;)",
    "insertText": "while(true)"
  },
  {
    "label": "AddObjects()",
    "kind": "Method",
    "detail": "Function (Context . Stats .)",
    "insertText": "AddObjects(CurrentObjects.Num())"
  },
  {
    "label": "ProcessObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessObjects(Dispatcher, CurrentObjects)"
  },
  {
    "label": "FreeOwningBlock()",
    "kind": "Method",
    "detail": "Function (Context . ObjectsToSerialize .)",
    "insertText": "FreeOwningBlock(CurrentObjects.GetData())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Processor.IsTimeLimitExceeded())"
  },
  {
    "label": "FlushWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushWork(Dispatcher)"
  },
  {
    "label": "SuspendWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendWork(Context)"
  },
  {
    "label": "ProcessUnbalancedCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUnbalancedCalls(Context, Collector)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (break ; } } CurrentObjects =)",
    "insertText": "MakeArrayView(Block->Objects, BlockSize)"
  },
  {
    "label": "LogDetailedStatsSummary()",
    "kind": "Method",
    "detail": "Function (} Processor .)",
    "insertText": "LogDetailedStatsSummary()"
  },
  {
    "label": "IsParallel()",
    "kind": "Method",
    "detail": "Function (} private : using DispatcherType = TGetDispatcherType<CollectorType,ProcessorType>::Type ; EGCOptions Options = ProcessorType::Options ; bool bIsParallel =)",
    "insertText": "IsParallel(Options)"
  },
  {
    "label": "ProcessObjects()",
    "kind": "Method",
    "detail": "Function (ProcessorType& Processor ; void)",
    "insertText": "ProcessObjects(DispatcherType& Dispatcher, TConstArrayView<UObject*> CurrentObjects)"
  },
  {
    "label": "GetCurrentObject()",
    "kind": "Method",
    "detail": "Function (UObject* CurrentObject = It .)",
    "insertText": "GetCurrentObject()"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass* Class = CurrentObject ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (UObject* Outer = CurrentObject ->)",
    "insertText": "GetOuter()"
  },
  {
    "label": "AssembleReferenceTokenStream()",
    "kind": "Method",
    "detail": "Function (Class ->)",
    "insertText": "AssembleReferenceTokenStream()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FSchemaView Schema = Class -> ReferenceSchema .)",
    "insertText": "Get()"
  },
  {
    "label": "HandleImmutableReference()",
    "kind": "Method",
    "detail": "Function (Dispatcher . Context . ReferencingObject = CurrentObject ; Dispatcher .)",
    "insertText": "HandleImmutableReference(Class, EMemberlessId::Class, EOrigin::Other)"
  },
  {
    "label": "HandleImmutableReference()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "HandleImmutableReference(Outer, EMemberlessId::Outer, EOrigin::Other)"
  },
  {
    "label": "GetExternalPackageInternal()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UObject* Package = CurrentObject ->)",
    "insertText": "GetExternalPackageInternal()"
  },
  {
    "label": "HandleImmutableReference()",
    "kind": "Method",
    "detail": "Function (Package = Package ! = CurrentObject ? Package : nullptr ; Dispatcher .)",
    "insertText": "HandleImmutableReference(Package, EMemberlessId::ExternalPackage, EOrigin::Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(!Schema.IsEmpty())"
  },
  {
    "label": "SchemaStack()",
    "kind": "Method",
    "detail": "Function (DispatcherType::SchemaStackScopeType)",
    "insertText": "SchemaStack(Dispatcher.Context, Schema)"
  },
  {
    "label": "BeginTimingObject()",
    "kind": "Method",
    "detail": "Function (Processor .)",
    "insertText": "BeginTimingObject(CurrentObject)"
  },
  {
    "label": "VisitMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitMembers(Dispatcher, Schema, CurrentObject)"
  },
  {
    "label": "UpdateDetailedStats()",
    "kind": "Method",
    "detail": "Function (Processor .)",
    "insertText": "UpdateDetailedStats(CurrentObject)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } } template<T,= void> struct HasFlushWork : std::false_type { } ; template<T> struct HasFlushWork<T,std::void_t<)",
    "insertText": "decltype(std::declval<T>().FlushWork())"
  },
  {
    "label": "FlushWork()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "FlushWork(DispatcherType& Dispatcher)"
  },
  {
    "label": "ProcessStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessStructs(Dispatcher)"
  },
  {
    "label": "FlushQueuedReferences()",
    "kind": "Method",
    "detail": "Function (} Dispatcher .)",
    "insertText": "FlushQueuedReferences()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(HasFlushWork<DispatcherType>::value)"
  },
  {
    "label": "FlushWork()",
    "kind": "Method",
    "detail": "Function (Dispatcher .)",
    "insertText": "FlushWork()"
  },
  {
    "label": "ProcessStructs()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE void)",
    "insertText": "ProcessStructs(DispatcherType& Dispatcher)"
  },
  {
    "label": "TDefaultCollector()",
    "kind": "Method",
    "detail": "Function (} ; template<ProcessorType> class TDefaultCollector : public FReferenceCollector { protected : ProcessorType& Processor ; UE::GC::FWorkerContext& Context ; public :)",
    "insertText": "TDefaultCollector(ProcessorType& InProcessor, UE::GC::FWorkerContext& InContext) : Processor(InProcessor) , Context(InContext)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleObjectReference(UObject*& Object, const UObject* ReferencingObject, const FProperty* ReferencingProperty)"
  },
  {
    "label": "HandleTokenStreamObjectReference()",
    "kind": "Method",
    "detail": "Function (} Processor .)",
    "insertText": "HandleTokenStreamObjectReference(Context, const_cast<UObject*>(ReferencingObject), Object, EMemberlessId::Collector, EOrigin::Other, false)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleObjectReferences(UObject** InObjects, const int32 ObjectNum, const UObject* ReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 ObjectIndex = 0; ObjectIndex < ObjectNum; ++ObjectIndex)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) virtual void HandleVCellReference(Verse::VCell* Cell, const UObject* ReferencingObject, const FProperty* ReferencingProperty)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(HasHandleTokenStreamVerseCellReference<ProcessorType>::value)"
  },
  {
    "label": "HandleTokenStreamVerseCellReference()",
    "kind": "Method",
    "detail": "Function (Processor .)",
    "insertText": "HandleTokenStreamVerseCellReference(Context, const_cast<UObject*>(ReferencingObject), Cell, EMemberlessId::Collector, EOrigin::Other)"
  },
  {
    "label": "IsIgnoringArchetypeRef()",
    "kind": "Method",
    "detail": "Function (} } # endif bool)",
    "insertText": "IsIgnoringArchetypeRef()"
  },
  {
    "label": "UpdateDetailedStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateDetailedStats(UObject* CurrentObject)"
  },
  {
    "label": "IsTimeLimitExceeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeLimitExceeded()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace UE::GC ; using FastReferenceCollector = TFastReferenceCollector<ProcessorType,CollectorType> ;)",
    "insertText": "if(IsParallel(ProcessorType::Options) && !UE::GC::GIsIncrementalReachabilityPending)"
  },
  {
    "label": "ProcessAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsync([](void* P, FWorkerContext& C) { FastReferenceCollector(*reinterpret_cast<ProcessorType*>(P)).ProcessObjectArray(C); }, &Processor, Context)"
  },
  {
    "label": "FastReferenceCollector()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "FastReferenceCollector(Processor).ProcessObjectArray(Context)"
  },
  {
    "label": "CollectReferences()",
    "kind": "Method",
    "detail": "Function (} } template<class ProcessorType> void)",
    "insertText": "CollectReferences(ProcessorType& Processor, UE::GC::FWorkerContext& Context)"
  },
  {
    "label": "ProcessorType()",
    "kind": "Method",
    "detail": "Function (CollectReferences<UE::GC::TDefaultCollector<ProcessorType>,)",
    "insertText": "ProcessorType(Processor, Context)"
  },
  {
    "label": "GetNumCollectReferenceWorkers()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumCollectReferenceWorkers()"
  }
]