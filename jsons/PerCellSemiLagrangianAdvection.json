[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPerCellSemiLagrangianAdvection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPerCellSemiLagrangianAdvection"
  },
  {
    "label": "T_SCALAR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_SCALAR"
  },
  {
    "label": "TPerCellSemiLagrangianAdvection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayND . h \" # include \" Chaos / UniformGrid . h \" namespace Chaos { template<class T,int d> class TPerCellSemiLagrangianAdvection { public :)",
    "insertText": "TPerCellSemiLagrangianAdvection()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<class T_SCALAR> void)",
    "insertText": "Apply(const TUniformGrid<T, d>& Grid, TArrayND<T_SCALAR, d>& Scalar, const TArrayND<T_SCALAR, d>& ScalarN, const TArrayFaceND<T, d>& VelocityN, const T Dt, const TVector<int32, d>& Index)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> Location = Grid .)",
    "insertText": "Location(Index)"
  },
  {
    "label": "ClampMinusHalf()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> X = Grid .)",
    "insertText": "ClampMinusHalf(Location - Dt * Grid.LinearlyInterpolate(VelocityN, Location))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scalar(Index) = Grid.LinearlyInterpolate(ScalarN, X)"
  }
]