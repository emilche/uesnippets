[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_PopulationIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_PopulationIterator"
  },
  {
    "label": "_PopulationSentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_PopulationSentinel"
  },
  {
    "label": "_SampleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_SampleIterator"
  },
  {
    "label": "_Distance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Distance"
  },
  {
    "label": "_UniformRandomNumberGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UniformRandomNumberGenerator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SAMPLE_H # define _LIBCPP___ALGORITHM_SAMPLE_H # include<__algorithm / iterator_operations . h> # include<__algorithm / min . h> # include<__assert> # include<__config> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__random / uniform_int_distribution . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _PopulationIterator, class _PopulationSentinel, class _SampleIterator, class _Distance, class _UniformRandomNumberGenerator> _LIBCPP_INLINE_VISIBILITY _SampleIterator __sample(_PopulationIterator __first, _PopulationSentinel __last, _SampleIterator __output_iter, _Distance __n, _UniformRandomNumberGenerator& __g, input_iterator_tag)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Distance __k = 0 ;)",
    "insertText": "for(; __first != __last && __k < __n; ++__first, (void) ++__k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Distance __sz = __k ;)",
    "insertText": "for(; __first != __last; ++__first, (void) ++__k)"
  },
  {
    "label": "_Distance()",
    "kind": "Method",
    "detail": "Function (_Distance __r = uniform_int_distribution<)",
    "insertText": "_Distance(0, __k)(__g)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} return __output_iter +)",
    "insertText": "min(__n, __k)"
  },
  {
    "label": "__sample()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _PopulationIterator,class _PopulationSentinel,class _SampleIterator,class _Distance,class _UniformRandomNumberGenerator> _LIBCPP_INLINE_VISIBILITY _SampleIterator)",
    "insertText": "__sample(_PopulationIterator __first, _PopulationSentinel __last, _SampleIterator __output_iter, _Distance __n, _UniformRandomNumberGenerator& __g, forward_iterator_tag)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (_Distance __unsampled_sz = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "_Distance()",
    "kind": "Method",
    "detail": "Function (_Distance __r = uniform_int_distribution<)",
    "insertText": "_Distance(0, --__unsampled_sz)(__g)"
  },
  {
    "label": "__sample()",
    "kind": "Method",
    "detail": "Function (* __output_iter + + =* __first ; - - __n ; } } return __output_iter ; } template<class _AlgPolicy,class _PopulationIterator,class _PopulationSentinel,class _SampleIterator,class _Distance,class _UniformRandomNumberGenerator> _LIBCPP_INLINE_VISIBILITY _SampleIterator)",
    "insertText": "__sample(_PopulationIterator __first, _PopulationSentinel __last, _SampleIterator __output_iter, _Distance __n, _UniformRandomNumberGenerator& __g)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n >= 0, \"N must be a positive number.\")"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _PopIterCategory = _IterOps<_AlgPolicy>::template __iterator_category<_PopulationIterator> ; using _Difference = _IterOps<_AlgPolicy>::template __difference_type<_PopulationIterator> ; using _CommonType = common_type<_Distance,_Difference>::type ; return std::__sample<)",
    "insertText": "_AlgPolicy(std::move(__first), std::move(__last), std::move(__output_iter), _CommonType(__n), __g, _PopIterCategory())"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 template<class _PopulationIterator,class _SampleIterator,class _Distance,class _UniformRandomNumberGenerator> _LIBCPP_INLINE_VISIBILITY _SampleIterator)",
    "insertText": "sample(_PopulationIterator __first, _PopulationIterator __last, _SampleIterator __output_iter, _Distance __n, _UniformRandomNumberGenerator&& __g)"
  }
]