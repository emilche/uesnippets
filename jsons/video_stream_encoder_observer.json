[
  {
    "label": "EncodedImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedImage"
  },
  {
    "label": "EncoderImplementation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderImplementation"
  },
  {
    "label": "CpuOveruseMetricsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CpuOveruseMetricsObserver"
  },
  {
    "label": "VideoStreamEncoderObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoderObserver"
  },
  {
    "label": "AdaptationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdaptationSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CpuOveruseMetricsObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_STREAM_ENCODER_OBSERVER_H_ # define VIDEO_VIDEO_STREAM_ENCODER_OBSERVER_H_ # include<string> # include<vector> # include \" api / video / video_adaptation_counters . h \" # include \" api / video / video_adaptation_reason . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video_codecs / video_encoder . h \" # include \" video / config / video_encoder_config . h \" namespace webrtc { class EncodedImage ; struct EncoderImplementation { const std::string& name ; bool is_hardware_accelerated ; } ; class CpuOveruseMetricsObserver { public : ~)",
    "insertText": "CpuOveruseMetricsObserver()"
  },
  {
    "label": "OnEncodedFrameTimeMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodedFrameTimeMeasured(int encode_duration_ms, int encode_usage_percent)"
  },
  {
    "label": "AdaptationSettings()",
    "kind": "Method",
    "detail": "Function (} ; class VideoStreamEncoderObserver : public CpuOveruseMetricsObserver { public : struct AdaptationSettings {)",
    "insertText": "AdaptationSettings() : resolution_scaling_enabled(false), framerate_scaling_enabled(false)"
  },
  {
    "label": "AdaptationSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AdaptationSettings(bool resolution_scaling_enabled, bool framerate_scaling_enabled) : resolution_scaling_enabled(resolution_scaling_enabled), framerate_scaling_enabled(framerate_scaling_enabled)"
  },
  {
    "label": "VideoStreamEncoderObserver()",
    "kind": "Method",
    "detail": "Function (} bool resolution_scaling_enabled ; bool framerate_scaling_enabled ; } ; enum class DropReason { kSource,kEncoderQueue,kEncoder,kMediaOptimization,kCongestionWindow } ; ~)",
    "insertText": "VideoStreamEncoderObserver()"
  },
  {
    "label": "OnIncomingFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncomingFrame(int width, int height)"
  },
  {
    "label": "OnSendEncodedImage()",
    "kind": "Method",
    "detail": "Function (using CpuOveruseMetricsObserver::OnEncodedFrameTimeMeasured ; void)",
    "insertText": "OnSendEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_info)"
  },
  {
    "label": "OnEncoderImplementationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderImplementationChanged(EncoderImplementation implementation)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(DropReason reason)"
  },
  {
    "label": "OnEncoderReconfigured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderReconfigured(const VideoEncoderConfig& encoder_config, const std::vector<VideoStream>& streams)"
  },
  {
    "label": "OnAdaptationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdaptationChanged(VideoAdaptationReason reason, const VideoAdaptationCounters& cpu_steps, const VideoAdaptationCounters& quality_steps)"
  },
  {
    "label": "ClearAdaptationStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAdaptationStats()"
  },
  {
    "label": "UpdateAdaptationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAdaptationSettings(AdaptationSettings cpu_settings, AdaptationSettings quality_settings)"
  },
  {
    "label": "OnMinPixelLimitReached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMinPixelLimitReached()"
  },
  {
    "label": "OnInitialQualityResolutionAdaptDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialQualityResolutionAdaptDown()"
  },
  {
    "label": "OnSuspendChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSuspendChange(bool is_suspended)"
  },
  {
    "label": "OnBitrateAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateAllocationUpdated(const VideoCodec& codec, const VideoBitrateAllocation& allocation)"
  },
  {
    "label": "OnEncoderInternalScalerUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEncoderInternalScalerUpdate(bool is_scaled)"
  },
  {
    "label": "GetInputFrameRate()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetInputFrameRate()"
  }
]