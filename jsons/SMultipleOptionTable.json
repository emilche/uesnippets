[
  {
    "label": "SOptionTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOptionTableRow"
  },
  {
    "label": "SMultipleOptionTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultipleOptionTable"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Layout / SSeparator . h \" # include \" Widgets / Input / SHyperlink . h \" # define LOCTEXT_NAMESPACE \" SMultipleOptionTable \" template<OptionType> class SOptionTableRow : public SMultiColumnTableRow<TSharedPtr<OptionType>> { public : typedef TSlateDelegates<OptionType>::FOnGenerateWidget FOnGenerateWidget ; typedef STableRow<TSharedPtr<OptionType>>::FArguments FOptionTableRowArgs ;)",
    "insertText": "SLATE_BEGIN_ARGS(SOptionTableRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<STableViewBase>, OwnerTableView) SLATE_ARGUMENT(OptionType, Option) SLATE_EVENT(FOnCheckStateChanged, OnCheckStateChanged) SLATE_ATTRIBUTE(ECheckBoxState, IsChecked) SLATE_EVENT(FOnGenerateWidget, OnGenerateWidget) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Option = InArgs . _Option ; OnCheckStateChanged = InArgs . _OnCheckStateChanged ; IsChecked = InArgs . _IsChecked ; OnGenerateWidget = InArgs . _OnGenerateWidget ; SMultiColumnTableRow<TSharedPtr<OptionType>)",
    "insertText": "Construct(FOptionTableRowArgs(), InArgs._OwnerTableView.ToSharedRef())"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "HandleCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } private : void)",
    "insertText": "HandleCheckBoxCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnCheckStateChanged .)",
    "insertText": "Execute(NewState)"
  },
  {
    "label": "HandleCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "HandleCheckBoxIsChecked()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} public : TSharedPtr<SCheckBox> CheckBox ; private : OptionType Option ; FOnCheckStateChanged OnCheckStateChanged ; TAttribute<ECheckBoxState> IsChecked ; FOnGenerateWidget OnGenerateWidget ; } ; template<OptionType> class SMultipleOptionTable : public SCompoundWidget { public : typedef TSlateDelegates<OptionType>::FOnGenerateWidget FOnGenerateOptionWidget ;)",
    "insertText": "DECLARE_DELEGATE(FOnPreBatchSelect)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnPostBatchSelect)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnOptionSelectionChanged, bool, OptionType)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsOptionSelected, OptionType)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SMultipleOptionTable<OptionType>)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnPreBatchSelect, OnPreBatchSelect) SLATE_EVENT(FOnPostBatchSelect, OnPostBatchSelect) SLATE_EVENT(FOnGenerateOptionWidget, OnGenerateOptionWidget) SLATE_EVENT(FOnOptionSelectionChanged, OnOptionSelectionChanged) SLATE_EVENT(FIsOptionSelected, IsOptionSelected) SLATE_ATTRIBUTE(FOptionalSize, ListHeight) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TArray< OptionType >* const InOptions)"
  },
  {
    "label": "RequestTableRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTableRefresh()"
  },
  {
    "label": "HandleOptionListViewGenerateRow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<class ITableRow>)",
    "insertText": "HandleOptionListViewGenerateRow(OptionType Option, const TSharedRef< class STableViewBase >& OwnerTableView)"
  },
  {
    "label": "GenerateWidgetForOption()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForOption(OptionType Option)"
  },
  {
    "label": "HandleCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCheckBoxCheckStateChanged(ECheckBoxState NewState, OptionType Option)"
  },
  {
    "label": "HandleCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleCheckBoxIsChecked(OptionType Option)"
  },
  {
    "label": "HandleAllHyperlinkNavigate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllHyperlinkNavigate()"
  },
  {
    "label": "HandleNoneHyperlinkNavigate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNoneHyperlinkNavigate()"
  },
  {
    "label": "HandleHyperlinkVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleHyperlinkVisibility()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (private : const TArray<OptionType>* Options ; FOnPreBatchSelect OnPreBatchSelect ; FOnPostBatchSelect OnPostBatchSelect ; FOnGenerateOptionWidget OnGenerateOptionWidget ; FOnOptionSelectionChanged OnOptionSelectionChanged ; FIsOptionSelected IsOptionSelected ; TAttribute<FOptionalSize> ListHeight ; TSharedPtr<SListView<OptionType>> OptionListView ; } ; template<OptionType> void SMultipleOptionTable<OptionType)",
    "insertText": "Construct(const FArguments& InArgs, const TArray< OptionType >* const InOptions)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (Options = InOptions ; OnPreBatchSelect = InArgs . _OnPreBatchSelect ; OnPostBatchSelect = InArgs . _OnPostBatchSelect ; OnGenerateOptionWidget = InArgs . _OnGenerateOptionWidget ; OnOptionSelectionChanged = InArgs . _OnOptionSelectionChanged ; IsOptionSelected = InArgs . _IsOptionSelected ; ListHeight = InArgs . _ListHeight ; ChildSlot [)",
    "insertText": "SNew(SVerticalBox) + SVerticalBox::Slot() .FillHeight(1.0) .Padding(0.0f, 2.0f, 0.0f, 0.0f) [ SNew(SBox) .HeightOverride(ListHeight) [ SAssignNew(OptionListView, SListView<OptionType>) .HeaderRow ( SNew(SHeaderRow) .Visibility(EVisibility::Collapsed) + SHeaderRow::Column(\"IsSelected\") .DefaultLabel(LOCTEXT(\"OptionListIsSelectedColumnHeader\", \"IsSelected\")) .FillWidth(1.0f) ) .ListItemsSource(Options) .OnGenerateRow(this, &SMultipleOptionTable::HandleOptionListViewGenerateRow) .SelectionMode(ESelectionMode::None) ] ] + SVerticalBox::Slot() .AutoHeight() .Padding(0.0f, 6.0f, 0.0f, 4.0f) [ SNew(SSeparator) .Orientation(Orient_Horizontal) ] + SVerticalBox::Slot() .AutoHeight() [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .FillWidth(1.0f) .HAlign(HAlign_Right) [ SNew(STextBlock) .Text(LOCTEXT(\"SelectLabel\", \"Select:\")) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(8.0f, 0.0f) [ SNew(SHyperlink) .OnNavigate(this, &SMultipleOptionTable::HandleAllHyperlinkNavigate) .Text(LOCTEXT(\"AllHyperlinkLabel\", \"All\")) .ToolTipText(LOCTEXT(\"AllHyperlinkToolTip\", \"Select all options.\")) .Visibility(this, &SMultipleOptionTable::HandleHyperlinkVisibility) ] + SHorizontalBox::Slot() .AutoWidth() [ SNew(SHyperlink) .OnNavigate(this, &SMultipleOptionTable::HandleNoneHyperlinkNavigate) .Text(LOCTEXT(\"NoneHyperlinkLabel\", \"None\")) .ToolTipText(LOCTEXT(\"NoneHyperlinkToolTip\", \"Deselect all.\")) .Visibility(this, &SMultipleOptionTable::HandleHyperlinkVisibility)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (OptionListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnOptionSelectionChanged .)",
    "insertText": "Execute(NewState == ECheckBoxState::Checked, Option)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnPreBatchSelect .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "HandleCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCheckBoxCheckStateChanged(ECheckBoxState::Checked, Option)"
  },
  {
    "label": "HandleCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCheckBoxCheckStateChanged(ECheckBoxState::Unchecked, Option)"
  }
]