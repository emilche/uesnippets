[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / Text / TextLayout . h \" class FPaintArgs ; class FSlateWindowElementList ; class FSlateTextBlockLayout ; class IBreakIterator ; enum class ETextShapingMethod : uint8 ; namespace ETextRole { enum Type { Custom,ButtonText,ComboText } ; } class STextBlock : public SLeafWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(STextBlock, SLeafWidget, SLATE_API) public: SLATE_BEGIN_ARGS( STextBlock ) : _Text() , _TextStyle( &FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>( \"NormalText\" ) ) , _Font() , _StrikeBrush() , _ColorAndOpacity() , _ShadowOffset() , _ShadowColorAndOpacity() , _HighlightColor() , _HighlightShape() , _HighlightText() , _WrapTextAt(0.0f) , _AutoWrapText(false) , _WrappingPolicy(ETextWrappingPolicy::DefaultWrapping) , _TransformPolicy() , _Margin() , _LineHeightPercentage(1.0f) , _ApplyLineHeightToBottomLine(true) , _Justification(ETextJustify::Left) , _MinDesiredWidth(0.0f) , _TextShapingMethod() , _TextFlowDirection() , _LineBreakPolicy() , _OverflowPolicy() , _SimpleTextMode(false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::OnDemand ; })",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( const FSlateBrush*, StrikeBrush ) SLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity ) SLATE_ATTRIBUTE( FVector2D, ShadowOffset ) SLATE_ATTRIBUTE( FLinearColor, ShadowColorAndOpacity ) SLATE_ATTRIBUTE( FLinearColor, HighlightColor ) SLATE_ATTRIBUTE( const FSlateBrush*, HighlightShape ) SLATE_ATTRIBUTE( FText, HighlightText ) SLATE_ATTRIBUTE( float, WrapTextAt ) SLATE_ATTRIBUTE( bool, AutoWrapText ) SLATE_ATTRIBUTE( ETextWrappingPolicy, WrappingPolicy ) SLATE_ATTRIBUTE( ETextTransformPolicy, TransformPolicy ) SLATE_ATTRIBUTE( FMargin, Margin ) SLATE_ATTRIBUTE( float, LineHeightPercentage ) SLATE_ATTRIBUTE( bool, ApplyLineHeightToBottomLine ) SLATE_ATTRIBUTE( ETextJustify::Type, Justification ) SLATE_ATTRIBUTE( float, MinDesiredWidth ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_ARGUMENT( TSharedPtr<IBreakIterator>, LineBreakPolicy ) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_ARGUMENT( bool, SimpleTextMode ) SLATE_EVENT(FPointerEventHandler, OnDoubleClicked) SLATE_END_ARGS() SLATE_API STextBlock()"
  },
  {
    "label": "STextBlock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "STextBlock()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetText()"
  },
  {
    "label": "STextBlock()",
    "kind": "Method",
    "detail": "Function (STextBlock& MutableSelf = const_cast<)",
    "insertText": "STextBlock(*this)"
  },
  {
    "label": "UpdateNow()",
    "kind": "Method",
    "detail": "Function (MutableSelf . BoundText .)",
    "insertText": "UpdateNow(MutableSelf)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return BoundText .)",
    "insertText": "Get()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetText(TAttribute<FText> InText)"
  },
  {
    "label": "SetHighlightText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightText(TAttribute<FText> InText)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(TAttribute<FSlateFontInfo> InFont)"
  },
  {
    "label": "SetStrikeBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStrikeBrush(TAttribute<const FSlateBrush*> InStrikeBrush)"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorAndOpacity(TAttribute<FSlateColor> InColorAndOpacity)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(TAttribute<float> InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(TAttribute<bool> InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(TAttribute<ETextWrappingPolicy> InWrappingPolicy)"
  },
  {
    "label": "SetTransformPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformPolicy(TAttribute<ETextTransformPolicy> InTransformPolicy)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SetShadowOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadowOffset(TAttribute<FVector2D> InShadowOffset)"
  },
  {
    "label": "SetShadowColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadowColorAndOpacity(TAttribute<FLinearColor> InShadowColorAndOpacity)"
  },
  {
    "label": "SetHighlightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightColor(TAttribute<FLinearColor> InHighlightColor)"
  },
  {
    "label": "SetHighlightShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightShape(TAttribute<const FSlateBrush*> InHighlightShape)"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredWidth(TAttribute<float> InMinDesiredWidth)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(TAttribute<float> InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(TAttribute<bool> InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(TAttribute<FMargin> InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(TAttribute<ETextJustify::Type> InJustification)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "GetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (# endif public : FSlateColor)",
    "insertText": "GetColorAndOpacity()"
  },
  {
    "label": "GetColorAndOpacityRef()",
    "kind": "Method",
    "detail": "Function (const FSlateColor&)",
    "insertText": "GetColorAndOpacityRef()"
  },
  {
    "label": "GetFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetFont()"
  },
  {
    "label": "GetFontRef()",
    "kind": "Method",
    "detail": "Function (const FSlateFontInfo&)",
    "insertText": "GetFontRef()"
  },
  {
    "label": "GetStrikeBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetStrikeBrush()"
  },
  {
    "label": "GetTransformPolicyImpl()",
    "kind": "Method",
    "detail": "Function (ETextTransformPolicy)",
    "insertText": "GetTransformPolicyImpl()"
  },
  {
    "label": "GetShadowOffset()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetShadowOffset()"
  },
  {
    "label": "GetShadowColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetShadowColorAndOpacity()"
  },
  {
    "label": "GetShadowColorAndOpacityRef()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetShadowColorAndOpacityRef()"
  },
  {
    "label": "GetHighlightColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetHighlightColor()"
  },
  {
    "label": "GetHighlightShape()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetHighlightShape()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetMargin()"
  },
  {
    "label": "GetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinDesiredWidth()"
  },
  {
    "label": "GetComputedTextStyle()",
    "kind": "Method",
    "detail": "Function (private : FTextBlockStyle)",
    "insertText": "GetComputedTextStyle()"
  },
  {
    "label": "UpdateTextBlockLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextBlockLayout(float LayoutScaleMultiplier)"
  },
  {
    "label": "InvalidateText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateText(EInvalidateWidgetReason InvalidateReason)"
  }
]