[
  {
    "label": "SProjectLauncherVariantSelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherVariantSelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ITargetDeviceProxy . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherVariantSelector \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSProjectLauncherVariantSelected, FName)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherVariantSelector)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnSProjectLauncherVariantSelected, OnVariantSelected) SLATE_ATTRIBUTE(FText, Text) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, TSharedPtr<ITargetDeviceProxy> DeviceProxy)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (OnVariantSelected = InArgs . _OnVariantSelected ; FMenuBuilder)",
    "insertText": "MenuBuilder(true, NULL)"
  },
  {
    "label": "GetVariants()",
    "kind": "Method",
    "detail": "Function (TArray<FName> Variants ; DeviceProxy ->)",
    "insertText": "GetVariants(Variants)"
  },
  {
    "label": "Variant()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Variant(*It)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "Action(FExecuteAction::CreateSP(this, &SProjectLauncherVariantSelector::HandleMenuEntryClicked, Variant))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::FromString(Variant.ToString()), FText::GetEmpty(), FSlateIcon(), Action)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (} FName DefaultVariant = NAME_None ; FUIAction)",
    "insertText": "Action(FExecuteAction::CreateSP(this, &SProjectLauncherVariantSelector::HandleMenuEntryClicked, DefaultVariant))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"DefaultVariant\", \"Default\"), FText::GetEmpty(), FSlateIcon(), Action)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SComboButton) .VAlign(VAlign_Center) .ComboButtonStyle(FAppStyle::Get(), \"ComboButton\") .ButtonContent() [ SNew(STextBlock) .Font(FCoreStyle::Get().GetFontStyle(TEXT(\"SmallFont\"))) .Text(InArgs._Text) ] .ContentPadding(FMargin(6.0f, 0.0f)) .MenuContent() [ MenuBuilder.MakeWidget()"
  },
  {
    "label": "HandleMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleMenuEntryClicked(FName Variant)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnVariantSelected .)",
    "insertText": "ExecuteIfBound(Variant)"
  }
]