[
  {
    "label": "FInitStaticResourceRenderThreadTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInitStaticResourceRenderThreadTask"
  },
  {
    "label": "TStaticStateRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticStateRHI"
  },
  {
    "label": "FStaticStateResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticStateResource"
  },
  {
    "label": "TStaticSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticSamplerState"
  },
  {
    "label": "TStaticRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticRasterizerState"
  },
  {
    "label": "TStaticDepthStencilState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticDepthStencilState"
  },
  {
    "label": "TStaticBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticBlendState"
  },
  {
    "label": "TStaticBlendStateWriteMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStaticBlendStateWriteMask"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Stats / Stats . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / StaticArray . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" Misc / ScopedEvent . h \" class FInitStaticResourceRenderThreadTask {)",
    "insertText": "void(*DoConstruct)()"
  },
  {
    "label": "FInitStaticResourceRenderThreadTask()",
    "kind": "Method",
    "detail": "Function (FScopedEvent& Event ; public :)",
    "insertText": "FInitStaticResourceRenderThreadTask(void (*InDoConstruct)(), FScopedEvent& InEvent) : DoConstruct(InDoConstruct) , Event(InEvent)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (} ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "GetSubsequentsMode()",
    "kind": "Method",
    "detail": "Function (} ESubsequentsMode::Type)",
    "insertText": "GetSubsequentsMode()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (Event .)",
    "insertText": "Trigger()"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (} } ; template<InitializerType,RHIRefType,RHIParamRefType> class TStaticStateRHI { public : RHIParamRefType)",
    "insertText": "GetRHI()"
  },
  {
    "label": "CreateRHI()",
    "kind": "Method",
    "detail": "Function (StateRHI =)",
    "insertText": "CreateRHI()"
  },
  {
    "label": "BeginInitResource()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BeginInitResource(this)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (StateRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "FStaticStateResource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStaticStateResource()"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (FSamplerStateInitializerRHI)",
    "insertText": "Initializer(Filter, AddressU, AddressV, AddressW, MipBias, MaxAnisotropy, 0, FLT_MAX, BorderColor, SamplerComparisonFunction)"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (const FRasterizerStateInitializerRHI)",
    "insertText": "Initializer(FillMode, CullMode, 0.0f, 0.0f, DepthClipMode, bEnableMSAA)"
  },
  {
    "label": "GetStaticRasterizerState()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool bEnableMSAA> FRHIRasterizerState*)",
    "insertText": "GetStaticRasterizerState(ERasterizerFillMode FillMode,ERasterizerCullMode CullMode)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (ERasterizerDepthClipMode DepthClipMode = ERasterizerDepthClipMode::DepthClip ;)",
    "insertText": "switch(FillMode)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (default : case FM_Solid :)",
    "insertText": "switch(CullMode)"
  },
  {
    "label": "Initializer()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateInitializerRHI)",
    "insertText": "Initializer(bEnableDepthWrite, DepthTest, bEnableFrontFaceStencil, FrontFaceStencilTest, FrontFaceStencilFailStencilOp, FrontFaceDepthFailStencilOp, FrontFacePassStencilOp, bEnableBackFaceStencil, BackFaceStencilTest, BackFaceStencilFailStencilOp, BackFaceDepthFailStencilOp, BackFacePassStencilOp, StencilReadMask, StencilWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (TStaticArray<FBlendStateInitializerRHI::FRenderTarget,8> RenderTargetBlendStates ; RenderTargetBlendStates [ 0 ] =)",
    "insertText": "FRenderTarget(RT0ColorBlendOp,RT0ColorSrcBlend,RT0ColorDestBlend,RT0AlphaBlendOp,RT0AlphaSrcBlend,RT0AlphaDestBlend,RT0ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 1 ] =)",
    "insertText": "FRenderTarget(RT1ColorBlendOp,RT1ColorSrcBlend,RT1ColorDestBlend,RT1AlphaBlendOp,RT1AlphaSrcBlend,RT1AlphaDestBlend,RT1ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 2 ] =)",
    "insertText": "FRenderTarget(RT2ColorBlendOp,RT2ColorSrcBlend,RT2ColorDestBlend,RT2AlphaBlendOp,RT2AlphaSrcBlend,RT2AlphaDestBlend,RT2ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 3 ] =)",
    "insertText": "FRenderTarget(RT3ColorBlendOp,RT3ColorSrcBlend,RT3ColorDestBlend,RT3AlphaBlendOp,RT3AlphaSrcBlend,RT3AlphaDestBlend,RT3ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 4 ] =)",
    "insertText": "FRenderTarget(RT4ColorBlendOp,RT4ColorSrcBlend,RT4ColorDestBlend,RT4AlphaBlendOp,RT4AlphaSrcBlend,RT4AlphaDestBlend,RT4ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 5 ] =)",
    "insertText": "FRenderTarget(RT5ColorBlendOp,RT5ColorSrcBlend,RT5ColorDestBlend,RT5AlphaBlendOp,RT5AlphaSrcBlend,RT5AlphaDestBlend,RT5ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 6 ] =)",
    "insertText": "FRenderTarget(RT6ColorBlendOp,RT6ColorSrcBlend,RT6ColorDestBlend,RT6AlphaBlendOp,RT6AlphaSrcBlend,RT6AlphaDestBlend,RT6ColorWriteMask)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (RenderTargetBlendStates [ 7 ] =)",
    "insertText": "FRenderTarget(RT7ColorBlendOp,RT7ColorSrcBlend,RT7ColorDestBlend,RT7AlphaBlendOp,RT7AlphaSrcBlend,RT7AlphaDestBlend,RT7ColorWriteMask)"
  }
]