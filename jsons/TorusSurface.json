[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FTorusSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / Surface . h \" namespace UE::CADKernel { class FTorusSurface : public FSurface { FEntity ; protected : FMatrixH Matrix ; double MajorRadius ; double MinorRadius ;)",
    "insertText": "FTorusSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, double InMajorRadius, double InMinorRadius, double InMajorStartAngle = 0.0, double InMajorEndAngle = DOUBLE_TWO_PI, double InMinorStartAngle = 0.0, double InMinorEndAngle = DOUBLE_TWO_PI) : FTorusSurface(InToleranceGeometric, InMatrix, InMajorRadius, InMinorRadius, FSurfacicBoundary(InMajorStartAngle, InMajorEndAngle, InMinorStartAngle, InMinorEndAngle))"
  },
  {
    "label": "FTorusSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTorusSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, double InMajorRadius, double InMinorRadius, const FSurfacicBoundary& InBoundary) : FSurface(InToleranceGeometric, InBoundary) , Matrix(InMatrix) , MajorRadius(InMajorRadius) , MinorRadius(InMinorRadius)"
  },
  {
    "label": "ComputeMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMinToleranceIso()"
  },
  {
    "label": "FTorusSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTorusSurface()"
  },
  {
    "label": "ComputeScaleAlongAxis()",
    "kind": "Method",
    "detail": "Function (FPoint Point2DU { 1,0,0 } ; FPoint Point2DV { 0,1,0 } ; Tolerance2DU / =)",
    "insertText": "ComputeScaleAlongAxis(Point2DU, Matrix, Origin)"
  },
  {
    "label": "ComputeScaleAlongAxis()",
    "kind": "Method",
    "detail": "Function (Tolerance2DV / =)",
    "insertText": "ComputeScaleAlongAxis(Point2DV, Matrix, Origin)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (MinToleranceIso .)",
    "insertText": "Set(FMath::Abs(Tolerance2DU), FMath::Abs(Tolerance2DV))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (Ar<<Matrix ; Ar<<MajorRadius ; Ar<<MinorRadius ; } ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (const double CosU =)",
    "insertText": "cos(InSurfacicCoordinate.U)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (const double CosV =)",
    "insertText": "cos(InSurfacicCoordinate.V)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (const double SinU =)",
    "insertText": "sin(InSurfacicCoordinate.U)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (const double SinV =)",
    "insertText": "sin(InSurfacicCoordinate.V)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . DerivativeOrder = InDerivativeOrder ; OutPoint3D . Point .)",
    "insertText": "Set(Rho * CosU, Rho * SinU, MinorRadius * SinV)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . Point = Matrix .)",
    "insertText": "Multiply(OutPoint3D.Point)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientU =)",
    "insertText": "FPoint((MajorRadius + MinorRadius * CosV) * -SinU, (MajorRadius + MinorRadius * CosV) * CosU, 0.0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientV =)",
    "insertText": "FPoint((MinorRadius * -SinV) * CosU, (MinorRadius * -SinV) * SinU, MinorRadius * CosV)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientU = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.GradientU)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.GradientV)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianU =)",
    "insertText": "FPoint((MajorRadius + MinorRadius * CosV) * -CosU, (MajorRadius + MinorRadius * CosV) * -SinU, 0.0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianV =)",
    "insertText": "FPoint((MinorRadius * -CosV) * CosU, (MinorRadius * -CosV) * SinU, MinorRadius * -SinV)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianUV =)",
    "insertText": "FPoint((MinorRadius * -SinV) * -SinU, (MinorRadius * -SinV) * CosU, 0.0)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianU = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianU)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianV)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianUV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianUV)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& Coordinates, FSurfacicSampling& OutPoints, bool bComputeNormals = false)"
  },
  {
    "label": "EvaluatePointGridInCylindricalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGridInCylindricalSpace(const FCoordinateGrid& Coordinates, TArray<FPoint2D>&)"
  },
  {
    "label": "EvaluatePointInCylindricalSpace()",
    "kind": "Method",
    "detail": "Function (FPoint2D)",
    "insertText": "EvaluatePointInCylindricalSpace(const FPoint2D& InSurfacicCoordinate)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  },
  {
    "label": "PresampleIsoCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresampleIsoCircle(InBoundaries, OutCoordinates, EIso::IsoU)"
  },
  {
    "label": "PresampleIsoCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresampleIsoCircle(InBoundaries, OutCoordinates, EIso::IsoV)"
  }
]