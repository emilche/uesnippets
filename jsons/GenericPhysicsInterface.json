[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGenericPhysicsInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPhysicsInterface"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FGenericRaycastPhysicsInterfaceUsingSpatialAcceleration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericRaycastPhysicsInterfaceUsingSpatialAcceleration"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FGenericGeomPhysicsInterfaceUsingSpatialAcceleration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericGeomPhysicsInterfaceUsingSpatialAcceleration"
  },
  {
    "label": "FGenericPhysicsInterface_Internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPhysicsInterface_Internal"
  },
  {
    "label": "RaycastTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastTest(const UWorld* World, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "RaycastSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastSingle(const UWorld* World, struct FHitResult& OutHit, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "RaycastMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastMulti(const UWorld* World, TArray<struct FHitResult>& OutHits, const FVector& Start, const FVector& End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepTest(const UWorld* World, const FCollisionShape& CollisionShape, const FQuat& Rot, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepSingle(const UWorld* World, const GeomWrapper& InGeom, const FQuat& Rot, FHitResult& OutHit, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepMulti(const UWorld* World, const GeomWrapper& InGeom, const FQuat& InGeomRot, TArray<FHitResult>& OutHits, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapMulti(const UWorld* World, const GeomWrapper& InGeom, const FVector& InPosition, const FQuat& InRotation, TArray<FOverlapResult>& OutOverlaps, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "GeomOverlapBlockingTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapBlockingTest(const UWorld* World, const FCollisionShape& CollisionShape, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomOverlapAnyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapAnyTest(const UWorld* World, const FCollisionShape& CollisionShape, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "RaycastTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastTest(const TAccel& Accel, const UWorld* World, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "RaycastSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastSingle(const TAccel& Accel, const UWorld* World, struct FHitResult& OutHit, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "RaycastMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastMulti(const TAccel& Accel, const UWorld* World, TArray<struct FHitResult>& OutHits, const FVector& Start, const FVector& End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepTest(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FQuat& Rot, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepSingle(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FQuat& Rot, FHitResult& OutHit, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomSweepMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomSweepMulti(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FQuat& InGeomRot, TArray<FHitResult>& OutHits, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapMulti(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FVector& InPosition, const FQuat& InRotation, TArray<FOverlapResult>& OutOverlaps, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "GeomOverlapBlockingTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapBlockingTest(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GeomOverlapAnyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeomOverlapAnyTest(const TAccel& Accel, const UWorld* World, const TGeom& InGeom, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "SpherecastMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpherecastMulti(const UWorld* World, float QueryRadius, TArray<FHitResult>& OutHits, FVector Start, FVector End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  }
]