[
  {
    "label": "CFRefType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFRefType"
  },
  {
    "label": "TTollFreeBridgeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTollFreeBridgeType"
  },
  {
    "label": "TCFRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCFRef"
  },
  {
    "label": "TCFRef()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE4CFRef_Private { template<class CFRefType> struct TTollFreeBridgeType ; # ifdef __OBJC__ template<> struct TTollFreeBridgeType<CFArrayRef> { using Type = NSArray* ; } ; template<> struct TTollFreeBridgeType<CFAttributedStringRef> { using Type = NSAttributedString* ; } ; template<> struct TTollFreeBridgeType<CFBooleanRef> { using Type = NSNumber* ; } ; template<> struct TTollFreeBridgeType<CFCalendarRef> { using Type = NSCalendar* ; } ; template<> struct TTollFreeBridgeType<CFCharacterSetRef> { using Type = NSCharacterSet* ; } ; template<> struct TTollFreeBridgeType<CFDataRef> { using Type = NSData* ; } ; template<> struct TTollFreeBridgeType<CFDateRef> { using Type = NSDate* ; } ; template<> struct TTollFreeBridgeType<CFDictionaryRef> { using Type = NSDictionary* ; } ; template<> struct TTollFreeBridgeType<CFErrorRef> { using Type = NSError* ; } ; template<> struct TTollFreeBridgeType<CFLocaleRef> { using Type = NSLocale* ; } ; template<> struct TTollFreeBridgeType<CFMutableArrayRef> { using Type = NSMutableArray* ; } ; template<> struct TTollFreeBridgeType<CFMutableAttributedStringRef> { using Type = NSMutableAttributedString* ; } ; template<> struct TTollFreeBridgeType<CFMutableCharacterSetRef> { using Type = NSMutableCharacterSet* ; } ; template<> struct TTollFreeBridgeType<CFMutableDataRef> { using Type = NSMutableData* ; } ; template<> struct TTollFreeBridgeType<CFMutableDictionaryRef> { using Type = NSMutableDictionary* ; } ; template<> struct TTollFreeBridgeType<CFMutableSetRef> { using Type = NSMutableSet* ; } ; template<> struct TTollFreeBridgeType<CFMutableStringRef> { using Type = NSMutableString* ; } ; template<> struct TTollFreeBridgeType<CFNullRef> { using Type = NSNull* ; } ; template<> struct TTollFreeBridgeType<CFNumberRef> { using Type = NSNumber* ; } ; template<> struct TTollFreeBridgeType<CFReadStreamRef> { using Type = NSInputStream* ; } ; template<> struct TTollFreeBridgeType<CFRunLoopTimerRef> { using Type = NSTimer* ; } ; template<> struct TTollFreeBridgeType<CFSetRef> { using Type = NSSet* ; } ; template<> struct TTollFreeBridgeType<CFStringRef> { using Type = NSString* ; } ; template<> struct TTollFreeBridgeType<CFTimeZoneRef> { using Type = NSTimeZone* ; } ; template<> struct TTollFreeBridgeType<CFURLRef> { using Type = NSURL* ; } ; template<> struct TTollFreeBridgeType<CFWriteStreamRef> { using Type = NSOutputStream* ; } ; # endif } template<class CFRefType> class TCFRef { public :)",
    "insertText": "TCFRef() : Ref(nullptr)"
  },
  {
    "label": "TCFRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCFRef(CFRefType InRef) : Ref(InRef)"
  },
  {
    "label": "TCFRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCFRef(const TCFRef& Other)"
  },
  {
    "label": "CFRetain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFRetain(Other.Ref)"
  },
  {
    "label": "TCFRef()",
    "kind": "Method",
    "detail": "Function (Ref = Other . Ref ; })",
    "insertText": "TCFRef(TCFRef&& Other)"
  },
  {
    "label": "TCFRef()",
    "kind": "Method",
    "detail": "Function (Ref = Other . Ref ; Other . Ref = nullptr ; } ~)",
    "insertText": "TCFRef()"
  },
  {
    "label": "CFRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFRelease(Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TCFRef&)",
    "insertText": "operator(const TCFRef& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ref = Other . Ref ; } return* this ; } TCFRef&)",
    "insertText": "operator(TCFRef&& Other)"
  },
  {
    "label": "GetForAssignment()",
    "kind": "Method",
    "detail": "Function (} Ref = Other . Ref ; Other . Ref = nullptr ; } return* this ; } CFRefType*)",
    "insertText": "GetForAssignment()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (Ref = nullptr ; } return& Ref ; } operator)",
    "insertText": "bool()"
  }
]