[
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "VirtualSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualSocketServer"
  },
  {
    "label": "SocketAddressPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketAddressPair"
  },
  {
    "label": "VirtualSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualSocket"
  },
  {
    "label": "SafetyBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafetyBlock"
  },
  {
    "label": "AcceptResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AcceptResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NetworkEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkEntry"
  },
  {
    "label": "VirtualSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualSocketServer"
  },
  {
    "label": "VirtualSocket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VirtualSocket(VirtualSocketServer* server, int family, int type)"
  },
  {
    "label": "SetLocalAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalAddress(const SocketAddress& addr)"
  },
  {
    "label": "SetToBlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToBlocked()"
  },
  {
    "label": "UpdateRecv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecv(size_t data_size)"
  },
  {
    "label": "UpdateSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSend(size_t data_size)"
  },
  {
    "label": "MaybeSignalWriteEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalWriteEvent(size_t capacity)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "AddPacket(int64_t cur_time, size_t packet_size)"
  },
  {
    "label": "UpdateOrderedDelivery()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "UpdateOrderedDelivery(int64_t ts)"
  },
  {
    "label": "PurgeNetworkPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PurgeNetworkPackets(int64_t cur_time)"
  },
  {
    "label": "PostPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPacket(webrtc::TimeDelta delay, std::unique_ptr<Packet> packet)"
  },
  {
    "label": "PostConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostConnect(webrtc::TimeDelta delay, const SocketAddress& remote_addr)"
  },
  {
    "label": "PostDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDisconnect(webrtc::TimeDelta delay)"
  },
  {
    "label": "SafetyBlock()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SafetyBlock(VirtualSocket* socket)"
  },
  {
    "label": "SetNotAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotAlive()"
  },
  {
    "label": "IsAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlive()"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* buffer, size_t size, SocketAddress& addr)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Listen()"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (AcceptResult)",
    "insertText": "Accept()"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPacket(std::unique_ptr<Packet> packet)"
  },
  {
    "label": "PostConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostConnect(webrtc::TimeDelta delay, const SocketAddress& remote_addr)"
  },
  {
    "label": "MaybeSignalReadEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalReadEvent()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (Signal)",
    "insertText": "Connect(PostedConnects::iterator remote_addr_it)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (posted_connects_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_buffer_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (listen_queue_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "InitiateConnect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitiateConnect(const SocketAddress& addr, bool use_delay)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteConnect(const SocketAddress& addr)"
  },
  {
    "label": "SendUdp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendUdp(const void* pv, size_t cb, const SocketAddress& addr)"
  },
  {
    "label": "SendTcp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTcp(const void* pv, size_t cb)"
  },
  {
    "label": "OnSocketServerReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketServerReadyToSend()"
  },
  {
    "label": "VirtualSocketServer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VirtualSocketServer()"
  },
  {
    "label": "VirtualSocketServer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "VirtualSocketServer(ThreadProcessingFakeClock* fake_clock)"
  },
  {
    "label": "GetDefaultSourceAddress()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetDefaultSourceAddress(int family)"
  },
  {
    "label": "SetDefaultSourceAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSourceAddress(const IPAddress& from_addr)"
  },
  {
    "label": "RTC_LOCKS_EXCLUDED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "RTC_LOCKS_EXCLUDED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetAlternativeLocalAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlternativeLocalAddress(const rtc::IPAddress& address,\n                                  const rtc::IPAddress& alternative)"
  },
  {
    "label": "CreateDistribution()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "CreateDistribution(uint32_t mean,\n                                                      uint32_t stddev,\n                                                      uint32_t samples)"
  },
  {
    "label": "ProcessMessagesUntilIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessagesUntilIdle()"
  },
  {
    "label": "SetNextPortForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextPortForTesting(uint16_t port)"
  },
  {
    "label": "CloseTcpConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseTcpConnections(const SocketAddress& addr_local,\n                           const SocketAddress& addr_remote)"
  },
  {
    "label": "RTC_LOCKS_EXCLUDED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "AssignBindAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "AssignBindAddress(const SocketAddress& app_addr)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Bind(VirtualSocket* socket, const SocketAddress& addr)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Unbind(const SocketAddress& addr, VirtualSocket* socket)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(const SocketAddress& client,\n                     const SocketAddress& server,\n                     VirtualSocket* socket)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect(VirtualSocket* socket,\n              const SocketAddress& remote_addr,\n              bool use_delay)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(VirtualSocket* socket)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(const SocketAddress& addr)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(const SocketAddress& local_addr,\n                  const SocketAddress& remote_addr)"
  },
  {
    "label": "SendUdp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendUdp(VirtualSocket* socket,\n              const char* data,\n              size_t data_size,\n              const SocketAddress& remote_addr)"
  },
  {
    "label": "GetNextIP()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetNextIP(int family)"
  },
  {
    "label": "GetNextPort()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetNextPort()"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const SocketAddress& client,\n                        const SocketAddress& server)"
  },
  {
    "label": "AddPacketToNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacketToNetwork(VirtualSocket* socket,\n                          VirtualSocket* recipient,\n                          int64_t cur_time,\n                          const char* data,\n                          size_t data_size,\n                          size_t header_size,\n                          bool ordered)"
  },
  {
    "label": "GetTransitDelay()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetTransitDelay(Socket* socket)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Accumulate(std::unique_ptr<Function> f)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Invert(std::unique_ptr<Function> f)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Resample(std::unique_ptr<Function> f,\n                                            double x1,\n                                            double x2,\n                                            uint32_t samples)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Evaluate(const Function* f, double x)"
  },
  {
    "label": "CanInteractWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteractWith(VirtualSocket* local, VirtualSocket* remote)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bandwidth_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (network_capacity_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_buffer_capacity_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_buffer_capacity_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delay_mean_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delay_stddev_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delay_samples_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (drop_prob_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]