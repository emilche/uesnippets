[
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "VirtualSocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualSocketServer"
  },
  {
    "label": "SocketAddressPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketAddressPair"
  },
  {
    "label": "VirtualSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualSocket"
  },
  {
    "label": "SafetyBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafetyBlock"
  },
  {
    "label": "AcceptResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AcceptResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NetworkEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkEntry"
  },
  {
    "label": "VirtualSocket()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_VIRTUAL_SOCKET_SERVER_H_ # define RTC_BASE_VIRTUAL_SOCKET_SERVER_H_ # include<deque> # include<map> # include<vector> # include \" absl / types / optional . h \" # include \" api / make_ref_counted . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / event . h \" # include \" rtc_base / fake_clock . h \" # include \" rtc_base / socket_server . h \" # include \" rtc_base / synchronization / mutex . h \" namespace rtc { class Packet ; class VirtualSocketServer ; class SocketAddressPair ; class VirtualSocket : public Socket,public sigslot::has_slots<> { public :)",
    "insertText": "VirtualSocket(VirtualSocketServer* server, int family, int type)"
  },
  {
    "label": "VirtualSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VirtualSocket()"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Bind(const SocketAddress& addr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect(const SocketAddress& addr)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(void* pv, size_t cb, int64_t* timestamp)"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* pv, size_t cb, SocketAddress* paddr, int64_t* timestamp)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Listen(int backlog)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (VirtualSocket*)",
    "insertText": "Accept(SocketAddress* paddr)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (ConnState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Option opt, int value)"
  },
  {
    "label": "recv_buffer_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "recv_buffer_size()"
  },
  {
    "label": "send_buffer_data()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "send_buffer_data()"
  },
  {
    "label": "SetLocalAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalAddress(const SocketAddress& addr)"
  },
  {
    "label": "was_any()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "was_any()"
  },
  {
    "label": "SetToBlocked()",
    "kind": "Method",
    "detail": "Function (was_any_ = was_any ; } void)",
    "insertText": "SetToBlocked()"
  },
  {
    "label": "UpdateRecv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecv(size_t data_size)"
  },
  {
    "label": "UpdateSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSend(size_t data_size)"
  },
  {
    "label": "MaybeSignalWriteEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalWriteEvent(size_t capacity)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "AddPacket(int64_t cur_time, size_t packet_size)"
  },
  {
    "label": "UpdateOrderedDelivery()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "UpdateOrderedDelivery(int64_t ts)"
  },
  {
    "label": "PurgeNetworkPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PurgeNetworkPackets(int64_t cur_time)"
  },
  {
    "label": "PostPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPacket(webrtc::TimeDelta delay, std::unique_ptr<Packet> packet)"
  },
  {
    "label": "PostConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostConnect(webrtc::TimeDelta delay, const SocketAddress& remote_addr)"
  },
  {
    "label": "PostDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDisconnect(webrtc::TimeDelta delay)"
  },
  {
    "label": "SafetyBlock()",
    "kind": "Method",
    "detail": "Function (private : class SafetyBlock : public RefCountedNonVirtual<SafetyBlock> { public :)",
    "insertText": "SafetyBlock(VirtualSocket* socket)"
  },
  {
    "label": "SafetyBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafetyBlock(const SafetyBlock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SafetyBlock&)",
    "insertText": "operator(const SafetyBlock&)"
  },
  {
    "label": "SafetyBlock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SafetyBlock()"
  },
  {
    "label": "SetNotAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotAlive()"
  },
  {
    "label": "IsAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlive()"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* buffer, size_t size, SocketAddress& addr)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Listen()"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (struct AcceptResult { int error = 0 ; std::unique_ptr<VirtualSocket> socket ; SocketAddress remote_addr ; } ; AcceptResult)",
    "insertText": "Accept()"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPacket(std::unique_ptr<Packet> packet)"
  },
  {
    "label": "PostSignalReadEvent()",
    "kind": "Method",
    "detail": "Function (private : enum class Signal { kNone,kReadEvent,kConnectEvent } ; using PostedConnects = std::list<SocketAddress> ; void)",
    "insertText": "PostSignalReadEvent() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "MaybeSignalReadEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalReadEvent()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (Signal)",
    "insertText": "Connect(PostedConnects::iterator remote_addr_it)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::Mutex mutex_ ; VirtualSocket& socket_ ; bool alive_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "InitiateConnect()",
    "kind": "Method",
    "detail": "Function (} ; struct NetworkEntry { size_t size ; int64_t done_time ; } ; typedef std::deque<NetworkEntry> NetworkQueue ; typedef std::vector<char> SendBuffer ; typedef std::map<Option,int> OptionsMap ; int)",
    "insertText": "InitiateConnect(const SocketAddress& addr, bool use_delay)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteConnect(const SocketAddress& addr)"
  },
  {
    "label": "SendUdp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendUdp(const void* pv, size_t cb, const SocketAddress& addr)"
  },
  {
    "label": "SendTcp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTcp(const void* pv, size_t cb)"
  },
  {
    "label": "OnSocketServerReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketServerReadyToSend()"
  },
  {
    "label": "SafetyBlock()",
    "kind": "Method",
    "detail": "Function (VirtualSocketServer* const server_ ; const int type_ ; ConnState state_ ; int error_ ; SocketAddress local_addr_ ; SocketAddress remote_addr_ ; const scoped_refptr<SafetyBlock> safety_ = make_ref_counted<)",
    "insertText": "SafetyBlock(this)"
  },
  {
    "label": "VirtualSocketServer()",
    "kind": "Method",
    "detail": "Function (SendBuffer send_buffer_ ; bool ready_to_send_ = true ; NetworkQueue network_ ; size_t network_size_ ; int64_t last_delivery_time_ = 0 ; size_t recv_buffer_size_ ; bool bound_ ; bool was_any_ ; OptionsMap options_map_ ; } ; class VirtualSocketServer : public SocketServer { public :)",
    "insertText": "VirtualSocketServer()"
  },
  {
    "label": "VirtualSocketServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualSocketServer(ThreadProcessingFakeClock* fake_clock)"
  },
  {
    "label": "VirtualSocketServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualSocketServer(const VirtualSocketServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VirtualSocketServer&)",
    "insertText": "operator(const VirtualSocketServer&)"
  },
  {
    "label": "GetDefaultSourceAddress()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "GetDefaultSourceAddress(int family)"
  },
  {
    "label": "SetDefaultSourceAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSourceAddress(const IPAddress& from_addr)"
  },
  {
    "label": "set_bandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_bandwidth(uint32_t bandwidth) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_network_capacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_network_capacity(uint32_t capacity) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "send_buffer_capacity()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "send_buffer_capacity() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_send_buffer_capacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_send_buffer_capacity(uint32_t capacity) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "recv_buffer_capacity()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "recv_buffer_capacity() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_recv_buffer_capacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_recv_buffer_capacity(uint32_t capacity) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_delay_mean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_delay_mean(uint32_t delay_mean) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_delay_stddev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_delay_stddev(uint32_t delay_stddev) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_delay_samples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_delay_samples(uint32_t delay_samples) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "UpdateDelayDistribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayDistribution() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_drop_probability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_drop_probability(double drop_prob) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "set_max_udp_payload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_max_udp_payload(size_t payload_size) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetSendingBlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendingBlocked(bool blocked) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (VirtualSocket*)",
    "insertText": "CreateSocket(int family, int type)"
  },
  {
    "label": "SetMessageQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageQueue(Thread* queue)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "SetDelayOnAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayOnAddress(const rtc::SocketAddress& address, int delay_ms)"
  },
  {
    "label": "ipaddr()",
    "kind": "Method",
    "detail": "Function (delay_by_ip_ [ address .)",
    "insertText": "ipaddr()"
  },
  {
    "label": "SetAlternativeLocalAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlternativeLocalAddress(const rtc::IPAddress& address, const rtc::IPAddress& alternative)"
  },
  {
    "label": "CreateDistribution()",
    "kind": "Method",
    "detail": "Function (typedef std::pair<double,double> Point ; typedef std::vector<Point> Function ; std::unique_ptr<Function>)",
    "insertText": "CreateDistribution(uint32_t mean, uint32_t stddev, uint32_t samples)"
  },
  {
    "label": "ProcessMessagesUntilIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessagesUntilIdle()"
  },
  {
    "label": "SetNextPortForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextPortForTesting(uint16_t port)"
  },
  {
    "label": "CloseTcpConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseTcpConnections(const SocketAddress& addr_local, const SocketAddress& addr_remote)"
  },
  {
    "label": "sent_packets()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "sent_packets() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "AssignBindAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "AssignBindAddress(const SocketAddress& app_addr)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Bind(VirtualSocket* socket, const SocketAddress& addr)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Unbind(const SocketAddress& addr, VirtualSocket* socket)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(const SocketAddress& client, const SocketAddress& server, VirtualSocket* socket)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect(VirtualSocket* socket, const SocketAddress& remote_addr, bool use_delay)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(VirtualSocket* socket)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(const SocketAddress& addr)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Disconnect(const SocketAddress& local_addr, const SocketAddress& remote_addr)"
  },
  {
    "label": "SendUdp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendUdp(VirtualSocket* socket, const char* data, size_t data_size, const SocketAddress& remote_addr)"
  },
  {
    "label": "SendTcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTcp(VirtualSocket* socket) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SendTcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTcp(const SocketAddress& addr) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SendDelay()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SendDelay(uint32_t size) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetNextIP()",
    "kind": "Method",
    "detail": "Function (sigslot::signal0<> SignalReadyToSend ; protected : IPAddress)",
    "insertText": "GetNextIP(int family)"
  },
  {
    "label": "LookupBinding()",
    "kind": "Method",
    "detail": "Function (VirtualSocket*)",
    "insertText": "LookupBinding(const SocketAddress& addr)"
  },
  {
    "label": "GetNextPort()",
    "kind": "Method",
    "detail": "Function (private : VirtualSocket ; uint16_t)",
    "insertText": "GetNextPort()"
  },
  {
    "label": "LookupConnection()",
    "kind": "Method",
    "detail": "Function (VirtualSocket*)",
    "insertText": "LookupConnection(const SocketAddress& client, const SocketAddress& server)"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const SocketAddress& client, const SocketAddress& server)"
  },
  {
    "label": "AddPacketToNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacketToNetwork(VirtualSocket* socket, VirtualSocket* recipient, int64_t cur_time, const char* data, size_t data_size, size_t header_size, bool ordered)"
  },
  {
    "label": "GetTransitDelay()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetTransitDelay(Socket* socket)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Accumulate(std::unique_ptr<Function> f)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Invert(std::unique_ptr<Function> f)"
  },
  {
    "label": "Resample()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Function>)",
    "insertText": "Resample(std::unique_ptr<Function> f, double x1, double x2, uint32_t samples)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Evaluate(const Function* f, double x)"
  },
  {
    "label": "CanInteractWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteractWith(VirtualSocket* local, VirtualSocket* remote)"
  }
]