[
  {
    "label": "InEnumType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InEnumType"
  },
  {
    "label": "TEnumAsByte",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnumAsByte"
  },
  {
    "label": "classes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "classes"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsTEnumAsByte",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTEnumAsByte"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / IsPODType . h \" # include \" Templates / TypeHash . h \" template<class InEnumType> class TEnumAsByte {)",
    "insertText": "static_assert(std::is_enum_v<InEnumType> && std::is_convertible_v<InEnumType, int>, \"TEnumAsByte is not intended for use with enum classes - please derive your enum class from uint8 instead.\")"
  },
  {
    "label": "TEnumAsByte()",
    "kind": "Method",
    "detail": "Function (public : using EnumType = InEnumType ;)",
    "insertText": "TEnumAsByte()"
  },
  {
    "label": "TEnumAsByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEnumAsByte(const TEnumAsByte&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte&)",
    "insertText": "operator(const TEnumAsByte&)"
  },
  {
    "label": "TEnumAsByte()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEnumAsByte(int32 InValue ) : Value(static_cast<uint8>(InValue))"
  },
  {
    "label": "TEnumAsByte()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEnumAsByte(uint8 InValue ) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(EnumType InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TEnumAsByte InValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} public : EnumType)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetIntValue()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetIntValue()"
  }
]