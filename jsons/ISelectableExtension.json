[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" MVVM / ViewModelTypeID . h \" struct FGuid ; namespace UE { namespace Sequencer { class FViewModel ; enum class ESelectionIntent { Never = 0 x0,PersistentSelection = 0 x1,ContextMenu = 0 x2,Any = PersistentSelection | ContextMenu,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESelectionIntent)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (class ISelectableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ISelectableExtension) virtual ~ISelectableExtension()"
  },
  {
    "label": "IsSelectable()",
    "kind": "Method",
    "detail": "Function (} ESelectionIntent)",
    "insertText": "IsSelectable()"
  }
]