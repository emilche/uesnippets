[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoNode"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "FIntersectionIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionIsoSegment"
  },
  {
    "label": "FIsoUSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoUSegment"
  },
  {
    "label": "FIsoVSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoVSegment"
  },
  {
    "label": "FIntersectionIsoSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionIsoSegmentTool"
  },
  {
    "label": "FIntersectionIsoSegment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoSegment . h \" # include \" Math / Boundary . h \" # include \" UI / Visu . h \" namespace UE::CADKernel { class FGrid ; class FIsoNode ; class FPoint2D ; namespace IntersectionIsoSegmentTool { class FIntersectionIsoSegment { private : const FPoint2D& Point0 ; const FPoint2D& Point1 ; double IsoCoordinate ; double MinCoordinate ; double MaxCoordinate ; public :)",
    "insertText": "FIntersectionIsoSegment(const FPoint2D& StartPoint, const FPoint2D& EndPoint, const double InIsoCoordinate, const double InStartCoordinate, const double InEndCoordinate) : Point0(StartPoint) , Point1(EndPoint) , IsoCoordinate(InIsoCoordinate) , MinCoordinate(FMath::Min(InStartCoordinate, InEndCoordinate)) , MaxCoordinate(FMath::Max(InStartCoordinate, InEndCoordinate))"
  },
  {
    "label": "FIntersectionIsoSegment()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FIntersectionIsoSegment()"
  },
  {
    "label": "GetMinPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "GetMinPoint()"
  },
  {
    "label": "GetMaxPoint()",
    "kind": "Method",
    "detail": "Function (FPoint2D)",
    "insertText": "GetMaxPoint()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIntersectionIsoSegment& A, const FIntersectionIsoSegment& B)"
  },
  {
    "label": "FIsoVSegment()",
    "kind": "Method",
    "detail": "Function (} } ; class FIsoVSegment : public FIntersectionIsoSegment { public :)",
    "insertText": "FIsoVSegment(const FPoint2D& StartPoint, const FPoint2D& EndPoint) : FIntersectionIsoSegment(StartPoint, EndPoint, StartPoint.V, StartPoint.U, EndPoint.U)"
  },
  {
    "label": "FIntersectionIsoSegmentTool()",
    "kind": "Method",
    "detail": "Function (} } ; } class FIntersectionIsoSegmentTool { private : const FGrid& Grid ; TArray<TPair<double,int32>> CoordToIndex [ 2 ] ; TArray<IntersectionIsoSegmentTool::FIsoUSegment> USegments ; TArray<IntersectionIsoSegmentTool::FIsoVSegment> VSegments ; bool bIsSorted = false ; public :)",
    "insertText": "FIntersectionIsoSegmentTool(const FGrid& InGrid, const double Tolerance)"
  },
  {
    "label": "AddIsoSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIsoSegment(const FPoint2D& StartPoint, const FPoint2D& EndPoint, const ESegmentType InType)"
  },
  {
    "label": "DoesIntersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersect(const FIsoNode& StartNode, const FIsoNode& EndNode)"
  },
  {
    "label": "CountIntersections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountIntersections(const FIsoNode& StartNode, const FIsoNode& EndNode)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort()"
  },
  {
    "label": "GetStartIndex()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetStartIndex(EIso Iso, double Min)"
  },
  {
    "label": "GetStartIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStartIndex(EIso Iso, const FSurfacicBoundary& Boundary)"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (public : # ifdef CADKERNEL_DEBUG void)",
    "insertText": "Display(bool bDisplay, const TCHAR* Message, EVisuProperty Property = EVisuProperty::BlueCurve)"
  }
]