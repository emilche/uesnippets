[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ISequencerEntityVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequencerEntityVisitor"
  },
  {
    "label": "FSequencerEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerEntityRange"
  },
  {
    "label": "FSequencerEntityWalker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerEntityWalker"
  },
  {
    "label": "Everything()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" HAL / PlatformCrt . h \" # include \" MVVM / ViewModelPtr . h \" # include \" Math / Range . h \" # include \" Math / Vector2D . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" class UMovieSceneSection ; namespace UE::Sequencer { class FViewModel ; } namespace UE { namespace Sequencer { class FChannelModel ; } } namespace ESequencerEntity { enum Type { Key = 1<<0,Section = 1<<1,} ; const uint32)",
    "insertText": "Everything(uint32)"
  },
  {
    "label": "ISequencerEntityVisitor()",
    "kind": "Method",
    "detail": "Function (} struct ISequencerEntityVisitor {)",
    "insertText": "ISequencerEntityVisitor(uint32 InEntityMask = ESequencerEntity::Everything) : EntityMask(InEntityMask)"
  },
  {
    "label": "VisitKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitKeys(const UE::Sequencer::TViewModelPtr<UE::Sequencer::FChannelModel>& Channel, const TRange<FFrameNumber>& VisitRangeFrames)"
  },
  {
    "label": "VisitDataModel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitDataModel(UE::Sequencer::FViewModel* Item)"
  },
  {
    "label": "CheckEntityMask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckEntityMask(ESequencerEntity::Type Type)"
  },
  {
    "label": "ISequencerEntityVisitor()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "ISequencerEntityVisitor()"
  },
  {
    "label": "FSequencerEntityRange()",
    "kind": "Method",
    "detail": "Function (} uint32 EntityMask ; } ; struct FSequencerEntityRange {)",
    "insertText": "FSequencerEntityRange(const TRange<double>& InRange, FFrameRate InTickResolution)"
  },
  {
    "label": "FSequencerEntityRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerEntityRange(FVector2D TopLeft, FVector2D BottomRight, FFrameRate InTickResolution)"
  },
  {
    "label": "IntersectSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectSection(const UMovieSceneSection* InSection)"
  },
  {
    "label": "IntersectKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectKeyArea(TSharedPtr<UE::Sequencer::FViewModel> InNode, float VirtualKeyHeight)"
  },
  {
    "label": "IntersectVertical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectVertical(float Top, float Bottom)"
  },
  {
    "label": "FSequencerEntityWalker()",
    "kind": "Method",
    "detail": "Function (FFrameRate TickResolution ; TRange<double> Range ; TOptional<float> VerticalTop,VerticalBottom ; } ; struct FSequencerEntityWalker {)",
    "insertText": "FSequencerEntityWalker(const FSequencerEntityRange& InRange, FVector2D InVirtualKeySize)"
  },
  {
    "label": "Traverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Traverse(const ISequencerEntityVisitor& Visitor, TSharedPtr<UE::Sequencer::FViewModel> Item)"
  },
  {
    "label": "ConditionallyIntersectModel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConditionallyIntersectModel(const ISequencerEntityVisitor& Visitor, const TSharedPtr<UE::Sequencer::FViewModel>& DataModel)"
  },
  {
    "label": "VisitAnyChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAnyChannels(const ISequencerEntityVisitor& Visitor, const TSharedRef<UE::Sequencer::FViewModel>& InNode, bool bAnyParentCollapsed)"
  },
  {
    "label": "VisitChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitChannel(const ISequencerEntityVisitor& Visitor, const UE::Sequencer::TViewModelPtr<UE::Sequencer::FChannelModel>& Channel)"
  }
]