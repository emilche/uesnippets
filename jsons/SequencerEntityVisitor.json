[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "ISequencerEntityVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequencerEntityVisitor"
  },
  {
    "label": "FSequencerEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerEntityRange"
  },
  {
    "label": "FSequencerEntityWalker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerEntityWalker"
  },
  {
    "label": "Traverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Traverse(const ISequencerEntityVisitor& Visitor, TSharedPtr<UE::Sequencer::FViewModel> Item)"
  },
  {
    "label": "ConditionallyIntersectModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyIntersectModel(const ISequencerEntityVisitor& Visitor, const TSharedPtr<UE::Sequencer::FViewModel>& DataModel)"
  },
  {
    "label": "VisitAnyChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAnyChannels(const ISequencerEntityVisitor& Visitor, const TSharedRef<UE::Sequencer::FViewModel>& InNode, bool bAnyParentCollapsed)"
  },
  {
    "label": "VisitChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitChannel(const ISequencerEntityVisitor& Visitor, const UE::Sequencer::TViewModelPtr<UE::Sequencer::FChannelModel>& Channel)"
  }
]