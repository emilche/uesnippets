[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "FCurveEditorDelayedDrag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorDelayedDrag"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FCurveEditorToolID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorToolID"
  },
  {
    "label": "FCurveModelID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveModelID"
  },
  {
    "label": "FCurvePointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePointHandle"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FOptionalSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalSize"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCachedToolTipData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedToolTipData"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CurveDrawInfo . h \" # include \" CurveEditorTypes . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" HAL / Platform . h \" # include \" ICurveEditorDragOperation . h \" # include \" ICurveEditorToolExtension . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Rendering / RenderingCommon . h \" # include \" SCurveEditorView . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" CurveEditorSettings . h \" class FCurveEditor ; class FCurveModel ; class FMenuBuilder ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class IMenu ; struct FCurveEditorDelayedDrag ; struct FCurveEditorScreenSpace ; struct FCurveEditorToolID ; struct FCurveModelID ; struct FCurvePointHandle ; struct FGeometry ; struct FOptionalSize ; struct FPointerEvent ; struct FKeyAttributes ; namespace CurveViewConstants { float CurveLabelOffsetX = 1 5 . f ; float CurveLabelOffsetY = 1 0 . f ; FLinearColor BufferedCurveColor =)",
    "insertText": "FLinearColor(.4f, .4f, .4f)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (namespace ELayerOffset { enum { Background = 0,GridLines = 1,GridOverlays = 2,GridLabels = 3,Curves = 1 0,HoveredCurves = 1 5,Keys = 2 0,SelectedKeys = 3 0,Tools = 3 5,DragOperations = 4 0,Labels = 4 5,WidgetContent = 5 0,Last = Labels } ; } } class SInteractiveCurveEditorView : public SCurveEditorView { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SInteractiveCurveEditorView) : _BackgroundTint(FLinearColor::White) , _MaximumCapacity(0) , _AutoSize(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FLinearColor, BackgroundTint) SLATE_ARGUMENT(int32, MaximumCapacity) SLATE_ATTRIBUTE(float, FixedHeight) SLATE_ARGUMENT(bool, AutoSize) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TWeakPtr<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "GetGridLinesX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGridLinesX(TSharedRef<const FCurveEditor> CurveEditor, TArray<float>& MajorGridLines, TArray<float>& MinorGridLines, TArray<FText>* MajorGridLabels = nullptr)"
  },
  {
    "label": "GetGridLinesY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGridLinesY(TSharedRef<const FCurveEditor> CurveEditor, TArray<float>& MajorGridLines, TArray<float>& MinorGridLines, TArray<FText>* MajorGridLabels = nullptr)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder, TOptional<FCurvePointHandle> ClickedPoint, TOptional<FCurveModelID> HoveredCurveID)"
  },
  {
    "label": "GetPointsWithinWidgetRange()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetPointsWithinWidgetRange(const FSlateRect& WidgetRectangle, TArray<FCurvePointHandle>* OutPoints)"
  },
  {
    "label": "GetCurveWithinWidgetRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurveWithinWidgetRange(const FSlateRect& WidgetRectangle, TArray<FCurvePointHandle>* OutPoints)"
  },
  {
    "label": "GetHoveredCurve()",
    "kind": "Method",
    "detail": "Function (TOptional<FCurveModelID>)",
    "insertText": "GetHoveredCurve()"
  },
  {
    "label": "FormatToolTipCurveName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatToolTipCurveName(const FCurveModel& CurveModel)"
  },
  {
    "label": "FormatToolTipTime()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatToolTipTime(const FCurveModel& CurveModel, double EvaluatedTime)"
  },
  {
    "label": "FormatToolTipValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatToolTipValue(const FCurveModel& CurveModel, double EvaluatedValue)"
  },
  {
    "label": "PaintView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintView(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DrawBackground(const FGeometry& AllottedGeometry, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "DrawGridLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGridLines(TSharedRef<FCurveEditor> CurveEditor, const FGeometry& AllottedGeometry, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "DrawCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurves(TSharedRef<FCurveEditor> CurveEditor, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, const FWidgetStyle& InWidgetStyle, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "DrawBufferedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBufferedCurves(TSharedRef<FCurveEditor> CurveEditor, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 BaseLayerId, const FWidgetStyle& InWidgetStyle, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "GetCurveCaptionColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCurveCaptionColor()"
  },
  {
    "label": "GetCurveCaption()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurveCaption()"
  },
  {
    "label": "HandleDirectKeySelectionByMouse()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleDirectKeySelectionByMouse(TSharedPtr<FCurveEditor> CurveEditor, const FPointerEvent& MouseEvent, TOptional<FCurvePointHandle> MouseDownPoint)"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "UpdateCurveProximities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveProximities(FVector2D MousePixel)"
  },
  {
    "label": "HitPoint()",
    "kind": "Method",
    "detail": "Function (TOptional<FCurvePointHandle>)",
    "insertText": "HitPoint(FVector2D MousePixel)"
  },
  {
    "label": "IsToolTipEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToolTipEnabled()"
  },
  {
    "label": "GetToolTipCurveName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipCurveName()"
  },
  {
    "label": "GetToolTipTimeText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipTimeText()"
  },
  {
    "label": "GetToolTipValueText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipValueText()"
  },
  {
    "label": "AddKeyAtScrubTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyAtScrubTime(TSet<FCurveModelID> ForCurves)"
  },
  {
    "label": "AddKeyAtMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyAtMousePosition(TSet<FCurveModelID> ForCurves)"
  },
  {
    "label": "AddKeyAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyAtTime(const TSet<FCurveModelID>& ToCurves, double InTime)"
  },
  {
    "label": "PasteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteKeys(TSet<FCurveModelID> ToCurves)"
  },
  {
    "label": "OnCurveEditorToolChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveEditorToolChanged(FCurveEditorToolID InToolId)"
  },
  {
    "label": "RebindContextualActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebindContextualActions(FVector2D InMousePosition)"
  },
  {
    "label": "BufferCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferCurves()"
  },
  {
    "label": "ApplyBufferCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBufferCurves(const bool bSwapBufferCurves)"
  },
  {
    "label": "CanBufferedCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBufferedCurves()"
  },
  {
    "label": "CanApplyBufferedCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanApplyBufferedCurves()"
  },
  {
    "label": "GetDefaultKeyAttributesForCurveTime()",
    "kind": "Method",
    "detail": "Function (FKeyAttributes)",
    "insertText": "GetDefaultKeyAttributesForCurveTime(const FCurveEditor& CurveEditor, const FCurveModel& CurveModel, double EvalTime)"
  },
  {
    "label": "FCachedToolTipData()",
    "kind": "Method",
    "detail": "Function (protected : FLinearColor BackgroundTint ; private : TOptional<FCurveEditorDelayedDrag> DragOperation ; struct FCachedToolTipData {)",
    "insertText": "FCachedToolTipData()"
  }
]