[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "UPersonaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPersonaOptions"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "PERSONA_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PERSONA_API"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "SAnimationEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationEditorViewport"
  },
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "IPersonaEditorModeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaEditorModeManager"
  },
  {
    "label": "GridParam",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GridParam"
  },
  {
    "label": "FAnimationEditorPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationEditorPreviewScene"
  },
  {
    "label": "FTimecodeDisplayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimecodeDisplayInfo"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Misc / Guid . h \" # include \" InputCoreTypes . h \" # include \" HitProxies . h \" # include \" UnrealWidgetFwd . h \" # include \" EditorViewportClient . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" Animation / DebugSkelMeshComponent . h \" # include \" IPersonaPreviewScene . h \" # include \" Preferences / PersonaOptions . h \" # include \" SkeletalDebugRendering . h \" class FCanvas ; class UPersonaOptions ; class USkeletalMeshSocket ; struct FCompactHeapPose ; struct FSkelMeshRenderSection ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnBoneSizeSet, float)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(float, FOnGetBoneSize)"
  },
  {
    "label": "ShowBoneNames()",
    "kind": "Method",
    "detail": "Function (enum Type { None,Selected,All,NumAxesModes } ; } ; namespace EDisplayInfoMode { enum Type { None,Basic,Detailed,SkeletalControls,NumInfoModes } ; } ; namespace EAnimationPlaybackSpeeds { enum Type { OneTenth = 0,Quarter,Half,ThreeQuarters,Normal,Double,FiveTimes,TenTimes,Custom,NumPlaybackSpeeds } ; float Values [ NumPlaybackSpeeds ] ; } ; class FAnimationViewportClient : public FEditorViewportClient,public TSharedFromThis<FAnimationViewportClient> { protected : void)",
    "insertText": "ShowBoneNames(FCanvas* Canvas, FSceneView* View, UDebugSkelMeshComponent* MeshComponent)"
  },
  {
    "label": "ShowAttributeNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAttributeNames(FCanvas* Canvas, FSceneView* View, UDebugSkelMeshComponent* MeshComponent)"
  },
  {
    "label": "DrawNodeDebugLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawNodeDebugLines(TArray<FText>& Lines, FCanvas* Canvas, FSceneView* View)"
  },
  {
    "label": "FAnimationViewportClient()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimationViewportClient(const TSharedRef<class IPersonaPreviewScene>& InPreviewScene, const TSharedRef<class SAnimationEditorViewport>& InAnimationEditorViewport, const TSharedRef<class FAssetEditorToolkit>& InAssetEditorToolkit, int32 InViewportIndex, bool bInShowStats)"
  },
  {
    "label": "FAnimationViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimationViewportClient()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* InViewport, FInputDeviceId DeviceId, FKey Key, float Delta, float DeltaTime, int32 NumSamples = 1, bool bGamepad = false)"
  },
  {
    "label": "UpdateBonesToDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBonesToDraw()"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(const struct FInputEventState& InInputState, bool bIsDragging, bool bNudge)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetCoordSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWidgetCoordSystem()"
  },
  {
    "label": "GetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordSystemSpace()"
  },
  {
    "label": "SetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetCoordSystemSpace(ECoordSystem NewCoordSystem)"
  },
  {
    "label": "SetViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewMode(EViewModeIndex InViewModeIndex)"
  },
  {
    "label": "SetViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportType(ELevelViewportType InViewportType)"
  },
  {
    "label": "RotateViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateViewportType()"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "SetupViewForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewForRendering(FSceneViewFamily& ViewFamily, FSceneView& View)"
  },
  {
    "label": "HandleToggleShowFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleShowFlag(FEngineShowFlags::EShowFlag EngineShowFlagIndex)"
  },
  {
    "label": "CalcViewRotationMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CalcViewRotationMatrix(const FRotator& InViewRotation)"
  },
  {
    "label": "DrawUVsForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUVsForMesh(FViewport* InViewport, FCanvas* InCanvas, int32 InTextYPos, UDebugSkelMeshComponent* MeshComponent)"
  },
  {
    "label": "SetCameraFollowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraFollowMode(EAnimationViewportCameraFollowMode Mode, FName InBoneName = NAME_None)"
  },
  {
    "label": "OnFocusViewportToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusViewportToSelection()"
  },
  {
    "label": "GetCameraFollowMode()",
    "kind": "Method",
    "detail": "Function (EAnimationViewportCameraFollowMode)",
    "insertText": "GetCameraFollowMode()"
  },
  {
    "label": "GetCameraFollowBoneName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCameraFollowBoneName()"
  },
  {
    "label": "JumpToDefaultCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToDefaultCamera()"
  },
  {
    "label": "SaveCameraAsDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCameraAsDefault()"
  },
  {
    "label": "CanSaveCameraAsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSaveCameraAsDefault()"
  },
  {
    "label": "ClearDefaultCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDefaultCamera()"
  },
  {
    "label": "HasDefaultCameraSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDefaultCameraSet()"
  },
  {
    "label": "HandleSkeletalMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSkeletalMeshChanged(class USkeletalMesh* OldSkeletalMesh, class USkeletalMesh* NewSkeletalMesh)"
  },
  {
    "label": "HandleOnMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnMeshChanged()"
  },
  {
    "label": "HandleOnSkelMeshPhysicsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnSkelMeshPhysicsCreated()"
  },
  {
    "label": "ShowBoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowBoneNames(FViewport* Viewport, FCanvas* Canvas, UDebugSkelMeshComponent* MeshComponent)"
  },
  {
    "label": "OnToggleAutoAlignFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAutoAlignFloor()"
  },
  {
    "label": "IsAutoAlignFloor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoAlignFloor()"
  },
  {
    "label": "OnToggleMuteAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleMuteAudio()"
  },
  {
    "label": "IsAudioMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioMuted()"
  },
  {
    "label": "OnToggleUseAudioAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleUseAudioAttenuation()"
  },
  {
    "label": "IsUsingAudioAttenuation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingAudioAttenuation()"
  },
  {
    "label": "SetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundColor(FLinearColor InColor)"
  },
  {
    "label": "GetBrightnessValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBrightnessValue()"
  },
  {
    "label": "SetBrightnessValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBrightnessValue(float Value)"
  },
  {
    "label": "SetLocalAxesMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalAxesMode(ELocalAxesMode::Type AxesMode)"
  },
  {
    "label": "IsLocalAxesModeSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalAxesModeSet(ELocalAxesMode::Type AxesMode)"
  },
  {
    "label": "GetLocalAxesMode()",
    "kind": "Method",
    "detail": "Function (ELocalAxesMode::Type)",
    "insertText": "GetLocalAxesMode()"
  },
  {
    "label": "SetBoneDrawSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneDrawSize(const float InBoneDrawSize)"
  },
  {
    "label": "GetBoneDrawSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBoneDrawSize()"
  },
  {
    "label": "SetCustomAnimationSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomAnimationSpeed(const float InCustomAnimationSpeed)"
  },
  {
    "label": "GetCustomAnimationSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCustomAnimationSpeed()"
  },
  {
    "label": "SetBoneDrawMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneDrawMode(EBoneDrawMode::Type AxesMode)"
  },
  {
    "label": "IsBoneDrawModeSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneDrawModeSet(EBoneDrawMode::Type AxesMode)"
  },
  {
    "label": "GetBoneDrawMode()",
    "kind": "Method",
    "detail": "Function (EBoneDrawMode::Type)",
    "insertText": "GetBoneDrawMode()"
  },
  {
    "label": "GetCameraTarget()",
    "kind": "Method",
    "detail": "Function (FSphere)",
    "insertText": "GetCameraTarget()"
  },
  {
    "label": "UpdateCameraSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraSetup()"
  },
  {
    "label": "FocusViewportOnSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewportOnSphere(FSphere& Sphere, bool bInstant = true)"
  },
  {
    "label": "FocusViewportOnPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewportOnPreviewMesh(bool bUseCustomCamera)"
  },
  {
    "label": "ToggleCPUSkinning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCPUSkinning()"
  },
  {
    "label": "IsSetCPUSkinningChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetCPUSkinningChecked()"
  },
  {
    "label": "ToggleRotateCameraToFollowBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleRotateCameraToFollowBone()"
  },
  {
    "label": "GetShouldRotateCameraToFollowBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShouldRotateCameraToFollowBone()"
  },
  {
    "label": "ToggleShowNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowNormals()"
  },
  {
    "label": "IsSetShowNormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowNormalsChecked()"
  },
  {
    "label": "ToggleShowTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowTangents()"
  },
  {
    "label": "IsSetShowTangentsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowTangentsChecked()"
  },
  {
    "label": "ToggleShowBinormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBinormals()"
  },
  {
    "label": "IsSetShowBinormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetShowBinormalsChecked()"
  },
  {
    "label": "SetDrawUVOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawUVOverlay(bool bInDrawUVs)"
  },
  {
    "label": "IsSetDrawUVOverlayChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetDrawUVOverlayChecked()"
  },
  {
    "label": "GetUVChannelToDraw()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUVChannelToDraw()"
  },
  {
    "label": "GetFloorOffset()",
    "kind": "Method",
    "detail": "Function (UVChannelToDraw = UVChannel ; } float)",
    "insertText": "GetFloorOffset()"
  },
  {
    "label": "SetFloorOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloorOffset(float NewValue)"
  },
  {
    "label": "OnSetShowMeshStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetShowMeshStats(int32 ShowMode)"
  },
  {
    "label": "IsShowingMeshStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingMeshStats()"
  },
  {
    "label": "IsShowingSelectedNodeStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingSelectedNodeStats()"
  },
  {
    "label": "IsDetailedMeshStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDetailedMeshStats()"
  },
  {
    "label": "GetShowMeshStats()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShowMeshStats()"
  },
  {
    "label": "SetPlaybackSpeedMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeedMode(EAnimationPlaybackSpeeds::Type InMode)"
  },
  {
    "label": "GetPlaybackSpeedMode()",
    "kind": "Method",
    "detail": "Function (EAnimationPlaybackSpeeds::Type)",
    "insertText": "GetPlaybackSpeedMode()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "GetAssetEditorToolkit()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class FAssetEditorToolkit>)",
    "insertText": "GetAssetEditorToolkit()"
  },
  {
    "label": "ShouldDisplayAdditiveScaleErrorMessage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldDisplayAdditiveScaleErrorMessage()"
  },
  {
    "label": "DrawSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSockets(const UDebugSkelMeshComponent* InPreviewMeshComponent, TArray<USkeletalMeshSocket*>& InSockets, FSelectedSocketInfo InSelectedSocket, FPrimitiveDrawInterface* PDI, bool bUseSkeletonSocketColor)"
  },
  {
    "label": "RenderGizmo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderGizmo(const FTransform& Transform, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetDisplayInfo()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayInfo(bool bDisplayAllInfo)"
  },
  {
    "label": "GetViewportIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetViewportIndex()"
  },
  {
    "label": "UpdateAudioListener()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateAudioListener(const FSceneView& View)"
  },
  {
    "label": "SetCameraTargetLocation()",
    "kind": "Method",
    "detail": "Function (public : UPersonaOptions* ConfigOption ; FOnBoneSizeSet OnSetBoneSize ; FOnGetBoneSize OnGetBoneSize ; private : TSharedPtr<class IPersonaPreviewScene> PreviewScenePtr ; TWeakPtr<class FAssetEditorToolkit> AssetEditorToolkitPtr ; UE::Widget::EWidgetMode WidgetMode ; EAnimationViewportCameraFollowMode CameraFollowMode ; FName CameraFollowBoneName ; bool bAutoAlignFloor ; bool bRotateCameraToFollowBone ; FLinearColor SelectedHSVColor ; EAnimationPlaybackSpeeds::Type AnimationPlaybackSpeedMode ; bool bDrawUVs ; int32 UVChannelToDraw ; enum GridParam { MinCellCount = 6 4,MinGridSize = 2,MaxGridSize = 5 0,} ; bool bFocusOnDraw ; bool bFocusUsingCustomCamera ; bool bDoesAdditiveRefPoseHaveZeroScale ; FGuid RefPoseGuid ; float CachedScreenSize ; FDelegateHandle OnPhysicsCreatedDelegateHandle ; FDelegateHandle OnMeshChangedDelegateHandle ; TBitArray<> BonesToDraw ; FDelegateHandle OnSelectedBoneChangedHandle ; private : void)",
    "insertText": "SetCameraTargetLocation(const FSphere &BoundSphere, float DeltaSeconds)"
  },
  {
    "label": "DrawMeshBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBones(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawBonesFromTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBonesFromTransforms(TArray<FTransform>& Transforms, UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI, FLinearColor BoneColour, FLinearColor RootBoneColour)"
  },
  {
    "label": "DrawBonesFromCompactPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBonesFromCompactPose(const FCompactHeapPose& Pose, UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI, const FLinearColor& DrawColor)"
  },
  {
    "label": "DrawMeshBonesUncompressedAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBonesUncompressedAnimation(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawMeshBonesNonRetargetedAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBonesNonRetargetedAnimation(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawMeshBonesAdditiveBasePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBonesAdditiveBasePose(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawMeshBonesSourceRawAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBonesSourceRawAnimation(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawMeshBonesBakedAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshBonesBakedAnimation(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawBonesFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBonesFromSkeleton(UDebugSkelMeshComponent * MeshComponent, const USkeleton* Skeleton, const TArray<int32>& InSelectedBones, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBones(const FVector& ComponentOrigin, const TArray<FBoneIndexType>& RequiredBones, const FReferenceSkeleton& RefSkeleton, const TArray<FTransform>& WorldTransforms, const TArray<int32>& InSelectedBones, const TArray<FLinearColor>& BoneColors, FPrimitiveDrawInterface* PDI, bool bForceDraw, bool bAddHitProxy, bool bUseMultiColors)"
  },
  {
    "label": "DrawAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttributes(UDebugSkelMeshComponent* MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawNotifies(UDebugSkelMeshComponent* MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawCanvasNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvasNotifies(UDebugSkelMeshComponent* MeshComponent, FCanvas& Canvas, FSceneView& View)"
  },
  {
    "label": "DrawAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAssetUserData(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawCanvasAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvasAssetUserData(FCanvas& Canvas, FSceneView& View)"
  },
  {
    "label": "DrawRootMotionTrajectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRootMotionTrajectory(UDebugSkelMeshComponent* MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawWatchedPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWatchedPoses(UDebugSkelMeshComponent * MeshComponent, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetAnimPreviewScenePtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FAnimationEditorPreviewScene>)",
    "insertText": "GetAnimPreviewScenePtr()"
  },
  {
    "label": "GetAnimPreviewScene()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FAnimationEditorPreviewScene>)",
    "insertText": "GetAnimPreviewScene()"
  },
  {
    "label": "HandleInvalidateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInvalidateViews()"
  },
  {
    "label": "HandleFocusViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFocusViews()"
  },
  {
    "label": "OnAssetViewerSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetViewerSettingsChanged(const FName& InPropertyName)"
  },
  {
    "label": "SetAdvancedShowFlagsForScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdvancedShowFlagsForScene(const bool bAdvancedShowFlags)"
  },
  {
    "label": "ComputeBoundingBoxForSelectedEditorSection()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeBoundingBoxForSelectedEditorSection()"
  },
  {
    "label": "TransformVertexPositionsToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformVertexPositionsToWorld(TArray<FFinalSkinVertex>& LocalVertices)"
  },
  {
    "label": "GetAllVertexIndicesUsedInSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVertexIndicesUsedInSection(const FRawStaticIndexBuffer16or32Interface& IndexBuffer, const FSkelMeshRenderSection& SkelMeshSection, TArray<int32>& OutIndices)"
  },
  {
    "label": "HandlePreviewScenePreTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewScenePreTick()"
  },
  {
    "label": "HandlePreviewScenePostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewScenePostTick()"
  },
  {
    "label": "GetEditedObjectsWithAssetUserData()",
    "kind": "Method",
    "detail": "Function (private : struct FTimecodeDisplayInfo { FQualifiedFrameTime QualifiedTime ; FString Slate ; } ; TArray<IInterface_AssetUserData*>)",
    "insertText": "GetEditedObjectsWithAssetUserData()"
  },
  {
    "label": "OnCameraControllerChanged()",
    "kind": "Method",
    "detail": "Function (float CustomAnimationSpeed = 1 . 0 f ; float BoneDrawSize = 1 . 0 f ; bool bShowMeshStats ; bool bInitiallyFocused ; FQuat OrbitRotation ; FEditorCameraController* CachedDefaultCameraController ; int32 ViewportIndex ; FVector LastLookAtLocation ; void)",
    "insertText": "OnCameraControllerChanged()"
  }
]