[
  {
    "label": "FDataSetThreadLocalTempData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataSetThreadLocalTempData"
  },
  {
    "label": "FVectorVMContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMContext"
  },
  {
    "label": "FVectorVMCodeOptimizerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMCodeOptimizerContext"
  },
  {
    "label": "FVectorVMExternalFunctionContextLegacy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorVMExternalFunctionContextLegacy"
  },
  {
    "label": "FNiagaraSystemScriptExecutionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNiagaraSystemScriptExecutionContext"
  },
  {
    "label": "FDataSetThreadLocalTempData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / ThreadSingleton . h \" # include \" Math / RandomStream . h \" # include \" VectorVMCommon . h \" # if VECTORVM_SUPPORTS_LEGACY struct FDataSetThreadLocalTempData {)",
    "insertText": "FDataSetThreadLocalTempData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FVectorVMContext()",
    "kind": "Method",
    "detail": "Function (MaxID = INDEX_NONE ; } TArray<int32> IDsToFree ; int32 MaxID ; } ; struct FVectorVMContext : TThreadSingleton<FVectorVMContext> { private : struct FVectorVMCodeOptimizerContext ; public : uint8 const* RESTRICT Code ; const uint8* const* RESTRICT ConstantTable ; const int32* ConstantTableSizes ; int32 ConstantTableCount ; int32 NumTempRegisters ; const FVMExternalFunction* const* RESTRICT ExternalFunctionTable ; void** UserPtrTable ; int32 NumInstances ; int32 NumInstancesVectorFloats ; int32 StartInstance ; int32 ExternalFunctionInstanceOffset ; TArrayView<FDataSetMeta> DataSetMetaTable ; TArray<FDataSetThreadLocalTempData> ThreadLocalTempData ; # if STATS TArray<FStatStackEntry,TInlineAllocator<6 4>> StatCounterStack ; TArrayView<FStatScopeData> StatScopes ; TArray<uint64,TInlineAllocator<6 4>> ScopeExecCycles ; # elif ENABLE_STATNAMEDEVENTS TArrayView<const FString> StatNamedEventScopes ; # endif TArray<uint8,TAlignedHeapAllocator<VECTOR_WIDTH_BYTES>> TempRegTable ; uint32 TempRegisterSize ; uint32 TempBufferSize ; FRandomStream RandStream ; TArray<int32> RandCounters ; bool bIsParallelExecution ; int32 ValidInstanceIndexStart = INDEX_NONE ; int32 ValidInstanceCount = 0 ; bool ValidInstanceUniform = false ;)",
    "insertText": "FVectorVMContext()"
  },
  {
    "label": "PrepareForExec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForExec(int32 InNumTempRegisters, int32 ConstantTableCount, const uint8* const* InConstantTables, const int32* InConstantTableSizes, const FVMExternalFunction* const* InExternalFunctionTable, void** InUserPtrTable, TArrayView<FDataSetMeta> InDataSetMetaTable, int32 MaxNumInstances, bool bInParallelExecution)"
  },
  {
    "label": "SetStatScopes()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "SetStatScopes(TArrayView<FStatScopeData> InStatScopes)"
  },
  {
    "label": "SetStatNamedEventScopes()",
    "kind": "Method",
    "detail": "Function (# elif ENABLE_STATNAMEDEVENTS void)",
    "insertText": "SetStatNamedEventScopes(TArrayView<const FString> InStatNamedEventScopes)"
  },
  {
    "label": "FinishExec()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FinishExec()"
  },
  {
    "label": "PrepareForChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForChunk(const uint8* InCode, int32 InNumInstances, int32 InStartInstance)"
  },
  {
    "label": "NumInstancesVectorFloats()",
    "kind": "Method",
    "detail": "Function (Code = InCode ; NumInstances = InNumInstances ;)",
    "insertText": "NumInstancesVectorFloats(NumInstances + VECTOR_WIDTH_FLOATS - 1)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (RandCounters .)",
    "insertText": "SetNumZeroed(InNumInstances)"
  },
  {
    "label": "GetDataSetMeta()",
    "kind": "Method",
    "detail": "Function (} FDataSetMeta&)",
    "insertText": "GetDataSetMeta(int32 DataSetIndex)"
  },
  {
    "label": "GetInputRegister()",
    "kind": "Method",
    "detail": "Function (} template<T,int TypeOffset> T* RESTRICT)",
    "insertText": "GetInputRegister(int32 DataSetIndex, int32 RegisterIndex)"
  },
  {
    "label": "GetDataSetMeta()",
    "kind": "Method",
    "detail": "Function (FDataSetMeta& Meta =)",
    "insertText": "GetDataSetMeta(DataSetIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (uint32 Offset = Meta . InputRegisterTypeOffsets [ TypeOffset ] ;)",
    "insertText": "return((T*)Meta.InputRegisters[Offset + RegisterIndex])"
  },
  {
    "label": "GetOutputRegister()",
    "kind": "Method",
    "detail": "Function (} template<T,int TypeOffset> T* RESTRICT)",
    "insertText": "GetOutputRegister(int32 DataSetIndex, int32 RegisterIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (uint32 Offset = Meta . OutputRegisterTypeOffsets [ TypeOffset ] ;)",
    "insertText": "return((T*)Meta.OutputRegisters[Offset + RegisterIndex])"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "DecodeU8()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "DecodeU8()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 v =* reinterpret_cast<const)",
    "insertText": "uint16(Code)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Code + =)",
    "insertText": "sizeof(uint16)"
  },
  {
    "label": "DecodeU32()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "DecodeU32()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 v =* reinterpret_cast<const)",
    "insertText": "uint32(Code)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Code + =)",
    "insertText": "sizeof(uint32)"
  },
  {
    "label": "DecodeU64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "DecodeU64()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 v =* reinterpret_cast<const)",
    "insertText": "uint64(Code)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Code + =)",
    "insertText": "sizeof(uint64)"
  },
  {
    "label": "DecodeU16()",
    "kind": "Method",
    "detail": "Function (} # else uint16)",
    "insertText": "DecodeU16()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 v = Code [ 1 ] ; v = static_cast<)",
    "insertText": "uint16(v << 8 | Code[0])"
  },
  {
    "label": "INTEL_ORDER16()",
    "kind": "Method",
    "detail": "Function (Code + = 2 ; return)",
    "insertText": "INTEL_ORDER16(v)"
  },
  {
    "label": "INTEL_ORDER32()",
    "kind": "Method",
    "detail": "Function (uint32 v = Code [ 3 ] ; v = v<<8 | Code [ 2 ] ; v = v<<8 | Code [ 1 ] ; v = v<<8 | Code [ 0 ] ; Code + = 4 ; return)",
    "insertText": "INTEL_ORDER32(v)"
  },
  {
    "label": "INTEL_ORDER64()",
    "kind": "Method",
    "detail": "Function (uint64 v = Code [ 7 ] ; v = v<<8 | Code [ 6 ] ; v = v<<8 | Code [ 5 ] ; v = v<<8 | Code [ 4 ] ; v = v<<8 | Code [ 3 ] ; v = v<<8 | Code [ 2 ] ; v = v<<8 | Code [ 1 ] ; v = v<<8 | Code [ 0 ] ; Code + = 8 ; return)",
    "insertText": "INTEL_ORDER64(v)"
  },
  {
    "label": "DecodePtr()",
    "kind": "Method",
    "detail": "Function (} # endif uintptr_t)",
    "insertText": "DecodePtr()"
  },
  {
    "label": "SkipCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SkipCode(int64 Count)"
  },
  {
    "label": "DecodeOp()",
    "kind": "Method",
    "detail": "Function (Code + = Count ; } EVectorVMOp)",
    "insertText": "DecodeOp()"
  },
  {
    "label": "DecodeSrcOperandTypes()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "DecodeSrcOperandTypes()"
  },
  {
    "label": "IsParallelExecution()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsParallelExecution()"
  },
  {
    "label": "GetConstant()",
    "kind": "Method",
    "detail": "Function (} template<T = uint8> const T*)",
    "insertText": "GetConstant(int32 Offset)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 TableIndex = 0 ;)",
    "insertText": "while(Offset >= ConstantTableSizes[TableIndex])"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Offset - = ConstantTableSizes [ TableIndex ] ; + + TableIndex ; })",
    "insertText": "check(TableIndex < ConstantTableCount)"
  },
  {
    "label": "FVectorVMExternalFunctionContextLegacy()",
    "kind": "Method",
    "detail": "Function (} } ; class FVectorVMExternalFunctionContextLegacy { struct FNiagaraSystemScriptExecutionContext ; public :)",
    "insertText": "FVectorVMExternalFunctionContextLegacy()"
  },
  {
    "label": "FVectorVMExternalFunctionContextLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVectorVMExternalFunctionContextLegacy(FVectorVMContext* InVectorVMContext) : VectorVMContext(InVectorVMContext)"
  },
  {
    "label": "GetStartInstance()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStartInstance()"
  },
  {
    "label": "GetRandCounters()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>&)",
    "insertText": "GetRandCounters()"
  },
  {
    "label": "GetConstant()",
    "kind": "Method",
    "detail": "Function (} template<T = uint8> const T*)",
    "insertText": "GetConstant(int32 TableIndex, int32 TableOffset)"
  },
  {
    "label": "GetUserPtrTable()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetUserPtrTable(int32 UserPtrIdx)"
  }
]