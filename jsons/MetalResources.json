[
  {
    "label": "FMetalRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHICommandContext"
  },
  {
    "label": "FMetalContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalContext"
  },
  {
    "label": "FMetalShaderPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderPipeline"
  },
  {
    "label": "FMetalCommandBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBuffer"
  },
  {
    "label": "FMetalRenderPipelineHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalRenderPipelineHash"
  },
  {
    "label": "FMetalSubBufferHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSubBufferHeap"
  },
  {
    "label": "FMetalSubBufferLinear",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSubBufferLinear"
  },
  {
    "label": "FMetalSubBufferMagazine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSubBufferMagazine"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "IMetalBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMetalBufferAllocator"
  },
  {
    "label": "FMetalBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetalTextureCreateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalTextureCreateDesc"
  },
  {
    "label": "FMetalResourceViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalResourceViewBase"
  },
  {
    "label": "FMetalShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderResourceView"
  },
  {
    "label": "FMetalUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalUnorderedAccessView"
  },
  {
    "label": "FMetalViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalViewableResource"
  },
  {
    "label": "METALRHI_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "METALRHI_API"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FMetalViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalViewport"
  },
  {
    "label": "FMetalBufferData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalBufferData"
  },
  {
    "label": "FMetalRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHIBuffer"
  },
  {
    "label": "FBufferView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBufferView"
  },
  {
    "label": "FTextureBufferBacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureBufferBacked"
  },
  {
    "label": "FMetalCommandBufferFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBufferFence"
  },
  {
    "label": "FMetalGPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGPUFence"
  },
  {
    "label": "FMetalShaderLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderLibrary"
  },
  {
    "label": "FMetalGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGraphicsPipelineState"
  },
  {
    "label": "FMetalVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalVertexDeclaration"
  },
  {
    "label": "FMetalVertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalVertexShader"
  },
  {
    "label": "FMetalGeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGeometryShader"
  },
  {
    "label": "FMetalPixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalPixelShader"
  },
  {
    "label": "FMetalComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalComputeShader"
  },
  {
    "label": "FMetalRHIStagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHIStagingBuffer"
  },
  {
    "label": "FMetalRHIRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHIRenderQuery"
  },
  {
    "label": "FMetalSuballocatedUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSuballocatedUniformBuffer"
  },
  {
    "label": "FMetalRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRayTracingScene"
  },
  {
    "label": "FMetalRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRayTracingGeometry"
  },
  {
    "label": "FMetalMeshShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalMeshShader"
  },
  {
    "label": "FMetalAmplificationShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalAmplificationShader"
  },
  {
    "label": "TMetalResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMetalResourceTraits"
  },
  {
    "label": "DecodeMetalSourceCode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" BoundShaderStateCache . h \" # include \" MetalShaderResources . h \" # include \" ShaderCodeArchive . h \" # include \" Templates / TypeHash . h \" # define UE_METAL_RHI_SUPPORT_CLEAR_UAV_WITH_BLIT_ENCODER 1 class FMetalRHICommandContext ; class FMetalContext ; class FMetalShaderPipeline ; class FMetalCommandBuffer ; NS::String*)",
    "insertText": "DecodeMetalSourceCode(uint32 CodeSize, TArray<uint8> const& CompressedSource)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (struct FMetalRenderPipelineHash { uint32)",
    "insertText": "GetTypeHash(FMetalRenderPipelineHash const& Hash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMetalRenderPipelineHash const& Left, FMetalRenderPipelineHash const& Right)"
  },
  {
    "label": "FMetalBuffer()",
    "kind": "Method",
    "detail": "Function (} class IMetalBufferAllocator ; class FMetalBuffer { public : enum class FreePolicy { Owner,BufferAllocator,Temporary,} ;)",
    "insertText": "FMetalBuffer(MTL::Buffer* Handle, FreePolicy Allocation)"
  },
  {
    "label": "FMetalBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetalBuffer(MTL::Buffer* Handle, NS::Range Range, IMetalBufferAllocator* InAllocator)"
  },
  {
    "label": "FMetalBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalBuffer()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOffset()"
  },
  {
    "label": "Contents()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Contents()"
  },
  {
    "label": "GetGPUAddress()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "GetGPUAddress()"
  },
  {
    "label": "GetMTLBuffer()",
    "kind": "Method",
    "detail": "Function (} MTL::Buffer*)",
    "insertText": "GetMTLBuffer()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (bMarkedDeleted = true ; } private : void)",
    "insertText": "Release()"
  },
  {
    "label": "FMetalTextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (MTL::Buffer* Buffer ; IMetalBufferAllocator* Allocator ; NS::Range SubRange ; FreePolicy OnFreePolicy ; bool bMarkedDeleted = false ; } ; typedef TSharedPtr<FMetalBuffer,ESPMode::ThreadSafe> FMetalBufferPtr ; struct FMetalTextureCreateDesc : public FRHITextureCreateDesc {)",
    "insertText": "FMetalTextureCreateDesc(FMetalDevice& Device, FRHITextureCreateDesc const& CreateDesc)"
  },
  {
    "label": "FMetalTextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetalTextureCreateDesc(FMetalTextureCreateDesc const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMetalTextureCreateDesc&)",
    "insertText": "operator(const FMetalTextureCreateDesc& Other)"
  },
  {
    "label": "FMetalViewableResource()",
    "kind": "Method",
    "detail": "Function (MTLTextureDescriptorPtr Desc ; MTL::PixelFormat MTLFormat ; bool bIsRenderTarget = false ; uint8 FormatKey = 0 ; } ; class FMetalResourceViewBase ; class FMetalShaderResourceView ; class FMetalUnorderedAccessView ; class FMetalViewableResource { public : ~)",
    "insertText": "FMetalViewableResource()"
  },
  {
    "label": "HasLinkedViews()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLinkedViews()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (private : FMetalShaderResourceView ; FMetalUnorderedAccessView ; FMetalResourceViewBase* LinkedViews = nullptr ; } ; uint32)",
    "insertText": "GetTypeHash(const MTLTexturePtr& TexturePtr)"
  },
  {
    "label": "FMetalSurface()",
    "kind": "Method",
    "detail": "Function (} class FMetalSurface : public FRHITexture,public FMetalViewableResource { public :)",
    "insertText": "FMetalSurface(FMetalDevice& Device, FRHICommandListBase* RHICmdList, FMetalTextureCreateDesc const& CreateDesc)"
  },
  {
    "label": "FMetalSurface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalSurface()"
  },
  {
    "label": "AllocSurface()",
    "kind": "Method",
    "detail": "Function (MTL::Buffer*)",
    "insertText": "AllocSurface(uint32 MipIndex, uint32 ArrayIndex, EResourceLockMode LockMode, uint32& DestStride, bool SingleLayer = false)"
  },
  {
    "label": "UpdateSurfaceAndDestroySourceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSurfaceAndDestroySourceBuffer(FMetalRHICommandContext* Context, MTL::Buffer* SourceBuffer, uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Lock(uint32 MipIndex, uint32 ArrayIndex, EResourceLockMode LockMode, uint32& DestStride, bool SingleLayer = false, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(uint32 MipIndex, uint32 ArrayIndex, bool bTryAsync)"
  },
  {
    "label": "AsyncLock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AsyncLock(class FRHICommandListImmediate& RHICmdList, uint32 MipIndex, uint32 ArrayIndex, EResourceLockMode LockMode, uint32& DestStride, bool bNeedsDefaultRHIFlush, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "AsyncUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncUnlock(MTL::Buffer* SourceData, uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "GetMipSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMipSize(uint32 MipIndex, uint32* Stride, bool bSingleLayer)"
  },
  {
    "label": "GetMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemorySize()"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "GetDrawableTexture()",
    "kind": "Method",
    "detail": "Function (MTLTexturePtr)",
    "insertText": "GetDrawableTexture()"
  },
  {
    "label": "GetCurrentTexture()",
    "kind": "Method",
    "detail": "Function (MTLTexturePtr)",
    "insertText": "GetCurrentTexture()"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (MTLTexturePtr)",
    "insertText": "Reallocate(MTLTexturePtr Texture, MTL::TextureUsage UsageModifier)"
  },
  {
    "label": "MakeAliasable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeAliasable(void)"
  },
  {
    "label": "GetTextureBaseRHI()",
    "kind": "Method",
    "detail": "Function (FMetalDevice& Device ; int16 volatile Written ; uint8 const FormatKey ; MTLTexturePtr Texture ; MTLTexturePtr MSAATexture ; MTLTexturePtr MSAAResolveTexture ; uint64 TotalTextureSize ; class FMetalViewport* Viewport ; void*)",
    "insertText": "GetTextureBaseRHI()"
  },
  {
    "label": "GetDefaultBindlessHandle()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_BINDLESS_RENDERING FRHIDescriptorHandle BindlessHandle ; FRHIDescriptorHandle)",
    "insertText": "GetDefaultBindlessHandle()"
  },
  {
    "label": "FMetalBufferData()",
    "kind": "Method",
    "detail": "Function (CFTypeRef ImageSurfaceRef ; volatile int64 ActiveUploads ; } ; class FMetalBufferData { public : ~)",
    "insertText": "FMetalBufferData()"
  },
  {
    "label": "InitWithSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithSize(uint32 Size)"
  },
  {
    "label": "FMetalRHIBuffer()",
    "kind": "Method",
    "detail": "Function (uint8* Data = nullptr ; uint32 Len = 0 ; } ; class FMetalRHIBuffer final : public FRHIBuffer,public FMetalViewableResource { public : const uint32 MetalMaxNumBufferedFrames = 4 ;)",
    "insertText": "FMetalRHIBuffer(FRHICommandListBase& RHICmdList, FMetalDevice& MetalDevice, FRHIBufferDesc const& InBufferDesc, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "FMetalRHIBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalRHIBuffer()"
  },
  {
    "label": "RequiresTransferBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTransferBuffer()"
  },
  {
    "label": "AllocateBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateBuffers()"
  },
  {
    "label": "ReleaseBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBuffers()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Lock(bool bIsOnRHIThread, EResourceLockMode LockMode, uint32 Offset, uint32 Size=0, FMetalBufferPtr InTransferBuffer = nullptr)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (FMetalBufferPtr)",
    "insertText": "GetCurrentBuffer()"
  },
  {
    "label": "AdvanceBackingIndex()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "AdvanceBackingIndex()"
  },
  {
    "label": "CurrentIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentIndex(CurrentIndex + 1)"
  },
  {
    "label": "IsAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} # if METAL_RHI_RAYTRACING bool)",
    "insertText": "IsAccelerationStructure()"
  },
  {
    "label": "UsePrivateMemory()",
    "kind": "Method",
    "detail": "Function (} MTL::AccelerationStructure AccelerationStructureHandle ; # endif bool)",
    "insertText": "UsePrivateMemory()"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnership(FMetalRHIBuffer& Other)"
  },
  {
    "label": "ReleaseOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnership()"
  },
  {
    "label": "GetIndexType()",
    "kind": "Method",
    "detail": "Function (FMetalDevice& Device ; FMetalBufferPtr TransferBuffer = nullptr ; TArray<FMetalBufferPtr> BufferPool ; FMetalBufferData* Data = nullptr ; uint8 CurrentIndex = 0 ; uint8 NumberOfBuffers = 0 ; uint16 CurrentLockMode = RLM_Num ; uint32 LockOffset = 0 ; uint32 LockSize = 0 ; uint32 Size ; MTL::StorageMode Mode ; MTL::IndexType)",
    "insertText": "GetIndexType()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert((1 << 16) > RLM_Num, \"Lock mode does not fit in bitfield\")"
  },
  {
    "label": "AllocTransferBuffer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AllocTransferBuffer(bool bOnRHIThread, uint32 InSize, EResourceLockMode LockMode)"
  },
  {
    "label": "FBufferView()",
    "kind": "Method",
    "detail": "Function (} ; class FMetalResourceViewBase : public TIntrusiveLinkedList<FMetalResourceViewBase> { public : struct FBufferView { FMetalBufferPtr Buffer ; uint32 Offset ; uint32 Size ;)",
    "insertText": "FBufferView(FMetalBufferPtr Buffer, uint32 Offset, uint32 Size) : Buffer(Buffer) , Offset(Offset) , Size(Size)"
  },
  {
    "label": "FTextureBufferBacked()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTextureBufferBacked { MTLTexturePtr Texture ; FMetalBufferPtr Buffer ; uint32 Offset ; uint32 Size ; EPixelFormat Format ; bool bIsBuffer ;)",
    "insertText": "FTextureBufferBacked(MTLTexturePtr Texture, FMetalBufferPtr Buffer, uint32 Offset, uint32 Size, EPixelFormat Format, bool bIsBuffer) : Texture(Texture) , Buffer(Buffer) , Offset(Offset) , Size(Size) , Format(Format) , bIsBuffer(bIsBuffer)"
  },
  {
    "label": "FEmptyVariantState()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TVariant<FEmptyVariantState,MTLTexturePtr,FBufferView,FTextureBufferBacked # if METAL_RHI_RAYTRACING,MTL::AccelerationStructure # endif> TStorage ; enum class EMetalType { Null = TStorage::IndexOfType<)",
    "insertText": "FEmptyVariantState(), TextureView = TStorage::IndexOfType<MTLTexturePtr>(), BufferView = TStorage::IndexOfType<FBufferView>(), TextureBufferBacked = TStorage::IndexOfType<FTextureBufferBacked>(), #if METAL_RHI_RAYTRACING AccelerationStructure = TStorage::IndexOfType<MTL::AccelerationStructure>()"
  },
  {
    "label": "FMetalResourceViewBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FMetalResourceViewBase(FMetalDevice& InDevice) : Device(InDevice)"
  },
  {
    "label": "FMetalResourceViewBase()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FMetalResourceViewBase()"
  },
  {
    "label": "GetMetalType()",
    "kind": "Method",
    "detail": "Function (EMetalType)",
    "insertText": "GetMetalType()"
  },
  {
    "label": "GetTextureView()",
    "kind": "Method",
    "detail": "Function (} MTLTexturePtr const)",
    "insertText": "GetTextureView()"
  },
  {
    "label": "GetBufferView()",
    "kind": "Method",
    "detail": "Function (} FBufferView const&)",
    "insertText": "GetBufferView()"
  },
  {
    "label": "GetTextureBufferBacked()",
    "kind": "Method",
    "detail": "Function (} FTextureBufferBacked const&)",
    "insertText": "GetTextureBufferBacked()"
  },
  {
    "label": "GetAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} # if METAL_RHI_RAYTRACING MTL::AccelerationStructure const&)",
    "insertText": "GetAccelerationStructure()"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (} # endif TArray<TTuple<MTL::Resource*,MTL::ResourceUsage>> ReferencedResources ; void)",
    "insertText": "UpdateView()"
  },
  {
    "label": "InitAsTextureView()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitAsTextureView(MTLTexturePtr)"
  },
  {
    "label": "InitAsBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsBufferView(FMetalBufferPtr Buffer, uint32 Offset, uint32 Size)"
  },
  {
    "label": "InitAsTextureBufferBacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsTextureBufferBacked(MTLTexturePtr Texture, FMetalBufferPtr Buffer, uint32 Offset, uint32 Size, EPixelFormat Format, bool bIsBuffer)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "FMetalShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FMetalDevice& Device ; bool bOwnsResource = true ; private : TStorage Storage ; } ; class FMetalShaderResourceView final : public FRHIShaderResourceView,public FMetalResourceViewBase { public :)",
    "insertText": "FMetalShaderResourceView(FMetalDevice& Device, FRHICommandListBase& RHICmdList, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc)"
  },
  {
    "label": "FMetalShaderResourceView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalShaderResourceView()"
  },
  {
    "label": "GetBaseResource()",
    "kind": "Method",
    "detail": "Function (FMetalViewableResource*)",
    "insertText": "GetBaseResource()"
  },
  {
    "label": "GetBindlessHandle()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING public : FRHIDescriptorHandle BindlessHandle ; FRHIDescriptorHandle)",
    "insertText": "GetBindlessHandle()"
  },
  {
    "label": "FMetalUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalUnorderedAccessView()"
  },
  {
    "label": "ClearUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUAV(TRHICommandList_RecursiveHazardous<FMetalRHICommandContext>& RHICmdList, const void* ClearValue, bool bFloat)"
  },
  {
    "label": "ClearUAVWithBlitEncoder()",
    "kind": "Method",
    "detail": "Function (# if UE_METAL_RHI_SUPPORT_CLEAR_UAV_WITH_BLIT_ENCODER void)",
    "insertText": "ClearUAVWithBlitEncoder(TRHICommandList_RecursiveHazardous<FMetalRHICommandContext>& RHICmdList, uint32 Pattern)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(MTLCommandBufferPtr CmdBuffer)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Signal(const MTL::CommandBuffer* CmdBuffer)"
  },
  {
    "label": "FMetalGPUFence()",
    "kind": "Method",
    "detail": "Function (FEventRef Condition { EEventMode::ManualReset } ; MTLCommandBufferPtr CmdBuffer ; } ; class FMetalGPUFence final : public FRHIGPUFence { public :)",
    "insertText": "FMetalGPUFence(FName InName) : FRHIGPUFence(InName)"
  },
  {
    "label": "FMetalGPUFence()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMetalGPUFence()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "WriteInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInternal(FMetalCommandBuffer* CmdBuffer)"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll()"
  },
  {
    "label": "WaitCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitCPU()"
  }
]