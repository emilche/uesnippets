[
  {
    "label": "FDisjointSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisjointSet"
  },
  {
    "label": "FDisjointSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FDisjointSet { public :)",
    "insertText": "FDisjointSet()"
  },
  {
    "label": "FDisjointSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisjointSet(const uint32 Size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 Size)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaulted(uint32 Num = 1)"
  },
  {
    "label": "Union()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Union(uint32 x, uint32 y)"
  },
  {
    "label": "UnionSequential()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnionSequential(uint32 x, uint32 y)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Find(uint32 i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "operator(uint32 i)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Size)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Parents .)",
    "insertText": "SetNumUninitialized(Size, EAllowShrinking::No)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDefaulted(uint32 Num)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (uint32 Start = Parents .)",
    "insertText": "AddUninitialized(Num)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 px = Parents [ x ] ; uint32 py = Parents [ y ] ;)",
    "insertText": "while(px != py)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parents [ x ] = py ;)",
    "insertText": "if(x == px)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parents [ y ] = px ;)",
    "insertText": "if(y == py)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 Start = i ; uint32 Root = Parents [ i ] ;)",
    "insertText": "while(Root != i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (i = Root ; Root = Parents [ i ] ; } i = Start ; uint32 Parent = Parents [ i ] ;)",
    "insertText": "while(Parent != Root)"
  }
]