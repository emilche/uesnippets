[
  {
    "label": "FMountDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMountDir"
  },
  {
    "label": "FScanDirAndParentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanDirAndParentData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSetPathProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetPathProperties"
  },
  {
    "label": "FDiscoveredPathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPathData"
  },
  {
    "label": "FGatheredPathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatheredPathData"
  },
  {
    "label": "FFilesToSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilesToSearch"
  },
  {
    "label": "FTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeNode"
  },
  {
    "label": "FPathExistence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathExistence"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FScanDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScanDir"
  },
  {
    "label": "FInherited",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInherited"
  },
  {
    "label": "FAssetDataDiscovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataDiscovery"
  },
  {
    "label": "FScopedPause",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedPause"
  },
  {
    "label": "FDirectoryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectoryResult"
  },
  {
    "label": "FPriorityScanDirData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPriorityScanDirData"
  },
  {
    "label": "FDirToScanData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirToScanData"
  },
  {
    "label": "FDirToScanBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirToScanBuffer"
  },
  {
    "label": "FPreloadSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreloadSettings"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetDataGatherer . h \" # include \" AssetDataGathererDiscoveryCache . h \" # include \" Containers / Set . h \" # include \" Misc / Optional . h \" # include \" Misc / StringBuilder . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include<atomic> namespace UE::AssetDataGather::Private { class FMountDir ; struct FScanDirAndParentData ; enum class EPriority : uint8 { Blocking,High,Normal,Highest = Blocking,Lowest = Normal,} ; struct FSetPathProperties { TOptional<bool> IsOnAllowList ; TOptional<bool> MatchesDenyList ; TOptional<bool> IgnoreDenyList ; TOptional<bool> HasScanned ; bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsVerseFile()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EGatherableFileType : uint8 { Invalid,Directory,PackageFile,VerseFile,VerseModule,} ; bool)",
    "insertText": "IsVerseFile(const EGatherableFileType FileType)"
  },
  {
    "label": "FDiscoveredPathData()",
    "kind": "Method",
    "detail": "Function (struct FDiscoveredPathData { FString LocalAbsPath ; FString LongPackageName ; FString RelPath ; FDateTime PackageTimestamp ; EGatherableFileType Type = EGatherableFileType::Invalid ; bool bBlocked = false ;)",
    "insertText": "FDiscoveredPathData()"
  },
  {
    "label": "FDiscoveredPathData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPathData(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath, const FDateTime& InPackageTimestamp, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "FDiscoveredPathData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPathData(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath, const FDateTime& InPackageTimestamp, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (} ; struct FGatheredPathData { FString LocalAbsPath ; FString LongPackageName ; FDateTime PackageTimestamp ; EGatherableFileType Type = EGatherableFileType::Invalid ; bool bBlocked = false ;)",
    "insertText": "FGatheredPathData()"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGatheredPathData(FStringView InLocalAbsPath, FStringView InLongPackageName, const FDateTime& InPackageTimestamp, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGatheredPathData(const FDiscoveredPathData& DiscoveredData)"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGatheredPathData(FDiscoveredPathData&& DiscoveredData)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, const FDateTime& InPackageTimestamp, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(const FDiscoveredPathData& DiscoveredData)"
  },
  {
    "label": "AddPriorityFile()",
    "kind": "Method",
    "detail": "Function (} ; class FFilesToSearch { public : void)",
    "insertText": "AddPriorityFile(FGatheredPathData&& FilePath)"
  },
  {
    "label": "AddDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectory(FString&& DirAbsPath, TArray<FGatheredPathData>&& FilePaths)"
  },
  {
    "label": "AddFileAgainAfterTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFileAgainAfterTimeout(FGatheredPathData&& FilePath)"
  },
  {
    "label": "AddFileForLaterRetry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFileForLaterRetry(FGatheredPathData&& FilePath)"
  },
  {
    "label": "RetryLaterRetryFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryLaterRetryFiles()"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> void)",
    "insertText": "PopFront(TArray<FGatheredPathData, AllocatorType>& Out, int32 NumToPop)"
  },
  {
    "label": "PrioritizeDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeDirectory(FStringView DirAbsPath, EPriority Priority)"
  },
  {
    "label": "PrioritizeFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeFile(FStringView FileAbsPathExtOptional, EPriority Priority)"
  },
  {
    "label": "NumBlockingFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumBlockingFiles()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetNumAvailable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAvailable()"
  },
  {
    "label": "FTreeNode()",
    "kind": "Method",
    "detail": "Function (private : struct FTreeNode {)",
    "insertText": "FTreeNode()"
  },
  {
    "label": "FTreeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTreeNode(FStringView InRelPath)"
  },
  {
    "label": "GetRelPath()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetRelPath()"
  },
  {
    "label": "FindOrAddNode()",
    "kind": "Method",
    "detail": "Function (FTreeNode&)",
    "insertText": "FindOrAddNode(FStringView InRelPath)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (FTreeNode*)",
    "insertText": "FindNode(FStringView InRelPath)"
  },
  {
    "label": "AddFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFiles(TArray<FGatheredPathData>&& FilePaths)"
  },
  {
    "label": "AddFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFile(FGatheredPathData&& FilePath)"
  },
  {
    "label": "PopFiles()",
    "kind": "Method",
    "detail": "Function (template<RangeType> void)",
    "insertText": "PopFiles(RangeType& Out, int32& NumToPop)"
  },
  {
    "label": "PopAllFiles()",
    "kind": "Method",
    "detail": "Function (template<RangeType> void)",
    "insertText": "PopAllFiles(RangeType& Out)"
  },
  {
    "label": "PopMatchingDirectFiles()",
    "kind": "Method",
    "detail": "Function (template<RangeType> void)",
    "insertText": "PopMatchingDirectFiles(RangeType& Out, FStringView FileAbsPathExtOptional)"
  },
  {
    "label": "PruneEmptyChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneEmptyChild(FStringView SubDirBaseName)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NumFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumFiles()"
  },
  {
    "label": "FindOrAddSubDir()",
    "kind": "Method",
    "detail": "Function (private : FTreeNode&)",
    "insertText": "FindOrAddSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "FindSubDir()",
    "kind": "Method",
    "detail": "Function (FTreeNode*)",
    "insertText": "FindSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "FindLowerBoundSubDir()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowerBoundSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "FPathExistence()",
    "kind": "Method",
    "detail": "Function (FString RelPath ; TArray<FGatheredPathData> Files ; TArray<TUniquePtr<FTreeNode>> SubDirs ; } ; FTreeNode Root ; TRingBuffer<UE::AssetDataGather::Private::FGatheredPathData> BlockingFiles ; TRingBuffer<UE::AssetDataGather::Private::FGatheredPathData> LaterRetryFiles ; int32 AvailableFilesNum = 0 ; } ; struct FPathExistence { enum EType { Directory,File,MissingButDirExists,MissingParentDir,} ;)",
    "insertText": "FPathExistence(FStringView InLocalAbsPath)"
  },
  {
    "label": "GetLocalAbsPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetLocalAbsPath()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetModificationTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetModificationTime()"
  },
  {
    "label": "GetLowestExistingPath()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetLowestExistingPath()"
  },
  {
    "label": "LoadExistenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadExistenceData()"
  },
  {
    "label": "FInherited()",
    "kind": "Method",
    "detail": "Function (private : FString LocalAbsPath ; FDateTime ModificationTime ; EType PathType = EType::MissingParentDir ; bool bHasExistenceData = false ; } ; class FScanDir : public FRefCountBase { public : struct FInherited {)",
    "insertText": "FInherited()"
  },
  {
    "label": "IsMonitored()",
    "kind": "Method",
    "detail": "Function (bool bIsOnAllowList = false ; bool bMatchesDenyList = false ; bool bIgnoreDenyList = false ; bool)",
    "insertText": "IsMonitored()"
  },
  {
    "label": "IsOnDenyList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnDenyList()"
  },
  {
    "label": "IsOnAllowList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnAllowList()"
  },
  {
    "label": "HasSetting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSetting()"
  },
  {
    "label": "FInherited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInherited(const FInherited& Parent, const FInherited& Child)"
  },
  {
    "label": "FScanDir()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FScanDir(FMountDir& InMountDir, FScanDir* InParent, FStringView RelPath)"
  },
  {
    "label": "FScanDir()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScanDir()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetMountDir()",
    "kind": "Method",
    "detail": "Function (FMountDir*)",
    "insertText": "GetMountDir()"
  },
  {
    "label": "AppendLocalAbsPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLocalAbsPath(FStringBuilderBase& OutFullPath)"
  },
  {
    "label": "AppendMountRelPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMountRelPath(FStringBuilderBase& OutRelPath)"
  },
  {
    "label": "GetMountRelPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMountRelPath()"
  },
  {
    "label": "GetMonitorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMonitorData(FStringView InRelPath, const FInherited& ParentData, FInherited& OutData)"
  },
  {
    "label": "IsMonitored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMonitored(const FInherited& ParentData)"
  },
  {
    "label": "ShouldScan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldScan(const FInherited& ParentData)"
  },
  {
    "label": "HasScanned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasScanned()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetControllingDir()",
    "kind": "Method",
    "detail": "Function (FScanDir*)",
    "insertText": "GetControllingDir(FStringView InRelPath, bool bIsDirectory, const FInherited& ParentData, FInherited& OutData, FString& OutRelPath)"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(FStringView InRelPath, FInherited& ParentData, const FSetPathProperties& InProperties, bool bConfirmedExists, FScanDirAndParentData& OutControllingDir)"
  },
  {
    "label": "MarkFileAlreadyScanned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkFileAlreadyScanned(FStringView BaseName)"
  },
  {
    "label": "SetScanResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanResults(FStringView LocalAbsPath, const FInherited& ParentData, TArrayView<FDiscoveredPathData>& InOutSubDirs, TArrayView<FDiscoveredPathData>& InOutFiles)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TArray<FScanDirAndParentData>& OutScanRequests, const FScanDir::FInherited& ParentData)"
  },
  {
    "label": "GetFirstIncompleteScanDir()",
    "kind": "Method",
    "detail": "Function (FScanDir*)",
    "insertText": "GetFirstIncompleteScanDir()"
  },
  {
    "label": "IsScanInFlight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScanInFlight()"
  },
  {
    "label": "SetScanInFlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanInFlight(bool bInScanInFlight)"
  },
  {
    "label": "IsScanInFlightInvalidated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScanInFlightInvalidated()"
  },
  {
    "label": "SetScanInFlightInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanInFlightInvalidated(bool bInValidated)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(bool bMarkDescendents)"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetComplete(bool bInIsComplete)"
  },
  {
    "label": "HasPersistentSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPersistentSettings()"
  },
  {
    "label": "RemoveSubDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "ForEachSubDir()",
    "kind": "Method",
    "detail": "Function (template<CallbackType> void)",
    "insertText": "ForEachSubDir(const CallbackType& Callback)"
  },
  {
    "label": "ForEachDescendent()",
    "kind": "Method",
    "detail": "Function (template<CallbackType> void)",
    "insertText": "ForEachDescendent(const CallbackType& Callback)"
  },
  {
    "label": "FMountDir()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FScanDir>> SubDirs ; TArray<FString> AlreadyScannedFiles ; FMountDir* MountDir = nullptr ; FScanDir* Parent = nullptr ; FString RelPath ; FInherited DirectData ; bool bHasScanned = false ; bool bScanInFlight = false ; bool bScanInFlightInvalidated = false ; bool bIsComplete = false ; } ; struct FScanDirAndParentData { TRefCountPtr<FScanDir> ScanDir ; FScanDir::FInherited ParentData ; } ; class FMountDir { public :)",
    "insertText": "FMountDir(FAssetDataDiscovery& InDiscovery, FStringView LocalAbsPath, FStringView PackagePath)"
  },
  {
    "label": "FMountDir()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMountDir()"
  },
  {
    "label": "GetLongPackageName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetLongPackageName()"
  },
  {
    "label": "GetDiscovery()",
    "kind": "Method",
    "detail": "Function (FAssetDataDiscovery&)",
    "insertText": "GetDiscovery()"
  },
  {
    "label": "GetControllingDir()",
    "kind": "Method",
    "detail": "Function (FScanDir*)",
    "insertText": "GetControllingDir(FStringView LocalAbsPath, bool bIsDirectory, FScanDir::FInherited& OutParentData, FString& OutRelPath)"
  },
  {
    "label": "GetMonitorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMonitorData(FStringView InLocalAbsPath, FScanDir::FInherited& OutData)"
  },
  {
    "label": "IsMonitored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMonitored(FStringView InLocalAbsPath)"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(FStringView LocalAbsPath, const FSetPathProperties& InProperties, bool bConfirmedExists, FScanDirAndParentData* OutControllingDir)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TArray<FScanDirAndParentData>& OutScanRequests)"
  },
  {
    "label": "SetHasStartedScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasStartedScanning()"
  },
  {
    "label": "AddChildMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildMount(FMountDir* ChildMount)"
  },
  {
    "label": "RemoveChildMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildMount(FMountDir* ChildMount)"
  },
  {
    "label": "OnDestroyClearChildMounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyClearChildMounts()"
  },
  {
    "label": "SetParentMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentMount(FMountDir* ParentMount)"
  },
  {
    "label": "GetParentMount()",
    "kind": "Method",
    "detail": "Function (FMountDir*)",
    "insertText": "GetParentMount()"
  },
  {
    "label": "GetChildMounts()",
    "kind": "Method",
    "detail": "Function (TArray<FMountDir*>)",
    "insertText": "GetChildMounts()"
  },
  {
    "label": "UpdateDenyList()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateDenyList()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(FStringView MountRelPath)"
  },
  {
    "label": "AddChildMountPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildMountPath(FStringView MountRelPath)"
  },
  {
    "label": "RemoveChildMountPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveChildMountPath(FStringView MountRelPath)"
  },
  {
    "label": "IsChildMountPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildMountPath(FStringView MountRelPath)"
  },
  {
    "label": "FAssetDataDiscovery()",
    "kind": "Method",
    "detail": "Function (TArray<FString> ChildMountPaths ; TSet<FString> RelPathsDenyList ; FString LocalAbsPath ; FString LongPackageName ; TRefCountPtr<FScanDir> Root ; FAssetDataDiscovery& Discovery ; FMountDir* ParentMount = nullptr ; bool bHasStartedScanning = false ; } ; class FAssetDataDiscovery : public FRunnable { public :)",
    "insertText": "FAssetDataDiscovery(const TArray<FString>& InLongPackageNamesDenyList, const TArray<FString>& InMountRelativePathsDenyList, bool bInAsyncEnabled)"
  },
  {
    "label": "FAssetDataDiscovery()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetDataDiscovery()"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "IsSynchronous()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSynchronous()"
  },
  {
    "label": "GetAndTrimSearchResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndTrimSearchResults(bool& bOutIsComplete, TArray<FString>& OutDiscoveredPaths, FFilesToSearch& OutFilesToSearch, int32& OutNumPathsToSearch)"
  },
  {
    "label": "GetDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDiagnostics(float& OutCumulativeDiscoveryTime, int32& OutNumCachedDirectories, int32& OutNumUncachedDirectories)"
  },
  {
    "label": "WaitForIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForIdle(double EndTimeSeconds)"
  },
  {
    "label": "IsIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdle()"
  },
  {
    "label": "OnInitialSearchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialSearchCompleted()"
  },
  {
    "label": "SetPropertiesAndWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertiesAndWait(TArrayView<FPathExistence> QueryPaths, bool bAddToAllowList, bool bForceRescan, bool bIgnoreDenyListScanFilters)"
  },
  {
    "label": "IsOnAllowList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnAllowList(FStringView LocalAbsPath)"
  },
  {
    "label": "IsOnDenyList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnDenyList(FStringView LocalAbsPath)"
  },
  {
    "label": "IsMonitored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMonitored(FStringView LocalAbsPath)"
  },
  {
    "label": "AddMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMountPoint(const FString& LocalAbsPath, FStringView LongPackageName, bool& bOutAlreadyExisted)"
  },
  {
    "label": "RemoveMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPoint(const FString& LocalAbsPath)"
  },
  {
    "label": "PrioritizeSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeSearchPath(const FString& LocalAbsPath, EPriority Priority)"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(const FString& LocalAbsPath, const UE::AssetDataGather::Private::FSetPathProperties& Properties, bool bConfirmedExists)"
  },
  {
    "label": "OnDirectoryCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryCreated(FStringView LocalAbsPath)"
  },
  {
    "label": "OnFilesCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesCreated(TConstArrayView<FString> LocalAbsPaths)"
  },
  {
    "label": "FindContainingMountPoint()",
    "kind": "Method",
    "detail": "Function (private : FMountDir*)",
    "insertText": "FindContainingMountPoint(FStringView LocalAbsPath)"
  },
  {
    "label": "FindMountPoint()",
    "kind": "Method",
    "detail": "Function (FMountDir*)",
    "insertText": "FindMountPoint(FStringView LocalAbsPath)"
  },
  {
    "label": "FindOrAddMountPoint()",
    "kind": "Method",
    "detail": "Function (FMountDir&)",
    "insertText": "FindOrAddMountPoint(FStringView LocalAbsPath, FStringView LongPackageName)"
  },
  {
    "label": "FindLowerBoundMountPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowerBoundMountPoint(FStringView LocalAbsPath)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickInternal(bool bTickAll)"
  },
  {
    "label": "UpdateAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAll(TArray<FScanDirAndParentData>& OutScanRequests)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool bInIdle)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool bInIdle, double& TickStartTime)"
  },
  {
    "label": "AddDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDiscovered(FStringView DirAbsPath, FStringView DirPackagePath, TConstArrayView<FDiscoveredPathData> SubDirs, TConstArrayView<FDiscoveredPathData> Files)"
  },
  {
    "label": "AddDiscoveredFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDiscoveredFile(FDiscoveredPathData&& File)"
  },
  {
    "label": "GetFileType()",
    "kind": "Method",
    "detail": "Function (EGatherableFileType)",
    "insertText": "GetFileType(FStringView FilePath)"
  },
  {
    "label": "ShouldDirBeReported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDirBeReported(FStringView LongPackageName)"
  },
  {
    "label": "OnFileCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCreated(const FString& LocalPaths)"
  },
  {
    "label": "TrySetDirectoryPropertiesInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryPropertiesInternal(const FString& LocalAbsPath, const UE::AssetDataGather::Private::FSetPathProperties& Properties, bool bConfirmedExists)"
  },
  {
    "label": "AddMountPointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMountPointInternal(const FString& LocalAbsPath, FStringView LongPackageName, bool& bOutAlreadyExisted)"
  },
  {
    "label": "RemoveMountPointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPointInternal(const FString& LocalAbsPath)"
  },
  {
    "label": "FScopedPause()",
    "kind": "Method",
    "detail": "Function (struct FScopedPause {)",
    "insertText": "FScopedPause(const FAssetDataDiscovery& InOwner)"
  },
  {
    "label": "FScopedPause()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedPause()"
  },
  {
    "label": "FDirectoryResult()",
    "kind": "Method",
    "detail": "Function (const FAssetDataDiscovery& Owner ; } ; private : FGathererCriticalSection TreeLock ; FThreadOwnerSection TickOwner ; FGathererCriticalSection ResultsLock ; TArray<FString> LongPackageNamesDenyList ; TArray<FString> MountRelativePathsDenyList ; TSet<FString> DirLongPackageNamesToNotReport ; FRunnableThread* Thread ; bool bAsyncEnabled ; std::atomic<bool> bIsIdle ; std::atomic<bool> bPriorityDirty ; std::atomic<uint32> IsStopped ; std::atomic<uint32> IsPaused ; FThreadSafeCounter NumDirectoriesToScan ; FEventRef PriorityDataUpdated { EEventMode::ManualReset } ; TArray<FString> DiscoveredDirectories ; struct FDirectoryResult {)",
    "insertText": "FDirectoryResult(FStringView InDirAbsPath, TConstArrayView<FDiscoveredPathData> InFiles)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FDirectoryResult> DiscoveredFiles ; TArray<FGatheredPathData> DiscoveredSingleFiles ; double CurrentDiscoveryTime = 0 . ; int32 NumDiscoveredFiles = 0 ; int32 CumulativeDiscoveredFiles = 0 ; float CumulativeDiscoveryTime = 0 . f ; int32 NumCachedDirectories = 0 ; int32 NumUncachedDirectories = 0 ; TArray<TUniquePtr<FMountDir>> MountDirs ; struct FPriorityScanDirData { TRefCountPtr<FScanDir> ScanDir ; FScanDir::FInherited ParentData ; int32 RequestCount = 0 ; bool bReleaseWhenComplete = false ; } ; TArray<FPriorityScanDirData> PriorityScanDirs ; struct FDirToScanData { TRefCountPtr<FScanDir> ScanDir ; FScanDir::FInherited ParentData ; FStringBuilderBase DirLocalAbsPath ; FStringBuilderBase DirLongPackageName ; TArray<FDiscoveredPathData> IteratedSubDirs ; TArray<FDiscoveredPathData> IteratedFiles ; int32 NumIteratedDirs = 0 ; int32 NumIteratedFiles = 0 ; bool bScanned = false ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FDirToScanBuffer> DirToScanBuffers ; FAssetDataDiscoveryCache Cache ; class FMountDir ; class FScanDir ; } ; struct FPreloadSettings { public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsGatherCacheReadEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGatherCacheReadEnabled()"
  },
  {
    "label": "IsGatherCacheWriteEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGatherCacheWriteEnabled()"
  },
  {
    "label": "IsDiscoveryCacheReadEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDiscoveryCacheReadEnabled()"
  },
  {
    "label": "IsDiscoveryCacheWriteEnabled()",
    "kind": "Method",
    "detail": "Function (EFeatureEnabled)",
    "insertText": "IsDiscoveryCacheWriteEnabled()"
  },
  {
    "label": "IsDiscoveryCacheInvalidateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDiscoveryCacheInvalidateEnabled()"
  },
  {
    "label": "IsPreloadCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreloadCache()"
  },
  {
    "label": "IsGatherDependsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGatherDependsData()"
  },
  {
    "label": "IsForceDependsGathering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForceDependsGathering()"
  },
  {
    "label": "GetLegacyCacheFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLegacyCacheFilename()"
  },
  {
    "label": "GetLegacyNonMonolithicCacheDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLegacyNonMonolithicCacheDirectory()"
  },
  {
    "label": "GetCacheBaseFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCacheBaseFilename()"
  },
  {
    "label": "GetAssetRegistryCacheRootFolder()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAssetRegistryCacheRootFolder()"
  },
  {
    "label": "FindShardedCacheFiles()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "FindShardedCacheFiles()"
  },
  {
    "label": "DoesPathContainInvalidCharacters()",
    "kind": "Method",
    "detail": "Function (private : FString CacheBaseFilename ; FString AssetRegistryCacheRootFolder ; bool bForceDependsGathering = false ; bool bGatherDependsData = false ; bool bGatherCacheReadEnabled = false ; bool bGatherCacheWriteEnabled = false ; bool bDiscoveryCacheReadEnabled = false ; EFeatureEnabled DiscoveryCacheWriteEnabled = EFeatureEnabled::Never ; bool bDiscoveryCacheInvalidateEnabled = false ; bool bPreloadCache = false ; bool bInitialized = false ; } ; FPreloadSettings GPreloadSettings ; bool)",
    "insertText": "DoesPathContainInvalidCharacters(const EGatherableFileType FileType, FStringView FilePath)"
  }
]