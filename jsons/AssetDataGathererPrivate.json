[
  {
    "label": "FMountDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMountDir"
  },
  {
    "label": "FScanDirAndParentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanDirAndParentData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSetPathProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetPathProperties"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDiscoveredPathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPathData"
  },
  {
    "label": "FGatheredPathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatheredPathData"
  },
  {
    "label": "FFilesToSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilesToSearch"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeNode"
  },
  {
    "label": "FPathExistence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathExistence"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FScanDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScanDir"
  },
  {
    "label": "FInherited",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInherited"
  },
  {
    "label": "FScanDirAndParentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanDirAndParentData"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FMountDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMountDir"
  },
  {
    "label": "FAssetDataDiscovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataDiscovery"
  },
  {
    "label": "FScopedPause",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedPause"
  },
  {
    "label": "FDirectoryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectoryResult"
  },
  {
    "label": "FPriorityScanDirData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPriorityScanDirData"
  },
  {
    "label": "FDirToScanData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirToScanData"
  },
  {
    "label": "FDirToScanBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirToScanBuffer"
  },
  {
    "label": "FMountDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMountDir"
  },
  {
    "label": "FScanDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScanDir"
  },
  {
    "label": "FPreloadSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreloadSettings"
  },
  {
    "label": "IsVerseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVerseFile(const EGatherableFileType FileType)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath,\n\t\tconst FDateTime& InPackageTimestamp, EGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, FStringView InRelPath,\n\t\tEGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FGatheredPathData(const FDiscoveredPathData& DiscoveredData)"
  },
  {
    "label": "FGatheredPathData()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FGatheredPathData(FDiscoveredPathData&& DiscoveredData)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(FStringView InLocalAbsPath, FStringView InLongPackageName, const FDateTime& InPackageTimestamp,\n\t\tEGatherableFileType InType, bool bInBlocked)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(const FDiscoveredPathData& DiscoveredData)"
  },
  {
    "label": "AddPriorityFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPriorityFile(FGatheredPathData&& FilePath)"
  },
  {
    "label": "AddDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectory(FString&& DirAbsPath, TArray<FGatheredPathData>&& FilePaths)"
  },
  {
    "label": "AddFileAgainAfterTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFileAgainAfterTimeout(FGatheredPathData&& FilePath)"
  },
  {
    "label": "AddFileForLaterRetry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFileForLaterRetry(FGatheredPathData&& FilePath)"
  },
  {
    "label": "RetryLaterRetryFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryLaterRetryFiles()"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront(TArray<FGatheredPathData, AllocatorType>& Out, int32 NumToPop)"
  },
  {
    "label": "PrioritizeDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeDirectory(FStringView DirAbsPath, EPriority Priority)"
  },
  {
    "label": "PrioritizeFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeFile(FStringView FileAbsPathExtOptional, EPriority Priority)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "FTreeNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTreeNode(FStringView InRelPath)"
  },
  {
    "label": "AddFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFiles(TArray<FGatheredPathData>&& FilePaths)"
  },
  {
    "label": "AddFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFile(FGatheredPathData&& FilePath)"
  },
  {
    "label": "PopFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFiles(RangeType& Out, int32& NumToPop)"
  },
  {
    "label": "PopAllFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopAllFiles(RangeType& Out)"
  },
  {
    "label": "PopMatchingDirectFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMatchingDirectFiles(RangeType& Out, FStringView FileAbsPathExtOptional)"
  },
  {
    "label": "PruneEmptyChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneEmptyChild(FStringView SubDirBaseName)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "FindLowerBoundSubDir()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowerBoundSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "FPathExistence()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPathExistence(FStringView InLocalAbsPath)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetModificationTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetModificationTime()"
  },
  {
    "label": "GetLowestExistingPath()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetLowestExistingPath()"
  },
  {
    "label": "LoadExistenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadExistenceData()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(FStringView InRelPath, FInherited& ParentData,\n\t\tconst FSetPathProperties& InProperties, bool bConfirmedExists, FScanDirAndParentData& OutControllingDir)"
  },
  {
    "label": "MarkFileAlreadyScanned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkFileAlreadyScanned(FStringView BaseName)"
  },
  {
    "label": "SetScanResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanResults(FStringView LocalAbsPath, const FInherited& ParentData,\n\t\tTArrayView<FDiscoveredPathData>& InOutSubDirs, TArrayView<FDiscoveredPathData>& InOutFiles)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TArray<FScanDirAndParentData>& OutScanRequests, const FScanDir::FInherited& ParentData)"
  },
  {
    "label": "SetScanInFlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanInFlight(bool bInScanInFlight)"
  },
  {
    "label": "SetScanInFlightInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScanInFlightInvalidated(bool bInValidated)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(bool bMarkDescendents)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete(bool bInIsComplete)"
  },
  {
    "label": "RemoveSubDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "FindLowerBoundSubDir()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowerBoundSubDir(FStringView SubDirBaseName)"
  },
  {
    "label": "ForEachSubDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubDir(const CallbackType& Callback)"
  },
  {
    "label": "ForEachDescendent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachDescendent(const CallbackType& Callback)"
  },
  {
    "label": "FMountDir()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FMountDir(FAssetDataDiscovery& InDiscovery, FStringView LocalAbsPath, FStringView PackagePath)"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(FStringView LocalAbsPath, const FSetPathProperties& InProperties,\n\t\tbool bConfirmedExists, FScanDirAndParentData* OutControllingDir)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TArray<FScanDirAndParentData>& OutScanRequests)"
  },
  {
    "label": "SetHasStartedScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasStartedScanning()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "AddChildMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildMount(FMountDir* ChildMount)"
  },
  {
    "label": "RemoveChildMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildMount(FMountDir* ChildMount)"
  },
  {
    "label": "OnDestroyClearChildMounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyClearChildMounts()"
  },
  {
    "label": "SetParentMount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentMount(FMountDir* ParentMount)"
  },
  {
    "label": "UpdateDenyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDenyList()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(FStringView MountRelPath)"
  },
  {
    "label": "AddChildMountPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildMountPath(FStringView MountRelPath)"
  },
  {
    "label": "RemoveChildMountPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveChildMountPath(FStringView MountRelPath)"
  },
  {
    "label": "FAssetDataDiscovery()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAssetDataDiscovery(const TArray<FString>& InLongPackageNamesDenyList,\n\t\tconst TArray<FString>& InMountRelativePathsDenyList, bool bInAsyncEnabled)"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "GetAndTrimSearchResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndTrimSearchResults(bool& bOutIsComplete, TArray<FString>& OutDiscoveredPaths,\n\t\tFFilesToSearch& OutFilesToSearch, int32& OutNumPathsToSearch)"
  },
  {
    "label": "GetDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDiagnostics(float& OutCumulativeDiscoveryTime, int32& OutNumCachedDirectories,\n\t\tint32& OutNumUncachedDirectories)"
  },
  {
    "label": "WaitForIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForIdle(double EndTimeSeconds)"
  },
  {
    "label": "OnInitialSearchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialSearchCompleted()"
  },
  {
    "label": "SetPropertiesAndWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertiesAndWait(TArrayView<FPathExistence> QueryPaths, bool bAddToAllowList, bool bForceRescan,\n\t\tbool bIgnoreDenyListScanFilters)"
  },
  {
    "label": "AddMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMountPoint(const FString& LocalAbsPath, FStringView LongPackageName, bool& bOutAlreadyExisted)"
  },
  {
    "label": "RemoveMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPoint(const FString& LocalAbsPath)"
  },
  {
    "label": "PrioritizeSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeSearchPath(const FString& LocalAbsPath, EPriority Priority)"
  },
  {
    "label": "TrySetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryProperties(const FString& LocalAbsPath,\n\t\tconst UE::AssetDataGather::Private::FSetPathProperties& Properties, bool bConfirmedExists)"
  },
  {
    "label": "OnDirectoryCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryCreated(FStringView LocalAbsPath)"
  },
  {
    "label": "OnFilesCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesCreated(TConstArrayView<FString> LocalAbsPaths)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickInternal(bool bTickAll)"
  },
  {
    "label": "UpdateAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAll(TArray<FScanDirAndParentData>& OutScanRequests)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool bInIdle)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool bInIdle, double& TickStartTime)"
  },
  {
    "label": "AddDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDiscovered(FStringView DirAbsPath, FStringView DirPackagePath, TConstArrayView<FDiscoveredPathData> SubDirs,\n\t\tTConstArrayView<FDiscoveredPathData> Files)"
  },
  {
    "label": "AddDiscoveredFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDiscoveredFile(FDiscoveredPathData&& File)"
  },
  {
    "label": "GetFileType()",
    "kind": "Method",
    "detail": "Function (EGatherableFileType)",
    "insertText": "GetFileType(FStringView FilePath)"
  },
  {
    "label": "OnFileCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCreated(const FString& LocalPaths)"
  },
  {
    "label": "TrySetDirectoryPropertiesInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySetDirectoryPropertiesInternal(const FString& LocalAbsPath,\n\t\tconst UE::AssetDataGather::Private::FSetPathProperties& Properties, bool bConfirmedExists)"
  },
  {
    "label": "AddMountPointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMountPointInternal(const FString& LocalAbsPath, FStringView LongPackageName, bool& bOutAlreadyExisted)"
  },
  {
    "label": "RemoveMountPointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPointInternal(const FString& LocalAbsPath)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "DoesPathContainInvalidCharacters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPathContainInvalidCharacters(const EGatherableFileType FileType, FStringView FilePath)"
  }
]