[
  {
    "label": "TestStreamCompression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestStreamCompression"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Info"
  },
  {
    "label": "Page",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Page"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "PageHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PageHandle"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "PagedInputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PagedInputStream"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "PagedOutputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PagedOutputStream"
  },
  {
    "label": "bloscCanCompress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bloscCanCompress()"
  },
  {
    "label": "bloscUncompressedSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bloscUncompressedSize(const char* buffer)"
  },
  {
    "label": "bloscCompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bloscCompress(char* compressedBuffer, size_t& compressedBytes,\n    const size_t bufferBytes, const char* uncompressedBuffer, const size_t uncompressedBytes)"
  },
  {
    "label": "bloscCompressedSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bloscCompressedSize(const char* buffer, const size_t uncompressedBytes)"
  },
  {
    "label": "bloscDecompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bloscDecompress(char* uncompressedBuffer, const size_t expectedBytes,\n    const size_t bufferBytes, const char* compressedBuffer)"
  },
  {
    "label": "readHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readHeader(std::istream&)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, bool delayed)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(const std::unique_ptr<char[]>& temp, int pageSize)"
  },
  {
    "label": "decompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decompress(const std::unique_ptr<char[]>& temp)"
  },
  {
    "label": "PageHandle()",
    "kind": "Method",
    "detail": "Function (bytes)",
    "insertText": "PageHandle(const Page::Ptr& page, const int index, const int size)"
  },
  {
    "label": "PagedInputStream()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PagedInputStream(std::istream& is)"
  },
  {
    "label": "createHandle()",
    "kind": "Method",
    "detail": "Function (PageHandle::Ptr)",
    "insertText": "createHandle(std::streamsize n)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read(PageHandle::Ptr& pageHandle, std::streamsize n, bool delayed = true)"
  },
  {
    "label": "PagedOutputStream()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PagedOutputStream(std::ostream& os)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "compressAndWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressAndWrite(const char* buffer, size_t size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t size)"
  }
]