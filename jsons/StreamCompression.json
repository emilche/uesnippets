[
  {
    "label": "TestStreamCompression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestStreamCompression"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Info"
  },
  {
    "label": "bloscCanCompress()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_STREAM_COMPRESSION_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_STREAM_COMPRESSION_HAS_BEEN_INCLUDED # include<openvdb / io / io . h> # include<tbb / spin_mutex . h> # include<memory> # include<string> class TestStreamCompression ; namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace compression { const int BLOSC_MINIMUM_BYTES = 4 8 ; const int BLOSC_PAD_BYTES = 1 2 8 ; bool)",
    "insertText": "bloscCanCompress()"
  },
  {
    "label": "bloscUncompressedSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bloscUncompressedSize(const char* buffer)"
  },
  {
    "label": "bloscCompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bloscCompress(char* compressedBuffer, size_t& compressedBytes, const size_t bufferBytes, const char* uncompressedBuffer, const size_t uncompressedBytes)"
  },
  {
    "label": "bloscCompress()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<char [ ]>)",
    "insertText": "bloscCompress(const char* buffer, const size_t uncompressedBytes, size_t& compressedBytes, const bool resize = true)"
  },
  {
    "label": "bloscCompressedSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bloscCompressedSize(const char* buffer, const size_t uncompressedBytes)"
  },
  {
    "label": "bloscDecompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bloscDecompress(char* uncompressedBuffer, const size_t expectedBytes, const size_t bufferBytes, const char* compressedBuffer)"
  },
  {
    "label": "bloscDecompress()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<char [ ]>)",
    "insertText": "bloscDecompress(const char* buffer, const size_t expectedBytes, const bool resize = true)"
  },
  {
    "label": "Page()",
    "kind": "Method",
    "detail": "Function (const int PageSize = 1 0 2 4* 1 0 2 4 ; class Page { private : struct Info { io::MappedFile::Ptr mappedFile ; SharedPtr<io::StreamMetadata> meta ; std::streamoff filepos ; long compressedBytes ; long uncompressedBytes ; } ; public : using Ptr = std::shared_ptr<Page> ;)",
    "insertText": "Page()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load()"
  },
  {
    "label": "uncompressedBytes()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "uncompressedBytes()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "buffer(const int index)"
  },
  {
    "label": "readHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readHeader(std::istream&)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, bool delayed)"
  },
  {
    "label": "isOutOfCore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOutOfCore()"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "copy(const std::unique_ptr<char[]>& temp, int pageSize)"
  },
  {
    "label": "decompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decompress(const std::unique_ptr<char[]>& temp)"
  },
  {
    "label": "doLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doLoad()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Info> mInfo = std::unique_ptr<)",
    "insertText": "Info(new Info)"
  },
  {
    "label": "PageHandle()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<char [ ]> mData ; tbb::spin_mutex mMutex ; } ; class PageHandle { public : using Ptr = std::unique_ptr<PageHandle> ;)",
    "insertText": "PageHandle(const Page::Ptr& page, const int index, const int size)"
  },
  {
    "label": "page()",
    "kind": "Method",
    "detail": "Function (Page&)",
    "insertText": "page()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "size()"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "copy()"
  },
  {
    "label": "PagedInputStream()",
    "kind": "Method",
    "detail": "Function (} protected : class::TestStreamCompression ; private : Page::Ptr mPage ; int mIndex = - 1 ; int mSize = 0 ; } ; class PagedInputStream { public : using Ptr = std::shared_ptr<PagedInputStream> ;)",
    "insertText": "PagedInputStream()"
  },
  {
    "label": "PagedInputStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PagedInputStream(std::istream& is)"
  },
  {
    "label": "setSizeOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSizeOnly(bool sizeOnly)"
  },
  {
    "label": "sizeOnly()",
    "kind": "Method",
    "detail": "Function (mSizeOnly = sizeOnly ; } bool)",
    "insertText": "sizeOnly()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mIs)"
  },
  {
    "label": "createHandle()",
    "kind": "Method",
    "detail": "Function (mIs =& is ; } PageHandle::Ptr)",
    "insertText": "createHandle(std::streamsize n)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read(PageHandle::Ptr& pageHandle, std::streamsize n, bool delayed = true)"
  },
  {
    "label": "PagedOutputStream()",
    "kind": "Method",
    "detail": "Function (private : int mByteIndex = 0 ; int mUncompressedBytes = 0 ; std::istream* mIs = nullptr ; Page::Ptr mPage ; bool mSizeOnly = false ; } ; class PagedOutputStream { public : using Ptr = std::shared_ptr<PagedOutputStream> ;)",
    "insertText": "PagedOutputStream()"
  },
  {
    "label": "PagedOutputStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PagedOutputStream(std::ostream& os)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mOs)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (mOs =& os ; } PagedOutputStream&)",
    "insertText": "write(const char* str, std::streamsize n)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "compressAndWrite()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "compressAndWrite(const char* buffer, size_t size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t size)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<char [ ]> mData = std::unique_ptr<)",
    "insertText": "char(new char[PageSize])"
  }
]