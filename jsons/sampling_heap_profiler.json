[
  {
    "label": "HeapProfilerControllerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeapProfilerControllerTest"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SamplingHeapProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingHeapProfiler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "heap_profiling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "heap_profiling"
  },
  {
    "label": "NoDestructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoDestructor"
  },
  {
    "label": "SamplingHeapProfilerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingHeapProfilerTest"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SAMPLING_HEAP_PROFILER_SAMPLING_HEAP_PROFILER_H_ # define BASE_SAMPLING_HEAP_PROFILER_SAMPLING_HEAP_PROFILER_H_ # include<atomic> # include<unordered_map> # include<unordered_set> # include<vector> # include \" base / base_export . h \" # include \" base / no_destructor . h \" # include \" base / sampling_heap_profiler / poisson_allocation_sampler . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" # include \" base / threading / thread_id_name_manager . h \" namespace heap_profiling { class HeapProfilerControllerTest ; } namespace base { class BASE_EXPORT SamplingHeapProfiler : private PoissonAllocationSampler::SamplesObserver,public base::ThreadIdNameManager::Observer { public : class BASE_EXPORT Sample { public :)",
    "insertText": "Sample(const Sample&)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Sample()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (size_t size ; size_t total ; PoissonAllocationSampler::AllocatorType allocator ; const char* context = nullptr ; const char* thread_name = nullptr ; std::vector<void*> stack ;)",
    "insertText": "Sample(size_t size, size_t total, uint32_t ordinal)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (private : class SamplingHeapProfiler ; uint32_t ordinal ; } ; enum class StackUnwinder { DEPRECATED_kNotChecked,kDefault,kCFIBacktrace,kUnavailable,kFramePointers,kMaxValue = kFramePointers,} ; uint32_t)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetSamplingInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplingInterval(size_t sampling_interval_bytes)"
  },
  {
    "label": "SetRecordThreadNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordThreadNames(bool value)"
  },
  {
    "label": "CachedThreadName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "CachedThreadName()"
  },
  {
    "label": "GetSamples()",
    "kind": "Method",
    "detail": "Function (std::vector<Sample>)",
    "insertText": "GetSamples(uint32_t profile_id)"
  },
  {
    "label": "GetStrings()",
    "kind": "Method",
    "detail": "Function (std::vector<const char*>)",
    "insertText": "GetStrings()"
  },
  {
    "label": "CaptureStackTrace()",
    "kind": "Method",
    "detail": "Function (void**)",
    "insertText": "CaptureStackTrace(void** frames, size_t max_entries, size_t* count)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SamplingHeapProfiler*)",
    "insertText": "Get()"
  },
  {
    "label": "SamplingHeapProfiler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SamplingHeapProfiler(const SamplingHeapProfiler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SamplingHeapProfiler&)",
    "insertText": "operator(const SamplingHeapProfiler&)"
  },
  {
    "label": "OnThreadNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadNameChanged(const char* name)"
  },
  {
    "label": "SamplingHeapProfiler()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SamplingHeapProfiler()"
  },
  {
    "label": "SampleAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleAdded(void* address, size_t size, size_t total, PoissonAllocationSampler::AllocatorType type, const char* context)"
  },
  {
    "label": "SampleRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleRemoved(void* address)"
  },
  {
    "label": "CaptureNativeStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureNativeStack(const char* context, Sample* sample)"
  },
  {
    "label": "RecordString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "RecordString(const char* string) EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ClearSamplesForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSamplesForTesting()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock mutex_ ; std::unordered_map<void*,Sample> samples_)",
    "insertText": "GUARDED_BY(mutex_)"
  }
]