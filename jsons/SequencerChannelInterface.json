[
  {
    "label": "CLegacyCurveModelCreatable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CLegacyCurveModelCreatable"
  },
  {
    "label": "CLegacyKeyEditorCreatable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CLegacyKeyEditorCreatable"
  },
  {
    "label": "TSequencerChannelInterfaceCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerChannelInterfaceCommon"
  },
  {
    "label": "TSequencerChannelInterfaceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerChannelInterfaceBase"
  },
  {
    "label": "TSequencerChannelInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerChannelInterface"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ISequencerChannelInterface . h \" # include \" SequencerChannelTraits . h \" # include \" MovieSceneSection . h \" # include \" IKeyArea . h \" # include \" CurveModel . h \" namespace Sequencer { struct CLegacyCurveModelCreatable { template<T> auto)",
    "insertText": "Requires() -> decltype(CreateCurveEditorModel(*((TMovieSceneChannelHandle<T>*)0), (UMovieSceneSection*)nullptr, TSharedPtr<ISequencer>().ToSharedRef()))"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} ; struct CLegacyKeyEditorCreatable { template<T> auto)",
    "insertText": "Requires() -> decltype(CreateKeyEditor( *((TMovieSceneChannelHandle<T>*)nullptr), (UMovieSceneSection*)nullptr, FGuid(), TWeakPtr<FTrackInstancePropertyBindings>(), TWeakPtr<ISequencer>() ))"
  },
  {
    "label": "CopyKeys_Raw()",
    "kind": "Method",
    "detail": "Function (} } template<ChannelType> struct TSequencerChannelInterfaceCommon : ISequencerChannelInterface { void)",
    "insertText": "CopyKeys_Raw(FMovieSceneChannel* InChannel, const UMovieSceneSection* Section, FName KeyAreaName, FMovieSceneClipboardBuilder& ClipboardBuilder, TArrayView<const FKeyHandle> KeyMask)"
  },
  {
    "label": "CopyKeys()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ;)",
    "insertText": "CopyKeys(static_cast<ChannelType*>(InChannel), Section, KeyAreaName, ClipboardBuilder, KeyMask)"
  },
  {
    "label": "PasteKeys_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PasteKeys_Raw(FMovieSceneChannel* InChannel, UMovieSceneSection* Section, const FMovieSceneClipboardKeyTrack& KeyTrack, const FMovieSceneClipboardEnvironment& SrcEnvironment, const FSequencerPasteEnvironment& DstEnvironment, TArray<FKeyHandle>& OutPastedKeys)"
  },
  {
    "label": "PasteKeys()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ;)",
    "insertText": "PasteKeys(static_cast<ChannelType*>(InChannel), Section, KeyTrack, SrcEnvironment, DstEnvironment, OutPastedKeys)"
  },
  {
    "label": "GetKeyStruct_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FStructOnScope>)",
    "insertText": "GetKeyStruct_Raw(FMovieSceneChannelHandle InChannel, FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyStruct()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "GetKeyStruct(InChannel.Cast<ChannelType>(), KeyHandle)"
  },
  {
    "label": "CanCreateKeyEditor_Raw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCreateKeyEditor_Raw(const FMovieSceneChannel* InChannel)"
  },
  {
    "label": "CanCreateKeyEditor()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "CanCreateKeyEditor(static_cast<const ChannelType*>(InChannel))"
  },
  {
    "label": "ExtendKeyMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendKeyMenu_Raw(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, TArrayView<const FExtendKeyMenuParams> ChannelsAndHandles, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; TArray<TExtendKeyMenuParams<ChannelType>> TypedChannels ;)",
    "insertText": "for(const FExtendKeyMenuParams& Ptr : ChannelsAndHandles)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (TExtendKeyMenuParams<ChannelType> TypedChannelAndHandles ; TypedChannelAndHandles . Section = Ptr . Section ; TypedChannelAndHandles . WeakOwner = Ptr . WeakOwner ; TypedChannelAndHandles . Handles = Ptr . Handles ; TypedChannelAndHandles . Channel = Ptr . Channel . Cast<)",
    "insertText": "ChannelType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypedChannels .)",
    "insertText": "Add(MoveTemp(TypedChannelAndHandles))"
  },
  {
    "label": "ExtendKeyMenu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExtendKeyMenu(MenuBuilder, MenuExtender, MoveTemp(TypedChannels), InSequencer)"
  },
  {
    "label": "ExtendSectionMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendSectionMenu_Raw(FMenuBuilder& MenuBuilder , TSharedPtr<FExtender> InMenuExtender , TArrayView<const FMovieSceneChannelHandle> InChannels , const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections , TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; TArray<TMovieSceneChannelHandle<ChannelType>> TypedChannels ;)",
    "insertText": "for(const FMovieSceneChannelHandle& RawHandle : InChannels)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypedChannels .)",
    "insertText": "Add(RawHandle.Cast<ChannelType>())"
  },
  {
    "label": "ExtendSectionMenu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExtendSectionMenu(MenuBuilder, InMenuExtender, MoveTemp(TypedChannels), InWeakSections, InWeakSequencer)"
  },
  {
    "label": "ExtendSidebarMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISidebarChannelExtension>)",
    "insertText": "ExtendSidebarMenu_Raw(FMenuBuilder& MenuBuilder , TSharedPtr<FExtender> InMenuExtender , TArrayView<const FMovieSceneChannelHandle> InChannels , const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections , TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "ExtendSidebarMenu()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ExtendSidebarMenu(MenuBuilder, InMenuExtender, MoveTemp(TypedChannels), InWeakSections, InWeakSequencer)"
  },
  {
    "label": "DrawKeys_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawKeys_Raw(FMovieSceneChannel* InChannel, TArrayView<const FKeyHandle> InKeyHandles, const UMovieSceneSection* InOwner, TArrayView<FKeyDrawParams> OutKeyDrawParams)"
  },
  {
    "label": "DrawKeys()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ;)",
    "insertText": "DrawKeys(static_cast<ChannelType*>(InChannel), InKeyHandles, InOwner, OutKeyDrawParams)"
  },
  {
    "label": "DrawExtra_Raw()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DrawExtra_Raw(FMovieSceneChannel* InChannel, const UMovieSceneSection* InOwner, const FSequencerChannelPaintArgs& PaintArgs, int32 LayerId)"
  },
  {
    "label": "DrawExtra()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "DrawExtra(static_cast<ChannelType*>(InChannel), InOwner, PaintArgs, LayerId)"
  },
  {
    "label": "SupportsCurveEditorModels_Raw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsCurveEditorModels_Raw(const FMovieSceneChannelHandle& InChannel)"
  },
  {
    "label": "SupportsCurveEditorModels()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "SupportsCurveEditorModels(InChannel.Cast<ChannelType>())"
  },
  {
    "label": "ShouldShowCurve_Raw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowCurve_Raw(const FMovieSceneChannel* Channel, UMovieSceneSection* InSection)"
  },
  {
    "label": "ShouldShowCurve()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "ShouldShowCurve(static_cast<const ChannelType*>(Channel), InSection)"
  },
  {
    "label": "CreateCurveEditorModel_Raw()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FCurveModel>)",
    "insertText": "CreateCurveEditorModel_Raw(const FMovieSceneChannelHandle& InChannel, const UE::Sequencer::FCreateCurveEditorModelParams& Params)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; if)",
    "insertText": "constexpr(TModels_V<CLegacyCurveModelCreatable, ChannelType>)"
  },
  {
    "label": "CreateCurveEditorModel()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FCurveModel> Result =)",
    "insertText": "CreateCurveEditorModel(InChannel.Cast<ChannelType>(), Params.OwningSection, Params.Sequencer)"
  },
  {
    "label": "CreateChannelModel_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<UE::Sequencer::FChannelModel>)",
    "insertText": "CreateChannelModel_Raw(const FMovieSceneChannelHandle& InChannelHandle, const UE::Sequencer::FSectionModel& InSection, FName InChannelName)"
  },
  {
    "label": "CreateChannelModel()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "CreateChannelModel(InChannelHandle.Cast<ChannelType>(), InSection, InChannelName)"
  },
  {
    "label": "CreateChannelView_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<UE::Sequencer::STrackAreaLaneView>)",
    "insertText": "CreateChannelView_Raw(const FMovieSceneChannelHandle& InChannelHandle, TWeakPtr<UE::Sequencer::FChannelModel> InWeakModel, const UE::Sequencer::FCreateTrackLaneViewParams& Parameters)"
  },
  {
    "label": "CreateChannelView()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "CreateChannelView(InChannelHandle.Cast<ChannelType>(), InWeakModel, Parameters)"
  },
  {
    "label": "CreateKeyEditor_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "CreateKeyEditor_Raw(const FMovieSceneChannelHandle& Channel, const UE::Sequencer::FCreateKeyEditorParams& Params)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; if)",
    "insertText": "constexpr(TModels_V<CLegacyKeyEditorCreatable, ChannelType>)"
  },
  {
    "label": "CreateKeyEditor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateKeyEditor(Channel.Cast<ChannelType>(), Params)"
  },
  {
    "label": "AddOrUpdateKey_Raw()",
    "kind": "Method",
    "detail": "Function (} } ; template<ChannelType,bool HasExtendedData> struct TSequencerChannelInterfaceBase ; template<ChannelType> struct TSequencerChannelInterfaceBase<ChannelType,false> : TSequencerChannelInterfaceCommon<ChannelType> { FKeyHandle)",
    "insertText": "AddOrUpdateKey_Raw(FMovieSceneChannel* InChannel, UMovieSceneSection* SectionToKey, const void* ExtendedEditorData, FFrameNumber InTime, ISequencer& Sequencer, const FGuid& ObjectBindingID, FTrackInstancePropertyBindings* PropertyBindings)"
  },
  {
    "label": "AddOrUpdateKey()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ; return)",
    "insertText": "AddOrUpdateKey(static_cast<ChannelType*>(InChannel), SectionToKey, InTime, Sequencer, ObjectBindingID, PropertyBindings)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (using namespace Sequencer ;)",
    "insertText": "check(ExtendedEditorData)"
  },
  {
    "label": "ExtendedEditorDataType()",
    "kind": "Method",
    "detail": "Function (const auto* TypedEditorData = static_cast<const)",
    "insertText": "ExtendedEditorDataType(ExtendedEditorData)"
  }
]