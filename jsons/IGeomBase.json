[
  {
    "label": "INFO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INFO"
  },
  {
    "label": "IGeomBaseSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGeomBaseSchema"
  },
  {
    "label": "IGeomBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGeomBase"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "IGeomBaseSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_IGeometrySchema_h # define Alembic_AbcGeom_IGeometrySchema_h # include<Alembic / Abc / ISchema . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / IGeomParam . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { template<class INFO> class IGeomBaseSchema : public Abc::ISchema<INFO> { public : typedef INFO info_type ;)",
    "insertText": "IGeomBaseSchema()"
  },
  {
    "label": "IGeomBaseSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBaseSchema(const ICompoundProperty & iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument() ) : Abc::ISchema<info_type>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "IGeomBaseSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBaseSchema(const ICompoundProperty & iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<info_type>( iProp, iArg0, iArg1)"
  },
  {
    "label": "IGeomBaseSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBaseSchema(const ICompoundProperty & iProp, Abc::WrapExistingFlag iFlag, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<info_type>( iProp, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IGeomBaseSchema::init()\")"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (Abc::Arguments args ; iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "getPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::CompoundPropertyReaderPtr _this = this ->)",
    "insertText": "getPtr()"
  },
  {
    "label": "IBox3dProperty()",
    "kind": "Method",
    "detail": "Function (m_selfBoundsProperty =)",
    "insertText": "IBox3dProperty(_this, \".selfBnds\", iArg0, iArg1)"
  },
  {
    "label": "IBox3dProperty()",
    "kind": "Method",
    "detail": "Function (m_childBoundsProperty =)",
    "insertText": "IBox3dProperty(_this, \".childBnds\", iArg0, iArg1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->getPropertyHeader( \".arbGeomParams\" ) != NULL)"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (m_arbGeomParams =)",
    "insertText": "ICompoundProperty(_this, \".arbGeomParams\", args.getErrorHandlerPolicy())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->getPropertyHeader( \".userProperties\" ) != NULL)"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (m_userProperties =)",
    "insertText": "ICompoundProperty(_this, \".userProperties\", args.getErrorHandlerPolicy())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "getSelfBoundsProperty()",
    "kind": "Method",
    "detail": "Function (} Abc::IBox3dProperty)",
    "insertText": "getSelfBoundsProperty()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (} Abc::Box3d)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "IGeomBase()",
    "kind": "Method",
    "detail": "Function (} protected : class IGeomBase ; Abc::Box3d m_selfBounds ; } ; public :)",
    "insertText": "IGeomBase()"
  },
  {
    "label": "IGeomBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBase(const ICompoundProperty &iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<GeomBaseSchemaInfo>( iParent, iName, kNoMatching)"
  },
  {
    "label": "IGeomBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBase(const ICompoundProperty & iThis, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<GeomBaseSchemaInfo>( iThis, kNoMatching)"
  },
  {
    "label": "IGeomBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IGeomBase(const ICompoundProperty & iThis, Abc::WrapExistingFlag iFlag, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<GeomBaseSchemaInfo>( iThis, kNoMatching)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "get(Sample &oSample, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IGeomBase::get()\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_selfBoundsProperty .)",
    "insertText": "get(oSample.m_selfBounds, iSS)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} Sample)",
    "insertText": "getValue(const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Sample smp ;)",
    "insertText": "get(smp, iSS)"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(IGeomBase::valid())"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "matches(const AbcA::MetaData &iMetaData, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "matches(const AbcA::PropertyHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  }
]