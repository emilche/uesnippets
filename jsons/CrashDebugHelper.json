[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "EProcessorArchitecture",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProcessorArchitecture"
  },
  {
    "label": "FCrashModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashModuleInfo"
  },
  {
    "label": "FCrashThreadInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashThreadInfo"
  },
  {
    "label": "FCrashExceptionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashExceptionInfo"
  },
  {
    "label": "FCrashSystemInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashSystemInfo"
  },
  {
    "label": "CRASHDEBUGHELPER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CRASHDEBUGHELPER_API"
  },
  {
    "label": "FCrashDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashDebugInfo"
  },
  {
    "label": "GenerateReport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" class FArchive ; enum EProcessorArchitecture { PA_UNKNOWN,PA_ARM,PA_X86,PA_X64,} ; class FCrashModuleInfo { public : FString Report ; FString Name ; FString Extension ; uint64 BaseOfImage = 0 ; uint32 SizeOfImage = 0 ; uint16 Major = 0 ; uint16 Minor = 0 ; uint16 Patch = 0 ; uint16 Revision = 0 ; } ; class FCrashThreadInfo { public : FString Report ; uint32 ThreadId = 0 ; uint32 SuspendCount = 0 ; TArray<uint64> CallStack ; } ; class FCrashExceptionInfo { public : FString Report ; uint32 ProcessId = 0 ; uint32 ThreadId = 0 ; uint32 Code = 0 ; FString ExceptionString ; TArray<FString> CallStackString ; TArray<FString> PortableCallStackString ; } ; class FCrashSystemInfo { public : FString Report ; EProcessorArchitecture ProcessorArchitecture = PA_UNKNOWN ; uint32 ProcessorCount = 0 ; uint16 OSMajor = 0 ; uint16 OSMinor = 0 ; uint16 OSBuild = 0 ; uint16 OSRevision = 0 ; } ; class FCrashInfo { public : enum { INVALID_CHANGELIST = - 1,} ; FString Report ; FString DepotName ; FString EngineVersion ; FString BuildVersion ; int32 BuiltFromCL = INVALID_CHANGELIST ; FString LabelName ; FString ExecutablesPath ; FString SymbolsPath ; FString SourceFile ; uint32 SourceLineNumber = 0 ; TArray<FString> SourceContext ; TArray<FString> ModuleNames ; FCrashSystemInfo SystemInfo ; FCrashExceptionInfo Exception ; TArray<FCrashThreadInfo> Threads ; TArray<FCrashModuleInfo> Modules ; FString PlatformName ; FString PlatformVariantName ; void)",
    "insertText": "GenerateReport(const FString& DiagnosticsPath)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(FString Line)"
  },
  {
    "label": "GetProcessorArchitecture()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR*)",
    "insertText": "GetProcessorArchitecture(EProcessorArchitecture PA)"
  },
  {
    "label": "WriteLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLine(FArchive* ReportFile, const TCHAR* Line = nullptr)"
  },
  {
    "label": "WriteLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLine(FArchive* ReportFile, const FString& Line)"
  },
  {
    "label": "ICrashDebugHelper()",
    "kind": "Method",
    "detail": "Function (} ; struct FCrashDebugInfo { FString CrashDumpName ; int32 EngineVersion ; FString PlatformName ; FString SourceControlLabel ; } ; class ICrashDebugHelper { public : ~)",
    "insertText": "ICrashDebugHelper()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "ParseCrashDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCrashDump(const FString& InCrashDumpName, FCrashDebugInfo& OutCrashDebugInfo)"
  },
  {
    "label": "ReadSourceFile()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ReadSourceFile(TArray<FString>& OutStrings)"
  }
]