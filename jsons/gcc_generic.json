[
  {
    "label": "machine_load_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store"
  },
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "machine_load_store_seq_cst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_seq_cst"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_gcc_generic_H)"
  },
  {
    "label": "__BIG_ENDIAN__()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_gcc_generic_H # include<stdint . h> # include<unistd . h> # define __TBB_WORDSIZE __SIZEOF_POINTER__ # if __TBB_GCC_64BIT_ATOMIC_BUILTINS_BROKEN # define __TBB_64BIT_ATOMICS 0 # endif # if __ANDROID__&& __TBB_generic_arch # define __TBB_CPU_CTL_ENV_PRESENT 0 # endif # if)",
    "insertText": "__BIG_ENDIAN__(defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_BIG_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_BIG #elif __LITTLE_ENDIAN__ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_LITTLE_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE #elif defined(__BYTE_ORDER__) #define __TBB_ENDIANNESS __TBB_ENDIAN_UNSUPPORTED #else #define __TBB_ENDIANNESS __TBB_ENDIAN_DETECT #endif #if __TBB_GCC_VERSION < 40700 #define __TBB_acquire_consistency_helper() __sync_synchronize() #define __TBB_release_consistency_helper() __sync_synchronize() #define __TBB_full_memory_fence() __sync_synchronize() #define __TBB_control_consistency_helper() __sync_synchronize() #define __TBB_MACHINE_DEFINE_ATOMICS(S,T) \\ inline T __TBB_machine_cmpswp##S( volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "__sync_val_compare_and_swap()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__sync_val_compare_and_swap(reinterpret_cast<volatile T *>(ptr),comparand,value)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (\\ } \\ T __TBB_machine_fetchadd # #)",
    "insertText": "S(volatile void *ptr, T value)"
  },
  {
    "label": "__sync_fetch_and_add()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__sync_fetch_and_add(reinterpret_cast<volatile T *>(ptr),value)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (\\ } # define __TBB_USE_GENERIC_FETCH_STORE 1 # else # define)",
    "insertText": "__TBB_compiler_fence() __asm__ __volatile__(\"\": : :\"memory\") #define __TBB_acquire_consistency_helper() __TBB_compiler_fence()"
  },
  {
    "label": "__atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_thread_fence(__ATOMIC_ACQUIRE)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_compiler_fence() #define __TBB_release_consistency_helper() __TBB_compiler_fence()"
  },
  {
    "label": "__atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_thread_fence(__ATOMIC_RELEASE)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_compiler_fence() #define __TBB_full_memory_fence() __atomic_thread_fence(__ATOMIC_SEQ_CST) #define __TBB_control_consistency_helper() __TBB_acquire_consistency_helper() #define __TBB_MACHINE_DEFINE_ATOMICS(S,T) \\ inline T __TBB_machine_cmpswp##S( volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "__atomic_fetch_add()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__atomic_fetch_add(reinterpret_cast<volatile T *>(ptr), value, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "__atomic_exchange_n()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "__atomic_exchange_n(reinterpret_cast<volatile T *>(ptr), value, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (\\ } # endif)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(1,int8_t) __TBB_MACHINE_DEFINE_ATOMICS(2,int16_t) __TBB_MACHINE_DEFINE_ATOMICS(4,int32_t) __TBB_MACHINE_DEFINE_ATOMICS(8,int64_t)"
  },
  {
    "label": "__TBB_machine_or()",
    "kind": "Method",
    "detail": "Function (typedef __TBB_atomic __TBB_Flag __TBB_atomic_flag ; # if __TBB_GCC_VERSION<4 0 7 0 0 # define __TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE 1 # define __TBB_USE_GENERIC_RELAXED_LOAD_STORE 1 # define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE 1 void)",
    "insertText": "__TBB_machine_or(volatile void *ptr, uintptr_t addend)"
  },
  {
    "label": "__sync_fetch_and_or()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__sync_fetch_and_or(reinterpret_cast<volatile uintptr_t *>(ptr),addend)"
  },
  {
    "label": "__TBB_machine_and()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_and(volatile void *ptr, uintptr_t addend)"
  },
  {
    "label": "__sync_fetch_and_and()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__sync_fetch_and_and(reinterpret_cast<volatile uintptr_t *>(ptr),addend)"
  },
  {
    "label": "__TBB_machine_try_lock_byte()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "__TBB_machine_try_lock_byte(__TBB_atomic_flag &flag)"
  },
  {
    "label": "__TBB_machine_unlock_byte()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_unlock_byte(__TBB_atomic_flag &flag)"
  },
  {
    "label": "__sync_lock_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__sync_lock_release(&flag)"
  },
  {
    "label": "__atomic_fetch_or()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_fetch_or(reinterpret_cast<volatile uintptr_t *>(ptr),addend,__ATOMIC_SEQ_CST)"
  },
  {
    "label": "__atomic_fetch_and()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_fetch_and(reinterpret_cast<volatile uintptr_t *>(ptr),addend,__ATOMIC_SEQ_CST)"
  },
  {
    "label": "__atomic_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_clear(&flag,__ATOMIC_RELEASE)"
  },
  {
    "label": "__TBB_machine_atomic_load()",
    "kind": "Method",
    "detail": "Function (} namespace tbb { namespace internal { template<T,int MemOrder> T)",
    "insertText": "__TBB_machine_atomic_load(const volatile T& location)"
  },
  {
    "label": "__atomic_load_n()",
    "kind": "Method",
    "detail": "Function (T value =)",
    "insertText": "__atomic_load_n(&location, MemOrder)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n(&location, value, MemOrder)"
  },
  {
    "label": "load_with_acquire()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t S> struct machine_load_store { T)",
    "insertText": "load_with_acquire(const volatile T& location)"
  },
  {
    "label": "store_with_release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_with_release(volatile T &location, T value)"
  },
  {
    "label": "__ATOMIC_RELEASE()",
    "kind": "Method",
    "detail": "Function (__TBB_machine_atomic_store<T,)",
    "insertText": "__ATOMIC_RELEASE(location, value)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t S> struct machine_load_store_relaxed { T)",
    "insertText": "load(const volatile T& location)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store(volatile T& location, T value)"
  },
  {
    "label": "__ATOMIC_RELAXED()",
    "kind": "Method",
    "detail": "Function (__TBB_machine_atomic_store<T,)",
    "insertText": "__ATOMIC_RELAXED(location, value)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store(volatile T &location, T value)"
  },
  {
    "label": "__ATOMIC_SEQ_CST()",
    "kind": "Method",
    "detail": "Function (__TBB_machine_atomic_store<T,)",
    "insertText": "__ATOMIC_SEQ_CST(location, value)"
  },
  {
    "label": "__TBB_AtomicOR()",
    "kind": "Method",
    "detail": "Function (} } ; } } # endif # define)",
    "insertText": "__TBB_AtomicOR(P,V) __TBB_machine_or(P,V) #define __TBB_AtomicAND(P,V) __TBB_machine_and(P,V)"
  },
  {
    "label": "clz()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace gcc_builtins { int)",
    "insertText": "clz(unsigned int x)"
  },
  {
    "label": "clz()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "clz(unsigned long int x)"
  },
  {
    "label": "clz()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "clz(unsigned long long int x)"
  },
  {
    "label": "__TBB_machine_lg()",
    "kind": "Method",
    "detail": "Function (} } } } intptr_t)",
    "insertText": "__TBB_machine_lg(uintptr_t x)"
  }
]