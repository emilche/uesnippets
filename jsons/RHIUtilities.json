[
  {
    "label": "FTextureRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureRWBuffer"
  },
  {
    "label": "FRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBuffer"
  },
  {
    "label": "FTextureReadBuffer2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureReadBuffer2D"
  },
  {
    "label": "FReadBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadBuffer"
  },
  {
    "label": "FRWBufferStructured",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBufferStructured"
  },
  {
    "label": "FByteAddressBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FByteAddressBuffer"
  },
  {
    "label": "FRWByteAddressBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWByteAddressBuffer"
  },
  {
    "label": "FDynamicReadBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicReadBuffer"
  },
  {
    "label": "FDumpTransitionsHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDumpTransitionsHelper"
  },
  {
    "label": "GetBlockCompressedFormatUAVAliasFormat()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Logging / LogMacros . h \" # include \" HAL / IConsoleManager . h \" # include \" RHIDefinitions . h \" # include \" RHICommandList . h \" # include \" Tasks / Task . h \" EPixelFormat)",
    "insertText": "GetBlockCompressedFormatUAVAliasFormat(EPixelFormat Format)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess)",
    "insertText": "RHIGetDefaultResourceState(EBufferUsageFlags InUsage, bool bInHasInitialData)"
  },
  {
    "label": "FTextureRWBuffer()",
    "kind": "Method",
    "detail": "Function (struct FTextureRWBuffer { FTextureRHIRef Buffer ; FUnorderedAccessViewRHIRef UAV ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes = 0 ;)",
    "insertText": "FTextureRWBuffer()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Initialize2D()",
    "kind": "Method",
    "detail": "Function (} ETextureCreateFlags DefaultTextureInitFlag = TexCreate_ShaderResource | TexCreate_UAV ; void)",
    "insertText": "Initialize2D(const TCHAR* InDebugName, uint32 BytesPerElement, uint32 SizeX, uint32 SizeY, EPixelFormat Format, ETextureCreateFlags Flags = DefaultTextureInitFlag)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (NumBytes = SizeX* SizeY* BytesPerElement ; const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(InDebugName, SizeX, SizeY, Format) .SetFlags(Flags)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList =)",
    "insertText": "Get()"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "RHICreateTexture(Desc)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (UAV = RHICmdList .)",
    "insertText": "CreateUnorderedAccessView(Buffer, 0)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (SRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(Buffer, 0)"
  },
  {
    "label": "Initialize3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize3D(const TCHAR* InDebugName, uint32 BytesPerElement, uint32 SizeX, uint32 SizeY, uint32 SizeZ, EPixelFormat Format, ETextureCreateFlags Flags = DefaultTextureInitFlag)"
  },
  {
    "label": "Create3D()",
    "kind": "Method",
    "detail": "Function (NumBytes = SizeX* SizeY* SizeZ* BytesPerElement ; const FRHITextureCreateDesc Desc =)",
    "insertText": "Create3D(InDebugName, SizeX, SizeY, SizeZ, Format) .SetFlags(Flags)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (NumBytes = 0 ; Buffer .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "FRWBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRWBuffer { FBufferRHIRef Buffer ; FUnorderedAccessViewRHIRef UAV ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes ; FName ClassName = NAME_None ; FName OwnerName = NAME_None ;)",
    "insertText": "FRWBuffer() : NumBytes(0)"
  },
  {
    "label": "FRWBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRWBuffer(FRWBuffer&& Other) : Buffer(MoveTemp(Other.Buffer)) , UAV(MoveTemp(Other.UAV)) , SRV(MoveTemp(Other.SRV)) , NumBytes(Other.NumBytes)"
  },
  {
    "label": "FRWBuffer()",
    "kind": "Method",
    "detail": "Function (Other . NumBytes = 0 ; })",
    "insertText": "FRWBuffer(const FRWBuffer& Other) : Buffer(Other.Buffer) , UAV(Other.UAV) , SRV(Other.SRV) , NumBytes(Other.NumBytes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FRWBuffer&)",
    "insertText": "operator(FRWBuffer&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "MoveTemp(Other.Buffer)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (UAV =)",
    "insertText": "MoveTemp(Other.UAV)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SRV =)",
    "insertText": "MoveTemp(Other.SRV)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NumBytes = Other . NumBytes ; Other . NumBytes = 0 ; return* this ; } FRWBuffer&)",
    "insertText": "operator(const FRWBuffer& Other)"
  },
  {
    "label": "FRWBuffer()",
    "kind": "Method",
    "detail": "Function (Buffer = Other . Buffer ; UAV = Other . UAV ; SRV = Other . SRV ; NumBytes = Other . NumBytes ; return* this ; } ~)",
    "insertText": "FRWBuffer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* InDebugName, uint32 BytesPerElement, uint32 NumElements, EPixelFormat Format, ERHIAccess InResourceState, EBufferUsageFlags AdditionalUsage = BUF_None, FResourceArrayUploadInterface* InResourceArray = nullptr)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (NumBytes = BytesPerElement* NumElements ; FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(InDebugName)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (CreateInfo . ClassName = ClassName ; CreateInfo . OwnerName = OwnerName ; CreateInfo . ResourceArray = InResourceArray ; Buffer = RHICmdList .)",
    "insertText": "CreateBuffer(NumBytes, BUF_VertexBuffer | BUF_UnorderedAccess | BUF_ShaderResource | AdditionalUsage, 0, InResourceState, CreateInfo)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (UAV = RHICmdList .)",
    "insertText": "CreateUnorderedAccessView(Buffer, UE_PIXELFORMAT_TO_UINT8(Format))"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (SRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(Buffer, BytesPerElement, UE_PIXELFORMAT_TO_UINT8(Format))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* InDebugName, uint32 BytesPerElement, uint32 NumElements, EPixelFormat Format, EBufferUsageFlags AdditionalUsage = BUF_None, FResourceArrayUploadInterface* InResourceArray = nullptr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RHICmdList, InDebugName, BytesPerElement, NumElements, Format, ERHIAccess::UAVCompute, AdditionalUsage, InResourceArray)"
  },
  {
    "label": "FTextureReadBuffer2D()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTextureReadBuffer2D { FTextureRHIRef Buffer ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes ;)",
    "insertText": "FTextureReadBuffer2D() : NumBytes(0)"
  },
  {
    "label": "FTextureReadBuffer2D()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTextureReadBuffer2D()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} const ETextureCreateFlags DefaultTextureInitFlag = ETextureCreateFlags::ShaderResource ; void)",
    "insertText": "Initialize(const TCHAR* InDebugName, const uint32 BytesPerElement, const uint32 SizeX, const uint32 SizeY, const EPixelFormat Format, ETextureCreateFlags Flags = DefaultTextureInitFlag, FResourceBulkDataInterface* InBulkData = nullptr)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (NumBytes = SizeX* SizeY* BytesPerElement ; const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(InDebugName, SizeX, SizeY, Format) .SetFlags(Flags) .SetBulkData(InBulkData)"
  },
  {
    "label": "FReadBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FReadBuffer { FBufferRHIRef Buffer ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes ;)",
    "insertText": "FReadBuffer(): NumBytes(0)"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (CreateInfo . ResourceArray = InResourceArray ; Buffer = RHICmdList .)",
    "insertText": "CreateVertexBuffer(NumBytes, BUF_ShaderResource | AdditionalUsage, ERHIAccess::SRVMask, CreateInfo)"
  },
  {
    "label": "FRWBufferStructured()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRWBufferStructured { FBufferRHIRef Buffer ; FUnorderedAccessViewRHIRef UAV ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes ;)",
    "insertText": "FRWBufferStructured(): NumBytes(0)"
  },
  {
    "label": "FRWBufferStructured()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRWBufferStructured()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* InDebugName, uint32 BytesPerElement, uint32 NumElements, EBufferUsageFlags AdditionalUsage = BUF_None, bool bUseUavCounter = false, bool bAppendBuffer = false, ERHIAccess InitialState = ERHIAccess::UAVMask)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (Buffer = RHICmdList .)",
    "insertText": "CreateStructuredBuffer(BytesPerElement, NumBytes, BUF_UnorderedAccess | BUF_ShaderResource | AdditionalUsage, InitialState, CreateInfo)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (UAV = RHICmdList .)",
    "insertText": "CreateUnorderedAccessView(Buffer, bUseUavCounter, bAppendBuffer)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (SRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(Buffer)"
  },
  {
    "label": "FByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FByteAddressBuffer { FBufferRHIRef Buffer ; FShaderResourceViewRHIRef SRV ; uint32 NumBytes ;)",
    "insertText": "FByteAddressBuffer(): NumBytes(0)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* InDebugName, uint32 InNumBytes, EBufferUsageFlags AdditionalUsage = BUF_None)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NumBytes = InNumBytes ;)",
    "insertText": "check(NumBytes % 4 == 0)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (Buffer = RHICmdList .)",
    "insertText": "CreateStructuredBuffer(4, NumBytes, BUF_ShaderResource | BUF_ByteAddressBuffer | AdditionalUsage, ERHIAccess::SRVMask, CreateInfo)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRWByteAddressBuffer : public FByteAddressBuffer { FUnorderedAccessViewRHIRef UAV ; void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* DebugName, uint32 InNumBytes, EBufferUsageFlags AdditionalUsage = BUF_None)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RHICmdList, DebugName, InNumBytes, BUF_UnorderedAccess | AdditionalUsage)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (UAV = RHICmdList .)",
    "insertText": "CreateUnorderedAccessView(Buffer, false, false)"
  },
  {
    "label": "FDynamicReadBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDynamicReadBuffer : public FReadBuffer { uint8* MappedBuffer ;)",
    "insertText": "FDynamicReadBuffer() : MappedBuffer(nullptr)"
  },
  {
    "label": "FDynamicReadBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDynamicReadBuffer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FRHICommandListBase& RHICmdList, const TCHAR* DebugName, uint32 BytesPerElement, uint32 NumElements, EPixelFormat Format, EBufferUsageFlags AdditionalUsage = BUF_None)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RHICmdList, DebugName, BytesPerElement, NumElements, Format, AdditionalUsage)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Lock(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "MappedBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MappedBuffer(uint8*)RHICmdList.LockBuffer(Buffer, 0, NumBytes, RLM_WriteOnly)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unlock(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "UnlockBuffer(Buffer)"
  },
  {
    "label": "DecodeRenderTargetMode()",
    "kind": "Method",
    "detail": "Function (MappedBuffer = nullptr ; } } ; void)",
    "insertText": "DecodeRenderTargetMode(ESimpleRenderTargetMode Mode, ERenderTargetLoadAction& ColorLoadAction, ERenderTargetStoreAction& ColorStoreAction, ERenderTargetLoadAction& DepthLoadAction, ERenderTargetStoreAction& DepthStoreAction, ERenderTargetLoadAction& StencilLoadAction, ERenderTargetStoreAction& StencilStoreAction, FExclusiveDepthStencil DepthStencilUsage)"
  },
  {
    "label": "TransitionRenderPassTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionRenderPassTargets(FRHICommandList& RHICmdList, const FRHIRenderPassInfo& RPInfo)"
  },
  {
    "label": "GetNumColorRenderTargets()",
    "kind": "Method",
    "detail": "Function (FRHITransitionInfo Transitions [ MaxSimultaneousRenderTargets ] ; int32 TransitionIndex = 0 ; uint32 NumColorRenderTargets = RPInfo .)",
    "insertText": "GetNumColorRenderTargets()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FRHIRenderPassInfo::FColorEntry& ColorRenderTarget = RPInfo . ColorRenderTargets [ Index ] ;)",
    "insertText": "if(ColorRenderTarget.RenderTarget != nullptr)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (Transitions [ TransitionIndex ] =)",
    "insertText": "FRHITransitionInfo(ColorRenderTarget.RenderTarget, ERHIAccess::Unknown, ERHIAccess::RTV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TransitionIndex + + ; } } const FRHIRenderPassInfo::FDepthStencilEntry& DepthStencilTarget = RPInfo . DepthStencilRenderTarget ;)",
    "insertText": "if(DepthStencilTarget.DepthStencilTarget != nullptr && (RPInfo.DepthStencilRenderTarget.ExclusiveDepthStencil.IsAnyWrite()))"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "Transition(FRHITransitionInfo(DepthStencilTarget.DepthStencilTarget, ERHIAccess::Unknown, ERHIAccess::DSVRead | ERHIAccess::DSVWrite))"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (} RHICmdList .)",
    "insertText": "Transition(MakeArrayView(Transitions, TransitionIndex))"
  },
  {
    "label": "ClearRenderTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearRenderTarget(FRHICommandList& RHICmdList, FRHITexture* Texture, uint32 MipIndex = 0, uint32 ArraySlice = 0)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (const FIntPoint Extent = Texture ->)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (FRHIRenderPassInfo)",
    "insertText": "Info(Texture, ERenderTargetActions::Clear_Store)"
  },
  {
    "label": "MipIndex()",
    "kind": "Method",
    "detail": "Function (Info . ColorRenderTargets [ 0 ] .)",
    "insertText": "MipIndex(uint8)"
  },
  {
    "label": "ArraySlice()",
    "kind": "Method",
    "detail": "Function (Info . ColorRenderTargets [ 0 ] .)",
    "insertText": "ArraySlice(int32)"
  },
  {
    "label": "BeginRenderPass()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "BeginRenderPass(Info, TEXT(\"ClearRenderTarget\"))"
  },
  {
    "label": "EndRenderPass()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "EndRenderPass()"
  },
  {
    "label": "TransitionAndCopyTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TransitionAndCopyTexture(FRHICommandList& RHICmdList, FRHITexture* SrcTexture, FRHITexture* DstTexture, const FRHICopyTextureInfo& Info)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "Transition({ FRHITransitionInfo(SrcTexture, ERHIAccess::Unknown, ERHIAccess::SRVMask) })"
  },
  {
    "label": "CopyTexture()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "CopyTexture(SrcTexture, DstTexture, Info)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "Transition({ FRHITransitionInfo(SrcTexture, ERHIAccess::CopySrc, ERHIAccess::SRVMask), FRHITransitionInfo(DstTexture, ERHIAccess::CopyDest, ERHIAccess::SRVMask) })"
  },
  {
    "label": "GetVertexCountForPrimitiveCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVertexCountForPrimitiveCount(uint32 NumPrimitives, uint32 PrimitiveType)"
  },
  {
    "label": "Factor()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Factor(PrimitiveType == PT_TriangleList) ? 3 : (PrimitiveType == PT_LineList) ? 2 : (PrimitiveType == PT_RectList)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Offset(PrimitiveType == PT_TriangleStrip)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const auto CVar =)",
    "insertText": "Get().FindTConsoleVariableDataInt(TEXT(\"r.MaxAnisotropy\"))"
  },
  {
    "label": "GetValueOnAnyThread()",
    "kind": "Method",
    "detail": "Function (int32 CVarValue = CVar ->)",
    "insertText": "GetValueOnAnyThread()"
  },
  {
    "label": "DumpResourceTransition()",
    "kind": "Method",
    "detail": "Function (} # if UE_BUILD_SHIPPING | | UE_BUILD_TEST # define ENABLE_TRANSITION_DUMP 0 # else # define ENABLE_TRANSITION_DUMP 1 # endif class FDumpTransitionsHelper { public : void)",
    "insertText": "DumpResourceTransition(const FName& ResourceName, const ERHIAccess TransitionType)"
  },
  {
    "label": "DumpTransitionForResourceHandler()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DumpTransitionForResourceHandler()"
  },
  {
    "label": "DUMP_TRANSITION()",
    "kind": "Method",
    "detail": "Function (TAutoConsoleVariable<FString> CVarDumpTransitionsForResource ; FAutoConsoleVariableSink CVarDumpTransitionsForResourceSink ; FName DumpTransitionForResource ; } ; # if ENABLE_TRANSITION_DUMP # define)",
    "insertText": "DUMP_TRANSITION(ResourceName, TransitionType) FDumpTransitionsHelper::DumpResourceTransition(ResourceName, TransitionType)"
  },
  {
    "label": "DUMP_TRANSITION()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "DUMP_TRANSITION(ResourceName, TransitionType) #endif extern RHI_API void SetDepthBoundsTest(FRHICommandList& RHICmdList, float WorldSpaceDepthNear, float WorldSpaceDepthFar, const FMatrix& ProjectionMatrix)"
  },
  {
    "label": "RHIGetSyncInterval()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetSyncInterval()"
  },
  {
    "label": "RHIGetSyncSlackMS()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RHIGetSyncSlackMS()"
  },
  {
    "label": "RHIGetPresentThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetPresentThresholds(float& OutTopPercent, float& OutBottomPercent)"
  },
  {
    "label": "RHIGetSyncAllowVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetSyncAllowVariable()"
  },
  {
    "label": "RHITriggerTaskEventOnFlip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITriggerTaskEventOnFlip(uint64 PresentIndex, const UE::Tasks::FTaskEvent& TaskEvent)"
  },
  {
    "label": "RHISetFrameDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetFrameDebugInfo(uint64 PresentIndex, uint64 FrameIndex, uint64 InputTime)"
  },
  {
    "label": "RHISetVsyncDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetVsyncDebugInfo(FRHIFlipDetails& NewFlipFrame)"
  },
  {
    "label": "RHIInitializeFlipTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIInitializeFlipTracking()"
  },
  {
    "label": "RHIShutdownFlipTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIShutdownFlipTracking()"
  },
  {
    "label": "RHIGetFrameTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RHIGetFrameTime()"
  },
  {
    "label": "RHICalculateFrameTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICalculateFrameTime()"
  },
  {
    "label": "RHIGetPreferredAdapterVendor()",
    "kind": "Method",
    "detail": "Function (EGpuVendorId)",
    "insertText": "RHIGetPreferredAdapterVendor()"
  }
]