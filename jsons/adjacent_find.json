[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_ADJACENT_FIND_H # define _LIBCPP___ALGORITHM_ADJACENT_FIND_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Iter, class _Sent, class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter __adjacent_find(_Iter __first, _Sent __last, _BinaryPredicate&& __pred)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_Iter __i = __first ;)",
    "insertText": "while(++__i != __last)"
  },
  {
    "label": "adjacent_find()",
    "kind": "Method",
    "detail": "Function (__first = __i ; } return __i ; } template<class _ForwardIterator,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)"
  },
  {
    "label": "adjacent_find()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "adjacent_find(_ForwardIterator __first, _ForwardIterator __last)"
  },
  {
    "label": "adjacent_find()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type __v ; return)",
    "insertText": "adjacent_find(std::move(__first), std::move(__last), __equal_to<__v>())"
  }
]