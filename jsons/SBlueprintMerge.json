[
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FAssetRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRevisionInfo"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "MERGE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MERGE_API"
  },
  {
    "label": "SBlueprintMerge()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" BlueprintMergeData . h \" # include \" MergeUtils . h \" # include \" Widgets / Views / STreeView . h \" class FBlueprintDifferenceTreeEntry ; class UBlueprint ; struct FAssetRevisionInfo ; struct FDiffSingleResult ; class SBlueprintMerge : public SCompoundWidget { public :)",
    "insertText": "SBlueprintMerge()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SBlueprintMerge) : _bForcePickAssets(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, bForcePickAssets) SLATE_EVENT(FOnMergeResolved, OnMergeResolved) SLATE_END_ARGS() void Construct(const FArguments InArgs, const FBlueprintMergeData& InData)"
  },
  {
    "label": "GetTargetBlueprint()",
    "kind": "Method",
    "detail": "Function (private : UBlueprint*)",
    "insertText": "GetTargetBlueprint()"
  },
  {
    "label": "NextDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextDiff()"
  },
  {
    "label": "PrevDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevDiff()"
  },
  {
    "label": "HasNextDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextDiff()"
  },
  {
    "label": "HasPrevDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevDiff()"
  },
  {
    "label": "NextConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextConflict()"
  },
  {
    "label": "PrevConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevConflict()"
  },
  {
    "label": "HasNextConflict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextConflict()"
  },
  {
    "label": "HasPrevConflict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevConflict()"
  },
  {
    "label": "OnStartMerge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartMerge()"
  },
  {
    "label": "OnFinishMerge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishMerge()"
  },
  {
    "label": "OnCancelClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelClicked()"
  },
  {
    "label": "OnModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModeChanged(FName NewMode)"
  },
  {
    "label": "OnAcceptRemote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceptRemote()"
  },
  {
    "label": "OnAcceptLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceptLocal()"
  },
  {
    "label": "ResolveMerge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveMerge(UBlueprint* Result)"
  },
  {
    "label": "IsActivelyMerging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActivelyMerging()"
  },
  {
    "label": "CanStartMerge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStartMerge()"
  },
  {
    "label": "OnMergeAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeAssetSelected(EMergeAssetId::Type AssetId, const FAssetRevisionInfo& AssetInfo)"
  }
]