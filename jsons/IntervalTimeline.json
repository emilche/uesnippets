[
  {
    "label": "FIntervalTimelineDefaultSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntervalTimelineDefaultSettings"
  },
  {
    "label": "TIntervalTimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntervalTimeline"
  },
  {
    "label": "FEventInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventInternal"
  },
  {
    "label": "FEventPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventPage"
  },
  {
    "label": "TIntervalTimeline()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Containers / Timelines . h \" # include \" Common / PagedArray . h \" # include \" TraceServices / Containers / Allocators . h \" # include<limits> namespace TraceServices { struct FIntervalTimelineDefaultSettings { enum { EventsPerPage = 6 5 5 3 6 } ; } ; template<EventType,SettingsType = FIntervalTimelineDefaultSettings> class TIntervalTimeline : public ITimeline<EventType> { public :)",
    "insertText": "TIntervalTimeline(ILinearAllocator& Allocator) : Events(Allocator, SettingsType::EventsPerPage)"
  },
  {
    "label": "TIntervalTimeline()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TIntervalTimeline()"
  },
  {
    "label": "GetModCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetModCount()"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (} const EventType&)",
    "insertText": "GetEvent(uint64 InIndex)"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, typename ITimeline<EventType>::EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, typename ITimeline<EventType>::EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, typename ITimeline<EventType>::EventCallback Callback)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(IntervalStart, IntervalEnd, [&Callback](double InStartTime, double InEndTime, uint32 InDepth, const EventType& InEvent) { Callback(true, InStartTime, InEvent); Callback(false, InEndTime, InEvent); return EEventEnumerate::Continue; })"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, typename ITimeline<EventType>::EventRangeCallback Callback)"
  },
  {
    "label": "GetIteratorFromPage()",
    "kind": "Method",
    "detail": "Function (auto EventIterator = Events .)",
    "insertText": "GetIteratorFromPage(0)"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (const FEventInternal* Event = EventIterator .)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "GetCurrentPage()",
    "kind": "Method",
    "detail": "Function (const FEventPage* Page = EventIterator .)",
    "insertText": "GetCurrentPage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!(Event->EndTime < IntervalStart || IntervalEnd < Event->StartTime))"
  },
  {
    "label": "AppendBeginEvent()",
    "kind": "Method",
    "detail": "Function (} } } uint64)",
    "insertText": "AppendBeginEvent(double StartTime, const EventType& Event)"
  },
  {
    "label": "EmplaceBeginEvent()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> uint64)",
    "insertText": "EmplaceBeginEvent(double StartTime, ArgsType&&... Args)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint64 Index = Events .)",
    "insertText": "Num()"
  },
  {
    "label": "EmplaceBack()",
    "kind": "Method",
    "detail": "Function (Events .)",
    "insertText": "EmplaceBack(StartTime, std::numeric_limits<double>::infinity(), Forward<ArgsType>(Args)...)"
  },
  {
    "label": "GetLastPage()",
    "kind": "Method",
    "detail": "Function (FEventPage* LastPage = Events .)",
    "insertText": "GetLastPage()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (CurrentPage = LastPage ; LastPage -> BeginTime = StartTime ; LastPage -> EndTime = StartTime ; LastPage -> BeginEventIndex = Index ; } else { LastPage -> BeginTime =)",
    "insertText": "Min(LastPage->BeginTime, StartTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastPage -> EndTime =)",
    "insertText": "Max(LastPage->EndTime, StartTime)"
  },
  {
    "label": "EndEvent()",
    "kind": "Method",
    "detail": "Function (} LastPage -> EndEventIndex = Index + 1 ; + + ModCount ; + + LastPage -> OpenEvents ; return Index ; } EventType&)",
    "insertText": "EndEvent(uint64 EventIndex, double EndTime)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FEventInternal& EventInternal = Events [ EventIndex ] ;)",
    "insertText": "check(EventIndex < Events.Num())"
  },
  {
    "label": "GetItemPage()",
    "kind": "Method",
    "detail": "Function (EventInternal . EndTime = EndTime ; FEventPage* Page = Events .)",
    "insertText": "GetItemPage(EventIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Page -> EndTime =)",
    "insertText": "Max(Page->EndTime, EndTime)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + ModCount ;)",
    "insertText": "check(Page->OpenEvents>0)"
  },
  {
    "label": "GetEventInfo()",
    "kind": "Method",
    "detail": "Function (- - Page -> OpenEvents ; return EventInternal . Event ; } bool)",
    "insertText": "GetEventInfo(double InTime, double DeltaTime, int32 Depth, typename ITimeline<EventType>::FTimelineEventInfo& EventInfo)"
  },
  {
    "label": "FEventInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEventInternal(double InStartTime, double InEndTime, EventType InEvent) : StartTime(InStartTime) , EndTime(InEndTime) , Event(MoveTempIfPossible(InEvent))"
  }
]