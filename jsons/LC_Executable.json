[
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "ImageSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSection"
  },
  {
    "label": "ImageSectionDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSectionDB"
  },
  {
    "label": "ImportModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImportModule"
  },
  {
    "label": "ImportModuleDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImportModuleDB"
  },
  {
    "label": "PdbInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PdbInfo"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "equal_to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equal_to"
  },
  {
    "label": "OpenImage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_PointerUtil . h \" # include \" LC_MemoryMappedFile . h \" # include \" LC_Hashing . h \" # include<vector> # include \" Windows / WindowsHWrapper . h \" namespace executable { # if LC_64_BIT typedef uint64_t PreferredBase ; # else typedef uint32_t PreferredBase ; # endif struct Header { uint64_t sizeOnDisk ; IMAGE_FILE_HEADER imageHeader ; IMAGE_OPTIONAL_HEADER optionalHeader ; } ; typedef Filesystem::MemoryMappedFile Image ; struct ImageSection { uint32_t rva ; uint32_t size ; uint32_t rawDataRva ; uint32_t rawDataSize ; } ; struct ImageSectionDB { std::vector<ImageSection> sections ; } ; struct ImportModule { char path [ MAX_PATH ] ; } ; struct ImportModuleDB { std::vector<ImportModule> modules ; } ; struct PdbInfo { char path [ MAX_PATH ] ; GUID guid ; uint32_t age ; } ; Image*)",
    "insertText": "OpenImage(const wchar_t* filename, Filesystem::OpenMode::Enum openMode)"
  },
  {
    "label": "CloseImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseImage(Image*& image)"
  },
  {
    "label": "RebaseImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebaseImage(Image* image, PreferredBase preferredBase)"
  },
  {
    "label": "GatherImageSectionDB()",
    "kind": "Method",
    "detail": "Function (ImageSectionDB*)",
    "insertText": "GatherImageSectionDB(const Image* image)"
  },
  {
    "label": "DestroyImageSectionDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyImageSectionDB(ImageSectionDB* database)"
  },
  {
    "label": "GatherImportModuleDB()",
    "kind": "Method",
    "detail": "Function (ImportModuleDB*)",
    "insertText": "GatherImportModuleDB(const Image* image, const ImageSectionDB* imageSections)"
  },
  {
    "label": "DestroyImportModuleDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyImportModuleDB(ImportModuleDB* database)"
  },
  {
    "label": "GatherPdbInfo()",
    "kind": "Method",
    "detail": "Function (PdbInfo*)",
    "insertText": "GatherPdbInfo(const Image* image, const ImageSectionDB* imageSections)"
  },
  {
    "label": "DestroyPdbInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPdbInfo(PdbInfo* pdbInfo)"
  },
  {
    "label": "GetEntryPointRva()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetEntryPointRva(const Image* image)"
  },
  {
    "label": "GetPreferredBase()",
    "kind": "Method",
    "detail": "Function (PreferredBase)",
    "insertText": "GetPreferredBase(const Image* image)"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (Header)",
    "insertText": "GetHeader(const Image* image)"
  },
  {
    "label": "IsValidHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidHeader(const Header& header)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetSize(const Image* image)"
  },
  {
    "label": "RvaToFileOffset()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "RvaToFileOffset(const ImageSectionDB* database, uint32_t rva)"
  },
  {
    "label": "ReadFromFileOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFromFileOffset(const Image* file, uint32_t offset, void* destination, size_t byteCount)"
  },
  {
    "label": "WriteToFileOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToFileOffset(Image* file, uint32_t offset, const void* source, size_t byteCount)"
  },
  {
    "label": "ReadFromImage()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "ReadFromImage(const Image* image, const ImageSectionDB* database, uint32_t rva)"
  },
  {
    "label": "RvaToFileOffset()",
    "kind": "Method",
    "detail": "Function (const uint32_t fileOffset =)",
    "insertText": "RvaToFileOffset(database, rva)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} const T* address = pointer::Offset<const)",
    "insertText": "T(Filesystem::GetMemoryMappedFileData(image), fileOffset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} namespace std { template<> struct hash<executable::Header> { std::size_t)",
    "insertText": "operator()(const executable::Header& header)"
  },
  {
    "label": "Hash32()",
    "kind": "Method",
    "detail": "Function (const uint32_t hash1 =)",
    "insertText": "Hash32(&header.imageHeader, sizeof(executable::Header::imageHeader), 0u)"
  },
  {
    "label": "Hash32()",
    "kind": "Method",
    "detail": "Function (const uint32_t hash2 =)",
    "insertText": "Hash32(&header.optionalHeader, sizeof(executable::Header::optionalHeader), hash1)"
  }
]