[
  {
    "label": "LruCacheType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LruCacheType"
  },
  {
    "label": "GetKeyFromKVPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetKeyFromKVPair"
  },
  {
    "label": "ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueType"
  },
  {
    "label": "GetKeyFromValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetKeyFromValue"
  },
  {
    "label": "KeyIndexTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyIndexTemplate"
  },
  {
    "label": "LRUCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LRUCacheBase"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "MapKeyGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapKeyGetter"
  },
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "KeyCompare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyCompare"
  },
  {
    "label": "LRUCacheKeyIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LRUCacheKeyIndex"
  },
  {
    "label": "KeyHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyHash"
  },
  {
    "label": "KeyEqual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyEqual"
  },
  {
    "label": "HashingLRUCacheKeyIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashingLRUCacheKeyIndex"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Equal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Equal"
  },
  {
    "label": "DoEstimateMemoryUsageForLruCache()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_LRU_CACHE_H_ # define BASE_CONTAINERS_LRU_CACHE_H_ # include<stddef . h> # include<algorithm> # include<functional> # include<list> # include<map> # include<type_traits> # include<unordered_map> # include<utility> # include \" base / check . h \" # include \" base / functional / identity . h \" namespace base { namespace trace_event::internal { template<class LruCacheType> size_t)",
    "insertText": "DoEstimateMemoryUsageForLruCache(const LruCacheType&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} namespace internal { struct GetKeyFromKVPair { template<T1,T2> const T1&)",
    "insertText": "operator()(const std::pair<T1, T2>& pair)"
  },
  {
    "label": "LRUCacheBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LRUCacheBase(const LRUCacheBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LRUCacheBase&)",
    "insertText": "operator(const LRUCacheBase&)"
  },
  {
    "label": "LRUCacheBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LRUCacheBase()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "GetKeyFromValue()",
    "kind": "Method",
    "detail": "Function (key_type key =)",
    "insertText": "GetKeyFromValue(value)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (KeyIndex::iterator index_iter = index_ .)",
    "insertText": "find(key)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Erase(index_iter->second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(max_size_ != NO_AUTO_EVICT)"
  },
  {
    "label": "ShrinkToSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkToSize(max_size_ - 1)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (} ordering_ .)",
    "insertText": "push_front(std::move(value))"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (index_ .)",
    "insertText": "emplace(std::move(key), ordering_.begin())"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} template<class K,class V,class MapKeyGetter = GetKeyFromKVPair,class = std::enable_if_t<std::is_same_v<MapKeyGetter,GetKeyFromValue>>> iterator)",
    "insertText": "Put(K&& key, V&& value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "Get(const key_type& key)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (ValueList::iterator iter = index_iter -> second ; ordering_ .)",
    "insertText": "splice(ordering_.begin(), ordering_, iter)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "Peek(const key_type& key)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (ordering_ .)",
    "insertText": "swap(other.ordering_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (index_ .)",
    "insertText": "swap(other.index_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(max_size_, other.max_size_)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "Erase(iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (index_ .)",
    "insertText": "erase(GetKeyFromValue()(*pos))"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "Erase(reverse_iterator pos)"
  },
  {
    "label": "ShrinkToSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShrinkToSize(size_type new_size)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (index_ .)",
    "insertText": "clear()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(index_.size() == ordering_.size())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  }
]