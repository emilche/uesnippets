[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_GLIBC_WEAK_SYMBOLS_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_GLIBC_WEAK_SYMBOLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_GLIBC_WEAK_SYMBOLS_H_ # include<features . h> # include<malloc . h> # include<unistd . h> # include<new> # include \" base / allocator / partition_allocator / shim / allocator_shim_internals . h \" # if !)",
    "insertText": "defined(__MALLOC_HOOK_VOLATILE)"
  },
  {
    "label": "GlibcMallocHook()",
    "kind": "Method",
    "detail": "Function (namespace { void*)",
    "insertText": "GlibcMallocHook(size_t size, const void* caller)"
  },
  {
    "label": "GlibcReallocHook()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GlibcReallocHook(void* ptr, size_t size, const void* caller)"
  },
  {
    "label": "GlibcFreeHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GlibcFreeHook(void* ptr, const void* caller)"
  },
  {
    "label": "GlibcMemalignHook()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GlibcMemalignHook(size_t align, size_t size, const void* caller)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "__attribute__((visibility(\"default\"))) void* ( *MALLOC_HOOK_MAYBE_VOLATILE __malloc_hook)(size_t, const void*)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__attribute__((visibility(\"default\"))) void* ( *MALLOC_HOOK_MAYBE_VOLATILE __realloc_hook)(void*, size_t, const void*)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__attribute__((visibility(\"default\"))) void ( *MALLOC_HOOK_MAYBE_VOLATILE __free_hook)(void*, const void*)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__attribute__((visibility(\"default\"))) void* ( *MALLOC_HOOK_MAYBE_VOLATILE __memalign_hook)(size_t, size_t, const void*)"
  },
  {
    "label": "__libc_malloc()",
    "kind": "Method",
    "detail": "Function (SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_malloc(size_t size)"
  },
  {
    "label": "__libc_free()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void)",
    "insertText": "__libc_free(void* ptr)"
  },
  {
    "label": "ShimFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFree(ptr, nullptr)"
  },
  {
    "label": "__libc_realloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_realloc(void* ptr, size_t size)"
  },
  {
    "label": "__libc_calloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_calloc(size_t n, size_t size)"
  },
  {
    "label": "__libc_cfree()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void)",
    "insertText": "__libc_cfree(void* ptr)"
  },
  {
    "label": "__libc_memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_memalign(size_t align, size_t s)"
  },
  {
    "label": "__libc_valloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_valloc(size_t size)"
  },
  {
    "label": "__libc_pvalloc()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT void*)",
    "insertText": "__libc_pvalloc(size_t size)"
  },
  {
    "label": "__posix_memalign()",
    "kind": "Method",
    "detail": "Function (} SHIM_ALWAYS_EXPORT int)",
    "insertText": "__posix_memalign(void** r, size_t a, size_t s)"
  }
]