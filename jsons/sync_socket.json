[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNC_SOCKET_H_ # define BASE_SYNC_SOCKET_H_ # include<stddef . h> # include \" base / base_export . h \" # include \" base / files / platform_file . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "SyncSocket()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT SyncSocket { public : using Handle = PlatformFile ; using ScopedHandle = ScopedPlatformFile ; const Handle kInvalidHandle ;)",
    "insertText": "SyncSocket()"
  },
  {
    "label": "SyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSocket(Handle handle)"
  },
  {
    "label": "SyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSocket(ScopedHandle handle)"
  },
  {
    "label": "SyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncSocket(const SyncSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SyncSocket&)",
    "insertText": "operator(const SyncSocket&)"
  },
  {
    "label": "CreatePair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePair(SyncSocket* socket_a, SyncSocket* socket_b)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Send(const void* buffer, size_t length)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Receive(void* buffer, size_t length)"
  },
  {
    "label": "ReceiveWithTimeout()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReceiveWithTimeout(void* buffer, size_t length, TimeDelta timeout)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Peek()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "handle()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "Release()"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (ScopedHandle)",
    "insertText": "Take()"
  },
  {
    "label": "CancelableSyncSocket()",
    "kind": "Method",
    "detail": "Function (protected : ScopedHandle handle_ ; } ; class BASE_EXPORT CancelableSyncSocket : public SyncSocket { public :)",
    "insertText": "CancelableSyncSocket()"
  },
  {
    "label": "CancelableSyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableSyncSocket(Handle handle)"
  },
  {
    "label": "CancelableSyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableSyncSocket(ScopedHandle handle)"
  },
  {
    "label": "CancelableSyncSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableSyncSocket(const CancelableSyncSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CancelableSyncSocket&)",
    "insertText": "operator(const CancelableSyncSocket&)"
  },
  {
    "label": "CreatePair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePair(CancelableSyncSocket* socket_a, CancelableSyncSocket* socket_b)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Shutdown()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) void Close()"
  }
]