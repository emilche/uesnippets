[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "UHierarchicalInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHierarchicalInstancedStaticMeshComponent"
  },
  {
    "label": "ULandscapeNaniteComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeNaniteComponent"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeGrassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeGrassType"
  },
  {
    "label": "ULandscapeHeightfieldCollisionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeHeightfieldCollisionComponent"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "ULandscapeMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeMaterialInstanceConstant"
  },
  {
    "label": "ULandscapeSplinesComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplinesComponent"
  },
  {
    "label": "UMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceConstant"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FLandscapeEditLayerReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditLayerReadback"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "FAsyncGrassBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncGrassBuilder"
  },
  {
    "label": "FLandscapeInfoLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeInfoLayerSettings"
  },
  {
    "label": "FLandscapePerLODMaterialOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapePerLODMaterialOverride"
  },
  {
    "label": "FLandscapeProxyComponentDataChangedParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeProxyComponentDataChangedParams"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncBuildData"
  },
  {
    "label": "FOnLandscapeProxyFixupSharedDataParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnLandscapeProxyFixupSharedDataParams"
  },
  {
    "label": "FLandscapeTargetLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTargetLayerSettings"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FLandscapeImportLayerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportLayerInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCachedLandscapeFoliage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedLandscapeFoliage"
  },
  {
    "label": "FGrassCompKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrassCompKey"
  },
  {
    "label": "FGrassComp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrassComp"
  },
  {
    "label": "FGrassCompKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrassCompKeyFuncs"
  },
  {
    "label": "FAsyncGrassTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncGrassTask"
  },
  {
    "label": "FAsyncWorkMonitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncWorkMonitor"
  },
  {
    "label": "FAsyncWorkTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncWorkTypeInfo"
  },
  {
    "label": "FLandscapeActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeActorDesc"
  },
  {
    "label": "FGrassTypeSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrassTypeSummary"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FScopedSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSlowTask"
  },
  {
    "label": "FComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentRecreateRenderStateContext"
  },
  {
    "label": "FLandscapeLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayer"
  },
  {
    "label": "FRawMeshExportParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMeshExportParams"
  },
  {
    "label": "FUVConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVConfiguration"
  },
  {
    "label": "FLandscapePhysicalMaterialBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapePhysicalMaterialBuilder"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" PhysicsEngine / BodyInstance . h \" # include \" Async / AsyncWork . h \" # include \" Engine / Texture . h \" # include \" UObject / PerPlatformProperties . h \" # include \" LandscapeNaniteComponent . h \" # include \" LandscapeWeightmapUsage . h \" # include \" LandscapeHeightfieldCollisionComponent . h \" # include \" VT / RuntimeVirtualTextureEnum . h \" # include \" ActorPartition / PartitionActor . h \" # include \" ILandscapeSplineInterface . h \" # include \" Engine / Texture2DArray . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" LandscapeComponent . h \" # endif # if WITH_EDITOR # include \" WorldPartition / WorldPartitionHandle . h \" # endif # include \" LandscapeProxy . generated . h \" class ALandscape ; class ALandscapeProxy ; class UHierarchicalInstancedStaticMeshComponent ; class ULandscapeNaniteComponent ; class ULandscapeComponent ; class ULandscapeGrassType ; class ULandscapeHeightfieldCollisionComponent ; class ULandscapeInfo ; class ULandscapeLayerInfoObject ; class ULandscapeMaterialInstanceConstant ; class ULandscapeSplinesComponent ; class UMaterialInstanceConstant ; class UMaterialInterface ; class UPhysicalMaterial ; class USplineComponent ; class UTexture2D ; class FLandscapeEditLayerReadback ; class FMaterialUpdateContext ; struct FAsyncGrassBuilder ; struct FLandscapeInfoLayerSettings ; struct FLandscapePerLODMaterialOverride ; class FLandscapeProxyComponentDataChangedParams ; struct FMeshDescription ; enum class ENavDataGatheringMode : uint8 ; namespace UE::Landscape { enum class EOutdatedDataFlags : uint8 ; namespace Nanite { struct FAsyncBuildData ; } } # if WITH_EDITOR bool GLandscapeEditModeActive ; int32 GGrassMapUseRuntimeGeneration ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnLandscapeProxyComponentDataChanged, ALandscapeProxy*, const FLandscapeProxyComponentDataChangedParams&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (struct FOnLandscapeProxyFixupSharedDataParams { ALandscape* Landscape = nullptr ; bool bUpgradeSharedPropertiesPerformed = false ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnLandscapeProxyFixupSharedDataDelegate, ALandscapeProxy* , const FOnLandscapeProxyFixupSharedDataParams&)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category = \"General\", EditAnywhere)"
  },
  {
    "label": "FLandscapeTargetLayerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeTargetLayerSettings()"
  },
  {
    "label": "FLandscapeTargetLayerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeTargetLayerSettings(ULandscapeLayerInfoObject* InLayerInfo, const FString& InFilePath = FString()) : LayerInfoObj(InLayerInfo) , ReimportLayerFilePath(InFilePath)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLandscapeTargetLayerSettings& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "FLandscapeEditorLayerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeEditorLayerSettings() : LayerInfoObj(nullptr) , ReimportLayerFilePath()"
  },
  {
    "label": "FLandscapeEditorLayerSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeEditorLayerSettings(ULandscapeLayerInfoObject* InLayerInfo, const FString& InFilePath = FString()) : LayerInfoObj(InLayerInfo) , ReimportLayerFilePath(InFilePath)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA UPROPERTY(Category=\"Import\", VisibleAnywhere)"
  },
  {
    "label": "FLandscapeImportLayerInfo()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> LayerData ; # endif # if WITH_EDITOR)",
    "insertText": "FLandscapeImportLayerInfo(FName InLayerName = NAME_None) : LayerName(InLayerName) , LayerInfo(nullptr) , SourceFilePath(\"\")"
  },
  {
    "label": "FLandscapeImportLayerInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeImportLayerInfo(const FLandscapeInfoLayerSettings& InLayerSettings)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None)",
    "insertText": "UMETA(DisplayName=\"None\"), UseMaxLayers UMETA(DisplayName=\"Limit Layer Count\"), ExistingOnly UMETA(DisplayName=\"Existing Layers Only\"), UseComponentAllowList UMETA(DisplayName=\"Component Allow List\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Linear)",
    "insertText": "UMETA(DisplayName = \"Linear\"), SquareRoot UMETA(DisplayName = \"Square Root\")"
  },
  {
    "label": "FGrassCompKey()",
    "kind": "Method",
    "detail": "Function (} struct FCachedLandscapeFoliage { struct FGrassCompKey { TWeakObjectPtr<ULandscapeComponent> BasedOn ; TWeakObjectPtr<ULandscapeGrassType> GrassType ; int32 SqrtSubsections ; int32 CachedMaxInstancesPerComponent ; int32 SubsectionX ; int32 SubsectionY ; int32 NumVarieties ; int32 VarietyIndex ;)",
    "insertText": "FGrassCompKey() : SqrtSubsections(0) , CachedMaxInstancesPerComponent(0) , SubsectionX(0) , SubsectionY(0) , NumVarieties(0) , VarietyIndex(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGrassCompKey& Other)"
  },
  {
    "label": "FGrassComp()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGrassComp { FGrassCompKey Key ; TWeakObjectPtr<UHierarchicalInstancedStaticMeshComponent> Foliage ; TWeakObjectPtr<UHierarchicalInstancedStaticMeshComponent> PreviousFoliage ; TArray<FBox> ExcludedBoxes ; uint32 LastUsedFrameNumber ; uint32 ExclusionChangeTag ; double LastUsedTime ; bool Pending ; bool PendingRemovalRebuild ;)",
    "insertText": "FGrassComp() : ExclusionChangeTag(0) , Pending(true) , PendingRemovalRebuild(false)"
  },
  {
    "label": "Touch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Touch()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (LastUsedFrameNumber = GFrameNumber ; LastUsedTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGrassCompKeyFuncs : BaseKeyFuncs<FGrassComp,FGrassCompKey> { KeyInitType)",
    "insertText": "GetSetKey(const FGrassComp& Element)"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSet<FGrassComp,FGrassCompKeyFuncs> TGrassSet ; TSet<FGrassComp,FGrassCompKeyFuncs> CachedGrassComps ; void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CachedGrassComps .)",
    "insertText": "Empty()"
  },
  {
    "label": "FAsyncGrassTask()",
    "kind": "Method",
    "detail": "Function (} } ; class FAsyncGrassTask : public FNonAbandonableTask { public : FAsyncGrassBuilder* Builder ; FCachedLandscapeFoliage::FGrassCompKey Key ; TWeakObjectPtr<UHierarchicalInstancedStaticMeshComponent> Foliage ;)",
    "insertText": "FAsyncGrassTask(FAsyncGrassBuilder* InBuilder, const FCachedLandscapeFoliage::FGrassCompKey& InKey, UHierarchicalInstancedStaticMeshComponent* InFoliage)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FAsyncGrassTask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncGrassTask()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(meta = (Deprecated = \"5.1\")) struct UE_DEPRECATED(all, \"FLandscapeProxyMaterialOverride is deprecated; please use FLandscapePerLODMaterialOverride instead\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "CheckIfUpdateTriggeredAndClear()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR struct FAsyncWorkMonitor { public : enum class EAsyncWorkType : uint8 { BuildNaniteMeshes,Max } ; bool)",
    "insertText": "CheckIfUpdateTriggeredAndClear(EAsyncWorkType WorkType)"
  },
  {
    "label": "SetDelayedUpdateTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayedUpdateTimer(EAsyncWorkType WorkType, float InSecondsUntilDelayedUpdateTrigger)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float Detaltime)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (private : struct FAsyncWorkTypeInfo { bool bUpdateTriggered = false ; float SecondsUntilDelayedUpdateTrigger = 0 . 0 f ; } ; TStaticArray<FAsyncWorkTypeInfo,static_cast<)",
    "insertText": "uint32(EAsyncWorkType::Max)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "UCLASS(Abstract, MinimalAPI, NotBlueprintable, NotPlaceable, hidecategories=(Display, Attachment, Physics, Debug, Lighting), showcategories=(Lighting, Rendering, Transformation), hidecategories=(Mobility))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ALandscapeProxy(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "ALandscapeProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ALandscapeProxy()"
  },
  {
    "label": "IsGrassTypeSummaryValid()",
    "kind": "Method",
    "detail": "Function (struct FGrassTypeSummary { int32 LandscapeComponentCount = - 1 ; bool bHasAnyGrass = true ; double MaxInstanceDiscardDistance = DBL_MAX ; } ; FGrassTypeSummary GrassTypeSummary ; bool)",
    "insertText": "IsGrassTypeSummaryValid()"
  },
  {
    "label": "InvalidateGrassTypeSummary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateGrassTypeSummary()"
  },
  {
    "label": "UpdateGrassTypeSummary()",
    "kind": "Method",
    "detail": "Function (GrassTypeSummary . LandscapeComponentCount = - 1 ; } void)",
    "insertText": "UpdateGrassTypeSummary()"
  },
  {
    "label": "GetDisableRuntimeGrassMapGeneration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDisableRuntimeGrassMapGeneration()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "UnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllComponents(bool bForReregister = false)"
  },
  {
    "label": "IsLevelBoundsRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelBoundsRelevant()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "EditorApplyScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorApplyScale(const FVector& DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "EditorApplyMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorApplyMirror(const FVector& MirrorScale, const FVector& PivotLocation)"
  },
  {
    "label": "PostEditMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditMove(bool bFinished)"
  },
  {
    "label": "OnLoadedActorRemovedFromLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadedActorRemovedFromLevel()"
  },
  {
    "label": "GetDefaultGridSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDefaultGridSize(UWorld* InWorld)"
  },
  {
    "label": "EditorCanAttachTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorCanAttachTo(const AActor* InParent, FText& OutReason)"
  },
  {
    "label": "IsNaniteEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNaniteEnabled()"
  },
  {
    "label": "UpdateNaniteSharedPropertiesFromActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNaniteSharedPropertiesFromActor()"
  },
  {
    "label": "RemoveNaniteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNaniteComponents()"
  },
  {
    "label": "ClearNaniteTransactional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNaniteTransactional()"
  },
  {
    "label": "NumNaniteRequiredComponents()",
    "kind": "Method",
    "detail": "Function (int32 NaniteComponentMaxSide = 8 ; int32 NaniteMaxComponents = NaniteComponentMaxSide* NaniteComponentMaxSide ; int32)",
    "insertText": "NumNaniteRequiredComponents()"
  },
  {
    "label": "AreNaniteComponentsValid()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "AreNaniteComponentsValid(const FGuid& InProxyContentId)"
  },
  {
    "label": "HasNaniteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNaniteComponents()"
  },
  {
    "label": "GetNanitePrimitiveComponentIds()",
    "kind": "Method",
    "detail": "Function (} TSet<FPrimitiveComponentId>)",
    "insertText": "GetNanitePrimitiveComponentIds()"
  },
  {
    "label": "GetNaniteComponentContentId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetNaniteComponentContentId()"
  },
  {
    "label": "AuditNaniteMaterials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AuditNaniteMaterials()"
  },
  {
    "label": "EnableNaniteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableNaniteComponents(bool bInNaniteActive)"
  },
  {
    "label": "GetHeightAtLocation()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetHeightAtLocation(FVector Location, EHeightfieldSource HeightFieldSource = EHeightfieldSource::Complex)"
  },
  {
    "label": "GetPhysicalMaterialAtLocation()",
    "kind": "Method",
    "detail": "Function (UPhysicalMaterial*)",
    "insertText": "GetPhysicalMaterialAtLocation(FVector Location, EHeightfieldSource HeightFieldSOurce = EHeightfieldSource::Complex)"
  },
  {
    "label": "GetHeightValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightValues(int32& SizeX, int32& SizeY, TArray<float>& ArrayValue)"
  },
  {
    "label": "GetLandscapeGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetLandscapeGuid()"
  },
  {
    "label": "ComputeLandscapeKey()",
    "kind": "Method",
    "detail": "Function (LandscapeGuid = Guid ; OriginalLandscapeGuid = Guid ; } uint32)",
    "insertText": "ComputeLandscapeKey()"
  },
  {
    "label": "ComputeLandscapeKey()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeLandscapeKey(const UWorld* World, uint32 InLODGroupKey, FGuid InLandscapeGuid)"
  },
  {
    "label": "GetOriginalLandscapeGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetOriginalLandscapeGuid()"
  },
  {
    "label": "SetGrassUpdateInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrassUpdateInterval(int32 Interval)"
  },
  {
    "label": "ShouldTickGrass()",
    "kind": "Method",
    "detail": "Function (GrassUpdateInterval = Interval ; } bool)",
    "insertText": "ShouldTickGrass()"
  },
  {
    "label": "FlushGrassComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushGrassComponents(const TSet<ULandscapeComponent*>* OnlyForComponents = nullptr, bool bFlushGrassMaps = true)"
  },
  {
    "label": "UpdateGrass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGrass(const TArray<FVector>& Cameras, int32& InOutNumComponentsCreated, bool bForceSync = false)"
  },
  {
    "label": "UpdateGrass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGrass(const TArray<FVector>& Cameras, bool bForceSync = false)"
  },
  {
    "label": "AddExclusionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExclusionBox(FWeakObjectPtr Owner, const FBox& BoxToRemove)"
  },
  {
    "label": "RemoveExclusionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExclusionBox(FWeakObjectPtr Owner)"
  },
  {
    "label": "RemoveAllExclusionBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllExclusionBoxes()"
  },
  {
    "label": "RemoveInvalidExclusionBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInvalidExclusionBoxes()"
  },
  {
    "label": "DebugDrawExclusionBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawExclusionBoxes(const UWorld* World)"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeneratedComponentData(const TSet<ULandscapeComponent*>& Components, bool bInvalidateLightingCache = false)"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeneratedComponentData(const TArray<ULandscapeComponent*>& Components, bool bInvalidateLightingCache = false)"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeneratedComponentData(bool bInvalidateLightingCache = false)"
  },
  {
    "label": "UpdateRenderingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderingMethod()"
  },
  {
    "label": "UpdatePhysicalMaterialTasks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePhysicalMaterialTasks(bool bInShouldMarkDirty = false)"
  },
  {
    "label": "UpdatePhysicalMaterialTasksStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicalMaterialTasksStatus(TSet<ULandscapeComponent*>* OutdatedComponents, int32* OutdatedComponentsCount)"
  },
  {
    "label": "OnFeatureLevelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFeatureLevelChanged(ERHIFeatureLevel::Type NewFeatureLevel)"
  },
  {
    "label": "GetNaniteContentId()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle FeatureLevelChangedDelegateHandle ; FGuid)",
    "insertText": "GetNaniteContentId()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "CreateLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeInfo*)",
    "insertText": "CreateLandscapeInfo(bool bMapCheck = false, bool bUpdateAllAddCollisions = true)"
  },
  {
    "label": "GetLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeInfo*)",
    "insertText": "GetLandscapeInfo()"
  },
  {
    "label": "LandscapeActorToWorld()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "LandscapeActorToWorld()"
  },
  {
    "label": "GetSectionBaseOffset()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSectionBaseOffset()"
  },
  {
    "label": "GetSplinesComponent()",
    "kind": "Method",
    "detail": "Function (ULandscapeSplinesComponent*)",
    "insertText": "GetSplinesComponent()"
  },
  {
    "label": "GetLODScreenSizeArray()",
    "kind": "Method",
    "detail": "Function (TArray<float>)",
    "insertText": "GetLODScreenSizeArray()"
  },
  {
    "label": "CopySharedProperties()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CopySharedProperties(ALandscapeProxy* InLandscape)"
  },
  {
    "label": "SynchronizeSharedProperties()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "SynchronizeSharedProperties(ALandscapeProxy* InLandscape)"
  },
  {
    "label": "IsSharedProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedProperty(const FName& InPropertyName)"
  },
  {
    "label": "IsSharedProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedProperty(const FProperty* InProperty)"
  },
  {
    "label": "IsPropertyInherited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyInherited(const FProperty* InProperty)"
  },
  {
    "label": "IsPropertyOverridable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyOverridable(const FProperty* InProperty)"
  },
  {
    "label": "IsSharedPropertyOverridden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedPropertyOverridden(const FName& InPropertyName)"
  },
  {
    "label": "OnLandscapeProxyFixupSharedData()",
    "kind": "Method",
    "detail": "Function (} FOnLandscapeProxyFixupSharedDataDelegate::RegistrationType&)",
    "insertText": "OnLandscapeProxyFixupSharedData()"
  },
  {
    "label": "GetLandscapeHoleMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetLandscapeHoleMaterial()"
  },
  {
    "label": "SerializeStateHashes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SerializeStateHashes(FArchive& Ar)"
  },
  {
    "label": "SetSplinesComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplinesComponent(ULandscapeSplinesComponent* InSplineComponent)"
  },
  {
    "label": "SupportsForeignSplineMesh()",
    "kind": "Method",
    "detail": "Function (SplineComponent = InSplineComponent ; } bool)",
    "insertText": "SupportsForeignSplineMesh()"
  },
  {
    "label": "BuildGrassMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGrassMaps(struct FScopedSlowTask* InSlowTask = nullptr)"
  },
  {
    "label": "BuildPhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPhysicalMaterial(struct FScopedSlowTask* InSlowTask = nullptr)"
  },
  {
    "label": "InvalidatePhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePhysicalMaterial()"
  },
  {
    "label": "GetOudatedPhysicalMaterialComponentsCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOudatedPhysicalMaterialComponentsCount()"
  },
  {
    "label": "CreateSplineComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSplineComponent()"
  },
  {
    "label": "CreateSplineComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSplineComponent(const FVector& Scale3D)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostTransacted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTransacted(const FTransactionObjectEvent& InTransactionEvent)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "InitializeProxyLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeProxyLayersWeightmapUsage()"
  },
  {
    "label": "ValidateProxyLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateProxyLayersWeightmapUsage()"
  },
  {
    "label": "UpdateProxyLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProxyLayersWeightmapUsage()"
  },
  {
    "label": "RequestProxyLayersWeightmapUsageUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestProxyLayersWeightmapUsageUpdate()"
  },
  {
    "label": "GetLayersFromMaterial()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetLayersFromMaterial(UMaterialInterface* Material)"
  },
  {
    "label": "GetLayersFromMaterial()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetLayersFromMaterial()"
  },
  {
    "label": "RetrieveTargetLayerNamesFromMaterials()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "RetrieveTargetLayerNamesFromMaterials()"
  },
  {
    "label": "RetrieveTargetLayerInfosFromAllocations()",
    "kind": "Method",
    "detail": "Function (TMap<FName,ULandscapeLayerInfoObject*>)",
    "insertText": "RetrieveTargetLayerInfosFromAllocations()"
  },
  {
    "label": "CreateLayerInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeLayerInfoObject*)",
    "insertText": "CreateLayerInfo(const TCHAR* InLayerName, const ULevel* InLevel, const ULandscapeLayerInfoObject* InTemplate = nullptr)"
  },
  {
    "label": "CreateLayerInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeLayerInfoObject*)",
    "insertText": "CreateLayerInfo(const TCHAR* InLayerName, const ULandscapeLayerInfoObject* InTemplate = nullptr)"
  },
  {
    "label": "FixupWeightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupWeightmaps()"
  },
  {
    "label": "RepairInvalidTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairInvalidTextures()"
  },
  {
    "label": "RemoveInvalidWeightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInvalidWeightmaps()"
  },
  {
    "label": "ChangedPhysMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangedPhysMaterial()"
  },
  {
    "label": "UpgradeSharedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpgradeSharedProperties(ALandscape* InParentLandscape)"
  },
  {
    "label": "FixupSharedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupSharedData(ALandscape* Landscape, bool bMapCheck = false)"
  },
  {
    "label": "SetAbsoluteSectionBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAbsoluteSectionBase(FIntPoint SectionOffset)"
  },
  {
    "label": "RecreateComponentsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateComponentsState()"
  },
  {
    "label": "RecreateComponentsRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateComponentsRenderState(TFunctionRef<void(ULandscapeComponent*)> Fn)"
  },
  {
    "label": "RecreateCollisionComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCollisionComponents()"
  },
  {
    "label": "RemoveXYOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveXYOffsets()"
  },
  {
    "label": "UpdateNaniteMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNaniteMaterials()"
  },
  {
    "label": "UpdateAllComponentMaterialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllComponentMaterialInstances(bool bInInvalidateCombinationMaterials = false)"
  },
  {
    "label": "UpdateAllComponentMaterialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllComponentMaterialInstances(FMaterialUpdateContext& InOutMaterialContext, TArray<class FComponentRecreateRenderStateContext>& InOutRecreateRenderStateContext, bool bInInvalidateCombinationMaterials = false)"
  },
  {
    "label": "GetLayerThumbnailMIC()",
    "kind": "Method",
    "detail": "Function (ULandscapeMaterialInstanceConstant*)",
    "insertText": "GetLayerThumbnailMIC(UMaterialInterface* LandscapeMaterial, FName LayerName, UTexture2D* ThumbnailWeightmap, UTexture2D* ThumbnailHeightmap, ALandscapeProxy* Proxy)"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Import(const FGuid& InGuid, int32 InMinX, int32 InMinY, int32 InMaxX, int32 InMaxY, int32 InNumSubsections, int32 InSubsectionSizeQuads, const TMap<FGuid, TArray<uint16>>& InImportHeightData, const TCHAR* const InHeightmapFileName, const TMap<FGuid, TArray<FLandscapeImportLayerInfo>>& InImportMaterialLayerInfos, ELandscapeImportAlphamapType InImportMaterialLayerType, const TArrayView<const struct FLandscapeLayer>& InImportLayers)"
  },
  {
    "label": "FUVConfiguration()",
    "kind": "Method",
    "detail": "Function (struct FRawMeshExportParams { int32 MaxUVCount = 6 ; enum class EUVMappingType : uint8 { None,RelativeToProxyBoundsUV,HeightmapUV,WeightmapUV,TerrainCoordMapping_XY,TerrainCoordMapping_XZ,TerrainCoordMapping_YZ,LightmapUV,Num } ; struct FUVConfiguration {)",
    "insertText": "FUVConfiguration()"
  },
  {
    "label": "GetNumUVChannelsNeeded()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUVChannelsNeeded()"
  },
  {
    "label": "FRawMeshExportParams()",
    "kind": "Method",
    "detail": "Function (public : TArray<EUVMappingType> ExportUVMappingTypes ; } ; enum class EExportCoordinatesType : uint8 { Absolute,RelativeToProxy,} ; public :)",
    "insertText": "FRawMeshExportParams()"
  },
  {
    "label": "GetUVConfiguration()",
    "kind": "Method",
    "detail": "Function (const FUVConfiguration&)",
    "insertText": "GetUVConfiguration(int32 InComponentIndex)"
  },
  {
    "label": "GetMaterialSlotName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetMaterialSlotName(int32 InComponentIndex)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (public : int32 ExportLOD = INDEX_NONE ; FUVConfiguration UVConfiguration ; EExportCoordinatesType ExportCoordinatesType = EExportCoordinatesType::Absolute ; FName MaterialSlotName =)",
    "insertText": "TEXT(\"LandscapeMat\")"
  },
  {
    "label": "ExportToRawMesh()",
    "kind": "Method",
    "detail": "Function (TOptional<FBoxSphereBounds> ExportBounds ; TOptional<float> SkirtDepth ; TOptional<TArrayView<ULandscapeComponent*>> ComponentsToExport ; TOptional<TArrayView<FUVConfiguration>> ComponentsUVConfiguration ; TOptional<TArrayView<FName>> ComponentsMaterialSlotName ; } ; bool)",
    "insertText": "ExportToRawMesh(const FRawMeshExportParams& InExportParams, FMeshDescription& OutRawMesh)"
  },
  {
    "label": "MakeAsyncNaniteBuildData()",
    "kind": "Method",
    "detail": "Function (TSharedRef<UE::Landscape::Nanite::FAsyncBuildData>)",
    "insertText": "MakeAsyncNaniteBuildData(int32 InLODToExport, const TArrayView<ULandscapeComponent*>& ComponentsToExport)"
  },
  {
    "label": "ExportToRawMeshDataCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportToRawMeshDataCopy(const FRawMeshExportParams& InExportParams, FMeshDescription& OutRawMesh, const UE::Landscape::Nanite::FAsyncBuildData& AsyncData)"
  },
  {
    "label": "CheckGenerateMobilePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckGenerateMobilePlatformData(bool bIsCooking, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsNaniteMeshUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNaniteMeshUpToDate()"
  },
  {
    "label": "UpdateNaniteRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNaniteRepresentation(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "UpdateNaniteRepresentationAsync()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "UpdateNaniteRepresentationAsync(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "InvalidateNaniteRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateNaniteRepresentation(bool bInCheckContentId)"
  },
  {
    "label": "InvalidateOrUpdateNaniteRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateOrUpdateNaniteRepresentation(bool bInCheckContentId, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "GetBoundingRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetBoundingRect()"
  },
  {
    "label": "CreateLandscapeTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "CreateLandscapeTexture(int32 InSizeX, int32 InSizeY, TextureGroup InLODGroup, ETextureSourceFormat InFormat, UObject* OptionalOverrideOuter = nullptr, bool bCompress = false, bool bMipChain = true)"
  },
  {
    "label": "CreateLandscapeTextureArray()",
    "kind": "Method",
    "detail": "Function (UTexture2DArray*)",
    "insertText": "CreateLandscapeTextureArray(int32 InSizeX, int32 InSizeY, int32 Slices, TextureGroup InLODGroup, ETextureSourceFormat InFormat, UObject* OptionalOverrideOuter = nullptr)"
  },
  {
    "label": "CreateLandscapeToolTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "CreateLandscapeToolTexture(int32 InSizeX, int32 InSizeY, TextureGroup InLODGroup, ETextureSourceFormat InFormat)"
  },
  {
    "label": "CreateWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (ULandscapeWeightmapUsage*)",
    "insertText": "CreateWeightmapUsage()"
  },
  {
    "label": "RemoveOverlappingComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlappingComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "SampleRTData()",
    "kind": "Method",
    "detail": "Function (TArray<FLinearColor>)",
    "insertText": "SampleRTData(UTextureRenderTarget2D* InRenderTarget, FLinearColor InRect)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(ALandscape, FLandscapeMaterialChangedDelegate)"
  },
  {
    "label": "OnMaterialChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FLandscapeMaterialChangedDelegate&)",
    "insertText": "OnMaterialChangedDelegate()"
  },
  {
    "label": "CanHaveLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveLayersContent()"
  },
  {
    "label": "UpdateCachedHasLayersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedHasLayersContent(bool InCheckComponentDataIntegrity = false)"
  },
  {
    "label": "GetAsyncWorkMonitor()",
    "kind": "Method",
    "detail": "Function (FAsyncWorkMonitor&)",
    "insertText": "GetAsyncWorkMonitor()"
  },
  {
    "label": "AddTargetLayer()",
    "kind": "Method",
    "detail": "Function (FLandscapeTargetLayerSettings&)",
    "insertText": "AddTargetLayer()"
  },
  {
    "label": "AddTargetLayer()",
    "kind": "Method",
    "detail": "Function (FLandscapeTargetLayerSettings&)",
    "insertText": "AddTargetLayer(const FName& Name, const FLandscapeTargetLayerSettings& TargetLayerSettings, bool bPostEditChange = true)"
  },
  {
    "label": "UpdateTargetLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTargetLayer(const FName& Name, const FLandscapeTargetLayerSettings& TargetLayerSettings, bool bPostEditChange = true)"
  },
  {
    "label": "RemoveTargetLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTargetLayer(const FName& Name, bool bPostEditChange = true)"
  },
  {
    "label": "HasTargetLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTargetLayer(const FName& Name)"
  },
  {
    "label": "HasTargetLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTargetLayer(const FLandscapeTargetLayerSettings& TargetLayerSettings)"
  },
  {
    "label": "HasTargetLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTargetLayer(const ULandscapeLayerInfoObject* LayerInfoObject)"
  },
  {
    "label": "GetTargetLayers()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FLandscapeTargetLayerSettings>&)",
    "insertText": "GetTargetLayers()"
  },
  {
    "label": "AddLayer()",
    "kind": "Method",
    "detail": "Function (protected : class ALandscape ; bool)",
    "insertText": "AddLayer(const FGuid& InLayerGuid)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayer(const FGuid& InLayerGuid)"
  },
  {
    "label": "RemoveObsoleteLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveObsoleteLayers(const TSet<FGuid>& InExistingLayers)"
  },
  {
    "label": "InitializeLayerWithEmptyContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLayerWithEmptyContent(const FGuid& InLayerGuid)"
  },
  {
    "label": "FixupOverriddenSharedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupOverriddenSharedProperties()"
  },
  {
    "label": "SynchronizeUnmarkedSharedProperties()",
    "kind": "Method",
    "detail": "Function (} TArray<FName>)",
    "insertText": "SynchronizeUnmarkedSharedProperties(ALandscapeProxy* InLandscape)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "if(GLandscapeEditModeActive)"
  },
  {
    "label": "CreateNaniteComponents()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CreateNaniteComponents(int32 NumComponents)"
  },
  {
    "label": "PostLoadFixupLandscapeGuidsIfInstanced()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoadFixupLandscapeGuidsIfInstanced()"
  },
  {
    "label": "GetLandscapeProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA public : const TArray<ALandscapeProxy*>&)",
    "insertText": "GetLandscapeProxies()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TCHAR const* LandscapeOverridableTag =)",
    "insertText": "TEXT(\"LandscapeOverridable\")"
  },
  {
    "label": "FLandscapePhysicalMaterialBuilder()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITOR class FLandscapePhysicalMaterialBuilder { public :)",
    "insertText": "FLandscapePhysicalMaterialBuilder(UWorld* InWorld)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build()"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "FLandscapeProxyComponentDataChangedParams()",
    "kind": "Method",
    "detail": "Function (private : UWorld* World ; int32 OudatedPhysicalMaterialComponentsCount ; } ; class FLandscapeProxyComponentDataChangedParams { public :)",
    "insertText": "FLandscapeProxyComponentDataChangedParams(const TSet<ULandscapeComponent*>& InComponents)"
  },
  {
    "label": "ForEachComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachComponent(TFunctionRef<void(const ULandscapeComponent*)> Func)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (const TArray<ULandscapeComponent*>&)",
    "insertText": "GetComponents()"
  }
]