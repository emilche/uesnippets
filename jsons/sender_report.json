[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "SenderReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SenderReport"
  },
  {
    "label": "SenderReport()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_SENDER_REPORT_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_SENDER_REPORT_H_ # include<vector> # include \" modules / rtp_rtcp / source / rtcp_packet . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / report_block . h \" # include \" system_wrappers / include / ntp_time . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class SenderReport : public RtcpPacket { public : uint8_t kPacketType = 2 0 0 ; size_t kMaxNumberOfReportBlocks = 0 x1f ;)",
    "insertText": "SenderReport()"
  },
  {
    "label": "SenderReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SenderReport(const SenderReport&)"
  },
  {
    "label": "SenderReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SenderReport(SenderReport&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SenderReport&)",
    "insertText": "operator(const SenderReport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SenderReport&)",
    "insertText": "operator(SenderReport&&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "SetNtp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNtp(NtpTime ntp)"
  },
  {
    "label": "SetRtpTimestamp()",
    "kind": "Method",
    "detail": "Function (ntp_ = ntp ; } void)",
    "insertText": "SetRtpTimestamp(uint32_t rtp_timestamp)"
  },
  {
    "label": "SetPacketCount()",
    "kind": "Method",
    "detail": "Function (rtp_timestamp_ = rtp_timestamp ; } void)",
    "insertText": "SetPacketCount(uint32_t packet_count)"
  },
  {
    "label": "SetOctetCount()",
    "kind": "Method",
    "detail": "Function (sender_packet_count_ = packet_count ; } void)",
    "insertText": "SetOctetCount(uint32_t octet_count)"
  },
  {
    "label": "AddReportBlock()",
    "kind": "Method",
    "detail": "Function (sender_octet_count_ = octet_count ; } bool)",
    "insertText": "AddReportBlock(const ReportBlock& block)"
  },
  {
    "label": "SetReportBlocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReportBlocks(std::vector<ReportBlock> blocks)"
  },
  {
    "label": "ClearReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearReportBlocks()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (report_blocks_ .)",
    "insertText": "clear()"
  },
  {
    "label": "ntp()",
    "kind": "Method",
    "detail": "Function (} NtpTime)",
    "insertText": "ntp()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  }
]