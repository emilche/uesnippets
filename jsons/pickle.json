[
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "PickleIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PICKLE_H_ # define BASE_PICKLE_H_ # include<stddef . h> # include<stdint . h> # include<string> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / containers / span . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / memory / ref_counted . h \" # include \" base / strings / string_piece . h \" namespace base { class Pickle ; class BASE_EXPORT PickleIterator { public :)",
    "insertText": "PickleIterator() : payload_(nullptr), read_index_(0), end_index_(0)"
  },
  {
    "label": "PickleIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PickleIterator(const Pickle& pickle)"
  },
  {
    "label": "ReadBool()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadBool(bool* result)"
  },
  {
    "label": "ReadInt()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadInt(int* result)"
  },
  {
    "label": "ReadLong()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadLong(long* result)"
  },
  {
    "label": "ReadUInt16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadUInt16(uint16_t* result)"
  },
  {
    "label": "ReadUInt32()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadUInt32(uint32_t* result)"
  },
  {
    "label": "ReadInt64()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadInt64(int64_t* result)"
  },
  {
    "label": "ReadUInt64()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadUInt64(uint64_t* result)"
  },
  {
    "label": "ReadFloat()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadFloat(float* result)"
  },
  {
    "label": "ReadDouble()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadDouble(double* result)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadString(std::string* result)"
  },
  {
    "label": "ReadStringPiece()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadStringPiece(StringPiece* result)"
  },
  {
    "label": "ReadString16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadString16(std::u16string* result)"
  },
  {
    "label": "ReadStringPiece16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadStringPiece16(StringPiece16* result)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadData(const char** data, size_t* length)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadData(base::span<const uint8_t>* data)"
  },
  {
    "label": "ReadBytes()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadBytes(const char** data, size_t length)"
  },
  {
    "label": "ReadLength()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadLength(size_t* result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int result_int ;)",
    "insertText": "if(!ReadInt(&result_int) || result_int < 0)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (* result = static_cast<)",
    "insertText": "size_t(result_int)"
  },
  {
    "label": "ReachedEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReachedEnd()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(size_t size)"
  },
  {
    "label": "GetReadPointerAndAdvance()",
    "kind": "Method",
    "detail": "Function (template<Type> const char*)",
    "insertText": "GetReadPointerAndAdvance()"
  },
  {
    "label": "GetReadPointerAndAdvance()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetReadPointerAndAdvance(size_t num_bytes)"
  },
  {
    "label": "GetReadPointerAndAdvance()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetReadPointerAndAdvance(size_t num_elements, size_t size_element)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (const char* payload_ ; size_t read_index_ ; size_t end_index_ ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, GetReadPointerAndAdvance)"
  },
  {
    "label": "Attachment()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT Pickle { public : class BASE_EXPORT Attachment : public RefCountedThreadSafe<Attachment> { public :)",
    "insertText": "Attachment()"
  },
  {
    "label": "Attachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attachment(const Attachment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Attachment&)",
    "insertText": "operator(const Attachment&)"
  },
  {
    "label": "Pickle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Pickle()"
  },
  {
    "label": "Pickle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pickle(size_t header_size)"
  },
  {
    "label": "Pickle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pickle(const char* data, size_t data_len)"
  },
  {
    "label": "Pickle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pickle(const Pickle& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Pickle&)",
    "insertText": "operator(const Pickle& other)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "WriteBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBool(bool value)"
  },
  {
    "label": "WriteInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInt(value ? 1 : 0)"
  },
  {
    "label": "WriteInt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteInt(int value)"
  },
  {
    "label": "WritePOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePOD(value)"
  },
  {
    "label": "WriteLong()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteLong(long value)"
  },
  {
    "label": "WritePOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePOD(static_cast<int64_t>(value))"
  },
  {
    "label": "WriteUInt16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUInt16(uint16_t value)"
  },
  {
    "label": "WriteUInt32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUInt32(uint32_t value)"
  },
  {
    "label": "WriteInt64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteInt64(int64_t value)"
  },
  {
    "label": "WriteUInt64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUInt64(uint64_t value)"
  },
  {
    "label": "WriteFloat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteFloat(float value)"
  },
  {
    "label": "WriteDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteDouble(double value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteString(const StringPiece& value)"
  },
  {
    "label": "WriteString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString16(const StringPiece16& value)"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteData(const char* data, size_t length)"
  },
  {
    "label": "WriteBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBytes(const void* data, size_t length)"
  },
  {
    "label": "WriteAttachment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteAttachment(scoped_refptr<Attachment> attachment)"
  },
  {
    "label": "ReadAttachment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAttachment(base::PickleIterator* iter, scoped_refptr<Attachment>* attachment)"
  },
  {
    "label": "HasAttachments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttachments()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(size_t additional_capacity)"
  },
  {
    "label": "headerT()",
    "kind": "Method",
    "detail": "Function (struct Header { uint32_t payload_size ; } ; template<class T> T*)",
    "insertText": "headerT()"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(header_size_, sizeof(T))"
  },
  {
    "label": "payload_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "payload_size()"
  },
  {
    "label": "end_of_payload()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "end_of_payload()"
  },
  {
    "label": "header_size()",
    "kind": "Method",
    "detail": "Function (} protected : size_t)",
    "insertText": "header_size()"
  },
  {
    "label": "capacity_after_header()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "capacity_after_header()"
  },
  {
    "label": "ClaimBytes()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ClaimBytes(size_t num_bytes)"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FindNext(size_t header_size, const char* range_start, const char* range_end)"
  },
  {
    "label": "PeekNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekNext(size_t header_size, const char* range_start, const char* range_end, size_t* pickle_size)"
  },
  {
    "label": "WriteBytesStatic()",
    "kind": "Method",
    "detail": "Function (const size_t kPayloadUnit ; private : class PickleIterator ; RAW_PTR_EXCLUSION Header* header_ ; size_t header_size_ ; size_t capacity_after_header_ ; size_t write_offset_ ; template<size_t length> void BASE_EXPORT)",
    "insertText": "WriteBytesStatic(const void* data)"
  },
  {
    "label": "WritePOD()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "WritePOD(const T& data)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (WriteBytesStatic<)",
    "insertText": "sizeof(data)>(&data)"
  },
  {
    "label": "WriteBytesCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBytesCommon(const void* data, size_t length)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, DeepCopyResize)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, Resize)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, PeekNext)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, PeekNextOverflow)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, FindNext)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, FindNextWithIncompleteHeader)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PickleTest, FindNextOverflow)"
  }
]