[
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "before",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "before"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "PickleIterator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PickleIterator(const Pickle& pickle)"
  },
  {
    "label": "ReadBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBool(bool* result)"
  },
  {
    "label": "ReadInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadInt(int* result)"
  },
  {
    "label": "ReadLong()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadLong(long* result)"
  },
  {
    "label": "ReadUInt16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadUInt16(uint16_t* result)"
  },
  {
    "label": "ReadUInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadUInt32(uint32_t* result)"
  },
  {
    "label": "ReadInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadInt64(int64_t* result)"
  },
  {
    "label": "ReadUInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadUInt64(uint64_t* result)"
  },
  {
    "label": "ReadFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFloat(float* result)"
  },
  {
    "label": "ReadDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDouble(double* result)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadString(std::string* result)"
  },
  {
    "label": "ReadStringPiece()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadStringPiece(StringPiece* result)"
  },
  {
    "label": "ReadString16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadString16(std::u16string* result)"
  },
  {
    "label": "ReadStringPiece16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadStringPiece16(StringPiece16* result)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadData(const char** data, size_t* length)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadData(base::span<const uint8_t>* data)"
  },
  {
    "label": "ReadBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBytes(const char** data, size_t length)"
  },
  {
    "label": "ReadBuiltinType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBuiltinType(Type* result)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(size_t size)"
  },
  {
    "label": "Attachment()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Attachment()"
  },
  {
    "label": "Pickle()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Pickle(size_t header_size)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const StringPiece& value)"
  },
  {
    "label": "WriteString16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString16(const StringPiece16& value)"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteData(const char* data, size_t length)"
  },
  {
    "label": "WriteBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBytes(const void* data, size_t length)"
  },
  {
    "label": "WriteAttachment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteAttachment(scoped_refptr<Attachment> attachment)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(size_t additional_capacity)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(size_t new_capacity)"
  },
  {
    "label": "PeekNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekNext(size_t header_size,\n                       const char* range_start,\n                       const char* range_end,\n                       size_t* pickle_size)"
  },
  {
    "label": "WriteBytesStatic()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "WriteBytesStatic(const void* data)"
  },
  {
    "label": "WriteBytesCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBytesCommon(const void* data, size_t length)"
  }
]