[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapId"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionSet"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FMeshMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshMaterialShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderType"
  },
  {
    "label": "CompiledShaderInitializerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompiledShaderInitializerType"
  },
  {
    "label": "CompiledShaderInitializerType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Shader . h \" # include \" MaterialShaderType . h \" class FMaterial ; class FMaterialShaderMapId ; class FShaderCommonCompileJob ; class FShaderCompileJob ; class FUniformExpressionSet ; class FVertexFactoryType ; class FMeshMaterialShader ; enum class EShaderCompileJobPriority : uint8 ; class FMeshMaterialShaderType : public FShaderType { public : struct CompiledShaderInitializerType : FMaterialShaderType::CompiledShaderInitializerType { const FVertexFactoryType* VertexFactoryType ;)",
    "insertText": "CompiledShaderInitializerType(const FShaderType* InType, int32 PermutationId, const FShaderCompilerOutput& CompilerOutput, const FUniformExpressionSet& InUniformExpressionSet, const FSHAHash& InMaterialShaderMapHash, const FString& InDebugDescription, const FShaderPipelineType* InShaderPipeline, const FVertexFactoryType* InVertexFactoryType ): FMaterialShaderType::CompiledShaderInitializerType(InType,PermutationId,CompilerOutput,InUniformExpressionSet,InMaterialShaderMapHash,InShaderPipeline,InVertexFactoryType,InDebugDescription), VertexFactoryType(InVertexFactoryType)"
  },
  {
    "label": "FMeshMaterialShaderType()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FMeshMaterialShaderType(FTypeLayoutDesc& InTypeLayout, const TCHAR* InName, const TCHAR* InSourceFilename, const TCHAR* InFunctionName, uint32 InFrequency, int32 InTotalPermutationCount, ConstructSerializedType InConstructSerializedRef, ConstructCompiledType InConstructCompiledRef, ShouldCompilePermutationType InShouldCompilePermutationRef, ShouldPrecachePermutationType InShouldPrecachePermutationRef, GetRayTracingPayloadTypeType InGetRayTracingPayloadTypeRef, GetShaderBindingLayoutType InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR ModifyCompilationEnvironmentType InModifyCompilationEnvironmentRef, ValidateCompiledResultType InValidateCompiledResultRef, #endif uint32 InTypeSize, const FShaderParametersMetadata* InRootParametersMetadata = nullptr ): FShaderType(EShaderTypeForDynamicCast::MeshMaterial, InTypeLayout, InName,InSourceFilename,InFunctionName,InFrequency,InTotalPermutationCount, InConstructSerializedRef, InConstructCompiledRef, InShouldCompilePermutationRef, InShouldPrecachePermutationRef, InGetRayTracingPayloadTypeRef, InGetShaderBindingLayoutTypeRef, #if WITH_EDITOR InModifyCompilationEnvironmentRef, InValidateCompiledResultRef, #endif InTypeSize, InRootParametersMetadata)"
  },
  {
    "label": "BeginCompileShader()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "BeginCompileShader(EShaderCompileJobPriority Priority, uint32 ShaderMapJobId, int32 PermutationId, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, FSharedShaderCompilerEnvironment* MaterialEnvironment, const FVertexFactoryType* VertexFactoryType, TArray<TRefCountPtr<FShaderCommonCompileJob>>& NewJobs, const FString& DebugGroupName, const TCHAR* DebugDescription, const TCHAR* DebugExtension)"
  },
  {
    "label": "BeginCompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCompileShaderPipeline(EShaderCompileJobPriority Priority, uint32 ShaderMapJobId, int32 PermutationId, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, FSharedShaderCompilerEnvironment* MaterialEnvironment, const FVertexFactoryType* VertexFactoryType, const FShaderPipelineType* ShaderPipeline, TArray<TRefCountPtr<FShaderCommonCompileJob>>& NewJobs, const FString& DebugGroupName, const TCHAR* DebugDescription, const TCHAR* DebugExtension)"
  },
  {
    "label": "FinishCompileShader()",
    "kind": "Method",
    "detail": "Function (FShader*)",
    "insertText": "FinishCompileShader(const FUniformExpressionSet& UniformExpressionSet, const FSHAHash& MaterialShaderMapHash, const FShaderCompileJob& CurrentJob, const FShaderPipelineType* ShaderPipeline, const FString& InDebugDescription)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldCompilePermutation(EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, const FVertexFactoryType* VertexFactoryType, int32 PermutationId, EShaderPermutationFlags Flags)"
  },
  {
    "label": "ShouldCompileVertexFactoryPermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileVertexFactoryPermutation(EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, const FVertexFactoryType* VertexFactoryType, const FShaderType* ShaderType, EShaderPermutationFlags Flags)"
  },
  {
    "label": "ShouldCompileVertexFactoryPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileVertexFactoryPipeline(const FShaderPipelineType* ShaderPipelineType, EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, const FVertexFactoryType* VertexFactoryType, EShaderPermutationFlags Flags)"
  },
  {
    "label": "ShouldCompilePipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePipeline(const FShaderPipelineType* ShaderPipelineType, EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, const FVertexFactoryType* VertexFactoryType, EShaderPermutationFlags Flags)"
  },
  {
    "label": "SetupCompileEnvironment()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetupCompileEnvironment(EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, const FVertexFactoryType* VertexFactoryType, int32 PermutationId, EShaderPermutationFlags PermutationFlags, FShaderCompilerEnvironment& Environment)"
  }
]