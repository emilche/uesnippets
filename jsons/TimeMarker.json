[
  {
    "label": "FTimeMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeMarker"
  },
  {
    "label": "FTimeMarker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Math / Color . h \" # include \" Insights / ITimingViewSession . h \" namespace UE::Insights::TimingProfiler { class FTimeMarker : public Timing::ITimeMarker { public :)",
    "insertText": "FTimeMarker()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (Time = InTime ; } const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } const FLinearColor&)",
    "insertText": "GetColor()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; } bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsHighlighted()",
    "kind": "Method",
    "detail": "Function (bIsVisible = bOnOff ; } bool)",
    "insertText": "IsHighlighted()"
  },
  {
    "label": "GetCrtTextWidth()",
    "kind": "Method",
    "detail": "Function (bIsHighlighted = bOnOff ; } float)",
    "insertText": "GetCrtTextWidth()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (CrtTextWidth = CrtTextWidth* 0 . 6 f + InTextWidth* 0 . 4 f ; } private : double Time = 0 . 0 ; FString Name =)",
    "insertText": "TEXT(\"T\")"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor Color =)",
    "insertText": "FLinearColor(1.0f, 1.0f, 1.0f, 0.5f)"
  }
]