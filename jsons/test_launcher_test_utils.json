[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "ValidateKeyValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_TEST_LAUNCHER_TEST_UTILS_H_ # define BASE_TEST_LAUNCHER_TEST_LAUNCHER_TEST_UTILS_H_ # include<stddef . h> # include<string> # include \" base / values . h \" # include \" testing / gtest / include / gtest / gtest . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class FilePath ; namespace test_launcher_utils { bool)",
    "insertText": "ValidateKeyValue(const Value::Dict& dict, const std::string& key, const std::string& expected_value)"
  },
  {
    "label": "ValidateKeyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateKeyValue(const Value::Dict& dict, const std::string& key, int64_t expected_value)"
  },
  {
    "label": "ValidateTestResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTestResult(const Value::Dict& iteration_data, const std::string& test_name, const std::string& status, size_t result_part_count, bool have_running_info = true)"
  },
  {
    "label": "ValidateTestLocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTestLocations(const Value::Dict& test_locations, const std::string& test_case_name)"
  },
  {
    "label": "ValidateTestLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTestLocation(const Value::Dict& test_locations, const std::string& test_name, const std::string& file, int line)"
  },
  {
    "label": "ReadSummary()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value::Dict>)",
    "insertText": "ReadSummary(const FilePath& path)"
  }
]