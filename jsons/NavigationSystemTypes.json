[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UNavCollision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavCollision"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "FNavigationOctree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationOctree"
  },
  {
    "label": "UNavigationPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationPath"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "INavigationInvokerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationInvokerInterface"
  },
  {
    "label": "FCompositeNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeNavModifier"
  },
  {
    "label": "FNavigationLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationLink"
  },
  {
    "label": "FNavigationSegmentLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSegmentLink"
  },
  {
    "label": "FNavigationQueryFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationQueryFilter"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "FPathFindingQueryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQueryData"
  },
  {
    "label": "FPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQuery"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMoveRequestCustomData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMoveRequestCustomData"
  },
  {
    "label": "FNavigationInvokerRaw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationInvokerRaw"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FNavigationInvoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationInvoker"
  },
  {
    "label": "ECreateIfMissing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECreateIfMissing"
  },
  {
    "label": "FNavLinkOwnerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkOwnerData"
  },
  {
    "label": "FPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPathFindingQuery(FNavPathSharedRef PathToRecalculate, const ANavigationData* NavDataOverride = NULL)"
  },
  {
    "label": "ComputeCostLimitFromHeuristic()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "ComputeCostLimitFromHeuristic(const FVector& StartPos, const FVector& EndPos, const FVector::FReal HeuristicScale, const FVector::FReal CostLimitFactor, const FVector::FReal MinimumCostLimit)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCollision(UBodySetup* RigidBody, TNavStatArray<FVector>& OutVertexBuffer, TNavStatArray<int32>& OutIndexBuffer, const FTransform& ComponentToWorld = FTransform::Identity)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCollision(UBodySetup* RigidBody, UNavCollision* NavCollision)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCollision(const FKAggregateGeom& AggGeom, UNavCollision& NavCollision)"
  },
  {
    "label": "FNavLinkOwnerData()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavLinkOwnerData(const AActor& InActor)"
  },
  {
    "label": "FNavLinkOwnerData()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavLinkOwnerData(const USceneComponent& InComponent)"
  },
  {
    "label": "SetNavLinkProcessorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavLinkProcessorDelegate(const FNavLinkProcessorDataDelegate& NewDelegate)"
  },
  {
    "label": "SetNavLinkSegmentProcessorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavLinkSegmentProcessorDelegate(const FNavLinkSegmentProcessorDataDelegate& NewDelegate)"
  },
  {
    "label": "ProcessNavLinkAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkAndAppend(FCompositeNavModifier* OUT CompositeModifier, const AActor* Actor, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkAndAppend(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkSegmentAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkSegmentAndAppend(FCompositeNavModifier* OUT CompositeModifier, const AActor* Actor, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkSegmentAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkSegmentAndAppend(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "DefaultNavLinkProcessorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultNavLinkProcessorImpl(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "DefaultNavLinkSegmentProcessorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultNavLinkSegmentProcessorImpl(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "IsBodyNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodyNavigationRelevant(const UBodySetup& IN BodySetup)"
  }
]