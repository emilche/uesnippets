[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UNavCollision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavCollision"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "FNavigationOctree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationOctree"
  },
  {
    "label": "UNavigationPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationPath"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "INavigationInvokerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationInvokerInterface"
  },
  {
    "label": "FCompositeNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeNavModifier"
  },
  {
    "label": "FNavigationLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationLink"
  },
  {
    "label": "FNavigationSegmentLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSegmentLink"
  },
  {
    "label": "FNavigationQueryFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationQueryFilter"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "FPathFindingQueryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQueryData"
  },
  {
    "label": "FPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQuery"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMoveRequestCustomData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMoveRequestCustomData"
  },
  {
    "label": "FNavigationInvokerRaw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationInvokerRaw"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FNavigationInvoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationInvoker"
  },
  {
    "label": "ECreateIfMissing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECreateIfMissing"
  },
  {
    "label": "FNavLinkOwnerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkOwnerData"
  },
  {
    "label": "NAVSYS_DEBUG()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # include \" NavFilters / NavigationQueryFilter . h \" # include \" AI / NavigationSystemConfig . h \" # include \" AI / Navigation / NavLinkDefinition . h \" # include \" Math / GenericOctreePublic . h \" # include \" AI / NavigationModifier . h \" # endif # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / Navigation / NavAgentSelector . h \" # include \" UObject / WeakInterfacePtr . h \" # define)",
    "insertText": "NAVSYS_DEBUG(0 && UE_BUILD_DEBUG) #define RECAST_INTERNAL_DEBUG_DATA (!UE_BUILD_SHIPPING)"
  },
  {
    "label": "FPathFindingQueryData()",
    "kind": "Method",
    "detail": "Function (class UBodySetup ; class UNavCollision ; struct FKAggregateGeom ; class FNavigationOctree ; class UNavigationPath ; class ANavigationData ; class INavigationInvokerInterface ; struct FCompositeNavModifier ; struct FNavigationLink ; struct FNavigationSegmentLink ; struct FNavigationQueryFilter ; typedef TSharedPtr<const FNavigationQueryFilter,ESPMode::ThreadSafe> FSharedConstNavQueryFilter ; typedef TSharedPtr<struct FNavigationPath,ESPMode::ThreadSafe> FNavPathSharedPtr ; struct FPathFindingQueryData { TWeakObjectPtr<const UObject> Owner ; FVector StartLocation ; FVector EndLocation ; FSharedConstNavQueryFilter QueryFilter ; FVector::FReal CostLimit ; int32 NavDataFlags ; uint32 bAllowPartialPaths : 1 ; uint32 bRequireNavigableEndLocation : 1 ;)",
    "insertText": "FPathFindingQueryData() : StartLocation(FNavigationSystem::InvalidLocation), EndLocation(FNavigationSystem::InvalidLocation), CostLimit(TNumericLimits<FVector::FReal>::Max()), NavDataFlags(0), bAllowPartialPaths(true), bRequireNavigableEndLocation(true)"
  },
  {
    "label": "FPathFindingQueryData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPathFindingQueryData(const UObject* InOwner, const FVector& InStartLocation, const FVector& InEndLocation, FSharedConstNavQueryFilter InQueryFilter = nullptr, int32 InNavDataFlags = 0, bool bInAllowPartialPaths = true, const FVector::FReal InCostLimit = TNumericLimits<FVector::FReal>::Max(), const bool bInRequireNavigableEndLocation = true) : Owner(InOwner), StartLocation(InStartLocation), EndLocation(InEndLocation), QueryFilter(InQueryFilter), CostLimit(InCostLimit), NavDataFlags(InNavDataFlags), bAllowPartialPaths(bInAllowPartialPaths), bRequireNavigableEndLocation(bInRequireNavigableEndLocation)"
  },
  {
    "label": "FPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPathFindingQuery : public FPathFindingQueryData { TWeakObjectPtr<const ANavigationData> NavData ; FNavPathSharedPtr PathInstanceToFill ; FNavAgentProperties NavAgentProperties ;)",
    "insertText": "FPathFindingQuery() : FPathFindingQueryData()"
  },
  {
    "label": "FPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPathFindingQuery(const UObject* InOwner, const ANavigationData& InNavData, const FVector& Start, const FVector& End, FSharedConstNavQueryFilter SourceQueryFilter = NULL, FNavPathSharedPtr InPathInstanceToFill = NULL, const FVector::FReal CostLimit = TNumericLimits<FVector::FReal>::Max(), const bool bInRequireNavigableEndLocation = true)"
  },
  {
    "label": "FPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPathFindingQuery(const INavAgentInterface& InNavAgent, const ANavigationData& InNavData, const FVector& Start, const FVector& End, FSharedConstNavQueryFilter SourceQueryFilter = NULL, FNavPathSharedPtr InPathInstanceToFill = NULL, const FVector::FReal CostLimit = TNumericLimits<FVector::FReal>::Max(), const bool bInRequireNavigableEndLocation = true)"
  },
  {
    "label": "FPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPathFindingQuery(FNavPathSharedRef PathToRecalculate, const ANavigationData* NavDataOverride = NULL)"
  },
  {
    "label": "SetPathInstanceToUpdate()",
    "kind": "Method",
    "detail": "Function (FPathFindingQuery&)",
    "insertText": "SetPathInstanceToUpdate(FNavPathSharedPtr InPathInstanceToFill)"
  },
  {
    "label": "SetAllowPartialPaths()",
    "kind": "Method",
    "detail": "Function (PathInstanceToFill = InPathInstanceToFill ; return* this ; } FPathFindingQuery&)",
    "insertText": "SetAllowPartialPaths(const bool bAllow)"
  },
  {
    "label": "SetRequireNavigableEndLocation()",
    "kind": "Method",
    "detail": "Function (bAllowPartialPaths = bAllow ; return* this ; } FPathFindingQuery&)",
    "insertText": "SetRequireNavigableEndLocation(const bool bRequire)"
  },
  {
    "label": "SetNavAgentProperties()",
    "kind": "Method",
    "detail": "Function (bRequireNavigableEndLocation = bRequire ; return* this ; } FPathFindingQuery&)",
    "insertText": "SetNavAgentProperties(const FNavAgentProperties& InNavAgentProperties)"
  },
  {
    "label": "ComputeCostLimitFromHeuristic()",
    "kind": "Method",
    "detail": "Function (NavAgentProperties = InNavAgentProperties ; return* this ; } FVector::FReal)",
    "insertText": "ComputeCostLimitFromHeuristic(const FVector& StartPos, const FVector& EndPos, const FVector::FReal HeuristicScale, const FVector::FReal CostLimitFactor, const FVector::FReal MinimumCostLimit)"
  },
  {
    "label": "FNavigationInvokerRaw()",
    "kind": "Method",
    "detail": "Function (} ; namespace EPathFindingMode { enum Type { Regular,Hierarchical,} ; } ; struct FMoveRequestCustomData { } ; typedef TSharedPtr<FMoveRequestCustomData,ESPMode::ThreadSafe> FCustomMoveSharedPtr ; typedef TWeakPtr<FMoveRequestCustomData,ESPMode::ThreadSafe> FCustomMoveWeakPtr ; struct FNavigationInvokerRaw { FVector Location ; float RadiusMin ; float RadiusMax ; FNavAgentSelector SupportedAgents ; ENavigationInvokerPriority Priority ;)",
    "insertText": "FNavigationInvokerRaw(const FVector& InLocation, float Min, float Max, const FNavAgentSelector& InSupportedAgents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "FNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (} ; class AActor ; struct FNavigationInvoker { TWeakObjectPtr<AActor> Actor ; TWeakInterfacePtr<INavigationInvokerInterface> Object ; float GenerationRadius ; float RemovalRadius ; FNavAgentSelector SupportedAgents ; ENavigationInvokerPriority Priority ;)",
    "insertText": "FNavigationInvoker()"
  },
  {
    "label": "FNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationInvoker(AActor& InActor, float InGenerationRadius, float InRemovalRadius, const FNavAgentSelector& InSupportedAgents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "FNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationInvoker(INavigationInvokerInterface& InObject, float InGenerationRadius, float InRemovalRadius, const FNavAgentSelector& InSupportedAgents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocation(FVector& OutLocation)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (} ; namespace NavigationHelper { void)",
    "insertText": "GatherCollision(UBodySetup* RigidBody, TNavStatArray<FVector>& OutVertexBuffer, TNavStatArray<int32>& OutIndexBuffer, const FTransform& ComponentToWorld = FTransform::Identity)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCollision(UBodySetup* RigidBody, UNavCollision* NavCollision)"
  },
  {
    "label": "GatherCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherCollision(const FKAggregateGeom& AggGeom, UNavCollision& NavCollision)"
  },
  {
    "label": "FNavLinkOwnerData()",
    "kind": "Method",
    "detail": "Function (} namespace FNavigationSystem { enum ECreateIfMissing { Invalid = - 1,DontCreate = 0,Create = 1,} ; typedef ECreateIfMissing ECreateIfEmpty ; } namespace NavigationHelper { struct FNavLinkOwnerData { const AActor* Actor ; FTransform LinkToWorld ;)",
    "insertText": "FNavLinkOwnerData() : Actor(nullptr)"
  },
  {
    "label": "FNavLinkOwnerData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavLinkOwnerData(const AActor& InActor)"
  },
  {
    "label": "FNavLinkOwnerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavLinkOwnerData(const USceneComponent& InComponent)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FNavLinkProcessorDelegate, FCompositeNavModifier*, const AActor*, const TArray<FNavigationLink>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FNavLinkSegmentProcessorDelegate, FCompositeNavModifier*, const AActor*, const TArray<FNavigationSegmentLink>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FNavLinkProcessorDataDelegate, FCompositeNavModifier*, const FNavLinkOwnerData&, const TArray<FNavigationLink>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FNavLinkSegmentProcessorDataDelegate, FCompositeNavModifier*, const FNavLinkOwnerData&, const TArray<FNavigationSegmentLink>&)"
  },
  {
    "label": "SetNavLinkProcessorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavLinkProcessorDelegate(const FNavLinkProcessorDataDelegate& NewDelegate)"
  },
  {
    "label": "SetNavLinkSegmentProcessorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavLinkSegmentProcessorDelegate(const FNavLinkSegmentProcessorDataDelegate& NewDelegate)"
  },
  {
    "label": "ProcessNavLinkAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkAndAppend(FCompositeNavModifier* OUT CompositeModifier, const AActor* Actor, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkAndAppend(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkSegmentAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkSegmentAndAppend(FCompositeNavModifier* OUT CompositeModifier, const AActor* Actor, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "ProcessNavLinkSegmentAndAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavLinkSegmentAndAppend(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "DefaultNavLinkProcessorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultNavLinkProcessorImpl(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationLink>& IN NavLinks)"
  },
  {
    "label": "DefaultNavLinkSegmentProcessorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultNavLinkSegmentProcessorImpl(FCompositeNavModifier* OUT CompositeModifier, const FNavLinkOwnerData& OwnerData, const TArray<FNavigationSegmentLink>& IN NavLinks)"
  },
  {
    "label": "IsBodyNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodyNavigationRelevant(const UBodySetup& IN BodySetup)"
  }
]