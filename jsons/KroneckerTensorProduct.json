[
  {
    "label": "KroneckerProductBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KroneckerProductBase"
  },
  {
    "label": "KroneckerProduct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KroneckerProduct"
  },
  {
    "label": "KroneckerProductSparse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KroneckerProductSparse"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "KroneckerProductBase()",
    "kind": "Method",
    "detail": "Function (# ifndef KRONECKER_TENSOR_PRODUCT_H # define KRONECKER_TENSOR_PRODUCT_H namespace Eigen { template<Derived> class KroneckerProductBase : public ReturnByValue<Derived> { private : typedef internal::traits<Derived> Traits ; typedef Traits::Scalar Scalar ; protected : typedef Traits::Lhs Lhs ; typedef Traits::Rhs Rhs ; public :)",
    "insertText": "KroneckerProductBase(const Lhs& A, const Rhs& B) : m_A(A), m_B(B)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"
  },
  {
    "label": "KroneckerProduct()",
    "kind": "Method",
    "detail": "Function (} protected : Lhs::Nested m_A ; Rhs::Nested m_B ; } ; template<Lhs,Rhs> class KroneckerProduct : public KroneckerProductBase<KroneckerProduct<Lhs,Rhs>> { private : typedef KroneckerProductBase<KroneckerProduct> Base ; using Base::m_A ; using Base::m_B ; public :)",
    "insertText": "KroneckerProduct(const Lhs& A, const Rhs& B) : Base(A, B)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "evalTo(Dest& dst)"
  },
  {
    "label": "KroneckerProductSparse()",
    "kind": "Method",
    "detail": "Function (} ; template<Lhs,Rhs> class KroneckerProductSparse : public KroneckerProductBase<KroneckerProductSparse<Lhs,Rhs>> { private : typedef KroneckerProductBase<KroneckerProductSparse> Base ; using Base::m_A ; using Base::m_B ; public :)",
    "insertText": "KroneckerProductSparse(const Lhs& A, const Rhs& B) : Base(A, B)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const int BlockRows = Rhs::RowsAtCompileTime,BlockCols = Rhs::ColsAtCompileTime ; const Index Br = m_B .)",
    "insertText": "rows(), Bc = m_B.cols()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "resize(this->rows(), this->cols())"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "resizeNonZeros(0)"
  },
  {
    "label": "lhs1()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Lhs,Dynamic>::type Lhs1 ; typedef internal::remove_all<Lhs1>::type Lhs1Cleaned ; const Lhs1)",
    "insertText": "lhs1(m_A)"
  },
  {
    "label": "rhs1()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Rhs,Dynamic>::type Rhs1 ; typedef internal::remove_all<Rhs1>::type Rhs1Cleaned ; const Rhs1)",
    "insertText": "rhs1(m_B)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (typedef Eigen::InnerIterator<Lhs1Cleaned> LhsInnerIterator ; typedef Eigen::InnerIterator<Rhs1Cleaned> RhsInnerIterator ; { VectorXi nnzA =)",
    "insertText": "Zero(Dest::IsRowMajor ? m_A.rows() : m_A.cols())"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (VectorXi nnzB =)",
    "insertText": "Zero(Dest::IsRowMajor ? m_B.rows() : m_B.cols())"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (Matrix<int,Dynamic,Dynamic,ColMajor> nnzAB = nnzB* nnzA .)",
    "insertText": "transpose()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "reserve(VectorXi::Map(nnzAB.data(), nnzAB.size()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index kA=0; kA < m_A.outerSize(); ++kA)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Index i = itA .)",
    "insertText": "row() * Br + itB.row(), j = itA.col() * Bc + itB.col()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "insert(i,j) = itA.value() * itB.value()"
  },
  {
    "label": "EvalToRowMajor()",
    "kind": "Method",
    "detail": "Function (} } } } } namespace internal { template<_Lhs,_Rhs> struct traits<KroneckerProduct<_Lhs,_Rhs>> { typedef remove_all<_Lhs>::type Lhs ; typedef remove_all<_Rhs>::type Rhs ; typedef ScalarBinaryOpTraits<Lhs::Scalar,Rhs::Scalar>::ReturnType Scalar ; typedef promote_index_type<Lhs::StorageIndex,Rhs::StorageIndex>::type StorageIndex ; enum { Rows = size_at_compile_time<traits<Lhs>::RowsAtCompileTime,traits<Rhs>::RowsAtCompileTime>::ret,Cols = size_at_compile_time<traits<Lhs>::ColsAtCompileTime,traits<Rhs>::ColsAtCompileTime>::ret,MaxRows = size_at_compile_time<traits<Lhs>::MaxRowsAtCompileTime,traits<Rhs>::MaxRowsAtCompileTime>::ret,MaxCols = size_at_compile_time<traits<Lhs>::MaxColsAtCompileTime,traits<Rhs>::MaxColsAtCompileTime>::ret } ; typedef Matrix<Scalar,Rows,Cols> ReturnType ; } ; template<_Lhs,_Rhs> struct traits<KroneckerProductSparse<_Lhs,_Rhs>> { typedef MatrixXpr XprKind ; typedef remove_all<_Lhs>::type Lhs ; typedef remove_all<_Rhs>::type Rhs ; typedef ScalarBinaryOpTraits<Lhs::Scalar,Rhs::Scalar>::ReturnType Scalar ; typedef cwise_promote_storage_type<traits<Lhs>::StorageKind,traits<Rhs>::StorageKind,scalar_product_op<Lhs::Scalar,Rhs::Scalar>>::ret StorageKind ; typedef promote_index_type<Lhs::StorageIndex,Rhs::StorageIndex>::type StorageIndex ; enum { LhsFlags = Lhs::Flags,RhsFlags = Rhs::Flags,RowsAtCompileTime = size_at_compile_time<traits<Lhs>::RowsAtCompileTime,traits<Rhs>::RowsAtCompileTime>::ret,ColsAtCompileTime = size_at_compile_time<traits<Lhs>::ColsAtCompileTime,traits<Rhs>::ColsAtCompileTime>::ret,MaxRowsAtCompileTime = size_at_compile_time<traits<Lhs>::MaxRowsAtCompileTime,traits<Rhs>::MaxRowsAtCompileTime>::ret,MaxColsAtCompileTime = size_at_compile_time<traits<Lhs>::MaxColsAtCompileTime,traits<Rhs>::MaxColsAtCompileTime>::ret,)",
    "insertText": "EvalToRowMajor(int(LhsFlags) & int(RhsFlags) & RowMajorBit), RemovedBits = ~(EvalToRowMajor ? 0 : RowMajorBit), Flags = ((int(LhsFlags) | int(RhsFlags)) & HereditaryBits & RemovedBits)"
  },
  {
    "label": "kroneckerProduct()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Scalar,0,StorageIndex> ReturnType ; } ; } template<A,B> KroneckerProduct<A,B>)",
    "insertText": "kroneckerProduct(const MatrixBase<A>& a, const MatrixBase<B>& b)"
  },
  {
    "label": "kroneckerProduct()",
    "kind": "Method",
    "detail": "Function (} template<A,B> KroneckerProductSparse<A,B>)",
    "insertText": "kroneckerProduct(const EigenBase<A>& a, const EigenBase<B>& b)"
  }
]