[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "IMediaTickable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTickable"
  },
  {
    "label": "FMediaTicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaTicker"
  },
  {
    "label": "FMediaTicker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Runnable . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" IMediaTicker . h \" class FEvent ; class IMediaTickable ; class FMediaTicker : public FRunnable,public IMediaTicker { public :)",
    "insertText": "FMediaTicker()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "AddTickable()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddTickable(const TSharedRef<IMediaTickable, ESPMode::ThreadSafe>& Tickable)"
  },
  {
    "label": "RemoveTickable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTickable(const TSharedRef<IMediaTickable, ESPMode::ThreadSafe>& Tickable)"
  },
  {
    "label": "TickTickables()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TickTickables()"
  }
]