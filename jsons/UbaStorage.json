[
  {
    "label": "Config",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Config"
  },
  {
    "label": "FileAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileAccessor"
  },
  {
    "label": "Trace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trace"
  },
  {
    "label": "WorkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkManager"
  },
  {
    "label": "DirectoryEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DirectoryEntry"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Storage"
  },
  {
    "label": "RetrieveResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RetrieveResult"
  },
  {
    "label": "CachedFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CachedFileInfo"
  },
  {
    "label": "WriteResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WriteResult"
  },
  {
    "label": "StorageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StorageCreateInfo"
  },
  {
    "label": "BufferSlots",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferSlots"
  },
  {
    "label": "StorageImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StorageImpl"
  },
  {
    "label": "CasEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CasEntry"
  },
  {
    "label": "FileEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileEntry"
  },
  {
    "label": "DeferedCasCreation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferedCasCreation"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (# pragma once # define Local_GetLongPathNameW uba::GetLongPathNameW # include \" UbaFile . h \" # include \" UbaFileMapping . h \" # include \" UbaLogger . h \" # include \" UbaMemory . h \" # include \" UbaPathUtils . h \" # include \" UbaStats . h \" # define UBA_USE_SPARSEFILE 0 namespace uba { class Config ; class FileAccessor ; class Trace ; class WorkManager ; struct DirectoryEntry ; CasKey EmptyFileKey ; class Storage { public : ~)",
    "insertText": "Storage()"
  },
  {
    "label": "StoreCompressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StoreCompressed()"
  },
  {
    "label": "PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummary(Logger& logger)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reset()"
  },
  {
    "label": "SaveCasTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCasTable(bool deleteIsRunningfile, bool deleteDropped = true)"
  },
  {
    "label": "GetStorageCapacity()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetStorageCapacity()"
  },
  {
    "label": "GetZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetZone(StringBufferBase& out)"
  },
  {
    "label": "HasProxy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProxy(u32 clientId)"
  },
  {
    "label": "DecompressMemoryToMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressMemoryToMemory(u8* compressedData, u8* writeData, u64 decompressedSize, const tchar* readHint, const tchar* writeHint)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const tchar* dir)"
  },
  {
    "label": "DeleteCasForFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteCasForFile(const tchar* file)"
  },
  {
    "label": "RetrieveCasFile()",
    "kind": "Method",
    "detail": "Function (struct RetrieveResult { CasKey casKey ; u64 size = 0 ; MappedView view ; } ; bool)",
    "insertText": "RetrieveCasFile(RetrieveResult& out, const CasKey& casKey, const tchar* hint, FileMappingBuffer* mappingBuffer = nullptr, u64 memoryMapAlignment = 1, bool allowProxy = true)"
  },
  {
    "label": "VerifyAndGetCachedFileInfo()",
    "kind": "Method",
    "detail": "Function (struct CachedFileInfo { CasKey casKey ; } ; bool)",
    "insertText": "VerifyAndGetCachedFileInfo(CachedFileInfo& out, StringKey fileNameKey, u64 verifiedLastWriteTime, u64 verifiedSize)"
  },
  {
    "label": "InvalidateCachedFileInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InvalidateCachedFileInfo(StringKey fileNameKey)"
  },
  {
    "label": "StoreCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreCasFile(CasKey& out, const tchar* fileName, const CasKey& casKeyOverride, bool deferCreation, bool fileIsCompressed)"
  },
  {
    "label": "StoreCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreCasFile(CasKey& out, StringKey fileNameKey, const tchar* fileName, FileMappingHandle mappingHandle, u64 mappingOffset, u64 fileSize, const tchar* hint, bool deferCreation = false, bool keepMappingInMemory = false)"
  },
  {
    "label": "DropCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropCasFile(const CasKey& casKey, bool forceDelete, const tchar* hint)"
  },
  {
    "label": "ReportBadCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReportBadCasFile(const CasKey& casKey)"
  },
  {
    "label": "CalculateCasKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateCasKey(CasKey& out, const tchar* fileName)"
  },
  {
    "label": "CopyOrLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyOrLink(const CasKey& casKey, const tchar* destination, u32 fileAttributes, bool writeCompressed = false)"
  },
  {
    "label": "FakeCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FakeCopy(const CasKey& casKey, const tchar* destination, u64 size = 0, u64 lastWritten = 0, bool deleteExisting = true)"
  },
  {
    "label": "GetCasFileName()",
    "kind": "Method",
    "detail": "Function (# if ! UBA_USE_SPARSEFILE bool)",
    "insertText": "GetCasFileName(StringBufferBase& out, const CasKey& casKey)"
  },
  {
    "label": "MapView()",
    "kind": "Method",
    "detail": "Function (# endif MappedView)",
    "insertText": "MapView(const CasKey& casKey, const tchar* hint)"
  },
  {
    "label": "UnmapView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapView(const MappedView& view, const tchar* hint)"
  },
  {
    "label": "ReportFileWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFileWrite(StringKey fileNameKey, const tchar* fileName)"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (StorageStats&)",
    "insertText": "Stats()"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStats(StorageStats& stats)"
  },
  {
    "label": "GetMappingString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMappingString(StringBufferBase& out, FileMappingHandle mappingHandle, u64 offset)"
  },
  {
    "label": "SetTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrace(Trace* trace, bool detailed)"
  },
  {
    "label": "Ping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Ping()"
  },
  {
    "label": "WriteCompressed()",
    "kind": "Method",
    "detail": "Function (} struct WriteResult { FileMappingHandle mappingHandle ; u64 size = InvalidValue ; u64 offset = InvalidValue ; } ; bool)",
    "insertText": "WriteCompressed(WriteResult& out, const tchar* from, FileHandle readHandle, u8* readMem, u64 fileSize, const tchar* toFile, const void* header, u64 headerSize, u64 lastWriteTime = 0)"
  },
  {
    "label": "StorageCreateInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct StorageCreateInfo {)",
    "insertText": "StorageCreateInfo(const tchar* rootDir_, LogWriter& w) : writer(w), rootDir(rootDir_)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(Config& config)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (LogWriter& writer ; const tchar* rootDir ; u64 casCapacityBytes = 2 0 llu* 1 0 2 4* 1 0 2 4* 1 0 2 4 ; u32 maxParallelCopyOrLink = 1 0 0 0 ; bool storeCompressed = true ; bool manuallyHandleOverflow = false ; WorkManager* workManager = nullptr ; } ; struct BufferSlots { u8*)",
    "insertText": "Pop()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(u8* slot)"
  },
  {
    "label": "BufferSlots()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BufferSlots()"
  },
  {
    "label": "StorageImpl()",
    "kind": "Method",
    "detail": "Function (ReaderWriterLock m_slotsLock ; Vector<u8*> m_slots ; } ; u64 BufferSlotSize = 1 6* 1 0 2 4* 1 0 2 4 ; u64 BufferSlotHalfSize = BufferSlotSize / 2 ; class StorageImpl : public Storage { public :)",
    "insertText": "StorageImpl(const StorageCreateInfo& info, const tchar* logPrefix = TC(\"UbaStorage\"))"
  },
  {
    "label": "StorageImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StorageImpl()"
  },
  {
    "label": "LoadCasTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCasTable(bool logStats = true, bool alwaysCheckAllFiles = false)"
  },
  {
    "label": "CheckCasContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckCasContent(u32 workerCount)"
  },
  {
    "label": "CheckFileTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFileTable(const tchar* searchPath, u32 workerCount)"
  },
  {
    "label": "GetTempPath()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetTempPath()"
  },
  {
    "label": "DeleteAllCas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteAllCas()"
  },
  {
    "label": "DecompressFileToMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressFileToMemory(const tchar* fileName, FileHandle fileHandle, u8* dest, u64 decompressedSize, const tchar* writeHint)"
  },
  {
    "label": "HasCasFile()",
    "kind": "Method",
    "detail": "Function (struct CasEntry ; bool)",
    "insertText": "HasCasFile(const CasKey& casKey, CasEntry** out = nullptr)"
  },
  {
    "label": "EnsureCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureCasFile(const CasKey& casKey, const tchar* fileName)"
  },
  {
    "label": "CalculateCasKey()",
    "kind": "Method",
    "detail": "Function (CasKey)",
    "insertText": "CalculateCasKey(const tchar* fileName, FileHandle fileHandle, u64 fileSize, bool storeCompressed)"
  },
  {
    "label": "CalculateCasKey()",
    "kind": "Method",
    "detail": "Function (CasKey)",
    "insertText": "CalculateCasKey(u8* fileMem, u64 fileSize, bool storeCompressed)"
  },
  {
    "label": "StoreCasKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreCasKey(CasKey& out, const tchar* fileName, const CasKey& casKeyOverride, bool fileIsCompressed)"
  },
  {
    "label": "StoreCasKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreCasKey(CasKey& out, const StringKey& fileNameKey, const tchar* fileName, const CasKey& casKeyOverride, bool fileIsCompressed)"
  },
  {
    "label": "IsFileVerified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileVerified(const StringKey& fileNameKey)"
  },
  {
    "label": "ReportFileInfoWeak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFileInfoWeak(const StringKey& fileNameKey, u64 verifiedLastWriteTime, u64 verifiedSize)"
  },
  {
    "label": "WriteCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCompressed(WriteResult& out, const tchar* from, const tchar* toFile)"
  },
  {
    "label": "WriteMemToCompressedFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteMemToCompressedFile(FileAccessor& destination, u32 workCount, const u8* uncompressedData, u64 fileSize, u64 maxUncompressedBlock, u64& totalWritten)"
  },
  {
    "label": "WriteCasFileNoCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCasFileNoCheck(WriteResult& out, const tchar* fileName, bool fileIsCompressed, const tchar* casFile, bool storeCompressed)"
  },
  {
    "label": "WriteCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCasFile(WriteResult& out, const tchar* fileName, bool fileIsCompressed, const CasKey& casKey)"
  },
  {
    "label": "VerifyExisting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyExisting(bool& outReturnValue, ScopedWriteLock& entryLock, const CasKey& casKey, CasEntry& casEntry, StringBufferBase& casFile)"
  },
  {
    "label": "AddCasFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCasFile(StringKey fileNameKey, const tchar* fileName, const CasKey& casKey, bool deferCreation, bool fileIsCompressed)"
  },
  {
    "label": "CasEntryAccessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CasEntryAccessed(const CasKey& casKey)"
  },
  {
    "label": "IsDisallowedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisallowedPath(const tchar* fileName)"
  },
  {
    "label": "DecompressMemoryToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressMemoryToFile(u8* compressedData, FileAccessor& destination, u64 decompressedSize, bool useNoBuffering)"
  },
  {
    "label": "CasEntryAccessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CasEntryAccessed(CasEntry& entry)"
  },
  {
    "label": "CasEntryWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CasEntryWritten(CasEntry& entry, u64 size)"
  },
  {
    "label": "CasEntryDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CasEntryDeleted(CasEntry& entry, u64 size)"
  },
  {
    "label": "AttachEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachEntry(CasEntry& entry)"
  },
  {
    "label": "DetachEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachEntry(CasEntry& entry)"
  },
  {
    "label": "TraverseAllCasFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraverseAllCasFiles(const tchar* dir, const Function<void(const StringBufferBase& fullPath, const DirectoryEntry& e)>& func, bool allowParallel = false)"
  },
  {
    "label": "TraverseAllCasFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraverseAllCasFiles(const Function<void(const CasKey& key, u64 size)>& func, bool allowParallel = false)"
  },
  {
    "label": "CheckAllCasFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAllCasFiles(u64 checkContentOfFilesNewerThanTime = ~u64(0))"
  },
  {
    "label": "HandleOverflow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOverflow(UnorderedSet<CasKey>* outDeletedFiles)"
  },
  {
    "label": "OpenCasDataFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenCasDataFile(u32 index, u64 size)"
  },
  {
    "label": "CreateCasDataFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCasDataFiles()"
  },
  {
    "label": "GetOrCreateFileEntry()",
    "kind": "Method",
    "detail": "Function (struct FileEntry ; FileEntry&)",
    "insertText": "GetOrCreateFileEntry(StringKey fileNameKey)"
  },
  {
    "label": "StorageImpl()",
    "kind": "Method",
    "detail": "Function (WorkManager* m_workManager ; MutableLogger m_logger ; BufferSlots m_bufferSlots ; StringBuffer<> m_rootDir ; StringBuffer<> m_tempPath ; ReaderWriterLock m_fileTableLookupLock ; struct FileEntry { ReaderWriterLock lock ; CasKey casKey = CasKeyZero ; u64 size = 0 ; u64 lastWritten = 0 ; bool verified = false ; } ; UnorderedMap<StringKey,FileEntry> m_fileTableLookup ; ReaderWriterLock m_casLookupLock ; struct CasEntry { ReaderWriterLock lock ; CasKey key ; CasEntry* prevAccessed = nullptr ; CasEntry* nextAccessed = nullptr ; u64 size = 0 ; bool verified = false ; bool exists = false ; bool dropped = false ; bool beingWritten = false ; bool disallowed = false ; FileMappingHandle mappingHandle ; u64 mappingOffset = 0 ; u64 mappingSize = 0 ; } ; UnorderedMap<CasKey,CasEntry> m_casLookup ; ReaderWriterLock m_accessLock ; CasEntry* m_newestAccessed = nullptr ; CasEntry* m_oldestAccessed = nullptr ; u64 m_casTotalBytes = 0 ; u64 m_casMaxBytes = 0 ; u64 m_casCapacityBytes = 0 ; u64 m_casEvictedBytes = 0 ; u32 m_casEvictedCount = 0 ; u64 m_casDroppedBytes = 0 ; u32 m_casDroppedCount = 0 ; bool m_overflowReported = false ; bool m_storeCompressed = false ; bool m_manuallyHandleOverflow = false ; u32 m_maxParallelCopyOrLink ; ReaderWriterLock m_activeCopyOrLinkLock ; Event m_activeCopyOrLinkEvent ; u32 m_activeCopyOrLink = 0 ; ReaderWriterLock m_casTableLoadSaveLock ; bool m_casTableLoaded = false ; FileMappingBuffer m_casDataBuffer ; ReaderWriterLock m_deferredCasCreationLookupLock ; struct DeferedCasCreation { StringKey fileNameKey ; TString fileName ; bool fileIsCompressed ; } ; UnorderedMap<CasKey,DeferedCasCreation> m_deferredCasCreationLookup ; UnorderedMap<StringKey,CasKey> m_deferredCasCreationLookupByName ; DirectoryCache m_dirCache ; u8 m_casCompressor ; u8 m_casCompressionLevel ; StorageStats m_stats ;)",
    "insertText": "StorageImpl(const StorageImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const StorageImpl&)"
  }
]