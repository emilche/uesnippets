[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedWinrtInitializer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_WINRT_INITIALIZER_H_ # define BASE_WIN_SCOPED_WINRT_INITIALIZER_H_ # include<objbase . h> # include \" base / base_export . h \" # include \" base / threading / thread_checker . h \" # include \" base / win / scoped_windows_thread_environment . h \" namespace base { namespace win { class BASE_EXPORT ScopedWinrtInitializer : public ScopedWindowsThreadEnvironment { public :)",
    "insertText": "ScopedWinrtInitializer()"
  },
  {
    "label": "ScopedWinrtInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedWinrtInitializer(const ScopedWinrtInitializer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedWinrtInitializer&)",
    "insertText": "operator(const ScopedWinrtInitializer&)"
  },
  {
    "label": "Succeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Succeeded()"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (private : const HRESULT hr_ ;)",
    "insertText": "THREAD_CHECKER(thread_checker_)"
  }
]