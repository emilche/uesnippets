[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorPatchOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorPatchOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorPatchOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_PATCH_H # define EIGEN_CXX11_TENSOR_TENSOR_PATCH_H namespace Eigen { namespace internal { template<PatchDim,XprType> struct traits<TensorPatchOp<PatchDim,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions + 1 ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<PatchDim,XprType> struct eval<TensorPatchOp<PatchDim,XprType>,Eigen::Dense> { typedef const TensorPatchOp<PatchDim,XprType>& type ; } ; template<PatchDim,XprType> struct nested<TensorPatchOp<PatchDim,XprType>,1,eval<TensorPatchOp<PatchDim,XprType>>::type> { typedef TensorPatchOp<PatchDim,XprType> type ; } ; } template<PatchDim,XprType> class TensorPatchOp : public TensorBase<TensorPatchOp<PatchDim,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorPatchOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorPatchOp>::type Nested ; typedef Eigen::internal::traits<TensorPatchOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorPatchOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorPatchOp(const XprType& expr, const PatchDim& patch_dims) : m_xpr(expr), m_patch_dims(patch_dims)"
  },
  {
    "label": "patch_dims()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const PatchDim&)",
    "insertText": "patch_dims()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (Index num_patches = 1 ; const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "num_patches()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = patch_dims [ i ] ;)",
    "insertText": "num_patches(input_dims[i] - patch_dims[i] + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} m_dimensions [ NumDims - 1 ] = num_patches ; m_inputStrides [ 0 ] = 1 ; m_patchStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims-1; ++i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ i ] = m_inputStrides [ i - 1 ]* input_dims [ i - 1 ] ; m_patchStrides [ i ] = m_patchStrides [)",
    "insertText": "i(input_dims[i-1] - patch_dims[i-1] + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; } } else {)",
    "insertText": "for(int i = 0; i < NumDims-1; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} m_dimensions [ 0 ] = num_patches ; m_inputStrides [ NumDims - 2 ] = 1 ; m_patchStrides [ NumDims - 2 ] = 1 ;)",
    "insertText": "for(int i = NumDims-3; i >= 0; --i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ i ] = m_inputStrides [ i + 1 ]* input_dims [ i + 1 ] ; m_patchStrides [ i ] = m_patchStrides [)",
    "insertText": "i(input_dims[i+1] - patch_dims[i+1] + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} m_outputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims-2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "output_stride_index()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "output_stride_index(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index patchIndex = index / m_outputStrides [ output_stride_index ] ; Index patchOffset = index - patchIndex* m_outputStrides [ output_stride_index ] ; Index inputIndex = 0 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 2; i > 0; --i)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (const Index patchIdx = patchIndex / m_patchStrides [ i ] ; patchIndex - = patchIdx* m_patchStrides [ i ] ; const Index offsetIdx = patchOffset / m_outputStrides [ i ] ; patchOffset - = offsetIdx* m_outputStrides [ i ] ;)",
    "insertText": "inputIndex(patchIdx + offsetIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 2; ++i)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "inputIndex(patchIndex + patchOffset)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (const Index patchIdx [ 2 ] = { patchIndices [ 0 ] / m_patchStrides [ i ],patchIndices [ 1 ] / m_patchStrides [ i ] } ; patchIndices [ 0 ] - = patchIdx [ 0 ]* m_patchStrides [ i ] ; patchIndices [ 1 ] - = patchIdx [ 1 ]* m_patchStrides [ i ] ; const Index offsetIdx [ 2 ] = { patchOffsets [ 0 ] / m_outputStrides [ i ],patchOffsets [ 1 ] / m_outputStrides [ i ] } ; patchOffsets [ 0 ] - = offsetIdx [ 0 ]* m_outputStrides [ i ] ; patchOffsets [ 1 ] - = offsetIdx [ 1 ]* m_outputStrides [ i ] ;)",
    "insertText": "inputIndices(patchIdx[0] + offsetIdx[0])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(patchIdx[1] + offsetIdx[1])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "inputIndices(patchIndices[0] + patchOffsets[0])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(patchIndices[1] + patchOffsets[1])"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (PacketReturnType rslt = m_impl . template packet<)",
    "insertText": "Unaligned(inputIndices[0])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ PacketSize - 1 ] = m_impl .)",
    "insertText": "coeff(inputIndices[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < PacketSize-1; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const double compute_cost =)",
    "insertText": "NumDims(TensorOpCost::DivCost<Index>() + TensorOpCost::MulCost<Index>() + 2 * TensorOpCost::AddCost<Index>())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  }
]