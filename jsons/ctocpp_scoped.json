[
  {
    "label": "ClassName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassName"
  },
  {
    "label": "BaseName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseName"
  },
  {
    "label": "StructName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructName"
  },
  {
    "label": "CefCToCppScoped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCToCppScoped"
  },
  {
    "label": "WrapperStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WrapperStruct"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_LIBCEF_DLL_CTOCPP_CTOCPP_SCOPED_H_ # define CEF_LIBCEF_DLL_CTOCPP_CTOCPP_SCOPED_H_ # pragma once # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" # include \" include / capi / cef_base_capi . h \" # include \" include / cef_base . h \" # include \" libcef_dll / wrapper_types . h \" template<class ClassName,class BaseName,class StructName> class CefCToCppScoped : public BaseName { public : CefOwnPtr<BaseName>)",
    "insertText": "Wrap(StructName* s)"
  },
  {
    "label": "UnwrapOwn()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "UnwrapOwn(CefOwnPtr<BaseName> c)"
  },
  {
    "label": "UnwrapRaw()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "UnwrapRaw(CefRawPtr<BaseName> c)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* ptr)"
  },
  {
    "label": "CefCToCppScoped()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CefCToCppScoped()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} StructName*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(this)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(kWrapperType, wrapperStruct->type_)"
  },
  {
    "label": "UnwrapDerivedOwn()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "UnwrapDerivedOwn(CefWrapperType type, CefOwnPtr<BaseName> c)"
  },
  {
    "label": "UnwrapDerivedRaw()",
    "kind": "Method",
    "detail": "Function (StructName*)",
    "insertText": "UnwrapDerivedRaw(CefWrapperType type, CefRawPtr<BaseName> c)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (CefWrapperType kWrapperType ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefCToCppScoped)"
  },
  {
    "label": "BaseName()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct = new WrapperStruct ; wrapperStruct -> type_ = kWrapperType ; wrapperStruct -> struct_ = s ; return CefOwnPtr<)",
    "insertText": "BaseName(&wrapperStruct->wrapper_)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(c.get())"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (StructName* orig_struct = wrapperStruct -> struct_ ; # if)",
    "insertText": "DCHECK_IS_ON() cef_base_scoped_t* base = reinterpret_cast<cef_base_scoped_t*>(orig_struct)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(base && base->del)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(c)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(static_cast<BaseName*>(ptr))"
  },
  {
    "label": "cef_base_scoped_t()",
    "kind": "Method",
    "detail": "Function (cef_base_scoped_t* base = reinterpret_cast<)",
    "insertText": "cef_base_scoped_t(wrapperStruct->struct_)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(wrapperStruct)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (} template<class ClassName,class BaseName,class StructName> CefCToCppScoped<ClassName,BaseName,StructName>::WrapperStruct* CefCToCppScoped<ClassName,BaseName,StructName)",
    "insertText": "GetWrapperStruct(const BaseName* obj)"
  }
]