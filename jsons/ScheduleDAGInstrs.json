[
  {
    "label": "MachineFrameInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFrameInfo"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "RegPressureTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegPressureTracker"
  },
  {
    "label": "PressureDiffs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PressureDiffs"
  },
  {
    "label": "VReg2SUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VReg2SUnit"
  },
  {
    "label": "PhysRegSUOper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PhysRegSUOper"
  },
  {
    "label": "ScheduleDAGInstrs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGInstrs"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ScheduleDAGInstrs()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScheduleDAGInstrs(MachineFunction &mf,\n                               const MachineLoopInfo *mli,\n                               bool IsPostRAFlag,\n                               bool RemoveKillFlags = false,\n                               LiveIntervals *LIS = nullptr)"
  },
  {
    "label": "startBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startBlock(MachineBasicBlock *BB)"
  },
  {
    "label": "finishBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finishBlock()"
  },
  {
    "label": "enterRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enterRegion(MachineBasicBlock *bb,\n                             MachineBasicBlock::iterator begin,\n                             MachineBasicBlock::iterator end,\n                             unsigned regioninstrs)"
  },
  {
    "label": "exitRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exitRegion()"
  },
  {
    "label": "buildSchedGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildSchedGraph(AliasAnalysis *AA,\n                         RegPressureTracker *RPTracker = nullptr,\n                         PressureDiffs *PDiffs = nullptr)"
  },
  {
    "label": "addSchedBarrierDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSchedBarrierDeps()"
  },
  {
    "label": "fixupKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixupKills(MachineBasicBlock *MBB)"
  },
  {
    "label": "initSUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initSUnits()"
  },
  {
    "label": "addPhysRegDataDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPhysRegDataDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addPhysRegDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPhysRegDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addVRegDefDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVRegDefDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addVRegUseDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVRegUseDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "startBlockForKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startBlockForKills(MachineBasicBlock *BB)"
  },
  {
    "label": "toggleKillFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "toggleKillFlag(MachineInstr *MI, MachineOperand &MO)"
  }
]