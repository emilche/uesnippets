[
  {
    "label": "MachineFrameInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFrameInfo"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "RegPressureTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegPressureTracker"
  },
  {
    "label": "PressureDiffs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PressureDiffs"
  },
  {
    "label": "VReg2SUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VReg2SUnit"
  },
  {
    "label": "PhysRegSUOper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PhysRegSUOper"
  },
  {
    "label": "ScheduleDAGInstrs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGInstrs"
  },
  {
    "label": "VReg2SUnit()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SCHEDULEDAGINSTRS_H # define LLVM_CODEGEN_SCHEDULEDAGINSTRS_H # include \" llvm / ADT / SparseMultiSet . h \" # include \" llvm / ADT / SparseSet . h \" # include \" llvm / CodeGen / ScheduleDAG . h \" # include \" llvm / CodeGen / TargetSchedule . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Target / TargetRegisterInfo . h \" namespace llvm { class MachineFrameInfo ; class MachineLoopInfo ; class MachineDominatorTree ; class LiveIntervals ; class RegPressureTracker ; class PressureDiffs ; struct VReg2SUnit { unsigned VirtReg ; SUnit* SU ;)",
    "insertText": "VReg2SUnit(unsigned reg, SUnit *su): VirtReg(reg), SU(su)"
  },
  {
    "label": "getSparseSetIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSparseSetIndex()"
  },
  {
    "label": "PhysRegSUOper()",
    "kind": "Method",
    "detail": "Function (} } ; struct PhysRegSUOper { SUnit* SU ; int OpIdx ; unsigned Reg ;)",
    "insertText": "PhysRegSUOper(SUnit *su, int op, unsigned R): SU(su), OpIdx(op), Reg(R)"
  },
  {
    "label": "ScheduleDAGInstrs()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScheduleDAGInstrs()"
  },
  {
    "label": "isPostRA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPostRA()"
  },
  {
    "label": "getSUnit()",
    "kind": "Method",
    "detail": "Function (SUnit*)",
    "insertText": "getSUnit(MachineInstr *MI)"
  },
  {
    "label": "startBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startBlock(MachineBasicBlock *BB)"
  },
  {
    "label": "finishBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finishBlock()"
  },
  {
    "label": "enterRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enterRegion(MachineBasicBlock *bb, MachineBasicBlock::iterator begin, MachineBasicBlock::iterator end, unsigned regioninstrs)"
  },
  {
    "label": "exitRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exitRegion()"
  },
  {
    "label": "buildSchedGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildSchedGraph(AliasAnalysis *AA, RegPressureTracker *RPTracker = nullptr, PressureDiffs *PDiffs = nullptr)"
  },
  {
    "label": "addSchedBarrierDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSchedBarrierDeps()"
  },
  {
    "label": "schedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "schedule()"
  },
  {
    "label": "finalizeSchedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finalizeSchedule()"
  },
  {
    "label": "dumpNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dumpNode(const SUnit *SU)"
  },
  {
    "label": "getGraphNodeLabel()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getGraphNodeLabel(const SUnit *SU)"
  },
  {
    "label": "getDAGName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getDAGName()"
  },
  {
    "label": "fixupKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixupKills(MachineBasicBlock *MBB)"
  },
  {
    "label": "initSUnits()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "initSUnits()"
  },
  {
    "label": "addPhysRegDataDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPhysRegDataDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addPhysRegDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPhysRegDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addVRegDefDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVRegDefDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "addVRegUseDeps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVRegUseDeps(SUnit *SU, unsigned OperIdx)"
  },
  {
    "label": "startBlockForKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startBlockForKills(MachineBasicBlock *BB)"
  },
  {
    "label": "toggleKillFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "toggleKillFlag(MachineInstr *MI, MachineOperand &MO)"
  },
  {
    "label": "newSUnit()",
    "kind": "Method",
    "detail": "Function (} ; SUnit*)",
    "insertText": "newSUnit(MachineInstr *MI)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG const SUnit* Addr = SUnits .)",
    "insertText": "empty()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (# endif SUnits .)",
    "insertText": "emplace_back(MI, (unsigned)SUnits.size())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Addr == nullptr || Addr == &SUnits[0]) && \"SUnits std::vector reallocated on the fly!\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (SUnits .)",
    "insertText": "back().OrigNode = &SUnits.back()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<MachineInstr*,SUnit*>::const_iterator I = MISUnitMap .)",
    "insertText": "find(MI)"
  }
]