[
  {
    "label": "CToolchainPluginManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CToolchainPluginManager"
  },
  {
    "label": "SPluginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPluginInfo"
  },
  {
    "label": "CToolchainPluginManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Text / UTF8StringView . h \" # include \" uLang / Toolchain / ILibLoader . h \" # include \" uLang / Toolchain / IToolchainPlugin . h \" # include \" uLang / Common / Containers / UniquePointerArray . h \" namespace uLang { class CToolchainPluginManager : public CSharedMix { public :)",
    "insertText": "CToolchainPluginManager(const TSRef<ILibLoader>& InLibLoader) : _LibLoader(InLibLoader)"
  },
  {
    "label": "LoadPluginLib()",
    "kind": "Method",
    "detail": "Function (} IToolchainPlugin*)",
    "insertText": "LoadPluginLib(const char* LibName)"
  },
  {
    "label": "SPluginInfo()",
    "kind": "Method",
    "detail": "Function (private : struct SPluginInfo { public :)",
    "insertText": "SPluginInfo(ILibLoader::DyLibHandle InHandle = ILibLoader::InvalidDyLibHandle, IToolchainPlugin* InLibInterface = nullptr) : LibHandle(InHandle) , PluginInterface(InLibInterface)"
  },
  {
    "label": "SPluginInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SPluginInfo()"
  },
  {
    "label": "OnUnLoad()",
    "kind": "Method",
    "detail": "Function (PluginInterface ->)",
    "insertText": "OnUnLoad()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(PluginInterface)"
  }
]