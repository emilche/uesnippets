[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TImageBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImageBuilder"
  },
  {
    "label": "FImageAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageAdapter"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" Image / ImageDimensions . h \" # include \" Spatial / DenseGrid2 . h \" namespace UE { namespace Geometry { enum class EImageTilingMethod { Clamp,Wrap } ; template<PixelType> class TImageBuilder { protected : FImageDimensions Dimensions ; TDenseGrid2<PixelType> Image ; public : void)",
    "insertText": "SetDimensions(FImageDimensions DimensionsIn)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Dimensions = DimensionsIn ; Image .)",
    "insertText": "Resize(Dimensions.GetWidth(), Dimensions.GetHeight(), EAllowShrinking::Yes)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (} const FImageDimensions&)",
    "insertText": "GetDimensions()"
  },
  {
    "label": "AssignAll()",
    "kind": "Method",
    "detail": "Function (Image .)",
    "insertText": "AssignAll(ClearValue)"
  },
  {
    "label": "ContainsPixel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsPixel(int32 X, int32 Y)"
  },
  {
    "label": "ContainsPixel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsPixel(const FVector2i& ImageCoords)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (} PixelType&)",
    "insertText": "GetPixel(int32 X, int32 Y)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int64 LinearIndex = Dimensions .)",
    "insertText": "GetIndex(FVector2i(X, Y))"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int64 LinearIndex = Dimensions .)",
    "insertText": "GetIndex(ImageCoords)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int64 LinearIndex = Dimensions .)",
    "insertText": "GetIndex(FVector2i(X,Y))"
  },
  {
    "label": "GridValues()",
    "kind": "Method",
    "detail": "Function (TArray64<PixelType>& Buffer = Image .)",
    "insertText": "GridValues()"
  },
  {
    "label": "GetImageBuffer()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView64<PixelType>)",
    "insertText": "GetImageBuffer()"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPixel(int32 X, int32 Y, const PixelType& NewValue)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (Image [ LinearIndex ] = NewValue ; } void)",
    "insertText": "SetPixel(const FVector2i& ImageCoords, const PixelType& NewValue)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (Image [ LinearIndex ] = NewValue ; } void)",
    "insertText": "SetPixel(int64 LinearIndex, const PixelType& NewValue)"
  },
  {
    "label": "CopyPixel()",
    "kind": "Method",
    "detail": "Function (Image [ LinearIndex ] = NewValue ; } void)",
    "insertText": "CopyPixel(int64 FromLinearIndex, int64 ToLinearIndex)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (Image [ ToLinearIndex ] = Image [ FromLinearIndex ] ; } template<OtherType> void)",
    "insertText": "Convert(TFunctionRef<OtherType(const PixelType&)> ConvertFunc, TImageBuilder<OtherType>& ConvertedImageOut)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (ConvertedImageOut .)",
    "insertText": "SetDimensions(Dimensions)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int64 NumPixels = Dimensions .)",
    "insertText": "Num()"
  },
  {
    "label": "ConvertFunc()",
    "kind": "Method",
    "detail": "Function (ConvertedImageOut . Image [ k ] =)",
    "insertText": "ConvertFunc(Image[k])"
  },
  {
    "label": "BilinearSample()",
    "kind": "Method",
    "detail": "Function (} } template<ScalarType,EImageTilingMethod TilingMethod = EImageTilingMethod::Clamp> PixelType)",
    "insertText": "BilinearSample(const FVector2d& PixelCoords, const PixelType& InvalidValue)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (const FVector2i Max =)",
    "insertText": "FVector2i(Dimensions.GetWidth(), Dimensions.GetHeight())"
  },
  {
    "label": "XY1d()",
    "kind": "Method",
    "detail": "Function (const FVector2d)",
    "insertText": "XY1d(FMathd::Floor(PixelCoords.X + 0.5), FMathd::Floor(PixelCoords.Y + 0.5))"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (FVector2i XY0 =)",
    "insertText": "FVector2i(XY0d)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (FVector2i XY1 =)",
    "insertText": "FVector2i(XY1d)"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (const FVector2d A = PixelCoords -)",
    "insertText": "FVector2d(0.5)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (const FVector2d OneMinusA =)",
    "insertText": "One()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (XY0 . X = XY0 . X<0 ? XY0 . X + Max . X : XY0 . X ; XY0 . Y = XY0 . Y<0 ? XY0 . Y + Max . Y : XY0 . Y ; XY1 . X = XY1 . X> = Max . X ? 0 : XY1 . X ; XY1 . Y = XY1 . Y> = Max . Y ? 0 : XY1 . Y ; } else { XY0 . X =)",
    "insertText": "Max(0, XY0.X)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (XY0 . Y =)",
    "insertText": "Max(0, XY0.Y)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (XY1 . X =)",
    "insertText": "Min(Max.X - 1, XY1.X)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (XY1 . Y =)",
    "insertText": "Min(Max.Y - 1, XY1.Y)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (} PixelType V00 =)",
    "insertText": "GetPixel(XY0)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (PixelType V10 =)",
    "insertText": "GetPixel(FVector2i(XY1.X, XY0.Y))"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (PixelType V01 =)",
    "insertText": "GetPixel(FVector2i(XY0.X, XY1.Y))"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (PixelType V11 =)",
    "insertText": "GetPixel(XY1)"
  },
  {
    "label": "BilinearSampleUV()",
    "kind": "Method",
    "detail": "Function (} template<ScalarType,EImageTilingMethod TilingMethod = EImageTilingMethod::Clamp> PixelType)",
    "insertText": "BilinearSampleUV(const FVector2d& UVCoords, const PixelType& InvalidValue)"
  },
  {
    "label": "TilingMethod()",
    "kind": "Method",
    "detail": "Function (const FVector2d UV = GetTiledUV<)",
    "insertText": "TilingMethod(UVCoords)"
  },
  {
    "label": "PixelCoords()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "PixelCoords(UV.X * (double)Dimensions.GetWidth(), UV.Y * (double)Dimensions.GetHeight())"
  },
  {
    "label": "NearestSampleUV()",
    "kind": "Method",
    "detail": "Function (} template<EImageTilingMethod TilingMethod = EImageTilingMethod::Clamp> PixelType)",
    "insertText": "NearestSampleUV(const FVector2d& UVCoords)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "X(int)(UV.X * (double)Dimensions.GetWidth())"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "Y(int)(UV.Y * (double)Dimensions.GetHeight())"
  },
  {
    "label": "IsConstantValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConstantValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PixelType InitialValue = Image [ 0 ] ;)",
    "insertText": "for(int64 k = 1; k < Num; ++k)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (TImageBuilder<PixelType> DownsampleImage ; int32 Width = Dimensions .)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (int32 Height = Dimensions .)",
    "insertText": "GetHeight()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(SubHeight, [&](int32 yi) { int32 baseyi = yi * SubSteps; for (int32 xi = 0; xi < SubWidth; ++xi) { int32 basexi = xi * SubSteps; PixelType AccumBasePixels = ZeroValue; for (int32 dy = 0; dy < SubSteps; ++dy) { for (int32 dx = 0; dx < SubSteps; ++dx) { AccumBasePixels += GetPixel(basexi + dx, baseyi + dy); } } PixelType SubPixel = AverageFunc(AccumBasePixels, SubSteps * SubSteps); DownsampleImage.SetPixel(xi, yi, SubPixel); } })"
  },
  {
    "label": "UV()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "UV(UVCoords)"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (UV = UV -)",
    "insertText": "FVector2d(FMathd::Floor(UV.X), FMathd::Floor(UV.Y))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} else { UV . X =)",
    "insertText": "Clamp(UV.X, 0.0, 1.0)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (UV . Y =)",
    "insertText": "Clamp(UV.Y, 0.0, 1.0)"
  },
  {
    "label": "FImageAdapter()",
    "kind": "Method",
    "detail": "Function (} return UV ; } } ; class FImageAdapter { public : enum class EImageType { Float1,Float3,Float4 } ;)",
    "insertText": "FImageAdapter(TImageBuilder<float>* Image)"
  },
  {
    "label": "FImageAdapter()",
    "kind": "Method",
    "detail": "Function (ImageType = EImageType::Float1 ; Image1f = Image ; })",
    "insertText": "FImageAdapter(TImageBuilder<FVector3f>* Image)"
  },
  {
    "label": "FImageAdapter()",
    "kind": "Method",
    "detail": "Function (ImageType = EImageType::Float3 ; Image3f = Image ; })",
    "insertText": "FImageAdapter(TImageBuilder<FVector4f>* Image)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (ImageType = EImageType::Float4 ; Image4f = Image ; } void)",
    "insertText": "SetDimensions(FImageDimensions Dimensions)"
  },
  {
    "label": "FImageDimensions()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FImageDimensions()"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPixel(const FVector2i& PixelCoords, const FVector4f& FloatPixel)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (break ; case EImageType::Float3 : Image3f ->)",
    "insertText": "SetPixel(PixelCoords, FVector3f(FloatPixel.X, FloatPixel.Y, FloatPixel.Z))"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (break ; case EImageType::Float4 : Image4f ->)",
    "insertText": "SetPixel(PixelCoords, FloatPixel)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (break ; } } void)",
    "insertText": "SetPixel(const FVector2i& PixelCoords, const FLinearColor& FloatPixel)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (break ; case EImageType::Float3 : Image3f ->)",
    "insertText": "SetPixel(PixelCoords, FVector3f(FloatPixel.R, FloatPixel.G, FloatPixel.B))"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (break ; case EImageType::Float4 : Image4f ->)",
    "insertText": "SetPixel(PixelCoords, FVector4f(FloatPixel.R, FloatPixel.G, FloatPixel.B, FloatPixel.A))"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (break ; } } FVector4f)",
    "insertText": "GetPixel(int64 LinearIndex)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (} case EImageType::Float3 : { FVector3f Value = Image3f ->)",
    "insertText": "GetPixel(LinearIndex)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "GetPixel(const FVector2i& PixelCoords)"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (} case EImageType::Float3 : { FVector3f Value = Image3f ->)",
    "insertText": "GetPixel(PixelCoords)"
  }
]