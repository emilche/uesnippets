[
  {
    "label": "AssociatedThreadId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssociatedThreadId"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SetOperationOldest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetOperationOldest"
  },
  {
    "label": "SetOperationRandom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetOperationRandom"
  },
  {
    "label": "TaskQueueSelector()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TASK_QUEUE_SELECTOR_H_ # define BASE_TASK_SEQUENCE_MANAGER_TASK_QUEUE_SELECTOR_H_ # include<stddef . h> # include<vector> # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / pending_task . h \" # include \" base / task / sequence_manager / sequence_manager . h \" # include \" base / task / sequence_manager / sequenced_task_source . h \" # include \" base / task / sequence_manager / task_order . h \" # include \" base / task / sequence_manager / work_queue_sets . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { namespace internal { class AssociatedThreadId ; class BASE_EXPORT TaskQueueSelector : public WorkQueueSets::Observer { public : using SelectTaskOption = SequencedTaskSource::SelectTaskOption ;)",
    "insertText": "TaskQueueSelector(scoped_refptr<const AssociatedThreadId> associated_thread, const SequenceManager::Settings& settings)"
  },
  {
    "label": "TaskQueueSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskQueueSelector(const TaskQueueSelector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskQueueSelector&)",
    "insertText": "operator(const TaskQueueSelector&)"
  },
  {
    "label": "TaskQueueSelector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueueSelector()"
  },
  {
    "label": "AddQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueue(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "RemoveQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueue(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "EnableQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableQueue(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "DisableQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableQueue(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "SetQueuePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueuePriority(internal::TaskQueueImpl* queue, TaskQueue::QueuePriority priority)"
  },
  {
    "label": "SelectWorkQueueToService()",
    "kind": "Method",
    "detail": "Function (WorkQueue*)",
    "insertText": "SelectWorkQueueToService(SelectTaskOption option = SelectTaskOption::kDefault)"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "AsValue()"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnTaskQueueEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskQueueEnabled(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "SetTaskQueueSelectorObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetTaskQueueSelectorObserver(Observer* observer)"
  },
  {
    "label": "GetHighestPendingPriority()",
    "kind": "Method",
    "detail": "Function (absl::optional<TaskQueue::QueuePriority>)",
    "insertText": "GetHighestPendingPriority(SelectTaskOption option = SelectTaskOption::kDefault)"
  },
  {
    "label": "WorkQueueSetBecameEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkQueueSetBecameEmpty(size_t set_index)"
  },
  {
    "label": "WorkQueueSetBecameNonEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkQueueSetBecameNonEmpty(size_t set_index)"
  },
  {
    "label": "CollectSkippedOverLowerPriorityTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectSkippedOverLowerPriorityTasks(const internal::WorkQueue* selected_work_queue, std::vector<const Task*>* result)"
  },
  {
    "label": "delayed_work_queue_sets()",
    "kind": "Method",
    "detail": "Function (protected : WorkQueueSets*)",
    "insertText": "delayed_work_queue_sets()"
  },
  {
    "label": "ActivePriorityTracker()",
    "kind": "Method",
    "detail": "Function (const int kMaxDelayedStarvationTasks = 3 ; class BASE_EXPORT ActivePriorityTracker { public :)",
    "insertText": "ActivePriorityTracker()"
  },
  {
    "label": "HasActivePriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActivePriority()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActive(TaskQueue::QueuePriority priority, bool is_active)"
  },
  {
    "label": "HighestActivePriority()",
    "kind": "Method",
    "detail": "Function (TaskQueue::QueuePriority)",
    "insertText": "HighestActivePriority()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "static_assert(TaskQueue::QueuePriority::kQueuePriorityCount < sizeof(size_t) * 8, \"The number of priorities must be strictly less than the \" \"number of bits of |active_priorities_|!\")"
  },
  {
    "label": "GetWithPriority()",
    "kind": "Method",
    "detail": "Function (size_t active_priorities_ = 0 ; } ; struct SetOperationOldest { absl::optional<WorkQueueAndTaskOrder>)",
    "insertText": "GetWithPriority(const WorkQueueSets& sets, TaskQueue::QueuePriority priority)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "ChooseWithPriority()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<SetOperation> WorkQueue*)",
    "insertText": "ChooseWithPriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "SetOperation()",
    "kind": "Method",
    "detail": "Function (WorkQueue* queue = ChooseImmediateOnlyWithPriority<)",
    "insertText": "SetOperation(priority)"
  },
  {
    "label": "ChooseImmediateOnlyWithPriority()",
    "kind": "Method",
    "detail": "Function (} template<SetOperation> WorkQueue*)",
    "insertText": "ChooseImmediateOnlyWithPriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "AddQueueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueueImpl(internal::TaskQueueImpl* queue, TaskQueue::QueuePriority priority)"
  },
  {
    "label": "RemoveQueueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueueImpl(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() || !defined(NDEBUG) bool CheckContainsQueueForTest(const internal::TaskQueueImpl* queue)"
  },
  {
    "label": "ChooseImmediateOrDelayedTaskWithPriority()",
    "kind": "Method",
    "detail": "Function (# endif template<SetOperation> WorkQueue*)",
    "insertText": "ChooseImmediateOrDelayedTaskWithPriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "NextPriority()",
    "kind": "Method",
    "detail": "Function (} TaskQueue::QueuePriority)",
    "insertText": "NextPriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "HasTasksWithPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTasksWithPriority(TaskQueue::QueuePriority priority)"
  }
]