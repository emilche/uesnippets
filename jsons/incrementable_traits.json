[
  {
    "label": "incrementable_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "incrementable_traits"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "iterator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_INCREMENTABLE_TRAITS_H # define _LIBCPP___ITERATOR_INCREMENTABLE_TRAITS_H # include<__config> # include<__type_traits / is_primary_template . h> # include<concepts> # include<cstddef> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> requires is_object_v<_Tp> struct incrementable_traits<_Tp*> { using difference_type = ptrdiff_t ; } ; template<class _Ip> struct incrementable_traits<const _Ip> : incrementable_traits<_Ip> { } ; template<class _Tp> concept __has_member_difference_type = requires { _Tp::difference_type ; } ; template<__has_member_difference_type _Tp> struct incrementable_traits<_Tp> { using difference_type = _Tp::difference_type ; } ; template<class _Tp> concept __has_integral_minus =)",
    "insertText": "requires(const _Tp& __x, const _Tp& __y)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function ({ __x - __y } -> integral ; } ; template<__has_integral_minus _Tp>)",
    "insertText": "requires(!__has_member_difference_type<_Tp>)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using difference_type = make_signed_t<)",
    "insertText": "decltype(declval<_Tp>() - declval<_Tp>())"
  }
]