[
  {
    "label": "SNumericEntryBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNumericEntryBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . h \" # include \" Layout / Margin . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SEditableText . h \" # include \" Widgets / Input / SSpinBox . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Colors / SColorBlock . h \" # include \" Containers / UnrealString . h \" template<NumericType> class SNumericEntryBox : public SCompoundWidget { public : const FLinearColor RedLabelBackgroundColor ; const FLinearColor GreenLabelBackgroundColor ; const FLinearColor BlueLabelBackgroundColor ; const FLinearColor LilacLabelBackgroundColor ; const FText DefaultUndeterminedString ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnValueChanged, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnValueCommitted, NumericType , ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnUndeterminedValueChanged, FText)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnUndeterminedValueCommitted, FText , ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnDynamicSliderMinMaxValueChanged, NumericType, TWeakPtr<SWidget>, bool, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (enum class ELabelLocation { Outside,Inside } ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNumericEntryBox<NumericType> ) : _EditableTextBoxStyle( &FAppStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\") ) , _SpinBoxStyle(&FAppStyle::Get().GetWidgetStyle<FSpinBoxStyle>(\"NumericEntrySpinBox\") ) , _Label() , _LabelVAlign( VAlign_Fill ) , _Justification(ETextJustify::Left) , _LabelLocation(ELabelLocation::Outside) , _LabelPadding(FMargin(3.f,0.f) ) , _BorderForegroundColor(FAppStyle::Get().GetWidgetStyle<FSpinBoxStyle>(\"NumericEntrySpinBox\").ForegroundColor) , _BorderBackgroundColor(FLinearColor::White) , _UndeterminedString( SNumericEntryBox<NumericType>::DefaultUndeterminedString ) , _AllowSpin(false) , _ShiftMultiplier(10.f) , _CtrlMultiplier(0.1f) , _SupportDynamicSliderMaxValue(false) , _SupportDynamicSliderMinValue(false) , _Delta(NumericType(0)) , _MinFractionalDigits(DefaultMinFractionalDigits) , _MaxFractionalDigits(DefaultMaxFractionalDigits) , _MinValue(TNumericLimits<NumericType>::Lowest()) , _MaxValue(TNumericLimits<NumericType>::Max()) , _MinSliderValue(NumericType(0)) , _MaxSliderValue(NumericType(100)) , _SliderExponent(1.f) , _AllowWheel(true) , _BroadcastValueChangesPerKey(false) , _MinDesiredValueWidth(0.f) , _DisplayToggle(false) , _ToggleChecked(ECheckBoxState::Checked) , _TogglePadding(FMargin(1.f,0.f,1.f,0.f))"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, EditableTextBoxStyle ) SLATE_STYLE_ARGUMENT( FSpinBoxStyle, SpinBoxStyle ) SLATE_NAMED_SLOT( FArguments, Label ) SLATE_ARGUMENT( EVerticalAlignment, LabelVAlign ) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ARGUMENT(ELabelLocation, LabelLocation) SLATE_ARGUMENT( FMargin, LabelPadding ) SLATE_ARGUMENT( FSlateColor, BorderForegroundColor ) SLATE_ARGUMENT( FSlateColor, BorderBackgroundColor ) SLATE_ATTRIBUTE( TOptional<NumericType>, Value ) SLATE_ARGUMENT( FText, UndeterminedString ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( bool, AllowSpin ) SLATE_ATTRIBUTE_DEPRECATED( int32, ShiftMouseMovePixelPerDelta, 5.4, \"Shift Mouse Move Pixel Per Delta is deprecated, please use ShiftMultiplier\" ) SLATE_ATTRIBUTE( float, ShiftMultiplier ) SLATE_ATTRIBUTE( float, CtrlMultiplier ) SLATE_ATTRIBUTE( int32, LinearDeltaSensitivity) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMaxValue) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMinValue) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMaxValueChanged) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMinValueChanged) SLATE_ATTRIBUTE( NumericType, Delta ) SLATE_ATTRIBUTE(TOptional< int32 >, MinFractionalDigits) SLATE_ATTRIBUTE(TOptional< int32 >, MaxFractionalDigits) SLATE_ATTRIBUTE( TOptional< NumericType >, MinValue ) SLATE_ATTRIBUTE( TOptional< NumericType >, MaxValue ) SLATE_ATTRIBUTE( TOptional< NumericType >, MinSliderValue ) SLATE_ATTRIBUTE( TOptional< NumericType >, MaxSliderValue ) SLATE_ATTRIBUTE( float, SliderExponent ) SLATE_ATTRIBUTE(NumericType, SliderExponentNeutralValue ) SLATE_ARGUMENT( bool, AllowWheel ) SLATE_ARGUMENT( bool, BroadcastValueChangesPerKey) SLATE_ATTRIBUTE( TOptional< NumericType >, WheelStep ) SLATE_ATTRIBUTE( float, MinDesiredValueWidth ) SLATE_ATTRIBUTE( FMargin, OverrideTextMargin ) SLATE_EVENT( FOnValueChanged, OnValueChanged ) SLATE_EVENT( FOnValueCommitted, OnValueCommitted ) SLATE_EVENT( FOnUndeterminedValueChanged, OnUndeterminedValueChanged ) SLATE_EVENT( FOnUndeterminedValueCommitted, OnUndeterminedValueCommitted ) SLATE_EVENT( FSimpleDelegate, OnBeginSliderMovement ) SLATE_EVENT( FOnValueChanged, OnEndSliderMovement ) SLATE_EVENT( FMenuExtensionDelegate, ContextMenuExtender ) SLATE_ARGUMENT( TSharedPtr< INumericTypeInterface<NumericType> >, TypeInterface ) SLATE_ARGUMENT( bool, DisplayToggle ) SLATE_ATTRIBUTE( ECheckBoxState, ToggleChecked ) SLATE_EVENT( FOnCheckStateChanged, OnToggleChanged ) SLATE_ARGUMENT( FMargin, TogglePadding ) SLATE_END_ARGS() SNumericEntryBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (OnValueChanged = InArgs . _OnValueChanged ; OnValueCommitted = InArgs . _OnValueCommitted ; OnUndeterminedValueChanged = InArgs . _OnUndeterminedValueChanged ; OnUndeterminedValueCommitted = InArgs . _OnUndeterminedValueCommitted ; ValueAttribute = InArgs . _Value ; UndeterminedString = InArgs . _UndeterminedString ; MinDesiredValueWidth = InArgs . _MinDesiredValueWidth ; BorderImageNormal =& InArgs . _EditableTextBoxStyle -> BackgroundImageNormal ; BorderImageHovered =& InArgs . _EditableTextBoxStyle -> BackgroundImageHovered ; BorderImageFocused =& InArgs . _EditableTextBoxStyle -> BackgroundImageFocused ; Interface = InArgs . _TypeInterface .)",
    "insertText": "IsValid() ? InArgs._TypeInterface : MakeShareable( new TDefaultNumericTypeInterface<NumericType>)"
  },
  {
    "label": "GetOnSettingChanged()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "GetOnSettingChanged()->AddSP(this, &SNumericEntryBox::ResetCachedValueString)"
  },
  {
    "label": "MinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MinFractionalDigits(InArgs._MinFractionalDigits.Get().IsSet())"
  },
  {
    "label": "MaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxFractionalDigits(InArgs._MaxFractionalDigits.Get().IsSet())"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinFractionalDigits(MinFractionalDigits)"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxFractionalDigits(MaxFractionalDigits)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CachedExternalValue = ValueAttribute .)",
    "insertText": "Get()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (CachedValueString = Interface ->)",
    "insertText": "ToString(CachedExternalValue.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bCachedValueStringDirty = false ; const bool bDisplayToggle = InArgs . _DisplayToggle ;)",
    "insertText": "if(bDisplayToggle)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAssignNew(ToggleCheckBox, SCheckBox) .Padding(FMargin(0.f, 0.f, 2.f, 0.f)) .IsChecked(InArgs._ToggleChecked) .OnCheckStateChanged(this, &SNumericEntryBox::HandleToggleCheckBoxChanged, InArgs._OnToggleChanged)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const bool bAllowSpin = InArgs . _AllowSpin ; TSharedPtr<SWidget> FinalWidget ;)",
    "insertText": "if(bAllowSpin)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAssignNew(SpinBox, SSpinBox<NumericType>) .Style(InArgs._SpinBoxStyle) .Font(InArgs._Font.IsSet() ? InArgs._Font : InArgs._EditableTextBoxStyle->TextStyle.Font) .Value(this, &SNumericEntryBox<NumericType>::OnGetValueForSpinBox) .Delta(InArgs._Delta) .ShiftMultiplier(InArgs._ShiftMultiplier) .CtrlMultiplier(InArgs._CtrlMultiplier) .LinearDeltaSensitivity(InArgs._LinearDeltaSensitivity) .SupportDynamicSliderMaxValue(InArgs._SupportDynamicSliderMaxValue) .SupportDynamicSliderMinValue(InArgs._SupportDynamicSliderMinValue) .OnDynamicSliderMaxValueChanged(InArgs._OnDynamicSliderMaxValueChanged) .OnDynamicSliderMinValueChanged(InArgs._OnDynamicSliderMinValueChanged) .OnValueChanged(OnValueChanged) .OnValueCommitted(OnValueCommitted) .MinFractionalDigits(MinFractionalDigits) .MaxFractionalDigits(MaxFractionalDigits) .MinSliderValue(InArgs._MinSliderValue) .MaxSliderValue(InArgs._MaxSliderValue) .MaxValue(InArgs._MaxValue) .MinValue(InArgs._MinValue) .SliderExponent(InArgs._SliderExponent) .SliderExponentNeutralValue(InArgs._SliderExponentNeutralValue) .EnableWheel(InArgs._AllowWheel) .BroadcastValueChangesPerKey(InArgs._BroadcastValueChangesPerKey) .WheelStep(InArgs._WheelStep) .OnBeginSliderMovement(InArgs._OnBeginSliderMovement) .OnEndSliderMovement(InArgs._OnEndSliderMovement) .MinDesiredWidth(InArgs._MinDesiredValueWidth) .TypeInterface(Interface) .ToolTipText(this, &SNumericEntryBox<NumericType>::GetValueAsText)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SAssignNew(EditableText, SEditableText) .Text(this, &SNumericEntryBox<NumericType>::OnGetValueForTextBox) .ToolTipText(this, &SNumericEntryBox<NumericType>::GetValueAsText) .ColorAndOpacity(InArgs._EditableTextBoxStyle->ForegroundColor) .Visibility(bAllowSpin ? EVisibility::Collapsed : EVisibility::Visible) .Font(InArgs._Font.IsSet() ? InArgs._Font : InArgs._EditableTextBoxStyle->TextStyle.Font) .SelectAllTextWhenFocused(true) .ClearKeyboardFocusOnCommit(false) .OnTextChanged(this, &SNumericEntryBox<NumericType>::OnTextChanged) .OnTextCommitted(this, &SNumericEntryBox<NumericType>::OnTextCommitted) .SelectAllTextOnCommit(true) .ContextMenuExtender(InArgs._ContextMenuExtender) .Justification(InArgs._Justification) .MinDesiredWidth(InArgs._MinDesiredValueWidth)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SOverlay> Overlay =)",
    "insertText": "SNew(SOverlay)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Overlay ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) [ SpinBox.ToSharedRef()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (Padding)",
    "insertText": "IsSet()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Overlay ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) .Padding(TextMargin) [ EditableText.ToSharedRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> MainContents ; const bool bHasLabel = InArgs . _Label . Widget ! = SNullWidget::NullWidget ; bool bHasInsideLabel = false ;)",
    "insertText": "if(bHasLabel && InArgs._LabelLocation == ELabelLocation::Inside)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (bHasInsideLabel = true ; Overlay ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Left) .VAlign(InArgs._LabelVAlign) .Padding(InArgs._LabelPadding)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bAllowSpin && !bHasInsideLabel)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (MainContents = Overlay ; } else { MainContents =)",
    "insertText": "SNew(SBorder) .BorderImage(this, &SNumericEntryBox<NumericType>::GetBorderImage) .BorderBackgroundColor(InArgs._BorderBackgroundColor) .ForegroundColor(InArgs._BorderForegroundColor) .Padding(0.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bHasLabel || bHasInsideLabel)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) .Padding(InArgs._TogglePadding) [ ToggleCheckBox.ToSharedRef() ] + SHorizontalBox::Slot() [ MainContents.ToSharedRef()"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} else { ChildSlot [ MainContents .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} } else { TSharedRef<SHorizontalBox> HorizontalBox =)",
    "insertText": "SNew(SHorizontalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .AutoWidth() .HAlign(HAlign_Left) .VAlign(InArgs._LabelVAlign) .Padding(InArgs._LabelPadding)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .AutoWidth() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) .Padding(InArgs._TogglePadding) [ ToggleCheckBox.ToSharedRef()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} HorizontalBox ->)",
    "insertText": "AddSlot() [ MainContents.ToSharedRef()"
  },
  {
    "label": "HandleToggleCheckBoxChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleCheckBoxChanged(InArgs._ToggleChecked.Get(), FOnCheckStateChanged())"
  },
  {
    "label": "BuildLabel()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SWidget>)",
    "insertText": "BuildLabel(TAttribute<FText> LabelText, const FSlateColor& ForegroundColor, const FSlateColor& BackgroundColor)"
  },
  {
    "label": "BuildNarrowColorLabel()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "BuildNarrowColorLabel(FLinearColor LabelColor)"
  },
  {
    "label": "GetSpinBox()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetSpinBox()"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinFractionalDigits(const TAttribute<TOptional<int32>>& InMinFractionalDigits)"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "SetMinFractionalDigits((InMinFractionalDigits.Get().IsSet()) ? InMinFractionalDigits.Get() : MinFractionalDigits)"
  },
  {
    "label": "GetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = true ; } int32)",
    "insertText": "GetMaxFractionalDigits()"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxFractionalDigits(const TAttribute<TOptional<int32>>& InMaxFractionalDigits)"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "SetMaxFractionalDigits((InMaxFractionalDigits.Get().IsSet()) ? InMaxFractionalDigits.Get() : MaxFractionalDigits)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = true ; } private : bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Handled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> FocusWidget ;)",
    "insertText": "if(SpinBox.IsValid() && SpinBox->GetVisibility() == EVisibility::Visible)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FocusWidget = SpinBox ; } else { FocusWidget = EditableText ; })",
    "insertText": "if(InFocusEvent.GetCause() != EFocusCause::Cleared)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetUserFocus(FocusWidget.ToSharedRef(), InFocusEvent.GetCause())"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FKey Key = InKeyEvent .)",
    "insertText": "GetKey()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} private : FString)",
    "insertText": "GetLabel()"
  },
  {
    "label": "OnGetValueForSpinBox()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "OnGetValueForSpinBox()"
  },
  {
    "label": "SetCachedString()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "SetCachedString(const NumericType CurrentValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (CachedExternalValue = CurrentValue ; CachedValueString = Interface ->)",
    "insertText": "ToString(CurrentValue)"
  },
  {
    "label": "GetCachedString()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = false ; } } FString)",
    "insertText": "GetCachedString(const NumericType CurrentValue)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (const bool bUseCachedString = CachedExternalValue .)",
    "insertText": "IsSet() && CurrentValue == CachedExternalValue.GetValue()"
  },
  {
    "label": "GetValueAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueAsText()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (NumericType CurrentValue = Value .)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "OnGetValueForTextBox()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "OnGetValueForTextBox()"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTextChanged(const FText& NewValue)"
  },
  {
    "label": "SendChangesFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChangesFromText(NewValue, false, ETextCommit::Default)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} else { OnUndeterminedValueChanged .)",
    "insertText": "Execute(NewValue)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnTextCommitted(const FText& NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SendChangesFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChangesFromText(NewValue, true, CommitInfo)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} else { OnUndeterminedValueCommitted .)",
    "insertText": "Execute(NewValue, CommitInfo)"
  },
  {
    "label": "GetBorderImage()",
    "kind": "Method",
    "detail": "Function (} } const FSlateBrush*)",
    "insertText": "GetBorderImage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EditingWidget = SpinBox ; } else { EditingWidget = EditableText ; })",
    "insertText": "if(EditingWidget->HasKeyboardFocus())"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType> NumericValue = Interface ->)",
    "insertText": "FromString(NewValue.ToString(), ExistingValue.Get(0))"
  },
  {
    "label": "SetCachedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedString(NumericValue.GetValue())"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnValueCommitted .)",
    "insertText": "ExecuteIfBound(NumericValue.GetValue(), CommitInfo)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} else { OnValueChanged .)",
    "insertText": "ExecuteIfBound(NumericValue.GetValue())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SetCachedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedString(Value.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SpinBox.IsValid())"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (SpinBox ->)",
    "insertText": "SetVisibility(EVisibility::Visible)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetVisibility(EVisibility::Collapsed)"
  },
  {
    "label": "IsToggleEnabled()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsToggleEnabled()"
  },
  {
    "label": "HandleToggleCheckBoxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleToggleCheckBoxChanged(ECheckBoxState InCheckState, FOnCheckStateChanged OnToggleChanged)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (SpinBox ->)",
    "insertText": "SetEnabled(InCheckState == ECheckBoxState::Checked)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EditableText.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OnToggleChanged.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnToggleChanged .)",
    "insertText": "Execute(InCheckState)"
  },
  {
    "label": "ResetCachedValueString()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetCachedValueString()"
  },
  {
    "label": "RedLabelBackgroundColor()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = true ; } } private : const int32 DefaultMinFractionalDigits ; const int32 DefaultMaxFractionalDigits ; TAttribute<TOptional<FString>> LabelAttribute ; TAttribute<TOptional<NumericType>> ValueAttribute ; TSharedPtr<SCheckBox> ToggleCheckBox ; TSharedPtr<SWidget> SpinBox ; TSharedPtr<SEditableText> EditableText ; FOnValueChanged OnValueChanged ; FOnValueCommitted OnValueCommitted ; FOnUndeterminedValueChanged OnUndeterminedValueChanged ; FOnUndeterminedValueCommitted OnUndeterminedValueCommitted ; FText UndeterminedString ; const FSlateBrush* BorderImageNormal ; const FSlateBrush* BorderImageHovered ; const FSlateBrush* BorderImageFocused ; TAttribute<float> MinDesiredValueWidth ; TSharedPtr<INumericTypeInterface<NumericType>> Interface ; TOptional<NumericType> CachedExternalValue ; FString CachedValueString ; bool bCachedValueStringDirty ; TAttribute<TOptional<int32>> MinFractionalDigits ; TAttribute<TOptional<int32>> MaxFractionalDigits ; } ; template<NumericType> const FLinearColor SNumericEntryBox<NumericType)",
    "insertText": "RedLabelBackgroundColor(0.594f,0.0197f,0.0f)"
  },
  {
    "label": "GreenLabelBackgroundColor()",
    "kind": "Method",
    "detail": "Function (template<NumericType> const FLinearColor SNumericEntryBox<NumericType)",
    "insertText": "GreenLabelBackgroundColor(0.1349f,0.3959f,0.0f)"
  },
  {
    "label": "BlueLabelBackgroundColor()",
    "kind": "Method",
    "detail": "Function (template<NumericType> const FLinearColor SNumericEntryBox<NumericType)",
    "insertText": "BlueLabelBackgroundColor(0.0251f,0.207f,0.85f)"
  },
  {
    "label": "LilacLabelBackgroundColor()",
    "kind": "Method",
    "detail": "Function (template<NumericType> const FLinearColor SNumericEntryBox<NumericType)",
    "insertText": "LilacLabelBackgroundColor(0.8f,0.121f,0.8f)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<NumericType> const FText SNumericEntryBox<NumericType>::DefaultUndeterminedString =)",
    "insertText": "FromString(TEXT(\"---\"))"
  }
]