[
  {
    "label": "FAsyncNetworkPhysicsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncNetworkPhysicsComponent"
  },
  {
    "label": "TNetRewindHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNetRewindHistory"
  },
  {
    "label": "FNetworkPhysicsRewindDataProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsRewindDataProxy"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FNetworkPhysicsRewindDataInputProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsRewindDataInputProxy"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FNetworkPhysicsRewindDataStateProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsRewindDataStateProxy"
  },
  {
    "label": "FNetworkPhysicsRewindDataImportantInputProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsRewindDataImportantInputProxy"
  },
  {
    "label": "FNetworkPhysicsRewindDataImportantStateProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsRewindDataImportantStateProxy"
  },
  {
    "label": "FNetworkPhysicsCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsCallback"
  },
  {
    "label": "UNetworkPhysicsSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetworkPhysicsSystem"
  },
  {
    "label": "FNetworkPhysicsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsData"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FNetworkPhysicsDataHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPhysicsDataHelper"
  },
  {
    "label": "TNetworkPhysicsDataHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNetworkPhysicsDataHelper"
  },
  {
    "label": "UNetworkPhysicsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetworkPhysicsComponent"
  },
  {
    "label": "InputsType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputsType"
  },
  {
    "label": "FAsyncNetworkPhysicsComponentInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncNetworkPhysicsComponentInput"
  },
  {
    "label": "FAsyncNetworkPhysicsComponentOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncNetworkPhysicsComponentOutput"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RewindData . h \" # include \" Components / ActorComponent . h \" # include \" GameFramework / PawnMovementComponent . h \" # include \" GameFramework / PlayerController . h \" # include \" Engine / NetConnection . h \" # include \" Engine / World . h \" # include \" Physics / Experimental / PhysScene_Chaos . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" PhysicsEngine / PhysicsSettings . h \" # include \" Chaos / PhysicsObject . h \" # include \" Physics / NetworkPhysicsSettingsComponent . h \" # include \" NetworkPhysicsComponent . generated . h \" class FAsyncNetworkPhysicsComponent ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPreProcessInputsInternal, const int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPostProcessInputsInternal, const int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnInjectInputsExternal, const int32 , const int32)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (template<DataType> struct TNetRewindHistory : public Chaos::TDataRewindHistory<DataType> { using Super = Chaos::TDataRewindHistory<DataType> ;)",
    "insertText": "TNetRewindHistory(const int32 FrameCount, const bool bIsHistoryLocal) : Super(FrameCount, bIsHistoryLocal)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TNetRewindHistory(const int32 FrameCount) : Super(FrameCount)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TNetRewindHistory()"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<Chaos::FBaseRewindHistory>)",
    "insertText": "CreateNew()"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TNetRewindHistory> Copy = MakeUnique<)",
    "insertText": "TNetRewindHistory(0, Super::bIsLocalHistory)"
  },
  {
    "label": "ValidateDataInHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateDataInHistory(const void* ActorComponent)"
  },
  {
    "label": "UActorComponent()",
    "kind": "Method",
    "detail": "Function (const UActorComponent* NetworkComponent = static_cast<const)",
    "insertText": "UActorComponent(ActorComponent)"
  },
  {
    "label": "ValidateData()",
    "kind": "Method",
    "detail": "Function (DataType& FrameData = Super::DataHistory [ FrameIndex ] ; FrameData .)",
    "insertText": "ValidateData(NetworkComponent)"
  },
  {
    "label": "CountValidData()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "CountValidData(const uint32 StartFrame, const uint32 EndFrame, const bool bIncludeUnimportant = true, const bool bIncludeImportant = false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DataType FrameData ; int32 Count = 0 ;)",
    "insertText": "for(uint32 CopyFrame = StartFrame; CopyFrame <= EndFrame; ++CopyFrame)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 CopyIndex =)",
    "insertText": "GetFrameIndex(CopyFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FrameData = Super::DataHistory [ CopyIndex ] ;)",
    "insertText": "if((!FrameData.bImportant && bIncludeUnimportant) || (FrameData.bImportant && bIncludeImportant))"
  },
  {
    "label": "SetImportant()",
    "kind": "Method",
    "detail": "Function (Count + + ; } } } return Count ; } void)",
    "insertText": "SetImportant(const bool bImportant, const int32 Frame = INDEX_NONE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Super::DataHistory [ Super::CurrentIndex ] . bImportant = bImportant ; } } else {)",
    "insertText": "for(int32 CopyIndex = 0; CopyIndex < Super::NumFrames; ++CopyIndex)"
  },
  {
    "label": "ApplyDataRange()",
    "kind": "Method",
    "detail": "Function (Super::DataHistory [ CopyIndex ] . bImportant = bImportant ; } } } void)",
    "insertText": "ApplyDataRange(const int32 FromFrame, const int32 ToFrame, void* ActorComponent, const bool bOnlyImportant = false)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 ApplyIndex =)",
    "insertText": "GetFrameIndex(ApplyFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DataType& FrameData = Super::DataHistory [ ApplyIndex ] ;)",
    "insertText": "if(ApplyFrame == FrameData.LocalFrame && (!bOnlyImportant || FrameData.bImportant))"
  },
  {
    "label": "ApplyData()",
    "kind": "Method",
    "detail": "Function (FrameData .)",
    "insertText": "ApplyData(NetworkComponent)"
  },
  {
    "label": "CopyAllData()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "CopyAllData(Chaos::FBaseRewindHistory& OutHistory, bool bIncludeUnimportant = true, bool bIncludeImportant = false)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (TNetRewindHistory& OutNetHistory = static_cast<)",
    "insertText": "TNetRewindHistory(OutHistory)"
  },
  {
    "label": "RecordData()",
    "kind": "Method",
    "detail": "Function (OutNetHistory .)",
    "insertText": "RecordData(FrameData.LocalFrame, &FrameData)"
  },
  {
    "label": "CopyData()",
    "kind": "Method",
    "detail": "Function (bHasCopiedData = true ; } } return bHasCopiedData ; } bool)",
    "insertText": "CopyData(Chaos::FBaseRewindHistory& OutHistory, const uint32 StartFrame, const uint32 EndFrame, bool bIncludeUnimportant = true, bool bIncludeImportant = false)"
  },
  {
    "label": "RecordData()",
    "kind": "Method",
    "detail": "Function (OutNetHistory .)",
    "insertText": "RecordData(CopyFrame, &FrameData)"
  },
  {
    "label": "CopyFramesWithOffset()",
    "kind": "Method",
    "detail": "Function (bHasCopiedData = true ; } } } return bHasCopiedData ; } TUniquePtr<Chaos::FBaseRewindHistory>)",
    "insertText": "CopyFramesWithOffset(const uint32 StartFrame, const uint32 EndFrame, const int32 FrameOffset)"
  },
  {
    "label": "FramesCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FramesCount(uint32)Super::NumValidData(StartFrame, EndFrame)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TNetRewindHistory> Copy = MakeUnique<)",
    "insertText": "TNetRewindHistory(FramesCount, Super::bIsLocalHistory)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DataType FrameData ;)",
    "insertText": "for(uint32 CopyFrame = StartFrame; CopyFrame < EndFrame; ++CopyFrame)"
  },
  {
    "label": "RecordDatas()",
    "kind": "Method",
    "detail": "Function (FrameData = Super::DataHistory [ CopyIndex ] ; FrameData . ServerFrame = FrameData . LocalFrame + FrameOffset ; PRAGMA_DISABLE_DEPRECATION_WARNINGS Copy ->)",
    "insertText": "RecordDatas(CopyFrame, &FrameData)"
  },
  {
    "label": "ReceiveNewData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } } return Copy ; } int32)",
    "insertText": "ReceiveNewData(Chaos::FBaseRewindHistory& NewData, const int32 FrameOffset, bool CompareDataForRewind = false, const bool bImportant = false)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (TNetRewindHistory& NetNewData = static_cast<)",
    "insertText": "TNetRewindHistory(NewData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 RewindFrame = INDEX_NONE ;)",
    "insertText": "if(NetNewData.NumFrames > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DataType& FrameData = NetNewData . DataHistory [ FrameIndex ] ; FrameData . bImportant = bImportant ; FrameData . bReceivedData = true ; FrameData . LocalFrame = FrameData . ServerFrame - FrameOffset ;)",
    "insertText": "if(ShouldRecordReceivedDataOnFrame(FrameData))"
  },
  {
    "label": "RecordDatas()",
    "kind": "Method",
    "detail": "Function (RewindFrame = FrameData . LocalFrame ; } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "RecordDatas(FrameData.LocalFrame, &FrameData)"
  },
  {
    "label": "ShouldRecordReceivedDataOnFrame()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } } } return RewindFrame ; } bool)",
    "insertText": "ShouldRecordReceivedDataOnFrame(const DataType& ReceivedData)"
  },
  {
    "label": "TriggerRewindFromNewData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TriggerRewindFromNewData(DataType& NewData)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "NetSerialize(FArchive& Ar, UPackageMap* InPackageMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Super::NumFrames ;)",
    "insertText": "if(Super::NumFrames > GetMaxArraySize())"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetError()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Super::DataHistory .)",
    "insertText": "SetNum(Super::NumFrames)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(DataType& Data : Super::DataHistory)"
  },
  {
    "label": "NetSerializeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetSerializeData(Data, Ar, InPackageMap)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DebugData(const Chaos::FBaseRewindHistory& DebugHistory, TArray<int32>& LocalFrames, TArray<int32>& ServerFrames, TArray<int32>& InputFrames)"
  },
  {
    "label": "TNetRewindHistory()",
    "kind": "Method",
    "detail": "Function (const TNetRewindHistory& NetDebugHistory = static_cast<const)",
    "insertText": "TNetRewindHistory(DebugHistory)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (LocalFrames .)",
    "insertText": "SetNum(NetDebugHistory.NumFrames)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DataType FrameData ;)",
    "insertText": "for(int32 FrameIndex = 0; FrameIndex < NetDebugHistory.NumFrames; ++FrameIndex)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (FrameData = NetDebugHistory . DataHistory [ FrameIndex ] ; LocalFrames [ FrameIndex ] = FrameData . LocalFrame ; ServerFrames [ FrameIndex ] = FrameData . ServerFrame ; InputFrames [ FrameIndex ] = FrameData . InputFrame ; } } } void)",
    "insertText": "DebugData(const FString& DebugText)"
  },
  {
    "label": "GetMaxArraySize()",
    "kind": "Method",
    "detail": "Function (} } } private : int32)",
    "insertText": "GetMaxArraySize()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (int32 MaxArraySize =)",
    "insertText": "Get()->GetPhysicsHistoryCount()"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (bool bOutSuccess = false ; UScriptStruct* ScriptStruct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "GetCppStructOps()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "GetCppStructOps()->NetSerialize(Ar, PackageMap, bOutSuccess, &FrameData)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogTemp, Error, TEXT(\"TNetRewindHistory::NetSerializeData called on data struct %s without a native NetSerialize\"), *ScriptStruct->GetName())"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} return bOutSuccess ; } } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FNetworkPhysicsRewindDataProxy& operator=(const FNetworkPhysicsRewindDataProxy& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FNetworkPhysicsRewindDataProxy& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "FNetworkPhysicsCallback()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FNetworkPhysicsRewindDataImportantStateProxy> : public TStructOpsTypeTraitsBase2<FNetworkPhysicsRewindDataImportantStateProxy> { enum { WithNetSerializer = true,WithIdenticalViaEquality = true } ; } ; struct FNetworkPhysicsCallback : public Chaos::IRewindCallback {)",
    "insertText": "FNetworkPhysicsCallback(UWorld* InWorld) : World(InWorld)"
  },
  {
    "label": "InjectInputs_External()",
    "kind": "Method",
    "detail": "Function (} FOnPreProcessInputsInternal PreProcessInputsInternal ; FOnPostProcessInputsInternal PostProcessInputsInternal ; FOnInjectInputsExternal InjectInputsExternal ; void)",
    "insertText": "InjectInputs_External(int32 PhysicsStep, int32 NumSteps)"
  },
  {
    "label": "ProcessInputs_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInputs_External(int32 PhysicsStep, const TArray<Chaos::FSimCallbackInputAndObject>& SimCallbackInputs)"
  },
  {
    "label": "ProcessInputs_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInputs_Internal(int32 PhysicsStep, const TArray<Chaos::FSimCallbackInputAndObject>& SimCallbackInputs)"
  },
  {
    "label": "PreResimStep_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreResimStep_Internal(int32 PhysicsStep, bool bFirst)"
  },
  {
    "label": "PostResimStep_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostResimStep_Internal(int32 PhysicsStep)"
  },
  {
    "label": "TriggerRewindIfNeeded_Internal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TriggerRewindIfNeeded_Internal(int32 LatestStepCompleted)"
  },
  {
    "label": "RegisterRewindableSimCallback_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterRewindableSimCallback_Internal(Chaos::ISimCallbackObject* SimCallbackObject)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RewindableCallbackObjects .)",
    "insertText": "Add(SimCallbackObject)"
  },
  {
    "label": "UnregisterRewindableSimCallback_Internal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnregisterRewindableSimCallback_Internal(Chaos::ISimCallbackObject* SimCallbackObject)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (RewindableCallbackObjects .)",
    "insertText": "Remove(SimCallbackObject)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (UWorld* World = nullptr ; TArray<Chaos::ISimCallbackObject*> RewindableCallbackObjects ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() ENGINE_API UNetworkPhysicsSystem()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (struct FNetworkPhysicsCallback ; void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "OnWorldPostInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPostInit(UWorld* World, const UWorld::InitializationValues)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() virtual ~FNetworkPhysicsData()"
  },
  {
    "label": "SerializeFrames()",
    "kind": "Method",
    "detail": "Function (bool bReceivedData = false ; bool bImportant = false ; void)",
    "insertText": "SerializeFrames(FArchive& Ar)"
  },
  {
    "label": "PrepareFrame()",
    "kind": "Method",
    "detail": "Function (Ar<<ServerFrame ; Ar<<LocalFrame ; Ar<<InputFrame ; } void)",
    "insertText": "PrepareFrame(int32 CurrentFrame, bool bIsServer, int32 ClientFrameOffset)"
  },
  {
    "label": "SetImportant()",
    "kind": "Method",
    "detail": "Function (LocalFrame = CurrentFrame ; ServerFrame = bIsServer ? CurrentFrame : CurrentFrame + ClientFrameOffset ; InputFrame = CurrentFrame ; bReceivedData = false ; bImportant = false ; } void)",
    "insertText": "SetImportant(bool bIsImportant)"
  },
  {
    "label": "ApplyData()",
    "kind": "Method",
    "detail": "Function (bImportant = bIsImportant ; } void)",
    "insertText": "ApplyData(UActorComponent* NetworkComponent)"
  },
  {
    "label": "ApplyDatas()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "ApplyDatas(NetworkComponent)"
  },
  {
    "label": "BuildData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "BuildData(const UActorComponent* NetworkComponent)"
  },
  {
    "label": "BuildDatas()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "BuildDatas(NetworkComponent)"
  },
  {
    "label": "InterpolateData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "InterpolateData(const FNetworkPhysicsData& MinData, const FNetworkPhysicsData& MaxData)"
  },
  {
    "label": "DecayData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecayData(float DecayAmount)"
  },
  {
    "label": "MergeData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeData(const FNetworkPhysicsData& FromData)"
  },
  {
    "label": "ValidateData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateData(const UActorComponent* NetworkComponent)"
  },
  {
    "label": "CompareData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareData(const FNetworkPhysicsData& PredictedData)"
  },
  {
    "label": "InterpolateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateData(MinData, MaxData)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "DebugData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNetworkPhysicsData& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() virtual ~FNetworkPhysicsDatas()"
  },
  {
    "label": "SerializeFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeFrames(FArchive & Ar)"
  },
  {
    "label": "SerializeFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeFrames(Ar)"
  },
  {
    "label": "FNetworkPhysicsDataHelper()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNetworkPhysicsDataHelper { ~)",
    "insertText": "FNetworkPhysicsDataHelper()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FNetworkPhysicsDataHelper>)",
    "insertText": "Clone()"
  },
  {
    "label": "CreateUniqueData()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FNetworkPhysicsData>)",
    "insertText": "CreateUniqueData()"
  },
  {
    "label": "CreateUniqueRewindHistory()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<Chaos::FBaseRewindHistory>)",
    "insertText": "CreateUniqueRewindHistory(const int32 Size)"
  },
  {
    "label": "TNetworkPhysicsDataHelper()",
    "kind": "Method",
    "detail": "Function (} ; template<DataType> struct TNetworkPhysicsDataHelper : FNetworkPhysicsDataHelper { ~)",
    "insertText": "TNetworkPhysicsDataHelper()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API UNetworkPhysicsComponent()"
  },
  {
    "label": "GetPlayerController()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "GetPlayerController()"
  },
  {
    "label": "InitPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPhysics()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifeTimeProps)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "UninitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeComponent()"
  },
  {
    "label": "RemoveDataHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDataHistory()"
  },
  {
    "label": "AddDataHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDataHistory()"
  },
  {
    "label": "GetStateHistory_External()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Chaos::FBaseRewindHistory>&)",
    "insertText": "GetStateHistory_External()"
  },
  {
    "label": "GetInputHistory_External()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Chaos::FBaseRewindHistory>&)",
    "insertText": "GetInputHistory_External()"
  },
  {
    "label": "HasServerWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasServerWorld()"
  },
  {
    "label": "IsLocallyControlled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocallyControlled()"
  },
  {
    "label": "SetIsRelayingLocalInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRelayingLocalInputs(bool bInRelayingLocalInputs)"
  },
  {
    "label": "StopRelayingLocalInputsDeferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRelayingLocalInputsDeferred()"
  },
  {
    "label": "GetIsRelayingLocalInputs()",
    "kind": "Method",
    "detail": "Function (bStopRelayingLocalInputsDeferred = true ; } } const bool)",
    "insertText": "GetIsRelayingLocalInputs()"
  },
  {
    "label": "NetworkMarshaledData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "NetworkMarshaledData()"
  },
  {
    "label": "UpdateAsyncComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAsyncComponent(const bool bFullUpdate)"
  },
  {
    "label": "CreateAsyncDataHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAsyncDataHistory()"
  },
  {
    "label": "SetNumberOfInputsToNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumberOfInputsToNetwork(uint16 RedundantInputs)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (InputsToNetwork =)",
    "insertText": "Max((uint16)(1 + RedundantInputs), (uint16)1)"
  },
  {
    "label": "SetNumberOfStatesToNetwork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumberOfStatesToNetwork(uint16 RedundantStates)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (StatesToNetwork =)",
    "insertText": "Max((uint16)(1 + RedundantStates), (uint16)1)"
  },
  {
    "label": "CreateDataHistory()",
    "kind": "Method",
    "detail": "Function (} public : template<PhysicsTraits> void)",
    "insertText": "CreateDataHistory(UActorComponent* HistoryComponent)"
  },
  {
    "label": "CreateInputHistory()",
    "kind": "Method",
    "detail": "Function (template<class InputsType> void)",
    "insertText": "CreateInputHistory(UActorComponent* HistoryComponent)"
  },
  {
    "label": "SendInputData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SendInputData()"
  },
  {
    "label": "SendStateData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SendStateData()"
  },
  {
    "label": "GetStateHistory()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "GetStateHistory()"
  },
  {
    "label": "GetInputHistory()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "GetInputHistory()"
  },
  {
    "label": "CreateDatasHistory()",
    "kind": "Method",
    "detail": "Function (} ; template<PhysicsTraits> void)",
    "insertText": "CreateDatasHistory(UActorComponent* HistoryComponent)"
  },
  {
    "label": "PhysicsTraits()",
    "kind": "Method",
    "detail": "Function (CreateDataHistory<)",
    "insertText": "PhysicsTraits(HistoryComponent)"
  },
  {
    "label": "InputsType()",
    "kind": "Method",
    "detail": "Function (InputHelper = MakeUnique<TNetworkPhysicsDataHelper<)",
    "insertText": "InputsType()"
  },
  {
    "label": "StatesType()",
    "kind": "Method",
    "detail": "Function (StateHelper = MakeUnique<TNetworkPhysicsDataHelper<)",
    "insertText": "StatesType()"
  },
  {
    "label": "InputsType()",
    "kind": "Method",
    "detail": "Function (ReplicatedInputs . History = MakeUnique<TNetRewindHistory<)",
    "insertText": "InputsType(InputsToNetwork)"
  },
  {
    "label": "StatesType()",
    "kind": "Method",
    "detail": "Function (ReplicatedInputs . Owner = this ; ReplicatedStates . History = MakeUnique<TNetRewindHistory<)",
    "insertText": "StatesType(StatesToNetwork)"
  },
  {
    "label": "InputsType()",
    "kind": "Method",
    "detail": "Function (ReplicatedStates . Owner = this ; ReplicatedImportantInput . History = MakeUnique<TNetRewindHistory<)",
    "insertText": "InputsType(1)"
  },
  {
    "label": "StatesType()",
    "kind": "Method",
    "detail": "Function (ReplicatedImportantInput . Owner = this ; ReplicatedImportantState . History = MakeUnique<TNetRewindHistory<)",
    "insertText": "StatesType(1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} struct FAsyncNetworkPhysicsComponentInput : public Chaos::FSimCallbackInput { TOptional<bool> bIsLocallyControlled ; TOptional<ENetMode> NetMode ; TOptional<ENetRole> NetRole ; TOptional<int32> NetworkPhysicsTickOffset ; TOptional<EPhysicsReplicationMode> PhysicsReplicationMode ; TOptional<TObjectPtr<UActorComponent>> ActorComponent ; TOptional<FString> ActorName ; TOptional<TUniquePtr<FNetworkPhysicsDataHelper>> InputHelper ; TOptional<TUniquePtr<FNetworkPhysicsDataHelper>> StateHelper ; TOptional<bool> bRegisterDataHistoryInRewindData ; TOptional<bool> bUnregisterDataHistoryFromRewindData ; TUniquePtr<Chaos::FBaseRewindHistory> InputData ; TUniquePtr<Chaos::FBaseRewindHistory> StateData ; TArray<TUniquePtr<Chaos::FBaseRewindHistory>> InputDataImportant ; TArray<TUniquePtr<Chaos::FBaseRewindHistory>> StateDataImportant ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetFast()",
    "kind": "Method",
    "detail": "Function (InputData ->)",
    "insertText": "ResetFast()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(StateData)"
  },
  {
    "label": "FAsyncNetworkPhysicsComponent()",
    "kind": "Method",
    "detail": "Function (} } ; class FAsyncNetworkPhysicsComponent : public Chaos::TSimCallbackObject<FAsyncNetworkPhysicsComponentInput,FAsyncNetworkPhysicsComponentOutput,Chaos::ESimCallbackOptions::None> { public :)",
    "insertText": "FAsyncNetworkPhysicsComponent()"
  },
  {
    "label": "GetAsyncOutput_Internal()",
    "kind": "Method",
    "detail": "Function (FAsyncNetworkPhysicsComponentOutput&)",
    "insertText": "GetAsyncOutput_Internal()"
  },
  {
    "label": "GetNetRole()",
    "kind": "Method",
    "detail": "Function (} const ENetRole)",
    "insertText": "GetNetRole()"
  },
  {
    "label": "UnregisterDataHistoryFromRewindData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDataHistoryFromRewindData()"
  },
  {
    "label": "SetupRewindData()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "SetupRewindData()"
  },
  {
    "label": "OnPostInitialize_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPostInitialize_Internal()"
  },
  {
    "label": "OnPreProcessInputs_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreProcessInputs_Internal(const int32 PhysicsStep)"
  },
  {
    "label": "OnPostProcessInputs_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostProcessInputs_Internal(const int32 PhysicsStep)"
  },
  {
    "label": "ConsumeAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeAsyncInput(const int32 PhysicsStep)"
  },
  {
    "label": "GetRigidSolver()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidsSolver*)",
    "insertText": "GetRigidSolver()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidsEvolution*)",
    "insertText": "GetEvolution()"
  },
  {
    "label": "GetComponentSettings()",
    "kind": "Method",
    "detail": "Function (const FNetworkPhysicsSettingsNetworkPhysicsComponent&)",
    "insertText": "GetComponentSettings()"
  },
  {
    "label": "TriggerResimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerResimulation(int32 ResimFrame)"
  },
  {
    "label": "GetCurrentInputDecay()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "GetCurrentInputDecay(const FNetworkPhysicsData* PhysicsData)"
  },
  {
    "label": "SendInputData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendInputData_Internal(FAsyncNetworkPhysicsComponentOutput& AsyncOutput, const int32 PhysicsStep)"
  },
  {
    "label": "SendStateData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStateData_Internal(FAsyncNetworkPhysicsComponentOutput& AsyncOutput, const int32 PhysicsStep)"
  }
]