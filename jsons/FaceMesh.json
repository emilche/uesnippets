[
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FFaceMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Mesh / Structure / Mesh . h \" namespace UE::CADKernel { class FModelMesh ; class FPoint ; class FTopologicalEntity ; class FTopologicalFace ; class FFaceMesh : public FMesh { public : TArray<int32> TrianglesVerticesIndex ; TArray<int32> VerticesGlobalIndex ; TArray<FVector3f> Normals ; TArray<FVector2f> UVMap ; public :)",
    "insertText": "FFaceMesh(FModelMesh& InMeshModel, FTopologicalEntity& InTopologicalEntity) : FMesh(InMeshModel, InTopologicalEntity)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(int32 TriangleNum, int32 VertexNum)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TrianglesVerticesIndex .)",
    "insertText": "Reserve(TriangleNum * 3)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (VerticesGlobalIndex .)",
    "insertText": "Reserve(VertexNum)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangle(int32 IndexA, int32 IndexB, int32 IndexC)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TrianglesVerticesIndex .)",
    "insertText": "Add(IndexB)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TrianglesVerticesIndex .)",
    "insertText": "Add(IndexC)"
  },
  {
    "label": "InverseOrientation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InverseOrientation()"
  },
  {
    "label": "GetNodeIdToCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodeIdToCoordinates(TMap<int32, const FPoint*>& NodeIdToCoordinates)"
  }
]