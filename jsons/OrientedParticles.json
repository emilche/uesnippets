[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TOrientedParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOrientedParticles"
  },
  {
    "label": "TOrientedParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / Particles . h \" # include \" Chaos / Rotation . h \" namespace Chaos { template<class T,int d> class TOrientedParticles : public TParticles<T,d> { public :)",
    "insertText": "TOrientedParticles() : TParticles<T, d>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MR)"
  },
  {
    "label": "TOrientedParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOrientedParticles(const TOrientedParticles<T, d>& Other)"
  },
  {
    "label": "TOrientedParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TOrientedParticles(TOrientedParticles<T, d>&& Other) : TParticles<T, d>(MoveTemp(Other)), MR(MoveTemp(Other.MR))"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>&)",
    "insertText": "R(const int32 Index)"
  }
]