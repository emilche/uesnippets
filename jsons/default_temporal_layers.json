[
  {
    "label": "DefaultTemporalLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultTemporalLayers"
  },
  {
    "label": "DependencyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DependencyInfo"
  },
  {
    "label": "PendingFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingFrame"
  },
  {
    "label": "DefaultTemporalLayersChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultTemporalLayersChecker"
  },
  {
    "label": "BufferState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BufferState"
  },
  {
    "label": "DefaultTemporalLayers()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP8_DEFAULT_TEMPORAL_LAYERS_H_ # define MODULES_VIDEO_CODING_CODECS_VP8_DEFAULT_TEMPORAL_LAYERS_H_ # include<stddef . h> # include<stdint . h> # include<bitset> # include<deque> # include<limits> # include<memory> # include<set> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / video_codecs / vp8_frame_config . h \" # include \" api / video_codecs / vp8_temporal_layers . h \" # include \" modules / video_coding / codecs / vp8 / include / temporal_layers_checker . h \" # include \" modules / video_coding / include / video_codec_interface . h \" namespace webrtc { class DefaultTemporalLayers final : public Vp8FrameBufferController { public :)",
    "insertText": "DefaultTemporalLayers(int number_of_temporal_layers)"
  },
  {
    "label": "DefaultTemporalLayers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultTemporalLayers()"
  },
  {
    "label": "SetQpLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQpLimits(size_t stream_index, int min_qp, int max_qp)"
  },
  {
    "label": "StreamCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StreamCount()"
  },
  {
    "label": "SupportsEncoderFrameDropping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncoderFrameDropping(size_t stream_index)"
  },
  {
    "label": "NextFrameConfig()",
    "kind": "Method",
    "detail": "Function (Vp8FrameConfig)",
    "insertText": "NextFrameConfig(size_t stream_index, uint32_t timestamp)"
  },
  {
    "label": "OnRatesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRatesUpdated(size_t stream_index, const std::vector<uint32_t>& bitrates_bps, int framerate_fps)"
  },
  {
    "label": "UpdateConfiguration()",
    "kind": "Method",
    "detail": "Function (Vp8EncoderConfig)",
    "insertText": "UpdateConfiguration(size_t stream_index)"
  },
  {
    "label": "OnEncodeDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeDone(size_t stream_index, uint32_t rtp_timestamp, size_t size_bytes, bool is_keyframe, int qp, CodecSpecificInfo* info)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(size_t stream_index, uint32_t rtp_timestamp)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const VideoEncoder::LossNotification& loss_notification)"
  },
  {
    "label": "DependencyInfo()",
    "kind": "Method",
    "detail": "Function (private : size_t kNumReferenceBuffers = 3 ; struct DependencyInfo {)",
    "insertText": "DependencyInfo()"
  },
  {
    "label": "DependencyInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DependencyInfo(absl::string_view indication_symbols, Vp8FrameConfig frame_config) : decode_target_indications( webrtc_impl::StringToDecodeTargetIndications(indication_symbols)), frame_config(frame_config)"
  },
  {
    "label": "PendingFrame()",
    "kind": "Method",
    "detail": "Function (} absl::InlinedVector<DecodeTargetIndication,1 0> decode_target_indications ; Vp8FrameConfig frame_config ; } ; struct PendingFrame {)",
    "insertText": "PendingFrame()"
  },
  {
    "label": "PendingFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingFrame(uint32_t timestamp, bool expired, uint8_t updated_buffers_mask, const DependencyInfo& dependency_info)"
  },
  {
    "label": "GetDependencyInfo()",
    "kind": "Method",
    "detail": "Function (uint32_t timestamp = 0 ; bool expired = false ; uint8_t updated_buffer_mask = 0 ; DependencyInfo dependency_info ; } ; std::vector<DependencyInfo>)",
    "insertText": "GetDependencyInfo(size_t num_layers)"
  },
  {
    "label": "DetermineStaticBuffers()",
    "kind": "Method",
    "detail": "Function (std::bitset<kNumReferenceBuffers>)",
    "insertText": "DetermineStaticBuffers(const std::vector<DependencyInfo>& temporal_pattern)"
  },
  {
    "label": "IsSyncFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyncFrame(const Vp8FrameConfig& config)"
  },
  {
    "label": "ValidateReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateReferences(Vp8FrameConfig::BufferFlags* flags, Vp8FrameConfig::Vp8BufferReference ref)"
  },
  {
    "label": "UpdateSearchOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSearchOrder(Vp8FrameConfig* config)"
  },
  {
    "label": "NumFramesSinceBufferRefresh()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumFramesSinceBufferRefresh(Vp8FrameConfig::Vp8BufferReference ref)"
  },
  {
    "label": "ResetNumFramesSinceBufferRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNumFramesSinceBufferRefresh(Vp8FrameConfig::Vp8BufferReference ref)"
  },
  {
    "label": "CullPendingFramesBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullPendingFramesBefore(uint32_t timestamp)"
  },
  {
    "label": "GetTemplateStructure()",
    "kind": "Method",
    "detail": "Function (const size_t num_layers_ ; const std::vector<unsigned int> temporal_ids_ ; const std::vector<DependencyInfo> temporal_pattern_ ; const std::bitset<kNumReferenceBuffers> is_static_buffer_ ; FrameDependencyStructure)",
    "insertText": "GetTemplateStructure(int num_layers)"
  },
  {
    "label": "DefaultTemporalLayersChecker()",
    "kind": "Method",
    "detail": "Function (uint8_t pattern_idx_ ; absl::optional<std::vector<uint32_t>> new_bitrates_bps_ ; std::deque<PendingFrame> pending_frames_ ; std::array<size_t,kNumReferenceBuffers> frames_since_buffer_refresh_ ; std::unique_ptr<TemporalLayersChecker> checker_ ; } ; class DefaultTemporalLayersChecker : public TemporalLayersChecker { public :)",
    "insertText": "DefaultTemporalLayersChecker(int number_of_temporal_layers)"
  },
  {
    "label": "DefaultTemporalLayersChecker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultTemporalLayersChecker()"
  },
  {
    "label": "CheckTemporalConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTemporalConfig(bool frame_is_keyframe, const Vp8FrameConfig& frame_config)"
  },
  {
    "label": "BufferState()",
    "kind": "Method",
    "detail": "Function (private : struct BufferState {)",
    "insertText": "BufferState() : is_updated_this_cycle(false), is_keyframe(true), pattern_idx(0)"
  }
]