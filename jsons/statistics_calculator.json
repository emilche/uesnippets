[
  {
    "label": "DelayManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayManager"
  },
  {
    "label": "handles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "handles"
  },
  {
    "label": "StatisticsCalculator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsCalculator"
  },
  {
    "label": "PeriodicUmaLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeriodicUmaLogger"
  },
  {
    "label": "PeriodicUmaCount",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeriodicUmaCount"
  },
  {
    "label": "PeriodicUmaAverage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeriodicUmaAverage"
  },
  {
    "label": "StatisticsCalculator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "StatisticsCalculator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetMcu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMcu()"
  },
  {
    "label": "ExpandedVoiceSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandedVoiceSamples(size_t num_samples, bool is_new_concealment_event)"
  },
  {
    "label": "ExpandedNoiseSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandedNoiseSamples(size_t num_samples, bool is_new_concealment_event)"
  },
  {
    "label": "ExpandedVoiceSamplesCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandedVoiceSamplesCorrection(int num_samples)"
  },
  {
    "label": "ExpandedNoiseSamplesCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandedNoiseSamplesCorrection(int num_samples)"
  },
  {
    "label": "DecodedOutputPlayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodedOutputPlayed()"
  },
  {
    "label": "EndExpandEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndExpandEvent(int fs_hz)"
  },
  {
    "label": "PreemptiveExpandedSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreemptiveExpandedSamples(size_t num_samples)"
  },
  {
    "label": "AcceleratedSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcceleratedSamples(size_t num_samples)"
  },
  {
    "label": "GeneratedNoiseSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratedNoiseSamples(size_t num_samples)"
  },
  {
    "label": "PacketsDiscarded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketsDiscarded(size_t num_packets)"
  },
  {
    "label": "SecondaryPacketsDiscarded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SecondaryPacketsDiscarded(size_t num_packets)"
  },
  {
    "label": "SecondaryPacketsReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SecondaryPacketsReceived(size_t num_packets)"
  },
  {
    "label": "IncreaseCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseCounter(size_t num_samples, int fs_hz)"
  },
  {
    "label": "JitterBufferDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JitterBufferDelay(size_t num_samples,\n                         uint64_t waiting_time_ms,\n                         uint64_t target_delay_ms,\n                         uint64_t unlimited_target_delay_ms)"
  },
  {
    "label": "StoreWaitingTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreWaitingTime(int waiting_time_ms)"
  },
  {
    "label": "SecondaryDecodedSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SecondaryDecodedSamples(int num_samples)"
  },
  {
    "label": "FlushedPacketBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushedPacketBuffer()"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedPacket()"
  },
  {
    "label": "RelativePacketArrivalDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativePacketArrivalDelay(size_t delay_ms)"
  },
  {
    "label": "LogDelayedPacketOutageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDelayedPacketOutageEvent(int num_samples, int fs_hz)"
  },
  {
    "label": "GetNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNetworkStatistics(size_t samples_per_packet,\n                            NetEqNetworkStatistics* stats)"
  },
  {
    "label": "PeriodicUmaLogger()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PeriodicUmaLogger(absl::string_view uma_name,\n                      int report_interval_ms,\n                      int max_value)"
  },
  {
    "label": "AdvanceClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceClock(int step_ms)"
  },
  {
    "label": "PeriodicUmaCount()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PeriodicUmaCount(absl::string_view uma_name,\n                     int report_interval_ms,\n                     int max_value)"
  },
  {
    "label": "RegisterSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSample()"
  },
  {
    "label": "PeriodicUmaAverage()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PeriodicUmaAverage(absl::string_view uma_name,\n                       int report_interval_ms,\n                       int max_value)"
  },
  {
    "label": "RegisterSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSample(int value)"
  },
  {
    "label": "ConcealedSamplesCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcealedSamplesCorrection(int num_samples, bool is_voice)"
  },
  {
    "label": "CalculateQ14Ratio()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "CalculateQ14Ratio(size_t numerator, uint32_t denominator)"
  }
]