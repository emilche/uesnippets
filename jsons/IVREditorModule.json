[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "IVREditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVREditorModule"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "UVREditorModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorModeBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FVREditorFloatingUICreationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVREditorFloatingUICreationContext"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SubclassOf . h \" class AActor ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnVREditingModeEnter)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnVREditingModeExit)"
  },
  {
    "label": "OnVREditingModeEnter()",
    "kind": "Method",
    "detail": "Function (class IVREditorModule : public IModuleInterface { public : FOnVREditingModeEnter&)",
    "insertText": "OnVREditingModeEnter()"
  },
  {
    "label": "OnVREditingModeExit()",
    "kind": "Method",
    "detail": "Function (FOnVREditingModeExit&)",
    "insertText": "OnVREditingModeExit()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IVREditorModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "IsVREditorEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVREditorEnabled()"
  },
  {
    "label": "IsVREditorAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVREditorAvailable()"
  },
  {
    "label": "IsVREditorButtonActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVREditorButtonActive()"
  },
  {
    "label": "EnableVREditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVREditor(const bool bEnable, const bool bForceWithoutHMD = false)"
  },
  {
    "label": "IsVREditorModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVREditorModeActive()"
  },
  {
    "label": "GetVRMode()",
    "kind": "Method",
    "detail": "Function (class UVREditorMode*)",
    "insertText": "GetVRMode()"
  },
  {
    "label": "GetVRModeBase()",
    "kind": "Method",
    "detail": "Function (class UVREditorModeBase*)",
    "insertText": "GetVRModeBase()"
  },
  {
    "label": "UpdateActorPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorPreview(TSharedRef<class SWidget> InWidget, int32 Index, AActor *Actor = nullptr, bool bIsDetached = false)"
  },
  {
    "label": "UpdateExternalUMGUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalUMGUI(const struct FVREditorFloatingUICreationContext& CreationContext)"
  },
  {
    "label": "UpdateExternalSlateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalSlateUI(TSharedRef<SWidget> InSlateWidget, FName Name, FVector2D InSize = FVector2D::ZeroVector)"
  },
  {
    "label": "GetRadialMenuExtender()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FExtender>)",
    "insertText": "GetRadialMenuExtender()"
  }
]