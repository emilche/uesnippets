[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstraintProfileProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintProfileProperties"
  },
  {
    "label": "EConstraintPlasticityType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstraintPlasticityType"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "FConstraintInstanceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceBase"
  },
  {
    "label": "FConstraintBrokenDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintBrokenDelegateData"
  },
  {
    "label": "FConstraintBrokenDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintBrokenDelegateWrapper"
  },
  {
    "label": "FConstraintViolatedDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintViolatedDelegateWrapper"
  },
  {
    "label": "FPlasticDeformationDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlasticDeformationDelegateWrapper"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "EConstraintPlasticityType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstraintPlasticityType"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPDIOrCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPDIOrCollector"
  },
  {
    "label": "ELinearConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinearConstraintMotion"
  },
  {
    "label": "ELinearConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinearConstraintMotion"
  },
  {
    "label": "ELinearConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinearConstraintMotion"
  },
  {
    "label": "EAngularConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAngularConstraintMotion"
  },
  {
    "label": "EAngularConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAngularConstraintMotion"
  },
  {
    "label": "EAngularConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAngularConstraintMotion"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FConstraintInstanceAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceAccessor"
  },
  {
    "label": "CalculateRelativeBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CalculateRelativeBoneTransform(const FName ToBoneName, const FName FromBoneName, const FReferenceSkeleton& ReferenceSkeleton)"
  },
  {
    "label": "FConstraintProfileProperties()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FConstraintProfileProperties()"
  },
  {
    "label": "SyncChangedConstraintProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncChangedConstraintProperties(struct FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "FConstraintInstanceBase()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FConstraintInstanceBase()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetConstraintBrokenDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintBrokenDelegate(FOnConstraintBroken InConstraintBrokenDelegate)"
  },
  {
    "label": "SetConstraintViolatedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintViolatedDelegate(FOnConstraintViolated InConstraintViolatedDelegate)"
  },
  {
    "label": "SetPlasticDeformationDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlasticDeformationDelegate(FOnPlasticDeformation InPlasticDeformationDelegate)"
  },
  {
    "label": "CopyProfilePropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyProfilePropertiesFrom(const FConstraintProfileProperties& FromProperties)"
  },
  {
    "label": "FConstraintInstance()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FConstraintInstance()"
  },
  {
    "label": "CopyConstraintGeometryFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintGeometryFrom(const FConstraintInstance* FromInstance)"
  },
  {
    "label": "CopyConstraintParamsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintParamsFrom(const FConstraintInstance* FromInstance)"
  },
  {
    "label": "CopyConstraintPhysicalPropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintPhysicalPropertiesFrom(const FConstraintInstance* FromInstance, bool bKeepPosition, bool bKeepRotation)"
  },
  {
    "label": "GetConstraintForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce)"
  },
  {
    "label": "IsBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBroken()"
  },
  {
    "label": "SetLinearPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)"
  },
  {
    "label": "SetLinearPositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPositionTarget(const FVector& InPosTarget)"
  },
  {
    "label": "SetLinearVelocityDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)"
  },
  {
    "label": "SetLinearVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "SetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveParams(float InPositionStrength, float InVelocityStrength, float InForceLimit)"
  },
  {
    "label": "SetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveParams(const FVector& InPositionStrength, const FVector& InVelocityStrength, const FVector& InForceLimit)"
  },
  {
    "label": "SetLinearDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "GetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearDriveParams(float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit)"
  },
  {
    "label": "GetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearDriveParams(FVector& OutPositionStrength, FVector& OutVelocityStrength, FVector& OutForceLimit)"
  },
  {
    "label": "SetOrientationDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveTwistAndSwing(bool bInEnableTwistDrive, bool bInEnableSwingDrive)"
  },
  {
    "label": "GetOrientationDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrientationDriveTwistAndSwing(bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive)"
  },
  {
    "label": "SetOrientationDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveSLERP(bool bInEnableSLERP)"
  },
  {
    "label": "SetAngularOrientationTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularOrientationTarget(const FQuat& InPosTarget)"
  },
  {
    "label": "SetAngularVelocityDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityDriveTwistAndSwing(bool bInEnableTwistDrive, bool bInEnableSwingDrive)"
  },
  {
    "label": "GetAngularVelocityDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAngularVelocityDriveTwistAndSwing(bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive)"
  },
  {
    "label": "SetAngularVelocityDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityDriveSLERP(bool bInEnableSLERP)"
  },
  {
    "label": "SetAngularVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "SetAngularDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)"
  },
  {
    "label": "SetAngularDriveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveMode(EAngularDriveMode::Type DriveMode)"
  },
  {
    "label": "SetAngularDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "SetDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDriveParams(\n\t\tconst FVector& InPositionStrength, const FVector& InVelocityStrength, const FVector& InForceLimit,\n\t\tconst FVector& InAngularSpring, const FVector& InAngularDamping, const FVector& InTorqueLimit,\n\t\tEAngularDriveMode::Type InAngularDriveMode)"
  },
  {
    "label": "UpdateLinearLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinearLimit()"
  },
  {
    "label": "UpdateAngularLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAngularLimit()"
  },
  {
    "label": "SetAngularDOFLimitScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale)"
  },
  {
    "label": "SetLinearLimitSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearLimitSize(float NewLimitSize)"
  },
  {
    "label": "TermConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermConstraint()"
  },
  {
    "label": "SetRefFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefFrame(EConstraintFrame::Type Frame, const FTransform& RefFrame)"
  },
  {
    "label": "GetConstraintLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetConstraintLocation()"
  },
  {
    "label": "SetRefPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefPosition(EConstraintFrame::Type Frame, const FVector& RefPosition)"
  },
  {
    "label": "SetRefOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefOrientation(EConstraintFrame::Type Frame, const FVector& PriAxis, const FVector& SecAxis)"
  },
  {
    "label": "SetDisableCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableCollision(bool InDisableCollision)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& Materials)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "EnableProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableProjection()"
  },
  {
    "label": "DisableProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableProjection()"
  },
  {
    "label": "SetProjectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectionParams(bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance)"
  },
  {
    "label": "SetShockPropagationParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShockPropagationParams(bool bEnableShockPropagation, float ShockPropagationAlpha)"
  },
  {
    "label": "EnableParentDominates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableParentDominates()"
  },
  {
    "label": "DisableParentDominates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableParentDominates()"
  },
  {
    "label": "SetParentDominates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentDominates(bool bParentDominates)"
  },
  {
    "label": "EnableMassConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMassConditioning()"
  },
  {
    "label": "DisableMassConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMassConditioning()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FConstraintInstance * Ptr)"
  },
  {
    "label": "CreateJoint_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateJoint_AssumesLocked(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2)"
  },
  {
    "label": "UpdateAverageMass_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAverageMass_AssumesLocked(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2)"
  },
  {
    "label": "UpdateBreakable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreakable()"
  },
  {
    "label": "UpdatePlasticity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlasticity()"
  },
  {
    "label": "UpdateContactTransferScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContactTransferScale()"
  },
  {
    "label": "UpdateDriveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDriveTarget()"
  },
  {
    "label": "SnapTransformsToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapTransformsToDefault(const EConstraintTransformComponentFlags SnapFlags, const UPhysicsAsset* const PhysicsAsset)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  }
]