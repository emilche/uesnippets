[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstraintProfileProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintProfileProperties"
  },
  {
    "label": "EConstraintPlasticityType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstraintPlasticityType"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "FConstraintInstanceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceBase"
  },
  {
    "label": "FConstraintBrokenDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintBrokenDelegateData"
  },
  {
    "label": "FConstraintBrokenDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintBrokenDelegateWrapper"
  },
  {
    "label": "FConstraintViolatedDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintViolatedDelegateWrapper"
  },
  {
    "label": "FPlasticDeformationDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlasticDeformationDelegateWrapper"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FPDIOrCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPDIOrCollector"
  },
  {
    "label": "ELinearConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinearConstraintMotion"
  },
  {
    "label": "EAngularConstraintMotion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAngularConstraintMotion"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FConstraintInstanceAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceAccessor"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Chaos / PhysicsObject . h \" # include \" EngineDefines . h \" # include \" PhysicsEngine / ConstraintTypes . h \" # include \" PhysicsEngine / ConstraintDrives . h \" # include \" Physics / PhysicsInterfaceCore . h \" # include \" ConstraintInstance . generated . h \" class FMaterialRenderProxy ; class FMeshElementCollector ; class FPrimitiveDrawInterface ; class UMaterialInterface ; struct FBodyInstance ; class FMaterialRenderProxy ; class FPrimitiveDrawInterface ; class FMaterialRenderProxy ; class UPhysicsAsset ; struct FReferenceSkeleton ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,ChildPosition = 1<<0,ChildRotation = 1<<1,ParentPosition = 1<<2,ParentRotation = 1<<3,AllChild = ChildPosition | ChildRotation,AllParent = ParentPosition | ParentRotation,AllPosition = ChildPosition | ParentPosition,AllRotation = ChildRotation | ParentRotation,All = AllChild | AllParent } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EConstraintTransformComponentFlags)"
  },
  {
    "label": "CalculateRelativeBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CalculateRelativeBoneTransform(const FName ToBoneName, const FName FromBoneName, const FReferenceSkeleton& ReferenceSkeleton)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = Projection, meta = (ClampMin = \"0.0\"))"
  },
  {
    "label": "FConstraintProfileProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintProfileProperties()"
  },
  {
    "label": "Update_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AssumesLocked(const FPhysicsConstraintHandle& InConstraintRef, float AverageMass, float UseScale, bool InInitialize = false)"
  },
  {
    "label": "UpdateBreakable_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreakable_AssumesLocked(const FPhysicsConstraintHandle& InConstraintRef)"
  },
  {
    "label": "UpdatePlasticity_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlasticity_AssumesLocked(const FPhysicsConstraintHandle& InConstraintRef)"
  },
  {
    "label": "UpdateContactTransferScale_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContactTransferScale_AssumesLocked(const FPhysicsConstraintHandle& InConstraintRef)"
  },
  {
    "label": "UpdateConstraintFlags_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConstraintFlags_AssumesLocked(const FPhysicsConstraintHandle& InConstraintRef)"
  },
  {
    "label": "SyncChangedConstraintProperties()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SyncChangedConstraintProperties(struct FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FConstraintInstanceBase()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetPhysicsScene()",
    "kind": "Method",
    "detail": "Function (int32 ConstraintIndex ; FPhysicsConstraintHandle ConstraintHandle ; FPhysScene* PhysScene ; FPhysScene*)",
    "insertText": "GetPhysicsScene()"
  },
  {
    "label": "SetConstraintViolatedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintViolatedDelegate(FOnConstraintViolated InConstraintViolatedDelegate)"
  },
  {
    "label": "SetPlasticDeformationDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlasticDeformationDelegate(FOnPlasticDeformation InPlasticDeformationDelegate)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(VisibleAnywhere, Category=Constraint)"
  },
  {
    "label": "CopyProfilePropertiesFrom()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CopyProfilePropertiesFrom(const FConstraintProfileProperties& FromProperties)"
  },
  {
    "label": "GetPhysicsConstraintRef()",
    "kind": "Method",
    "detail": "Function (const FPhysicsConstraintHandle&)",
    "insertText": "GetPhysicsConstraintRef()"
  },
  {
    "label": "FConstraintInstance()",
    "kind": "Method",
    "detail": "Function (FChaosUserData UserData ;)",
    "insertText": "FConstraintInstance()"
  },
  {
    "label": "GetChildBoneName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetChildBoneName()"
  },
  {
    "label": "UpdateLinearLimit()",
    "kind": "Method",
    "detail": "Function (ProfileInstance . LinearLimit . XMotion = XConstraintType ; ProfileInstance . LinearLimit . YMotion = YConstraintType ; ProfileInstance . LinearLimit . ZMotion = ZConstraintType ; ProfileInstance . LinearLimit . Limit = InLinearLimitSize ;)",
    "insertText": "UpdateLinearLimit()"
  },
  {
    "label": "GetLinearXMotion()",
    "kind": "Method",
    "detail": "Function (} ELinearConstraintMotion)",
    "insertText": "GetLinearXMotion()"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(XConstraintType, prevLimits.YMotion, prevLimits.ZMotion, prevLimits.Limit)"
  },
  {
    "label": "SetLinearXLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearXLimit(ELinearConstraintMotion XConstraintType, float InLinearLimitSize)"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(XConstraintType, prevLimits.YMotion, prevLimits.ZMotion, InLinearLimitSize)"
  },
  {
    "label": "GetLinearYMotion()",
    "kind": "Method",
    "detail": "Function (} ELinearConstraintMotion)",
    "insertText": "GetLinearYMotion()"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(prevLimits.XMotion, YConstraintType, prevLimits.ZMotion, prevLimits.Limit)"
  },
  {
    "label": "SetLinearYLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearYLimit(ELinearConstraintMotion YConstraintType, float InLinearLimitSize)"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(prevLimits.XMotion, YConstraintType, prevLimits.ZMotion, InLinearLimitSize)"
  },
  {
    "label": "GetLinearZMotion()",
    "kind": "Method",
    "detail": "Function (} ELinearConstraintMotion)",
    "insertText": "GetLinearZMotion()"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(prevLimits.XMotion, prevLimits.YMotion, ZConstraintType, prevLimits.Limit)"
  },
  {
    "label": "SetLinearZLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearZLimit(ELinearConstraintMotion ZConstraintType, float InLinearLimitSize)"
  },
  {
    "label": "SetLinearLimits()",
    "kind": "Method",
    "detail": "Function (const FLinearConstraint& prevLimits = ProfileInstance . LinearLimit ;)",
    "insertText": "SetLinearLimits(prevLimits.XMotion, prevLimits.YMotion, ZConstraintType, InLinearLimitSize)"
  },
  {
    "label": "GetAngularSwing1Motion()",
    "kind": "Method",
    "detail": "Function (} EAngularConstraintMotion)",
    "insertText": "GetAngularSwing1Motion()"
  },
  {
    "label": "UpdateAngularLimit()",
    "kind": "Method",
    "detail": "Function (ProfileInstance . ConeLimit . Swing1Motion = MotionType ;)",
    "insertText": "UpdateAngularLimit()"
  },
  {
    "label": "GetCurrentSwing1()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentSwing1()"
  },
  {
    "label": "GetAngularSwing1Limit()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngularSwing1Limit()"
  },
  {
    "label": "GetAngularSwing2Motion()",
    "kind": "Method",
    "detail": "Function (} EAngularConstraintMotion)",
    "insertText": "GetAngularSwing2Motion()"
  },
  {
    "label": "GetCurrentSwing2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentSwing2()"
  },
  {
    "label": "GetAngularSwing2Limit()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngularSwing2Limit()"
  },
  {
    "label": "GetAngularTwistMotion()",
    "kind": "Method",
    "detail": "Function (} EAngularConstraintMotion)",
    "insertText": "GetAngularTwistMotion()"
  },
  {
    "label": "GetCurrentTwist()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentTwist()"
  },
  {
    "label": "GetAngularTwistLimit()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngularTwistLimit()"
  },
  {
    "label": "GetIsSoftLinearLimit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsSoftLinearLimit()"
  },
  {
    "label": "GetIsSoftTwistLimit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsSoftTwistLimit()"
  },
  {
    "label": "GetIsSoftSwingLimit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsSoftSwingLimit()"
  },
  {
    "label": "SetLinearBreakable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearBreakable(bool bInLinearBreakable, float InLinearBreakThreshold)"
  },
  {
    "label": "UpdateBreakable()",
    "kind": "Method",
    "detail": "Function (ProfileInstance . bLinearBreakable = bInLinearBreakable ; ProfileInstance . LinearBreakThreshold = InLinearBreakThreshold ;)",
    "insertText": "UpdateBreakable()"
  },
  {
    "label": "IsLinearBreakable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinearBreakable()"
  },
  {
    "label": "UpdatePlasticity()",
    "kind": "Method",
    "detail": "Function (ProfileInstance . bLinearPlasticity = bInLinearPlasticity ; ProfileInstance . LinearPlasticityThreshold = InLinearPlasticityThreshold ; ProfileInstance . LinearPlasticityType = InLinearPlasticityType ;)",
    "insertText": "UpdatePlasticity()"
  },
  {
    "label": "HasLinearPlasticity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLinearPlasticity()"
  },
  {
    "label": "UpdateContactTransferScale()",
    "kind": "Method",
    "detail": "Function (ProfileInstance . ContactTransferScale = InContactTransferScale ;)",
    "insertText": "UpdateContactTransferScale()"
  },
  {
    "label": "GetContactTransferScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetContactTransferScale()"
  },
  {
    "label": "IsAngularBreakable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAngularBreakable()"
  },
  {
    "label": "HasAngularPlasticity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAngularPlasticity()"
  },
  {
    "label": "CopyConstraintParamsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintParamsFrom(const FConstraintInstance* FromInstance)"
  },
  {
    "label": "CopyConstraintPhysicalPropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintPhysicalPropertiesFrom(const FConstraintInstance* FromInstance, bool bKeepPosition, bool bKeepRotation)"
  },
  {
    "label": "GetConstraintForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce)"
  },
  {
    "label": "IsBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBroken()"
  },
  {
    "label": "SetLinearPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)"
  },
  {
    "label": "IsLinearPositionDriveXEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinearPositionDriveXEnabled()"
  },
  {
    "label": "SetLinearPositionTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearPositionTarget(const FVector& InPosTarget)"
  },
  {
    "label": "GetLinearPositionTarget()",
    "kind": "Method",
    "detail": "Function (const FVector&)",
    "insertText": "GetLinearPositionTarget()"
  },
  {
    "label": "IsLinearVelocityDriveXEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinearVelocityDriveXEnabled()"
  },
  {
    "label": "SetLinearVelocityTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "GetLinearVelocityTarget()",
    "kind": "Method",
    "detail": "Function (const FVector&)",
    "insertText": "GetLinearVelocityTarget()"
  },
  {
    "label": "SetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveParams(const FVector& InPositionStrength, const FVector& InVelocityStrength, const FVector& InForceLimit)"
  },
  {
    "label": "SetLinearDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "GetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearDriveParams(float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit)"
  },
  {
    "label": "GetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearDriveParams(FVector& OutPositionStrength, FVector& OutVelocityStrength, FVector& OutForceLimit)"
  },
  {
    "label": "SetOrientationDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveTwistAndSwing(bool bInEnableTwistDrive, bool bInEnableSwingDrive)"
  },
  {
    "label": "GetOrientationDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrientationDriveTwistAndSwing(bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive)"
  },
  {
    "label": "SetOrientationDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveSLERP(bool bInEnableSLERP)"
  },
  {
    "label": "GetOrientationDriveSLERP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOrientationDriveSLERP()"
  },
  {
    "label": "SetAngularOrientationTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularOrientationTarget(const FQuat& InPosTarget)"
  },
  {
    "label": "GetAngularOrientationTarget()",
    "kind": "Method",
    "detail": "Function (const FRotator&)",
    "insertText": "GetAngularOrientationTarget()"
  },
  {
    "label": "GetAngularVelocityDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAngularVelocityDriveTwistAndSwing(bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive)"
  },
  {
    "label": "SetAngularVelocityDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityDriveSLERP(bool bInEnableSLERP)"
  },
  {
    "label": "GetAngularVelocityDriveSLERP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAngularVelocityDriveSLERP()"
  },
  {
    "label": "SetAngularVelocityTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "GetAngularVelocityTarget()",
    "kind": "Method",
    "detail": "Function (const FVector&)",
    "insertText": "GetAngularVelocityTarget()"
  },
  {
    "label": "GetAngularDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAngularDriveParams(float& OutSpring, float& OutDamping, float& OutForceLimit)"
  },
  {
    "label": "SetAngularDriveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveMode(EAngularDriveMode::Type DriveMode)"
  },
  {
    "label": "SetAngularDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "GetAngularDriveMode()",
    "kind": "Method",
    "detail": "Function (EAngularDriveMode::Type)",
    "insertText": "GetAngularDriveMode()"
  },
  {
    "label": "SetAngularDOFLimitScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale)"
  },
  {
    "label": "SetLinearLimitSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearLimitSize(float NewLimitSize)"
  },
  {
    "label": "InitConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstraint(FBodyInstance* Body1, FBodyInstance* Body2, float Scale, UObject* DebugOwner, FOnConstraintBroken InConstraintBrokenDelegate = FOnConstraintBroken(), FOnPlasticDeformation InPlasticDeformationDelegate = FOnPlasticDeformation())"
  },
  {
    "label": "InitConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstraint(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2, float Scale, UObject* DebugOwner, FOnConstraintBroken InConstraintBrokenDelegate = FOnConstraintBroken(), FOnPlasticDeformation InPlasticDeformationDelegate = FOnPlasticDeformation())"
  },
  {
    "label": "InitConstraint_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstraint_AssumesLocked(const FPhysicsActorHandle& ActorRef1, const FPhysicsActorHandle& ActorRef2, float InScale, FOnConstraintBroken InConstraintBrokenDelegate = FOnConstraintBroken(), FOnPlasticDeformation InPlasticDeformationDelegate = FOnPlasticDeformation())"
  },
  {
    "label": "InitConstraint_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstraint_AssumesLocked(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2, float InScale, FOnConstraintBroken InConstraintBrokenDelegate = FOnConstraintBroken(), FOnPlasticDeformation InPlasticDeformationDelegate = FOnPlasticDeformation())"
  },
  {
    "label": "TermConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermConstraint()"
  },
  {
    "label": "IsTerminated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTerminated()"
  },
  {
    "label": "IsValidConstraintInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidConstraintInstance()"
  },
  {
    "label": "GetRefFrame()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRefFrame(EConstraintFrame::Type Frame)"
  },
  {
    "label": "SetRefFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefFrame(EConstraintFrame::Type Frame, const FTransform& RefFrame)"
  },
  {
    "label": "GetConstraintLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetConstraintLocation()"
  },
  {
    "label": "SetRefPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefPosition(EConstraintFrame::Type Frame, const FVector& RefPosition)"
  },
  {
    "label": "SetRefOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefOrientation(EConstraintFrame::Type Frame, const FVector& PriAxis, const FVector& SecAxis)"
  },
  {
    "label": "IsCollisionDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollisionDisabled()"
  },
  {
    "label": "DrawConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConstraint(int32 ViewIndex, class FMeshElementCollector& Collector, float Scale, float LimitDrawScale, bool bDrawLimits, bool bDrawSelected, const FTransform& Con1Frame, const FTransform& Con2Frame, bool bDrawAsPoint, bool bDrawViolatedLimits)"
  },
  {
    "label": "DrawConstraintImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConstraintImp(FPDIOrCollector(ViewIndex, Collector), Scale, LimitDrawScale, bDrawLimits, bDrawSelected, Con1Frame, Con2Frame, bDrawAsPoint, bDrawViolatedLimits)"
  },
  {
    "label": "DrawConstraint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawConstraint(FPrimitiveDrawInterface* PDI, float Scale, float LimitDrawScale, bool bDrawLimits, bool bDrawSelected, const FTransform& Con1Frame, const FTransform& Con2Frame, bool bDrawAsPoint, bool bDrawViolatedLimits)"
  },
  {
    "label": "DrawConstraintImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConstraintImp(FPDIOrCollector(PDI), Scale, LimitDrawScale, bDrawLimits, bDrawSelected, Con1Frame, Con2Frame, bDrawAsPoint, bDrawViolatedLimits)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& Materials)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "IsProjectionEnabled()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsProjectionEnabled()"
  },
  {
    "label": "DisableProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableProjection()"
  },
  {
    "label": "SetProjectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectionParams(bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance)"
  },
  {
    "label": "GetProjectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProjectionParams(float& ProjectionLinearAlpha, float& ProjectionAngularAlpha, float& ProjectionLinearTolerance, float& ProjectionAngularTolerance)"
  },
  {
    "label": "SetShockPropagationParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShockPropagationParams(bool bEnableShockPropagation, float ShockPropagationAlpha)"
  },
  {
    "label": "GetShockPropagationAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShockPropagationAlpha()"
  },
  {
    "label": "IsParentDominatesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentDominatesEnabled()"
  },
  {
    "label": "DisableParentDominates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableParentDominates()"
  },
  {
    "label": "SetParentDominates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentDominates(bool bParentDominates)"
  },
  {
    "label": "IsMassConditioningEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMassConditioningEnabled()"
  },
  {
    "label": "DisableMassConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMassConditioning()"
  },
  {
    "label": "GetLastKnownScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastKnownScale()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (FConstraintInstance*)",
    "insertText": "Alloc()"
  },
  {
    "label": "CreateJoint_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CreateJoint_AssumesLocked(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2)"
  },
  {
    "label": "UpdateAverageMass_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAverageMass_AssumesLocked(Chaos::FPhysicsObject* Body1, Chaos::FPhysicsObject* Body2)"
  },
  {
    "label": "FPDIOrCollector()",
    "kind": "Method",
    "detail": "Function (struct FPDIOrCollector { FPrimitiveDrawInterface* PDI ; FMeshElementCollector* Collector ; int32 ViewIndex ;)",
    "insertText": "FPDIOrCollector(FPrimitiveDrawInterface* InPDI) : PDI(InPDI) , Collector(nullptr) , ViewIndex(INDEX_NONE)"
  },
  {
    "label": "FPDIOrCollector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPDIOrCollector(int32 InViewIndex, FMeshElementCollector& InCollector) : PDI(nullptr) , Collector(&InCollector) , ViewIndex(InViewIndex)"
  },
  {
    "label": "HasCollector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCollector()"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(const FVector& Start, const FVector& End, const float Thickness, const FMaterialRenderProxy* const MaterialProxy, const ESceneDepthPriorityGroup DepthPriority)"
  },
  {
    "label": "DrawCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCone(const FMatrix& ConeTransform, const float AngleWidth, const float AngleHeight, const uint32 NumSides, const FColor& PDIColor, const FMaterialRenderProxy* const MaterialRenderProxy, const ESceneDepthPriorityGroup DepthPriority)"
  },
  {
    "label": "DrawArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawArrow(const FMatrix& ArrowTransform, const float Length, const float Thickness, const uint32 NumSides, const FColor& PDIColor, const FMaterialRenderProxy* const MaterialRenderProxy, const ESceneDepthPriorityGroup DepthPriority)"
  },
  {
    "label": "DrawConstraintImp()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawConstraintImp(const FPDIOrCollector& PDIOrCollector, float Scale, float LimitDrawScale, bool bDrawLimits, bool bDrawSelected, const FTransform& Con1Frame, const FTransform& Con2Frame, bool bDrawAsPoint, bool bDrawViolatedLimits = false)"
  },
  {
    "label": "UpdateDriveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDriveTarget()"
  },
  {
    "label": "CalculateDefaultParentTransform()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITORONLY_DATA FTransform)",
    "insertText": "CalculateDefaultParentTransform(const UPhysicsAsset* const PhysicsAsset)"
  },
  {
    "label": "CalculateDefaultChildTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CalculateDefaultChildTransform()"
  },
  {
    "label": "SnapTransformsToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapTransformsToDefault(const EConstraintTransformComponentFlags SnapFlags, const UPhysicsAsset* const PhysicsAsset)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<> struct TStructOpsTypeTraits<FConstraintInstance> : public TStructOpsTypeTraitsBase2<FConstraintInstance> { enum { WithSerializer = true,# if WITH_EDITORONLY_DATA WithPostSerialize = true # endif } ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FConstraintInstanceAccessor() : Owner(nullptr) , Index(0)"
  },
  {
    "label": "FConstraintInstanceAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintInstanceAccessor(const TWeakObjectPtr<UObject>& Owner, uint32 Index = 0, TFunction<void(void)> InOnRelease = TFunction<void(void)>()) : Owner(Owner) , Index(Index) #if WITH_EDITOR , OnRelease(InOnRelease)"
  },
  {
    "label": "FConstraintInstanceAccessor()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR ~)",
    "insertText": "FConstraintInstanceAccessor()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } # endif FConstraintInstance*)",
    "insertText": "Get()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TFunction<)",
    "insertText": "void(void)"
  }
]