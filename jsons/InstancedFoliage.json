[
  {
    "label": "AInstancedFoliageActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AInstancedFoliageActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "UHierarchicalInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHierarchicalInstancedStaticMeshComponent"
  },
  {
    "label": "UFoliageType_InstancedStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType_InstancedStaticMesh"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FSMInstanceId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSMInstanceId"
  },
  {
    "label": "EFoliageInstanceFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFoliageInstanceFlags"
  },
  {
    "label": "FFoliageInstancePlacementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInstancePlacementInfo"
  },
  {
    "label": "FFoliageInstance_Deprecated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInstance_Deprecated"
  },
  {
    "label": "FFoliageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInstance"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageMeshInfo_Deprecated"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageMeshInfo_Deprecated2"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFoliageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInfo"
  },
  {
    "label": "FFoliageImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageImpl"
  },
  {
    "label": "FFoliageInstanceId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInstanceId"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FDesiredFoliageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDesiredFoliageInstance"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FPotentialInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPotentialInstance"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Containers / ArrayView . h \" # include \" FoliageInstanceBase . h \" # include \" Instances / InstancedPlacementHash . h \" class AInstancedFoliageActor ; class UActorComponent ; class UFoliageType ; class UInstancedStaticMeshComponent ; class UHierarchicalInstancedStaticMeshComponent ; class UFoliageType_InstancedStaticMesh ; class UPrimitiveComponent ; class UStaticMesh ; struct FSMInstanceId ; # if WITH_EDITORONLY_DATA using FFoliageInstanceHash = FInstancedPlacementHash ; # endif)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInstancedFoliage, Log, All)"
  },
  {
    "label": "FoliageInstanceElementsEnabled()",
    "kind": "Method",
    "detail": "Function (namespace FoliageElementUtil { bool)",
    "insertText": "FoliageInstanceElementsEnabled()"
  },
  {
    "label": "FFoliageInstancePlacementInfo()",
    "kind": "Method",
    "detail": "Function (} enum EFoliageInstanceFlags { FOLIAGE_AlignToNormal = 0 x00000001,FOLIAGE_NoRandomYaw = 0 x00000002,FOLIAGE_Readjusted = 0 x00000004,FOLIAGE_InstanceDeleted = 0 x00000008,} ; struct FFoliageInstancePlacementInfo { FVector Location ; FRotator Rotation ; FRotator PreAlignRotation ; FVector3f DrawScale3D ; float ZOffset ; uint32 Flags ;)",
    "insertText": "FFoliageInstancePlacementInfo() : Location(0.f, 0.f, 0.f) , Rotation(0, 0, 0) , PreAlignRotation(0, 0, 0) , DrawScale3D(1.f, 1.f, 1.f) , ZOffset(0.f) , Flags(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFoliageInstance_Deprecated : public FFoliageInstancePlacementInfo { UActorComponent* Base ; FGuid ProceduralGuid ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FFoliageInstance_Deprecated& Instance)"
  },
  {
    "label": "FFoliageInstance()",
    "kind": "Method",
    "detail": "Function (} ; struct FFoliageInstance : public FFoliageInstancePlacementInfo { FFoliageInstanceBaseId BaseId ; FGuid ProceduralGuid ; UActorComponent* BaseComponent ;)",
    "insertText": "FFoliageInstance() : BaseId(0) , BaseComponent(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FFoliageInstance& Instance)"
  },
  {
    "label": "GetInstanceWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetInstanceWorldTransform()"
  },
  {
    "label": "SetInstanceWorldTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstanceWorldTransform(const FTransform& Transform)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (Location = Transform .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (Rotation = Transform .)",
    "insertText": "Rotator()"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (DrawScale3D =)",
    "insertText": "FVector3f(Transform.GetScale3D())"
  },
  {
    "label": "AlignToNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AlignToNormal(const FVector& InNormal, float AlignMaxAngle = 0.f)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (Flags | = FOLIAGE_AlignToNormal ; FRotator AlignRotation = InNormal .)",
    "insertText": "Rotation()"
  },
  {
    "label": "NormalizeAxis()",
    "kind": "Method",
    "detail": "Function (AlignRotation . Pitch - = 9 0 . f ; AlignRotation . Pitch =)",
    "insertText": "NormalizeAxis(AlignRotation.Pitch)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 MaxPitch = static_cast<)",
    "insertText": "int32(AlignMaxAngle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AlignRotation . Pitch = MaxPitch ; } else)",
    "insertText": "if(AlignRotation.Pitch < -MaxPitch)"
  },
  {
    "label": "FRotator()",
    "kind": "Method",
    "detail": "Function (AlignRotation . Pitch = - MaxPitch ; } } PreAlignRotation = Rotation ; Rotation =)",
    "insertText": "FRotator(FQuat(AlignRotation) * FQuat(Rotation))"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFoliageMeshInfo_Deprecated { UHierarchicalInstancedStaticMeshComponent* Component ; # if WITH_EDITORONLY_DATA FGuid FoliageTypeUpdateGuid ; TArray<FFoliageInstance_Deprecated> Instances ; # endif)",
    "insertText": "FFoliageMeshInfo_Deprecated() : Component(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FFoliageMeshInfo_Deprecated& MeshInfo)"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated2()",
    "kind": "Method",
    "detail": "Function (} ; struct FFoliageMeshInfo_Deprecated2 { UHierarchicalInstancedStaticMeshComponent* Component ; # if WITH_EDITORONLY_DATA FGuid FoliageTypeUpdateGuid ; TArray<FFoliageInstance> Instances ; # endif)",
    "insertText": "FFoliageMeshInfo_Deprecated2()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FFoliageMeshInfo_Deprecated2& MeshInfo)"
  },
  {
    "label": "FFoliageImpl()",
    "kind": "Method",
    "detail": "Function (} ; enum class EFoliageImplType : uint8 { Unknown = 0,StaticMesh = 1,Actor = 2,ISMActor = 3 } ; struct FFoliageInfo ; struct FFoliageImpl {)",
    "insertText": "FFoliageImpl(FFoliageInfo* InInfo) #if WITH_EDITORONLY_DATA : Info(InInfo)"
  },
  {
    "label": "FFoliageImpl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFoliageImpl()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA FFoliageInfo* Info ; # endif # if WITH_EDITOR bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const UFoliageType* FoliageType)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "Reapply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reapply(const UFoliageType* FoliageType)"
  },
  {
    "label": "GetInstanceCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceCount()"
  },
  {
    "label": "PreAddInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreAddInstances(const UFoliageType* FoliageType, int32 Count)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(const FFoliageInstance& NewInstance)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstance(int32 InstanceIndex)"
  },
  {
    "label": "MoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstance(int32 InstanceIndex, UObject*& OutInstanceImplementation)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstance(InstanceIndex)"
  },
  {
    "label": "AddExistingInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExistingInstance(const FFoliageInstance& ExistingInstance, UObject* InstanceImplementation)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(ExistingInstance)"
  },
  {
    "label": "SetInstanceWorldTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstanceWorldTransform(int32 InstanceIndex, const FTransform& Transform, bool bTeleport)"
  },
  {
    "label": "GetInstanceWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetInstanceWorldTransform(int32 InstanceIndex)"
  },
  {
    "label": "PostUpdateInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateInstances()"
  },
  {
    "label": "PreMoveInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreMoveInstances(TArrayView<const int32> InInstancesMoved)"
  },
  {
    "label": "PostMoveInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostMoveInstances(TArrayView<const int32> InInstancesMoved, bool bFinished)"
  },
  {
    "label": "IsOwnedComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwnedComponent(const UPrimitiveComponent* PrimitiveComponent)"
  },
  {
    "label": "SelectAllInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllInstances(bool bSelect)"
  },
  {
    "label": "SelectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstance(bool bSelect, int32 Index)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(bool bSelect, const TSet<int32>& SelectedIndices)"
  },
  {
    "label": "GetInstanceIndexFrom()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceIndexFrom(const UPrimitiveComponent* PrimitiveComponent, int32 ComponentIndex)"
  },
  {
    "label": "GetSelectionBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetSelectionBoundingBox(const TSet<int32>& SelectedIndices)"
  },
  {
    "label": "ApplySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySelection(bool bApply, const TSet<int32>& SelectedIndices)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection(const TSet<int32>& SelectedIndices)"
  },
  {
    "label": "ForEachSMInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSMInstance(TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "ForEachSMInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSMInstance(int32 InstanceIndex, TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "BeginUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginUpdate()"
  },
  {
    "label": "EndUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUpdate()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Refresh(bool Async, bool Force)"
  },
  {
    "label": "OnHiddenEditorViewMaskChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnHiddenEditorViewMaskChanged(uint64 InHiddenEditorViews)"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditUndo(UFoliageType* FoliageType)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEditUndo(FFoliageInfo* InInfo, UFoliageType* FoliageType)"
  },
  {
    "label": "NotifyFoliageTypeWillChange()",
    "kind": "Method",
    "detail": "Function (Info = InInfo ; } void)",
    "insertText": "NotifyFoliageTypeWillChange(UFoliageType* FoliageType)"
  },
  {
    "label": "NotifyFoliageTypeChanged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NotifyFoliageTypeChanged(UFoliageType* FoliageType, bool bSourceChanged)"
  },
  {
    "label": "EnterEditMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterEditMode()"
  },
  {
    "label": "ExitEditMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExitEditMode()"
  },
  {
    "label": "ShouldAttachToBaseComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldAttachToBaseComponent()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetOverlappingMeshCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOverlappingMeshCount(const FSphere& Sphere, TMap<UStaticMesh*, int32>& OutCounts)"
  },
  {
    "label": "FFoliageInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFoliageInfo { EFoliageImplType Type ; TUniquePtr<FFoliageImpl> Implementation ; # if WITH_EDITORONLY_DATA AInstancedFoliageActor* IFA ; FGuid FoliageTypeUpdateGuid ; TArray<FFoliageInstance> Instances ; TUniquePtr<FFoliageInstanceHash> InstanceHash ; TMap<FFoliageInstanceBaseId,TSet<int32>> ComponentHash ; TSet<int32> SelectedIndices ; TSet<int32> MovingInstances ; # endif)",
    "insertText": "FFoliageInfo()"
  },
  {
    "label": "FFoliageInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFoliageInfo(FFoliageInfo&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo&)",
    "insertText": "operator(FFoliageInfo&& Other)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (UHierarchicalInstancedStaticMeshComponent*)",
    "insertText": "GetComponent()"
  },
  {
    "label": "CreateImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateImplementation(EFoliageImplType InType)"
  },
  {
    "label": "GetOverlappingSphereCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlappingSphereCount(const FSphere& Sphere)"
  },
  {
    "label": "GetOverlappingBoxCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlappingBoxCount(const FBox& Box)"
  },
  {
    "label": "GetOverlappingBoxTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingBoxTransforms(const FBox& Box, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetImplementationType()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EFoliageImplType)",
    "insertText": "GetImplementationType(const UFoliageType* FoliageType)"
  },
  {
    "label": "CreateImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateImplementation(const UFoliageType* FoliageType)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetRandomSeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRandomSeed(int32 seed)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(const UFoliageType* InSettings, const FFoliageInstance& InNewInstance)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstance(const UFoliageType* InSettings, const FFoliageInstance& InNewInstance, UActorComponent* InBaseComponent)"
  },
  {
    "label": "AddInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstances(const UFoliageType* InSettings, const TArray<const FFoliageInstance*>& InNewInstances)"
  },
  {
    "label": "ReserveAdditionalInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveAdditionalInstances(const UFoliageType* InSettings, uint32 ReserveNum)"
  },
  {
    "label": "RemoveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstances(TArrayView<const int32> InInstancesToRemove, bool RebuildFoliageTree)"
  },
  {
    "label": "MoveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstances(AInstancedFoliageActor* InToIFA, const TSet<int32>& InInstancesToMove, bool bKeepSelection)"
  },
  {
    "label": "PostMoveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostMoveInstances(TArrayView<const int32> InInstancesMoved, bool bFinished = false)"
  },
  {
    "label": "PostUpdateInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateInstances(TArrayView<const int32>, bool bReAddToHash = false, bool InUpdateSelection = false)"
  },
  {
    "label": "DuplicateInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateInstances(UFoliageType* InSettings, TArrayView<const int32> InInstancesToDuplicate)"
  },
  {
    "label": "GetInstancesInsideBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstancesInsideBounds(const FBox& Box, TArray<int32>& OutInstances)"
  },
  {
    "label": "GetInstancesInsideSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstancesInsideSphere(const FSphere& Sphere, TArray<int32>& OutInstances)"
  },
  {
    "label": "GetInstanceAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceAtLocation(const FVector& Location, int32& OutInstance, bool& bOutSucess)"
  },
  {
    "label": "CheckForOverlappingSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForOverlappingSphere(const FSphere& Sphere)"
  },
  {
    "label": "CheckForOverlappingInstanceExcluding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForOverlappingInstanceExcluding(int32 TestInstanceIdx, float Radius, TSet<int32>& ExcludeInstances)"
  },
  {
    "label": "GetInstancesOverlappingBox()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetInstancesOverlappingBox(const FBox& Box)"
  },
  {
    "label": "ReallocateClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocateClusters(UFoliageType* InSettings)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(bool bSelect, TArrayView<const int32> Instances)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(bool bSelect)"
  },
  {
    "label": "GetSelectionBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetSelectionBoundingBox()"
  },
  {
    "label": "GetPlacedInstanceCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlacedInstanceCount()"
  },
  {
    "label": "AddToBaseHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToBaseHash(int32 InstanceIdx)"
  },
  {
    "label": "RemoveFromBaseHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromBaseHash(int32 InstanceIdx)"
  },
  {
    "label": "RecomputeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeHash()"
  },
  {
    "label": "CheckValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValid()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo(UFoliageType* FoliageType)"
  },
  {
    "label": "RemoveBaseComponentOnInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBaseComponentOnInstances()"
  },
  {
    "label": "IncludeActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeActor(const UFoliageType* FoliageType, AActor* InActor)"
  },
  {
    "label": "ExcludeActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeActors()"
  },
  {
    "label": "GetApproximatedInstanceBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetApproximatedInstanceBounds()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FFoliageInfo& MeshInfo)"
  },
  {
    "label": "FFoliageInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFoliageInfo(const FFoliageInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo&)",
    "insertText": "operator(const FFoliageInfo&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : using FAddImplementationFunc = TFunctionRef<)",
    "insertText": "void(FFoliageImpl*, AInstancedFoliageActor*, const FFoliageInstance&)"
  },
  {
    "label": "AddInstancesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstancesImpl(const UFoliageType* InSettings, const TArray<const FFoliageInstance*>& InNewInstances, FFoliageInfo::FAddImplementationFunc ImplementationFunc)"
  },
  {
    "label": "AddInstanceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstanceImpl(const FFoliageInstance& InNewInstance, FAddImplementationFunc ImplementationFunc)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRemoveImplementationFunc = TFunctionRef<)",
    "insertText": "void(FFoliageImpl*, int32)"
  },
  {
    "label": "RemoveInstancesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstancesImpl(TArrayView<const int32> InInstancesToRemove, bool RebuildFoliageTree, FRemoveImplementationFunc ImplementationFunc)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; struct FFoliageInstanceId { operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR FFoliageInstance*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "GetInstanceChecked()",
    "kind": "Method",
    "detail": "Function (} FFoliageInstance&)",
    "insertText": "GetInstanceChecked()"
  },
  {
    "label": "FDesiredFoliageInstance()",
    "kind": "Method",
    "detail": "Function (} FFoliageInfo* Info = nullptr ; int32 Index = INDEX_NONE ; } ; namespace EFoliagePlacementMode { enum Type { Manual = 0,Procedural = 1,} ; } struct FDesiredFoliageInstance {)",
    "insertText": "FDesiredFoliageInstance() : FoliageType(nullptr) , StartTrace(ForceInit) , EndTrace(ForceInit) , Rotation(ForceInit) , TraceRadius(0.f) , Age(0.f) , PlacementMode(EFoliagePlacementMode::Manual)"
  },
  {
    "label": "FDesiredFoliageInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDesiredFoliageInstance(const FVector& InStartTrace, const FVector& InEndTrace, const UFoliageType* InFoliageType, const float InTraceRadius = 0.f) : FoliageType(InFoliageType) , StartTrace(InStartTrace) , EndTrace(InEndTrace) , Rotation(ForceInit) , TraceRadius(InTraceRadius) , Age(0.f) , PlacementMode(EFoliagePlacementMode::Manual)"
  },
  {
    "label": "FPotentialInstance()",
    "kind": "Method",
    "detail": "Function (} const UFoliageType* FoliageType ; FGuid ProceduralGuid ; FVector StartTrace ; FVector EndTrace ; FQuat Rotation ; float TraceRadius ; float Age ; const struct FBodyInstance* ProceduralVolumeBodyInstance ; EFoliagePlacementMode::Type PlacementMode ; } ; # if WITH_EDITOR struct FPotentialInstance { FVector HitLocation ; FVector HitNormal ; UPrimitiveComponent* HitComponent ; float HitWeight ; FDesiredFoliageInstance DesiredInstance ;)",
    "insertText": "FPotentialInstance(FVector InHitLocation, FVector InHitNormal, UPrimitiveComponent* InHitComponent, float InHitWeight, const FDesiredFoliageInstance& InDesiredInstance = FDesiredFoliageInstance())"
  },
  {
    "label": "PlaceInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlaceInstance(const UWorld* InWorld, const UFoliageType* Settings, FFoliageInstance& Inst, bool bSkipCollision = false)"
  }
]