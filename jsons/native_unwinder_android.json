[
  {
    "label": "UnwindStackMemoryAndroid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnwindStackMemoryAndroid"
  },
  {
    "label": "NativeUnwinderAndroid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeUnwinderAndroid"
  },
  {
    "label": "UnwindStackMemoryAndroid()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_NATIVE_UNWINDER_ANDROID_H_ # define BASE_PROFILER_NATIVE_UNWINDER_ANDROID_H_ # include<memory> # include<vector> # include \" base / memory / raw_ptr . h \" # include \" base / profiler / unwinder . h \" # include \" third_party / libunwindstack / src / libunwindstack / include / unwindstack / Maps . h \" # include \" third_party / libunwindstack / src / libunwindstack / include / unwindstack / Memory . h \" namespace base { class UnwindStackMemoryAndroid : public unwindstack::Memory { public :)",
    "insertText": "UnwindStackMemoryAndroid(uintptr_t stack_ptr, uintptr_t stack_top)"
  },
  {
    "label": "UnwindStackMemoryAndroid()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnwindStackMemoryAndroid()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Read(uint64_t addr, void* dst, size_t size)"
  },
  {
    "label": "CreateMaps()",
    "kind": "Method",
    "detail": "Function (private : const uintptr_t stack_ptr_ ; const uintptr_t stack_top_ ; } ; class NativeUnwinderAndroid : public Unwinder,public ModuleCache::AuxiliaryModuleProvider { public : std::unique_ptr<unwindstack::Maps>)",
    "insertText": "CreateMaps()"
  },
  {
    "label": "CreateProcessMemory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<unwindstack::Memory>)",
    "insertText": "CreateProcessMemory()"
  },
  {
    "label": "NativeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUnwinderAndroid(unwindstack::Maps* memory_regions_map, unwindstack::Memory* process_memory, uintptr_t exclude_module_with_base_address)"
  },
  {
    "label": "NativeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NativeUnwinderAndroid()"
  },
  {
    "label": "NativeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUnwinderAndroid(const NativeUnwinderAndroid&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NativeUnwinderAndroid&)",
    "insertText": "operator(const NativeUnwinderAndroid&)"
  },
  {
    "label": "InitializeModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeModules()"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  },
  {
    "label": "TryCreateModuleForAddress()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<const ModuleCache::Module>)",
    "insertText": "TryCreateModuleForAddress(uintptr_t address)"
  },
  {
    "label": "EmitDexFrame()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EmitDexFrame(uintptr_t dex_pc, std::vector<Frame>* stack)"
  }
]