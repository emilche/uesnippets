[
  {
    "label": "IMediaPoolable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPoolable"
  },
  {
    "label": "TMediaPoolDefaultObjectAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaPoolDefaultObjectAllocator"
  },
  {
    "label": "TMediaObjectPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaObjectPool"
  },
  {
    "label": "TStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStorage"
  },
  {
    "label": "TDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDeleter"
  },
  {
    "label": "InitializePoolable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Queue . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class IMediaPoolable { public : void)",
    "insertText": "InitializePoolable()"
  },
  {
    "label": "ShutdownPoolable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShutdownPoolable()"
  },
  {
    "label": "IsReadyForReuse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadyForReuse()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} } ; template<ObjectType> class TMediaPoolDefaultObjectAllocator { public : ObjectType*)",
    "insertText": "Alloc()"
  },
  {
    "label": "TStorage()",
    "kind": "Method",
    "detail": "Function (class TStorage { public :)",
    "insertText": "TStorage(ObjectAllocator *InObjectAllocatorInstance) : ObjectAllocatorInstance(InObjectAllocatorInstance)"
  },
  {
    "label": "TStorage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TStorage()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object ;)",
    "insertText": "while(WaitReadyForReuse.Dequeue(Object))"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (delete Object ; } } public : ObjectType*)",
    "insertText": "Acquire(bool bAlloc = true)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (ObjectType* Result = nullptr ; { FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Result = Pool .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { ObjectType* PeekObject ;)",
    "insertText": "while(WaitReadyForReuse.Peek(PeekObject))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (break ; } WaitReadyForReuse .)",
    "insertText": "Pop()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result = PeekObject ; } else { Pool .)",
    "insertText": "Add(PeekObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(Result == nullptr && bAlloc)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(ObjectType* Object)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "Push(Object)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} else { WaitReadyForReuse .)",
    "insertText": "Enqueue(Object)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reserve(uint32 NumObjects)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(NumObjects > (uint32)Pool.Num())"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "Push(ObjectAllocatorInstance->Alloc())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Tick()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object ;)",
    "insertText": "while(WaitReadyForReuse.Peek(Object))"
  },
  {
    "label": "TDeleter()",
    "kind": "Method",
    "detail": "Function (} } private : FCriticalSection CriticalSection ; TArray<ObjectType*> Pool ; TQueue<ObjectType*> WaitReadyForReuse ; ObjectAllocator* ObjectAllocatorInstance ; } ; class TDeleter { public :)",
    "insertText": "TDeleter(const TSharedRef<TStorage, ESPMode::ThreadSafe>& InStorage) : StoragePtr(InStorage)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(ObjectType* ObjectToDelete)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TStorage,ESPMode::ThreadSafe> PinnedStorage = StoragePtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (PinnedStorage ->)",
    "insertText": "Release(ObjectToDelete)"
  },
  {
    "label": "TMediaObjectPool()",
    "kind": "Method",
    "detail": "Function (} else { delete ObjectToDelete ; } } private : TWeakPtr<TStorage,ESPMode::ThreadSafe> StoragePtr ; } ; public :)",
    "insertText": "TMediaObjectPool(ObjectAllocator *ObjectAllocatorInstance = nullptr) : Storage(MakeShareable(new TStorage(ObjectAllocatorInstance)))"
  },
  {
    "label": "TMediaObjectPool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMediaObjectPool(uint32 NumReserve) : Storage(MakeShareable(new TStorage(nullptr)))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Storage ->)",
    "insertText": "Reserve(NumReserve)"
  },
  {
    "label": "AcquireShared()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ObjectType,ESPMode::ThreadSafe>)",
    "insertText": "AcquireShared()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object =)",
    "insertText": "Acquire(true)"
  },
  {
    "label": "AcquireShared()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ObjectType,ESPMode::ThreadSafe>)",
    "insertText": "AcquireShared(bool bAlloc)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object =)",
    "insertText": "Acquire(bAlloc)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "ToShared()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ObjectType,ESPMode::ThreadSafe>)",
    "insertText": "ToShared(ObjectType* Object)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (Storage ->)",
    "insertText": "Release(Object)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(uint32 NumObjects = 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Storage ->)",
    "insertText": "Reserve(NumObjects)"
  }
]