[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FParameterTransmitterInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterTransmitterInitParams"
  },
  {
    "label": "ILegacyParameterTransmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyParameterTransmitter"
  },
  {
    "label": "IParameterTransmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IParameterTransmitter"
  },
  {
    "label": "FParameterTransmitterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParameterTransmitterBase"
  },
  {
    "label": "ILegacyParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioParameter . h \" # include \" AudioParameterControllerInterface . h \" # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" IAudioProxyInitializer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class UObject ; namespace Audio { using DeviceID = uint32 ; struct FParameterTransmitterInitParams { uint64 InstanceID = INDEX_NONE ; float SampleRate = 0 . 0 f ; TArray<FAudioParameter> DefaultParams ; DeviceID AudioDeviceID = INDEX_NONE ; } ; class ILegacyParameterTransmitter { public : ~)",
    "insertText": "ILegacyParameterTransmitter()"
  },
  {
    "label": "GetReferencedObjects()",
    "kind": "Method",
    "detail": "Function (TArray<const TObjectPtr<UObject>*>)",
    "insertText": "GetReferencedObjects()"
  },
  {
    "label": "IParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (} ; class IParameterTransmitter : public ILegacyParameterTransmitter { public : const FName RouterName ; ~)",
    "insertText": "IParameterTransmitter()"
  },
  {
    "label": "ResetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParameters()"
  },
  {
    "label": "OnDeleteActiveSound()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeleteActiveSound()"
  },
  {
    "label": "GetParameter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetParameter(FName InName, FAudioParameter& OutParam)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (const TArray<FAudioParameter>&)",
    "insertText": "GetParameters()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParameters(TArray<FAudioParameter>&& InParameters)"
  },
  {
    "label": "OnVirtualizeActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVirtualizeActiveSound()"
  },
  {
    "label": "OnRealizeVirtualizedActiveSound()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRealizeVirtualizedActiveSound(TArray<FAudioParameter>&& InParameters)"
  },
  {
    "label": "FParameterTransmitterBase()",
    "kind": "Method",
    "detail": "Function (} } ; class FParameterTransmitterBase : public IParameterTransmitter { public :)",
    "insertText": "FParameterTransmitterBase(TArray<FAudioParameter>&& InDefaultParams)"
  },
  {
    "label": "FParameterTransmitterBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FParameterTransmitterBase()"
  }
]