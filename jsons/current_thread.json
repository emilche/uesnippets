[
  {
    "label": "WebTaskEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebTaskEnvironment"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "ScheduleWorkTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleWorkTest"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "sequence_manager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sequence_manager"
  },
  {
    "label": "MessageLoopTaskRunnerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageLoopTaskRunnerTest"
  },
  {
    "label": "web",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "web"
  },
  {
    "label": "CurrentThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_CURRENT_THREAD_H_ # define BASE_TASK_CURRENT_THREAD_H_ # include<ostream> # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / check . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / message_loop / message_pump_for_io . h \" # include \" base / message_loop / message_pump_for_ui . h \" # include \" base / pending_task . h \" # include \" base / task / sequence_manager / task_time_observer . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / task / task_observer . h \" # include \" build / build_config . h \" namespace web { class WebTaskEnvironment ; } namespace base { namespace sequence_manager { namespace internal { class SequenceManagerImpl ; } } class BASE_EXPORT CurrentThread { public :)",
    "insertText": "CurrentThread(const CurrentThread& other)"
  },
  {
    "label": "CurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentThread(CurrentThread&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentThread&)",
    "insertText": "operator(const CurrentThread& other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CurrentThread)",
    "insertText": "Get()"
  },
  {
    "label": "GetNull()",
    "kind": "Method",
    "detail": "Function (CurrentThread)",
    "insertText": "GetNull()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentThread*)",
    "insertText": "operator()"
  },
  {
    "label": "DestructionObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "DestructionObserver()"
  },
  {
    "label": "AddDestructionObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddDestructionObserver(DestructionObserver* destruction_observer)"
  },
  {
    "label": "RemoveDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestructionObserver(DestructionObserver* destruction_observer)"
  },
  {
    "label": "SetTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskRunner(scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "AddTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "RemoveTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "SetAddQueueTimeToTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddQueueTimeToTasks(bool enable)"
  },
  {
    "label": "RegisterOnNextIdleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnNextIdleCallback(OnceClosure on_next_idle_callback)"
  },
  {
    "label": "ScopedAllowApplicationTasksInNativeNestedLoop()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedAllowApplicationTasksInNativeNestedLoop { public :)",
    "insertText": "ScopedAllowApplicationTasksInNativeNestedLoop()"
  },
  {
    "label": "NestableTasksAllowed()",
    "kind": "Method",
    "detail": "Function (private : const raw_ptr<sequence_manager::internal::SequenceManagerImpl> sequence_manager_ ; const bool previous_state_ ; } ; using ScopedNestableTaskAllower = ScopedAllowApplicationTasksInNativeNestedLoop ; bool)",
    "insertText": "NestableTasksAllowed()"
  },
  {
    "label": "IsBoundToCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToCurrentThread()"
  },
  {
    "label": "IsIdleForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdleForTesting()"
  },
  {
    "label": "EnableMessagePumpTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessagePumpTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "CurrentThread()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CurrentThread(sequence_manager::internal::SequenceManagerImpl* sequence_manager) : current_(sequence_manager)"
  },
  {
    "label": "GetCurrentSequenceManagerImpl()",
    "kind": "Method",
    "detail": "Function (} sequence_manager::internal::SequenceManagerImpl*)",
    "insertText": "GetCurrentSequenceManagerImpl()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class MessagePumpLibeventTest ; class ScheduleWorkTest ; class Thread ; class sequence_manager::internal::SequenceManagerImpl ; class MessageLoopTaskRunnerTest ; class web::WebTaskEnvironment ; raw_ptr<sequence_manager::internal::SequenceManagerImpl> current_ ; } ; # if !)",
    "insertText": "BUILDFLAG(IS_NACL)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, MessagePumpForUI::Mode mode, MessagePumpForUI::FdWatchController* controller, MessagePumpForUI::FdWatcher* delegate)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_IOS) void Attach()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) void Abort()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) void AddMessagePumpObserver(MessagePumpForUI::Observer* observer)"
  },
  {
    "label": "RemoveMessagePumpObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMessagePumpObserver(MessagePumpForUI::Observer* observer)"
  },
  {
    "label": "CurrentUIThread()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "CurrentUIThread(sequence_manager::internal::SequenceManagerImpl* current) : CurrentThread(current)"
  },
  {
    "label": "GetMessagePumpForUI()",
    "kind": "Method",
    "detail": "Function (} MessagePumpForUI*)",
    "insertText": "GetMessagePumpForUI()"
  },
  {
    "label": "RegisterJobObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterJobObject(HANDLE job, MessagePumpForIO::IOHandler* handler)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) bool WatchFileDescriptor(int fd, bool persistent, MessagePumpForIO::Mode mode, MessagePumpForIO::FdWatchController* controller, MessagePumpForIO::FdWatcher* delegate)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_MAC) bool WatchMachReceivePort( mach_port_t port, MessagePumpForIO::MachPortWatchController* controller, MessagePumpForIO::MachPortWatcher* delegate)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_FUCHSIA) bool WatchZxHandle(zx_handle_t handle, bool persistent, zx_signals_t signals, MessagePumpForIO::ZxHandleWatchController* controller, MessagePumpForIO::ZxHandleWatcher* delegate)"
  },
  {
    "label": "CurrentIOThread()",
    "kind": "Method",
    "detail": "Function (# endif # endif private :)",
    "insertText": "CurrentIOThread(sequence_manager::internal::SequenceManagerImpl* current) : CurrentThread(current)"
  },
  {
    "label": "GetMessagePumpForIO()",
    "kind": "Method",
    "detail": "Function (} MessagePumpForIO*)",
    "insertText": "GetMessagePumpForIO()"
  }
]