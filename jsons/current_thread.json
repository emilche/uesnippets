[
  {
    "label": "WebTaskEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebTaskEnvironment"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "ScheduleWorkTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleWorkTest"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "sequence_manager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sequence_manager"
  },
  {
    "label": "MessageLoopTaskRunnerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageLoopTaskRunnerTest"
  },
  {
    "label": "web",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "web"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CurrentThread)",
    "insertText": "Get()"
  },
  {
    "label": "GetNull()",
    "kind": "Method",
    "detail": "Function (CurrentThread)",
    "insertText": "GetNull()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "AddDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDestructionObserver(DestructionObserver* destruction_observer)"
  },
  {
    "label": "RemoveDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestructionObserver(DestructionObserver* destruction_observer)"
  },
  {
    "label": "SetTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskRunner(scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "AddTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "RemoveTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "SetAddQueueTimeToTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddQueueTimeToTasks(bool enable)"
  },
  {
    "label": "RegisterOnNextIdleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnNextIdleCallback(OnceClosure on_next_idle_callback)"
  },
  {
    "label": "ScopedAllowApplicationTasksInNativeNestedLoop()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedAllowApplicationTasksInNativeNestedLoop()"
  },
  {
    "label": "IsIdleForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdleForTesting()"
  },
  {
    "label": "EnableMessagePumpTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessagePumpTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CurrentUIThread)",
    "insertText": "Get()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           MessagePumpForUI::Mode mode,\n                           MessagePumpForUI::FdWatchController* controller,\n                           MessagePumpForUI::FdWatcher* delegate)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attach()"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort()"
  },
  {
    "label": "AddMessagePumpObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessagePumpObserver(MessagePumpForUI::Observer* observer)"
  },
  {
    "label": "RemoveMessagePumpObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMessagePumpObserver(MessagePumpForUI::Observer* observer)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CurrentIOThread)",
    "insertText": "Get()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "RegisterIOHandler()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterIOHandler(HANDLE file, MessagePumpForIO::IOHandler* handler)"
  },
  {
    "label": "RegisterJobObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterJobObject(HANDLE job, MessagePumpForIO::IOHandler* handler)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           MessagePumpForIO::Mode mode,\n                           MessagePumpForIO::FdWatchController* controller,\n                           MessagePumpForIO::FdWatcher* delegate)"
  },
  {
    "label": "WatchMachReceivePort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchMachReceivePort(\n      mach_port_t port,\n      MessagePumpForIO::MachPortWatchController* controller,\n      MessagePumpForIO::MachPortWatcher* delegate)"
  },
  {
    "label": "WatchZxHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchZxHandle(zx_handle_t handle,\n                     bool persistent,\n                     zx_signals_t signals,\n                     MessagePumpForIO::ZxHandleWatchController* controller,\n                     MessagePumpForIO::ZxHandleWatcher* delegate)"
  }
]