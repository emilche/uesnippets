[
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "RegScavenger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegScavenger"
  },
  {
    "label": "ScavengedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScavengedInfo"
  },
  {
    "label": "ScavengedInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_REGISTERSCAVENGING_H # define LLVM_CODEGEN_REGISTERSCAVENGING_H # include \" llvm / ADT / BitVector . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / CodeGen / MachineRegisterInfo . h \" namespace llvm { class MachineRegisterInfo ; class TargetRegisterInfo ; class TargetInstrInfo ; class TargetRegisterClass ; class RegScavenger { const TargetRegisterInfo* TRI ; const TargetInstrInfo* TII ; MachineRegisterInfo* MRI ; MachineBasicBlock* MBB ; MachineBasicBlock::iterator MBBI ; unsigned NumRegUnits ; bool Tracking ; struct ScavengedInfo {)",
    "insertText": "ScavengedInfo(int FI = -1) : FrameIndex(FI), Reg(0), Restore(nullptr)"
  },
  {
    "label": "RegScavenger()",
    "kind": "Method",
    "detail": "Function (} int FrameIndex ; unsigned Reg ; const MachineInstr* Restore ; } ; SmallVector<ScavengedInfo,2> Scavenged ; BitVector RegUnitsAvailable ; BitVector KillRegUnits,DefRegUnits ; BitVector TmpRegUnits ; public :)",
    "insertText": "RegScavenger() : MBB(nullptr), NumRegUnits(0), Tracking(false)"
  },
  {
    "label": "enterBasicBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enterBasicBlock(MachineBasicBlock *mbb)"
  },
  {
    "label": "initRegState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initRegState()"
  },
  {
    "label": "forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "forward()"
  },
  {
    "label": "forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "forward(MachineBasicBlock::iterator I)"
  },
  {
    "label": "unprocess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "unprocess()"
  },
  {
    "label": "unprocess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unprocess(MachineBasicBlock::iterator I)"
  },
  {
    "label": "skipTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "skipTo(MachineBasicBlock::iterator I)"
  },
  {
    "label": "getCurrentPosition()",
    "kind": "Method",
    "detail": "Function (MBBI = I ; } MachineBasicBlock::iterator)",
    "insertText": "getCurrentPosition()"
  },
  {
    "label": "getRegsAvailable()",
    "kind": "Method",
    "detail": "Function (BitVector)",
    "insertText": "getRegsAvailable(const TargetRegisterClass *RC)"
  },
  {
    "label": "FindUnusedReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "FindUnusedReg(const TargetRegisterClass *RegClass)"
  },
  {
    "label": "addScavengingFrameIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addScavengingFrameIndex(int FI)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Scavenged .)",
    "insertText": "push_back(ScavengedInfo(FI))"
  },
  {
    "label": "isScavengingFrameIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isScavengingFrameIndex(int FI)"
  },
  {
    "label": "scavengeRegister()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "scavengeRegister(const TargetRegisterClass *RegClass, MachineBasicBlock::iterator I, int SPAdj)"
  },
  {
    "label": "scavengeRegister()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "scavengeRegister(const TargetRegisterClass *RegClass, int SPAdj)"
  },
  {
    "label": "setRegUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRegUsed(unsigned Reg)"
  },
  {
    "label": "isReserved()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "isReserved(unsigned Reg)"
  },
  {
    "label": "setUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUsed(BitVector &RegUnits)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (RegUnitsAvailable .)",
    "insertText": "reset(RegUnits)"
  },
  {
    "label": "setUnused()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUnused(BitVector &RegUnits)"
  },
  {
    "label": "determineKillsAndDefs()",
    "kind": "Method",
    "detail": "Function (RegUnitsAvailable | = RegUnits ; } void)",
    "insertText": "determineKillsAndDefs()"
  },
  {
    "label": "addRegUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegUnits(BitVector &BV, unsigned Reg)"
  },
  {
    "label": "findSurvivorReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "findSurvivorReg(MachineBasicBlock::iterator StartMI, BitVector &Candidates, unsigned InstrLimit, MachineBasicBlock::iterator &UseMI)"
  }
]