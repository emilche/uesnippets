[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "UChildActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildActorComponent"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FAttachedActorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachedActorInfo"
  },
  {
    "label": "FNetViewer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetViewer"
  },
  {
    "label": "FNetworkObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkObjectInfo"
  },
  {
    "label": "FActorTransactionAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorTransactionAnnotation"
  },
  {
    "label": "FComponentInstanceDataCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentInstanceDataCache"
  },
  {
    "label": "UDEPRECATED_DataLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_DataLayer"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UExternalDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerAsset"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "IWorldPartitionCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCell"
  },
  {
    "label": "FActorReplicationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorReplicationParams"
  },
  {
    "label": "UActorFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFolder"
  },
  {
    "label": "FActorDataLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorDataLayer"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FTearOffSetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTearOffSetter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FActorLastRenderTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorLastRenderTime"
  },
  {
    "label": "FPrimitiveSceneInfoAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneInfoAdapter"
  },
  {
    "label": "UDamageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDamageType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TInlineComponentArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInlineComponentArray"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FActorTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorTickFunction"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FSetActorIsInLevelInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorIsInLevelInstance"
  },
  {
    "label": "FAddActorLevelInstanceFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddActorLevelInstanceFlags"
  },
  {
    "label": "FRemoveActorLevelInstanceFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveActorLevelInstanceFlags"
  },
  {
    "label": "FActorDeferredScriptManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDeferredScriptManager"
  },
  {
    "label": "ENetRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetRole"
  },
  {
    "label": "FRepAttachment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepAttachment"
  },
  {
    "label": "FRepMovement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepMovement"
  },
  {
    "label": "ENetDormancy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetDormancy"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "UHLODLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHLODLayer"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FDuplicationSeedInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDuplicationSeedInterface"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "FRigidBodyCollisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyCollisionInfo"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FRotationConversionCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRotationConversionCache"
  },
  {
    "label": "FBlueprintCookedComponentInstancingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintCookedComponentInstancingData"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDamageEvent"
  },
  {
    "label": "FRadialDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRadialDamageEvent"
  },
  {
    "label": "FPointDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointDamageEvent"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "ComponentType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComponentType"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "instead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instead"
  },
  {
    "label": "FMarkActorIsBeingDestroyed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkActorIsBeingDestroyed"
  },
  {
    "label": "FActorParentComponentSetter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorParentComponentSetter"
  },
  {
    "label": "FSetActorWantsDestroyDuringBeginPlay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorWantsDestroyDuringBeginPlay"
  },
  {
    "label": "FSetActorHiddenInSceneOutliner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorHiddenInSceneOutliner"
  },
  {
    "label": "FSetActorGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorGuid"
  },
  {
    "label": "FSetActorReplicates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorReplicates"
  },
  {
    "label": "FSetActorInstanceGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorInstanceGuid"
  },
  {
    "label": "FSetActorContentBundleGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorContentBundleGuid"
  },
  {
    "label": "FAssignActorDataLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignActorDataLayer"
  },
  {
    "label": "FSetActorSelectable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorSelectable"
  },
  {
    "label": "FSetActorFolderPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetActorFolderPath"
  },
  {
    "label": "FFoliageHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFoliageHelper"
  },
  {
    "label": "ULevelInstanceSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelInstanceSubsystem"
  },
  {
    "label": "UExternalDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerInstance"
  },
  {
    "label": "FModelingToolsSetActorHiddenInSceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelingToolsSetActorHiddenInSceneOutliner"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngine"
  },
  {
    "label": "UExternalActorsCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalActorsCommandlet"
  },
  {
    "label": "UWorldPartitionConvertCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionConvertCommandlet"
  },
  {
    "label": "FWorldPartitionLevelHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionLevelHelper"
  },
  {
    "label": "ULevelStreamingLevelInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreamingLevelInstance"
  },
  {
    "label": "FReplaceActorHelperSetActorInstanceGuid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplaceActorHelperSetActorInstanceGuid"
  },
  {
    "label": "UWorldPartitionRuntimeCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCell"
  },
  {
    "label": "FContentBundleEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleEditor"
  },
  {
    "label": "FExternalDataLayerHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalDataLayerHelper"
  },
  {
    "label": "UGameFeatureActionConvertContentBundleWorldPartitionBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameFeatureActionConvertContentBundleWorldPartitionBuilder"
  },
  {
    "label": "UDataLayerInstanceWithAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstanceWithAsset"
  },
  {
    "label": "UDataLayerInstancePrivate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstancePrivate"
  },
  {
    "label": "ULevelStreamingLevelInstanceEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreamingLevelInstanceEditor"
  },
  {
    "label": "ULevelStreamingLevelInstanceEditorPropertyOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreamingLevelInstanceEditorPropertyOverride"
  },
  {
    "label": "ACTOR_HAS_LABELS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectBaseUtility . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" Templates / Requires . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" PropertyPairsMap . h \" # include \" Components / ChildActorComponent . h \" # include \" RenderCommandFence . h \" # include \" Net / Core / Misc / NetSubObjectRegistry . h \" # include \" Engine / ReplicatedState . h \" # if WITH_EDITOR # include \" Folder . h \" # endif # include \" WorldPartition / WorldPartitionActorDescType . h \" # include \" Actor . generated . h \" class AActor ; class AController ; class APawn ; class APlayerController ; class UActorChannel ; class UChildActorComponent ; class UNetDriver ; class UPrimitiveComponent ; struct FAttachedActorInfo ; struct FNetViewer ; struct FNetworkObjectInfo ; class FActorTransactionAnnotation ; class FComponentInstanceDataCache ; class UDEPRECATED_DataLayer ; class UDataLayerAsset ; class UExternalDataLayerAsset ; class UDataLayerInstance ; class AWorldDataLayers ; class IWorldPartitionCell ; # if UE_WITH_IRIS struct FActorReplicationParams ; # endif class UActorFolder ; struct FActorDataLayer ; struct FHitResult ; namespace UE::Net { class FTearOffSetter ; } # ifndef ACTOR_HAS_LABELS # define)",
    "insertText": "ACTOR_HAS_LABELS(UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT || WITH_PROFILEGPU) #endif UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (UseConfigDefault,AlwaysUpdate,OnlyUpdateMovable,NeverUpdate } ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (OverrideRootScale)",
    "insertText": "UMETA(DisplayName = \"Override Root Component Scale\"), MultiplyWithRoot UMETA(DisplayName = \"Multiply Scale With Root Component Scale\"), SelectDefaultAtRuntime UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,IsInEditHierarchy = 1,HasPropertyOverrides = 2,HasEditablePropertyOverrides = 4 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELevelInstanceFlags) #if WITH_EDITORONLY_DATA UENUM() enum class UE_DEPRECATED(5.0, \"EActorGridPlacement is deprecated.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Bounds,Location,AlwaysLoaded,None)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (# endif struct FActorLastRenderTime { float LastRenderTime ; std::atomic_int32_t NumAlwaysVisibleComponents = 0 ; private : void)",
    "insertText": "Set(AActor* InActor, float LastRenderTime)"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (FActorLastRenderTime*)",
    "insertText": "GetPtr(AActor* InActor)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (class UPrimitiveComponent ; struct FPrimitiveSceneInfoAdapter ; } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogActor, Log, Warning)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FiveParams(FTakeAnyDamageSignature, AActor, OnTakeAnyDamage, AActor*, DamagedActor, float, Damage, const class UDamageType*, DamageType, class AController*, InstigatedBy, AActor*, DamageCauser)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_NineParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_NineParams(FTakePointDamageSignature, AActor, OnTakePointDamage, AActor*, DamagedActor, float, Damage, class AController*, InstigatedBy, FVector, HitLocation, class UPrimitiveComponent*, FHitComponent, FName, BoneName, FVector, ShotFromDirection, const class UDamageType*, DamageType, AActor*, DamageCauser)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_SevenParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_SevenParams(FTakeRadialDamageSignature, AActor, OnTakeRadialDamage, AActor*, DamagedActor, float, Damage, const class UDamageType*, DamageType, FVector, Origin, const FHitResult&, HitInfo, class AController*, InstigatedBy, AActor*, DamageCauser)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorBeginOverlapSignature, AActor, OnActorBeginOverlap, AActor*, OverlappedActor, AActor*, OtherActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorEndOverlapSignature, AActor, OnActorEndOverlap, AActor*, OverlappedActor, AActor*, OtherActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FourParams(FActorHitSignature, AActor, OnActorHit, AActor*, SelfActor, AActor*, OtherActor, FVector, NormalImpulse, const FHitResult&, Hit)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FActorBeginCursorOverSignature, AActor, OnBeginCursorOver, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FActorEndCursorOverSignature, AActor, OnEndCursorOver, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorOnClickedSignature, AActor, OnClicked, AActor*, TouchedActor , FKey, ButtonPressed)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorOnReleasedSignature, AActor, OnReleased, AActor*, TouchedActor , FKey, ButtonReleased)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorOnInputTouchBeginSignature, AActor, OnInputTouchBegin, ETouchIndex::Type, FingerIndex, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorOnInputTouchEndSignature, AActor, OnInputTouchEnd, ETouchIndex::Type, FingerIndex, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorBeginTouchOverSignature, AActor, OnInputTouchEnter, ETouchIndex::Type, FingerIndex, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorEndTouchOverSignature, AActor, OnInputTouchLeave, ETouchIndex::Type, FingerIndex, AActor*, TouchedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FActorDestroyedSignature, AActor, OnDestroyed, AActor*, DestroyedActor)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorEndPlaySignature, AActor, OnEndPlay, AActor*, Actor , EEndPlayReason::Type, EndPlayReason)"
  },
  {
    "label": "DECLARE_DELEGATE_SixParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_SixParams(FMakeNoiseDelegate, AActor*, float , class APawn*, const FVector&, float , FName)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_EVENT_TwoParams(AActor, FActorOnPackagingModeChanged, AActor*, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(bool, FOnProcessEvent, AActor*, UFunction*, void*)"
  },
  {
    "label": "TInlineComponentArray()",
    "kind": "Method",
    "detail": "Function (# endif template<class T,uint32 NumElements = NumInlinedActorComponents> class TInlineComponentArray : public TArray<T,TInlineAllocator<NumElements>> { typedef TArray<T,TInlineAllocator<NumElements>> Super ; public :)",
    "insertText": "TInlineComponentArray() : Super()"
  },
  {
    "label": "TInlineComponentArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TInlineComponentArray(const AActor* Actor, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,uint32 NumElements> struct TIsContiguousContainer<TInlineComponentArray<T,NumElements>> { enum { Value = true } ; } ;)",
    "insertText": "UCLASS(BlueprintType, Blueprintable, config=Engine, meta=(ShortTooltip=\"An Actor is an object that can be placed or spawned in the world.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API AActor()"
  },
  {
    "label": "AActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AActor(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "InitializeDefaults()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeDefaults()"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "GetReplicatedCustomConditionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReplicatedCustomConditionState(FCustomPropertyConditionState& OutActiveState)"
  },
  {
    "label": "ShouldCallPreReplication()",
    "kind": "Method",
    "detail": "Function (private : # endif bool)",
    "insertText": "ShouldCallPreReplication()"
  },
  {
    "label": "ShouldCallPreReplicationForReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCallPreReplicationForReplay()"
  },
  {
    "label": "SetCallPreReplication()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCallPreReplication(bool bCall)"
  },
  {
    "label": "SetCallPreReplicationForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCallPreReplicationForReplay(bool bCall)"
  },
  {
    "label": "GetTearOff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTearOff()"
  },
  {
    "label": "IsInAnyEditLevelInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInAnyEditLevelInstance()"
  },
  {
    "label": "IsInEditLevelInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInEditLevelInstance()"
  },
  {
    "label": "HasLevelInstancePropertyOverrides()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLevelInstancePropertyOverrides()"
  },
  {
    "label": "HasEditableLevelLevelInstancePropertyOverrides()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasEditableLevelLevelInstancePropertyOverrides()"
  },
  {
    "label": "IsInLevelInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInLevelInstance()"
  },
  {
    "label": "HasNetOwner()",
    "kind": "Method",
    "detail": "Function (uint8 bActorSeamlessTraveled : 1 ; bool)",
    "insertText": "HasNetOwner()"
  },
  {
    "label": "HasLocalNetOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLocalNetOwner()"
  },
  {
    "label": "GetAutoDestroyWhenFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAutoDestroyWhenFinished()"
  },
  {
    "label": "SetRemoteRoleForBackwardsCompat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteRoleForBackwardsCompat(const ENetRole InRemoteRole)"
  },
  {
    "label": "GetUpdateOverlapsMethodDuringLevelStreaming()",
    "kind": "Method",
    "detail": "Function (public : EActorUpdateOverlapsMethod)",
    "insertText": "GetUpdateOverlapsMethodDuringLevelStreaming()"
  },
  {
    "label": "UpdateInitialOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInitialOverlaps(bool bFromLevelStreaming)"
  },
  {
    "label": "SetAutonomousProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutonomousProxy(const bool bInAutonomousProxy, const bool bAllowForcePropertyCompare=true)"
  },
  {
    "label": "CopyRemoteRoleFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRemoteRoleFrom(const AActor* CopyFromActor)"
  },
  {
    "label": "SetNetAddressable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetAddressable()"
  },
  {
    "label": "GetAttachmentReplication()",
    "kind": "Method",
    "detail": "Function (public : const struct FRepAttachment&)",
    "insertText": "GetAttachmentReplication()"
  },
  {
    "label": "SetNetDriverName()",
    "kind": "Method",
    "detail": "Function (private : FActorLastRenderTime LastRenderTime ; struct FActorLastRenderTime ; public : void)",
    "insertText": "SetNetDriverName(FName NewNetDriverName)"
  },
  {
    "label": "GetNetDriverName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNetDriverName()"
  },
  {
    "label": "OnSubobjectCreatedFromReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSubobjectCreatedFromReplication(UObject *NewSubobject)"
  },
  {
    "label": "OnSubobjectDestroyFromReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSubobjectDestroyFromReplication(UObject *Subobject)"
  },
  {
    "label": "PreReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplication(IRepChangedPropertyTracker & ChangedPropertyTracker)"
  },
  {
    "label": "PreReplicationForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplicationForReplay(IRepChangedPropertyTracker & ChangedPropertyTracker)"
  },
  {
    "label": "RewindForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RewindForReplay()"
  },
  {
    "label": "CallPreReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPreReplication(UNetDriver* NetDriver)"
  },
  {
    "label": "GetHLODLayer()",
    "kind": "Method",
    "detail": "Function (# endif FTimerHandle TimerHandle_LifeSpanExpired ; public : # if WITH_EDITOR class UHLODLayer*)",
    "insertText": "GetHLODLayer()"
  },
  {
    "label": "SetHLODLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLODLayer(class UHLODLayer* InHLODLayer)"
  },
  {
    "label": "GetHLODLayerPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetHLODLayerPropertyName()"
  },
  {
    "label": "AllowReceiveTickEventOnDedicatedServer()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "AllowReceiveTickEventOnDedicatedServer()"
  },
  {
    "label": "SetPackageExternal()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "SetPackageExternal(bool bExternal, bool bShouldDirty = true, UPackage* ActorExternalPackage = nullptr)"
  },
  {
    "label": "ShouldLevelKeepRefIfExternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLevelKeepRefIfExternal()"
  },
  {
    "label": "GetRuntimeGrid()",
    "kind": "Method",
    "detail": "Function (FActorOnPackagingModeChanged OnPackagingModeChanged ; FName)",
    "insertText": "GetRuntimeGrid()"
  },
  {
    "label": "GetRuntimeGridPropertyName()",
    "kind": "Method",
    "detail": "Function (RuntimeGrid = InRuntimeGrid ; } const FName)",
    "insertText": "GetRuntimeGridPropertyName()"
  },
  {
    "label": "GetActorGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetActorGuid()"
  },
  {
    "label": "GetContentBundleGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetContentBundleGuid()"
  },
  {
    "label": "SetLockLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLockLocation(bool bInLockLocation)"
  },
  {
    "label": "OnPlayFromHere()",
    "kind": "Method",
    "detail": "Function (bLockLocation = bInLockLocation ; } void)",
    "insertText": "OnPlayFromHere()"
  },
  {
    "label": "CanPlayFromHere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayFromHere()"
  },
  {
    "label": "CreateActorDesc()",
    "kind": "Method",
    "detail": "Function (public : TUniquePtr<class FWorldPartitionActorDesc>)",
    "insertText": "CreateActorDesc()"
  },
  {
    "label": "GetActorDescProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorDescProperties(FPropertyPairsMap& PropertyPairsMap)"
  },
  {
    "label": "StaticCreateClassActorDesc()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<class FWorldPartitionActorDesc>)",
    "insertText": "StaticCreateClassActorDesc(const TSubclassOf<AActor>& ActorClass)"
  },
  {
    "label": "OnLoadedActorAddedToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadedActorAddedToLevel()"
  },
  {
    "label": "OnLoadedActorRemovedFromLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLoadedActorRemovedFromLevel()"
  },
  {
    "label": "GetActorNameOrLabel()",
    "kind": "Method",
    "detail": "Function (# endif # if ! WITH_EDITORONLY_DATA&& ACTOR_HAS_LABELS FString ActorLabel ; # endif public : FString)",
    "insertText": "GetActorNameOrLabel()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA | | ACTOR_HAS_LABELS)",
    "insertText": "if(!ActorLabel.IsEmpty())"
  },
  {
    "label": "GetActorLabelView()",
    "kind": "Method",
    "detail": "Function (} FStringView)",
    "insertText": "GetActorLabelView()"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA | | ACTOR_HAS_LABELS return ActorLabel ; # else return)",
    "insertText": "FStringView()"
  },
  {
    "label": "GetInstigator()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetInstigator()"
  },
  {
    "label": "GetInstigatorController()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetInstigatorController()"
  },
  {
    "label": "AddDataLayer()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "AddDataLayer(const UDataLayerInstance* DataLayerInstance)"
  },
  {
    "label": "RemoveDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDataLayer(const UDataLayerInstance* DataLayerInstance)"
  },
  {
    "label": "CanAddDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddDataLayer(const UDataLayerInstance* InDataLayerInstance, FText* OutReason = nullptr)"
  },
  {
    "label": "RemoveAllDataLayers()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "RemoveAllDataLayers()"
  },
  {
    "label": "SupportsDataLayerType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDataLayerType(TSubclassOf<UDataLayerInstance> DataLayerType)"
  },
  {
    "label": "GetDataLayerInstancesForLevel()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstancesForLevel()"
  },
  {
    "label": "GetDataLayerInstanceNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetDataLayerInstanceNames()"
  },
  {
    "label": "IsPropertyChangedAffectingDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyChangedAffectingDataLayers(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "FixupDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupDataLayers(bool bRevertChangesOnLockedDataLayer = false)"
  },
  {
    "label": "GetDataLayerAssetsPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDataLayerAssetsPropertyName()"
  },
  {
    "label": "GetDataLayerPropertyName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetDataLayerPropertyName()"
  },
  {
    "label": "GetDataLayerAssets()",
    "kind": "Method",
    "detail": "Function (} TArray<const UDataLayerAsset*>)",
    "insertText": "GetDataLayerAssets(bool bIncludeExternalDataLayerAsset = true)"
  },
  {
    "label": "HasExternalContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExternalContent()"
  },
  {
    "label": "ActorTypeSupportsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActorTypeSupportsDataLayer()"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (} # endif TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances()"
  },
  {
    "label": "ContainsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataLayer(const UDataLayerAsset* DataLayerAsset)"
  },
  {
    "label": "ContainsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataLayer(const UDataLayerInstance* DataLayerInstance)"
  },
  {
    "label": "HasDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDataLayers()"
  },
  {
    "label": "HasContentBundle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContentBundle()"
  },
  {
    "label": "GetExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerAsset*)",
    "insertText": "GetExternalDataLayerAsset()"
  },
  {
    "label": "GetDataLayerInstancesInternal()",
    "kind": "Method",
    "detail": "Function (private : TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstancesInternal(bool bUseLevelContext, bool bIncludeParentDataLayers = true)"
  },
  {
    "label": "GetWorldPartitionRuntimeCell()",
    "kind": "Method",
    "detail": "Function (const IWorldPartitionCell*)",
    "insertText": "GetWorldPartitionRuntimeCell()"
  },
  {
    "label": "ActorToWorld()",
    "kind": "Method",
    "detail": "Function (} const FTransform&)",
    "insertText": "ActorToWorld()"
  },
  {
    "label": "SetActorLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorLocation(const FVector& NewLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorRotation(FRotator NewRotation, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorRotation(const FQuat& NewRotation, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorLocationAndRotation(FVector NewLocation, const FQuat& NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldOffset(FVector DeltaLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldRotation(FRotator DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldRotation(const FQuat& DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldTransform(const FTransform& DeltaTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorWorldTransformKeepScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldTransformKeepScale(const FTransform& DeltaTransform, bool bSweep = false, FHitResult* OutSweepHitResult = nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActorTransform(const FTransform& NewTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorLocalOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalOffset(FVector DeltaLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalRotation(FRotator DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalRotation(const FQuat& DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddActorLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalTransform(const FTransform& NewTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRelativeLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeRotation(const FQuat& NewRelativeRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetActorRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeTransform(const FTransform& NewRelativeTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MarkNeedsRecomputeBoundsOnceForGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNeedsRecomputeBoundsOnceForGame()"
  },
  {
    "label": "AttachToComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachToComponent(USceneComponent* Parent, const FAttachmentTransformRules& AttachmentRules, FName SocketName = NAME_None)"
  },
  {
    "label": "AttachToActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachToActor(AActor* ParentActor, const FAttachmentTransformRules& AttachmentRules, FName SocketName = NAME_None)"
  },
  {
    "label": "DetachFromActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromActor(const FDetachmentTransformRules& DetachmentRules)"
  },
  {
    "label": "DetachAllSceneComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachAllSceneComponents(class USceneComponent* InParentComponent, const FDetachmentTransformRules& DetachmentRules)"
  },
  {
    "label": "GetActorTimeDilation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActorTimeDilation(const UWorld& ActorWorld)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "DispatchBeginPlay()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DispatchBeginPlay(bool bFromLevelStreaming = false)"
  },
  {
    "label": "IsActorInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorInitialized()"
  },
  {
    "label": "NotifyActorBeginOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorBeginOverlap(AActor* OtherActor)"
  },
  {
    "label": "NotifyActorEndOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorEndOverlap(AActor* OtherActor)"
  },
  {
    "label": "NotifyActorBeginCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorBeginCursorOver()"
  },
  {
    "label": "NotifyActorEndCursorOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorEndCursorOver()"
  },
  {
    "label": "NotifyActorOnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnClicked(FKey ButtonPressed = EKeys::LeftMouseButton)"
  },
  {
    "label": "NotifyActorOnReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnReleased(FKey ButtonReleased = EKeys::LeftMouseButton)"
  },
  {
    "label": "NotifyActorOnInputTouchBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnInputTouchBegin(const ETouchIndex::Type FingerIndex)"
  },
  {
    "label": "NotifyActorOnInputTouchEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnInputTouchEnd(const ETouchIndex::Type FingerIndex)"
  },
  {
    "label": "NotifyActorOnInputTouchEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnInputTouchEnter(const ETouchIndex::Type FingerIndex)"
  },
  {
    "label": "NotifyActorOnInputTouchLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorOnInputTouchLeave(const ETouchIndex::Type FingerIndex)"
  },
  {
    "label": "GetOverlappingActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingActors(TSet<AActor*>& OverlappingActors, TSubclassOf<AActor> ClassFilter=nullptr)"
  },
  {
    "label": "GetOverlappingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingComponents(TSet<UPrimitiveComponent*>& OverlappingComponents)"
  },
  {
    "label": "NotifyHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyHit(class UPrimitiveComponent* MyComp, AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, const FHitResult& Hit)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Destroy(bool bNetForce = false, bool bShouldModifyLevel = true)"
  },
  {
    "label": "CheckDefaultSubobjectsInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckDefaultSubobjectsInternal()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(UFunction* Function, void* Parameters)"
  },
  {
    "label": "GetFunctionCallspace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFunctionCallspace(UFunction* Function, FFrame* Stack)"
  },
  {
    "label": "CallRemoteFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallRemoteFunction(UFunction* Function, void* Parameters, FOutParmRec* OutParms, FFrame* Stack)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostLoadSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadSubobjects(FObjectInstancingGraph* OuterInstanceGraph)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (# if ! UE_STRIP_DEPRECATED_PROPERTIES bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Rename(const TCHAR* NewName=nullptr, UObject* NewOuter=nullptr, ERenameFlags Flags=REN_None)"
  },
  {
    "label": "PostRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRename(UObject* OldOuter, const FName OldName)"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "IsRuntimeOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRuntimeOnly()"
  },
  {
    "label": "PreSaveRoot()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSaveRoot(FObjectPreSaveRootContext ObjectSaveContext)"
  },
  {
    "label": "PostSaveRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSaveRoot(FObjectPostSaveRootContext ObjectSaveContext)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "IsMainPackageActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMainPackageActor()"
  },
  {
    "label": "FindActorInPackage()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "FindActorInPackage(UPackage* InPackage, bool bEvenIfPendingKill = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "NeedsLoadForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForTargetPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostTransacted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTransacted(const FTransactionObjectEvent& TransactionEvent)"
  },
  {
    "label": "IsSelectedInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedInEditor()"
  },
  {
    "label": "FDuplicationSeedInterface()",
    "kind": "Method",
    "detail": "Function (struct FDuplicationSeedInterface { public :)",
    "insertText": "FDuplicationSeedInterface(TMap<UObject*, UObject*>& InDuplicationSeed)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(UObject* Source, UObject* Dest)"
  },
  {
    "label": "PopulatePIEDuplicationSeed()",
    "kind": "Method",
    "detail": "Function (private : TMap<UObject*,UObject*>& DuplicationSeed ; } ; void)",
    "insertText": "PopulatePIEDuplicationSeed(FDuplicationSeedInterface& DupSeed)"
  },
  {
    "label": "IsDefaultPreviewEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefaultPreviewEnabled()"
  },
  {
    "label": "CanReplaceSelectedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReplaceSelectedActor(FText& OutReason)"
  },
  {
    "label": "SupportsExternalPackaging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExternalPackaging()"
  },
  {
    "label": "FactoryTransactionAnnotation()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR TSharedPtr<FActorTransactionAnnotation> CurrentTransactionAnnotation ; TSharedPtr<ITransactionObjectAnnotation>)",
    "insertText": "FactoryTransactionAnnotation(const ETransactionAnnotationCreationMode InCreationMode)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo(TSharedPtr<ITransactionObjectAnnotation> TransactionAnnotation)"
  },
  {
    "label": "ReregisterComponentsWhenModified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReregisterComponentsWhenModified()"
  },
  {
    "label": "PostEditMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditMove(bool bFinished)"
  },
  {
    "label": "CanEditChangeComponent()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "CanEditChangeComponent(const UActorComponent* Component, const FProperty* InProperty)"
  },
  {
    "label": "GatherCurrentMovement()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GatherCurrentMovement()"
  },
  {
    "label": "IsOwnedBy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwnedBy(const AActor* TestOwner)"
  },
  {
    "label": "GetRootComponent()",
    "kind": "Method",
    "detail": "Function (} return false ; } USceneComponent*)",
    "insertText": "GetRootComponent()"
  },
  {
    "label": "SetRootComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRootComponent(USceneComponent* NewRootComponent)"
  },
  {
    "label": "GetActorLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorLocation()"
  },
  {
    "label": "GetActorRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetActorRotation()"
  },
  {
    "label": "GetActorScale()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorScale()"
  },
  {
    "label": "GetActorQuat()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetActorQuat()"
  },
  {
    "label": "SetPivotOffset()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "SetPivotOffset(const FVector& InPivotOffset)"
  },
  {
    "label": "GetPivotOffset()",
    "kind": "Method",
    "detail": "Function (PivotOffset = InPivotOffset ; } FVector)",
    "insertText": "GetPivotOffset()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "IsLevelBoundsRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelBoundsRelevant()"
  },
  {
    "label": "HasHLODRelevantComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHLODRelevantComponents()"
  },
  {
    "label": "GetHLODRelevantComponents()",
    "kind": "Method",
    "detail": "Function (TArray<UActorComponent*>)",
    "insertText": "GetHLODRelevantComponents()"
  },
  {
    "label": "SetLODParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLODParent(class UPrimitiveComponent* InLODParent, float InParentDrawDistance)"
  },
  {
    "label": "EditorApplyTranslation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool bUsePercentageBasedScaling ; void)",
    "insertText": "EditorApplyTranslation(const FVector& DeltaTranslation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "EditorApplyRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorApplyRotation(const FRotator& DeltaRotation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "EditorApplyScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorApplyScale(const FVector& DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "EditorApplyMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorApplyMirror(const FVector& MirrorScale, const FVector& PivotLocation)"
  },
  {
    "label": "EditorGetUnderlyingActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorGetUnderlyingActors(TSet<AActor*>& OutUnderlyingActors)"
  },
  {
    "label": "SetIsHiddenEdLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIsHiddenEdLayer(bool bIsHiddenEdLayer)"
  },
  {
    "label": "SupportsLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLayers()"
  },
  {
    "label": "IsForceExternalActorLevelReferenceForPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForceExternalActorLevelReferenceForPIE()"
  },
  {
    "label": "SetForceExternalActorLevelReferenceForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceExternalActorLevelReferenceForPIE(bool bValue)"
  },
  {
    "label": "GetIsSpatiallyLoaded()",
    "kind": "Method",
    "detail": "Function (bForceExternalActorLevelReferenceForPIE = bValue ; } } bool)",
    "insertText": "GetIsSpatiallyLoaded()"
  },
  {
    "label": "SetIsSpatiallyLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSpatiallyLoaded(bool bInIsSpatiallyLoaded)"
  },
  {
    "label": "CanChangeIsSpatiallyLoadedFlag()",
    "kind": "Method",
    "detail": "Function (bIsSpatiallyLoaded = bInIsSpatiallyLoaded ; } } bool)",
    "insertText": "CanChangeIsSpatiallyLoadedFlag()"
  },
  {
    "label": "GetIsSpatiallyLoadedPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetIsSpatiallyLoadedPropertyName()"
  },
  {
    "label": "IsListedInSceneOutliner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsListedInSceneOutliner()"
  },
  {
    "label": "EditorCanAttachTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorCanAttachTo(const AActor* InParent, FText& OutReason)"
  },
  {
    "label": "EditorCanAttachFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorCanAttachFrom(const AActor* InChild, FText& OutReason)"
  },
  {
    "label": "EditorCanDetachFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorCanDetachFrom(const AActor* InParent, FText& OutReason)"
  },
  {
    "label": "ShouldExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExport()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldImport(FStringView ActorPropString, bool IsMovingLevel)"
  },
  {
    "label": "EditorReplacedActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EditorReplacedActor(AActor* OldActor)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "CheckForDeprecated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForDeprecated()"
  },
  {
    "label": "ClearActorLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActorLabel()"
  },
  {
    "label": "IsActorLabelEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorLabelEditable()"
  },
  {
    "label": "GetFolderGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetFolderGuid(bool bDirectAccess = false)"
  },
  {
    "label": "GetFolderRootObject()",
    "kind": "Method",
    "detail": "Function (FFolder::FRootObject)",
    "insertText": "GetFolderRootObject()"
  },
  {
    "label": "FixupActorFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupActorFolder()"
  },
  {
    "label": "CreateOrUpdateActorFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrUpdateActorFolder()"
  },
  {
    "label": "GetFolder()",
    "kind": "Method",
    "detail": "Function (FFolder)",
    "insertText": "GetFolder()"
  },
  {
    "label": "SetFolderPath_Recursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFolderPath_Recursively(const FName& NewFolderPath)"
  },
  {
    "label": "GetReferencedContentObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencedContentObjects(TArray<UObject*>& Objects)"
  },
  {
    "label": "GetSoftReferencedContentObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftReferencedContentObjects(TArray<FSoftObjectPath>& SoftObjects)"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAssetEditor()"
  },
  {
    "label": "GetCustomIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCustomIconName()"
  },
  {
    "label": "GetBrowseToAssetOverride()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetBrowseToAssetOverride()"
  },
  {
    "label": "GetNetPriority()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetNetPriority(const FVector& ViewPos, const FVector& ViewDir, class AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth)"
  },
  {
    "label": "GetReplayPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetReplayPriority(const FVector& ViewPos, const FVector& ViewDir, class AActor* Viewer, AActor* ViewTarget, UActorChannel* const InChannel, float Time)"
  },
  {
    "label": "GetNetDormancy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNetDormancy(const FVector& ViewPos, const FVector& ViewDir, class AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth)"
  },
  {
    "label": "OnActorChannelOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorChannelOpen(class FInBunch& InBunch, class UNetConnection* Connection)"
  },
  {
    "label": "UseShortConnectTimeout()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "UseShortConnectTimeout()"
  },
  {
    "label": "OnNetCleanup()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnNetCleanup(class UNetConnection* Connection)"
  },
  {
    "label": "ExchangeNetRoles()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ExchangeNetRoles(bool bRemoteOwner)"
  },
  {
    "label": "SwapRoles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapRoles()"
  },
  {
    "label": "RegisterAllActorTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAllActorTickFunctions(bool bRegister, bool bDoComponents)"
  },
  {
    "label": "TickActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickActor(float DeltaTime, enum ELevelTick TickType, FActorTickFunction& ThisTickFunction)"
  },
  {
    "label": "AsyncPhysicsTickActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncPhysicsTickActor(float DeltaTime, float SimTime)"
  },
  {
    "label": "ReceiveAsyncPhysicsTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveAsyncPhysicsTick(DeltaTime, SimTime)"
  },
  {
    "label": "PostActorCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostActorCreated()"
  },
  {
    "label": "LifeSpanExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LifeSpanExpired()"
  },
  {
    "label": "PreNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreNetReceive()"
  },
  {
    "label": "PostNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceive()"
  },
  {
    "label": "PostNetReceiveRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveRole()"
  },
  {
    "label": "IsNameStableForNetworking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameStableForNetworking()"
  },
  {
    "label": "IsSupportedForNetworking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedForNetworking()"
  },
  {
    "label": "GetSubobjectsWithStableNamesForNetworking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubobjectsWithStableNamesForNetworking(TArray<UObject*> &ObjList)"
  },
  {
    "label": "PostNetInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetInit()"
  },
  {
    "label": "PostNetReceiveLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveLocationAndRotation()"
  },
  {
    "label": "PostNetReceiveVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceiveVelocity(const FVector& NewVelocity)"
  },
  {
    "label": "PostNetReceivePhysicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceivePhysicState()"
  },
  {
    "label": "SetFakeNetPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeNetPhysicsState(bool bShouldSleep)"
  },
  {
    "label": "SyncReplicatedPhysicsSimulation()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SyncReplicatedPhysicsSimulation()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "CheckStillInWorld()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckStillInWorld()"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EDataValidationResult)",
    "insertText": "IsDataValid(class FDataValidationContext& Context)"
  },
  {
    "label": "ClearComponentOverlaps()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ClearComponentOverlaps()"
  },
  {
    "label": "UpdateOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOverlaps(bool bDoNotifies=true)"
  },
  {
    "label": "IsRootComponentStatic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootComponentStatic()"
  },
  {
    "label": "IsRootComponentStationary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootComponentStationary()"
  },
  {
    "label": "IsRootComponentMovable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootComponentMovable()"
  },
  {
    "label": "GetPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (APhysicsVolume*)",
    "insertText": "GetPhysicsVolume()"
  },
  {
    "label": "ShouldTickIfViewportsOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTickIfViewportsOnly()"
  },
  {
    "label": "IsWithinNetRelevancyDistance()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsWithinNetRelevancyDistance(const FVector& SrcLocation)"
  },
  {
    "label": "IsNetRelevantFor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector& SrcLocation)"
  },
  {
    "label": "IsReplayRelevantFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplayRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector& SrcLocation, const float CullDistanceSquared)"
  },
  {
    "label": "IsRelevancyOwnerFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevancyOwnerFor(const AActor* ReplicatedActor, const AActor* ActorOwner, const AActor* ConnectionActor)"
  },
  {
    "label": "PostSpawnInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSpawnInitialize(FTransform const& SpawnTransform, AActor* InOwner, APawn* InInstigator, bool bRemoteOwned, bool bNoFail, bool bDeferConstruction, ESpawnActorScaleMethod TransformScaleMethod = ESpawnActorScaleMethod::MultiplyWithRoot)"
  },
  {
    "label": "FinishSpawning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishSpawning(const FTransform& Transform, bool bIsDefaultTransform = false, const FComponentInstanceDataCache* InstanceDataCache = nullptr, ESpawnActorScaleMethod TransformScaleMethod = ESpawnActorScaleMethod::OverrideRootScale)"
  },
  {
    "label": "PostActorConstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostActorConstruction()"
  },
  {
    "label": "PreInitializeComponents()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PreInitializeComponents()"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "DispatchPhysicsCollisionHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPhysicsCollisionHit(const struct FRigidBodyCollisionInfo& MyInfo, const struct FRigidBodyCollisionInfo& OtherInfo, const FCollisionImpactData& RigidCollisionData)"
  },
  {
    "label": "GetNetOwner()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetNetOwner()"
  },
  {
    "label": "GetNetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (class UPlayer*)",
    "insertText": "GetNetOwningPlayer()"
  },
  {
    "label": "GetNetConnection()",
    "kind": "Method",
    "detail": "Function (class UNetConnection*)",
    "insertText": "GetNetConnection()"
  },
  {
    "label": "DestroyNetworkActorHandled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyNetworkActorHandled()"
  },
  {
    "label": "GetNetMode()",
    "kind": "Method",
    "detail": "Function (ENetMode)",
    "insertText": "GetNetMode()"
  },
  {
    "label": "IsNetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetMode(ENetMode Mode)"
  },
  {
    "label": "GetNetDriver()",
    "kind": "Method",
    "detail": "Function (class UNetDriver*)",
    "insertText": "GetNetDriver()"
  },
  {
    "label": "ForcePropertyCompare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePropertyCompare()"
  },
  {
    "label": "IsSelectionParentOfAttachedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionParentOfAttachedActors()"
  },
  {
    "label": "IsSelectionChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionChild()"
  },
  {
    "label": "GetSelectionParent()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetSelectionParent()"
  },
  {
    "label": "GetRootSelectionParent()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetRootSelectionParent()"
  },
  {
    "label": "SupportsSubRootSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSubRootSelection()"
  },
  {
    "label": "IsActorOrSelectionParentSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorOrSelectionParentSelected()"
  },
  {
    "label": "PushSelectionToProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSelectionToProxies()"
  },
  {
    "label": "PushLevelInstanceEditingStateToProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PushLevelInstanceEditingStateToProxies(bool bInEditingState)"
  },
  {
    "label": "RegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAllComponents()"
  },
  {
    "label": "PreRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRegisterAllComponents()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "UnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllComponents(bool bForReregister = false)"
  },
  {
    "label": "PostUnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUnregisterAllComponents()"
  },
  {
    "label": "ReregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReregisterAllComponents()"
  },
  {
    "label": "HandleRegisterComponentWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRegisterComponentWithWorld(UActorComponent* Component)"
  },
  {
    "label": "IncrementalRegisterComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementalRegisterComponents(int32 NumComponentsToRegister, FRegisterComponentContext* Context = nullptr)"
  },
  {
    "label": "MarkComponentsRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkComponentsRenderStateDirty()"
  },
  {
    "label": "UpdateComponentTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentTransforms()"
  },
  {
    "label": "UpdateComponentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentVisibility()"
  },
  {
    "label": "InitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponents()"
  },
  {
    "label": "UninitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeComponents()"
  },
  {
    "label": "DrawDebugComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugComponents(FColor const& BaseColor=FColor::White)"
  },
  {
    "label": "MarkComponentsAsGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkComponentsAsGarbage()"
  },
  {
    "label": "MarkComponentsAsGarbage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkComponentsAsGarbage(bool bModify = true)"
  },
  {
    "label": "IsPendingKillPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingKillPending()"
  },
  {
    "label": "InvalidateLightingCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateLightingCache()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCacheDetailed(false)"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bTranslationOnly)"
  },
  {
    "label": "TeleportTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TeleportTo(const FVector& DestLocation, const FRotator& DestRotation, bool bIsATest=false, bool bNoCheck=false)"
  },
  {
    "label": "TeleportSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeleportSucceeded(bool bIsATest)"
  },
  {
    "label": "ActorLineTraceSingle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ActorLineTraceSingle(struct FHitResult& OutHit, const FVector& Start, const FVector& End, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params)"
  },
  {
    "label": "ActorGetDistanceToCollision()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ActorGetDistanceToCollision(const FVector& Point, ECollisionChannel TraceChannel, FVector& ClosestPointOnCollision, UPrimitiveComponent** OutPrimitiveComponent = nullptr)"
  },
  {
    "label": "IsInLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInLevel(const class ULevel *TestLevel)"
  },
  {
    "label": "ClearCrossLevelReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCrossLevelReferences()"
  },
  {
    "label": "RouteEndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RouteEndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "IsBasedOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBasedOnActor(const AActor* Other)"
  },
  {
    "label": "IsAttachedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttachedTo(const AActor* Other)"
  },
  {
    "label": "GetPlacementExtent()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPlacementExtent()"
  },
  {
    "label": "SeedAllRandomStreams()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SeedAllRandomStreams()"
  },
  {
    "label": "ResetPropertiesForConstruction()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ResetPropertiesForConstruction()"
  },
  {
    "label": "HasNonTrivialUserConstructionScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNonTrivialUserConstructionScript()"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "DebugShowComponentHierarchy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DebugShowComponentHierarchy(const TCHAR* Info, bool bShowPosition = true)"
  },
  {
    "label": "DebugShowOneComponentHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugShowOneComponentHierarchy(USceneComponent* SceneComp, int32& NestLevel, bool bShowPosition)"
  },
  {
    "label": "ExecuteConstruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteConstruction(const FTransform& Transform, const struct FRotationConversionCache* TransformRotationCache, const class FComponentInstanceDataCache* InstanceDataCache, bool bIsDefaultTransform = false, ESpawnActorScaleMethod TransformScaleMethod = ESpawnActorScaleMethod::OverrideRootScale)"
  },
  {
    "label": "OnConstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstruction(const FTransform& Transform)"
  },
  {
    "label": "FinishAndRegisterComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishAndRegisterComponent(UActorComponent* Component)"
  },
  {
    "label": "CreateComponentFromTemplate()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "CreateComponentFromTemplate(UActorComponent* Template, const FName InName = NAME_None)"
  },
  {
    "label": "CreateComponentFromTemplateData()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "CreateComponentFromTemplateData(const struct FBlueprintCookedComponentInstancingData* TemplateData, const FName InName = NAME_None)"
  },
  {
    "label": "DestroyConstructedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyConstructedComponents()"
  },
  {
    "label": "RegisterReplicationFragments()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS void)",
    "insertText": "RegisterReplicationFragments(UE::Net::FFragmentRegistrationContext& Context, UE::Net::EFragmentRegistrationFlags RegistrationFlags)"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplication()"
  },
  {
    "label": "EndReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplication(EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "UpdateOwningNetConnection()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateOwningNetConnection()"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplication(const FActorReplicationParams& Params)"
  },
  {
    "label": "UpdateReplicatePhysicsCondition()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateReplicatePhysicsCondition()"
  },
  {
    "label": "RegisterActorTickFunctions()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RegisterActorTickFunctions(bool bRegister)"
  },
  {
    "label": "ProcessUserConstructionScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessUserConstructionScript()"
  },
  {
    "label": "CheckActorComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckActorComponents()"
  },
  {
    "label": "PostCreateBlueprintComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreateBlueprintComponent(UActorComponent* NewActorComp)"
  },
  {
    "label": "CheckComponentInstanceName()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CheckComponentInstanceName(const FName InName)"
  },
  {
    "label": "ForEachAttachedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAttachedActors(TFunctionRef<bool(class AActor*)> Functor)"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "DispatchBlockingHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchBlockingHit(UPrimitiveComponent* MyComp, UPrimitiveComponent* OtherComp, bool bSelfMoved, FHitResult const& Hit)"
  },
  {
    "label": "FellOutOfWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FellOutOfWorld(const class UDamageType& dmgType)"
  },
  {
    "label": "OutsideWorldBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutsideWorldBounds()"
  },
  {
    "label": "GetComponentsBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetComponentsBoundingBox(bool bNonColliding = false, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "CalculateComponentsBoundingBoxInLocalSpace()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding = false, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponentsBoundingCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentsBoundingCylinder(float& CollisionRadius, float& CollisionHalfHeight, bool bNonColliding = false, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetSimpleCollisionCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSimpleCollisionCylinder(float& CollisionRadius, float& CollisionHalfHeight)"
  },
  {
    "label": "GetSimpleCollisionRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSimpleCollisionRadius()"
  },
  {
    "label": "GetSimpleCollisionHalfHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSimpleCollisionHalfHeight()"
  },
  {
    "label": "GetSimpleCollisionCylinderExtent()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetSimpleCollisionCylinderExtent()"
  },
  {
    "label": "IsRootComponentCollisionRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootComponentCollisionRegistered()"
  },
  {
    "label": "TornOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TornOff()"
  },
  {
    "label": "GetComponentsCollisionResponseToChannel()",
    "kind": "Method",
    "detail": "Function (ECollisionResponse)",
    "insertText": "GetComponentsCollisionResponseToChannel(ECollisionChannel Channel)"
  },
  {
    "label": "DisableComponentsSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableComponentsSimulatePhysics()"
  },
  {
    "label": "GetWorldSettings()",
    "kind": "Method",
    "detail": "Function (class AWorldSettings*)",
    "insertText": "GetWorldSettings()"
  },
  {
    "label": "CanBeBaseForCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeBaseForCharacter(class APawn* Pawn)"
  },
  {
    "label": "TakeDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TakeDamage(float DamageAmount, struct FDamageEvent const& DamageEvent, class AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "InternalTakeRadialDamage()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "InternalTakeRadialDamage(float Damage, struct FRadialDamageEvent const& RadialDamageEvent, class AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "InternalTakePointDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InternalTakePointDamage(float Damage, struct FPointDamageEvent const& PointDamageEvent, class AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "BecomeViewTarget()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BecomeViewTarget(class APlayerController* PC)"
  },
  {
    "label": "EndViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndViewTarget(class APlayerController* PC)"
  },
  {
    "label": "CalcCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcCamera(float DeltaTime, struct FMinimalViewInfo& OutResult)"
  },
  {
    "label": "HasActiveCameraComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveCameraComponent(bool bForceFindCamera = false)"
  },
  {
    "label": "HasActivePawnControlCameraComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActivePawnControlCameraComponent()"
  },
  {
    "label": "GetHumanReadableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHumanReadableName()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastRenderTime()"
  },
  {
    "label": "ForceNetRelevant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNetRelevant()"
  },
  {
    "label": "GetTargetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetTargetLocation(AActor* RequestedBy = nullptr)"
  },
  {
    "label": "PostRenderFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, FVector CameraPosition, FVector CameraDir)"
  },
  {
    "label": "IsInPersistentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInPersistentLevel(bool bIncludeLevelStreamingPersistent = false)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetWorldTimerManager()",
    "kind": "Method",
    "detail": "Function (class FTimerManager&)",
    "insertText": "GetWorldTimerManager()"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (class UGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "IsNetStartupActor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNetStartupActor()"
  },
  {
    "label": "FindComponentByClass()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindComponentByClass(const TSubclassOf<UActorComponent> ComponentClass)"
  },
  {
    "label": "GetComponentByClass()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetComponentByClass()"
  },
  {
    "label": "FindComponentByInterface()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindComponentByInterface(const TSubclassOf<UInterface> Interface)"
  },
  {
    "label": "FindComponentByClass()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "FindComponentByClass()"
  },
  {
    "label": "FindComponentByTag()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindComponentByTag(const FName& Tag)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<class T)",
    "insertText": "UE_REQUIRES(TPointerIsConvertibleFromTo<T, UInterface>::Value)> UE_DEPRECATED(5.5, \"This version incorrectly casts to the UInterface type used for reflection. Use FindComponentByInterface<IMyInterface>() instead\") T* FindComponentByInterface()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<class T)",
    "insertText": "UE_REQUIRES(TIsIInterface<T>::Value)> T* FindComponentByInterface()"
  },
  {
    "label": "ForEachComponent_Internal()",
    "kind": "Method",
    "detail": "Function (} private : template<class ComponentType,bool bClassIsActorComponent,bool bIncludeFromChildActors,Func> void)",
    "insertText": "ForEachComponent_Internal(TSubclassOf<UActorComponent> ComponentClass, Func InFunc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*,TInlineAllocator<NumInlinedActorComponents>> ChildActors ;)",
    "insertText": "for(UActorComponent* OwnedComponent : OwnedComponents)"
  },
  {
    "label": "InFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunc(static_cast<ComponentType*>(OwnedComponent))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UChildActorComponent* ChildActorComponent = Cast<UChildActorComponent>(OwnedComponent))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildActors .)",
    "insertText": "Add(ChildActor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "for(AActor* ChildActor : ChildActors)"
  },
  {
    "label": "bIncludeFromChildActors()",
    "kind": "Method",
    "detail": "Function (ChildActor -> ForEachComponent_Internal<ComponentType,bClassIsActorComponent,)",
    "insertText": "bIncludeFromChildActors(ComponentClass, InFunc)"
  },
  {
    "label": "ForEachComponent_Internal()",
    "kind": "Method",
    "detail": "Function (} } } } } template<class ComponentType,Func> void)",
    "insertText": "ForEachComponent_Internal(TSubclassOf<UActorComponent> ComponentClass, bool bIncludeFromChildActors, Func InFunc)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { ForEachComponent_Internal<ComponentType,true,)",
    "insertText": "false(ComponentClass, InFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(bIncludeFromChildActors)"
  },
  {
    "label": "ForEachComponent()",
    "kind": "Method",
    "detail": "Function (} } } public : template<class ComponentType,Func> void)",
    "insertText": "ForEachComponent(bool bIncludeFromChildActors, Func InFunc)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,class ComponentType> void)",
    "insertText": "GetComponents(TSubclassOf<UActorComponent> ComponentClass, TArray<ComponentType*, AllocatorType>& OutComponents, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} template<class ComponentType,class AllocatorType> void)",
    "insertText": "GetComponents(TArray<ComponentType, AllocatorType>& OutComponents, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} template<class T,class AllocatorType> void)",
    "insertText": "GetComponents(TArray<T*, AllocatorType>& OutComponents, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} template<class T,class AllocatorType> void)",
    "insertText": "GetComponents(TArray<TObjectPtr<T>, AllocatorType>& OutComponents, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType> void)",
    "insertText": "GetComponents(TArray<UActorComponent*, AllocatorType>& OutComponents, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} const TSet<UActorComponent*>&)",
    "insertText": "GetComponents()"
  },
  {
    "label": "AddOwnedComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOwnedComponent(UActorComponent* Component)"
  },
  {
    "label": "RemoveOwnedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOwnedComponent(UActorComponent* Component)"
  },
  {
    "label": "OwnsComponent()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK | | USING_CODE_ANALYSIS bool)",
    "insertText": "OwnsComponent(UActorComponent* Component)"
  },
  {
    "label": "ResetOwnedComponents()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ResetOwnedComponents()"
  },
  {
    "label": "UpdateReplicatedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReplicatedComponent(UActorComponent* Component)"
  },
  {
    "label": "UpdateAllReplicatedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllReplicatedComponents()"
  },
  {
    "label": "AllowActorComponentToReplicate()",
    "kind": "Method",
    "detail": "Function (ELifetimeCondition)",
    "insertText": "AllowActorComponentToReplicate(const UActorComponent* ComponentToReplicate)"
  },
  {
    "label": "SetReplicatedComponentNetCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicatedComponentNetCondition(const UActorComponent* ReplicatedComponent, ELifetimeCondition NetCondition)"
  },
  {
    "label": "RemoveReplicatedSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReplicatedSubObject(UObject* SubObject)"
  },
  {
    "label": "DestroyReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyReplicatedSubObjectOnRemotePeers(UObject* SubObject)"
  },
  {
    "label": "DestroyReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyReplicatedSubObjectOnRemotePeers(UActorComponent* OwnerComponent, UObject* SubObject)"
  },
  {
    "label": "TearOffReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearOffReplicatedSubObjectOnRemotePeers(UObject* SubObject)"
  },
  {
    "label": "TearOffReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearOffReplicatedSubObjectOnRemotePeers(UActorComponent* OwnerComponent, UObject* SubObject)"
  },
  {
    "label": "AddActorComponentReplicatedSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorComponentReplicatedSubObject(UActorComponent* OwnerComponent, UObject* SubObject, ELifetimeCondition NetCondition = COND_None)"
  },
  {
    "label": "RemoveActorComponentReplicatedSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorComponentReplicatedSubObject(UActorComponent* OwnerComponent, UObject* SubObject)"
  },
  {
    "label": "IsReplicatedSubObjectRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplicatedSubObjectRegistered(const UObject* SubObject)"
  },
  {
    "label": "IsReplicatedActorComponentRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplicatedActorComponentRegistered(const UActorComponent* ReplicatedComponent)"
  },
  {
    "label": "IsActorComponentReplicatedSubObjectRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorComponentReplicatedSubObjectRegistered(const UActorComponent* OwnerComponent, const UObject* SubObject)"
  },
  {
    "label": "GetActorClassDefaultComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorClassDefaultComponents(const TSubclassOf<AActor>& InActorClass, const TSubclassOf<UActorComponent>& InComponentClass, TArray<const UActorComponent*>& OutComponents)"
  },
  {
    "label": "GetActorClassDefaultComponent()",
    "kind": "Method",
    "detail": "Function (const UActorComponent*)",
    "insertText": "GetActorClassDefaultComponent(const TSubclassOf<AActor>& InActorClass, const TSubclassOf<UActorComponent>& InComponentClass)"
  },
  {
    "label": "GetActorClassDefaultComponentByName()",
    "kind": "Method",
    "detail": "Function (const UActorComponent*)",
    "insertText": "GetActorClassDefaultComponentByName(const TSubclassOf<AActor>& InActorClass, const TSubclassOf<UActorComponent>& InComponentClass, FName InComponentName)"
  },
  {
    "label": "ForEachComponentOfActorClassDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachComponentOfActorClassDefault(const TSubclassOf<AActor>& InActorClass, const TSubclassOf<UActorComponent>& InComponentClass, TFunctionRef<bool(const UActorComponent*)> InFunc)"
  },
  {
    "label": "GetActorClassDefaultComponents()",
    "kind": "Method",
    "detail": "Function (template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> void)",
    "insertText": "GetActorClassDefaultComponents(const TSubclassOf<AActor>& InActorClass, TArray<const TComponentClass*>& OutComponents)"
  },
  {
    "label": "GetActorClassDefaultComponent()",
    "kind": "Method",
    "detail": "Function (} template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> const TComponentClass*)",
    "insertText": "GetActorClassDefaultComponent(const TSubclassOf<AActor>& InActorClass)"
  },
  {
    "label": "GetActorClassDefaultComponentByName()",
    "kind": "Method",
    "detail": "Function (} template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> const TComponentClass*)",
    "insertText": "GetActorClassDefaultComponentByName(const TSubclassOf<AActor>& InActorClass, FName InComponentName)"
  },
  {
    "label": "ForEachComponentOfActorClassDefault()",
    "kind": "Method",
    "detail": "Function (} template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> void)",
    "insertText": "ForEachComponentOfActorClassDefault(const TSubclassOf<AActor>& InActorClass, TFunctionRef<bool(const TComponentClass*)> InFunc)"
  },
  {
    "label": "RemoveReplicatedSubObjectFromList()",
    "kind": "Method",
    "detail": "Function (} private : UE::Net::FSubObjectRegistry ReplicatedSubObjects ; class UE::Net::FSubObjectRegistryGetter ; TArray<UE::Net::FReplicatedComponentInfo> ReplicatedComponentsInfo ; bool)",
    "insertText": "RemoveReplicatedSubObjectFromList(UObject* SubObject)"
  },
  {
    "label": "RemoveActorComponentReplicatedSubObjectFromList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveActorComponentReplicatedSubObjectFromList(UActorComponent* OwnerComponent, UObject* SubObject)"
  },
  {
    "label": "AddComponentForReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentForReplication(UActorComponent* Component)"
  },
  {
    "label": "RemoveReplicatedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReplicatedComponent(UActorComponent* Component)"
  },
  {
    "label": "BuildReplicatedComponentsInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildReplicatedComponentsInfo()"
  },
  {
    "label": "AddInstanceComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstanceComponent(UActorComponent* Component)"
  },
  {
    "label": "RemoveInstanceComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstanceComponent(UActorComponent* Component)"
  },
  {
    "label": "ClearInstanceComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInstanceComponents(bool bDestroyComponents)"
  },
  {
    "label": "GetInstanceComponents()",
    "kind": "Method",
    "detail": "Function (const TArray<UActorComponent*>&)",
    "insertText": "GetInstanceComponents()"
  },
  {
    "label": "MakeNoiseImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNoiseImpl(AActor* NoiseMaker, float Loudness, APawn* NoiseInstigator, const FVector& NoiseLocation, float MaxRange, FName Tag)"
  },
  {
    "label": "SetMakeNoiseDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMakeNoiseDelegate(const FMakeNoiseDelegate& NewDelegate)"
  },
  {
    "label": "IsComponentRelevantForNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentRelevantForNavigation(UActorComponent* Component)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugName(const AActor* Actor)"
  },
  {
    "label": "InternalDispatchBlockingHit()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "InternalDispatchBlockingHit(UPrimitiveComponent* MyComp, UPrimitiveComponent* OtherComp, bool bSelfMoved, FHitResult const& Hit)"
  },
  {
    "label": "InternalGetNetMode()",
    "kind": "Method",
    "detail": "Function (ENetMode)",
    "insertText": "InternalGetNetMode()"
  },
  {
    "label": "InternalPostEditUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalPostEditUndo()"
  },
  {
    "label": "IsActorFolderValid()",
    "kind": "Method",
    "detail": "Function (struct FMarkActorIsBeingDestroyed ; struct FActorParentComponentSetter ; struct FSetActorWantsDestroyDuringBeginPlay ; # if WITH_EDITOR bool)",
    "insertText": "IsActorFolderValid()"
  },
  {
    "label": "SetFolderPathInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFolderPathInternal(const FName& InNewFolderPath, bool bInBroadcastChange = true)"
  },
  {
    "label": "SetFolderGuidInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFolderGuidInternal(const FGuid& InFolderGuid, bool bInBroadcastChange = true)"
  },
  {
    "label": "GetActorFolder()",
    "kind": "Method",
    "detail": "Function (UActorFolder*)",
    "insertText": "GetActorFolder(bool bSkipDeleted = true)"
  },
  {
    "label": "TemplateGetActorTransform()",
    "kind": "Method",
    "detail": "Function (struct FSetActorHiddenInSceneOutliner ; struct FSetActorGuid ; struct FSetActorReplicates ; struct FSetActorInstanceGuid ; struct FSetActorContentBundleGuid ; struct FAssignActorDataLayer ; struct FSetActorSelectable ; struct FSetActorFolderPath ; # endif template<class T> const FTransform&)",
    "insertText": "TemplateGetActorTransform(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorLocation()",
    "kind": "Method",
    "detail": "Function (} template<class T> FVector)",
    "insertText": "TemplateGetActorLocation(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorRotation()",
    "kind": "Method",
    "detail": "Function (} template<class T> FRotator)",
    "insertText": "TemplateGetActorRotation(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorScale()",
    "kind": "Method",
    "detail": "Function (} template<class T> FVector)",
    "insertText": "TemplateGetActorScale(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorQuat()",
    "kind": "Method",
    "detail": "Function (} template<class T> FQuat)",
    "insertText": "TemplateGetActorQuat(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorForwardVector()",
    "kind": "Method",
    "detail": "Function (} template<class T> FVector)",
    "insertText": "TemplateGetActorForwardVector(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorUpVector()",
    "kind": "Method",
    "detail": "Function (} template<class T> FVector)",
    "insertText": "TemplateGetActorUpVector(const T* RootComponent)"
  },
  {
    "label": "TemplateGetActorRightVector()",
    "kind": "Method",
    "detail": "Function (} template<class T> FVector)",
    "insertText": "TemplateGetActorRightVector(const T* RootComponent)"
  },
  {
    "label": "GetHiddenPropertyName()",
    "kind": "Method",
    "detail": "Function (} public : const FName)",
    "insertText": "GetHiddenPropertyName()"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "GetReplicateMovementPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetReplicateMovementPropertyName()"
  },
  {
    "label": "IsReplicatingMovement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReplicatingMovement()"
  },
  {
    "label": "GetCanBeDamagedPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetCanBeDamagedPropertyName()"
  },
  {
    "label": "CanBeDamaged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeDamaged()"
  },
  {
    "label": "GetRolePropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetRolePropertyName()"
  },
  {
    "label": "SetRole()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRole(ENetRole InRole)"
  },
  {
    "label": "GetReplicatedMovement()",
    "kind": "Method",
    "detail": "Function (const FRepMovement&)",
    "insertText": "GetReplicatedMovement()"
  },
  {
    "label": "SetReplicatedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicatedMovement(const FRepMovement& InReplicatedMovement)"
  },
  {
    "label": "GetInstigatorPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetInstigatorPropertyName()"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstigator(APawn* InInstigator)"
  },
  {
    "label": "FMarkActorIsBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (} ; struct FMarkActorIsBeingDestroyed { private :)",
    "insertText": "FMarkActorIsBeingDestroyed(AActor* InActor)"
  },
  {
    "label": "FSetActorWantsDestroyDuringBeginPlay()",
    "kind": "Method",
    "detail": "Function (InActor -> bActorIsBeingDestroyed = true ; } UWorld ; } ; struct FSetActorWantsDestroyDuringBeginPlay { private :)",
    "insertText": "FSetActorWantsDestroyDuringBeginPlay(AActor* InActor)"
  },
  {
    "label": "FSetActorHiddenInSceneOutliner()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR struct FSetActorHiddenInSceneOutliner { private :)",
    "insertText": "FSetActorHiddenInSceneOutliner(AActor* InActor, bool bHidden = true)"
  },
  {
    "label": "FSetActorGuid()",
    "kind": "Method",
    "detail": "Function (InActor -> bListedInSceneOutliner = ! bHidden ; } UWorld ; class FFoliageHelper ; class ULevelInstanceSubsystem ; class UExternalDataLayerInstance ; class FModelingToolsSetActorHiddenInSceneOutliner ; } ; struct FSetActorGuid { private :)",
    "insertText": "FSetActorGuid(AActor* InActor, const FGuid& InActorGuid)"
  },
  {
    "label": "FSetActorReplicates()",
    "kind": "Method",
    "detail": "Function (InActor -> ActorGuid = InActorGuid ; } class UWorld ; class UEngine ; class UExternalActorsCommandlet ; class UWorldPartitionConvertCommandlet ; } ; struct FSetActorReplicates { private :)",
    "insertText": "FSetActorReplicates(AActor* InActor, bool bInReplicates)"
  },
  {
    "label": "RemoteRole()",
    "kind": "Method",
    "detail": "Function (InActor -> bReplicates = bInReplicates ; InActor ->)",
    "insertText": "RemoteRole(bInReplicates ? ROLE_SimulatedProxy : ROLE_None)"
  },
  {
    "label": "FSetActorInstanceGuid()",
    "kind": "Method",
    "detail": "Function (} } class FWorldPartitionLevelHelper ; } ; struct FSetActorInstanceGuid { private :)",
    "insertText": "FSetActorInstanceGuid(AActor* InActor, const FGuid& InActorInstanceGuid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InActor -> ActorInstanceGuid = InActorInstanceGuid ;)",
    "insertText": "if(InActorInstanceGuid == InActor->ActorGuid)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (InActor -> ActorInstanceGuid .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "FSetActorFolderPath()",
    "kind": "Method",
    "detail": "Function (} } class UEngine ; class ULevelStreamingLevelInstance ; class FWorldPartitionLevelHelper ; class FReplaceActorHelperSetActorInstanceGuid ; } ; struct FSetActorFolderPath { private :)",
    "insertText": "FSetActorFolderPath(AActor* InActor, const FName InFolderPath, bool bInBroadcastChange = true)"
  },
  {
    "label": "SetFolderPathInternal()",
    "kind": "Method",
    "detail": "Function (InActor ->)",
    "insertText": "SetFolderPathInternal(InFolderPath, bInBroadcastChange)"
  },
  {
    "label": "FSetActorContentBundleGuid()",
    "kind": "Method",
    "detail": "Function (} class UWorldPartitionRuntimeCell ; } ; struct FSetActorContentBundleGuid { private :)",
    "insertText": "FSetActorContentBundleGuid(AActor* InActor, const FGuid& InContentBundleGuid)"
  },
  {
    "label": "AddDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (InActor -> ContentBundleGuid = InContentBundleGuid ; } class FContentBundleEditor ; class FExternalDataLayerHelper ; class UGameFeatureActionConvertContentBundleWorldPartitionBuilder ; } ; struct FAssignActorDataLayer { private : bool)",
    "insertText": "AddDataLayerAsset(AActor* InActor, const UDataLayerAsset* InDataLayerAsset)"
  },
  {
    "label": "RemoveDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDataLayerAsset(AActor* InActor, const UDataLayerAsset* InDataLayerAsset)"
  },
  {
    "label": "FSetActorIsInLevelInstance()",
    "kind": "Method",
    "detail": "Function (class UEngine ; class FContentBundleEditor ; class UDataLayerInstanceWithAsset ; class UDataLayerInstancePrivate ; class UExternalDataLayerInstance ; class ULevelInstanceSubsystem ; class FExternalDataLayerHelper ; } ; struct FSetActorIsInLevelInstance { private :)",
    "insertText": "FSetActorIsInLevelInstance(AActor* InActor, ELevelInstanceType InLevelInstanceType)"
  },
  {
    "label": "FAddActorLevelInstanceFlags()",
    "kind": "Method",
    "detail": "Function (InActor -> LevelInstanceType = InLevelInstanceType ; } class ULevelStreamingLevelInstance ; class ULevelStreamingLevelInstanceEditor ; class ULevelStreamingLevelInstanceEditorPropertyOverride ; } ; struct FAddActorLevelInstanceFlags { private :)",
    "insertText": "FAddActorLevelInstanceFlags(AActor* InActor, ELevelInstanceFlags InFlagsToAdd)"
  },
  {
    "label": "EnumAddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumAddFlags(InActor->LevelInstanceFlags, InFlagsToAdd)"
  },
  {
    "label": "FRemoveActorLevelInstanceFlags()",
    "kind": "Method",
    "detail": "Function (} class ULevelStreamingLevelInstance ; class ULevelStreamingLevelInstanceEditor ; class ULevelStreamingLevelInstanceEditorPropertyOverride ; } ; struct FRemoveActorLevelInstanceFlags { private :)",
    "insertText": "FRemoveActorLevelInstanceFlags(AActor* InActor, ELevelInstanceFlags InFlagsToRemove)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumRemoveFlags(InActor->LevelInstanceFlags, InFlagsToRemove)"
  },
  {
    "label": "ExecuteTickHelper()",
    "kind": "Method",
    "detail": "Function (} class ULevelStreamingLevelInstance ; class ULevelStreamingLevelInstanceEditor ; class ULevelStreamingLevelInstanceEditorPropertyOverride ; } ; # endif template<ExecuteTickLambda> void)",
    "insertText": "ExecuteTickHelper(UActorComponent* Target, bool bTickInEditor, float DeltaTime, ELevelTick TickType, const ExecuteTickLambda& ExecuteTickFunc)"
  },
  {
    "label": "ComponentScope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounterUObject)",
    "insertText": "ComponentScope(Target)"
  },
  {
    "label": "AdditionalScope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounterUObject)",
    "insertText": "AdditionalScope(Target->AdditionalStatObject())"
  },
  {
    "label": "TimeDilation()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "TimeDilation(MyOwner ? MyOwner->CustomTimeDilation : 1.f)"
  },
  {
    "label": "ExecuteTickFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTickFunc(DeltaTime * TimeDilation)"
  },
  {
    "label": "TInlineComponentArray()",
    "kind": "Method",
    "detail": "Function (} } } } template<class T,uint32 NumElements> TInlineComponentArray<T,NumElements)",
    "insertText": "TInlineComponentArray(const AActor* Actor, bool bIncludeFromChildActors) : Super()"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (Actor ->)",
    "insertText": "GetComponents(*this, bIncludeFromChildActors)"
  },
  {
    "label": "K2_GetActorLocation()",
    "kind": "Method",
    "detail": "Function (} } ; FVector)",
    "insertText": "K2_GetActorLocation()"
  },
  {
    "label": "K2_GetActorRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "K2_GetActorRotation()"
  },
  {
    "label": "K2_GetRootComponent()",
    "kind": "Method",
    "detail": "Function (} USceneComponent*)",
    "insertText": "K2_GetRootComponent()"
  },
  {
    "label": "GetActorForwardVector()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorForwardVector()"
  },
  {
    "label": "GetActorUpVector()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorUpVector()"
  },
  {
    "label": "GetActorRightVector()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetActorRightVector()"
  },
  {
    "label": "GetSimpleCollisionCylinder()",
    "kind": "Method",
    "detail": "Function (float Radius,HalfHeight ;)",
    "insertText": "GetSimpleCollisionCylinder(Radius, HalfHeight)"
  },
  {
    "label": "GetActorEnableCollision()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetActorEnableCollision()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(Mode == NM_DedicatedServer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NetDriverName == NAME_None || NetDriverName == NAME_GameNetDriver)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(InternalGetNetMode() == Mode)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} # endif } # if WITH_EDITOR TFunction<)",
    "insertText": "bool(const AActor*)"
  },
  {
    "label": "DEFINE_ACTORDESC_TYPE()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DEFINE_ACTORDESC_TYPE(AActor, FWorldPartitionActorDesc)"
  },
  {
    "label": "HIDE_ACTOR_TRANSFORM_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "HIDE_ACTOR_TRANSFORM_FUNCTIONS() private: \\ FTransform GetTransform()"
  },
  {
    "label": "GetActorTransform()",
    "kind": "Method",
    "detail": "Function (} \\ FTransform)",
    "insertText": "GetActorTransform()"
  },
  {
    "label": "TeleportTo()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "TeleportTo(const FVector& DestLocation, const FRotator& DestRotation, bool bIsATest, bool bNoCheck)"
  },
  {
    "label": "GetVelocity()",
    "kind": "Method",
    "detail": "Function (} \\ FVector)",
    "insertText": "GetVelocity()"
  },
  {
    "label": "GetHorizontalDistanceTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetHorizontalDistanceTo(AActor* OtherActor)"
  },
  {
    "label": "GetVerticalDistanceTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetVerticalDistanceTo(AActor* OtherActor)"
  },
  {
    "label": "GetDotProductTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetDotProductTo(AActor* OtherActor)"
  },
  {
    "label": "GetHorizontalDotProductTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetHorizontalDotProductTo(AActor* OtherActor)"
  },
  {
    "label": "GetDistanceTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetDistanceTo(AActor* OtherActor)"
  },
  {
    "label": "GetSquaredDistanceTo()",
    "kind": "Method",
    "detail": "Function (} \\ float)",
    "insertText": "GetSquaredDistanceTo(const AActor* OtherActor)"
  },
  {
    "label": "GetActorBounds()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors = false)"
  },
  {
    "label": "SetActorScale3D()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "SetActorScale3D(FVector NewScale3D)"
  },
  {
    "label": "SetActorScale3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorScale3D(NewScale3D)"
  },
  {
    "label": "GetActorScale3D()",
    "kind": "Method",
    "detail": "Function (} \\ FVector)",
    "insertText": "GetActorScale3D()"
  },
  {
    "label": "SetActorRelativeScale3D()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "SetActorRelativeScale3D(FVector NewRelativeScale)"
  },
  {
    "label": "SetActorRelativeScale3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeScale3D(NewRelativeScale)"
  },
  {
    "label": "GetActorRelativeScale3D()",
    "kind": "Method",
    "detail": "Function (} \\ FVector)",
    "insertText": "GetActorRelativeScale3D()"
  },
  {
    "label": "AddActorWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldOffset(DeltaLocation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddActorWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldRotation(DeltaRotation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddActorWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorWorldTransform(DeltaTransform, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddActorLocalOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalOffset(DeltaLocation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddActorLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalRotation(DeltaRotation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddActorLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorLocalTransform(NewTransform, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "SetActorRelativeLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeLocation(NewRelativeLocation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "SetActorRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeRotation(NewRelativeRotation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "SetActorRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorRelativeTransform(NewRelativeTransform, bSweep, OutSweepHitResult, Teleport)"
  }
]