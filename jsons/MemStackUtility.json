[
  {
    "label": "AllocateString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / MemStack . h \" # include \" Misc / StringBuilder . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" namespace UE { namespace MemStack { const TCHAR*)",
    "insertText": "AllocateString(FMemStackBase& Allocator, const TCHAR* String, int32 Length)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (TCHAR* Result = New<)",
    "insertText": "TCHAR(Allocator, Length + 1)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Result, String, Length * sizeof(TCHAR))"
  },
  {
    "label": "AllocateString()",
    "kind": "Method",
    "detail": "Function (Result [ Length ] = 0 ; return Result ; } const TCHAR*)",
    "insertText": "AllocateString(FMemStackBase& Allocator, FStringView String)"
  },
  {
    "label": "AllocateStringView()",
    "kind": "Method",
    "detail": "Function (} FStringView)",
    "insertText": "AllocateStringView(FMemStackBase& Allocator, FStringView String)"
  },
  {
    "label": "AllocateString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "AllocateString(FMemStackBase& Allocator, const FStringBuilderBase& StringBuilder)"
  },
  {
    "label": "AllocateStringf()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgTypes> const TCHAR*)",
    "insertText": "AllocateStringf(FMemStackBase& Allocator, const FormatType& Format, ArgTypes... Args)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String ; String .)",
    "insertText": "Appendf(Format, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "AllocateStringViewf()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . ArgTypes> FStringView)",
    "insertText": "AllocateStringViewf(FMemStackBase& Allocator, const FormatType& Format, ArgTypes... Args)"
  },
  {
    "label": "AllocateArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T> TArrayView<T>)",
    "insertText": "AllocateArrayView(FMemStackBase& Allocator, TArrayView<T> View)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* Data = nullptr ;)",
    "insertText": "if(View.Num() > 0)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "new(Allocator) T[View.Num()"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (Data [ i ] = View [ i ] ; } } return)",
    "insertText": "MakeArrayView(Data, View.Num())"
  }
]