[
  {
    "label": "TSphere3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSphere3"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> struct TSphere3 { public : TVector<T> Center = TVector<T)",
    "insertText": "Zero()"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Radius(T)"
  },
  {
    "label": "TSphere3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSphere3()"
  },
  {
    "label": "TSphere3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSphere3(const TVector<T>& CenterIn, T RadiusIn) : Center(CenterIn), Radius(RadiusIn)"
  },
  {
    "label": "Diameter()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Diameter()"
  },
  {
    "label": "Circumference()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Circumference()"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Area()"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Volume()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TVector<T>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (T DistSqr = UE::)",
    "insertText": "DistanceSquared(Center, Point)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (T CenterDist =)",
    "insertText": "Distance(Center, OtherSphere.Center)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector<T>& Point)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const T PosDistance = TMathUtil<T)",
    "insertText": "Max(SignedDistance(Point), (T)0)"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Area(T Radius)"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Volume(T Radius)"
  }
]