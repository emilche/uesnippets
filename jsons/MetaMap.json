[
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "MetaMap()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_METADATA_METAMAP_HAS_BEEN_INCLUDED # define OPENVDB_METADATA_METAMAP_HAS_BEEN_INCLUDED # include \" Metadata . h \" # include \" Types . h \" # include \" Exceptions . h \" # include<iosfwd> # include<map> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { class MetaMap { public : using Ptr = SharedPtr<MetaMap> ; using ConstPtr = SharedPtr<const MetaMap> ; using MetadataMap = std::map<Name,Metadata::Ptr> ; using MetaIterator = MetadataMap::iterator ; using ConstMetaIterator = MetadataMap::const_iterator ;)",
    "insertText": "MetaMap()"
  },
  {
    "label": "MetaMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MetaMap(const MetaMap& other)"
  },
  {
    "label": "copyMeta()",
    "kind": "Method",
    "detail": "Function (} MetaMap::Ptr)",
    "insertText": "copyMeta()"
  },
  {
    "label": "deepCopyMeta()",
    "kind": "Method",
    "detail": "Function (MetaMap::Ptr)",
    "insertText": "deepCopyMeta()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MetaMap&)",
    "insertText": "operator(const MetaMap&)"
  },
  {
    "label": "readMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readMeta(std::istream&)"
  },
  {
    "label": "writeMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeMeta(std::ostream&)"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertMeta(const Name&, const Metadata& value)"
  },
  {
    "label": "insertMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertMeta(const MetaMap&)"
  },
  {
    "label": "removeMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeMeta(const Name&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Metadata::Ptr)",
    "insertText": "operator(const Name&)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (template<T> T::Ptr)",
    "insertText": "getMetadata(const Name&)"
  },
  {
    "label": "metaValue()",
    "kind": "Method",
    "detail": "Function (template<T> T&)",
    "insertText": "metaValue(const Name&)"
  },
  {
    "label": "beginMeta()",
    "kind": "Method",
    "detail": "Function (MetaIterator)",
    "insertText": "beginMeta()"
  },
  {
    "label": "endMeta()",
    "kind": "Method",
    "detail": "Function (} MetaIterator)",
    "insertText": "endMeta()"
  },
  {
    "label": "clearMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearMetadata()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (mMeta .)",
    "insertText": "clear()"
  },
  {
    "label": "metaCount()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "metaCount()"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "str(const std::string& indent = \"\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const MetaMap& other)"
  },
  {
    "label": "getValidTypedMetadata()",
    "kind": "Method",
    "detail": "Function (} private : template<T> TypedMetadata<T>::Ptr)",
    "insertText": "getValidTypedMetadata(const Name&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MetadataMap mMeta ; } ; std::ostream&)",
    "insertText": "operator(std::ostream&, const MetaMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Metadata::Ptr)",
    "insertText": "operator(const Name& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (MetaIterator iter = mMeta .)",
    "insertText": "find(name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Metadata::ConstPtr)",
    "insertText": "operator(const Name &name)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (} template<T> T::Ptr)",
    "insertText": "getMetadata(const Name &name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(iter->second->typeName() == T::staticTypeName())"
  },
  {
    "label": "getValidTypedMetadata()",
    "kind": "Method",
    "detail": "Function (} return T::ConstPtr { } ; } template<T> TypedMetadata<T>::Ptr)",
    "insertText": "getValidTypedMetadata(const Name &name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TypedMetadata<T>::Ptr m ;)",
    "insertText": "if(iter->second->typeName() == TypedMetadata<T>::staticTypeName())"
  },
  {
    "label": "Metadata()",
    "kind": "Method",
    "detail": "Function (m = StaticPtrCast<TypedMetadata<T>,)",
    "insertText": "Metadata(iter->second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!m) OPENVDB_THROW(TypeError, \"Invalid type for metadata \" << name)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TypedMetadata<T>::Ptr m = getValidTypedMetadata<)",
    "insertText": "T(name)"
  },
  {
    "label": "metaValue()",
    "kind": "Method",
    "detail": "Function (} template<T> const T&)",
    "insertText": "metaValue(const Name &name)"
  }
]