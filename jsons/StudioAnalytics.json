[
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "IAnalyticsProviderET",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProviderET"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "SetProvider()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetProvider(TSharedRef<IAnalyticsProviderET> InAnalytics)"
  },
  {
    "label": "AddDefaultEventAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultEventAttributes(TArray<FAnalyticsEventAttribute>&& Attributes)"
  },
  {
    "label": "AddDefaultEventAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultEventAttribute(const FAnalyticsEventAttribute& Attribute)"
  },
  {
    "label": "ApplyDefaultEventAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDefaultEventAttributes()"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (IAnalyticsProviderET&)",
    "insertText": "GetProvider()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "GetAnalyticSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAnalyticSeconds()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEvent(const FString& EventName)"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEvent(const FString& EventName, const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "RunTimer_Concurrent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RunTimer_Concurrent()"
  }
]