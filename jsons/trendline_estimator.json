[
  {
    "label": "TrendlineEstimatorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrendlineEstimatorSettings"
  },
  {
    "label": "TrendlineEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrendlineEstimator"
  },
  {
    "label": "PacketTiming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketTiming"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "TrendlineEstimatorSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_TRENDLINE_ESTIMATOR_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_TRENDLINE_ESTIMATOR_H_ # include<stddef . h> # include<stdint . h> # include<deque> # include<memory> # include<utility> # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" # include \" modules / congestion_controller / goog_cc / delay_increase_detector_interface . h \" # include \" rtc_base / experiments / struct_parameters_parser . h \" namespace webrtc { struct TrendlineEstimatorSettings { char kKey [ ] = \" WebRTC - Bwe - TrendlineEstimatorSettings \" ; unsigned kDefaultTrendlineWindowSize = 2 0 ;)",
    "insertText": "TrendlineEstimatorSettings()"
  },
  {
    "label": "TrendlineEstimatorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrendlineEstimatorSettings(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (bool enable_sort = false ; bool enable_cap = false ; unsigned beginning_packets = 7 ; unsigned end_packets = 7 ; double cap_uncertainty = 0 . 0 ; unsigned window_size = kDefaultTrendlineWindowSize ; std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "TrendlineEstimator()",
    "kind": "Method",
    "detail": "Function (} ; class TrendlineEstimator : public DelayIncreaseDetectorInterface { public :)",
    "insertText": "TrendlineEstimator(const FieldTrialsView* key_value_config, NetworkStatePredictor* network_state_predictor)"
  },
  {
    "label": "TrendlineEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TrendlineEstimator()"
  },
  {
    "label": "TrendlineEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrendlineEstimator(const TrendlineEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TrendlineEstimator&)",
    "insertText": "operator(const TrendlineEstimator&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(double recv_delta_ms, double send_delta_ms, int64_t send_time_ms, int64_t arrival_time_ms, size_t packet_size, bool calculated_deltas)"
  },
  {
    "label": "UpdateTrendline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrendline(double recv_delta_ms, double send_delta_ms, int64_t send_time_ms, int64_t arrival_time_ms, size_t packet_size)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (BandwidthUsage)",
    "insertText": "State()"
  },
  {
    "label": "PacketTiming()",
    "kind": "Method",
    "detail": "Function (struct PacketTiming {)",
    "insertText": "PacketTiming(double arrival_time_ms, double smoothed_delay_ms, double raw_delay_ms) : arrival_time_ms(arrival_time_ms), smoothed_delay_ms(smoothed_delay_ms), raw_delay_ms(raw_delay_ms)"
  },
  {
    "label": "Detect()",
    "kind": "Method",
    "detail": "Function (} double arrival_time_ms ; double smoothed_delay_ms ; double raw_delay_ms ; } ; private : class GoogCcStatePrinter ; void)",
    "insertText": "Detect(double trend, double ts_delta, int64_t now_ms)"
  },
  {
    "label": "UpdateThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreshold(double modified_offset, int64_t now_ms)"
  }
]