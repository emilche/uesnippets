[
  {
    "label": "RouteCmp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RouteCmp"
  },
  {
    "label": "AddrCmp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddrCmp"
  },
  {
    "label": "NATServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NATServer"
  },
  {
    "label": "TransEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransEntry"
  },
  {
    "label": "RouteCmp()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NAT_SERVER_H_ # define RTC_BASE_NAT_SERVER_H_ # include<map> # include<set> # include \" rtc_base / async_udp_socket . h \" # include \" rtc_base / nat_types . h \" # include \" rtc_base / proxy_server . h \" # include \" rtc_base / socket_address_pair . h \" # include \" rtc_base / socket_factory . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread . h \" namespace rtc { struct RouteCmp {)",
    "insertText": "RouteCmp(NAT* nat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "operator()(const SocketAddressPair& r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator()(const SocketAddressPair& r1, const SocketAddressPair& r2)"
  },
  {
    "label": "AddrCmp()",
    "kind": "Method",
    "detail": "Function (bool symmetric ; } ; struct AddrCmp {)",
    "insertText": "AddrCmp(NAT* nat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "operator()(const SocketAddress& r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator()(const SocketAddress& r1, const SocketAddress& r2)"
  },
  {
    "label": "NATServer()",
    "kind": "Method",
    "detail": "Function (bool use_ip ; bool use_port ; } ; const int NAT_SERVER_UDP_PORT = 4 2 3 7 ; const int NAT_SERVER_TCP_PORT = 4 2 3 8 ; class NATServer : public sigslot::has_slots<> { public :)",
    "insertText": "NATServer(NATType type, SocketFactory* internal, const SocketAddress& internal_udp_addr, const SocketAddress& internal_tcp_addr, SocketFactory* external, const SocketAddress& external_ip)"
  },
  {
    "label": "NATServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NATServer()"
  },
  {
    "label": "NATServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NATServer(const NATServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NATServer&)",
    "insertText": "operator(const NATServer&)"
  },
  {
    "label": "internal_udp_address()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "internal_udp_address()"
  },
  {
    "label": "internal_tcp_address()",
    "kind": "Method",
    "detail": "Function (} SocketAddress)",
    "insertText": "internal_tcp_address()"
  },
  {
    "label": "OnInternalUDPPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInternalUDPPacket(AsyncPacketSocket* socket, const char* buf, size_t size, const SocketAddress& addr, const int64_t& packet_time_us)"
  },
  {
    "label": "OnExternalUDPPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalUDPPacket(AsyncPacketSocket* socket, const char* buf, size_t size, const SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "TransEntry()",
    "kind": "Method",
    "detail": "Function (private : typedef std::set<SocketAddress,AddrCmp> AddressSet ; struct TransEntry {)",
    "insertText": "TransEntry(const SocketAddressPair& r, AsyncUDPSocket* s, NAT* nat)"
  },
  {
    "label": "TransEntry()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TransEntry()"
  },
  {
    "label": "AllowlistInsert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowlistInsert(const SocketAddress& addr)"
  },
  {
    "label": "AllowlistContains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowlistContains(const SocketAddress& ext_addr)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (SocketAddressPair route ; AsyncUDPSocket* socket ; AddressSet* allowlist ; webrtc::Mutex mutex_ ; } ; typedef std::map<SocketAddressPair,TransEntry*,RouteCmp> InternalMap ; typedef std::map<SocketAddress,TransEntry*> ExternalMap ; void)",
    "insertText": "Translate(const SocketAddressPair& route)"
  },
  {
    "label": "ShouldFilterOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterOut(TransEntry* entry, const SocketAddress& ext_addr)"
  }
]