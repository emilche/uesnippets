[
  {
    "label": "FMessageEndpointBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageEndpointBuilder"
  },
  {
    "label": "FMessageEndpointBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" IMessageBus . h \" # include \" IMessageHandler . h \" # include \" IMessagingModule . h \" # include \" MessageEndpoint . h \" # include \" MessageHandlers . h \" struct FMessageEndpointBuilder { public :)",
    "insertText": "FMessageEndpointBuilder(const FName& InName) : BusPtr(IMessagingModule::Get().GetDefaultBus()) , Disabled(false) , InboxEnabled(false) , Name(InName) , RecipientThread(FTaskGraphInterface::Get().GetCurrentThreadIfKnown())"
  },
  {
    "label": "FMessageEndpointBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessageEndpointBuilder(const FName& InName, const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InBus) : BusPtr(InBus) , Disabled(false) , InboxEnabled(false) , Name(InName) , RecipientThread(FTaskGraphInterface::Get().GetCurrentThreadIfKnown())"
  },
  {
    "label": "Handling()",
    "kind": "Method",
    "detail": "Function (} public : template<MessageType,HandlerType> FMessageEndpointBuilder&)",
    "insertText": "Handling(HandlerType* Handler, typename TRawMessageHandler<MessageType, HandlerType>::FuncType HandlerFunc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(MakeShareable(new TRawMessageHandler<MessageType, HandlerType>(Handler, MoveTemp(HandlerFunc))))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(MakeShareable(new TFunctionMessageHandler<MessageType>(MoveTemp(HandlerFunc))))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OnNotification =)",
    "insertText": "MoveTemp(InHandler)"
  },
  {
    "label": "ReceivingOnThread()",
    "kind": "Method",
    "detail": "Function (RecipientThread = ENamedThreads::AnyThread ; return* this ; } FMessageEndpointBuilder&)",
    "insertText": "ReceivingOnThread(ENamedThreads::Type NamedThread)"
  },
  {
    "label": "ThatIsDisabled()",
    "kind": "Method",
    "detail": "Function (RecipientThread = NamedThread ; return* this ; } FMessageEndpointBuilder&)",
    "insertText": "ThatIsDisabled()"
  },
  {
    "label": "WithCatchall()",
    "kind": "Method",
    "detail": "Function (Disabled = true ; return* this ; } template<HandlerType> FMessageEndpointBuilder&)",
    "insertText": "WithCatchall(HandlerType* Handler, typename TRawMessageCatchall<HandlerType>::FuncType HandlerFunc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(MakeShareable(new TRawMessageCatchall<HandlerType>(Handler, MoveTemp(HandlerFunc))))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(MakeShareable(new FFunctionMessageCatchall(MoveTemp(HandlerFunc))))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(Handler)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (InboxEnabled = true ; return* this ; } public : TSharedPtr<FMessageEndpoint,ESPMode::ThreadSafe>)",
    "insertText": "Build()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMessageEndpoint,ESPMode::ThreadSafe> Endpoint ; TSharedPtr<IMessageBus,ESPMode::ThreadSafe> Bus = BusPtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (Endpoint = MakeShared<FMessageEndpoint,)",
    "insertText": "ThreadSafe(Name, Bus.ToSharedRef(), Handlers, OnNotification)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "Register(Endpoint->GetAddress(), Endpoint.ToSharedRef())"
  },
  {
    "label": "AddNotificationListener()",
    "kind": "Method",
    "detail": "Function (Bus ->)",
    "insertText": "AddNotificationListener(Endpoint.ToSharedRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Disabled)"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (Endpoint ->)",
    "insertText": "Disable()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InboxEnabled)"
  },
  {
    "label": "EnableInbox()",
    "kind": "Method",
    "detail": "Function (Endpoint ->)",
    "insertText": "EnableInbox()"
  },
  {
    "label": "SetRecipientThread()",
    "kind": "Method",
    "detail": "Function (Endpoint ->)",
    "insertText": "SetRecipientThread(ENamedThreads::AnyThread)"
  },
  {
    "label": "SetRecipientThread()",
    "kind": "Method",
    "detail": "Function (} else { Endpoint ->)",
    "insertText": "SetRecipientThread(RecipientThread)"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (} } return Endpoint ; } operator TSharedPtr<FMessageEndpoint,)",
    "insertText": "ThreadSafe()"
  }
]