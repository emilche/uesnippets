[
  {
    "label": "UNumberFormatStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatStyle"
  },
  {
    "label": "UNumberFormatRoundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatRoundingMode"
  },
  {
    "label": "UNumberFormatPadPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatPadPosition"
  },
  {
    "label": "UNumberCompactStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberCompactStyle"
  },
  {
    "label": "UCurrencySpacing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrencySpacing"
  },
  {
    "label": "UNumberFormatFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatFields"
  },
  {
    "label": "UNumberFormatAttributeValue",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatAttributeValue"
  },
  {
    "label": "UNumberFormatAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatAttribute"
  },
  {
    "label": "UNumberFormatTextAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatTextAttribute"
  },
  {
    "label": "UNumberFormatSymbol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberFormatSymbol"
  },
  {
    "label": "unum_open()",
    "kind": "Method",
    "detail": "Function (# ifndef _UNUM # define _UNUM # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / localpointer . h \" # include \" unicode / uloc . h \" # include \" unicode / ucurr . h \" # include \" unicode / umisc . h \" # include \" unicode / parseerr . h \" # include \" unicode / uformattable . h \" # include \" unicode / udisplaycontext . h \" # include \" unicode / ufieldpositer . h \" typedef void* UNumberFormat ; typedef enum UNumberFormatStyle { UNUM_PATTERN_DECIMAL = 0,UNUM_DECIMAL = 1,UNUM_CURRENCY = 2,UNUM_PERCENT = 3,UNUM_SCIENTIFIC = 4,UNUM_SPELLOUT = 5,UNUM_ORDINAL = 6,UNUM_DURATION = 7,UNUM_NUMBERING_SYSTEM = 8,UNUM_PATTERN_RULEBASED = 9,UNUM_CURRENCY_ISO = 1 0,UNUM_CURRENCY_PLURAL = 1 1,UNUM_CURRENCY_ACCOUNTING = 1 2,UNUM_CASH_CURRENCY = 1 3,UNUM_DECIMAL_COMPACT_SHORT = 1 4,UNUM_DECIMAL_COMPACT_LONG = 1 5,UNUM_CURRENCY_STANDARD = 1 6,# ifndef UNUM_FORMAT_STYLE_COUNT = 1 7,# endif UNUM_DEFAULT = UNUM_DECIMAL,UNUM_IGNORE = UNUM_PATTERN_DECIMAL } UNumberFormatStyle ; typedef enum UNumberFormatRoundingMode { UNUM_ROUND_CEILING,UNUM_ROUND_FLOOR,UNUM_ROUND_DOWN,UNUM_ROUND_UP,UNUM_ROUND_HALFEVEN,# ifndef UNUM_FOUND_HALFEVEN = UNUM_ROUND_HALFEVEN,# endif UNUM_ROUND_HALFDOWN = UNUM_ROUND_HALFEVEN + 1,UNUM_ROUND_HALFUP,UNUM_ROUND_UNNECESSARY } UNumberFormatRoundingMode ; typedef enum UNumberFormatPadPosition { UNUM_PAD_BEFORE_PREFIX,UNUM_PAD_AFTER_PREFIX,UNUM_PAD_BEFORE_SUFFIX,UNUM_PAD_AFTER_SUFFIX } UNumberFormatPadPosition ; typedef enum UNumberCompactStyle { UNUM_SHORT,UNUM_LONG } UNumberCompactStyle ; enum UCurrencySpacing { UNUM_CURRENCY_MATCH,UNUM_CURRENCY_SURROUNDING_MATCH,UNUM_CURRENCY_INSERT,UNUM_CURRENCY_SPACING_COUNT } ; typedef enum UCurrencySpacing UCurrencySpacing ; typedef enum UNumberFormatFields { UNUM_INTEGER_FIELD,UNUM_FRACTION_FIELD,UNUM_DECIMAL_SEPARATOR_FIELD,UNUM_EXPONENT_SYMBOL_FIELD,UNUM_EXPONENT_SIGN_FIELD,UNUM_EXPONENT_FIELD,UNUM_GROUPING_SEPARATOR_FIELD,UNUM_CURRENCY_FIELD,UNUM_PERCENT_FIELD,UNUM_PERMILL_FIELD,UNUM_SIGN_FIELD,# ifndef UNUM_MEASURE_UNIT_FIELD,UNUM_COMPACT_FIELD,# endif # ifndef UNUM_FIELD_COUNT = UNUM_SIGN_FIELD + 3 # endif } UNumberFormatFields ; U_STABLE UNumberFormat* U_EXPORT2)",
    "insertText": "unum_open(UNumberFormatStyle style, const UChar* pattern, int32_t patternLength, const char* locale, UParseError* parseErr, UErrorCode* status)"
  },
  {
    "label": "unum_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_close(UNumberFormat* fmt)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUNumberFormatPointer, UNumberFormat, unum_close)"
  },
  {
    "label": "unum_clone()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE UNumberFormat* U_EXPORT2)",
    "insertText": "unum_clone(const UNumberFormat *fmt, UErrorCode *status)"
  },
  {
    "label": "unum_format()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_format(const UNumberFormat* fmt, int32_t number, UChar* result, int32_t resultLength, UFieldPosition *pos, UErrorCode* status)"
  },
  {
    "label": "unum_formatInt64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatInt64(const UNumberFormat *fmt, int64_t number, UChar* result, int32_t resultLength, UFieldPosition *pos, UErrorCode* status)"
  },
  {
    "label": "unum_formatDouble()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatDouble(const UNumberFormat* fmt, double number, UChar* result, int32_t resultLength, UFieldPosition *pos, UErrorCode* status)"
  },
  {
    "label": "unum_formatDoubleForFields()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatDoubleForFields(const UNumberFormat* format, double number, UChar* result, int32_t resultLength, UFieldPositionIterator* fpositer, UErrorCode* status)"
  },
  {
    "label": "unum_formatDecimal()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatDecimal(const UNumberFormat* fmt, const char * number, int32_t length, UChar* result, int32_t resultLength, UFieldPosition *pos, UErrorCode* status)"
  },
  {
    "label": "unum_formatDoubleCurrency()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatDoubleCurrency(const UNumberFormat* fmt, double number, UChar* currency, UChar* result, int32_t resultLength, UFieldPosition* pos, UErrorCode* status)"
  },
  {
    "label": "unum_formatUFormattable()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_formatUFormattable(const UNumberFormat* fmt, const UFormattable *number, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)"
  },
  {
    "label": "unum_parse()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_parse(const UNumberFormat* fmt, const UChar* text, int32_t textLength, int32_t *parsePos , UErrorCode *status)"
  },
  {
    "label": "unum_parseInt64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "unum_parseInt64(const UNumberFormat* fmt, const UChar* text, int32_t textLength, int32_t *parsePos , UErrorCode *status)"
  },
  {
    "label": "unum_parseDouble()",
    "kind": "Method",
    "detail": "Function (U_STABLE double U_EXPORT2)",
    "insertText": "unum_parseDouble(const UNumberFormat* fmt, const UChar* text, int32_t textLength, int32_t *parsePos , UErrorCode *status)"
  },
  {
    "label": "unum_parseDecimal()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_parseDecimal(const UNumberFormat* fmt, const UChar* text, int32_t textLength, int32_t *parsePos , char *outBuf, int32_t outBufLength, UErrorCode *status)"
  },
  {
    "label": "unum_parseDoubleCurrency()",
    "kind": "Method",
    "detail": "Function (U_STABLE double U_EXPORT2)",
    "insertText": "unum_parseDoubleCurrency(const UNumberFormat* fmt, const UChar* text, int32_t textLength, int32_t* parsePos, UChar* currency, UErrorCode* status)"
  },
  {
    "label": "unum_parseToUFormattable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UFormattable* U_EXPORT2)",
    "insertText": "unum_parseToUFormattable(const UNumberFormat* fmt, UFormattable *result, const UChar* text, int32_t textLength, int32_t* parsePos, UErrorCode* status)"
  },
  {
    "label": "unum_applyPattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_applyPattern(UNumberFormat *format, UBool localized, const UChar *pattern, int32_t patternLength, UParseError *parseError, UErrorCode *status)"
  },
  {
    "label": "unum_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "unum_getAvailable(int32_t localeIndex)"
  },
  {
    "label": "unum_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_countAvailable(void)"
  },
  {
    "label": "unum_getAttribute()",
    "kind": "Method",
    "detail": "Function (# if UCONFIG_HAVE_PARSEALLINPUT typedef enum UNumberFormatAttributeValue { # ifndef UNUM_NO = 0,UNUM_YES = 1,UNUM_MAYBE = 2 # else UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN # endif } UNumberFormatAttributeValue ; # endif typedef enum UNumberFormatAttribute { UNUM_PARSE_INT_ONLY,UNUM_GROUPING_USED,UNUM_DECIMAL_ALWAYS_SHOWN,UNUM_MAX_INTEGER_DIGITS,UNUM_MIN_INTEGER_DIGITS,UNUM_INTEGER_DIGITS,UNUM_MAX_FRACTION_DIGITS,UNUM_MIN_FRACTION_DIGITS,UNUM_FRACTION_DIGITS,UNUM_MULTIPLIER,UNUM_GROUPING_SIZE,UNUM_ROUNDING_MODE,UNUM_ROUNDING_INCREMENT,UNUM_FORMAT_WIDTH,UNUM_PADDING_POSITION,UNUM_SECONDARY_GROUPING_SIZE,UNUM_SIGNIFICANT_DIGITS_USED,UNUM_MIN_SIGNIFICANT_DIGITS,UNUM_MAX_SIGNIFICANT_DIGITS,UNUM_LENIENT_PARSE,# if UCONFIG_HAVE_PARSEALLINPUT UNUM_PARSE_ALL_INPUT = 2 0,# endif UNUM_SCALE = 2 1,# ifndef UNUM_MINIMUM_GROUPING_DIGITS = 2 2,# endif UNUM_CURRENCY_USAGE = 2 3,# ifndef UNUM_MAX_NONBOOLEAN_ATTRIBUTE = 0 x0FFF,# endif UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 0 x1000,UNUM_PARSE_NO_EXPONENT = 0 x1001,UNUM_PARSE_DECIMAL_MARK_REQUIRED = 0 x1002,# ifndef UNUM_PARSE_CASE_SENSITIVE = 0 x1003,UNUM_SIGN_ALWAYS_SHOWN = 0 x1004,# endif # ifndef UNUM_LIMIT_BOOLEAN_ATTRIBUTE = 0 x1005,# endif } UNumberFormatAttribute ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_getAttribute(const UNumberFormat* fmt, UNumberFormatAttribute attr)"
  },
  {
    "label": "unum_setAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_setAttribute(UNumberFormat* fmt, UNumberFormatAttribute attr, int32_t newValue)"
  },
  {
    "label": "unum_getDoubleAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE double U_EXPORT2)",
    "insertText": "unum_getDoubleAttribute(const UNumberFormat* fmt, UNumberFormatAttribute attr)"
  },
  {
    "label": "unum_setDoubleAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_setDoubleAttribute(UNumberFormat* fmt, UNumberFormatAttribute attr, double newValue)"
  },
  {
    "label": "unum_getTextAttribute()",
    "kind": "Method",
    "detail": "Function (typedef enum UNumberFormatTextAttribute { UNUM_POSITIVE_PREFIX,UNUM_POSITIVE_SUFFIX,UNUM_NEGATIVE_PREFIX,UNUM_NEGATIVE_SUFFIX,UNUM_PADDING_CHARACTER,UNUM_CURRENCY_CODE,UNUM_DEFAULT_RULESET,UNUM_PUBLIC_RULESETS } UNumberFormatTextAttribute ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_getTextAttribute(const UNumberFormat* fmt, UNumberFormatTextAttribute tag, UChar* result, int32_t resultLength, UErrorCode* status)"
  },
  {
    "label": "unum_setTextAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_setTextAttribute(UNumberFormat* fmt, UNumberFormatTextAttribute tag, const UChar* newValue, int32_t newValueLength, UErrorCode *status)"
  },
  {
    "label": "unum_toPattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_toPattern(const UNumberFormat* fmt, UBool isPatternLocalized, UChar* result, int32_t resultLength, UErrorCode* status)"
  },
  {
    "label": "unum_getSymbol()",
    "kind": "Method",
    "detail": "Function (typedef enum UNumberFormatSymbol { UNUM_DECIMAL_SEPARATOR_SYMBOL = 0,UNUM_GROUPING_SEPARATOR_SYMBOL = 1,UNUM_PATTERN_SEPARATOR_SYMBOL = 2,UNUM_PERCENT_SYMBOL = 3,UNUM_ZERO_DIGIT_SYMBOL = 4,UNUM_DIGIT_SYMBOL = 5,UNUM_MINUS_SIGN_SYMBOL = 6,UNUM_PLUS_SIGN_SYMBOL = 7,UNUM_CURRENCY_SYMBOL = 8,UNUM_INTL_CURRENCY_SYMBOL = 9,UNUM_MONETARY_SEPARATOR_SYMBOL = 1 0,UNUM_EXPONENTIAL_SYMBOL = 1 1,UNUM_PERMILL_SYMBOL = 1 2,UNUM_PAD_ESCAPE_SYMBOL = 1 3,UNUM_INFINITY_SYMBOL = 1 4,UNUM_NAN_SYMBOL = 1 5,UNUM_SIGNIFICANT_DIGIT_SYMBOL = 1 6,UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 1 7,UNUM_ONE_DIGIT_SYMBOL = 1 8,UNUM_TWO_DIGIT_SYMBOL = 1 9,UNUM_THREE_DIGIT_SYMBOL = 2 0,UNUM_FOUR_DIGIT_SYMBOL = 2 1,UNUM_FIVE_DIGIT_SYMBOL = 2 2,UNUM_SIX_DIGIT_SYMBOL = 2 3,UNUM_SEVEN_DIGIT_SYMBOL = 2 4,UNUM_EIGHT_DIGIT_SYMBOL = 2 5,UNUM_NINE_DIGIT_SYMBOL = 2 6,UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 2 7,# ifndef UNUM_FORMAT_SYMBOL_COUNT = 2 8 # endif } UNumberFormatSymbol ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "unum_getSymbol(const UNumberFormat *fmt, UNumberFormatSymbol symbol, UChar *buffer, int32_t size, UErrorCode *status)"
  },
  {
    "label": "unum_setSymbol()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_setSymbol(UNumberFormat *fmt, UNumberFormatSymbol symbol, const UChar *value, int32_t length, UErrorCode *status)"
  },
  {
    "label": "unum_getLocaleByType()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "unum_getLocaleByType(const UNumberFormat *fmt, ULocDataLocaleType type, UErrorCode* status)"
  },
  {
    "label": "unum_setContext()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unum_setContext(UNumberFormat* fmt, UDisplayContext value, UErrorCode* status)"
  },
  {
    "label": "unum_getContext()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDisplayContext U_EXPORT2)",
    "insertText": "unum_getContext(const UNumberFormat *fmt, UDisplayContextType type, UErrorCode* status)"
  }
]