[
  {
    "label": "Triple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triple"
  },
  {
    "label": "ArchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ArchType"
  },
  {
    "label": "SubArchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SubArchType"
  },
  {
    "label": "VendorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VendorType"
  },
  {
    "label": "OSType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OSType"
  },
  {
    "label": "EnvironmentType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EnvironmentType"
  },
  {
    "label": "ObjectFormatType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectFormatType"
  },
  {
    "label": "Triple()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_TRIPLE_H # define LLVM_ADT_TRIPLE_H # include \" llvm / ADT / Twine . h \" # undef NetBSD # undef mips # undef sparc namespace llvm { class Triple { public : enum ArchType { UnknownArch,arm,armeb,aarch64,aarch64_be,bpfel,bpfeb,hexagon,mips,mipsel,mips64,mips64el,msp430,ppc,ppc64,ppc64le,r600,amdgcn,sparc,sparcv9,sparcel,systemz,tce,thumb,thumbeb,x86,x86_64,xcore,nvptx,nvptx64,le32,le64,amdil,amdil64,hsail,hsail64,spir,spir64,dxil,dxil64,kalimba,shave,wasm32,wasm64,LastArchType = wasm64 } ; enum SubArchType { NoSubArch,ARMSubArch_v8_1a,ARMSubArch_v8,ARMSubArch_v7,ARMSubArch_v7em,ARMSubArch_v7m,ARMSubArch_v7s,ARMSubArch_v6,ARMSubArch_v6m,ARMSubArch_v6k,ARMSubArch_v6t2,ARMSubArch_v5,ARMSubArch_v5te,ARMSubArch_v4t,KalimbaSubArch_v3,KalimbaSubArch_v4,KalimbaSubArch_v5 } ; enum VendorType { UnknownVendor,Apple,PC,SCEI,BGP,BGQ,Freescale,IBM,ImaginationTechnologies,MipsTechnologies,Microsoft,NVIDIA,CSR,LastVendorType = CSR } ; enum OSType { UnknownOS,CloudABI,Darwin,DragonFly,FreeBSD,IOS,KFreeBSD,Linux,Lv2,MacOSX,NetBSD,OpenBSD,Solaris,Win32,Haiku,Minix,RTEMS,NaCl,CNK,Bitrig,AIX,CUDA,NVCL,AMDHSA,DirectX,PS4,LastOSType = PS4 } ; enum EnvironmentType { UnknownEnvironment,GNU,GNUEABI,GNUEABIHF,GNUX32,CODE16,EABI,EABIHF,Android,MSVC,Itanium,Cygnus,LastEnvironmentType = Cygnus } ; enum ObjectFormatType { UnknownObjectFormat,COFF,ELF,MachO,} ; private : std::string Data ; ArchType Arch ; SubArchType SubArch ; VendorType Vendor ; OSType OS ; EnvironmentType Environment ; ObjectFormatType ObjectFormat ; public :)",
    "insertText": "Triple() : Data(), Arch(), Vendor(), OS(), Environment(), ObjectFormat()"
  },
  {
    "label": "Triple()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Triple(const Twine &Str)"
  },
  {
    "label": "Triple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr)"
  },
  {
    "label": "Triple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr, const Twine &EnvironmentStr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Triple &Other)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "normalize()"
  },
  {
    "label": "getArch()",
    "kind": "Method",
    "detail": "Function (} ArchType)",
    "insertText": "getArch()"
  },
  {
    "label": "getEnvironment()",
    "kind": "Method",
    "detail": "Function (} EnvironmentType)",
    "insertText": "getEnvironment()"
  },
  {
    "label": "getObjectFormat()",
    "kind": "Method",
    "detail": "Function (ObjectFormatType)",
    "insertText": "getObjectFormat()"
  },
  {
    "label": "getOSMajorVersion()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOSMajorVersion()"
  },
  {
    "label": "getOSVersion()",
    "kind": "Method",
    "detail": "Function (unsigned Maj,Min,Micro ;)",
    "insertText": "getOSVersion(Maj, Min, Micro)"
  },
  {
    "label": "getiOSVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getiOSVersion(unsigned &Major, unsigned &Minor, unsigned &Micro)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "str()"
  },
  {
    "label": "getVendorName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getVendorName()"
  },
  {
    "label": "getOSName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getOSName()"
  },
  {
    "label": "getEnvironmentName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getEnvironmentName()"
  },
  {
    "label": "getOSAndEnvironmentName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getOSAndEnvironmentName()"
  },
  {
    "label": "isArch64Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isArch64Bit()"
  },
  {
    "label": "isArch32Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isArch32Bit()"
  },
  {
    "label": "isArch16Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isArch16Bit()"
  },
  {
    "label": "isOSVersionLT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOSVersionLT(unsigned Major, unsigned Minor = 0, unsigned Micro = 0)"
  },
  {
    "label": "getOSVersion()",
    "kind": "Method",
    "detail": "Function (unsigned LHS [ 3 ] ;)",
    "insertText": "getOSVersion(LHS[0], LHS[1], LHS[2])"
  },
  {
    "label": "getOSVersion()",
    "kind": "Method",
    "detail": "Function (unsigned RHS [ 3 ] ; Other .)",
    "insertText": "getOSVersion(RHS[0], RHS[1], RHS[2])"
  },
  {
    "label": "isMacOSXVersionLT()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "isMacOSXVersionLT(unsigned Major, unsigned Minor = 0, unsigned Micro = 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMacOSX() && \"Not an OS X triple!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Major == 10 && \"Unexpected major version\")"
  },
  {
    "label": "isMacOSX()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMacOSX()"
  },
  {
    "label": "isiOS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isiOS()"
  },
  {
    "label": "isOSDarwin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSDarwin()"
  },
  {
    "label": "isOSNetBSD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSNetBSD()"
  },
  {
    "label": "isOSOpenBSD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSOpenBSD()"
  },
  {
    "label": "isOSFreeBSD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSFreeBSD()"
  },
  {
    "label": "isOSDragonFly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSDragonFly()"
  },
  {
    "label": "isOSSolaris()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSSolaris()"
  },
  {
    "label": "isOSBitrig()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSBitrig()"
  },
  {
    "label": "isWindowsMSVCEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWindowsMSVCEnvironment()"
  },
  {
    "label": "isKnownWindowsMSVCEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isKnownWindowsMSVCEnvironment()"
  },
  {
    "label": "isWindowsItaniumEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWindowsItaniumEnvironment()"
  },
  {
    "label": "isWindowsCygwinEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWindowsCygwinEnvironment()"
  },
  {
    "label": "isWindowsGNUEnvironment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWindowsGNUEnvironment()"
  },
  {
    "label": "isOSCygMing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSCygMing()"
  },
  {
    "label": "isOSMSVCRT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSMSVCRT()"
  },
  {
    "label": "isOSWindows()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSWindows()"
  },
  {
    "label": "isOSNaCl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSNaCl()"
  },
  {
    "label": "isOSLinux()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSLinux()"
  },
  {
    "label": "isOSBinFormatELF()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSBinFormatELF()"
  },
  {
    "label": "isOSBinFormatCOFF()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSBinFormatCOFF()"
  },
  {
    "label": "isOSBinFormatMachO()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOSBinFormatMachO()"
  },
  {
    "label": "isPS4CPU()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPS4CPU()"
  },
  {
    "label": "isPS4()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPS4()"
  },
  {
    "label": "isDXIL()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDXIL()"
  },
  {
    "label": "setArch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setArch(ArchType Kind)"
  },
  {
    "label": "setVendor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVendor(VendorType Kind)"
  },
  {
    "label": "setOS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOS(OSType Kind)"
  },
  {
    "label": "setEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEnvironment(EnvironmentType Kind)"
  },
  {
    "label": "setObjectFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObjectFormat(ObjectFormatType Kind)"
  },
  {
    "label": "setTriple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTriple(const Twine &Str)"
  },
  {
    "label": "setArchName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArchName(StringRef Str)"
  },
  {
    "label": "setVendorName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVendorName(StringRef Str)"
  },
  {
    "label": "setOSName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOSName(StringRef Str)"
  },
  {
    "label": "setEnvironmentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEnvironmentName(StringRef Str)"
  },
  {
    "label": "setOSAndEnvironmentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOSAndEnvironmentName(StringRef Str)"
  },
  {
    "label": "get32BitArchVariant()",
    "kind": "Method",
    "detail": "Function (llvm::Triple)",
    "insertText": "get32BitArchVariant()"
  },
  {
    "label": "get64BitArchVariant()",
    "kind": "Method",
    "detail": "Function (llvm::Triple)",
    "insertText": "get64BitArchVariant()"
  },
  {
    "label": "getBigEndianArchVariant()",
    "kind": "Method",
    "detail": "Function (llvm::Triple)",
    "insertText": "getBigEndianArchVariant()"
  },
  {
    "label": "getLittleEndianArchVariant()",
    "kind": "Method",
    "detail": "Function (llvm::Triple)",
    "insertText": "getLittleEndianArchVariant()"
  },
  {
    "label": "getARMCPUForArch()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getARMCPUForArch(StringRef Arch = StringRef())"
  },
  {
    "label": "getArchTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getArchTypeName(ArchType Kind)"
  },
  {
    "label": "getArchTypePrefix()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getArchTypePrefix(ArchType Kind)"
  },
  {
    "label": "getVendorTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getVendorTypeName(VendorType Kind)"
  },
  {
    "label": "getOSTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getOSTypeName(OSType Kind)"
  },
  {
    "label": "getEnvironmentTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getEnvironmentTypeName(EnvironmentType Kind)"
  },
  {
    "label": "getArchTypeForLLVMName()",
    "kind": "Method",
    "detail": "Function (ArchType)",
    "insertText": "getArchTypeForLLVMName(StringRef Str)"
  }
]