[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "isolates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isolates"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Triple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triple"
  },
  {
    "label": "ArchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ArchType"
  },
  {
    "label": "SubArchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SubArchType"
  },
  {
    "label": "VendorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VendorType"
  },
  {
    "label": "OSType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OSType"
  },
  {
    "label": "EnvironmentType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EnvironmentType"
  },
  {
    "label": "ObjectFormatType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectFormatType"
  },
  {
    "label": "understands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "understands"
  },
  {
    "label": "Triple()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Triple(const Twine &Str)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "normalize(StringRef Str)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "normalize(Data)"
  },
  {
    "label": "isOSVersionLT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isOSVersionLT(RHS[0], RHS[1], RHS[2])"
  },
  {
    "label": "isOSVersionLT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isOSVersionLT(Major, Minor, Micro)"
  },
  {
    "label": "isOSVersionLT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isOSVersionLT(Minor + 4, Micro, 0)"
  },
  {
    "label": "setArch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArch(ArchType Kind)"
  },
  {
    "label": "setVendor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVendor(VendorType Kind)"
  },
  {
    "label": "setOS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOS(OSType Kind)"
  },
  {
    "label": "setEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEnvironment(EnvironmentType Kind)"
  },
  {
    "label": "setObjectFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObjectFormat(ObjectFormatType Kind)"
  },
  {
    "label": "setTriple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTriple(const Twine &Str)"
  },
  {
    "label": "setArchName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArchName(StringRef Str)"
  },
  {
    "label": "setVendorName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVendorName(StringRef Str)"
  },
  {
    "label": "setOSName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOSName(StringRef Str)"
  },
  {
    "label": "setEnvironmentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEnvironmentName(StringRef Str)"
  },
  {
    "label": "setOSAndEnvironmentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOSAndEnvironmentName(StringRef Str)"
  },
  {
    "label": "getArchTypeForLLVMName()",
    "kind": "Method",
    "detail": "Function (ArchType)",
    "insertText": "getArchTypeForLLVMName(StringRef Str)"
  }
]