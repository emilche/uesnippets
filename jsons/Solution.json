[
  {
    "label": "Solution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Solution"
  },
  {
    "label": "Solution()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_PBQP_SOLUTION_H # define LLVM_CODEGEN_PBQP_SOLUTION_H # include \" Graph . h \" # include \" Math . h \" # include<map> namespace llvm { namespace PBQP { class Solution { private : typedef std::map<GraphBase::NodeId,unsigned> SelectionsMap ; SelectionsMap selections ; unsigned r0Reductions,r1Reductions,r2Reductions,rNReductions ; public :)",
    "insertText": "Solution() : r0Reductions(0), r1Reductions(0), r2Reductions(0), rNReductions(0)"
  },
  {
    "label": "numNodes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "numNodes()"
  },
  {
    "label": "recordR0()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recordR0()"
  },
  {
    "label": "numR0Reductions()",
    "kind": "Method",
    "detail": "Function (+ + r0Reductions ; } unsigned)",
    "insertText": "numR0Reductions()"
  },
  {
    "label": "numR1Reductions()",
    "kind": "Method",
    "detail": "Function (+ + r1Reductions ; } unsigned)",
    "insertText": "numR1Reductions()"
  },
  {
    "label": "numR2Reductions()",
    "kind": "Method",
    "detail": "Function (+ + r2Reductions ; } unsigned)",
    "insertText": "numR2Reductions()"
  },
  {
    "label": "numRNReductions()",
    "kind": "Method",
    "detail": "Function (+ + rNReductions ; } unsigned)",
    "insertText": "numRNReductions()"
  },
  {
    "label": "getSelection()",
    "kind": "Method",
    "detail": "Function (selections [ nodeId ] = selection ; } unsigned)",
    "insertText": "getSelection(GraphBase::NodeId nodeId)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (SelectionsMap::const_iterator sItr = selections .)",
    "insertText": "find(nodeId)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(sItr != selections.end() && \"No selection for node.\")"
  }
]