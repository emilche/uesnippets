[
  {
    "label": "EFileWrite",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileWrite"
  },
  {
    "label": "EFileRead",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileRead"
  },
  {
    "label": "ECopyResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECopyResult"
  },
  {
    "label": "FCopyProgress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopyProgress"
  },
  {
    "label": "EFileOpenFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileOpenFlags"
  },
  {
    "label": "IFileManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileManager"
  },
  {
    "label": "MAX_UNREAL_FILENAME_LENGTH_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Misc / DateTime . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # define)",
    "insertText": "MAX_UNREAL_FILENAME_LENGTH_DEPRECATED(PLATFORM_MAX_FILEPATH_LENGTH_DEPRECATED)"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (FILEWRITE_None = 0 x00,FILEWRITE_NoFail = 0 x01,FILEWRITE_NoReplaceExisting = 0 x02,FILEWRITE_EvenIfReadOnly = 0 x04,FILEWRITE_Append = 0 x08,FILEWRITE_AllowRead = 0 x10,FILEWRITE_Silent = 0 x20 } ; enum EFileRead { FILEREAD_None = 0 x00,FILEREAD_NoFail = 0 x01,FILEREAD_Silent = 0 x02,FILEREAD_AllowWrite = 0 x04,} ; enum ECopyResult { COPY_OK = 0 x00,COPY_Fail = 0 x01,COPY_Canceled = 0 x02,} ; struct FCopyProgress { bool)",
    "insertText": "Poll(float Fraction)"
  },
  {
    "label": "IFileManager()",
    "kind": "Method",
    "detail": "Function (} ; enum EFileOpenFlags { IO_READ = 0 x01,IO_WRITE = 0 x02,IO_APPEND = 0 x40,} ; class IFileManager { protected :)",
    "insertText": "IFileManager()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} public : IFileManager&)",
    "insertText": "Get()"
  },
  {
    "label": "ProcessCommandLineOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommandLineOptions()"
  },
  {
    "label": "SetSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSandboxEnabled(bool bInEnabled)"
  },
  {
    "label": "IsSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSandboxEnabled()"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "CreateFileReader(const TCHAR* Filename, uint32 ReadFlags=0)"
  },
  {
    "label": "CreateFileWriter()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "CreateFileWriter(const TCHAR* Filename, uint32 WriteFlags=0)"
  },
  {
    "label": "CreateDebugFileWriter()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_DEBUG_FILES FArchive*)",
    "insertText": "CreateDebugFileWriter(const TCHAR* Filename, uint32 WriteFlags=0)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Delete(const TCHAR* Filename, bool RequireExists=0, bool EvenReadOnly=0, bool Quiet=0)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Copy(const TCHAR* Dest, const TCHAR* Src, bool Replace=1, bool EvenIfReadOnly=0, bool Attributes=0, FCopyProgress* Progress = nullptr, EFileRead ReadFlags=FILEREAD_None, EFileWrite WriteFlags=FILEWRITE_None)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Move(const TCHAR* Dest, const TCHAR* Src, bool Replace=1, bool EvenIfReadOnly=0, bool Attributes=0, bool bDoNotRetryOrError=0)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* InDirectory)"
  },
  {
    "label": "MakeDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeDirectory(const TCHAR* Path, bool Tree=0)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Path, bool RequireExists=0, bool Tree=0)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FileNames, const TCHAR* Filename, bool Files, bool Directories)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension = nullptr)"
  },
  {
    "label": "FindFilesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursive(TArray<FString>& FileNames, const TCHAR* StartDirectory, const TCHAR* Filename, bool Files, bool Directories, bool bClearFileNames=true)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitorFunc Visitor)"
  },
  {
    "label": "GetFileAgeSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFileAgeSeconds(const TCHAR* Filename)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Path)"
  },
  {
    "label": "GetTimeStampPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeStampPair(const TCHAR* PathA, const TCHAR* PathB, FDateTime& OutTimeStampA, FDateTime& OutTimeStampB)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTimeStamp(const TCHAR* Path, FDateTime TimeStamp)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToRelativePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToRelativePath(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IPlatformFile::IFileServerMessageHandler* Handler)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  }
]