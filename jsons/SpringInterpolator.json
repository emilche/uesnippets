[
  {
    "label": "FRK4SpringConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRK4SpringConstants"
  },
  {
    "label": "FRK4State",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRK4State"
  },
  {
    "label": "FRK4StateDerivative",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRK4StateDerivative"
  },
  {
    "label": "FRK4SpringInterpolator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRK4SpringInterpolator"
  },
  {
    "label": "FFloatRK4SpringInterpolator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatRK4SpringInterpolator"
  },
  {
    "label": "FVectorRK4SpringInterpolator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorRK4SpringInterpolator"
  },
  {
    "label": "FRK4SpringConstants()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" HAL / IConsoleManager . h \" # include \" SpringInterpolator . generated . h \" struct FRK4SpringConstants { float SpringStiffness ; float DampingConstant ;)",
    "insertText": "FRK4SpringConstants() : SpringStiffness(1.f) , DampingConstant(1.f)"
  },
  {
    "label": "FRK4SpringConstants()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRK4SpringConstants(float InSpringStiffness, float InDampingConstant) : SpringStiffness(InSpringStiffness) , DampingConstant(InDampingConstant)"
  },
  {
    "label": "FRK4State()",
    "kind": "Method",
    "detail": "Function (} } ; namespace RK4Integrator { template<T> struct FRK4State { T Position ; T Velocity ;)",
    "insertText": "FRK4State() : Position(T(0.f)) , Velocity(T(0.f))"
  },
  {
    "label": "FRK4State()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRK4State(T InPosition, T InVelocity) : Position(InPosition) , Velocity(InVelocity)"
  },
  {
    "label": "FRK4StateDerivative()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct FRK4StateDerivative { T Velocity ; T Acceleration ;)",
    "insertText": "FRK4StateDerivative() : Velocity(T(0.f)) , Acceleration(T(0.f))"
  },
  {
    "label": "FRK4StateDerivative()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRK4StateDerivative(T InVelocity, T InAcceleration) : Velocity(InVelocity) , Acceleration(InAcceleration)"
  },
  {
    "label": "Accelerate()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> T)",
    "insertText": "Accelerate(const FRK4State<T>& InCurrentState, const T& InTargetPosition, const FRK4SpringConstants& InSpringConstants)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} template<T> FRK4StateDerivative<T>)",
    "insertText": "Evaluate(const FRK4State<T>& InCurrentState, const FRK4StateDerivative<T>& InDerivativeState, const T& InTargetPosition, const FRK4SpringConstants& InSpringConstants, const float& InDeltaTime)"
  },
  {
    "label": "Accelerate()",
    "kind": "Method",
    "detail": "Function (FRK4State<T> NewState ; NewState . Position = InCurrentState . Position + InDerivativeState . Velocity* InDeltaTime ; NewState . Velocity = InCurrentState . Velocity + InDerivativeState . Acceleration* InDeltaTime ; FRK4StateDerivative<T> NewStateDerivative ; NewStateDerivative . Velocity = NewState . Velocity ; NewStateDerivative . Acceleration =)",
    "insertText": "Accelerate(NewState, InTargetPosition, InSpringConstants)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const FRK4StateDerivative<T> z = FRK4StateDerivative<)",
    "insertText": "T()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (const FRK4StateDerivative<T> a =)",
    "insertText": "Evaluate(InCurrentState, z, InTargetPosition, InSpringConstants, 0.f)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (const FRK4StateDerivative<T> b =)",
    "insertText": "Evaluate(InCurrentState, a, InTargetPosition, InSpringConstants, InDeltaTime*0.5f)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (const FRK4StateDerivative<T> c =)",
    "insertText": "Evaluate(InCurrentState, b, InTargetPosition, InSpringConstants, InDeltaTime*0.5f)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (const FRK4StateDerivative<T> d =)",
    "insertText": "Evaluate(InCurrentState, c, InTargetPosition, InSpringConstants, InDeltaTime)"
  },
  {
    "label": "Velocity()",
    "kind": "Method",
    "detail": "Function (const T)",
    "insertText": "Velocity(1.0f / 6.0f) * (a.Velocity + 2.0f*(b.Velocity + c.Velocity) + d.Velocity)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (const T)",
    "insertText": "Acceleration(1.0f / 6.0f) * (a.Acceleration + 2.0f*(b.Acceleration + c.Acceleration) + d.Acceleration)"
  },
  {
    "label": "RK4_SPRING_INTERPOLATOR_MAX_VALUE()",
    "kind": "Method",
    "detail": "Function (InCurrentState . Position + = Velocity* InDeltaTime ; InCurrentState . Velocity + = Acceleration* InDeltaTime ; } } float RK4_SPRING_INTERPOLATOR_UPDATE_RATE ; int32 RK4_SPRING_INTERPOLATOR_MAX_ITER ; # define)",
    "insertText": "RK4_SPRING_INTERPOLATOR_MAX_VALUE(1e+16f)"
  },
  {
    "label": "IsValidValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidValue(float Value, float MaxAbsoluteValue = RK4_SPRING_INTERPOLATOR_MAX_VALUE)"
  },
  {
    "label": "IsValidValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValue(FVector Value, float MaxAbsoluteValue = RK4_SPRING_INTERPOLATOR_MAX_VALUE)"
  },
  {
    "label": "AreEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEqual(float A, float B, float ErrorTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "AreEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEqual(FVector A, FVector B, float ErrorTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FRK4SpringInterpolator()",
    "kind": "Method",
    "detail": "Function (} } template<T> struct FRK4SpringInterpolator { protected : float StiffnessConstant ; float DampeningRatio ; bool bIsInitialized ; bool bIsInMotion ; float TimeRemaining ; FRK4SpringConstants SpringConstants ; T LastPosition ; RK4Integrator::FRK4State<T> State ; public :)",
    "insertText": "FRK4SpringInterpolator(float InSpringStiffness = 1.f, float InDampeningRatio = 1.f) : StiffnessConstant(InSpringStiffness) , DampeningRatio(InDampeningRatio) , bIsInitialized(false) , bIsInMotion(false) , TimeRemaining(0.f) , LastPosition(0.f)"
  },
  {
    "label": "SetDefaultSpringConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultSpringConstants(const float& InSpringStiffness, const float& InDampeningRatio = 1.f)"
  },
  {
    "label": "SetSpringConstants()",
    "kind": "Method",
    "detail": "Function (StiffnessConstant = InSpringStiffness ; DampeningRatio = InDampeningRatio ; } void)",
    "insertText": "SetSpringConstants(const float& InSpringStiffness, const float& InDampeningRatio = 1.f)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (SpringConstants . SpringStiffness = InSpringStiffness ; SpringConstants . DampingConstant = InDampeningRatio* 2 . f*)",
    "insertText": "Sqrt(InSpringStiffness)"
  },
  {
    "label": "GetDefaultStiffnessConstant()",
    "kind": "Method",
    "detail": "Function (bIsInitialized = true ; } float)",
    "insertText": "GetDefaultStiffnessConstant()"
  },
  {
    "label": "OffsetPosition()",
    "kind": "Method",
    "detail": "Function (State . Position = NewPosition ; } void)",
    "insertText": "OffsetPosition(const T& Offset)"
  },
  {
    "label": "GetLastDeltaPosition()",
    "kind": "Method",
    "detail": "Function (State . Position + = Offset ; } T)",
    "insertText": "GetLastDeltaPosition()"
  },
  {
    "label": "GetVelocity()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetVelocity()"
  },
  {
    "label": "IsVelocityZero()",
    "kind": "Method",
    "detail": "Function (State . Velocity = NewVelocity ; bIsInMotion = bIsInMotion | | !)",
    "insertText": "IsVelocityZero()"
  },
  {
    "label": "OffsetVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OffsetVelocity(const T& Offset)"
  },
  {
    "label": "SetVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVelocity(State.Velocity + Offset)"
  },
  {
    "label": "IsPositionEqualTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPositionEqualTo(const T& OtherPosition)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const T& DefaultPosition = T(0.f))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (State . Position = DefaultPosition ; State . Velocity =)",
    "insertText": "T(0.f)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bIsInMotion = false ; TimeRemaining = 0 . f ; } T)",
    "insertText": "Update(const T& InTargetPosition, const float& InDeltaTime)"
  },
  {
    "label": "IsPositionEqualTo()",
    "kind": "Method",
    "detail": "Function (LastPosition = State . Position ; bIsInMotion = bIsInMotion | | !)",
    "insertText": "IsPositionEqualTo(InTargetPosition)"
  },
  {
    "label": "SetSpringConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpringConstants(StiffnessConstant, DampeningRatio)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (bIsInitialized = true ; } TimeRemaining =)",
    "insertText": "Min(TimeRemaining + InDeltaTime, 0.1f)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const float StepTime = 1 . f /)",
    "insertText": "Max(RK4_SPRING_INTERPOLATOR_UPDATE_RATE, 1.f)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 NumIterations =)",
    "insertText": "Min(FMath::TruncToInt(TimeRemaining / StepTime), RK4_SPRING_INTERPOLATOR_MAX_ITER)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TimeRemaining - =)",
    "insertText": "float(NumIterations)"
  },
  {
    "label": "Integrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Integrate(State, InTargetPosition, SpringConstants, StepTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((TimeRemaining > 0.f) && (TimeRemaining < StepTime))"
  },
  {
    "label": "Integrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Integrate(State, InTargetPosition, SpringConstants, TimeRemaining)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(InTargetPosition)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} } } return State . Position ; } T)",
    "insertText": "Update(const T& InNewPosition, const T& InTargetPosition, const float& InDeltaTime)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(InNewPosition)"
  },
  {
    "label": "FFloatRK4SpringInterpolator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFloatRK4SpringInterpolator : FRK4SpringInterpolator<float> { private : typedef FRK4SpringInterpolator<float> Super ; public :)",
    "insertText": "FFloatRK4SpringInterpolator() : Super()"
  },
  {
    "label": "FFloatRK4SpringInterpolator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFloatRK4SpringInterpolator(const Super& Other) : Super(Other)"
  },
  {
    "label": "FVectorRK4SpringInterpolator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVectorRK4SpringInterpolator : FRK4SpringInterpolator<FVector> { private : typedef FRK4SpringInterpolator<FVector> Super ; public :)",
    "insertText": "FVectorRK4SpringInterpolator() : Super()"
  },
  {
    "label": "FVectorRK4SpringInterpolator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorRK4SpringInterpolator(const Super& Other) : Super(Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ; # if ! CPP)",
    "insertText": "USTRUCT(noexport, BlueprintType)"
  }
]