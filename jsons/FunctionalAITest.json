[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "AFunctionalAITest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AFunctionalAITest"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "FPendingDelayedSpawn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingDelayedSpawn"
  },
  {
    "label": "FAITestSpawnSetBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAITestSpawnSetBase"
  },
  {
    "label": "FAITestSpawnSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAITestSpawnSet"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Pawn . h \" # include \" FunctionalTest . h \" # include \" GenericTeamAgentInterface . h \" # include \" FunctionalAITest . generated . h \" class AAIController ; class AFunctionalAITest ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FFunctionalTestAISpawned, AAIController*, Controller, APawn*, Pawn)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=AISpawn)"
  },
  {
    "label": "FAITestSpawnInfoBase()",
    "kind": "Method",
    "detail": "Function (FName SpawnSetName ;)",
    "insertText": "FAITestSpawnInfoBase() : SpawnLocation(nullptr) , NumberToSpawn(1) , SpawnDelay(0.0f) , PreSpawnDelay(0.0f)"
  },
  {
    "label": "FAITestSpawnInfoBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAITestSpawnInfoBase()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=AISpawn)"
  },
  {
    "label": "FAITestSpawnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAITestSpawnInfo() : BehaviorTree(nullptr)"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Spawn(AFunctionalAITestBase* AITest)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FPendingDelayedSpawn()",
    "kind": "Method",
    "detail": "Function (float TimeToNextSpawn ; bool bFinished ; uint32 SpawnSetIndex ; uint32 SpawnInfoIndex ;)",
    "insertText": "FPendingDelayedSpawn() : NumberToSpawnLeft(uint32(-1)) , TimeToNextSpawn(FLT_MAX) , bFinished(true) , SpawnSetIndex(uint32(-1)) , SpawnInfoIndex(uint32(-1))"
  },
  {
    "label": "FPendingDelayedSpawn()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPendingDelayedSpawn(const uint32 InSpawnSetIndex, const uint32 InSpawnInfoIndex, const int32 InNumberToSpawnLeft, const float InTimeToNextSpawn) : NumberToSpawnLeft(InNumberToSpawnLeft) , TimeToNextSpawn(InTimeToNextSpawn) , bFinished(false) , SpawnSetIndex(InSpawnSetIndex) , SpawnInfoIndex(InSpawnInfoIndex)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float TimeDelta, AFunctionalAITestBase* AITest)"
  },
  {
    "label": "FAITestSpawnSetBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAITestSpawnSetBase() : bEnabled(true) , FallbackSpawnLocation(nullptr)"
  },
  {
    "label": "FAITestSpawnSetBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAITestSpawnSetBase()"
  },
  {
    "label": "GetSpawnInfo()",
    "kind": "Method",
    "detail": "Function (const FAITestSpawnInfoBase*)",
    "insertText": "GetSpawnInfo(const int32 SpawnInfoIndex) const PURE_VIRTUAL(, return nullptr;)"
  },
  {
    "label": "GetSpawnInfo()",
    "kind": "Method",
    "detail": "Function (FAITestSpawnInfoBase*)",
    "insertText": "GetSpawnInfo(const int32 SpawnInfoIndex) PURE_VIRTUAL(, return nullptr;)"
  },
  {
    "label": "IsValidSpawnInfoIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSpawnInfoIndex(const int32 Index) const PURE_VIRTUAL(, return false;)"
  },
  {
    "label": "ForEachSpawnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnInfo(TFunctionRef<void(const FAITestSpawnInfoBase&)> Predicate) const PURE_VIRTUAL(,)"
  },
  {
    "label": "ForEachSpawnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnInfo(TFunctionRef<void(FAITestSpawnInfoBase&)> Predicate) PURE_VIRTUAL(,)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FAITestSpawnSet()"
  },
  {
    "label": "ForEachSpawnInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSpawnInfo(TFunctionRef<void(const FAITestSpawnInfoBase&)> Predicate)"
  },
  {
    "label": "ForEachSpawnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnInfo(TFunctionRef<void(FAITestSpawnInfoBase&)> Predicate)"
  },
  {
    "label": "GetSpawnInfo()",
    "kind": "Method",
    "detail": "Function (const FAITestSpawnInfoBase*)",
    "insertText": "GetSpawnInfo(const int32 SpawnInfoIndex)"
  },
  {
    "label": "IsValidSpawnInfoIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSpawnInfoIndex(const int32 Index)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AFunctionalAITestBase(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "ForEachSpawnSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnSet(TFunctionRef<void(const FAITestSpawnSetBase&)> Predicate) const PURE_VIRTUAL(,)"
  },
  {
    "label": "ForEachSpawnSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnSet(TFunctionRef<void(FAITestSpawnSetBase&)> Predicate) PURE_VIRTUAL(,)"
  },
  {
    "label": "RemoveSpawnSetIfPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpawnSetIfPredicate(TFunctionRef<bool(FAITestSpawnSetBase&)> Predicate) PURE_VIRTUAL(,)"
  },
  {
    "label": "GetSpawnSet()",
    "kind": "Method",
    "detail": "Function (const FAITestSpawnSetBase*)",
    "insertText": "GetSpawnSet(const int32 SpawnSetIndex) const PURE_VIRTUAL(, return nullptr;)"
  },
  {
    "label": "GetSpawnSet()",
    "kind": "Method",
    "detail": "Function (FAITestSpawnSetBase*)",
    "insertText": "GetSpawnSet(const int32 SpawnSetIndex) PURE_VIRTUAL(,return nullptr;)"
  },
  {
    "label": "GetSpawnInfo()",
    "kind": "Method",
    "detail": "Function (const FAITestSpawnInfoBase*)",
    "insertText": "GetSpawnInfo(const int32 SpawnSetIndex, const int32 SpawnInfoIndex)"
  },
  {
    "label": "IsValidSpawnSetIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSpawnSetIndex(const int32 Index) const PURE_VIRTUAL(, return false;)"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Spawn(const int32 SpawnSetIndex, const int32 SpawnInfoIndex)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunTest(const TArray<FString>& Params = TArray<FString>())"
  },
  {
    "label": "StartTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTest()"
  },
  {
    "label": "OnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeout()"
  },
  {
    "label": "IsReady_Implementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady_Implementation()"
  },
  {
    "label": "WantsToRunAgain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsToRunAgain()"
  },
  {
    "label": "GatherRelevantActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherRelevantActors(TArray<AActor*>& OutActors)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "GetAdditionalTestFinishedMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAdditionalTestFinishedMessage(EFunctionalTestResult TestResult)"
  },
  {
    "label": "GetReproString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReproString()"
  },
  {
    "label": "AddSpawnedPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpawnedPawn(APawn& SpawnedPawn)"
  },
  {
    "label": "GetRandomizedLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetRandomizedLocation(const FVector& Location)"
  },
  {
    "label": "KillOffSpawnedPawns()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "KillOffSpawnedPawns()"
  },
  {
    "label": "ClearPendingDelayedSpawns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingDelayedSpawns()"
  },
  {
    "label": "StartSpawning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpawning()"
  },
  {
    "label": "OnSpawningFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSpawningFailure()"
  },
  {
    "label": "IsNavMeshReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavMeshReady()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FTimerHandle NavmeshDelayTimer ; } ;)",
    "insertText": "UCLASS(Blueprintable)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual void ForEachSpawnSet(TFunctionRef<void(const FAITestSpawnSetBase&)> Predicate)"
  },
  {
    "label": "ForEachSpawnSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSpawnSet(TFunctionRef<void(FAITestSpawnSetBase&)> Predicate)"
  },
  {
    "label": "RemoveSpawnSetIfPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpawnSetIfPredicate(TFunctionRef<bool(FAITestSpawnSetBase&)> Predicate)"
  },
  {
    "label": "GetSpawnSet()",
    "kind": "Method",
    "detail": "Function (const FAITestSpawnSetBase*)",
    "insertText": "GetSpawnSet(const int32 SpawnSetIndex)"
  },
  {
    "label": "IsValidSpawnSetIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSpawnSetIndex(const int32 Index)"
  }
]