[
  {
    "label": "FRDGAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGAllocator"
  },
  {
    "label": "FObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObject"
  },
  {
    "label": "TObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObject"
  },
  {
    "label": "FRDGAllocatorScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGAllocatorScope"
  },
  {
    "label": "TRDGArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRDGArrayAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "FObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StaticArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreGlobals . h \" # include \" CoreMinimal . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / MemStack . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # define RDG_USE_MALLOC USING_ADDRESS_SANITISER # define RDG_ALLOCATOR_DEBUG UE_BUILD_DEBUG class FRDGAllocator ; class FRDGAllocator { public : class FObject { public : ~)",
    "insertText": "FObject()"
  },
  {
    "label": "TObject()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class TObject final : FObject { class FRDGAllocator ; private : template<. . . TArgs>)",
    "insertText": "TObject(TArgs&&... Args) : Alloc(Forward<TArgs&&>(Args)...)"
  },
  {
    "label": "GetTLS()",
    "kind": "Method",
    "detail": "Function (} T Alloc ; } ; FRDGAllocator&)",
    "insertText": "GetTLS()"
  },
  {
    "label": "FRDGAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGAllocator()"
  },
  {
    "label": "FRDGAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGAllocator(FRDGAllocator&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRDGAllocator&)",
    "insertText": "operator(FRDGAllocator&&)"
  },
  {
    "label": "AcquireAccess()",
    "kind": "Method",
    "detail": "Function (void* Memory ; # if RDG_ALLOCATOR_DEBUG)",
    "insertText": "AcquireAccess()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (# endif # if RDG_USE_MALLOC Memory =)",
    "insertText": "Malloc(SizeInBytes, AlignInBytes)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Mallocs .)",
    "insertText": "Emplace(Memory)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (NumMallocBytes + = SizeInBytes ; # else Memory = MemStack .)",
    "insertText": "Alloc(SizeInBytes, AlignInBytes)"
  },
  {
    "label": "ReleaseAccess()",
    "kind": "Method",
    "detail": "Function (# endif # if RDG_ALLOCATOR_DEBUG)",
    "insertText": "ReleaseAccess()"
  },
  {
    "label": "AllocUninitialized()",
    "kind": "Method",
    "detail": "Function (# endif return Memory ; } template<PODType> PODType*)",
    "insertText": "AllocUninitialized(uint64 Count = 1)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> T*)",
    "insertText": "Alloc(TArgs&&... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif # if RDG_USE_MALLOC TObject<T>* Object = new TObject<)",
    "insertText": "T(Forward<TArgs&&>(Args)...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (NumMallocBytes + =)",
    "insertText": "sizeof(Object)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# else TObject<T>* Object =)",
    "insertText": "new(MemStack) TObject<T>(Forward<TArgs&&>(Args)...)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "check(Object)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "Add(Object)"
  },
  {
    "label": "AllocNoDestruct()",
    "kind": "Method",
    "detail": "Function (# endif return& Object -> Alloc ; } template<T,. . . TArgs> T*)",
    "insertText": "AllocNoDestruct(TArgs&&... Args)"
  },
  {
    "label": "GetByteCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetByteCount()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# if RDG_USE_MALLOC return static_cast<)",
    "insertText": "int32(NumMallocBytes)"
  },
  {
    "label": "ReleaseAll()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "ReleaseAll()"
  },
  {
    "label": "FRDGAllocatorScope()",
    "kind": "Method",
    "detail": "Function (std::atomic_int32_t NumAccesses { 0 } ; thread_local int32 NumAccessesTLS ; # endif class FRDGAllocatorScope ; uint32 AllocatorTLSSlot ; } ; class FRDGAllocatorScope { public :)",
    "insertText": "FRDGAllocatorScope(FRDGAllocator& Allocator)"
  },
  {
    "label": "FRDGAllocatorScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRDGAllocatorScope()"
  },
  {
    "label": "RDG_FRIEND_ALLOCATOR_FRIEND()",
    "kind": "Method",
    "detail": "Function (private : void* AllocatorToRestore ; } ; # define)",
    "insertText": "RDG_FRIEND_ALLOCATOR_FRIEND(Type)"
  },
  {
    "label": "OnInvalidRDGAllocatorNum()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "OnInvalidRDGAllocatorNum(int32 NewNum, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (} template<uint32 Alignment = DEFAULT_ALIGNMENT> class TRDGArrayAllocator { public : using SizeType = int32 ; enum { NeedsElementType = true } ; enum { RequireRangeCheck = true } ; template<ElementType> class ForElementType { public :)",
    "insertText": "ForElementType()"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (Data = Other . Data ; Other . Data = nullptr ; } ElementType*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* OldData = Data ;)",
    "insertText": "if(NewMax)"
  },
  {
    "label": "OnInvalidRDGAllocatorNum()",
    "kind": "Method",
    "detail": "Function (UE::RenderCore::)",
    "insertText": "OnInvalidRDGAllocatorNum(NewMax, NumBytesPerElement)"
  },
  {
    "label": "AllocSize()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "AllocSize(int32)(NewMax * NumBytesPerElement)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const int32 AllocAlignment =)",
    "insertText": "Max(Alignment, (uint32)alignof(ElementType))"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(ElementType*)FRDGAllocator::GetTLS().Alloc(AllocSize, FMath::Max(AllocSize >= 16 ? (int32)16 : (int32)8, AllocAlignment))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const SizeType NumCopiedElements =)",
    "insertText": "Min(NewMax, CurrentNum)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, OldData, NumCopiedElements * NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (} } } SizeType)",
    "insertText": "CalculateSlackReserve(SizeType NewMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackShrink(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackGrow(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  }
]