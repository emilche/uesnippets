[
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "FNavLocalGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLocalGridData"
  },
  {
    "label": "UNavLocalGridManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavLocalGridManager"
  },
  {
    "label": "FNavLocalGridData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SimpleCellGrid . h \" class ANavigationData ; struct FNavigationPath ; struct FNavLocalGridData : public TSimpleCellGrid<uint8,MAX_uint8> {)",
    "insertText": "FNavLocalGridData() : GridId(0)"
  },
  {
    "label": "FNavLocalGridData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavLocalGridData(const FVector& Center, float Extent2D)"
  },
  {
    "label": "FNavLocalGridData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavLocalGridData(const FVector& Center, const FVector2D& Extent2D)"
  },
  {
    "label": "FNavLocalGridData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavLocalGridData(const TArray<FNavLocalGridData>& SourceGrids)"
  },
  {
    "label": "MarkPointObstacle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPointObstacle(const FVector& Center)"
  },
  {
    "label": "MarkBoxObstacle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBoxObstacle(const FVector& Center, const FVector& Extent, const FQuat& Quat = FQuat::Identity)"
  },
  {
    "label": "MarkCapsuleObstacle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkCapsuleObstacle(const FVector& Center, float Radius, float HalfHeight)"
  },
  {
    "label": "SetHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeight(float ExtentZ)"
  },
  {
    "label": "GetGridId()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetGridId()"
  },
  {
    "label": "GetGlobalCoords()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGlobalCoords(int32 CellIdx)"
  },
  {
    "label": "GetCellIndexFromGlobalCoords2D()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndexFromGlobalCoords2D(const FIntVector& WorldCoords)"
  },
  {
    "label": "GetProjectedCellCenter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetProjectedCellCenter(int32 CellIdx)"
  },
  {
    "label": "GetProjectedCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetProjectedCellCenter(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetWorldCellCenter()",
    "kind": "Method",
    "detail": "Function (const FVector WorldCoords =)",
    "insertText": "GetWorldCellCenter(LocationX, LocationY)"
  },
  {
    "label": "FindPathForMovingAgent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindPathForMovingAgent(const FNavigationPath& SourcePath, const FVector& EntryLocation, int32 EntrySegmentStart, TArray<FVector>& PathPointsInside, int32& NextSegmentStart)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPath(const FIntVector& StartCoords, const FIntVector& EndCoords, TArray<FIntVector>& PathCoords)"
  },
  {
    "label": "ProjectCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectCells(const ANavigationData& NavData)"
  },
  {
    "label": "GetNeighbourCount()",
    "kind": "Method",
    "detail": "Function (typedef int32 FNodeRef ; int32)",
    "insertText": "GetNeighbourCount(FNodeRef NodeRef)"
  },
  {
    "label": "GetNeighbour()",
    "kind": "Method",
    "detail": "Function (} FNodeRef)",
    "insertText": "GetNeighbour(const FNodeRef NodeRef, const int32 NeiIndex)"
  },
  {
    "label": "PostProcessPath()",
    "kind": "Method",
    "detail": "Function (protected : class UNavLocalGridManager ; TArray<FVector::FReal> CellZ ; double LastAccessTime ; void)",
    "insertText": "PostProcessPath(const FIntVector& StartCoords, const FIntVector& EndCoords, const TArray<int32>& PathIndices, TArray<FIntVector>& PathCoords)"
  },
  {
    "label": "IsLineObstructed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLineObstructed(const FIntVector& StartCoords, const FIntVector& EndCoords)"
  },
  {
    "label": "SetGridId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGridId(int32 NewId)"
  }
]