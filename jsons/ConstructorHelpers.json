[
  {
    "label": "ConstructorHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstructorHelpers"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FObjectFinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectFinder"
  },
  {
    "label": "FObjectFinderOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectFinderOptional"
  },
  {
    "label": "FClassFinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassFinder"
  },
  {
    "label": "FindOrLoadObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / GCObject . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" UObject / Package . h \" # endif namespace ConstructorHelpersInternal { template<T> T*)",
    "insertText": "FindOrLoadObject(FString& PathName, uint32 LoadFlags)"
  },
  {
    "label": "FindChar()",
    "kind": "Method",
    "detail": "Function (int32 PackageDelimPos = INDEX_NONE ; PathName .)",
    "insertText": "FindChar(TCHAR('.'), PackageDelimPos)"
  },
  {
    "label": "FindLastChar()",
    "kind": "Method",
    "detail": "Function (int32 ObjectNameStart = INDEX_NONE ; PathName .)",
    "insertText": "FindLastChar(TCHAR('/'), ObjectNameStart)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (const FString ObjectName = PathName .)",
    "insertText": "Mid(ObjectNameStart+1)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (PathName + =)",
    "insertText": "TCHAR('.')"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (PathName + = ObjectName ; } } UClass* Class =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "GetDefaultObject()",
    "kind": "Method",
    "detail": "Function (Class ->)",
    "insertText": "GetDefaultObject()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* ObjectPtr = LoadObject<)",
    "insertText": "T(NULL, *PathName, nullptr, LoadFlags)"
  },
  {
    "label": "AddToRoot()",
    "kind": "Method",
    "detail": "Function (ObjectPtr ->)",
    "insertText": "AddToRoot()"
  },
  {
    "label": "UPackage()",
    "kind": "Method",
    "detail": "Function (} return ObjectPtr ; } template<> UPackage* FindOrLoadObject<)",
    "insertText": "UPackage(FString& PathName, uint32 LoadFlags)"
  },
  {
    "label": "FindOrLoadClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "FindOrLoadClass(FString& PathName, UClass* BaseClass)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (const FString ObjectName = PathName .)",
    "insertText": "Mid(ObjectNameStart + 1)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (PathName + = ObjectName ; PathName + =)",
    "insertText": "TCHAR('_')"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (PathName + =)",
    "insertText": "TCHAR('C')"
  },
  {
    "label": "StaticLoadClass()",
    "kind": "Method",
    "detail": "Function (} } UClass* LoadedClass =)",
    "insertText": "StaticLoadClass(BaseClass, NULL, *PathName)"
  },
  {
    "label": "FObjectFinder()",
    "kind": "Method",
    "detail": "Function (} return LoadedClass ; } } struct ConstructorHelpers { public : template<class T> struct FObjectFinder : public FGCObject { TObjectPtr<T> Object ;)",
    "insertText": "FObjectFinder(const TCHAR* ObjectToFind, uint32 InLoadFlags = LOAD_None)"
  },
  {
    "label": "PathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PathName(ObjectToFind)"
  },
  {
    "label": "StripObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripObjectClass(PathName,true)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Object = ConstructorHelpersInternal::FindOrLoadObject<)",
    "insertText": "T(PathName, InLoadFlags)"
  },
  {
    "label": "ValidateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateObject(Object, PathName, ObjectToFind)"
  },
  {
    "label": "Succeeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Succeeded()"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Object)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FObjectFinderOptional()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct FObjectFinderOptional : public FGCObject { private : TObjectPtr<T> Object ; const TCHAR* ObjectToFind ; uint32 LoadFlags ; public :)",
    "insertText": "FObjectFinderOptional(const TCHAR* InObjectToFind, uint32 InLoadFlags = LOAD_None) : Object(nullptr) , ObjectToFind(InObjectToFind) , LoadFlags(InLoadFlags)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Get()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Object = ConstructorHelpersInternal::FindOrLoadObject<)",
    "insertText": "T(PathName, LoadFlags)"
  },
  {
    "label": "WarnMissing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnMissing(LoadFlags & (LOAD_Quiet | LOAD_NoWarn))"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "FClassFinder()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct FClassFinder : public FGCObject { TSubclassOf<T> Class ;)",
    "insertText": "FClassFinder(const TCHAR* ClassToFind)"
  },
  {
    "label": "PathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PathName(ClassToFind)"
  },
  {
    "label": "StripObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripObjectClass(PathName, true)"
  },
  {
    "label": "FindOrLoadClass()",
    "kind": "Method",
    "detail": "Function (Class =)",
    "insertText": "FindOrLoadClass(PathName, T::StaticClass())"
  },
  {
    "label": "ValidateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateObject(*Class, PathName, *PathName)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Class.GetGCPtr())"
  },
  {
    "label": "StripObjectClass()",
    "kind": "Method",
    "detail": "Function (} } ; public : void)",
    "insertText": "StripObjectClass(FString& PathName, bool bAssertOnBadPath = false)"
  },
  {
    "label": "ValidateObject()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ValidateObject(UObject *Object, const FString& PathName, const TCHAR* ObjectToFind)"
  },
  {
    "label": "FailedToFind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToFind(ObjectToFind)"
  },
  {
    "label": "CheckFoundViaRedirect()",
    "kind": "Method",
    "detail": "Function (} # if UE_BUILD_DEBUG else {)",
    "insertText": "CheckFoundViaRedirect(Object, PathName, ObjectToFind)"
  },
  {
    "label": "FailedToFind()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "FailedToFind(const TCHAR* ObjectToFind)"
  },
  {
    "label": "CheckFoundViaRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckFoundViaRedirect(UObject *Object, const FString& PathName, const TCHAR* ObjectToFind)"
  },
  {
    "label": "CheckIfIsInConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfIsInConstructor(const TCHAR* ObjectToFind)"
  }
]