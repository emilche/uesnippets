[
  {
    "label": "TVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVariant"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "TVariantSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantSize"
  },
  {
    "label": "TAlwaysFArchive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlwaysFArchive"
  },
  {
    "label": "TTypePackContainsDuplicates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypePackContainsDuplicates"
  },
  {
    "label": "TContainsReferenceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContainsReferenceType"
  },
  {
    "label": "TVariantStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantStorage"
  },
  {
    "label": "TParameterPackTypeIndexHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TParameterPackTypeIndexHelper"
  },
  {
    "label": "TParameterPackTypeIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TParameterPackTypeIndex"
  },
  {
    "label": "TDestructorCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDestructorCaller"
  },
  {
    "label": "TDestructorLookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDestructorLookup"
  },
  {
    "label": "TCopyConstructorCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCopyConstructorCaller"
  },
  {
    "label": "TCopyConstructorLookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCopyConstructorLookup"
  },
  {
    "label": "TMoveConstructorCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMoveConstructorCaller"
  },
  {
    "label": "TMoveConstructorLookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMoveConstructorLookup"
  },
  {
    "label": "TVariantLoadFromArchiveCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantLoadFromArchiveCaller"
  },
  {
    "label": "TVariantLoadFromArchiveLookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantLoadFromArchiveLookup"
  },
  {
    "label": "TIsType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsType"
  },
  {
    "label": "TWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWrapper"
  },
  {
    "label": "TDestructibleVariantStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDestructibleVariantStorage"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / MemoryOps . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Delegates / IntegerSequence . h \" # include \" Concepts / Insertable . h \" # include \" Misc / AssertionMacros . h \" # ifndef _MSC_VER # if)",
    "insertText": "defined(__cpp_concepts) && __cpp_concepts >= 202002L #define UE_TVARIANT_TRIVIAL_DESTRUCTOR_USING_CONCEPTS 1 #endif #endif #if !defined(UE_TVARIANT_TRIVIAL_DESTRUCTOR_USING_CONCEPTS)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<T> bool TIsVariant_V = false ; template<. . . Ts> bool TIsVariant_V<TVariant<Ts . . .>> = true ; template<T> bool TIsVariant_V<const T> = TIsVariant_V<T> ; template<T> bool TIsVariant_V<volatile T> = TIsVariant_V<T> ; template<T> bool TIsVariant_V<const volatile T> = TIsVariant_V<T> ; template<> SIZE_T TVariantSize_V = 0 ; template<. . . Ts> SIZE_T TVariantSize_V<TVariant<Ts . . .>> =)",
    "insertText": "sizeof(Ts)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (SIZE_T Value = TVariantSize_V<std::remove_reference_t<T>> ; } ; namespace UE { namespace Core { namespace Private { template<T> struct TAlwaysFArchive { using Type = FArchive ; } ; template<. . .> struct TTypePackContainsDuplicates ; template<T> struct TTypePackContainsDuplicates<T> { bool Value = false ; } ; template<T,. . . Ts> struct TTypePackContainsDuplicates<T,T,Ts . . .> { bool Value = true ; } ; template<T,U,. . . Rest> struct TTypePackContainsDuplicates<T,U,Rest . . .> { bool Value = TTypePackContainsDuplicates<T,Rest . . .>::Value | | TTypePackContainsDuplicates<U,Rest . . .>::Value ; } ; template<. . . Ts> struct TContainsReferenceType { bool)",
    "insertText": "Value(std::is_reference_v<Ts> || ...)"
  },
  {
    "label": "MaxOf()",
    "kind": "Method",
    "detail": "Function (} ; template<. . . Ts> struct TVariantStorage { SIZE_T)",
    "insertText": "MaxOf(const SIZE_T Sizes[])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SIZE_T MaxSize = 0 ;)",
    "insertText": "for(SIZE_T Itr = 0; Itr < sizeof...(Ts); ++Itr)"
  },
  {
    "label": "MaxSizeof()",
    "kind": "Method",
    "detail": "Function (MaxSize = Sizes [ Itr ] ; } } return MaxSize ; } SIZE_T)",
    "insertText": "MaxSizeof()"
  },
  {
    "label": "MaxAlignof()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "MaxAlignof()"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (SIZE_T Sizes [ ] = {)",
    "insertText": "alignof(Ts)"
  },
  {
    "label": "GetValueAsIndexedType()",
    "kind": "Method",
    "detail": "Function (template<SIZE_T N> auto&)",
    "insertText": "GetValueAsIndexedType()"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (using ReturnType = TNthTypeFromParameterPack<N,Ts . . .>::Type ; return* reinterpret_cast<)",
    "insertText": "ReturnType(&Storage)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (using ReturnType = TNthTypeFromParameterPack<N,Ts . . .>::Type ;)",
    "insertText": "return(ReturnType&&)GetValueAsIndexedType<N>()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} TAlignedBytes<SizeofValue,AlignofValue> Storage ; # if ! UE_TVARIANT_TRIVIAL_DESTRUCTOR_USING_CONCEPTS uint8 TypeIndex ; # endif } ; template<SIZE_T N,LookupType,. . . Ts> struct TParameterPackTypeIndexHelper { SIZE_T)",
    "insertText": "Value(SIZE_T)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (} ; template<SIZE_T N,T,. . . Ts> struct TParameterPackTypeIndexHelper<N,T,T,Ts . . .> { SIZE_T Value = N ; } ; template<SIZE_T N,LookupType,T,. . . Ts> struct TParameterPackTypeIndexHelper<N,LookupType,T,Ts . . .> { SIZE_T Value = TParameterPackTypeIndexHelper<N + 1,LookupType,Ts . . .>::Value ; } ; template<LookupType,. . . Ts> struct TParameterPackTypeIndex { SIZE_T Value = TParameterPackTypeIndexHelper<0,LookupType,Ts . . .>::Value ; } ; template<T> struct TDestructorCaller { void)",
    "insertText": "Destruct(void* Storage)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(static_cast<T*>(Storage))"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> struct TDestructorLookup { void)",
    "insertText": "Destruct(SIZE_T TypeIndex, void* Value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*Destructors[])(void*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (& TDestructorCaller<Ts>::Destruct . . . } ;)",
    "insertText": "check(TypeIndex < UE_ARRAY_COUNT(Destructors))"
  },
  {
    "label": "TypeIndex()",
    "kind": "Method",
    "detail": "Function (Destructors [)",
    "insertText": "TypeIndex(Value)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TCopyConstructorCaller { void)",
    "insertText": "Construct(void* Storage, const void* Value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Storage) T(*static_cast<const T*>(Value))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> struct TCopyConstructorLookup { void)",
    "insertText": "Construct(SIZE_T TypeIndex, void* Storage, const void* Value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*CopyConstructors[])(void*, const void*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (& TCopyConstructorCaller<Ts>::Construct . . . } ;)",
    "insertText": "check(TypeIndex < UE_ARRAY_COUNT(CopyConstructors))"
  },
  {
    "label": "TypeIndex()",
    "kind": "Method",
    "detail": "Function (CopyConstructors [)",
    "insertText": "TypeIndex(Storage, Value)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TMoveConstructorCaller { void)",
    "insertText": "Construct(void* Storage, void* Value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Storage) T(MoveTemp(*static_cast<T*>(Value)))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> struct TMoveConstructorLookup { void)",
    "insertText": "Construct(SIZE_T TypeIndex, void* Target, void* Source)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*MoveConstructors[])(void*, void*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (& TMoveConstructorCaller<Ts>::Construct . . . } ;)",
    "insertText": "check(TypeIndex < UE_ARRAY_COUNT(MoveConstructors))"
  },
  {
    "label": "TypeIndex()",
    "kind": "Method",
    "detail": "Function (MoveConstructors [)",
    "insertText": "TypeIndex(Target, Source)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,VariantType> struct TVariantLoadFromArchiveCaller { void)",
    "insertText": "Load(FArchive& Ar, VariantType& OutVariant)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutVariant . template Emplace<)",
    "insertText": "T()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> struct TVariantLoadFromArchiveLookup { using VariantType = TVariant<Ts . . .> ;)",
    "insertText": "static_assert((std::is_default_constructible_v<Ts> && ...), \"Each type in TVariant template parameter pack must be default constructible in order to use FArchive serialization\")"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Load(SIZE_T TypeIndex, FArchive& Ar, VariantType& OutVariant)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*Loaders[])(FArchive&, VariantType&)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (& TVariantLoadFromArchiveCaller<Ts,VariantType>::Load . . . } ;)",
    "insertText": "check(TypeIndex < UE_ARRAY_COUNT(Loaders))"
  },
  {
    "label": "TypeIndex()",
    "kind": "Method",
    "detail": "Function (Loaders [)",
    "insertText": "TypeIndex(Ar, OutVariant)"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (} } ; template<LookupType,. . . Ts> struct TIsType { bool)",
    "insertText": "IsSame(SIZE_T TypeIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool bIsSameType [ ] = { std::is_same_v<Ts,LookupType> . . . } ;)",
    "insertText": "check(TypeIndex < UE_ARRAY_COUNT(bIsSameType))"
  },
  {
    "label": "EncodeIndices()",
    "kind": "Method",
    "detail": "Function (} template<Variant0,. . . Variants> SIZE_T)",
    "insertText": "EncodeIndices(const Variant0& First, const Variants&... Rest)"
  },
  {
    "label": "DecodeIndex()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "DecodeIndex(SIZE_T EncodedIndex, SIZE_T VariantIndex, const SIZE_T* VariantSizes)"
  },
  {
    "label": "CastToStorage()",
    "kind": "Method",
    "detail": "Function (EncodedIndex / =* VariantSizes ; - - VariantIndex ; + + VariantSizes ; } return EncodedIndex %* VariantSizes ; } template<. . . Ts> TVariantStorage<Ts . . .>&)",
    "insertText": "CastToStorage(TVariant<Ts...>& Variant)"
  },
  {
    "label": "CastToStorage()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> TVariantStorage<Ts . . .>&&)",
    "insertText": "CastToStorage(TVariant<Ts...>&& Variant)"
  },
  {
    "label": "CastToStorage()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> const TVariantStorage<Ts . . .>&)",
    "insertText": "CastToStorage(const TVariant<Ts...>& Variant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<SIZE_T EncodedIndex,SIZE_T . . . VariantIndices,Func,. . . Variants>)",
    "insertText": "decltype(auto) VisitApplyEncoded(Func&& Callable, Variants&&... Args)"
  },
  {
    "label": "Callable()",
    "kind": "Method",
    "detail": "Function (SIZE_T VariantSizes [ ] = { TVariantSize_V<std::decay_t<Variants>> . . . } ; return)",
    "insertText": "Callable(CastToStorage(Forward<Variants>(Args)).template GetValueAsIndexedType<DecodeIndex(EncodedIndex, VariantIndices, VariantSizes)>()...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<InvokeFn,SIZE_T . . . VariantIndices> struct TWrapper { template<SIZE_T EncodedIndex> InvokeFn FuncPtr =& VisitApplyEncoded<EncodedIndex,VariantIndices . . .> ; } ; template<Func,SIZE_T . . . EncodedIndices,SIZE_T . . . VariantIndices,. . . Variants>)",
    "insertText": "decltype(auto) VisitImpl(SIZE_T EncodedIndex, Func&& Callable, TIntegerSequence<SIZE_T, EncodedIndices...>&&, TIntegerSequence<SIZE_T, VariantIndices...>&& VariantIndicesSeq, Variants&&... Args)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ReturnType =)",
    "insertText": "decltype(VisitApplyEncoded<0, VariantIndices...>(Forward<Func>(Callable), Forward<Variants>(Args)...))"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (using InvokeFn =)",
    "insertText": "ReturnType(*)(Func&&, Variants&&...)"
  },
  {
    "label": "EncodedIndex()",
    "kind": "Method",
    "detail": "Function (using WrapperType = TWrapper<InvokeFn,VariantIndices . . .> ; InvokeFn Invokers [ ] = { WrapperType::template FuncPtr<EncodedIndices> . . . } ; return Invokers [)",
    "insertText": "EncodedIndex(Forward<Func>(Callable), Forward<Variants>(Args)...)"
  },
  {
    "label": "TDestructibleVariantStorage()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_TVARIANT_TRIVIAL_DESTRUCTOR_USING_CONCEPTS template<T,. . . Ts> struct TDestructibleVariantStorage : TVariantStorage<T,Ts . . .> { protected : ~)",
    "insertText": "TDestructibleVariantStorage()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (UE::Core::Private::TDestructorLookup<T,Ts . . .)",
    "insertText": "Destruct(this->TypeIndex, this)"
  }
]