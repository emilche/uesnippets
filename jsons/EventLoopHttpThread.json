[
  {
    "label": "FEventLoopHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventLoopHttpThread"
  },
  {
    "label": "FEventLoopHttpThread()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HttpThread . h \" # include \" EventLoop / IEventLoop . h \" class FEventLoopHttpThread : public FHttpThreadBase { public :)",
    "insertText": "FEventLoopHttpThread()"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartThread()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "UpdateConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfigs()"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "AddRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "GetCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompletedRequests(TArray<FHttpRequestCommon*>& OutCompletedRequests)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Tick()"
  },
  {
    "label": "CreateEventLoop()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CreateEventLoop()"
  },
  {
    "label": "DestroyEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEventLoop()"
  },
  {
    "label": "UpdateEventLoopConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventLoopConfigs()"
  },
  {
    "label": "GetEventLoop()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop*)",
    "insertText": "GetEventLoop()"
  },
  {
    "label": "GetEventLoopChecked()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop&)",
    "insertText": "GetEventLoopChecked()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "ResetTickTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTickTimer()"
  },
  {
    "label": "AddHttpThreadTask()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IHttpTaskTimerHandle>)",
    "insertText": "AddHttpThreadTask(TFunction<void()>&& Task, float InDelay)"
  },
  {
    "label": "RemoveTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimerHandle(FTSTicker::FDelegateHandle DelegateHandle)"
  },
  {
    "label": "RemoveTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimerHandle(UE::EventLoop::FTimerHandle EventLoopTimerHandle)"
  }
]