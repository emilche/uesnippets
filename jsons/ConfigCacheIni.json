[
  {
    "label": "FConfigCacheIni",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCacheIni"
  },
  {
    "label": "FConfigFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigFile"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConfigContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigContext"
  },
  {
    "label": "FConfigValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigValue"
  },
  {
    "label": "FConfigBranch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigBranch"
  },
  {
    "label": "FDetailedConfigMemUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailedConfigMemUsage"
  },
  {
    "label": "FConfigSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigSection"
  },
  {
    "label": "FConfigCommandlineOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigCommandlineOverride"
  },
  {
    "label": "FConfigModificationTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigModificationTracker"
  },
  {
    "label": "FCVarTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCVarTracker"
  },
  {
    "label": "FConfigCommandStreamSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCommandStreamSection"
  },
  {
    "label": "FConfigCommandStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCommandStream"
  },
  {
    "label": "FKnownConfigFiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKnownConfigFiles"
  },
  {
    "label": "FPluginInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Reverse . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / List . h \" # include \" Containers / SparseArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / TextLocalizationResource . h \" # include \" Logging / LogMacros . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Math / Rotator . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Misc / Build . h \" # include \" Misc / ConfigAccessTracking . h \" # include \" Misc / ConfigTypes . h \" # include \" Misc / Paths . h \" # include \" Misc / TransactionallySafeRWScopeLock . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Serialization / StructuredArchiveSlots . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class FConfigCacheIni ; class FConfigFile ; class FOutputDevice ; class IConsoleVariable ; struct FColor ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogConfig, Log, All)"
  },
  {
    "label": "ALLOW_INI_OVERRIDE_FROM_COMMANDLINE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ALLOW_INI_OVERRIDE_FROM_COMMANDLINE(UE_SERVER || !(UE_BUILD_SHIPPING)) #define CONFIG_CAN_SAVE_COMMENTS (WITH_EDITOR) #define ENUMERATE_KNOWN_INI_FILES(op) \\ op(Engine) \\ op(Game) \\ op(Input) \\ op(DeviceProfiles) \\ op(GameUserSettings) \\ op(Scalability) \\ op(RuntimeOptions) \\ op(InstallBundle) \\ op(Hardware) \\ op(GameplayTags) #define KNOWN_INI_ENUM(IniName)"
  },
  {
    "label": "ENUMERATE_KNOWN_INI_FILES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUMERATE_KNOWN_INI_FILES(KNOWN_INI_ENUM)"
  },
  {
    "label": "GetSectionAccess()",
    "kind": "Method",
    "detail": "Function (class FConfigContext ; # if UE_WITH_CONFIG_TRACKING UE::ConfigAccessTracking::FSection*)",
    "insertText": "GetSectionAccess(const FConfigSection* InSection)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (# endif struct FConfigValue { public : enum class EValueType : uint8 { Set,ArrayAdd,ArrayAddUnique,Remove,Clear,ArrayOfStructKey,POCArrayOfStructKey,Combined,ArrayCombined,} ;)",
    "insertText": "FConfigValue() : FConfigValue(nullptr, NAME_None)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FConfigSection* InSection, FName InValueName, EValueType Type=EValueType::Combined) : ValueType(Type) #if UE_WITH_CONFIG_TRACKING , SectionAccess(GetSectionAccess(InSection)) , ValueName(InValueName)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const TCHAR* InValue, EValueType Type=EValueType::Combined) : FConfigValue(nullptr, NAME_None, InValue, Type)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FConfigSection* InSection, FName InValueName, const TCHAR* InValue, EValueType Type=EValueType::Combined) : ValueType(Type) , SavedValue(InValue) #if UE_WITH_CONFIG_TRACKING , SectionAccess(GetSectionAccess(InSection)) , ValueName(InValueName)"
  },
  {
    "label": "HashString()",
    "kind": "Method",
    "detail": "Function (SavedValueHash =)",
    "insertText": "HashString(SavedValue)"
  },
  {
    "label": "ExpandValueInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandValueInternal()"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FString& InValue, EValueType Type=EValueType::Combined) : FConfigValue(nullptr, NAME_None, InValue, Type)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FConfigSection* InSection, FName InValueName, const FString& InValue, EValueType Type=EValueType::Combined) : ValueType(Type) , SavedValue(InValue) #if UE_WITH_CONFIG_TRACKING , SectionAccess(GetSectionAccess(InSection)) , ValueName(InValueName)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(FString&& InValue, EValueType Type=EValueType::Combined) : FConfigValue(nullptr, NAME_None, MoveTemp(InValue), Type)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FConfigSection* InSection, FName InValueName, FString&& InValue, EValueType Type=EValueType::Combined) : ValueType(Type) , SavedValue(MoveTemp(InValue)) #if UE_WITH_CONFIG_TRACKING , SectionAccess(GetSectionAccess(InSection)) , ValueName(InValueName)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(const FConfigValue& InConfigValue) : ValueType(InConfigValue.ValueType) , SavedValue(InConfigValue.SavedValue) , ExpandedValue(InConfigValue.ExpandedValue) , SavedValueHash(InConfigValue.SavedValueHash) #if UE_WITH_CONFIG_TRACKING , SectionAccess(InConfigValue.SectionAccess) , ValueName(InConfigValue.ValueName)"
  },
  {
    "label": "FConfigValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigValue(FConfigValue&& InConfigValue) : ValueType(InConfigValue.ValueType) , SavedValue(MoveTemp(InConfigValue.SavedValue)) , ExpandedValue(MoveTemp(InConfigValue.ExpandedValue)) , SavedValueHash(InConfigValue.SavedValueHash) #if UE_WITH_CONFIG_TRACKING , SectionAccess(MoveTemp(InConfigValue.SectionAccess)) , ValueName(InConfigValue.ValueName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConfigValue&)",
    "insertText": "operator(FConfigValue&& RHS)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ValueType = RHS . ValueType ; SavedValue =)",
    "insertText": "MoveTemp(RHS.SavedValue)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ExpandedValue =)",
    "insertText": "MoveTemp(RHS.ExpandedValue)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SavedValueHash = RHS . SavedValueHash ; # if UE_WITH_CONFIG_TRACKING SectionAccess =)",
    "insertText": "MoveTemp(RHS.SectionAccess)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueName = RHS . ValueName ; # endif return* this ; } FConfigValue&)",
    "insertText": "operator(const FConfigValue& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueType = RHS . ValueType ; SavedValue = RHS . SavedValue ; ExpandedValue = RHS . ExpandedValue ; SavedValueHash = RHS . SavedValueHash ; # if UE_WITH_CONFIG_TRACKING SectionAccess = RHS . SectionAccess ; ValueName = RHS . ValueName ; # endif return* this ; } FConfigValue&)",
    "insertText": "operator(const TCHAR* RHS)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FString(RHS)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SavedValue =)",
    "insertText": "MoveTemp(RHS)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ExpandedValue .)",
    "insertText": "Empty()"
  },
  {
    "label": "OnConfigValueRead()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_CONFIG_TRACKING UE::ConfigAccessTracking::)",
    "insertText": "OnConfigValueRead(SectionAccess, ValueName, *this)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "return(ExpandedValue.Len() > 0 ? ExpandedValue : SavedValue)"
  },
  {
    "label": "GetSavedValue()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetSavedValue()"
  },
  {
    "label": "SetSectionAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSectionAccess(UE::ConfigAccessTracking::FSection* InSectionAccess)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SectionAccess = InSectionAccess ; } # endif bool)",
    "insertText": "operator(const FConfigValue& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FConfigValue& ConfigValue)"
  },
  {
    "label": "FStructuredArchiveFromArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructuredArchiveFromArchive(Ar).GetSlot()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Slot<<ConfigValue . SavedValue ;)",
    "insertText": "if(Slot.GetUnderlyingArchive().IsLoading())"
  },
  {
    "label": "ExpandValue()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ExpandValue(const FString& InCollapsedValue, FString& OutExpandedValue)"
  },
  {
    "label": "ExpandValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ExpandValue(const FString& InCollapsedValue)"
  },
  {
    "label": "CollapseValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollapseValue(const FString& InExpandedValue, FString& OutCollapsedValue)"
  },
  {
    "label": "CollapseValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CollapseValue(const FString& InExpandedValue)"
  },
  {
    "label": "GetValueForWriting()",
    "kind": "Method",
    "detail": "Function (EValueType ValueType ; # if CONFIG_CAN_SAVE_COMMENTS FString Comment ; # endif const FString&)",
    "insertText": "GetValueForWriting()"
  },
  {
    "label": "GetSavedValueForWriting()",
    "kind": "Method",
    "detail": "Function (} ; class FConfigCacheIni ; class FConfigFile ; class FConfigBranch ; struct FDetailedConfigMemUsage ; const FString&)",
    "insertText": "GetSavedValueForWriting()"
  },
  {
    "label": "FConfigSection()",
    "kind": "Method",
    "detail": "Function (FString SavedValue ; FString ExpandedValue ; uint32 SavedValueHash ; # if UE_WITH_CONFIG_TRACKING TRefCountPtr<UE::ConfigAccessTracking::FSection> SectionAccess ; FMinimalName ValueName ; # endif } ; typedef TMultiMap<FName,FConfigValue> FConfigSectionMap ; class FConfigSection : public FConfigSectionMap { public :)",
    "insertText": "FConfigSection() : FConfigSection(nullptr)"
  },
  {
    "label": "FConfigSection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConfigSection(UE::ConfigAccessTracking::FSection* InSectionAccess) #if UE_WITH_CONFIG_TRACKING : SectionAccess(InSectionAccess)"
  },
  {
    "label": "HasQuotes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasQuotes(const FString& Test)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FConfigSection& Other)"
  },
  {
    "label": "HandleAddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddCommand(FName ValueName, FString&& Value, bool bAppendValueIfNotArrayOfStructsKeyUsed)"
  },
  {
    "label": "HandleArrayOfKeyedStructsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleArrayOfKeyedStructsCommand(FName Key, FString&& Value)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (template<Allocator> void)",
    "insertText": "MultiFind(const FName Key, TArray<FConfigValue, Allocator>& OutValues, const bool bMaintainOrder = false)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiFind(Key, OutValues, bMaintainOrder)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (} template<Allocator> void)",
    "insertText": "MultiFind(const FName Key, TArray<FString, Allocator>& OutValues, const bool bMaintainOrder = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutValues .)",
    "insertText": "Add(It->Value.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bMaintainOrder)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(OutValues)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TMap<FName,FString> ArrayOfStructKeys ; # if UE_WITH_CONFIG_TRACKING TRefCountPtr<UE::ConfigAccessTracking::FSection> SectionAccess ; # endif bool bCanSave = true ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FConfigSection& ConfigSection)"
  },
  {
    "label": "AreSectionsEqualForWriting()",
    "kind": "Method",
    "detail": "Function (private : FConfigFile ; bool)",
    "insertText": "AreSectionsEqualForWriting(const FConfigSection& A, const FConfigSection& B)"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (} ; # if ALLOW_INI_OVERRIDE_FROM_COMMANDLINE struct FConfigCommandlineOverride { FString BaseFileName,Section,PropertyKey,PropertyValue ; } ; # endif typedef TMap<FString,FConfigSection> FConfigFileMap ; class FConfigModificationTracker { public : struct FCVarTracker { int CVarPriority ; TMap<FName,FConfigSection> CVarEntriesPerBranch ; } ; bool bTrackModifiedSections = true ; bool bTrackLoadedFiles = false ; TMap<FName,TSet<FString>> ModifiedSectionsPerBranch ; TArray<FString> LoadedFiles ; TMap<FString,FCVarTracker> CVars ; } ; class FConfigCommandStreamSection : public FConfigSectionMap { public : TMap<FName,FString> ArrayOfStructKeys ; } ; class FConfigCommandStream : public TMap<FString,FConfigCommandStreamSection> { public : using SectionType = FConfigCommandStreamSection ; void)",
    "insertText": "ProcessCommand(SectionType* Section, FStringView SectionName, FConfigValue::EValueType Command, FName Key, FString&& Value)"
  },
  {
    "label": "FindOrAddSectionInternal()",
    "kind": "Method",
    "detail": "Function (FConfigCommandStreamSection*)",
    "insertText": "FindOrAddSectionInternal(const FString& SectionName)"
  },
  {
    "label": "FillFileFromDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillFileFromDisk(const FString& Filename, bool bHandleSymbolCommands)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "FConfigFile()",
    "kind": "Method",
    "detail": "Function (TMap<FString,TMap<FName,FString>> PerObjectConfigArrayOfStructKeys ; class FConfigBranch* Branch = nullptr ; FName Tag ; uint8 Dirty ; uint8 bPythonConfigParserMode = false ; uint8 bIsSavedConfigFile = false ; uint16 Priority ; FString Filename ; } ; class FConfigFile : private FConfigFileMap { public : using SectionType = FConfigSection ; bool Dirty : 1 ; bool NoSave : 1 ; bool bHasPlatformName : 1 ; bool bPythonConfigParserMode : 1 ; bool bCanSaveAllSections : 1 ; # if UE_WITH_CONFIG_TRACKING UE::ConfigAccessTracking::ELoadType LoadType = UE::ConfigAccessTracking::ELoadType::Uninitialized ; # endif FName Name ; FString PlatformName ; FName Tag ; class FConfigBranch ; class FConfigBranch* Branch = nullptr ; # if ALLOW_INI_OVERRIDE_FROM_COMMANDLINE TArray<FConfigCommandlineOverride> CommandlineOptions ; # endif private : TMap<FString,TMap<FName,FString>> PerObjectConfigArrayOfStructKeys ; FConfigCommandStream* ChangeTracker = nullptr ; # if UE_WITH_CONFIG_TRACKING TRefCountPtr<UE::ConfigAccessTracking::FFile> FileAccess ; # endif public :)",
    "insertText": "FConfigFile()"
  },
  {
    "label": "FConfigFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConfigFile(int32)"
  },
  {
    "label": "FConfigFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConfigFile(const FConfigFile& Other)"
  },
  {
    "label": "FConfigFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConfigFile(FConfigFile&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConfigFile&)",
    "insertText": "operator(const FConfigFile& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConfigFile&)",
    "insertText": "operator(FConfigFile&& Other)"
  },
  {
    "label": "FindOrAddConfigSection()",
    "kind": "Method",
    "detail": "Function (const FConfigSection*)",
    "insertText": "FindOrAddConfigSection(const FString& Name)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FTransactionallySafeReadScopeLock)",
    "insertText": "ScopeLock(ConfigFileMapLock)"
  },
  {
    "label": "FindSection()",
    "kind": "Method",
    "detail": "Function (} const FConfigSection*)",
    "insertText": "FindSection(const FString& SectionName)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 ExpectedNumElements = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(ExpectedNumElements)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FString& SectionName)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetKeys(TArray<FString>& Keys)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetKeys(TSet<FString>& Keys)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Remove(KeyConstPointerType InKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Add(const KeyType& InKey, const ValueType& InValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Add(const KeyType& InKey, ValueType&& InValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Add(KeyType&& InKey, const ValueType& InValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Add(KeyType&& InKey, ValueType&& InValue)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TMap<FString, FConfigSection> Other)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(MoveTemp(Other))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TRangedForConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TRangedForConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Combine(const FString& Filename)"
  },
  {
    "label": "CombineFromBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineFromBuffer(const FString& Buffer, const FString& FileHint)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(const FString& Filename)"
  },
  {
    "label": "ApplyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyFile(const FConfigCommandStream* File)"
  },
  {
    "label": "WriteTempFileThenMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteTempFileThenMove()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(const FString& Filename, bool bDoRemoteWrite=true, const FString& PrefixText=FString())"
  },
  {
    "label": "WriteToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToString(FString& InOutText, const FString& SimulatedFilename = FString(), const FString& PrefixText = FString())"
  },
  {
    "label": "IsADefaultIniWrite()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsADefaultIniWrite(const FString& Filename, int32& OutIniCombineThreshold)"
  },
  {
    "label": "WriteInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteInternal(const FString& Filename, bool bDoRemoteWrite, TMap<FString, FString>& InOutSectionTexts, const TArray<FString>& InSectionOrder)"
  },
  {
    "label": "WriteToStringInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToStringInternal(FString& InOutText, bool bIsADefaultIniWrite, int32 IniCombineThreshold, TMap<FString, FString>& InOutSectionTexts, const TArray<FString>& InSectionOrder)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "FillFileFromBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFileFromBuffer(FStringView Buffer, bool bHandleSymbolCommands, const FString& FileHint)"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommand(FConfigSection* Section, FStringView SectionName, FConfigValue::EValueType Command, FName Key, FString&& Value)"
  },
  {
    "label": "FillFileFromBuffer()",
    "kind": "Method",
    "detail": "Function (} ; template<FileType> void)",
    "insertText": "FillFileFromBuffer(FileType* File, FStringView Buffer, bool bHandleSymbolCommands, const FString& FileHint)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Dump(FOutputDevice& Ar)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetString(const TCHAR* Section, const TCHAR* Key, FString& Value)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetText(const TCHAR* Section, const TCHAR* Key, FText& Value)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInt(const TCHAR* Section, const TCHAR* Key, int32& Value)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFloat(const TCHAR* Section, const TCHAR* Key, float& Value)"
  },
  {
    "label": "GetDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDouble(const TCHAR* Section, const TCHAR* Key, double& Value)"
  },
  {
    "label": "GetInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInt64(const TCHAR* Section, const TCHAR* Key, int64& Value)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBool(const TCHAR* Section, const TCHAR* Key, bool& Value)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetArray(const TCHAR* Section, const TCHAR* Key, TArray<FString>& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, FString& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, FText& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, int32& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, float& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, double& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, int64& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, bool& Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, TArray<FString>& Value)"
  },
  {
    "label": "DoesSectionExist()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesSectionExist(const TCHAR* Section)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(const TCHAR* Section, const TCHAR* Key, const TCHAR* Value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* Section, const TCHAR* Key, const FText& Value)"
  },
  {
    "label": "SetFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloat(const TCHAR* Section, const TCHAR* Key, float Value)"
  },
  {
    "label": "SetDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDouble(const TCHAR* Section, const TCHAR* Key, double Value)"
  },
  {
    "label": "SetBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBool(const TCHAR* Section, const TCHAR* Key, bool Value)"
  },
  {
    "label": "SetInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInt64(const TCHAR* Section, const TCHAR* Key, const int64 Value)"
  },
  {
    "label": "SetArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArray(const TCHAR* Section, const TCHAR* Key, const TArray<FString>& Value)"
  },
  {
    "label": "AddToSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToSection(const TCHAR* Section, FName Key, const FString& Value)"
  },
  {
    "label": "AddUniqueToSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUniqueToSection(const TCHAR* Section, FName Key, const FString& Value)"
  },
  {
    "label": "RemoveKeyFromSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKeyFromSection(const TCHAR* Section, FName Key)"
  },
  {
    "label": "RemoveFromSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromSection(const TCHAR* Section, FName Key, const FString& Value)"
  },
  {
    "label": "ResetKeyInSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetKeyInSection(const TCHAR* Section, FName Key)"
  },
  {
    "label": "ProcessInputFileContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInputFileContents(FStringView Contents, const FString& FileHint)"
  },
  {
    "label": "AddMissingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMissingProperties(const FConfigFile& InSourceFile)"
  },
  {
    "label": "UpdateSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSections(const TCHAR* DiskFilename, const TCHAR* IniRootName=nullptr, const TCHAR* OverridePlatform=nullptr)"
  },
  {
    "label": "UpdateSinglePropertyInSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSinglePropertyInSection(const TCHAR* DiskFilename, const TCHAR* PropertyName, const TCHAR* SectionName)"
  },
  {
    "label": "ProcessSourceAndCheckAgainstBackup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSourceAndCheckAgainstBackup()"
  },
  {
    "label": "ShouldExportQuotedString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExportQuotedString(const FString& PropertyValue)"
  },
  {
    "label": "GenerateExportedPropertyLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateExportedPropertyLine(const FString& PropertyName, const FString& PropertyValue)"
  },
  {
    "label": "AppendExportedPropertyLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExportedPropertyLine(FString& Out, const FString& PropertyName, const FString& PropertyValue)"
  },
  {
    "label": "OverrideFromCommandline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFromCommandline(FConfigFile* File, const FString& Filename)"
  },
  {
    "label": "OverrideFromCommandline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFromCommandline(FConfigCommandStream* File, const FString& Filename)"
  },
  {
    "label": "OverrideFileFromCommandline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideFileFromCommandline(FString& Filename)"
  },
  {
    "label": "AddDynamicLayerToHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDynamicLayerToHierarchy(const FString& Filename)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FConfigFile& ConfigFile)"
  },
  {
    "label": "SuppressReporting()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_CONFIG_TRACKING void)",
    "insertText": "SuppressReporting()"
  },
  {
    "label": "GetFileAccess()",
    "kind": "Method",
    "detail": "Function (UE::ConfigAccessTracking::FFile*)",
    "insertText": "GetFileAccess()"
  },
  {
    "label": "SaveSourceToBackupFile()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "SaveSourceToBackupFile()"
  },
  {
    "label": "ProcessPropertyAndWriteForDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPropertyAndWriteForDefaults(int32 IniCombineThreshold, const TArray<const FConfigValue*>& InCompletePropertyToProcess, FString& OutText, const FString& SectionName, const FString& PropertyName)"
  },
  {
    "label": "AddStaticLayersToHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStaticLayersToHierarchy(const TCHAR* InBaseIniName, const TCHAR* InPlatformName, const TCHAR* EngineConfigDir, const TCHAR* SourceConfigDir)"
  },
  {
    "label": "AddStaticLayersToHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStaticLayersToHierarchy(FConfigContext& Context)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (class FConfigCacheIni ; FConfigContext ; FTransactionallySafeRWLock ConfigFileMapLock ; } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FKeyValueSink, const TCHAR*, const TCHAR*)"
  },
  {
    "label": "FConfigBranch()",
    "kind": "Method",
    "detail": "Function (enum class EConfigCacheType : uint8 { DiskBacked,Temporary,} ; enum class EBranchReplayMethod : uint8 { FullReplay,DynamicLayerReplay,NoReplay,} ; enum class DynamicLayerPriority : uint16 { Unknown = 0,Plugin = 2 0,GameFeature = 5 0,Hotfix = 8 0,} ; class FConfigBranch { public :)",
    "insertText": "FConfigBranch()"
  },
  {
    "label": "FConfigBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConfigBranch(const FConfigFile& ExistingFile)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FName IniName ; FString IniPath ; FName Platform ; FString SourceEngineConfigDir ; FString SourceProjectConfigDir ; bool bIsSafeUnloaded ; bool bIsHierarchical ; EBranchReplayMethod ReplayMethod = EBranchReplayMethod::NoReplay ; FConfigFileHierarchy Hierarchy ; TMap<FString,FConfigCommandStream> StaticLayers ; using DynamicLayerList = TDoubleLinkedList<FConfigCommandStream*> ; DynamicLayerList DynamicLayers ; FConfigCommandStream SavedLayer ; FConfigFile CombinedStaticLayers ; FConfigFile FinalCombinedLayers ; FConfigCommandStream CommandLineOverrides ; FConfigFile InMemoryFile ; FConfigCommandStream RuntimeChanges ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FConfigBranch& ConfigBranch)"
  },
  {
    "label": "AddDynamicLayerToHierarchy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDynamicLayerToHierarchy(const FString& Filename, FConfigModificationTracker* ModificationTracker =nullptr)"
  },
  {
    "label": "AddDynamicLayersToHierarchy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDynamicLayersToHierarchy(const TArray<FString>& Filenames, FName Tag=NAME_None, DynamicLayerPriority Priority=DynamicLayerPriority::Unknown, FConfigModificationTracker* ModificationTracker =nullptr)"
  },
  {
    "label": "AddDynamicLayerStringToHierarchy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDynamicLayerStringToHierarchy(const FString& Filename, const FString& Contents, FName Tag=NAME_None, DynamicLayerPriority Priority=DynamicLayerPriority::Unknown, FConfigModificationTracker* ModificationTracker =nullptr)"
  },
  {
    "label": "RemoveDynamicLayerFromHierarchy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDynamicLayerFromHierarchy(const FString& Filename, FConfigModificationTracker* ModificationTracker =nullptr)"
  },
  {
    "label": "RemoveDynamicLayersFromHierarchy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDynamicLayersFromHierarchy(const TArray<FString>& Filenames, FConfigModificationTracker* ModificationTracker =nullptr)"
  },
  {
    "label": "SafeUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeUnload()"
  },
  {
    "label": "SafeReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeReload()"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSection(const TCHAR* Section)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "RunOnEachFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunOnEachFile(TFunction<void(FConfigFile& File, const FString& Name)> Func)"
  },
  {
    "label": "RunOnEachCommandStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunOnEachCommandStream(TFunction<void(FConfigCommandStream& File, const FString& Name)> Func)"
  },
  {
    "label": "InitFiles()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitFiles()"
  },
  {
    "label": "RemoveTagFromHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTagFromHierarchy(FName Tag, FConfigModificationTracker* ModificationTracker)"
  },
  {
    "label": "FConfigCacheIni()",
    "kind": "Method",
    "detail": "Function (class FConfigCacheIni ; double InactiveTimer ; } ; class FConfigCacheIni { public :)",
    "insertText": "FConfigCacheIni(EConfigCacheType Type, FName PlatformName = NAME_None, bool bInGloballyRegistered = false)"
  },
  {
    "label": "FConfigCacheIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConfigCacheIni()"
  },
  {
    "label": "DisableFileOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFileOperations()"
  },
  {
    "label": "EnableFileOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFileOperations()"
  },
  {
    "label": "AreFileOperationsDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreFileOperationsDisabled()"
  },
  {
    "label": "IsReadyForUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForUse()"
  },
  {
    "label": "Parse1ToNSectionOfStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse1ToNSectionOfStrings(const TCHAR* Section, const TCHAR* KeyOne, const TCHAR* KeyN, TMap<FString, TArray<FString> >& OutMap, const FString& Filename)"
  },
  {
    "label": "Parse1ToNSectionOfNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse1ToNSectionOfNames(const TCHAR* Section, const TCHAR* KeyOne, const TCHAR* KeyN, TMap<FName, TArray<FName> >& OutMap, const FString& Filename)"
  },
  {
    "label": "FindConfigFile()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "FindConfigFile(const FString& Filename)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "Find(const FString& InFilename)"
  },
  {
    "label": "ContainsConfigFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsConfigFile(const FConfigFile* ConfigFile)"
  },
  {
    "label": "FindConfigFileWithBaseName()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "FindConfigFileWithBaseName(FName BaseName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FConfigFile&)",
    "insertText": "Add(const FString& Filename, const FConfigFile& File)"
  },
  {
    "label": "FindBranch()",
    "kind": "Method",
    "detail": "Function (FConfigBranch*)",
    "insertText": "FindBranch(FName BaseIniName, const FString& Filename)"
  },
  {
    "label": "FindBranchWithNoReload()",
    "kind": "Method",
    "detail": "Function (FConfigBranch*)",
    "insertText": "FindBranchWithNoReload(FName BaseIniName, const FString& Filename)"
  },
  {
    "label": "AddNewBranch()",
    "kind": "Method",
    "detail": "Function (FConfigBranch&)",
    "insertText": "AddNewBranch(const FString& Filename)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FString& Filename)"
  },
  {
    "label": "GetFilenames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetFilenames()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool bRemoveFromCache, const FString& Filename=TEXT(\"\"))"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFile(const FString& InFilename, const FConfigFile* Fallback = NULL, const TCHAR* PlatformString = NULL)"
  },
  {
    "label": "SetFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFile(const FString& InFilename, const FConfigFile* NewConfigFile)"
  },
  {
    "label": "UnloadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadFile(const FString& Filename)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach(const FString& Filename)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetString(const TCHAR* Section, const TCHAR* Key, FString& Value, const FString& Filename)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetText(const TCHAR* Section, const TCHAR* Key, FText& Value, const FString& Filename)"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSection(const TCHAR* Section, TArray<FString>& Result, const FString& Filename)"
  },
  {
    "label": "DoesSectionExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSectionExist(const TCHAR* Section, const FString& Filename)"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (const FConfigSection*)",
    "insertText": "GetSection(const TCHAR* Section, const bool Force, const FString& Filename)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(const TCHAR* Section, const TCHAR* Key, const TCHAR* Value, const FString& Filename)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* Section, const TCHAR* Key, const FText& Value, const FString& Filename)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKey(const TCHAR* Section, const TCHAR* Key, const FString& Filename)"
  },
  {
    "label": "EmptySection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmptySection(const TCHAR* Section, const FString& Filename)"
  },
  {
    "label": "EmptySectionsMatchingString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmptySectionsMatchingString(const TCHAR* SectionString, const FString& Filename)"
  },
  {
    "label": "GetConfigFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigFilename(const TCHAR* BaseIniName)"
  },
  {
    "label": "GetConfigFilenames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConfigFilenames(TArray<FString>& ConfigFilenames)"
  },
  {
    "label": "GetSectionNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSectionNames(const FString& Filename, TArray<FString>& out_SectionNames)"
  },
  {
    "label": "GetPerObjectConfigSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPerObjectConfigSections(const FString& Filename, const FString& SearchClass, TArray<FString>& out_SectionNames, int32 MaxResults=1024)"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(FOutputDevice& Ar, const TCHAR* IniName=NULL)"
  },
  {
    "label": "ShowMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowMemoryUsage(FOutputDevice& Ar)"
  },
  {
    "label": "GetMaxMemoryUsage()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetMaxMemoryUsage()"
  },
  {
    "label": "ForEachEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForEachEntry(const FKeyValueSink& Visitor, const TCHAR* Section, const FString& Filename)"
  },
  {
    "label": "GetStr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStr(const TCHAR* Section, const TCHAR* Key, const FString& Filename)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInt(const TCHAR* Section, const TCHAR* Key, int32& Value, const FString& Filename)"
  },
  {
    "label": "GetInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInt64(const TCHAR* Section, const TCHAR* Key, int64& Value, const FString& Filename)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFloat(const TCHAR* Section, const TCHAR* Key, float& Value, const FString& Filename)"
  },
  {
    "label": "GetDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDouble(const TCHAR* Section, const TCHAR* Key, double& Value, const FString& Filename)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBool(const TCHAR* Section, const TCHAR* Key, bool& Value, const FString& Filename)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetArray(const TCHAR* Section, const TCHAR* Key, TArray<FString>& out_Arr, const FString& Filename)"
  },
  {
    "label": "GetSingleLineArray()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSingleLineArray(const TCHAR* Section, const TCHAR* Key, TArray<FString>& out_Arr, const FString& Filename)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetColor(const TCHAR* Section, const TCHAR* Key, FColor& Value, const FString& Filename)"
  },
  {
    "label": "GetVector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVector2D(const TCHAR* Section, const TCHAR* Key, FVector2D& Value, const FString& Filename)"
  },
  {
    "label": "GetVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVector(const TCHAR* Section, const TCHAR* Key, FVector& Value, const FString& Filename)"
  },
  {
    "label": "GetVector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVector4(const TCHAR* Section, const TCHAR* Key, FVector4& Value, const FString& Filename)"
  },
  {
    "label": "GetRotator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRotator(const TCHAR* Section, const TCHAR* Key, FRotator& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, FString& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, FText& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, int32& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, float& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, bool& Value, const FString& Filename)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValue(const TCHAR* Section, const TCHAR* Key, TArray<FString>& Value, const FString& Filename)"
  },
  {
    "label": "GetIntOrDefault()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIntOrDefault(const TCHAR* Section, const TCHAR* Key, const int32 DefaultValue, const FString& Filename)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int32 Value = DefaultValue ;)",
    "insertText": "GetInt(Section,Key,Value,Filename)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float Value = DefaultValue ;)",
    "insertText": "GetFloat(Section,Key,Value,Filename)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool Value = DefaultValue ;)",
    "insertText": "GetBool(Section,Key,Value,Filename)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Value ;)",
    "insertText": "if(GetString(Section,Key,Value,Filename))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FText Value ;)",
    "insertText": "if(GetText(Section,Key,Value,Filename))"
  },
  {
    "label": "SetFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloat(const TCHAR* Section, const TCHAR* Key, float Value, const FString& Filename)"
  },
  {
    "label": "SetDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDouble(const TCHAR* Section, const TCHAR* Key, double Value, const FString& Filename)"
  },
  {
    "label": "SetBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBool(const TCHAR* Section, const TCHAR* Key, bool Value, const FString& Filename)"
  },
  {
    "label": "SetArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArray(const TCHAR* Section, const TCHAR* Key, const TArray<FString>& Value, const FString& Filename)"
  },
  {
    "label": "SetSingleLineArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleLineArray(const TCHAR* Section, const TCHAR* Key, const TArray<FString>& In_Arr, const FString& Filename)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const TCHAR* Section, const TCHAR* Key, FColor Value, const FString& Filename)"
  },
  {
    "label": "SetVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVector2D(const TCHAR* Section, const TCHAR* Key, FVector2D Value, const FString& Filename)"
  },
  {
    "label": "SetVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVector(const TCHAR* Section, const TCHAR* Key, FVector Value, const FString& Filename)"
  },
  {
    "label": "SetVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVector4(const TCHAR* Section, const TCHAR* Key, const FVector4& Value, const FString& Filename)"
  },
  {
    "label": "SetRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotator(const TCHAR* Section, const TCHAR* Key, FRotator Value, const FString& Filename)"
  },
  {
    "label": "AddToSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToSection(const TCHAR* Section, FName Key, const FString& Value, const FString& Filename)"
  },
  {
    "label": "AddUniqueToSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUniqueToSection(const TCHAR* Section, FName Key, const FString& Value, const FString& Filename)"
  },
  {
    "label": "RemoveKeyFromSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveKeyFromSection(const TCHAR* Section, FName Key, const FString& Filename)"
  },
  {
    "label": "RemoveFromSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromSection(const TCHAR* Section, FName Key, const FString& Value, const FString& Filename)"
  },
  {
    "label": "ResetKeyInSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetKeyInSection(const TCHAR* Section, FName Key, const FString& Filename)"
  },
  {
    "label": "SafeUnloadBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeUnloadBranch(const TCHAR* Filename)"
  },
  {
    "label": "RemoveSectionFromBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSectionFromBranch(const TCHAR* Section, const TCHAR* Filename)"
  },
  {
    "label": "InitializeConfigSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeConfigSystem()"
  },
  {
    "label": "GetCustomConfigString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCustomConfigString()"
  },
  {
    "label": "GetDestIniFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDestIniFilename(const TCHAR* BaseIniName, const TCHAR* PlatformName, const TCHAR* GeneratedConfigDir)"
  },
  {
    "label": "LoadGlobalIniFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadGlobalIniFile(FString& FinalIniFilename, const TCHAR* BaseIniName, const TCHAR* Platform = NULL, bool bForceReload = false, bool bRequireDefaultIni = false, bool bAllowGeneratedIniWhenCooked = true, bool bAllowRemoteConfig = true, const TCHAR* GeneratedConfigDir = *FPaths::GeneratedConfigDir(), FConfigCacheIni* ConfigSystem=GConfig)"
  },
  {
    "label": "LoadLocalIniFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadLocalIniFile(FConfigFile& ConfigFile, const TCHAR* IniName, bool bIsBaseIniName, const TCHAR* Platform=NULL, bool bForceReload=false)"
  },
  {
    "label": "LoadExternalIniFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadExternalIniFile(FConfigFile& ConfigFile, const TCHAR* IniName, const TCHAR* EngineConfigDir, const TCHAR* SourceConfigDir, bool bIsBaseIniName, const TCHAR* Platform=NULL, bool bForceReload=false, bool bWriteDestIni=false, bool bAllowGeneratedIniWhenCooked = true, const TCHAR* GeneratedConfigDir = *FPaths::GeneratedConfigDir())"
  },
  {
    "label": "LoadConsoleVariablesFromINI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadConsoleVariablesFromINI()"
  },
  {
    "label": "NormalizeConfigIniPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NormalizeConfigIniPath(const FString& NonNormalizedPath)"
  },
  {
    "label": "FindOrLoadPlatformConfig()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "FindOrLoadPlatformConfig(FConfigFile& LocalFile, const TCHAR* IniName, const TCHAR* Platform = NULL)"
  },
  {
    "label": "FindPlatformConfig()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "FindPlatformConfig(const TCHAR* IniName, const TCHAR* Platform)"
  },
  {
    "label": "SaveCurrentStateForBootstrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentStateForBootstrap(const TCHAR* Filename)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FKnownConfigFiles()",
    "kind": "Method",
    "detail": "Function (struct FKnownConfigFiles {)",
    "insertText": "FKnownConfigFiles()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FKnownConfigFiles& Names)"
  },
  {
    "label": "SetGlobalIniStringsFromMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalIniStringsFromMembers()"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (const FConfigFile*)",
    "insertText": "GetFile(FName Name)"
  },
  {
    "label": "GetMutableFile()",
    "kind": "Method",
    "detail": "Function (FConfigFile*)",
    "insertText": "GetMutableFile(FName Name)"
  },
  {
    "label": "GetBranch()",
    "kind": "Method",
    "detail": "Function (FConfigBranch*)",
    "insertText": "GetBranch(FName Name)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFilename(FName Name)"
  },
  {
    "label": "Branches()",
    "kind": "Method",
    "detail": "Function (FConfigBranch)",
    "insertText": "Branches(uint8)"
  },
  {
    "label": "InitializeKnownConfigFiles()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "InitializeKnownConfigFiles(FConfigContext& Context)"
  },
  {
    "label": "IsKnownConfigName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownConfigName(FName ConfigName)"
  },
  {
    "label": "CreateGConfigFromSaved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateGConfigFromSaved(const TCHAR* Filename)"
  },
  {
    "label": "ForPlatform()",
    "kind": "Method",
    "detail": "Function (FConfigCacheIni*)",
    "insertText": "ForPlatform(FName PlatformName)"
  },
  {
    "label": "ClearOtherPlatformConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOtherPlatformConfigs()"
  },
  {
    "label": "RegisterPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPlugin(FName PluginName, const FString& PluginDir, const TArray<FString>& ChildPluginDirs, DynamicLayerPriority Priority, bool bIncludePluginNameInBranchName)"
  },
  {
    "label": "AddPluginToAllBranches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPluginToAllBranches(FName PluginName, FConfigModificationTracker* ModificationTracker=nullptr)"
  },
  {
    "label": "RemoveTagFromAllBranches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTagFromAllBranches(FName Tag, FConfigModificationTracker* ModificationTracker=nullptr)"
  },
  {
    "label": "AsyncInitializeConfigForPlatforms()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "AsyncInitializeConfigForPlatforms()"
  },
  {
    "label": "SerializeStateForBootstrap_Impl()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SerializeStateForBootstrap_Impl(FArchive& Ar)"
  },
  {
    "label": "DumpFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpFile(FOutputDevice& Ar, const FString& Filename, const FConfigFile& File)"
  },
  {
    "label": "AddPluginToBranches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPluginToBranches(FName PluginName, FConfigModificationTracker* ModificationTracker)"
  },
  {
    "label": "RemoveTagFromBranches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTagFromBranches(FName Tag, FConfigModificationTracker* ModificationTracker)"
  }
]