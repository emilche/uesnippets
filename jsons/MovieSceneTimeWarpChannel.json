[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneTimeWarpChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpChannel"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneDoubleChannel . h \" # include \" MovieSceneTimeWarpChannel . generated . h \" class UMovieScene ; namespace UE::MovieScene { enum class ETimeWarpChannelDomain : uint8 { Time,PlayRate,} ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient)"
  },
  {
    "label": "Dilate()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ETimeWarpChannelDomain Domain ; } ; void)",
    "insertText": "Dilate(FMovieSceneTimeWarpChannel* InChannel, FFrameNumber Origin, double DilationFactor)"
  },
  {
    "label": "GetTimeWarpMode()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation)",
    "insertText": "GetTimeWarpMode(FMovieSceneDoubleChannel* InChannel, const FFrameNumber& InTime, EMovieSceneKeyInterpolation DefaultInterpolationMode)"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "AddKeyToChannel(FMovieSceneTimeWarpChannel* Channel, FFrameNumber InFrameNumber, double InValue, EMovieSceneKeyInterpolation Interpolation)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneTimeWarpChannel* InChannel, FFrameNumber InFrameNumber, const FMovieSceneDoubleValue& InValue)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneTimeWarpChannel* InChannel, FFrameNumber InFrameNumber, double Value)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneTimeWarpChannel* InChannel, FFrameNumber InFrameNumber, float Value)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignValue(FMovieSceneTimeWarpChannel* InChannel, FKeyHandle InKeyHandle, double InValue)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(static_cast<FMovieSceneDoubleChannel*>(InChannel), InKeyHandle, InValue)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignValue(FMovieSceneTimeWarpChannel* InChannel, FKeyHandle InKeyHandle, float InValue)"
  }
]