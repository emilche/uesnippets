[
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "TUnrealPlatformMathSSEBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUnrealPlatformMathSSEBase"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformMisc . h \" # if ! PLATFORM_ENABLE_VECTORINTRINSICS | | PLATFORM_ENABLE_VECTORINTRINSICS_NEON template<class Base> struct TUnrealPlatformMathSSEBase : public Base { } ; # else namespace UE4 { namespace SSE { float)",
    "insertText": "InvSqrt(float InValue)"
  },
  {
    "label": "_mm_set_ss()",
    "kind": "Method",
    "detail": "Function (const __m128 One =)",
    "insertText": "_mm_set_ss(1.0f)"
  },
  {
    "label": "_mm_set_ss()",
    "kind": "Method",
    "detail": "Function (const __m128 Y0 =)",
    "insertText": "_mm_set_ss(InValue)"
  },
  {
    "label": "_mm_sqrt_ss()",
    "kind": "Method",
    "detail": "Function (const __m128 X0 =)",
    "insertText": "_mm_sqrt_ss(Y0)"
  },
  {
    "label": "_mm_div_ss()",
    "kind": "Method",
    "detail": "Function (const __m128 R0 =)",
    "insertText": "_mm_div_ss(One, X0)"
  },
  {
    "label": "_mm_store_ss()",
    "kind": "Method",
    "detail": "Function (float temp ;)",
    "insertText": "_mm_store_ss(&temp, R0)"
  },
  {
    "label": "_mm_set_sd()",
    "kind": "Method",
    "detail": "Function (const __m128d One =)",
    "insertText": "_mm_set_sd(1.0)"
  },
  {
    "label": "_mm_set_sd()",
    "kind": "Method",
    "detail": "Function (const __m128d Y0 =)",
    "insertText": "_mm_set_sd(InValue)"
  },
  {
    "label": "_mm_sqrt_sd()",
    "kind": "Method",
    "detail": "Function (const __m128d X0 =)",
    "insertText": "_mm_sqrt_sd(One, Y0)"
  },
  {
    "label": "_mm_div_sd()",
    "kind": "Method",
    "detail": "Function (const __m128d R0 =)",
    "insertText": "_mm_div_sd(One, X0)"
  },
  {
    "label": "_mm_set_ss()",
    "kind": "Method",
    "detail": "Function (const __m128 fOneHalf =)",
    "insertText": "_mm_set_ss(0.5f)"
  },
  {
    "label": "_mm_set_ss()",
    "kind": "Method",
    "detail": "Function (__m128 Y0,X0,X1,FOver2 ; float temp ; Y0 =)",
    "insertText": "_mm_set_ss(F)"
  },
  {
    "label": "_mm_rsqrt_ss()",
    "kind": "Method",
    "detail": "Function (X0 =)",
    "insertText": "_mm_rsqrt_ss(Y0)"
  },
  {
    "label": "_mm_mul_ss()",
    "kind": "Method",
    "detail": "Function (FOver2 =)",
    "insertText": "_mm_mul_ss(Y0, fOneHalf)"
  },
  {
    "label": "_mm_mul_ss()",
    "kind": "Method",
    "detail": "Function (X1 =)",
    "insertText": "_mm_mul_ss(X0, X0)"
  },
  {
    "label": "_mm_sub_ss()",
    "kind": "Method",
    "detail": "Function (X1 =)",
    "insertText": "_mm_sub_ss(fOneHalf, _mm_mul_ss(FOver2, X1))"
  },
  {
    "label": "_mm_add_ss()",
    "kind": "Method",
    "detail": "Function (X1 =)",
    "insertText": "_mm_add_ss(X0, _mm_mul_ss(X0, X1))"
  },
  {
    "label": "_mm_store_ss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_ss(&temp, X1)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TruncToInt32(float F)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TruncToInt32(double InValue)"
  },
  {
    "label": "TruncToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TruncToInt64(double InValue)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FloorToInt32(float F)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FloorToInt32(double InValue)"
  },
  {
    "label": "FloorToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FloorToInt64(double InValue)"
  },
  {
    "label": "RoundToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt32(float F)"
  },
  {
    "label": "RoundToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt32(double InValue)"
  },
  {
    "label": "RoundToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToInt64(double InValue)"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CeilToInt32(float F)"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CeilToInt32(double InValue)"
  },
  {
    "label": "CeilToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CeilToInt64(double InValue)"
  },
  {
    "label": "FloatToHalf()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "FloatToHalf(__m128 f)"
  },
  {
    "label": "_mm_set1_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 mask_sign =)",
    "insertText": "_mm_set1_ps(-0.0f)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_f16max =)",
    "insertText": "_mm_set1_epi32((127 + 16) << 23)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_nanbit =)",
    "insertText": "_mm_set1_epi32(0x200)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_nanlobits =)",
    "insertText": "_mm_set1_epi32(0x1ff)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_infty_as_fp16 =)",
    "insertText": "_mm_set1_epi32(0x7c00)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_min_normal =)",
    "insertText": "_mm_set1_epi32((127 - 14) << 23)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_subnorm_magic =)",
    "insertText": "_mm_set1_epi32(((127 - 15) + (23 - 10) + 1) << 23)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i c_normal_bias =)",
    "insertText": "_mm_set1_epi32(0xfff - ((127 - 15) << 23))"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (__m128 justsign =)",
    "insertText": "_mm_and_ps(f , mask_sign)"
  },
  {
    "label": "_mm_andnot_ps()",
    "kind": "Method",
    "detail": "Function (__m128 absf =)",
    "insertText": "_mm_andnot_ps(mask_sign, f)"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (__m128i absf_int =)",
    "insertText": "_mm_castps_si128(absf)"
  },
  {
    "label": "_mm_cmpunord_ps()",
    "kind": "Method",
    "detail": "Function (__m128 b_isnan =)",
    "insertText": "_mm_cmpunord_ps(absf, absf)"
  },
  {
    "label": "_mm_cmpgt_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i b_isregular =)",
    "insertText": "_mm_cmpgt_epi32(c_f16max, absf_int)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nan_payload =)",
    "insertText": "_mm_and_si128(_mm_srli_epi32(absf_int, 13), c_nanlobits)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nan_quiet =)",
    "insertText": "_mm_or_si128(nan_payload, c_nanbit)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nanfinal =)",
    "insertText": "_mm_and_si128(_mm_castps_si128(b_isnan), nan_quiet)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i inf_or_nan =)",
    "insertText": "_mm_or_si128(nanfinal, c_infty_as_fp16)"
  },
  {
    "label": "_mm_cmpgt_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i b_issub =)",
    "insertText": "_mm_cmpgt_epi32(c_min_normal, absf_int)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (__m128 subnorm1 =)",
    "insertText": "_mm_add_ps(absf , __m128(_mm_castsi128_ps(c_subnorm_magic)))"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i subnorm2 =)",
    "insertText": "_mm_sub_epi32(_mm_castps_si128(subnorm1), c_subnorm_magic)"
  },
  {
    "label": "_mm_slli_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i mantoddbit =)",
    "insertText": "_mm_slli_epi32(absf_int, 31 - 13)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i mantodd =)",
    "insertText": "_mm_srai_epi32(mantoddbit, 31)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i round1 =)",
    "insertText": "_mm_add_epi32(absf_int, c_normal_bias)"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i round2 =)",
    "insertText": "_mm_sub_epi32(round1, mantodd)"
  },
  {
    "label": "_mm_srli_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i normal =)",
    "insertText": "_mm_srli_epi32(round2, 13)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nonspecial =)",
    "insertText": "_mm_or_si128(_mm_and_si128(subnorm2, b_issub), _mm_andnot_si128(b_issub, normal))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i joined =)",
    "insertText": "_mm_or_si128(_mm_and_si128(nonspecial, b_isregular), _mm_andnot_si128(b_isregular, inf_or_nan))"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i sign_shift =)",
    "insertText": "_mm_srai_epi32(_mm_castps_si128(justsign), 16)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i rgba_half32 =)",
    "insertText": "_mm_or_si128(joined, sign_shift)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i four_halfs_u64 =)",
    "insertText": "_mm_packs_epi32(rgba_half32, rgba_half32)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i rgba_half32 =)",
    "insertText": "_mm_unpacklo_epi16(four_halfs_u64, _mm_setzero_si128())"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i mask_nosign =)",
    "insertText": "_mm_set1_epi32(0x7fff)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 magic_mult =)",
    "insertText": "_mm_castsi128_ps(_mm_set1_epi32((254 - 15) << 23))"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i was_infnan =)",
    "insertText": "_mm_set1_epi32(0x7bff)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 exp_infnan =)",
    "insertText": "_mm_castsi128_ps(_mm_set1_epi32(255 << 23))"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i nan_quiet =)",
    "insertText": "_mm_set1_epi32(1 << 22)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (__m128i expmant =)",
    "insertText": "_mm_and_si128(mask_nosign, rgba_half32)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i justsign =)",
    "insertText": "_mm_xor_si128(rgba_half32, expmant)"
  },
  {
    "label": "_mm_slli_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i shifted =)",
    "insertText": "_mm_slli_epi32(expmant, 13)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (__m128 scaled =)",
    "insertText": "_mm_mul_ps(_mm_castsi128_ps(shifted), magic_mult)"
  },
  {
    "label": "_mm_cmpgt_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i b_wasinfnan =)",
    "insertText": "_mm_cmpgt_epi32(expmant, was_infnan)"
  },
  {
    "label": "_mm_slli_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i sign =)",
    "insertText": "_mm_slli_epi32(justsign, 16)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (__m128 infnanexp =)",
    "insertText": "_mm_and_ps(_mm_castsi128_ps(b_wasinfnan), exp_infnan)"
  },
  {
    "label": "_mm_cmpgt_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i b_wasnan =)",
    "insertText": "_mm_cmpgt_epi32(expmant, was_nan)"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nanquiet =)",
    "insertText": "_mm_and_si128(b_wasnan, nan_quiet)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (__m128 infnandone =)",
    "insertText": "_mm_or_ps(infnanexp, _mm_castsi128_ps(nanquiet))"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (__m128 sign_inf =)",
    "insertText": "_mm_or_ps(_mm_castsi128_ps(sign), infnandone)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (__m128 result =)",
    "insertText": "_mm_or_ps(scaled, sign_inf)"
  },
  {
    "label": "TruncToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TruncToInt64(double F)"
  },
  {
    "label": "RoundToInt32()",
    "kind": "Method",
    "detail": "Function (} template<T> int32)",
    "insertText": "RoundToInt32(T F)"
  },
  {
    "label": "RoundToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToInt64(double F)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (} template<T> int32)",
    "insertText": "FloorToInt32(T F)"
  },
  {
    "label": "FloorToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FloorToInt64(double F)"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (} template<T> int32)",
    "insertText": "CeilToInt32(T F)"
  },
  {
    "label": "CeilToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CeilToInt64(double F)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TruncToInt(float F)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TruncToInt(double F)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FloorToInt(float F)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FloorToInt(double F)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt(float F)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToInt(double F)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CeilToInt(float F)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CeilToInt(double F)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "InvSqrt(T F)"
  },
  {
    "label": "InvSqrtEst()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "InvSqrtEst(T F)"
  },
  {
    "label": "VectorStoreHalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreHalf(uint16* RESTRICT Dst, const float* RESTRICT Src)"
  },
  {
    "label": "_mm_storeu_si64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si64((__m128i*)Dst, UE4::SSE::FloatToHalf(_mm_loadu_ps(Src)))"
  },
  {
    "label": "VectorLoadHalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorLoadHalf(float* RESTRICT Dst, const uint16* RESTRICT Src)"
  },
  {
    "label": "_mm_storeu_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_ps(Dst, UE4::SSE::HalfToFloat(_mm_loadu_si64((__m128i*)Src)))"
  }
]