[
  {
    "label": "_malloc_zone_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_malloc_zone_t"
  },
  {
    "label": "MallocZoneFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MallocZoneFunctions"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_MALLOC_ZONE_FUNCTIONS_MAC_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_MALLOC_ZONE_FUNCTIONS_MAC_H_ # include<malloc / malloc . h> # include<stddef . h> # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / base_export . h \" # include \" third_party / apple_apsl / malloc . h \" namespace allocator_shim { typedef)",
    "insertText": "void(*malloc_type)(struct _malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*calloc_type)(struct _malloc_zone_t* zone, size_t num_items, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*valloc_type)(struct _malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*free_type)(struct _malloc_zone_t* zone, void* ptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*realloc_type)(struct _malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*memalign_type)(struct _malloc_zone_t* zone, size_t alignment, size_t size)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "unsigned(*batch_malloc_type)(struct _malloc_zone_t* zone, size_t size, void** results, unsigned num_requested)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*batch_free_type)(struct _malloc_zone_t* zone, void** to_be_freed, unsigned num_to_be_freed)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*free_definite_size_type)(struct _malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "size_t(*size_fn_type)(struct _malloc_zone_t* zone, const void* ptr)"
  },
  {
    "label": "StoreZoneFunctions()",
    "kind": "Method",
    "detail": "Function (struct MallocZoneFunctions { malloc_type malloc ; calloc_type calloc ; valloc_type valloc ; free_type free ; realloc_type realloc ; memalign_type memalign ; batch_malloc_type batch_malloc ; batch_free_type batch_free ; free_definite_size_type free_definite_size ; size_fn_type size ; const ChromeMallocZone* context ; } ; BASE_EXPORT void)",
    "insertText": "StoreZoneFunctions(const ChromeMallocZone* zone, MallocZoneFunctions* functions)"
  },
  {
    "label": "StoreMallocZone()",
    "kind": "Method",
    "detail": "Function (int kMaxZoneCount = 3 0 ; BASE_EXPORT MallocZoneFunctions g_malloc_zones [ kMaxZoneCount ] ; BASE_EXPORT bool)",
    "insertText": "StoreMallocZone(ChromeMallocZone* zone)"
  },
  {
    "label": "IsMallocZoneAlreadyStored()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "IsMallocZoneAlreadyStored(ChromeMallocZone* zone)"
  },
  {
    "label": "DoesMallocZoneNeedReplacing()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "DoesMallocZoneNeedReplacing(ChromeMallocZone* zone, const MallocZoneFunctions* functions)"
  },
  {
    "label": "GetMallocZoneCountForTesting()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT int)",
    "insertText": "GetMallocZoneCountForTesting()"
  },
  {
    "label": "ClearAllMallocZonesForTesting()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ClearAllMallocZonesForTesting()"
  },
  {
    "label": "GetFunctionsForZone()",
    "kind": "Method",
    "detail": "Function (MallocZoneFunctions&)",
    "insertText": "GetFunctionsForZone(void* zone)"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_IMMEDIATE_CRASH()"
  }
]