[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "STrackNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackNode"
  },
  {
    "label": "FTrackNodeDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackNodeDragDropOp"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "STrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrack"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Fonts / SlateFontInfo . h \" # include \" HAL / PlatformMath . h \" # include \" Input / CursorReply . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Children . h \" # include \" Layout / Geometry . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Styling / AppStyle . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SPanel . h \" # include \" DragAndDrop / AssetDragDropOp . h \" class FArrangedChildren ; class FChildren ; class FMenuBuilder ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FUICommandList ; class FWidgetStyle ; class SWidget ; class UObject ; class UAnimSequenceBase ; struct FPointerEvent ; struct FSlateBrush ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSelectionChanged, const TArray<UObject*>& ) DECLARE_DELEGATE( FOnNodeSelectionChanged ) DECLARE_DELEGATE( FOnUpdatePanel ) DECLARE_DELEGATE_RetVal_TwoParams( bool, FOnGetBarPos, int32, float& ) DECLARE_DELEGATE_OneParam( FOnBarClicked, int32) DECLARE_DELEGATE_TwoParams( FOnBarDrag, int32, float) DECLARE_DELEGATE_OneParam( FOnBarDrop, int32 ) DECLARE_DELEGATE_TwoParams( FOnTrackDragDop, TSharedPtr<FDragDropOperation>, float ) DECLARE_DELEGATE_RetVal_OneParam( bool, FOnAssetDragDrop, TSharedPtr<FAssetDragDropOp>) DECLARE_DELEGATE_RetVal_TwoParams(bool, FIsAnimAssetValid, const UAnimSequenceBase*, FText* OutReason) DECLARE_DELEGATE_RetVal( FString, FOnGetNodeName ) DECLARE_DELEGATE_OneParam( FOnTrackNodeDragged, float ) DECLARE_DELEGATE( FOnTrackNodeDropped ) DECLARE_DELEGATE( FOnTrackNodeClicked ) DECLARE_DELEGATE( FOnTrackNodeDoubleClicked ) DECLARE_DELEGATE_RetVal_TwoParams( TSharedPtr<SWidget>, FOnSummonContextMenu, const FGeometry&, const FPointerEvent&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnTrackRightClickContextMenu, FMenuBuilder&, float, int32 ) DECLARE_DELEGATE_OneParam( FOnNodeRightClickContextMenu, FMenuBuilder&)"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (class FTrackNodeDragDropOp : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FTrackNodeDragDropOp, FDragDropOperation) virtual void OnDrop( bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const class FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTrackNodeDragDropOp>)",
    "insertText": "New(TSharedRef<STrackNode> TrackNode, const FVector2D &CursorPosition, const FVector2D &ScreenPositionOfNode)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "GetHoverText()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D Offset ; FVector2D StartingScreenPos ; TWeakPtr<class STrackNode> OriginalTrackNode ; TWeakPtr<class STrack> OriginalTrack ; FString)",
    "insertText": "GetHoverText()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString HoverText =)",
    "insertText": "TEXT(\"Invalid\")"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ATTRIBUTE( float, DataLength ) SLATE_ATTRIBUTE( float, DataStartPos ) SLATE_ATTRIBUTE( FString, NodeName ) SLATE_ATTRIBUTE( FLinearColor, NodeColor ) SLATE_ATTRIBUTE( FLinearColor, SelectedNodeColor ) SLATE_ARGUMENT( STrackNodeSelectionSet *, NodeSelectionSet ) SLATE_ARGUMENT( bool, AllowDrag ) SLATE_EVENT( FOnTrackNodeDragged, OnTrackNodeDragged ) SLATE_EVENT( FOnTrackNodeDropped, OnTrackNodeDropped ) SLATE_EVENT( FOnNodeSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FOnNodeRightClickContextMenu, OnNodeRightClickContextMenu ) SLATE_EVENT( FOnTrackNodeClicked, OnTrackNodeClicked ) SLATE_EVENT( FOnTrackNodeDoubleClicked, OnTrackNodeDoubleClicked) SLATE_ARGUMENT( bool, CenterOnPosition ) SLATE_NAMED_SLOT(FArguments, OverrideContent) SLATE_END_ARGS() void Construct(const FArguments& Declaration)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "GetOffsetRelativeToParent()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetOffsetRelativeToParent(const FGeometry& ParentAllottedGeometry)"
  },
  {
    "label": "GetSizeRelativeToParent()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetSizeRelativeToParent(const FGeometry& ParentAllottedGeometry)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDropCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropCancelled(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "BeginDrag()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "BeginDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDragDropScreenSpacePosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetDragDropScreenSpacePosition(const FGeometry& ParentAllottedGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTest(const FGeometry& AllottedGeometry, FVector2D MouseLocalPose)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetDataStartPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDataStartPos()"
  },
  {
    "label": "SnapToDragBars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapToDragBars()"
  },
  {
    "label": "CacheTrackGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheTrackGeometry(const FGeometry& TrackGeometry)"
  },
  {
    "label": "GetTrackGeometry()",
    "kind": "Method",
    "detail": "Function (CachedTrackGeometry = TrackGeometry ; } const FGeometry&)",
    "insertText": "GetTrackGeometry()"
  },
  {
    "label": "GetNodeColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeColor()"
  },
  {
    "label": "GetNodeText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNodeText()"
  },
  {
    "label": "ToggleSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelect()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select()"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deselect()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bool bSelectedFallback ; STrackNodeSelectionSet* NodeSelectionSet ; TAttribute<FString> NodeName ; TAttribute<float> DataStartPos ; TAttribute<float> DataLength ; TAttribute<float> ViewInputMin ; TAttribute<float> ViewInputMax ; FOnNodeSelectionChanged OnNodeSelectionChanged ; TAttribute<FLinearColor> NodeColor ; TAttribute<FLinearColor> SelectedNodeColor ; FOnTrackNodeDragged OnTrackNodeDragged ; FOnTrackNodeDropped OnTrackNodeDropped ; FOnTrackNodeClicked OnTrackNodeClicked ; FOnTrackNodeDoubleClicked OnTrackNodeDoubleClicked ; FOnNodeRightClickContextMenu OnNodeRightClickContextMenu ; FSlateFontInfo Font ; FVector2D LastSize ; FGeometry CachedTrackGeometry ; float DistanceDragged ; bool bBeingDragged ; bool bCenterOnPosition ; bool bAllowDrag ; bool bContentOverriden ; class STrack ; } ; class STrack : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STrack ) : _ViewInputMin() , _ViewInputMax() , _TrackMaxValue() , _TrackMinValue() , _TrackNumDiscreteValues() , _TrackColor(FLinearColor::White) , _OnSelectionChanged() , _DraggableBars() , _DraggableBarSnapPositions() , _DraggableBarLabels() , _OnBarDrag() , _OnTrackDragDrop() , _OnSummonContextMenu() , _OnTrackRightClickContextMenu() , _StyleInfo(FAppStyle::GetBrush( TEXT( \"Persona.NotifyEditor.NotifyTrackBackground\" )))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ATTRIBUTE( float, TrackMaxValue ) SLATE_ATTRIBUTE( float, TrackMinValue ) SLATE_ATTRIBUTE( int32, TrackNumDiscreteValues ) SLATE_ARGUMENT( FLinearColor, TrackColor ) SLATE_EVENT( FOnNodeSelectionChanged, OnSelectionChanged ) SLATE_ATTRIBUTE( TArray<float>, DraggableBars ) SLATE_ATTRIBUTE( TArray<float>, DraggableBarSnapPositions ) SLATE_ATTRIBUTE( TArray<FString>, DraggableBarLabels ) SLATE_EVENT( FOnBarDrag, OnBarDrag) SLATE_EVENT( FOnBarClicked, OnBarClicked) SLATE_EVENT( FOnTrackDragDop, OnTrackDragDrop ) SLATE_EVENT( FOnAssetDragDrop, OnAssetDragDrop ) SLATE_EVENT( FOnBarDrop, OnBarDrop ) SLATE_EVENT( FOnSummonContextMenu, OnSummonContextMenu ) SLATE_EVENT( FOnTrackRightClickContextMenu, OnTrackRightClickContextMenu ) SLATE_ARGUMENT( const FSlateBrush*, StyleInfo ) SLATE_END_ARGS() STrack()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetHitNode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHitNode(const FGeometry& MyGeometry, const FVector2D& CursorPosition)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "AddTrackNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackNode(TSharedRef<STrackNode> Node)"
  },
  {
    "label": "ClearTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTrack()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetSelectedNodeIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedNodeIndices(TArray<int32>& OutIndices)"
  },
  {
    "label": "GetDraggableBarSnapPosition()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetDraggableBarSnapPosition(const FGeometry& MyGeometry, float &OutPosition)"
  },
  {
    "label": "SummonContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "SummonContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetNodeDragDropDataPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNodeDragDropDataPos(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetSnappedPosForLocalPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSnappedPosForLocalPos(const FGeometry& MyGeometry, float TrackPos)"
  },
  {
    "label": "UpdateDraggableBarIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDraggableBarIndex(const FGeometry& MyGeometry, FVector2D CursorScreenPos)"
  },
  {
    "label": "DataToLocalX()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DataToLocalX(float Data, const FGeometry& MyGeometry)"
  },
  {
    "label": "LocalToDataX()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LocalToDataX(float Input, const FGeometry& MyGeometry)"
  }
]