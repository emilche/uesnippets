[
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "vp8_start_encode()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_ENCODER_BOOLHUFF_H_ # define VPX_VP8_ENCODER_BOOLHUFF_H_ # include \" vpx_ports / mem . h \" # include \" vpx / internal / vpx_codec_internal . h \" # ifdef __cplusplus \" C \" { # endif typedef struct { unsigned int lowvalue ; unsigned int range ; int count ; unsigned int pos ; unsigned char* buffer ; unsigned char* buffer_end ; struct vpx_internal_error_info* error ; } BOOL_CODER ; void)",
    "insertText": "vp8_start_encode(BOOL_CODER *bc, unsigned char *source, unsigned char *source_end)"
  },
  {
    "label": "vp8_encode_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_encode_value(BOOL_CODER *bc, int data, int bits)"
  },
  {
    "label": "vp8_stop_encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_stop_encode(BOOL_CODER *bc)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (const unsigned int vp8_prob_cost [ 2 5 6 ] ;)",
    "insertText": "DECLARE_ALIGNED(16, extern const unsigned char, vp8_norm[256])"
  },
  {
    "label": "validate_buffer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "validate_buffer(const unsigned char *start, size_t len, const unsigned char *end, struct vpx_internal_error_info *error)"
  },
  {
    "label": "vp8_encode_bool()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "vp8_encode_bool(BOOL_CODER *bc, int bit, int probability)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (unsigned int split ; int count = bc -> count ; unsigned int range = bc -> range ; unsigned int lowvalue = bc -> lowvalue ; int shift ;)",
    "insertText": "split(((range - 1) * probability) >> 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (range = split ;)",
    "insertText": "if(bit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lowvalue + = split ; range = bc -> range - split ; } shift = vp8_norm [ range ] ; range<<= shift ; count + = shift ;)",
    "insertText": "if(count >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int offset = shift - count ;)",
    "insertText": "if((lowvalue << (offset - 1)) & 0x80000000)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int x = bc -> pos - 1 ;)",
    "insertText": "while(x >= 0 && bc->buffer[x] == 0xff)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (bc -> buffer [)",
    "insertText": "x(unsigned char)"
  },
  {
    "label": "validate_buffer()",
    "kind": "Method",
    "detail": "Function (x - - ; } bc -> buffer [ x ] + = 1 ; })",
    "insertText": "validate_buffer(bc->buffer + bc->pos, 1, bc->buffer_end, bc->error)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (bc -> buffer [ bc ->)",
    "insertText": "pos(lowvalue >> (24 - offset) & 0xff)"
  },
  {
    "label": "lowvalue()",
    "kind": "Method",
    "detail": "Function (shift = count ;)",
    "insertText": "lowvalue(int)(((uint64_t)lowvalue << offset) & 0xffffff)"
  }
]