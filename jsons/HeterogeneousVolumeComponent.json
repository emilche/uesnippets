[
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "UHeterogeneousVolumeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHeterogeneousVolumeComponent"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "AHeterogeneousVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHeterogeneousVolume"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / MeshComponent . h \" # include \" EngineDefines . h \" # include \" GameFramework / Info . h \" # include \" Misc / Guid . h \" # include \" RenderResource . h \" # include \" HeterogeneousVolumeComponent . generated . h \" class USparseVolumeTexture ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup = (Rendering, Common), hidecategories = (Object, Activation, \"Components|Activation\"), ShowCategories = (Mobility), editinlinenew, meta = (BlueprintSpawnableComponent),MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Volume)"
  },
  {
    "label": "UHeterogeneousVolumeComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UHeterogeneousVolumeComponent()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (} public : FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostReinitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReinitProperties()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (# endif FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "ShouldRenderSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSelected()"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, class UMaterialInterface* Material)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetSparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (private : const USparseVolumeTexture* PreviousSVT ; USparseVolumeTexture*)",
    "insertText": "GetSparseVolumeTexture(UMaterialInterface* MaterialInterface, int32 ParameterIndex, FName* OutParamName = nullptr)"
  },
  {
    "label": "CreateOrCastToMID()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceDynamic*)",
    "insertText": "CreateOrCastToMID(UMaterialInterface* MaterialInterface)"
  },
  {
    "label": "OnSparseVolumeTextureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSparseVolumeTextureChanged(const USparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "GetHeterogeneousVolumeMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetHeterogeneousVolumeMaterial()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(showcategories = (Movement, Rendering, Transformation, DataLayers, \"Input|MouseInput\", \"Input|TouchInput\"), ClassGroup = Fog, hidecategories = (Info, Object, Input), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = Volume, meta = (AllowPrivateAccess = \"true\"))"
  },
  {
    "label": "ActorTypeSupportsDataLayer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "ActorTypeSupportsDataLayer()"
  }
]