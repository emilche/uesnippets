[
  {
    "label": "FNetTraceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceCollector"
  },
  {
    "label": "FBitReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitReader"
  },
  {
    "label": "FBitWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitWriter"
  },
  {
    "label": "FNetBitStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamReader"
  },
  {
    "label": "FNetBitStreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetTracePacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTracePacketInfo"
  },
  {
    "label": "FNetTracePacketContentEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTracePacketContentEvent"
  },
  {
    "label": "FNetTraceEventScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceEventScope"
  },
  {
    "label": "FNetTraceNullEventScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceNullEventScope"
  },
  {
    "label": "FNetTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTrace"
  },
  {
    "label": "TChooseTraceEventScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TChooseTraceEventScope"
  },
  {
    "label": "FNetTraceBunchScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceBunchScope"
  },
  {
    "label": "FNetTraceOffsetScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceOffsetScope"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / Trace / NetTraceConfig . h \" # if UE_NET_TRACE_ENABLED # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / NetworkGuid . h \" # include \" Net / Core / Trace / NetDebugName . h \" # include \" UObject / NameTypes . h \" class FNetTraceCollector ; struct FBitReader ; struct FBitWriter ; namespace UE::Net { class FNetBitStreamReader ; class FNetBitStreamWriter ; } uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const UE::Net::FNetBitStreamReader& Stream)"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const UE::Net::FNetBitStreamWriter& Stream)"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const FBitReader& Stream)"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const FBitWriter& Stream)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint64 bOpen : 1 ; uint64 bClose : 1 ; uint64 bReliable : 1 ; uint64 bHasPackageMapExports : 1 ; uint64 bHasMustBeMappedGUIDs : 1 ; uint64 Padding : 1 8 ; } ; uint64 Value ; } ; struct FNetTracePacketContentEvent { union { UE::Net::FNetDebugNameId DebugNameId ; uint64 ObjectId ; FNetTraceBunchInfo BunchInfo ; } ; struct { uint32 StartPos : 2 4 ; uint32 EventType : 8 ; uint32 EndPos : 2 4 ; uint32 NestingLevel : 8 ; } ; } ;)",
    "insertText": "static_assert(sizeof(FNetTracePacketContentEvent) == 16U, \"Unexpected size of PacketContentEvent\")"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (template<T> class FNetTraceEventScope {)",
    "insertText": "UE_NONCOPYABLE(FNetTraceEventScope) public: FNetTraceEventScope(uint64 ObjectId, T& InStream, FNetTraceCollector* InCollector, uint32 Verbosity)"
  },
  {
    "label": "FNetTraceEventScope()",
    "kind": "Method",
    "detail": "Function (template<TraceNameFunctor>)",
    "insertText": "FNetTraceEventScope(TraceNameFunctor&& TraceNameFunc, T& InStream, FNetTraceCollector* InCollector, uint32 Verbosity)"
  },
  {
    "label": "FNetTraceEventScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetTraceEventScope()"
  },
  {
    "label": "SetEventName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventName(UE::Net::FNetDebugNameId NetTraceNameId)"
  },
  {
    "label": "SetEventObjectId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventObjectId(uint64 ObjectId)"
  },
  {
    "label": "ExitScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitScope()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (private : FNetTraceCollector* Collector ; T& Stream ; uint32 EventIndex ; } ; template<T> class FNetTraceNullEventScope {)",
    "insertText": "UE_NONCOPYABLE(FNetTraceNullEventScope) public: template <typename SinkT> FNetTraceNullEventScope(SinkT, T& InStream, FNetTraceCollector* InCollector, uint32 Verbosity)"
  },
  {
    "label": "FNetTraceNullEventScope()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FNetTraceNullEventScope()"
  },
  {
    "label": "SetTraceVerbosity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTraceVerbosity(uint32 Verbosity)"
  },
  {
    "label": "TraceEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceEndSession(uint32 GameInstanceId)"
  },
  {
    "label": "TraceInstanceUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceInstanceUpdated(uint32 GameInstanceId, bool bIsServer, const TCHAR* Name)"
  },
  {
    "label": "GetTraceVerbosity()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTraceVerbosity()"
  },
  {
    "label": "CreateTraceCollector()",
    "kind": "Method",
    "detail": "Function (FNetTraceCollector*)",
    "insertText": "CreateTraceCollector(uint32 Verbosity)"
  },
  {
    "label": "DestroyTraceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTraceCollector(FNetTraceCollector* Collector)"
  },
  {
    "label": "FoldTraceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoldTraceCollector(FNetTraceCollector* DstCollector, const FNetTraceCollector* SrcCollector, uint32 Offset)"
  },
  {
    "label": "FoldBunchCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoldBunchCollector(FNetTraceCollector* DstCollector, const FNetTraceCollector* SrcCollector)"
  },
  {
    "label": "PushStreamOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStreamOffset(FNetTraceCollector* Collector, uint32 Offset)"
  },
  {
    "label": "PopStreamOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopStreamOffset(FNetTraceCollector* Collector)"
  },
  {
    "label": "BeginPacketContentEvent()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "BeginPacketContentEvent(FNetTraceCollector& Collector, ENetTracePacketContentEventType EventType, uint32 Pos)"
  },
  {
    "label": "EndPacketContentEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPacketContentEvent(FNetTraceCollector& Collector, uint32 EventIndex, uint32 Pos)"
  },
  {
    "label": "TracePacketContentEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacketContentEvent(FNetTraceCollector& Collector, UE::Net::FNetDebugNameId InNetTraceNameId, uint32 StartPos, uint32 EndPos, uint32 Verbosity)"
  },
  {
    "label": "BeginBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBunch(FNetTraceCollector& Collector)"
  },
  {
    "label": "DiscardBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardBunch(FNetTraceCollector& Collector)"
  },
  {
    "label": "EndBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBunch(FNetTraceCollector& DstCollector, UE::Net::FNetDebugNameId BunchName, uint32 StartPos, uint32 HeaderBits, uint32 BunchBits, const FNetTraceBunchInfo& BunchInfo)"
  },
  {
    "label": "TraceBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceBunch(FNetTraceCollector& DstCollector, const FNetTraceBunchInfo& BunchInfo, FName BunchName, uint32 StartPos, uint32 HeaderBits, uint32 BunchBits, const FNetTraceCollector* BunchCollector)"
  },
  {
    "label": "TraceBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceBunch(FNetTraceCollector& DstCollector, const FNetTraceBunchInfo& BunchInfo, const TCHAR* BunchName, uint32 StartPos, uint32 HeaderBits, uint32 BunchBits, const FNetTraceCollector* BunchCollector)"
  },
  {
    "label": "PopSendBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSendBunch(FNetTraceCollector& Collector)"
  },
  {
    "label": "TraceCollectedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceCollectedEvents(FNetTraceCollector& Collector, uint32 GameInstanceId, uint32 ConnectionId, ENetTracePacketType PacketType)"
  },
  {
    "label": "TracePacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacketDropped(uint32 GameInstanceId, uint32 ConnectionId, uint32 PacketSequenceNumber, ENetTracePacketType PacketType)"
  },
  {
    "label": "TracePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacket(uint32 GameInstanceId, uint32 ConnectionId, uint32 PacketSequenceNumber, uint32 PacketBits, ENetTracePacketType PacketType)"
  },
  {
    "label": "TraceObjectCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceObjectCreated(uint32 GameInstanceId, uint64 NetObjectId, const UE::Net::FNetDebugName* Name, uint64 TypeIdentifier, uint32 OwnerId)"
  },
  {
    "label": "TraceObjectCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceObjectCreated(uint32 GameInstanceId, uint64 NetObjectId, const FName Name, uint64 TypeIdentifier, uint32 OwnerId)"
  },
  {
    "label": "TraceObjectDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceObjectDestroyed(uint32 GameInstanceId, uint64 NetObjectId)"
  },
  {
    "label": "TraceConnectionCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConnectionCreated(uint32 GameInstanceId, uint32 ConnectionId)"
  },
  {
    "label": "TraceConnectionStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConnectionStateUpdated(uint32 GameInstanceId, uint32 ConnectionId, uint8 ConnectionStateValue)"
  },
  {
    "label": "TraceConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConnectionUpdated(uint32 GameInstanceId, uint32 ConnectionId, const TCHAR* AddressString, const TCHAR* OwningActor)"
  },
  {
    "label": "TraceConnectionClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConnectionClosed(uint32 GameInstanceId, uint32 ConnectionId)"
  },
  {
    "label": "TracePacketStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracePacketStatsCounter(uint32 GameInstanceId, uint32 ConnectionId, UE::Net::FNetDebugNameId CounterNameId, uint32 StatValue)"
  },
  {
    "label": "TraceFrameStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceFrameStatsCounter(uint32 GameInstanceId, UE::Net::FNetDebugNameId CounterNameId, uint32 StatValue)"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (UE::Net::FNetDebugNameId)",
    "insertText": "TraceName(const TCHAR* Name)"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (UE::Net::FNetDebugNameId)",
    "insertText": "TraceName(FName Name)"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (UE::Net::FNetDebugNameId)",
    "insertText": "TraceName(const UE::Net::FNetDebugName* Name)"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (UE::Net::FNetDebugNameId)",
    "insertText": "TraceName(const FString& Name)"
  },
  {
    "label": "GetNetTraceVerbosityEnabled()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetNetTraceVerbosityEnabled(const uint32 V)"
  },
  {
    "label": "GetCollectorAtVerbosity()",
    "kind": "Method",
    "detail": "Function (} FNetTraceCollector*)",
    "insertText": "GetCollectorAtVerbosity(FNetTraceCollector* Collector, uint32 CollectorVerbosity)"
  },
  {
    "label": "GetNetTraceVerbosityEnabled()",
    "kind": "Method",
    "detail": "Function (template<uint32 Verbosity,StreamType> struct TChooseTraceEventScope { typedef std::conditional_t<)",
    "insertText": "GetNetTraceVerbosityEnabled(Verbosity)"
  },
  {
    "label": "GetObjectIdForNetTrace()",
    "kind": "Method",
    "detail": "Function (} ; } ; template<T> uint64)",
    "insertText": "GetObjectIdForNetTrace(const T&)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (FNetTraceBunchInfo BunchInfo ; BunchInfo . Value =)",
    "insertText": "uint64(0)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (BunchInfo . ChannelIndex = Bunch . ChIndex ; BunchInfo . Seq = Bunch . ChSequence ; BunchInfo . ChannelCloseReason =)",
    "insertText": "uint64(Bunch.CloseReason)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (BunchInfo . bPartial = Bunch . bPartial ; BunchInfo . bPartialInitial = Bunch . bPartialInitial ; BunchInfo . bPartialCustomExportsFinal = Bunch . bPartialCustomExportsFinal ; BunchInfo . bPartialFinal = Bunch . bPartialFinal ; PRAGMA_DISABLE_DEPRECATION_WARNINGS BunchInfo . bIsReplicationPaused = Bunch . bIsReplicationPaused ; PRAGMA_ENABLE_DEPRECATION_WARNINGS BunchInfo . bOpen = Bunch . bOpen ; BunchInfo . bClose = Bunch . bClose ; BunchInfo . bReliable = Bunch . bReliable ; BunchInfo . bHasPackageMapExports = Bunch . bHasPackageMapExports ; BunchInfo . bHasMustBeMappedGUIDs = Bunch . bHasMustBeMappedGUIDs ; BunchInfo . Padding = 0 ; return BunchInfo ; } class FNetTraceCollector {)",
    "insertText": "UE_NONCOPYABLE(FNetTraceCollector)"
  },
  {
    "label": "FNetTraceCollector()",
    "kind": "Method",
    "detail": "Function (MaxNestingLevel = 3 2 } ; enum { InlinedEventCount = 2 5 6 } ;)",
    "insertText": "FNetTraceCollector(uint32 InitialEventCount)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Events .)",
    "insertText": "SetNumUninitialized(InitialEventCount)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FNetTraceCollector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetTraceCollector() : FNetTraceCollector(InlinedEventCount)"
  },
  {
    "label": "EditEvent()",
    "kind": "Method",
    "detail": "Function (FNetTracePacketContentEvent&)",
    "insertText": "EditEvent(uint32 Index)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} private : struct FNetTrace ; uint32 NestingStack [ MaxNestingLevel ] ; uint32 OffsetStack [ MaxNestingLevel ] ; uint32 EventCount ; uint32 CurrentNestingLevel : 1 6 ; uint32 OffsetStackLevel : 1 6 ; uint32 LastBunchEventIndex ; uint32 BunchEventCount ; uint32 PendingBunchEventIndex ; typedef TArray<FNetTracePacketContentEvent,TInlineAllocator<InlinedEventCount>> FEventArray ; FEventArray Events ; } ; template<T> class FNetTraceBunchScope {)",
    "insertText": "UE_NONCOPYABLE(FNetTraceBunchScope) public: FNetTraceBunchScope(T& InBunch, uint32 InStartPos, uint32 InHeaderBits, FNetTraceCollector* InCollector)"
  },
  {
    "label": "FNetTraceBunchScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetTraceBunchScope()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (private : FNetTraceCollector* Collector ; T& Bunch ; const uint32 StartPos ; const uint32 HeaderBits ; } ; class FNetTraceOffsetScope {)",
    "insertText": "UE_NONCOPYABLE(FNetTraceOffsetScope) public: FNetTraceOffsetScope(uint32 Offset, FNetTraceCollector* InCollector)"
  },
  {
    "label": "FNetTraceOffsetScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetTraceOffsetScope()"
  },
  {
    "label": "FNetTraceEventScope()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } template<T> FNetTraceEventScope<T)",
    "insertText": "FNetTraceEventScope(uint64 InObjectId, T& InStream, FNetTraceCollector* InCollector, uint32 Verbosity) : Collector(FNetTrace::GetCollectorAtVerbosity(InCollector, Verbosity)) , Stream(InStream) , EventIndex(FNetTrace::InvalidEventIndex)"
  },
  {
    "label": "BeginPacketContentEvent()",
    "kind": "Method",
    "detail": "Function (EventIndex =)",
    "insertText": "BeginPacketContentEvent(*Collector, ENetTracePacketContentEventType::Object, GetBitStreamPositionForNetTrace(Stream))"
  },
  {
    "label": "EditEventNoCheck()",
    "kind": "Method",
    "detail": "Function (Collector ->)",
    "insertText": "EditEventNoCheck(EventIndex)"
  },
  {
    "label": "FNetTraceEventScope()",
    "kind": "Method",
    "detail": "Function (} } template<T> template<TraceNameFunctor> FNetTraceEventScope<T)",
    "insertText": "FNetTraceEventScope(TraceNameFunctor&& TraceNameFunc, T& InStream, FNetTraceCollector* InCollector, uint32 Verbosity) : Collector(FNetTrace::GetCollectorAtVerbosity(InCollector, Verbosity)) , Stream(InStream) , EventIndex(FNetTrace::InvalidEventIndex)"
  },
  {
    "label": "BeginPacketContentEvent()",
    "kind": "Method",
    "detail": "Function (EventIndex =)",
    "insertText": "BeginPacketContentEvent(*Collector, ENetTracePacketContentEventType::NameId, GetBitStreamPositionForNetTrace(Stream))"
  },
  {
    "label": "EditEventNoCheck()",
    "kind": "Method",
    "detail": "Function (Collector ->)",
    "insertText": "EditEventNoCheck(EventIndex).DebugNameId = TraceNameFunc()"
  },
  {
    "label": "EndPacketContentEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPacketContentEvent(*Collector, EventIndex, GetBitStreamPositionForNetTrace(Stream))"
  },
  {
    "label": "BeginBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBunch(*InCollector)"
  },
  {
    "label": "EndBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBunch(*Collector, FNetTrace::TraceName(Bunch.ChName), StartPos, HeaderBits, (uint32)Bunch.GetNumBits(), MakeBunchInfo(Bunch))"
  },
  {
    "label": "FNetTraceOffsetScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FNetTraceOffsetScope(uint32 Offset, FNetTraceCollector* InCollector) : Collector(InCollector)"
  },
  {
    "label": "PushStreamOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStreamOffset(Collector, Offset)"
  },
  {
    "label": "PopStreamOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopStreamOffset(Collector)"
  },
  {
    "label": "UE_NET_TRACE_DO_IF()",
    "kind": "Method",
    "detail": "Function (EventCount = 0 U ; CurrentNestingLevel = 0 U ; LastBunchEventIndex = 0 U ; BunchEventCount = 0 U ; PendingBunchEventIndex = ~ 0 U ; OffsetStackLevel = 0 U ; OffsetStack [ 0 ] = 0 U ; } # define)",
    "insertText": "UE_NET_TRACE_DO_IF(Cond, x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (x ; } })",
    "insertText": "while(0) #define UE_NET_TRACE_INTERNAL_CREATE_COLLECTOR(Verbosity) (GNetTraceRuntimeVerbosity ? FNetTrace::CreateTraceCollector(Verbosity) : nullptr) #define UE_NET_TRACE_INTERNAL_DESTROY_COLLECTOR(Collector) UE_NET_TRACE_DO_IF(Collector, FNetTrace::DestroyTraceCollector(Collector)) #define UE_NET_TRACE_INTERNAL_FLUSH_COLLECTOR(Collector, ...) UE_NET_TRACE_DO_IF(Collector, FNetTrace::TraceCollectedEvents(*Collector, __VA_ARGS__)) #define UE_NET_TRACE_INTERNAL_BEGIN_BUNCH(Collector) UE_NET_TRACE_DO_IF(Collector, FNetTrace::BeginBunch(*Collector)) #define UE_NET_TRACE_INTERNAL_DISCARD_BUNCH(Collector) UE_NET_TRACE_DO_IF(Collector, FNetTrace::DiscardBunch(*Collector)) #define UE_NET_TRACE_INTERNAL_POP_SEND_BUNCH(Collector) UE_NET_TRACE_DO_IF(Collector, FNetTrace::PopSendBunch(*Collector)) #define UE_NET_TRACE_INTERNAL_EVENTS(Collector, SrcCollector, Stream) UE_NET_TRACE_DO_IF(Collector, FNetTrace::FoldTraceCollector(Collector, SrcCollector, GetBitStreamPositionForNetTrace(Stream))) #define UE_NET_TRACE_INTERNAL_END_BUNCH(Collector, Bunch, ...) UE_NET_TRACE_DO_IF(Collector, FNetTrace::TraceBunch(*Collector, MakeBunchInfo(Bunch), __VA_ARGS__)) #define UE_NET_TRACE_INTERNAL_BUNCH_SCOPE(Collector, Bunch, ...) FNetTraceBunchScope<decltype(Bunch)> PREPROCESSOR_JOIN(NetTraceBunchScope, __LINE__)(Bunch, __VA_ARGS__, Collector) #define UE_NET_TRACE_INTERNAL_SCOPE(Name, Stream, Collector, Verbosity) \\ auto PREPROCESSOR_JOIN(NetTraceNameFunc_, __LINE__) = []()"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (uint16 NameId =)",
    "insertText": "TraceName(TEXT(#Name))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; \\ FNetTrace::TChooseTraceEventScope<Verbosity,)",
    "insertText": "decltype(Stream)>::Type PREPROCESSOR_JOIN(NetTraceScope, __LINE__)(PREPROCESSOR_JOIN(NetTraceDynamicNameFunc_, __LINE__), Stream, Collector, Verbosity) #define UE_NET_TRACE_INTERNAL_NAMED_SCOPE(ScopeName, EventName, Stream, Collector, Verbosity) \\ auto PREPROCESSOR_JOIN(NetTraceNameFunc_, __LINE__) = []()"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (uint16 NameId =)",
    "insertText": "TraceName(TEXT(#EventName))"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (uint16 NameId =)",
    "insertText": "TraceName(EventName)"
  },
  {
    "label": "UE_NET_TRACE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_NET_TRACE_INTERNAL(Name, Collector, StartPos, EndPos, Verbosity)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ uint16)",
    "insertText": "PREPROCESSOR_JOIN(NetTraceNameId_, __LINE__) = FNetTrace::TraceName(TEXT(#Name))"
  },
  {
    "label": "TracePacketContentEvent()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TracePacketContentEvent(*Collector, PREPROCESSOR_JOIN(NetTraceNameId_, __LINE__), StartPos, EndPos, Verbosity)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } })",
    "insertText": "while(0) #define UE_NET_TRACE_INTERNAL_DYNAMIC_NAME(Name, Collector, StartPos, EndPos, Verbosity) UE_NET_TRACE_DO_IF(FNetTrace::GetCollectorAtVerbosity(Collector, Verbosity), FNetTrace::TracePacketContentEvent(*Collector, FNetTrace::TraceName(Name), StartPos, EndPos, Verbosity)) #define UE_NET_TRACE_INTERNAL_ASSIGNED_GUID(GameInstanceId, NetGUID, PathName, OwnerId) UE_NET_TRACE_DO_IF(GNetTraceRuntimeVerbosity, FNetTrace::TraceObjectCreated(GameInstanceId, GetObjectIdForNetTrace(NetGUID), PathName, 0U, OwnerId)) #define UE_NET_TRACE_INTERNAL_NETHANDLE_CREATED(Handle, DebugName, ProtocolId, OwnerId) FNetTrace::TraceObjectCreated(Handle.GetReplicationSystemId(), GetObjectIdForNetTrace(Handle), DebugName, ProtocolId, OwnerId) #define UE_NET_TRACE_INTERNAL_NETHANDLE_DESTROYED(Handle) FNetTrace::TraceObjectDestroyed(Handle.GetReplicationSystemId(), GetObjectIdForNetTrace(Handle)) #define UE_NET_TRACE_INTERNAL_CONNECTION_CREATED(...) FNetTrace::TraceConnectionCreated(__VA_ARGS__) #define UE_NET_TRACE_INTERNAL_CONNECTION_STATE_UPDATED(...) FNetTrace::TraceConnectionStateUpdated(__VA_ARGS__) #define UE_NET_TRACE_INTERNAL_CONNECTION_UPDATED(...) FNetTrace::TraceConnectionUpdated(__VA_ARGS__) #define UE_NET_TRACE_INTERNAL_CONNECTION_CLOSED(...) FNetTrace::TraceConnectionClosed(__VA_ARGS__) #define UE_NET_TRACE_INTERNAL_PACKET_DROPPED(...) UE_NET_TRACE_DO_IF(GNetTraceRuntimeVerbosity, FNetTrace::TracePacketDropped(__VA_ARGS__)) #define UE_NET_TRACE_INTERNAL_PACKET_SEND(...) UE_NET_TRACE_DO_IF(GNetTraceRuntimeVerbosity, FNetTrace::TracePacket(__VA_ARGS__, ENetTracePacketType::Outgoing)) #define UE_NET_TRACE_INTERNAL_PACKET_RECV(...) UE_NET_TRACE_DO_IF(GNetTraceRuntimeVerbosity, FNetTrace::TracePacket(__VA_ARGS__, ENetTracePacketType::Incoming)) #define UE_NET_TRACE_INTERNAL_PACKET_STATSCOUNTER(GameInstanceId, ConnectionId, Name, StatValue, Verbosity)"
  },
  {
    "label": "TracePacketStatsCounter()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TracePacketStatsCounter(GameInstanceId, ConnectionId, PREPROCESSOR_JOIN(NetTraceNameId_, __LINE__), StatValue)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } })",
    "insertText": "while(0) #define UE_NET_TRACE_INTERNAL_FRAME_STATSCOUNTER(GameInstanceId, Name, StatValue, Verbosity)"
  },
  {
    "label": "TraceFrameStatsCounter()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TraceFrameStatsCounter(GameInstanceId, PREPROCESSOR_JOIN(NetTraceNameId_, __LINE__), StatValue)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } })",
    "insertText": "while(0) #define UE_NET_TRACE_INTERNAL_END_SESSION(GameInstanceId) FNetTrace::TraceEndSession(GameInstanceId)"
  }
]