[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "BranchProbabilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchProbabilityInfo"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineBranchProbabilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBranchProbabilityInfo"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoop"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "IrreducibleGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IrreducibleGraph"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "BlockMass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockMass"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BlockFrequencyInfoImplBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFrequencyInfoImplBase"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BlockNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockNode"
  },
  {
    "label": "FrequencyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrequencyData"
  },
  {
    "label": "LoopData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoopData"
  },
  {
    "label": "It1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "It1"
  },
  {
    "label": "It2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "It2"
  },
  {
    "label": "WorkingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkingData"
  },
  {
    "label": "Weight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Weight"
  },
  {
    "label": "DistType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DistType"
  },
  {
    "label": "collates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "collates"
  },
  {
    "label": "Distribution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Distribution"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "TypeMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeMap"
  },
  {
    "label": "TypeMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeMap"
  },
  {
    "label": "TypeMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeMap"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "IrreducibleGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IrreducibleGraph"
  },
  {
    "label": "IrrNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IrrNode"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BlockFrequencyInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFrequencyInfoImpl"
  },
  {
    "label": "bfi_detail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bfi_detail"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BlockEdgesAdder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockEdgesAdder"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BT"
  },
  {
    "label": "BlockMass()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "BlockMass()"
  },
  {
    "label": "BlockMass()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "BlockMass(UINT64_MAX)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isEmpty()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalize()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(const BlockNode &Node, uint64_t Amount, Weight::DistType Type)"
  },
  {
    "label": "addLoopSuccessorsToDist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addLoopSuccessorsToDist(const LoopData *OuterLoop, LoopData &Loop,\n                               Distribution &Dist)"
  },
  {
    "label": "addToDist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addToDist(Distribution &Dist, const LoopData *OuterLoop,\n                 const BlockNode &Pred, const BlockNode &Succ, uint64_t Weight)"
  },
  {
    "label": "analyzeIrreducible()",
    "kind": "Method",
    "detail": "Function (iterator_range<std::list<LoopData>::iterator>)",
    "insertText": "analyzeIrreducible(const bfi_detail::IrreducibleGraph &G, LoopData *OuterLoop,\n                     std::list<LoopData>::iterator Insert)"
  },
  {
    "label": "updateLoopWithIrreducible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateLoopWithIrreducible(LoopData &OuterLoop)"
  },
  {
    "label": "distributeMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "distributeMass(const BlockNode &Source, LoopData *OuterLoop,\n                      Distribution &Dist)"
  },
  {
    "label": "computeLoopScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeLoopScale(LoopData &Loop)"
  },
  {
    "label": "adjustLoopHeaderMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adjustLoopHeaderMass(LoopData &Loop)"
  },
  {
    "label": "packageLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "packageLoop(LoopData &Loop)"
  },
  {
    "label": "unwrapLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unwrapLoops()"
  },
  {
    "label": "finalizeMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finalizeMetrics()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "succ_begin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "succ_begin()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const BFIBase::LoopData *OuterLoop,\n                  BlockEdgesAdder addBlockEdges)"
  },
  {
    "label": "addNodesInLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNodesInLoop(const BFIBase::LoopData &OuterLoop)"
  },
  {
    "label": "addNodesInFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNodesInFunction()"
  },
  {
    "label": "indexNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "indexNodes()"
  },
  {
    "label": "addEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEdges(const BlockNode &Node, const BFIBase::LoopData *OuterLoop,\n                BlockEdgesAdder addBlockEdges)"
  },
  {
    "label": "addEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEdge(IrrNode &Irr, const BlockNode &Succ,\n               const BFIBase::LoopData *OuterLoop)"
  },
  {
    "label": "addBlockEdges()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "addBlockEdges(*this, Irr, OuterLoop)"
  },
  {
    "label": "initializeRPOT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeRPOT()"
  },
  {
    "label": "initializeLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeLoops()"
  },
  {
    "label": "propagateMassToSuccessors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "propagateMassToSuccessors(LoopData *OuterLoop, const BlockNode &Node)"
  },
  {
    "label": "computeMassInLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeMassInLoop(LoopData &Loop)"
  },
  {
    "label": "tryToComputeMassInFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tryToComputeMassInFunction()"
  },
  {
    "label": "computeIrreducibleMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeIrreducibleMass(LoopData *OuterLoop,\n                              std::list<LoopData>::iterator Insert)"
  },
  {
    "label": "computeMassInLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeMassInLoops()"
  },
  {
    "label": "computeMassInFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeMassInFunction()"
  },
  {
    "label": "doFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doFunction(const FunctionT *F, const BranchProbabilityInfoT *BPI,\n                  const LoopInfoT *LI)"
  },
  {
    "label": "addBlockEdges()",
    "kind": "Method",
    "detail": "Function (BlockEdgesAdder<BT>)",
    "insertText": "addBlockEdges(*this)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (IrreducibleGraph)",
    "insertText": "G(*this, OuterLoop, addBlockEdges)"
  }
]