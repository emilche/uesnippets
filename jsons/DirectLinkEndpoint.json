[
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "ISceneGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneGraphNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawInfo"
  },
  {
    "label": "FDataPointId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataPointId"
  },
  {
    "label": "DIRECTLINK_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIRECTLINK_API"
  },
  {
    "label": "FDataPointInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataPointInfo"
  },
  {
    "label": "FStreamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamInfo"
  },
  {
    "label": "IEndpointObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEndpointObserver"
  },
  {
    "label": "IConnectionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConnectionRequestHandler"
  },
  {
    "label": "FSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedState"
  },
  {
    "label": "FInternalThreadState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternalThreadState"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" DirectLinkCommon . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IMessageContext . h \" # include \" Misc / EngineVersion . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> class FMessageEndpoint ; namespace DirectLink { class ISceneGraphNode ; enum class ECommunicationStatus { NoIssue = 0,ModuleNotLoaded_Messaging = 1<<0,ModuleNotLoaded_UdpMessaging = 1<<1,ModuleNotLoaded_Networking = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECommunicationStatus) DIRECTLINK_API ECommunicationStatus ValidateCommunicationStatus()"
  },
  {
    "label": "FEndpointInfo()",
    "kind": "Method",
    "detail": "Function (struct FRawInfo { struct FDataPointId { FString Name ; FGuid Id ; bool bIsPublic = false ; } ; struct FEndpointInfo {)",
    "insertText": "FEndpointInfo()"
  },
  {
    "label": "IEndpointObserver()",
    "kind": "Method",
    "detail": "Function (FString Name ; FEngineVersion Version ; TArray<FDataPointId> Destinations ; TArray<FDataPointId> Sources ; FString UserName ; FString ExecutableName ; FString ComputerName ; bool bIsLocal = false ; uint32 ProcessId = 0 ; } ; struct FDataPointInfo { FMessageAddress EndpointAddress ; FString Name ; bool bIsSource = false ; bool bIsOnThisEndpoint = false ; bool bIsPublic = false ; } ; struct FStreamInfo { FStreamPort StreamId = InvalidStreamPort ; FGuid Source ; FGuid Destination ; EStreamConnectionState ConnectionState ; FCommunicationStatus CommunicationStatus ; } ; FMessageAddress ThisEndpointAddress ; TMap<FMessageAddress,FEndpointInfo> EndpointsInfo ; TMap<FGuid,FDataPointInfo> DataPointsInfo ; TArray<FStreamInfo> StreamsInfo ; } ; class IEndpointObserver { public : ~)",
    "insertText": "IEndpointObserver()"
  },
  {
    "label": "OnStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStateChanged(const FRawInfo& RawInfo)"
  },
  {
    "label": "FEndpoint()",
    "kind": "Method",
    "detail": "Function (} } ; using FSourceHandle = FGuid ; using FDestinationHandle = FGuid ; class FEndpoint : public FNoncopyable { public : enum class EOpenStreamResult { Opened,AlreadyOpened,SourceAndDestinationNotFound,RemoteEndpointNotFound,Unsuppported,CannotConnectToPrivate,} ; public :)",
    "insertText": "FEndpoint(const FString& InName)"
  },
  {
    "label": "FEndpoint()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEndpoint()"
  },
  {
    "label": "SetVerbose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerbose(bool bVerbose=true)"
  },
  {
    "label": "AddSource()",
    "kind": "Method",
    "detail": "Function (FSourceHandle)",
    "insertText": "AddSource(const FString& Name, EVisibility Visibility=EVisibility::Public)"
  },
  {
    "label": "RemoveSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSource(const FSourceHandle& Source)"
  },
  {
    "label": "SetSourceRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceRoot(const FSourceHandle& Source, ISceneGraphNode* InRoot, bool bSnapshot)"
  },
  {
    "label": "SnapshotSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapshotSource(const FSourceHandle& Source)"
  },
  {
    "label": "AddDestination()",
    "kind": "Method",
    "detail": "Function (FDestinationHandle)",
    "insertText": "AddDestination(const FString& Name, EVisibility Visibility, const TSharedPtr<class IConnectionRequestHandler>& ConnectionRequestHandler)"
  },
  {
    "label": "RemoveDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestination(const FDestinationHandle& Destination)"
  },
  {
    "label": "GetRawInfoCopy()",
    "kind": "Method",
    "detail": "Function (FRawInfo)",
    "insertText": "GetRawInfoCopy()"
  },
  {
    "label": "AddEndpointObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEndpointObserver(IEndpointObserver* Observer)"
  },
  {
    "label": "RemoveEndpointObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEndpointObserver(IEndpointObserver* Observer)"
  },
  {
    "label": "OpenStream()",
    "kind": "Method",
    "detail": "Function (EOpenStreamResult)",
    "insertText": "OpenStream(const FSourceHandle& SourceId, const FDestinationHandle& DestinationId)"
  },
  {
    "label": "CloseStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseStream(const FSourceHandle& SourceId, const FDestinationHandle& DestinationId)"
  }
]