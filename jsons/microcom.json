[
  {
    "label": "CComInterfaceArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CComInterfaceArray"
  },
  {
    "label": "CComInterfaceArray()",
    "kind": "Method",
    "detail": "Function (# ifndef __DXC_MICROCOM__ # define __DXC_MICROCOM__ # include \" dxc / Support / WinIncludes . h \" # include \" llvm / Support / Atomic . h \" # include<atomic> template<TIface> class CComInterfaceArray { private : TIface** m_pData ; unsigned m_length ; public :)",
    "insertText": "CComInterfaceArray() : m_pData(nullptr), m_length(0)"
  },
  {
    "label": "CComInterfaceArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CComInterfaceArray()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (m_pData [ i ] ->)",
    "insertText": "Release()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_pData [ i ] = nullptr ; } } m_length = 0 ; })",
    "insertText": "if(m_pData)"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CoTaskMemFree(m_pData)"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (m_pData = nullptr ; } } HRESULT)",
    "insertText": "alloc(unsigned count)"
  },
  {
    "label": "m_pData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_pData(TIface **)CoTaskMemAlloc(sizeof(TIface *) * count)"
  },
  {
    "label": "ZeroMemory()",
    "kind": "Method",
    "detail": "Function (m_length = count ;)",
    "insertText": "ZeroMemory(m_pData, sizeof(TIface *) * count)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} TIface**)",
    "insertText": "release()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (TIface** result = m_pData ; m_pData = nullptr ; m_length = 0 ; return result ; } void)",
    "insertText": "release(TIface ***pValues, unsigned *length)"
  },
  {
    "label": "DxcCallDestructor()",
    "kind": "Method",
    "detail": "Function (* pValues = m_pData ; m_pData = nullptr ;* length = m_length ; m_length = 0 ; } } ; template<T> void)",
    "insertText": "DxcCallDestructor(T *obj)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (obj -> T::~)",
    "insertText": "T()"
  },
  {
    "label": "DXC_MICROCOM_REF_FIELD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DXC_MICROCOM_REF_FIELD(m_dwRef)"
  },
  {
    "label": "DXC_MICROCOM_ADDREF_IMPL()",
    "kind": "Method",
    "detail": "Function (0 } ; # define)",
    "insertText": "DXC_MICROCOM_ADDREF_IMPL(m_dwRef) \\ ULONG STDMETHODCALLTYPE AddRef()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(ULONG)"
  },
  {
    "label": "DXC_MICROCOM_ADDREF_RELEASE_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DXC_MICROCOM_ADDREF_RELEASE_IMPL(m_dwRef) \\ DXC_MICROCOM_ADDREF_IMPL(m_dwRef) \\ ULONG STDMETHODCALLTYPE Release()"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (\\ ULONG)",
    "insertText": "result(ULONG)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(result == 0)"
  },
  {
    "label": "DxcCallDestructor()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DxcCallDestructor(this)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (\\ operator)",
    "insertText": "delete(this)"
  },
  {
    "label": "CreateOnMalloc()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return result ; \\ } template<T,. . . Args> T*)",
    "insertText": "CreateOnMalloc(IMalloc *pMalloc, Args &&...args)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void* P = pMalloc ->)",
    "insertText": "Alloc(sizeof(T))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "if(P) new (P) T(pMalloc, std::forward<Args>(args)...)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (pMalloc ->)",
    "insertText": "Free(P)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (throw ; })",
    "insertText": "return(T *)"
  },
  {
    "label": "DXC_MICROCOM_TM_REF_FIELDS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DXC_MICROCOM_TM_REF_FIELDS()"
  },
  {
    "label": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL()",
    "kind": "Method",
    "detail": "Function (0 } ; \\ CComPtr<IMalloc> m_pMalloc ; # define)",
    "insertText": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL() \\ DXC_MICROCOM_ADDREF_IMPL(m_dwRef) \\ ULONG STDMETHODCALLTYPE Release()"
  },
  {
    "label": "pTmp()",
    "kind": "Method",
    "detail": "Function (\\ CComPtr<IMalloc>)",
    "insertText": "pTmp(m_pMalloc)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (\\ DxcThreadMalloc)",
    "insertText": "M(pTmp)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (\\ pTmp ->)",
    "insertText": "Free(this)"
  },
  {
    "label": "DXC_MICROCOM_TM_CTOR()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return result ; \\ } # define)",
    "insertText": "DXC_MICROCOM_TM_CTOR(T) \\ DXC_MICROCOM_TM_CTOR_ONLY(T) \\ DXC_MICROCOM_TM_ALLOC(T) #define DXC_MICROCOM_TM_CTOR_ONLY(T) \\ T(IMalloc *pMalloc) : m_dwRef(0), m_pMalloc(pMalloc)"
  },
  {
    "label": "DXC_MICROCOM_TM_ALLOC()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DXC_MICROCOM_TM_ALLOC(T) \\ template <typename... Args> \\ static T *Alloc(IMalloc *pMalloc, Args &&...args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ try { \\)",
    "insertText": "if(P) \\ new (P) T(pMalloc, std::forward<Args>(args)...)"
  },
  {
    "label": "DoBasicQueryInterface_recurse()",
    "kind": "Method",
    "detail": "Function (\\ } template<TObject> HRESULT)",
    "insertText": "DoBasicQueryInterface_recurse(TObject *self, REFIID iid, void **ppvObject)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (self ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "DoBasicQueryInterface()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts,TObject> HRESULT)",
    "insertText": "DoBasicQueryInterface(TObject *self, REFIID iid, void **ppvObject)"
  },
  {
    "label": "IUnknown()",
    "kind": "Method",
    "detail": "Function (* ppvObject = reinterpret_cast<)",
    "insertText": "IUnknown(self)"
  },
  {
    "label": "IUnknown()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "IUnknown(self)->AddRef()"
  },
  {
    "label": "AssignToOut()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "AssignToOut(T value, T *pResult)"
  },
  {
    "label": "AssignToOut()",
    "kind": "Method",
    "detail": "Function (* pResult = value ; return S_OK ; } template<T> HRESULT)",
    "insertText": "AssignToOut(nullptr_t value, T *pResult)"
  },
  {
    "label": "ZeroMemoryToOut()",
    "kind": "Method",
    "detail": "Function (* pResult = value ; return S_OK ; } template<T> HRESULT)",
    "insertText": "ZeroMemoryToOut(T *pResult)"
  },
  {
    "label": "ZeroMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroMemory(pResult, sizeof(*pResult))"
  },
  {
    "label": "AssignToOutOpt()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AssignToOutOpt(nullptr_t value, T *pResult)"
  }
]