[
  {
    "label": "PatchTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTable"
  },
  {
    "label": "MTLPatchTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MTLPatchTable"
  },
  {
    "label": "MTLPatchTable()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_MTL_PATCH_TABLE_H # define OPENSUBDIV3_OSD_MTL_PATCH_TABLE_H # include \" . . / version . h \" # include \" . . / far / patchDescriptor . h \" # include \" . . / osd / nonCopyable . h \" # include \" . . / osd / types . h \" # include \" . . / osd / mtlCommon . h \" @ protocol MTLDevice ; @ protocol MTLBuffer ; namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchTable ; } ; namespace Osd { class MTLPatchTable : private NonCopyable<MTLPatchTable> { public : typedef id<MTLBuffer> VertexBufferBinding ;)",
    "insertText": "MTLPatchTable()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (template<DEVICE_CONTEXT> MTLPatchTable*)",
    "insertText": "Create(Far::PatchTable const *farPatchTable, DEVICE_CONTEXT context)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} MTLPatchTable*)",
    "insertText": "Create(Far::PatchTable const *farPatchTable, MTLContext* context)"
  },
  {
    "label": "GetPatchArrays()",
    "kind": "Method",
    "detail": "Function (PatchArrayVector const&)",
    "insertText": "GetPatchArrays()"
  },
  {
    "label": "GetFVarPatchArrays()",
    "kind": "Method",
    "detail": "Function (} PatchArrayVector const&)",
    "insertText": "GetFVarPatchArrays(int fvarChannel = 0)"
  }
]