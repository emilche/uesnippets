[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "ICookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookArtifactReader"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "FBuildDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildDefinition"
  },
  {
    "label": "FBeginCookConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookConfigSettings"
  },
  {
    "label": "FCookByTheBookOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookByTheBookOptions"
  },
  {
    "label": "FCookOnTheFlyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyOptions"
  },
  {
    "label": "FInitializeConfigSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeConfigSettings"
  },
  {
    "label": "FInstigator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstigator"
  },
  {
    "label": "TFastPointerSetKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFastPointerSetKeyFuncs"
  },
  {
    "label": "TFastPointerMapKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFastPointerMapKeyFuncs"
  },
  {
    "label": "TFastPointerMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastPointerMap"
  },
  {
    "label": "TFastPointerSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastPointerSet"
  },
  {
    "label": "FDeterminismManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeterminismManager"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "FPackageDataSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageDataSet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookerTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookerTimer"
  },
  {
    "label": "EForever",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EForever"
  },
  {
    "label": "ENoWait",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENoWait"
  },
  {
    "label": "FTickStackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickStackData"
  },
  {
    "label": "FCookSavePackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookSavePackageContext"
  },
  {
    "label": "FBuildDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildDefinitions"
  },
  {
    "label": "FPendingBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingBuildData"
  },
  {
    "label": "FDiscoveredPlatformSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPlatformSet"
  },
  {
    "label": "FBeginCookContextPlatform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContextPlatform"
  },
  {
    "label": "FBeginCookContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContext"
  },
  {
    "label": "FBeginCookContextForWorkerPlatform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContextForWorkerPlatform"
  },
  {
    "label": "FBeginCookContextForWorker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCookContextForWorker"
  },
  {
    "label": "FOnScopeExit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnScopeExit"
  },
  {
    "label": "FPackageReaderResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageReaderResults"
  },
  {
    "label": "FMultiPackageReaderResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiPackageReaderResults"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / PackageReader . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Cooker / CookProfiling . h \" # include \" Cooker / MPCollector . h \" # include \" CookOnTheSide / CookOnTheFlyServer . h \" # include \" DerivedDataRequestOwner . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / Platform . h \" # include \" Logging / TokenizedMessage . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / CookEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SavePackage . h \" class FCbFieldView ; class FCbWriter ; class ICookArtifactReader ; class ITargetPlatform ; struct FWeakObjectPtr ; namespace UE::DerivedData { class FBuildDefinition ; } namespace UE::Cook { struct FBeginCookConfigSettings ; } namespace UE::Cook { struct FCookByTheBookOptions ; } namespace UE::Cook { struct FCookOnTheFlyOptions ; } namespace UE::Cook { struct FInitializeConfigSettings ; } namespace UE::Cook { struct FInstigator ; } FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::Cook::FBeginCookConfigSettings& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FBeginCookConfigSettings& OutValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::Cook::FCookByTheBookOptions& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FCookByTheBookOptions& OutValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::Cook::FCookOnTheFlyOptions& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FCookOnTheFlyOptions& OutValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::Cook::FInitializeConfigSettings& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FInitializeConfigSettings& OutValue)"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (# define COOK_CHECKSLOW_PACKAGEDATA 0 # define DEBUG_COOKONTHEFLY 0)",
    "insertText": "LLM_DECLARE_TAG(Cooker_CachedPlatformData)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (uint32 ExpectedMaxNumPlatforms = 3 2 ; template<KeyType> struct TFastPointerSetKeyFuncs : public DefaultKeyFuncs<KeyType> { using DefaultKeyFuncs<KeyType>::KeyInitType ; uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "static_assert(sizeof(UPTRINT) == sizeof(uint64), \"Expected pointer size to be 64 bits\")"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64 ImportantBits = reinterpret_cast<)",
    "insertText": "uint64(Key)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "static_assert(sizeof(UPTRINT) == sizeof(uint32), \"Expected pointer size to be 32 bits\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyType,ValueType,SetAllocator = FDefaultSetAllocator> class TFastPointerMap : public TMap<KeyType,ValueType,SetAllocator,TFastPointerMapKeyFuncs<KeyType,ValueType,false>> { } ; template<KeyType,SetAllocator = FDefaultSetAllocator> class TFastPointerSet : public TSet<KeyType,TFastPointerSetKeyFuncs<KeyType>,SetAllocator> { } ; namespace UE::Cook { class FDeterminismManager ; struct FPackageData ; struct FPlatformData ; typedef TUniqueFunction<)",
    "insertText": "void(FPackageData*)"
  },
  {
    "label": "IsTerminalStateChange()",
    "kind": "Method",
    "detail": "Function (class FPackageDataSet : public TFastPointerSet<FPackageData*> { using TFastPointerSet<FPackageData*>::TFastPointerSet ; } ; enum class EExternalRequestType { None,Callback,Cook } ; enum class EPollStatus : uint8 { Success,Error,Incomplete,} ; enum class EStateChangeReason : uint8 { Completed,DoneForNow,SaveError,RecreateObjectCache,CookerShutdown,ReassignAbortedPackages,Retraction,Discovered,Requested,RequestCluster,DirectorRequest,Loaded,Saved,CookSuppressed,GarbageCollected,GeneratorPreGarbageCollected,ForceRecook,UrgencyUpdated,} ; bool)",
    "insertText": "IsTerminalStateChange(EStateChangeReason Reason)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(UE::Cook::EStateChangeReason Reason)"
  },
  {
    "label": "ConstExprCeilLogTwo()",
    "kind": "Method",
    "detail": "Function (enum class ESuppressCookReason : uint8 { Invalid,NotSuppressed,AlreadyCooked,NeverCook,DoesNotExistInWorkspaceDomain,ScriptPackage,NotInCurrentPlugin,Redirected,OrphanedGenerated,LoadError,ValidationError,SaveError,OnlyEditorOnly,CookCanceled,MultiprocessAssignmentError,RetractedByCookDirector,CookFilter,Count,BitCount =)",
    "insertText": "ConstExprCeilLogTwo(Count)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(UE::Cook::ESuppressCookReason Reason)"
  },
  {
    "label": "ConvertToStateChangeReason()",
    "kind": "Method",
    "detail": "Function (EStateChangeReason)",
    "insertText": "ConvertToStateChangeReason(ESuppressCookReason Reason)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(UE::Cook::EPackageState State)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EPackageStateProperty { None = 0,InProgress = 0 x1,Loading = 0 x2,Saving = 0 x4,AssignedToWorkerProperty = 0 x8,Min = InProgress,Max = AssignedToWorkerProperty,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPackageStateProperty)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EPreloaderState : uint8 { Inactive,PendingKick,ActivePreload,ReadyForLoad,Count,} ; const TCHAR*)",
    "insertText": "LexToString(UE::Cook::EPreloaderState State)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(UE::Cook::ESaveSubState State)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(UE::Cook::EUrgency Urgency)"
  },
  {
    "label": "FCookerTimer()",
    "kind": "Method",
    "detail": "Function (struct FCookerTimer { public : enum EForever { Forever } ; enum ENoWait { NoWait } ;)",
    "insertText": "FCookerTimer(float InTimeSlice)"
  },
  {
    "label": "FCookerTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookerTimer(EForever)"
  },
  {
    "label": "FCookerTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookerTimer(ENoWait)"
  },
  {
    "label": "GetTickTimeSlice()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTickTimeSlice()"
  },
  {
    "label": "IsTickTimeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickTimeUp()"
  },
  {
    "label": "IsTickTimeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickTimeUp(double CurrentTimeSeconds)"
  },
  {
    "label": "GetActionTimeSlice()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActionTimeSlice()"
  },
  {
    "label": "SetActionTimeSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActionTimeSlice(float InTimeSlice)"
  },
  {
    "label": "SetActionStartTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActionStartTime()"
  },
  {
    "label": "SetActionStartTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActionStartTime(double CurrentTimeSeconds)"
  },
  {
    "label": "IsActionTimeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionTimeUp()"
  },
  {
    "label": "IsActionTimeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionTimeUp(double CurrentTimeSeconds)"
  },
  {
    "label": "FTickStackData()",
    "kind": "Method",
    "detail": "Function (public : const double TickStartTime ; double ActionStartTime ; const float TickTimeSlice ; float ActionTimeSlice ; } ; struct FTickStackData { double LoopStartTime = 0 . ; uint32 ResultFlags = 0 ; FCookerTimer Timer ; ECookTickFlags TickFlags ; bool bCookComplete = false ; bool bCookCancelled = false ;)",
    "insertText": "FTickStackData(float TimeSlice, ECookTickFlags InTickFlags) :Timer(TimeSlice), TickFlags(InTickFlags)"
  },
  {
    "label": "FCookSavePackageContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCookSavePackageContext {)",
    "insertText": "FCookSavePackageContext(const ITargetPlatform* InTargetPlatform, TSharedPtr<ICookArtifactReader> InCookArtifactReader, ICookedPackageWriter* InPackageWriter, FStringView InWriterDebugName, FSavePackageSettings InSettings, TUniquePtr<FDeterminismManager>&& InDeterminismManager)"
  },
  {
    "label": "FCookSavePackageContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookSavePackageContext()"
  },
  {
    "label": "InitializeTls()",
    "kind": "Method",
    "detail": "Function (FSavePackageContext SaveContext ; FString WriterDebugName ; TSharedPtr<ICookArtifactReader> ArtifactReader ; ICookedPackageWriter* PackageWriter ; ICookedPackageWriter::FCookCapabilities PackageWriterCapabilities ; TUniquePtr<FDeterminismManager> DeterminismManager ; } ; void)",
    "insertText": "InitializeTls()"
  },
  {
    "label": "IsSchedulerThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSchedulerThread()"
  },
  {
    "label": "SetIsSchedulerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSchedulerThread(bool bValue)"
  },
  {
    "label": "FBuildDefinitions()",
    "kind": "Method",
    "detail": "Function (class FBuildDefinitions { public :)",
    "insertText": "FBuildDefinitions()"
  },
  {
    "label": "AddBuildDefinitionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBuildDefinitionList(FName PackageName, const ITargetPlatform* TargetPlatform, TConstArrayView<UE::DerivedData::FBuildDefinition> BuildDefinitionList)"
  },
  {
    "label": "TryRemovePendingBuilds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRemovePendingBuilds(FName PackageName)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "LoadLocal()",
    "kind": "Method",
    "detail": "Function (private : bool bTestPendingBuilds = false ; struct FPendingBuildData { bool bTryRemoved = false ; } ; TMap<FName,FPendingBuildData> PendingBuilds ; } ; struct FInitializeConfigSettings { public : void)",
    "insertText": "LoadLocal(const FString& InOutputDirectoryOverride)"
  },
  {
    "label": "CopyFromLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromLocal(const UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "MoveToLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToLocal(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "MoveOrCopy()",
    "kind": "Method",
    "detail": "Function (private : template<SourceType,TargetType> void)",
    "insertText": "MoveOrCopy(SourceType&& Source, TargetType&& Target)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FInitializeConfigSettings& Value)"
  },
  {
    "label": "LoadLocal()",
    "kind": "Method",
    "detail": "Function (} ; struct FBeginCookConfigSettings { void)",
    "insertText": "LoadLocal(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadNeverCookLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadNeverCookLocal(FBeginCookContext& BeginContext)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FBeginCookConfigSettings& Value)"
  },
  {
    "label": "IsCookIgnoreTimeouts()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsCookIgnoreTimeouts()"
  },
  {
    "label": "GetCommandLineDelimiterStrs()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<const TCHAR*>)",
    "insertText": "GetCommandLineDelimiterStrs()"
  },
  {
    "label": "GetCommandLineDelimiterChars()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<TCHAR>)",
    "insertText": "GetCommandLineDelimiterChars()"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LexTryParseString(FPlatformMemoryStats::EMemoryPressureStatus& OutValue, FStringView Text)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(FPlatformMemoryStats::EMemoryPressureStatus Value)"
  },
  {
    "label": "ClearSessionData()",
    "kind": "Method",
    "detail": "Function (namespace UE::Cook { struct FCookByTheBookOptions { public : TArray<FName> StartupPackages ; TArray<FWeakObjectPtr> SessionStartupObjects ; FString DlcName ; FString CreateReleaseVersion ; TMap<FName,TArray<FName>> BasedOnReleaseCookedPackages ; TMap<FName,TArray<FName>> SourceToLocalizedPackageVariants ; TArray<FString> AllCulturesToCook ; double CookTime = 0 . 0 ; double CookStartTime = 0 . 0 ; ECookByTheBookOptions StartupOptions = ECookByTheBookOptions::None ; bool bGenerateStreamingInstallManifests = false ; bool bGenerateDependenciesForMaps = false ; bool bErrorOnEngineContentUse = false ; bool bAllowUncookedAssetReferences = false ; bool bSkipHardReferences = false ; bool bSkipSoftReferences = false ; bool bCookSoftPackageReferences = false ; bool bCookAgainstFixedBase = false ; bool bDlcLoadMainAssetRegistry = false ; void)",
    "insertText": "ClearSessionData()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FCookByTheBookOptions EmptyOptions ; EmptyOptions . StartupPackages =)",
    "insertText": "MoveTemp(StartupPackages)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(EmptyOptions)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FCookByTheBookOptions& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::Cook::FCookOnTheFlyOptions& Value)"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (} ; enum class EDiscoveredPlatformSet { EmbeddedList,EmbeddedBitField,CopyFromInstigator,Count,} ; struct FDiscoveredPlatformSet {)",
    "insertText": "FDiscoveredPlatformSet(EDiscoveredPlatformSet InSource = EDiscoveredPlatformSet::EmbeddedList)"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPlatformSet(TConstArrayView<const ITargetPlatform*> InPlatforms)"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPlatformSet(const TBitArray<>& InOrderedPlatformBits)"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDiscoveredPlatformSet()"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPlatformSet(const FDiscoveredPlatformSet& Other)"
  },
  {
    "label": "FDiscoveredPlatformSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDiscoveredPlatformSet(FDiscoveredPlatformSet&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDiscoveredPlatformSet&)",
    "insertText": "operator(const FDiscoveredPlatformSet& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDiscoveredPlatformSet&)",
    "insertText": "operator(FDiscoveredPlatformSet&& Other)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (EDiscoveredPlatformSet)",
    "insertText": "GetSource()"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* Platform, int32 RemovedIndex)"
  },
  {
    "label": "OnPlatformAddedToSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlatformAddedToSession(const ITargetPlatform* Platform)"
  },
  {
    "label": "GetPlatforms()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<const ITargetPlatform*>)",
    "insertText": "GetPlatforms(UCookOnTheFlyServer& COTFS, FInstigator* Instigator, TConstArrayView<const ITargetPlatform*> OrderedPlatforms, TArray<const ITargetPlatform*, TInlineAllocator<ExpectedMaxNumPlatforms>>* OutBuffer)"
  },
  {
    "label": "ConvertFromBitfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertFromBitfield(TConstArrayView<const ITargetPlatform*> OrderedPlatforms)"
  },
  {
    "label": "ConvertToBitfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToBitfield(TConstArrayView<const ITargetPlatform*> OrderedPlatforms)"
  },
  {
    "label": "DestructUnion()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DestructUnion()"
  },
  {
    "label": "ConstructUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUnion()"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer, const FDiscoveredPlatformSet& Value, TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDiscoveredPlatformSet& OutValue, TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (union { TArray<const ITargetPlatform*> Platforms ; TBitArray<> OrderedPlatformBits ; } ; EDiscoveredPlatformSet Source ; } ; } struct FBeginCookContextPlatform { ITargetPlatform* TargetPlatform = nullptr ; UE::Cook::FPlatformData* PlatformData = nullptr ; TMap<FName,FString> CurrentCookSettings ; bool bFullBuild = false ; bool bAllowIterativeResults = true ; bool bHasMemoryResults = false ; bool bClearMemoryResults = false ; bool bPopulateMemoryResultsFromDiskResults = false ; bool bIterateSharedBuild = false ; bool bWorkerOnSharedSandbox = false ; } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FBeginCookContextPlatform& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FBeginCookContextPlatform& Value)"
  },
  {
    "label": "FBeginCookContext()",
    "kind": "Method",
    "detail": "Function (struct FBeginCookContext {)",
    "insertText": "FBeginCookContext(UCookOnTheFlyServer& InCOTFS) : COTFS(InCOTFS)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} const UCookOnTheFlyServer::FCookByTheBookStartupOptions* StartupOptions = nullptr ; TArray<FBeginCookContextPlatform> PlatformContexts ; TArray<ITargetPlatform*> TargetPlatforms ; UCookOnTheFlyServer& COTFS ; } ; struct FBeginCookContextForWorkerPlatform { void)",
    "insertText": "Set(const FBeginCookContextPlatform& InContext)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform* TargetPlatform = nullptr ; bool bFullBuild = false ; } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FBeginCookContextForWorkerPlatform& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FBeginCookContextForWorkerPlatform& Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (struct FBeginCookContextForWorker { void)",
    "insertText": "Set(const FBeginCookContext& InContext)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<FBeginCookContextForWorkerPlatform> PlatformContexts ; } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FBeginCookContextForWorker& Value)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FBeginCookContextForWorker& Value)"
  },
  {
    "label": "LogCookerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCookerMessage(const FString& MessageText, EMessageSeverity::Type Severity)"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_DECLARE_TAG(Cooker)"
  },
  {
    "label": "TEXTVIEW()",
    "kind": "Method",
    "detail": "Function (# define REMAPPED_PLUGINS)",
    "insertText": "TEXTVIEW(\"RemappedPlugins\")"
  },
  {
    "label": "FOnScopeExit()",
    "kind": "Method",
    "detail": "Function (float TickCookableObjectsFrameTime = . 1 0 0 f ; struct FOnScopeExit { public :)",
    "insertText": "FOnScopeExit(TUniqueFunction<void()>&& InExitFunction) :ExitFunction(MoveTemp(InExitFunction))"
  },
  {
    "label": "FOnScopeExit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOnScopeExit()"
  },
  {
    "label": "ExitEarly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitEarly()"
  },
  {
    "label": "ExitFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitFunction()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ExitFunction .)",
    "insertText": "Reset()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Abandon()"
  },
  {
    "label": "GetSaveExportsAndImports()",
    "kind": "Method",
    "detail": "Function (} ; struct FPackageReaderResults { TMap<FSoftObjectPath,FPackageReader::FObjectData> Exports ; TMap<FSoftObjectPath,FPackageReader::FObjectData> Imports ; TMap<FName,bool> SoftPackageReferences ; bool bValid = false ; } ; struct FMultiPackageReaderResults { FPackageReaderResults Realms [ 2 ] ; ESavePackageResult Result ; } ; FMultiPackageReaderResults)",
    "insertText": "GetSaveExportsAndImports(UPackage* Package, UObject* Asset, FSavePackageArgs SaveArgs)"
  }
]