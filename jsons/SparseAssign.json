[
  {
    "label": "storage_kind_to_evaluator_kind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "storage_kind_to_evaluator_kind"
  },
  {
    "label": "storage_kind_to_shape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "storage_kind_to_shape"
  },
  {
    "label": "Sparse2Sparse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sparse2Sparse"
  },
  {
    "label": "Sparse2Dense",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sparse2Dense"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "assignment_from_dense_op_sparse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "assignment_from_dense_op_sparse"
  },
  {
    "label": "Diagonal2Sparse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Diagonal2Sparse"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEASSIGN_H # define EIGEN_SPARSEASSIGN_H namespace Eigen { template<Derived> template<OtherDerived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& other)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "evalTo(derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::Assignment<Derived,OtherDerived,internal::assign_op<Scalar,OtherDerived::Scalar>)",
    "insertText": "run(derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const Derived& other)"
  },
  {
    "label": "assign_sparse_to_sparse()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<> struct storage_kind_to_evaluator_kind<Sparse> { typedef IteratorBased Kind ; } ; template<> struct storage_kind_to_shape<Sparse> { typedef SparseShape Shape ; } ; struct Sparse2Sparse { } ; struct Sparse2Dense { } ; template<> struct AssignmentKind<SparseShape,SparseShape> { typedef Sparse2Sparse Kind ; } ; template<> struct AssignmentKind<SparseShape,SparseTriangularShape> { typedef Sparse2Sparse Kind ; } ; template<> struct AssignmentKind<DenseShape,SparseShape> { typedef Sparse2Dense Kind ; } ; template<> struct AssignmentKind<DenseShape,SparseTriangularShape> { typedef Sparse2Dense Kind ; } ; template<DstXprType,SrcXprType> void)",
    "insertText": "assign_sparse_to_sparse(DstXprType &dst, const SrcXprType &src)"
  },
  {
    "label": "srcEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef DstXprType::Scalar Scalar ; typedef internal::evaluator<DstXprType> DstEvaluatorType ; typedef internal::evaluator<SrcXprType> SrcEvaluatorType ; SrcEvaluatorType)",
    "insertText": "srcEvaluator(src)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "transpose(DstEvaluatorType::Flags & RowMajorBit) != (SrcEvaluatorType::Flags & RowMajorBit)"
  },
  {
    "label": "outerEvaluationSize()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "outerEvaluationSize(SrcEvaluatorType::Flags&RowMajorBit) ? src.rows() : src.cols()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "resize(src.rows(), src.cols())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setZero()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "reserve((std::min)(src.rows()*src.cols(), (std::max)(src.rows(),src.cols())*2))"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "startVec(j)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (Scalar v = it .)",
    "insertText": "value()"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "insertBackByOuterInner(j,it.index())"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } dst .)",
    "insertText": "finalize()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "eigen_assert(( ((internal::traits<DstXprType>::SupportedAccessPatterns & OuterRandomAccessPattern)==OuterRandomAccessPattern) || (!((DstEvaluatorType::Flags & RowMajorBit) != (SrcEvaluatorType::Flags & RowMajorBit)))) && \"the transpose operation is supposed to be handled in SparseMatrix::operator=\")"
  },
  {
    "label": "Flip()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "Flip(DstEvaluatorType::Flags & RowMajorBit) != (SrcEvaluatorType::Flags & RowMajorBit)"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (DstXprType)",
    "insertText": "temp(src.rows(), src.cols())"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (temp .)",
    "insertText": "insertBackByOuterInner(Flip?it.index():j,Flip?j:it.index())"
  },
  {
    "label": "markAsRValue()",
    "kind": "Method",
    "detail": "Function (dst = temp .)",
    "insertText": "markAsRValue()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } template<DstXprType,SrcXprType,Functor> struct Assignment<DstXprType,SrcXprType,Functor,Sparse2Sparse> { void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "assign_sparse_to_sparse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign_sparse_to_sparse(dst.derived(), src.derived())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,SrcXprType,Functor,Weak> struct Assignment<DstXprType,SrcXprType,Functor,Sparse2Dense,Weak> { void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const Functor &func)"
  },
  {
    "label": "srcEval()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<SrcXprType>)",
    "insertText": "srcEval(src)"
  },
  {
    "label": "resize_if_allowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize_if_allowed(dst, src, func)"
  },
  {
    "label": "dstEval()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<DstXprType>)",
    "insertText": "dstEval(dst)"
  },
  {
    "label": "outerEvaluationSize()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "outerEvaluationSize(internal::evaluator<SrcXprType>::Flags&RowMajorBit) ? src.rows() : src.cols()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,Func1,Func2> struct assignment_from_dense_op_sparse { template<SrcXprType,InitialFunc> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const InitialFunc&)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_ASSIGNMENT_FROM_DENSE_OP_SPARSE_PLUGIN EIGEN_SPARSE_ASSIGNMENT_FROM_DENSE_OP_SPARSE_PLUGIN # endif)",
    "insertText": "call_assignment_no_alias(dst, src.lhs(), Func1())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, src.rhs(), Func2())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Lhs,Rhs,Scalar> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::enable_if<internal::is_same<internal::evaluator_traits<Rhs>::Shape,DenseShape>::value>::type)",
    "insertText": "run(DstXprType &dst, const CwiseBinaryOp<internal::scalar_sum_op<Scalar,Scalar>, const Lhs, const Rhs> &src, const internal::assign_op<typename DstXprType::Scalar,Scalar>&)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_ASSIGNMENT_FROM_SPARSE_ADD_DENSE_PLUGIN EIGEN_SPARSE_ASSIGNMENT_FROM_SPARSE_ADD_DENSE_PLUGIN # endif)",
    "insertText": "call_assignment_no_alias(dst, src.rhs(), Func1())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, src.lhs(), Func2())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Lhs,Rhs,Scalar> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::enable_if<internal::is_same<internal::evaluator_traits<Rhs>::Shape,DenseShape>::value>::type)",
    "insertText": "run(DstXprType &dst, const CwiseBinaryOp<internal::scalar_difference_op<Scalar,Scalar>, const Lhs, const Rhs> &src, const internal::assign_op<typename DstXprType::Scalar,Scalar>&)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_ASSIGNMENT_FROM_SPARSE_SUB_DENSE_PLUGIN EIGEN_SPARSE_ASSIGNMENT_FROM_SPARSE_SUB_DENSE_PLUGIN # endif)",
    "insertText": "call_assignment_no_alias(dst, -src.rhs(), Func1())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, src.lhs(), add_assign_op<typename DstXprType::Scalar,typename Lhs::Scalar>())"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(ASSIGN_OP,BINOP,ASSIGN_OP2)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(assign_op, scalar_sum_op,add_assign_op)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(add_assign_op,scalar_sum_op,add_assign_op)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(sub_assign_op,scalar_sum_op,sub_assign_op)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(assign_op, scalar_difference_op,sub_assign_op)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(add_assign_op,scalar_difference_op,sub_assign_op)"
  },
  {
    "label": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CATCH_ASSIGN_DENSE_OP_SPARSE(sub_assign_op,scalar_difference_op,add_assign_op)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<DstXprType,DecType,RhsType,Scalar> struct Assignment<DstXprType,Solve<DecType,RhsType>,internal::assign_op<Scalar,Scalar>,Sparse2Sparse> { typedef Solve<DecType,RhsType> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index dstRows = src .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index dstCols = src .)",
    "insertText": "cols()"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "dec()._solve_impl(src.rhs(), dst)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; struct Diagonal2Sparse { } ; template<> struct AssignmentKind<SparseShape,DiagonalShape> { typedef Diagonal2Sparse Kind ; } ; template<DstXprType,SrcXprType,Functor> struct Assignment<DstXprType,SrcXprType,Functor,Diagonal2Sparse> { typedef DstXprType::StorageIndex StorageIndex ; typedef DstXprType::Scalar Scalar ; template<int Options,AssignFunc> void)",
    "insertText": "run(SparseMatrix<Scalar,Options,StorageIndex> &dst, const SrcXprType &src, const AssignFunc &func)"
  },
  {
    "label": "assignDiagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "assignDiagonal(src.diagonal(), func)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<DstDerived> void)",
    "insertText": "run(SparseMatrixBase<DstDerived> &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "derived().diagonal() = src.diagonal()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<DstDerived> void)",
    "insertText": "run(SparseMatrixBase<DstDerived> &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "derived().diagonal() += src.diagonal()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<DstDerived> void)",
    "insertText": "run(SparseMatrixBase<DstDerived> &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "derived().diagonal() -= src.diagonal()"
  }
]