[
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FShaderResourceTableMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceTableMap"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FUniformResourceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformResourceEntry"
  },
  {
    "label": "FUniformBufferEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferEntry"
  },
  {
    "label": "FUniformBufferStaticSlotRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformBufferStaticSlotRegistrar"
  },
  {
    "label": "FUniformBufferStaticSlotRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformBufferStaticSlotRegistry"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMember",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMember"
  },
  {
    "label": "FShaderCompilerDefineNameCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerDefineNameCache"
  },
  {
    "label": "FShaderCompilerDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerDefinitions"
  },
  {
    "label": "SupportShaderPrecisionModifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / List . h \" # include \" Containers / Map . h \" # include \" Containers / StaticArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / StringBuilder . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" Serialization / MemoryHasher . h \" # include \" Serialization / MemoryImage . h \" # include \" Serialization / MemoryLayout . h \" # include \" Templates / AlignmentTemplates . h \" # include \" UObject / NameTypes . h \" # include \" Templates / SharedPointer . h \" using FThreadSafeSharedStringPtr = TSharedPtr<FString,ESPMode::ThreadSafe> ; using FThreadSafeSharedAnsiStringPtr = TSharedPtr<TArray<ANSICHAR>,ESPMode::ThreadSafe> ; using FThreadSafeNameBufferPtr = TSharedPtr<TArray<TCHAR>,ESPMode::ThreadSafe> ; class FShaderKeyGenerator ; struct FShaderResourceTableMap ; namespace EShaderPrecisionModifier { enum Type : uint8 { Float,Half,Fixed,Invalid } ; } ; bool)",
    "insertText": "SupportShaderPrecisionModifier(EShaderPlatform Platform)"
  },
  {
    "label": "GetUniformBufferName()",
    "kind": "Method",
    "detail": "Function (struct FUniformResourceEntry { const TCHAR* UniformBufferMemberName ; uint8 UniformBufferNameLength { } ; uint8 Type { } ; uint16 ResourceIndex { } ; FStringView)",
    "insertText": "GetUniformBufferName()"
  },
  {
    "label": "ParseShaderResourceBindingType()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUniformBufferEntry { FString StaticSlotName ; FThreadSafeNameBufferPtr MemberNameBuffer ; uint32 LayoutHash { } ; EUniformBufferBindingFlags BindingFlags { EUniformBufferBindingFlags::Shader } ; ERHIUniformBufferFlags Flags { ERHIUniformBufferFlags::None } ; } ; EShaderCodeResourceBindingType)",
    "insertText": "ParseShaderResourceBindingType(const TCHAR* ShaderType)"
  },
  {
    "label": "FUniformBufferStaticSlotRegistrar()",
    "kind": "Method",
    "detail": "Function (class FUniformBufferStaticSlotRegistrar { public :)",
    "insertText": "FUniformBufferStaticSlotRegistrar(const TCHAR* InName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FUniformBufferStaticSlotRegistry { public : FUniformBufferStaticSlotRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlot(FName SlotName)"
  },
  {
    "label": "GetSlotCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSlotCount()"
  },
  {
    "label": "GetDebugDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDebugDescription(FUniformBufferStaticSlot Slot)"
  },
  {
    "label": "GetSlotName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetSlotName(FUniformBufferStaticSlot Slot)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } return MAX_UNIFORM_BUFFER_STATIC_SLOTS ; } private : TArray<FName> SlotNames ; } ; class FShaderParametersMetadata { public : enum class EUseCase : uint8 { ShaderParameterStruct,UniformBuffer,DataDrivenUniformBuffer,} ; enum class EUsageFlags : uint8 { None = 0,NoEmulatedUniformBuffer = 1<<0,UniformView = 1<<1,NeedsReflectedMembers = 1<<2,ManuallyBoundByPass = 1<<3,} ; const TCHAR* kRootUniformBufferBindingName =)",
    "insertText": "TEXT(\"_RootShaderParameters\")"
  },
  {
    "label": "FMember()",
    "kind": "Method",
    "detail": "Function (int32 kRootCBufferBindingIndex = 0 ; class FMember { public :)",
    "insertText": "FMember(const TCHAR* InName, const TCHAR* InShaderType, int32 InFileLine, uint32 InOffset, EUniformBufferBaseType InBaseType, EShaderPrecisionModifier::Type InPrecision, uint32 InNumRows, uint32 InNumColumns, uint32 InNumElements, const FShaderParametersMetadata* InStruct ) : Name(InName) , ShaderType(InShaderType) , FileLine(InFileLine) , Offset(InOffset) , BaseType(InBaseType) , Precision(InPrecision) , NumRows(InNumRows) , NumColumns(InNumColumns) , NumElements(InNumElements) , Struct(InStruct)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetOffset()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 ElementSize =)",
    "insertText": "sizeof(uint32)"
  },
  {
    "label": "GenerateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (} return ElementSize ; } void)",
    "insertText": "GenerateShaderParameterType(FString& Result, bool bSupportsPrecisionModifier, EUniformBufferBaseType BaseType, EShaderPrecisionModifier::Type PrecisionModifier, uint32 NumRows, uint32 NumColumns)"
  },
  {
    "label": "GenerateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateShaderParameterType(FString& Result, bool bSupportsPrecisionModifier)"
  },
  {
    "label": "GenerateShaderParameterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateShaderParameterType(FString& Result, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "HashLayout()",
    "kind": "Method",
    "detail": "Function (private : class FShaderParametersMetadata ; template<FHasherType,FHashType> void)",
    "insertText": "HashLayout(TMemoryHasher<FHasherType, FHashType>& Hasher)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Hasher<<Offset ; Hasher<<reinterpret_cast<)",
    "insertText": "uint8(BaseType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "Serialize(const_cast<TCHAR*>(Name), FCString::Strlen(Name))"
  },
  {
    "label": "IsShaderParameterTypeReadOnlyRHIResource()",
    "kind": "Method",
    "detail": "Function (Hasher<<NumElements ; const bool bIsRHIResource =)",
    "insertText": "IsShaderParameterTypeReadOnlyRHIResource(BaseType)"
  },
  {
    "label": "IsRDGResourceReferenceShaderParameterType()",
    "kind": "Method",
    "detail": "Function (const bool bIsRDGResource =)",
    "insertText": "IsRDGResourceReferenceShaderParameterType(BaseType)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Hasher<<reinterpret_cast<)",
    "insertText": "uint8(Precision)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Hasher<<NumRows ; Hasher<<NumColumns ; } else)",
    "insertText": "if(BaseType == UBMT_INCLUDED_STRUCT || BaseType == UBMT_NESTED_STRUCT)"
  },
  {
    "label": "FShaderParametersMetadata()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FShaderParametersMetadata(Struct)->HashLayout(Hasher)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bIsRHIResource || bIsRDGResource)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Hasher .)",
    "insertText": "Serialize(const_cast<TCHAR*>(ShaderType), FCString::Strlen(ShaderType))"
  },
  {
    "label": "FShaderParametersMetadata()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR* Name ; const TCHAR* ShaderType ; int32 FileLine ; uint32 Offset ; EUniformBufferBaseType BaseType ; EShaderPrecisionModifier::Type Precision ; uint32 NumRows ; uint32 NumColumns ; uint32 NumElements ; const FShaderParametersMetadata* Struct ; } ;)",
    "insertText": "FShaderParametersMetadata(EUseCase UseCase, EUniformBufferBindingFlags InBindingFlags, const TCHAR* InLayoutName, const TCHAR* InStructTypeName, const TCHAR* InShaderVariableName, const TCHAR* InStaticSlotName, const ANSICHAR* InFileName, const int32 InFileLine, uint32 InSize, const TArray<FMember>& InMembers, bool bForceCompleteInitialization = false, FRHIUniformBufferLayoutInitializer* OutLayoutInitializer = nullptr, EUsageFlags InUsageFlags = EUsageFlags::None)"
  },
  {
    "label": "FShaderParametersMetadata()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderParametersMetadata()"
  },
  {
    "label": "GetNestedStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNestedStructs(TArray<const FShaderParametersMetadata*>& OutNestedStructs)"
  },
  {
    "label": "AddResourceTableEntries()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddResourceTableEntries(FShaderResourceTableMap& ResourceTableMap, TMap<FString, FUniformBufferEntry>& UniformBufferMap)"
  },
  {
    "label": "GetStructTypeName()",
    "kind": "Method",
    "detail": "Function (# endif const TCHAR*)",
    "insertText": "GetStructTypeName()"
  },
  {
    "label": "GetUniformBufferDeclarationPtr()",
    "kind": "Method",
    "detail": "Function (} FThreadSafeSharedStringPtr)",
    "insertText": "GetUniformBufferDeclarationPtr()"
  },
  {
    "label": "GetFullMemberCodeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullMemberCodeName(uint16 MemberOffset)"
  },
  {
    "label": "GetStructList()",
    "kind": "Method",
    "detail": "Function (TLinkedList<FShaderParametersMetadata*>*&)",
    "insertText": "GetStructList()"
  },
  {
    "label": "GetNameStructMap()",
    "kind": "Method",
    "detail": "Function (TMap<FHashedName,FShaderParametersMetadata*>&)",
    "insertText": "GetNameStructMap()"
  },
  {
    "label": "GetStringStructMap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TMap<FString,FShaderParametersMetadata*>&)",
    "insertText": "GetStringStructMap()"
  },
  {
    "label": "InitializeAllUniformBufferStructs()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitializeAllUniformBufferStructs()"
  },
  {
    "label": "GetLayoutHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLayoutHash()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "GetLayoutSignature()",
    "kind": "Method",
    "detail": "Function (# endif const FBlake3Hash&)",
    "insertText": "GetLayoutSignature()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "check(IsLayoutInitialized())"
  },
  {
    "label": "IterateStructureMetadataDependencies()",
    "kind": "Method",
    "detail": "Function (FBlake3Hash Dummy ; return Dummy ; # endif } template<TParameterFunction> void)",
    "insertText": "IterateStructureMetadataDependencies(TParameterFunction Lambda)"
  },
  {
    "label": "GetStructMetadata()",
    "kind": "Method",
    "detail": "Function (const FShaderParametersMetadata* NewParametersMetadata = Member .)",
    "insertText": "GetStructMetadata()"
  },
  {
    "label": "IterateStructureMetadataDependencies()",
    "kind": "Method",
    "detail": "Function (NewParametersMetadata ->)",
    "insertText": "IterateStructureMetadataDependencies(Lambda)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Lambda(this)"
  },
  {
    "label": "HashLayout()",
    "kind": "Method",
    "detail": "Function (CurrentMember .)",
    "insertText": "HashLayout(Hasher)"
  },
  {
    "label": "InitializeLayout()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_EDITOR FBlake3Hash LayoutSignature ; # endif void)",
    "insertText": "InitializeLayout(FRHIUniformBufferLayoutInitializer* OutLayoutInitializer = nullptr)"
  },
  {
    "label": "InitializeUniformBufferDeclaration()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InitializeUniformBufferDeclaration()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FShaderParametersMetadata::EUsageFlags)"
  },
  {
    "label": "FShaderCompilerDefineNameCache()",
    "kind": "Method",
    "detail": "Function (class FShaderCompilerDefineNameCache { public :)",
    "insertText": "FShaderCompilerDefineNameCache(const TCHAR* InName) : Name(InName), MapIndex(INDEX_NONE)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FName()"
  }
]