[
  {
    "label": "FRigidClustering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClustering"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "FClusterCreationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterCreationParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FClusterUnionCreationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionCreationParameters"
  },
  {
    "label": "FClusterUnionParticleProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionParticleProperties"
  },
  {
    "label": "FClusterUnion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnion"
  },
  {
    "label": "FClusterUnionChildToParentUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionChildToParentUpdate"
  },
  {
    "label": "FClusterUnionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionManager"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ClusterCreationParameters . h \" # include \" Chaos / Framework / ArrayAlgorithm . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Misc / EnumClassFlags . h \" namespace Chaos { using FClusterUnionIndex = int32 ; using FClusterUnionExplicitIndex = int32 ; class FRigidClustering ; class FPBDRigidsEvolutionGBF ; struct FClusterCreationParameters ; enum class EClusterUnionOperation { Add,AddReleased,Remove,UpdateChildToParent } ; enum class EClusterUnionOperationTiming { Never,Defer,Immediate } ; enum class EUpdateClusterUnionPropertiesFlags : int32 { None = 0,RecomputeMassOrientation = 1<<0,ForceGenerateConnectionGraph = 1<<1,IncrementalGenerateConnectionGraph = 1<<2,UpdateKinematicProperties = 1<<3,ForceGenerateGeometry = 1<<4,IncrementalGenerateGeometry = 1<<5,ConnectivityCheck = 1<<6,All = RecomputeMassOrientation | ForceGenerateConnectionGraph | UpdateKinematicProperties | ForceGenerateGeometry | ConnectivityCheck } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EUpdateClusterUnionPropertiesFlags)"
  },
  {
    "label": "FClusterUnionParticleProperties()",
    "kind": "Method",
    "detail": "Function (enum class EClusterUnionConnectivityOperation : int8 { Add,Remove } ; enum class EClusterUnionGeometryOperation : int8 { Add,Remove,Refresh } ; struct FClusterUnionCreationParameters { FClusterUnionExplicitIndex ExplicitIndex = INDEX_NONE ; const FUniqueIdx* UniqueIndex = nullptr ; uint32 ActorId = 0 ; uint32 ComponentId = 0 ; int32 GravityGroupOverride = INDEX_NONE ; } ; struct FClusterUnionParticleProperties {)",
    "insertText": "FClusterUnionParticleProperties() : bIsAuxiliaryParticle(0) , bEdgesAreGenerated(0)"
  },
  {
    "label": "IsGravityOverrideSet()",
    "kind": "Method",
    "detail": "Function (} uint8 bIsAuxiliaryParticle : 1 ; uint8 bEdgesAreGenerated : 1 ; } ; struct FClusterUnion { FPBDRigidClusteredParticleHandle* InternalCluster ; Chaos::FImplicitObjectPtr Geometry ; TArray<FPBDRigidParticleHandle*> ChildParticles ; TArray<FPBDRigidParticleHandle*> GeometryChildParticles ; TMap<FPBDRigidParticleHandle*,FClusterUnionParticleProperties> ChildProperties ; FClusterUnionIndex InternalIndex ; FClusterUnionExplicitIndex ExplicitIndex ; FClusterCreationParameters Parameters ; FClusterUnionCreationParameters ClusterUnionParameters ; bool bNeedsXRInitialization : 1 = true ; bool bAnchorLock : 1 = false ; bool bCheckConnectivity : 1 = false ; bool bGenerateConnectivityEdges : 1 = true ; bool bGeometryModified : 1 = true ; TArray<TPair<FPBDRigidParticleHandle*,EClusterUnionConnectivityOperation>> PendingConnectivityOperations ; bool)",
    "insertText": "IsGravityOverrideSet()"
  },
  {
    "label": "AddPendingGeometryOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingGeometryOperation(EClusterUnionGeometryOperation Op, FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "ClearAllPendingGeometryOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllPendingGeometryOperations()"
  },
  {
    "label": "ClearPendingGeometryOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingGeometryOperations(EClusterUnionGeometryOperation Op)"
  },
  {
    "label": "CreateTransformGeometryForClusterUnion()",
    "kind": "Method",
    "detail": "Function (private : TMap<EClusterUnionGeometryOperation,TArray<FPBDRigidParticleHandle*>> PendingGeometryOperations ; } ; struct FClusterUnionChildToParentUpdate { FTransform ChildToParent ; bool bLock = false ; FClusterUnionIndex ClusterUnionIndex = INDEX_NONE ; } ; class FClusterUnionManager { public : template<EThreadContext Id> FImplicitObjectTransformed*)",
    "insertText": "CreateTransformGeometryForClusterUnion(TThreadRigidParticle<Id>* Child, const FTransform& Frame)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectTransformed* TransformedChildGeometry = new TImplicitObjectTransformed<)",
    "insertText": "FReal(Child->GetGeometry(), Frame)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (TransformedChildGeometry ->)",
    "insertText": "SetGeometry(Child->GetGeometry())"
  },
  {
    "label": "CreateNewClusterUnion()",
    "kind": "Method",
    "detail": "Function (FClusterUnionIndex)",
    "insertText": "CreateNewClusterUnion(const FClusterCreationParameters& Parameters, const FClusterUnionCreationParameters& ClusterUnionParameters = FClusterUnionCreationParameters{})"
  },
  {
    "label": "DestroyClusterUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyClusterUnion(FClusterUnionIndex Index)"
  },
  {
    "label": "AddPendingExplicitIndexOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExplicitIndexOperation(FClusterUnionExplicitIndex Index, EClusterUnionOperation Op, const TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "AddPendingClusterIndexOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingClusterIndexOperation(FClusterUnionIndex Index, EClusterUnionOperation Op, const TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "HandleAddOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddOperation(FClusterUnionIndex ClusterIndex, const TArray<FPBDRigidParticleHandle*>& InParticles, bool bReleaseClustersFirst)"
  },
  {
    "label": "HandleRemoveOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveOperation(FClusterUnionIndex ClusterIndex, const TArray<FPBDRigidParticleHandle*>& Particles, EClusterUnionOperationTiming UpdateClusterPropertiesTiming)"
  },
  {
    "label": "HandleRemoveOperationWithClusterLookup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveOperationWithClusterLookup(const TArray<FPBDRigidParticleHandle*>& InParticles, EClusterUnionOperationTiming UpdateClusterPropertiesTiming)"
  },
  {
    "label": "HandleUpdateChildToParentOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUpdateChildToParentOperation(FClusterUnionIndex ClusterIndex, const TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "FlushPendingOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingOperations()"
  },
  {
    "label": "HandleDeferredClusterUnionUpdateProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeferredClusterUnionUpdateProperties()"
  },
  {
    "label": "FindClusterUnionFromExplicitIndex()",
    "kind": "Method",
    "detail": "Function (FClusterUnion*)",
    "insertText": "FindClusterUnionFromExplicitIndex(FClusterUnionExplicitIndex Index)"
  },
  {
    "label": "FindClusterUnion()",
    "kind": "Method",
    "detail": "Function (FClusterUnion*)",
    "insertText": "FindClusterUnion(FClusterUnionIndex Index)"
  },
  {
    "label": "FindClusterUnionFromParticle()",
    "kind": "Method",
    "detail": "Function (FClusterUnion*)",
    "insertText": "FindClusterUnionFromParticle(FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "FindClusterUnionFromParticle()",
    "kind": "Method",
    "detail": "Function (const FClusterUnion*)",
    "insertText": "FindClusterUnionFromParticle(const FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "FindClusterUnionIndexFromParticle()",
    "kind": "Method",
    "detail": "Function (FClusterUnionIndex)",
    "insertText": "FindClusterUnionIndexFromParticle(const FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "IsClusterUnionParticle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClusterUnionParticle(FPBDRigidClusteredParticleHandle* Particle)"
  },
  {
    "label": "UpdateClusterUnionParticlesChildToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClusterUnionParticlesChildToParent(FClusterUnionIndex Index, const TArray<FPBDRigidParticleHandle*>& Particles, const TArray<FTransform>& ChildToParent, bool bLock)"
  },
  {
    "label": "UpdateAllClusterUnionProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllClusterUnionProperties(FClusterUnion& ClusterUnion, EUpdateClusterUnionPropertiesFlags Flags = EUpdateClusterUnionPropertiesFlags::All)"
  },
  {
    "label": "AddParticleToConnectionGraphInCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParticleToConnectionGraphInCluster(FClusterUnion& ClusterUnion, FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "GenerateInterclusterEdgesForParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateInterclusterEdgesForParticle(FClusterUnion& ClusterUnion, FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "GenerateInterclusterEdgesBetweenParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateInterclusterEdgesBetweenParticles(FClusterUnion& ClusterUnion, FPBDRigidParticleHandle* Particle, FPBDRigidParticleHandle* OtherParticle)"
  },
  {
    "label": "GetAllClusterUnions()",
    "kind": "Method",
    "detail": "Function (const TMap<FClusterUnionIndex,FClusterUnion>&)",
    "insertText": "GetAllClusterUnions()"
  },
  {
    "label": "RequestDeferredClusterPropertiesUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDeferredClusterPropertiesUpdate(FClusterUnionIndex ClusterIndex, EUpdateClusterUnionPropertiesFlags Flags)"
  },
  {
    "label": "AddPendingOperation()",
    "kind": "Method",
    "detail": "Function (private : FRigidClustering& MClustering ; FPBDRigidsEvolutionGBF& MEvolution ; using FClusterOpMap = TMap<EClusterUnionOperation,TArray<FPBDRigidParticleHandle*>> ; template<TIndex> using TClusterIndexOpMap = TMap<TIndex,FClusterOpMap> ; TClusterIndexOpMap<FClusterUnionIndex> PendingClusterIndexOperations ; TClusterIndexOpMap<FClusterUnionExplicitIndex> PendingExplicitIndexOperations ; TMap<FPBDRigidClusteredParticleHandle*,FClusterUnionChildToParentUpdate> PendingChildToParentUpdates ; TSet<FPBDRigidClusteredParticleHandle*> PendingParticlesToUndoChildToParentLock ; template<TIndex> void)",
    "insertText": "AddPendingOperation(TClusterIndexOpMap<TIndex>& OpMap, TIndex Index, EClusterUnionOperation Op, const TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FClusterOpMap& Ops = OpMap .)",
    "insertText": "FindOrAdd(Index)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<FPBDRigidParticleHandle*>& OpData = Ops .)",
    "insertText": "FindOrAdd(Op)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OpData .)",
    "insertText": "Append(Particles)"
  },
  {
    "label": "ClaimNextUnionIndex()",
    "kind": "Method",
    "detail": "Function (} TMap<FClusterUnionIndex,FClusterUnion> ClusterUnions ; TMap<FClusterUnionIndex,EUpdateClusterUnionPropertiesFlags> DeferredClusterUnionsForUpdateProperties ; FClusterUnionIndex)",
    "insertText": "ClaimNextUnionIndex()"
  },
  {
    "label": "DefaultClusterCreationParameters()",
    "kind": "Method",
    "detail": "Function (TArray<FClusterUnionIndex> ReusableIndices ; FClusterUnionIndex NextAvailableUnionIndex = 1 ; TMap<FClusterUnionExplicitIndex,FClusterUnionIndex> ExplicitIndexMap ; FClusterCreationParameters)",
    "insertText": "DefaultClusterCreationParameters()"
  },
  {
    "label": "GetOrCreateClusterUnionIndexFromExplicitIndex()",
    "kind": "Method",
    "detail": "Function (FClusterUnionIndex)",
    "insertText": "GetOrCreateClusterUnionIndexFromExplicitIndex(FClusterUnionExplicitIndex InIndex)"
  },
  {
    "label": "ForceRecreateClusterUnionGeometry()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectPtr)",
    "insertText": "ForceRecreateClusterUnionGeometry(const FClusterUnion& Union)"
  },
  {
    "label": "FlushIncrementalConnectivityGraphOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushIncrementalConnectivityGraphOperations(FClusterUnion& ClusterUnion)"
  },
  {
    "label": "ForceRegenerateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRegenerateGeometry(FClusterUnion& ClusterUnion, const TSet<FPBDRigidParticleHandle*>& FullChildrenSet)"
  },
  {
    "label": "FlushIncrementalGeometryOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushIncrementalGeometryOperations(FClusterUnion& ClusterUnion)"
  },
  {
    "label": "TransferClusterUnionShapeData()",
    "kind": "Method",
    "detail": "Function (} ; template<TParticle> void)",
    "insertText": "TransferClusterUnionShapeData(const TUniquePtr<Chaos::FPerShapeData>& ShapeData, TParticle* TemplateParticle, const TUniquePtr<Chaos::FPerShapeData>& TemplateShape, int32 ActorId, int32 ComponentId)"
  },
  {
    "label": "GetCollisionData()",
    "kind": "Method",
    "detail": "Function ({ FCollisionData Data = TemplateShape ->)",
    "insertText": "GetCollisionData()"
  },
  {
    "label": "SetCollisionData()",
    "kind": "Method",
    "detail": "Function (Data . UserData = nullptr ; ShapeData ->)",
    "insertText": "SetCollisionData(Data)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (} { FCollisionFilterData Data = TemplateShape ->)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "SetQueryData()",
    "kind": "Method",
    "detail": "Function (Data . Word0 = ActorId ; ShapeData ->)",
    "insertText": "SetQueryData(Data)"
  },
  {
    "label": "GetSimData()",
    "kind": "Method",
    "detail": "Function (} { FCollisionFilterData Data = TemplateShape ->)",
    "insertText": "GetSimData()"
  },
  {
    "label": "SetSimData()",
    "kind": "Method",
    "detail": "Function (Data . Word0 = 0 ; Data . Word2 = ComponentId ; ShapeData ->)",
    "insertText": "SetSimData(Data)"
  },
  {
    "label": "NumMaterials()",
    "kind": "Method",
    "detail": "Function (} { const int32 NumTemplateMaterials = TemplateShape ->)",
    "insertText": "NumMaterials()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (ShapeData ->)",
    "insertText": "SetMaterial(TemplateShape->GetMaterial(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NumTemplateMaterials > 1)"
  },
  {
    "label": "SetMaterials()",
    "kind": "Method",
    "detail": "Function (ShapeData ->)",
    "insertText": "SetMaterials(TemplateShape->GetMaterials())"
  },
  {
    "label": "ModifyAdditionOfChildrenToClusterUnionGeometry()",
    "kind": "Method",
    "detail": "Function (} } } } template<TClusterParticle,TParticle,TLambda> void)",
    "insertText": "ModifyAdditionOfChildrenToClusterUnionGeometry(TClusterParticle* ClusterParticle, const TArray<TParticle*>& Particles, int32 ActorId, int32 ComponentId, TLambda&& Func)"
  },
  {
    "label": "GetNumRootObjects()",
    "kind": "Method",
    "detail": "Function (const int32 OldNumChildShapes = ImplicitUnion ? ImplicitUnion ->)",
    "insertText": "GetNumRootObjects()"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func()"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (ImplicitUnion = ClusterParticle ->)",
    "insertText": "GetGeometry()->template AsA<FImplicitObjectUnion>()"
  },
  {
    "label": "ShapesArray()",
    "kind": "Method",
    "detail": "Function (const FShapesArray& ShapeArray = ClusterParticle ->)",
    "insertText": "ShapesArray()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TParticle* Particle = Particles [ Index ] ;)",
    "insertText": "if(!Particle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } const int32 ShapeIndex = OldNumChildShapes + Index ;)",
    "insertText": "if(const TUniquePtr<Chaos::FPerShapeData>& ShapeData = ShapeArray[ShapeIndex])"
  },
  {
    "label": "TransferClusterUnionShapeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferClusterUnionShapeData(ShapeData, Particle, TemplateShape, ActorId, ComponentId)"
  },
  {
    "label": "RemoveParticlesFromClusterUnionGeometry()",
    "kind": "Method",
    "detail": "Function (} } } template<TClusterParticle,TParticle> void)",
    "insertText": "RemoveParticlesFromClusterUnionGeometry(TClusterParticle* ClusterParticle, const TArray<TParticle*>& ShapeParticles, TArray<TParticle*>& AllChildParticles)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "ensureMsgf(AllChildParticles.Num() == ClusterParticle->ShapesArray().Num(), TEXT(\"RemoveParticlesFromClusterUnionGeometry : More than one shape per child particle : ShapeArray=[%d] AllChildParticles=[%d] ShapeParticles=[%d]\"), ClusterParticle->ShapesArray().Num(), AllChildParticles.Num(), ShapeParticles.Num())"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "checkf(AllChildParticles.Num() == ClusterParticle->ShapesArray().Num(), TEXT(\"RemoveParticlesFromClusterUnionGeometry : More than one shape per child particle : ShapeArray=[%d] AllChildParticles=[%d] ShapeParticles=[%d]\"), ClusterParticle->ShapesArray().Num(), AllChildParticles.Num(), ShapeParticles.Num())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (# endif TArray<int32> ShapeIndicesToRemove ; ShapeIndicesToRemove .)",
    "insertText": "Reserve(ShapeParticles.Num())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 Index = AllChildParticles .)",
    "insertText": "Find(ShapeParticle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShapeIndicesToRemove .)",
    "insertText": "Add(Index)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} } ShapeIndicesToRemove .)",
    "insertText": "Sort()"
  },
  {
    "label": "RemoveShapesAtSortedIndices()",
    "kind": "Method",
    "detail": "Function (ClusterParticle ->)",
    "insertText": "RemoveShapesAtSortedIndices(ShapeIndicesToRemove)"
  },
  {
    "label": "RemoveArrayItemsAtSortedIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveArrayItemsAtSortedIndices(AllChildParticles, ShapeIndicesToRemove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(ClusterParticle->ShapesArray().IsEmpty())"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (ClusterParticle ->)",
    "insertText": "SetGeometry(MakeImplicitObjectPtr<FImplicitObjectUnionClustered>())"
  }
]