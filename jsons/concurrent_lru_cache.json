[
  {
    "label": "concurrent_lru_cache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_lru_cache"
  },
  {
    "label": "map_value_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "map_value_type"
  },
  {
    "label": "handle_object",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "handle_object"
  },
  {
    "label": "aggregator_operation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "aggregator_operation"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "handle_move_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "handle_move_t"
  },
  {
    "label": "e_op_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "e_op_type"
  },
  {
    "label": "retrieve_aggregator_operation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "retrieve_aggregator_operation"
  },
  {
    "label": "signal_end_of_usage_aggregator_operation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "signal_end_of_usage_aggregator_operation"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_lru_cache_H # define __TBB_concurrent_lru_cache_H # if ! TBB_PREVIEW_CONCURRENT_LRU_CACHE # error Set TBB_PREVIEW_CONCURRENT_LRU_CACHE to include concurrent_lru_cache . h # endif # include \" tbb_stddef . h \" # include<map> # include<list> # include<algorithm> # if __TBB_CPP11_RVALUE_REF_PRESENT # include<utility> # endif # include \" atomic . h \" # include \" internal / _aggregator_impl . h \" namespace tbb { namespace interface6 { template<key_type,value_type,value_functor_type =)",
    "insertText": "value_type(*)(key_type)"
  },
  {
    "label": "map_value_type()",
    "kind": "Method",
    "detail": "Function (private : typedef concurrent_lru_cache self_type ; typedef value_functor_type value_function_type ; typedef std::size_t ref_counter_type ; struct map_value_type ; typedef std::map<key_type,map_value_type> map_storage_type ; typedef std::list<map_storage_type::iterator> lru_list_type ; struct map_value_type { value_type my_value ; ref_counter_type my_ref_counter ; lru_list_type::iterator my_lru_list_iterator ; bool my_is_ready ;)",
    "insertText": "map_value_type(value_type const& a_value, ref_counter_type a_ref_counter, typename lru_list_type::iterator a_lru_list_iterator, bool a_is_ready) : my_value(a_value), my_ref_counter(a_ref_counter), my_lru_list_iterator (a_lru_list_iterator), my_is_ready(a_is_ready)"
  },
  {
    "label": "concurrent_lru_cache()",
    "kind": "Method",
    "detail": "Function (} } ; class handle_object ; struct aggregator_operation ; typedef aggregator_operation aggregated_operation_type ; typedef tbb::internal::aggregating_functor<self_type,aggregated_operation_type> aggregator_function_type ; class tbb::internal::aggregating_functor<self_type,aggregated_operation_type> ; typedef tbb::internal::aggregator<aggregator_function_type,aggregated_operation_type> aggregator_type ; private : value_function_type my_value_function ; std::size_t const my_number_of_lru_history_items ; map_storage_type my_map_storage ; lru_list_type my_lru_list ; aggregator_type my_aggregator ; public : typedef handle_object handle ; public :)",
    "insertText": "concurrent_lru_cache(value_function_type f, std::size_t number_of_lru_history_items) : my_value_function(f),my_number_of_lru_history_items(number_of_lru_history_items)"
  },
  {
    "label": "initialize_handler()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "initialize_handler(aggregator_function_type(this))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} handle_object)",
    "insertText": "operator(key_type k)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (retrieve_aggregator_operation)",
    "insertText": "op(k)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "execute(&op)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (op .)",
    "insertText": "result().second.my_value = my_value_function(k)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(op.result().second.my_is_ready, true)"
  },
  {
    "label": "spin_wait_while_eq()",
    "kind": "Method",
    "detail": "Function (} else { tbb::)",
    "insertText": "spin_wait_while_eq(op.result().second.my_is_ready,false)"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "handle_object(*this,op.result())"
  },
  {
    "label": "signal_end_of_usage()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "signal_end_of_usage(typename map_storage_type::reference value_ref)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (signal_end_of_usage_aggregator_operation)",
    "insertText": "op(value_ref)"
  },
  {
    "label": "handle_move_t()",
    "kind": "Method",
    "detail": "Function (} private : # if ! __TBB_CPP11_RVALUE_REF_PRESENT struct handle_move_t : no_assign { concurrent_lru_cache& my_cache_ref ; map_storage_type::reference my_map_record_ref ;)",
    "insertText": "handle_move_t(concurrent_lru_cache & cache_ref, typename map_storage_type::reference value_ref):my_cache_ref(cache_ref),my_map_record_ref(value_ref)"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (} ; } ; # endif class handle_object { concurrent_lru_cache* my_cache_pointer ; map_storage_type::pointer my_map_record_ptr ; public :)",
    "insertText": "handle_object() : my_cache_pointer(), my_map_record_ptr()"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "handle_object(concurrent_lru_cache& cache_ref, typename map_storage_type::reference value_ref) : my_cache_pointer(&cache_ref), my_map_record_ptr(&value_ref)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "handle_object(handle_object&& src) : my_cache_pointer(src.my_cache_pointer), my_map_record_ptr(src.my_map_record_ptr)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((src.my_cache_pointer && src.my_map_record_ptr) || (!src.my_cache_pointer && !src.my_map_record_ptr), \"invalid state of moving object?\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (src . my_cache_pointer = NULL ; src . my_map_record_ptr = NULL ; } handle_object&)",
    "insertText": "operator(handle_object&& src)"
  },
  {
    "label": "signal_end_of_usage()",
    "kind": "Method",
    "detail": "Function (my_cache_pointer ->)",
    "insertText": "signal_end_of_usage(*my_map_record_ptr)"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (} my_cache_pointer = src . my_cache_pointer ; my_map_record_ptr = src . my_map_record_ptr ; src . my_cache_pointer = NULL ; src . my_map_record_ptr = NULL ; return* this ; } # else)",
    "insertText": "handle_object(handle_move_t m) : my_cache_pointer(&m.my_cache_ref), my_map_record_ptr(&m.my_map_record_ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} handle_object&)",
    "insertText": "operator(handle_move_t m)"
  },
  {
    "label": "handle_move_t()",
    "kind": "Method",
    "detail": "Function (} my_cache_pointer =& m . my_cache_ref ; my_map_record_ptr =& m . my_map_record_ref ; return* this ; } operator)",
    "insertText": "handle_move_t()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} # endif value_type&)",
    "insertText": "value()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_cache_pointer,\"get value from already moved object?\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_map_record_ptr,\"get value from an invalid or already moved object?\")"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} } private : # if __TBB_CPP11_RVALUE_REF_PRESENT handle_object&&)",
    "insertText": "move(handle_object& h)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((h.my_cache_pointer && h.my_map_record_ptr) || (!h.my_cache_pointer && !h.my_map_record_ptr), \"invalid state of moving object?\")"
  },
  {
    "label": "handle_move_t()",
    "kind": "Method",
    "detail": "Function (concurrent_lru_cache* cache_pointer = h . my_cache_pointer ; map_storage_type::pointer map_record_ptr = h . my_map_record_ptr ; h . my_cache_pointer = NULL ; h . my_map_record_ptr = NULL ; return)",
    "insertText": "handle_move_t(*cache_pointer, *map_record_ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif private : void)",
    "insertText": "operator(handle_object&)"
  },
  {
    "label": "handle_object()",
    "kind": "Method",
    "detail": "Function (# if __SUNPRO_CC public : # endif)",
    "insertText": "handle_object(handle_object &)"
  },
  {
    "label": "aggregator_operation()",
    "kind": "Method",
    "detail": "Function (} ; private : struct aggregator_operation : tbb::internal::aggregated_operation<aggregator_operation> { enum e_op_type { op_retive,op_signal_end_of_usage } ; e_op_type my_operation_type ;)",
    "insertText": "aggregator_operation(e_op_type operation_type): my_operation_type(operation_type)"
  },
  {
    "label": "cast_and_handle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cast_and_handle(self_type& container)"
  },
  {
    "label": "retrieve_aggregator_operation()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "retrieve_aggregator_operation(this)->handle(container)"
  },
  {
    "label": "signal_end_of_usage_aggregator_operation()",
    "kind": "Method",
    "detail": "Function (} else { static_cast<)",
    "insertText": "signal_end_of_usage_aggregator_operation(this)->handle(container)"
  },
  {
    "label": "retrieve_aggregator_operation()",
    "kind": "Method",
    "detail": "Function (} } } ; struct retrieve_aggregator_operation : aggregator_operation,private internal::no_assign { key_type my_key ; map_storage_type::pointer my_result_map_record_pointer ; bool my_is_new_value_needed ;)",
    "insertText": "retrieve_aggregator_operation(key_type key):aggregator_operation(aggregator_operation::op_retive),my_key(key),my_is_new_value_needed(false)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handle(self_type& container)"
  },
  {
    "label": "retrieve_serial()",
    "kind": "Method",
    "detail": "Function (my_result_map_record_pointer =& container .)",
    "insertText": "retrieve_serial(my_key,my_is_new_value_needed)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (} map_storage_type::reference)",
    "insertText": "result()"
  },
  {
    "label": "signal_end_of_usage_serial()",
    "kind": "Method",
    "detail": "Function (container .)",
    "insertText": "signal_end_of_usage_serial(my_map_record_ref)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (} } ; private : void)",
    "insertText": "handle_operations(aggregator_operation* op_list)"
  },
  {
    "label": "cast_and_handle()",
    "kind": "Method",
    "detail": "Function (op_list ->)",
    "insertText": "cast_and_handle(*this)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (aggregator_operation* tmp = op_list ; op_list = op_list -> next ; tbb::)",
    "insertText": "itt_store_word_with_release(tmp->status, uintptr_t(1))"
  },
  {
    "label": "retrieve_serial()",
    "kind": "Method",
    "detail": "Function (} } private : map_storage_type::reference)",
    "insertText": "retrieve_serial(key_type k, bool& is_new_value_needed)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (map_storage_type::iterator it = my_map_storage .)",
    "insertText": "find(k)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (it = my_map_storage .)",
    "insertText": "insert(it,std::make_pair(k,map_value_type(value_type(),0,my_lru_list.end(),false)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (is_new_value_needed = true ; } else { lru_list_type::iterator list_it = it -> second . my_lru_list_iterator ;)",
    "insertText": "if(list_it!=my_lru_list.end())"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!it->second.my_ref_counter,\"item to be evicted should not have a live references\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (my_lru_list .)",
    "insertText": "erase(list_it)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (it -> second . my_lru_list_iterator = my_lru_list .)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (map_storage_type::iterator it = my_map_storage .)",
    "insertText": "find(map_record_ref.first)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(it!=my_map_storage.end(),\"cache should not return past-end iterators to outer world\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(&(*it) == &map_record_ref,\"dangling reference has been returned to outside world? data race ?\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_lru_list.end()== std::find(my_lru_list.begin(),my_lru_list.end(),it), \"object in use should not be in list of unused objects \")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t number_of_elements_to_evict = 1 + my_lru_list .)",
    "insertText": "size()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (map_storage_type::iterator it_to_evict = my_lru_list .)",
    "insertText": "back()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!it_to_evict->second.my_ref_counter,\"item to be evicted should not have a live references\")"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (my_lru_list .)",
    "insertText": "pop_back()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (my_map_storage .)",
    "insertText": "erase(it_to_evict)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (} } my_lru_list .)",
    "insertText": "push_front(it)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (it -> second . my_lru_list_iterator = my_lru_list .)",
    "insertText": "begin()"
  }
]