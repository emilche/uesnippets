[
  {
    "label": "pasin()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MOREVECTORIZATION_MATHFUNCTIONS_H # define EIGEN_MOREVECTORIZATION_MATHFUNCTIONS_H namespace Eigen { namespace internal { template<Packet> Packet)",
    "insertText": "pasin(Packet a)"
  },
  {
    "label": "pasin()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_VECTORIZE_SSE template<> EIGEN_DONT_INLINE Packet4f)",
    "insertText": "pasin(Packet4f x)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(half, 0.5)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(minus_half, -0.5)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(3half, 1.5)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f_FROM_INT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f_FROM_INT(sign_mask, 0x80000000)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(pi, 3.141592654)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(pi_over_2, 3.141592654*0.5)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(asin1, 4.2163199048E-2)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(asin2, 2.4181311049E-2)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(asin3, 4.5470025998E-2)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(asin4, 7.4953002686E-2)"
  },
  {
    "label": "_EIGEN_DECLARE_CONST_Packet4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_EIGEN_DECLARE_CONST_Packet4f(asin5, 1.6666752422E-1)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (Packet4f a =)",
    "insertText": "pabs(x)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f sign_bit =)",
    "insertText": "_mm_and_ps(x, p4f_sign_mask)"
  },
  {
    "label": "_mm_cmpgt_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f z1,z2 ; Packet4f branch_mask =)",
    "insertText": "_mm_cmpgt_ps(a, p4f_half)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function ({ z1 =)",
    "insertText": "pmadd(p4f_minus_half,a,p4f_half)"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (Packet4f x1 =)",
    "insertText": "psqrt(z1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s1 =)",
    "insertText": "pmadd(p4f_asin1, z1, p4f_asin2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s2 =)",
    "insertText": "pmadd(s1, z1, p4f_asin3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s3 =)",
    "insertText": "pmadd(s2,z1, p4f_asin4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s4 =)",
    "insertText": "pmadd(s3,z1, p4f_asin5)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f temp =)",
    "insertText": "pmul(s4,z1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (z1 =)",
    "insertText": "pmadd(temp,x1,x1)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (z1 =)",
    "insertText": "padd(z1,z1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (z1 =)",
    "insertText": "psub(p4f_pi_over_2,z1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} { Packet4f x2 = a ; z2 =)",
    "insertText": "pmul(x2,x2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s1 =)",
    "insertText": "pmadd(p4f_asin1, z2, p4f_asin2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s2 =)",
    "insertText": "pmadd(s1, z2, p4f_asin3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s3 =)",
    "insertText": "pmadd(s2,z2, p4f_asin4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet4f s4 =)",
    "insertText": "pmadd(s3,z2, p4f_asin5)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f temp =)",
    "insertText": "pmul(s4,z2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (z2 =)",
    "insertText": "pmadd(temp,x2,x2)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (} z1 =)",
    "insertText": "_mm_and_ps(branch_mask, z1)"
  },
  {
    "label": "_mm_andnot_ps()",
    "kind": "Method",
    "detail": "Function (z2 =)",
    "insertText": "_mm_andnot_ps(branch_mask, z2)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (Packet4f z =)",
    "insertText": "_mm_or_ps(z1,z2)"
  }
]