[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OLightSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OLight_h # define Alembic_AbcGeom_OLight_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / OCamera . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OLightSchema : public Abc::OSchema<LightSchemaInfo> { public : typedef OLightSchema this_type ;)",
    "insertText": "OLightSchema()"
  },
  {
    "label": "OLightSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OLightSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OLightSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OLightSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "setCameraSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCameraSample(const CameraSample &iSamp)"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "getUserProperties()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getUserProperties()"
  },
  {
    "label": "getArbGeomParams()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getArbGeomParams()"
  },
  {
    "label": "getChildBoundsProperty()",
    "kind": "Method",
    "detail": "Function (Abc::OBox3dProperty)",
    "insertText": "getChildBoundsProperty()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(OLightSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init(AbcA::CompoundPropertyWriterPtr iParent, const Abc::Argument &iArg0, const Abc::Argument &iArg1, const Abc::Argument &iArg2, const Abc::Argument &iArg3)"
  }
]