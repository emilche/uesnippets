[
  {
    "label": "ObjCVideoEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjCVideoEncoderFactory"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_NATIVE_SRC_OBJC_VIDEO_ENCODER_FACTORY_H_ # define SDK_OBJC_NATIVE_SRC_OBJC_VIDEO_ENCODER_FACTORY_H_ # import<Foundation / Foundation . h> # import \" base / RTCMacros . h \" # include \" api / video_codecs / video_encoder_factory . h \" @ protocol)",
    "insertText": "RTC_OBJC_TYPE(RTCVideoEncoderFactory)"
  },
  {
    "label": "ObjCVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (namespace webrtc { class ObjCVideoEncoderFactory : public VideoEncoderFactory { public :)",
    "insertText": "ObjCVideoEncoderFactory(id<RTC_OBJC_TYPE(RTCVideoEncoderFactory)>)"
  },
  {
    "label": "ObjCVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ObjCVideoEncoderFactory()"
  },
  {
    "label": "RTC_OBJC_TYPE()",
    "kind": "Method",
    "detail": "Function (id<)",
    "insertText": "RTC_OBJC_TYPE(RTCVideoEncoderFactory)> wrapped_encoder_factory()"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "GetImplementations()",
    "kind": "Method",
    "detail": "Function (std::vector<SdpVideoFormat>)",
    "insertText": "GetImplementations()"
  },
  {
    "label": "CreateVideoEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateVideoEncoder(const SdpVideoFormat& format)"
  },
  {
    "label": "GetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<EncoderSelectorInterface>)",
    "insertText": "GetEncoderSelector()"
  }
]