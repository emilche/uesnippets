[
  {
    "label": "InternalStatsKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalStatsKey"
  },
  {
    "label": "FrameStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FrameComparison",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameComparison"
  },
  {
    "label": "InternalStatsKey()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_INTERNAL_SHARED_OBJECTS_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_INTERNAL_SHARED_OBJECTS_H_ # include<memory> # include<string> # include<utility> # include \" absl / types / optional . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_frame_type . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_shared_objects . h \" namespace webrtc { struct InternalStatsKey {)",
    "insertText": "InternalStatsKey(size_t stream, size_t sender, size_t receiver) : stream(stream), sender(sender), receiver(receiver)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (size_t stream ; size_t sender ; size_t receiver ; } ; bool)",
    "insertText": "operator(const InternalStatsKey& a, const InternalStatsKey& b)"
  },
  {
    "label": "FrameStats()",
    "kind": "Method",
    "detail": "Function (struct FrameStats {)",
    "insertText": "FrameStats(uint16_t frame_id, Timestamp captured_time) : frame_id(frame_id), captured_time(captured_time)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (} uint16_t frame_id ; Timestamp captured_time ; Timestamp pre_encode_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (VideoFrameType encoded_frame_type = VideoFrameType::kEmptyFrame ; DataSize encoded_image_size =)",
    "insertText": "Bytes(0)"
  },
  {
    "label": "FrameComparison()",
    "kind": "Method",
    "detail": "Function (uint32_t target_encode_bitrate = 0 ; absl::optional<int> decoded_frame_width = absl::nullopt ; absl::optional<int> decoded_frame_height = absl::nullopt ; absl::optional<StreamCodecInfo> used_encoder = absl::nullopt ; absl::optional<StreamCodecInfo> used_decoder = absl::nullopt ; bool decoder_failed = false ; } ; enum class OverloadReason { kNone,kCpu,kMemory } ; enum class FrameComparisonType { kRegular,kDroppedFrame,kFrameInFlight } ; struct FrameComparison {)",
    "insertText": "FrameComparison(InternalStatsKey stats_key, absl::optional<VideoFrame> captured, absl::optional<VideoFrame> rendered, FrameComparisonType type, FrameStats frame_stats, OverloadReason overload_reason)"
  }
]