[
  {
    "label": "exp_rotation1()",
    "kind": "Method",
    "detail": "Function (# ifndef __VQ_MIPSR1_H__ # define __VQ_MIPSR1_H__ # ifdef HAVE_CONFIG_H # include \" config . h \" # endif # include \" mathops . h \" # include \" arch . h \" # define OVERRIDE_vq_exp_rotation1 void)",
    "insertText": "exp_rotation1(celt_norm *X, int len, int stride, opus_val16 c, opus_val16 s)"
  },
  {
    "label": "NEG16()",
    "kind": "Method",
    "detail": "Function (int i ; opus_val16 ms ; celt_norm* Xptr ; Xptr = X ; ms =)",
    "insertText": "NEG16(s)"
  },
  {
    "label": "EXTRACT16()",
    "kind": "Method",
    "detail": "Function (celt_norm x1,x2 ; x1 = Xptr [ 0 ] ; x2 = Xptr [ stride ] ; Xptr [ stride ] =)",
    "insertText": "EXTRACT16(PSHR32(MAC16_16(MULT16_16(c, x2), s, x1), 15))"
  },
  {
    "label": "EXTRACT16()",
    "kind": "Method",
    "detail": "Function (* Xptr + + =)",
    "insertText": "EXTRACT16(PSHR32(MAC16_16(MULT16_16(c, x1), ms, x2), 15))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} Xptr =& X [ len - 2* stride - 1 ] ;)",
    "insertText": "for(i=len-2*stride-1;i>=0;i--)"
  },
  {
    "label": "renormalise_vector()",
    "kind": "Method",
    "detail": "Function (} } # define OVERRIDE_renormalise_vector void)",
    "insertText": "renormalise_vector(celt_norm *X, int N, opus_val16 gain, int arch)"
  },
  {
    "label": "X1()",
    "kind": "Method",
    "detail": "Function (int i ; # ifdef FIXED_POINT int k ; # endif opus_val32 E = EPSILON ; opus_val16 g ; opus_val32 t ; celt_norm* xptr = X ; int X0,)",
    "insertText": "X1(void)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"mult $ac1, $0, $0\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MTLO %0, $ac1\" : :\"r\" (E))"
  },
  {
    "label": "X0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X0(int)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MADD $ac1, %0, %1\" : : \"r\" (X0), \"r\" (X0))"
  },
  {
    "label": "X1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X1(int)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MADD $ac1, %0, %1\" : : \"r\" (X1), \"r\" (X1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;i<N;i++)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (} asm)",
    "insertText": "volatile(\"MFLO %0, $ac1\" : \"=r\" (E))"
  },
  {
    "label": "celt_ilog2()",
    "kind": "Method",
    "detail": "Function (# ifdef FIXED_POINT k =)",
    "insertText": "celt_ilog2(E)"
  },
  {
    "label": "VSHR32()",
    "kind": "Method",
    "detail": "Function (# endif t =)",
    "insertText": "VSHR32(E, 2*(k-7))"
  },
  {
    "label": "MULT16_16_P15()",
    "kind": "Method",
    "detail": "Function (g =)",
    "insertText": "MULT16_16_P15(celt_rsqrt_norm(t),gain)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (xptr = X ;)",
    "insertText": "for(i=0;i<N;i++)"
  },
  {
    "label": "EXTRACT16()",
    "kind": "Method",
    "detail": "Function (* xptr =)",
    "insertText": "EXTRACT16(PSHR32(MULT16_16(g, *xptr), k+1))"
  }
]