[
  {
    "label": "CefResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefResourceManager"
  },
  {
    "label": "RequestParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequestParams"
  },
  {
    "label": "RequestState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequestState"
  },
  {
    "label": "Request",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Request"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "Provider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Provider"
  },
  {
    "label": "CefDeleteOnThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnThread"
  },
  {
    "label": "ProviderEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProviderEntry"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_WRAPPER_CEF_RESOURCE_MANAGER_H_ # define CEF_INCLUDE_WRAPPER_CEF_RESOURCE_MANAGER_H_ # pragma once # include<list> # include<memory> # include \" include / base / cef_callback . h \" # include \" include / base / cef_macros . h \" # include \" include / base / cef_ref_counted . h \" # include \" include / base / cef_weak_ptr . h \" # include \" include / cef_request_handler . h \" # include \" include / wrapper / cef_closure_task . h \" # include \" include / wrapper / cef_helpers . h \" class CefResourceManager : public base::RefCountedThreadSafe<CefResourceManager,CefDeleteOnIOThread> { public : using UrlFilter = base::RepeatingCallback<)",
    "insertText": "string(const std::string&)"
  },
  {
    "label": "url()",
    "kind": "Method",
    "detail": "Function (private : struct RequestParams { std::string url_ ; CefRefPtr<CefBrowser> browser_ ; CefRefPtr<CefFrame> frame_ ; CefRefPtr<CefRequest> request_ ; UrlFilter url_filter_ ; MimeTypeResolver mime_type_resolver_ ; } ; struct RequestState ; public : class Request : public base::RefCountedThreadSafe<Request> { public : std::string)",
    "insertText": "url()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (private : class base::RefCountedThreadSafe<Request> ; class CefResourceManager ;)",
    "insertText": "Request(std::unique_ptr<RequestState> state)"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RequestState>)",
    "insertText": "SendRequest()"
  },
  {
    "label": "HasState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasState()"
  },
  {
    "label": "ContinueOnIOThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueOnIOThread(std::unique_ptr<RequestState> state, CefRefPtr<CefResourceHandler> handler)"
  },
  {
    "label": "StopOnIOThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopOnIOThread(std::unique_ptr<RequestState> state)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RequestState> state_ ; RequestParams params_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Request)"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::list<scoped_refptr<Request>> RequestList ; class Provider { public : bool)",
    "insertText": "OnRequest(scoped_refptr<Request> request)"
  },
  {
    "label": "OnRequestCanceled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestCanceled(scoped_refptr<Request> request)"
  },
  {
    "label": "Provider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Provider()"
  },
  {
    "label": "CefResourceManager()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "CefResourceManager()"
  },
  {
    "label": "AddContentProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContentProvider(const std::string& url, const std::string& content, const std::string& mime_type, int order, const std::string& identifier)"
  },
  {
    "label": "AddDirectoryProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectoryProvider(const std::string& url_path, const std::string& directory_path, int order, const std::string& identifier)"
  },
  {
    "label": "AddArchiveProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArchiveProvider(const std::string& url_path, const std::string& archive_path, const std::string& password, int order, const std::string& identifier)"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProvider(Provider* provider, int order, const std::string& identifier)"
  },
  {
    "label": "RemoveProviders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProviders(const std::string& identifier)"
  },
  {
    "label": "RemoveAllProviders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllProviders()"
  },
  {
    "label": "SetUrlFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrlFilter(const UrlFilter& filter)"
  },
  {
    "label": "SetMimeTypeResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMimeTypeResolver(const MimeTypeResolver& resolver)"
  },
  {
    "label": "OnBeforeResourceLoad()",
    "kind": "Method",
    "detail": "Function (cef_return_value_t)",
    "insertText": "OnBeforeResourceLoad(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, CefRefPtr<CefRequestCallback> callback)"
  },
  {
    "label": "GetResourceHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResourceHandler>)",
    "insertText": "GetResourceHandler(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request)"
  },
  {
    "label": "RequestState()",
    "kind": "Method",
    "detail": "Function (struct ProviderEntry ; typedef std::list<ProviderEntry*> ProviderEntryList ; struct RequestState { ~)",
    "insertText": "RequestState()"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (base::WeakPtr<CefResourceManager> manager_ ; CefRefPtr<CefRequestCallback> callback_ ; ProviderEntryList::iterator current_entry_pos_ ; RequestList::iterator current_request_pos_ ; RequestParams params_ ; } ; bool)",
    "insertText": "SendRequest(std::unique_ptr<RequestState> state)"
  },
  {
    "label": "ContinueRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueRequest(std::unique_ptr<RequestState> state, CefRefPtr<CefResourceHandler> handler)"
  },
  {
    "label": "StopRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRequest(std::unique_ptr<RequestState> state)"
  },
  {
    "label": "IncrementProvider()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementProvider(RequestState* state)"
  },
  {
    "label": "DetachRequestFromProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachRequestFromProvider(RequestState* state)"
  },
  {
    "label": "GetNextValidProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNextValidProvider(ProviderEntryList::iterator& iterator)"
  },
  {
    "label": "DeleteProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteProvider(ProviderEntryList::iterator& iterator, bool stop)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (ProviderEntryList providers_ ; typedef std::map<uint64,CefRefPtr<CefResourceHandler>> PendingHandlersMap ; PendingHandlersMap pending_handlers_ ; UrlFilter url_filter_ ; MimeTypeResolver mime_type_resolver_ ; std::unique_ptr<base::WeakPtrFactory<CefResourceManager>> weak_ptr_factory_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefResourceManager)"
  }
]