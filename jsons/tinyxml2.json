[
  {
    "label": "XMLDocument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLDocument"
  },
  {
    "label": "XMLElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLElement"
  },
  {
    "label": "XMLAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLAttribute"
  },
  {
    "label": "XMLComment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLComment"
  },
  {
    "label": "XMLText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLText"
  },
  {
    "label": "XMLDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLDeclaration"
  },
  {
    "label": "XMLUnknown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLUnknown"
  },
  {
    "label": "XMLPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLPrinter"
  },
  {
    "label": "TINYXML2_LIB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TINYXML2_LIB"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DynArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynArray"
  },
  {
    "label": "MemPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemPool"
  },
  {
    "label": "MemPoolT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemPoolT"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Block"
  },
  {
    "label": "XMLError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "XMLError"
  },
  {
    "label": "ElementClosingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ElementClosingType"
  },
  {
    "label": "Whitespace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Whitespace"
  },
  {
    "label": "XMLNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XMLNode"
  },
  {
    "label": "DepthTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DepthTracker"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef TINYXML2_INCLUDED # define TINYXML2_INCLUDED # if)",
    "insertText": "defined(ANDROID_NDK) || defined(__BORLANDC__) || defined(__QNXNTO__) # include <ctype.h> # include <limits.h> # include <stdio.h> # include <stdlib.h> # include <string.h> # if defined(__PS3__) # include <stddef.h> # endif #else # include <cctype> # include <climits> # include <cstdio> # include <cstdlib> # include <cstring> #endif #include <stdint.h> #if defined( _DEBUG ) || defined (__DEBUG__) # ifndef TINYXML2_DEBUG # define TINYXML2_DEBUG # endif #endif #ifdef _MSC_VER # pragma warning(push) # pragma warning(disable: 4251) #endif #ifdef _WIN32 # ifdef TINYXML2_EXPORT # define TINYXML2_LIB __declspec(dllexport) # elif defined(TINYXML2_IMPORT) # define TINYXML2_LIB __declspec(dllimport) # else # define TINYXML2_LIB # endif #elif __GNUC__ >= 4 # define TINYXML2_LIB __attribute__((visibility(\"default\"))) #else # define TINYXML2_LIB #endif #if !defined(TIXMLASSERT) #if defined(TINYXML2_DEBUG) # if defined(_MSC_VER) # # define TIXMLASSERT( x ) if ( !((void)0,(x)))"
  },
  {
    "label": "__debugbreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__debugbreak()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(ANDROID_NDK) # include <android/log.h> # define TIXMLASSERT( x ) if ( !(x))"
  },
  {
    "label": "__android_log_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__android_log_assert(\"assert\", \"grinliz\", \"ASSERT in '%s' at %d.\", __FILE__, __LINE__)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (} # else # include<assert . h> # define TIXMLASSERT assert # endif # else # define)",
    "insertText": "TIXMLASSERT(x)"
  },
  {
    "label": "StrPair()",
    "kind": "Method",
    "detail": "Function (} # endif # endif const int TIXML2_MAJOR_VERSION = 9 ; const int TIXML2_MINOR_VERSION = 0 ; const int TIXML2_PATCH_VERSION = 0 ; # define TINYXML2_MAJOR_VERSION 9 # define TINYXML2_MINOR_VERSION 0 # define TINYXML2_PATCH_VERSION 0 const int TINYXML2_MAX_ELEMENT_DEPTH = 1 0 0 ; namespace tinyxml2 { class XMLDocument ; class XMLElement ; class XMLAttribute ; class XMLComment ; class XMLText ; class XMLDeclaration ; class XMLUnknown ; class XMLPrinter ; class TINYXML2_LIB StrPair { public : enum Mode { NEEDS_ENTITY_PROCESSING = 0 x01,NEEDS_NEWLINE_NORMALIZATION = 0 x02,NEEDS_WHITESPACE_COLLAPSING = 0 x04,TEXT_ELEMENT = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,TEXT_ELEMENT_LEAVE_ENTITIES = NEEDS_NEWLINE_NORMALIZATION,ATTRIBUTE_NAME = 0,ATTRIBUTE_VALUE = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,ATTRIBUTE_VALUE_LEAVE_ENTITIES = NEEDS_NEWLINE_NORMALIZATION,COMMENT = NEEDS_NEWLINE_NORMALIZATION } ;)",
    "insertText": "StrPair() : _flags( 0 ), _start( 0 ), _end( 0)"
  },
  {
    "label": "StrPair()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StrPair()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(char* start, char* end, int flags)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(start)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(end)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetStr()",
    "kind": "Method",
    "detail": "Function (_start = start ; _end = end ; _flags = flags | NEEDS_FLUSH ; } const char*)",
    "insertText": "GetStr()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (_start = const_cast<)",
    "insertText": "char(str)"
  },
  {
    "label": "SetStr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStr(const char* str, int flags=0)"
  },
  {
    "label": "ParseText()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ParseText(char* in, const char* endTag, int strFlags, int* curLineNumPtr)"
  },
  {
    "label": "ParseName()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ParseName(char* in)"
  },
  {
    "label": "TransferTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferTo(StrPair* other)"
  },
  {
    "label": "CollapseWhitespace()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CollapseWhitespace()"
  },
  {
    "label": "StrPair()",
    "kind": "Method",
    "detail": "Function (enum { NEEDS_FLUSH = 0 x100,NEEDS_DELETE = 0 x200 } ; int _flags ; char* _start ; char* _end ;)",
    "insertText": "StrPair(const StrPair& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const StrPair& other)"
  },
  {
    "label": "DynArray()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,int INITIAL_SIZE> class DynArray { public :)",
    "insertText": "DynArray() : _mem( _pool ), _allocated( INITIAL_SIZE ), _size( 0)"
  },
  {
    "label": "DynArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DynArray()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (delete [ ] _mem ; } } void)",
    "insertText": "Clear()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (_size = 0 ; } void)",
    "insertText": "Push(T t)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_size < INT_MAX)"
  },
  {
    "label": "PushArr()",
    "kind": "Method",
    "detail": "Function (_mem [ _size ] = t ; + + _size ; } T*)",
    "insertText": "PushArr(int count)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(count >= 0)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_size <= INT_MAX - count)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (T* ret =& _mem [ _size ] ; _size + = count ; return ret ; } T)",
    "insertText": "Pop()"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_size > 0)"
  },
  {
    "label": "PopArr()",
    "kind": "Method",
    "detail": "Function (- - _size ; return _mem [ _size ] ; } void)",
    "insertText": "PopArr(int count)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_size >= count)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(i>= 0 && i < _size)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_size >= 0)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_allocated >= INITIAL_SIZE)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(i >= 0 && i < _size)"
  },
  {
    "label": "Mem()",
    "kind": "Method",
    "detail": "Function (_mem [ i ] = _mem [ _size - 1 ] ; - - _size ; } const T*)",
    "insertText": "Mem()"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_mem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const DynArray&)"
  },
  {
    "label": "EnsureCapacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCapacity(int cap)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(cap > 0)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(cap <= INT_MAX / 2)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (const int newAllocated = cap* 2 ; T* newMem = new T [ newAllocated ] ;)",
    "insertText": "TIXMLASSERT(newAllocated >= _size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(newMem, _mem, sizeof(T)*_size)"
  },
  {
    "label": "MemPool()",
    "kind": "Method",
    "detail": "Function (delete [ ] _mem ; } _mem = newMem ; _allocated = newAllocated ; } } T* _mem ; T _pool [ INITIAL_SIZE ] ; int _allocated ; int _size ; } ; class MemPool { public :)",
    "insertText": "MemPool()"
  },
  {
    "label": "ItemSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ItemSize()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void*)"
  },
  {
    "label": "SetTracked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTracked()"
  },
  {
    "label": "MemPoolT()",
    "kind": "Method",
    "detail": "Function (} ; template<int ITEM_SIZE> class MemPoolT : public MemPool { public :)",
    "insertText": "MemPoolT() : _blockPtrs(), _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)"
  },
  {
    "label": "MemPoolT()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MemPoolT()"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (Block* block = new)",
    "insertText": "Block()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (_blockPtrs .)",
    "insertText": "Push(block)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Item* blockItems = block -> items ;)",
    "insertText": "for(int i = 0; i < ITEMS_PER_BLOCK - 1; ++i)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (blockItems [ i ] .)",
    "insertText": "next(blockItems[i + 1])"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (} blockItems [ ITEMS_PER_BLOCK - 1 ] . next = 0 ; _root = blockItems ; } Item* const result = _root ;)",
    "insertText": "TIXMLASSERT(result != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_root = _root -> next ; + + _currentAllocs ;)",
    "insertText": "if(_currentAllocs > _maxAllocs)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (_maxAllocs = _currentAllocs ; } + + _nAllocs ; + + _nUntracked ; return result ; } void)",
    "insertText": "Free(void* mem)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (# ifdef TINYXML2_DEBUG)",
    "insertText": "memset(item, 0xfe, sizeof( *item ))"
  },
  {
    "label": "Trace()",
    "kind": "Method",
    "detail": "Function (# endif item -> next = _root ; _root = item ; } void)",
    "insertText": "Trace(const char* name)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Mempool %s watermark=%d [%dk] current=%d size=%d nAlloc=%d blocks=%d\\n\", name, _maxAllocs, _maxAllocs * ITEM_SIZE / 1024, _currentAllocs, ITEM_SIZE, _nAllocs, _blockPtrs.Size())"
  },
  {
    "label": "Untracked()",
    "kind": "Method",
    "detail": "Function (- - _nUntracked ; } int)",
    "insertText": "Untracked()"
  },
  {
    "label": "MemPoolT()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "MemPoolT(const MemPoolT&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MemPoolT&)"
  },
  {
    "label": "XMLVisitor()",
    "kind": "Method",
    "detail": "Function (union Item { Item* next ; char itemData [ ITEM_SIZE ] ; } ; struct Block { Item items [ ITEMS_PER_BLOCK ] ; } ; DynArray<Block*,1 0> _blockPtrs ; Item* _root ; int _currentAllocs ; int _nAllocs ; int _maxAllocs ; int _nUntracked ; } ; class TINYXML2_LIB XMLVisitor { public : ~)",
    "insertText": "XMLVisitor()"
  },
  {
    "label": "VisitEnter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VisitEnter(const XMLDocument&)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(p)"
  },
  {
    "label": "IsWhiteSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWhiteSpace(char p)"
  },
  {
    "label": "IsNameStartChar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNameStartChar(unsigned char ch)"
  },
  {
    "label": "IsPrefixHex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrefixHex(const char* p)"
  },
  {
    "label": "SkipWhiteSpace()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "SkipWhiteSpace(p, 0)"
  },
  {
    "label": "StringEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StringEqual(const char* p, const char* q, int nChar=INT_MAX)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(q)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(nChar >= 0)"
  },
  {
    "label": "IsUTF8Continuation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUTF8Continuation(const char p)"
  },
  {
    "label": "ReadBOM()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "ReadBOM(const char* p, bool* hasBOM)"
  },
  {
    "label": "GetCharacterRef()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetCharacterRef(const char* p, char* value, int* length)"
  },
  {
    "label": "ConvertUTF32ToUTF8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertUTF32ToUTF8(unsigned long input, char* output, int* length)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(int v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(unsigned v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(bool v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(float v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(double v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(int64_t v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToStr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStr(uint64_t v, char* buffer, int bufferSize)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToInt(const char* str, int* value)"
  },
  {
    "label": "ToUnsigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToUnsigned(const char* str, unsigned* value)"
  },
  {
    "label": "ToBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToBool(const char* str, bool* value)"
  },
  {
    "label": "ToFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToFloat(const char* str, float* value)"
  },
  {
    "label": "ToDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToDouble(const char* str, double* value)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToInt64(const char* str, int64_t* value)"
  },
  {
    "label": "ToUnsigned64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToUnsigned64(const char* str, uint64_t* value)"
  },
  {
    "label": "SetBoolSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolSerialization(const char* writeTrue, const char* writeFalse)"
  },
  {
    "label": "GetDocument()",
    "kind": "Method",
    "detail": "Function (private : const char* writeBoolTrue ; const char* writeBoolFalse ; } ; class TINYXML2_LIB XMLNode { class XMLDocument ; class XMLElement ; public : const XMLDocument*)",
    "insertText": "GetDocument()"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(_document)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const char* val, bool staticMem=false)"
  },
  {
    "label": "GetLineNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLineNum()"
  },
  {
    "label": "FirstChildElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "FirstChildElement(const char* name = 0)"
  },
  {
    "label": "LastChild()",
    "kind": "Method",
    "detail": "Function (} const XMLNode*)",
    "insertText": "LastChild()"
  },
  {
    "label": "LastChildElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "LastChildElement(const char* name = 0)"
  },
  {
    "label": "PreviousSibling()",
    "kind": "Method",
    "detail": "Function (} const XMLNode*)",
    "insertText": "PreviousSibling()"
  },
  {
    "label": "PreviousSiblingElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "PreviousSiblingElement(const char* name = 0)"
  },
  {
    "label": "NextSibling()",
    "kind": "Method",
    "detail": "Function (} const XMLNode*)",
    "insertText": "NextSibling()"
  },
  {
    "label": "NextSiblingElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "NextSiblingElement(const char* name = 0)"
  },
  {
    "label": "InsertEndChild()",
    "kind": "Method",
    "detail": "Function (} XMLNode*)",
    "insertText": "InsertEndChild(XMLNode* addThis)"
  },
  {
    "label": "LinkEndChild()",
    "kind": "Method",
    "detail": "Function (XMLNode*)",
    "insertText": "LinkEndChild(XMLNode* addThis)"
  },
  {
    "label": "InsertFirstChild()",
    "kind": "Method",
    "detail": "Function (} XMLNode*)",
    "insertText": "InsertFirstChild(XMLNode* addThis)"
  },
  {
    "label": "InsertAfterChild()",
    "kind": "Method",
    "detail": "Function (XMLNode*)",
    "insertText": "InsertAfterChild(XMLNode* afterThis, XMLNode* addThis)"
  },
  {
    "label": "DeleteChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteChildren()"
  },
  {
    "label": "DeleteChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteChild(XMLNode* node)"
  },
  {
    "label": "ShallowClone()",
    "kind": "Method",
    "detail": "Function (XMLNode*)",
    "insertText": "ShallowClone(XMLDocument* document)"
  },
  {
    "label": "DeepClone()",
    "kind": "Method",
    "detail": "Function (XMLNode*)",
    "insertText": "DeepClone(XMLDocument* target)"
  },
  {
    "label": "ShallowEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShallowEqual(const XMLNode* compare)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Accept(XMLVisitor* visitor)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserData(void* userData)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (_userData = userData ; } void*)",
    "insertText": "GetUserData()"
  },
  {
    "label": "XMLNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLNode()"
  },
  {
    "label": "ParseDeep()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ParseDeep(char* p, StrPair* parentEndTag, int* curLineNumPtr)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (XMLDocument* _document ; XMLNode* _parent ; StrPair _value ; int _parseLineNum ; XMLNode* _firstChild ; XMLNode* _lastChild ; XMLNode* _prev ; XMLNode* _next ; void* _userData ; private : MemPool* _memPool ; void)",
    "insertText": "Unlink(XMLNode* child)"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(XMLNode* node)"
  },
  {
    "label": "InsertChildPreamble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChildPreamble(XMLNode* insertThis)"
  },
  {
    "label": "ToElementWithName()",
    "kind": "Method",
    "detail": "Function (const XMLElement*)",
    "insertText": "ToElementWithName(const char* name)"
  },
  {
    "label": "XMLNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMLNode(const XMLNode&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLNode&)",
    "insertText": "operator(const XMLNode&)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (XMLText*)",
    "insertText": "ToText()"
  },
  {
    "label": "CData()",
    "kind": "Method",
    "detail": "Function (_isCData = isCData ; } bool)",
    "insertText": "CData()"
  },
  {
    "label": "XMLText()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "XMLText(XMLDocument* doc ) : XMLNode( doc ), _isCData( false)"
  },
  {
    "label": "XMLText()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "XMLText()"
  },
  {
    "label": "XMLText()",
    "kind": "Method",
    "detail": "Function (private : bool _isCData ;)",
    "insertText": "XMLText(const XMLText&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLText&)",
    "insertText": "operator(const XMLText&)"
  },
  {
    "label": "ToComment()",
    "kind": "Method",
    "detail": "Function (} ; class TINYXML2_LIB XMLComment : public XMLNode { class XMLDocument ; public : XMLComment*)",
    "insertText": "ToComment()"
  },
  {
    "label": "XMLComment()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "XMLComment(XMLDocument* doc)"
  },
  {
    "label": "XMLComment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLComment()"
  },
  {
    "label": "XMLComment()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "XMLComment(const XMLComment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLComment&)",
    "insertText": "operator(const XMLComment&)"
  },
  {
    "label": "ToDeclaration()",
    "kind": "Method",
    "detail": "Function (} ; class TINYXML2_LIB XMLDeclaration : public XMLNode { class XMLDocument ; public : XMLDeclaration*)",
    "insertText": "ToDeclaration()"
  },
  {
    "label": "XMLDeclaration()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "XMLDeclaration(XMLDocument* doc)"
  },
  {
    "label": "XMLDeclaration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLDeclaration()"
  },
  {
    "label": "XMLDeclaration()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "XMLDeclaration(const XMLDeclaration&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLDeclaration&)",
    "insertText": "operator(const XMLDeclaration&)"
  },
  {
    "label": "ToUnknown()",
    "kind": "Method",
    "detail": "Function (} ; class TINYXML2_LIB XMLUnknown : public XMLNode { class XMLDocument ; public : XMLUnknown*)",
    "insertText": "ToUnknown()"
  },
  {
    "label": "XMLUnknown()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "XMLUnknown(XMLDocument* doc)"
  },
  {
    "label": "XMLUnknown()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLUnknown()"
  },
  {
    "label": "XMLUnknown()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "XMLUnknown(const XMLUnknown&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLUnknown&)",
    "insertText": "operator(const XMLUnknown&)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} ; class TINYXML2_LIB XMLAttribute { class XMLElement ; public : const char*)",
    "insertText": "Name()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Value()"
  },
  {
    "label": "QueryIntValue()",
    "kind": "Method",
    "detail": "Function (int i = 0 ;)",
    "insertText": "QueryIntValue(&i)"
  },
  {
    "label": "QueryInt64Value()",
    "kind": "Method",
    "detail": "Function (int64_t i = 0 ;)",
    "insertText": "QueryInt64Value(&i)"
  },
  {
    "label": "QueryUnsigned64Value()",
    "kind": "Method",
    "detail": "Function (uint64_t i = 0 ;)",
    "insertText": "QueryUnsigned64Value(&i)"
  },
  {
    "label": "QueryUnsignedValue()",
    "kind": "Method",
    "detail": "Function (unsigned i = 0 ;)",
    "insertText": "QueryUnsignedValue(&i)"
  },
  {
    "label": "QueryBoolValue()",
    "kind": "Method",
    "detail": "Function (bool b = false ;)",
    "insertText": "QueryBoolValue(&b)"
  },
  {
    "label": "QueryFloatValue()",
    "kind": "Method",
    "detail": "Function (float f = 0 ;)",
    "insertText": "QueryFloatValue(&f)"
  },
  {
    "label": "QueryUnsignedValue()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryUnsignedValue(unsigned int* value)"
  },
  {
    "label": "QueryInt64Value()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryInt64Value(int64_t* value)"
  },
  {
    "label": "QueryUnsigned64Value()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryUnsigned64Value(uint64_t* value)"
  },
  {
    "label": "QueryBoolValue()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryBoolValue(bool* value)"
  },
  {
    "label": "QueryDoubleValue()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryDoubleValue(double* value)"
  },
  {
    "label": "QueryFloatValue()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryFloatValue(float* value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(const char* value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(int value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(unsigned value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(int64_t value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(uint64_t value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(bool value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(double value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(float value)"
  },
  {
    "label": "XMLAttribute()",
    "kind": "Method",
    "detail": "Function (private : enum { BUF_SIZE = 2 0 0 } ;)",
    "insertText": "XMLAttribute() : _name(), _value(),_parseLineNum( 0 ), _next( 0 ), _memPool( 0)"
  },
  {
    "label": "XMLAttribute()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "XMLAttribute()"
  },
  {
    "label": "XMLAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XMLAttribute(const XMLAttribute&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const XMLAttribute&)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const char* name)"
  },
  {
    "label": "ParseDeep()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ParseDeep(char* p, bool processEntities, int* curLineNumPtr)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const char* str, bool staticMem=false)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(str, staticMem)"
  },
  {
    "label": "ToElement()",
    "kind": "Method",
    "detail": "Function (} XMLElement*)",
    "insertText": "ToElement()"
  },
  {
    "label": "Attribute()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Attribute(const char* name, const char* value=0)"
  },
  {
    "label": "IntAttribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IntAttribute(const char* name, int defaultValue = 0)"
  },
  {
    "label": "UnsignedAttribute()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "UnsignedAttribute(const char* name, unsigned defaultValue = 0)"
  },
  {
    "label": "Int64Attribute()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Int64Attribute(const char* name, int64_t defaultValue = 0)"
  },
  {
    "label": "Unsigned64Attribute()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Unsigned64Attribute(const char* name, uint64_t defaultValue = 0)"
  },
  {
    "label": "BoolAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoolAttribute(const char* name, bool defaultValue = false)"
  },
  {
    "label": "FloatAttribute()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FloatAttribute(const char* name, float defaultValue = 0)"
  },
  {
    "label": "QueryIntAttribute()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryIntAttribute(const char* name, int* value)"
  },
  {
    "label": "FindAttribute()",
    "kind": "Method",
    "detail": "Function (const XMLAttribute* a =)",
    "insertText": "FindAttribute(name)"
  },
  {
    "label": "QueryUnsignedAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryUnsignedAttribute(const char* name, unsigned int* value)"
  },
  {
    "label": "QueryInt64Attribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryInt64Attribute(const char* name, int64_t* value)"
  },
  {
    "label": "QueryUnsigned64Attribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryUnsigned64Attribute(const char* name, uint64_t* value)"
  },
  {
    "label": "QueryBoolAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryBoolAttribute(const char* name, bool* value)"
  },
  {
    "label": "QueryDoubleAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryDoubleAttribute(const char* name, double* value)"
  },
  {
    "label": "QueryFloatAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryFloatAttribute(const char* name, float* value)"
  },
  {
    "label": "QueryStringAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryStringAttribute(const char* name, const char** value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, unsigned int* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, int64_t* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, uint64_t* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, bool* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, double* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, float* value)"
  },
  {
    "label": "QueryAttribute()",
    "kind": "Method",
    "detail": "Function (} XMLError)",
    "insertText": "QueryAttribute(const char* name, const char** value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, const char* value)"
  },
  {
    "label": "FindOrCreateAttribute()",
    "kind": "Method",
    "detail": "Function (XMLAttribute* a =)",
    "insertText": "FindOrCreateAttribute(name)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (a ->)",
    "insertText": "SetAttribute(value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, int value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, unsigned value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, int64_t value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, uint64_t value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, bool value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, double value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttribute(const char* name, float value)"
  },
  {
    "label": "DeleteAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteAttribute(const char* name)"
  },
  {
    "label": "FirstAttribute()",
    "kind": "Method",
    "detail": "Function (const XMLAttribute*)",
    "insertText": "FirstAttribute()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetText()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const char* inText)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(int value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(unsigned value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(int64_t value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(uint64_t value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(bool value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(double value)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(float value)"
  },
  {
    "label": "QueryIntText()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryIntText(int* ival)"
  },
  {
    "label": "QueryUnsignedText()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryUnsignedText(unsigned* uval)"
  },
  {
    "label": "QueryInt64Text()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryInt64Text(int64_t* uval)"
  },
  {
    "label": "QueryUnsigned64Text()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryUnsigned64Text(uint64_t* uval)"
  },
  {
    "label": "QueryBoolText()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryBoolText(bool* bval)"
  },
  {
    "label": "QueryDoubleText()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryDoubleText(double* dval)"
  },
  {
    "label": "QueryFloatText()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "QueryFloatText(float* fval)"
  },
  {
    "label": "IntText()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IntText(int defaultValue = 0)"
  },
  {
    "label": "UnsignedText()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "UnsignedText(unsigned defaultValue = 0)"
  },
  {
    "label": "Int64Text()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Int64Text(int64_t defaultValue = 0)"
  },
  {
    "label": "Unsigned64Text()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Unsigned64Text(uint64_t defaultValue = 0)"
  },
  {
    "label": "BoolText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoolText(bool defaultValue = false)"
  },
  {
    "label": "FloatText()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FloatText(float defaultValue = 0)"
  },
  {
    "label": "InsertNewChildElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "InsertNewChildElement(const char* name)"
  },
  {
    "label": "InsertNewComment()",
    "kind": "Method",
    "detail": "Function (XMLComment*)",
    "insertText": "InsertNewComment(const char* comment)"
  },
  {
    "label": "InsertNewText()",
    "kind": "Method",
    "detail": "Function (XMLText*)",
    "insertText": "InsertNewText(const char* text)"
  },
  {
    "label": "InsertNewDeclaration()",
    "kind": "Method",
    "detail": "Function (XMLDeclaration*)",
    "insertText": "InsertNewDeclaration(const char* text)"
  },
  {
    "label": "InsertNewUnknown()",
    "kind": "Method",
    "detail": "Function (XMLUnknown*)",
    "insertText": "InsertNewUnknown(const char* text)"
  },
  {
    "label": "ClosingType()",
    "kind": "Method",
    "detail": "Function (enum ElementClosingType { OPEN,CLOSED,CLOSING } ; ElementClosingType)",
    "insertText": "ClosingType()"
  },
  {
    "label": "XMLElement()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "XMLElement(XMLDocument* doc)"
  },
  {
    "label": "XMLElement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLElement()"
  },
  {
    "label": "XMLElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMLElement(const XMLElement&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const XMLElement&)"
  },
  {
    "label": "FindOrCreateAttribute()",
    "kind": "Method",
    "detail": "Function (XMLAttribute*)",
    "insertText": "FindOrCreateAttribute(const char* name)"
  },
  {
    "label": "ParseAttributes()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "ParseAttributes(char* p, int* curLineNumPtr)"
  },
  {
    "label": "DeleteAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAttribute(XMLAttribute* attribute)"
  },
  {
    "label": "CreateAttribute()",
    "kind": "Method",
    "detail": "Function (XMLAttribute*)",
    "insertText": "CreateAttribute()"
  },
  {
    "label": "XMLDocument()",
    "kind": "Method",
    "detail": "Function (enum { BUF_SIZE = 2 0 0 } ; ElementClosingType _closingType ; XMLAttribute* _rootAttribute ; } ; enum Whitespace { PRESERVE_WHITESPACE,COLLAPSE_WHITESPACE } ; class TINYXML2_LIB XMLDocument : public XMLNode { class XMLElement ; class XMLNode ; class XMLText ; class XMLComment ; class XMLDeclaration ; class XMLUnknown ; public :)",
    "insertText": "XMLDocument(bool processEntities = true, Whitespace whitespaceMode = PRESERVE_WHITESPACE)"
  },
  {
    "label": "XMLDocument()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLDocument()"
  },
  {
    "label": "ToDocument()",
    "kind": "Method",
    "detail": "Function (XMLDocument*)",
    "insertText": "ToDocument()"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(this == _document)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "LoadFile(const char* filename)"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "LoadFile(FILE*)"
  },
  {
    "label": "SaveFile()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "SaveFile(const char* filename, bool compact = false)"
  },
  {
    "label": "SaveFile()",
    "kind": "Method",
    "detail": "Function (XMLError)",
    "insertText": "SaveFile(FILE* fp, bool compact = false)"
  },
  {
    "label": "ProcessEntities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEntities()"
  },
  {
    "label": "RootElement()",
    "kind": "Method",
    "detail": "Function (_writeBOM = useBOM ; } XMLElement*)",
    "insertText": "RootElement()"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Print(XMLPrinter* streamer=0)"
  },
  {
    "label": "NewElement()",
    "kind": "Method",
    "detail": "Function (XMLElement*)",
    "insertText": "NewElement(const char* name)"
  },
  {
    "label": "NewComment()",
    "kind": "Method",
    "detail": "Function (XMLComment*)",
    "insertText": "NewComment(const char* comment)"
  },
  {
    "label": "NewText()",
    "kind": "Method",
    "detail": "Function (XMLText*)",
    "insertText": "NewText(const char* text)"
  },
  {
    "label": "NewDeclaration()",
    "kind": "Method",
    "detail": "Function (XMLDeclaration*)",
    "insertText": "NewDeclaration(const char* text=0)"
  },
  {
    "label": "NewUnknown()",
    "kind": "Method",
    "detail": "Function (XMLUnknown*)",
    "insertText": "NewUnknown(const char* text)"
  },
  {
    "label": "ClearError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearError()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Error()"
  },
  {
    "label": "ErrorIDToName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ErrorIDToName(XMLError errorID)"
  },
  {
    "label": "ErrorStr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ErrorStr()"
  },
  {
    "label": "PrintError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintError()"
  },
  {
    "label": "ErrorLineNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ErrorLineNum()"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepCopy(XMLDocument* target)"
  },
  {
    "label": "Identify()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Identify(char* p, XMLNode** node)"
  },
  {
    "label": "MarkInUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkInUse(const XMLNode* const)"
  },
  {
    "label": "ShallowClone()",
    "kind": "Method",
    "detail": "Function (XMLNode*)",
    "insertText": "ShallowClone(XMLDocument*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const XMLDocument&)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (bool _writeBOM ; bool _processEntities ; XMLError _errorID ; Whitespace _whitespaceMode ; StrPair _errorStr ; int _errorLineNum ; char* _charBuffer ; int _parseCurLineNum ; int _parsingDepth ; DynArray<XMLNode*,1 0> _unlinked ; MemPoolT<)",
    "insertText": "sizeof(XMLElement)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MemPoolT<)",
    "insertText": "sizeof(XMLAttribute)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MemPoolT<)",
    "insertText": "sizeof(XMLText)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MemPoolT<)",
    "insertText": "sizeof(XMLComment)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (const char* _errorNames [ XML_ERROR_COUNT ] ; void)",
    "insertText": "Parse()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(XMLError error, int lineNum, const char* format, ...)"
  },
  {
    "label": "DepthTracker()",
    "kind": "Method",
    "detail": "Function (class DepthTracker { public :)",
    "insertText": "DepthTracker(XMLDocument * document)"
  },
  {
    "label": "PushDepth()",
    "kind": "Method",
    "detail": "Function (this -> _document = document ; document ->)",
    "insertText": "PushDepth()"
  },
  {
    "label": "DepthTracker()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DepthTracker()"
  },
  {
    "label": "PopDepth()",
    "kind": "Method",
    "detail": "Function (_document ->)",
    "insertText": "PopDepth()"
  },
  {
    "label": "CreateUnlinkedNode()",
    "kind": "Method",
    "detail": "Function (template<class NodeType,int PoolElementSize> NodeType*)",
    "insertText": "CreateUnlinkedNode(MemPoolT<PoolElementSize>& pool)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(sizeof( NodeType ) == PoolElementSize)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(sizeof( NodeType ) == pool.ItemSize())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (NodeType* returnNode =)",
    "insertText": "new(pool.Alloc()) NodeType( this)"
  },
  {
    "label": "TIXMLASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIXMLASSERT(returnNode)"
  },
  {
    "label": "XMLHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XMLHandle(XMLNode& node ) : _node( &node)"
  },
  {
    "label": "XMLHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XMLHandle(const XMLHandle& ref ) : _node( ref._node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} XMLHandle&)",
    "insertText": "operator(const XMLHandle& ref)"
  },
  {
    "label": "FirstChild()",
    "kind": "Method",
    "detail": "Function (_node = ref . _node ; return* this ; } XMLHandle)",
    "insertText": "FirstChild()"
  },
  {
    "label": "ToNode()",
    "kind": "Method",
    "detail": "Function (} XMLNode*)",
    "insertText": "ToNode()"
  },
  {
    "label": "XMLConstHandle()",
    "kind": "Method",
    "detail": "Function (} private : XMLNode* _node ; } ; class TINYXML2_LIB XMLConstHandle { public :)",
    "insertText": "XMLConstHandle(const XMLNode* node ) : _node( node)"
  },
  {
    "label": "XMLConstHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XMLConstHandle(const XMLNode& node ) : _node( &node)"
  },
  {
    "label": "XMLConstHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XMLConstHandle(const XMLConstHandle& ref ) : _node( ref._node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} XMLConstHandle&)",
    "insertText": "operator(const XMLConstHandle& ref)"
  },
  {
    "label": "XMLPrinter()",
    "kind": "Method",
    "detail": "Function (} private : const XMLNode* _node ; } ; class TINYXML2_LIB XMLPrinter : public XMLVisitor { public :)",
    "insertText": "XMLPrinter(FILE* file=0, bool compact = false, int depth = 0)"
  },
  {
    "label": "XMLPrinter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "XMLPrinter()"
  },
  {
    "label": "PushHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushHeader(bool writeBOM, bool writeDeclaration)"
  },
  {
    "label": "OpenElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenElement(const char* name, bool compactMode=false)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, const char* value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, int value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, unsigned value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, int64_t value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, uint64_t value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, bool value)"
  },
  {
    "label": "PushAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAttribute(const char* name, double value)"
  },
  {
    "label": "CloseElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseElement(bool compactMode=false)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(const char* text, bool cdata=false)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(int value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(unsigned value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(int64_t value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(uint64_t value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(bool value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(float value)"
  },
  {
    "label": "PushText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushText(double value)"
  },
  {
    "label": "PushComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushComment(const char* comment)"
  },
  {
    "label": "PushDeclaration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDeclaration(const char* value)"
  },
  {
    "label": "PushUnknown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushUnknown(const char* value)"
  },
  {
    "label": "VisitExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VisitExit(const XMLDocument&)"
  },
  {
    "label": "VisitExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VisitExit(const XMLElement& element)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Visit(const XMLText& text)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Visit(const XMLComment& comment)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Visit(const XMLDeclaration& declaration)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Visit(const XMLUnknown& unknown)"
  },
  {
    "label": "CStr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "CStr()"
  },
  {
    "label": "CStrSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CStrSize()"
  },
  {
    "label": "ClearBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBuffer(bool resetToFirstElement = true)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (_buffer .)",
    "insertText": "Push(0)"
  },
  {
    "label": "CompactMode()",
    "kind": "Method",
    "detail": "Function (_firstElement = resetToFirstElement ; } protected : bool)",
    "insertText": "CompactMode(const XMLElement&)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(const char* format, ...)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(const char* data, size_t size)"
  },
  {
    "label": "Putc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Putc(char ch)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(const char* data)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(data, strlen(data))"
  },
  {
    "label": "SealElementIfJustOpened()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SealElementIfJustOpened()"
  },
  {
    "label": "PrepareForNewNode()",
    "kind": "Method",
    "detail": "Function (bool _elementJustOpened ; DynArray<const char*,1 0> _stack ; private : void)",
    "insertText": "PrepareForNewNode(bool compactMode)"
  },
  {
    "label": "PrintString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintString(const char*, bool restrictedEntitySet)"
  },
  {
    "label": "XMLPrinter()",
    "kind": "Method",
    "detail": "Function (bool _firstElement ; FILE* _fp ; int _depth ; int _textDepth ; bool _processEntities ; bool _compactMode ; enum { ENTITY_RANGE = 6 4,BUF_SIZE = 2 0 0 } ; bool _entityFlag [ ENTITY_RANGE ] ; bool _restrictedEntityFlag [ ENTITY_RANGE ] ; DynArray<char,2 0> _buffer ;)",
    "insertText": "XMLPrinter(const XMLPrinter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (XMLPrinter&)",
    "insertText": "operator(const XMLPrinter&)"
  }
]