[
  {
    "label": "TResourceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TResourceHandle"
  },
  {
    "label": "EGenerateNewHandleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGenerateNewHandleType"
  },
  {
    "label": "TResourceHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Templates / Atomic . h \" namespace UE::EventLoop { template<Traits> struct TResourceHandle final { enum EGenerateNewHandleType { GenerateNewHandle } ;)",
    "insertText": "TResourceHandle() : ID(0)"
  },
  {
    "label": "TResourceHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TResourceHandle(EGenerateNewHandleType) : ID(GenerateNewID())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ID = 0 ; } bool)",
    "insertText": "operator(const TResourceHandle& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 Result = NextID + + ;)",
    "insertText": "if(Result == 0)"
  }
]