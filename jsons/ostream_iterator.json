[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_OSTREAM_ITERATOR_H # define _LIBCPP___ITERATOR_OSTREAM_ITERATOR_H # include<__config> # include<__iterator / iterator . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<cstddef> # include<iosfwd> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_SUPPRESS_DEPRECATED_PUSH template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> > class _LIBCPP_TEMPLATE_VIS ostream_iterator #if _LIBCPP_STD_VER <= 14 || !defined(_LIBCPP_ABI_NO_ITERATOR_BASES)"
  },
  {
    "label": "ostream_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP public : typedef output_iterator_tag iterator_category ; typedef void value_type ; # if _LIBCPP_STD_VER> 1 7 typedef ptrdiff_t difference_type ; # else typedef void difference_type ; # endif typedef void pointer ; typedef void reference ; typedef _CharT char_type ; typedef _Traits traits_type ; typedef basic_ostream<_CharT,_Traits> ostream_type ; private : ostream_type* __out_stream_ ; const char_type* __delim_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "ostream_iterator(ostream_type& __s) _NOEXCEPT : __out_stream_(_VSTD::addressof(__s)), __delim_(nullptr)"
  },
  {
    "label": "ostream_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "ostream_iterator(ostream_type& __s, const _CharT* __delimiter) _NOEXCEPT : __out_stream_(_VSTD::addressof(__s)), __delim_(__delimiter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY ostream_iterator&)",
    "insertText": "operator(const _Tp& __value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* __out_stream_<<__value ;)",
    "insertText": "if(__delim_)"
  }
]