[
  {
    "label": "PacketBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketBuffer"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Packet"
  },
  {
    "label": "InsertResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InsertResult"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_PACKET_BUFFER_H_ # define MODULES_VIDEO_CODING_PACKET_BUFFER_H_ # include<memory> # include<queue> # include<set> # include<vector> # include \" absl / base / attributes . h \" # include \" api / rtp_packet_info . h \" # include \" api / units / timestamp . h \" # include \" api / video / encoded_image . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / numerics / sequence_number_util . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace video_coding { class PacketBuffer { public : struct Packet {)",
    "insertText": "Packet()"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Packet(const RtpPacketReceived& rtp_packet, const RTPVideoHeader& video_header)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Packet(const Packet&)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Packet(Packet&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet&)",
    "insertText": "operator(const Packet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Packet&)",
    "insertText": "operator(Packet&&)"
  },
  {
    "label": "codec()",
    "kind": "Method",
    "detail": "Function (VideoCodecType)",
    "insertText": "codec()"
  },
  {
    "label": "PacketBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PacketBuffer()"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT InsertResult)",
    "insertText": "InsertPacket(std::unique_ptr<Packet> packet)"
  },
  {
    "label": "InsertPadding()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT InsertResult)",
    "insertText": "InsertPadding(uint16_t seq_num)"
  },
  {
    "label": "ClearTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTo(uint16_t seq_num)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ForceSpsPpsIdrIsH264Keyframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSpsPpsIdrIsH264Keyframe()"
  },
  {
    "label": "ResetSpsPpsIdrIsH264Keyframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSpsPpsIdrIsH264Keyframe()"
  },
  {
    "label": "ClearInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ClearInternal()"
  },
  {
    "label": "ExpandBufferSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandBufferSize()"
  },
  {
    "label": "PotentialNewFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PotentialNewFrame(uint16_t seq_num)"
  },
  {
    "label": "FindFrames()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Packet>>)",
    "insertText": "FindFrames(uint16_t seq_num)"
  },
  {
    "label": "UpdateMissingPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMissingPackets(uint16_t seq_num)"
  }
]