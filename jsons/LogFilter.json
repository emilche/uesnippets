[
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "SLogView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLogView"
  },
  {
    "label": "FLogFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogFilter"
  },
  {
    "label": "FLogFilteringAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogFilteringAsyncTask"
  },
  {
    "label": "FLogFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Async / AsyncWork . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" # include \" Stats / Stats . h \" # include \" Insights / ViewModels / LogMessage . h \" template<TTask> class FAsyncTask ; namespace UE::Insights { class SLogView ; class FLogFilter { public :)",
    "insertText": "FLogFilter()"
  },
  {
    "label": "FLogFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLogFilter(const FLogFilter& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLogFilter&)",
    "insertText": "operator(const FLogFilter& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetChangeNumber()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetChangeNumber()"
  },
  {
    "label": "GetVerbosityThreshold()",
    "kind": "Method",
    "detail": "Function (ELogVerbosity::Type)",
    "insertText": "GetVerbosityThreshold()"
  },
  {
    "label": "IsFilterSetByVerbosity()",
    "kind": "Method",
    "detail": "Function (VerbosityThreshold = InVerbosityThreshold ; bIsFilterSetByVerbosity = VerbosityThreshold ! = ELogVerbosity::All ; + + ChangeNumber ; } public : bool)",
    "insertText": "IsFilterSetByVerbosity()"
  },
  {
    "label": "AddAvailableLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAvailableLogCategory(const FName& LogCategory)"
  },
  {
    "label": "IsShowAllCategoriesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowAllCategoriesEnabled()"
  },
  {
    "label": "EnableLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableLogCategory(const FName& LogCategory)"
  },
  {
    "label": "DisableLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableLogCategory(const FName& LogCategory)"
  },
  {
    "label": "ToggleLogCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLogCategory(const FName& LogCategory)"
  },
  {
    "label": "EnableOnlyCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableOnlyCategory(const FName& LogCategory)"
  },
  {
    "label": "IsLogCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLogCategoryEnabled(const FName& LogCategory)"
  },
  {
    "label": "OnFilterByCategoryChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnFilterByCategoryChanged()"
  },
  {
    "label": "bIsFilterSetByCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bIsFilterSetByCategory(EnabledLogCategories.Num() < AvailableLogCategories.Num())"
  },
  {
    "label": "IsFilterSetByCategory()",
    "kind": "Method",
    "detail": "Function (+ + ChangeNumber ; } public : bool)",
    "insertText": "IsFilterSetByCategory()"
  },
  {
    "label": "SetFilterText()",
    "kind": "Method",
    "detail": "Function (TextFilterExpressionEvaluator .)",
    "insertText": "SetFilterText(InFilterText)"
  },
  {
    "label": "GetFilterType()",
    "kind": "Method",
    "detail": "Function (bIsFilterSetByText = TextFilterExpressionEvaluator .)",
    "insertText": "GetFilterType() != ETextFilterExpressionType::Empty || !TextFilterExpressionEvaluator.GetFilterText().IsEmpty()"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (+ + ChangeNumber ; } const FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "GetSyntaxErrors()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSyntaxErrors()"
  },
  {
    "label": "IsFilterSetByText()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFilterSetByText()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetStartIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStartIndex()"
  }
]