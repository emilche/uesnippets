[
  {
    "label": "FbxReaderCollada",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxReaderCollada"
  },
  {
    "label": "LibraryTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LibraryTypeTraits"
  },
  {
    "label": "ColladaElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ColladaElementData"
  },
  {
    "label": "AnimationClipData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnimationClipData"
  },
  {
    "label": "FbxReaderCollada()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_FILEIO_COLLADA_READER_H_ # define _FBXSDK_FILEIO_COLLADA_READER_H_ # include<fbxsdk . h> # include<fbxsdk / fileio / collada / fbxcolladautils . h> # include<fbxsdk / fileio / collada / fbxcolladanamespace . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxReaderCollada : public FbxReader { public :)",
    "insertText": "FbxReaderCollada(FbxManager& pManager, int pID, FbxStatus& pStatus)"
  },
  {
    "label": "FbxReaderCollada()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxReaderCollada()"
  },
  {
    "label": "FileOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileOpen(char* pFileName)"
  },
  {
    "label": "FileClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileClose()"
  },
  {
    "label": "IsFileOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileOpen()"
  },
  {
    "label": "GetReadOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadOptions(bool pParseFileAsNeeded = true)"
  },
  {
    "label": "GetTakeInfo()",
    "kind": "Method",
    "detail": "Function (FbxArray<FbxTakeInfo*>*)",
    "insertText": "GetTakeInfo()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(FbxDocument* pDocument)"
  },
  {
    "label": "ReadCollada()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : bool)",
    "insertText": "ReadCollada(FbxScene &pScene, xmlNode* pXmlNode)"
  },
  {
    "label": "ImportVisualScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportVisualScene(xmlNode* pXmlNode, FbxScene * pScene)"
  },
  {
    "label": "ImportVisualSceneMax3DExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportVisualSceneMax3DExtension(xmlNode * pTechniqueElement, FbxScene * pScene)"
  },
  {
    "label": "ImportVisualSceneFCOLLADAExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportVisualSceneFCOLLADAExtension(xmlNode * pTechniqueElement, FbxScene * pScene)"
  },
  {
    "label": "ImportVisualSceneMayaExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportVisualSceneMayaExtension(xmlNode * pTechniqueElement, FbxScene * pScene)"
  },
  {
    "label": "ImportAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportAsset(xmlNode* pXmlNode, FbxGlobalSettings & pGlobalSettings, FbxDocumentInfo &pSceneInfo)"
  },
  {
    "label": "ImportNode()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "ImportNode(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportNodeFCOLLADAExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportNodeFCOLLADAExtension(xmlNode* pTechniqueElement, FbxNode * pNode)"
  },
  {
    "label": "ImportNodeXSIExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportNodeXSIExtension(xmlNode* pTechniqueElement, FbxNode * pNode)"
  },
  {
    "label": "ImportNodeFBXExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportNodeFBXExtension(xmlNode* pTechniqueElement, FbxNode * pNode)"
  },
  {
    "label": "ImportGeometry()",
    "kind": "Method",
    "detail": "Function (FbxGeometry*)",
    "insertText": "ImportGeometry(const FbxString & pGeometryID, const FbxDynamicArray<FbxString> & pMaterialSequence)"
  },
  {
    "label": "ImportSkin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportSkin(xmlNode* pSkinElement)"
  },
  {
    "label": "ImportMorph()",
    "kind": "Method",
    "detail": "Function (FbxGeometry*)",
    "insertText": "ImportMorph(xmlNode * pMorphElement, const FbxDynamicArray<FbxString> & pMaterialSequence)"
  },
  {
    "label": "ImportController()",
    "kind": "Method",
    "detail": "Function (FbxGeometry*)",
    "insertText": "ImportController(const FbxString & pControllerID, const FbxDynamicArray<FbxString> & pMaterialSequence)"
  },
  {
    "label": "ImportCamera()",
    "kind": "Method",
    "detail": "Function (FbxCamera*)",
    "insertText": "ImportCamera(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportLight()",
    "kind": "Method",
    "detail": "Function (FbxLight*)",
    "insertText": "ImportLight(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportMaterial()",
    "kind": "Method",
    "detail": "Function (FbxSurfaceMaterial*)",
    "insertText": "ImportMaterial(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportEffect()",
    "kind": "Method",
    "detail": "Function (FbxSurfaceMaterial*)",
    "insertText": "ImportEffect(xmlNode* pEffectElement)"
  },
  {
    "label": "ImportEffectNVidiaExtension()",
    "kind": "Method",
    "detail": "Function (FbxSurfaceMaterial*)",
    "insertText": "ImportEffectNVidiaExtension(xmlNode * pEffectElement)"
  },
  {
    "label": "ImportTexture()",
    "kind": "Method",
    "detail": "Function (FbxFileTexture*)",
    "insertText": "ImportTexture(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportImage()",
    "kind": "Method",
    "detail": "Function (FbxFileTexture*)",
    "insertText": "ImportImage(xmlNode* pXmlNode)"
  },
  {
    "label": "ImportMesh()",
    "kind": "Method",
    "detail": "Function (FbxGeometry*)",
    "insertText": "ImportMesh(xmlNode* pXmlNode, const FbxDynamicArray<FbxString> & pMaterialSequence, FbxArray<FbxObject*>& pObjects)"
  },
  {
    "label": "ImportVertices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportVertices(xmlNode* pVerticesElement, FbxGeometry * pGeometry)"
  },
  {
    "label": "ImportPolygons()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportPolygons(xmlNode* pXmlNode, FbxMesh& pMesh, const FbxDynamicArray<FbxString> & pMaterialSequence)"
  },
  {
    "label": "ImportTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTransforms(xmlNode* pXmlNode, FbxNode* pNode)"
  },
  {
    "label": "ImportRotationElement()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ImportRotationElement(xmlNode* pXmlNode, FbxVector4& pRotationVector)"
  },
  {
    "label": "SetRotationOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationOrder(FbxNode * pNode, const FbxArray<int> & pRotationOrder)"
  },
  {
    "label": "ImportLookAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportLookAt(xmlNode* pXmlNode, FbxVector4& lCameraPosition, FbxVector4& lInterestPosition, FbxVector4& lUpVector, FbxAMatrix& lCameraTransformMatrix)"
  },
  {
    "label": "IsNodeExportable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeExportable(FbxString lId)"
  },
  {
    "label": "CheckColladaVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckColladaVersion(const FbxString & pVersionString)"
  },
  {
    "label": "AddNotificationError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotificationError(FbxString pError)"
  },
  {
    "label": "AddNotificationWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotificationWarning(FbxString pWarning)"
  },
  {
    "label": "ImportScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportScene(xmlNode * pColladaNode)"
  },
  {
    "label": "Preprocess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Preprocess(xmlNode * pColladaElement)"
  },
  {
    "label": "BuildUpLibraryMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildUpLibraryMap()"
  },
  {
    "label": "BuildUpLibraryMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildUpLibraryMap(xmlNode * pElement, const FbxString & pElementTag)"
  },
  {
    "label": "ConnectMaterialsToNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectMaterialsToNode(FbxNode * pNode, xmlNode * pElement, FbxDynamicArray<FbxString> & pMaterialSequence)"
  },
  {
    "label": "ImportTransparent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTransparent(xmlNode * pElement, FbxSurfaceLambert * pSurfaceMaterial)"
  },
  {
    "label": "GetLibrary()",
    "kind": "Method",
    "detail": "Function (struct LibraryTypeTraits { FbxString library_tag ; FbxString element_tag ; } ; FbxObject*)",
    "insertText": "GetLibrary(const LibraryTypeTraits & pTypeTraits, const FbxString & pID)"
  },
  {
    "label": "GetLibrary()",
    "kind": "Method",
    "detail": "Function (FbxObject*)",
    "insertText": "GetLibrary(const LibraryTypeTraits & pTypeTraits, xmlNode * pElement)"
  },
  {
    "label": "ImportMatrixAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportMatrixAnimation(FbxNode * pNode, const FbxString & pAnimationChannelID)"
  },
  {
    "label": "ImportPropertyAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportPropertyAnimation(FbxProperty & pProperty, const FbxString & pAnimationChannelID, const char * pChannelName = NULL)"
  },
  {
    "label": "GetAnimLayer()",
    "kind": "Method",
    "detail": "Function (FbxAnimLayer*)",
    "insertText": "GetAnimLayer(const FbxString & pAnimationID)"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperty(xmlNode* pPropertyElement, FbxProperty & pProperty)"
  },
  {
    "label": "ImportPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportPropertyValue(FbxObject * pObject, const char * pPropertyName, xmlNode * pPropertyValueElement)"
  },
  {
    "label": "ColladaElementData()",
    "kind": "Method",
    "detail": "Function (FbxFile* mFileObject ; FbxString mFileName ; xmlDocPtr mXmlDoc ; FbxAnimLayer* mAnimLayer ; FbxScene* mScene ; FbxGlobalSettings* mGlobalSettings ; FbxDocumentInfo* mDocumentInfo ; FbxArray<FbxTakeInfo*> mTakeInfo ; xmlNode* mColladaElement ; struct ColladaElementData {)",
    "insertText": "ColladaElementData(xmlNode * pElement = NULL) : mColladaElement(pElement), mFBXObject(NULL)"
  },
  {
    "label": "AnimationClipData()",
    "kind": "Method",
    "detail": "Function (} xmlNode* mColladaElement ; FbxObject* mFBXObject ; FbxArray<FbxObject*> mFBXObjects ; } ; typedef FbxMap<FbxString,ColladaElementData> ColladaElementMapType ; ColladaElementMapType mColladaElements ; LibraryTypeTraits mEffectTypeTraits ; LibraryTypeTraits mMaterialTypeTraits ; LibraryTypeTraits mImageTypeTraits ; LibraryTypeTraits mGeometryTypeTraits ; LibraryTypeTraits mControllerTypeTraits ; LibraryTypeTraits mLightTypeTraits ; LibraryTypeTraits mCameraTypeTraits ; LibraryTypeTraits mNodeTypeTraits ; LibraryTypeTraits mAnimationTypeTraits ; typedef FbxMap<FbxString,FbxArray<xmlNode*>> AnimationMapType ; AnimationMapType mAnimationElements ; SourceElementMapType mSourceElements ; struct AnimationClipData {)",
    "insertText": "AnimationClipData(const FbxString & pID) : mID(pID), mAnimLayer(NULL)"
  },
  {
    "label": "AnimationClipData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnimationClipData(const AnimationClipData& pOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = pOther ; } AnimationClipData&)",
    "insertText": "operator(const AnimationClipData& pOther)"
  }
]