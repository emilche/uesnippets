[
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Serialization / CompactBinary . h \" # include \" Serialization / CompactBinaryWriter . h \" # include \" Templates / Tuple . h \" template<. . . Types> FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const TTuple<Types...>& Tuple)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "BeginArray()"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([&Writer](auto&& ElementValue) { Writer << ElementValue; }, Tuple)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "EndArray()"
  },
  {
    "label": "AsArrayView()",
    "kind": "Method",
    "detail": "Function (bool bOk = Field .)",
    "insertText": "AsArrayView().Num() == sizeof...(Types)"
  },
  {
    "label": "CreateViewIterator()",
    "kind": "Method",
    "detail": "Function (FCbFieldViewIterator ElementIterator = Field .)",
    "insertText": "CreateViewIterator()"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([&ElementIterator, &bOk](auto&& ElementValue) { bOk = LoadFromCompactBinary(ElementIterator++, ElementValue) & bOk; }, Tuple)"
  }
]