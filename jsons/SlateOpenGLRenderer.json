[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSlateElementBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatcher"
  },
  {
    "label": "FSlateOpenGLRenderingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateOpenGLRenderingPolicy"
  },
  {
    "label": "FSlateOpenGLTextureManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateOpenGLTextureManager"
  },
  {
    "label": "FSlateUpdatableTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUpdatableTexture"
  },
  {
    "label": "ISlateAtlasProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateAtlasProvider"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateOpenGLContext"
  },
  {
    "label": "FSlateOpenGLViewport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateOpenGLViewport"
  },
  {
    "label": "FSlateOpenGLRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateOpenGLRenderer"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" StandaloneRendererPlatformHeaders . h \" # include \" Layout / SlateRect . h \" # include \" Textures / SlateShaderResource . h \" # include \" Rendering / SlateDrawBuffer . h \" # include \" Rendering / SlateRenderer . h \" class Error ; class FSlateElementBatcher ; class FSlateOpenGLRenderingPolicy ; class FSlateOpenGLTextureManager ; class FSlateUpdatableTexture ; class ISlateAtlasProvider ; class ISlateStyle ; class SWindow ; # define LINUX_USE_OPENGL_3_2 0 #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (\\ GLenum Error =)",
    "insertText": "glGetError()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkf(Error == GL_NO_ERROR, TEXT(\"GL error: 0x%x\"), Error)"
  },
  {
    "label": "FSlateOpenGLContext()",
    "kind": "Method",
    "detail": "Function (\\ } # else # define CHECK_GL_ERRORS # endif struct FSlateOpenGLContext { # if PLATFORM_WINDOWS HWND WindowHandle ; HDC WindowDC ; HGLRC Context ; bool bReleaseWindowOnDestroy ; # elif PLATFORM_MAC NSView* View ; NSOpenGLPixelFormat* PixelFormat ; NSOpenGLContext* Context ; bool bNeedsUpdate ; # elif PLATFORM_IOS UIWindow* WindowHandle ; EAGLContext* Context ; # elif PLATFORM_LINUX SDL_Window* WindowHandle ; SDL_GLContext Context ; bool bReleaseWindowOnDestroy ; # if LINUX_USE_OPENGL_3_2 GLuint VertexArrayObject ; # endif # else # error \" Unknown platform \" # endif)",
    "insertText": "FSlateOpenGLContext()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(void* InWindow, const FSlateOpenGLContext* SharedContext)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "MakeCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCurrent()"
  },
  {
    "label": "FSlateOpenGLViewport()",
    "kind": "Method",
    "detail": "Function (} ; struct FSlateOpenGLViewport { FMatrix ProjectionMatrix ; FSlateRect ViewportRect ; FSlateOpenGLContext RenderingContext ; bool bFullscreen ;)",
    "insertText": "FSlateOpenGLViewport()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(TSharedRef<SWindow> InWindow, const FSlateOpenGLContext& SharedContext)"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapBuffers()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int32 Width, int32 Height, bool bInFullscreen)"
  },
  {
    "label": "CreateProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (private : FMatrix)",
    "insertText": "CreateProjectionMatrix(uint32 Width, uint32 Height)"
  },
  {
    "label": "FMatrix()",
    "kind": "Method",
    "detail": "Function (const float Left = 0 . 0 f ; const float Right = Left + Width ; const float Top = 0 . 0 f ; const float Bottom = Top + Height ; const float ZNear = - 1 0 0 . 0 f ; const float ZFar = 1 0 0 . 0 f ; return)",
    "insertText": "FMatrix(FPlane(2.0f/(Right-Left), 0, 0, 0 ), FPlane(0, 2.0f/(Top-Bottom), 0, 0 ), FPlane(0, 0, 1/(ZNear-ZFar), 0 ), FPlane((Left+Right)/(Left-Right), (Top+Bottom)/(Bottom-Top), ZNear/(ZNear-ZFar), 1 ))"
  },
  {
    "label": "FSlateOpenGLRenderer()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateOpenGLRenderer : public FSlateRenderer { public :)",
    "insertText": "FSlateOpenGLRenderer(const ISlateStyle& InStyle)"
  },
  {
    "label": "FSlateOpenGLRenderer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateOpenGLRenderer()"
  },
  {
    "label": "AcquireDrawBuffer()",
    "kind": "Method",
    "detail": "Function (FSlateDrawBuffer&)",
    "insertText": "AcquireDrawBuffer()"
  },
  {
    "label": "ReleaseDrawBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDrawBuffer(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "DrawWindows()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawWindows(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(const TSharedRef<SWindow>& InWindow)"
  },
  {
    "label": "CreateViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewport(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "RequestResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResize(const TSharedPtr<SWindow>& InWindow, uint32 NewSizeX, uint32 NewSizeY)"
  },
  {
    "label": "UpdateFullscreenState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFullscreenState(const TSharedRef<SWindow> InWindow, uint32 OverrideResX, uint32 OverrideResY)"
  },
  {
    "label": "SetSystemResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemResolution(uint32 Width, uint32 Height)"
  },
  {
    "label": "RestoreSystemResolution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreSystemResolution(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "ReleaseDynamicResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseDynamicResource(const FSlateBrush& Brush)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, uint32 Width, uint32 Height, const TArray< uint8 >& Bytes)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, FSlateTextureDataRef TextureData)"
  },
  {
    "label": "GetResourceHandle()",
    "kind": "Method",
    "detail": "Function (FSlateResourceHandle)",
    "insertText": "GetResourceHandle(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "RemoveDynamicBrushResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDynamicBrushResource(TSharedPtr<FSlateDynamicImageBrush> BrushToRemove)"
  },
  {
    "label": "LoadStyleResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStyleResources(const ISlateStyle& Style)"
  },
  {
    "label": "CreateUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateUpdatableTexture(uint32 Width, uint32 Height)"
  },
  {
    "label": "CreateSharedHandleTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateSharedHandleTexture(void* SharedHandle)"
  },
  {
    "label": "ReleaseUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUpdatableTexture(FSlateUpdatableTexture* Texture)"
  },
  {
    "label": "GetTextureAtlasProvider()",
    "kind": "Method",
    "detail": "Function (ISlateAtlasProvider*)",
    "insertText": "GetTextureAtlasProvider()"
  },
  {
    "label": "GetResourceCriticalSection()",
    "kind": "Method",
    "detail": "Function (FCriticalSection*)",
    "insertText": "GetResourceCriticalSection()"
  },
  {
    "label": "RegisterCurrentScene()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterCurrentScene(FSceneInterface* Scene)"
  },
  {
    "label": "GetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentSceneIndex()"
  },
  {
    "label": "SetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSceneIndex(int32 InIndex)"
  },
  {
    "label": "ClearScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearScenes()"
  },
  {
    "label": "Private_ResizeViewport()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Private_ResizeViewport(FVector2f WindowSize, FSlateOpenGLViewport& InViewport, bool bFullscreen)"
  }
]