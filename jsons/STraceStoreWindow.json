[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SNotificationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationList"
  },
  {
    "label": "SScrollBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBox"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "FStoreConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreConnection"
  },
  {
    "label": "FInsightsFrontendSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInsightsFrontendSettings"
  },
  {
    "label": "FStoreBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreBrowser"
  },
  {
    "label": "FStoreBrowserTraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoreBrowserTraceInfo"
  },
  {
    "label": "FTableImporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableImporter"
  },
  {
    "label": "FTraceViewModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceViewModel"
  },
  {
    "label": "FTraceDirectoryModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceDirectoryModel"
  },
  {
    "label": "FTraceFilterByPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByPlatform"
  },
  {
    "label": "FTraceFilterByAppName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByAppName"
  },
  {
    "label": "FTraceFilterByBuildConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBuildConfig"
  },
  {
    "label": "FTraceFilterByBuildTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBuildTarget"
  },
  {
    "label": "FTraceFilterByBranch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByBranch"
  },
  {
    "label": "FTraceFilterByVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByVersion"
  },
  {
    "label": "FTraceFilterBySize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterBySize"
  },
  {
    "label": "FTraceFilterByStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceFilterByStatus"
  },
  {
    "label": "STraceStoreWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STraceStoreWindow"
  },
  {
    "label": "STraceListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STraceListRow"
  },
  {
    "label": "STraceDirectoryItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STraceDirectoryItem"
  },
  {
    "label": "STraceWatchDirTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STraceWatchDirTableRow"
  },
  {
    "label": "STraceStoreWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Ticker . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / TextFilter . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / Views / SListView . h \" # include \" InsightsFrontend / StoreService / TraceServerControl . h \" # if PLATFORM_MAC | | PLATFORM_LINUX # include<semaphore . h> # endif class FActiveTimerHandle ; class ITableRow ; class SEditableTextBox ; class SNotificationList ; class SScrollBox ; class SSearchBox ; class STableViewBase ; class SVerticalBox ; namespace UE::Trace { class FStoreConnection ; } namespace UE::Insights { class FInsightsFrontendSettings ; class FStoreBrowser ; struct FStoreBrowserTraceInfo ; class FTableImporter ; struct FTraceViewModel ; struct FTraceDirectoryModel ; class FTraceFilterByPlatform ; class FTraceFilterByAppName ; class FTraceFilterByBuildConfig ; class FTraceFilterByBuildTarget ; class FTraceFilterByBranch ; class FTraceFilterByVersion ; class FTraceFilterBySize ; class FTraceFilterByStatus ; typedef TFilterCollection<const FTraceViewModel&> FTraceViewModelFilterCollection ; typedef TTextFilter<const FTraceViewModel&> FTraceTextFilter ; class STraceStoreWindow : public SCompoundWidget { class STraceListRow ; class STraceDirectoryItem ; public :)",
    "insertText": "STraceStoreWindow()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(STraceStoreWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<UE::Trace::FStoreConnection> InTraceStoreConnection)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (FInsightsFrontendSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "OpenSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSettings()"
  },
  {
    "label": "CloseSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseSettings()"
  },
  {
    "label": "GetExtraCommandLineParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExtraCommandLineParams(FString& OutParams)"
  },
  {
    "label": "SetEnableAutomaticTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableAutomaticTesting(bool InValue)"
  },
  {
    "label": "GetEnableAutomaticTesting()",
    "kind": "Method",
    "detail": "Function (bEnableAutomaticTesting = InValue ; } ; bool)",
    "insertText": "GetEnableAutomaticTesting()"
  },
  {
    "label": "GetEnableDebugTools()",
    "kind": "Method",
    "detail": "Function (bEnableDebugTools = InValue ; } ; bool)",
    "insertText": "GetEnableDebugTools()"
  },
  {
    "label": "GetStartProcessWithStompMalloc()",
    "kind": "Method",
    "detail": "Function (bStartProcessWithStompMalloc = InValue ; } ; bool)",
    "insertText": "GetStartProcessWithStompMalloc()"
  },
  {
    "label": "GetDisableFramerateThrottle()",
    "kind": "Method",
    "detail": "Function (bDisableFramerateThrottle = InValue ; } ; bool)",
    "insertText": "GetDisableFramerateThrottle()"
  },
  {
    "label": "OnFilterChanged()",
    "kind": "Method",
    "detail": "Function (bIsDeleteTraceConfirmWindowVisible = bIsVisible ; } void)",
    "insertText": "OnFilterChanged()"
  },
  {
    "label": "GetAllAvailableTraces()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FTraceViewModel>>&)",
    "insertText": "GetAllAvailableTraces()"
  },
  {
    "label": "HasValidTraceStoreConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidTraceStoreConnection()"
  },
  {
    "label": "GetTraceStoreConnection()",
    "kind": "Method",
    "detail": "Function (} UE::Trace::FStoreConnection&)",
    "insertText": "GetTraceStoreConnection()"
  },
  {
    "label": "ConstructFiltersToolbar()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "ConstructFiltersToolbar()"
  },
  {
    "label": "ConstructSessionsPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructSessionsPanel()"
  },
  {
    "label": "ConstructLoadPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructLoadPanel()"
  },
  {
    "label": "GetConnectionStatusTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetConnectionStatusTooltip()"
  },
  {
    "label": "GetConnectionStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetConnectionStatusIcon()"
  },
  {
    "label": "ConstructTraceStoreDirectoryPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructTraceStoreDirectoryPanel()"
  },
  {
    "label": "ConstructAutoStartPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructAutoStartPanel()"
  },
  {
    "label": "TraceList_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TraceList_OnGenerateRow(TSharedPtr<FTraceViewModel> InTrace, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TraceList_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TraceList_GetMenuContent()"
  },
  {
    "label": "CanRenameSelectedTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameSelectedTrace()"
  },
  {
    "label": "RenameSelectedTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSelectedTrace()"
  },
  {
    "label": "CanDeleteSelectedTraces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelectedTraces()"
  },
  {
    "label": "DeleteSelectedTraces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedTraces()"
  },
  {
    "label": "DeleteTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteTrace(const TSharedPtr<FTraceViewModel>& TraceToDelete)"
  },
  {
    "label": "CanCopyTraceId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyTraceId()"
  },
  {
    "label": "CopyTraceId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTraceId()"
  },
  {
    "label": "CanCopyFullPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyFullPath()"
  },
  {
    "label": "CopyFullPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFullPath()"
  },
  {
    "label": "CanOpenContainingFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenContainingFolder()"
  },
  {
    "label": "OpenContainingFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenContainingFolder()"
  },
  {
    "label": "HasAnyLiveTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyLiveTrace()"
  },
  {
    "label": "ShowSplashScreenOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSplashScreenOverlay()"
  },
  {
    "label": "TickSplashScreenOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickSplashScreenOverlay(const float InDeltaTime)"
  },
  {
    "label": "SplashScreenOverlayOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SplashScreenOverlayOpacity()"
  },
  {
    "label": "SplashScreenOverlay_Visibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "SplashScreenOverlay_Visibility()"
  },
  {
    "label": "SplashScreenOverlay_ColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "SplashScreenOverlay_ColorAndOpacity()"
  },
  {
    "label": "SplashScreenOverlay_TextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "SplashScreenOverlay_TextColorAndOpacity()"
  },
  {
    "label": "GetSplashScreenOverlayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSplashScreenOverlayText()"
  },
  {
    "label": "Open_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open_IsEnabled()"
  },
  {
    "label": "Open_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "Open_OnClicked()"
  },
  {
    "label": "ShowOpenTraceFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowOpenTraceFileDialog(FString& OutTraceFile)"
  },
  {
    "label": "OpenTraceFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTraceFile()"
  },
  {
    "label": "OpenTraceFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTraceFile(const FString& InTraceFile)"
  },
  {
    "label": "OpenTraceSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTraceSession(TSharedPtr<FTraceViewModel> InTrace)"
  },
  {
    "label": "OpenTraceSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTraceSession(uint32 InTraceId)"
  },
  {
    "label": "MakeTraceListMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTraceListMenu()"
  },
  {
    "label": "MakePlatformColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlatformColumnHeaderMenu()"
  },
  {
    "label": "MakePlatformFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlatformFilterMenu()"
  },
  {
    "label": "BuildPlatformFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPlatformFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeAppNameColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAppNameColumnHeaderMenu()"
  },
  {
    "label": "MakeAppNameFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAppNameFilterMenu()"
  },
  {
    "label": "BuildAppNameFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAppNameFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeBuildConfigColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBuildConfigColumnHeaderMenu()"
  },
  {
    "label": "MakeBuildConfigFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBuildConfigFilterMenu()"
  },
  {
    "label": "BuildBuildConfigFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBuildConfigFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeBuildTargetColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBuildTargetColumnHeaderMenu()"
  },
  {
    "label": "MakeBuildTargetFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBuildTargetFilterMenu()"
  },
  {
    "label": "BuildBuildTargetFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBuildTargetFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeBranchColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBranchColumnHeaderMenu()"
  },
  {
    "label": "MakeBranchFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBranchFilterMenu()"
  },
  {
    "label": "BuildBranchFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBranchFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeVersionColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeVersionColumnHeaderMenu()"
  },
  {
    "label": "MakeVersionFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeVersionFilterMenu()"
  },
  {
    "label": "BuildVersionFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildVersionFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeSizeColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSizeColumnHeaderMenu()"
  },
  {
    "label": "MakeSizeFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSizeFilterMenu()"
  },
  {
    "label": "BuildSizeFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSizeFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "MakeStatusColumnHeaderMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeStatusColumnHeaderMenu()"
  },
  {
    "label": "MakeStatusFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeStatusFilterMenu()"
  },
  {
    "label": "BuildStatusFilterSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStatusFilterSubMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "RefreshTraces_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RefreshTraces_OnClicked()"
  },
  {
    "label": "GetColorByPath()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColorByPath(const FString& Uri)"
  },
  {
    "label": "RefreshTraceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTraceList()"
  },
  {
    "label": "UpdateTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrace(FTraceViewModel& InOutTrace, const FStoreBrowserTraceInfo& InSourceTrace)"
  },
  {
    "label": "OnTraceListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceListChanged()"
  },
  {
    "label": "GetSingleSelectedTrace()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTraceViewModel>)",
    "insertText": "GetSingleSelectedTrace()"
  },
  {
    "label": "TraceList_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceList_OnSelectionChanged(TSharedPtr<FTraceViewModel> InTrace, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TraceList_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceList_OnMouseButtonDoubleClick(TSharedPtr<FTraceViewModel> InTrace)"
  },
  {
    "label": "AutoStart_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "AutoStart_IsChecked()"
  },
  {
    "label": "AutoStart_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoStart_OnCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "AutoConnect_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "AutoConnect_IsChecked()"
  },
  {
    "label": "AutoConnect_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoConnect_OnCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetTraceStoreDirectory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTraceStoreDirectory()"
  },
  {
    "label": "ExploreTraceStoreDirectory_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ExploreTraceStoreDirectory_OnClicked()"
  },
  {
    "label": "GetStoreDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStoreDirectory()"
  },
  {
    "label": "CanChangeStoreSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeStoreSettings()"
  },
  {
    "label": "TraceDirs_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TraceDirs_OnGenerateRow(TSharedPtr<FTraceDirectoryModel> Item, const TSharedRef<STableViewBase>& Owner)"
  },
  {
    "label": "StoreSettingsArea_Toggle()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "StoreSettingsArea_Toggle()"
  },
  {
    "label": "StoreSettingsToggle_Icon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "StoreSettingsToggle_Icon()"
  },
  {
    "label": "AddWatchDir_Clicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AddWatchDir_Clicked()"
  },
  {
    "label": "UpdateActiveDuration()",
    "kind": "Method",
    "detail": "Function (class STraceWatchDirTableRow ; EActiveTimerReturnType)",
    "insertText": "UpdateActiveDuration(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "CoreTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CoreTick(float DeltaTime)"
  },
  {
    "label": "FilterByNameSearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByNameSearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "GetFilterStatsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterStatsText()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FTraceViewModel& InTrace, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "UpdateFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFiltering()"
  },
  {
    "label": "UpdateFilterStatsText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterStatsText()"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "UpdateSorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSorting()"
  },
  {
    "label": "UpdateTraceListView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTraceListView()"
  },
  {
    "label": "ShowSuccessMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSuccessMessage(FText& InMessage)"
  },
  {
    "label": "ShowFailMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowFailMessage(FText& InMessage)"
  },
  {
    "label": "EnableAutoConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAutoConnect()"
  },
  {
    "label": "DisableAutoConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAutoConnect()"
  },
  {
    "label": "AutoStartPlatformFilterBox_OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoStartPlatformFilterBox_OnValueCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "AutoStartAppNameFilterBox_OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoStartAppNameFilterBox_OnValueCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  }
]