[
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "TSetPartialPropertyValuesImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSetPartialPropertyValuesImpl"
  },
  {
    "label": "PatchComposite()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" EntitySystem / MovieSceneComponentAccessors . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieScenePropertySystemTypes . h \" # include \" EntitySystem / MovieScenePropertyRegistry . h \" class UMovieSceneEntitySystemLinker ; class FTrackInstancePropertyBindings ; namespace UE { namespace MovieScene { template<CompositeType> void)",
    "insertText": "PatchComposite(uint8* OutValueBase, const CompositeType* Composite, uint16 PtrOffset)"
  },
  {
    "label": "CompositeType()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "CompositeType(OutValueBase + PtrOffset)"
  },
  {
    "label": "PatchCompositeValueImpl()",
    "kind": "Method",
    "detail": "Function (} } template<. . . CompositeTypes,int . . . CompositeIndices> void)",
    "insertText": "PatchCompositeValueImpl(const TIntegerSequence<int, CompositeIndices...>&, TArrayView<const FPropertyCompositeDefinition> CompositeDefinitions, uint8* OutValueBase, const CompositeTypes*... Composites)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Tmp(PatchComposite(OutValueBase, Composites, CompositeDefinitions[CompositeIndices].CompositeOffset), 0)"
  },
  {
    "label": "PatchCompositeValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . CompositeTypes> void)",
    "insertText": "PatchCompositeValue(TArrayView<const FPropertyCompositeDefinition> CompositeDefinitions, void* OutValueAddress, const CompositeTypes*... Composites)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* ValueBase = static_cast<)",
    "insertText": "uint8(OutValueAddress)"
  },
  {
    "label": "PatchCompositeValueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchCompositeValueImpl(TMakeIntegerSequence<int, sizeof...(CompositeTypes)>(), CompositeDefinitions, ValueBase, Composites...)"
  },
  {
    "label": "TSetPartialPropertyValuesImpl()",
    "kind": "Method",
    "detail": "Function (} template<PropertyTraits,MetaDataType,CompositeIntegers,. . . CompositeTypes> struct TSetPartialPropertyValuesImpl ; template<PropertyTraits,. . . MetaDataTypes,int . . . CompositeIndices,. . . CompositeTypes> struct TSetPartialPropertyValuesImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>,TIntegerSequence<int,CompositeIndices . . .>,CompositeTypes . . .> { using StorageType = PropertyTraits::StorageType ; using FThreeWayAccessor = TMultiReadOptional<FCustomPropertyIndex,uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; using FTwoWayAccessor = TMultiReadOptional<uint16,TSharedPtr<FTrackInstancePropertyBindings>> ;)",
    "insertText": "TSetPartialPropertyValuesImpl(ICustomPropertyRegistration* InCustomProperties, TArrayView<const FPropertyCompositeDefinition> InCompositeDefinitions) : CustomProperties(InCustomProperties) , CompositeDefinitions(InCompositeDefinitions)"
  },
  {
    "label": "GetAccessors()",
    "kind": "Method",
    "detail": "Function (CustomAccessors = CustomProperties ->)",
    "insertText": "GetAccessors()"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FThreeWayAccessor PropertyBindingComponents, TRead<MetaDataTypes>... InMetaData, TReadOptional<CompositeTypes>... InCompositeComponents)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FTwoWayAccessor PropertyBindingComponents, TRead<MetaDataTypes>... InMetaData, TReadOptional<CompositeTypes>... InCompositeComponents)"
  },
  {
    "label": "ForEachCustom()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ForEachCustom(const FEntityAllocation* Allocation, UObject* const* Objects, const FCustomPropertyIndex* Custom, const MetaDataTypes*... InMetaData, const CompositeTypes*... InCompositeComponents)"
  },
  {
    "label": "ForEachFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachFast(const FEntityAllocation* Allocation, UObject* const* Objects, const uint16* Fast, const MetaDataTypes*... InMetaData, const CompositeTypes*... InCompositeComponents)"
  },
  {
    "label": "ForEachSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSlow(const FEntityAllocation* Allocation, UObject* const* Objects, const TSharedPtr<FTrackInstancePropertyBindings>* Slow, const MetaDataTypes*... InMetaData, const CompositeTypes*... InCompositeComponents)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (private : ICustomPropertyRegistration* CustomProperties ; FCustomAccessorView CustomAccessors ; TArrayView<const FPropertyCompositeDefinition> CompositeDefinitions ; } ; template<PropertyTraits,. . . CompositeTypes> using TSetPartialPropertyValues = TSetPartialPropertyValuesImpl<PropertyTraits,PropertyTraits::MetaDataType,TMakeIntegerSequence<int,)",
    "insertText": "sizeof(CompositeTypes)"
  }
]