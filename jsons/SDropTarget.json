[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "EDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Framework / SlateDelegates . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Misc / Attribute . h \" # include \" Styling / AppStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / StyleColors . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class SWidget ; struct FGeometry ; struct FSlateBrush ; class SDropTarget : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FVerifyDrag, TSharedPtr<FDragDropOperation>)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDragAction, const FDragDropEvent&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FReply, FOnDropDeprecated, TSharedPtr<FDragDropOperation>)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDropTarget) : _ValidColor(FStyleColors::AccentBlue) , _InvalidColor(FStyleColors::Error) , _VerticalImage(FAppStyle::GetBrush(\"WideDash.Vertical\")) , _HorizontalImage(FAppStyle::GetBrush(\"WideDash.Horizontal\")) , _BackgroundImage(FAppStyle::GetBrush(\"DropTarget.Background\")) , _bOnlyRecognizeOnDragEnter(false) , _bUseAllowDropCache(false)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_ARGUMENT(FSlateColor, ValidColor) SLATE_ARGUMENT(FSlateColor, InvalidColor) SLATE_ARGUMENT(const FSlateBrush*, VerticalImage) SLATE_ARGUMENT(const FSlateBrush*, HorizontalImage) SLATE_ATTRIBUTE(const FSlateBrush*, BackgroundImage) SLATE_EVENT(FOnDrop, OnDropped) SLATE_EVENT(FVerifyDrag, OnAllowDrop) SLATE_EVENT(FVerifyDrag, OnIsRecognized) SLATE_EVENT(FOnDragAction, OnDragEnter) SLATE_EVENT(FOnDragAction, OnDragLeave) SLATE_ATTRIBUTE(bool, bOnlyRecognizeOnDragEnter) SLATE_ARGUMENT(bool, bUseAllowDropCache) FOnDrop ConvertOnDropFn(const FOnDropDeprecated& LegacyDelegate)"
  },
  {
    "label": "SLATE_EVENT_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT_DEPRECATED(5.0, \"Use OnDropped instead.\", FOnDropDeprecated, OnDrop, OnDropped, ConvertOnDropFn) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ClearAllowDropCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllowDropCache()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AllowDropCache .)",
    "insertText": "Reset()"
  },
  {
    "label": "AllowDrop()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "AllowDrop(TSharedPtr<FDragDropOperation> DragDropOperation)"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(TSharedPtr<FDragDropOperation> DragDropOperation)"
  },
  {
    "label": "OnIsRecognized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsRecognized(TSharedPtr<FDragDropOperation> DragDropOperation)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetDragOverlayVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDragOverlayVisibility()"
  },
  {
    "label": "GetBackgroundBrightness()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetBackgroundBrightness()"
  },
  {
    "label": "IsDragOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragOver()"
  }
]