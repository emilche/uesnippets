[
  {
    "label": "Cord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cord"
  },
  {
    "label": "FormatCountCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatCountCapture"
  },
  {
    "label": "FormatSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatSink"
  },
  {
    "label": "FormatConvertResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatConvertResult"
  },
  {
    "label": "FormatConversionSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatConversionSpec"
  },
  {
    "label": "ArgConvertResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgConvertResult"
  },
  {
    "label": "HasUserDefinedConvert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasUserDefinedConvert"
  },
  {
    "label": "StreamedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamedWrapper"
  },
  {
    "label": "VoidPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoidPtr"
  },
  {
    "label": "AbslCord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbslCord"
  },
  {
    "label": "FormatCountCaptureHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatCountCaptureHelper"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FormatArgImplFriend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatArgImplFriend"
  },
  {
    "label": "FormatArgImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatArgImpl"
  },
  {
    "label": "store_by_value",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "store_by_value"
  },
  {
    "label": "StoragePolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StoragePolicy"
  },
  {
    "label": "storage_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "storage_policy"
  },
  {
    "label": "DecayType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecayType"
  },
  {
    "label": "str_format_internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "str_format_internal"
  },
  {
    "label": "Manager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Manager"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_FORMAT_ARG_H_ # define ABSL_STRINGS_INTERNAL_STR_FORMAT_ARG_H_ # include<string . h> # include<wchar . h> # include<cstdio> # include<iomanip> # include<limits> # include<memory> # include<sstream> # include<string> # include<type_traits> # include \" absl / base / port . h \" # include \" absl / meta / type_traits . h \" # include \" absl / numeric / int128 . h \" # include \" absl / strings / internal / str_format / extension . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN class Cord ; class FormatCountCapture ; class FormatSink ; template<absl::FormatConversionCharSet C> struct FormatConvertResult ; class FormatConversionSpec ; namespace str_format_internal { template<FormatConversionCharSet C> struct ArgConvertResult { bool value ; } ; template<T,= void> struct HasUserDefinedConvert : std::false_type { } ; template<T> struct HasUserDefinedConvert<T,void_t<)",
    "insertText": "decltype(AbslFormatConvert( std::declval<const T&>(), std::declval<const FormatConversionSpec&>(), std::declval<FormatSink*>()))"
  },
  {
    "label": "AbslFormatConvert()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AbslFormatConvert()"
  },
  {
    "label": "AbslStringify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbslStringify()"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (template<T> auto)",
    "insertText": "FormatConvertImpl(const T& v, FormatConversionSpecImpl conv, FormatSinkImpl* sink) -> decltype(AbslFormatConvert(v, std::declval<const FormatConversionSpec&>(), std::declval<FormatSink*>()))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using FormatConversionSpecT = absl::enable_if_t<)",
    "insertText": "sizeof(const T& (*)())"
  },
  {
    "label": "FormatConversionSpecT()",
    "kind": "Method",
    "detail": "Function (auto fcs = conv . Wrap<)",
    "insertText": "FormatConversionSpecT()"
  },
  {
    "label": "FormatSinkT()",
    "kind": "Method",
    "detail": "Function (auto fs = sink -> Wrap<)",
    "insertText": "FormatSinkT()"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "FormatConvertImpl(const T& v, FormatConversionSpecImpl, FormatSinkImpl* sink) -> std::enable_if_t<std::is_void<decltype(AbslStringify( std::declval<FormatSink&>(), v))"
  },
  {
    "label": "AbslStringify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbslStringify(fs, v)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T,)",
    "insertText": "decltype(reinterpret_cast<uintptr_t>(std::declval<T*>())) = 0> VoidPtr(T* ptr) : value(ptr ? reinterpret_cast<uintptr_t>(ptr) : 0)"
  },
  {
    "label": "ExtractCharSet()",
    "kind": "Method",
    "detail": "Function (} uintptr_t value ; } ; template<FormatConversionCharSet C> FormatConversionCharSet)",
    "insertText": "ExtractCharSet(FormatConvertResult<C>)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (ArgConvertResult<FormatConversionCharSetInternal::p>)",
    "insertText": "FormatConvertImpl(VoidPtr v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (StringConvertResult)",
    "insertText": "FormatConvertImpl(const std::string& v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (StringConvertResult)",
    "insertText": "FormatConvertImpl(string_view v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ABSL_HAVE_STD_STRING_VIEW) && !defined(ABSL_USES_STD_STRING_VIEW) inline StringConvertResult FormatConvertImpl(std::string_view v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (} # endif ArgConvertResult<)",
    "insertText": "FormatConversionCharSetUnion(FormatConversionCharSetInternal::s, FormatConversionCharSetInternal::p)> FormatConvertImpl(const char* v, const FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (template<class AbslCord,std::enable_if<std::is_same<AbslCord,absl::Cord>::value>::type* = nullptr> StringConvertResult)",
    "insertText": "FormatConvertImpl(const AbslCord& value, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "has_left_flag()",
    "kind": "Method",
    "detail": "Function (bool is_left = conv .)",
    "insertText": "has_left_flag()"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (size_t space_remaining = 0 ; int width = conv .)",
    "insertText": "width()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t to_write = value .)",
    "insertText": "size()"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (int precision = conv .)",
    "insertText": "precision()"
  },
  {
    "label": "Excess()",
    "kind": "Method",
    "detail": "Function (space_remaining =)",
    "insertText": "Excess(to_write, space_remaining)"
  },
  {
    "label": "remove_suffix()",
    "kind": "Method",
    "detail": "Function (piece .)",
    "insertText": "remove_suffix(piece.size() - to_write)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} sink ->)",
    "insertText": "Append(piece)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(space_remaining > 0 && is_left) sink->Append(space_remaining, ' ')"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (using FloatingConvertResult = ArgConvertResult<)",
    "insertText": "FormatConversionCharSetUnion(FormatConversionCharSetInternal::kFloating, FormatConversionCharSetInternal::v)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (using CharConvertResult = ArgConvertResult<)",
    "insertText": "FormatConversionCharSetUnion(FormatConversionCharSetInternal::c, FormatConversionCharSetInternal::kNumeric, FormatConversionCharSetInternal::kStar)"
  },
  {
    "label": "ConvertBoolArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertBoolArg(bool v, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (FloatingConvertResult)",
    "insertText": "FormatConvertImpl(float v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (FloatingConvertResult)",
    "insertText": "FormatConvertImpl(double v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (FloatingConvertResult)",
    "insertText": "FormatConvertImpl(long double v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (CharConvertResult)",
    "insertText": "FormatConvertImpl(char v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (CharConvertResult)",
    "insertText": "FormatConvertImpl(signed char v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (CharConvertResult)",
    "insertText": "FormatConvertImpl(unsigned char v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(short v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(unsigned short v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(int v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(unsigned v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(long v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(unsigned long v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(long long v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(unsigned long long v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(int128 v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (IntegralConvertResult)",
    "insertText": "FormatConvertImpl(uint128 v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (template<T,enable_if_t<std::is_same<T,bool>::value,int> = 0> IntegralConvertResult)",
    "insertText": "FormatConvertImpl(T v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FormatConvertImpl(static_cast<int>(v), conv, sink)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (template<T> StringConvertResult)",
    "insertText": "FormatConvertImpl(const StreamedWrapper<T>& v, FormatConversionSpecImpl conv, FormatSinkImpl* out)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::ostringstream oss ; oss<<v . v_ ;)",
    "insertText": "if(!oss)"
  },
  {
    "label": "FormatConvertImpl()",
    "kind": "Method",
    "detail": "Function (false } ; return)",
    "insertText": "FormatConvertImpl(oss.str(), conv, out)"
  },
  {
    "label": "ConvertHelper()",
    "kind": "Method",
    "detail": "Function (} struct FormatCountCaptureHelper { template<class T = int> ArgConvertResult<FormatConversionCharSetInternal::n>)",
    "insertText": "ConvertHelper(const FormatCountCapture& v, FormatConversionSpecImpl conv, FormatSinkImpl* sink)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const absl::enable_if_t<)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (} struct FormatArgImplFriend { template<Arg> bool)",
    "insertText": "ToInt(Arg arg, int* out)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} template<Arg> bool)",
    "insertText": "Convert(Arg arg, FormatConversionSpecImpl conv, FormatSinkImpl* out)"
  },
  {
    "label": "GetVTablePtrForTest()",
    "kind": "Method",
    "detail": "Function (} template<Arg> Arg::Dispatcher)",
    "insertText": "GetVTablePtrForTest(Arg arg)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ConvResult =)",
    "insertText": "decltype(str_format_internal::FormatConvertImpl( std::declval<const Arg&>(), std::declval<const FormatConversionSpecImpl&>(), std::declval<FormatSinkImpl*>()))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} class FormatArgImpl { private : enum { kInlinedSpace = 8 } ; using VoidPtr = str_format_internal::VoidPtr ; union Data { const void* ptr ; const volatile void* volatile_ptr ; char buf [ kInlinedSpace ] ; } ; using Dispatcher =)",
    "insertText": "bool(*)(Data, FormatConversionSpecImpl, void* out)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<T> struct store_by_value : std::integral_constant<)",
    "insertText": "bool(sizeof(T) <= kInlinedSpace) && (std::is_integral<T>::value || std::is_floating_point<T>::value || std::is_pointer<T>::value || std::is_same<VoidPtr, T>::value)"
  },
  {
    "label": "StoragePolicy()",
    "kind": "Method",
    "detail": "Function (} ; enum StoragePolicy { ByPointer,ByVolatilePointer,ByValue } ; template<T> struct storage_policy : std::integral_constant<)",
    "insertText": "StoragePolicy(std::is_volatile<T>::value ? ByVolatilePointer : (store_by_value<T>::value ? ByValue : ByPointer))"
  },
  {
    "label": "FormatArgImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct DecayType { bool kHasUserDefined = str_format_internal::HasUserDefinedConvert<T>::value ; using type = std::conditional<! kHasUserDefined&& std::is_convertible<T,const char*>::value,const char*,std::conditional<! kHasUserDefined&& std::is_convertible<T,VoidPtr>::value,VoidPtr,const T&>::type>::type ; } ; template<T> struct DecayType<T,std::enable_if<! str_format_internal::HasUserDefinedConvert<T>::value&& std::is_enum<T>::value>::type> { using type = std::underlying_type<T>::type ; } ; public : template<T>)",
    "insertText": "FormatArgImpl(const T& value)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using D = DecayType<T>::type ;)",
    "insertText": "static_assert(std::is_same<D, const T&>::value || storage_policy<D>::value == ByValue, \"Decayed types must be stored by value\")"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(static_cast<D>(value))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} private : struct str_format_internal::FormatArgImplFriend ; template<T,StoragePolicy = storage_policy<T>::value> struct Manager ; template<T> struct Manager<T,ByPointer> { Data)",
    "insertText": "SetValue(const T& value)"
  },
  {
    "label": "addressof()",
    "kind": "Method",
    "detail": "Function (Data data ; data . ptr =)",
    "insertText": "addressof(value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Data data ; data . volatile_ptr =& value ; return data ; } const T&)",
    "insertText": "Value(Data arg)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Data data ;)",
    "insertText": "memcpy(data.buf, &value, sizeof(value))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (T value ;)",
    "insertText": "memcpy(&value, arg.buf, sizeof(T))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (data_ = Manager<T)",
    "insertText": "SetValue(value)"
  },
  {
    "label": "ToIntVal()",
    "kind": "Method",
    "detail": "Function (dispatcher_ =& Dispatch<T> ; } template<T> int)",
    "insertText": "ToIntVal(const T& val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using CommonType = std::conditional<std::is_signed<T>::value,int64_t,uint64_t>::type ;)",
    "insertText": "if(static_cast<CommonType>(val) > static_cast<CommonType>((std::numeric_limits<int>::max)()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(std::is_signed<T>::value && static_cast<CommonType>(val) < static_cast<CommonType>((std::numeric_limits<int>::min)()))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "int(val)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "ToInt(Data arg, int* out, std::true_type , std::false_type)"
  },
  {
    "label": "ToIntVal()",
    "kind": "Method",
    "detail": "Function (* out =)",
    "insertText": "ToIntVal(Manager<T>::Value(arg))"
  },
  {
    "label": "ToIntVal()",
    "kind": "Method",
    "detail": "Function (* out =)",
    "insertText": "ToIntVal(static_cast<typename std::underlying_type<T>::type>( Manager<T>::Value(arg)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ABSL_PREDICT_FALSE(!Contains(ArgumentToConv<T>(), spec.conversion_char())))"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (} Data data_ ; Dispatcher dispatcher_ ; } ; # define)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(T, E) \\ E template bool FormatArgImpl::Dispatch<T>(Data, FormatConversionSpecImpl, \\ void*) #define ABSL_INTERNAL_FORMAT_DISPATCH_OVERLOADS_EXPAND_(...) \\ ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(str_format_internal::VoidPtr, \\ __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(bool, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(char, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(signed char, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(unsigned char, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(short, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(unsigned short, \\ __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(int, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(unsigned int, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(long, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(unsigned long, \\ __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(long long, \\ __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(unsigned long long, \\ __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(int128, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(uint128, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(float, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(double, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(long double, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(const char*, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(std::string, __VA_ARGS__)"
  },
  {
    "label": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_FORMAT_DISPATCH_INSTANTIATE_(string_view, __VA_ARGS__) ABSL_INTERNAL_FORMAT_DISPATCH_OVERLOADS_EXPAND_(extern)"
  }
]