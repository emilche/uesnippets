[
  {
    "label": "DeepImageLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeepImageLevel"
  },
  {
    "label": "SampleCountChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleCountChannel"
  },
  {
    "label": "IMFUTIL_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IMFUTIL_EXPORT_TEMPLATE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TEMPLATE_TYPE"
  },
  {
    "label": "IMFUTIL_EXPORT_EXTERN_TEMPLATE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_EXTERN_TEMPLATE"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_DEEP_IMAGE_CHANNEL_H # define INCLUDED_IMF_DEEP_IMAGE_CHANNEL_H # include \" ImfNamespace . h \" # include \" ImfUtilExport . h \" # include \" ImfImageChannel . h \" # include \" ImfImageLevel . h \" # include \" ImfSampleCountChannel . h \" # include \" ImfDeepFrameBuffer . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class DeepImageLevel ; class SampleCountChannel ; class IMFUTIL_EXPORT_TYPE DeepImageChannel : public ImageChannel { public : DeepSlice)",
    "insertText": "slice()"
  },
  {
    "label": "deepLevel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT DeepImageLevel&)",
    "insertText": "deepLevel()"
  },
  {
    "label": "sampleCounts()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT SampleCountChannel&)",
    "insertText": "sampleCounts()"
  },
  {
    "label": "DeepImageChannel()",
    "kind": "Method",
    "detail": "Function (protected : class DeepImageLevel ; IMFUTIL_EXPORT)",
    "insertText": "DeepImageChannel(DeepImageLevel& level, bool pLinear)"
  },
  {
    "label": "DeepImageChannel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT ~)",
    "insertText": "DeepImageChannel()"
  },
  {
    "label": "DeepImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepImageChannel(const DeepImageChannel& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepImageChannel&)",
    "insertText": "operator(const DeepImageChannel& other)"
  },
  {
    "label": "DeepImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepImageChannel(DeepImageChannel&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepImageChannel&)",
    "insertText": "operator(DeepImageChannel&& other)"
  },
  {
    "label": "setSamplesToZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSamplesToZero(size_t i, unsigned int oldNumSamples, unsigned int newNumSamples)"
  },
  {
    "label": "moveSampleList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveSampleList(size_t i, unsigned int oldNumSamples, unsigned int newNumSamples, size_t newSampleListPosition)"
  },
  {
    "label": "moveSamplesToNewBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveSamplesToNewBuffer(const unsigned int* oldNumSamples, const unsigned int* newNumSamples, const size_t* newSampleListPositions)"
  },
  {
    "label": "initializeSampleLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeSampleLists()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "resize()"
  },
  {
    "label": "resetBasePointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetBasePointer()"
  },
  {
    "label": "pixelType()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class IMFUTIL_EXPORT_TEMPLATE_TYPE TypedDeepImageChannel : public DeepImageChannel { public : PixelType)",
    "insertText": "pixelType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "operator() (int x, int y)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "at(int x, int y)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (T* const*)",
    "insertText": "row(int r)"
  },
  {
    "label": "TypedDeepImageChannel()",
    "kind": "Method",
    "detail": "Function (private : class DeepImageLevel ; IMFUTIL_HIDDEN)",
    "insertText": "TypedDeepImageChannel(DeepImageLevel& level, bool pLinear)"
  },
  {
    "label": "TypedDeepImageChannel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_HIDDEN ~)",
    "insertText": "TypedDeepImageChannel()"
  },
  {
    "label": "TypedDeepImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedDeepImageChannel(const TypedDeepImageChannel& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TypedDeepImageChannel&)",
    "insertText": "operator(const TypedDeepImageChannel& other)"
  },
  {
    "label": "TypedDeepImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedDeepImageChannel(TypedDeepImageChannel&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TypedDeepImageChannel&)",
    "insertText": "operator(TypedDeepImageChannel&& other)"
  },
  {
    "label": "boundsCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boundsCheck(x, y)"
  }
]