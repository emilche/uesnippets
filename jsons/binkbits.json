[
  {
    "label": "BINKVARBITS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BINKVARBITS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __RADRR_COREH__ # include \" rrCore . h \" # endif # if !)",
    "insertText": "defined(__RAD64__)"
  },
  {
    "label": "BINKBITSLOCALS()",
    "kind": "Method",
    "detail": "Function (void* cur ; U32 bits ; U32 bitlen ; } BINKVARBITS ; # define)",
    "insertText": "BINKBITSLOCALS(name)"
  },
  {
    "label": "BinkVarBitsOpen()",
    "kind": "Method",
    "detail": "Function (U32 name # # bits ; U32 name # # bitlen # define)",
    "insertText": "BinkVarBitsOpen(vb,pointer)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__RADEMSCRIPTEN__) #include <emscripten.h> #define BINK_LOAD32(ptr) ((U32)*((emscripten_align1_int*)(ptr))) #else #if defined(BINKAUDIODATALE) #define BINK_LOAD32(ptr) RR_GET32_LE(ptr) #else #define BINK_LOAD32(ptr) RR_GET32_NATIVE(ptr) #endif #endif #define BinkBitsGet(v,typ,vb,len,mask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((vb##bitlen)<(len))"
  },
  {
    "label": "BINK_LOAD32()",
    "kind": "Method",
    "detail": "Function (\\ register U32 nb =)",
    "insertText": "BINK_LOAD32((U32* RADRESTRICT)(vb##cur))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)(((vb##bits)|(nb<<(vb##bitlen)))&(mask))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "v(typ)((vb##bits)&(mask))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # if)",
    "insertText": "defined(__RADLITTLEENDIAN__) #define MAX_AT_LEAST_BITS 25 #define BinkBitsAtLeastStart( vb,len)"
  },
  {
    "label": "bl()",
    "kind": "Method",
    "detail": "Function (\\ U32)",
    "insertText": "bl((32-(vb##bitlen))>>3)"
  },
  {
    "label": "BinkBitsAtLeastEnd()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "BinkBitsAtLeastEnd(vb) #else #define MAX_AT_LEAST_BITS 32 #define BinkBitsAtLeastStart( vb,len)"
  },
  {
    "label": "BinkBitsAtLeastEnd()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "BinkBitsAtLeastEnd(vb)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(( (S32)(vb##bitlen) ) <= 0)"
  },
  {
    "label": "BinkBitsGet()",
    "kind": "Method",
    "detail": "Function (} # define BINK_LOAD32 RR_GET32_NATIVE # define)",
    "insertText": "BinkBitsGet(v,typ,vb,len,mask)"
  },
  {
    "label": "nb()",
    "kind": "Method",
    "detail": "Function (\\ U64)",
    "insertText": "nb((U64* RADRESTRICT)(vb##cur))"
  },
  {
    "label": "BinkBitsAtLeastStart()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define MAX_AT_LEAST_BITS 5 7 # define)",
    "insertText": "BinkBitsAtLeastStart(vb,len)"
  },
  {
    "label": "bl()",
    "kind": "Method",
    "detail": "Function (\\ U32)",
    "insertText": "bl((64-(vb##bitlen))>>3)"
  },
  {
    "label": "BinkBitsAtLeastEnd()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "BinkBitsAtLeastEnd(vb ) #define VarBits32Use(vb,len)"
  },
  {
    "label": "BINKBITSCOPY()",
    "kind": "Method",
    "detail": "Function (} # define MAX_PEEK 6 4 # endif # define)",
    "insertText": "BINKBITSCOPY(name, from)"
  },
  {
    "label": "BinkBitsInAtLeastPeek()",
    "kind": "Method",
    "detail": "Function (name # # cur = from # # cur ; name # # bits = from # # bits ; name # # bitlen = from # # bitlen ; } # define)",
    "insertText": "BinkBitsInAtLeastPeek(vb) ( vb##bits ) #define BinkBitsInAtLeastUse( vb, bl)"
  },
  {
    "label": "BinkBitsPeek()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "BinkBitsPeek(v, typ, vb, len)"
  },
  {
    "label": "BinkBitsAtLeastStart()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "BinkBitsAtLeastStart(vb, len ) \\ (v)=(typ)BinkBitsInAtLeastPeek( vb)"
  },
  {
    "label": "BinkBitsUse()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "BinkBitsUse(vb, bl)"
  },
  {
    "label": "BinkBitsInAtLeastUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BinkBitsInAtLeastUse(vb, bl)"
  },
  {
    "label": "BinkVarBitsUse()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "BinkVarBitsUse(vb,len)"
  },
  {
    "label": "VarBitsCopyToBinkBits()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsCopyToBinkBits(local, vb ) local##cur = (vb)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (local # #)",
    "insertText": "bits(vb)"
  },
  {
    "label": "bitlen()",
    "kind": "Method",
    "detail": "Function (local # #)",
    "insertText": "bitlen(vb)"
  },
  {
    "label": "BinkBitsCopyToVarBits()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "BinkBitsCopyToVarBits(vb, local)"
  }
]