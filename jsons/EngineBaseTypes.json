[
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTickContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickContext"
  },
  {
    "label": "EInputEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInputEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "ETickingGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETickingGroup"
  },
  {
    "label": "FTickPrerequisite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickPrerequisite"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickFunction"
  },
  {
    "label": "FInternalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalData"
  },
  {
    "label": "FTickTaskLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickTaskLevel"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FTickTaskSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickTaskSequencer"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FTickTaskManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickTaskManager"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FActorTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorTickFunction"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FActorComponentTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorComponentTickFunction"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ETravelType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelType"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FURL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FURL"
  },
  {
    "label": "ENetMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetMode"
  },
  {
    "label": "EViewModeIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewModeIndex"
  },
  {
    "label": "UViewModeUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewModeUtils"
  },
  {
    "label": "FExposureSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExposureSettings"
  },
  {
    "label": "UEngineBaseTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngineBaseTypes"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Misc / CoreMisc . h \" # include \" Net / Core / Connection / NetEnums . h \" # include<atomic> # include \" EngineBaseTypes . generated . h \" class UActorComponent ; struct FSlateBrush ; struct FTickContext ;)",
    "insertText": "UENUM(BlueprintType, meta=(ScriptName=\"InputEventType\"))"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (IE_Pressed = 0,IE_Released = 1,IE_Repeat = 2,IE_DoubleClick = 3,IE_Axis = 4,IE_MAX = 5,} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TG_PrePhysics)",
    "insertText": "UMETA(DisplayName=\"Pre Physics\"), TG_StartPhysics UMETA(Hidden, DisplayName=\"Start Physics\"), TG_DuringPhysics UMETA(DisplayName=\"During Physics\"), TG_EndPhysics UMETA(Hidden, DisplayName=\"End Physics\"), TG_PostPhysics UMETA(DisplayName=\"Post Physics\"), TG_PostUpdateWork UMETA(DisplayName=\"Post Update Work\"), TG_LastDemotable UMETA(Hidden, DisplayName = \"Last Demotable\"), TG_NewlySpawned UMETA(Hidden, DisplayName=\"Newly Spawned\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FTickPrerequisite()",
    "kind": "Method",
    "detail": "Function (struct FTickFunction* PrerequisiteTickFunction ;)",
    "insertText": "FTickPrerequisite() : PrerequisiteTickFunction(nullptr)"
  },
  {
    "label": "FTickPrerequisite()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTickPrerequisite(UObject* TargetObject, struct FTickFunction& TargetTickFunction) : PrerequisiteObject(TargetObject) , PrerequisiteTickFunction(&TargetTickFunction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTickPrerequisite& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditDefaultsOnly, Category=\"Tick\", AdvancedDisplay)"
  },
  {
    "label": "FInternalData()",
    "kind": "Method",
    "detail": "Function (private : TArray<struct FTickPrerequisite> Prerequisites ; enum class ETickTaskState : uint8 { NotQueued,Pending,HasTask,HasCompletionEvent,} ; struct FInternalData {)",
    "insertText": "FInternalData()"
  },
  {
    "label": "FTickFunction()",
    "kind": "Method",
    "detail": "Function (bool bRegistered : 1 ; bool bWasInterval : 1 ; ETickTaskState TaskState ; TEnumAsByte<enum ETickingGroup> ActualStartTickGroup ; TEnumAsByte<enum ETickingGroup> ActualEndTickGroup ; std::atomic<uint32> TickVisitedGFrameCounter ; std::atomic<uint32> TickQueuedGFrameCounter ; void* TaskPointer ; FTickFunction* Next ; float RelativeTickCooldown ; float LastTickGameTimeSeconds ; class FTickTaskLevel* TickTaskLevel ; } ; TUniquePtr<FInternalData> InternalData ; public :)",
    "insertText": "FTickFunction()"
  },
  {
    "label": "RegisterTickFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTickFunction(class ULevel* Level)"
  },
  {
    "label": "UnRegisterTickFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterTickFunction()"
  },
  {
    "label": "IsTickFunctionRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickFunctionRegistered()"
  },
  {
    "label": "SetTickFunctionEnable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTickFunctionEnable(bool bInEnabled)"
  },
  {
    "label": "IsTickFunctionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickFunctionEnabled()"
  },
  {
    "label": "IsCompletionHandleValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompletionHandleValid()"
  },
  {
    "label": "GetCompletionHandle()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "GetCompletionHandle()"
  },
  {
    "label": "GetActualTickGroup()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<enum ETickingGroup>)",
    "insertText": "GetActualTickGroup()"
  },
  {
    "label": "GetActualEndTickGroup()",
    "kind": "Method",
    "detail": "Function (} TEnumAsByte<enum ETickingGroup>)",
    "insertText": "GetActualEndTickGroup()"
  },
  {
    "label": "AddPrerequisite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPrerequisite(UObject* TargetObject, struct FTickFunction& TargetTickFunction)"
  },
  {
    "label": "RemovePrerequisite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrerequisite(UObject* TargetObject, struct FTickFunction& TargetTickFunction)"
  },
  {
    "label": "SetPriorityIncludingPrerequisites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPriorityIncludingPrerequisites(bool bInHighPriority)"
  },
  {
    "label": "GetPrerequisites()",
    "kind": "Method",
    "detail": "Function (TArray<struct FTickPrerequisite>&)",
    "insertText": "GetPrerequisites()"
  },
  {
    "label": "ExecuteNestedTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteNestedTick(float DeltaTime, ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "GetTaskPointer()",
    "kind": "Method",
    "detail": "Function (private : void*)",
    "insertText": "GetTaskPointer(ETickTaskState RequiredState)"
  },
  {
    "label": "SetTaskPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTaskPointer(ETickTaskState NewState, void* InTaskPointer)"
  },
  {
    "label": "QueueTickFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTickFunction(class FTickTaskSequencer& TTS, const FTickContext& TickContext)"
  },
  {
    "label": "QueueTickFunctionParallel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTickFunctionParallel(const FTickContext& TickContext, TArray<FTickFunction*, TInlineAllocator<8> >& StackForCycleDetection)"
  },
  {
    "label": "CalculateDeltaTime()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "CalculateDeltaTime(float DeltaTime, const class UWorld* TickingWorld)"
  },
  {
    "label": "LogTickFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogTickFunction(ENamedThreads::Type CurrentThread, bool bLogPrerequisites, int32 Indent = 0)"
  },
  {
    "label": "ShowPrerequistes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPrerequistes(int32 Indent = 1)"
  },
  {
    "label": "ClearTaskInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTaskInformation()"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent) PURE_VIRTUAL(,)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage() PURE_VIRTUAL(, return TEXT(\"DiagnosticMessage() not implemented\");)"
  },
  {
    "label": "DiagnosticContext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DiagnosticContext(bool bDetailed)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class FTickTaskSequencer ; class FTickTaskManager ; class FTickTaskLevel ; FTickFunction&)",
    "insertText": "operator(const FTickFunction&)"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage()"
  },
  {
    "label": "ExecuteTickHelper()",
    "kind": "Method",
    "detail": "Function (template<ExecuteTickLambda> void)",
    "insertText": "ExecuteTickHelper(UActorComponent* Target, bool bTickInEditor, float DeltaTime, ELevelTick TickType, const ExecuteTickLambda& ExecuteTickFunc)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NotLagging,Lagging } ; } namespace ENetworkLagState { const TCHAR*)",
    "insertText": "ToString(ENetworkLagState::Type LagType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown lag type occurred.\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NoLevel,LoadMapFailure,InvalidURL,PackageMissing,PackageVersion,NoDownload,TravelFailure,CheatCommands,PendingNetGameCreateFailure,CloudSaveFailure,ServerTravelFailure,ClientTravelFailure,} ; } namespace ETravelFailure { const TCHAR*)",
    "insertText": "ToString(ETravelFailure::Type FailureType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown ETravelFailure error occurred.\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown EDemoPlayFailure error occurred.\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FURL()",
    "kind": "Method",
    "detail": "Function (FUrlConfig UrlConfig ; bool bDefaultsInitialized ;)",
    "insertText": "FURL(ENoInit)"
  },
  {
    "label": "FURL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FURL(const TCHAR* Filename=nullptr)"
  },
  {
    "label": "FURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FURL(FURL* Base, const TCHAR* TextURL, ETravelType Type)"
  },
  {
    "label": "StaticInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticInit()"
  },
  {
    "label": "StaticExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticExit()"
  },
  {
    "label": "FilterURLString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterURLString(FString& Str)"
  },
  {
    "label": "IsInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternal()"
  },
  {
    "label": "IsLocalInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalInternal()"
  },
  {
    "label": "HasOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOption(const TCHAR* Test)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetOption(const TCHAR* Match, const TCHAR* Default)"
  },
  {
    "label": "LoadURLConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadURLConfig(const TCHAR* Section, const FString& Filename=GGameIni)"
  },
  {
    "label": "SaveURLConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveURLConfig(const TCHAR* Section, const TCHAR* Item, const FString& Filename=GGameIni)"
  },
  {
    "label": "AddOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOption(const TCHAR* Str)"
  },
  {
    "label": "RemoveOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOption(const TCHAR* Key, const TCHAR* Section = nullptr, const FString& Filename = GGameIni)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(bool FullyQualified=0)"
  },
  {
    "label": "GetHostPortString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHostPortString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FURL& U)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FURL& Other)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (VMI_BrushWireframe = 0)",
    "insertText": "UMETA(DisplayName = \"Wireframe\"), VMI_Wireframe = 1 UMETA(DisplayName = \"CSG Wireframe\"), VMI_Unlit = 2 UMETA(DisplayName = \"Unlit\"), VMI_Lit = 3 UMETA(DisplayName = \"Lit\"), VMI_Lit_DetailLighting = 4 UMETA(DisplayName = \"Detail Lighting\"), VMI_LightingOnly = 5 UMETA(DisplayName = \"Lighting Only\"), VMI_LightComplexity = 6 UMETA(DisplayName = \"Light Complexity\"), VMI_ShaderComplexity = 8 UMETA(DisplayName = \"Shader Complexity\"), VMI_LightmapDensity = 9 UMETA(DisplayName = \"Lightmap Density\"), VMI_LitLightmapDensity = 10 UMETA(DisplayName = \"Lit Lightmap Density\"), VMI_ReflectionOverride = 11 UMETA(DisplayName = \"Reflections\"), VMI_VisualizeBuffer = 12 UMETA(DisplayName = \"Buffer Visualization\"), VMI_StationaryLightOverlap = 14 UMETA(DisplayName = \"Stationary Light Overlap\"), VMI_CollisionPawn = 15 UMETA(DisplayName = \"Player Collision\"), VMI_CollisionVisibility = 16 UMETA(DisplayName = \"Visibility Collision\"), VMI_LODColoration = 18 UMETA(DisplayName = \"Mesh LOD Coloration\"), VMI_QuadOverdraw = 19 UMETA(DisplayName = \"Quad Overdraw\"), VMI_PrimitiveDistanceAccuracy = 20 UMETA(DisplayName = \"Primitive Distance\"), VMI_MeshUVDensityAccuracy = 21 UMETA(DisplayName = \"Mesh UV Density\"), VMI_ShaderComplexityWithQuadOverdraw = 22 UMETA(DisplayName = \"Shader Complexity & Quads\"), VMI_HLODColoration = 23 UMETA(DisplayName = \"Hierarchical LOD Coloration\"), VMI_GroupLODColoration = 24 UMETA(DisplayName = \"Group LOD Coloration\"), VMI_MaterialTextureScaleAccuracy = 25 UMETA(DisplayName = \"Material Texture Scales\"), VMI_RequiredTextureResolution = 26 UMETA(DisplayName = \"Required Texture Resolution\"), VMI_PathTracing = 27 UMETA(DisplayName = \"Path Tracing\"), VMI_RayTracingDebug = 28 UMETA(DisplayName = \"Ray Tracing Debug\"), VMI_VisualizeNanite = 29 UMETA(DisplayName = \"Nanite Visualization\"), VMI_VirtualTexturePendingMips = 30 UMETA(DisplayName = \"Virtual Texture Pending Mips\"), VMI_VisualizeLumen = 31 UMETA(DisplayName = \"Lumen Visualization\"), VMI_VisualizeVirtualShadowMap = 32 UMETA(DisplayName = \"Virtual Shadow Map Visualization\"), VMI_VisualizeGPUSkinCache = 33 UMETA(DisplayName = \"GPU Skin Cache Visualization\"), VMI_VisualizeSubstrate = 34 UMETA(DisplayName = \"Substrate Visualization\"), VMI_VisualizeGroom = 35 UMETA(DisplayName = \"Groom Visualization\"), VMI_LWCComplexity = 36 UMETA(DisplayName = \"Material LWC Function Usage\"), VMI_Lit_Wireframe = 37 UMETA(DisplayName = \"Lit Wireframe\"), VMI_VisualizeActorColoration = 38 UMETA(DisplayName = \"Actor Coloration Visualization\"), VMI_Max UMETA(Hidden), VMI_Unknown = 255 UMETA(DisplayName = \"Unknown\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config = Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static ENGINE_API FText GetViewModeDisplayName(const EViewModeIndex ViewModeIndex)"
  },
  {
    "label": "GetViewModeDisplayIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetViewModeDisplayIcon(const EViewModeIndex ViewModeIndex)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FExposureSettings() : FixedEV100(1), bFixed(false)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "SetFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFromString(const TCHAR *In)"
  },
  {
    "label": "FExposureSettings()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FExposureSettings()"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Comma =)",
    "insertText": "Strchr(In, TEXT(','))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 BUFFER_SIZE = 1 2 8 ; TCHAR Buffer [ BUFFER_SIZE ] ;)",
    "insertText": "check((Comma-In)+1 < BUFFER_SIZE)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strncpy(Buffer, In, UE_PTRDIFF_TO_INT32((Comma-In)+1))"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (FixedEV100 =)",
    "insertText": "Atof(Buffer)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (bFixed = ! !)",
    "insertText": "Atoi(Comma+1)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, config=Engine)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  }
]