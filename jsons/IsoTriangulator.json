[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIntersectionSegmentTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionSegmentTool"
  },
  {
    "label": "FFaceMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceMesh"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FCellConnexion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellConnexion"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FCycleTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCycleTriangulator"
  },
  {
    "label": "FLoopCleaner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopCleaner"
  },
  {
    "label": "FParametricMesher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParametricMesher"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FPairOfDouble",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPairOfDouble"
  },
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "FIsoTriangulator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FIsoTriangulator(FGrid& InGrid, FFaceMesh& OutMesh, const FMeshingTolerances& InTolerance)"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Triangulate()"
  },
  {
    "label": "BuildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNodes()"
  },
  {
    "label": "BuildLoopSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLoopSegments()"
  },
  {
    "label": "BuildInnerSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInnerSegments()"
  },
  {
    "label": "GetThinZonesMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetThinZonesMesh()"
  },
  {
    "label": "GetThinZoneMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetThinZoneMesh(const TMap<int32, FLoopNode*>& IndexToNode, const FThinZone2D& ThinZone)"
  },
  {
    "label": "FillMeshNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMeshNodes()"
  },
  {
    "label": "BuildInnerSegmentsIntersectionTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInnerSegmentsIntersectionTool()"
  },
  {
    "label": "FindInnerGridCellSurroundingSmallLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInnerGridCellSurroundingSmallLoop()"
  },
  {
    "label": "ConnectCellLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectCellLoops()"
  },
  {
    "label": "FindCellContainingBoundaryNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindCellContainingBoundaryNodes(TArray<FCell>& Cells)"
  },
  {
    "label": "FindCandidateToConnectCellCornerToLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindCandidateToConnectCellCornerToLoops(FCell& Cell)"
  },
  {
    "label": "SelectSegmentsToLinkInnerToLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSegmentsToLinkInnerToLoop()"
  },
  {
    "label": "InitCellCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCellCorners(FCell& Cell)"
  },
  {
    "label": "TriangulateOverCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangulateOverCycle(const EGridSpace Space)"
  },
  {
    "label": "FindCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindCycle(FIsoSegment* StartSegment, bool bLeftSide, TArray<FIsoSegment*>& Cycle, TArray<bool>& CycleOrientation)"
  },
  {
    "label": "MeshCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshCycle(const TArray<FIsoSegment*>& Cycle, const TArray<bool>& CycleOrientation)"
  },
  {
    "label": "MeshLargeCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshLargeCycle(const TArray<FIsoSegment*>& Cycle, const TArray<bool>& CycleOrientation)"
  },
  {
    "label": "CanCycleBeMeshed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleBeMeshed(const TArray<FIsoSegment*>& Cycle, FIntersectionSegmentTool& CycleIntersectionTool)"
  },
  {
    "label": "TriangulateInnerNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangulateInnerNodes()"
  },
  {
    "label": "TryToConnectTwoLoopsWithIsocelesTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToConnectTwoLoopsWithIsocelesTriangle(FCell& Cell, const TArray<FLoopNode*>& SubLoopA, const TArray<FLoopNode*>& SubLoopB)"
  },
  {
    "label": "TryToConnectTwoSubLoopsWithTheMostIsoSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToConnectTwoSubLoopsWithTheMostIsoSegment(FCell& Cell, const TArray<FLoopNode*>& SubLoopA, const TArray<FLoopNode*>& SubLoopB)"
  },
  {
    "label": "TryToConnectVertexSubLoopWithTheMostIsoSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToConnectVertexSubLoopWithTheMostIsoSegment(FCell& Cell, const TArray<FLoopNode*>& SubLoop)"
  }
]