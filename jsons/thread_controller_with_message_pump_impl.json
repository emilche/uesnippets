[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MainThreadOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MainThreadOnly"
  },
  {
    "label": "DoWorkScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DoWorkScope"
  },
  {
    "label": "RunScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunScope"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "ResetFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFeatures()"
  },
  {
    "label": "CreateUnbound()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ThreadControllerWithMessagePumpImpl>)",
    "insertText": "CreateUnbound(\n      const SequenceManager::Settings& settings)"
  },
  {
    "label": "ThreadControllerWithMessagePumpImpl()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ThreadControllerWithMessagePumpImpl(\n      const SequenceManager::Settings& settings)"
  },
  {
    "label": "OnBeginWorkItemImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginWorkItemImpl(LazyNow& lazy_now)"
  },
  {
    "label": "OnEndWorkItemImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndWorkItemImpl(LazyNow& lazy_now)"
  },
  {
    "label": "DoWorkImpl()",
    "kind": "Method",
    "detail": "Function (WorkDetails)",
    "insertText": "DoWorkImpl(LazyNow* continuation_lazy_now)"
  },
  {
    "label": "GetAlternationInterval()",
    "kind": "Method",
    "detail": "Function (base::TimeDelta)",
    "insertText": "GetAlternationInterval()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (task_runner_)",
    "insertText": "GUARDED_BY(task_runner_lock_)"
  }
]