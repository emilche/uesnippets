[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLargeMemoryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLargeMemoryReader"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" Serialization / MemoryArchive . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" enum class ELargeMemoryReaderFlags : uint8 { None = 0 x0,TakeOwnership = 0 x1,Persistent = 0 x2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELargeMemoryReaderFlags)"
  },
  {
    "label": "FLargeMemoryReader()",
    "kind": "Method",
    "detail": "Function (class FLargeMemoryReader : public FMemoryArchive { public :)",
    "insertText": "FLargeMemoryReader(const uint8* InData, const int64 Num, ELargeMemoryReaderFlags InFlags = ELargeMemoryReaderFlags::None, const FName InArchiveName = NAME_None)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* OutData, int64 Num)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "FLargeMemoryReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLargeMemoryReader()"
  },
  {
    "label": "FLargeMemoryReader()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FLargeMemoryReader(const FLargeMemoryReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLargeMemoryReader&)",
    "insertText": "operator(const FLargeMemoryReader&)"
  }
]