[
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCFixupKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MCFixupKind"
  },
  {
    "label": "MCFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFixup"
  },
  {
    "label": "MaxTargetFixupKind()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCFIXUP_H # define LLVM_MC_MCFIXUP_H # include \" llvm / MC / MCExpr . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / SMLoc . h \" # include<cassert> namespace llvm { class MCExpr ; enum MCFixupKind { FK_Data_1 = 0,FK_Data_2,FK_Data_4,FK_Data_8,FK_PCRel_1,FK_PCRel_2,FK_PCRel_4,FK_PCRel_8,FK_GPRel_1,FK_GPRel_2,FK_GPRel_4,FK_GPRel_8,FK_SecRel_1,FK_SecRel_2,FK_SecRel_4,FK_SecRel_8,FirstTargetFixupKind = 1 2 8,)",
    "insertText": "MaxTargetFixupKind(1 << 8)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (class MCFixup { const MCExpr* Value ; uint32_t Offset ; unsigned Kind ; SMLoc Loc ; public : MCFixup)",
    "insertText": "create(uint32_t Offset, const MCExpr *Value, MCFixupKind Kind, SMLoc Loc = SMLoc())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(Kind) < MaxTargetFixupKind && \"Kind out of range!\")"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (MCFixup FI ; FI . Value = Value ; FI . Offset = Offset ; FI . Kind =)",
    "insertText": "unsigned(Kind)"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (FI . Loc = Loc ; return FI ; } MCFixupKind)",
    "insertText": "getKind()"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getOffset()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (Offset = Value ; } const MCExpr*)",
    "insertText": "getValue()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Invalid generic fixup size!\")"
  }
]