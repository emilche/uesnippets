[
  {
    "label": "FValidationRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationRHI"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHI . h \" # include \" RHIValidationCommon . h \" # include \" RHIValidationUtils . h \" # include \" DataDrivenShaderPlatformInfo . h \" # if ENABLE_RHI_VALIDATION bool GRHIValidateBufferSourceCopy ; # define)",
    "insertText": "RHI_VALIDATION_CHECK(InExpression, InMessage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UNLIKELY(!(InExpression)))"
  },
  {
    "label": "ReportValidationFailure()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ReportValidationFailure(InMessage)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0)"
  },
  {
    "label": "FValidationRHI()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FValidationRHI(FDynamicRHI* InRHI)"
  },
  {
    "label": "FValidationRHI()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FValidationRHI()"
  },
  {
    "label": "ValidateThreadGroupCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateThreadGroupCount(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK((ThreadGroupCountX <= (uint32)GRHIMaxDispatchThreadGroupsPerDimension.X), *FString::Printf(TEXT(\"ThreadGroupCountX is invalid: %u. Must be greater than 0 and less than %d\"), ThreadGroupCountX, GRHIMaxDispatchThreadGroupsPerDimension.X))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK((ThreadGroupCountY <= (uint32)GRHIMaxDispatchThreadGroupsPerDimension.Y), *FString::Printf(TEXT(\"ThreadGroupCountY is invalid: %u. Must be greater than 0 and less than %d\"), ThreadGroupCountY, GRHIMaxDispatchThreadGroupsPerDimension.Y))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK((ThreadGroupCountZ <= (uint32)GRHIMaxDispatchThreadGroupsPerDimension.Z), *FString::Printf(TEXT(\"ThreadGroupCountZ is invalid: %u. Must be greater than 0 and less than %d\"), ThreadGroupCountZ, GRHIMaxDispatchThreadGroupsPerDimension.Z))"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateIndirectArgsBuffer(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset, uint32 ArgumentSize, uint32 ArgumentsBoundarySize)"
  },
  {
    "label": "GetBufferDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBufferDesc()"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "RHI_VALIDATION_CHECK(EnumHasAnyFlags(ArgumentBuffer->GetUsage(), EBufferUsageFlags::VertexBuffer | EBufferUsageFlags::ByteAddressBuffer), *FString::Printf(TEXT(\"Indirect argument buffer must be a vertex or byte address buffer to be used as an indirect dispatch parameter. %s\"), *GetBufferDesc()))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(EnumHasAnyFlags(ArgumentBuffer->GetUsage(), EBufferUsageFlags::DrawIndirect), *FString::Printf(TEXT(\"Indirect dispatch parameter buffer was not flagged with BUF_DrawIndirect. %s\"), *GetBufferDesc()))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK((ArgumentOffset % 4) == 0, *FString::Printf(TEXT(\"Indirect argument offset must be a multiple of 4. %s\"), *GetBufferDesc()))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK((ArgumentOffset + ArgumentSize) <= ArgumentBuffer->GetSize(), *FString::Printf(TEXT(\"Indirect argument doesn't fit in the buffer. %s\"), *GetBufferDesc()))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(ArgumentOffset / ArgumentsBoundarySize == (ArgumentOffset + sizeof(FRHIDispatchIndirectParametersNoPadding) - 1) / ArgumentsBoundarySize, *FString::Printf(TEXT(\"Indirect arguments cannot cross %d byte boundary. %s\"), ArgumentsBoundarySize, *GetBufferDesc()))"
  },
  {
    "label": "ValidateDispatchIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ValidateDispatchIndirectArgsBuffer(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(ArgumentBuffer, ArgumentOffset, sizeof(FRHIDispatchIndirectParametersNoPadding), PLATFORM_DISPATCH_INDIRECT_ARGUMENT_BOUNDARY_SIZE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (RHIName = RHI ->)",
    "insertText": "GetName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (RHIName + =)",
    "insertText": "TEXT(\"_Validation\")"
  },
  {
    "label": "PostInit()",
    "kind": "Method",
    "detail": "Function (RenderThreadFrameID = 0 ; RHIThreadFrameID = 0 ; } void)",
    "insertText": "PostInit()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetNonValidationRHI()",
    "kind": "Method",
    "detail": "Function (} FDynamicRHI*)",
    "insertText": "GetNonValidationRHI()"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (} FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (} FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef State = RHI ->)",
    "insertText": "RHICreateDepthStencilState(Initializer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FExclusiveDepthStencil::Type DepthStencilMode = FExclusiveDepthStencil::DepthNop_StencilNop ;)",
    "insertText": "if(Initializer.DepthTest != CF_Always || Initializer.bEnableDepthWrite)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DepthStencilMode = Initializer . bEnableDepthWrite ? FExclusiveDepthStencil::DepthWrite : FExclusiveDepthStencil::DepthRead ; })",
    "insertText": "if(Initializer.bEnableFrontFaceStencil || Initializer.bEnableBackFaceStencil)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bBackFaceStencilWriteEnabled = false ;)",
    "insertText": "if(Initializer.bEnableBackFaceStencil)"
  },
  {
    "label": "bBackFaceStencilWriteEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bBackFaceStencilWriteEnabled(Initializer.BackFaceStencilFailStencilOp != SO_Keep || Initializer.BackFacePassStencilOp != SO_Keep || Initializer.BackFaceDepthFailStencilOp != SO_Keep)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Initializer.StencilReadMask != 0)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (DepthStencilMode =)",
    "insertText": "Type(DepthStencilMode | FExclusiveDepthStencil::StencilRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Initializer.StencilWriteMask != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bFrontFaceStencilWriteEnabled = Initializer . FrontFaceStencilFailStencilOp ! = SO_Keep | | Initializer . FrontFacePassStencilOp ! = SO_Keep | | Initializer . FrontFaceDepthFailStencilOp ! = SO_Keep ;)",
    "insertText": "if(bFrontFaceStencilWriteEnabled || bBackFaceStencilWriteEnabled)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (DepthStencilMode =)",
    "insertText": "Type(DepthStencilMode | FExclusiveDepthStencil::StencilWrite)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} } } State -> ActualDSMode = DepthStencilMode ; DepthStencilStates .)",
    "insertText": "FindOrAdd(State.GetReference())"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (} FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (} FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (} FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateMeshShader()",
    "kind": "Method",
    "detail": "Function (} FMeshShaderRHIRef)",
    "insertText": "RHICreateMeshShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateAmplificationShader()",
    "kind": "Method",
    "detail": "Function (} FAmplificationShaderRHIRef)",
    "insertText": "RHICreateAmplificationShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "FlushPendingLogs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushPendingLogs()"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (} FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary(EShaderPlatform Platform, FString const& FilePath, FString const& Name)"
  },
  {
    "label": "RHICreateGPUFence()",
    "kind": "Method",
    "detail": "Function (} FGPUFenceRHIRef)",
    "insertText": "RHICreateGPUFence(const FName &Name)"
  },
  {
    "label": "RHIWriteGPUFence_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIWriteGPUFence_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHIWriteGPUFence_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIWriteGPUFence_TopOfPipe(RHICmdList, FenceRHI)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIReleaseTransition(Transition)"
  },
  {
    "label": "RHICreateTransientResourceAllocator()",
    "kind": "Method",
    "detail": "Function (} IRHITransientResourceAllocator*)",
    "insertText": "RHICreateTransientResourceAllocator()"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockStagingBuffer(StagingBuffer)"
  },
  {
    "label": "LockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "UnlockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "UnlockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "UnlockStagingBuffer_RenderThread(RHICmdList, StagingBuffer)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIMapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIMapStagingSurface_RenderThread(RHICmdList, Texture, GPUIndex, Fence, OutData, OutWidth, OutHeight)"
  },
  {
    "label": "RHIUnmapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnmapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex)"
  },
  {
    "label": "RHIUnmapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnmapStagingSurface_RenderThread(RHICmdList, Texture, GPUIndex)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (} FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "ValidatePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePipeline(Initializer)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef PSO = RHI ->)",
    "insertText": "RHICreateGraphicsPipelineState(Initializer)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (PSO -> DSMode = Initializer . DepthStencilState -> ActualDSMode ; } return PSO ; } TRefCountPtr<FRHIComputePipelineState>)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer, FRHIPipelineBinaryLibrary* PipelineBinary)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (PSO -> DSMode = Initializer . DepthStencilState -> ActualDSMode ; } return PSO ; } TRefCountPtr<FRHIComputePipelineState>)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader, FRHIPipelineBinaryLibrary* PipelineBinary)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef UniformBuffer = RHI ->)",
    "insertText": "RHICreateUniformBuffer(Contents, Layout, Usage, Validation)"
  },
  {
    "label": "InitLifetimeTracking()",
    "kind": "Method",
    "detail": "Function (UniformBuffer ->)",
    "insertText": "InitLifetimeTracking(IsInRHIThread() ? RHIThreadFrameID : RenderThreadFrameID.load(std::memory_order_relaxed), Contents, Usage)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUpdateUniformBuffer(RHICmdList, UniformBufferRHI, Contents)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "EnqueueLambda([this, UniformBufferRHI] (FRHICommandListBase& RHICmdList) { UniformBufferRHI->UpdateAllocation(RHIThreadFrameID); })"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(GRHIGlobals.ReservedResources.Supported, TEXT(\"Reserved buffers are not supported by current RHI\"))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(!EnumHasAnyFlags(Desc.Usage, BUF_AnyDynamic), TEXT(\"Reserved buffers must not be dynamic\"))"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(Desc.Stride <= GRHIGlobals.ReservedResources.TileSizeInBytes, TEXT(\"Reserved buffer stride must not be greater than reserved resource tile size\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CreateInfo.ResourceArray && RHICmdList.IsInsideRenderPass())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Msg =)",
    "insertText": "Printf(TEXT(\"Creating buffers with initial data during a render pass is not supported, buffer name: \\\"%s\\\"\"), CreateInfo.DebugName)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(false, *Msg)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef Buffer = RHI ->)",
    "insertText": "RHICreateBuffer(RHICmdList, Desc, ResourceState, CreateInfo)"
  },
  {
    "label": "InitBarrierTracking()",
    "kind": "Method",
    "detail": "Function (Buffer ->)",
    "insertText": "InitBarrierTracking(ResourceState, CreateInfo.DebugName)"
  },
  {
    "label": "RHILockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBufferMGPU(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBuffer(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockBuffer(RHICmdList, Buffer)"
  },
  {
    "label": "RHIUnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockBufferMGPU(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex)"
  },
  {
    "label": "RHIUnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockBufferMGPU(RHICmdList, Buffer, GPUIndex)"
  },
  {
    "label": "RHICreateTextureReference()",
    "kind": "Method",
    "detail": "Function (} FTextureReferenceRHIRef)",
    "insertText": "RHICreateTextureReference(FRHICommandListBase& RHICmdList, FRHITexture* InReferencedTexture)"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTextureReference(FRHICommandListBase& RHICmdList, FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUpdateTextureReference(RHICmdList, TextureRef, NewTexture)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateResourceCollection()",
    "kind": "Method",
    "detail": "Function (} FRHIResourceCollectionRef)",
    "insertText": "RHICreateResourceCollection(FRHICommandListBase& RHICmdList, TConstArrayView<FRHIResourceCollectionMember> InMembers)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (} FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIGetTextureMemoryStats(OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData, int32 SizeX, int32 SizeY, int32 Pitch, int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (CreateDesc .)",
    "insertText": "CheckValidity()"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef Texture = RHI ->)",
    "insertText": "RHICreateTexture(RHICmdList, CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef Texture = RHI ->)",
    "insertText": "RHIAsyncCreateTexture2D(SizeX, SizeY, Format, NumMips, Flags, InResourceState, InitialMipData, NumInitialMips, DebugName, OutCompletionEvent)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIReplaceResources(RHICmdList, MoveTemp(ReplaceInfos))"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState = ERHIAccess::SRVMask ; FTextureRHIRef NewTexture2D = RHI ->)",
    "insertText": "RHIAsyncReallocateTexture2D(Texture2D, NewMipCount, NewSizeX, NewSizeY, RequestStatus)"
  },
  {
    "label": "InitBarrierTracking()",
    "kind": "Method",
    "detail": "Function (NewTexture2D ->)",
    "insertText": "InitBarrierTracking(NewMipCount, 1, NewTexture2D->GetFormat(), NewTexture2D->GetFlags(), ResourceState, NewTexture2D->GetTrackerResource()->GetDebugName())"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockTexture2D(Texture, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockTexture2DArray(Texture, TextureIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUpdateTexture2D(RHICmdList, Texture, MipIndex, UpdateRegion, SourcePitch, SourceData)"
  },
  {
    "label": "RHIUpdateFromBufferTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateFromBufferTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIUpdateFromBufferTexture2D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUpdateFromBufferTexture2D(RHICmdList, Texture, MipIndex, UpdateRegion, SourcePitch, Buffer, BufferOffset)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUpdateTexture3D(RHICmdList, Texture, MipIndex, UpdateRegion, SourceRowPitch, SourceDepthPitch, SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockTextureCubeFace(Texture, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHIUnorderedAccessView* UnorderedAccessViewRHI, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIReadSurfaceData(Texture, Rect, OutData, InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIMapStagingSurface(Texture, Fence, OutData, OutWidth, OutHeight, GPUIndex)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnmapStagingSurface(Texture, GPUIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, ECubeFace CubeFace, int32 ArrayIndex, int32 MipIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIReadSurfaceFloatData(Texture, Rect, OutData, CubeFace, ArrayIndex, MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIRead3DSurfaceFloatData(Texture, Rect, ZMinMax, OutData)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIRead3DSurfaceFloatData(Texture, Rect, ZMinMax, OutData, InFlags)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (} FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIBeginRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIBeginRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIBeginRenderQueryBatch_TopOfPipe(RHICmdList, QueryType)"
  },
  {
    "label": "RHIEndRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIEndRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIEndRenderQueryBatch_TopOfPipe(RHICmdList, QueryType)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(RHICmdList, RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(RHICmdList, RenderQuery)"
  },
  {
    "label": "RHIGetViewportNextPresentGPUIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetViewportNextPresentGPUIndex(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef Texture = RHI ->)",
    "insertText": "RHIGetViewportBackBuffer(Viewport)"
  },
  {
    "label": "InitBarrierTracking()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState = ERHIAccess::Present ; Texture ->)",
    "insertText": "InitBarrierTracking(Texture->GetNumMips(), Texture->GetSizeXYZ().Z, Texture->GetFormat(), Texture->GetFlags(), ResourceState, TEXT(\"ViewportTexture\"))"
  },
  {
    "label": "RHIGetViewportBackBufferUAV()",
    "kind": "Method",
    "detail": "Function (} return Texture ; } FUnorderedAccessViewRHIRef)",
    "insertText": "RHIGetViewportBackBufferUAV(FRHIViewport* ViewportRHI)"
  },
  {
    "label": "RHIGetHTilePlatformConfig()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetHTilePlatformConfig(uint32 DepthWidth, uint32 DepthHeight)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIAliasTextureResources(FTextureRHIRef& DestTexture, FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIAliasTextureResources(DestTexture, SourceTexture)"
  },
  {
    "label": "RHICreateAliasedTexture()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHICreateAliasedTexture(FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIGetDisplaysInformation(FDisplayInformationArray& OutDisplayInformation)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIGetDisplaysInformation(OutDisplayInformation)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(Viewport)"
  },
  {
    "label": "RHIAcquireThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIAcquireThreadOwnership()"
  },
  {
    "label": "RHIReleaseThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReleaseThreadOwnership()"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (} FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIResizeViewport(Viewport, SizeX, SizeY, bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIResizeViewport(Viewport, SizeX, SizeY, bIsFullscreen, PreferredPixelFormat)"
  },
  {
    "label": "RHIPreferredPixelFormatHint()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "RHIPreferredPixelFormatHint(EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHICheckViewportHDRStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICheckViewportHDRStatus(FRHIViewport* Viewport)"
  },
  {
    "label": "RHICheckViewportHDRStatus()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHICheckViewportHDRStatus(Viewport)"
  },
  {
    "label": "RHIHandleDisplayChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIHandleDisplayChange()"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHITick(DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIBeginSuspendRendering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginSuspendRendering()"
  },
  {
    "label": "RHISuspendRendering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISuspendRendering()"
  },
  {
    "label": "RHIResumeRendering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIResumeRendering()"
  },
  {
    "label": "RHIIsRenderingSuspended()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIIsRenderingSuspended()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIGetSupportedResolution(Width, Height)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIVirtualTextureSetFirstMipInMemory(FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIVirtualTextureSetFirstMipInMemory(RHICmdList, Texture, FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIVirtualTextureSetFirstMipVisible(FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIVirtualTextureSetFirstMipVisible(RHICmdList, Texture, FirstMip)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativePhysicalDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativePhysicalDevice()"
  },
  {
    "label": "RHIGetNativeGraphicsQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeGraphicsQueue()"
  },
  {
    "label": "RHIGetNativeComputeQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeComputeQueue()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeCommandBuffer()"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (} IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIGetUploadContext()",
    "kind": "Method",
    "detail": "Function (IRHIUploadContext*)",
    "insertText": "RHIGetUploadContext()"
  },
  {
    "label": "RHIFinalizeContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIFinalizeContext(FRHIFinalizeContextArgs&& Args, TRHIPipelineArray<IRHIPlatformCommandList*>& Output)"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "RHIProcessDeleteQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIProcessDeleteQueue()"
  },
  {
    "label": "RHIGetMinimumAlignmentForBufferBackedSRV()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "RHIGetMinimumAlignmentForBufferBackedSRV(EPixelFormat Format)"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState = ERHIAccess::SRVMask ; FTextureRHIRef NewTexture2D = RHI ->)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(RHICmdList, Texture2D, NewMipCount, NewSizeX, NewSizeY, RequestStatus)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockBuffer_BottomOfPipe(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "RHI_VALIDATION_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_VALIDATION_CHECK(LockMode != RLM_WriteOnly_NoOverwrite || GRHISupportsMapWriteNoOverwrite, TEXT(\"Using RLM_WriteOnly_NoOverwrite when the RHI doesn't support it.\"))"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockBuffer_BottomOfPipe(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "UnlockBuffer_BottomOfPipe(RHICmdList, Buffer)"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "UnlockTexture2D_RenderThread(RHICmdList, Texture, MipIndex, bLockWithinMiptail, bNeedsDefaultRHIFlush)"
  },
  {
    "label": "LockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "UnlockTexture2DArray_RenderThread(RHICmdList, Texture, ArrayIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIBeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} FUpdateTexture3DData)",
    "insertText": "RHIBeginUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUpdateTexture3D(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIEndUpdateTexture3D(RHICmdList, UpdateData)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndMultiUpdateTexture3D(FRHICommandListBase& RHICmdList, TArray<FUpdateTexture3DData>& UpdateDataArray)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIEndMultiUpdateTexture3D(RHICmdList, UpdateDataArray)"
  },
  {
    "label": "RHICreateShaderLibrary_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary_RenderThread(class FRHICommandListImmediate& RHICmdList, EShaderPlatform Platform, FString FilePath, FString Name)"
  },
  {
    "label": "RHILockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(RHICmdList, Texture, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, ECubeFace CubeFace, int32 ArrayIndex, int32 MipIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (RHI ->)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(RHICmdList, Texture, Rect, OutData, CubeFace, ArrayIndex, MipIndex)"
  },
  {
    "label": "RHIWaitForFlip()",
    "kind": "Method",
    "detail": "Function (} FRHIFlipDetails)",
    "insertText": "RHIWaitForFlip(double TimeoutInSeconds)"
  },
  {
    "label": "RHISignalFlipEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISignalFlipEvent()"
  },
  {
    "label": "RHIGetPlatformTextureMaxSampleCount()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "RHIGetPlatformTextureMaxSampleCount()"
  },
  {
    "label": "RHICreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (} ; # if RHI_RAYTRACING FRayTracingGeometryRHIRef)",
    "insertText": "RHICreateRayTracingGeometry(FRHICommandListBase& RHICmdList, const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryRHIRef Result = RHI ->)",
    "insertText": "RHICreateRayTracingGeometry(RHICmdList, Initializer)"
  },
  {
    "label": "InitBarrierTracking()",
    "kind": "Method",
    "detail": "Function (Result ->)",
    "insertText": "InitBarrierTracking(ERHIAccess::BVHWrite, *Initializer.DebugName.ToString())"
  },
  {
    "label": "RHICreateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (FName DebugName = Initializer . DebugName ; FRayTracingSceneRHIRef Result = RHI ->)",
    "insertText": "RHICreateRayTracingScene(MoveTemp(Initializer))"
  },
  {
    "label": "InitBarrierTracking()",
    "kind": "Method",
    "detail": "Function (Result ->)",
    "insertText": "InitBarrierTracking(ERHIAccess::BVHWrite, *DebugName.ToString())"
  },
  {
    "label": "RHICreateRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (} FRayTracingPipelineStateRHIRef)",
    "insertText": "RHICreateRayTracingPipelineState(const FRayTracingPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingSceneSize()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingSceneSize(const FRayTracingSceneInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingGeometrySize()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingGeometrySize(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICreateShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} FShaderBindingTableRHIRef)",
    "insertText": "RHICreateShaderBindingTable(FRHICommandListBase& RHICmdList, const FRayTracingShaderBindingTableInitializer& Initializer)"
  },
  {
    "label": "RHICreateShaderBundle()",
    "kind": "Method",
    "detail": "Function (} # endif FShaderBundleRHIRef)",
    "insertText": "RHICreateShaderBundle(const FShaderBundleCreateInfo& CreateInfo)"
  },
  {
    "label": "ReportValidationFailure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportValidationFailure(const TCHAR* InMessage)"
  },
  {
    "label": "ValidatePipeline()",
    "kind": "Method",
    "detail": "Function (FDynamicRHI* RHI ; TMap<FRHIDepthStencilState*,FDepthStencilStateInitializerRHI> DepthStencilStates ; std::atomic_uint64_t RenderThreadFrameID ; uint64 RHIThreadFrameID ; private : FString RHIName ; TSet<uint32> SeenFailureHashes ; FCriticalSection SeenFailureHashesMutex ; void)",
    "insertText": "ValidatePipeline(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "LockBufferValidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockBufferValidate(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, EResourceLockMode LockMode)"
  }
]