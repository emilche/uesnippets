[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FTestWorldWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestWorldWrapper"
  },
  {
    "label": "FTestConsoleVariable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestConsoleVariable"
  },
  {
    "label": "FScopedTestEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedTestEnvironment"
  },
  {
    "label": "WindowScreenshotParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WindowScreenshotParameters"
  },
  {
    "label": "FWaitForInteractiveFrameRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForInteractiveFrameRate"
  },
  {
    "label": "FWaitForNextEngineFrameCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForNextEngineFrameCommand"
  },
  {
    "label": "FWaitForEngineFramesCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForEngineFramesCommand"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / AutomationTest . h \" # include \" Engine / GameViewportClient . h \" # include \" Engine / World . h \" class AActor ; class SWindow ; class SWidget ; # if WITH_AUTOMATION_TESTS)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEditorAutomationTests, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEngineAutomationTests, Log, All)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnEditorAutomationMapLoad, const FString&, bool, FString*)"
  },
  {
    "label": "FTestWorldWrapper()",
    "kind": "Method",
    "detail": "Function (# endif struct FTestWorldWrapper { ~)",
    "insertText": "FTestWorldWrapper()"
  },
  {
    "label": "GetTestWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetTestWorld()"
  },
  {
    "label": "DestroyTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyTestWorld(bool bForceGarbageCollect)"
  },
  {
    "label": "BeginPlayInTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginPlayInTestWorld()"
  },
  {
    "label": "TickTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TickTestWorld(float DeltaTime = 0.01f)"
  },
  {
    "label": "EndPlayInTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndPlayInTestWorld()"
  },
  {
    "label": "ReportFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFailure(const TCHAR* ErrorMessage)"
  },
  {
    "label": "ClearFailureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFailureState()"
  },
  {
    "label": "HasFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFailed()"
  },
  {
    "label": "AppendErrorMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendErrorMessages(TArray<FString>& OutErrorMessages)"
  },
  {
    "label": "ForwardErrorMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardErrorMessages(FAutomationTestBase* AutomationTest)"
  },
  {
    "label": "FTestConsoleVariable()",
    "kind": "Method",
    "detail": "Function (protected : UWorld* TestWorld = nullptr ; uint64 CachedFrameCounter = 0 ; TArray<FString> FailureErrors ; } ; struct FTestConsoleVariable {)",
    "insertText": "FTestConsoleVariable(const FString& InConsoleVariableName)"
  },
  {
    "label": "FTestConsoleVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestConsoleVariable(FTestConsoleVariable&& Other)"
  },
  {
    "label": "FTestConsoleVariable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTestConsoleVariable()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FString& Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Get()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "FScopedTestEnvironment()",
    "kind": "Method",
    "detail": "Function (private : bool bModified ; FString ConsoleVariableName ; FString OriginalValue ; } ; struct FScopedTestEnvironment { ~)",
    "insertText": "FScopedTestEnvironment()"
  },
  {
    "label": "SetConsoleVariableValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariableValue(const FString& ConsoleVariableName, const FString& Value)"
  },
  {
    "label": "TryGetConsoleVariableValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetConsoleVariableValue(const FString& ConsoleVariableName, FString* OutValue)"
  },
  {
    "label": "FScopedTestEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedTestEnvironment(FScopedTestEnvironment&&)"
  },
  {
    "label": "FScopedTestEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedTestEnvironment(const FScopedTestEnvironment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedTestEnvironment&)",
    "insertText": "operator(FScopedTestEnvironment&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedTestEnvironment&)",
    "insertText": "operator(const FScopedTestEnvironment&)"
  },
  {
    "label": "GetRenderDetailsString()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FTestConsoleVariable> Variables ; TWeakPtr<struct FScopedTestEnvironment> EnvironmentInstance ; } ; namespace AutomationCommon { # if WITH_AUTOMATION_TESTS FString)",
    "insertText": "GetRenderDetailsString()"
  },
  {
    "label": "GetScreenshotPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScreenshotPath(const FString& TestName)"
  },
  {
    "label": "GetLocalPathForScreenshot()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalPathForScreenshot(const FString& InScreenshotName)"
  },
  {
    "label": "BuildScreenshotData()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotData)",
    "insertText": "BuildScreenshotData(const FString& MapOrContext, const FString& TestName, const FString& ScreenShotName, int32 Width, int32 Height)"
  },
  {
    "label": "OnEditorAutomationMapLoadDelegate()",
    "kind": "Method",
    "detail": "Function (FOnEditorAutomationMapLoad OnEditorAutomationMapLoad ; FOnEditorAutomationMapLoad&)",
    "insertText": "OnEditorAutomationMapLoadDelegate()"
  },
  {
    "label": "FindWidgetByTag()",
    "kind": "Method",
    "detail": "Function (SWidget*)",
    "insertText": "FindWidgetByTag(const FName Tag)"
  },
  {
    "label": "GetAnyGameWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetAnyGameWorld()"
  },
  {
    "label": "GetAnyGameViewportClient()",
    "kind": "Method",
    "detail": "Function (# endif UGameViewportClient*)",
    "insertText": "GetAnyGameViewportClient()"
  },
  {
    "label": "GetWorldContext()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldContext(UWorld* InWorld)"
  },
  {
    "label": "AutomationOpenMap()",
    "kind": "Method",
    "detail": "Function (} # if WITH_AUTOMATION_TESTS struct WindowScreenshotParameters { FString ScreenshotName ; TSharedPtr<SWindow> CurrentWindow ; } ; bool)",
    "insertText": "AutomationOpenMap(const FString& MapName, bool bForceReload = false)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FWaitLatentCommand, float, Duration)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FEditorAutomationLogCommand, FString, LogText)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FTakeActiveEditorScreenshotCommand, FString, ScreenshotName)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FTakeEditorScreenshotCommand, WindowScreenshotParameters, ScreenshotParameters)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FLoadGameMapCommand, FString, MapName)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND(FExitGameCommand)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND(FRequestExitCommand)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND(FWaitForMapToLoadCommand)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FWaitForSpecifiedMapToLoadCommand, FString, MapName)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FExecStringLatentCommand, FString, ExecCommand)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FEngineWaitLatentCommand, float, Duration)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FStreamAllResourcesLatentCommand, float, Duration)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND_ONE_PARAMETER(FExecWorldStringLatentCommand, FString, ExecCommand)"
  },
  {
    "label": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_ENGINE_LATENT_AUTOMATION_COMMAND(FWaitForShadersToFinishCompilingInGame)"
  },
  {
    "label": "FWaitForInteractiveFrameRate()",
    "kind": "Method",
    "detail": "Function (class FWaitForInteractiveFrameRate : public IAutomationLatentCommand { public :)",
    "insertText": "FWaitForInteractiveFrameRate(float InDesiredFrameRate = 0, float InDuration = 0, float InMaxWaitTime = 0)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update()"
  },
  {
    "label": "AddTickRateSample()",
    "kind": "Method",
    "detail": "Function (public : float DesiredFrameRate ; float Duration ; float MaxWaitTime ; private : void)",
    "insertText": "AddTickRateSample(const double Value)"
  },
  {
    "label": "FWaitForEngineFramesCommand()",
    "kind": "Method",
    "detail": "Function (private : uint64 LastFrame = 0 ; } ; class FWaitForEngineFramesCommand : public IAutomationLatentCommand { public :)",
    "insertText": "FWaitForEngineFramesCommand(int32 InFramesToWait = 1)"
  },
  {
    "label": "RequestImageComparison()",
    "kind": "Method",
    "detail": "Function (private : int32 FrameCounter = 0 ; int32 FramesToWait = 1 ; } ; void)",
    "insertText": "RequestImageComparison(const FString& InImageName, int32 InWidth, int32 InHeight, const TArray<FColor>& InImageData, EAutomationComparisonToleranceLevel InTolerance = EAutomationComparisonToleranceLevel::Low, const FString& InContext = TEXT(\"\"), const FString& InNotes = TEXT(\"\"))"
  }
]