[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTestWorldWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestWorldWrapper"
  },
  {
    "label": "FTestConsoleVariable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestConsoleVariable"
  },
  {
    "label": "FScopedTestEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedTestEnvironment"
  },
  {
    "label": "FScopedTestEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedTestEnvironment"
  },
  {
    "label": "WindowScreenshotParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WindowScreenshotParameters"
  },
  {
    "label": "FWaitForInteractiveFrameRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForInteractiveFrameRate"
  },
  {
    "label": "FWaitForNextEngineFrameCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForNextEngineFrameCommand"
  },
  {
    "label": "FWaitForEngineFramesCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitForEngineFramesCommand"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEditorAutomationTests, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEngineAutomationTests, Log, All)"
  },
  {
    "label": "CreateTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTestWorld(EWorldType::Type WorldType)"
  },
  {
    "label": "DestroyTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyTestWorld(bool bForceGarbageCollect)"
  },
  {
    "label": "BeginPlayInTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginPlayInTestWorld()"
  },
  {
    "label": "TickTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TickTestWorld(float DeltaTime = 0.01f)"
  },
  {
    "label": "EndPlayInTestWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndPlayInTestWorld()"
  },
  {
    "label": "ReportFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFailure(const TCHAR* ErrorMessage)"
  },
  {
    "label": "ClearFailureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFailureState()"
  },
  {
    "label": "FTestConsoleVariable()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FTestConsoleVariable(const FString& InConsoleVariableName)"
  },
  {
    "label": "FTestConsoleVariable()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FTestConsoleVariable(FTestConsoleVariable&& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FString& Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Get()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FScopedTestEnvironment>)",
    "insertText": "Get()"
  },
  {
    "label": "SetConsoleVariableValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleVariableValue(const FString& ConsoleVariableName, const FString& Value)"
  },
  {
    "label": "TryGetConsoleVariableValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetConsoleVariableValue(const FString& ConsoleVariableName, FString* OutValue)"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "GetRenderDetailsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRenderDetailsString()"
  },
  {
    "label": "GetScreenshotPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScreenshotPath(const FString& TestName)"
  },
  {
    "label": "GetLocalPathForScreenshot()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalPathForScreenshot(const FString& InScreenshotName)"
  },
  {
    "label": "BuildScreenshotData()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotData)",
    "insertText": "BuildScreenshotData(const FString& MapOrContext, const FString& TestName, const FString& ScreenShotName, int32 Width, int32 Height)"
  },
  {
    "label": "CaptureFrameTrace()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "CaptureFrameTrace(const FString& MapOrContext, const FString& TestName)"
  },
  {
    "label": "GetWorldContext()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldContext(UWorld* InWorld)"
  },
  {
    "label": "AutomationOpenMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutomationOpenMap(const FString& MapName, bool bForceReload = false)"
  },
  {
    "label": "FWaitForInteractiveFrameRate()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FWaitForInteractiveFrameRate(float InDesiredFrameRate = 0, float InDuration = 0, float InMaxWaitTime = 0)"
  },
  {
    "label": "AddTickRateSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTickRateSample(const double Value)"
  },
  {
    "label": "FWaitForEngineFramesCommand()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FWaitForEngineFramesCommand(int32 InFramesToWait = 1)"
  }
]