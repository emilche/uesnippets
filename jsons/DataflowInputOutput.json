[
  {
    "label": "FDataflowOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowOutput"
  },
  {
    "label": "FInputParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputParameters"
  },
  {
    "label": "FArrayInputParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArrayInputParameters"
  },
  {
    "label": "FDataflowInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowInput"
  },
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FDataflowArrayInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowArrayInput"
  },
  {
    "label": "FOutputParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputParameters"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FInputParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Dataflow / DataflowNodeParameters . h \" # include \" Dataflow / DataflowConnection . h \" # include \" Templates / Function . h \" # include \" Async / Async . h \" # include \" GenericPlatform / GenericPlatformCriticalSection . h \" # include \" DataflowInputOutput . generated . h \" struct FDataflowOutput ; namespace UE::Dataflow { struct FInputParameters : public FConnectionParameters {)",
    "insertText": "FInputParameters(FName InType = NAME_None, FName InName = NAME_None, FDataflowNode* InOwner = nullptr, const FProperty* InProperty = nullptr, uint32 InOffset = INDEX_NONE, FGuid InGuid = FGuid::NewGuid()) : FConnectionParameters(InType, InName, InOwner, InProperty, InOffset, InGuid)"
  },
  {
    "label": "FArrayInputParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct FArrayInputParameters : public FInputParameters {)",
    "insertText": "FArrayInputParameters() : FInputParameters()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} const FArrayProperty* ArrayProperty = nullptr ; uint32 InnerOffset = INDEX_NONE ; } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FixAndPropagateType()",
    "kind": "Method",
    "detail": "Function (struct FDataflowConnection ; FDataflowOutput* Connection = nullptr ; protected : struct FDataflowOutput ; void)",
    "insertText": "FixAndPropagateType(FName InType)"
  },
  {
    "label": "FDataflowInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowInput(const UE::Dataflow::FInputParameters& Param = {})"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddConnection(FDataflowConnection* InOutput)"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConnection(FDataflowConnection* InOutput)"
  },
  {
    "label": "GetConnection()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput*)",
    "insertText": "GetConnection()"
  },
  {
    "label": "GetConnectedOutputs()",
    "kind": "Method",
    "detail": "Function (const TArray<const FDataflowOutput*>)",
    "insertText": "GetConnectedOutputs()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<class T> const T&)",
    "insertText": "GetValue(UE::Dataflow::FContext& Context, const T& Default)"
  },
  {
    "label": "GetValueFromAnyType()",
    "kind": "Method",
    "detail": "Function (template<TAnyType> TAnyType::FStorageType)",
    "insertText": "GetValueFromAnyType(UE::Dataflow::FContext& Context, const typename TAnyType::FStorageType& Default)"
  },
  {
    "label": "PullValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullValue(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "GetValueParallel()",
    "kind": "Method",
    "detail": "Function (template<class T> TFuture<const T&>)",
    "insertText": "GetValueParallel(UE::Dataflow::FContext& Context, const T& Default)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(const UE::Dataflow::FTimestamp& ModifiedTimestamp = UE::Dataflow::FTimestamp::Current())"
  },
  {
    "label": "FDataflowArrayInput()",
    "kind": "Method",
    "detail": "Function (uint32 ElementOffset ; const FArrayProperty* ArrayProperty = nullptr ; public :)",
    "insertText": "FDataflowArrayInput(int32 InIndex = INDEX_NONE, const UE::Dataflow::FArrayInputParameters& Param = {})"
  },
  {
    "label": "RealAddress()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RealAddress()"
  },
  {
    "label": "GetContainerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetContainerIndex()"
  },
  {
    "label": "FDataflowOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowOutput(const UE::Dataflow::FOutputParameters& Param = {})"
  },
  {
    "label": "FDataflowOutput()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FDataflowOutput()"
  },
  {
    "label": "FDataflowOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowOutput(const FDataflowOutput&)"
  },
  {
    "label": "FDataflowOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataflowOutput(FDataflowOutput&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput&)",
    "insertText": "operator(const FDataflowOutput&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput&)",
    "insertText": "operator(FDataflowOutput&&)"
  },
  {
    "label": "GetConnections()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS TArray<FDataflowInput*>&)",
    "insertText": "GetConnections()"
  },
  {
    "label": "HasAnyConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyConnections()"
  },
  {
    "label": "GetConnectedInputs()",
    "kind": "Method",
    "detail": "Function (} TArray<FDataflowInput*>)",
    "insertText": "GetConnectedInputs()"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConnection(FDataflowConnection* InInput)"
  },
  {
    "label": "SetPassthroughInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPassthroughInput(UE::Dataflow::FConnectionKey(InPassthroughOffset, INDEX_NONE, INDEX_NONE))"
  },
  {
    "label": "SetPassthroughInput()",
    "kind": "Method",
    "detail": "Function (} FDataflowOutput&)",
    "insertText": "SetPassthroughInput(const UE::Dataflow::FConnectionReference& Reference)"
  },
  {
    "label": "SetPassthroughInput()",
    "kind": "Method",
    "detail": "Function (FDataflowOutput&)",
    "insertText": "SetPassthroughInput(const UE::Dataflow::FConnectionKey& Key)"
  },
  {
    "label": "GetPassthroughInput()",
    "kind": "Method",
    "detail": "Function (const FDataflowInput*)",
    "insertText": "GetPassthroughInput()"
  },
  {
    "label": "GetPassthroughRealAddress()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetPassthroughRealAddress()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<class T> void)",
    "insertText": "SetValue(T&& InVal, UE::Dataflow::FContext& Context)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetData(CacheKey(), Property, Forward<T>(InVal), GetOwningNodeGuid(), GetOwningNodeValueHash(), GetOwningNodeTimestamp())"
  },
  {
    "label": "SetValueFromAnyType()",
    "kind": "Method",
    "detail": "Function (} } template<TAnyType> void)",
    "insertText": "SetValueFromAnyType(const typename TAnyType::FStorageType& InVal, UE::Dataflow::FContext& Context)"
  },
  {
    "label": "VisitPolicyByType()",
    "kind": "Method",
    "detail": "Function (TAnyType::)",
    "insertText": "VisitPolicyByType(GetType(), [this, &Context, &InVal](auto SingleTypePolicy) { using FSingleType = typename decltype(SingleTypePolicy)::FType; FSingleType ValueToSet{}; FDataflowConverter<typename TAnyType::FStorageType>::To(InVal, ValueToSet); Context.SetData(CacheKey(), GetProperty(), Forward<FSingleType>(ValueToSet), GetOwningNodeGuid(), GetOwningNodeValueHash(), GetOwningNodeTimestamp()); })"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetData(CacheKey(), Property, Default, GetOwningNodeGuid(), GetOwningNodeValueHash(), GetOwningNodeTimestamp())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Context.HasData(CacheKey()))"
  },
  {
    "label": "HasCachedValue()",
    "kind": "Method",
    "detail": "Function (} return Default ; } bool)",
    "insertText": "HasCachedValue(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "ForwardInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForwardInput(const UE::Dataflow::FConnectionReference& InputReference, UE::Dataflow::FContext& Context)"
  },
  {
    "label": "ForwardInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardInput(const FDataflowInput* Input, UE::Dataflow::FContext& Context)"
  },
  {
    "label": "EvaluateImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateImpl(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "EvaluateParallel()",
    "kind": "Method",
    "detail": "Function (TFuture<bool>)",
    "insertText": "EvaluateParallel(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetData(ConnectionOut->CacheKey(), Property, Default, GetOwningNodeGuid(), GetOwningNodeValueHash(), GetOwningNodeTimestamp())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Context.HasData(ConnectionOut->CacheKey()))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const T& data = Context .)",
    "insertText": "GetData(ConnectionOut->CacheKey(), Property, Default)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TAnyType::FStorageType ReturnValue = Default ;)",
    "insertText": "if(const FDataflowOutput* ConnectionOut = GetConnection())"
  },
  {
    "label": "VisitPolicyByType()",
    "kind": "Method",
    "detail": "Function (TAnyType::)",
    "insertText": "VisitPolicyByType(GetType(), [this, &Context, &CacheEntry, &ReturnValue](auto SingleTypePolicy) { using FSingleType = typename decltype(SingleTypePolicy)::FType; FSingleType Default{}; const FSingleType& CachedValue = (*CacheEntry)->GetTypedData<FSingleType>(Context, nullptr, Default); FDataflowConverter<typename TAnyType::FStorageType>::From(CachedValue, ReturnValue); })"
  }
]