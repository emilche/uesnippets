[
  {
    "label": "FNetBlob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlob"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FReplicationStateDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateDescriptor"
  },
  {
    "label": "FNetBlobHandlerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlobHandlerManager"
  },
  {
    "label": "FReliableNetBlobQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReliableNetBlobQueue"
  },
  {
    "label": "FReplicationRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationRecord"
  },
  {
    "label": "FSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequence"
  },
  {
    "label": "Constants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Constants"
  },
  {
    "label": "FSequence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" # include \" Iris / PacketControl / PacketNotification . h \" # include \" Templates / RefCounting . h \" namespace UE::Net { class FNetBlob ; class FNetSerializationContext ; struct FReplicationStateDescriptor ; namespace Private { class FNetBlobHandlerManager ; } } namespace UE::Net::Private { class FReliableNetBlobQueue { public : struct FReplicationRecord { struct FSequence { enum : unsigned { NumberBitCount = 1 0 U,CountBitCount = 6 U,} ;)",
    "insertText": "FSequence()"
  },
  {
    "label": "FSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequence(uint16 Value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Number =)",
    "insertText": "Value((1U << NumberBitCount) - 1U)"
  },
  {
    "label": "ToUint16()",
    "kind": "Method",
    "detail": "Function (Count = Value>> NumberBitCount ; } uint16)",
    "insertText": "ToUint16()"
  },
  {
    "label": "FReplicationRecord()",
    "kind": "Method",
    "detail": "Function (} uint16 Number : NumberBitCount = 0 ; uint16 Count : CountBitCount = 0 ; } ;)",
    "insertText": "FReplicationRecord()"
  },
  {
    "label": "FReplicationRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReplicationRecord(uint64 Value)"
  },
  {
    "label": "FSequence()",
    "kind": "Method",
    "detail": "Function (Sequences [ Index ] =)",
    "insertText": "FSequence(Value & 0xFFFFU)"
  },
  {
    "label": "ToUint64()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 6 U ; } } uint64)",
    "insertText": "ToUint64()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 Value = 0 ;)",
    "insertText": "for(unsigned Index : {0U, 1U, 2U, 3U})"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Value << 16U) | Sequences[Index].ToUint16()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return Value ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FReliableNetBlobQueue()",
    "kind": "Method",
    "detail": "Function (} FSequence Sequences [ 4 ] ; } ; uint32 MaxUnackedBlobCount = 1 0 2 4 U ;)",
    "insertText": "FReliableNetBlobQueue()"
  },
  {
    "label": "GetUnsentBlobCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUnsentBlobCount()"
  },
  {
    "label": "IsAllSentAndAcked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllSentAndAcked()"
  },
  {
    "label": "IsSendWindowFull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSendWindowFull()"
  },
  {
    "label": "IsSafeToDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSafeToDestroy()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enqueue(const TRefCountPtr<FNetBlob>& Blob)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FNetBlob>*)",
    "insertText": "Peek()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pop()"
  },
  {
    "label": "DequeueUnreliable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueUnreliable(TArray<TRefCountPtr<FNetBlob>>& Unreliable)"
  },
  {
    "label": "SerializeWithObject()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SerializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle, FReplicationRecord& OutRecord)"
  },
  {
    "label": "DeserializeWithObject()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DeserializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Serialize(FNetSerializationContext& Context, FReplicationRecord& OutRecord)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Deserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "CommitReplicationRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitReplicationRecord(const FReplicationRecord& Record)"
  },
  {
    "label": "ProcessPacketDeliveryStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPacketDeliveryStatus(EPacketDeliveryStatus Status, const FReplicationRecord& Record)"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (private : enum Constants : uint32 { IndexBitCount = 1 0 U,MaxWriteSequenceCount =)",
    "insertText": "UE_ARRAY_COUNT(FReplicationRecord::Sequences), MaxSequenceLength = (1U << FReplicationRecord::FSequence::CountBitCount)"
  },
  {
    "label": "SequenceToIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SequenceToIndex(uint32 Seq)"
  },
  {
    "label": "IsSequenceAcked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSequenceAcked(uint32 Seq)"
  },
  {
    "label": "IsIndexAcked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIndexAcked(uint32 Index)"
  },
  {
    "label": "SetIndexIsAcked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndexIsAcked(uint32 Index)"
  },
  {
    "label": "SetSequenceIsAcked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceIsAcked(uint32 Index)"
  },
  {
    "label": "ClearIndexIsAcked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIndexIsAcked(uint32 Index)"
  },
  {
    "label": "IsSequenceSent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSequenceSent(uint32 Seq)"
  },
  {
    "label": "IsIndexSent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIndexSent(uint32 Index)"
  },
  {
    "label": "SetIndexIsSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndexIsSent(uint32 Index)"
  },
  {
    "label": "SetSequenceIsSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceIsSent(uint32 Index)"
  },
  {
    "label": "ClearSequenceIsSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSequenceIsSent(uint32 Seq)"
  },
  {
    "label": "ClearIndexIsSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIndexIsSent(uint32 Seq)"
  },
  {
    "label": "IsValidReceiveSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidReceiveSequence(uint32 Seq)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SerializeInternal(FNetSerializationContext& Context, FNetRefHandle RefHandle, FReliableNetBlobQueue::FReplicationRecord& OutRecord, const bool bSerializeWithObject)"
  },
  {
    "label": "DeserializeInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DeserializeInternal(FNetSerializationContext& Context, FNetRefHandle RefHandle, const bool bSerializeWithObject)"
  },
  {
    "label": "OnPacketDelivered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDelivered(const FReplicationRecord& Record)"
  },
  {
    "label": "OnPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDropped(const FReplicationRecord& Record)"
  },
  {
    "label": "PopInOrderAckedBlobs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopInOrderAckedBlobs()"
  },
  {
    "label": "Sent()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FNetBlob> NetBlobs [ MaxUnackedBlobCount ] ; uint32)",
    "insertText": "Sent(MaxUnackedBlobCount + 31)"
  },
  {
    "label": "Acked()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Acked(MaxUnackedBlobCount + 31)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (Acked [ Index>> 5)",
    "insertText": "U(1U << (Index & 31U))"
  },
  {
    "label": "SetSequenceIsAcked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSequenceIsAcked(uint32 Seq)"
  },
  {
    "label": "SetSequenceIsSent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSequenceIsSent(uint32 Seq)"
  },
  {
    "label": "ClearIndexIsSent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearIndexIsSent(uint32 Index)"
  }
]