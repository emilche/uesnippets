[
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FoldingSetNodeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetNodeID"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "hash_code",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hash_code"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "tries",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tries"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "DenseMapAPIntKeyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapAPIntKeyInfo"
  },
  {
    "label": "ms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ms"
  },
  {
    "label": "mu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mu"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "APInt"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "APInt"
  },
  {
    "label": "fromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fromString(unsigned numBits, StringRef str, uint8_t radix)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "divide(const APInt LHS, unsigned lhsWords, const APInt &RHS,\n                     unsigned rhsWords, APInt *Quotient, APInt *Remainder)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initSlowCase(unsigned numBits, uint64_t val, bool isSigned)"
  },
  {
    "label": "initFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromArray(ArrayRef<uint64_t> array)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initSlowCase(const APInt &that)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "initSlowCase(numBits, val, isSigned)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (conversion)",
    "insertText": "APInt(unsigned numBits, StringRef str, uint8_t radix)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "initSlowCase(that)"
  },
  {
    "label": "isAllOnesValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isAllOnesValue()"
  },
  {
    "label": "isPowerOf2_64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isPowerOf2_64(VAL)"
  },
  {
    "label": "isMinSignedValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isMinSignedValue()"
  },
  {
    "label": "getAllOnesValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAllOnesValue(numBits)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, 0)"
  },
  {
    "label": "API()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "API(numBits, 0)"
  },
  {
    "label": "getSignedMinValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getSignedMinValue(BitWidth)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, UINT64_MAX, true)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, 0)"
  },
  {
    "label": "Res()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "Res(numBits, 0)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, 0)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, ~0ULL << shiftAmt)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, 0)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(numBits, UINT64_MAX)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const APInt &Arg)"
  },
  {
    "label": "API()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "API(*this)"
  },
  {
    "label": "API()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "API(*this)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "Result(*this)"
  },
  {
    "label": "clearUnusedBits()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "clearUnusedBits()"
  },
  {
    "label": "AssignSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssignSlowCase(RHS)"
  },
  {
    "label": "AndSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AndSlowCase(RHS)"
  },
  {
    "label": "OrSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OrSlowCase(RHS)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(BitWidth, VAL ^ RHS.VAL)"
  },
  {
    "label": "XorSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "XorSlowCase(RHS)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "shl(Bits)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "shl(Bits)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(BitWidth, 0)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(BitWidth, VAL << shiftAmt)"
  },
  {
    "label": "shlSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "shlSlowCase(shiftAmt)"
  },
  {
    "label": "udivrem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "udivrem(const APInt &LHS, const APInt &RHS, APInt &Quotient,\n                      APInt &Remainder)"
  },
  {
    "label": "sdivrem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sdivrem(const APInt &LHS, const APInt &RHS, APInt &Quotient,\n                      APInt &Remainder)"
  },
  {
    "label": "EqualSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EqualSlowCase(RHS)"
  },
  {
    "label": "EqualSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EqualSlowCase(Val)"
  },
  {
    "label": "clearUnusedBits()",
    "kind": "Method",
    "detail": "Function (ones)",
    "insertText": "clearUnusedBits()"
  },
  {
    "label": "setBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBit(unsigned bitPosition)"
  },
  {
    "label": "clearBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearBit(unsigned bitPosition)"
  },
  {
    "label": "flipBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flipBit(unsigned bitPosition)"
  },
  {
    "label": "getNumWords()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNumWords(BitWidth)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "int64_t(pVal[0])"
  },
  {
    "label": "getBitsNeeded()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getBitsNeeded(StringRef str, uint8_t radix)"
  },
  {
    "label": "countLeadingZerosSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countLeadingZerosSlowCase()"
  },
  {
    "label": "countTrailingOnesSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countTrailingOnesSlowCase()"
  },
  {
    "label": "countPopulationSlowCase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "countPopulationSlowCase()"
  },
  {
    "label": "roundToDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "roundToDouble(false)"
  },
  {
    "label": "roundToDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "roundToDouble(true)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(sizeof T * CHAR_BIT, T.I)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "APInt(sizeof T * CHAR_BIT, T.I)"
  },
  {
    "label": "logBase2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "logBase2()"
  },
  {
    "label": "tcSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSet(integerPart *, integerPart, unsigned int)"
  },
  {
    "label": "tcAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcAssign(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcIsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tcIsZero(const integerPart *, unsigned int)"
  },
  {
    "label": "tcExtractBit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcExtractBit(const integerPart *, unsigned int bit)"
  },
  {
    "label": "tcExtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcExtract(integerPart *, unsigned int dstCount,\n                        const integerPart *, unsigned int srcBits,\n                        unsigned int srcLSB)"
  },
  {
    "label": "tcSetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSetBit(integerPart *, unsigned int bit)"
  },
  {
    "label": "tcClearBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcClearBit(integerPart *, unsigned int bit)"
  },
  {
    "label": "tcLSB()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcLSB(const integerPart *, unsigned int)"
  },
  {
    "label": "tcMSB()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcMSB(const integerPart *parts, unsigned int n)"
  },
  {
    "label": "tcNegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcNegate(integerPart *, unsigned int)"
  },
  {
    "label": "tcAdd()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcAdd(integerPart *, const integerPart *,\n                           integerPart carry, unsigned)"
  },
  {
    "label": "tcSubtract()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcSubtract(integerPart *, const integerPart *,\n                                integerPart carry, unsigned)"
  },
  {
    "label": "tcMultiplyPart()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcMultiplyPart(integerPart *dst, const integerPart *src,\n                            integerPart multiplier, integerPart carry,\n                            unsigned int srcParts, unsigned int dstParts,\n                            bool add)"
  },
  {
    "label": "tcMultiply()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcMultiply(integerPart *, const integerPart *, const integerPart *,\n                        unsigned)"
  },
  {
    "label": "tcFullMultiply()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcFullMultiply(integerPart *, const integerPart *,\n                                     const integerPart *, unsigned, unsigned)"
  },
  {
    "label": "tcDivide()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcDivide(integerPart *lhs, const integerPart *rhs,\n                      integerPart *remainder, integerPart *scratch,\n                      unsigned int parts)"
  },
  {
    "label": "tcShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcShiftLeft(integerPart *, unsigned int parts,\n                          unsigned int count)"
  },
  {
    "label": "tcShiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcShiftRight(integerPart *, unsigned int parts,\n                           unsigned int count)"
  },
  {
    "label": "tcAnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcAnd(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcOr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcOr(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcXor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcXor(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcComplement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcComplement(integerPart *, unsigned int)"
  },
  {
    "label": "tcCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcCompare(const integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcIncrement()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcIncrement(integerPart *, unsigned int)"
  },
  {
    "label": "tcDecrement()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcDecrement(integerPart *, unsigned int)"
  },
  {
    "label": "tcSetLeastSignificantBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSetLeastSignificantBits(integerPart *, unsigned int,\n                                        unsigned int bits)"
  },
  {
    "label": "GreatestCommonDivisor()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "GreatestCommonDivisor(const APInt &Val1, const APInt &Val2)"
  },
  {
    "label": "RoundDoubleToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "RoundDoubleToAPInt(double Double, unsigned width)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const APInt &Arg)"
  }
]