[
  {
    "label": "FoldingSetNodeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetNodeID"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "hash_code",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hash_code"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "DenseMapAPIntKeyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapAPIntKeyInfo"
  },
  {
    "label": "ms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ms"
  },
  {
    "label": "mu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mu"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_APINT_H # define LLVM_ADT_APINT_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / MathExtras . h \" # include<cassert> # include<climits> # include<cstring> # include<string> namespace llvm { class FoldingSetNodeID ; class StringRef ; class hash_code ; class raw_ostream ; template<T> class SmallVectorImpl ; typedef uint64_t integerPart ; const unsigned int host_char_bit = 8 ; const unsigned int integerPartWidth = host_char_bit* static_cast<unsigned)",
    "insertText": "int(sizeof(integerPart))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (class APInt { unsigned BitWidth ; union { uint64_t VAL ; uint64_t* pVal ; } ; enum { APINT_BITS_PER_WORD = static_cast<unsigned)",
    "insertText": "int(sizeof(uint64_t)) * CHAR_BIT, APINT_WORD_SIZE = static_cast<unsigned int>(sizeof(uint64_t))"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (struct DenseMapAPIntKeyInfo ;)",
    "insertText": "APInt(uint64_t *val, unsigned bits) : BitWidth(bits), pVal(val)"
  },
  {
    "label": "isSingleWord()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSingleWord()"
  },
  {
    "label": "clearUnusedBits()",
    "kind": "Method",
    "detail": "Function (} APInt&)",
    "insertText": "clearUnusedBits()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned wordBits = BitWidth % APINT_BITS_PER_WORD ;)",
    "insertText": "if(wordBits == 0)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t mask = ~)",
    "insertText": "uint64_t(0ULL) >> (APINT_BITS_PER_WORD - wordBits)"
  },
  {
    "label": "fromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fromString(unsigned numBits, StringRef str, uint8_t radix)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "divide(const APInt LHS, unsigned lhsWords, const APInt &RHS, unsigned rhsWords, APInt *Quotient, APInt *Remainder)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initSlowCase(unsigned numBits, uint64_t val, bool isSigned)"
  },
  {
    "label": "initFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromArray(ArrayRef<uint64_t> array)"
  },
  {
    "label": "initSlowCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initSlowCase(const APInt &that)"
  },
  {
    "label": "shlSlowCase()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "shlSlowCase(unsigned shiftAmt)"
  },
  {
    "label": "AndSlowCase()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "AndSlowCase(const APInt &RHS)"
  },
  {
    "label": "OrSlowCase()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "OrSlowCase(const APInt &RHS)"
  },
  {
    "label": "XorSlowCase()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "XorSlowCase(const APInt &RHS)"
  },
  {
    "label": "AssignSlowCase()",
    "kind": "Method",
    "detail": "Function (APInt&)",
    "insertText": "AssignSlowCase(const APInt &RHS)"
  },
  {
    "label": "EqualSlowCase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualSlowCase(const APInt &RHS)"
  },
  {
    "label": "EqualSlowCase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualSlowCase(uint64_t Val)"
  },
  {
    "label": "countLeadingZerosSlowCase()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countLeadingZerosSlowCase()"
  },
  {
    "label": "countTrailingOnesSlowCase()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countTrailingOnesSlowCase()"
  },
  {
    "label": "countPopulationSlowCase()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countPopulationSlowCase()"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "APInt(unsigned numBits, uint64_t val, bool isSigned = false) : BitWidth(numBits), VAL(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BitWidth && \"bitwidth too small\")"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APInt(unsigned numBits, StringRef str, uint8_t radix)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APInt(const APInt &that) : BitWidth(that.BitWidth), VAL(0)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APInt(APInt &&that) : BitWidth(that.BitWidth), VAL(that.VAL)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (that . BitWidth = 0 ; } ~)",
    "insertText": "APInt()"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APInt() : BitWidth(1)"
  },
  {
    "label": "needsCleanup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "needsCleanup()"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID &id)"
  },
  {
    "label": "isNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNegative()"
  },
  {
    "label": "isNonNegative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNonNegative()"
  },
  {
    "label": "isStrictlyPositive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isStrictlyPositive()"
  },
  {
    "label": "isAllOnesValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAllOnesValue()"
  },
  {
    "label": "isMaxValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMaxValue()"
  },
  {
    "label": "isMaxSignedValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMaxSignedValue()"
  },
  {
    "label": "isMinValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMinValue()"
  },
  {
    "label": "isIntN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIntN(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N && \"N == 0 ???\")"
  },
  {
    "label": "isSignedIntN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSignedIntN(unsigned N)"
  },
  {
    "label": "isPowerOf2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPowerOf2()"
  },
  {
    "label": "isSignBit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSignBit()"
  },
  {
    "label": "getBoolValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getBoolValue()"
  },
  {
    "label": "isSplat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSplat(unsigned SplatSizeInBits)"
  },
  {
    "label": "getMaxValue()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "getMaxValue(unsigned numBits)"
  },
  {
    "label": "getSignedMaxValue()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getSignedMaxValue(unsigned numBits)"
  },
  {
    "label": "getAllOnesValue()",
    "kind": "Method",
    "detail": "Function (APInt API =)",
    "insertText": "getAllOnesValue(numBits)"
  },
  {
    "label": "clearBit()",
    "kind": "Method",
    "detail": "Function (API .)",
    "insertText": "clearBit(numBits - 1)"
  },
  {
    "label": "getSignedMinValue()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getSignedMinValue(unsigned numBits)"
  },
  {
    "label": "API()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "API(numBits, 0)"
  },
  {
    "label": "setBit()",
    "kind": "Method",
    "detail": "Function (API .)",
    "insertText": "setBit(numBits - 1)"
  },
  {
    "label": "getAllOnesValue()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getAllOnesValue(unsigned numBits)"
  },
  {
    "label": "getNullValue()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getNullValue(unsigned numBits)"
  },
  {
    "label": "getHiBits()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getHiBits(unsigned numBits)"
  },
  {
    "label": "getLoBits()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "getLoBits(unsigned numBits)"
  },
  {
    "label": "getOneBitSet()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "getOneBitSet(unsigned numBits, unsigned BitNo)"
  },
  {
    "label": "Res()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "Res(numBits, 0)"
  },
  {
    "label": "setBit()",
    "kind": "Method",
    "detail": "Function (Res .)",
    "insertText": "setBit(BitNo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(hiBit <= numBits && \"hiBit out of range\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(loBit < numBits && \"loBit out of range\")"
  },
  {
    "label": "getHighBitsSet()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getHighBitsSet(unsigned numBits, unsigned hiBitsSet)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(hiBitsSet <= numBits && \"Too many bits to set!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned shiftAmt = numBits - hiBitsSet ;)",
    "insertText": "if(numBits <= APINT_BITS_PER_WORD) return APInt(numBits, ~0ULL << shiftAmt)"
  },
  {
    "label": "getLowBitsSet()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getLowBitsSet(unsigned numBits, unsigned loBitsSet)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(loBitsSet <= numBits && \"Too many bits to set!\")"
  },
  {
    "label": "getSplat()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getSplat(unsigned NewLen, const APInt &V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NewLen >= V.getBitWidth() && \"Can't splat to smaller bit width!\")"
  },
  {
    "label": "zextOrSelf()",
    "kind": "Method",
    "detail": "Function (APInt Val = V .)",
    "insertText": "zextOrSelf(NewLen)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (} hash_code)",
    "insertText": "hash_value(const APInt &Arg)"
  },
  {
    "label": "getRawData()",
    "kind": "Method",
    "detail": "Function (const uint64_t*)",
    "insertText": "getRawData()"
  },
  {
    "label": "API()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "API(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const APInt)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "operator()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "Result(*this)"
  },
  {
    "label": "flipAllBits()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "flipAllBits()"
  },
  {
    "label": "AssignSlowCase()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "AssignSlowCase(RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APInt&)",
    "insertText": "operator(APInt &&that)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (delete [ ] pVal ; })",
    "insertText": "memcpy(&VAL, &that.VAL, sizeof(uint64_t))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (unsigned ThatBitWidth = that . BitWidth ; that . BitWidth = 0 ; BitWidth = ThatBitWidth ; return* this ; } APInt&)",
    "insertText": "operator(uint64_t RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APInt&)",
    "insertText": "operator(const APInt &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APInt&)",
    "insertText": "operator(unsigned shiftAmt)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "shl(shiftAmt)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BitWidth == RHS.BitWidth && \"Bit widths must be the same\")"
  },
  {
    "label": "And()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "And(const APInt &RHS)"
  },
  {
    "label": "Or()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "Or(const APInt &RHS)"
  },
  {
    "label": "Xor()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "Xor(const APInt &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "operator(unsigned Bits)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "operator(const APInt &Bits)"
  },
  {
    "label": "ashr()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "ashr(unsigned shiftAmt)"
  },
  {
    "label": "lshr()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "lshr(unsigned shiftAmt)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "shl(unsigned shiftAmt)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(shiftAmt <= BitWidth && \"Invalid shift amount\")"
  },
  {
    "label": "shlSlowCase()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "shlSlowCase(shiftAmt)"
  },
  {
    "label": "rotl()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "rotl(unsigned rotateAmt)"
  },
  {
    "label": "rotr()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "rotr(unsigned rotateAmt)"
  },
  {
    "label": "ashr()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "ashr(const APInt &shiftAmt)"
  },
  {
    "label": "lshr()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "lshr(const APInt &shiftAmt)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "shl(const APInt &shiftAmt)"
  },
  {
    "label": "rotl()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "rotl(const APInt &rotateAmt)"
  },
  {
    "label": "rotr()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "rotr(const APInt &rotateAmt)"
  },
  {
    "label": "udiv()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "udiv(const APInt &RHS)"
  },
  {
    "label": "sdiv()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "sdiv(const APInt &RHS)"
  },
  {
    "label": "urem()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "urem(const APInt &RHS)"
  },
  {
    "label": "srem()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "srem(const APInt &RHS)"
  },
  {
    "label": "udivrem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "udivrem(const APInt &LHS, const APInt &RHS, APInt &Quotient, APInt &Remainder)"
  },
  {
    "label": "sdivrem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sdivrem(const APInt &LHS, const APInt &RHS, APInt &Quotient, APInt &Remainder)"
  },
  {
    "label": "sadd_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "sadd_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "uadd_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "uadd_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "ssub_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "ssub_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "usub_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "usub_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "sdiv_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "sdiv_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "smul_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "smul_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "umul_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "umul_ov(const APInt &RHS, bool &Overflow)"
  },
  {
    "label": "sshl_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "sshl_ov(const APInt &Amt, bool &Overflow)"
  },
  {
    "label": "ushl_ov()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "ushl_ov(const APInt &Amt, bool &Overflow)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(unsigned bitPosition)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(bitPosition < getBitWidth() && \"Bit position out of bounds!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BitWidth == RHS.BitWidth && \"Comparison requires equal bit widths\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(uint64_t Val)"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "eq(const APInt &RHS)"
  },
  {
    "label": "ne()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ne(const APInt &RHS)"
  },
  {
    "label": "ult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ult(const APInt &RHS)"
  },
  {
    "label": "ult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ult(uint64_t RHS)"
  },
  {
    "label": "slt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "slt(const APInt &RHS)"
  },
  {
    "label": "slt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "slt(int64_t RHS)"
  },
  {
    "label": "ule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ule(const APInt &RHS)"
  },
  {
    "label": "ule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ule(uint64_t RHS)"
  },
  {
    "label": "sle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sle(const APInt &RHS)"
  },
  {
    "label": "sle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sle(uint64_t RHS)"
  },
  {
    "label": "ugt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ugt(const APInt &RHS)"
  },
  {
    "label": "ugt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ugt(uint64_t RHS)"
  },
  {
    "label": "sgt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sgt(const APInt &RHS)"
  },
  {
    "label": "sgt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sgt(int64_t RHS)"
  },
  {
    "label": "uge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "uge(const APInt &RHS)"
  },
  {
    "label": "uge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "uge(uint64_t RHS)"
  },
  {
    "label": "sge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sge(const APInt &RHS)"
  },
  {
    "label": "sge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sge(int64_t RHS)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersects(const APInt &RHS)"
  },
  {
    "label": "trunc()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "trunc(unsigned width)"
  },
  {
    "label": "sext()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "sext(unsigned width)"
  },
  {
    "label": "zext()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "zext(unsigned width)"
  },
  {
    "label": "sextOrTrunc()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "sextOrTrunc(unsigned width)"
  },
  {
    "label": "zextOrTrunc()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "zextOrTrunc(unsigned width)"
  },
  {
    "label": "sextOrSelf()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "sextOrSelf(unsigned width)"
  },
  {
    "label": "zextOrSelf()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "zextOrSelf(unsigned width)"
  },
  {
    "label": "setAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAllBits()"
  },
  {
    "label": "setBit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBit(unsigned bitPosition)"
  },
  {
    "label": "clearAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearAllBits()"
  },
  {
    "label": "clearBit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBit(unsigned bitPosition)"
  },
  {
    "label": "flipBit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "flipBit(unsigned bitPosition)"
  },
  {
    "label": "getBitWidth()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getBitWidth()"
  },
  {
    "label": "getNumWords()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumWords(unsigned BitWidth)"
  },
  {
    "label": "getActiveBits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getActiveBits()"
  },
  {
    "label": "getActiveWords()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getActiveWords()"
  },
  {
    "label": "getMinSignedBits()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getMinSignedBits()"
  },
  {
    "label": "getZExtValue()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getZExtValue()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getActiveBits() <= 64 && \"Too many bits for uint64_t\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getMinSignedBits() <= 64 && \"Too many bits for int64_t\")"
  },
  {
    "label": "getBitsNeeded()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getBitsNeeded(StringRef str, uint8_t radix)"
  },
  {
    "label": "countLeadingZeros()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countLeadingZeros()"
  },
  {
    "label": "countLeadingZeros()",
    "kind": "Method",
    "detail": "Function (unsigned unusedBits = APINT_BITS_PER_WORD - BitWidth ; return)",
    "insertText": "countLeadingZeros(VAL)"
  },
  {
    "label": "countLeadingOnes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "countLeadingOnes()"
  },
  {
    "label": "getNumSignBits()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumSignBits()"
  },
  {
    "label": "countTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "countTrailingZeros()"
  },
  {
    "label": "countTrailingOnes()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countTrailingOnes()"
  },
  {
    "label": "countPopulation()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "countPopulation()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, bool isSigned)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toString(SmallVectorImpl<char> &Str, unsigned Radix, bool Signed, bool formatAsCLiteral = false)"
  },
  {
    "label": "toStringUnsigned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toStringUnsigned(SmallVectorImpl<char> &Str, unsigned Radix = 10)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toString(Str, Radix, false, false)"
  },
  {
    "label": "toStringSigned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "toStringSigned(SmallVectorImpl<char> &Str, unsigned Radix = 10)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toString(Str, Radix, true, false)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "toString(unsigned Radix, bool Signed)"
  },
  {
    "label": "byteSwap()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "byteSwap()"
  },
  {
    "label": "signedRoundToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "signedRoundToDouble()"
  },
  {
    "label": "bitsToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "bitsToDouble()"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (union { uint64_t I ; double D ; } T ; T .)",
    "insertText": "I(isSingleWord() ? VAL : pVal[0])"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (union { unsigned I ; float F ; } T ; T . I =)",
    "insertText": "unsigned((isSingleWord() ? VAL : pVal[0]))"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (union { uint64_t I ; double D ; } T ; T . D = V ; return)",
    "insertText": "APInt(sizeof T * CHAR_BIT, T.I)"
  },
  {
    "label": "floatToBits()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "floatToBits(float V)"
  },
  {
    "label": "logBase2()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "logBase2()"
  },
  {
    "label": "ceilLogBase2()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "ceilLogBase2()"
  },
  {
    "label": "nearestLogBase2()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "nearestLogBase2()"
  },
  {
    "label": "exactLogBase2()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "exactLogBase2()"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "sqrt()"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (APInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "abs()"
  },
  {
    "label": "magic()",
    "kind": "Method",
    "detail": "Function (struct ms ; ms)",
    "insertText": "magic()"
  },
  {
    "label": "magicu()",
    "kind": "Method",
    "detail": "Function (struct mu ; mu)",
    "insertText": "magicu(unsigned LeadingZeros = 0)"
  },
  {
    "label": "tcSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSet(integerPart *, integerPart, unsigned int)"
  },
  {
    "label": "tcAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcAssign(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcIsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tcIsZero(const integerPart *, unsigned int)"
  },
  {
    "label": "tcExtractBit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcExtractBit(const integerPart *, unsigned int bit)"
  },
  {
    "label": "tcExtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcExtract(integerPart *, unsigned int dstCount, const integerPart *, unsigned int srcBits, unsigned int srcLSB)"
  },
  {
    "label": "tcSetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSetBit(integerPart *, unsigned int bit)"
  },
  {
    "label": "tcClearBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcClearBit(integerPart *, unsigned int bit)"
  },
  {
    "label": "tcLSB()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "tcLSB(const integerPart *, unsigned int)"
  },
  {
    "label": "tcMSB()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "tcMSB(const integerPart *parts, unsigned int n)"
  },
  {
    "label": "tcNegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcNegate(integerPart *, unsigned int)"
  },
  {
    "label": "tcAdd()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcAdd(integerPart *, const integerPart *, integerPart carry, unsigned)"
  },
  {
    "label": "tcSubtract()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcSubtract(integerPart *, const integerPart *, integerPart carry, unsigned)"
  },
  {
    "label": "tcMultiplyPart()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcMultiplyPart(integerPart *dst, const integerPart *src, integerPart multiplier, integerPart carry, unsigned int srcParts, unsigned int dstParts, bool add)"
  },
  {
    "label": "tcMultiply()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcMultiply(integerPart *, const integerPart *, const integerPart *, unsigned)"
  },
  {
    "label": "tcFullMultiply()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "tcFullMultiply(integerPart *, const integerPart *, const integerPart *, unsigned, unsigned)"
  },
  {
    "label": "tcDivide()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcDivide(integerPart *lhs, const integerPart *rhs, integerPart *remainder, integerPart *scratch, unsigned int parts)"
  },
  {
    "label": "tcShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcShiftLeft(integerPart *, unsigned int parts, unsigned int count)"
  },
  {
    "label": "tcShiftRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcShiftRight(integerPart *, unsigned int parts, unsigned int count)"
  },
  {
    "label": "tcAnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcAnd(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcOr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcOr(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcXor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcXor(integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcComplement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcComplement(integerPart *, unsigned int)"
  },
  {
    "label": "tcCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tcCompare(const integerPart *, const integerPart *, unsigned int)"
  },
  {
    "label": "tcIncrement()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcIncrement(integerPart *, unsigned int)"
  },
  {
    "label": "tcDecrement()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "tcDecrement(integerPart *, unsigned int)"
  },
  {
    "label": "tcSetLeastSignificantBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tcSetLeastSignificantBits(integerPart *, unsigned int, unsigned int bits)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct APInt::ms { APInt m ; unsigned s ; } ; struct APInt::mu { APInt m ; bool a ; unsigned s ; } ; bool)",
    "insertText": "operator(uint64_t V1, const APInt &V2)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (I .)",
    "insertText": "print(OS, true)"
  },
  {
    "label": "smax()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "smax(const APInt &A, const APInt &B)"
  },
  {
    "label": "umin()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "umin(const APInt &A, const APInt &B)"
  },
  {
    "label": "umax()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "umax(const APInt &A, const APInt &B)"
  },
  {
    "label": "isIntN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIntN(unsigned N, const APInt &APIVal)"
  },
  {
    "label": "isSignedIntN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSignedIntN(unsigned N, const APInt &APIVal)"
  },
  {
    "label": "isMask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMask(unsigned numBits, const APInt &APIVal)"
  },
  {
    "label": "isShiftedMask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isShiftedMask(unsigned numBits, const APInt &APIVal)"
  },
  {
    "label": "byteSwap()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "byteSwap(const APInt &APIVal)"
  },
  {
    "label": "logBase2()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "logBase2(const APInt &APIVal)"
  },
  {
    "label": "GreatestCommonDivisor()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "GreatestCommonDivisor(const APInt &Val1, const APInt &Val2)"
  },
  {
    "label": "RoundAPIntToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RoundAPIntToDouble(const APInt &APIVal)"
  },
  {
    "label": "RoundSignedAPIntToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "RoundSignedAPIntToDouble(const APInt &APIVal)"
  },
  {
    "label": "RoundAPIntToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "RoundAPIntToFloat(const APInt &APIVal)"
  },
  {
    "label": "RoundSignedAPIntToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "RoundSignedAPIntToFloat(const APInt &APIVal)"
  },
  {
    "label": "RoundDoubleToAPInt()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "RoundDoubleToAPInt(double Double, unsigned width)"
  },
  {
    "label": "RoundFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "RoundFloatToAPInt(float Float, unsigned width)"
  },
  {
    "label": "ashr()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "ashr(const APInt &LHS, unsigned shiftAmt)"
  },
  {
    "label": "lshr()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "lshr(const APInt &LHS, unsigned shiftAmt)"
  },
  {
    "label": "shl()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "shl(const APInt &LHS, unsigned shiftAmt)"
  },
  {
    "label": "sdiv()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "sdiv(const APInt &LHS, const APInt &RHS)"
  },
  {
    "label": "udiv()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "udiv(const APInt &LHS, const APInt &RHS)"
  },
  {
    "label": "srem()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "srem(const APInt &LHS, const APInt &RHS)"
  },
  {
    "label": "urem()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "urem(const APInt &LHS, const APInt &RHS)"
  },
  {
    "label": "mul()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "mul(const APInt &LHS, const APInt &RHS)"
  }
]