[
  {
    "label": "FBlendedXPBDCorotatedConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendedXPBDCorotatedConstraints"
  },
  {
    "label": "FBlendedXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" namespace Chaos::Softs { template<T,ParticleType> class FBlendedXPBDCorotatedConstraints : public FXPBDCorotatedConstraints<T,ParticleType> { typedef FXPBDCorotatedConstraints<T,ParticleType> Base ; using Base::MeshConstraints ; using Base::LambdaArray ; using Base::Measure ; using Base::DmInverse ; using Base::Lambda ; using Base::bRecordMetric ; public :)",
    "insertText": "FBlendedXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const bool bRecordMetricIn = true, const T& EMesh = (T)10.0, const T& NuMesh = (T).3, const T& InZeta = (T)1. ) : Base(InParticles, InMesh, bRecordMetricIn, EMesh, NuMesh), Zeta(InZeta)"
  },
  {
    "label": "Zeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Zeta(T)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Zeta > (T)1.)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} C1Contribution .)",
    "insertText": "Init(TVec4<TVector<T, 3>>(TVector<T, 3>((T)0.)), InMesh.Num())"
  },
  {
    "label": "FBlendedXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlendedXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<T>& EMeshArray, const T& NuMesh = (T).3, const bool bRecordMetricIn = false, const T& InZeta = (T)1. ) : Base(InParticles, InMesh, EMeshArray, NuMesh, bRecordMetricIn), Zeta(InZeta)"
  },
  {
    "label": "FBlendedXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBlendedXPBDCorotatedConstraints()"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInSerial(ParticleType& Particles, const T Dt, const int32 ElementIndex)"
  },
  {
    "label": "GetPolarDelta()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> PolarDelta =)",
    "insertText": "GetPolarDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "GetDeterminantDelta()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> DetDelta =)",
    "insertText": "GetDeterminantDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Init()"
  },
  {
    "label": "Lambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambdas(T)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} C1Contribution .)",
    "insertText": "Init(TVec4<TVector<T, 3>>(TVector<T, 3>((T)0.)), MeshConstraints.Num())"
  },
  {
    "label": "GetDeterminantDelta()",
    "kind": "Method",
    "detail": "Function (} protected : TVec4<TVector<T,3>>)",
    "insertText": "GetDeterminantDelta(const ParticleType& Particles, const T Dt, const int32 ElementIndex, const T Tol = (T)1e-3)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosBlendedXPBDCorotatedApplyDet)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,3,3> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInvT =)",
    "insertText": "ElementDmInv(ElementIndex).GetTransposed()"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (T J = Fe .)",
    "insertText": "Determinant()"
  },
  {
    "label": "GetDeterminantGradient()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> dC2 =)",
    "insertText": "GetDeterminantGradient(Fe, DmInvT)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)2. / (Dt * Dt * Base::Lambda * Measure[ElementIndex])"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DLambda(1 - J)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T Denom = AlphaTilde ;)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = dC2 [ i ] [ j ]* Particles .)",
    "insertText": "InvM(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "Delta2()",
    "kind": "Method",
    "detail": "Function (} } DLambda / = Denom ; LambdaArray [ 2* ElementIndex + 1 ] + = DLambda ; TVec4<TVector<T,3>>)",
    "insertText": "Delta2(TVector<T, 3>((T)0.))"
  },
  {
    "label": "Delta1()",
    "kind": "Method",
    "detail": "Function (} } TVec4<TVector<T,3>>)",
    "insertText": "Delta1(TVector<T, 3>((T)0.))"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} } TVec4<TVector<T,3>>)",
    "insertText": "Delta(TVector<T, 3>((T)0.))"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Delta [ i ] = Zeta* Delta1 [)",
    "insertText": "i((T)1. - Zeta)"
  },
  {
    "label": "GetPolarDelta()",
    "kind": "Method",
    "detail": "Function (C2Contribution [ ElementIndex ] [ i ] + = Delta [ i ] ; } return Delta ; } TVec4<TVector<T,3>>)",
    "insertText": "GetPolarDelta(const ParticleType& Particles, const T Dt, const int32 ElementIndex, const T Tol = (T)1e-3)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosBlendedXPBDCorotatedApplyPolar)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ChaosXPBDCorotatedPolar)"
  },
  {
    "label": "Re()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Re((T)0.), Se((T)0.)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(Fe, Re, Se)"
  },
  {
    "label": "C1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C1(T)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (C1 + =)",
    "insertText": "Square((Fe - Re).GetAt(i, j))"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} } C1 =)",
    "insertText": "Sqrt(C1)"
  },
  {
    "label": "GetPolarGradient()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> dC1 =)",
    "insertText": "GetPolarGradient(Fe, Re, DmInvT, C1)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)1. / (Dt * Dt * Base::Mu * Measure[ElementIndex])"
  }
]