[
  {
    "label": "FAnimPoseDecompressionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPoseDecompressionData"
  },
  {
    "label": "FAnimPoseDecompressionData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimEncoding . h \" namespace UE::Anim { struct FAnimPoseDecompressionData {)",
    "insertText": "FAnimPoseDecompressionData(const BoneTrackArray& InRotationPairs , const BoneTrackArray& InTranslationPairs , const BoneTrackArray& InScalePairs , TArrayView<FQuat>& InOutAtomRotations , TArrayView<FVector>& InOutAtomTranslations , TArrayView<FVector>& InOutAtomScales3D) : RotationPairs(InRotationPairs) , TranslationPairs(InTranslationPairs) , ScalePairs(InScalePairs) , OutAtomRotations(InOutAtomRotations) , OutAtomTranslations(InOutAtomTranslations) , OutAtomScales3D(InOutAtomScales3D)"
  },
  {
    "label": "GetRotationPairs()",
    "kind": "Method",
    "detail": "Function (} const BoneTrackArray&)",
    "insertText": "GetRotationPairs()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(ItFirstMember.Num() >= ItNumElements && ItSecondMember.Num() >= ItNumElements)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (\\ const ItFirstType* RESTRICT ItFirst = ItFirstMember .)",
    "insertText": "GetData()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(; ItFirst != ItFirstEnd; ++ItFirst, ++ItSecond)"
  }
]