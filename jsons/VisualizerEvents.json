[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FVisualizerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizerEvent"
  },
  {
    "label": "FVisualizerEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Templates / SharedPointer . h \" class FArchive ; namespace EVisualizerTimeUnits { typedef uint8 Type ; const Type Microseconds = 0 ; const Type Milliseconds = 1 ; const Type Seconds = 2 ; } ; namespace EVisualizerViewMode { typedef uint8 Type ; const Type Hierarchical = 0 ; const Type Flat = 1 ; const Type Coalesced = 2 ; const Type FlatCoalesced = 3 ; } ; struct FVisualizerEvent { double Start ; double Duration ; double DurationMs ; int32 Category ; FString EventName ; bool IsSelected ; uint32 ColorIndex ; TSharedPtr<FVisualizerEvent> ParentEvent ; TArray<TSharedPtr<FVisualizerEvent>> Children ;)",
    "insertText": "FVisualizerEvent(const double InStart, const double InDuration, const double InDurationMs, const int32 InCategory, const FString& InEventName) : Start( InStart ) , Duration( InDuration ) , DurationMs( InDurationMs ) , Category( InCategory ) , EventName( InEventName ) , IsSelected( false ) , ColorIndex( 0)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (ColorIndex =)",
    "insertText": "GetTypeHash(InEventName)"
  },
  {
    "label": "LoadVisualizerEvent()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FVisualizerEvent>)",
    "insertText": "LoadVisualizerEvent(FArchive *Ar)"
  },
  {
    "label": "SaveVisualizerEventRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveVisualizerEventRecursively(FArchive *Ar, TSharedPtr< FVisualizerEvent > VisualizerEvent)"
  },
  {
    "label": "LoadVisualizerEventRecursively()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FVisualizerEvent>)",
    "insertText": "LoadVisualizerEventRecursively(FArchive *Ar, TSharedPtr< FVisualizerEvent > InParentEvent)"
  }
]