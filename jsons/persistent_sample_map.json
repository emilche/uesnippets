[
  {
    "label": "PersistentHistogramAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentHistogramAllocator"
  },
  {
    "label": "PersistentSampleMapRecords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSampleMapRecords"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PersistentSampleMap()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_PERSISTENT_SAMPLE_MAP_H_ # define BASE_METRICS_PERSISTENT_SAMPLE_MAP_H_ # include<stdint . h> # include<map> # include<memory> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / histogram_samples . h \" # include \" base / metrics / persistent_memory_allocator . h \" namespace base { class PersistentHistogramAllocator ; class PersistentSampleMapRecords ; class BASE_EXPORT PersistentSampleMap : public HistogramSamples { public :)",
    "insertText": "PersistentSampleMap(uint64_t id, PersistentHistogramAllocator* allocator, Metadata* meta)"
  },
  {
    "label": "PersistentSampleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentSampleMap(const PersistentSampleMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentSampleMap&)",
    "insertText": "operator(const PersistentSampleMap&)"
  },
  {
    "label": "PersistentSampleMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentSampleMap()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(HistogramBase::Sample value, HistogramBase::Count count)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "GetCount(HistogramBase::Sample value)"
  },
  {
    "label": "TotalCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "TotalCount()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SampleCountIterator>)",
    "insertText": "Iterator()"
  },
  {
    "label": "GetNextPersistentRecord()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "GetNextPersistentRecord(PersistentMemoryAllocator::Iterator& iterator, uint64_t* sample_map_id)"
  },
  {
    "label": "CreatePersistentRecord()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "CreatePersistentRecord(PersistentMemoryAllocator* allocator, uint64_t sample_map_id, HistogramBase::Sample value)"
  },
  {
    "label": "AddSubtractImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AddSubtractImpl(SampleCountIterator* iter, Operator op)"
  },
  {
    "label": "GetSampleCountStorage()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count*)",
    "insertText": "GetSampleCountStorage(HistogramBase::Sample value)"
  },
  {
    "label": "GetOrCreateSampleCountStorage()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count*)",
    "insertText": "GetOrCreateSampleCountStorage(HistogramBase::Sample value)"
  },
  {
    "label": "GetRecords()",
    "kind": "Method",
    "detail": "Function (private : PersistentSampleMapRecords*)",
    "insertText": "GetRecords()"
  },
  {
    "label": "ImportSamples()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count*)",
    "insertText": "ImportSamples(HistogramBase::Sample until_value, bool import_everything)"
  }
]