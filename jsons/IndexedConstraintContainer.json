[
  {
    "label": "FIndexedConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndexedConstraintHandle"
  },
  {
    "label": "FPBDIndexedConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIndexedConstraintContainer"
  },
  {
    "label": "TIndexedContainerConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIndexedContainerConstraintHandle"
  },
  {
    "label": "TIndexedConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIndexedConstraintContainerSolver"
  },
  {
    "label": "TPBDIndexedConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDIndexedConstraintContainer"
  },
  {
    "label": "FIndexedConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Evolution / SolverConstraintContainer . h \" # include \" Chaos / Island / IslandManager . h \" # include \" Chaos / PBDConstraintContainer . h \" namespace Chaos { class FIndexedConstraintHandle : public FConstraintHandle { public : using FGeometryParticleHandle = TGeometryParticleHandle<FReal,3> ;)",
    "insertText": "FIndexedConstraintHandle() : FConstraintHandle() , ConstraintIndex(INDEX_NONE)"
  },
  {
    "label": "FIndexedConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndexedConstraintHandle(FPBDConstraintContainer* InContainer, int32 InConstraintIndex) : FConstraintHandle(InContainer) , ConstraintIndex(InConstraintIndex)"
  },
  {
    "label": "FIndexedConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FIndexedConstraintHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetConstraintIndex()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (ConstraintIndex = InConstraintIndex ; } const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FIndexedConstraintHandle\"), &FConstraintHandle::StaticType())"
  },
  {
    "label": "TIndexedContainerConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIndexedContainerConstraintHandle(FConstraintContainer* InConstraintContainer, int32 InConstraintIndex) : FIndexedConstraintHandle(InConstraintContainer, InConstraintIndex)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bInEnabled)"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcreteContainer()->SetConstraintEnabled(ConstraintIndex, bInEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "RemoveConstraint()"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcreteContainer()->RemoveConstraint(ConstraintIndex)"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (} protected : FConstraintContainer*)",
    "insertText": "ConcreteContainer()"
  },
  {
    "label": "TIndexedConstraintContainerSolver()",
    "kind": "Method",
    "detail": "Function (} using Base::ConstraintIndex ; } ; template<ConstraintContainerType> class TIndexedConstraintContainerSolver : public FConstraintContainerSolver { public : using FConstraintContainerType = ConstraintContainerType ; using FConstraintHandleType = FConstraintContainerType::FConstraintContainerHandle ;)",
    "insertText": "TIndexedConstraintContainerSolver(FConstraintContainerType& InConstraintContainer, const int32 InPriority) : FConstraintContainerSolver(InPriority) , ConstraintContainer(InConstraintContainer)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const int32 MaxConstraints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ConstraintIndices .)",
    "insertText": "Reset(MaxConstraints)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraints(const TArrayView<Private::FPBDIslandConstraint*>& IslandConstraints)"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (const FIndexedConstraintHandle* IndexedConstraintHandle = IslandConstraint ->)",
    "insertText": "GetConstraint()->AsUnsafe<FIndexedConstraintHandle>()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintIndices .)",
    "insertText": "Add(ConstraintIndex)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "AddBodies(ConstraintIndices, SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "GatherInput(ConstraintIndices, Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 RangeSize = EndIndex - BeginIndex ;)",
    "insertText": "if(RangeSize > 0)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (TArrayView<int32> RangeIndices =)",
    "insertText": "MakeArrayView(&ConstraintIndices[BeginIndex], RangeSize)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "GatherInput(RangeIndices, Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ScatterOutput(ConstraintIndices, Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ScatterOutput(RangeIndices, Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyPositionConstraints(ConstraintIndices, Dt, It, NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyVelocityConstraints(ConstraintIndices, Dt, It, NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyProjectionConstraints(ConstraintIndices, Dt, It, NumIts)"
  },
  {
    "label": "FPBDIndexedConstraintContainer()",
    "kind": "Method",
    "detail": "Function (} private : FConstraintContainerType& ConstraintContainer ; TArray<int32> ConstraintIndices ; } ; class FPBDIndexedConstraintContainer : public FPBDConstraintContainer { public :)",
    "insertText": "FPBDIndexedConstraintContainer(FConstraintHandleTypeID InType) : FPBDConstraintContainer(InType)"
  },
  {
    "label": "SetConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConstraintEnabled(int32 ConstraintIndex, bool bEnabled)"
  },
  {
    "label": "IsConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConstraintEnabled(int32 ConstraintIndex)"
  },
  {
    "label": "SetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConstraintIndex(FIndexedConstraintHandle* ConstraintHandle, int32 ConstraintIndex)"
  },
  {
    "label": "TPBDIndexedConstraintContainer()",
    "kind": "Method",
    "detail": "Function (ConstraintHandle -> ConstraintIndex = ConstraintIndex ; } } ; template<ConstaintContainerType> class TPBDIndexedConstraintContainer : public FPBDIndexedConstraintContainer { public : using FConstaintContainerType = ConstaintContainerType ;)",
    "insertText": "TPBDIndexedConstraintContainer(FConstraintHandleTypeID InType) : FPBDIndexedConstraintContainer(InType)"
  },
  {
    "label": "CreateSceneSolver()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateSceneSolver(const int32 Priority)"
  },
  {
    "label": "CreateGroupSolver()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateGroupSolver(const int32 Priority)"
  }
]