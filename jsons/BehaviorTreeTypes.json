[
  {
    "label": "FBlackboardDecoratorDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlackboardDecoratorDetails"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBehaviorTreeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeComponent"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UBlackboardKeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardKeyType"
  },
  {
    "label": "UBTAuxiliaryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTAuxiliaryNode"
  },
  {
    "label": "UBTCompositeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTCompositeNode"
  },
  {
    "label": "UBTNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTNode"
  },
  {
    "label": "UBTTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTaskNode"
  },
  {
    "label": "FBehaviorTreeSearchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeSearchData"
  },
  {
    "label": "TIsValidVariadicFunctionArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsValidVariadicFunctionArg"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBehaviorTreeParallelTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeParallelTask"
  },
  {
    "label": "FBehaviorTreeDebuggerInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeDebuggerInstance"
  },
  {
    "label": "FNodeFlowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeFlowData"
  },
  {
    "label": "FBehaviorTreeExecutionStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeExecutionStep"
  },
  {
    "label": "FBehaviorTreeInstanceId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeInstanceId"
  },
  {
    "label": "FBehaviorTreeInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeInstance"
  },
  {
    "label": "FBTNodeIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTNodeIndex"
  },
  {
    "label": "FBTNodeIndexRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTNodeIndexRange"
  },
  {
    "label": "FBehaviorTreeSearchUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeSearchUpdate"
  },
  {
    "label": "FBehaviorTreeSearchUpdateNotify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeSearchUpdateNotify"
  },
  {
    "label": "FBehaviorTreePropertyMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreePropertyMemory"
  },
  {
    "label": "FBlackboardKeySelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlackboardKeySelector"
  },
  {
    "label": "UBehaviorTreeTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeTypes"
  },
  {
    "label": "FScopedBTLoggingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedBTLoggingContext"
  },
  {
    "label": "BT_VLOG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Blackboard / BlackboardKey . h \" # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" BehaviorTreeTypes . generated . h \" class FBlackboardDecoratorDetails ; class UBehaviorTree ; class UBehaviorTreeComponent ; class UBlackboardComponent ; class UBlackboardData ; class UBlackboardKeyType ; class UBTAuxiliaryNode ; class UBTCompositeNode ; class UBTNode ; class UBTTaskNode ; struct FBehaviorTreeSearchData ; # define)",
    "insertText": "BT_VLOG(Context, Verbosity, Format, ...) UE_VLOG(Context->OwnerComp.IsValid() ? Context->OwnerComp->GetOwner() : NULL, LogBehaviorTree, Verbosity, Format, ##__VA_ARGS__) #define BT_SEARCHLOG(SearchData, Verbosity, Format, ...) UE_VLOG(SearchData.OwnerComp.GetOwner(), LogBehaviorTree, Verbosity, Format, ##__VA_ARGS__) #define USE_BEHAVIORTREE_DEBUGGER (1 && WITH_EDITORONLY_DATA) DECLARE_STATS_GROUP(TEXT(\"Behavior Tree\"), STATGROUP_AIBehaviorTree, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Tick\"),STAT_AI_BehaviorTree_Tick,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Load Time\"),STAT_AI_BehaviorTree_LoadTime,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Search Time\"),STAT_AI_BehaviorTree_SearchTime,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Execution Time\"),STAT_AI_BehaviorTree_ExecutionTime,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Auxiliary Update Time\"),STAT_AI_BehaviorTree_AuxUpdateTime,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Cleanup Time\"), STAT_AI_BehaviorTree_Cleanup, STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BT Stop Tree Time\"), STAT_AI_BehaviorTree_StopTree, STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Templates\"),STAT_AI_BehaviorTree_NumTemplates,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Instances\"),STAT_AI_BehaviorTree_NumInstances,STATGROUP_AIBehaviorTree,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Instance memory\"),STAT_AI_BehaviorTree_InstanceMemory,STATGROUP_AIBehaviorTree, AIMODULE_API)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# ifndef AI_BLACKBOARD_KEY_SIZE_8 template<> struct TIsValidVariadicFunctionArg<FBlackboard::FKey> { enum { Value = true } ; } ; # endif enum class EBlackboardNotificationResult : uint8 { RemoveObserver,ContinueObserving } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnBlackboardChange, const UBlackboardComponent&, FBlackboard::FKey)"
  },
  {
    "label": "EBlackboardNotificationResult()",
    "kind": "Method",
    "detail": "Function (using FOnBlackboardChangeNotification = TDelegate<)",
    "insertText": "EBlackboardNotificationResult(const UBlackboardComponent&, FBlackboard::FKey keyID)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (namespace BTSpecialChild { int32 NotInitialized = - 1 ; int32 ReturnToParent = - 2 ; uint8 OwnedByComposite = MAX_uint8 ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Succeeded,Failed,Aborted,InProgress,} ; } namespace EBTExecutionMode { enum Type { SingleRun,Looped,} ; } namespace EBTStopMode { enum Type { Safe,Forced,} ; } enum class EBTRestartMode : uint8 { ForceReevaluateRootNode,CompleteRestart,} ; namespace EBTMemoryInit { enum Type { Initialize,RestoreSubtree,} ; } namespace EBTMemoryClear { enum Type { Destroy,StoreSubtree,} ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None)",
    "insertText": "UMETA(DisplayName=\"Nothing\"), LowerPriority UMETA(DisplayName=\"Lower Priority\"), Self UMETA(DisplayName=\"Self\"), Both UMETA(DisplayName=\"Both\")"
  },
  {
    "label": "FBehaviorTreeParallelTask()",
    "kind": "Method",
    "detail": "Function (} namespace EBTActiveNode { enum Type { Composite,ActiveTask,AbortingTask,InactiveTask,} ; } namespace EBTTaskStatus { enum Type { Active,Aborting,Inactive,} ; } namespace EBTNodeUpdateMode { enum Type { Unknown,Add,Remove,} ; } struct FBehaviorTreeParallelTask { const UBTTaskNode* TaskNode ; EBTTaskStatus::Type Status ;)",
    "insertText": "FBehaviorTreeParallelTask() : TaskNode(nullptr)"
  },
  {
    "label": "FBehaviorTreeParallelTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreeParallelTask(const UBTTaskNode* InTaskNode, EBTTaskStatus::Type InStatus) : TaskNode(InTaskNode), Status(InStatus)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBehaviorTreeParallelTask& Other)"
  },
  {
    "label": "FBehaviorTreeDebuggerInstance()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FBehaviorTreeDebuggerInstance() : TreeAsset(nullptr), RootNode(nullptr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} UBehaviorTree* TreeAsset ; UBTCompositeNode* RootNode ; TArray<uint16> ActivePath ; TArray<uint16> AdditionalActiveNodes ; TArray<FNodeFlowData> PathFromPrevious ; TArray<FString> RuntimeDesc ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FBehaviorTreeExecutionStep()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBehaviorTreeExecutionStep {)",
    "insertText": "FBehaviorTreeExecutionStep() : TimeStamp(0.), ExecutionStepId(InvalidExecutionId)"
  },
  {
    "label": "FBehaviorTreeInstanceId()",
    "kind": "Method",
    "detail": "Function (} TArray<FBehaviorTreeDebuggerInstance> InstanceStack ; TMap<FName,FString> BlackboardValues ; double TimeStamp ; int32 InvalidExecutionId = - 1 ; int32 ExecutionStepId ; bool bIsExecutionPaused = false ; } ; struct FBehaviorTreeInstanceId { UBehaviorTree* TreeAsset ; UBTCompositeNode* RootNode ; TArray<uint16> Path ; TArray<uint8> InstanceMemory ; int32 FirstNodeInstance ;)",
    "insertText": "FBehaviorTreeInstanceId() : TreeAsset(0), RootNode(0), FirstNodeInstance(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBehaviorTreeInstanceId& Other)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBehaviorTreeSearchData ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FBTInstanceDeactivation, UBehaviorTreeComponent&, EBTNodeResult::Type)"
  },
  {
    "label": "FBehaviorTreeInstance()",
    "kind": "Method",
    "detail": "Function (struct FBehaviorTreeInstance { UBTCompositeNode* RootNode ; UBTNode* ActiveNode ; TArray<UBTAuxiliaryNode*> ActiveAuxNodes ; TArray<FBehaviorTreeParallelTask> ParallelTasks ; TArray<uint8> InstanceMemory ; uint8 InstanceIdIndex ; TEnumAsByte<EBTActiveNode::Type> ActiveNodeType ; FBTInstanceDeactivation DeactivationNotify ;)",
    "insertText": "FBehaviorTreeInstance()"
  },
  {
    "label": "FBehaviorTreeInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBehaviorTreeInstance(FBehaviorTreeInstance&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBehaviorTreeInstance&)",
    "insertText": "operator(FBehaviorTreeInstance&& Other)"
  },
  {
    "label": "FBehaviorTreeInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBehaviorTreeInstance(int32 MemorySize)"
  },
  {
    "label": "IncMemoryStats()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "IncMemoryStats()"
  },
  {
    "label": "DecMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecMemoryStats()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Initialize(UBehaviorTreeComponent& OwnerComp, UBTCompositeNode& Node, int32& InstancedIndex, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(UBehaviorTreeComponent& OwnerComp, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "HasActiveNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveNode(uint16 TestExecutionIndex)"
  },
  {
    "label": "DeactivateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateNodes(FBehaviorTreeSearchData& SearchData, uint16 InstanceIndex)"
  },
  {
    "label": "GetActiveAuxNodes()",
    "kind": "Method",
    "detail": "Function (TArrayView<UBTAuxiliaryNode* const>)",
    "insertText": "GetActiveAuxNodes()"
  },
  {
    "label": "AddToActiveAuxNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToActiveAuxNodes(UBehaviorTreeComponent& OwnerComp, UBTAuxiliaryNode* AuxNode)"
  },
  {
    "label": "RemoveFromActiveAuxNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveAuxNodes(UBehaviorTreeComponent& OwnerComp, UBTAuxiliaryNode* AuxNode)"
  },
  {
    "label": "ResetActiveAuxNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetActiveAuxNodes()"
  },
  {
    "label": "ExecuteOnEachAuxNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOnEachAuxNode(TFunctionRef<void(const UBTAuxiliaryNode&)> ExecFunc)"
  },
  {
    "label": "GetParallelTasks()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FBehaviorTreeParallelTask>)",
    "insertText": "GetParallelTasks()"
  },
  {
    "label": "RemoveParallelTaskAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParallelTaskAt(int32 TaskIndex)"
  },
  {
    "label": "MarkParallelTaskAsAbortingAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkParallelTaskAsAbortingAt(int32 TaskIndex)"
  },
  {
    "label": "IsValidParallelTaskIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidParallelTaskIndex(const int32 Index)"
  },
  {
    "label": "ExecuteOnEachParallelTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteOnEachParallelTask(TFunctionRef<void(const FBehaviorTreeParallelTask&, const int32)> ExecFunc)"
  },
  {
    "label": "SetInstanceMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceMemory(const TArray<uint8>& Memory)"
  },
  {
    "label": "GetInstanceMemory()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "GetInstanceMemory()"
  },
  {
    "label": "AddToActiveAuxNodesImpl()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddToActiveAuxNodesImpl(UBTAuxiliaryNode* AuxNode)"
  },
  {
    "label": "RemoveFromActiveAuxNodesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveAuxNodesImpl(UBTAuxiliaryNode* AuxNode)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (private : # if DO_ENSURE bool bIteratingNodes = false ; int32 ParallelTaskIndex = INDEX_NONE ; # endif } ; struct FBTNodeIndex { uint16 InvalidIndex = TNumericLimits<uint16)",
    "insertText": "Max()"
  },
  {
    "label": "FBTNodeIndex()",
    "kind": "Method",
    "detail": "Function (uint16 InstanceIndex ; uint16 ExecutionIndex ;)",
    "insertText": "FBTNodeIndex() : InstanceIndex(InvalidIndex), ExecutionIndex(InvalidIndex)"
  },
  {
    "label": "FBTNodeIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBTNodeIndex(uint16 InInstanceIndex, uint16 InExecutionIndex) : InstanceIndex(InInstanceIndex), ExecutionIndex(InExecutionIndex)"
  },
  {
    "label": "TakesPriorityOver()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TakesPriorityOver(const FBTNodeIndex& Other)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FBTNodeIndex& Other)"
  },
  {
    "label": "FBTNodeIndexRange()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBTNodeIndexRange { FBTNodeIndex FromIndex ; FBTNodeIndex ToIndex ;)",
    "insertText": "FBTNodeIndexRange(const FBTNodeIndex& From, const FBTNodeIndex& To) : FromIndex(From), ToIndex(To)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBTNodeIndexRange& Other)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FBTNodeIndex& Index)"
  },
  {
    "label": "FBehaviorTreeSearchUpdate()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBehaviorTreeSearchUpdate { UBTAuxiliaryNode* AuxNode ; UBTTaskNode* TaskNode ; uint16 InstanceIndex ; TEnumAsByte<EBTNodeUpdateMode::Type> Mode ; uint8 bPostUpdate : 1 ; uint8 bApplySkipped : 1 ;)",
    "insertText": "FBehaviorTreeSearchUpdate() : AuxNode(0), TaskNode(0), InstanceIndex(0), Mode(EBTNodeUpdateMode::Unknown), bPostUpdate(false), bApplySkipped(false)"
  },
  {
    "label": "FBehaviorTreeSearchUpdate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreeSearchUpdate(const UBTAuxiliaryNode* InAuxNode, uint16 InInstanceIndex, EBTNodeUpdateMode::Type InMode) : AuxNode((UBTAuxiliaryNode*)InAuxNode), TaskNode(0), InstanceIndex(InInstanceIndex), Mode(InMode), bPostUpdate(false), bApplySkipped(false)"
  },
  {
    "label": "FBehaviorTreeSearchUpdate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreeSearchUpdate(const UBTTaskNode* InTaskNode, uint16 InInstanceIndex, EBTNodeUpdateMode::Type InMode) : AuxNode(0), TaskNode((UBTTaskNode*)InTaskNode), InstanceIndex(InInstanceIndex), Mode(InMode), bPostUpdate(false), bApplySkipped(false)"
  },
  {
    "label": "FBehaviorTreeSearchUpdateNotify()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBehaviorTreeSearchUpdateNotify { uint16 InstanceIndex ; TEnumAsByte<EBTNodeResult::Type> NodeResult ;)",
    "insertText": "FBehaviorTreeSearchUpdateNotify() : InstanceIndex(0), NodeResult(EBTNodeResult::Succeeded)"
  },
  {
    "label": "FBehaviorTreeSearchUpdateNotify()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreeSearchUpdateNotify(uint16 InInstanceIndex, EBTNodeResult::Type InNodeResult) : InstanceIndex(InInstanceIndex), NodeResult(InNodeResult)"
  },
  {
    "label": "AddUniqueUpdate()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBehaviorTreeSearchData { UBehaviorTreeComponent& OwnerComp ; TArray<FBehaviorTreeSearchUpdate> PendingUpdates ; TArray<FBehaviorTreeSearchUpdateNotify> PendingNotifies ; FBTNodeIndex SearchRootNode ; FBTNodeIndex SearchStart ; FBTNodeIndex SearchEnd ; int32 SearchId ; int32 RollbackInstanceIdx ; FBTNodeIndex DeactivatedBranchStart ; FBTNodeIndex DeactivatedBranchEnd ; FBTNodeIndex RollbackDeactivatedBranchStart ; FBTNodeIndex RollbackDeactivatedBranchEnd ; uint32 bFilterOutRequestFromDeactivatedBranch : 1 ; uint32 bPostponeSearch : 1 ; uint32 bSearchInProgress : 1 ; uint32 bPreserveActiveNodeMemoryOnRollback : 1 ; void)",
    "insertText": "AddUniqueUpdate(const FBehaviorTreeSearchUpdate& UpdateInfo)"
  },
  {
    "label": "AssignSearchId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSearchId()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FBehaviorTreeSearchData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBehaviorTreeSearchData(UBehaviorTreeComponent& InOwnerComp) : OwnerComp(InOwnerComp), RollbackInstanceIdx(INDEX_NONE) , bFilterOutRequestFromDeactivatedBranch(false) , bPostponeSearch(false) , bSearchInProgress(false) , bPreserveActiveNodeMemoryOnRollback(false)"
  },
  {
    "label": "FBehaviorTreeSearchData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreeSearchData()"
  },
  {
    "label": "FBehaviorTreePropertyMemory()",
    "kind": "Method",
    "detail": "Function (private : int32 NextSearchId ; } ; struct FBehaviorTreePropertyMemory { uint16 Offset ; uint16 BlockSize ;)",
    "insertText": "FBehaviorTreePropertyMemory()"
  },
  {
    "label": "FBehaviorTreePropertyMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBehaviorTreePropertyMemory(int32 Value) : Offset((uint32)Value >> 16), BlockSize((uint32)Value & 0xFFFF)"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Pack()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FBlackboardKeySelector() : SelectedKeyID(FBlackboard::InvalidKey), bNoneIsAllowedValue(false)"
  },
  {
    "label": "InitSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSelection(const UBlackboardData& BlackboardAsset)"
  },
  {
    "label": "ResolveSelectedKey()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ResolveSelectedKey(const UBlackboardData& BlackboardAsset)"
  },
  {
    "label": "AllowNoneAsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowNoneAsValue(bool bAllow)"
  },
  {
    "label": "GetSelectedKeyID()",
    "kind": "Method",
    "detail": "Function (bNoneIsAllowedValue = bAllow ; } FBlackboard::FKey)",
    "insertText": "GetSelectedKeyID()"
  },
  {
    "label": "AddObjectFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddObjectFilter(UObject* Owner, FName PropertyName, TSubclassOf<UObject> AllowedClass)"
  },
  {
    "label": "AddClassFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClassFilter(UObject* Owner, FName PropertyName, TSubclassOf<UObject> AllowedClass)"
  },
  {
    "label": "AddEnumFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnumFilter(UObject* Owner, FName PropertyName, UEnum* AllowedEnum)"
  },
  {
    "label": "AddNativeEnumFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeEnumFilter(UObject* Owner, FName PropertyName, const FString& AllowedEnumName)"
  },
  {
    "label": "AddIntFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIntFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddFloatFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloatFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddBoolFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddVectorFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVectorFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddRotatorFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRotatorFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddStringFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStringFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddNameFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNameFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddStructFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructFilter(UObject* Owner, FName PropertyName, const UScriptStruct* AllowedStruct)"
  },
  {
    "label": "AddStructFilter()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddStructFilter(UObject* Owner, FName PropertyName)"
  },
  {
    "label": "AddStructFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructFilter(Owner, PropertyName, TBaseStructure<T>::Get())"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNone()"
  },
  {
    "label": "NeedsResolving()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsResolving()"
  },
  {
    "label": "InvalidateResolvedKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateResolvedKey()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (SelectedKeyID = FBlackboard::InvalidKey ; } FBlackboardDecoratorDetails ; } ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "DescribeNodeHelper()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "DescribeNodeHelper(const UBTNode* Node)"
  },
  {
    "label": "DescribeNodeResult()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeNodeResult(EBTNodeResult::Type NodeResult)"
  },
  {
    "label": "DescribeFlowAbortMode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeFlowAbortMode(EBTFlowAbortMode::Type FlowAbortMode)"
  },
  {
    "label": "DescribeActiveNode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeActiveNode(EBTActiveNode::Type ActiveNodeType)"
  },
  {
    "label": "DescribeTaskStatus()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeTaskStatus(EBTTaskStatus::Type TaskStatus)"
  },
  {
    "label": "DescribeNodeUpdateMode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeNodeUpdateMode(EBTNodeUpdateMode::Type UpdateMode)"
  },
  {
    "label": "GetShortTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShortTypeName(const UObject* Ob)"
  },
  {
    "label": "GetBTLoggingContext()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBTLoggingContext()"
  },
  {
    "label": "FScopedBTLoggingContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedBTLoggingContext {)",
    "insertText": "FScopedBTLoggingContext()"
  },
  {
    "label": "FScopedBTLoggingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedBTLoggingContext(const UBTNode* Context)"
  },
  {
    "label": "SetBTLoggingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBTLoggingContext(Context)"
  },
  {
    "label": "SetBTLoggingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBTLoggingContext(nullptr)"
  }
]