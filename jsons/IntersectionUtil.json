[
  {
    "label": "FLinearIntersection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearIntersection"
  },
  {
    "label": "RayTriangleTest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" BoxTypes . h \" namespace UE { namespace Geometry { struct FLinearIntersection { bool intersects ; int numIntersections ; FInterval1d parameter ; } ; } } namespace IntersectionUtil { using namespace UE::Math ; using namespace UE::Geometry ; template<RealType> bool)",
    "insertText": "RayTriangleTest(const TVector<RealType>& RayOrigin, const TVector<RealType>& RayDirection, const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> diff = RayOrigin - V0 ; TVector<RealType> edge1 = V1 - V0 ; TVector<RealType> edge2 = V2 - V0 ; TVector<RealType> normal = edge1 .)",
    "insertText": "Cross(edge2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType DdN = RayDirection .)",
    "insertText": "Dot(normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType sign ;)",
    "insertText": "if(DdN > TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sign = 1 ; } else)",
    "insertText": "if(DdN < -TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (sign = - 1 ; DdN = - DdN ; } else { return false ; } RealType DdQxE2 = sign* RayDirection .)",
    "insertText": "Dot(diff.Cross(edge2))"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType DdE1xQ = sign* RayDirection .)",
    "insertText": "Dot(edge1.Cross(diff))"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> diff = LineOrigin - SphereCenter ; RealType a0 = diff .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType a1 = LineDirection .)",
    "insertText": "Dot(diff)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (RealType discr = a1* a1 - a0 ;)",
    "insertText": "return(discr >= 0)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "LineSphereIntersection(const TVector<RealType>& LineOrigin, const TVector<RealType>& LineDirection, const TVector<RealType>& SphereCenter, RealType SphereRadius, FLinearIntersection& ResultOut)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType discr = a1* a1 - a0 ;)",
    "insertText": "if(discr > 0)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (ResultOut . intersects = true ; ResultOut . numIntersections = 2 ; RealType root =)",
    "insertText": "Sqrt(discr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ResultOut . parameter . Min = - a1 - root ; ResultOut . parameter . Max = - a1 + root ; } else)",
    "insertText": "if(discr < 0)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (ResultOut . intersects = false ; ResultOut . numIntersections = 0 ; } else { ResultOut . intersects = true ; ResultOut . numIntersections = 1 ; ResultOut . parameter . Min = - a1 ; ResultOut . parameter . Max = - a1 ; } return ResultOut . intersects ; } template<RealType> FLinearIntersection)",
    "insertText": "LineSphereIntersection(const TVector<RealType>& LineOrigin, const TVector<RealType>& LineDirection, const TVector<RealType>& SphereCenter, RealType SphereRadius)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (FLinearIntersection result ;)",
    "insertText": "LineSphereIntersection(LineOrigin, LineDirection, SphereCenter, SphereRadius, result)"
  },
  {
    "label": "RaySphereIntersection()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "RaySphereIntersection(const TVector<RealType>& RayOrigin, const TVector<RealType>& RayDirection, const TVector<RealType>& SphereCenter, RealType SphereRadius, FLinearIntersection& Result)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LineSphereIntersection(RayOrigin, RayDirection, SphereCenter, SphereRadius, Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result . intersects = false ; Result . numIntersections = 0 ; } else)",
    "insertText": "if(Result.parameter.Min < 0)"
  },
  {
    "label": "RaySphereIntersection()",
    "kind": "Method",
    "detail": "Function (Result . numIntersections - - ; Result . parameter . Min = Result . parameter . Max ; } } return Result . intersects ; } template<RealType> FLinearIntersection)",
    "insertText": "RaySphereIntersection(const TVector<RealType>& RayOrigin, const TVector<RealType>& RayDirection, const TVector<RealType>& SphereCenter, RealType SphereRadius)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (FLinearIntersection result ;)",
    "insertText": "LineSphereIntersection(RayOrigin, RayDirection, SphereCenter, SphereRadius, result)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (Result . intersects = false ; Result . numIntersections = 0 ; return false ; } TPlane<RealType>)",
    "insertText": "Plane(CircleCenter, CircleNormal)"
  },
  {
    "label": "RayPlaneIntersectionParam()",
    "kind": "Method",
    "detail": "Function (RealType Param =)",
    "insertText": "RayPlaneIntersectionParam(RayOrigin, RayDirection, Plane)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result . intersects = false ; Result . numIntersections = 0 ; return false ; } TVector<RealType> HitPoint = RayOrigin + RayDirection* Param ; TVector<RealType> Offset = HitPoint - CircleCenter ; const RealType CircleRadiusSquared = CircleRadius* CircleRadius ;)",
    "insertText": "if(Offset.SizeSquared() <= CircleRadiusSquared)"
  }
]