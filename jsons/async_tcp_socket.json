[
  {
    "label": "AsyncTCPSocketBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncTCPSocketBase"
  },
  {
    "label": "AsyncTCPSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncTCPSocket"
  },
  {
    "label": "AsyncTcpListenSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncTcpListenSocket"
  },
  {
    "label": "AsyncTCPSocketBase()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_ASYNC_TCP_SOCKET_H_ # define RTC_BASE_ASYNC_TCP_SOCKET_H_ # include<stddef . h> # include<memory> # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" namespace rtc { class AsyncTCPSocketBase : public AsyncPacketSocket { public :)",
    "insertText": "AsyncTCPSocketBase(Socket* socket, size_t max_packet_size)"
  },
  {
    "label": "AsyncTCPSocketBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AsyncTCPSocketBase()"
  },
  {
    "label": "AsyncTCPSocketBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncTCPSocketBase(const AsyncTCPSocketBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncTCPSocketBase&)",
    "insertText": "operator(const AsyncTCPSocketBase&)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb, const rtc::PacketOptions& options)"
  },
  {
    "label": "ProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInput(char* data, size_t* len)"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr, const rtc::PacketOptions& options)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (State)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(Socket::Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Socket::Option opt, int value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "ConnectSocket()",
    "kind": "Method",
    "detail": "Function (protected : Socket*)",
    "insertText": "ConnectSocket(Socket* socket, const SocketAddress& bind_address, const SocketAddress& remote_address)"
  },
  {
    "label": "FlushOutBuffer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FlushOutBuffer()"
  },
  {
    "label": "AppendToOutBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToOutBuffer(const void* pv, size_t cb)"
  },
  {
    "label": "IsOutBufferEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutBufferEmpty()"
  },
  {
    "label": "ClearOutBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearOutBuffer()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (outbuf_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "OnConnectEvent()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnConnectEvent(Socket* socket)"
  },
  {
    "label": "OnReadEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadEvent(Socket* socket)"
  },
  {
    "label": "OnWriteEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWriteEvent(Socket* socket)"
  },
  {
    "label": "OnCloseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseEvent(Socket* socket, int error)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Socket> socket_ ; Buffer inbuf_ ; Buffer outbuf_ ; size_t max_insize_ ; size_t max_outsize_ ; } ; class AsyncTCPSocket : public AsyncTCPSocketBase { public : AsyncTCPSocket*)",
    "insertText": "Create(Socket* socket, const SocketAddress& bind_address, const SocketAddress& remote_address)"
  },
  {
    "label": "AsyncTCPSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncTCPSocket(Socket* socket)"
  },
  {
    "label": "AsyncTCPSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AsyncTCPSocket()"
  },
  {
    "label": "AsyncTCPSocket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsyncTCPSocket(const AsyncTCPSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncTCPSocket&)",
    "insertText": "operator(const AsyncTCPSocket&)"
  },
  {
    "label": "AsyncTcpListenSocket()",
    "kind": "Method",
    "detail": "Function (} ; class AsyncTcpListenSocket : public AsyncListenSocket { public :)",
    "insertText": "AsyncTcpListenSocket(std::unique_ptr<Socket> socket)"
  },
  {
    "label": "HandleIncomingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleIncomingConnection(rtc::Socket* socket)"
  }
]