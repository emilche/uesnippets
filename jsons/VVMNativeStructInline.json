[
  {
    "label": "CppStructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CppStructType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (template<class CppStructType> CppStructType&)",
    "insertText": "GetStruct()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} template<class CppStructType> VNativeStruct&)",
    "insertText": "New(FAllocationContext Context, VEmergentType& InEmergentType, CppStructType&& InStruct)"
  },
  {
    "label": "NewUninitialized()",
    "kind": "Method",
    "detail": "Function (} VNativeStruct&)",
    "insertText": "NewUninitialized(FAllocationContext Context, VEmergentType& InEmergentType, bool bRunCppConstructor)"
  },
  {
    "label": "AllocateCell()",
    "kind": "Method",
    "detail": "Function (} std::byte*)",
    "insertText": "AllocateCell(FAllocationContext Context, VEmergentType& InEmergentType)"
  },
  {
    "label": "GetUScriptStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct::ICppStructOps* CppStructOps =)",
    "insertText": "GetUScriptStruct(InEmergentType)->GetCppStructOps()"
  },
  {
    "label": "DataOffset()",
    "kind": "Method",
    "detail": "Function (const size_t ByteSize =)",
    "insertText": "DataOffset(*InEmergentType.CppClassInfo) + CppStructOps->GetSize()"
  },
  {
    "label": "HasDestructor()",
    "kind": "Method",
    "detail": "Function (const bool bHasDestructor = CppStructOps ->)",
    "insertText": "HasDestructor()"
  },
  {
    "label": "GetUScriptStruct()",
    "kind": "Method",
    "detail": "Function (} UScriptStruct*)",
    "insertText": "GetUScriptStruct(VEmergentType& EmergentType)"
  },
  {
    "label": "VNativeStruct()",
    "kind": "Method",
    "detail": "Function (} template<class CppStructType>)",
    "insertText": "VNativeStruct(FAllocationContext Context, VEmergentType& InEmergentType, CppStructType&& InStruct) : VObject(Context, InEmergentType)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (using StructType = TDecay<CppStructType>::Type ;)",
    "insertText": "checkSlow(sizeof(StructType) == GetUScriptStruct(InEmergentType)->GetCppStructOps()->GetSize())"
  },
  {
    "label": "SetIsStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsStruct()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (void* Data =)",
    "insertText": "GetData(*InEmergentType.CppClassInfo)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) StructType(Forward<CppStructType>(InStruct))"
  },
  {
    "label": "VNativeStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VNativeStruct(FAllocationContext Context, VEmergentType& InEmergentType, bool bRunCppConstructor) : VObject(Context, InEmergentType)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(Data, 0, CppStructOps->GetSize())"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} else { CppStructOps ->)",
    "insertText": "Construct(Data)"
  },
  {
    "label": "VNativeStruct()",
    "kind": "Method",
    "detail": "Function (} } } VNativeStruct::~)",
    "insertText": "VNativeStruct()"
  },
  {
    "label": "GetEmergentType()",
    "kind": "Method",
    "detail": "Function (VEmergentType* EmergentType =)",
    "insertText": "GetEmergentType()"
  },
  {
    "label": "GetUScriptStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct::ICppStructOps* CppStructOps =)",
    "insertText": "GetUScriptStruct(*EmergentType)->GetCppStructOps()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (CppStructOps ->)",
    "insertText": "Destruct(VObject::GetData(*EmergentType->CppClassInfo))"
  }
]