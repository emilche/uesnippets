[
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "data"
  },
  {
    "label": "target()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "target(\"The quick brown fox jumps over the lazy dog.\")"
  },
  {
    "label": "pattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "pattern(\"fox\")"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffset(int32_t position, UErrorCode &status)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const UnicodeString &text, UErrorCode &status)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(CharacterIterator &text, UErrorCode &status)"
  },
  {
    "label": "setCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCollator(RuleBasedCollator *coll, UErrorCode &status)"
  },
  {
    "label": "setPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPattern(const UnicodeString &pattern, UErrorCode &status)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "handleNext()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handleNext(int32_t position, UErrorCode &status)"
  },
  {
    "label": "handlePrev()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handlePrev(int32_t position, UErrorCode &status)"
  }
]