[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (# ifndef STSEARCH_H # define STSEARCH_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_COLLATION&& ! UCONFIG_NO_BREAK_ITERATION # include \" unicode / tblcoll . h \" # include \" unicode / coleitr . h \" # include \" unicode / search . h \" U_NAMESPACE_BEGIN class U_I18N_API StringSearch U_FINAL : public SearchIterator { public :)",
    "insertText": "StringSearch(const UnicodeString &pattern, const UnicodeString &text, const Locale &locale, BreakIterator *breakiter, UErrorCode &status)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringSearch(const UnicodeString &pattern, const UnicodeString &text, RuleBasedCollator *coll, BreakIterator *breakiter, UErrorCode &status)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringSearch(const UnicodeString &pattern, CharacterIterator &text, const Locale &locale, BreakIterator *breakiter, UErrorCode &status)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringSearch(const UnicodeString &pattern, CharacterIterator &text, RuleBasedCollator *coll, BreakIterator *breakiter, UErrorCode &status)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringSearch(const StringSearch &that)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StringSearch(void)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (StringSearch*)",
    "insertText": "clone()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringSearch&)",
    "insertText": "operator(const StringSearch &that)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const SearchIterator &that)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffset(int32_t position, UErrorCode &status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(void)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const UnicodeString &text, UErrorCode &status)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(CharacterIterator &text, UErrorCode &status)"
  },
  {
    "label": "getCollator()",
    "kind": "Method",
    "detail": "Function (RuleBasedCollator*)",
    "insertText": "getCollator()"
  },
  {
    "label": "setCollator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCollator(RuleBasedCollator *coll, UErrorCode &status)"
  },
  {
    "label": "setPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPattern(const UnicodeString &pattern, UErrorCode &status)"
  },
  {
    "label": "getPattern()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getPattern()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "safeClone()",
    "kind": "Method",
    "detail": "Function (SearchIterator*)",
    "insertText": "safeClone(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "handleNext()",
    "kind": "Method",
    "detail": "Function (protected : int32_t)",
    "insertText": "handleNext(int32_t position, UErrorCode &status)"
  },
  {
    "label": "handlePrev()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "handlePrev(int32_t position, UErrorCode &status)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "StringSearch()"
  }
]