[
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "ObserverHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverHelper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFTESTS_TEST_SERVER_H_ # define CEF_TESTS_CEFTESTS_TEST_SERVER_H_ # pragma once # include<string> # include \" include / base / cef_callback . h \" # include \" include / cef_registration . h \" # include \" include / cef_request . h \" # include \" include / cef_response . h \" # include \" include / cef_server . h \" namespace test_server { const char kServerAddress [ ] ; const uint16 kServerPort ; const char kServerScheme [ ] ; const char kServerOrigin [ ] ; using DoneCallback = base::OnceClosure ; using StartDoneCallback = base::OnceCallback<)",
    "insertText": "void(const std::string& server_origin)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(StartDoneCallback callback)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(DoneCallback callback)"
  },
  {
    "label": "OnRegistered()",
    "kind": "Method",
    "detail": "Function (class Observer { public : void)",
    "insertText": "OnRegistered()"
  },
  {
    "label": "OnUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregistered()"
  },
  {
    "label": "OnClientConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnClientConnected(CefRefPtr<CefServer> server, int connection_id)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (} } ; CefRefPtr<CefRegistration>)",
    "insertText": "AddObserver(Observer* observer, DoneCallback callback)"
  },
  {
    "label": "AddObserverAndStart()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRegistration>)",
    "insertText": "AddObserverAndStart(Observer* observer, StartDoneCallback callback)"
  },
  {
    "label": "SendResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendResponse(CefRefPtr<CefServer> server, int connection_id, CefRefPtr<CefResponse> response, const std::string& response_data)"
  },
  {
    "label": "ObserverHelper()",
    "kind": "Method",
    "detail": "Function (class ObserverHelper : Observer { public :)",
    "insertText": "ObserverHelper()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "OnInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialized(const std::string& server_origin)"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "OnStartDone()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnStartDone(const std::string& server_origin)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRegistration> registration_ ; enum class State { NONE,INITIALIZING,INITIALIZED,SHUTTINGDOWN,} state_ = State::NONE ; base::WeakPtrFactory<ObserverHelper> weak_ptr_factory_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ObserverHelper)"
  }
]