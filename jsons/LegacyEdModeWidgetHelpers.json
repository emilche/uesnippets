[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "EModeTools",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EModeTools"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FLegacyEdModeWidgetHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyEdModeWidgetHelper"
  },
  {
    "label": "FEditorModeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeRegistry"
  },
  {
    "label": "UBaseLegacyWidgetEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBaseLegacyWidgetEdMode"
  },
  {
    "label": "FPropertyWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyWidgetInfo"
  },
  {
    "label": "FLegacyEdModeWidgetHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" Tools / LegacyEdModeInterfaces . h \" # include \" Tools / UEdMode . h \" # include \" LegacyEdModeWidgetHelpers . generated . h \" class FCanvas ; class FEditorModeTools ; class FEditorViewportClient ; class FModeTool ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; struct FConvexVolume ; enum EModeTools : int8 ; class HHitProxy ; struct FViewportClick ; class UObject ; class FLegacyEdModeWidgetHelper { class FEditorModeRegistry ; class UBaseLegacyWidgetEdMode ; public :)",
    "insertText": "FLegacyEdModeWidgetHelper()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "ShowModeWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowModeWidgets()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetNormalFromCurrentAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetNormalFromCurrentAxis(void* InData)"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis(EAxisList::Type InAxis)"
  },
  {
    "label": "GetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetCurrentWidgetAxis()"
  },
  {
    "label": "UsesPropertyWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesPropertyWidgets()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "AllowsViewportDragTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsViewportDragTool()"
  },
  {
    "label": "FPropertyWidgetInfo()",
    "kind": "Method",
    "detail": "Function (struct FPropertyWidgetInfo { FString PropertyName ; int32 PropertyIndex ; FName PropertyValidationName ; FString DisplayName ; bool bIsTransform ;)",
    "insertText": "FPropertyWidgetInfo() : PropertyIndex(INDEX_NONE) , bIsTransform(false)"
  },
  {
    "label": "GetTransformAndColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTransformAndColor(UObject* BestSelectedItem, bool bIsSelected, FTransform& OutLocalTransform, FString& OutValidationMessage, FColor& OutDrawColor)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "CanCreateWidgetForStructure()",
    "kind": "Method",
    "detail": "Function (const FName MD_MakeEditWidget ; const FName MD_ValidateWidgetUsing ; bool)",
    "insertText": "CanCreateWidgetForStructure(const UStruct* InPropStruct)"
  },
  {
    "label": "CanCreateWidgetForProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateWidgetForProperty(FProperty* InProp)"
  },
  {
    "label": "ShouldCreateWidgetForProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateWidgetForProperty(FProperty* InProp)"
  },
  {
    "label": "GetFirstSelectedActorInstance()",
    "kind": "Method",
    "detail": "Function (protected : AActor*)",
    "insertText": "GetFirstSelectedActorInstance()"
  },
  {
    "label": "GetPropertyWidgetInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPropertyWidgetInfos(const UStruct* InStruct, const void* InContainer, TArray<FPropertyWidgetInfo>& OutInfos)"
  },
  {
    "label": "GetItemToTryDisplayingWidgetsFor()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetItemToTryDisplayingWidgetsFor(FTransform& OutWidgetToWorld)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FString EditedPropertyName ; int32 EditedPropertyIndex ; bool bEditedPropertyIsTransform ; EAxisList::Type CurrentWidgetAxis ; FEditorModeTools* Owner ; TScriptInterface<ILegacyEdModeWidgetInterface> ParentModeInterface ; } ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNREALED_API virtual void Initialize()"
  },
  {
    "label": "CreateWidgetHelper()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FLegacyEdModeWidgetHelper>)",
    "insertText": "CreateWidgetHelper()"
  }
]