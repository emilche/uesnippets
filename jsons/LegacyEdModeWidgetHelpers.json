[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "EModeTools",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EModeTools"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FLegacyEdModeWidgetHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyEdModeWidgetHelper"
  },
  {
    "label": "FEditorModeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeRegistry"
  },
  {
    "label": "UBaseLegacyWidgetEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBaseLegacyWidgetEdMode"
  },
  {
    "label": "FPropertyWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyWidgetInfo"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "you",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "you"
  },
  {
    "label": "UBaseLegacyWidgetEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBaseLegacyWidgetEdMode"
  },
  {
    "label": "FLegacyEdModeWidgetHelper()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FLegacyEdModeWidgetHelper()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "GetWidgetNormalFromCurrentAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetNormalFromCurrentAxis(void* InData)"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "CanCreateWidgetForStructure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateWidgetForStructure(const UStruct* InPropStruct)"
  },
  {
    "label": "CanCreateWidgetForProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateWidgetForProperty(FProperty* InProp)"
  },
  {
    "label": "ShouldCreateWidgetForProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateWidgetForProperty(FProperty* InProp)"
  },
  {
    "label": "CreateWidgetHelper()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLegacyEdModeWidgetHelper>)",
    "insertText": "CreateWidgetHelper()"
  }
]