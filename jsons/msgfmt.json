[
  {
    "label": "UHashtable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UHashtable"
  },
  {
    "label": "UHashtable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UHashtable"
  },
  {
    "label": "AppendableWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AppendableWrapper"
  },
  {
    "label": "DateFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "NumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormat"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "type"
  },
  {
    "label": "EFormatNumber",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFormatNumber"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "API"
  },
  {
    "label": "description",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "description"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "have",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "have"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "IDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDs"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "MessageFormatAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageFormatAdapter"
  },
  {
    "label": "cal()",
    "kind": "Method",
    "detail": "Function (GregorianCalendar)",
    "insertText": "cal(success)"
  },
  {
    "label": "setLocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocale(const Locale& theLocale)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern,\n                              UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern,\n                             UParseError& parseError,\n                             UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern,\n                              UMessagePatternApostropheMode aposMode,\n                              UParseError* parseError,\n                              UErrorCode& status)"
  },
  {
    "label": "adoptFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormats(Format** formatsToAdopt, int32_t count)"
  },
  {
    "label": "setFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormats(const Format** newFormats, int32_t cnt)"
  },
  {
    "label": "adoptFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormat(int32_t formatNumber, Format* formatToAdopt)"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(int32_t formatNumber, const Format& format)"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(const UnicodeString& formatName, const Format& format, UErrorCode& status)"
  },
  {
    "label": "adoptFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormat(const UnicodeString& formatName, Format* formatToAdopt, UErrorCode& status)"
  },
  {
    "label": "autoQuoteApostrophe()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "autoQuoteApostrophe(const UnicodeString& pattern,\n        UErrorCode& status)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "equalFormats()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "equalFormats(const void* left, const void* right)"
  },
  {
    "label": "PluralSelectorProvider()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PluralSelectorProvider(const MessageFormat &mf, UPluralType type)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "allocateArgTypes()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "allocateArgTypes(int32_t capacity, UErrorCode& status)"
  },
  {
    "label": "findKeyword()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findKeyword( const UnicodeString& s,\n                                const char16_t * const *list)"
  },
  {
    "label": "getArgName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getArgName(int32_t partIndex)"
  },
  {
    "label": "setArgStartFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArgStartFormat(int32_t argStart, Format* formatter, UErrorCode& status)"
  },
  {
    "label": "setCustomArgStartFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCustomArgStartFormat(int32_t argStart, Format* formatter, UErrorCode& status)"
  },
  {
    "label": "argNameMatches()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "argNameMatches(int32_t partIndex, const UnicodeString& argName, int32_t argNumber)"
  },
  {
    "label": "cacheExplicitFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cacheExplicitFormats(UErrorCode& status)"
  },
  {
    "label": "skipLeadingSpaces()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipLeadingSpaces(UnicodeString& style)"
  },
  {
    "label": "copyObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyObjects(const MessageFormat& that, UErrorCode& ec)"
  },
  {
    "label": "resetPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetPattern()"
  }
]