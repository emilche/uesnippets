[
  {
    "label": "UHashtable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UHashtable"
  },
  {
    "label": "AppendableWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AppendableWrapper"
  },
  {
    "label": "DateFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "NumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormat"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "EFormatNumber",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFormatNumber"
  },
  {
    "label": "MessageFormatAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageFormatAdapter"
  },
  {
    "label": "MessageFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGFMT_H # define MSGFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / format . h \" # include \" unicode / locid . h \" # include \" unicode / messagepattern . h \" # include \" unicode / parseerr . h \" # include \" unicode / plurfmt . h \" # include \" unicode / plurrule . h \" U_CDECL_BEGIN struct UHashtable ; typedef struct UHashtable UHashtable ; U_CDECL_END U_NAMESPACE_BEGIN class AppendableWrapper ; class DateFormat ; class NumberFormat ; class U_I18N_API MessageFormat : public Format { public : # ifndef enum EFormatNumber { kMaxFormat = 1 0 } ; # endif)",
    "insertText": "MessageFormat(const UnicodeString& pattern, UErrorCode &status)"
  },
  {
    "label": "MessageFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageFormat(const UnicodeString& pattern, const Locale& newLocale, UErrorCode& status)"
  },
  {
    "label": "MessageFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageFormat(const UnicodeString& pattern, const Locale& newLocale, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "MessageFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageFormat(const MessageFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const MessageFormat&)",
    "insertText": "operator(const MessageFormat&)"
  },
  {
    "label": "MessageFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessageFormat()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "setLocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocale(const Locale& theLocale)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (const Locale&)",
    "insertText": "getLocale(void)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UMessagePatternApostropheMode aposMode, UParseError* parseError, UErrorCode& status)"
  },
  {
    "label": "getApostropheMode()",
    "kind": "Method",
    "detail": "Function (UMessagePatternApostropheMode)",
    "insertText": "getApostropheMode()"
  },
  {
    "label": "toPattern()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "toPattern(UnicodeString& appendTo)"
  },
  {
    "label": "adoptFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormats(Format** formatsToAdopt, int32_t count)"
  },
  {
    "label": "setFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormats(const Format** newFormats, int32_t cnt)"
  },
  {
    "label": "adoptFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormat(int32_t formatNumber, Format* formatToAdopt)"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(int32_t formatNumber, const Format& format)"
  },
  {
    "label": "getFormatNames()",
    "kind": "Method",
    "detail": "Function (StringEnumeration*)",
    "insertText": "getFormatNames(UErrorCode& status)"
  },
  {
    "label": "getFormat()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "getFormat(const UnicodeString& formatName, UErrorCode& status)"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(const UnicodeString& formatName, const Format& format, UErrorCode& status)"
  },
  {
    "label": "adoptFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFormat(const UnicodeString& formatName, Format* formatToAdopt, UErrorCode& status)"
  },
  {
    "label": "getFormats()",
    "kind": "Method",
    "detail": "Function (const Format**)",
    "insertText": "getFormats(int32_t& count)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString&)",
    "insertText": "format(const Formattable* source, int32_t count, UnicodeString& appendTo, FieldPosition& ignore, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const UnicodeString& pattern, const Formattable* arguments, int32_t count, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const UnicodeString* argumentNames, const Formattable* arguments, int32_t count, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (Formattable*)",
    "insertText": "parse(const UnicodeString& source, ParsePosition& pos, int32_t& count)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (Formattable*)",
    "insertText": "parse(const UnicodeString& source, int32_t& count, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& pos)"
  },
  {
    "label": "autoQuoteApostrophe()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "autoQuoteApostrophe(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "usesNamedArguments()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "usesNamedArguments()"
  },
  {
    "label": "getArgTypeCount()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getArgTypeCount()"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (# endif UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "equalFormats()",
    "kind": "Method",
    "detail": "Function (# ifndef UBool)",
    "insertText": "equalFormats(const void* left, const void* right)"
  },
  {
    "label": "PluralSelectorProvider()",
    "kind": "Method",
    "detail": "Function (class U_I18N_API PluralSelectorProvider : public PluralFormat::PluralSelector { public :)",
    "insertText": "PluralSelectorProvider(const MessageFormat &mf, UPluralType type)"
  },
  {
    "label": "PluralSelectorProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PluralSelectorProvider()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "select(void *ctx, double number, UErrorCode& ec)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "allocateArgTypes()",
    "kind": "Method",
    "detail": "Function (private : const MessageFormat& msgFormat ; PluralRules* rules ; UPluralType type ; } ; Formattable::Type* argTypes ; int32_t argTypeCount ; int32_t argTypeCapacity ; UBool hasArgTypeConflicts ; UBool)",
    "insertText": "allocateArgTypes(int32_t capacity, UErrorCode& status)"
  },
  {
    "label": "getDefaultNumberFormat()",
    "kind": "Method",
    "detail": "Function (NumberFormat* defaultNumberFormat ; DateFormat* defaultDateFormat ; UHashtable* cachedFormatters ; UHashtable* customFormatArgStarts ; PluralSelectorProvider pluralProvider ; PluralSelectorProvider ordinalProvider ; const NumberFormat*)",
    "insertText": "getDefaultNumberFormat(UErrorCode&)"
  },
  {
    "label": "getDefaultDateFormat()",
    "kind": "Method",
    "detail": "Function (const DateFormat*)",
    "insertText": "getDefaultDateFormat(UErrorCode&)"
  },
  {
    "label": "findKeyword()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findKeyword(const UnicodeString& s, const char16_t * const *list)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable* arguments, const UnicodeString *argumentNames, int32_t cnt, UnicodeString& appendTo, FieldPosition* pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "format(int32_t msgStart, const void *plNumber, const Formattable* arguments, const UnicodeString *argumentNames, int32_t cnt, AppendableWrapper& appendTo, FieldPosition* pos, UErrorCode& success)"
  },
  {
    "label": "getArgName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getArgName(int32_t partIndex)"
  },
  {
    "label": "setArgStartFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArgStartFormat(int32_t argStart, Format* formatter, UErrorCode& status)"
  },
  {
    "label": "setCustomArgStartFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCustomArgStartFormat(int32_t argStart, Format* formatter, UErrorCode& status)"
  },
  {
    "label": "nextTopLevelArgStart()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "nextTopLevelArgStart(int32_t partIndex)"
  },
  {
    "label": "argNameMatches()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "argNameMatches(int32_t partIndex, const UnicodeString& argName, int32_t argNumber)"
  },
  {
    "label": "cacheExplicitFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cacheExplicitFormats(UErrorCode& status)"
  },
  {
    "label": "skipLeadingSpaces()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipLeadingSpaces(UnicodeString& style)"
  },
  {
    "label": "getArgFromListByName()",
    "kind": "Method",
    "detail": "Function (const Formattable*)",
    "insertText": "getArgFromListByName(const Formattable* arguments, const UnicodeString *argumentNames, int32_t cnt, UnicodeString& name)"
  },
  {
    "label": "updateMetaData()",
    "kind": "Method",
    "detail": "Function (FieldPosition*)",
    "insertText": "updateMetaData(AppendableWrapper& dest, int32_t prevLength, FieldPosition* fp, const Formattable* argId)"
  },
  {
    "label": "findOtherSubMessage()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findOtherSubMessage(int32_t partIndex)"
  },
  {
    "label": "findFirstPluralNumberArg()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findFirstPluralNumberArg(int32_t msgStart, const UnicodeString &argName)"
  },
  {
    "label": "getLiteralStringUntilNextArgument()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getLiteralStringUntilNextArgument(int32_t from)"
  },
  {
    "label": "copyObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyObjects(const MessageFormat& that, UErrorCode& ec)"
  },
  {
    "label": "formatComplexSubMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "formatComplexSubMessage(int32_t msgStart, const void *plNumber, const Formattable* arguments, const UnicodeString *argumentNames, int32_t cnt, AppendableWrapper& appendTo, UErrorCode& success)"
  },
  {
    "label": "createIntegerFormat()",
    "kind": "Method",
    "detail": "Function (NumberFormat*)",
    "insertText": "createIntegerFormat(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "getArgTypeList()",
    "kind": "Method",
    "detail": "Function (const Formattable::Type*)",
    "insertText": "getArgTypeList(int32_t& listCount)"
  },
  {
    "label": "resetPattern()",
    "kind": "Method",
    "detail": "Function (listCount = argTypeCount ; return argTypes ; } void)",
    "insertText": "resetPattern()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class U_I18N_API DummyFormat : public Format { public : UBool)",
    "insertText": "operator(const Format&)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable&, UnicodeString& appendTo, FieldPosition&, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString&, Formattable&, ParsePosition&)"
  }
]