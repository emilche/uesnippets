[
  {
    "label": "FileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileHeader"
  },
  {
    "label": "Symbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Symbol"
  },
  {
    "label": "LocalGlobalWeakSymbols",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalGlobalWeakSymbols"
  },
  {
    "label": "SectionOrType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SectionOrType"
  },
  {
    "label": "Section",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Section"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RawContentSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawContentSection"
  },
  {
    "label": "NoBitsSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NoBitsSection"
  },
  {
    "label": "Group",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Group"
  },
  {
    "label": "Relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Relocation"
  },
  {
    "label": "RelocationSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelocationSection"
  },
  {
    "label": "MipsABIFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MipsABIFlags"
  },
  {
    "label": "Object",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Object"
  },
  {
    "label": "ScalarEnumerationTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarEnumerationTraits"
  },
  {
    "label": "ScalarBitSetTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarBitSetTraits"
  },
  {
    "label": "MappingTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MappingTraits"
  },
  {
    "label": "LLVM_YAML_STRONG_TYPEDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_ELFYAML_H # define LLVM_OBJECT_ELFYAML_H # include \" llvm / MC / YAML . h \" # include \" llvm / Support / ELF . h \" namespace llvm { namespace ELFYAML {)",
    "insertText": "LLVM_YAML_STRONG_TYPEDEF(uint16_t, ELF_ET) LLVM_YAML_STRONG_TYPEDEF(uint32_t, ELF_EM) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_ELFCLASS) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_ELFDATA) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_ELFOSABI) LLVM_YAML_STRONG_TYPEDEF(uint64_t, ELF_EF) LLVM_YAML_STRONG_TYPEDEF(uint32_t, ELF_SHT) LLVM_YAML_STRONG_TYPEDEF(uint32_t, ELF_REL) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_RSS) LLVM_YAML_STRONG_TYPEDEF(uint64_t, ELF_SHF) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_STT) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_STV) LLVM_YAML_STRONG_TYPEDEF(uint8_t, ELF_STO) LLVM_YAML_STRONG_TYPEDEF(uint8_t, MIPS_AFL_REG) LLVM_YAML_STRONG_TYPEDEF(uint8_t, MIPS_ABI_FP) LLVM_YAML_STRONG_TYPEDEF(uint32_t, MIPS_AFL_EXT) LLVM_YAML_STRONG_TYPEDEF(uint32_t, MIPS_AFL_ASE) LLVM_YAML_STRONG_TYPEDEF(uint32_t, MIPS_AFL_FLAGS1) LLVM_YAML_STRONG_TYPEDEF(uint32_t, MIPS_ISA)"
  },
  {
    "label": "Section()",
    "kind": "Method",
    "detail": "Function (ELF_ELFCLASS Class ; ELF_ELFDATA Data ; ELF_ELFOSABI OSABI ; ELF_ET Type ; ELF_EM Machine ; ELF_EF Flags ; llvm::yaml::Hex64 Entry ; } ; struct Symbol { StringRef Name ; ELF_STT Type ; StringRef Section ; llvm::yaml::Hex64 Value ; llvm::yaml::Hex64 Size ; uint8_t Other ; } ; struct LocalGlobalWeakSymbols { std::vector<Symbol> Local ; std::vector<Symbol> Global ; std::vector<Symbol> Weak ; } ; struct SectionOrType { StringRef sectionNameOrType ; } ; struct Section { enum class SectionKind { Group,RawContent,Relocation,NoBits,MipsABIFlags } ; SectionKind Kind ; StringRef Name ; ELF_SHT Type ; ELF_SHF Flags ; llvm::yaml::Hex64 Address ; StringRef Link ; StringRef Info ; llvm::yaml::Hex64 AddressAlign ;)",
    "insertText": "Section(SectionKind Kind) : Kind(Kind)"
  },
  {
    "label": "Section()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Section()"
  },
  {
    "label": "RawContentSection()",
    "kind": "Method",
    "detail": "Function (} ; struct RawContentSection : Section { yaml::BinaryRef Content ; llvm::yaml::Hex64 Size ;)",
    "insertText": "RawContentSection() : Section(SectionKind::RawContent)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Section *S)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (namespace yaml { template<> struct ScalarEnumerationTraits<ELFYAML::ELF_ET> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_ET &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_EM> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_EM &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_ELFCLASS> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_ELFCLASS &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_ELFDATA> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_ELFDATA &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_ELFOSABI> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_ELFOSABI &Value)"
  },
  {
    "label": "bitset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarBitSetTraits<ELFYAML::ELF_EF> { void)",
    "insertText": "bitset(IO &IO, ELFYAML::ELF_EF &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_SHT> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_SHT &Value)"
  },
  {
    "label": "bitset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarBitSetTraits<ELFYAML::ELF_SHF> { void)",
    "insertText": "bitset(IO &IO, ELFYAML::ELF_SHF &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_STT> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_STT &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_STV> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_STV &Value)"
  },
  {
    "label": "bitset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarBitSetTraits<ELFYAML::ELF_STO> { void)",
    "insertText": "bitset(IO &IO, ELFYAML::ELF_STO &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_REL> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_REL &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::ELF_RSS> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::ELF_RSS &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::MIPS_AFL_REG> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::MIPS_AFL_REG &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::MIPS_ABI_FP> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::MIPS_ABI_FP &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::MIPS_AFL_EXT> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::MIPS_AFL_EXT &Value)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarEnumerationTraits<ELFYAML::MIPS_ISA> { void)",
    "insertText": "enumeration(IO &IO, ELFYAML::MIPS_ISA &Value)"
  },
  {
    "label": "bitset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarBitSetTraits<ELFYAML::MIPS_AFL_ASE> { void)",
    "insertText": "bitset(IO &IO, ELFYAML::MIPS_AFL_ASE &Value)"
  },
  {
    "label": "bitset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ScalarBitSetTraits<ELFYAML::MIPS_AFL_FLAGS1> { void)",
    "insertText": "bitset(IO &IO, ELFYAML::MIPS_AFL_FLAGS1 &Value)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::FileHeader> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::FileHeader &FileHdr)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::Symbol> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::Symbol &Symbol)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::LocalGlobalWeakSymbols> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::LocalGlobalWeakSymbols &Symbols)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::Relocation> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::Relocation &Rel)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<std::unique_ptr<ELFYAML::Section>> { void)",
    "insertText": "mapping(IO &IO, std::unique_ptr<ELFYAML::Section> &Section)"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "validate(IO &io, std::unique_ptr<ELFYAML::Section> &Section)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::Object> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::Object &Object)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct MappingTraits<ELFYAML::SectionOrType> { void)",
    "insertText": "mapping(IO &IO, ELFYAML::SectionOrType &sectionOrType)"
  }
]