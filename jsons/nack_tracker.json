[
  {
    "label": "NackTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackTracker"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "NackElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NackElement"
  },
  {
    "label": "NackListCompare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackListCompare"
  },
  {
    "label": "NackTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_NACK_TRACKER_H_ # define MODULES_AUDIO_CODING_NETEQ_NACK_TRACKER_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<vector> # include \" absl / types / optional . h \" # include \" modules / include / module_common_types_public . h \" # include \" rtc_base / gtest_prod_util . h \" namespace webrtc { class NackTracker { public : const size_t kNackListSizeLimit = 5 0 0 ;)",
    "insertText": "NackTracker()"
  },
  {
    "label": "SetMaxNackListSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxNackListSize(size_t max_nack_list_size)"
  },
  {
    "label": "UpdateSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSampleRate(int sample_rate_hz)"
  },
  {
    "label": "UpdateLastDecodedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastDecodedPacket(uint16_t sequence_number, uint32_t timestamp)"
  },
  {
    "label": "UpdateLastReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastReceivedPacket(uint16_t sequence_number, uint32_t timestamp)"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackList(int64_t round_trip_time_ms)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetPacketLossRateForTest()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetPacketLossRateForTest()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int64_t time_to_play_ms ; uint32_t estimated_timestamp ; } ; class NackListCompare { public : bool)",
    "insertText": "operator()(uint16_t sequence_number_old, uint16_t sequence_number_new)"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::map<uint16_t,NackElement,NackListCompare> NackList ; NackList)",
    "insertText": "GetNackList()"
  },
  {
    "label": "UpdateEstimatedPlayoutTimeBy10ms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEstimatedPlayoutTimeBy10ms()"
  },
  {
    "label": "GetSamplesPerPacket()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetSamplesPerPacket(uint16_t sequence_number_current_received_rtp, uint32_t timestamp_current_received_rtp)"
  },
  {
    "label": "UpdateList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateList(uint16_t sequence_number_current_received_rtp, uint32_t timestamp_current_received_rtp)"
  },
  {
    "label": "LimitNackListSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LimitNackListSize()"
  },
  {
    "label": "EstimateTimestamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "EstimateTimestamp(uint16_t sequence_number, int samples_per_packet)"
  },
  {
    "label": "TimeToPlay()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "TimeToPlay(uint32_t timestamp)"
  },
  {
    "label": "UpdatePacketLossRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketLossRate(int packets_lost)"
  }
]