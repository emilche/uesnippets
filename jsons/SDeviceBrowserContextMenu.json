[
  {
    "label": "SDeviceBrowserContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDeviceBrowserContextMenu"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Styling / AppStyle . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Models / DeviceDetailsCommands . h \" # define LOCTEXT_NAMESPACE \" SDeviceBrowserContextMenu \" class SDeviceBrowserContextMenu : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDeviceBrowserContextMenu)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedPtr<FUICommandList>& InUICommandList)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SBorder) .BorderImage(FAppStyle::GetBrush(\"ToolPanel.GroupBorder\")) .Content() [ MakeContextMenu(InUICommandList)"
  },
  {
    "label": "MakeContextMenu()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "MakeContextMenu(const TSharedPtr<FUICommandList>& CommandList)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (FMenuBuilder)",
    "insertText": "MenuBuilder(true, CommandList)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"Ownership\", LOCTEXT(\"OwnershipMenuHeading\", \"Ownership\"))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function ({ MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Claim)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Release)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Share)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Remove)"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (} MenuBuilder .)",
    "insertText": "EndSection()"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"Connectivity\", LOCTEXT(\"ConnectivityMenuHeading\", \"Connectivity\"))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function ({ MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Connect)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Disconnect)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"RemoteControl\", LOCTEXT(\"RemoteControlMenuHeading\", \"Remote Control\"))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function ({ MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().PowerOn)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().PowerOff)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().PowerOffForce)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FDeviceDetailsCommands::Get().Reboot)"
  }
]