[
  {
    "label": "FDiffWriterArchiveTestsCallstacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffWriterArchiveTestsCallstacks"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FUObjectThreadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUObjectThreadContext"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FDeterminismManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeterminismManager"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "FAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccumulator"
  },
  {
    "label": "FDiffArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffArchive"
  },
  {
    "label": "FPackageHeaderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageHeaderData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDiffInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffInfo"
  },
  {
    "label": "FDiffMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffMap"
  },
  {
    "label": "FCallstacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCallstacks"
  },
  {
    "label": "FCallstackAtOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstackAtOffset"
  },
  {
    "label": "FCallstackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstackData"
  },
  {
    "label": "FAccumulatorGlobals",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatorGlobals"
  },
  {
    "label": "FDiffArchiveForLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffArchiveForLinker"
  },
  {
    "label": "FDiffArchiveForExports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffArchiveForExports"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Logging / LogVerbosity . h \" # include \" PackageStoreOptimizer . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArchiveProxy . h \" # include \" Serialization / ArchiveStackTrace . h \" # include \" Serialization / LargeMemoryWriter . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / RefCounting . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FDiffWriterArchiveTestsCallstacks ; class FLinkerLoad ; class FProperty ; class FUObjectThreadContext ; class UObject ; namespace UE::Cook { class FDeterminismManager ; } struct FUObjectSerializeContext ; namespace UE::DiffWriter { class FAccumulator ; class FDiffArchive ; class FPackageHeaderData ; typedef TUniqueFunction<)",
    "insertText": "void(ELogVerbosity::Type, FStringView)"
  },
  {
    "label": "FDiffInfo()",
    "kind": "Method",
    "detail": "Function (using EPackageHeaderFormat = ICookedPackageWriter::EPackageHeaderFormat ; using FPackageData = UE::ArchiveStackTrace::FPackageData ; const TCHAR* const IndentToken ; const TCHAR* const NewLineToken ; enum class EOffsetFrame { Linker,Exports,} ; struct FDiffInfo { int64 Offset ; int64 Size ;)",
    "insertText": "FDiffInfo() : Offset(0) , Size(0)"
  },
  {
    "label": "FDiffInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDiffInfo(int64 InOffset, int64 InSize) : Offset(InOffset) , Size(InSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDiffInfo& InOther)"
  },
  {
    "label": "ContainsOffset()",
    "kind": "Method",
    "detail": "Function (Ar<<InDiffInfo . Offset ; Ar<<InDiffInfo . Size ; return Ar ; } } ; class FDiffMap : public TArray<FDiffInfo> { public : bool)",
    "insertText": "ContainsOffset(int64 Offset)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(TUniquePtr<ANSICHAR[]>&& InCallstack, UObject* InSerializedObject, FProperty* InSerializedProperty)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(FCallstackData&&)"
  },
  {
    "label": "FCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstackData(const FCallstackData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCallstackData&)",
    "insertText": "operator(FCallstackData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCallstackData&)",
    "insertText": "operator(const FCallstackData&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const TCHAR* CallstackCutoffText)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (FCallstackData)",
    "insertText": "Clone()"
  },
  {
    "label": "FCallstacks()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FCallstacks()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int64 Offset, int64 Length, UObject* SerializedObject, FProperty* SerializedProperty, TArrayView<const FName> DebugDataStack, bool bIsCollectingCallstacks, bool bCollectCurrentCallstack, int32 StackIgnoreCount)"
  },
  {
    "label": "RemoveRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRange(int64 StartOffset, int64 Length)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FCallstacks& Other, int64 OtherStartOffset)"
  },
  {
    "label": "GetCallstackIndexAtOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCallstackIndexAtOffset(int64 Offset, int32 MinOffsetIndex = 0)"
  },
  {
    "label": "GetCallstack()",
    "kind": "Method",
    "detail": "Function (const FCallstackAtOffset&)",
    "insertText": "GetCallstack(int32 CallstackIndex)"
  },
  {
    "label": "FAccumulatorGlobals()",
    "kind": "Method",
    "detail": "Function (TArray<FCallstackAtOffset> CallstackAtOffsetMap ; TMap<uint32,FCallstackData> UniqueCallstacks ; bool bCallstacksDirty ; const SIZE_T StackTraceSize ; TUniquePtr<ANSICHAR [ ]> StackTrace ; ANSICHAR* LastSerializeCallstack ; int64 EndOffset ; } ; struct FAccumulatorGlobals { public : TMap<FPackageObjectIndex,FPackageStoreOptimizer::FScriptObjectData> ScriptObjectsMap ; ICookedPackageWriter* PackageWriter = nullptr ; EPackageHeaderFormat Format = EPackageHeaderFormat::PackageFileSummary ; bool bInitialized = false ; public :)",
    "insertText": "FAccumulatorGlobals(ICookedPackageWriter* InnerPackageWriter = nullptr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(EPackageHeaderFormat Format)"
  },
  {
    "label": "FAccumulator()",
    "kind": "Method",
    "detail": "Function (} ; class FAccumulator : public FRefCountBase { public :)",
    "insertText": "FAccumulator(FAccumulatorGlobals& InGlobals, UObject* InAsset, FName InPackageName, int32 InMaxDiffsToLog, bool bInIgnoreHeaderDiffs, FMessageCallback&& InMessageCallback, EPackageHeaderFormat InPackageHeaderFormat)"
  },
  {
    "label": "FAccumulator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAccumulator()"
  },
  {
    "label": "OnFirstSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFirstSaveComplete(FStringView InLooseFilePath, int64 InHeaderSize, int64 InPreTransformHeaderSize, ICookedPackageWriter::FPreviousCookedBytesData&& InPreviousPackageData)"
  },
  {
    "label": "OnSecondSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSecondSaveComplete(int64 InHeaderSize)"
  },
  {
    "label": "HasDifferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDifferences()"
  },
  {
    "label": "CompareWithPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareWithPrevious(const TCHAR* CallstackCutoffText, TMap<FName,FArchiveDiffStats>& OutStats)"
  },
  {
    "label": "SetHeaderSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderSize(int64 InHeaderSize)"
  },
  {
    "label": "SetDeterminismManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeterminismManager(UE::Cook::FDeterminismManager& InDeterminismManager)"
  },
  {
    "label": "SetCollectingCallstacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollectingCallstacks(bool bInCollectingCallstacks)"
  },
  {
    "label": "GetAssetClass()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAssetClass()"
  },
  {
    "label": "IsWriterUsingPostSaveTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWriterUsingPostSaveTransforms()"
  },
  {
    "label": "GenerateDiffMapForSection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GenerateDiffMapForSection(const FPackageData& SourcePackage, const FPackageData& DestPackage, bool& bOutSectionIdentical)"
  },
  {
    "label": "GenerateDiffMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDiffMap()"
  },
  {
    "label": "CompareWithPreviousForSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareWithPreviousForSection(const FPackageData& SourcePackage, const FPackageData& DestPackage, FPackageHeaderData& SourceHeader, FPackageHeaderData& DestHeader, const TCHAR* CallstackCutoffText, int32& InOutLoggedDiffs,TMap<FName, FArchiveDiffStats>& OutStats, const FString& SectionFilename)"
  },
  {
    "label": "FDiffArchive()",
    "kind": "Method",
    "detail": "Function (private : FCallstacks LinkerCallstacks ; FCallstacks ExportsCallstacks ; ICookedPackageWriter::FPreviousCookedBytesData PreviousPackageData ; FDiffArchive* LinkerArchive = nullptr ; FDiffArchive* ExportsArchive = nullptr ; TArray<uint8> FirstSaveLinkerData ; int64 FirstSaveLinkerSize = 0 ; FAccumulatorGlobals& Globals ; UE::Cook::FDeterminismManager* DeterminismManager = nullptr ; FDiffMap DiffMap ; FMessageCallback MessageCallback ; FName PackageName ; FString Filename ; UObject* Asset = nullptr ; int64 HeaderSize = 0 ; int64 PreTransformHeaderSize = 0 ; int32 MaxDiffsToLog = 5 ; EPackageHeaderFormat PackageHeaderFormat = EPackageHeaderFormat::PackageFileSummary ; bool bFirstSaveComplete = false ; bool bHasDifferences = false ; bool bIgnoreHeaderDiffs = false ; class FCallstacks ; class FDiffArchive ; class FDiffArchiveForLinker ; class FDiffArchiveForExports ; class::FDiffWriterArchiveTestsCallstacks ; } ; class FDiffArchive : public FLargeMemoryWriter { public :)",
    "insertText": "FDiffArchive(FAccumulator& InAccumulator)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDebugDataString(const FName& DebugData)"
  },
  {
    "label": "PopDebugDataString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopDebugDataString()"
  },
  {
    "label": "GetAccumulator()",
    "kind": "Method",
    "detail": "Function (FAccumulator&)",
    "insertText": "GetAccumulator()"
  },
  {
    "label": "FDiffArchiveForLinker()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FName> DebugDataStack ; TRefCountPtr<FAccumulator> Accumulator ; } ; class FDiffArchiveForLinker : public FDiffArchive { public :)",
    "insertText": "FDiffArchiveForLinker(FAccumulator& InAccumulator)"
  },
  {
    "label": "FDiffArchiveForLinker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDiffArchiveForLinker()"
  },
  {
    "label": "FDiffArchiveForExports()",
    "kind": "Method",
    "detail": "Function (} ; class FDiffArchiveForExports : public FDiffArchive { public :)",
    "insertText": "FDiffArchiveForExports(FAccumulator& InAccumulator)"
  },
  {
    "label": "FDiffArchiveForExports()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDiffArchiveForExports()"
  }
]