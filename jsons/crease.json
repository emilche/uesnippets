[
  {
    "label": "Crease",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Crease"
  },
  {
    "label": "Rule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Rule"
  },
  {
    "label": "IsSmooth()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_SDC_CREASE_H # define OPENSUBDIV3_SDC_CREASE_H # include \" . . / version . h \" # include \" . . / sdc / options . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Sdc { class Crease { public : float const SHARPNESS_SMOOTH ; float const SHARPNESS_INFINITE ; bool)",
    "insertText": "IsSmooth(float sharpness)"
  },
  {
    "label": "RULE_SMOOTH()",
    "kind": "Method",
    "detail": "Function (} enum Rule { RULE_UNKNOWN = 0,)",
    "insertText": "RULE_SMOOTH(1 << 0), RULE_DART = (1 << 1), RULE_CREASE = (1 << 2), RULE_CORNER = (1 << 3)"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Crease() : _options()"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Crease(Options const& options) : _options(options)"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Crease()"
  },
  {
    "label": "IsUniform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUniform()"
  },
  {
    "label": "SharpenBoundaryEdge()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "SharpenBoundaryEdge(float edgeSharpness)"
  },
  {
    "label": "SharpenBoundaryVertex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SharpenBoundaryVertex(float edgeSharpness)"
  },
  {
    "label": "SubdivideUniformSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SubdivideUniformSharpness(float vertexOrEdgeSharpness)"
  },
  {
    "label": "SubdivideVertexSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SubdivideVertexSharpness(float vertexSharpness)"
  },
  {
    "label": "SubdivideEdgeSharpnessAtVertex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SubdivideEdgeSharpnessAtVertex(float edgeSharpness, int incidentEdgeCountAtEndVertex, float const* edgeSharpnessAroundEndVertex)"
  },
  {
    "label": "SubdivideEdgeSharpnessesAroundVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubdivideEdgeSharpnessesAroundVertex(int incidentEdgeCountAtVertex, float const* incidentEdgeSharpnessAroundVertex, float* childEdgesSharpnessAroundVertex)"
  },
  {
    "label": "DetermineVertexVertexRule()",
    "kind": "Method",
    "detail": "Function (Rule)",
    "insertText": "DetermineVertexVertexRule(float vertexSharpness, int incidentEdgeCount, float const* incidentEdgeSharpness)"
  },
  {
    "label": "DetermineVertexVertexRule()",
    "kind": "Method",
    "detail": "Function (Rule)",
    "insertText": "DetermineVertexVertexRule(float vertexSharpness, int sharpEdgeCount)"
  },
  {
    "label": "ComputeFractionalWeightAtVertex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeFractionalWeightAtVertex(float vertexSharpness, float childVertexSharpness, int incidentEdgeCount, float const* incidentEdgeSharpness, float const* childEdgesSharpness)"
  },
  {
    "label": "GetSharpEdgePairOfCrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSharpEdgePairOfCrease(float const * incidentEdgeSharpness, int incidentEdgeCount, int sharpEdgePair[2])"
  },
  {
    "label": "decrementSharpness()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "decrementSharpness(float sharpness)"
  },
  {
    "label": "SharpenBoundaryEdge()",
    "kind": "Method",
    "detail": "Function (private : Options _options ; } ; float)",
    "insertText": "SharpenBoundaryEdge(float)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (sharpEdgePair [ 0 ] = 0 ;)",
    "insertText": "while(IsSmooth(incidentEdgeSharpness[sharpEdgePair[0]]))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (sharpEdgePair [ 1 ] = incidentEdgeCount - 1 ;)",
    "insertText": "while(IsSmooth(incidentEdgeSharpness[sharpEdgePair[1]]))"
  }
]