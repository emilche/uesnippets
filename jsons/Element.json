[
  {
    "label": "Element",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Element"
  },
  {
    "label": "TypedElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedElement"
  },
  {
    "label": "ValueElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueElement"
  },
  {
    "label": "Token",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Token"
  },
  {
    "label": "CommentElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommentElement"
  },
  {
    "label": "GenericElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericElement"
  },
  {
    "label": "StringResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringResolver"
  },
  {
    "label": "Document",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Document"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementRegistry"
  },
  {
    "label": "TypeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeDef"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_ELEMENT_H # define MATERIALX_ELEMENT_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Traversal . h> # include<MaterialXCore / Util . h> # include<MaterialXCore / Value . h> MATERIALX_NAMESPACE_BEGIN class Element ; class TypedElement ; class ValueElement ; class Token ; class CommentElement ; class GenericElement ; class StringResolver ; class Document ; using ElementPtr = shared_ptr<Element> ; using ConstElementPtr = shared_ptr<const Element> ; using TypedElementPtr = shared_ptr<TypedElement> ; using ConstTypedElementPtr = shared_ptr<const TypedElement> ; using ValueElementPtr = shared_ptr<ValueElement> ; using ConstValueElementPtr = shared_ptr<const ValueElement> ; using TokenPtr = shared_ptr<Token> ; using ConstTokenPtr = shared_ptr<const Token> ; using CommentElementPtr = shared_ptr<CommentElement> ; using ConstCommentElementPtr = shared_ptr<const CommentElement> ; using GenericElementPtr = shared_ptr<GenericElement> ; using ConstGenericElementPtr = shared_ptr<const GenericElement> ; using StringResolverPtr = shared_ptr<StringResolver> ; using ElementMap = std::unordered_map<string,ElementPtr> ; using ElementPredicate = std::function<)",
    "insertText": "bool(ConstElementPtr)"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (class Element : public std::enable_shared_from_this<Element> { protected :)",
    "insertText": "Element(ElementPtr parent, const string& category, const string& name) : _category(category), _name(name), _parent(parent), _root(parent ? parent->getRoot() : nullptr)"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "Element()"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Element(const Element&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Element&)",
    "insertText": "operator(const Element&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : using DocumentPtr = shared_ptr<Document> ; using ConstDocumentPtr = shared_ptr<const Document> ; template<class T> class ElementRegistry ; public : bool)",
    "insertText": "operator(const Element& rhs)"
  },
  {
    "label": "setCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCategory(const string& category)"
  },
  {
    "label": "getCategory()",
    "kind": "Method",
    "detail": "Function (_category = category ; } const string&)",
    "insertText": "getCategory()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getName()"
  },
  {
    "label": "getDescendant()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getDescendant(const string& namePath)"
  },
  {
    "label": "setFilePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFilePrefix(const string& prefix)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(FILE_PREFIX_ATTRIBUTE, prefix)"
  },
  {
    "label": "hasFilePrefix()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasFilePrefix()"
  },
  {
    "label": "getFilePrefix()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getFilePrefix()"
  },
  {
    "label": "getActiveFilePrefix()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getActiveFilePrefix()"
  },
  {
    "label": "setGeomPrefix()",
    "kind": "Method",
    "detail": "Function (} } return EMPTY_STRING ; } void)",
    "insertText": "setGeomPrefix(const string& prefix)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(GEOM_PREFIX_ATTRIBUTE, prefix)"
  },
  {
    "label": "hasGeomPrefix()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasGeomPrefix()"
  },
  {
    "label": "getGeomPrefix()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getGeomPrefix()"
  },
  {
    "label": "getActiveGeomPrefix()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getActiveGeomPrefix()"
  },
  {
    "label": "setColorSpace()",
    "kind": "Method",
    "detail": "Function (} } return EMPTY_STRING ; } void)",
    "insertText": "setColorSpace(const string& colorSpace)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(COLOR_SPACE_ATTRIBUTE, colorSpace)"
  },
  {
    "label": "hasColorSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasColorSpace()"
  },
  {
    "label": "getColorSpace()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getColorSpace()"
  },
  {
    "label": "getActiveColorSpace()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getActiveColorSpace()"
  },
  {
    "label": "setInheritString()",
    "kind": "Method",
    "detail": "Function (} } return EMPTY_STRING ; } void)",
    "insertText": "setInheritString(const string& inherit)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(INHERIT_ATTRIBUTE, inherit)"
  },
  {
    "label": "hasInheritString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasInheritString()"
  },
  {
    "label": "getInheritString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getInheritString()"
  },
  {
    "label": "setInheritsFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setInheritsFrom(ConstElementPtr super)"
  },
  {
    "label": "setInheritString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInheritString(super->getName())"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "removeAttribute(INHERIT_ATTRIBUTE)"
  },
  {
    "label": "getInheritsFrom()",
    "kind": "Method",
    "detail": "Function (} } ElementPtr)",
    "insertText": "getInheritsFrom()"
  },
  {
    "label": "hasInheritedBase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasInheritedBase(ConstElementPtr base)"
  },
  {
    "label": "hasInheritanceCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasInheritanceCycle()"
  },
  {
    "label": "setNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNamespace(const string& space)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NAMESPACE_ATTRIBUTE, space)"
  },
  {
    "label": "hasNamespace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNamespace()"
  },
  {
    "label": "getNamespace()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNamespace()"
  },
  {
    "label": "getQualifiedName()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getQualifiedName(const string& name)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (const size_t i = name .)",
    "insertText": "find_first_of(NAME_PREFIX_SEPARATOR)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(DOC_ATTRIBUTE, doc)"
  },
  {
    "label": "getDocString()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getDocString()"
  },
  {
    "label": "isA()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "isA(const string& category = EMPTY_STRING)"
  },
  {
    "label": "asA()",
    "kind": "Method",
    "detail": "Function (template<class T> shared_ptr<const T>)",
    "insertText": "asA()"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (template<class T> shared_ptr<T>)",
    "insertText": "addChild(const string& name = EMPTY_STRING)"
  },
  {
    "label": "addChildOfCategory()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "addChildOfCategory(const string& category, string name = EMPTY_STRING)"
  },
  {
    "label": "changeChildCategory()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "changeChildCategory(ElementPtr child, const string& category)"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getChild(const string& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (ElementMap::const_iterator it = _childMap .)",
    "insertText": "find(name)"
  },
  {
    "label": "getChildOfType()",
    "kind": "Method",
    "detail": "Function (} template<class T> shared_ptr<T>)",
    "insertText": "getChildOfType(const string& name)"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (ElementPtr child =)",
    "insertText": "getChild(name)"
  },
  {
    "label": "getChildren()",
    "kind": "Method",
    "detail": "Function (} const vector<ElementPtr>&)",
    "insertText": "getChildren()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (vector<shared_ptr<T>> children ;)",
    "insertText": "for(ElementPtr child : _childOrder)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (shared_ptr<T> instance = child -> asA<)",
    "insertText": "T()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (children .)",
    "insertText": "push_back(instance)"
  },
  {
    "label": "setChildIndex()",
    "kind": "Method",
    "detail": "Function (} return children ; } void)",
    "insertText": "setChildIndex(const string& name, int index)"
  },
  {
    "label": "getChildIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getChildIndex(const string& name)"
  },
  {
    "label": "removeChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeChild(const string& name)"
  },
  {
    "label": "removeChildOfType()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "removeChildOfType(const string& name)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAttribute(const string& attrib, const string& value)"
  },
  {
    "label": "hasAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasAttribute(const string& attrib)"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getAttribute(const string& attrib)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (StringMap::const_iterator it = _attributeMap .)",
    "insertText": "find(attrib)"
  },
  {
    "label": "getAttributeNames()",
    "kind": "Method",
    "detail": "Function (} const StringVec&)",
    "insertText": "getAttributeNames()"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(attrib, toValueString(data))"
  },
  {
    "label": "getTypedAttribute()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "getTypedAttribute(const string& attrib)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (try { return fromValueString<)",
    "insertText": "T(getAttribute(attrib))"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(ExceptionTypeError&)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (} } return { } ; } void)",
    "insertText": "removeAttribute(const string& attrib)"
  },
  {
    "label": "getSelf()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getSelf()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (} ElementPtr)",
    "insertText": "getParent()"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (} ElementPtr)",
    "insertText": "getRoot()"
  },
  {
    "label": "getDocument()",
    "kind": "Method",
    "detail": "Function (ConstDocumentPtr)",
    "insertText": "getDocument()"
  },
  {
    "label": "getAncestorOfType()",
    "kind": "Method",
    "detail": "Function (template<class T> shared_ptr<const T>)",
    "insertText": "getAncestorOfType()"
  },
  {
    "label": "traverseGraph()",
    "kind": "Method",
    "detail": "Function (GraphIterator)",
    "insertText": "traverseGraph()"
  },
  {
    "label": "getUpstreamEdge()",
    "kind": "Method",
    "detail": "Function (Edge)",
    "insertText": "getUpstreamEdge(size_t index = 0)"
  },
  {
    "label": "getUpstreamEdgeCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getUpstreamEdgeCount()"
  },
  {
    "label": "traverseInheritance()",
    "kind": "Method",
    "detail": "Function (InheritanceIterator)",
    "insertText": "traverseInheritance()"
  },
  {
    "label": "setSourceUri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSourceUri(const string& sourceUri)"
  },
  {
    "label": "hasSourceUri()",
    "kind": "Method",
    "detail": "Function (_sourceUri = sourceUri ; } bool)",
    "insertText": "hasSourceUri()"
  },
  {
    "label": "getSourceUri()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getSourceUri()"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (} } return EMPTY_STRING ; } bool)",
    "insertText": "validate(string* message = nullptr)"
  },
  {
    "label": "copyContentFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyContentFrom(const ConstElementPtr& source)"
  },
  {
    "label": "clearContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearContent()"
  },
  {
    "label": "createValidChildName()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "createValidChildName(string name)"
  },
  {
    "label": "createValidName()",
    "kind": "Method",
    "detail": "Function (name =)",
    "insertText": "createValidName(name)"
  },
  {
    "label": "incrementName()",
    "kind": "Method",
    "detail": "Function (name =)",
    "insertText": "incrementName(name)"
  },
  {
    "label": "createStringResolver()",
    "kind": "Method",
    "detail": "Function (} return name ; } StringResolverPtr)",
    "insertText": "createStringResolver(const string& geom = EMPTY_STRING)"
  },
  {
    "label": "asString()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "asString()"
  },
  {
    "label": "resolveRootNameReference()",
    "kind": "Method",
    "detail": "Function (template<class T> shared_ptr<T>)",
    "insertText": "resolveRootNameReference(const string& name)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (shared_ptr<T> child = root -> getChildOfType<)",
    "insertText": "T(getQualifiedName(name))"
  },
  {
    "label": "validateRequire()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "validateRequire(bool expression, bool& res, string* message, const string& errorDesc)"
  },
  {
    "label": "registerChildElement()",
    "kind": "Method",
    "detail": "Function (public : const string NAME_ATTRIBUTE ; const string FILE_PREFIX_ATTRIBUTE ; const string GEOM_PREFIX_ATTRIBUTE ; const string COLOR_SPACE_ATTRIBUTE ; const string INHERIT_ATTRIBUTE ; const string NAMESPACE_ATTRIBUTE ; const string DOC_ATTRIBUTE ; protected : void)",
    "insertText": "registerChildElement(ElementPtr child)"
  },
  {
    "label": "unregisterChildElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unregisterChildElement(ElementPtr child)"
  },
  {
    "label": "getSelfNonConst()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getSelfNonConst()"
  },
  {
    "label": "createElement()",
    "kind": "Method",
    "detail": "Function (} protected : string _category ; string _name ; string _sourceUri ; ElementMap _childMap ; vector<ElementPtr> _childOrder ; StringMap _attributeMap ; StringVec _attributeOrder ; weak_ptr<Element> _parent ; weak_ptr<Element> _root ; private : template<class T> ElementPtr)",
    "insertText": "createElement(ElementPtr parent, const string& name)"
  },
  {
    "label": "ElementPtr()",
    "kind": "Method",
    "detail": "Function (} private : using CreatorFunction =)",
    "insertText": "ElementPtr(*)(ElementPtr, const string&)"
  },
  {
    "label": "TypedElement()",
    "kind": "Method",
    "detail": "Function (using CreatorMap = std::unordered_map<string,CreatorFunction> ; CreatorMap _creatorMap ; } ; class TypedElement : public Element { protected :)",
    "insertText": "TypedElement(ElementPtr parent, const string& category, const string& name) : Element(parent, category, name)"
  },
  {
    "label": "TypedElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TypedElement()"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (} protected : using TypeDefPtr = shared_ptr<class TypeDef> ; public : void)",
    "insertText": "setType(const string& type)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(TYPE_ATTRIBUTE, type)"
  },
  {
    "label": "hasType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasType()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getType()"
  },
  {
    "label": "isMultiOutputType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMultiOutputType()"
  },
  {
    "label": "getTypeDef()",
    "kind": "Method",
    "detail": "Function (} TypeDefPtr)",
    "insertText": "getTypeDef()"
  },
  {
    "label": "ValueElement()",
    "kind": "Method",
    "detail": "Function (public : const string TYPE_ATTRIBUTE ; } ; class ValueElement : public TypedElement { protected :)",
    "insertText": "ValueElement(ElementPtr parent, const string& category, const string& name) : TypedElement(parent, category, name)"
  },
  {
    "label": "ValueElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "ValueElement()"
  },
  {
    "label": "setValueString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueString(const string& value)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VALUE_ATTRIBUTE, value)"
  },
  {
    "label": "hasValueString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasValueString()"
  },
  {
    "label": "getValueString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getValueString()"
  },
  {
    "label": "getResolvedValueString()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getResolvedValueString(StringResolverPtr resolver = nullptr)"
  },
  {
    "label": "setInterfaceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInterfaceName(const string& name)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(INTERFACE_NAME_ATTRIBUTE, name)"
  },
  {
    "label": "hasInterfaceName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasInterfaceName()"
  },
  {
    "label": "getInterfaceName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getInterfaceName()"
  },
  {
    "label": "setImplementationName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setImplementationName(const string& name)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(IMPLEMENTATION_NAME_ATTRIBUTE, name)"
  },
  {
    "label": "hasImplementationName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasImplementationName()"
  },
  {
    "label": "getImplementationName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getImplementationName()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "setValue(const T& value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setType(!type.empty() ? type : getTypeString<T>())"
  },
  {
    "label": "setValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueString(toValueString(value))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(const char* value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(value ? string(value) : EMPTY_STRING, type)"
  },
  {
    "label": "hasValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasValue()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} ValuePtr)",
    "insertText": "getValue()"
  },
  {
    "label": "getResolvedValue()",
    "kind": "Method",
    "detail": "Function (} ValuePtr)",
    "insertText": "getResolvedValue(StringResolverPtr resolver = nullptr)"
  },
  {
    "label": "getDefaultValue()",
    "kind": "Method",
    "detail": "Function (} ValuePtr)",
    "insertText": "getDefaultValue()"
  },
  {
    "label": "setUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUnit(const string& unit)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(UNIT_ATTRIBUTE, unit)"
  },
  {
    "label": "hasUnit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUnit()"
  },
  {
    "label": "getUnit()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getUnit()"
  },
  {
    "label": "getActiveUnit()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getActiveUnit()"
  },
  {
    "label": "setUnitType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUnitType(const string& unit)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(UNITTYPE_ATTRIBUTE, unit)"
  },
  {
    "label": "hasUnitType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUnitType()"
  },
  {
    "label": "getUnitType()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getUnitType()"
  },
  {
    "label": "setIsUniform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsUniform(bool value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "bool(UNIFORM_ATTRIBUTE, value)"
  },
  {
    "label": "getIsUniform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getIsUniform()"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (public : const string VALUE_ATTRIBUTE ; const string INTERFACE_NAME_ATTRIBUTE ; const string IMPLEMENTATION_NAME_ATTRIBUTE ; const string IMPLEMENTATION_TYPE_ATTRIBUTE ; const string ENUM_ATTRIBUTE ; const string ENUM_VALUES_ATTRIBUTE ; const string UI_NAME_ATTRIBUTE ; const string UI_FOLDER_ATTRIBUTE ; const string UI_MIN_ATTRIBUTE ; const string UI_MAX_ATTRIBUTE ; const string UI_SOFT_MIN_ATTRIBUTE ; const string UI_SOFT_MAX_ATTRIBUTE ; const string UI_STEP_ATTRIBUTE ; const string UI_ADVANCED_ATTRIBUTE ; const string UNIT_ATTRIBUTE ; const string UNITTYPE_ATTRIBUTE ; const string UNIFORM_ATTRIBUTE ; } ; class Token : public ValueElement { public :)",
    "insertText": "Token(ElementPtr parent, const string& name) : ValueElement(parent, CATEGORY, name)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Token()"
  },
  {
    "label": "CommentElement()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class CommentElement : public Element { public :)",
    "insertText": "CommentElement(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "CommentElement()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CommentElement()"
  },
  {
    "label": "GenericElement()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class GenericElement : public Element { public :)",
    "insertText": "GenericElement(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "GenericElement()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GenericElement()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class StringResolver { public : StringResolverPtr)",
    "insertText": "create()"
  },
  {
    "label": "StringResolver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StringResolver()"
  },
  {
    "label": "setFilePrefix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFilePrefix(const string& filePrefix)"
  },
  {
    "label": "setUvTileString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUvTileString(const string& uvTile)"
  },
  {
    "label": "setFilenameSubstitution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFilenameSubstitution(const string& key, const string& value)"
  },
  {
    "label": "addTokenSubstitutions()",
    "kind": "Method",
    "detail": "Function (_filenameMap [ key ] = value ; } void)",
    "insertText": "addTokenSubstitutions(ConstElementPtr element)"
  },
  {
    "label": "getFilenameSubstitutions()",
    "kind": "Method",
    "detail": "Function (const StringMap&)",
    "insertText": "getFilenameSubstitutions()"
  },
  {
    "label": "getGeomNameSubstitutions()",
    "kind": "Method",
    "detail": "Function (_geomNameMap [ key ] = value ; } const StringMap&)",
    "insertText": "getGeomNameSubstitutions()"
  },
  {
    "label": "isResolvedType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isResolvedType(const string& type)"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (} protected : string _filePrefix ; string _geomPrefix ; StringMap _filenameMap ; StringMap _geomNameMap ; } ; class ExceptionOrphanedElement : public Exception { public : using Exception::Exception ; } ; template<class T> shared_ptr<T>)",
    "insertText": "addChild(const string& name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (string childName = name ;)",
    "insertText": "if(childName.empty())"
  },
  {
    "label": "createValidChildName()",
    "kind": "Method",
    "detail": "Function (childName =)",
    "insertText": "createValidChildName(T::CATEGORY + \"1\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(_childMap.count(childName)) throw Exception(\"Child name is not unique: \" + childName)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (shared_ptr<T> child = std::make_shared<)",
    "insertText": "T(getSelf(), childName)"
  },
  {
    "label": "registerChildElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerChildElement(child)"
  },
  {
    "label": "prettyPrint()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "prettyPrint(ConstElementPtr elem)"
  }
]