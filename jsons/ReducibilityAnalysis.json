[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "PassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRegistry"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "createReducibilityAnalysisPass()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace llvm { class Module ; class Function ; class PassRegistry ; class FunctionPass ; enum class IrreducibilityAction { ThrowException,PrintLog,Ignore,} ; char& ReducibilityAnalysisID ; llvm::FunctionPass*)",
    "insertText": "createReducibilityAnalysisPass(IrreducibilityAction Action = IrreducibilityAction::ThrowException)"
  },
  {
    "label": "initializeReducibilityAnalysisPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeReducibilityAnalysisPass(llvm::PassRegistry &)"
  },
  {
    "label": "IsReducible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReducible(const llvm::Module &M, IrreducibilityAction Action = IrreducibilityAction::ThrowException)"
  },
  {
    "label": "IsReducible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReducible(const llvm::Function &F, IrreducibilityAction Action = IrreducibilityAction::ThrowException)"
  }
]