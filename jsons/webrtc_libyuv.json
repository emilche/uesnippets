[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "CalcBufferSize()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_VIDEO_LIBYUV_INCLUDE_WEBRTC_LIBYUV_H_ # define COMMON_VIDEO_LIBYUV_INCLUDE_WEBRTC_LIBYUV_H_ # include<stdint . h> # include<stdio . h> # include<vector> # include \" api / scoped_refptr . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_frame_buffer . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class VideoType { kUnknown,kI420,kIYUV,kRGB24,kARGB,kRGB565,kYUY2,kYV12,kUYVY,kMJPEG,kBGRA,kNV12,} ; const double kPerfectPSNR = 4 8 . 0 f ; size_t)",
    "insertText": "CalcBufferSize(VideoType type, int width, int height)"
  },
  {
    "label": "ExtractBuffer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ExtractBuffer(const rtc::scoped_refptr<I420BufferInterface>& input_frame, size_t size, uint8_t* buffer)"
  },
  {
    "label": "ExtractBuffer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ExtractBuffer(const VideoFrame& input_frame, size_t size, uint8_t* buffer)"
  },
  {
    "label": "ConvertFromI420()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ConvertFromI420(const VideoFrame& src_frame, VideoType dst_video_type, int dst_sample_size, uint8_t* dst_frame)"
  },
  {
    "label": "ScaleVideoFrameBuffer()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<I420BufferInterface>)",
    "insertText": "ScaleVideoFrameBuffer(const I420BufferInterface& source, int dst_width, int dst_height)"
  },
  {
    "label": "NV12Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV12Scale(uint8_t* tmp_buffer, const uint8_t* src_y, int src_stride_y, const uint8_t* src_uv, int src_stride_uv, int src_width, int src_height, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int dst_width, int dst_height)"
  },
  {
    "label": "NV12ToI420Scaler()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT NV12ToI420Scaler { public :)",
    "insertText": "NV12ToI420Scaler()"
  },
  {
    "label": "NV12ToI420Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV12ToI420Scale(const uint8_t* src_y, int src_stride_y, const uint8_t* src_uv, int src_stride_uv, int src_width, int src_height, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int dst_width, int dst_height)"
  },
  {
    "label": "ConvertVideoType()",
    "kind": "Method",
    "detail": "Function (private : std::vector<uint8_t> tmp_uv_planes_ ; } ; int)",
    "insertText": "ConvertVideoType(VideoType video_type)"
  }
]