[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateTextRun",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextRun"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / TextLayout . h \" # include \" Framework / Text / ILayoutBlock . h \" # include \" Framework / Text / ISlateRun . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; enum class ETextHitPoint : uint8 ; class FSlateTextRun : public ISlateRun,public TSharedFromThis<FSlateTextRun> { public : TSharedRef<FSlateTextRun>)",
    "insertText": "Create(const FRunInfo& InRunInfo, const TSharedRef< const FString >& InText, const FTextBlockStyle& Style)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateTextRun>)",
    "insertText": "Create(const FRunInfo& InRunInfo, const TSharedRef< const FString >& InText, const FTextBlockStyle& Style, const FTextRange& InRange)"
  },
  {
    "label": "FSlateTextRun()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FSlateTextRun()"
  },
  {
    "label": "GetTextRange()",
    "kind": "Method",
    "detail": "Function (} FTextRange)",
    "insertText": "GetTextRange()"
  },
  {
    "label": "SetTextRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextRange(const FTextRange& Value)"
  },
  {
    "label": "GetBaseLine()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseLine(float Scale)"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetMaxHeight(float Scale)"
  },
  {
    "label": "Measure()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Measure(int32 StartIndex, int32 EndIndex, float Scale, const FRunTextContext& TextContext)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(int32 CurrentIndex, float Scale, const FRunTextContext& TextContext)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ILayoutBlock>)",
    "insertText": "CreateBlock(int32 StartIndex, int32 EndIndex, FVector2D Size, const FLayoutBlockTextContext& TextContext, const TSharedPtr< IRunRenderer >& Renderer)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& PaintArgs, const FTextArgs& TextArgs, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<SWidget>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeChildren(const TSharedRef< ILayoutBlock >& Block, const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "BeginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLayout()"
  },
  {
    "label": "EndLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndLayout()"
  },
  {
    "label": "GetTextIndexAt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTextIndexAt(const TSharedRef< ILayoutBlock >& Block, const FVector2D& Location, float Scale, ETextHitPoint* const OutHitPoint = nullptr)"
  },
  {
    "label": "GetLocationAt()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetLocationAt(const TSharedRef< ILayoutBlock >& Block, int32 Offset, float Scale)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(const TSharedRef<FString>& NewText, const FTextRange& NewRange)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IRun>)",
    "insertText": "Clone()"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& Text)"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& AppendToText, const FTextRange& PartialRange)"
  },
  {
    "label": "GetRunInfo()",
    "kind": "Method",
    "detail": "Function (const FRunInfo&)",
    "insertText": "GetRunInfo()"
  },
  {
    "label": "GetRunAttributes()",
    "kind": "Method",
    "detail": "Function (ERunAttributes)",
    "insertText": "GetRunAttributes()"
  },
  {
    "label": "ApplyFontSizeMultiplierOnTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFontSizeMultiplierOnTextStyle(float FontSizeMultiplier)"
  },
  {
    "label": "FSlateTextRun()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FSlateTextRun(const FRunInfo& InRunInfo, const TSharedRef< const FString >& InText, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "FSlateTextRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateTextRun(const FRunInfo& InRunInfo, const TSharedRef< const FString >& InText, const FTextBlockStyle& InStyle, const FTextRange& InRange)"
  },
  {
    "label": "FSlateTextRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateTextRun(const FSlateTextRun& Run)"
  }
]