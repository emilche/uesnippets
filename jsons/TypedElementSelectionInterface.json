[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTypedElementIsSelectedOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementIsSelectedOptions"
  },
  {
    "label": "FTypedElementSelectionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionOptions"
  },
  {
    "label": "ITypedElementTransactedElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementTransactedElement"
  },
  {
    "label": "UTypedElementSelectionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionInterface"
  },
  {
    "label": "ITypedElementSelectionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementSelectionInterface"
  },
  {
    "label": "TTypedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElement"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementId . h \" # include \" Elements / Framework / TypedElementLimits . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Framework / TypedElementListProxy . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Interface . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" TypedElementSelectionInterface . generated . h \" class UObject ; struct FFrame ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (None,Immediate,Recursive,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FTypedElementIsSelectedOptions& SetAllowIndirect(const bool InAllowIndirect)"
  },
  {
    "label": "AllowIndirect()",
    "kind": "Method",
    "detail": "Function (bAllowIndirect = InAllowIndirect ; return* this ; } bool)",
    "insertText": "AllowIndirect()"
  },
  {
    "label": "GetNameForTEDSIntegration()",
    "kind": "Method",
    "detail": "Function (TEDSIntegrationSelectionSetName = InTEDSIntegrationSelectionSetName ; return* this ; } FName)",
    "insertText": "GetNameForTEDSIntegration()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName TEDSIntegrationSelectionSetName =)",
    "insertText": "FName()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FTypedElementSelectionOptions& SetAllowHidden(const bool InAllowHidden)"
  },
  {
    "label": "AllowHidden()",
    "kind": "Method",
    "detail": "Function (bAllowHidden = InAllowHidden ; return* this ; } bool)",
    "insertText": "AllowHidden()"
  },
  {
    "label": "AllowGroups()",
    "kind": "Method",
    "detail": "Function (bAllowGroups = InAllowGroups ; return* this ; } bool)",
    "insertText": "AllowGroups()"
  },
  {
    "label": "AllowLegacyNotifications()",
    "kind": "Method",
    "detail": "Function (bAllowLegacyNotifications = InAllowLegacyNotifications ; return* this ; } bool)",
    "insertText": "AllowLegacyNotifications()"
  },
  {
    "label": "WarnIfLocked()",
    "kind": "Method",
    "detail": "Function (bWarnIfLocked = InWarnIfLocked ; return* this ; } bool)",
    "insertText": "WarnIfLocked()"
  },
  {
    "label": "AllowSubRootSelection()",
    "kind": "Method",
    "detail": "Function (bAllowSubRootSelection = InAllowSubRootSelectioin ; return* this ; } bool)",
    "insertText": "AllowSubRootSelection()"
  },
  {
    "label": "GetChildElementInclusionMethod()",
    "kind": "Method",
    "detail": "Function (ChildElementInclusionMethod = InChildElementInclusionMethod ; return* this ; } ETypedElementChildInclusionMethod)",
    "insertText": "GetChildElementInclusionMethod()"
  },
  {
    "label": "ITypedElementTransactedElement()",
    "kind": "Method",
    "detail": "Function (} ; class ITypedElementTransactedElement { public : ~)",
    "insertText": "ITypedElementTransactedElement()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ITypedElementTransactedElement>)",
    "insertText": "Clone()"
  },
  {
    "label": "CloneImpl()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ITypedElementTransactedElement> Cloned =)",
    "insertText": "CloneImpl()"
  },
  {
    "label": "GetElementType()",
    "kind": "Method",
    "detail": "Function (} FTypedHandleTypeId)",
    "insertText": "GetElementType()"
  },
  {
    "label": "SetElementType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementType(InElementHandle.GetId().GetTypeId())"
  },
  {
    "label": "SetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementImpl(InElementHandle)"
  },
  {
    "label": "SetElementType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetElementType(const FTypedHandleTypeId InTypeId)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TypeId = InTypeId ; } void)",
    "insertText": "Serialize(FArchive& InArchive)"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(InArchive)"
  },
  {
    "label": "GetElementImpl()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetElementImpl()"
  },
  {
    "label": "SetElementImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementImpl(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(FArchive& InArchive)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (private : FTypedHandleTypeId TypeId = 0 ; } ;)",
    "insertText": "UINTERFACE(MinimalAPI, BlueprintType, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITypedElementSelectionInterface {)",
    "insertText": "GENERATED_BODY() public: TYPEDELEMENTRUNTIME_API virtual bool IsElementSelected(const FTypedElementHandle& InElementHandle, const FTypedElementListConstPtr& SelectionSetPtr, const FTypedElementIsSelectedOptions& InSelectionOptions)"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectElement(const FTypedElementHandle& InElementHandle, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElement(const FTypedElementHandle& InElementHandle, const FTypedElementListPtr& InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "AllowSelectionModifiers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSelectionModifiers(const FTypedElementHandle& InElementHandle, const FTypedElementListConstPtr& InSelectionSet)"
  },
  {
    "label": "CreateTransactedElementImpl()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ITypedElementTransactedElement> TransactedElement =)",
    "insertText": "CreateTransactedElementImpl()"
  },
  {
    "label": "SetElement()",
    "kind": "Method",
    "detail": "Function (TransactedElement ->)",
    "insertText": "SetElement(InElementHandle)"
  },
  {
    "label": "CreateTransactedElement()",
    "kind": "Method",
    "detail": "Function (} return TransactedElement ; } TUniquePtr<ITypedElementTransactedElement>)",
    "insertText": "CreateTransactedElement(const FTypedHandleTypeId InTypeId)"
  },
  {
    "label": "SetElementType()",
    "kind": "Method",
    "detail": "Function (TransactedElement ->)",
    "insertText": "SetElementType(InTypeId)"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "CanDeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeselectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "SelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SelectElement(FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeselectElement(FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "AllowSelectionModifiers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowSelectionModifiers(FTypedElementListConstRef InSelectionSet)"
  },
  {
    "label": "GetSelectionElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementHandle)",
    "insertText": "GetSelectionElement(FTypedElementListConstRef InCurrentSelection, const ETypedElementSelectionMethod InSelectionMethod)"
  },
  {
    "label": "ShouldPreventTransactions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldPreventTransactions()"
  },
  {
    "label": "CreateTransactedElement()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<ITypedElementTransactedElement>)",
    "insertText": "CreateTransactedElement()"
  }
]