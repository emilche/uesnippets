[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_OBJECT_WATCHER_H_ # define BASE_WIN_OBJECT_WATCHER_H_ # include \" base / win / windows_types . h \" # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / weak_ptr . h \" # include \" base / task / sequenced_task_runner . h \" namespace base { namespace win { class BASE_EXPORT ObjectWatcher { public : class BASE_EXPORT Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "OnObjectSignaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSignaled(HANDLE object)"
  },
  {
    "label": "ObjectWatcher()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ObjectWatcher()"
  },
  {
    "label": "ObjectWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectWatcher(const ObjectWatcher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ObjectWatcher&)",
    "insertText": "operator(const ObjectWatcher&)"
  },
  {
    "label": "StartWatchingOnce()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartWatchingOnce(HANDLE object, Delegate* delegate, const Location& from_here = Location::Current())"
  },
  {
    "label": "StartWatchingMultipleTimes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartWatchingMultipleTimes(HANDLE object, Delegate* delegate, const Location& from_here = Location::Current())"
  },
  {
    "label": "StopWatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatching()"
  },
  {
    "label": "IsWatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWatching()"
  },
  {
    "label": "GetWatchedObject()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "GetWatchedObject()"
  },
  {
    "label": "DoneWaiting()",
    "kind": "Method",
    "detail": "Function (private : void CALLBACK)",
    "insertText": "DoneWaiting(void* param, BOOLEAN timed_out)"
  },
  {
    "label": "StartWatchingInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartWatchingInternal(HANDLE object, Delegate* delegate, bool execute_only_once, const Location& from_here)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal(Delegate* delegate)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  }
]