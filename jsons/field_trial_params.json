[
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "Option",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Option"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_FIELD_TRIAL_PARAMS_H_ # define BASE_METRICS_FIELD_TRIAL_PARAMS_H_ # include<map> # include<string> # include \" base / base_export . h \" # include \" base / feature_list . h \" # include \" base / logging . h \" # include \" base / notreached . h \" # include \" base / time / time . h \" namespace base { typedef std::map<std::string,std::string> FieldTrialParams ; typedef)",
    "insertText": "string(*FieldTrialParamsDecodeStringFunc)(const std::string& str)"
  },
  {
    "label": "UnescapeValue()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "UnescapeValue(const std::string& value)"
  },
  {
    "label": "AssociateFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "AssociateFieldTrialParams(const std::string& trial_name, const std::string& group_name, const FieldTrialParams& params)"
  },
  {
    "label": "AssociateFieldTrialParamsFromString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "AssociateFieldTrialParamsFromString(const std::string& params_string, FieldTrialParamsDecodeStringFunc decode_data_func)"
  },
  {
    "label": "GetFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetFieldTrialParams(const std::string& trial_name, FieldTrialParams* params)"
  },
  {
    "label": "GetFieldTrialParamsByFeature()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetFieldTrialParamsByFeature(const base::Feature& feature, FieldTrialParams* params)"
  },
  {
    "label": "GetFieldTrialParamValue()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "GetFieldTrialParamValue(const std::string& trial_name, const std::string& param_name)"
  },
  {
    "label": "GetFieldTrialParamValueByFeature()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "GetFieldTrialParamValueByFeature(const base::Feature& feature, const std::string& param_name)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsInt()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT int)",
    "insertText": "GetFieldTrialParamByFeatureAsInt(const base::Feature& feature, const std::string& param_name, int default_value)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsDouble()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT double)",
    "insertText": "GetFieldTrialParamByFeatureAsDouble(const base::Feature& feature, const std::string& param_name, double default_value)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsBool()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetFieldTrialParamByFeatureAsBool(const base::Feature& feature, const std::string& param_name, bool default_value)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<T,bool IsEnum = std::is_enum<T>::value> struct FeatureParam {)",
    "insertText": "static_assert(!std::is_same<T, T>::value, \"unsupported FeatureParam<> type\")"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct FeatureParam<std::string> {)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, const char* default_value) : feature(feature), name(name), default_value(default_value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT std::string)",
    "insertText": "Get()"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (const Feature* const feature ; const char* const name ; const char* const default_value ; } ; template<> struct FeatureParam<double> {)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, double default_value) : feature(feature), name(name), default_value(default_value)"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (const Feature* const feature ; const char* const name ; const double default_value ; } ; template<> struct FeatureParam<int> {)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, int default_value) : feature(feature), name(name), default_value(default_value)"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (const Feature* const feature ; const char* const name ; const int default_value ; } ; template<> struct FeatureParam<bool> {)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, bool default_value) : feature(feature), name(name), default_value(default_value)"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (const Feature* const feature ; const char* const name ; const bool default_value ; } ; template<> struct FeatureParam<base::TimeDelta> {)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, base::TimeDelta default_value) : feature(feature), name(name), default_value(default_value)"
  },
  {
    "label": "LogInvalidEnumValue()",
    "kind": "Method",
    "detail": "Function (const Feature* const feature ; const char* const name ; const base::TimeDelta default_value ; } ; BASE_EXPORT void)",
    "insertText": "LogInvalidEnumValue(const Feature& feature, const std::string& param_name, const std::string& value_as_string, int default_value_as_int)"
  },
  {
    "label": "Option()",
    "kind": "Method",
    "detail": "Function (template<Enum> struct FeatureParam<Enum,true> { struct Option {)",
    "insertText": "Option(Enum value, const char* name) : value(value), name(name)"
  },
  {
    "label": "FeatureParam()",
    "kind": "Method",
    "detail": "Function (} const Enum value ; const char* const name ; } ; template<size_t option_count>)",
    "insertText": "FeatureParam(const Feature* feature, const char* name, const Enum default_value, const Option (*options)[option_count]) : feature(feature), name(name), default_value(default_value), options(*options), option_count(option_count)"
  },
  {
    "label": "GetFieldTrialParamValueByFeature()",
    "kind": "Method",
    "detail": "Function (std::string value =)",
    "insertText": "GetFieldTrialParamValueByFeature(*feature, name)"
  },
  {
    "label": "LogInvalidEnumValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LogInvalidEnumValue(*feature, name, value, static_cast<int>(default_value))"
  },
  {
    "label": "NOTREACHED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NOTREACHED()"
  }
]