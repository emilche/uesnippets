[
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "FeatureParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureParam"
  },
  {
    "label": "Option",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Option"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "UnescapeValue()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "UnescapeValue(const std::string& value)"
  },
  {
    "label": "AssociateFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssociateFieldTrialParams(const std::string& trial_name,\n                                           const std::string& group_name,\n                                           const FieldTrialParams& params)"
  },
  {
    "label": "AssociateFieldTrialParamsFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssociateFieldTrialParamsFromString(\n    const std::string& params_string,\n    FieldTrialParamsDecodeStringFunc decode_data_func)"
  },
  {
    "label": "GetFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFieldTrialParams(const std::string& trial_name,\n                                     FieldTrialParams* params)"
  },
  {
    "label": "GetFieldTrialParamsByFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFieldTrialParamsByFeature(const base::Feature& feature,\n                                              FieldTrialParams* params)"
  },
  {
    "label": "GetFieldTrialParamValue()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFieldTrialParamValue(const std::string& trial_name,\n                                                const std::string& param_name)"
  },
  {
    "label": "GetFieldTrialParamValueByFeature()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFieldTrialParamValueByFeature(\n    const base::Feature& feature,\n    const std::string& param_name)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsInt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFieldTrialParamByFeatureAsInt(const base::Feature& feature,\n                                                 const std::string& param_name,\n                                                 int default_value)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFieldTrialParamByFeatureAsDouble(\n    const base::Feature& feature,\n    const std::string& param_name,\n    double default_value)"
  },
  {
    "label": "GetFieldTrialParamByFeatureAsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFieldTrialParamByFeatureAsBool(\n    const base::Feature& feature,\n    const std::string& param_name,\n    bool default_value)"
  },
  {
    "label": "LogInvalidEnumValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInvalidEnumValue(const Feature& feature,\n                                     const std::string& param_name,\n                                     const std::string& value_as_string,\n                                     int default_value_as_int)"
  }
]