[
  {
    "label": "FXPBDAxialSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDAxialSpringConstraints"
  },
  {
    "label": "FXPBDAreaSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDAreaSpringConstraints"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDAxialSpringConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos XPBD Axial Spring Constraint\"), STAT_XPBD_AxialSpring, STATGROUP_Chaos)"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { class FXPBDAxialSpringConstraints : public FPBDAxialSpringConstraintsBase { typedef FPBDAxialSpringConstraintsBase Base ; public : FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "FXPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXPBDAxialSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints) : Base( Particles, InConstraints, StiffnessMultipliers, InStiffness, bTrimKinematicConstraints, MaxStiffness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Init(0.f, Constraints.Num())"
  },
  {
    "label": "FXPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAxialSpringConstraints(const FSolverParticles& Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints) : Base( Particles, ParticleOffset, ParticleCount, InConstraints, StiffnessMultipliers, InStiffness, bTrimKinematicConstraints, MaxStiffness)"
  },
  {
    "label": "FXPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDAxialSpringConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness, MaxStiffness)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal , const int32)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyXPBDValues(MaxStiffness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(FSolverReal)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_XPBD_AxialSpring)"
  },
  {
    "label": "ExpStiffnessValue()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "ExpStiffnessValue(FSolverReal)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (const TVector<int32,3>& constraint = Constraints [ ConstraintIndex ] ; const int32 i1 = constraint [ 0 ] ; const int32 i2 = constraint [ 1 ] ; const int32 i3 = constraint [ 2 ] ; const FSolverVec3 Delta =)",
    "insertText": "GetDelta(Particles, Dt, ConstraintIndex, ExpStiffnessValue)"
  },
  {
    "label": "Multiplier()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "Multiplier(FSolverReal)2. / (FMath::Max(Barys[ConstraintIndex], (FSolverReal)1. - Barys[ConstraintIndex]) + (FSolverReal)1.)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i1) -= Multiplier * Particles.InvM(i1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(i2) != 0)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i2) += Multiplier * Particles.InvM(i2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(i3) != 0)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i3) += Multiplier * Particles.InvM(i3) * ((FSolverReal)1. - Barys[ConstraintIndex])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int32 ConstraintIndex = 0; ConstraintIndex < Constraints.Num(); ++ConstraintIndex)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} } } } private : template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetDelta(const SolverParticlesOrRange& Particles, const FSolverReal Dt, const int32 InConstraintIndex, const FSolverReal StiffnessValue)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const TVector<int32,3>& Constraint = Constraints [ InConstraintIndex ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ; const int32 i3 = Constraint [ 2 ] ; const FSolverReal Bary = Barys [ InConstraintIndex ] ; const FSolverReal PInvMass = Particles .)",
    "insertText": "InvM(i3) * ((FSolverReal)1. - Bary) + Particles.InvM(i2)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (} const FSolverReal CombinedInvMass = PInvMass + Particles .)",
    "insertText": "InvM(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "P(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "P(P2 - P3)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Difference = P1 - P ; const FSolverReal Distance = Difference .)",
    "insertText": "Size()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3 Direction = Difference / Distance ; const FSolverReal)",
    "insertText": "Offset(Distance - Dists[InConstraintIndex])"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (FSolverReal& Lambda = Lambdas [ InConstraintIndex ] ; const FSolverReal)",
    "insertText": "Alpha(FSolverReal)1 / (StiffnessValue * Dt * Dt)"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "DLambda(Offset - Alpha * Lambda) / (CombinedInvMass + Alpha)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Delta = DLambda* Direction ; Lambda + = DLambda ; return Delta ; } protected : using Base::Constraints ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::Stiffness ; private : using Base::Barys ; using Base::Dists ; TArray<FSolverReal> Lambdas ; } ; class FXPBDAreaSpringConstraints final : public FXPBDAxialSpringConstraints { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAreaSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints) : FXPBDAxialSpringConstraints( Particles, InConstraints, WeightMaps.FindRef(GetXPBDAreaSpringStiffnessString(PropertyCollection, XPBDAreaSpringStiffnessName.ToString())), FSolverVec2(GetWeightedFloatXPBDAreaSpringStiffness(PropertyCollection, MaxStiffness)), bTrimKinematicConstraints) , XPBDAreaSpringStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAreaSpringConstraints(const FSolverParticles& Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints) : FXPBDAxialSpringConstraints( Particles, ParticleOffset, ParticleCount, InConstraints, WeightMaps.FindRef(GetXPBDAreaSpringStiffnessString(PropertyCollection, XPBDAreaSpringStiffnessName.ToString())), FSolverVec2(GetWeightedFloatXPBDAreaSpringStiffness(PropertyCollection, MaxStiffness)), bTrimKinematicConstraints) , XPBDAreaSpringStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDAreaSpringConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2)",
    "insertText": "WeightedValue(GetWeightedFloatXPBDAreaSpringStiffness(PropertyCollection))"
  },
  {
    "label": "GetXPBDAreaSpringStiffnessString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetXPBDAreaSpringStiffnessString(PropertyCollection)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (Stiffness =)",
    "insertText": "FPBDStiffness(WeightedValue, WeightMaps.FindRef(WeightMapName), TConstArrayView<TVec3<int32>>(Constraints), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { Stiffness .)",
    "insertText": "SetWeightedValue(WeightedValue, MaxStiffness)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} } } private : using FXPBDAxialSpringConstraints::Constraints ; using FXPBDAxialSpringConstraints::ParticleOffset ; using FXPBDAxialSpringConstraints::ParticleCount ; using FXPBDAxialSpringConstraints::Stiffness ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAreaSpringStiffness, float)"
  }
]