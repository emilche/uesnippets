[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBulkDataCookedIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataCookedIndex"
  },
  {
    "label": "FBulkDataCookedIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Misc / PathViews . h \" # include \" Serialization / StructuredArchive . h \" # include \" String / LexFromString . h \" # include \" String / Numeric . h \" # define UE_DEFAULT_ZERO 1 # define UE_DISABLE_COOKEDINDEX_FOR_MEMORYMAPPED 1 # define UE_DISABLE_COOKEDINDEX_FOR_NONDUPLICATE 1 enum class EBulkDataPayloadType : uint8 {,AppendToExports,BulkSegment,Optional,MemoryMapped,} ; class FBulkDataCookedIndex { public : using ValueType = uint8 ; int32 MAX_DIGITS = 3 ; const FBulkDataCookedIndex Default ;)",
    "insertText": "FBulkDataCookedIndex()"
  },
  {
    "label": "FBulkDataCookedIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBulkDataCookedIndex(ValueType InValue) : Value(InValue)"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (# if UE_DEFAULT_ZERO return Value = = 0 ; # else return Value = = TNumericLimits<ValueType)",
    "insertText": "Max()"
  },
  {
    "label": "GetAsExtension()",
    "kind": "Method",
    "detail": "Function (# endif } FString)",
    "insertText": "GetAsExtension()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Printf(TEXT(\".%03hhu\"), Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} } ValueType)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Slot<<ChunkGroup . Value ; } uint32)",
    "insertText": "GetTypeHash(const FBulkDataCookedIndex& ChunkGroup)"
  },
  {
    "label": "ParseFromPath()",
    "kind": "Method",
    "detail": "Function (} FBulkDataCookedIndex)",
    "insertText": "ParseFromPath(FStringView Path)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ExtensionStartIndex = - 1 ;)",
    "insertText": "for(int32 Index = Path.Len() - 1; Index >= 0; --Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Path[Index] == '.')"
  },
  {
    "label": "SubStr()",
    "kind": "Method",
    "detail": "Function (FStringView Extension = Path .)",
    "insertText": "SubStr(Index + 1, (ExtensionStartIndex - Index) - 1)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (ValueType Value = 0 ;)",
    "insertText": "LexFromString(Value, Extension)"
  }
]