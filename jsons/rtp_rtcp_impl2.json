[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "PacedPacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacedPacketInfo"
  },
  {
    "label": "RTPVideoHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPVideoHeader"
  },
  {
    "label": "ModuleRtpRtcpImpl2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleRtpRtcpImpl2"
  },
  {
    "label": "RtpSenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSenderContext"
  },
  {
    "label": "ModuleRtpRtcpImpl2()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_RTCP_IMPL2_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_RTCP_IMPL2_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / rtp_headers . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" modules / include / module_fec_types . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / packet_sequencer . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmb_item . h \" # include \" modules / rtp_rtcp / source / rtcp_receiver . h \" # include \" modules / rtp_rtcp / source / rtcp_sender . h \" # include \" modules / rtp_rtcp / source / rtp_packet_history . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / rtp_rtcp / source / rtp_sender . h \" # include \" modules / rtp_rtcp / source / rtp_sender_egress . h \" # include \" rtc_base / gtest_prod_util . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; struct PacedPacketInfo ; struct RTPVideoHeader ; class ModuleRtpRtcpImpl2 final : public RtpRtcpInterface,public RTCPReceiver::ModuleRtpRtcp { public :)",
    "insertText": "ModuleRtpRtcpImpl2(const RtpRtcpInterface::Configuration& configuration)"
  },
  {
    "label": "ModuleRtpRtcpImpl2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ModuleRtpRtcpImpl2()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ModuleRtpRtcpImpl2>)",
    "insertText": "Create(const Configuration& configuration)"
  },
  {
    "label": "IncomingRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingRtcpPacket(const uint8_t* incoming_packet, size_t incoming_packet_length)"
  },
  {
    "label": "SetRemoteSSRC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSSRC(uint32_t ssrc)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t local_ssrc)"
  },
  {
    "label": "RegisterSendPayloadFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSendPayloadFrequency(int payload_type, int payload_frequency)"
  },
  {
    "label": "DeRegisterSendPayload()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "DeRegisterSendPayload(int8_t payload_type)"
  },
  {
    "label": "SetExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtmapAllowMixed(bool extmap_allow_mixed)"
  },
  {
    "label": "RegisterRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterRtpHeaderExtension(absl::string_view uri, int id)"
  },
  {
    "label": "DeregisterSendRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeregisterSendRtpHeaderExtension(absl::string_view uri)"
  },
  {
    "label": "SupportsPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPadding()"
  },
  {
    "label": "SupportsRtxPayloadPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRtxPayloadPadding()"
  },
  {
    "label": "StartTimestamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "StartTimestamp()"
  },
  {
    "label": "SetStartTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartTimestamp(uint32_t timestamp)"
  },
  {
    "label": "SequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "SequenceNumber()"
  },
  {
    "label": "SetSequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceNumber(uint16_t seq)"
  },
  {
    "label": "SetRtpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpState(const RtpState& rtp_state)"
  },
  {
    "label": "SetRtxState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxState(const RtpState& rtp_state)"
  },
  {
    "label": "GetRtpState()",
    "kind": "Method",
    "detail": "Function (RtpState)",
    "insertText": "GetRtpState()"
  },
  {
    "label": "GetRtxState()",
    "kind": "Method",
    "detail": "Function (RtpState)",
    "insertText": "GetRtxState()"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "SSRC()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SSRC()"
  },
  {
    "label": "local_media_ssrc()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "local_media_ssrc()"
  },
  {
    "label": "SetMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMid(absl::string_view mid)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCsrcs(const std::vector<uint32_t>& csrcs)"
  },
  {
    "label": "GetFeedbackState()",
    "kind": "Method",
    "detail": "Function (RTCPSender::FeedbackState)",
    "insertText": "GetFeedbackState()"
  },
  {
    "label": "SetRtxSendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxSendStatus(int mode)"
  },
  {
    "label": "RtxSendStatus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RtxSendStatus()"
  },
  {
    "label": "RtxSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "RtxSsrc()"
  },
  {
    "label": "SetRtxSendPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxSendPayloadType(int payload_type, int associated_payload_type)"
  },
  {
    "label": "FlexfecSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "FlexfecSsrc()"
  },
  {
    "label": "SetSendingStatus()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSendingStatus(bool sending)"
  },
  {
    "label": "Sending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sending()"
  },
  {
    "label": "SetSendingMediaStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendingMediaStatus(bool sending)"
  },
  {
    "label": "SendingMedia()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendingMedia()"
  },
  {
    "label": "IsAudioConfigured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioConfigured()"
  },
  {
    "label": "SetAsPartOfAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsPartOfAllocation(bool part_of_allocation)"
  },
  {
    "label": "OnSendingRtpFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSendingRtpFrame(uint32_t timestamp, int64_t capture_time_ms, int payload_type, bool force_sender_report)"
  },
  {
    "label": "TrySendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySendPacket(RtpPacketToSend* packet, const PacedPacketInfo& pacing_info)"
  },
  {
    "label": "SetFecProtectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecProtectionParams(const FecProtectionParams& delta_params, const FecProtectionParams& key_params)"
  },
  {
    "label": "FetchFecPackets()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "FetchFecPackets()"
  },
  {
    "label": "OnAbortedRetransmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortedRetransmissions(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "OnPacketsAcknowledged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketsAcknowledged(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "GeneratePadding()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GeneratePadding(size_t target_size_bytes)"
  },
  {
    "label": "GetSentRtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSequenceNumberMap::Info>)",
    "insertText": "GetSentRtpPacketInfos(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "ExpectedPerPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ExpectedPerPacketOverhead()"
  },
  {
    "label": "OnPacketSendingThreadSwitched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSendingThreadSwitched()"
  },
  {
    "label": "RTCP()",
    "kind": "Method",
    "detail": "Function (RtcpMode)",
    "insertText": "RTCP()"
  },
  {
    "label": "SetRTCPStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRTCPStatus(RtcpMode method)"
  },
  {
    "label": "SetCNAME()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetCNAME(absl::string_view c_name)"
  },
  {
    "label": "RemoteNTP()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RemoteNTP(uint32_t* received_ntp_secs, uint32_t* received_ntp_frac, uint32_t* rtcp_arrival_time_secs, uint32_t* rtcp_arrival_time_frac, uint32_t* rtcp_timestamp)"
  },
  {
    "label": "RTT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RTT(uint32_t remote_ssrc, int64_t* rtt, int64_t* avg_rtt, int64_t* min_rtt, int64_t* max_rtt)"
  },
  {
    "label": "ExpectedRetransmissionTimeMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ExpectedRetransmissionTimeMs()"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendRTCP(RTCPPacketType rtcpPacketType)"
  },
  {
    "label": "GetSendStreamDataCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSendStreamDataCounters(StreamDataCounters* rtp_counters, StreamDataCounters* rtx_counters)"
  },
  {
    "label": "GetLatestReportBlockData()",
    "kind": "Method",
    "detail": "Function (std::vector<ReportBlockData>)",
    "insertText": "GetLatestReportBlockData()"
  },
  {
    "label": "GetSenderReportStats()",
    "kind": "Method",
    "detail": "Function (absl::optional<SenderReportStats>)",
    "insertText": "GetSenderReportStats()"
  },
  {
    "label": "GetNonSenderRttStats()",
    "kind": "Method",
    "detail": "Function (absl::optional<NonSenderRttStats>)",
    "insertText": "GetNonSenderRttStats()"
  },
  {
    "label": "SetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "UnsetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetRemb()"
  },
  {
    "label": "SetTmmbn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTmmbn(std::vector<rtcp::TmmbItem> bounding_set)"
  },
  {
    "label": "MaxRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxRtpPacketSize()"
  },
  {
    "label": "SetMaxRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxRtpPacketSize(size_t max_packet_size)"
  },
  {
    "label": "SendNACK()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendNACK(const uint16_t* nack_list, uint16_t size)"
  },
  {
    "label": "SendNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNack(const std::vector<uint16_t>& sequence_numbers)"
  },
  {
    "label": "SetStorePacketsStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStorePacketsStatus(bool enable, uint16_t number_to_store)"
  },
  {
    "label": "SendCombinedRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCombinedRtcpPacket(std::vector<std::unique_ptr<rtcp::RtcpPacket>> rtcp_packets)"
  },
  {
    "label": "SendLossNotification()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendLossNotification(uint16_t last_decoded_seq_num, uint16_t last_received_seq_num, bool decodability_flag, bool buffering_allowed)"
  },
  {
    "label": "GetSendRates()",
    "kind": "Method",
    "detail": "Function (RtpSendRates)",
    "insertText": "GetSendRates()"
  },
  {
    "label": "OnReceivedNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedNack(const std::vector<uint16_t>& nack_sequence_numbers)"
  },
  {
    "label": "OnReceivedRtcpReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtcpReportBlocks(const ReportBlockList& report_blocks)"
  },
  {
    "label": "OnRequestSendReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestSendReport()"
  },
  {
    "label": "SetVideoBitrateAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoBitrateAllocation(const VideoBitrateAllocation& bitrate)"
  },
  {
    "label": "RtpSender()",
    "kind": "Method",
    "detail": "Function (RTPSender*)",
    "insertText": "RtpSender()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(RtpRtcpImpl2Test, Rtt)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(RtpRtcpImpl2Test, RttForReceiverOnly)"
  },
  {
    "label": "RtpSenderContext()",
    "kind": "Method",
    "detail": "Function (struct RtpSenderContext {)",
    "insertText": "RtpSenderContext(const RtpRtcpInterface::Configuration& config)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RtpPacketHistory packet_history ; SequenceChecker sequencing_checker ; PacketSequencer sequencer)",
    "insertText": "RTC_GUARDED_BY(sequencing_checker)"
  },
  {
    "label": "set_rtt_ms()",
    "kind": "Method",
    "detail": "Function (RtpSenderEgress packet_sender ; RtpSenderEgress::NonPacedPacketSender non_paced_sender ; RTPSender packet_generator ; } ; void)",
    "insertText": "set_rtt_ms(int64_t rtt_ms)"
  },
  {
    "label": "rtt_ms()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "rtt_ms()"
  },
  {
    "label": "TimeToSendFullNackList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeToSendFullNackList(int64_t now)"
  },
  {
    "label": "PeriodicUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeriodicUpdate()"
  },
  {
    "label": "StorePackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StorePackets()"
  },
  {
    "label": "MaybeSendRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendRtcp() RTC_RUN_ON(worker_queue_)"
  },
  {
    "label": "ScheduleRtcpSendEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleRtcpSendEvaluation(TimeDelta duration)"
  },
  {
    "label": "MaybeSendRtcpAtOrAfterTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendRtcpAtOrAfterTimestamp(Timestamp execution_time) RTC_RUN_ON(worker_queue_)"
  },
  {
    "label": "ScheduleMaybeSendRtcpAtOrAfterTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleMaybeSendRtcpAtOrAfterTimestamp(Timestamp execution_time, TimeDelta duration)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase* const worker_queue_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker rtcp_thread_checker_ ; std::unique_ptr<RtpSenderContext> rtp_sender_ ; RTCPSender rtcp_sender_ ; RTCPReceiver rtcp_receiver_ ; Clock* const clock_ ; uint16_t packet_overhead_ ; int64_t nack_last_time_sent_full_ms_ ; uint16_t nack_last_seq_number_sent_ ; RtcpRttStats* const rtt_stats_ ; RepeatingTaskHandle rtt_update_task_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_rtt_ ; int64_t rtt_ms_)",
    "insertText": "RTC_GUARDED_BY(mutex_rtt_)"
  }
]