[
  {
    "label": "FHashMapLinearProbingVAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashMapLinearProbingVAlloc"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBucketEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBucketEntry"
  },
  {
    "label": "FVirtualAllocPageStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualAllocPageStatus"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / LowLevelMemTracker . h \" # define UE_VIRTUALALLOC_PAGE_STATUS_ENABLED ENABLE_LOW_LEVEL_MEM_TRACKER # if UE_VIRTUALALLOC_PAGE_STATUS_ENABLED # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" struct FHashMapLinearProbingVAlloc { public : void)",
    "insertText": "Init(uint64 PageSize)"
  },
  {
    "label": "FHashMapLinearProbingVAlloc()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHashMapLinearProbingVAlloc()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint64*)",
    "insertText": "Find(uint64 Key)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (uint64&)",
    "insertText": "FindOrAdd(uint64 Key, uint64 ValueIfMissing)"
  },
  {
    "label": "RemoveAndGetValue()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RemoveAndGetValue(uint64 Key, uint64 ValueIfMissing)"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (private : enum class EValueType { Unallocated,Tombstone,Active,} ; struct FBucketEntry { uint64 Key ; uint64 Value ; EValueType)",
    "insertText": "GetValueType()"
  },
  {
    "label": "SetAsActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsActive(uint64 InKey)"
  },
  {
    "label": "SetAsUnallocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsUnallocated()"
  },
  {
    "label": "SetAsTombstone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsTombstone()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} ; private : void*)",
    "insertText": "Malloc(size_t Size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr, size_t Size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Realloc(int64 InNum)"
  },
  {
    "label": "FindBucket()",
    "kind": "Method",
    "detail": "Function (FBucketEntry*)",
    "insertText": "FindBucket(uint64 Key)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (private : FBucketEntry* Buckets = nullptr ; int64 NumBuckets = 0 ; int64 NumActive = 0 ; float DesiredPopulation = 0 . 3 f ; uint64 MaxKey = MAX_uint64 - static_cast<)",
    "insertText": "uint64(EValueType::Active)"
  },
  {
    "label": "FVirtualAllocPageStatus()",
    "kind": "Method",
    "detail": "Function (uint64 CollisionResolutionDeltaFraction = 3 2 ; } ; struct FVirtualAllocPageStatus {)",
    "insertText": "FVirtualAllocPageStatus()"
  },
  {
    "label": "MarkChangedAndReturnDeltaSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MarkChangedAndReturnDeltaSize(void* InStartAddress, SIZE_T InSize, bool bCommitted)"
  },
  {
    "label": "AddReservationSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReservationSize(void* InReservationAddress, SIZE_T InSize, SIZE_T& OutOldSize)"
  },
  {
    "label": "GetAndRemoveReservationSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAndRemoveReservationSize(void* InReservationAddress)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection Lock ; FHashMapLinearProbingVAlloc GroupToPageBitsMap ; FHashMapLinearProbingVAlloc PageToReservationSizeMap ; uint64 PageSize = 1 ; uint64 ReservationAlignment = 1 ; uint64 AccumulatedSize = 0 ; uint64 PagesPerGroup =)",
    "insertText": "sizeof(uint64)"
  }
]