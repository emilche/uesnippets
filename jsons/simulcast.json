[
  {
    "label": "GetTotalMaxBitrate()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_CONFIG_SIMULCAST_H_ # define VIDEO_CONFIG_SIMULCAST_H_ # include<stddef . h> # include<vector> # include \" api / field_trials_view . h \" # include \" api / units / data_rate . h \" # include \" video / config / video_encoder_config . h \" namespace cricket { webrtc::DataRate)",
    "insertText": "GetTotalMaxBitrate(const std::vector<webrtc::VideoStream>& streams)"
  },
  {
    "label": "BoostMaxSimulcastLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostMaxSimulcastLayer(webrtc::DataRate max_bitrate, std::vector<webrtc::VideoStream>* layers)"
  },
  {
    "label": "NormalizeSimulcastSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NormalizeSimulcastSize(int size, size_t simulcast_layers)"
  },
  {
    "label": "GetSimulcastConfig()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::VideoStream>)",
    "insertText": "GetSimulcastConfig(size_t min_layers, size_t max_layers, int width, int height, double bitrate_priority, int max_qp, bool is_screenshare_with_conference_mode, bool temporal_layers_supported, const webrtc::FieldTrialsView& trials)"
  },
  {
    "label": "GetNormalSimulcastLayers()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::VideoStream>)",
    "insertText": "GetNormalSimulcastLayers(size_t max_layers, int width, int height, double bitrate_priority, int max_qp, bool temporal_layers_supported, bool base_heavy_tl3_rate_alloc, const webrtc::FieldTrialsView& trials)"
  },
  {
    "label": "GetScreenshareLayers()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::VideoStream>)",
    "insertText": "GetScreenshareLayers(size_t max_layers, int width, int height, double bitrate_priority, int max_qp, bool temporal_layers_supported, bool base_heavy_tl3_rate_alloc, const webrtc::FieldTrialsView& trials)"
  }
]