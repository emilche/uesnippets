[
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "DominanceFrontierBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominanceFrontierBase"
  },
  {
    "label": "ForwardDominanceFrontierBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForwardDominanceFrontierBase"
  },
  {
    "label": "DominanceFrontier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominanceFrontier"
  },
  {
    "label": "DominanceFrontierBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_DOMINANCEFRONTIER_H # define LLVM_ANALYSIS_DOMINANCEFRONTIER_H # include \" llvm / IR / Dominators . h \" # include<map> # include<set> namespace llvm { template<class BlockT> class DominanceFrontierBase { public : typedef std::set<BlockT*> DomSetType ; typedef std::map<BlockT*,DomSetType> DomSetMapType ; protected : typedef GraphTraits<BlockT*> BlockTraits ; DomSetMapType Frontiers ; std::vector<BlockT*> Roots ; const bool IsPostDominators ; public :)",
    "insertText": "DominanceFrontierBase(bool isPostDom) : IsPostDominators(isPostDom)"
  },
  {
    "label": "getRoots()",
    "kind": "Method",
    "detail": "Function (} const std::vector<BlockT*>&)",
    "insertText": "getRoots()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Roots.size() == 1 && \"Should always have entry node!\")"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Frontiers .)",
    "insertText": "clear()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef DomSetMapType::iterator iterator ; typedef DomSetMapType::const_iterator const_iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(BlockT *B)"
  },
  {
    "label": "addBasicBlock()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "addBasicBlock(BlockT *BB, const DomSetType &frontier)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(find(BB) == end() && \"Block already in DominanceFrontier!\")"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeBlock(BlockT *BB)"
  },
  {
    "label": "addToFrontier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addToFrontier(iterator I, BlockT *Node)"
  },
  {
    "label": "removeFromFrontier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeFromFrontier(iterator I, BlockT *Node)"
  },
  {
    "label": "compareDomSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "compareDomSet(DomSetType &DS1, const DomSetType &DS2)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "compare(DominanceFrontierBase<BlockT> &Other)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(NDEBUG) || defined(LLVM_ENABLE_DUMP) void dump()"
  },
  {
    "label": "ForwardDominanceFrontierBase()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class BlockT> class ForwardDominanceFrontierBase : public DominanceFrontierBase<BlockT> { private : typedef GraphTraits<BlockT*> BlockTraits ; public : typedef DominatorTreeBase<BlockT> DomTreeT ; typedef DomTreeNodeBase<BlockT> DomTreeNodeT ; typedef DominanceFrontierBase<BlockT>::DomSetType DomSetType ;)",
    "insertText": "ForwardDominanceFrontierBase() : DominanceFrontierBase<BlockT>(false)"
  },
  {
    "label": "analyze()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyze(DomTreeT &DT)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->Roots.size() == 1 && \"Only one entry block for forward domfronts!\")"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculate(DT, DT[this->Roots[0]])"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (} const DomSetType&)",
    "insertText": "calculate(const DomTreeT &DT, const DomTreeNodeT *Node)"
  },
  {
    "label": "DominanceFrontier()",
    "kind": "Method",
    "detail": "Function (} ; class DominanceFrontier : public FunctionPass { ForwardDominanceFrontierBase<BasicBlock> Base ; public : typedef DominatorTreeBase<BasicBlock> DomTreeT ; typedef DomTreeNodeBase<BasicBlock> DomTreeNodeT ; typedef DominanceFrontierBase<BasicBlock>::DomSetType DomSetType ; typedef DominanceFrontierBase<BasicBlock>::iterator iterator ; typedef DominanceFrontierBase<BasicBlock>::const_iterator const_iterator ; char ID ;)",
    "insertText": "DominanceFrontier()"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getRoot()"
  },
  {
    "label": "isPostDominator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPostDominator()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(BasicBlock *B)"
  },
  {
    "label": "addBasicBlock()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "addBasicBlock(BasicBlock *BB, const DomSetType &frontier)"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeBlock(BasicBlock *BB)"
  },
  {
    "label": "addToFrontier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addToFrontier(iterator I, BasicBlock *Node)"
  },
  {
    "label": "removeFromFrontier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeFromFrontier(iterator I, BasicBlock *Node)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "compare(DominanceFrontierBase<BasicBlock> &Other)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module * = nullptr)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  }
]