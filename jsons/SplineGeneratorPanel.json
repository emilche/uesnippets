[
  {
    "label": "FSplineComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineComponentVisualizer"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USplineGeneratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineGeneratorBase"
  },
  {
    "label": "UCircleSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCircleSplineGenerator"
  },
  {
    "label": "UArcSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArcSplineGenerator"
  },
  {
    "label": "USquareSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USquareSplineGenerator"
  },
  {
    "label": "UEllipseSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEllipseSplineGenerator"
  },
  {
    "label": "URectangleSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URectangleSplineGenerator"
  },
  {
    "label": "ULineSplineGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULineSplineGenerator"
  },
  {
    "label": "SSplineGeneratorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplineGeneratorPanel"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ClassViewerFilter . h \" # include \" ClassViewerModule . h \" # include \" Components / SplineComponent . h \" # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Layout / WidgetPath . h \" # include \" Misc / EnumClassFlags . h \" # include \" Modules / ModuleManager . h \" # include \" PropertyEditorModule . h \" # include \" SplineComponentVisualizer . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" # include \" SplineGeneratorPanel . generated . h \" class FSplineComponentVisualizer ; class IDetailsView ; class SWindow ; struct FFocusEvent ; struct FGeometry ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (AppendAfter = 0 x01,AppendBefore = 0 x02,InsertAfter = 0 x04,InsertBefore = 0 x08 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShapeAddMode)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config = EditorSettings)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: USplineGeneratorBase() : ShapeAddMode(EShapeAddMode::AppendAfter)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(TWeakPtr<FSplineComponentVisualizer> InSplineComponentVisualizer)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PreviewCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewCurve()"
  },
  {
    "label": "BuildCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCurve()"
  },
  {
    "label": "GetNumPoints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPoints()"
  },
  {
    "label": "GetAddIndex()",
    "kind": "Method",
    "detail": "Function (int32 StartKey ; protected : int32)",
    "insertText": "GetAddIndex(int32 Index)"
  },
  {
    "label": "GetItrIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetItrIndex(int32 Index)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FSplineCurves CachedSplineCurves ; TWeakObjectPtr<USplineComponent> SelectedSplineComponent ; TWeakPtr<FSplineComponentVisualizer> WeakSplineVis ; } ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Circle\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UCircleSplineGenerator() : NumberOfPoints(3) , Radius(100.f) , bReverseDir(false) , bKeepFirstKeyTangent(true) , bBranchRight(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Arc\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UArcSplineGenerator() : NumberOfPoints(4) , Radius(100.f) , Degrees(90.f) , bReverseDir(false) , bKeepFirstKeyTangent(true) , bBranchRight(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Square\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: USquareSplineGenerator() : Length(100.f) , bBranchRight(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Ellipse\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UEllipseSplineGenerator() : NumberOfPoints(10) , Length(200.f) , Width(200.f) , bReverseDir(false) , bKeepFirstKeyTangent(true) , bBranchRight(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Rectangle\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: URectangleSplineGenerator() : Length(100.f) , Width(100.f) , bBranchRight(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = EditorSettings, DisplayName = \"Line\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ULineSplineGenerator() : NumberOfPoints(5) , Length(100.f) , bEnableUpToNextPoint(false) , bUpToNextPoint(false)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SSplineGeneratorPanel : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSplineGeneratorPanel)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TWeakPtr<FSplineComponentVisualizer> InWeakSplineComponentVisualizer)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowClosed(const TSharedRef<SWindow>&)"
  },
  {
    "label": "OnSelectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionUpdated()"
  },
  {
    "label": "SSplineGeneratorPanel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSplineGeneratorPanel()"
  }
]