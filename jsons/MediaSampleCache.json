[
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaSamples"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "TRangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRangeSet"
  },
  {
    "label": "FMediaSampleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSampleCache"
  },
  {
    "label": "TSampleKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSampleKeyFuncs"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / LruCache . h \" # include \" Containers / Set . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" IMediaAudioSample . h \" # include \" IMediaBinarySample . h \" # include \" IMediaOverlaySample . h \" # include \" IMediaTextureSample . h \" # include \" Math / RangeSet . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" class IMediaAudioSample ; class IMediaBinarySample ; class IMediaOverlaySample ; class IMediaPlayer ; class IMediaSamples ; class IMediaTextureSample ; template<ElementType> class TRangeSet ; class FMediaSampleCache { template<SampleType> struct TSampleKeyFuncs : BaseKeyFuncs<TSharedPtr<SampleType,ESPMode::ThreadSafe>,FTimespan,false> { FTimespan)",
    "insertText": "GetSetKey(const TSharedPtr<SampleType, ESPMode::ThreadSafe>& Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FTimespan A, FTimespan B)"
  },
  {
    "label": "FMediaSampleCache()",
    "kind": "Method",
    "detail": "Function (} } ; template<SampleType> using TSampleSet = TSet<TSharedPtr<SampleType,ESPMode::ThreadSafe>,TSampleKeyFuncs<SampleType>> ; public :)",
    "insertText": "FMediaSampleCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetAudioSample()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMediaAudioSample,ESPMode::ThreadSafe>)",
    "insertText": "GetAudioSample(FTimespan Time)"
  },
  {
    "label": "GetCachedAudioSampleRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedAudioSampleRanges(TRangeSet<FTimespan>& OutTimeRanges)"
  },
  {
    "label": "GetCachedVideoSampleRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedVideoSampleRanges(TRangeSet<FTimespan>& OutTimeRanges)"
  },
  {
    "label": "GetOverlaySamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlaySamples(FTimespan Time, TArray<TSharedPtr<IMediaOverlaySample, ESPMode::ThreadSafe>>& OutSamples)"
  },
  {
    "label": "GetVideoSample()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMediaTextureSample,ESPMode::ThreadSafe>)",
    "insertText": "GetVideoSample(FTimespan Time, bool Forward)"
  },
  {
    "label": "SetCacheWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheWindow(FTimespan Ahead, FTimespan Behind)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (CacheAhead = Ahead ; CacheBehind = Behind ; } void)",
    "insertText": "Tick(FTimespan DeltaTime, float Rate, FTimespan Time)"
  }
]