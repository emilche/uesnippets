[
  {
    "label": "FMessageLogViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLogViewModel"
  },
  {
    "label": "SMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMessageLogListing"
  },
  {
    "label": "SMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMessageLog"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageLogListing . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" class FMessageLogViewModel ; class SMessageLogListing ; class SMessageLog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMessageLog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS()"
  },
  {
    "label": "SMessageLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SMessageLog()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<class FMessageLogViewModel>& InViewModel)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleCategoriesListGenerateRow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "HandleCategoriesListGenerateRow(IMessageLogListingPtr Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleCategoriesListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCategoriesListSelectionChanged(IMessageLogListingPtr Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleSelectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionUpdated()"
  },
  {
    "label": "RefreshCategoryList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCategoryList()"
  }
]