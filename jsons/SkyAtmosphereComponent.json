[
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FTentDistribution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTentDistribution"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "ASkyAtmosphere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASkyAtmosphere"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "UArrowComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArrowComponent"
  },
  {
    "label": "OverrideAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideAtmosphereLightDirection(int32 AtmosphereLightIndex, const FVector& LightDirection)"
  },
  {
    "label": "IsAtmosphereLightDirectionOverriden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtmosphereLightDirectionOverriden(int32 AtmosphereLightIndex)"
  },
  {
    "label": "GetOverridenAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetOverridenAtmosphereLightDirection(int32 AtmosphereLightIndex)"
  },
  {
    "label": "ResetAtmosphereLightDirectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAtmosphereLightDirectionOverride(int32 AtmosphereLightIndex)"
  },
  {
    "label": "SetBottomRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBottomRadius(float NewValue)"
  },
  {
    "label": "SetGroundAlbedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroundAlbedo(const FColor& NewValue)"
  },
  {
    "label": "SetAtmosphereHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAtmosphereHeight(float NewValue)"
  },
  {
    "label": "SetMultiScatteringFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiScatteringFactor(float NewValue)"
  },
  {
    "label": "SetRayleighScatteringScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayleighScatteringScale(float NewValue)"
  },
  {
    "label": "SetRayleighScattering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayleighScattering(FLinearColor NewValue)"
  },
  {
    "label": "SetRayleighExponentialDistribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayleighExponentialDistribution(float NewValue)"
  },
  {
    "label": "SetMieScatteringScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieScatteringScale(float NewValue)"
  },
  {
    "label": "SetMieScattering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieScattering(FLinearColor NewValue)"
  },
  {
    "label": "SetMieAbsorptionScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieAbsorptionScale(float NewValue)"
  },
  {
    "label": "SetMieAbsorption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieAbsorption(FLinearColor NewValue)"
  },
  {
    "label": "SetMieAnisotropy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieAnisotropy(float NewValue)"
  },
  {
    "label": "SetMieExponentialDistribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMieExponentialDistribution(float NewValue)"
  },
  {
    "label": "SetOtherAbsorptionScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOtherAbsorptionScale(float NewValue)"
  },
  {
    "label": "SetOtherAbsorption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOtherAbsorption(FLinearColor NewValue)"
  },
  {
    "label": "SetSkyLuminanceFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkyLuminanceFactor(FLinearColor NewValue)"
  },
  {
    "label": "SetAerialPespectiveViewDistanceScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAerialPespectiveViewDistanceScale(float NewValue)"
  },
  {
    "label": "SetHeightFogContribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeightFogContribution(float NewValue)"
  },
  {
    "label": "SetHoldout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoldout(bool bNewHoldout)"
  },
  {
    "label": "SetRenderInMainPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderInMainPass(bool bValue)"
  },
  {
    "label": "GetAtmosphereTransmitanceOnGroundAtPlanetTop()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetAtmosphereTransmitanceOnGroundAtPlanetTop(UDirectionalLightComponent* DirectionalLight)"
  },
  {
    "label": "SetPositionToMatchDeprecatedAtmosphericFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionToMatchDeprecatedAtmosphericFog()"
  },
  {
    "label": "ValidateStaticLightingGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateStaticLightingGUIDs()"
  },
  {
    "label": "UpdateStaticLightingGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticLightingGUIDs()"
  },
  {
    "label": "SendRenderTransformCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransformCommand()"
  },
  {
    "label": "SetDummyStaticLightingGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDummyStaticLightingGUIDs()"
  }
]