[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SharedMemoryHooks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedMemoryHooks"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_WRITABLE_SHARED_MEMORY_REGION_H_ # define BASE_MEMORY_WRITABLE_SHARED_MEMORY_REGION_H_ # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / memory / platform_shared_memory_region . h \" # include \" base / memory / read_only_shared_memory_region . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" base / memory / unsafe_shared_memory_region . h \" # include \" build / build_config . h \" # include<stdint . h> namespace base { class BASE_EXPORT WritableSharedMemoryRegion { public : using MappingType = WritableSharedMemoryMapping ; WritableSharedMemoryRegion)",
    "insertText": "Create(size_t size)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using CreateFunction =)",
    "insertText": "decltype(Create)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryRegion)",
    "insertText": "Deserialize(subtle::PlatformSharedMemoryRegion handle)"
  },
  {
    "label": "TakeHandleForSerialization()",
    "kind": "Method",
    "detail": "Function (subtle::PlatformSharedMemoryRegion)",
    "insertText": "TakeHandleForSerialization(WritableSharedMemoryRegion region)"
  },
  {
    "label": "ConvertToReadOnly()",
    "kind": "Method",
    "detail": "Function (ReadOnlySharedMemoryRegion)",
    "insertText": "ConvertToReadOnly(WritableSharedMemoryRegion region)"
  },
  {
    "label": "ConvertToUnsafe()",
    "kind": "Method",
    "detail": "Function (UnsafeSharedMemoryRegion)",
    "insertText": "ConvertToUnsafe(WritableSharedMemoryRegion region)"
  },
  {
    "label": "WritableSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedMemoryRegion()"
  },
  {
    "label": "WritableSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedMemoryRegion(WritableSharedMemoryRegion&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryRegion&)",
    "insertText": "operator(WritableSharedMemoryRegion&&)"
  },
  {
    "label": "WritableSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedMemoryRegion(const WritableSharedMemoryRegion&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryRegion&)",
    "insertText": "operator(const WritableSharedMemoryRegion&)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping)",
    "insertText": "Map(SharedMemoryMapper* mapper = nullptr)"
  },
  {
    "label": "MapAt()",
    "kind": "Method",
    "detail": "Function (WritableSharedMemoryMapping)",
    "insertText": "MapAt(uint64_t offset, size_t size, SharedMemoryMapper* mapper = nullptr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsValid())"
  },
  {
    "label": "GetGUID()",
    "kind": "Method",
    "detail": "Function (} const UnguessableToken&)",
    "insertText": "GetGUID()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_WIN) HANDLE UnsafeGetPlatformHandle()"
  },
  {
    "label": "WritableSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (} # endif private : class SharedMemoryHooks ;)",
    "insertText": "WritableSharedMemoryRegion(subtle::PlatformSharedMemoryRegion handle)"
  },
  {
    "label": "set_create_hook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_create_hook(CreateFunction* hook)"
  }
]