[
  {
    "label": "MockClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockClass"
  },
  {
    "label": "NiceMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NiceMock"
  },
  {
    "label": "NaggyMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NaggyMock"
  },
  {
    "label": "StrictMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrictMock"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_ # include \" gmock / gmock - spec - builders . h \" # include \" gmock / internal / gmock - port . h \" namespace testing { template<class MockClass> class NiceMock : public MockClass { public :)",
    "insertText": "NiceMock()"
  },
  {
    "label": "AllowUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "AllowUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1>)",
    "insertText": "NiceMock(const A1& a1) : MockClass(a1)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2) : MockClass(a1, a2)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4) : MockClass(a1, a2, a3, a4)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5) : MockClass(a1, a2, a3, a4, a5)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6) : MockClass(a1, a2, a3, a4, a5, a6)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7) : MockClass(a1, a2, a3, a4, a5, a6, a7)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10>)",
    "insertText": "NiceMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9, const A10& a10) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)"
  },
  {
    "label": "UnregisterCallReaction()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "UnregisterCallReaction(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(NiceMock)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} ; template<class MockClass> class NaggyMock : public MockClass { public :)",
    "insertText": "NaggyMock()"
  },
  {
    "label": "WarnUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "WarnUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1>)",
    "insertText": "NaggyMock(const A1& a1) : MockClass(a1)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2) : MockClass(a1, a2)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4) : MockClass(a1, a2, a3, a4)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5) : MockClass(a1, a2, a3, a4, a5)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6) : MockClass(a1, a2, a3, a4, a5, a6)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7) : MockClass(a1, a2, a3, a4, a5, a6, a7)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10>)",
    "insertText": "NaggyMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9, const A10& a10) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(NaggyMock)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} ; template<class MockClass> class StrictMock : public MockClass { public :)",
    "insertText": "StrictMock()"
  },
  {
    "label": "FailUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "FailUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1>)",
    "insertText": "StrictMock(const A1& a1) : MockClass(a1)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2) : MockClass(a1, a2)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3) : MockClass(a1, a2, a3)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4) : MockClass(a1, a2, a3, a4)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5) : MockClass(a1, a2, a3, a4, a5)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6) : MockClass(a1, a2, a3, a4, a5, a6)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7) : MockClass(a1, a2, a3, a4, a5, a6, a7)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10>)",
    "insertText": "StrictMock(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9, const A10& a10) : MockClass(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(StrictMock)"
  }
]