[
  {
    "label": "FUMGCoreStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUMGCoreStyle"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / AppStyle . h \" class FUMGCoreStyle { public : TSharedRef<class ISlateStyle>)",
    "insertText": "Create()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const ISlateStyle&)",
    "insertText": "Get()"
  },
  {
    "label": "GetDefaultFont()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FCompositeFont>)",
    "insertText": "GetDefaultFont()"
  },
  {
    "label": "GetDefaultFontStyle()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetDefaultFontStyle(const FName InTypefaceFontName, const float InSize, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "SetSelectorColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectorColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetInactiveSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInactiveSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetPressedSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPressedSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetFocusBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusBrush(FSlateBrush* NewBrush)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (const int32 RegularTextSize = 1 0 ; const int32 SmallTextSize = 8 ; bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetStyle(const TSharedRef<class ISlateStyle>& NewStyle)"
  }
]