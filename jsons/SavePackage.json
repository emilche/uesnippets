[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "IPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageWriter"
  },
  {
    "label": "FLogRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogRecord"
  },
  {
    "label": "FObjectSaveContextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectSaveContextData"
  },
  {
    "label": "FPackageSaveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageSaveInfo"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FSavePackageArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageArgs"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "ISavePackageValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISavePackageValidator"
  },
  {
    "label": "FImportsValidationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportsValidationContext"
  },
  {
    "label": "FExportsValidationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportsValidationContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSavePackageSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageSettings"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Logging / LogMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / OutputDeviceError . h \" # include \" ObjectMacros . h \" # include \" Serialization / ArchiveCookData . h \" # include \" Serialization / FileRegions . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectSaveOverride . h \" # include \" UObject / Package . h \" class ITargetPlatform ; class UObject ; # if !)",
    "insertText": "defined(UE_WITH_SAVEPACKAGE)"
  },
  {
    "label": "IsCooking()",
    "kind": "Method",
    "detail": "Function (FArchiveCookData* ArchiveCookData = nullptr ; bool)",
    "insertText": "IsCooking()"
  },
  {
    "label": "FSavePackageArgs()",
    "kind": "Method",
    "detail": "Function (TMap<UObject*,FObjectSaveOverride>* InOutSaveOverrides = nullptr ; PRAGMA_DISABLE_DEPRECATION_WARNINGS ;)",
    "insertText": "FSavePackageArgs()"
  },
  {
    "label": "FSavePackageArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageArgs(const FSavePackageArgs&)"
  },
  {
    "label": "FSavePackageArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageArgs(FSavePackageArgs&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSavePackageArgs&)",
    "insertText": "operator(const FSavePackageArgs&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSavePackageArgs&)",
    "insertText": "operator(FSavePackageArgs&&)"
  },
  {
    "label": "FSavePackageArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageArgs(const ITargetPlatform* InTargetPlatform, FArchiveCookData* InArchiveCookData, EObjectFlags InTopLevelFlags, uint32 InSaveFlags, bool bInForceByteSwapping, bool bInWarnOfLongFilename, bool bInSlowTask, FDateTime InFinalTimeStamp, FOutputDevice* InError, FSavePackageContext* InSavePackageContext = nullptr ) : TargetPlatform(InTargetPlatform) , ArchiveCookData(InArchiveCookData) , TopLevelFlags(InTopLevelFlags) , SaveFlags(InSaveFlags) , bForceByteSwapping(bInForceByteSwapping) , bWarnOfLongFilename(bInWarnOfLongFilename) , bSlowTask(bInSlowTask) , FinalTimeStamp(InFinalTimeStamp) , Error(InError) , SavePackageContext(InSavePackageContext)"
  },
  {
    "label": "ISavePackageValidator()",
    "kind": "Method",
    "detail": "Function (class ISavePackageValidator { public : ~)",
    "insertText": "ISavePackageValidator()"
  },
  {
    "label": "ValidateImports()",
    "kind": "Method",
    "detail": "Function (} ESavePackageResult)",
    "insertText": "ValidateImports(const UPackage* Package, const TSet<TObjectPtr<UObject>>& Imports)"
  },
  {
    "label": "FImportsValidationContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FImportsValidationContext {)",
    "insertText": "FImportsValidationContext(const UPackage* InPackage, const TSet<TObjectPtr<UObject>>& InImports, FOutputDevice* InOutputDevice) : Package(InPackage) , Imports(InImports) , OutputDevice(InOutputDevice)"
  },
  {
    "label": "FExportsValidationContext()",
    "kind": "Method",
    "detail": "Function (} const UPackage* Package ; const TSet<TObjectPtr<UObject>>& Imports ; FOutputDevice* OutputDevice ; } ; struct FExportsValidationContext { enum class EFlags { None = 0,IsCooking = 1<<0,} ;)",
    "insertText": "FExportsValidationContext(const UPackage* InPackage, const TSet<UObject*>& InExports, const TMap<UObject*, FObjectSaveOverride>& InSaveOverrides, EFlags InFlags, FOutputDevice* InOutputDevice) : Package(InPackage) , Exports(InExports) , SaveOverrides(InSaveOverrides) , Flags(InFlags) , OutputDevice(InOutputDevice)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} const UPackage* Package ; const TSet<UObject*>& Exports ; const TMap<UObject*,FObjectSaveOverride>& SaveOverrides ; const EFlags Flags ; FOutputDevice* OutputDevice ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FExportsValidationContext::EFlags)"
  },
  {
    "label": "ExternalImportValidationFunc()",
    "kind": "Method",
    "detail": "Function (public : typedef ESavePackageResult)",
    "insertText": "ExternalImportValidationFunc(const FImportsValidationContext& InValidationContext)"
  },
  {
    "label": "ExternalExportValidationFunc()",
    "kind": "Method",
    "detail": "Function (typedef ESavePackageResult)",
    "insertText": "ExternalExportValidationFunc(const FExportsValidationContext& InValidationContext)"
  },
  {
    "label": "FSavePackageSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageSettings()"
  },
  {
    "label": "GetDefaultSettings()",
    "kind": "Method",
    "detail": "Function (FSavePackageSettings&)",
    "insertText": "GetDefaultSettings()"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "GetExternalImportValidations()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<ExternalImportValidationFunc>>&)",
    "insertText": "GetExternalImportValidations()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExternalImportValidations .)",
    "insertText": "Add(MoveTemp(InValidation))"
  },
  {
    "label": "AddExternalExportValidation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExternalExportValidation(TFunction<ExternalExportValidationFunc> InValidation)"
  },
  {
    "label": "FSavePackageContext()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TFunction<ExternalImportValidationFunc>> ExternalImportValidations ; TArray<TFunction<ExternalExportValidationFunc>> ExternalExportValidations ; } ; class FSavePackageContext { public :)",
    "insertText": "FSavePackageContext(const ITargetPlatform* InTargetPlatform, IPackageWriter* InPackageWriter, FSavePackageSettings InSettings = FSavePackageSettings()) : TargetPlatform(InTargetPlatform) , PackageWriter(InPackageWriter) , SavePackageSettings(MoveTemp(InSettings))"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (PackageWriterCapabilities = PackageWriter ->)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "FSavePackageContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSavePackageContext()"
  },
  {
    "label": "GetValidator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ISavePackageValidator*)",
    "insertText": "GetValidator()"
  },
  {
    "label": "SetValidator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValidator(TUniquePtr<ISavePackageValidator>&& InValidator)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Validator =)",
    "insertText": "MoveTemp(InValidator)"
  },
  {
    "label": "GetExternalExportValidations()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<FSavePackageSettings::ExternalExportValidationFunc>>&)",
    "insertText": "GetExternalExportValidations()"
  },
  {
    "label": "IsUpdatingLoadedPath()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::SavePackageUtilities { bool)",
    "insertText": "IsUpdatingLoadedPath(bool bIsCooking, const FPackagePath& TargetPackagePath, uint32 SaveFlags)"
  },
  {
    "label": "IsProceduralSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProceduralSave(bool bIsCooking, const FPackagePath& TargetPackagePath, uint32 SaveFlags)"
  },
  {
    "label": "CallPreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPreSave(UObject* Object, FObjectSaveContextData& ObjectSaveContext)"
  },
  {
    "label": "CallPreSaveRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPreSaveRoot(UObject* Object, FObjectSaveContextData& ObjectSaveContext)"
  },
  {
    "label": "CallPostSaveRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPostSaveRoot(UObject* Object, FObjectSaveContextData& ObjectSaveContext, bool bCleanupRequired)"
  },
  {
    "label": "NormalizeTopLevelFlags()",
    "kind": "Method",
    "detail": "Function (EObjectFlags)",
    "insertText": "NormalizeTopLevelFlags(EObjectFlags TopLevelFlags, bool bIsCooking)"
  },
  {
    "label": "IncrementOutstandingAsyncWrites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOutstandingAsyncWrites()"
  },
  {
    "label": "DecrementOutstandingAsyncWrites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementOutstandingAsyncWrites()"
  },
  {
    "label": "ResetCookStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCookStats()"
  },
  {
    "label": "GetNumPackagesSaved()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPackagesSaved()"
  },
  {
    "label": "StartSavingEDLCookInfoForVerification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSavingEDLCookInfoForVerification()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FEDLMessageCallback = TFunction<)",
    "insertText": "void(ELogVerbosity::Type, FStringView)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FEDLLogRecordCallback = TFunction<)",
    "insertText": "void(UE::FLogRecord&& Record)"
  },
  {
    "label": "VerifyEDLCookInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyEDLCookInfo(bool bFullReferencesExpected = true)"
  },
  {
    "label": "VerifyEDLCookInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyEDLCookInfo(const FEDLLogRecordCallback& MessageCallback, bool bFullReferencesExpected = true)"
  },
  {
    "label": "EDLCookInfoAddIterativelySkippedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EDLCookInfoAddIterativelySkippedPackage(FName LongPackageName)"
  },
  {
    "label": "EDLCookInfoMoveToCompactBinaryAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EDLCookInfoMoveToCompactBinaryAndClear(FCbWriter& Writer, bool& bOutHasData)"
  },
  {
    "label": "EDLCookInfoMoveToCompactBinaryAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EDLCookInfoMoveToCompactBinaryAndClear(FCbWriter& Writer, bool& bOutHasData, FName PackageName)"
  },
  {
    "label": "EDLCookInfoAppendFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EDLCookInfoAppendFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (FAddResaveOnDemandPackage OnAddResaveOnDemandPackage ; # endif })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSavePackage, Log, All)"
  }
]