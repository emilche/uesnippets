[
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "FGeometryDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryDynamicCollection"
  },
  {
    "label": "FCollectionRemoveOnBreakFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionRemoveOnBreakFacade"
  },
  {
    "label": "FGeometryCollectionRemoveOnBreakDynamicFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionRemoveOnBreakDynamicFacade"
  },
  {
    "label": "FGeometryCollectionRemoveOnSleepDynamicFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionRemoveOnSleepDynamicFacade"
  },
  {
    "label": "FGeometryCollectionDecayDynamicFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionDecayDynamicFacade"
  },
  {
    "label": "FGeometryCollectionRemoveOnBreakDynamicFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" struct FManagedArrayCollection ; class FGeometryDynamicCollection ; namespace GeometryCollection::Facades { class FCollectionRemoveOnBreakFacade ; } class FGeometryCollectionRemoveOnBreakDynamicFacade { public : float DisabledBreakTimer = - 1 ; float BreakTimerStartValue = 0 ; float DisabledPostBreakDuration = - 1 ; float CrumblingRemovalTimer = - 1 ;)",
    "insertText": "FGeometryCollectionRemoveOnBreakDynamicFacade(FGeometryDynamicCollection& InCollection)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "SetAttributeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeValues(const GeometryCollection::Facades::FCollectionRemoveOnBreakFacade& RemoveOnBreakFacade)"
  },
  {
    "label": "IsRemovalActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRemovalActive(int32 TransformIndex)"
  },
  {
    "label": "UseClusterCrumbling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseClusterCrumbling(int32 TransformIndex)"
  },
  {
    "label": "UpdateBreakTimerAndComputeDecay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateBreakTimerAndComputeDecay(int32 TransformIndex, float DeltaTime)"
  },
  {
    "label": "FGeometryCollectionRemoveOnSleepDynamicFacade()",
    "kind": "Method",
    "detail": "Function (private : TManagedArrayAccessor<float> BreakTimerAttribute ; TManagedArrayAccessor<float> PostBreakDurationAttribute ; TManagedArrayAccessor<float> BreakRemovalDurationAttribute ; const FGeometryDynamicCollection& DynamicCollection ; } ; class FGeometryCollectionRemoveOnSleepDynamicFacade { public :)",
    "insertText": "FGeometryCollectionRemoveOnSleepDynamicFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "SetAttributeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeValues(const FVector2D& MaximumSleepTime, const FVector2D& RemovalDuration)"
  },
  {
    "label": "ComputeSlowMovingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSlowMovingState(int32 TransformIndex, const FVector& Position, float DeltaTime, FVector::FReal VelocityThreshold)"
  },
  {
    "label": "UpdateSleepTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSleepTimer(int32 TransformIndex, float DeltaTime)"
  },
  {
    "label": "ComputeDecay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeDecay(int32 TransformIndex)"
  },
  {
    "label": "FGeometryCollectionDecayDynamicFacade()",
    "kind": "Method",
    "detail": "Function (private : TManagedArrayAccessor<float> SleepTimerAttribute ; TManagedArrayAccessor<float> MaxSleepTimeAttribute ; TManagedArrayAccessor<float> SleepRemovalDurationAttribute ; TManagedArrayAccessor<FVector> LastPositionAttribute ; } ; class FGeometryCollectionDecayDynamicFacade { public :)",
    "insertText": "FGeometryCollectionDecayDynamicFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "AddAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttributes()"
  },
  {
    "label": "GetDecay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDecay(int32 TransformIndex)"
  },
  {
    "label": "SetDecay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecay(int32 TransformIndex, float DecayValue)"
  },
  {
    "label": "GetDecayAttributeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDecayAttributeSize()"
  }
]