[
  {
    "label": "FPerformanceAnalyticsStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceAnalyticsStats"
  },
  {
    "label": "FTickableEditorObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickableEditorObject"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "FConsoleCommandExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleCommandExecutor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUnrealEdMisc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnrealEdMisc"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "IMessageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageToken"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Widgets / SWindow . h \" # include \" Editor . h \" class FPerformanceAnalyticsStats ; class FTickableEditorObject ; class FUICommandInfo ; class FConsoleCommandExecutor ; enum class EMapChangeType : uint8 { LoadMap,SaveMap,NewMap,TearDownWorld,} ; class FUnrealEdMisc { public : FUnrealEdMisc&)",
    "insertText": "Get()"
  },
  {
    "label": "FUnrealEdMisc()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FUnrealEdMisc()"
  },
  {
    "label": "OnInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInit()"
  },
  {
    "label": "MountTemplateSharedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountTemplateSharedPaths()"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExit()"
  },
  {
    "label": "ShutdownAfterError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownAfterError()"
  },
  {
    "label": "GetMapBuildCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMapBuildCancelled()"
  },
  {
    "label": "GetPendingProjectName()",
    "kind": "Method",
    "detail": "Function (bCancelBuild = InCancelled ; } const FString&)",
    "insertText": "GetPendingProjectName()"
  },
  {
    "label": "ClearPendingProjectName()",
    "kind": "Method",
    "detail": "Function (PendingProjectName = ProjectName ; } void)",
    "insertText": "ClearPendingProjectName()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (PendingProjectName .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PendingCommandLine .)",
    "insertText": "Reset()"
  },
  {
    "label": "AllowSavingLayoutOnClose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllowSavingLayoutOnClose(bool bIsEnabled)"
  },
  {
    "label": "IsSavingLayoutOnClosedAllowed()",
    "kind": "Method",
    "detail": "Function (bSaveLayoutOnClose = bIsEnabled ; } bool)",
    "insertText": "IsSavingLayoutOnClosedAllowed()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (RestoreConfigFiles .)",
    "insertText": "FindOrAdd(InConfigFile)"
  },
  {
    "label": "ClearConfigRestoreFilename()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearConfigRestoreFilename(FString Destination)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (RestoreConfigFiles .)",
    "insertText": "Remove(Destination)"
  },
  {
    "label": "ClearConfigRestoreFilenames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearConfigRestoreFilenames()"
  },
  {
    "label": "GetConfigRestoreFilenames()",
    "kind": "Method",
    "detail": "Function (} const TMap<FString,FString>&)",
    "insertText": "GetConfigRestoreFilenames()"
  },
  {
    "label": "IsDeletePreferences()",
    "kind": "Method",
    "detail": "Function (bDeletePreferences = bIsEnabled ; } bool)",
    "insertText": "IsDeletePreferences()"
  },
  {
    "label": "RestartEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartEditor(bool bWarn = true, const TOptional<FString>& NewCommandLine = TOptional<FString>())"
  },
  {
    "label": "TickPerformanceAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPerformanceAnalytics()"
  },
  {
    "label": "TickAssetAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetAnalytics()"
  },
  {
    "label": "GetURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetURL(const TCHAR* InKey, FString& OutURL, const bool bCheckRocket = false)"
  },
  {
    "label": "ReplaceDocumentationURLWildcards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceDocumentationURLWildcards(FString& Url, const FCultureRef& Culture, const FString& PageId = FString())"
  },
  {
    "label": "GetExecutableForCommandlets()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExecutableForCommandlets()"
  },
  {
    "label": "OpenMarketplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenMarketplace(const FString& CustomLocation = TEXT(\"\"))"
  },
  {
    "label": "CB_SelectedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_SelectedProps()"
  },
  {
    "label": "CB_DisplayLoadErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_DisplayLoadErrors()"
  },
  {
    "label": "CB_RefreshEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_RefreshEditor()"
  },
  {
    "label": "CB_MapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_MapChange(uint32 InFlags)"
  },
  {
    "label": "CB_RedrawAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_RedrawAllViewports()"
  },
  {
    "label": "CB_EditorModeWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_EditorModeWindowClosed(const TSharedRef<SWindow>&)"
  },
  {
    "label": "CB_LevelActorsAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_LevelActorsAdded(class AActor* InActor)"
  },
  {
    "label": "CB_PreAutomationTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_PreAutomationTesting()"
  },
  {
    "label": "CB_PostAutomationTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CB_PostAutomationTesting()"
  },
  {
    "label": "OnEditorChangeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorChangeMode(FEditorModeID NewEditorMode)"
  },
  {
    "label": "OnEditorPreModal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorPreModal()"
  },
  {
    "label": "OnEditorPostModal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorPostModal()"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "OnTabForegrounded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabForegrounded(TSharedPtr<SDockTab> ForegroundTab, TSharedPtr<SDockTab> BackgroundTab)"
  },
  {
    "label": "OnUserActivityTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserActivityTabChanged(TSharedPtr<SDockTab> InTab)"
  },
  {
    "label": "OnDeferCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeferCommand(const FString& DeferredCommand)"
  },
  {
    "label": "BeginPerformanceSurvey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPerformanceSurvey()"
  },
  {
    "label": "CancelPerformanceSurvey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPerformanceSurvey()"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChanged(UWorld* World, EMapChangeType MapChangeType)"
  },
  {
    "label": "OnUserDefinedChordChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserDefinedChordChanged(const FUICommandInfo& CommandInfo)"
  },
  {
    "label": "OnMessageTokenActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessageTokenActivated(const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "OnGetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetDisplayName(const UObject* InObject, const bool bFullPath)"
  },
  {
    "label": "OnMessageSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessageSelectionChanged(TArray< TSharedRef<class FTokenizedMessage> >& Selection)"
  },
  {
    "label": "OnGotoAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGotoAsset(const FString& InAssetPath)"
  },
  {
    "label": "OnActorTokenActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorTokenActivated(const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "OnGetAssetDataDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetAssetDataDisplayName(const FAssetData& InObject, const bool bFullPath)"
  },
  {
    "label": "OnAssetDataTokenActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetDataTokenActivated(const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "OnObjectSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSaved(UObject* SavedObject, FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "LogAssetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAssetUpdate(UObject* UpdatedAsset, FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "InitEngineAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEngineAnalytics()"
  },
  {
    "label": "EditorAnalyticsHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorAnalyticsHeartbeat()"
  },
  {
    "label": "EnableWorldComposition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableWorldComposition(UWorld* InWorld, bool bEnable)"
  },
  {
    "label": "GetProjectEditorBinaryPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectEditorBinaryPath()"
  },
  {
    "label": "FindMapFileFromPartialName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindMapFileFromPartialName(const FString& PartialMapName)"
  },
  {
    "label": "SpawnEditorInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnEditorInstance(const FString& ProjectName)"
  },
  {
    "label": "SelectActorFromMessageToken()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SelectActorFromMessageToken(AActor* InActor)"
  },
  {
    "label": "PreSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSaveWorld(class UWorld* World, FObjectPreSaveContext ObjectSaveContext)"
  }
]