[
  {
    "label": "TestPendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestPendingTask"
  },
  {
    "label": "TestNestability",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TestNestability"
  },
  {
    "label": "TestPendingTask()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_PENDING_TASK_H_ # define BASE_TEST_TEST_PENDING_TASK_H_ # include<string> # include \" base / callback . h \" # include \" base / location . h \" # include \" base / time / time . h \" # include \" base / trace_event / base_tracing_forward . h \" namespace base { struct TestPendingTask { enum TestNestability { NESTABLE,NON_NESTABLE } ;)",
    "insertText": "TestPendingTask()"
  },
  {
    "label": "TestPendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPendingTask(const Location& location, OnceClosure task, TimeTicks post_time, TimeDelta delay, TestNestability nestability)"
  },
  {
    "label": "TestPendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPendingTask(const TestPendingTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestPendingTask&)",
    "insertText": "operator(const TestPendingTask&)"
  },
  {
    "label": "TestPendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPendingTask(TestPendingTask&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestPendingTask&)",
    "insertText": "operator(TestPendingTask&& other)"
  },
  {
    "label": "GetTimeToRun()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetTimeToRun()"
  },
  {
    "label": "ShouldRunBefore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunBefore(const TestPendingTask& other)"
  },
  {
    "label": "AsValueInto()",
    "kind": "Method",
    "detail": "Function (Location location ; OnceClosure task ; TimeTicks post_time ; TimeDelta delay ; TestNestability nestability ; void)",
    "insertText": "AsValueInto(base::trace_event::TracedValue* state)"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::trace_event::ConvertableToTraceFormat>)",
    "insertText": "AsValue()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; std::ostream&)",
    "insertText": "operator(std::ostream& os, const TestPendingTask& task)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const TestPendingTask& task, std::ostream* os)"
  }
]