[
  {
    "label": "AudioDeviceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceModule"
  },
  {
    "label": "AudioMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMixer"
  },
  {
    "label": "AudioProcessing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioProcessing"
  },
  {
    "label": "Call",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Call"
  },
  {
    "label": "RtpCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpCapabilities"
  },
  {
    "label": "RtpHeaderExtensionQueryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpHeaderExtensionQueryInterface"
  },
  {
    "label": "VoiceEngineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceEngineInterface"
  },
  {
    "label": "VideoEngineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEngineInterface"
  },
  {
    "label": "MediaEngineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaEngineInterface"
  },
  {
    "label": "CompositeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompositeMediaEngine"
  },
  {
    "label": "CheckScalabilityModeValues()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_MEDIA_ENGINE_H_ # define MEDIA_BASE_MEDIA_ENGINE_H_ # include<memory> # include<string> # include<vector> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / crypto / crypto_options . h \" # include \" api / field_trials_view . h \" # include \" api / rtp_parameters . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" call / audio_state . h \" # include \" media / base / codec . h \" # include \" media / base / media_channel . h \" # include \" media / base / media_config . h \" # include \" media / base / video_common . h \" # include \" rtc_base / system / file_wrapper . h \" namespace webrtc { class AudioDeviceModule ; class AudioMixer ; class AudioProcessing ; class Call ; } namespace cricket { webrtc::RTCError)",
    "insertText": "CheckScalabilityModeValues(const webrtc::RtpParameters& new_parameters, rtc::ArrayView<cricket::VideoCodec> codecs)"
  },
  {
    "label": "CheckRtpParametersValues()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "CheckRtpParametersValues(const webrtc::RtpParameters& new_parameters, rtc::ArrayView<cricket::VideoCodec> codecs)"
  },
  {
    "label": "CheckRtpParametersInvalidModificationAndValues()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "CheckRtpParametersInvalidModificationAndValues(const webrtc::RtpParameters& old_parameters, const webrtc::RtpParameters& new_parameters, rtc::ArrayView<cricket::VideoCodec> codecs)"
  },
  {
    "label": "CheckRtpParametersInvalidModificationAndValues()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "CheckRtpParametersInvalidModificationAndValues(const webrtc::RtpParameters& old_parameters, const webrtc::RtpParameters& new_parameters)"
  },
  {
    "label": "RtpCapabilities()",
    "kind": "Method",
    "detail": "Function (struct RtpCapabilities {)",
    "insertText": "RtpCapabilities()"
  },
  {
    "label": "RtpHeaderExtensionQueryInterface()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpExtension> header_extensions ; } ; class RtpHeaderExtensionQueryInterface { public : ~)",
    "insertText": "RtpHeaderExtensionQueryInterface()"
  },
  {
    "label": "GetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpHeaderExtensionCapability>)",
    "insertText": "GetRtpHeaderExtensions()"
  },
  {
    "label": "VoiceEngineInterface()",
    "kind": "Method",
    "detail": "Function (} ; class VoiceEngineInterface : public RtpHeaderExtensionQueryInterface { public :)",
    "insertText": "VoiceEngineInterface()"
  },
  {
    "label": "VoiceEngineInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoiceEngineInterface(const VoiceEngineInterface&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VoiceEngineInterface&)",
    "insertText": "operator(const VoiceEngineInterface&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetAudioState()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::AudioState>)",
    "insertText": "GetAudioState()"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VoiceMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const AudioOptions& options, const webrtc::CryptoOptions& crypto_options)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "send_codecs()"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "recv_codecs()"
  },
  {
    "label": "StartAecDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAecDump(webrtc::FileWrapper file, int64_t max_size_bytes)"
  },
  {
    "label": "StopAecDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAecDump()"
  },
  {
    "label": "VideoEngineInterface()",
    "kind": "Method",
    "detail": "Function (} ; class VideoEngineInterface : public RtpHeaderExtensionQueryInterface { public :)",
    "insertText": "VideoEngineInterface()"
  },
  {
    "label": "VideoEngineInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoEngineInterface(const VideoEngineInterface&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoEngineInterface&)",
    "insertText": "operator(const VideoEngineInterface&)"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VideoMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const VideoOptions& options, const webrtc::CryptoOptions& crypto_options, webrtc::VideoBitrateAllocatorFactory* video_bitrate_allocator_factory)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodec>)",
    "insertText": "send_codecs(bool include_rtx)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(include_rtx)"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoCodec>)",
    "insertText": "recv_codecs(bool include_rtx)"
  },
  {
    "label": "MediaEngineInterface()",
    "kind": "Method",
    "detail": "Function (} } ; class MediaEngineInterface { public : ~)",
    "insertText": "MediaEngineInterface()"
  },
  {
    "label": "voice()",
    "kind": "Method",
    "detail": "Function (VoiceEngineInterface&)",
    "insertText": "voice()"
  },
  {
    "label": "video()",
    "kind": "Method",
    "detail": "Function (VideoEngineInterface&)",
    "insertText": "video()"
  },
  {
    "label": "CompositeMediaEngine()",
    "kind": "Method",
    "detail": "Function (} ; class CompositeMediaEngine : public MediaEngineInterface { public :)",
    "insertText": "CompositeMediaEngine(std::unique_ptr<webrtc::FieldTrialsView> trials, std::unique_ptr<VoiceEngineInterface> audio_engine, std::unique_ptr<VideoEngineInterface> video_engine)"
  },
  {
    "label": "CompositeMediaEngine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompositeMediaEngine(std::unique_ptr<VoiceEngineInterface> audio_engine, std::unique_ptr<VideoEngineInterface> video_engine)"
  },
  {
    "label": "CompositeMediaEngine()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CompositeMediaEngine()"
  },
  {
    "label": "CreateRtpParametersWithOneEncoding()",
    "kind": "Method",
    "detail": "Function (private : const std::unique_ptr<webrtc::FieldTrialsView> trials_ ; const std::unique_ptr<VoiceEngineInterface> voice_engine_ ; const std::unique_ptr<VideoEngineInterface> video_engine_ ; } ; webrtc::RtpParameters)",
    "insertText": "CreateRtpParametersWithOneEncoding()"
  },
  {
    "label": "CreateRtpParametersWithEncodings()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "CreateRtpParametersWithEncodings(StreamParams sp)"
  },
  {
    "label": "GetDefaultEnabledRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpExtension>)",
    "insertText": "GetDefaultEnabledRtpHeaderExtensions(const RtpHeaderExtensionQueryInterface& query_interface)"
  }
]