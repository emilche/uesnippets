[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "NonScannableAllocatorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonScannableAllocatorImpl"
  },
  {
    "label": "NonScannableDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NonScannableDeleter"
  },
  {
    "label": "NonQuarantinableDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NonQuarantinableDeleter"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_NONSCANNABLE_MEMORY_H_ # define BASE_MEMORY_NONSCANNABLE_MEMORY_H_ # include<cstdint> # include<atomic> # include<memory> # include \" base / allocator / buildflags . h \" # include \" base / base_export . h \" # include \" base / no_destructor . h \" # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) #include \"base/allocator/partition_allocator/partition_alloc.h\" #include \"base/allocator/partition_allocator/partition_alloc_buildflags.h\" #if BUILDFLAG(STARSCAN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (template<bool Quarantinable> class BASE_EXPORT NonScannableAllocatorImpl final { public : NonScannableAllocatorImpl&)",
    "insertText": "Instance()"
  },
  {
    "label": "NonScannableAllocatorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NonScannableAllocatorImpl(const NonScannableAllocatorImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NonScannableAllocatorImpl&)",
    "insertText": "operator(const NonScannableAllocatorImpl&)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void*)"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (partition_alloc::ThreadSafePartitionRoot*)",
    "insertText": "root()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(STARSCAN) if (!allocator_.get())"
  },
  {
    "label": "NotifyPCScanEnabled()",
    "kind": "Method",
    "detail": "Function (# else return nullptr ; # endif } void)",
    "insertText": "NotifyPCScanEnabled()"
  },
  {
    "label": "NonScannableAllocatorImpl()",
    "kind": "Method",
    "detail": "Function (private : template<> class base::NoDestructor ;)",
    "insertText": "NonScannableAllocatorImpl()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(STARSCAN)"
  },
  {
    "label": "AllocNonScannable()",
    "kind": "Method",
    "detail": "Function (std::atomic_bool pcscan_enabled_ { false } ; # endif } ; template class NonScannableAllocatorImpl<true> ; template class NonScannableAllocatorImpl<false> ; using NonScannableAllocator = NonScannableAllocatorImpl<true> ; using NonQuarantinableAllocator = NonScannableAllocatorImpl<false> ; } # endif BASE_EXPORT void*)",
    "insertText": "AllocNonScannable(size_t size)"
  },
  {
    "label": "FreeNonScannable()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "FreeNonScannable(void* ptr)"
  },
  {
    "label": "AllocNonQuarantinable()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "AllocNonQuarantinable(size_t size)"
  },
  {
    "label": "FreeNonQuarantinable()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "FreeNonQuarantinable(void* ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct NonScannableDeleter { void)",
    "insertText": "operator()(void* ptr)"
  },
  {
    "label": "FreeNonScannable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeNonScannable(ptr)"
  },
  {
    "label": "FreeNonQuarantinable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeNonQuarantinable(ptr)"
  }
]