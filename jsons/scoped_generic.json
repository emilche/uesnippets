[
  {
    "label": "ScopedGenericOwnershipTracking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedGenericOwnershipTracking"
  },
  {
    "label": "ScopedGeneric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedGeneric"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "Receiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Receiver"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Traits"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_GENERIC_H_ # define BASE_SCOPED_GENERIC_H_ # include<stdlib . h> # include<type_traits> # include \" base / check . h \" # include \" base / memory / raw_ptr . h \" namespace base { struct ScopedGenericOwnershipTracking { } ; template<T,Traits> class ScopedGeneric { private : struct Data : public Traits {)",
    "insertText": "Data(const T& in) : generic(in)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(const T& in, const Traits& other) : Traits(other), generic(in)"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (} T generic ; } ; public : typedef T element_type ; typedef Traits traits_type ;)",
    "insertText": "ScopedGeneric() : data_(traits_type::InvalidValue())"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedGeneric(const element_type& value) : data_(value)"
  },
  {
    "label": "TrackAcquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackAcquire(data_.generic)"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedGeneric(const element_type& value, const traits_type& traits) : data_(value, traits)"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedGeneric(ScopedGeneric<T, Traits>&& rvalue) : data_(rvalue.release(), rvalue.get_traits())"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedGeneric(const ScopedGeneric&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedGeneric&)",
    "insertText": "operator(const ScopedGeneric&)"
  },
  {
    "label": "ScopedGeneric()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedGeneric()"
  },
  {
    "label": "FreeIfNecessary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeIfNecessary()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ScopedGeneric&)",
    "insertText": "operator(ScopedGeneric<T, Traits>&& rvalue)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(rvalue.release())"
  },
  {
    "label": "TrackAcquire()",
    "kind": "Method",
    "detail": "Function (data_ . generic = value ;)",
    "insertText": "TrackAcquire(value)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] element_type)",
    "insertText": "release()"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (element_type old_generic = data_ . generic ; data_ . generic =)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "TrackRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackRelease(old_generic)"
  },
  {
    "label": "Receiver()",
    "kind": "Method",
    "detail": "Function (scoped_generic_ -> receiving_ = true ; })",
    "insertText": "Receiver(const Receiver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Receiver&)",
    "insertText": "operator(const Receiver&)"
  },
  {
    "label": "Receiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Receiver(Receiver&& move)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (scoped_generic_ = move . scoped_generic_ ; move . scoped_generic_ = nullptr ; } Receiver&)",
    "insertText": "operator(Receiver&& move)"
  },
  {
    "label": "Receiver()",
    "kind": "Method",
    "detail": "Function (scoped_generic_ = move . scoped_generic_ ; move . scoped_generic_ = nullptr ; } ~)",
    "insertText": "Receiver()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (scoped_generic_ ->)",
    "insertText": "reset(value_)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (scoped_generic_ -> receiving_ = false ; } } T*)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const element_type& value)"
  },
  {
    "label": "TrackRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackRelease(data_.generic)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "Free(data_.generic)"
  },
  {
    "label": "TrackAcquire()",
    "kind": "Method",
    "detail": "Function (} } template<Void = void> std::enable_if_t<std::is_base_of<ScopedGenericOwnershipTracking,Traits>::value,Void>)",
    "insertText": "TrackAcquire(const T& value)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "Acquire(static_cast<const ScopedGeneric&>(*this), value)"
  },
  {
    "label": "TrackRelease()",
    "kind": "Method",
    "detail": "Function (} template<Void = void> std::enable_if_t<std::is_base_of<ScopedGenericOwnershipTracking,Traits>::value,Void>)",
    "insertText": "TrackRelease(const T& value)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "Release(static_cast<const ScopedGeneric&>(*this), value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T2,Traits2> bool)",
    "insertText": "operator(const ScopedGeneric<T2, Traits2>& p2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Data data_ ; bool receiving_ = false ; } ; template<class T,class Traits> void)",
    "insertText": "swap(const ScopedGeneric<T, Traits>& a, const ScopedGeneric<T, Traits>& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "swap(b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class Traits> bool)",
    "insertText": "operator(const T& value, const ScopedGeneric<T, Traits>& scoped)"
  }
]