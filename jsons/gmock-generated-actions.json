[
  {
    "label": "ExcessiveArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExcessiveArg"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "ActionHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActionHelper"
  },
  {
    "label": "GMOCK_ACTION_CLASS_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GMOCK_ACTION_CLASS_"
  },
  {
    "label": "gmock_Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gmock_Impl"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "AdlTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdlTag"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_ # include<memory> # include<utility> # include \" gmock / gmock - actions . h \" # include \" gmock / internal / gmock - port . h \" namespace testing { namespace internal { struct ExcessiveArg { } ; template<Result,class Impl> class ActionHelper { public : Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4,A5> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4, A5>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4,A5,A6> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4, A5, A6>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4,A5,A6,A7> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4, A5, A6, A7>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4,A5,A6,A7,A8> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4, A5, A6, A7, A8>& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} template<A0,A1,A2,A3,A4,A5,A6,A7,A8,A9> Result)",
    "insertText": "Perform(Impl* impl, const ::std::tuple<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>& args)"
  },
  {
    "label": "GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS()",
    "kind": "Method",
    "detail": "Function (} } ; } } # define GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_ \\ const args_type& args GTEST_ATTRIBUTE_UNUSED_,\\ const arg0_type& arg0 GTEST_ATTRIBUTE_UNUSED_,\\ const arg1_type& arg1 GTEST_ATTRIBUTE_UNUSED_,\\ const arg2_type& arg2 GTEST_ATTRIBUTE_UNUSED_,\\ const arg3_type& arg3 GTEST_ATTRIBUTE_UNUSED_,\\ const arg4_type& arg4 GTEST_ATTRIBUTE_UNUSED_,\\ const arg5_type& arg5 GTEST_ATTRIBUTE_UNUSED_,\\ const arg6_type& arg6 GTEST_ATTRIBUTE_UNUSED_,\\ const arg7_type& arg7 GTEST_ATTRIBUTE_UNUSED_,\\ const arg8_type& arg8 GTEST_ATTRIBUTE_UNUSED_,\\ const arg9_type& arg9 GTEST_ATTRIBUTE_UNUSED_ # define)",
    "insertText": "GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS(kind0, name0) kind0 name0 #define GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS(kind0, name0, kind1, \\ name1) kind0 name0, kind1 name1 #define GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2) kind0 name0, kind1 name1, kind2 name2 #define GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3) kind0 name0, kind1 name1, kind2 name2, \\ kind3 name3 #define GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4) kind0 name0, kind1 name1, \\ kind2 name2, kind3 name3, kind4 name4 #define GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5) kind0 name0, \\ kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5 #define GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, \\ name6) kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, \\ kind5 name5, kind6 name6 #define GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, name6, \\ kind7, name7) kind0 name0, kind1 name1, kind2 name2, kind3 name3, \\ kind4 name4, kind5 name5, kind6 name6, kind7 name7 #define GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, name6, \\ kind7, name7, kind8, name8) kind0 name0, kind1 name1, kind2 name2, \\ kind3 name3, kind4 name4, kind5 name5, kind6 name6, kind7 name7, \\ kind8 name8 #define GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS(kind0, name0, kind1, \\ name1, kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, \\ name6, kind7, name7, kind8, name8, kind9, name9) kind0 name0, \\ kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, \\ kind6 name6, kind7 name7, kind8 name8, kind9 name9 #define GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS(kind0, name0) name0 #define GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS(kind0, name0, kind1, \\ name1) name0, name1 #define GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2) name0, name1, name2 #define GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3) name0, name1, name2, name3 #define GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4) name0, name1, name2, name3, \\ name4 #define GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5) name0, name1, \\ name2, name3, name4, name5 #define GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, \\ name6) name0, name1, name2, name3, name4, name5, name6 #define GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, name6, \\ kind7, name7) name0, name1, name2, name3, name4, name5, name6, name7 #define GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\ kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, name6, \\ kind7, name7, kind8, name8) name0, name1, name2, name3, name4, name5, \\ name6, name7, name8 #define GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS(kind0, name0, kind1, \\ name1, kind2, name2, kind3, name3, kind4, name4, kind5, name5, kind6, \\ name6, kind7, name7, kind8, name8, kind9, name9) name0, name1, name2, \\ name3, name4, name5, name6, name7, name8, name9 #define GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS(p0) , typename p0##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS(p0, p1) , \\ typename p0##_type, typename p1##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS(p0, p1, p2) , \\ typename p0##_type, typename p1##_type, typename p2##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS(p0, p1, p2, p3) , \\ typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) , \\ typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type, typename p4##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) , \\ typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type, typename p4##_type, typename p5##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6) , typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type, typename p4##_type, typename p5##_type, \\ typename p6##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7) , typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type, typename p4##_type, typename p5##_type, \\ typename p6##_type, typename p7##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8) , typename p0##_type, typename p1##_type, typename p2##_type, \\ typename p3##_type, typename p4##_type, typename p5##_type, \\ typename p6##_type, typename p7##_type, typename p8##_type #define GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8, p9) , typename p0##_type, typename p1##_type, \\ typename p2##_type, typename p3##_type, typename p4##_type, \\ typename p5##_type, typename p6##_type, typename p7##_type, \\ typename p8##_type, typename p9##_type #define GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS()\\ () #define GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS(p0)\\ (p0##_type gmock_p0) : p0(::std::move(gmock_p0)) #define GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS(p0, p1)\\ (p0##_type gmock_p0, p1##_type gmock_p1) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)) #define GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS(p0, p1, p2)\\ (p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)) #define GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS(p0, p1, p2, p3)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)) #define GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)) #define GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)) #define GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)) #define GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7)) #define GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7)), p8(::std::move(gmock_p8)) #define GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8, p9)\\ (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \\ p9##_type gmock_p9) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7)), p8(::std::move(gmock_p8)), \\ p9(::std::move(gmock_p9)) #define GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS(p0)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS(p0, p1)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (\\ p1 # # _type p1 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS(p0, p1, p2)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (\\ p1 # # _type p1 ; p2 # # _type p2 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS(p0, p1, p2, p3)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (\\ p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS(p0, p1, p2, p3, \\ p4)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; p4 # # _type p4 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, \\ p5)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; p4 # # _type p4 ; \\ p5 # # _type p5 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; p4 # # _type p4 ; \\ p5 # # _type p5 ; p6 # # _type p6 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; p4 # # _type p4 ; \\ p5 # # _type p5 ; p6 # # _type p6 ; p7 # # _type p7 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8)"
  },
  {
    "label": "GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; \\ p4 # # _type p4 ; p5 # # _type p5 ; p6 # # _type p6 ; p7 # # _type p7 ; p8 # # _type p8 ; # define)",
    "insertText": "GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8, p9)"
  },
  {
    "label": "GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS()",
    "kind": "Method",
    "detail": "Function (p1 # # _type p1 ; p2 # # _type p2 ; p3 # # _type p3 ; \\ p4 # # _type p4 ; p5 # # _type p5 ; p6 # # _type p6 ; p7 # # _type p7 ; p8 # # _type p8 ; \\ p9 # # _type p9 ; # define)",
    "insertText": "GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS(p0) p0 #define GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS(p0, p1) p0, p1 #define GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS(p0, p1, p2) p0, p1, p2 #define GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS(p0, p1, p2, p3) p0, p1, p2, p3 #define GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) p0, p1, \\ p2, p3, p4 #define GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) p0, \\ p1, p2, p3, p4, p5 #define GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6) p0, p1, p2, p3, p4, p5, p6 #define GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7) p0, p1, p2, p3, p4, p5, p6, p7 #define GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8) p0, p1, p2, p3, p4, p5, p6, p7, p8 #define GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8, p9) p0, p1, p2, p3, p4, p5, p6, p7, p8, p9 #define GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS(p0) , p0##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS(p0, p1) , p0##_type, \\ p1##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS(p0, p1, p2) , p0##_type, \\ p1##_type, p2##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS(p0, p1, p2, p3) , \\ p0##_type, p1##_type, p2##_type, p3##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) , \\ p0##_type, p1##_type, p2##_type, p3##_type, p4##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) , \\ p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6) , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, \\ p6##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7) , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \\ p5##_type, p6##_type, p7##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8) , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \\ p5##_type, p6##_type, p7##_type, p8##_type #define GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8, p9) , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \\ p5##_type, p6##_type, p7##_type, p8##_type, p9##_type #define GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS(p0) p0##_type p0 #define GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS(p0, p1) p0##_type p0, \\ p1##_type p1 #define GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS(p0, p1, p2) p0##_type p0, \\ p1##_type p1, p2##_type p2 #define GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS(p0, p1, p2, p3) p0##_type p0, \\ p1##_type p1, p2##_type p2, p3##_type p3 #define GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS(p0, p1, p2, p3, \\ p4) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4 #define GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, \\ p5) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \\ p5##_type p5 #define GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\ p6) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \\ p5##_type p5, p6##_type p6 #define GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \\ p5##_type p5, p6##_type p6, p7##_type p7 #define GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8 #define GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8, p9) p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \\ p9##_type p9 #define GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS() #define GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS(p0) P #define GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS(p0, p1) P2 #define GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS(p0, p1, p2) P3 #define GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS(p0, p1, p2, p3) P4 #define GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) P5 #define GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) P6 #define GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) P7 #define GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7) P8 #define GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8) P9 #define GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\ p7, p8, p9) P10 #define GMOCK_ACTION_CLASS_(name, value_params)\\ GTEST_CONCAT_TOKEN_(name##Action, GMOCK_INTERNAL_COUNT_##value_params) #define ACTION_TEMPLATE(name, template_params, value_params)\\ template <GMOCK_INTERNAL_DECL_##template_params\\ GMOCK_INTERNAL_DECL_TYPE_##value_params>\\ class GMOCK_ACTION_CLASS_(name, value_params)"
  },
  {
    "label": "GMOCK_ACTION_CLASS_()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "GMOCK_ACTION_CLASS_(name, value_params)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\ gmock_Impl GMOCK_INTERNAL_INIT_ # # value_params { } \\ return_type)",
    "insertText": "Perform(const args_type& args)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::ActionHelper<return_type,gmock_Impl>::\\)",
    "insertText": "Perform(this, args)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\ return_type)",
    "insertText": "gmock_PerformImpl(const args_type& args, \\ const arg0_type& arg0, const arg1_type& arg1, \\ const arg2_type& arg2, const arg3_type& arg3, \\ const arg4_type& arg4, const arg5_type& arg5, \\ const arg6_type& arg6, const arg7_type& arg7, \\ const arg8_type& arg8, const arg9_type& arg9)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ GMOCK_INTERNAL_DEFN_ # # value_params \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(gmock_Impl)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<F> operator::testing::Action<)",
    "insertText": "F()"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(\\ new gmock_Impl<F>(GMOCK_INTERNAL_LIST_##value_params))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ GMOCK_INTERNAL_DEFN_ # # value_params \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(GMOCK_ACTION_CLASS_(name, value_params))"
  },
  {
    "label": "GMOCK_ACTION_CLASS_()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<GMOCK_INTERNAL_DECL_ # # template_params \\ GMOCK_INTERNAL_DECL_TYPE_ # # value_params> \\)",
    "insertText": "GMOCK_ACTION_CLASS_(name, value_params)<\\ GMOCK_INTERNAL_LIST_##template_params\\ GMOCK_INTERNAL_LIST_TYPE_##value_params> name(\\ GMOCK_INTERNAL_DECL_##value_params)"
  },
  {
    "label": "GMOCK_ACTION_CLASS_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_ACTION_CLASS_(name, value_params)<\\ GMOCK_INTERNAL_LIST_##template_params\\ GMOCK_INTERNAL_LIST_TYPE_##value_params>(\\ GMOCK_INTERNAL_LIST_##value_params)"
  },
  {
    "label": "GMOCK_ACTION_CLASS_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<GMOCK_INTERNAL_DECL_ # # template_params \\ GMOCK_INTERNAL_DECL_TYPE_ # # value_params> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\)",
    "insertText": "GMOCK_ACTION_CLASS_(name, value_params)<\\ GMOCK_INTERNAL_LIST_##template_params\\ GMOCK_INTERNAL_LIST_TYPE_##value_params>::gmock_Impl<F>::\\ gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION(name)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "Action()"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl()"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>())"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##Action)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ name # # Action)",
    "insertText": "name()"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # Action::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P(name, p0)"
  },
  {
    "label": "ActionP()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP(p0##_type gmock_p0) : \\ p0(::std::forward<p0##_type>(gmock_p0))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0) : \\ p0(::std::forward<p0##_type>(gmock_p0))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type> \\ name # # ActionP<p0 # # _type>)",
    "insertText": "name(p0##_type p0)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP<p0 # #)",
    "insertText": "_type(p0)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP<p0 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P2(name, p0, p1)"
  },
  {
    "label": "ActionP2()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP2(p0##_type gmock_p0, \\ p1##_type gmock_p1) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, \\ p1##_type gmock_p1) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP2)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type> \\ name # # ActionP2<p0 # # _type,p1 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP2<p0 # # _type,p1 # #)",
    "insertText": "_type(p0, p1)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP2<p0 # # _type,p1 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P3(name, p0, p1, p2)"
  },
  {
    "label": "ActionP3()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP3(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP3)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type> \\ name # # ActionP3<p0 # # _type,p1 # # _type,p2 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1, p2##_type p2)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP3<p0 # # _type,p1 # # _type,p2 # #)",
    "insertText": "_type(p0, p1, p2)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP3<p0 # # _type,p1 # # _type,\\ p2 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P4(name, p0, p1, p2, p3)"
  },
  {
    "label": "ActionP4()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP4(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, \\ p3##_type gmock_p3) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP4)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type> \\ name # # ActionP4<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, \\ p3##_type p3)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP4<p0 # # _type,p1 # # _type,p2 # # _type,p3 # #)",
    "insertText": "_type(p0, p1, \\ p2, p3)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP4<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P5(name, p0, p1, p2, p3, p4)"
  },
  {
    "label": "ActionP5()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP5(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, \\ p4##_type gmock_p4) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, \\ p4##_type gmock_p4) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP5)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type> \\ name # # ActionP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P6(name, p0, p1, p2, p3, p4, p5)"
  },
  {
    "label": "ActionP6()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP6(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ p5 # # _type p5 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP6)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type> \\ name # # ActionP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, \\ p3##_type p3, p4##_type p4, p5##_type p5)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P7(name, p0, p1, p2, p3, p4, p5, p6)"
  },
  {
    "label": "ActionP7()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP7(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, \\ p6##_type gmock_p6) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \\ p6))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ p5 # # _type p5 ; \\ p6 # # _type p6 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP7)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type> \\ name # # ActionP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, \\ p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \\ p6##_type p6)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5, p6)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P8(name, p0, p1, p2, p3, p4, p5, p6, p7)"
  },
  {
    "label": "ActionP8()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP8(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, \\ p7##_type gmock_p7) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, \\ p7##_type gmock_p7) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \\ p6, p7))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ p5 # # _type p5 ; \\ p6 # # _type p6 ; \\ p7 # # _type p7 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP8)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type> \\ name # # ActionP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \\ p6##_type p6, p7##_type p7)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5, \\ p6, p7)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type,\\ p7 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P9(name, p0, p1, p2, p3, p4, p5, p6, p7, p8)"
  },
  {
    "label": "ActionP9()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP9(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7)), \\ p8(::std::forward<p8##_type>(gmock_p8))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7)), \\ p8(::std::forward<p8##_type>(gmock_p8))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ p5 # # _type p5 ; \\ p6 # # _type p6 ; \\ p7 # # _type p7 ; \\ p8 # # _type p8 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP9)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type> \\ name # # ActionP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,\\ p8 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \\ p8##_type p8)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # #)",
    "insertText": "_type(p0, p1, p2, \\ p3, p4, p5, p6, p7, p8)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type,p7 # # _type,\\ p8 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const #define ACTION_P10(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)"
  },
  {
    "label": "ActionP10()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ name # #)",
    "insertText": "ActionP10(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8, \\ p9##_type gmock_p9) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7)), \\ p8(::std::forward<p8##_type>(gmock_p8)), \\ p9(::std::forward<p9##_type>(gmock_p9))"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (} \\ template<F> \\ class gmock_Impl : public::testing::ActionInterface<F> { \\ public : \\ typedef F function_type ; \\ typedef::testing::internal::Function<F>::Result return_type ; \\ typedef::testing::internal::Function<F>::ArgumentTuple \\ args_type ; \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \\ p9##_type gmock_p9) : p0(::std::forward<p0##_type>(gmock_p0)), \\ p1(::std::forward<p1##_type>(gmock_p1)), \\ p2(::std::forward<p2##_type>(gmock_p2)), \\ p3(::std::forward<p3##_type>(gmock_p3)), \\ p4(::std::forward<p4##_type>(gmock_p4)), \\ p5(::std::forward<p5##_type>(gmock_p5)), \\ p6(::std::forward<p6##_type>(gmock_p6)), \\ p7(::std::forward<p7##_type>(gmock_p7)), \\ p8(::std::forward<p8##_type>(gmock_p8)), \\ p9(::std::forward<p9##_type>(gmock_p9))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Action<)",
    "insertText": "F(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \\ p6, p7, p8, p9))"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type p0 ; \\ p1 # # _type p1 ; \\ p2 # # _type p2 ; \\ p3 # # _type p3 ; \\ p4 # # _type p4 ; \\ p5 # # _type p5 ; \\ p6 # # _type p6 ; \\ p7 # # _type p7 ; \\ p8 # # _type p8 ; \\ p9 # # _type p9 ; \\ private : \\)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(name##ActionP10)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type> \\ name # # ActionP10<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \\ p9##_type p9)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # ActionP10<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # # _type,p9 # #)",
    "insertText": "_type(p0, \\ p1, p2, p3, p4, p5, p6, p7, p8, p9)"
  },
  {
    "label": "gmock_PerformImpl()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type> \\ template<F> \\ template<arg0_type,arg1_type,arg2_type,\\ arg3_type,arg4_type,arg5_type,\\ arg6_type,arg7_type,arg8_type,\\ arg9_type> \\::testing::internal::Function<F>::Result \\ name # # ActionP10<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type>::gmock_Impl<F)",
    "insertText": "gmock_PerformImpl(\\ GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) # pragma warning(disable:4100)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (namespace invoke_argument { struct AdlTag { } ; template<R,F> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5,A6> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5,A6,A7> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5,A6,A7,A8> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5,A6,A7,A8,A9> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9)"
  },
  {
    "label": "InvokeArgumentAdl()",
    "kind": "Method",
    "detail": "Function (} template<R,F,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10> R)",
    "insertText": "InvokeArgumentAdl(AdlTag, F f, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(p0))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(p0, p1))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_3_VALUE_PARAMS(p0, p1, p2))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_4_VALUE_PARAMS(p0, p1, p2, p3))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4, p5)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4, p5, p6)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4, p5, p6, p7)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4, p5, p6, p7, p8)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))"
  },
  {
    "label": "return_type()",
    "kind": "Method",
    "detail": "Function (using internal::invoke_argument::InvokeArgumentAdl ; return InvokeArgumentAdl<)",
    "insertText": "return_type(internal::invoke_argument::AdlTag(), ::std::get<k>(args), p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_0_VALUE_PARAMS())"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_1_VALUE_PARAMS(p0))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_2_VALUE_PARAMS(p0, p1))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_3_VALUE_PARAMS(p0, p1, p2))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_4_VALUE_PARAMS(p0, p1, p2, p3))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))"
  }
]