[
  {
    "label": "FWidgetRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetRenderer"
  },
  {
    "label": "SVirtualWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualWindow"
  },
  {
    "label": "FMoviePlayerWidgetRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoviePlayerWidgetRenderer"
  },
  {
    "label": "FDefaultGameMoviePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultGameMoviePlayer"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "FSlateLoadingSynchronizationMechanism",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateLoadingSynchronizationMechanism"
  },
  {
    "label": "SDPIScaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDPIScaler"
  },
  {
    "label": "FMoviePlayerWidgetRenderer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Stats / Stats . h \" # include \" Types / SlateStructs . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Rendering / SlateRenderer . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Layout / SBorder . h \" # include \" MoviePlayer . h \" # include \" MoviePlayerProxyServer . h \" # include \" TickableObjectRenderThread . h \" # include \" Misc / CoreDelegates . h \" class FWidgetRenderer ; class SVirtualWindow ; class FMoviePlayerWidgetRenderer { public :)",
    "insertText": "FMoviePlayerWidgetRenderer(TSharedPtr<SWindow> InMainWindow, TSharedPtr<SVirtualWindow> InVirtualRenderWindowWindow, FSlateRenderer* InRenderer)"
  },
  {
    "label": "EnableDPIScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDPIScale(bool bShouldEnable)"
  },
  {
    "label": "DrawWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindow(float DeltaTime)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : SWindow* MainWindow ; TSharedRef<class SVirtualWindow> VirtualRenderWindow ; TSharedPtr<FHittestGrid> HittestGrid ; FSlateRenderer* SlateRenderer ; FViewportRHIRef ViewportRHI ; bool bIsDPIScaleEnabled ; } ; class FDefaultGameMoviePlayer : public FTickableObjectRenderThread,public IGameMoviePlayer,public IMoviePlayerProxyServer,public TSharedFromThis<FDefaultGameMoviePlayer> { public : void)",
    "insertText": "Create()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (MoviePlayer =)",
    "insertText": "MakeShareable(new FDefaultGameMoviePlayer)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MoviePlayer .)",
    "insertText": "Reset()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FDefaultGameMoviePlayer*)",
    "insertText": "Get()"
  },
  {
    "label": "FDefaultGameMoviePlayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDefaultGameMoviePlayer()"
  },
  {
    "label": "RegisterMovieStreamer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMovieStreamer(TSharedPtr<IMovieStreamer, ESPMode::ThreadSafe> InMovieStreamer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSlateRenderer& InSlateRenderer, TSharedPtr<SWindow> TargetRenderWindow = nullptr)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PassLoadingScreenWindowBackToGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PassLoadingScreenWindowBackToGame()"
  },
  {
    "label": "SetupLoadingScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLoadingScreen(const FLoadingScreenAttributes& LoadingScreenAttributes)"
  },
  {
    "label": "HasEarlyStartupMovie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEarlyStartupMovie()"
  },
  {
    "label": "PlayEarlyStartupMovies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayEarlyStartupMovies()"
  },
  {
    "label": "PlayMovie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayMovie()"
  },
  {
    "label": "StopMovie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovie()"
  },
  {
    "label": "WaitForMovieToFinish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForMovieToFinish(bool bAllowEngineTick = false)"
  },
  {
    "label": "IsLoadingFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingFinished()"
  },
  {
    "label": "IsMovieCurrentlyPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovieCurrentlyPlaying()"
  },
  {
    "label": "LoadingScreenIsPrepared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadingScreenIsPrepared()"
  },
  {
    "label": "SetupLoadingScreenFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLoadingScreenFromIni()"
  },
  {
    "label": "SetViewportDPIScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportDPIScale(float InViewportDPIScale)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "BlockingTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockingTick()"
  },
  {
    "label": "BlockingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockingFinished()"
  },
  {
    "label": "SetIsSlateThreadAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSlateThreadAllowed(bool bInIsSlateThreadAllowed)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "OnLoadingScreenMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLoadingScreenMouseButtonDown(const FGeometry& Geometry, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "OnLoadingScreenKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLoadingScreenKeyDown(const FGeometry& Geometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "SetSlateOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateOverlayWidget(TSharedPtr<SWidget> NewOverlayWidget)"
  },
  {
    "label": "WillAutoCompleteWhenLoadFinishes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillAutoCompleteWhenLoadFinishes()"
  },
  {
    "label": "GetMovieName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMovieName()"
  },
  {
    "label": "IsLastMovieInPlaylist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLastMovieInPlaylist()"
  },
  {
    "label": "ForceCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceCompletion()"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "SetIsPlayOnBlockingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPlayOnBlockingEnabled(bool bIsEnabled)"
  },
  {
    "label": "GetViewportDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewportDPIScale()"
  },
  {
    "label": "OnMainWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMainWindowClosed(const TSharedRef<SWindow>& Window)"
  },
  {
    "label": "TickStreamer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TickStreamer(float DeltaTime)"
  },
  {
    "label": "MovieStreamingIsPrepared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovieStreamingIsPrepared()"
  },
  {
    "label": "IsMovieStreamingFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovieStreamingFinished()"
  },
  {
    "label": "GetMovieSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetMovieSize()"
  },
  {
    "label": "GetMovieWidth()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetMovieWidth()"
  },
  {
    "label": "GetMovieHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetMovieHeight()"
  },
  {
    "label": "GetSlateBackgroundVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSlateBackgroundVisibility()"
  },
  {
    "label": "GetViewportVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetViewportVisibility()"
  },
  {
    "label": "OnPreLoadMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreLoadMap(const FString& LevelName)"
  },
  {
    "label": "OnPostLoadMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMap(UWorld* LoadedWorld)"
  },
  {
    "label": "CanPlayMovie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayMovie()"
  },
  {
    "label": "OnAnyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnyDown()"
  }
]