[
  {
    "label": "FIncompleteType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIncompleteType"
  },
  {
    "label": "TUEStaticAssertTypeChecker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUEStaticAssertTypeChecker"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UEStaticAssertCompleteType_Private { class FIncompleteType ; template<T> struct TUEStaticAssertTypeChecker { T&)",
    "insertText": "Func()"
  },
  {
    "label": "RetType()",
    "kind": "Method",
    "detail": "Function (} ; template<RetType,. . . ArgTypes> struct TUEStaticAssertTypeChecker<)",
    "insertText": "RetType(ArgTypes...)"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; } # define)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(TypeToCheck, ...) static_assert(sizeof(UEStaticAssertCompleteType_Private::TUEStaticAssertTypeChecker<TypeToCheck>::Func()), ##__VA_ARGS__) #if 0 UE_STATIC_ASSERT_COMPLETE_TYPE( void, \"CV void is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(volatile void, \"CV void is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(const void, \"CV void is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(const volatile void, \"CV void is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType, \"A forward-declared-but-undefined class is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType[2], \"An array of an incomplete class is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(int[], \"An array of a complete type of unspecified bound is incomplete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (# endif # if 0)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType*, \"A pointer to an incomplete type is complete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType&, \"A reference to an incomplete type is complete\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType (UEStaticAssertCompleteType_Private::FIncompleteType), \"A function type is not incomplete, even if it returns or takes an incomplete type\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(UEStaticAssertCompleteType_Private::FIncompleteType(&)(UEStaticAssertCompleteType_Private::FIncompleteType), \"References to function types must give a good error\")"
  }
]