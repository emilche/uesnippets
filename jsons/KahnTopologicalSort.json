[
  {
    "label": "FMutuallyReachableVertexSetContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutuallyReachableVertexSetContext"
  },
  {
    "label": "FKahnContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKahnContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "KahnTopologicalSort_CreateWorkingGraph()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Sort . h \" # include \" Algo / Unique . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Invoke . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / ElementType . h \" namespace AlgoImpl { typedef int32 FKahnHandle ; struct FMutuallyReachableVertexSetContext { TSet<FKahnHandle> VisitedReferences ; TSet<FKahnHandle> VisitedDependencies ; TSet<FKahnHandle> MaximalMRVS ; TSet<FKahnHandle> Culprits ; TArray<FKahnHandle> Stack ; TArray<FKahnHandle> Cycle ; } ; struct FKahnContext { TSet<FKahnHandle> RemainingVertices ; TArray<TArray<FKahnHandle>> Referencers ; TArray<TArray<FKahnHandle>> Dependencies ; TArray<int32> DependencyCount ; TOptional<FMutuallyReachableVertexSetContext> MRVSContext ; } ; template<RangeType,GetElementDependenciesType> void)",
    "insertText": "KahnTopologicalSort_CreateWorkingGraph(FKahnContext& Context, RangeType& UniqueRange, GetElementDependenciesType GetElementDependencies, TSet<FKahnHandle>& OutInitialIndependents)"
  },
  {
    "label": "FindMostIndependentMutuallyReachableVertexSet()",
    "kind": "Method",
    "detail": "Function (const TSet<FKahnHandle>&)",
    "insertText": "FindMostIndependentMutuallyReachableVertexSet(FKahnContext& Context)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} namespace Algo { enum class ETopologicalSort { None,AllowCycles,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETopologicalSort)"
  },
  {
    "label": "KahnTopologicalSort()",
    "kind": "Method",
    "detail": "Function (template<RangeType,GetElementDependenciesType> bool)",
    "insertText": "KahnTopologicalSort(RangeType& UniqueRange, GetElementDependenciesType GetElementDependencies, ETopologicalSort Flags)"
  },
  {
    "label": "KahnTopologicalSort_CreateWorkingGraph()",
    "kind": "Method",
    "detail": "Function (using namespace AlgoImpl ; using ElementType = TElementType<RangeType>::Type ; FKahnContext Context ; TSet<FKahnHandle> IndependentVertices ;)",
    "insertText": "KahnTopologicalSort_CreateWorkingGraph(Context, UniqueRange, Forward<GetElementDependenciesType>(GetElementDependencies), IndependentVertices)"
  },
  {
    "label": "Referencers()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FKahnHandle>>&)",
    "insertText": "Referencers(Context.Referencers)"
  },
  {
    "label": "Dependencies()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FKahnHandle>>&)",
    "insertText": "Dependencies(Context.Dependencies)"
  },
  {
    "label": "DependencyCount()",
    "kind": "Method",
    "detail": "Function (TArray<int32>&)",
    "insertText": "DependencyCount(Context.DependencyCount)"
  },
  {
    "label": "RemainingVertices()",
    "kind": "Method",
    "detail": "Function (TSet<FKahnHandle>&)",
    "insertText": "RemainingVertices(Context.RemainingVertices)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TSet<FKahnHandle> NewIndependentVertices ; TArray<FKahnHandle> SortedRange ; int32 NumElements = Dependencies .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SortedRange .)",
    "insertText": "Reserve(NumElements)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RemainingVertices .)",
    "insertText": "Add(Vertex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(RemainingVertices.Num() > 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (DependencyCount [ Vertex ] = INDEX_NONE ; } } NewIndependentVertices .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32& ReferencerDependencyCount = DependencyCount [ Referencer ] ;)",
    "insertText": "if(ReferencerDependencyCount == INDEX_NONE)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "check(ReferencerDependencyCount > 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewIndependentVertices .)",
    "insertText": "Add(Referencer)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (# endif RemainingVertices .)",
    "insertText": "Remove(Vertex)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Swap(NewIndependentVertices, IndependentVertices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CopyOriginal .)",
    "insertText": "Add(MoveTemp(Element))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int32 SourceIndex = 0 ;)",
    "insertText": "for(ElementType& TargetElement : UniqueRange)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TargetElement =)",
    "insertText": "MoveTemp(CopyOriginal[SortedRange[SourceIndex++]])"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32 NumElements =)",
    "insertText": "GetNum(UniqueRange)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FKahnHandle Handle = 0 ;)",
    "insertText": "for(const ElementType& Element : UniqueRange)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FKahnHandle& ExistingHandle = HandleOfElement .)",
    "insertText": "FindOrAdd(Element, INDEX_NONE)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExistingHandle = Handle + + ; } Referencers .)",
    "insertText": "SetNum(NumElements)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (const auto& DependenciesInput =)",
    "insertText": "Invoke(GetElementDependencies, Element)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FKahnHandle>& UniqueElementDependencies = Dependencies [ Handle ] ;)",
    "insertText": "for(const ElementType& Dependency : DependenciesInput)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FKahnHandle* DependencyHandle = HandleOfElement .)",
    "insertText": "Find(Dependency)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UniqueElementDependencies .)",
    "insertText": "Add(*DependencyHandle)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Sort(UniqueElementDependencies)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (UniqueElementDependencies .)",
    "insertText": "SetNum(Algo::Unique(UniqueElementDependencies), EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DependencyCount [ Handle ] = NumUniqueDependencies ;)",
    "insertText": "if(NumUniqueDependencies == 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutInitialIndependents .)",
    "insertText": "Add(Handle)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FKahnHandle DependencyHandle : UniqueElementDependencies)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FMutuallyReachableVertexSetContext& InitContext = Context . MRVSContext .)",
    "insertText": "Emplace()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (InitContext . VisitedReferences .)",
    "insertText": "Reserve(NumVertices)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Culprits .)",
    "insertText": "Append(Context.RemainingVertices)"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (FKahnHandle StartingVertex =* Culprits .)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 StartingVertexLoopCount = 0 ;)",
    "insertText": "while(StartingVertex != INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VisitedReferences .)",
    "insertText": "Add(StartingVertex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FKahnHandle CycleWitnessVertex = StartingVertex ; bool bCycleWitnessWasAlreadyInStack = false ;)",
    "insertText": "while(!bCycleWitnessWasAlreadyInStack)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FKahnHandle NextVertex = INDEX_NONE ;)",
    "insertText": "for(FKahnHandle Dependency : Dependencies[CycleWitnessVertex])"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NextVertex = Dependency ; break ; } })",
    "insertText": "check(NextVertex != INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CycleWitnessVertex = NextVertex ; VisitedReferences .)",
    "insertText": "Add(CycleWitnessVertex, &bCycleWitnessWasAlreadyInStack)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Add(CycleWitnessVertex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Stack.Num() >= 2)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (- - StartIndex ; })",
    "insertText": "check(StartIndex >= 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Cycle .)",
    "insertText": "Append(TArrayView<FKahnHandle>(Stack).Mid(StartIndex))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bAlreadyVisited ; VisitedReferences .)",
    "insertText": "Add(Referencer, &bAlreadyVisited)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!Stack.IsEmpty())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bAlreadyVisited ; VisitedDependencies .)",
    "insertText": "Add(Dependency, &bAlreadyVisited)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Add(Dependency)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (} } } } MaximalMRVS = VisitedDependencies .)",
    "insertText": "Intersect(VisitedReferences)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} StartingVertex = INDEX_NONE ;)",
    "insertText": "for(FKahnHandle Vertex : MaximalMRVS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StartingVertex = Dependency ; break ; } })",
    "insertText": "if(StartingVertex != INDEX_NONE)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "checkf(StartingVertexLoopCount++ < Context.RemainingVertices.Num(), TEXT(\"Infinite loop in FindMostIndependentMutuallyReachableVertexSet\"))"
  }
]