[
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SCompoundWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompoundWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USequenceRecordingBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecordingBase"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "ISequenceRecorderExtender()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / Views / SListView . h \" class IDetailsView ; class SCompoundWidget ; class UObject ; class USequenceRecordingBase ; class ISequenceRecorderExtender : public TSharedFromThis<ISequenceRecorderExtender> { public : ~)",
    "insertText": "ISequenceRecorderExtender()"
  },
  {
    "label": "MakeSettingDetailsView()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDetailsView>)",
    "insertText": "MakeSettingDetailsView()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FListViewSelectionChanged, USequenceRecordingBase*)"
  },
  {
    "label": "MakeListWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeListWidget(TSharedPtr<SListView<USequenceRecordingBase*>>& OutCreatedListView, FListViewSelectionChanged OnListViewSelectionChanged)"
  },
  {
    "label": "SetListViewSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListViewSelection(USequenceRecordingBase* InSelectedBase)"
  },
  {
    "label": "AddNewQueueRecording()",
    "kind": "Method",
    "detail": "Function (USequenceRecordingBase*)",
    "insertText": "AddNewQueueRecording(UObject* SequenceRecordingObjectToRecord)"
  },
  {
    "label": "BuildQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildQueuedRecordings(const TArray<USequenceRecordingBase*>& InQueuedRecordings)"
  }
]