[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "FDecimalNumberIntegralLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberIntegralLimits"
  },
  {
    "label": "FDecimalNumberFractionalLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFractionalLimits"
  },
  {
    "label": "FDecimalNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Math / NumericLimits . h \" # include \" Misc / CString . h \" # include<type_traits> struct FDecimalNumberFormattingRules {)",
    "insertText": "FDecimalNumberFormattingRules() : GroupingSeparatorCharacter(TEXT('\\0')) , DecimalSeparatorCharacter(TEXT('\\0')) , PrimaryGroupingSize(0) , SecondaryGroupingSize(0) , MinimumGroupingDigits(1)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 0 ] =)",
    "insertText": "TEXT('0')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 1 ] =)",
    "insertText": "TEXT('1')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 2 ] =)",
    "insertText": "TEXT('2')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 3 ] =)",
    "insertText": "TEXT('3')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 4 ] =)",
    "insertText": "TEXT('4')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 5 ] =)",
    "insertText": "TEXT('5')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 6 ] =)",
    "insertText": "TEXT('6')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 7 ] =)",
    "insertText": "TEXT('7')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 8 ] =)",
    "insertText": "TEXT('8')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DigitCharacters [ 9 ] =)",
    "insertText": "TEXT('9')"
  },
  {
    "label": "IntegralToString()",
    "kind": "Method",
    "detail": "Function (} FString NaNString ; FString NegativePrefixString ; FString NegativeSuffixString ; FString PositivePrefixString ; FString PositiveSuffixString ; FString PlusString ; FString MinusString ; TCHAR GroupingSeparatorCharacter ; TCHAR DecimalSeparatorCharacter ; uint8 PrimaryGroupingSize ; uint8 SecondaryGroupingSize ; uint8 MinimumGroupingDigits ; TCHAR DigitCharacters [ 1 0 ] ; FNumberFormattingOptions CultureDefaultFormattingOptions ; } ; namespace FastDecimalFormat { namespace Internal { void)",
    "insertText": "IntegralToString(const bool bIsNegative, const uint64 InVal, const FDecimalNumberFormattingRules& InFormattingRules, FNumberFormattingOptions InFormattingOptions, FString& OutString)"
  },
  {
    "label": "FractionalToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FractionalToString(const double InVal, const FDecimalNumberFormattingRules& InFormattingRules, FNumberFormattingOptions InFormattingOptions, FString& OutString)"
  },
  {
    "label": "FDecimalNumberIntegralLimits()",
    "kind": "Method",
    "detail": "Function (struct FDecimalNumberIntegralLimits {)",
    "insertText": "FDecimalNumberIntegralLimits(int64 InLowest, uint64 InMax, bool bInIsSigned) : NumericLimitLowest(InLowest), NumericLimitMax(InMax), bIsNumericSigned(bInIsSigned)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} int64 NumericLimitLowest ; uint64 NumericLimitMax ; bool bIsNumericSigned ; template<IntegralType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntegralType>) > static FDecimalNumberIntegralLimits FromNumericLimits()"
  },
  {
    "label": "FDecimalNumberFractionalLimits()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDecimalNumberFractionalLimits {)",
    "insertText": "FDecimalNumberFractionalLimits(double InLowest, double InMax) : NumericLimitLowest(InLowest), NumericLimitMax(InMax)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} double NumericLimitLowest ; double NumericLimitMax ; template<FloatingType)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<FloatingType>) > static FDecimalNumberFractionalLimits FromNumericLimits()"
  },
  {
    "label": "StringToIntegral()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "StringToIntegral(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, const FDecimalNumberIntegralLimits& Limits, bool& OutIsNegative, uint64& OutVal, int32* OutParsedLen)"
  },
  {
    "label": "StringToFractional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StringToFractional(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, const FDecimalNumberFractionalLimits& Limits, double& OutVal, int32* OutParsedLen)"
  },
  {
    "label": "NumberToString()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "NumberToString(const T InVal, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberFormattingOptions& InFormattingOptions, FString& OutString)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning (disable : 4146)"
  },
  {
    "label": "IntegralToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegralToString(bIsNegative, (bIsNegative) ? -static_cast<uint64>(InVal) : static_cast<uint64>(InVal), InFormattingRules, InFormattingOptions, OutString)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop) #endif } else if constexpr (std::is_same_v<T, uint8> || std::is_same_v<T, uint16> || std::is_same_v<T, uint32> || std::is_same_v<T, uint64>)"
  },
  {
    "label": "IntegralToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegralToString(false, static_cast<uint64>(InVal), InFormattingRules, InFormattingOptions, OutString)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<T, float> || std::is_same_v<T, double>)"
  },
  {
    "label": "FractionalToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FractionalToString(static_cast<double>(InVal), InFormattingRules, InFormattingOptions, OutString)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Not supported\")"
  },
  {
    "label": "NumberToString()",
    "kind": "Method",
    "detail": "Function (} } template<T> FString)",
    "insertText": "NumberToString(const T InVal, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberFormattingOptions& InFormattingOptions)"
  },
  {
    "label": "NumberToString()",
    "kind": "Method",
    "detail": "Function (FString Result ; \\)",
    "insertText": "NumberToString(InVal, InFormattingRules, InFormattingOptions, Result)"
  },
  {
    "label": "FAST_DECIMAL_PARSE_INTEGER_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ return Result ; \\ } # define)",
    "insertText": "FAST_DECIMAL_PARSE_INTEGER_IMPL(NUMBER_TYPE) \\ FORCEINLINE bool StringToNumber(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, NUMBER_TYPE& OutVal, int32* OutParsedLen = nullptr)"
  },
  {
    "label": "StringToIntegral()",
    "kind": "Method",
    "detail": "Function (\\ bool bIsNegative = false ; \\ uint64 Val = 0 ; \\ const bool bResult =)",
    "insertText": "StringToIntegral(InStr, InStrLen, InFormattingRules, InParsingOptions, Internal::FDecimalNumberIntegralLimits::FromNumericLimits<NUMBER_TYPE>(), bIsNegative, Val, OutParsedLen)"
  },
  {
    "label": "NUMBER_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ OutVal = static_cast<)",
    "insertText": "NUMBER_TYPE(Val)"
  },
  {
    "label": "OutVal()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OutVal(bIsNegative ? -1 : 1)"
  },
  {
    "label": "StringToNumber()",
    "kind": "Method",
    "detail": "Function (\\ return bResult ; \\ } \\ bool)",
    "insertText": "StringToNumber(const TCHAR* InStr, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, NUMBER_TYPE& OutVal, int32* OutParsedLen = nullptr)"
  },
  {
    "label": "StringToNumber()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "StringToNumber(InStr, FCString::Strlen(InStr), InFormattingRules, InParsingOptions, OutVal, OutParsedLen)"
  },
  {
    "label": "FAST_DECIMAL_PARSE_FRACTIONAL_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "FAST_DECIMAL_PARSE_FRACTIONAL_IMPL(NUMBER_TYPE) \\ FORCEINLINE bool StringToNumber(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, NUMBER_TYPE& OutVal, int32* OutParsedLen = nullptr)"
  },
  {
    "label": "StringToFractional()",
    "kind": "Method",
    "detail": "Function (\\ double Val = 0 . 0 ; \\ const bool bResult =)",
    "insertText": "StringToFractional(InStr, InStrLen, InFormattingRules, InParsingOptions, Internal::FDecimalNumberFractionalLimits::FromNumericLimits<NUMBER_TYPE>(), Val, OutParsedLen)"
  },
  {
    "label": "FAST_DECIMAL_PARSE_INTEGER_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "FAST_DECIMAL_PARSE_INTEGER_IMPL(int8) FAST_DECIMAL_PARSE_INTEGER_IMPL(int16) FAST_DECIMAL_PARSE_INTEGER_IMPL(int32) FAST_DECIMAL_PARSE_INTEGER_IMPL(int64) FAST_DECIMAL_PARSE_INTEGER_IMPL(uint8) FAST_DECIMAL_PARSE_INTEGER_IMPL(uint16) FAST_DECIMAL_PARSE_INTEGER_IMPL(uint32) FAST_DECIMAL_PARSE_INTEGER_IMPL(uint64) FAST_DECIMAL_PARSE_FRACTIONAL_IMPL(float) FAST_DECIMAL_PARSE_FRACTIONAL_IMPL(double) #undef FAST_DECIMAL_PARSE_INTEGER_IMPL #undef FAST_DECIMAL_PARSE_FRACTIONAL_IMPL CORE_API const FDecimalNumberFormattingRules& GetCultureAgnosticFormattingRules()"
  },
  {
    "label": "Pow10()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Pow10(const int32 InExponent)"
  }
]