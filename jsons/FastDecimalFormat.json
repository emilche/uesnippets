[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "FDecimalNumberIntegralLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberIntegralLimits"
  },
  {
    "label": "FDecimalNumberFractionalLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFractionalLimits"
  },
  {
    "label": "IntegralToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegralToString(const bool bIsNegative, const uint64 InVal, const FDecimalNumberFormattingRules& InFormattingRules, FNumberFormattingOptions InFormattingOptions, FString& OutString)"
  },
  {
    "label": "FractionalToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FractionalToString(const double InVal, const FDecimalNumberFormattingRules& InFormattingRules, FNumberFormattingOptions InFormattingOptions, FString& OutString)"
  },
  {
    "label": "StringToIntegral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StringToIntegral(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, const FDecimalNumberIntegralLimits& Limits, bool& OutIsNegative, uint64& OutVal, int32* OutParsedLen)"
  },
  {
    "label": "StringToFractional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StringToFractional(const TCHAR* InStr, const int32 InStrLen, const FDecimalNumberFormattingRules& InFormattingRules, const FNumberParsingOptions& InParsingOptions, const FDecimalNumberFractionalLimits& Limits, double& OutVal, int32* OutParsedLen)"
  },
  {
    "label": "Pow10()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Pow10(const int32 InExponent)"
  }
]