[
  {
    "label": "FbxObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxObject"
  },
  {
    "label": "FbxAnimStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimStack"
  },
  {
    "label": "FbxRotationOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxRotationOrder"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EMatrixIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMatrixIndex"
  },
  {
    "label": "EAxisIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAxisIndex"
  },
  {
    "label": "Cell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cell"
  },
  {
    "label": "FbxAnimCurveFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_ANIMATION_CURVE_FILTERS_H_ # define _FBXSDK_SCENE_ANIMATION_CURVE_FILTERS_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxtime . h> # include<fbxsdk / core / base / fbxstatus . h> # include<fbxsdk / scene / animation / fbxanimcurve . h> # include<fbxsdk / fileio / fbxiosettings . h> # include<fbxsdk / core / math / fbxtransforms . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxObject ; class FbxAnimStack ; class FbxRotationOrder ; class FBXSDK_DLL FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilter()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} ; const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetStopTime()",
    "kind": "Method",
    "detail": "Function (mStart = pTime ; } FbxTime&)",
    "insertText": "GetStopTime()"
  },
  {
    "label": "GetStartKey()",
    "kind": "Method",
    "detail": "Function (mStop = pTime ; } int)",
    "insertText": "GetStartKey(FbxAnimCurve& pCurve)"
  },
  {
    "label": "GetStopKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStopKey(FbxAnimCurve& pCurve)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimStack* pAnimStack, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxObject* pObj, FbxAnimStack* pAnimStack, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimCurveNode& pCurveNode, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimCurve** pCurve, int pCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimCurve& pCurve, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimStack* pAnimStack, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxObject* pObj, FbxAnimStack* pAnimStack, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurveNode& pCurveNode, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve** pCurve, int pCount, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve& pCurve, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetContinuousOffset()",
    "kind": "Method",
    "detail": "Function (mStart = FBXSDK_TIME_MINUS_INFINITE ; mStop = FBXSDK_TIME_INFINITE ; } # ifndef DOXYGEN_SHOULD_SKIP_THIS bool)",
    "insertText": "GetContinuousOffset(FbxRotationOrder& pOrder, FbxVector4& pOffset, FbxVector4& pNew, FbxVector4& pOld)"
  },
  {
    "label": "GetKFCurvesFromAnimCurve()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetKFCurvesFromAnimCurve(FbxAnimCurve** pSrc, int pSrcCount, KFCurve** pDst, int& pDstCount)"
  },
  {
    "label": "UpdateProgressInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgressInformation(FbxTime , FbxTime)"
  },
  {
    "label": "FbxAnimCurveFilterConstantKeyReducer()",
    "kind": "Method",
    "detail": "Function (} ; FbxTime mStart,mStop ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterConstantKeyReducer : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterConstantKeyReducer()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimStack* pAnimStack, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(FbxObject* pObj, FbxAnimStack* pAnimStack, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(FbxAnimCurve** pCurve, int pCount, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(FbxAnimCurveNode& pCurveNode, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve& pCurve, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "SetDerivativeTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDerivativeTolerance(double pValue)"
  },
  {
    "label": "SetValueTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueTolerance(double pValue)"
  },
  {
    "label": "GetKeepFirstAndLastKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKeepFirstAndLastKeys()"
  },
  {
    "label": "SetKeepFirstAndLastKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepFirstAndLastKeys(bool pKeepFirstAndLastKeys)"
  },
  {
    "label": "GetKeepOneKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKeepOneKey()"
  },
  {
    "label": "SetKeepOneKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepOneKey(bool pKeepOneKey)"
  },
  {
    "label": "SetKeepNotPureAutoKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepNotPureAutoKeys(bool pKeep)"
  },
  {
    "label": "SetTranslationThreshold()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS void)",
    "insertText": "SetTranslationThreshold(double pTranslationThreshold)"
  },
  {
    "label": "SetRotationThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationThreshold(double pRotationThreshold)"
  },
  {
    "label": "SetScalingThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalingThreshold(double pScalingThreshold)"
  },
  {
    "label": "SetDefaultThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultThreshold(double pDefaultThreshold)"
  },
  {
    "label": "SetModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModes(bool pExporting, FbxIOSettings& pIOS)"
  },
  {
    "label": "IsKeyConstant()",
    "kind": "Method",
    "detail": "Function (private : double mDerTol ; double mValTol ; double mTranslationThreshold ; double mRotationThreshold ; double mScalingThreshold ; double mDefaultThreshold ; bool mKeepFirstAndLastKeys ; bool mKeepOneKey ; bool mKeepNotPureAutoKeys ; bool)",
    "insertText": "IsKeyConstant(FbxAnimCurve& pCurve, int pIndex, int pFirstIndex, int pLastIndex, double pMinValue, double pMaxValue, bool pOnlyCheckAutoKeys)"
  },
  {
    "label": "FbxAnimCurveFilterScaleCompensate()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FBXSDK_DLL FbxAnimCurveFilterScaleCompensate : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterScaleCompensate()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(FbxAnimCurve** pCurve, int pCount, FbxIOSettings& pIOS, FbxStatus* pStatus = NULL)"
  },
  {
    "label": "FbxAnimCurveFilterGimbleKiller()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxAnimCurveFilterGimbleKiller : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterGimbleKiller()"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimStack* , FbxStatus* pStatus=NULL)"
  },
  {
    "label": "FBX_UNUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_UNUSED(pStatus)"
  },
  {
    "label": "NeedApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedApply(FbxAnimCurve& , FbxStatus* pStatus=NULL)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve& , FbxStatus* pStatus = NULL)"
  },
  {
    "label": "GetApplyKeySyncFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplyKeySyncFilter()"
  },
  {
    "label": "SetApplyKeySyncFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyKeySyncFilter(bool pFlag)"
  },
  {
    "label": "FbxAnimCurveFilterKeyReducer()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : FbxRotationOrder* mRotationOrder ; bool mApplyKeySyncFilter ; int mRotationLayerType ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterKeyReducer : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterKeyReducer()"
  },
  {
    "label": "SetPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrecision(double pPrecision)"
  },
  {
    "label": "GetKeySync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKeySync()"
  },
  {
    "label": "SetKeySync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeySync(bool pKeySync)"
  },
  {
    "label": "KeyReducer()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : bool)",
    "insertText": "KeyReducer(FbxAnimCurve& pSCurve, FbxAnimCurve& pTCurve, FbxTime pStart, FbxTime pStop)"
  },
  {
    "label": "Subdivise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Subdivise(FbxAnimCurve& pSCurve, FbxAnimCurve& pTCurve, int pLeft, int pRight)"
  },
  {
    "label": "FbxAnimCurveFilterKeySync()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxAnimCurveFilterKeySync()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve& , FbxStatus* pStatus=NULL)"
  },
  {
    "label": "FbxAnimCurveFilterResample()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxAnimCurveFilterResample()"
  },
  {
    "label": "SetKeysOnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeysOnFrame(bool pKeysOnFrame)"
  },
  {
    "label": "GetKeysOnFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKeysOnFrame()"
  },
  {
    "label": "GetPeriodTime()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "GetPeriodTime()"
  },
  {
    "label": "SetPeriodTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPeriodTime(FbxTime &pPeriod)"
  },
  {
    "label": "GetIntelligentMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIntelligentMode()"
  },
  {
    "label": "SetIntelligentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntelligentMode(bool pIntelligent)"
  },
  {
    "label": "FbxAnimCurveFilterScale()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : bool mKeysOnFrame ; FbxTime mPeriod ; bool mIntelligent ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterScale : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterScale()"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(double pScale)"
  },
  {
    "label": "FbxAnimCurveFilterScaleByCurve()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : double mScale ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterScaleByCurve : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterScaleByCurve()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurve*)",
    "insertText": "GetScale()"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(FbxAnimCurve* pScale)"
  },
  {
    "label": "FbxAnimCurveFilterTSS()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : FbxAnimCurve* mScale ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterTSS : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterTSS()"
  },
  {
    "label": "GetShift()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "GetShift()"
  },
  {
    "label": "SetShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShift(FbxTime& pShift)"
  },
  {
    "label": "FbxAnimCurveFilterUnroll()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : FbxTime mShift ; double mScale ; # endif } ; class FBXSDK_DLL FbxAnimCurveFilterUnroll : public FbxAnimCurveFilter { public :)",
    "insertText": "FbxAnimCurveFilterUnroll()"
  },
  {
    "label": "SetQualityTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQualityTolerance(double pQualityTolerance)"
  },
  {
    "label": "GetTestForPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTestForPath()"
  },
  {
    "label": "SetTestForPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestForPath(bool pTestForPath)"
  },
  {
    "label": "GetForceAutoTangents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceAutoTangents()"
  },
  {
    "label": "SetForceAutoTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceAutoTangents(bool pForceAutoTangents)"
  },
  {
    "label": "SetRotationOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS void)",
    "insertText": "SetRotationOrder(FbxEuler::EOrder pOrder)"
  },
  {
    "label": "InterpolationQualityFactor()",
    "kind": "Method",
    "detail": "Function (private : double)",
    "insertText": "InterpolationQualityFactor(FbxVector4& lV1, FbxVector4& lV2)"
  },
  {
    "label": "FbxAnimCurveFilterMatrixConverter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxAnimCurveFilterMatrixConverter()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FbxAnimCurve** pCurve, double* pVals, FbxStatus* pStatus=NULL)"
  },
  {
    "label": "GetSourceMatrix()",
    "kind": "Method",
    "detail": "Function (enum EMatrixIndex { ePreGlobal,ePreTranslate,ePostTranslate,ePreRotate,ePostRotate,ePreScale,ePostScale,ePostGlobal,eScaleOffset,eInactivePre,eInactivePost,eRotationPivot,eScalingPivot,eMatrixIndexCount } ; void)",
    "insertText": "GetSourceMatrix(EMatrixIndex pIndex, FbxAMatrix& pMatrix)"
  },
  {
    "label": "SetSourceMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceMatrix(EMatrixIndex pIndex, FbxAMatrix& pMatrix)"
  },
  {
    "label": "GetDestMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDestMatrix(EMatrixIndex pIndex, FbxAMatrix& pMatrix)"
  },
  {
    "label": "SetDestMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestMatrix(EMatrixIndex pIndex, FbxAMatrix& pMatrix)"
  },
  {
    "label": "GetResamplingPeriod()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "GetResamplingPeriod()"
  },
  {
    "label": "SetResamplingPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResamplingPeriod(FbxTime& pResamplingPeriod)"
  },
  {
    "label": "GetGenerateLastKeyExactlyAtEndTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGenerateLastKeyExactlyAtEndTime()"
  },
  {
    "label": "SetGenerateLastKeyExactlyAtEndTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerateLastKeyExactlyAtEndTime(bool pFlag)"
  },
  {
    "label": "GetResamplingOnFrameRateMultiple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResamplingOnFrameRateMultiple()"
  },
  {
    "label": "SetResamplingOnFrameRateMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResamplingOnFrameRateMultiple(bool pFlag)"
  },
  {
    "label": "GetApplyUnroll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplyUnroll()"
  },
  {
    "label": "SetApplyUnroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyUnroll(bool pFlag)"
  },
  {
    "label": "GetApplyConstantKeyReducer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplyConstantKeyReducer()"
  },
  {
    "label": "SetApplyConstantKeyReducer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyConstantKeyReducer(bool pFlag)"
  },
  {
    "label": "GetResampleTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResampleTranslation()"
  },
  {
    "label": "SetResampleTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResampleTranslation(bool pFlag)"
  },
  {
    "label": "SetSrcRotateOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSrcRotateOrder(FbxEuler::EOrder pOrder)"
  },
  {
    "label": "SetDestRotateOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestRotateOrder(FbxEuler::EOrder pOrder)"
  },
  {
    "label": "SetForceApply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceApply(bool pVal)"
  },
  {
    "label": "GetForceApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceApply()"
  },
  {
    "label": "SetTranslationLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslationLimits(FbxLimits &limit)"
  },
  {
    "label": "SetRotationLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationLimits(FbxLimits &limit)"
  },
  {
    "label": "SetScalingLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalingLimits(FbxLimits &limit)"
  },
  {
    "label": "MatricesEquivalence()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : enum EAxisIndex { eX,eY,eZ,eAxisCount } ; class Cell ; bool)",
    "insertText": "MatricesEquivalence(FbxAMatrix pMatArrayA [eMatrixIndexCount], FbxAMatrix pMatArrayB [eMatrixIndexCount])"
  },
  {
    "label": "DoConvert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoConvert(FbxAnimCurve** pCurve, double pT[eAxisCount], double pR[eAxisCount], double pS[eAxisCount], FbxStatus* pStatus)"
  },
  {
    "label": "FindTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTimeInterval(FbxTime& pStart, FbxTime& pEnd, FbxAnimCurve* pTFCurve [eAxisCount], FbxAnimCurve* pRFCurve [eAxisCount], FbxAnimCurve* pSFCurve [eAxisCount])"
  },
  {
    "label": "ComputeTotalMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTotalMatrix(FbxAMatrix& pGlobal, Cell& pCell, FbxAMatrix& pTranslate, FbxAMatrix& pRotate, FbxAMatrix& pScale)"
  },
  {
    "label": "ExtractTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractTransforms(FbxVector4& pScaleVector, FbxVector4& pRotateVector, FbxVector4& pTranslateVector, FbxAMatrix& pGlobal, Cell& pDest)"
  },
  {
    "label": "SetDestFCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestFCurve(FbxAnimCurve* pCurve [eAxisCount], int pIndex, FbxTime pTime, FbxVector4 pVector, FbxAnimCurveDef::EInterpolationType pInterpMode[eAxisCount], FbxAnimCurveDef::ETangentMode pTangentMode[eAxisCount])"
  },
  {
    "label": "FillInterpAndTangeant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillInterpAndTangeant(FbxTime& pTime, FbxAnimCurve* pSourceCurve[eAxisCount], FbxAnimCurveDef::EInterpolationType* pInterp, FbxAnimCurveDef::ETangentMode* pTangeant)"
  },
  {
    "label": "SetDestFCurveTangeant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestFCurveTangeant(FbxAnimCurve* pCurve [eAxisCount], int pIndex, FbxAnimCurveDef::ETangentMode pTangentMode[eAxisCount], FbxVector4 pKeyValue, FbxVector4 pNextKeyValue)"
  }
]