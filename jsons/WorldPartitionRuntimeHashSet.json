[
  {
    "label": "UHLODLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHLODLayer"
  },
  {
    "label": "URuntimePartitionPersistent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimePartitionPersistent"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "FStreamingDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingDescriptor"
  },
  {
    "label": "FRuntimePartitionHLODSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimePartitionHLODSetup"
  },
  {
    "label": "FRuntimePartitionDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimePartitionDesc"
  },
  {
    "label": "FRuntimePartitionStreamingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimePartitionStreamingData"
  },
  {
    "label": "UWorldPartitionRuntimeHashSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeHashSet"
  },
  {
    "label": "URuntimeHashSetExternalStreamingObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeHashSetExternalStreamingObject"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "ULevelPackageDiskSizeMetric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelPackageDiskSizeMetric"
  },
  {
    "label": "UWorldPartitionRuntimeSpatialHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeSpatialHash"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "FCellUniqueId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellUniqueId"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WorldPartition / WorldPartitionRuntimeHash . h \" # include \" WorldPartition / RuntimeHashSet / RuntimePartition . h \" # include \" WorldPartition / RuntimeHashSet / StaticSpatialIndex . h \" # include \" WorldPartitionRuntimeHashSet . generated . h \" class UHLODLayer ; class URuntimePartitionPersistent ; struct FPropertyChangedChainEvent ; using FStaticSpatialIndexSorter = FStaticSpatialIndex::TNodeSorterHilbert<FStaticSpatialIndex::FSpatialIndexProfile3D,6 5 5 3 6> ; using FStaticSpatialIndexType = TStaticSpatialIndexRTree<TObjectPtr<UWorldPartitionRuntimeCell>,FStaticSpatialIndexSorter,FStaticSpatialIndex::FSpatialIndexProfile3D> ; using FStaticSpatialIndexSorter2D = FStaticSpatialIndex::TNodeSorterHilbert<FStaticSpatialIndex::FSpatialIndexProfile2D,6 5 5 3 6> ; using FStaticSpatialIndexType2D = TStaticSpatialIndexRTree<TObjectPtr<UWorldPartitionRuntimeCell>,FStaticSpatialIndexSorter2D,FStaticSpatialIndex::FSpatialIndexProfile2D> ; namespace UE::Private::WorldPartition { struct FStreamingDescriptor ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = RuntimeSettings)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = RuntimeSettings, Meta = (EditCondition = \"Class != nullptr\", HideEditConditionToggle))"
  },
  {
    "label": "UpdateHLODPartitionLayers()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateHLODPartitionLayers()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "CreatePartitionsSpatialIndex()",
    "kind": "Method",
    "detail": "Function (class URuntimeHashSetExternalStreamingObject ; UE::Private::WorldPartition::FStreamingDescriptor ; void)",
    "insertText": "CreatePartitionsSpatialIndex()"
  },
  {
    "label": "DestroyPartitionsSpatialIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPartitionsSpatialIndex()"
  },
  {
    "label": "GetLoadingRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLoadingRange()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FStaticSpatialIndexType> SpatialIndex ; TUniquePtr<FStaticSpatialIndexType2D> SpatialIndexForce2D ; TUniquePtr<FStaticSpatialIndexType2D> SpatialIndex2D ; } ; template<> struct TStructOpsTypeTraits<FRuntimePartitionStreamingData> : public TStructOpsTypeTraitsBase2<FRuntimePartitionStreamingData> { enum { WithCopy = false } ; } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static void AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (class ULevelPackageDiskSizeMetric ; class UWorldPartitionRuntimeSpatialHash ; # if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(EDuplicateMode::Type DuplicateMode)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Draw2D()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "Draw2D(FWorldPartitionDraw2DContext& DrawContext)"
  },
  {
    "label": "Draw3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw3D(const TArray<FWorldPartitionStreamingSource>& Sources)"
  },
  {
    "label": "SetDefaultValues()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetDefaultValues()"
  },
  {
    "label": "SupportsHLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsHLODs()"
  },
  {
    "label": "SetupHLODActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupHLODActors(const IStreamingGenerationContext* StreamingGenerationContext, const UWorldPartition::FSetupHLODActorsParams& Params)"
  },
  {
    "label": "GenerateStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreaming(class UWorldPartitionStreamingPolicy* StreamingPolicy, const IStreamingGenerationContext* StreamingGenerationContext, TArray<FString>* OutPackagesToGenerate)"
  },
  {
    "label": "IsValidGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGrid(FName GridName, const UClass* ActorClass)"
  },
  {
    "label": "IsValidHLODLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidHLODLayer(FName GridName, const FSoftObjectPath& HLODLayerPath)"
  },
  {
    "label": "DumpStateLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStateLog(FHierarchicalLogArchive& Ar)"
  },
  {
    "label": "ParseGridName()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ParseGridName(FName GridName, TArray<FName>& MainPartitionTokens, TArray<FName>& HLODPartitionTokens)"
  },
  {
    "label": "CreateFrom()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UWorldPartitionRuntimeHashSet*)",
    "insertText": "CreateFrom(const UWorldPartitionRuntimeHash* SrcHash)"
  },
  {
    "label": "GetExternalStreamingObjectClass()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR TSubclassOf<URuntimeHashExternalStreamingObjectBase>)",
    "insertText": "GetExternalStreamingObjectClass()"
  },
  {
    "label": "InjectExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "InjectExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "RemoveExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "ForEachStreamingCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachStreamingCells(TFunctionRef<bool(const UWorldPartitionRuntimeCell*)> Func)"
  },
  {
    "label": "ForEachStreamingCellsQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachStreamingCellsQuery(const FWorldPartitionStreamingQuerySource& QuerySource, TFunctionRef<bool(const UWorldPartitionRuntimeCell*)> Func, FWorldPartitionQueryCache* QueryCache)"
  },
  {
    "label": "ForEachStreamingCellsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachStreamingCellsSources(const TArray<FWorldPartitionStreamingSource>& Sources, TFunctionRef<bool(const UWorldPartitionRuntimeCell*, EStreamingSourceTargetState)> Func, const FWorldPartitionStreamingContext& Context = FWorldPartitionStreamingContext())"
  },
  {
    "label": "SupportsWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SupportsWorldAssetStreaming(const FName& InTargetGrid)"
  },
  {
    "label": "RegisterWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "RegisterWorldAssetStreaming(const UWorldPartition::FRegisterWorldAssetStreamingParams& InParams)"
  },
  {
    "label": "UnregisterWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterWorldAssetStreaming(const FGuid& InWorldAssetStreamingGuid)"
  },
  {
    "label": "GetWorldAssetStreamingCells()",
    "kind": "Method",
    "detail": "Function (TArray<UWorldPartitionRuntimeCell*>)",
    "insertText": "GetWorldAssetStreamingCells(const FGuid& InWorldAssetStreamingGuid)"
  },
  {
    "label": "OnBeginPlay()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBeginPlay()"
  },
  {
    "label": "HasStreamingContent()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "HasStreamingContent()"
  },
  {
    "label": "StoreStreamingContentToExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreStreamingContentToExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* OutExternalStreamingObject)"
  },
  {
    "label": "FlushStreamingContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushStreamingContent()"
  },
  {
    "label": "GenerateRuntimePartitionsStreamingDescs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateRuntimePartitionsStreamingDescs(const IStreamingGenerationContext* StreamingGenerationContext, TMap<URuntimePartition*, TArray<URuntimePartition::FCellDescInstance>>& OutRuntimeCellDescs)"
  },
  {
    "label": "GetCellUniqueId()",
    "kind": "Method",
    "detail": "Function (struct FCellUniqueId { FString Name ; FString InstanceSuffix ; FGuid Guid ; } ; FCellUniqueId)",
    "insertText": "GetCellUniqueId(const URuntimePartition::FCellDescInstance& InCellDescInstance)"
  },
  {
    "label": "ForEachStreamingData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ForEachStreamingData(TFunctionRef<bool(const FRuntimePartitionStreamingData&)> Func)"
  },
  {
    "label": "UpdateRuntimeDataGridMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRuntimeDataGridMap()"
  },
  {
    "label": "ResolveRuntimePartition()",
    "kind": "Method",
    "detail": "Function (const URuntimePartition*)",
    "insertText": "ResolveRuntimePartition(FName GridName, bool bMainPartitionLayer = false)"
  },
  {
    "label": "ResolveRuntimePartitionForHLODLayer()",
    "kind": "Method",
    "detail": "Function (const URuntimePartition*)",
    "insertText": "ResolveRuntimePartitionForHLODLayer(FName GridName, const FSoftObjectPath& HLODLayerPath)"
  }
]