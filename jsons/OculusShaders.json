[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRHISamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHISamplerState"
  },
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FOculusVertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOculusVertexShader"
  },
  {
    "label": "FOculusWhiteShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOculusWhiteShader"
  },
  {
    "label": "FOculusBlackShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOculusBlackShader"
  },
  {
    "label": "FOculusAlphaInverseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOculusAlphaInverseShader"
  },
  {
    "label": "FOculusCubemapPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOculusCubemapPS"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GlobalShader . h \" # include \" HAL / Platform . h \" # include \" RHICommandList . h \" # include \" RenderResource . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderParameterUtils . h \" # include \" ShaderParameters . h \" class FPointerTableBase ; class FRHISamplerState ; class FRHITexture ; class FTexture ; class FOculusVertexShader : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FOculusVertexShader, Global, RENDERCORE_API)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FOculusVertexShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOculusVertexShader()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FOculusWhiteShader : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FOculusWhiteShader, Global, RENDERCORE_API)"
  },
  {
    "label": "FOculusWhiteShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOculusWhiteShader()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FOculusBlackShader : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FOculusBlackShader, Global, RENDERCORE_API)"
  },
  {
    "label": "FOculusBlackShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOculusBlackShader()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FOculusAlphaInverseShader : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FOculusAlphaInverseShader, Global, RENDERCORE_API)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTexture\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTextureSampler .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTextureSampler\"))"
  },
  {
    "label": "FOculusAlphaInverseShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOculusAlphaInverseShader()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, InTexture, InTextureSampler, Texture)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, InTexture, InTextureSampler, SamplerStateRHI, TextureRHI)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FOculusCubemapPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FOculusCubemapPS, Global, RENDERCORE_API)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTextureCube\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InFaceIndexParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"CubeFaceIndex\"))"
  },
  {
    "label": "FOculusCubemapPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOculusCubemapPS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, int FaceIndex)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InFaceIndexParameter, FaceIndex)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI, int FaceIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InFaceIndexParameter)"
  }
]