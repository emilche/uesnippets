[
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "GT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GT"
  },
  {
    "label": "scc_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scc_iterator"
  },
  {
    "label": "StackElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StackElement"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "StackElement()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SCCITERATOR_H # define LLVM_ADT_SCCITERATOR_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / iterator . h \" # include<vector> namespace llvm { template<class GraphT,class GT = GraphTraits<GraphT>> class scc_iterator : public iterator_facade_base<scc_iterator<GraphT,GT>,std::forward_iterator_tag,const std::vector<GT::NodeType*>,ptrdiff_t> { typedef GT::NodeType NodeType ; typedef GT::ChildIteratorType ChildItTy ; typedef std::vector<NodeType*> SccTy ; typedef scc_iterator::reference reference ; struct StackElement { NodeType* Node ; ChildItTy NextChild ; unsigned MinVisited ;)",
    "insertText": "StackElement(NodeType *Node, const ChildItTy &Child, unsigned Min) : Node(Node), NextChild(Child), MinVisited(Min)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const StackElement &Other)"
  },
  {
    "label": "DFSVisitChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DFSVisitChildren()"
  },
  {
    "label": "GetNextSCC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNextSCC()"
  },
  {
    "label": "scc_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scc_iterator(NodeType *entryN) : visitNum(0)"
  },
  {
    "label": "DFSVisitOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DFSVisitOne(entryN)"
  },
  {
    "label": "scc_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scc_iterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : scc_iterator)",
    "insertText": "begin(const GraphT &G)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} scc_iterator)",
    "insertText": "end(const GraphT &)"
  },
  {
    "label": "isAtEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAtEnd()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CurrentSCC.empty() || VisitStack.empty())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const scc_iterator &x)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CurrentSCC.empty() && \"Dereferencing END SCC iterator!\")"
  },
  {
    "label": "ReplaceNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceNode(NodeType *Old, NodeType *New)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(nodeVisitNumbers.count(Old) && \"Old not in scc_iterator?\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (nodeVisitNumbers [ New ] = nodeVisitNumbers [ Old ] ; nodeVisitNumbers .)",
    "insertText": "erase(Old)"
  },
  {
    "label": "DFSVisitOne()",
    "kind": "Method",
    "detail": "Function (} } ; template<class GraphT,class GT> void scc_iterator<GraphT,GT)",
    "insertText": "DFSVisitOne(NodeType *N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (+ + visitNum ; nodeVisitNumbers [ N ] = visitNum ; SCCNodeStack .)",
    "insertText": "push_back(N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "push_back(StackElement(N, GT::child_begin(N), visitNum))"
  },
  {
    "label": "dbgs()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "dbgs()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!VisitStack.empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (NodeType* childN =* VisitStack .)",
    "insertText": "back()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<NodeType*,unsigned>::iterator Visited = nodeVisitNumbers .)",
    "insertText": "find(childN)"
  },
  {
    "label": "DFSVisitOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DFSVisitOne(childN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } unsigned childNum = Visited -> second ;)",
    "insertText": "if(VisitStack.back().MinVisited > childNum) VisitStack.back()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (CurrentSCC .)",
    "insertText": "clear()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(VisitStack.back().NextChild == GT::child_end(visitingN))"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Node visit num = \"<<nodeVisitNumbers [ visitingN ]<<\" \\ n \" ; # endif)",
    "insertText": "if(minVisitNum != nodeVisitNumbers[visitingN])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(CurrentSCC.back() != visitingN)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (NodeType* N = CurrentSCC .)",
    "insertText": "front()"
  },
  {
    "label": "scc_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> scc_iterator<T>)",
    "insertText": "scc_end(const T &G)"
  },
  {
    "label": "scc_begin()",
    "kind": "Method",
    "detail": "Function (} template<class T> scc_iterator<Inverse<T>>)",
    "insertText": "scc_begin(const Inverse<T> &G)"
  },
  {
    "label": "scc_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> scc_iterator<Inverse<T>>)",
    "insertText": "scc_end(const Inverse<T> &G)"
  }
]