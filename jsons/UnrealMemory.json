[
  {
    "label": "FScopedMallocTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedMallocTimer"
  },
  {
    "label": "FMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemory"
  },
  {
    "label": "AllocationHints",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AllocationHints"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DoGamethreadHook()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformMemory . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformMemory . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" Templates / IsPointer . h \" # ifndef UE_USE_VERYLARGEPAGEALLOCATOR # define UE_USE_VERYLARGEPAGEALLOCATOR 0 # endif # ifndef UE_ALLOW_OSMEMORYLOCKFREE # define UE_ALLOW_OSMEMORYLOCKFREE 0 # endif # if STATS # define MALLOC_GT_HOOKS 1 # else # define MALLOC_GT_HOOKS 0 # endif # if MALLOC_GT_HOOKS void)",
    "insertText": "DoGamethreadHook(int32 Index)"
  },
  {
    "label": "TIME_MALLOC()",
    "kind": "Method",
    "detail": "Function (} # endif # define)",
    "insertText": "TIME_MALLOC(0)"
  },
  {
    "label": "FScopedMallocTimer()",
    "kind": "Method",
    "detail": "Function (uint64 GTotalCycles [ 4 ] ; uint64 GTotalCount [ 4 ] ; uint64 GTotalMisses [ 4 ] ; int32 Index ; uint64 Cycles ;)",
    "insertText": "FScopedMallocTimer(int32 InIndex) : Index(InIndex) , Cycles(FPlatformTime::Cycles64())"
  },
  {
    "label": "FScopedMallocTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedMallocTimer()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 Add =)",
    "insertText": "uint64(FPlatformTime::Cycles64() - Cycles)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd((volatile int64*)&GTotalCycles[Index], Add)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (uint64 Was =)",
    "insertText": "InterlockedAdd((volatile int64*)&GTotalCount[Index], 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool GIsRunning ;)",
    "insertText": "if(GIsRunning && Index == 1 && (Was & 0xffff) == 0)"
  },
  {
    "label": "Spew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Spew()"
  },
  {
    "label": "Miss()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Miss(int32 InIndex)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd((volatile int64*)&GTotalMisses[InIndex], 1)"
  },
  {
    "label": "FScopedMallocTimer()",
    "kind": "Method",
    "detail": "Function (} ; # else struct FScopedMallocTimer {)",
    "insertText": "FScopedMallocTimer(int32 InIndex)"
  },
  {
    "label": "Hit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Hit(int32 InIndex)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FMemory { enum AllocationHints { None = - 1,Default,Temporary,SmallPool,Max } ; void*)",
    "insertText": "Memmove(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "Memcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Memcmp(const void* Buf1, const void* Buf2, SIZE_T Count)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memset(void* Dest, uint8 Char, SIZE_T Count)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "Memset(T& Src, uint8 ValueToSet)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&Src, ValueToSet, sizeof( T ))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memzero(void* Dest, SIZE_T Count)"
  },
  {
    "label": "MemIsZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MemIsZero(const void* Ptr, SIZE_T Count)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Start(uint8*)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint8* End = Start + Count ;)",
    "insertText": "while(Start < End)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(&Src, sizeof( T ))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "Memcpy(T& Dest, const T& Src)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&Dest, &Src, sizeof( T ))"
  },
  {
    "label": "BigBlockMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "BigBlockMemcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "StreamingMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "StreamingMemcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "ParallelMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "ParallelMemcpy(void* Dest, const void* Src, SIZE_T Count, EMemcpyCachePolicy Policy = EMemcpyCachePolicy::StoreCached)"
  },
  {
    "label": "Memswap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Memswap(void* Ptr1, void* Ptr2, SIZE_T Size)"
  },
  {
    "label": "Memswap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memswap(Ptr1,Ptr2,Size)"
  },
  {
    "label": "UE_ALLOCATION_FUNCTION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOCATION_FUNCTION(1) static FORCEINLINE void* SystemMalloc(SIZE_T Size)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (void* Ptr)",
    "insertText": "malloc(Size)"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(uint64(Ptr), Size, 0, EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64(Ptr), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(Ptr)"
  },
  {
    "label": "UE_ALLOCATION_FUNCTION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOCATION_FUNCTION(1, 2) static CORE_API void* Malloc(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "UE_ALLOCATION_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_ALLOCATION_FUNCTION(2, 3) static CORE_API void* Realloc(void* Original, SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Original)"
  },
  {
    "label": "GetAllocSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocSize(void* Original)"
  },
  {
    "label": "UE_ALLOCATION_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_ALLOCATION_FUNCTION(1, 2) static CORE_API void* MallocZeroed(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim(bool bTrimThreadCaches = true)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "TestMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestMemory()"
  },
  {
    "label": "EnablePurgatoryTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePurgatoryTests()"
  },
  {
    "label": "EnablePoisonTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePoisonTests()"
  },
  {
    "label": "ExplicitInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExplicitInit(FMalloc& Allocator)"
  },
  {
    "label": "GCreateMalloc()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GCreateMalloc()"
  },
  {
    "label": "MallocExternal()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "MallocExternal(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "ReallocExternal()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ReallocExternal(void* Original, SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "FreeExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeExternal(void* Original)"
  },
  {
    "label": "GetAllocSizeExternal()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocSizeExternal(void* Original)"
  },
  {
    "label": "MallocZeroedExternal()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "MallocZeroedExternal(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "QuantizeSizeExternal()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "QuantizeSizeExternal(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  }
]