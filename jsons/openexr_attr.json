[
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENEXR_ATTR_H # define OPENEXR_ATTR_H # include \" openexr_context . h \" # include<stddef . h> # include<stdint . h> # ifdef __cplusplus \" C \" { # endif typedef enum { EXR_COMPRESSION_NONE = 0,EXR_COMPRESSION_RLE = 1,EXR_COMPRESSION_ZIPS = 2,EXR_COMPRESSION_ZIP = 3,EXR_COMPRESSION_PIZ = 4,EXR_COMPRESSION_PXR24 = 5,EXR_COMPRESSION_B44 = 6,EXR_COMPRESSION_B44A = 7,EXR_COMPRESSION_DWAA = 8,EXR_COMPRESSION_DWAB = 9,EXR_COMPRESSION_LAST_TYPE } exr_compression_t ; typedef enum { EXR_ENVMAP_LATLONG = 0,EXR_ENVMAP_CUBE = 1,EXR_ENVMAP_LAST_TYPE } exr_envmap_t ; typedef enum { EXR_LINEORDER_INCREASING_Y = 0,EXR_LINEORDER_DECREASING_Y = 1,EXR_LINEORDER_RANDOM_Y = 2,EXR_LINEORDER_LAST_TYPE } exr_lineorder_t ; typedef enum { EXR_STORAGE_SCANLINE = 0,EXR_STORAGE_TILED,EXR_STORAGE_DEEP_SCANLINE,EXR_STORAGE_DEEP_TILED,EXR_STORAGE_LAST_TYPE } exr_storage_t ; typedef enum { EXR_TILE_ONE_LEVEL = 0,EXR_TILE_MIPMAP_LEVELS = 1,EXR_TILE_RIPMAP_LEVELS = 2,EXR_TILE_LAST_TYPE } exr_tile_level_mode_t ; typedef enum { EXR_TILE_ROUND_DOWN = 0,EXR_TILE_ROUND_UP = 1,EXR_TILE_ROUND_LAST_TYPE } exr_tile_round_mode_t ; typedef enum { EXR_PIXEL_UINT = 0,EXR_PIXEL_HALF = 1,EXR_PIXEL_FLOAT = 2,EXR_PIXEL_LAST_TYPE } exr_pixel_type_t ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "EXR_GET_TILE_LEVEL_MODE()",
    "kind": "Method",
    "detail": "Function (float red_x ; float red_y ; float green_x ; float green_y ; float blue_x ; float blue_y ; float white_x ; float white_y ; } exr_attr_chromaticities_t ; typedef struct { int32_t film_mfc_code ; int32_t film_type ; int32_t prefix ; int32_t count ; int32_t perf_offset ; int32_t perfs_per_frame ; int32_t perfs_per_count ; } exr_attr_keycode_t ; typedef struct { float m [ 9 ] ; } exr_attr_m33f_t ; typedef struct { double m [ 9 ] ; } exr_attr_m33d_t ; typedef struct { float m [ 1 6 ] ; } exr_attr_m44f_t ; typedef struct { double m [ 1 6 ] ; } exr_attr_m44d_t ; typedef struct { int32_t num ; uint32_t denom ; } exr_attr_rational_t ; typedef struct { uint32_t time_and_flags ; uint32_t user_data ; } exr_attr_timecode_t ; typedef struct { union { struct { int32_t x,y ; } ; int32_t arr [ 2 ] ; } ; } exr_attr_v2i_t ; typedef struct { union { struct { float x,y ; } ; float arr [ 2 ] ; } ; } exr_attr_v2f_t ; typedef struct { union { struct { double x,y ; } ; double arr [ 2 ] ; } ; } exr_attr_v2d_t ; typedef struct { union { struct { int32_t x,y,z ; } ; int32_t arr [ 3 ] ; } ; } exr_attr_v3i_t ; typedef struct { union { struct { float x,y,z ; } ; float arr [ 3 ] ; } ; } exr_attr_v3f_t ; typedef struct { union { struct { double x,y,z ; } ; double arr [ 3 ] ; } ; } exr_attr_v3d_t ; typedef struct { exr_attr_v2i_t min ; exr_attr_v2i_t max ; } exr_attr_box2i_t ; typedef struct { exr_attr_v2f_t min ; exr_attr_v2f_t max ; } exr_attr_box2f_t ; typedef struct { uint32_t x_size ; uint32_t y_size ; uint8_t level_and_round ; } exr_attr_tiledesc_t ; # define)",
    "insertText": "EXR_GET_TILE_LEVEL_MODE(tiledesc) \\ ((exr_tile_level_mode_t) (((tiledesc).level_and_round) & 0xF)) #define EXR_GET_TILE_ROUND_MODE(tiledesc) \\ ((exr_tile_round_mode_t) ((((tiledesc).level_and_round) >> 4) & 0xF)) #define EXR_PACK_TILE_LEVEL_ROUND(lvl, mode) \\ ((uint8_t) ((((uint8_t) ((mode) &0xF) << 4)) | ((uint8_t) ((lvl) &0xF)))) #pragma pack(pop)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (int32_t length ; int32_t alloc_size ; const char* str ; } exr_attr_string_t ; typedef struct { int32_t n_strings ; int32_t alloc_size ; const exr_attr_string_t* strings ; } exr_attr_string_vector_t ; typedef struct { int32_t length ; int32_t alloc_size ; const float* arr ; } exr_attr_float_vector_t ; typedef enum { EXR_PERCEPTUALLY_LOGARITHMIC = 0,EXR_PERCEPTUALLY_LINEAR = 1 } exr_perceptual_treatment_t ; typedef struct { exr_attr_string_t name ; exr_pixel_type_t pixel_type ; uint8_t p_linear ; uint8_t reserved [ 3 ] ; int32_t x_sampling ; int32_t y_sampling ; } exr_attr_chlist_entry_t ; typedef struct { int num_channels ; int num_alloced ; const exr_attr_chlist_entry_t* entries ; } exr_attr_chlist_t ; typedef struct { uint32_t width ; uint32_t height ; size_t alloc_size ; const uint8_t* rgba ; } exr_attr_preview_t ; typedef struct { int32_t size ; int32_t unpacked_size ; int32_t packed_alloc_size ; uint8_t pad [ 4 ] ; void* packed_data ; void* unpacked_data ;)",
    "insertText": "exr_result_t(*unpack_func_ptr) ( exr_context_t ctxt, const void* data, int32_t attrsize, int32_t* outsize, void** outbuffer)"
  },
  {
    "label": "exr_result_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exr_result_t(*pack_func_ptr) ( exr_context_t ctxt, const void* data, int32_t datasize, int32_t* outsize, void* outbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*destroy_unpacked_func_ptr) ( exr_context_t ctxt, void* data, int32_t attrsize)"
  }
]