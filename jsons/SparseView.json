[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SparseView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseView"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEVIEW_H # define EIGEN_SPARSEVIEW_H namespace Eigen { namespace internal { template<MatrixType> struct traits<SparseView<MatrixType>> : traits<MatrixType> { typedef MatrixType::StorageIndex StorageIndex ; typedef Sparse StorageKind ; enum { Flags =)",
    "insertText": "int(traits<MatrixType>::Flags) & (RowMajorBit)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<MatrixType> class SparseView : public SparseMatrixBase<SparseView<MatrixType>> { typedef MatrixType::Nested MatrixTypeNested ; typedef internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested ; typedef SparseMatrixBase<SparseView> Base ; public :)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(SparseView)"
  },
  {
    "label": "SparseView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SparseView(const MatrixType& mat, const Scalar& reference = Scalar(0), const RealScalar &epsilon = NumTraits<Scalar>::dummy_precision()) : m_matrix(mat), m_reference(reference), m_epsilon(epsilon)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "innerSize()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outerSize()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} const internal::remove_all<MatrixTypeNested>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "incrementToNonZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementToNonZero()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} } } ; enum { CoeffReadCost = evaluator<ArgType>::CoeffReadCost,Flags = XprType::Flags } ;)",
    "insertText": "unary_evaluator(const XprType& xpr) : m_argImpl(xpr.nestedExpression()), m_view(xpr)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} protected : evaluator<ArgType> m_argImpl ; const XprType& m_view ; } ; template<ArgType> struct unary_evaluator<SparseView<ArgType>,IndexBased> : public evaluator_base<SparseView<ArgType>> { public : typedef SparseView<ArgType> XprType ; protected : enum {)",
    "insertText": "IsRowMajor(XprType::Flags&RowMajorBit)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (typedef XprType::Scalar Scalar ; typedef XprType::StorageIndex StorageIndex ; public : class InnerIterator { public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const unary_evaluator& sve, Index outer) : m_sve(sve), m_inner(0), m_outer(outer), m_end(sve.m_view.innerSize())"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE StorageIndex)",
    "insertText": "index()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "sparseView()",
    "kind": "Method",
    "detail": "Function (} protected : evaluator<ArgType> m_argImpl ; const XprType& m_view ; } ; } template<Derived> const SparseView<Derived> MatrixBase<Derived)",
    "insertText": "sparseView(const Scalar& reference, const typename NumTraits<Scalar>::Real& epsilon)"
  },
  {
    "label": "pruned()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const SparseView<Derived> SparseMatrixBase<Derived)",
    "insertText": "pruned(const Scalar& reference, const RealScalar& epsilon)"
  }
]