[
  {
    "label": "AddressSpaceStatsDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddressSpaceStatsDumper"
  },
  {
    "label": "AddressSpaceStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddressSpaceStats"
  },
  {
    "label": "PoolStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PoolStats"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "AddressPoolManagerForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddressPoolManagerForTesting"
  },
  {
    "label": "Pool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pool"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_POOL_MANAGER_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_POOL_MANAGER_H_ # include<bitset> # include<limits> # include \" base / allocator / partition_allocator / address_pool_manager_bitmap . h \" # include \" base / allocator / partition_allocator / address_pool_manager_types . h \" # include \" base / allocator / partition_allocator / partition_address_space . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_lock . h \" # include \" build / build_config . h \" namespace partition_alloc { class AddressSpaceStatsDumper ; struct AddressSpaceStats ; struct PoolStats ; } namespace partition_alloc::internal { class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (public : AddressPoolManager&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "AddressPoolManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddressPoolManager(const AddressPoolManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AddressPoolManager&)",
    "insertText": "operator(const AddressPoolManager&)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) void Add(pool_handle handle, uintptr_t address, size_t length)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(pool_handle handle)"
  },
  {
    "label": "GetPoolUsedSuperPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoolUsedSuperPages(pool_handle handle, std::bitset<kMaxSuperPagesInPool>& used)"
  },
  {
    "label": "GetPoolBaseAddress()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetPoolBaseAddress(pool_handle handle)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (# endif uintptr_t)",
    "insertText": "Reserve(pool_handle handle, uintptr_t requested_address, size_t length)"
  },
  {
    "label": "UnreserveAndDecommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnreserveAndDecommit(pool_handle handle, uintptr_t address, size_t length)"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) void MarkUsed(pool_handle handle, uintptr_t address, size_t size)"
  },
  {
    "label": "MarkUnused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkUnused(pool_handle handle, uintptr_t address, size_t size)"
  },
  {
    "label": "IsManagedByRegularPool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsManagedByRegularPool(uintptr_t address)"
  },
  {
    "label": "IsManagedByBRPPool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsManagedByBRPPool(uintptr_t address)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DumpStats(AddressSpaceStatsDumper* dumper)"
  },
  {
    "label": "AddressPoolManager()",
    "kind": "Method",
    "detail": "Function (private : class AddressPoolManagerForTesting ;)",
    "insertText": "AddressPoolManager()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(AddressSpaceStats* stats)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "Pool()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Pool()"
  },
  {
    "label": "Pool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pool(const Pool&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Pool&)",
    "insertText": "operator(const Pool&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(uintptr_t ptr, size_t length)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FindChunk()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "FindChunk(size_t size)"
  },
  {
    "label": "FreeChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeChunk(uintptr_t address, size_t size)"
  },
  {
    "label": "TryReserveChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReserveChunk(uintptr_t address, size_t size)"
  },
  {
    "label": "GetUsedSuperPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedSuperPages(std::bitset<kMaxSuperPagesInPool>& used)"
  },
  {
    "label": "GetBaseAddress()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetBaseAddress()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(PoolStats* stats)"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Lock lock_ ; std::bitset<kMaxSuperPagesInPool> alloc_bitset_)",
    "insertText": "PA_GUARDED_BY(lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (size_t total_bits_ = 0 ; uintptr_t address_begin_ = 0 ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (# endif } ; PA_ALWAYS_INLINE Pool*)",
    "insertText": "GetPool(pool_handle handle)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(0 < handle && handle <= kNumPools)"
  }
]