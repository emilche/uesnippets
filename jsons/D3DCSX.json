[
  {
    "label": "D3DX11_SCAN_DATA_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_SCAN_DATA_TYPE"
  },
  {
    "label": "D3DX11_SCAN_OPCODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_SCAN_OPCODE"
  },
  {
    "label": "D3DX11_SCAN_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_SCAN_DIRECTION"
  },
  {
    "label": "D3DX11_FFT_DATA_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_FFT_DATA_TYPE"
  },
  {
    "label": "D3DX11_FFT_DIM_MASK",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_FFT_DIM_MASK"
  },
  {
    "label": "D3DX11_FFT_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D3DX11_FFT_DESC"
  },
  {
    "label": "D3DX11_FFT_BUFFER_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D3DX11_FFT_BUFFER_INFO"
  },
  {
    "label": "D3DX11_FFT_CREATE_FLAG",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "D3DX11_FFT_CREATE_FLAG"
  },
  {
    "label": "DEFINE_GUID()",
    "kind": "Method",
    "detail": "Function (# include \" d3dx11 . h \" # ifndef __D3DX11GPGPU_H__ # define __D3DX11GPGPU_H__ # define D3DCSX_DLL_W L \" d3dcsx_43 . dll \" # define D3DCSX_DLL_A \" d3dcsx_43 . dll \" # ifdef UNICODE # define D3DCSX_DLL D3DCSX_DLL_W # else # define D3DCSX_DLL D3DCSX_DLL_A # endif # ifdef __cplusplus \" C \" { # endif typedef enum D3DX11_SCAN_DATA_TYPE { D3DX11_SCAN_DATA_TYPE_FLOAT = 1,D3DX11_SCAN_DATA_TYPE_INT,D3DX11_SCAN_DATA_TYPE_UINT,} D3DX11_SCAN_DATA_TYPE ; typedef enum D3DX11_SCAN_OPCODE { D3DX11_SCAN_OPCODE_ADD = 1,D3DX11_SCAN_OPCODE_MIN,D3DX11_SCAN_OPCODE_MAX,D3DX11_SCAN_OPCODE_MUL,D3DX11_SCAN_OPCODE_AND,D3DX11_SCAN_OPCODE_OR,D3DX11_SCAN_OPCODE_XOR,} D3DX11_SCAN_OPCODE ; typedef enum D3DX11_SCAN_DIRECTION { D3DX11_SCAN_DIRECTION_FORWARD = 1,D3DX11_SCAN_DIRECTION_BACKWARD,} D3DX11_SCAN_DIRECTION ;)",
    "insertText": "DEFINE_GUID(IID_ID3DX11Scan, 0x5089b68f, 0xe71d, 0x4d38, 0xbe, 0x8e, 0xf3, 0x63, 0xb9, 0x5a, 0x94, 0x05)"
  },
  {
    "label": "DECLARE_INTERFACE_()",
    "kind": "Method",
    "detail": "Function (# undef INTERFACE # define INTERFACE ID3DX11Scan)",
    "insertText": "DECLARE_INTERFACE_(ID3DX11Scan, IUnknown)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(ULONG, AddRef)(THIS)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(ULONG, Release)(THIS)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetScanDirection)(THIS_ D3DX11_SCAN_DIRECTION Direction)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Scan)( THIS_ D3DX11_SCAN_DATA_TYPE ElementType, D3DX11_SCAN_OPCODE OpCode, UINT ElementScanSize, __in ID3D11UnorderedAccessView* pSrc, __in ID3D11UnorderedAccessView* pDst)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Multiscan)( THIS_ D3DX11_SCAN_DATA_TYPE ElementType, D3DX11_SCAN_OPCODE OpCode, UINT ElementScanSize, UINT ElementScanPitch, UINT ScanCount, __in ID3D11UnorderedAccessView* pSrc, __in ID3D11UnorderedAccessView* pDst)"
  },
  {
    "label": "D3DX11CreateScan()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT WINAPI)",
    "insertText": "D3DX11CreateScan(__in ID3D11DeviceContext* pDeviceContext, UINT MaxElementScanSize, UINT MaxScanCount, __out ID3DX11Scan** ppScan)"
  },
  {
    "label": "DEFINE_GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_GUID(IID_ID3DX11SegmentedScan, 0xa915128c, 0xd954, 0x4c79, 0xbf, 0xe1, 0x64, 0xdb, 0x92, 0x31, 0x94, 0xd6)"
  },
  {
    "label": "DECLARE_INTERFACE_()",
    "kind": "Method",
    "detail": "Function (# undef INTERFACE # define INTERFACE ID3DX11SegmentedScan)",
    "insertText": "DECLARE_INTERFACE_(ID3DX11SegmentedScan, IUnknown)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SegScan)( THIS_ D3DX11_SCAN_DATA_TYPE ElementType, D3DX11_SCAN_OPCODE OpCode, UINT ElementScanSize, __in_opt ID3D11UnorderedAccessView* pSrc, __in ID3D11UnorderedAccessView* pSrcElementFlags, __in ID3D11UnorderedAccessView* pDst)"
  },
  {
    "label": "D3DX11CreateSegmentedScan()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT WINAPI)",
    "insertText": "D3DX11CreateSegmentedScan(__in ID3D11DeviceContext* pDeviceContext, UINT MaxElementScanSize, __out ID3DX11SegmentedScan** ppScan)"
  },
  {
    "label": "DEFINE_GUID()",
    "kind": "Method",
    "detail": "Function (# define D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS 4 # define D3DX11_FFT_MAX_TEMP_BUFFERS 4 # define D3DX11_FFT_MAX_DIMENSIONS 3 2)",
    "insertText": "DEFINE_GUID(IID_ID3DX11FFT, 0xb3f7a938, 0x4c93, 0x4310, 0xa6, 0x75, 0xb3, 0x0d, 0x6d, 0xe5, 0x05, 0x53)"
  },
  {
    "label": "DECLARE_INTERFACE_()",
    "kind": "Method",
    "detail": "Function (# undef INTERFACE # define INTERFACE ID3DX11FFT)",
    "insertText": "DECLARE_INTERFACE_(ID3DX11FFT, IUnknown)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetForwardScale)(THIS_ FLOAT ForwardScale)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetForwardScale)(THIS)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetInverseScale)(THIS_ FLOAT InverseScale)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetInverseScale)(THIS)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AttachBuffersAndPrecompute)( THIS_ __in_range(0,D3DX11_FFT_MAX_TEMP_BUFFERS) UINT NumTempBuffers, __in_ecount(NumTempBuffers) ID3D11UnorderedAccessView*const* ppTempBuffers, __in_range(0,D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS) UINT NumPrecomputeBuffers, __in_ecount(NumPrecomputeBuffers) ID3D11UnorderedAccessView*const* ppPrecomputeBufferSizes)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ForwardTransform)( THIS_ __in const ID3D11UnorderedAccessView* pInputBuffer, __inout ID3D11UnorderedAccessView** ppOutputBuffer)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(InverseTransform)( THIS_ __in const ID3D11UnorderedAccessView* pInputBuffer, __inout ID3D11UnorderedAccessView** ppOutputBuffer)"
  },
  {
    "label": "__range()",
    "kind": "Method",
    "detail": "Function (} ; typedef enum D3DX11_FFT_DATA_TYPE { D3DX11_FFT_DATA_TYPE_REAL,D3DX11_FFT_DATA_TYPE_COMPLEX,} D3DX11_FFT_DATA_TYPE ; typedef enum D3DX11_FFT_DIM_MASK { D3DX11_FFT_DIM_MASK_1D = 0 x1,D3DX11_FFT_DIM_MASK_2D = 0 x3,D3DX11_FFT_DIM_MASK_3D = 0 x7,} D3DX11_FFT_DIM_MASK ; typedef struct D3DX11_FFT_DESC { UINT NumDimensions ; UINT ElementLengths [ D3DX11_FFT_MAX_DIMENSIONS ] ; UINT DimensionMask ; D3DX11_FFT_DATA_TYPE Type ; } D3DX11_FFT_DESC ; typedef struct D3DX11_FFT_BUFFER_INFO {)",
    "insertText": "__range(0,D3DX11_FFT_MAX_TEMP_BUFFERS)"
  },
  {
    "label": "__range()",
    "kind": "Method",
    "detail": "Function (UINT TempBufferFloatSizes [ D3DX11_FFT_MAX_TEMP_BUFFERS ] ;)",
    "insertText": "__range(0,D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS)"
  },
  {
    "label": "D3DX11CreateFFT()",
    "kind": "Method",
    "detail": "Function (UINT PrecomputeBufferFloatSizes [ D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS ] ; } D3DX11_FFT_BUFFER_INFO ; typedef enum D3DX11_FFT_CREATE_FLAG { D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS = 0 x01L,} D3DX11_FFT_CREATE_FLAG ; HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT(ID3D11DeviceContext* pDeviceContext, __in const D3DX11_FFT_DESC* pDesc, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT1DReal()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT1DReal(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT1DComplex()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT1DComplex(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT2DReal()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT2DReal(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Y, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT2DComplex()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT2DComplex(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Y, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT3DReal()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT3DReal(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Y, UINT Z, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  },
  {
    "label": "D3DX11CreateFFT3DComplex()",
    "kind": "Method",
    "detail": "Function (HRESULT WINAPI)",
    "insertText": "D3DX11CreateFFT3DComplex(ID3D11DeviceContext* pDeviceContext, UINT X, UINT Y, UINT Z, UINT Flags, __out D3DX11_FFT_BUFFER_INFO* pBufferInfo, __out ID3DX11FFT** ppFFT)"
  }
]