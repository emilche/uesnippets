[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Gen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Gen"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_SAMPLE_H # define _LIBCPP___ALGORITHM_RANGES_SAMPLE_H # include<__algorithm / iterator_operations . h> # include<__algorithm / sample . h> # include<__algorithm / uniform_random_bit_generator_adaptor . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__random / uniform_random_bit_generator . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__utility / forward . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (namespace __sample { struct __fn { template<input_iterator _Iter,sentinel_for<_Iter> _Sent,weakly_incrementable _OutIter,class _Gen>)",
    "insertText": "requires(forward_iterator<_Iter> || random_access_iterator<_OutIter>) && indirectly_copyable<_Iter, _OutIter> && uniform_random_bit_generator<remove_reference_t<_Gen>> _LIBCPP_HIDE_FROM_ABI _OutIter operator()(_Iter __first, _Sent __last, _OutIter __out_first, iter_difference_t<_Iter> __n, _Gen&& __gen)"
  },
  {
    "label": "__adapted_gen()",
    "kind": "Method",
    "detail": "Function (_ClassicGenAdaptor<_Gen>)",
    "insertText": "__adapted_gen(__gen)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,weakly_incrementable _OutIter,class _Gen>)",
    "insertText": "requires(forward_range<_Range> || random_access_iterator<_OutIter>) && indirectly_copyable<iterator_t<_Range>, _OutIter> && uniform_random_bit_generator<remove_reference_t<_Gen>> _LIBCPP_HIDE_FROM_ABI _OutIter operator()(_Range&& __range, _OutIter __out_first, range_difference_t<_Range> __n, _Gen&& __gen)"
  }
]