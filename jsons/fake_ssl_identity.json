[
  {
    "label": "FakeSSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeSSLCertificate"
  },
  {
    "label": "FakeSSLIdentity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeSSLIdentity"
  },
  {
    "label": "FakeSSLCertificate()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FAKE_SSL_IDENTITY_H_ # define RTC_BASE_FAKE_SSL_IDENTITY_H_ # include<memory> # include<vector> # include \" absl / strings / string_view . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" namespace rtc { class FakeSSLCertificate : public SSLCertificate { public :)",
    "insertText": "FakeSSLCertificate(absl::string_view pem_string)"
  },
  {
    "label": "FakeSSLCertificate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeSSLCertificate(const FakeSSLCertificate&)"
  },
  {
    "label": "FakeSSLCertificate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeSSLCertificate()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertificate>)",
    "insertText": "Clone()"
  },
  {
    "label": "ToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToPEMString()"
  },
  {
    "label": "ToDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDER(Buffer* der_buffer)"
  },
  {
    "label": "CertificateExpirationTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "CertificateExpirationTime()"
  },
  {
    "label": "GetSignatureDigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSignatureDigestAlgorithm(std::string* algorithm)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "SetCertificateExpirationTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCertificateExpirationTime(int64_t expiration_time)"
  },
  {
    "label": "set_digest_algorithm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_digest_algorithm(absl::string_view algorithm)"
  },
  {
    "label": "FakeSSLIdentity()",
    "kind": "Method",
    "detail": "Function (private : std::string pem_string_ ; std::string digest_algorithm_ ; int64_t expiration_time_ ; } ; class FakeSSLIdentity : public SSLIdentity { public :)",
    "insertText": "FakeSSLIdentity(absl::string_view pem_string)"
  },
  {
    "label": "FakeSSLIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeSSLIdentity(const std::vector<std::string>& pem_strings)"
  },
  {
    "label": "FakeSSLIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeSSLIdentity(const FakeSSLCertificate& cert)"
  },
  {
    "label": "FakeSSLIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeSSLIdentity(const FakeSSLIdentity& o)"
  },
  {
    "label": "FakeSSLIdentity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeSSLIdentity()"
  },
  {
    "label": "certificate()",
    "kind": "Method",
    "detail": "Function (const SSLCertificate&)",
    "insertText": "certificate()"
  },
  {
    "label": "cert_chain()",
    "kind": "Method",
    "detail": "Function (const SSLCertChain&)",
    "insertText": "cert_chain()"
  },
  {
    "label": "PrivateKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PrivateKeyToPEMString()"
  },
  {
    "label": "PublicKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PublicKeyToPEMString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SSLIdentity& other)"
  },
  {
    "label": "CloneInternal()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<SSLIdentity>)",
    "insertText": "CloneInternal()"
  }
]