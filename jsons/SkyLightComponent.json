[
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "FSkyTextureCubeResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyTextureCubeResource"
  },
  {
    "label": "ESkyLightSourceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESkyLightSourceType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "EOcclusionCombineMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOcclusionCombineMode"
  },
  {
    "label": "FPrecomputedSkyLightInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrecomputedSkyLightInstanceData"
  },
  {
    "label": "FSkyTextureCubeResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" RenderCommandFence . h \" # include \" RenderResource . h \" # include \" RenderingThread . h \" # include \" Components / LightComponentBase . h \" # include \" Math / SHMath . h \" # include \" RenderDeferredCleanup . h \" # include \" SkyLightComponent . generated . h \" class FSkyLightSceneProxy ; class UTextureCube ; class FSkyTextureCubeResource : public FTexture,private FDeferredCleanupInterface { public :)",
    "insertText": "FSkyTextureCubeResource() : Size(0), NumMips(0), Format(PF_Unknown), TextureCubeRHI(NULL), NumRefs(0)"
  },
  {
    "label": "FSkyTextureCubeResource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSkyTextureCubeResource()"
  },
  {
    "label": "SetupParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupParameters(int32 InSize, int32 InNumMips, EPixelFormat InFormat)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (Size = InSize ; NumMips = InNumMips ; Format = InFormat ; } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (TextureCubeRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (NumRefs + + ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (private : int32 Size ; int32 NumMips ; EPixelFormat Format ; FTextureRHIRef TextureCubeRHI ; int32 NumRefs ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (SLS_CapturedScene,SLS_SpecifiedCubemap,SLS_MAX,} ; enum class ESkyLightCaptureStatus { SLCS_Uninitialized,SLCS_CapturedButIncomplete,SLCS_CapturedAndComplete,} ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=Lights, HideCategories=(Trigger,Activation,\"Components|Activation\",Physics), meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Light)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (class FSkyLightSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FPrecomputedSkyLightInstanceData* ComponentInstanceData)"
  },
  {
    "label": "UpdateSkyCaptureContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkyCaptureContents(UWorld* WorldToUpdate)"
  },
  {
    "label": "UpdateSkyCaptureContentsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkyCaptureContentsArray(UWorld* WorldToUpdate, TArray<USkyLightComponent*>& ComponentArray, bool bBlendSources)"
  },
  {
    "label": "CaptureEmissiveRadianceEnvironmentCubeMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureEmissiveRadianceEnvironmentCubeMap(FSHVectorRGB3& OutIrradianceMap, TArray<FFloat16Color>& OutRadianceMap)"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnVisibilityChanged()"
  },
  {
    "label": "SetCaptureIsDirty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCaptureIsDirty()"
  },
  {
    "label": "SetBlendDestinationCaptureIsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendDestinationCaptureIsDirty()"
  },
  {
    "label": "SanitizeCubemapSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeCubemapSize()"
  },
  {
    "label": "IsOcclusionSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOcclusionSupported()"
  },
  {
    "label": "SetRealTimeCaptureEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRealTimeCaptureEnabled(bool bNewRealTimeCaptureEnabled)"
  },
  {
    "label": "IsRealTimeCaptureEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealTimeCaptureEnabled()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetProcessedSkyTexture()",
    "kind": "Method",
    "detail": "Function (const FTexture*)",
    "insertText": "GetProcessedSkyTexture()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FSkyTextureCubeResource> BlendDestinationProcessedSkyTexture ; FSHVectorRGB3 BlendDestinationIrradianceEnvironmentMap ; float BlendDestinationAverageBrightness ; FLinearColor SpecifiedCubemapColorScale ; FRenderCommandFence IrradianceMapFence ; FRenderCommandFence ReleaseResourcesFence ; FSkyLightSceneProxy* SceneProxy ; TArray<USkyLightComponent*> SkyCapturesToUpdate ; TArray<USkyLightComponent*> SkyCapturesToUpdateBlendDestinations ; FCriticalSection SkyCapturesToUpdateLock ; void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "UpdateLimitedRenderingStateFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLimitedRenderingStateFast()"
  },
  {
    "label": "UpdateOcclusionRenderingStateFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOcclusionRenderingStateFast()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (class FSkyLightSceneProxy ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FPrecomputedSkyLightInstanceData()"
  },
  {
    "label": "FPrecomputedSkyLightInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrecomputedSkyLightInstanceData(const USkyLightComponent* SourceComponent) : FSceneComponentInstanceData(SourceComponent)"
  },
  {
    "label": "FPrecomputedSkyLightInstanceData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPrecomputedSkyLightInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(Component, CacheApplyPhase)"
  },
  {
    "label": "USkyLightComponent()",
    "kind": "Method",
    "detail": "Function (CastChecked<)",
    "insertText": "USkyLightComponent(Component)->ApplyComponentInstanceData(this)"
  }
]