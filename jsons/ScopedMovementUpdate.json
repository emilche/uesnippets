[
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FScopedMovementUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedMovementUpdate"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FScopedMovementUpdate()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FScopedMovementUpdate( USceneComponent* Component, EScopedUpdate::Type ScopeBehavior = EScopedUpdate::DeferredUpdates, bool bRequireOverlapsEventFlagToQueueOverlaps = true )"
  },
  {
    "label": "RevertMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RevertMove()"
  },
  {
    "label": "AppendOverlapsAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendOverlapsAfterMove(const TOverlapArrayView& NewPendingOverlaps, bool bSweep, bool bIncludesOverlapsAtEnd)"
  },
  {
    "label": "KeepCurrentOverlapsAfterRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepCurrentOverlapsAfterRotation(bool bSweep)"
  },
  {
    "label": "AppendBlockingHitAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBlockingHitAfterMove(const FHitResult& Hit)"
  },
  {
    "label": "InvalidateCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCurrentOverlaps()"
  },
  {
    "label": "ForceOverlapUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceOverlapUpdate()"
  },
  {
    "label": "SetHasTeleported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasTeleported(ETeleportType InTeleportType)"
  },
  {
    "label": "SetWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWorldLocationAndRotation(FVector NewLocation, const FQuat& NewQuat, bool bNoPhysics, ETeleportType Teleport)"
  },
  {
    "label": "OnInnerScopeComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInnerScopeComplete(const FScopedMovementUpdate& InnerScope)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(void *)"
  }
]