[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FDelegateHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelegateHandle"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "IInstallBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleManager"
  },
  {
    "label": "IPlatformChunkInstall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformChunkInstall"
  },
  {
    "label": "IPlatformCompression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformCompression"
  },
  {
    "label": "IWrappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWrappedFileHandle"
  },
  {
    "label": "IPlatformHostCommunication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformHostCommunication"
  },
  {
    "label": "FDefaultDelegateUserPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultDelegateUserPolicy"
  },
  {
    "label": "FGenericCrashContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericCrashContext"
  },
  {
    "label": "FGenericMemoryWarningContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryWarningContext"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "TDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDelegate"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSHA256Signature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSHA256Signature"
  },
  {
    "label": "FProcessorGroupDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessorGroupDesc"
  },
  {
    "label": "FPageFaultStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageFaultStats"
  },
  {
    "label": "FProcessIOStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessIOStats"
  },
  {
    "label": "FContextSwitchStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextSwitchStats"
  },
  {
    "label": "FGenericPlatformMisc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMisc"
  },
  {
    "label": "FGPUDriverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUDriverInfo"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FAsyncIOSystemBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncIOSystemBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" CoreFwd . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Misc / CompressionFlags . h \" # include \" Misc / EnumClassFlags . h \" # if PLATFORM_CPU_X86_FAMILY # include<xmmintrin . h> # elif PLATFORM_CPU_ARM_FAMILY&&)",
    "insertText": "defined(_MSC_VER)"
  },
  {
    "label": "UE_DEBUG_BREAK()",
    "kind": "Method",
    "detail": "Function (class FDelegateHandle ; class FOutputDevice ; class FString ; class FText ; class GenericApplication ; class IInstallBundleManager ; class IPlatformChunkInstall ; class IPlatformCompression ; class IWrappedFileHandle ; class IPlatformHostCommunication ; struct FDefaultDelegateUserPolicy ; struct FGenericCrashContext ; struct FGenericMemoryWarningContext ; struct FGuid ; template<FuncType> class TFunction ; template<FuncType,UserPolicy> class TDelegate ; # if UE_BUILD_SHIPPING&& ! WITH_EDITOR # define)",
    "insertText": "UE_DEBUG_BREAK() ((void)0) #else #define UE_DEBUG_BREAK() ((void)(FPlatformMisc::IsDebuggerPresent() && ([] () { UE_DEBUG_BREAK_IMPL(); } (), 1)))"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (Unknown,Debug,DebugGame,Development,Shipping,Test } ; enum class ECrashHandlingType : uint8 { Default,Disabled,} ; bool)",
    "insertText": "LexTryParseString(EBuildConfiguration& OutConfiguration, const TCHAR* Configuration)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EBuildConfiguration Configuration)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText(EBuildConfiguration Configuration)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (} enum class EBuildTargetType : uint8 { Unknown,Game,Server,Client,Editor,Program,} ; bool)",
    "insertText": "LexTryParseString(EBuildTargetType& OutType, const TCHAR* Text)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EBuildTargetType Type)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} enum class EConvertibleLaptopMode { NotSupported,Laptop,Tablet } ; enum class EDeviceScreenOrientation : uint8 { Unknown,Portrait,PortraitUpsideDown,LandscapeLeft,LandscapeRight,FaceUp,FaceDown,PortraitSensor,LandscapeSensor,FullSensor,} ; namespace EErrorReportMode { enum Type { Interactive,Unattended,Balloon,} ; } enum class EAppMsgCategory : uint8 { Warning,Error,Success,Info,} ; namespace EAppMsgType { enum Type { Ok,YesNo,OkCancel,YesNoCancel,CancelRetryContinue,YesNoYesAllNoAll,YesNoYesAllNoAllCancel,YesNoYesAll,} ; } namespace EAppReturnType { enum Type { No,Yes,YesAll,NoAll,Cancel,Ok,Retry,Continue,} ; } const TCHAR*)",
    "insertText": "LexToString(EAppReturnType::Type Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (struct FSHA256Signature { uint8 Signature [ 3 2 ] ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; enum class EMobileHapticsType : uint8 { FeedbackSuccess,FeedbackWarning,FeedbackError,SelectionChanged,ImpactLight,ImpactMedium,ImpactHeavy,} ; enum class ENetworkConnectionStatus : uint8 { Unknown = 0,Disabled,Local,Connected } ; const TCHAR*)",
    "insertText": "LexToString(ENetworkConnectionStatus EnumVal)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum class ENetworkConnectionType : uint8 { Unknown,None,AirplaneMode,Cell,WiFi,WiMAX,Bluetooth,Ethernet,} ; typedef TDelegate<)",
    "insertText": "void(ENetworkConnectionType ConnectionType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EProcessDiagnosticFlags : uint32 { None = 0,MemorySanitizer = 1<<0,AnsiMalloc = 1<<1,StompMalloc = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EProcessDiagnosticFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ENetworkConnectionType Target)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (struct FProcessorGroupDesc { uint16 MaxNumProcessorGroups = 1 6 ; uint64 ThreadAffinities [ MaxNumProcessorGroups ] = { } ; uint16 NumProcessorGroups = 0 ; } ; struct FPageFaultStats { uint64 SoftPageFaults = 0 ; uint64 HardPageFaults = 0 ; uint64 TotalPageFaults = 0 ; } ; enum class EPageFaultFlags : uint8 { SoftPageFaults = 0 x01,HardPageFaults = 0 x02,TotalPageFaults = 0 x04,All = 0 xFF } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPageFaultFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (struct FProcessIOStats { uint64 BlockingInput = 0 ; uint64 BlockingOutput = 0 ; uint64 BlockingOther = 0 ; uint64 InputBytes = 0 ; uint64 OutputBytes = 0 ; uint64 OtherBytes = 0 ; } ; enum class EInputOutputFlags : uint8 { BlockingInput = 0 x01,BlockingOutput = 0 x02,BlockingOther = 0 x04,InputBytes = 0 x08,OutputBytes = 0 x10,OtherBytes = 0 x20,All = 0 xFF } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInputOutputFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDisplayOutputFormat { SDR_sRGB = 0,SDR_Rec709 = 1,SDR_ExplicitGammaMapping = 2,HDR_ACES_1000nit_ST2084 = 3,HDR_ACES_2000nit_ST2084 = 4,HDR_ACES_1000nit_ScRGB = 5,HDR_ACES_2000nit_ScRGB = 6,HDR_LinearEXR = 7,HDR_LinearNoToneCurve = 8,HDR_LinearWithToneCurve = 9,MAX } ; enum class EDisplayColorGamut { sRGB_D65 = 0,DCIP3_D65 = 1,Rec2020_D65 = 2,ACES_D60 = 3,ACEScg_D60 = 4,MAX } ; struct FContextSwitchStats { uint64 VoluntaryContextSwitches = 0 ; uint64 InvoluntaryContextSwitches = 0 ; uint64 TotalContextSwitches = 0 ; } ; enum class EContextSwitchFlags : uint8 { VoluntaryContextSwitches = 0 x01,InvoluntaryContextSwitches = 0 x02,TotalContextSwitches = 0 x04,All = 0 xFF } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EContextSwitchFlags)"
  },
  {
    "label": "PlatformPreInit()",
    "kind": "Method",
    "detail": "Function (struct FGenericPlatformMisc { void)",
    "insertText": "PlatformPreInit()"
  },
  {
    "label": "PlatformInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformInit()"
  },
  {
    "label": "AddNetworkListener()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "AddNetworkListener(FOnNetworkConnectionChangedDelegate&& InNewDelegate)"
  },
  {
    "label": "RemoveNetworkListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNetworkListener(FDelegateHandle Handle)"
  },
  {
    "label": "PlatformHandleSplashScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformHandleSplashScreen(bool ShowSplashScreen = false)"
  },
  {
    "label": "PlatformTearDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PlatformTearDown()"
  },
  {
    "label": "SetGracefulTerminationHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGracefulTerminationHandler()"
  },
  {
    "label": "SetCrashHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCrashHandler(void (* CrashHandler)(const FGenericCrashContext& Context))"
  },
  {
    "label": "GetCrashHandlingType()",
    "kind": "Method",
    "detail": "Function (} ECrashHandlingType)",
    "insertText": "GetCrashHandlingType()"
  },
  {
    "label": "SetEnvironmentVar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnvironmentVar(const TCHAR* VariableName, const TCHAR* Value)"
  },
  {
    "label": "GetDeviceId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceId()"
  },
  {
    "label": "GetUniqueAdvertisingId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUniqueAdvertisingId()"
  },
  {
    "label": "SubmitErrorReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitErrorReport(const TCHAR* InErrorHist, EErrorReportMode::Type InMode)"
  },
  {
    "label": "IsRemoteSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRemoteSession()"
  },
  {
    "label": "GetProcessDiagnostics()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_SHIPPING return false ; # else return true ; # endif } EProcessDiagnosticFlags)",
    "insertText": "GetProcessDiagnostics()"
  },
  {
    "label": "GetCPUVendor()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetCPUVendor()"
  },
  {
    "label": "GetCPUInfo()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCPUInfo()"
  },
  {
    "label": "HasNonoptionalCPUFeatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNonoptionalCPUFeatures()"
  },
  {
    "label": "NeedsNonoptionalCPUFeaturesCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsNonoptionalCPUFeaturesCheck()"
  },
  {
    "label": "GetCPUBrand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPUBrand()"
  },
  {
    "label": "GetCPUChipset()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPUChipset()"
  },
  {
    "label": "GetPrimaryGPUBrand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPrimaryGPUBrand()"
  },
  {
    "label": "GetDeviceMakeAndModel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceMakeAndModel()"
  },
  {
    "label": "GetGPUDriverInfo()",
    "kind": "Method",
    "detail": "Function (struct FGPUDriverInfo)",
    "insertText": "GetGPUDriverInfo(const FString& DeviceDescription)"
  },
  {
    "label": "GetOSVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOSVersions(FString& out_OSVersionLabel, FString& out_OSSubVersionLabel)"
  },
  {
    "label": "GetOSVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOSVersion()"
  },
  {
    "label": "GetDiskTotalAndFreeSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDiskTotalAndFreeSpace(const FString& InPath, uint64& TotalNumberOfBytes, uint64& NumberOfFreeBytes)"
  },
  {
    "label": "GetPageFaultStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPageFaultStats(FPageFaultStats& OutStats, EPageFaultFlags Flags=EPageFaultFlags::All)"
  },
  {
    "label": "SupportsFullCrashDumps()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_DESKTOP return true ; # else return false ; # endif } bool)",
    "insertText": "SupportsFullCrashDumps()"
  },
  {
    "label": "SetMemoryWarningHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMemoryWarningHandler(void (* Handler)(const FGenericMemoryWarningContext& Context))"
  },
  {
    "label": "HasMemoryWarningHandler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMemoryWarningHandler()"
  },
  {
    "label": "RaiseException()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RaiseException(uint32 ExceptionCode)"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginNamedEvent(const struct FColor& Color, const TCHAR* Text)"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNamedEvent(const struct FColor& Color, const ANSICHAR* Text)"
  },
  {
    "label": "StatNamedEvent()",
    "kind": "Method",
    "detail": "Function (template<CharType> void)",
    "insertText": "StatNamedEvent(const CharType* Text)"
  },
  {
    "label": "TickStatNamedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickStatNamedEvents()"
  },
  {
    "label": "LogNameEventStatsInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNameEventStatsInit()"
  },
  {
    "label": "EndNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNamedEvent()"
  },
  {
    "label": "CustomNamedStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomNamedStat(const TCHAR* Text, float Value, const TCHAR* Graph, const TCHAR* Unit)"
  },
  {
    "label": "CustomNamedStat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomNamedStat(const ANSICHAR* Text, float Value, const ANSICHAR* Graph, const ANSICHAR* Unit)"
  },
  {
    "label": "BeginEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginEnterBackgroundEvent(const TCHAR* Text)"
  },
  {
    "label": "EndEnterBackgroundEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndEnterBackgroundEvent()"
  },
  {
    "label": "BeginNamedEventFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginNamedEventFrame()"
  },
  {
    "label": "InitTaggedStorage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitTaggedStorage(uint32 NumTags)"
  },
  {
    "label": "ShutdownTaggedStorage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShutdownTaggedStorage()"
  },
  {
    "label": "TagBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TagBuffer(const char* Label, uint32 Category, const void* Buffer, size_t BufferSize)"
  },
  {
    "label": "SetStoredValues()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetStoredValues(const FString& InStoreId, const FString& InSectionName, const TMap<FString, FString>& InKeyValues)"
  },
  {
    "label": "SetStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName, const FString& InValue)"
  },
  {
    "label": "GetStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName, FString& OutValue)"
  },
  {
    "label": "DeleteStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName)"
  },
  {
    "label": "DeleteStoredSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteStoredSection(const FString& InStoreId, const FString& InSectionName)"
  },
  {
    "label": "LowLevelOutputDebugString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugString(const TCHAR *Message)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "LowLevelOutputDebugStringf(const TCHAR *Format, ...)"
  },
  {
    "label": "IsLowLevelOutputDebugStringStructured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLowLevelOutputDebugStringStructured()"
  },
  {
    "label": "SetUTF8Output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUTF8Output()"
  },
  {
    "label": "LocalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalPrint(const TCHAR* Str)"
  },
  {
    "label": "IsLocalPrintThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalPrintThreadSafe()"
  },
  {
    "label": "RequestExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestExit(bool Force, const TCHAR* CallSite = nullptr)"
  },
  {
    "label": "RequestExitWithStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestExitWithStatus(bool Force, uint8 ReturnCode, const TCHAR* CallSite = nullptr)"
  },
  {
    "label": "RestartApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestartApplication()"
  },
  {
    "label": "RestartApplicationWithCmdLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestartApplicationWithCmdLine(const char* CmdLine)"
  },
  {
    "label": "GetSystemErrorMessage()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetSystemErrorMessage(TCHAR* OutBuffer, int32 BufferCount, int32 Error)"
  },
  {
    "label": "CreateGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGuid(struct FGuid& Result)"
  },
  {
    "label": "MessageBoxExt()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type)",
    "insertText": "MessageBoxExt(EAppMsgType::Type MsgType, const TCHAR* Text, const TCHAR* Caption)"
  },
  {
    "label": "CommandLineCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommandLineCommands()"
  },
  {
    "label": "NormalizePath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NormalizePath(FStringBuilderBase& InPath)"
  },
  {
    "label": "GetDefaultPathSeparator()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDefaultPathSeparator()"
  },
  {
    "label": "UseRenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseRenderThread()"
  },
  {
    "label": "AllowAudioThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowAudioThread()"
  },
  {
    "label": "NumberOfCores()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfCores()"
  },
  {
    "label": "GetProcessorGroupDesc()",
    "kind": "Method",
    "detail": "Function (const FProcessorGroupDesc&)",
    "insertText": "GetProcessorGroupDesc()"
  },
  {
    "label": "NumberOfCoresIncludingHyperthreads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfCoresIncludingHyperthreads()"
  },
  {
    "label": "NumberOfWorkerThreadsToSpawn()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfWorkerThreadsToSpawn()"
  },
  {
    "label": "NumberOfIOWorkerThreadsToSpawn()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfIOWorkerThreadsToSpawn()"
  },
  {
    "label": "GetPlatformSpecificAsyncIOSystem()",
    "kind": "Method",
    "detail": "Function (struct FAsyncIOSystemBase*)",
    "insertText": "GetPlatformSpecificAsyncIOSystem()"
  },
  {
    "label": "GetAdditionalRootDirectories()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAdditionalRootDirectories()"
  },
  {
    "label": "AddAdditionalRootDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdditionalRootDirectory(const FString& RootDir)"
  },
  {
    "label": "EngineDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "EngineDir()"
  },
  {
    "label": "LaunchDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LaunchDir()"
  },
  {
    "label": "CacheLaunchDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheLaunchDir()"
  },
  {
    "label": "ProjectDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ProjectDir()"
  },
  {
    "label": "GetEngineAndProjectAbsoluteDirsFromExecutable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEngineAndProjectAbsoluteDirsFromExecutable(FString& OutProjectDir, FString& OutEngineDir)"
  },
  {
    "label": "CloudDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CloudDir()"
  },
  {
    "label": "HasProjectPersistentDownloadDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProjectPersistentDownloadDir()"
  },
  {
    "label": "GamePersistentDownloadDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GamePersistentDownloadDir()"
  },
  {
    "label": "GameTemporaryDownloadDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GameTemporaryDownloadDir()"
  },
  {
    "label": "GeneratedConfigDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GeneratedConfigDir()"
  },
  {
    "label": "GetUBTPlatform()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetUBTPlatform()"
  },
  {
    "label": "GetUBTTarget()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetUBTTarget()"
  },
  {
    "label": "SetUBTTargetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUBTTargetName(const TCHAR* InTargetName)"
  },
  {
    "label": "GetUBTTargetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetUBTTargetName()"
  },
  {
    "label": "GetNullRHIShaderFormat()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetNullRHIShaderFormat()"
  },
  {
    "label": "GetPlatformChunkInstall()",
    "kind": "Method",
    "detail": "Function (IPlatformChunkInstall*)",
    "insertText": "GetPlatformChunkInstall()"
  },
  {
    "label": "GetPlatformCompression()",
    "kind": "Method",
    "detail": "Function (IPlatformCompression*)",
    "insertText": "GetPlatformCompression()"
  },
  {
    "label": "GetPlatformHostCommunication()",
    "kind": "Method",
    "detail": "Function (IPlatformHostCommunication&)",
    "insertText": "GetPlatformHostCommunication()"
  },
  {
    "label": "OsExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OsExecute(const TCHAR* CommandType, const TCHAR* Command, const TCHAR* CommandLine = NULL)"
  },
  {
    "label": "GetSHA256Signature()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_SHIPPING return true ; # else return false ; # endif } bool)",
    "insertText": "GetSHA256Signature(const void* Data, uint32 ByteSize, FSHA256Signature& OutSignature)"
  },
  {
    "label": "GetDefaultLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultLanguage()"
  },
  {
    "label": "GetDefaultLocale()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultLocale()"
  },
  {
    "label": "GetTimeZoneId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTimeZoneId()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(class UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Out)"
  },
  {
    "label": "SupportsMultithreadedFileHandles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultithreadedFileHandles()"
  },
  {
    "label": "SetShouldPromptForRemoteDebugOnEnsure()",
    "kind": "Method",
    "detail": "Function (bShouldPromptForRemoteDebugging = bInShouldPrompt ; } void)",
    "insertText": "SetShouldPromptForRemoteDebugOnEnsure(bool bInShouldPrompt)"
  },
  {
    "label": "IsEnsureAllowed()",
    "kind": "Method",
    "detail": "Function (bPromptForRemoteDebugOnEnsure = bInShouldPrompt ; } # endif # if DO_ENSURE bool)",
    "insertText": "IsEnsureAllowed()"
  },
  {
    "label": "UpdateHotfixableEnsureSettings()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "UpdateHotfixableEnsureSettings()"
  },
  {
    "label": "TickHotfixables()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "TickHotfixables()"
  },
  {
    "label": "PromptForRemoteDebugging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromptForRemoteDebugging(bool bIsEnsure)"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Prefetch(const void* Ptr)"
  },
  {
    "label": "_mm_prefetch()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_CPU_X86_FAMILY)",
    "insertText": "_mm_prefetch(static_cast<const char*>(Ptr), _MM_HINT_T0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_CPU_ARM_FAMILY # if)",
    "insertText": "defined(_MSC_VER) __prefetch(Ptr)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# else __asm__)",
    "insertText": "__volatile__(\"prfm pldl1keep, [%[ptr]]\\n\" ::[ptr] \"r\"(Ptr) :)"
  },
  {
    "label": "UE_FORCE_CRASH()",
    "kind": "Method",
    "detail": "Function (# endif # else)",
    "insertText": "UE_FORCE_CRASH()"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Prefetch(const void* Ptr, int32 Offset)"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(reinterpret_cast<const void*>(reinterpret_cast<UPTRINT>(Ptr) + Offset))"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(Ptr)"
  },
  {
    "label": "PrefetchBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrefetchBlock(const void* Ptr, int32 NumBytes)"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(Ptr, Line * PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "GetDefaultDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR*)",
    "insertText": "GetDefaultDeviceProfileName()"
  },
  {
    "label": "GetBrightness()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBrightness()"
  },
  {
    "label": "SetOverrideProjectDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideProjectDir(const FString& InOverrideDir)"
  },
  {
    "label": "GetValidTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValidTargetPlatforms(TArray<FString>& TargetPlatformNames)"
  },
  {
    "label": "GetPlatformUserForUserIndex()",
    "kind": "Method",
    "detail": "Function (FPlatformUserId)",
    "insertText": "GetPlatformUserForUserIndex(int32 LocalUserIndex)"
  },
  {
    "label": "GetUserIndexForPlatformUser()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUserIndexForPlatformUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "GetUseVirtualJoysticks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseVirtualJoysticks()"
  },
  {
    "label": "FullscreenSameAsWindowedFullscreen()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_DESKTOP return true ; # else return false ; # endif } bool)",
    "insertText": "FullscreenSameAsWindowedFullscreen()"
  },
  {
    "label": "GetSystemFontBytes()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8>)",
    "insertText": "GetSystemFontBytes()"
  },
  {
    "label": "HasActiveWiFiConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveWiFiConnection()"
  },
  {
    "label": "SetNetworkConnectionStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkConnectionStatus(ENetworkConnectionStatus NewNetworkConnectionStatus)"
  },
  {
    "label": "GetNetworkConnectionType()",
    "kind": "Method",
    "detail": "Function (ENetworkConnectionType)",
    "insertText": "GetNetworkConnectionType()"
  },
  {
    "label": "HasVariableHardware()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVariableHardware()"
  },
  {
    "label": "GetDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (EDeviceScreenOrientation)",
    "insertText": "GetDeviceOrientation()"
  },
  {
    "label": "GetAllowedDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (EDeviceScreenOrientation)",
    "insertText": "GetAllowedDeviceOrientation()"
  },
  {
    "label": "SetAllowedDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowedDeviceOrientation(EDeviceScreenOrientation NewAllowedDeviceOrientation)"
  },
  {
    "label": "GetDeviceVolume()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeviceVolume()"
  },
  {
    "label": "GetLoginId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLoginId()"
  },
  {
    "label": "GetEpicAccountId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEpicAccountId()"
  },
  {
    "label": "GetDeviceTag()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceTag()"
  },
  {
    "label": "GetOperatingSystemId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOperatingSystemId()"
  },
  {
    "label": "GetConvertibleLaptopMode()",
    "kind": "Method",
    "detail": "Function (EConvertibleLaptopMode)",
    "insertText": "GetConvertibleLaptopMode()"
  },
  {
    "label": "GetEngineMode()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetEngineMode()"
  },
  {
    "label": "GetPreferredLanguages()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPreferredLanguages()"
  },
  {
    "label": "GetLocalCurrencyCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalCurrencyCode()"
  },
  {
    "label": "GetLocalCurrencySymbol()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalCurrencySymbol()"
  },
  {
    "label": "RegisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForRemoteNotifications()"
  },
  {
    "label": "IsRegisteredForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegisteredForRemoteNotifications()"
  },
  {
    "label": "UnregisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForRemoteNotifications()"
  },
  {
    "label": "ShouldDisablePluginAtRuntime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisablePluginAtRuntime(const FString& PluginName)"
  },
  {
    "label": "TriggerMobileHaptics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TriggerMobileHaptics()"
  },
  {
    "label": "ReleaseMobileHaptics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseMobileHaptics()"
  },
  {
    "label": "ShareURL()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShareURL(const FString& URL, const FText& Description, int32 LocationHintX, int32 LocationHintY)"
  },
  {
    "label": "SupportsDeviceCheckToken()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsDeviceCheckToken()"
  },
  {
    "label": "LoadTextFileFromPlatformPackage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LoadTextFileFromPlatformPackage(const FString& RelativePath)"
  },
  {
    "label": "FileExistsInPlatformPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExistsInPlatformPackage(const FString& RelativePath)"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "ParseChunkIdPakchunkIndexMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseChunkIdPakchunkIndexMapping(TArray<FString> ChunkIndexRedirects, TMap<int32, int32>& OutMapping)"
  },
  {
    "label": "PumpMessagesOutsideMainLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessagesOutsideMainLoop()"
  },
  {
    "label": "PumpMessagesForSlowTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PumpMessagesForSlowTask()"
  },
  {
    "label": "PumpEssentialAppMessages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PumpEssentialAppMessages()"
  },
  {
    "label": "HidePlatformStartupScreen()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HidePlatformStartupScreen()"
  },
  {
    "label": "UseHDRByDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseHDRByDefault()"
  },
  {
    "label": "GetChunkIDFromPakchunkIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetChunkIDFromPakchunkIndex(int32 PakchunkIndex)"
  },
  {
    "label": "SupportsBackbufferSampling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsBackbufferSampling()"
  },
  {
    "label": "GetMaxSyncInterval()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxSyncInterval()"
  },
  {
    "label": "IsPGICapableBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPGICapableBinary()"
  },
  {
    "label": "StartNewPGOCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartNewPGOCollection(const FString& AbsoluteFileName)"
  },
  {
    "label": "VersionCheckPlatformName()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "VersionCheckPlatformName()"
  },
  {
    "label": "StopPGOCollectionAndCloseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopPGOCollectionAndCloseFile()"
  },
  {
    "label": "GetMobilePropagateAlphaSetting()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMobilePropagateAlphaSetting()"
  },
  {
    "label": "IsRunningInCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningInCloud()"
  },
  {
    "label": "EnableScreenTimeout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableScreenTimeout()"
  },
  {
    "label": "SetupSyscallFilters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetupSyscallFilters()"
  }
]