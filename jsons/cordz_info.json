[
  {
    "label": "ABSL_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_LOCKABLE"
  },
  {
    "label": "List",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "List"
  },
  {
    "label": "TrackCord()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORDZ_INFO_H_ # define ABSL_STRINGS_INTERNAL_CORDZ_INFO_H_ # include<atomic> # include<cstdint> # include<functional> # include \" absl / base / config . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / internal / spinlock . h \" # include \" absl / base / thread_annotations . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cordz_functions . h \" # include \" absl / strings / internal / cordz_handle . h \" # include \" absl / strings / internal / cordz_statistics . h \" # include \" absl / strings / internal / cordz_update_tracker . h \" # include \" absl / synchronization / mutex . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class ABSL_LOCKABLE CordzInfo : public CordzHandle { public : using MethodIdentifier = CordzUpdateTracker::MethodIdentifier ; void)",
    "insertText": "TrackCord(InlineData& cord, MethodIdentifier method)"
  },
  {
    "label": "TrackCord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCord(InlineData& cord, const InlineData& src, MethodIdentifier method)"
  },
  {
    "label": "MaybeTrackCord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeTrackCord(InlineData& cord, MethodIdentifier method)"
  },
  {
    "label": "MaybeTrackCord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeTrackCord(InlineData& cord, const InlineData& src, MethodIdentifier method)"
  },
  {
    "label": "Untrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Untrack()"
  },
  {
    "label": "MaybeUntrackCord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUntrackCord(CordzInfo* info)"
  },
  {
    "label": "CordzInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordzInfo()"
  },
  {
    "label": "CordzInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordzInfo(const CordzInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CordzInfo&)",
    "insertText": "operator(const CordzInfo&)"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (CordzInfo*)",
    "insertText": "Head(const CordzSnapshot& snapshot)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (CordzInfo*)",
    "insertText": "Next(const CordzSnapshot& snapshot)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(MethodIdentifier method) ABSL_EXCLUSIVE_LOCK_FUNCTION(mutex_)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock() ABSL_UNLOCK_FUNCTION(mutex_)"
  },
  {
    "label": "AssertHeld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertHeld() ABSL_ASSERT_EXCLUSIVE_LOCK(mutex_)"
  },
  {
    "label": "SetCordRep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCordRep(CordRep* rep)"
  },
  {
    "label": "RefCordRep()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "RefCordRep() const ABSL_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetCordRepForTesting()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "GetCordRepForTesting()"
  },
  {
    "label": "GetStack()",
    "kind": "Method",
    "detail": "Function (rep_ = rep ; } absl::Span<void* const>)",
    "insertText": "GetStack()"
  },
  {
    "label": "GetParentStack()",
    "kind": "Method",
    "detail": "Function (absl::Span<void* const>)",
    "insertText": "GetParentStack()"
  },
  {
    "label": "GetCordzStatistics()",
    "kind": "Method",
    "detail": "Function (CordzStatistics)",
    "insertText": "GetCordzStatistics()"
  },
  {
    "label": "List()",
    "kind": "Method",
    "detail": "Function (private : using SpinLock = absl::base_internal::SpinLock ; using SpinLockHolder =::absl::base_internal::SpinLockHolder ; struct List {)",
    "insertText": "List(absl::ConstInitType) : mutex(absl::kConstInit, absl::base_internal::SCHEDULE_COOPERATIVE_AND_KERNEL)"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} SpinLock mutex ; std::atomic<CordzInfo*> head)",
    "insertText": "ABSL_GUARDED_BY(mutex)"
  },
  {
    "label": "CordzInfo()",
    "kind": "Method",
    "detail": "Function (nullptr } ; } ; size_t kMaxStackDepth = 6 4 ;)",
    "insertText": "CordzInfo(CordRep* rep, const CordzInfo* src, MethodIdentifier method)"
  },
  {
    "label": "UnsafeSetCordRep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsafeSetCordRep(CordRep* rep)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Track()"
  },
  {
    "label": "GetParentMethod()",
    "kind": "Method",
    "detail": "Function (MethodIdentifier)",
    "insertText": "GetParentMethod(const CordzInfo* src)"
  },
  {
    "label": "FillParentStack()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FillParentStack(const CordzInfo* src, void** stack)"
  },
  {
    "label": "ODRCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ODRCheck()"
  },
  {
    "label": "ABSL_RAW_CHECK()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG)",
    "insertText": "ABSL_RAW_CHECK(list_ == &global_list_, \"ODR violation in Cord\")"
  },
  {
    "label": "MaybeTrackCordImpl()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "MaybeTrackCordImpl(InlineData& cord, const InlineData& src, MethodIdentifier method)"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ABSL_CONST_INIT List global_list_ ; List* const list_ =& global_list_ ; std::atomic<CordzInfo*> ci_prev_ { nullptr } ; std::atomic<CordzInfo*> ci_next_ { nullptr } ; absl::Mutex mutex_ ; CordRep* rep_)",
    "insertText": "ABSL_GUARDED_BY(mutex_)"
  },
  {
    "label": "TrackCord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCord(cord, method)"
  },
  {
    "label": "MaybeTrackCordImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeTrackCordImpl(cord, src, method)"
  },
  {
    "label": "AssertHeld()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG mutex_ .)",
    "insertText": "AssertHeld()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  }
]