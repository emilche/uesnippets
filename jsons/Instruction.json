[
  {
    "label": "definition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "definition"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FastMathFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastMathFlags"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "AAMDNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AAMDNodes"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperationEquivalenceFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OperationEquivalenceFlags"
  },
  {
    "label": "TermOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TermOps"
  },
  {
    "label": "BinaryOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BinaryOps"
  },
  {
    "label": "MemoryOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryOps"
  },
  {
    "label": "CastOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CastOps"
  },
  {
    "label": "OtherOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OtherOps"
  },
  {
    "label": "SymbolTableListTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolTableListTraits"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "createSentinel()"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "createSentinel()"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (iplist<Instruction>::iterator)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "insertBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertBefore(Instruction *InsertPos)"
  },
  {
    "label": "insertAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertAfter(Instruction *InsertPos)"
  },
  {
    "label": "moveBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveBefore(Instruction *MovePos)"
  },
  {
    "label": "hasMetadataHashEntry()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasMetadataHashEntry()"
  },
  {
    "label": "getMetadataImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getMetadataImpl(KindID)"
  },
  {
    "label": "getMetadataImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getMetadataImpl(Kind)"
  },
  {
    "label": "setMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMetadata(unsigned KindID, MDNode *Node)"
  },
  {
    "label": "setMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMetadata(StringRef Kind, MDNode *Node)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropUnknownMetadata(ArrayRef<unsigned> KnownIDs)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "dropUnknownMetadata(None)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "dropUnknownMetadata(IDs)"
  },
  {
    "label": "setAAMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAAMetadata(const AAMDNodes &N)"
  },
  {
    "label": "setHasUnsafeAlgebra()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasUnsafeAlgebra(bool B)"
  },
  {
    "label": "setHasNoNaNs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoNaNs(bool B)"
  },
  {
    "label": "setHasNoInfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoInfs(bool B)"
  },
  {
    "label": "setHasNoSignedZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoSignedZeros(bool B)"
  },
  {
    "label": "setHasAllowReciprocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasAllowReciprocal(bool B)"
  },
  {
    "label": "setFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFastMathFlags(FastMathFlags FMF)"
  },
  {
    "label": "copyFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFastMathFlags(FastMathFlags FMF)"
  },
  {
    "label": "copyFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFastMathFlags(const Instruction *I)"
  },
  {
    "label": "clearMetadataHashEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearMetadataHashEntries()"
  },
  {
    "label": "isAssociative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAssociative(unsigned op)"
  },
  {
    "label": "isCommutative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCommutative(unsigned op)"
  },
  {
    "label": "isIdempotent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdempotent(unsigned op)"
  },
  {
    "label": "isNilpotent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNilpotent(unsigned op)"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParent(BasicBlock *P)"
  }
]