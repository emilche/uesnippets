[
  {
    "label": "FastMathFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastMathFlags"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "AAMDNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AAMDNodes"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperationEquivalenceFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OperationEquivalenceFlags"
  },
  {
    "label": "TermOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TermOps"
  },
  {
    "label": "BinaryOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BinaryOps"
  },
  {
    "label": "MemoryOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryOps"
  },
  {
    "label": "CastOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CastOps"
  },
  {
    "label": "OtherOps",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OtherOps"
  },
  {
    "label": "SymbolTableListTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolTableListTraits"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INSTRUCTION_H # define LLVM_IR_INSTRUCTION_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / IR / SymbolTableListTraits . h \" # include \" llvm / IR / User . h \" namespace llvm { class FastMathFlags ; class LLVMContext ; class MDNode ; class BasicBlock ; struct AAMDNodes ; template<> struct ilist_traits<Instruction> : public SymbolTableListTraits<Instruction,BasicBlock> { Instruction*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroySentinel(Instruction *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "ensureHead(Instruction *)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(Instruction *, Instruction *)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : ilist_half_node<Instruction> Sentinel ; } ; class Instruction : public User,public ilist_node<Instruction> { void)",
    "insertText": "operator(const Instruction &)"
  },
  {
    "label": "Instruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Instruction(const Instruction &)"
  },
  {
    "label": "Instruction()",
    "kind": "Method",
    "detail": "Function (BasicBlock* Parent ; DebugLoc DbgLoc ; enum { HasMetadataBit = 1<<1 5 } ; public : ~)",
    "insertText": "Instruction()"
  },
  {
    "label": "user_back()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "user_back()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (} const BasicBlock*)",
    "insertText": "getParent()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (Module*)",
    "insertText": "getModule()"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (iplist<Instruction>::iterator)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "insertBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertBefore(Instruction *InsertPos)"
  },
  {
    "label": "insertAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertAfter(Instruction *InsertPos)"
  },
  {
    "label": "moveBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveBefore(Instruction *MovePos)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOpcode()"
  },
  {
    "label": "getOpcodeName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getOpcodeName()"
  },
  {
    "label": "isTerminator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTerminator()"
  },
  {
    "label": "isBinaryOp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBinaryOp()"
  },
  {
    "label": "isShift()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isShift()"
  },
  {
    "label": "isCast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCast()"
  },
  {
    "label": "getOpcodeName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getOpcodeName(unsigned OpCode)"
  },
  {
    "label": "isTerminator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTerminator(unsigned OpCode)"
  },
  {
    "label": "isArithmeticShift()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArithmeticShift()"
  },
  {
    "label": "isCast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCast(unsigned OpCode)"
  },
  {
    "label": "hasMetadataOtherThanDebugLoc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasMetadataOtherThanDebugLoc()"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (} MDNode*)",
    "insertText": "getMetadata(unsigned KindID)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (} MDNode*)",
    "insertText": "getMetadata(StringRef Kind)"
  },
  {
    "label": "getAllMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAllMetadata(SmallVectorImpl<std::pair<unsigned, MDNode *>> &MDs)"
  },
  {
    "label": "getAllMetadataOtherThanDebugLoc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAllMetadataOtherThanDebugLoc(SmallVectorImpl<std::pair<unsigned, MDNode *>> &MDs)"
  },
  {
    "label": "getAAMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAAMetadata(AAMDNodes &N, bool Merge = false)"
  },
  {
    "label": "setMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMetadata(unsigned KindID, MDNode *Node)"
  },
  {
    "label": "setMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMetadata(StringRef Kind, MDNode *Node)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropUnknownMetadata(ArrayRef<unsigned> KnownIDs)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropUnknownMetadata()"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dropUnknownMetadata(unsigned ID1)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dropUnknownMetadata(unsigned ID1, unsigned ID2)"
  },
  {
    "label": "dropUnknownMetadata()",
    "kind": "Method",
    "detail": "Function (unsigned IDs [ ] = { ID1,ID2 } ; return)",
    "insertText": "dropUnknownMetadata(IDs)"
  },
  {
    "label": "setAAMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAAMetadata(const AAMDNodes &N)"
  },
  {
    "label": "setDebugLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDebugLoc(DebugLoc Loc)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (DbgLoc =)",
    "insertText": "move(Loc)"
  },
  {
    "label": "getDebugLoc()",
    "kind": "Method",
    "detail": "Function (} const DebugLoc&)",
    "insertText": "getDebugLoc()"
  },
  {
    "label": "setHasNoNaNs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoNaNs(bool B)"
  },
  {
    "label": "setHasNoInfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoInfs(bool B)"
  },
  {
    "label": "setHasNoSignedZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasNoSignedZeros(bool B)"
  },
  {
    "label": "setHasAllowReciprocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHasAllowReciprocal(bool B)"
  },
  {
    "label": "setFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFastMathFlags(FastMathFlags FMF)"
  },
  {
    "label": "copyFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFastMathFlags(FastMathFlags FMF)"
  },
  {
    "label": "hasUnsafeAlgebra()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasUnsafeAlgebra()"
  },
  {
    "label": "hasNoNaNs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasNoNaNs()"
  },
  {
    "label": "hasNoInfs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasNoInfs()"
  },
  {
    "label": "hasNoSignedZeros()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasNoSignedZeros()"
  },
  {
    "label": "hasAllowReciprocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasAllowReciprocal()"
  },
  {
    "label": "getFastMathFlags()",
    "kind": "Method",
    "detail": "Function (FastMathFlags)",
    "insertText": "getFastMathFlags()"
  },
  {
    "label": "copyFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFastMathFlags(const Instruction *I)"
  },
  {
    "label": "hasMetadataHashEntry()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "hasMetadataHashEntry()"
  },
  {
    "label": "getMetadataImpl()",
    "kind": "Method",
    "detail": "Function (} MDNode*)",
    "insertText": "getMetadataImpl(unsigned KindID)"
  },
  {
    "label": "getMetadataImpl()",
    "kind": "Method",
    "detail": "Function (MDNode*)",
    "insertText": "getMetadataImpl(StringRef Kind)"
  },
  {
    "label": "getAllMetadataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllMetadataImpl(SmallVectorImpl<std::pair<unsigned, MDNode *>> &)"
  },
  {
    "label": "getAllMetadataOtherThanDebugLocImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllMetadataOtherThanDebugLocImpl(SmallVectorImpl<std::pair<unsigned, MDNode *>> &)"
  },
  {
    "label": "clearMetadataHashEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearMetadataHashEntries()"
  },
  {
    "label": "isAssociative()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "isAssociative()"
  },
  {
    "label": "isAssociative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAssociative(unsigned op)"
  },
  {
    "label": "isCommutative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCommutative()"
  },
  {
    "label": "isCommutative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCommutative(unsigned op)"
  },
  {
    "label": "isIdempotent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdempotent()"
  },
  {
    "label": "isIdempotent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIdempotent(unsigned op)"
  },
  {
    "label": "isNilpotent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNilpotent()"
  },
  {
    "label": "isNilpotent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNilpotent(unsigned op)"
  },
  {
    "label": "mayWriteToMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayWriteToMemory()"
  },
  {
    "label": "mayReadFromMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayReadFromMemory()"
  },
  {
    "label": "mayReadOrWriteMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayReadOrWriteMemory()"
  },
  {
    "label": "isAtomic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAtomic()"
  },
  {
    "label": "mayThrow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayThrow()"
  },
  {
    "label": "mayReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayReturn()"
  },
  {
    "label": "mayHaveSideEffects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayHaveSideEffects()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "clone()"
  },
  {
    "label": "isIdenticalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdenticalTo(const Instruction *I)"
  },
  {
    "label": "isIdenticalToWhenDefined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdenticalToWhenDefined(const Instruction *I)"
  },
  {
    "label": "isSameOperationAs()",
    "kind": "Method",
    "detail": "Function (enum OperationEquivalenceFlags { CompareIgnoringAlignment = 1<<0,CompareUsingScalarTypes = 1<<1 } ; bool)",
    "insertText": "isSameOperationAs(const Instruction *I, unsigned flags = 0)"
  },
  {
    "label": "isUsedOutsideOfBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUsedOutsideOfBlock(const BasicBlock *BB)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Value *V)"
  },
  {
    "label": "FIRST_TERM_INST()",
    "kind": "Method",
    "detail": "Function (} enum TermOps { # define)",
    "insertText": "FIRST_TERM_INST(N) TermOpsBegin = N, #define HANDLE_TERM_INST(N, OPC, CLASS) OPC = N, #define LAST_TERM_INST(N)"
  },
  {
    "label": "FIRST_BINARY_INST()",
    "kind": "Method",
    "detail": "Function (enum BinaryOps { # define)",
    "insertText": "FIRST_BINARY_INST(N) BinaryOpsBegin = N, #define HANDLE_BINARY_INST(N, OPC, CLASS) OPC = N, #define LAST_BINARY_INST(N)"
  },
  {
    "label": "FIRST_MEMORY_INST()",
    "kind": "Method",
    "detail": "Function (enum MemoryOps { # define)",
    "insertText": "FIRST_MEMORY_INST(N) MemoryOpsBegin = N, #define HANDLE_MEMORY_INST(N, OPC, CLASS) OPC = N, #define LAST_MEMORY_INST(N)"
  },
  {
    "label": "FIRST_CAST_INST()",
    "kind": "Method",
    "detail": "Function (enum CastOps { # define)",
    "insertText": "FIRST_CAST_INST(N) CastOpsBegin = N, #define HANDLE_CAST_INST(N, OPC, CLASS) OPC = N, #define LAST_CAST_INST(N)"
  },
  {
    "label": "FIRST_OTHER_INST()",
    "kind": "Method",
    "detail": "Function (enum OtherOps { # define)",
    "insertText": "FIRST_OTHER_INST(N) OtherOpsBegin = N, #define HANDLE_OTHER_INST(N, OPC, CLASS) OPC = N, #define LAST_OTHER_INST(N)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "setValueSubclassData(unsigned short D)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData(D)"
  },
  {
    "label": "getSubclassDataFromValue()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "getSubclassDataFromValue()"
  },
  {
    "label": "setHasMetadataHashEntry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setHasMetadataHashEntry(bool V)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData((getSubclassDataFromValue() & ~HasMetadataBit) | (V ? HasMetadataBit : 0))"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (} class SymbolTableListTraits<Instruction,BasicBlock> ; void)",
    "insertText": "setParent(BasicBlock *P)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "setInstructionSubclassData(unsigned short D)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((D & HasMetadataBit) == 0 && \"Out of range value put into field\")"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData((getSubclassDataFromValue() & HasMetadataBit) | D)"
  },
  {
    "label": "getSubclassDataFromInstruction()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSubclassDataFromInstruction()"
  },
  {
    "label": "Instruction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Instruction(Type *Ty, unsigned iType, Use *Ops, unsigned NumOps, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Instruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Instruction(Type *Ty, unsigned iType, Use *Ops, unsigned NumOps, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "cloneImpl()",
    "kind": "Method",
    "detail": "Function (private : Instruction*)",
    "insertText": "cloneImpl()"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (} template<> class PointerLikeTypeTraits<Instruction*> { typedef Instruction* PT ; public : void*)",
    "insertText": "getAsVoidPointer(PT P)"
  }
]