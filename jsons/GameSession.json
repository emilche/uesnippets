[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FUniqueNetIdRepl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueNetIdRepl"
  },
  {
    "label": "AGameSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameSession"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameSession, Log, All)"
  },
  {
    "label": "InitOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOptions(const FString& Options)"
  },
  {
    "label": "GetNextPlayerID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextPlayerID()"
  },
  {
    "label": "ProcessAutoLogin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAutoLogin()"
  },
  {
    "label": "OnAutoLoginComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoLoginComplete(int32 LocalUserNum, bool bWasSuccessful, const FString& Error)"
  },
  {
    "label": "ApproveLogin()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ApproveLogin(const FString& Options)"
  },
  {
    "label": "RegisterPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPlayer(APlayerController* NewPlayer, const FUniqueNetIdRepl& UniqueId, bool bWasFromInvite)"
  },
  {
    "label": "PostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLogin(APlayerController* NewPlayer)"
  },
  {
    "label": "AtCapacity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtCapacity(bool bSpectator)"
  },
  {
    "label": "NotifyLogout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLogout(const APlayerController* PC)"
  },
  {
    "label": "NotifyLogout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLogout(FName InSessionName, const FUniqueNetIdRepl& UniqueId)"
  },
  {
    "label": "UnregisterPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlayer(FName InSessionName, const FUniqueNetIdRepl& UniqueId)"
  },
  {
    "label": "UnregisterPlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlayers(FName InSessionName, const TArray< FUniqueNetIdRepl >& Players)"
  },
  {
    "label": "UnregisterPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlayer(const APlayerController* ExitingPlayer)"
  },
  {
    "label": "AddAdmin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdmin(APlayerController* AdminPlayer)"
  },
  {
    "label": "RemoveAdmin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAdmin(APlayerController* AdminPlayer)"
  },
  {
    "label": "KickPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KickPlayer(APlayerController* KickedPlayer, const FText& KickReason)"
  },
  {
    "label": "BanPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BanPlayer(APlayerController* BannedPlayer, const FText& BanReason)"
  },
  {
    "label": "ReturnToMainMenuHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnToMainMenuHost()"
  },
  {
    "label": "PostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravel()"
  },
  {
    "label": "RegisterServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterServer()"
  },
  {
    "label": "RegisterServerFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterServerFailed()"
  },
  {
    "label": "GetSessionJoinability()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSessionJoinability(FName InSessionName, FJoinabilitySettings& OutSettings)"
  },
  {
    "label": "UpdateSessionJoinability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSessionJoinability(FName InSessionName, bool bPublicSearchable, bool bAllowInvites, bool bJoinViaPresence, bool bJoinViaPresenceFriendsOnly)"
  },
  {
    "label": "DumpSessionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpSessionState()"
  },
  {
    "label": "HandleStartMatchRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStartMatchRequest()"
  },
  {
    "label": "HandleMatchIsWaitingToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchIsWaitingToStart()"
  },
  {
    "label": "HandleMatchHasStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchHasStarted()"
  },
  {
    "label": "HandleMatchHasEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchHasEnded()"
  },
  {
    "label": "CanRestartGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRestartGame()"
  },
  {
    "label": "OnStartSessionComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartSessionComplete(FName InSessionName, bool bWasSuccessful)"
  },
  {
    "label": "OnEndSessionComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSessionComplete(FName InSessionName, bool bWasSuccessful)"
  }
]