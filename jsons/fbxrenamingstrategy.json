[
  {
    "label": "FbxScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxScene"
  },
  {
    "label": "FbxNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNode"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "NameCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameCell"
  },
  {
    "label": "EDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDirection"
  },
  {
    "label": "EClashType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClashType"
  },
  {
    "label": "ERenamingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERenamingMode"
  },
  {
    "label": "FbxRenamingStrategyInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_UTILS_RENAMINGSTRATEGY_H_ # define _FBXSDK_UTILS_RENAMINGSTRATEGY_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxcharptrset . h> # include<fbxsdk / utils / fbxnamehandler . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxScene ; class FbxNode ; class FBXSDK_DLL FbxRenamingStrategyInterface { public :)",
    "insertText": "FbxRenamingStrategyInterface()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(FbxNameHandler& pName)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (FbxRenamingStrategyInterface*)",
    "insertText": "Clone()"
  },
  {
    "label": "FbxRenamingStrategyNumber()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxRenamingStrategyNumber : public FbxRenamingStrategyInterface { public :)",
    "insertText": "FbxRenamingStrategyNumber()"
  },
  {
    "label": "NameCell()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : struct NameCell {)",
    "insertText": "NameCell(const char* pName) : mName(pName), mInstanceCount(0)"
  },
  {
    "label": "FbxRenamingStrategy()",
    "kind": "Method",
    "detail": "Function (} FbxString mName ; int mInstanceCount ; } ; FbxArray<NameCell*> mNameArray ; # endif } ; class FBXSDK_DLL FbxRenamingStrategy : public FbxRenamingStrategyInterface { public : enum EDirection { eToFBX,eFromFBX } ;)",
    "insertText": "FbxRenamingStrategy(EDirection pMod, bool pOnCreationRun = false)"
  },
  {
    "label": "FbxRenamingStrategy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxRenamingStrategy()"
  },
  {
    "label": "SetClashSolverType()",
    "kind": "Method",
    "detail": "Function (enum EClashType { eNameClashAuto,eNameClashType1,eNameClashType2 } ; void)",
    "insertText": "SetClashSolverType(EClashType pType)"
  },
  {
    "label": "GetNameSpace()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "GetNameSpace()"
  },
  {
    "label": "SetInNameSpaceSymbol()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInNameSpaceSymbol(FbxString pNameSpaceSymbol)"
  },
  {
    "label": "SetOutNameSpaceSymbol()",
    "kind": "Method",
    "detail": "Function (mInNameSpaceSymbol = pNameSpaceSymbol ; } void)",
    "insertText": "SetOutNameSpaceSymbol(FbxString pNameSpaceSymbol)"
  },
  {
    "label": "SetCaseSensibility()",
    "kind": "Method",
    "detail": "Function (mOutNameSpaceSymbol = pNameSpaceSymbol ; } void)",
    "insertText": "SetCaseSensibility(bool pIsCaseSensitive)"
  },
  {
    "label": "SetReplaceNonAlphaNum()",
    "kind": "Method",
    "detail": "Function (mCaseSensitive = pIsCaseSensitive ; } void)",
    "insertText": "SetReplaceNonAlphaNum(bool pReplaceNonAlphaNum)"
  },
  {
    "label": "SetFirstNotNum()",
    "kind": "Method",
    "detail": "Function (mReplaceNonAlphaNum = pReplaceNonAlphaNum ; } void)",
    "insertText": "SetFirstNotNum(bool pFirstNotNum)"
  },
  {
    "label": "RenameUnparentNameSpace()",
    "kind": "Method",
    "detail": "Function (mFirstNotNum = pFirstNotNum ; } bool)",
    "insertText": "RenameUnparentNameSpace(FbxNode* pNode, bool pIsRoot = false)"
  },
  {
    "label": "RemoveImportNameSpaceClash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveImportNameSpaceClash(FbxNode* pNode)"
  },
  {
    "label": "GetParentsNameSpaceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParentsNameSpaceList(FbxNode* pNode, FbxArray<FbxString*> &pNameSpaceList)"
  },
  {
    "label": "PropagateNameSpaceChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropagateNameSpaceChange(FbxNode* pNode, FbxString OldNS, FbxString NewNS)"
  },
  {
    "label": "RenameToFBX()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS protected : bool)",
    "insertText": "RenameToFBX(FbxNameHandler& pName)"
  },
  {
    "label": "RenameFromFBX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameFromFBX(FbxNameHandler& pName)"
  },
  {
    "label": "ReplaceNonAlphaNum()",
    "kind": "Method",
    "detail": "Function (FbxString&)",
    "insertText": "ReplaceNonAlphaNum(FbxString& pName, const char* pReplace, bool pIgnoreNameSpace)"
  },
  {
    "label": "FbxSceneRenamer()",
    "kind": "Method",
    "detail": "Function (} FbxString mName ; int mInstanceCount ; } ; FbxCharPtrSet mStringNameArray ; FbxArray<NameCell*> mExistingNsList ; bool mOnCreationRun ; bool mCaseSensitive ; bool mReplaceNonAlphaNum ; bool mFirstNotNum ; FbxString mNameSpace ; FbxString mInNameSpaceSymbol ; FbxString mOutNameSpaceSymbol ; # endif } ; class FBXSDK_DLL FbxSceneRenamer { public :)",
    "insertText": "FbxSceneRenamer(FbxScene* pScene)"
  },
  {
    "label": "FbxSceneRenamer()",
    "kind": "Method",
    "detail": "Function (mScene = pScene ; } ; ~)",
    "insertText": "FbxSceneRenamer()"
  },
  {
    "label": "RenameFor()",
    "kind": "Method",
    "detail": "Function (} ; enum ERenamingMode { eNone,eMAYA_TO_FBX5,eMAYA_TO_FBX_MB75,eMAYA_TO_FBX_MB70,eFBXMB75_TO_FBXMB70,eFBX_TO_FBX,eMAYA_TO_FBX,eFBX_TO_MAYA,eLW_TO_FBX,eFBX_TO_LW,eXSI_TO_FBX,eFBX_TO_XSI,eMAX_TO_FBX,eFBX_TO_MAX,eMB_TO_FBX,eFBX_TO_MB,eDAE_TO_FBX,eFBX_TO_DAE } ; void)",
    "insertText": "RenameFor(ERenamingMode pMode)"
  },
  {
    "label": "ResolveNameClashing()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : void)",
    "insertText": "ResolveNameClashing(bool pFromFbx, bool pIgnoreNS, bool pIsCaseSensitive, bool pReplaceNonAlphaNum, bool pFirstNotNum, FbxString pInNameSpaceSymbol, FbxString pOutNameSpaceSymbol, bool pNoUnparentNS , bool pRemoveNameSpaceClash)"
  }
]