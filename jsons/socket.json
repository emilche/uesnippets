[
  {
    "label": "Socket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Socket"
  },
  {
    "label": "ConnState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConnState"
  },
  {
    "label": "Option",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Option"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SOCKET_H_ # define RTC_BASE_SOCKET_H_ # include<errno . h> # if)",
    "insertText": "defined(WEBRTC_POSIX) #include <arpa/inet.h> #include <netinet/in.h> #include <sys/socket.h> #include <sys/types.h> #define SOCKET_EACCES EACCES #endif #if defined(WEBRTC_WIN) #include \"rtc_base/win32.h\" #endif #include \"rtc_base/socket_address.h\" #include \"rtc_base/third_party/sigslot/sigslot.h\" #if defined(WEBRTC_WIN) #undef EWOULDBLOCK #define EWOULDBLOCK WSAEWOULDBLOCK #undef EINPROGRESS #define EINPROGRESS WSAEINPROGRESS #undef EALREADY #define EALREADY WSAEALREADY #undef EMSGSIZE #define EMSGSIZE WSAEMSGSIZE #undef EADDRINUSE #define EADDRINUSE WSAEADDRINUSE #undef EADDRNOTAVAIL #define EADDRNOTAVAIL WSAEADDRNOTAVAIL #undef ENETDOWN #define ENETDOWN WSAENETDOWN #undef ECONNABORTED #define ECONNABORTED WSAECONNABORTED #undef ENOBUFS #define ENOBUFS WSAENOBUFS #undef EISCONN #define EISCONN WSAEISCONN #undef ENOTCONN #define ENOTCONN WSAENOTCONN #undef ECONNREFUSED #define ECONNREFUSED WSAECONNREFUSED #undef EHOSTUNREACH #define EHOSTUNREACH WSAEHOSTUNREACH #undef ENETUNREACH #define ENETUNREACH WSAENETUNREACH #define SOCKET_EACCES WSAEACCES #endif #if defined(WEBRTC_POSIX) #define INVALID_SOCKET (-1) #define SOCKET_ERROR (-1) #define closesocket(s) close(s)"
  },
  {
    "label": "IsBlockingError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlockingError(int e)"
  },
  {
    "label": "Socket()",
    "kind": "Method",
    "detail": "Function (} class Socket { public : ~)",
    "insertText": "Socket()"
  },
  {
    "label": "Socket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Socket(const Socket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Socket&)",
    "insertText": "operator(const Socket&)"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Bind(const SocketAddress& addr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect(const SocketAddress& addr)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(void* pv, size_t cb, int64_t* timestamp)"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* pv, size_t cb, SocketAddress* paddr, int64_t* timestamp)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Listen(int backlog)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (Socket*)",
    "insertText": "Accept(SocketAddress* paddr)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "IsBlocking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlocking()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (} enum ConnState { CS_CLOSED,CS_CONNECTING,CS_CONNECTED } ; ConnState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (enum Option { OPT_DONTFRAGMENT,OPT_RCVBUF,OPT_SNDBUF,OPT_NODELAY,OPT_IPV6_V6ONLY,OPT_DSCP,OPT_RTP_SENDTIME_EXTN_ID,} ; int)",
    "insertText": "GetOption(Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Option opt, int value)"
  }
]