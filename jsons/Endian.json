[
  {
    "label": "gbswap_64()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_ENDIAN_H_ # define ABSL_BASE_INTERNAL_ENDIAN_H_ # include<cstdint> # include<cstdlib> # include \" absl / base / casts . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / unaligned_access . h \" # include \" absl / base / port . h \" namespace absl { ABSL_NAMESPACE_BEGIN uint64_t)",
    "insertText": "gbswap_64(uint64_t host_int)"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_bswap64) || defined(__GNUC__) return __builtin_bswap64(host_int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) return _byteswap_uint64(host_int)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((host_int & uint64_t{0xFF}) << 56) | ((host_int & uint64_t{0xFF00}) << 40) | ((host_int & uint64_t{0xFF0000}) << 24) | ((host_int & uint64_t{0xFF000000}) << 8) | ((host_int & uint64_t{0xFF00000000}) >> 8) | ((host_int & uint64_t{0xFF0000000000}) >> 24) | ((host_int & uint64_t{0xFF000000000000}) >> 40) | ((host_int & uint64_t{0xFF00000000000000}) >> 56))"
  },
  {
    "label": "gbswap_32()",
    "kind": "Method",
    "detail": "Function (# endif } uint32_t)",
    "insertText": "gbswap_32(uint32_t host_int)"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_bswap32) || defined(__GNUC__) return __builtin_bswap32(host_int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) return _byteswap_ulong(host_int)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((host_int & uint32_t{0xFF}) << 24) | ((host_int & uint32_t{0xFF00}) << 8) | ((host_int & uint32_t{0xFF0000}) >> 8) | ((host_int & uint32_t{0xFF000000}) >> 24))"
  },
  {
    "label": "gbswap_16()",
    "kind": "Method",
    "detail": "Function (# endif } uint16_t)",
    "insertText": "gbswap_16(uint16_t host_int)"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_bswap16) || defined(__GNUC__) return __builtin_bswap16(host_int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) return _byteswap_ushort(host_int)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((host_int & uint16_t{0xFF}) << 8) | ((host_int & uint16_t{0xFF00}) >> 8))"
  },
  {
    "label": "ghtons()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef ABSL_IS_LITTLE_ENDIAN uint16_t)",
    "insertText": "ghtons(uint16_t x)"
  },
  {
    "label": "ghtonl()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ghtonl(uint32_t x)"
  },
  {
    "label": "ghtonll()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "ghtonll(uint64_t x)"
  },
  {
    "label": "gntohl()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "gntohl(uint32_t x)"
  },
  {
    "label": "gntohll()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "gntohll(uint64_t x)"
  },
  {
    "label": "FromHost16()",
    "kind": "Method",
    "detail": "Function (} namespace little_endian { # ifdef ABSL_IS_LITTLE_ENDIAN uint16_t)",
    "insertText": "FromHost16(uint16_t x)"
  },
  {
    "label": "ToHost16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "ToHost16(uint16_t x)"
  },
  {
    "label": "FromHost32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "FromHost32(uint32_t x)"
  },
  {
    "label": "ToHost32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ToHost32(uint32_t x)"
  },
  {
    "label": "FromHost64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "FromHost64(uint64_t x)"
  },
  {
    "label": "ToHost64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "ToHost64(uint64_t x)"
  },
  {
    "label": "IsLittleEndian()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLittleEndian()"
  },
  {
    "label": "FromHost()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "FromHost(uint32_t x)"
  },
  {
    "label": "FromHost()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "FromHost(uint64_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "ToHost(uint8_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ToHost(uint32_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "ToHost(uint64_t x)"
  },
  {
    "label": "FromHost()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "FromHost(int8_t x)"
  },
  {
    "label": "FromHost()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "FromHost(int32_t x)"
  },
  {
    "label": "FromHost()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "FromHost(int64_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "ToHost(int8_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "ToHost(int32_t x)"
  },
  {
    "label": "ToHost()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToHost(int64_t x)"
  },
  {
    "label": "Load16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "Load16(const void *p)"
  },
  {
    "label": "Store16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Store16(void *p, uint16_t v)"
  },
  {
    "label": "ABSL_INTERNAL_UNALIGNED_STORE16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_UNALIGNED_STORE16(p, FromHost16(v))"
  },
  {
    "label": "Load32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Load32(const void *p)"
  },
  {
    "label": "Store32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Store32(void *p, uint32_t v)"
  },
  {
    "label": "ABSL_INTERNAL_UNALIGNED_STORE32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_UNALIGNED_STORE32(p, FromHost32(v))"
  },
  {
    "label": "Load64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "Load64(const void *p)"
  },
  {
    "label": "Store64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Store64(void *p, uint64_t v)"
  },
  {
    "label": "ABSL_INTERNAL_UNALIGNED_STORE64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_UNALIGNED_STORE64(p, FromHost64(v))"
  }
]