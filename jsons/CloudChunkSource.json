[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IBuildInstallerSharedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInstallerSharedContext"
  },
  {
    "label": "IPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatform"
  },
  {
    "label": "IChunkStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkStore"
  },
  {
    "label": "IDownloadService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDownloadService"
  },
  {
    "label": "IChunkReferenceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkReferenceTracker"
  },
  {
    "label": "IChunkDataSerialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDataSerialization"
  },
  {
    "label": "IMessagePump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessagePump"
  },
  {
    "label": "IInstallerError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallerError"
  },
  {
    "label": "ICloudChunkSourceStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICloudChunkSourceStat"
  },
  {
    "label": "IDownloadServiceStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDownloadServiceStatistics"
  },
  {
    "label": "IBuildManifestSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildManifestSet"
  },
  {
    "label": "ICloudChunkSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICloudChunkSource"
  },
  {
    "label": "FCloudSourceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloudSourceConfig"
  },
  {
    "label": "FCloudChunkSourceFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCloudChunkSourceFactory"
  },
  {
    "label": "ICloudChunkSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / ChunkSource . h \" # include \" Installer / DownloadConnectionCount . h \" # include \" Installer / Controllable . h \" # include \" BuildPatchManifest . h \" # include \" Interfaces / IBuildInstaller . h \" enum class EBuildPatchDownloadHealth ; class IBuildInstallerSharedContext ; namespace BuildPatchServices { class IPlatform ; class IChunkStore ; class IDownloadService ; class IChunkReferenceTracker ; class IChunkDataSerialization ; class IMessagePump ; class IInstallerError ; class ICloudChunkSourceStat ; class IDownloadServiceStatistics ; class IBuildManifestSet ; class ICloudChunkSource : public IChunkSource,public IControllable { public : ~)",
    "insertText": "ICloudChunkSource()"
  },
  {
    "label": "ThreadRun()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ThreadRun()"
  },
  {
    "label": "FCloudSourceConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct FCloudSourceConfig { TArray<FString> CloudRoots ; int32 MaxRetryCount = 6 ; int32 PreFetchMinimum = 1 6 ; int32 PreFetchMaximum = 3 2 ; TArray<float> RetryDelayTimes ; TArray<float> HealthPercentages ; float DisconnectedDelay = 5 . 0 f ; bool bBeginDownloadsOnFirstGet = true ; float TcpZeroWindowMinimumSeconds = 2 0 . 0 f ; IBuildInstallerSharedContext* SharedContext = nullptr ; bool bRunOwnThread = true ;)",
    "insertText": "FCloudSourceConfig(TArray<FString> InCloudRoots) : CloudRoots(MoveTemp(InCloudRoots))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (const float RetryFloats [ ] = { 0 . 5 f,1 . 0 f,1 . 0 f,3 . 0 f,3 . 0 f,1 0 . 0 f,1 0 . 0 f,2 0 . 0 f,2 0 . 0 f,3 0 . 0 f } ; RetryDelayTimes .)",
    "insertText": "Empty(UE_ARRAY_COUNT(RetryFloats))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (RetryDelayTimes .)",
    "insertText": "Append(RetryFloats, UE_ARRAY_COUNT(RetryFloats))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const float HealthFloats [ ] = { 0 . 0 f,0 . 0 f,0 . 9 f,0 . 9 9 f,1 . 0 f } ;)",
    "insertText": "check((int32)EBuildPatchDownloadHealth::NUM_Values == UE_ARRAY_COUNT(HealthFloats))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (HealthPercentages .)",
    "insertText": "Empty(UE_ARRAY_COUNT(HealthFloats))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (HealthPercentages .)",
    "insertText": "Append(HealthFloats, UE_ARRAY_COUNT(HealthFloats))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; class FCloudChunkSourceFactory { public : ICloudChunkSource*)",
    "insertText": "Create(FCloudSourceConfig Configuration, IPlatform* Platform, IChunkStore* ChunkStore, IDownloadService* DownloadService, IChunkReferenceTracker* ChunkReferenceTracker, IChunkDataSerialization* ChunkDataSerialization, IMessagePump* MessagePump, IInstallerError* InstallerError, IDownloadConnectionCount* InConnectionCount, ICloudChunkSourceStat* CloudChunkSourceStat, IBuildManifestSet* ManifestSet, TSet<FGuid> InitialDownloadSet)"
  },
  {
    "label": "ICloudChunkSourceStat()",
    "kind": "Method",
    "detail": "Function (} ; class ICloudChunkSourceStat { public : ~)",
    "insertText": "ICloudChunkSourceStat()"
  },
  {
    "label": "OnDownloadRequested()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDownloadRequested(const FGuid& ChunkId)"
  },
  {
    "label": "OnDownloadSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadSuccess(const FGuid& ChunkId)"
  },
  {
    "label": "OnDownloadFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadFailed(const FGuid& ChunkId, const FString& Url)"
  },
  {
    "label": "OnDownloadCorrupt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadCorrupt(const FGuid& ChunkId, const FString& Url, EChunkLoadResult LoadResult)"
  },
  {
    "label": "OnDownloadAborted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadAborted(const FGuid& ChunkId, const FString& Url, double DownloadTimeMean, double DownloadTimeStd, double DownloadTime, double BreakingPoint)"
  },
  {
    "label": "OnReceivedDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedDataUpdated(int64 TotalBytes)"
  },
  {
    "label": "OnRequiredDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequiredDataUpdated(int64 TotalBytes)"
  },
  {
    "label": "OnDownloadHealthUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadHealthUpdated(EBuildPatchDownloadHealth DownloadHealth)"
  },
  {
    "label": "OnSuccessRateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSuccessRateUpdated(float SuccessRate)"
  },
  {
    "label": "OnActiveRequestCountUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveRequestCountUpdated(uint32 RequestCount)"
  },
  {
    "label": "OnAcceptedNewRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceptedNewRequirements(const TSet<FGuid>& ChunkIds)"
  }
]