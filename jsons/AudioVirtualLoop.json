[
  {
    "label": "FAudioVirtualLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVirtualLoop"
  },
  {
    "label": "IsInAudibleRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ActiveSound . h \" struct FAudioVirtualLoop { private : float TimeSinceLastUpdate ; float TimeVirtualized ; float UpdateInterval ; FActiveSound* ActiveSound ; bool)",
    "insertText": "IsInAudibleRange(const FActiveSound& InActiveSound, const FAudioDevice* InAudioDevice = nullptr)"
  },
  {
    "label": "FAudioVirtualLoop()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAudioVirtualLoop()"
  },
  {
    "label": "ShouldListenerMoveForceUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldListenerMoveForceUpdate(const FTransform& LastTransform, const FTransform& CurrentTransform)"
  },
  {
    "label": "Virtualize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Virtualize(const FActiveSound& InActiveSound, bool bDoRangeCheck, FAudioVirtualLoop& OutVirtualLoop)"
  },
  {
    "label": "Virtualize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Virtualize(const FActiveSound& InActiveSound, FAudioDevice& AudioDevice, bool bDoRangeCheck, FAudioVirtualLoop& OutVirtualLoop)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetActiveSound()",
    "kind": "Method",
    "detail": "Function (FActiveSound&)",
    "insertText": "GetActiveSound()"
  },
  {
    "label": "GetTimeVirtualized()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeVirtualized()"
  },
  {
    "label": "GetUpdateInterval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUpdateInterval()"
  },
  {
    "label": "CalculateUpdateInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateUpdateInterval()"
  },
  {
    "label": "UpdateFocusData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFocusData(float DeltaTime)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(float DeltaTime, bool bForceUpdate)"
  }
]