[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TraceConfigCategoryFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_CONFIG_CATEGORY_FILTER_H_ # define BASE_TRACE_EVENT_TRACE_CONFIG_CATEGORY_FILTER_H_ # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / values . h \" namespace base { namespace trace_event { class BASE_EXPORT TraceConfigCategoryFilter { public : using StringList = std::vector<std::string> ;)",
    "insertText": "TraceConfigCategoryFilter()"
  },
  {
    "label": "TraceConfigCategoryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConfigCategoryFilter(const TraceConfigCategoryFilter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TraceConfigCategoryFilter&)",
    "insertText": "operator(const TraceConfigCategoryFilter& rhs)"
  },
  {
    "label": "InitializeFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromString(const StringPiece& category_filter_string)"
  },
  {
    "label": "InitializeFromConfigDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromConfigDict(const Value& dict)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const TraceConfigCategoryFilter& config)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsCategoryGroupEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryGroupEnabled(const StringPiece& category_group_name)"
  },
  {
    "label": "IsCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryEnabled(const StringPiece& category_name)"
  },
  {
    "label": "ToDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDict(Value::Dict& dict)"
  },
  {
    "label": "ToFilterString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToFilterString()"
  },
  {
    "label": "IsCategoryNameAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryNameAllowed(StringPiece str)"
  },
  {
    "label": "included_categories()",
    "kind": "Method",
    "detail": "Function (const StringList&)",
    "insertText": "included_categories()"
  },
  {
    "label": "SetCategoriesFromExcludedList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCategoriesFromExcludedList(const Value& excluded_list)"
  },
  {
    "label": "AddCategoriesToDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCategoriesToDict(const StringList& categories, const char* param, Value::Dict& dict)"
  },
  {
    "label": "WriteCategoryFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCategoryFilterString(const StringList& values, std::string* out, bool included)"
  }
]