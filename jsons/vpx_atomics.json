[
  {
    "label": "vpx_atomic_int",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_atomic_int"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_UTIL_VPX_ATOMICS_H_ # define VPX_VPX_UTIL_VPX_ATOMICS_H_ # include \" . / vpx_config . h \" # ifdef __cplusplus \" C \" { # endif # if CONFIG_OS_SUPPORT&& CONFIG_MULTITHREAD # if !)",
    "insertText": "defined(__has_builtin) #define __has_builtin(x) 0 #endif #if (__has_builtin(__atomic_load_n)) || \\ (defined(__GNUC__) && \\ (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 7))) #define VPX_USE_ATOMIC_BUILTINS #else #if defined(_MSC_VER) #define vpx_atomic_memory_barrier()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else #if VPX_ARCH_X86 || VPX_ARCH_X86_64 #define vpx_atomic_memory_barrier() __asm__ __volatile__(\"\" ::: \"memory\") #elif VPX_ARCH_ARM #define vpx_atomic_memory_barrier() __asm__ __volatile__(\"dmb ish\" ::: \"memory\") #elif VPX_ARCH_MIPS #define vpx_atomic_memory_barrier() __asm__ __volatile__(\"sync\" ::: \"memory\")"
  },
  {
    "label": "VPX_ATOMIC_INIT()",
    "kind": "Method",
    "detail": "Function (volatile int value ; } vpx_atomic_int ; # define)",
    "insertText": "VPX_ATOMIC_INIT(num)"
  },
  {
    "label": "vpx_atomic_init()",
    "kind": "Method",
    "detail": "Function (num } void)",
    "insertText": "vpx_atomic_init(vpx_atomic_int *atomic, int value)"
  },
  {
    "label": "vpx_atomic_store_release()",
    "kind": "Method",
    "detail": "Function (atomic -> value = value ; } void)",
    "insertText": "vpx_atomic_store_release(vpx_atomic_int *atomic, int value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VPX_USE_ATOMIC_BUILTINS) __atomic_store_n(&atomic->value, value, __ATOMIC_RELEASE)"
  },
  {
    "label": "vpx_atomic_memory_barrier()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "vpx_atomic_memory_barrier()"
  },
  {
    "label": "vpx_atomic_load_acquire()",
    "kind": "Method",
    "detail": "Function (atomic -> value = value ; # endif } int)",
    "insertText": "vpx_atomic_load_acquire(const vpx_atomic_int *atomic)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VPX_USE_ATOMIC_BUILTINS) return __atomic_load_n(&atomic->value, __ATOMIC_ACQUIRE)"
  }
]