[
  {
    "label": "TestLauncherDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLauncherDelegate"
  },
  {
    "label": "TestLauncher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLauncher"
  },
  {
    "label": "LaunchChildGTestProcessFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LaunchChildGTestProcessFlags"
  },
  {
    "label": "StdioRedirect",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StdioRedirect"
  },
  {
    "label": "LaunchOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LaunchOptions"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "ResultWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultWatcher"
  },
  {
    "label": "GetTests()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_TEST_LAUNCHER_H_ # define BASE_TEST_LAUNCHER_TEST_LAUNCHER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<set> # include<string> # include<unordered_set> # include<vector> # include \" base / command_line . h \" # include \" base / memory / raw_ptr . h \" # include \" base / process / launch . h \" # include \" base / test / gtest_util . h \" # include \" base / test / launcher / test_result . h \" # include \" base / test / launcher / test_results_tracker . h \" # include \" base / threading / platform_thread . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time . h \" # include \" base / timer / timer . h \" # include \" build / build_config . h \" namespace base { const char kGTestFilterFlag [ ] ; const char kGTestFlagfileFlag [ ] ; const char kGTestHelpFlag [ ] ; const char kGTestListTestsFlag [ ] ; const char kGTestRepeatFlag [ ] ; const char kGTestRunDisabledTestsFlag [ ] ; const char kGTestOutputFlag [ ] ; const char kGTestShuffleFlag [ ] ; const char kGTestRandomSeedFlag [ ] ; const char kIsolatedScriptRunDisabledTestsFlag [ ] ; const char kIsolatedScriptTestFilterFlag [ ] ; const char kIsolatedScriptTestRepeatFlag [ ] ; class TestLauncherDelegate { public : bool)",
    "insertText": "GetTests(std::vector<TestIdentifier>* output)"
  },
  {
    "label": "ProcessTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTestResults(std::vector<TestResult>& test_results, TimeDelta elapsed_time)"
  },
  {
    "label": "GetCommandLine()",
    "kind": "Method",
    "detail": "Function (} CommandLine)",
    "insertText": "GetCommandLine(const std::vector<std::string>& test_names, const FilePath& temp_dir, FilePath* output_file)"
  },
  {
    "label": "OnTestTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestTimedOut(const CommandLine& cmd_line)"
  },
  {
    "label": "GetWrapper()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "GetWrapper()"
  },
  {
    "label": "GetLaunchOptions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLaunchOptions()"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "GetBatchSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBatchSize()"
  },
  {
    "label": "ShouldRunTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunTest(const TestIdentifier& test)"
  },
  {
    "label": "TestLauncherDelegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "TestLauncherDelegate()"
  },
  {
    "label": "USE_JOB_OBJECTS()",
    "kind": "Method",
    "detail": "Function (} ; class TestLauncher { public : enum LaunchChildGTestProcessFlags {)",
    "insertText": "USE_JOB_OBJECTS(1 << 0), ALLOW_BREAKAWAY_FROM_JOB = (1 << 1)"
  },
  {
    "label": "LaunchOptions()",
    "kind": "Method",
    "detail": "Function (enum StdioRedirect { AUTO,ALWAYS,NEVER } ; struct LaunchOptions {)",
    "insertText": "LaunchOptions()"
  },
  {
    "label": "LaunchOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchOptions(const LaunchOptions& other)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int flags = 0 ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "TestLauncher()",
    "kind": "Method",
    "detail": "Function (base::HandlesToInheritVector handles_to_inherit ; # else FileHandleMappingVector fds_to_remap ; # endif } ;)",
    "insertText": "TestLauncher(TestLauncherDelegate* launcher_delegate, size_t parallel_jobs, size_t retry_limit = 1U)"
  },
  {
    "label": "TestLauncher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLauncher(const TestLauncher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestLauncher&)",
    "insertText": "operator(const TestLauncher&)"
  },
  {
    "label": "TestLauncher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestLauncher()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Run(CommandLine* command_line = nullptr)"
  },
  {
    "label": "LaunchChildGTestProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchChildGTestProcess(scoped_refptr<TaskRunner> task_runner, const std::vector<std::string>& test_names, const FilePath& task_temp_dir, const FilePath& child_temp_dir)"
  },
  {
    "label": "OnTestFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestFinished(const TestResult& result)"
  },
  {
    "label": "SupportsPerChildTempDirs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPerChildTempDirs()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } private : [ [ nodiscard ] ] bool)",
    "insertText": "Init(CommandLine* command_line)"
  },
  {
    "label": "InitTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitTests()"
  },
  {
    "label": "ShuffleTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShuffleTests(CommandLine* command_line)"
  },
  {
    "label": "ProcessAndValidateTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAndValidateTests()"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTests()"
  },
  {
    "label": "PrintFuzzyMatchingTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFuzzyMatchingTestNames()"
  },
  {
    "label": "RunRetryTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunRetryTests()"
  },
  {
    "label": "CombinePositiveTestFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombinePositiveTestFilters(std::vector<std::string> filter_a, std::vector<std::string> filter_b)"
  },
  {
    "label": "OnTestIterationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationStart()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) void OnShutdownPipeReadable()"
  },
  {
    "label": "MaybeSaveSummaryAsJSON()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MaybeSaveSummaryAsJSON(const std::vector<std::string>& additional_tags)"
  },
  {
    "label": "OnTestIterationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationFinished()"
  },
  {
    "label": "OnOutputTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputTimeout()"
  },
  {
    "label": "CreateAndStartThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndStartThreadPool(size_t num_parallel_jobs)"
  },
  {
    "label": "ProcessTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTestResults(const std::vector<std::string>& test_names, const FilePath& result_file, const std::string& output, TimeDelta elapsed_time, int exit_code, bool was_timeout, PlatformThreadId thread_id, int process_num, int leaked_items)"
  },
  {
    "label": "CollectTests()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "CollectTests()"
  },
  {
    "label": "ResultWatcher()",
    "kind": "Method",
    "detail": "Function (ThreadChecker thread_checker_ ; raw_ptr<TestLauncherDelegate> launcher_delegate_ ; int32_t total_shards_ ; int32_t shard_index_ ; int cycles_ ; bool has_at_least_one_positive_filter_ ; std::vector<std::string> positive_test_filter_ ; std::vector<std::string> negative_test_filter_ ; class TestInfo ; std::vector<TestInfo> tests_ ; size_t broken_threshold_ ; size_t test_started_count_ ; size_t test_finished_count_ ; size_t test_success_count_ ; size_t test_broken_count_ ; size_t retries_left_ ; size_t retry_limit_ ; size_t output_bytes_limit_ ; bool force_run_broken_tests_ ; std::unordered_set<std::string> tests_to_retry_ ; TestResultsTracker results_tracker_ ; DelayTimer watchdog_timer_ ; size_t parallel_jobs_ ; StdioRedirect print_test_stdio_ ; bool skip_disabled_tests_ ; bool stop_on_failure_ ; FilePath summary_path_ ; FilePath trace_path_ ; bool redirect_stdio_ ; int repeats_per_iteration_ = 1 ; } ; class ResultWatcher { public :)",
    "insertText": "ResultWatcher(FilePath result_file, size_t num_tests)"
  },
  {
    "label": "PollUntilDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollUntilDone(TimeDelta timeout_per_test)"
  },
  {
    "label": "WaitWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitWithTimeout(TimeDelta timeout)"
  },
  {
    "label": "PollOnce()",
    "kind": "Method",
    "detail": "Function (private : TimeDelta)",
    "insertText": "PollOnce(TimeDelta timeout_per_test)"
  },
  {
    "label": "LatestCompletionTimestamp()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "LatestCompletionTimestamp(const std::vector<TestResult>& test_results)"
  },
  {
    "label": "Minutes()",
    "kind": "Method",
    "detail": "Function (FilePath result_file_ ; size_t num_tests_ ; TimeDelta kDaylightSavingsThreshold =)",
    "insertText": "Minutes(50)"
  },
  {
    "label": "NumParallelJobs()",
    "kind": "Method",
    "detail": "Function (} ; size_t)",
    "insertText": "NumParallelJobs(unsigned int cores_per_job)"
  },
  {
    "label": "GetTestOutputSnippet()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestOutputSnippet(const TestResult& result, const std::string& full_output)"
  },
  {
    "label": "TruncateSnippetFocused()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TruncateSnippetFocused(const base::StringPiece snippet, size_t byte_limit)"
  }
]