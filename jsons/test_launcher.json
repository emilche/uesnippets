[
  {
    "label": "TestLauncherDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLauncherDelegate"
  },
  {
    "label": "TestLauncher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLauncher"
  },
  {
    "label": "LaunchChildGTestProcessFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LaunchChildGTestProcessFlags"
  },
  {
    "label": "StdioRedirect",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StdioRedirect"
  },
  {
    "label": "LaunchOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LaunchOptions"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "ResultWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultWatcher"
  },
  {
    "label": "ShouldRunTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunTest(const TestIdentifier& test)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run(CommandLine* command_line = nullptr)"
  },
  {
    "label": "LaunchChildGTestProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchChildGTestProcess(\n      scoped_refptr<TaskRunner> task_runner,\n      const std::vector<std::string>& test_names,\n      const FilePath& task_temp_dir,\n      const FilePath& child_temp_dir)"
  },
  {
    "label": "OnTestFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestFinished(const TestResult& result)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(CommandLine* command_line)"
  },
  {
    "label": "InitTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitTests()"
  },
  {
    "label": "ShuffleTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShuffleTests(CommandLine* command_line)"
  },
  {
    "label": "ProcessAndValidateTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAndValidateTests()"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTests()"
  },
  {
    "label": "PrintFuzzyMatchingTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFuzzyMatchingTestNames()"
  },
  {
    "label": "RunRetryTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunRetryTests()"
  },
  {
    "label": "CombinePositiveTestFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombinePositiveTestFilters(std::vector<std::string> filter_a,\n                                  std::vector<std::string> filter_b)"
  },
  {
    "label": "OnTestIterationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationStart()"
  },
  {
    "label": "OnShutdownPipeReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdownPipeReadable()"
  },
  {
    "label": "MaybeSaveSummaryAsJSON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSaveSummaryAsJSON(const std::vector<std::string>& additional_tags)"
  },
  {
    "label": "OnTestIterationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationFinished()"
  },
  {
    "label": "OnOutputTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputTimeout()"
  },
  {
    "label": "CreateAndStartThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndStartThreadPool(size_t num_parallel_jobs)"
  },
  {
    "label": "ProcessTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTestResults(const std::vector<std::string>& test_names,\n                          const FilePath& result_file,\n                          const std::string& output,\n                          TimeDelta elapsed_time,\n                          int exit_code,\n                          bool was_timeout,\n                          PlatformThreadId thread_id,\n                          int process_num,\n                          int leaked_items)"
  },
  {
    "label": "CollectTests()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "CollectTests()"
  },
  {
    "label": "ResultWatcher()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ResultWatcher(FilePath result_file, size_t num_tests)"
  },
  {
    "label": "PollUntilDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollUntilDone(TimeDelta timeout_per_test)"
  },
  {
    "label": "PollOnce()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "PollOnce(TimeDelta timeout_per_test)"
  },
  {
    "label": "LatestCompletionTimestamp()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "LatestCompletionTimestamp(const std::vector<TestResult>& test_results)"
  },
  {
    "label": "NumParallelJobs()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumParallelJobs(unsigned int cores_per_job)"
  },
  {
    "label": "GetTestOutputSnippet()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestOutputSnippet(const TestResult& result,\n                                 const std::string& full_output)"
  },
  {
    "label": "TruncateSnippetFocused()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TruncateSnippetFocused(const base::StringPiece snippet,\n                                   size_t byte_limit)"
  }
]