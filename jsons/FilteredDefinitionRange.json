[
  {
    "label": "CDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDefinition"
  },
  {
    "label": "TFilteredDefinitionRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFilteredDefinitionRange"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Semantics / Definition . h \" namespace uLang { class CDefinition ; template<FilterClass> class TFilteredDefinitionRange { public : class Iterator { public :)",
    "insertText": "Iterator(const TSRef<CDefinition>* Current, const TSRef<CDefinition>* End) : _Current(Current) , _End(End)"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNext()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Iterator& Lhs, const Iterator& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ULANG_FORCEINLINE const TSRef<FilterClass>&)",
    "insertText": "operator()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_Current != _End && (*_Current)->IsA<FilterClass>(), \"Invalid iterator state\")"
  },
  {
    "label": "TFilteredDefinitionRange()",
    "kind": "Method",
    "detail": "Function (+ + _Current ; } } } ;)",
    "insertText": "TFilteredDefinitionRange(const TSRef<CDefinition>* Begin, const TSRef<CDefinition>* End) : _Begin(Begin), _End(End)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  }
]