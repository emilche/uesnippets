[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "NodeKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NodeKind"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_TWINE_H # define LLVM_ADT_TWINE_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include<cassert> # include<string> namespace llvm { class raw_ostream ; class Twine { enum NodeKind : unsigned char { NullKind,EmptyKind,TwineKind,CStringKind,StdStringKind,StringRefKind,SmallStringKind,CharKind,DecUIKind,DecIKind,DecULKind,DecLKind,DecULLKind,DecLLKind,UHexKind } ; union Child { const Twine* twine ; const char* cString ; const std::string* stdString ; const StringRef* stringRef ; const SmallVectorImpl<char>* smallString ; char character ; unsigned int decUI ; int decI ; const unsigned long* decUL ; const long* decL ; const unsigned long long* decULL ; const long long* decLL ; const uint64_t* uHex ; } ; private : Child LHS ; Child RHS ; NodeKind LHSKind ; NodeKind RHSKind ; private :)",
    "insertText": "Twine(NodeKind Kind) : LHSKind(Kind), RHSKind(EmptyKind)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isNullary() && \"Invalid kind!\")"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const Twine &LHS, const Twine &RHS) : LHSKind(TwineKind), RHSKind(TwineKind)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (this -> LHS . twine =& LHS ; this -> RHS . twine =& RHS ;)",
    "insertText": "assert(isValid() && \"Invalid twine!\")"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(Child LHS, NodeKind LHSKind, Child RHS, NodeKind RHSKind) : LHS(LHS), RHS(RHS), LHSKind(LHSKind), RHSKind(RHSKind)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Twine&)",
    "insertText": "operator(const Twine &Other)"
  },
  {
    "label": "isNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNull()"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "isNullary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNullary()"
  },
  {
    "label": "isUnary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnary()"
  },
  {
    "label": "isBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBinary()"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "printOneChildRepr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printOneChildRepr(raw_ostream &OS, Child Ptr, NodeKind Kind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Twine() : LHSKind(EmptyKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const Twine &)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Twine(const char *Str) : RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const std::string &Str) : LHSKind(StdStringKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const StringRef &Str) : LHSKind(StringRefKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const SmallVectorImpl<char> &Str) : LHSKind(SmallStringKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(char Val) : LHSKind(CharKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . character = Val ; })",
    "insertText": "Twine(signed char Val) : LHSKind(CharKind), RHSKind(EmptyKind)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (LHS . character = static_cast<)",
    "insertText": "char(Val)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(unsigned char Val) : LHSKind(CharKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(unsigned Val) : LHSKind(DecUIKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decUI = Val ; })",
    "insertText": "Twine(int Val) : LHSKind(DecIKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decI = Val ; })",
    "insertText": "Twine(const unsigned long &Val) : LHSKind(DecULKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decUL =& Val ; })",
    "insertText": "Twine(const long &Val) : LHSKind(DecLKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decL =& Val ; })",
    "insertText": "Twine(const unsigned long long &Val) : LHSKind(DecULLKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decULL =& Val ; })",
    "insertText": "Twine(const long long &Val) : LHSKind(DecLLKind), RHSKind(EmptyKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (LHS . decLL =& Val ; })",
    "insertText": "Twine(const char *LHS, const StringRef &RHS) : LHSKind(CStringKind), RHSKind(StringRefKind)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Twine(const StringRef &LHS, const char *RHS) : LHSKind(StringRefKind), RHSKind(CStringKind)"
  },
  {
    "label": "createNull()",
    "kind": "Method",
    "detail": "Function (} Twine)",
    "insertText": "createNull()"
  },
  {
    "label": "utohexstr()",
    "kind": "Method",
    "detail": "Function (} Twine)",
    "insertText": "utohexstr(const uint64_t &Val)"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (Child LHS,RHS ; LHS . uHex =& Val ; RHS . twine = nullptr ; return)",
    "insertText": "Twine(LHS, UHexKind, RHS, EmptyKind)"
  },
  {
    "label": "isTriviallyEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTriviallyEmpty()"
  },
  {
    "label": "isSingleStringRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSingleStringRef()"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "str()"
  },
  {
    "label": "toVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toVector(SmallVectorImpl<char> &Out)"
  },
  {
    "label": "getSingleStringRef()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getSingleStringRef()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isSingleStringRef() &&\"This cannot be had as a single stringref!\")"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Out of sync with isSingleStringRef\")"
  },
  {
    "label": "toStringRef()",
    "kind": "Method",
    "detail": "Function (} } StringRef)",
    "insertText": "toStringRef(SmallVectorImpl<char> &Out)"
  },
  {
    "label": "toVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toVector(Out)"
  },
  {
    "label": "toNullTerminatedStringRef()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "toNullTerminatedStringRef(SmallVectorImpl<char> &Out)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "printRepr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printRepr(raw_ostream &OS)"
  },
  {
    "label": "dumpRepr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpRepr()"
  },
  {
    "label": "concat()",
    "kind": "Method",
    "detail": "Function (} ; Twine)",
    "insertText": "concat(const Twine &Suffix)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Child NewLHS,NewRHS ; NewLHS . twine = this ; NewRHS . twine =& Suffix ; NodeKind NewLHSKind = TwineKind,NewRHSKind = TwineKind ;)",
    "insertText": "if(isUnary())"
  },
  {
    "label": "getLHSKind()",
    "kind": "Method",
    "detail": "Function (NewLHS = LHS ; NewLHSKind =)",
    "insertText": "getLHSKind()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Suffix.isUnary())"
  },
  {
    "label": "Twine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Twine(NewLHS, NewLHSKind, NewRHS, NewRHSKind)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Twine)",
    "insertText": "operator(const Twine &LHS, const Twine &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Twine)",
    "insertText": "operator(const char *LHS, const StringRef &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Twine)",
    "insertText": "operator(const StringRef &LHS, const char *RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const Twine &RHS)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (RHS .)",
    "insertText": "print(OS)"
  }
]