[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(FAllocationContext Context, VValue Value)"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (uint32 Num = 0 ; uint32 Capacity = 4 ; VBuffer NewBuffer =)",
    "insertText": "VBuffer(Context, Num, Capacity, DetermineArrayType(Value))"
  },
  {
    "label": "SetBufferWithStoreBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferWithStoreBarrier(Context, NewBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(GetArrayType() != EArrayType::VValue && GetArrayType() != DetermineArrayType(Value))"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (uint32 Capacity = this ->)",
    "insertText": "Capacity()"
  },
  {
    "label": "ConvertDataToVValues()",
    "kind": "Method",
    "detail": "Function (Capacity = Capacity* 2 ; })",
    "insertText": "ConvertDataToVValues(Context, Capacity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Num() == Capacity())"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (VBuffer NewBuffer =)",
    "insertText": "VBuffer(Context, Num(), NewCapacity, GetArrayType())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(NewBuffer.GetData(), GetData(), ByteLength())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint32 Index =)",
    "insertText": "Num()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Index < Capacity())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(Context, Index, Value)"
  },
  {
    "label": "StoreStoreFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreStoreFence()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (NumValues)",
    "insertText": "Get().GetHeader()"
  },
  {
    "label": "SetNullTerminator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNullTerminator()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "Append(FAllocationContext Context, VArrayBase& Array)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const uint32 NewNumValues =)",
    "insertText": "Num() + Array.Num()"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (Capacity = NewNumValues* 2 ; VBuffer NewBuffer =)",
    "insertText": "VBuffer(Context, NewNumValues, Capacity, GetArrayType())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memcpy(GetData<T>() + Num(), Array.GetData<T>(), Array.ByteLength())"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (} } template<> void VMutableArray::Append<TWriteBarrier<)",
    "insertText": "VValue(FAllocationContext Context, VArrayBase& Array)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(Context, Array.GetValue(Index))"
  },
  {
    "label": "Concat()",
    "kind": "Method",
    "detail": "Function (} } VMutableArray&)",
    "insertText": "Concat(FAllocationContext Context, VArrayBase& Lhs, VArrayBase& Rhs)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (VMutableArray& NewArray =)",
    "insertText": "New(Context, 0, Lhs.Num() + Rhs.Num(), DetermineCombinedType(Lhs.GetArrayType(), Rhs.GetArrayType()))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NewArray .)",
    "insertText": "Append(Context, Lhs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NewArray .)",
    "insertText": "Append(Context, Rhs)"
  }
]