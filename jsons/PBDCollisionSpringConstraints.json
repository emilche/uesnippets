[
  {
    "label": "FPBDCollisionSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSpringConstraints"
  },
  {
    "label": "MinFrictionCoefficient()",
    "kind": "Method",
    "detail": "Function (# pragma once # if ! COMPILE_WITHOUT_UNREAL_SUPPORT # include \" Chaos / PBDCollisionSpringConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FPBDCollisionSpringConstraints : public FPBDCollisionSpringConstraintsBase { typedef FPBDCollisionSpringConstraintsBase Base ; public : FSolverReal)",
    "insertText": "MinFrictionCoefficient(FSolverReal)"
  },
  {
    "label": "MaxFrictionCoefficient()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxFrictionCoefficient(FSolverReal)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (int32 DefaultSelfCollisionDisableNeighborDistance = 5 ; bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDCollisionSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDCollisionSpringConstraints(const int32 InOffset, const int32 InNumParticles, const FTriangleMesh& InTriangleMesh, const TArray<FSolverVec3>* InRestPositions, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const TMap<FString, TConstArrayView<int32>>& FaceIntMaps, const FCollectionPropertyConstFacade& PropertyCollection) : Base( InOffset, InNumParticles, InTriangleMesh, InRestPositions, GenerateDisabledCollisionElements(InTriangleMesh, PropertyCollection), WeightMaps.FindRef(GetSelfCollisionKinematicColliderFrictionString(PropertyCollection, SelfCollisionKinematicColliderFrictionName.ToString())), WeightMaps.FindRef(GetSelfCollisionThicknessString(PropertyCollection, SelfCollisionThicknessName.ToString())), FaceIntMaps.FindRef(GetSelfCollisionLayersString(PropertyCollection, SelfCollisionLayersName.ToString())), FSolverVec2::Max(FSolverVec2(GetWeightedFloatSelfCollisionThickness(PropertyCollection, Base::BackCompatThickness)), FSolverVec2(0.f)), (FSolverReal)FMath::Clamp(GetSelfCollisionStiffness(PropertyCollection, Base::BackCompatStiffness), 0.f, 1.f), FMath::Clamp((FSolverReal)GetSelfCollisionFriction(PropertyCollection, Base::BackCompatFrictionCoefficient), MinFrictionCoefficient, MaxFrictionCoefficient), GetSelfCollideAgainstKinematicCollidersOnly(PropertyCollection, false), (FSolverReal)FMath::Max(GetSelfCollisionKinematicColliderThickness(PropertyCollection, Base::DefaultKinematicColliderThickness), 0.f), (FSolverReal)FMath::Clamp((FSolverReal)GetSelfCollisionKinematicColliderStiffness(PropertyCollection, Base::DefaultKinematicColliderStiffness), 0.f, 1.f), FSolverVec2(GetWeightedFloatSelfCollisionKinematicColliderFriction(PropertyCollection, Base::DefaultKinematicColliderFrictionCoefficient)).ClampAxes(MinFrictionCoefficient, MaxFrictionCoefficient), (FSolverReal)GetSelfCollisionProximityStiffness(PropertyCollection, Base::DefaultProximityStiffness)) , SelfCollisionThicknessIndex(PropertyCollection) , SelfCollisionStiffnessIndex(PropertyCollection) , SelfCollisionFrictionIndex(PropertyCollection) , SelfCollisionProximityStiffnessIndex(PropertyCollection) , SelfCollisionLayersIndex(PropertyCollection) , SelfCollideAgainstKinematicCollidersOnlyIndex(PropertyCollection) , SelfCollisionKinematicColliderThicknessIndex(PropertyCollection) , SelfCollisionKinematicColliderStiffnessIndex(PropertyCollection) , SelfCollisionKinematicColliderFrictionIndex(PropertyCollection)"
  },
  {
    "label": "FPBDCollisionSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDCollisionSpringConstraints(const int32 InOffset, const int32 InNumParticles, const FTriangleMesh& InTriangleMesh, const TArray<FSolverVec3>* InRestPositions, TSet<TVec2<int32>>&& InDisabledCollisionElements, const FSolverReal InThickness = Base::BackCompatThickness, const FSolverReal InStiffness = Base::BackCompatStiffness, const FSolverReal InFrictionCoefficient = Base::BackCompatFrictionCoefficient) : Base( InOffset, InNumParticles, InTriangleMesh, InRestPositions, MoveTemp(InDisabledCollisionElements), TConstArrayView<FRealSingle>(), TConstArrayView<FRealSingle>(), TConstArrayView<int32>(), FSolverVec2(InThickness), InStiffness, InFrictionCoefficient) , SelfCollisionThicknessIndex(ForceInit) , SelfCollisionStiffnessIndex(ForceInit) , SelfCollisionFrictionIndex(ForceInit) , SelfCollisionProximityStiffnessIndex(ForceInit) , SelfCollisionLayersIndex(ForceInit) , SelfCollideAgainstKinematicCollidersOnlyIndex(ForceInit) , SelfCollisionKinematicColliderThicknessIndex(ForceInit) , SelfCollisionKinematicColliderStiffnessIndex(ForceInit) , SelfCollisionKinematicColliderFrictionIndex(ForceInit)"
  },
  {
    "label": "FPBDCollisionSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDCollisionSpringConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} using Base::Init ; void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const TMap<FString, TConstArrayView<int32>>& FaceIntMaps)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2 WeightedValue =)",
    "insertText": "Max(FSolverVec2(GetWeightedFloatSelfCollisionThickness(PropertyCollection)), FSolverVec2(0.f))"
  },
  {
    "label": "GetSelfCollisionThicknessString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetSelfCollisionThicknessString(PropertyCollection)"
  },
  {
    "label": "FPBDFlatWeightMap()",
    "kind": "Method",
    "detail": "Function (ThicknessWeighted =)",
    "insertText": "FPBDFlatWeightMap(WeightedValue, WeightMaps.FindRef(WeightMapName), GetNumParticles())"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { ThicknessWeighted .)",
    "insertText": "SetWeightedValue(WeightedValue)"
  },
  {
    "label": "GetMaxThickness()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS Thickness =)",
    "insertText": "GetMaxThickness()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS })",
    "insertText": "if(IsSelfCollisionStiffnessMutable(PropertyCollection))"
  },
  {
    "label": "Stiffness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stiffness(FSolverReal)FMath::Clamp(GetSelfCollisionStiffness(PropertyCollection), 0.f, 1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionFrictionMutable(PropertyCollection))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FrictionCoefficient =)",
    "insertText": "Clamp((FSolverReal)GetSelfCollisionFriction(PropertyCollection), MinFrictionCoefficient, MaxFrictionCoefficient)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionProximityStiffnessMutable(PropertyCollection))"
  },
  {
    "label": "GetSelfCollisionProximityStiffness()",
    "kind": "Method",
    "detail": "Function (ProximityStiffness =)",
    "insertText": "GetSelfCollisionProximityStiffness(PropertyCollection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionLayersMutable(PropertyCollection))"
  },
  {
    "label": "GetSelfCollisionLayersString()",
    "kind": "Method",
    "detail": "Function (const FString& FaceIntMapName =)",
    "insertText": "GetSelfCollisionLayersString(PropertyCollection)"
  },
  {
    "label": "UpdateCollisionLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionLayers(FaceIntMaps.FindRef(FaceIntMapName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(IsSelfCollideAgainstKinematicCollidersOnlyMutable(PropertyCollection))"
  },
  {
    "label": "GetSelfCollideAgainstKinematicCollidersOnly()",
    "kind": "Method",
    "detail": "Function (bOnlyCollideKinematics =)",
    "insertText": "GetSelfCollideAgainstKinematicCollidersOnly(PropertyCollection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionKinematicColliderThicknessMutable(PropertyCollection))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (KinematicColliderThickness =)",
    "insertText": "Max(GetSelfCollisionKinematicColliderThickness(PropertyCollection), 0.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionKinematicColliderStiffnessMutable(PropertyCollection))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (KinematicColliderStiffness =)",
    "insertText": "Clamp((FSolverReal)GetSelfCollisionKinematicColliderStiffness(PropertyCollection), 0.f, 1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsSelfCollisionKinematicColliderFrictionMutable(PropertyCollection))"
  },
  {
    "label": "FSolverVec2()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2 WeightedValue =)",
    "insertText": "FSolverVec2(GetWeightedFloatSelfCollisionKinematicColliderFriction(PropertyCollection)).ClampAxes(MinFrictionCoefficient, MaxFrictionCoefficient)"
  },
  {
    "label": "GetSelfCollisionKinematicColliderFrictionString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetSelfCollisionKinematicColliderFrictionString(PropertyCollection)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(PropertyCollection, TMap<FString, TConstArrayView<FRealSingle>>(), TMap<FString, TConstArrayView<int32>>())"
  },
  {
    "label": "GenerateDisabledCollisionElements()",
    "kind": "Method",
    "detail": "Function (} private : using Base::ThicknessWeighted ; using Base::Stiffness ; using Base::FrictionCoefficient ; using Base::ProximityStiffness ; TSet<TVec2<int32>>)",
    "insertText": "GenerateDisabledCollisionElements(const FTriangleMesh& TriangleMesh, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FPBDCollisionSpringConstraints_GenerateDisabledCollisionElements)"
  },
  {
    "label": "GetSelfCollisionDisableNeighborDistance()",
    "kind": "Method",
    "detail": "Function (const int32 DisabledCollisionElementsN =)",
    "insertText": "GetSelfCollisionDisableNeighborDistance(PropertyCollection, DefaultSelfCollisionDisableNeighborDistance)"
  },
  {
    "label": "GetVertexRange()",
    "kind": "Method",
    "detail": "Function (TSet<TVec2<int32>> DisabledCollisionElements ; const TVec2<int32> Range = TriangleMesh .)",
    "insertText": "GetVertexRange()"
  },
  {
    "label": "GetNRing()",
    "kind": "Method",
    "detail": "Function (const TSet<int32> Neighbors = TriangleMesh .)",
    "insertText": "GetNRing(Index, DisabledCollisionElementsN)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DisabledCollisionElements .)",
    "insertText": "Emplace(TVec2<int32>(Index, Element))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DisabledCollisionElements .)",
    "insertText": "Emplace(TVec2<int32>(Element, Index))"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} } return DisabledCollisionElements ; })",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionThickness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionFriction, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionProximityStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(SelfCollisionDisableNeighborDistance, int32)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionLayers, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollideAgainstKinematicCollidersOnly, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionKinematicColliderThickness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionKinematicColliderStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionKinematicColliderFriction, float)"
  }
]