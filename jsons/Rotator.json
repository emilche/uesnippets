[
  {
    "label": "TRotator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRotator"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "TRotator(T InF)"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "TRotator( T InPitch, T InYaw, T InRoll )"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "TRotator( EForceInit )"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "TRotator( const TQuat<T>& Quat )"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TRotator(Pitch * Scale, Yaw * Scale, Roll * Scale)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TRotator)",
    "insertText": "Add( T DeltaPitch, T DeltaYaw, T DeltaRoll )"
  },
  {
    "label": "SetComponentForAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentForAxis(EAxis::Type Axis, T Component)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize()"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromString( const FString& InSourceString )"
  },
  {
    "label": "SerializeCompressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompressed( FArchive& Ar )"
  },
  {
    "label": "SerializeCompressedShort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompressedShort( FArchive& Ar )"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize( FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess )"
  },
  {
    "label": "ClampAxis()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "ClampAxis( T Angle )"
  },
  {
    "label": "of()",
    "kind": "Method",
    "detail": "Function (range)",
    "insertText": "of(-180, 180].\n\t *\n\t * @param Angle The Angle to clamp.\n\t * @return The clamped angle.\n\t */\n\tstatic T NormalizeAxis( T Angle )"
  },
  {
    "label": "CompressAxisToByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "CompressAxisToByte( T Angle )"
  },
  {
    "label": "DecompressAxisFromByte()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DecompressAxisFromByte( uint8 Angle )"
  },
  {
    "label": "CompressAxisToShort()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "CompressAxisToShort( T Angle )"
  },
  {
    "label": "DecompressAxisFromShort()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DecompressAxisFromShort( uint16 Angle )"
  },
  {
    "label": "MakeFromEuler()",
    "kind": "Method",
    "detail": "Function (TRotator)",
    "insertText": "MakeFromEuler( const TVector<T>& Euler )"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TRotator( Pitch+R.Pitch, Yaw+R.Yaw, Roll+R.Roll )"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TRotator( Pitch-R.Pitch, Yaw-R.Yaw, Roll-R.Roll )"
  },
  {
    "label": "DiagnosticCheckNaN()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "DiagnosticCheckNaN()"
  },
  {
    "label": "TRotator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TRotator(180.0f - Pitch,Yaw + 180.0f, Roll + 180.0f)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (UE)",
    "insertText": "UE_DECLARE_LWC_TYPE(Rotator, 3)"
  },
  {
    "label": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG(Ar, Rotator, Rotator3f, Rotator3d)"
  },
  {
    "label": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UE_SERIALIZE_VARIANT_FROM_MISMATCHED_TAG(Ar, Rotator, Rotator3d, Rotator3f)"
  }
]