[
  {
    "label": "RecordableEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordableEncodedFrame"
  },
  {
    "label": "EncodedResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncodedResolution"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_RECORDABLE_ENCODED_FRAME_H_ # define API_VIDEO_RECORDABLE_ENCODED_FRAME_H_ # include \" api / array_view . h \" # include \" api / scoped_refptr . h \" # include \" api / units / timestamp . h \" # include \" api / video / color_space . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_codec_type . h \" namespace webrtc { class RecordableEncodedFrame { public : struct EncodedResolution { bool)",
    "insertText": "empty()"
  },
  {
    "label": "encoded_buffer()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<const EncodedImageBufferInterface>)",
    "insertText": "encoded_buffer()"
  },
  {
    "label": "color_space()",
    "kind": "Method",
    "detail": "Function (absl::optional<webrtc::ColorSpace>)",
    "insertText": "color_space()"
  },
  {
    "label": "codec()",
    "kind": "Method",
    "detail": "Function (VideoCodecType)",
    "insertText": "codec()"
  },
  {
    "label": "is_key_frame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_key_frame()"
  },
  {
    "label": "resolution()",
    "kind": "Method",
    "detail": "Function (EncodedResolution)",
    "insertText": "resolution()"
  },
  {
    "label": "render_time()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "render_time()"
  }
]