[
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "hash_policy_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash_policy_traits"
  },
  {
    "label": "ReturnKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReturnKey"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "ConstantIteratorsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstantIteratorsImpl"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASH_POLICY_TRAITS_H_ # define ABSL_CONTAINER_INTERNAL_HASH_POLICY_TRAITS_H_ # include<cstddef> # include<memory> # include<new> # include<type_traits> # include<utility> # include \" absl / container / internal / common_policy_traits . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class Policy,class = void> struct hash_policy_traits : common_policy_traits<Policy> { using key_type = Policy::key_type ; private : struct ReturnKey { # if)",
    "insertText": "defined(__cpp_lib_launder) && __cpp_lib_launder >= 201606 template <class Key, absl::enable_if_t<std::is_lvalue_reference<Key>::value, int> = 0> static key_type& Impl(Key&& k, int)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} # endif template<class Key> Key)",
    "insertText": "Impl(Key&& k, char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class Key,class . . . Args> auto)",
    "insertText": "operator()(Key&& k, const Args&...) const -> decltype(Impl(std::forward<Key>(k), 0))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<class P = Policy,class = void> struct ConstantIteratorsImpl : std::false_type { } ; template<class P> struct ConstantIteratorsImpl<P,absl::void_t<P::constant_iterators>> : P::constant_iterators { } ; public : using slot_type = Policy::slot_type ; using init_type = Policy::init_type ; using reference =)",
    "insertText": "decltype(Policy::element(std::declval<slot_type*>()))"
  },
  {
    "label": "space_used()",
    "kind": "Method",
    "detail": "Function (using pointer = std::remove_reference<reference>::type* ; using value_type = std::remove_reference<reference>::type ; using constant_iterators = ConstantIteratorsImpl<> ; template<class P = Policy> size_t)",
    "insertText": "space_used(const slot_type* slot)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} template<class F,class . . . Ts,class P = Policy> auto)",
    "insertText": "apply(F&& f, Ts&&... ts) -> decltype(P::apply(std::forward<F>(f), std::forward<Ts>(ts)...))"
  },
  {
    "label": "mutable_key()",
    "kind": "Method",
    "detail": "Function (} template<class P = Policy> auto)",
    "insertText": "mutable_key(slot_type* slot) -> decltype(P::apply(ReturnKey(), hash_policy_traits::element(slot)))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} template<class T,class P = Policy> auto)",
    "insertText": "value(T* elem) -> decltype(P::value(elem))"
  }
]