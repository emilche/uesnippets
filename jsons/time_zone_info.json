[
  {
    "label": "Transition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Transition"
  },
  {
    "label": "ByUnixTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByUnixTime"
  },
  {
    "label": "ByCivilTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByCivilTime"
  },
  {
    "label": "TransitionType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransitionType"
  },
  {
    "label": "TimeZoneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneInfo"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_INFO_H_ # define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_INFO_H_ # include<atomic> # include<cstddef> # include<cstdint> # include<string> # include<vector> # include \" absl / base / config . h \" # include \" absl / time / internal / cctz / include / cctz / civil_time . h \" # include \" absl / time / internal / cctz / include / cctz / time_zone . h \" # include \" absl / time / internal / cctz / include / cctz / zone_info_source . h \" # include \" time_zone_if . h \" # include \" tzfile . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { struct Transition { std::int_least64_t unix_time ; std::uint_least8_t type_index ; civil_second civil_sec ; civil_second prev_civil_sec ; struct ByUnixTime { bool)",
    "insertText": "operator()(const Transition& lhs, const Transition& rhs)"
  },
  {
    "label": "TimeZoneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeZoneInfo(const TimeZoneInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeZoneInfo&)",
    "insertText": "operator(const TimeZoneInfo&)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const std::string& name)"
  },
  {
    "label": "BreakTime()",
    "kind": "Method",
    "detail": "Function (time_zone::absolute_lookup)",
    "insertText": "BreakTime(const time_point<seconds>& tp)"
  },
  {
    "label": "MakeTime()",
    "kind": "Method",
    "detail": "Function (time_zone::civil_lookup)",
    "insertText": "MakeTime(const civil_second& cs)"
  },
  {
    "label": "NextTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "PrevTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrevTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Version()"
  },
  {
    "label": "Description()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Description()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (private : struct Header { std::size_t timecnt ; std::size_t typecnt ; std::size_t charcnt ; std::size_t leapcnt ; std::size_t ttisstdcnt ; std::size_t ttisutcnt ; bool)",
    "insertText": "Build(const tzhead& tzh)"
  },
  {
    "label": "DataLength()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "DataLength(std::size_t time_len)"
  },
  {
    "label": "GetTransitionType()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetTransitionType(std::int_fast32_t utc_offset, bool is_dst, const std::string& abbr, std::uint_least8_t* index)"
  },
  {
    "label": "EquivTransitions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EquivTransitions(std::uint_fast8_t tt1_index, std::uint_fast8_t tt2_index)"
  },
  {
    "label": "ExtendTransitions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtendTransitions()"
  },
  {
    "label": "ResetToBuiltinUTC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetToBuiltinUTC(const seconds& offset)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(ZoneInfoSource* zip)"
  },
  {
    "label": "LocalTime()",
    "kind": "Method",
    "detail": "Function (time_zone::absolute_lookup)",
    "insertText": "LocalTime(std::int_fast64_t unix_time, const TransitionType& tt)"
  },
  {
    "label": "LocalTime()",
    "kind": "Method",
    "detail": "Function (time_zone::absolute_lookup)",
    "insertText": "LocalTime(std::int_fast64_t unix_time, const Transition& tr)"
  },
  {
    "label": "TimeLocal()",
    "kind": "Method",
    "detail": "Function (time_zone::civil_lookup)",
    "insertText": "TimeLocal(const civil_second& cs, year_t c4_shift)"
  }
]