[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "ICustomHitTestPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomHitTestPath"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Input / NavigationReply . h \" # include \" Input / PopupMethodReply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Rendering / RenderingCommon . h \" # include \" Widgets / SWindow . h \" class FActiveTimerHandle ; class FPaintArgs ; class FSlateWindowElementList ; class ICustomHitTestPath ; class SViewport : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SViewport ) : _Content() , _ShowEffectWhenDisabled(true) , _RenderDirectlyToWindow(false) , _EnableGammaCorrection(true) , _ReverseGammaCorrection(false) , _EnableBlending(false) , _EnableStereoRendering(false) , _PreMultipliedAlpha(true) , _IgnoreTextureAlpha(true) , _ViewportSize(GetDefaultViewportSize())"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBoundsAlways ; })",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_ATTRIBUTE( bool, ShowEffectWhenDisabled ) SLATE_ARGUMENT( bool, RenderDirectlyToWindow ) SLATE_ARGUMENT( bool, EnableGammaCorrection ) SLATE_ARGUMENT( bool, ReverseGammaCorrection ) SLATE_ARGUMENT( bool, EnableBlending ) SLATE_ARGUMENT(bool, EnableStereoRendering ) SLATE_ARGUMENT( bool, PreMultipliedAlpha ) SLATE_ARGUMENT( bool, IgnoreTextureAlpha ) SLATE_ARGUMENT(TSharedPtr<ISlateViewport>, ViewportInterface) SLATE_ATTRIBUTE(FVector2D, ViewportSize)"
  },
  {
    "label": "GetDefaultViewportSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetDefaultViewportSize()"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() SLATE_API SViewport()"
  },
  {
    "label": "SViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SViewport()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "SetViewportInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewportInterface(TSharedRef<ISlateViewport> InViewportInterface)"
  },
  {
    "label": "GetViewportInterface()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<ISlateViewport>)",
    "insertText": "GetViewportInterface()"
  },
  {
    "label": "SetCustomHitTestPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomHitTestPath(TSharedPtr<ICustomHitTestPath> CustomHitTestPath)"
  },
  {
    "label": "GetCustomHitTestPath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICustomHitTestPath>)",
    "insertText": "GetCustomHitTestPath()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "OnWindowClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWindowClosed(const TSharedRef<SWindow>& InWindowBeingClosed)"
  },
  {
    "label": "OnViewportActivated()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnViewportActivated(const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "OnViewportDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportDeactivated(const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "ShouldRenderDirectly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderDirectly()"
  },
  {
    "label": "SetIgnoreTextureAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreTextureAlpha(const bool bInIgnoreTextureAlpha)"
  },
  {
    "label": "GetIgnoreTextureAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreTextureAlpha(void)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (bEnableStereoRendering = bInEnableStereoRendering ; } void)",
    "insertText": "SetActive(bool bActive)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchFirstMove(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMapCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<TSharedRef<SWidget>>)",
    "insertText": "OnMapCursor(const FCursorReply& CursorReply)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& CharacterEvent)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnQueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "OnQueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "OnQueryPopupMethod()",
    "kind": "Method",
    "detail": "Function (FPopupMethodReply)",
    "insertText": "OnQueryPopupMethod()"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "TranslateMouseCoordinateForCustomHitTestChild()",
    "kind": "Method",
    "detail": "Function (TOptional<FVirtualPointerPosition>)",
    "insertText": "TranslateMouseCoordinateForCustomHitTestChild(const SWidget& ChildWidget, const FGeometry& MyGeometry, const FVector2D ScreenSpaceMouseCoordinate, const FVector2D LastScreenSpaceMouseCoordinate)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "GetFocusBrush()",
    "kind": "Method",
    "detail": "Function (private : const FSlateBrush*)",
    "insertText": "GetFocusBrush()"
  }
]