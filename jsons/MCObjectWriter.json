[
  {
    "label": "MCAsmLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLayout"
  },
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFixup"
  },
  {
    "label": "MCFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFragment"
  },
  {
    "label": "MCSymbolRefExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolRefExpr"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "MCObjectWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCObjectWriter"
  },
  {
    "label": "MCObjectWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCOBJECTWRITER_H # define LLVM_MC_MCOBJECTWRITER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / EndianStream . h \" # include \" llvm / Support / raw_ostream . h \" # include<cassert> namespace llvm { class MCAsmLayout ; class MCAssembler ; class MCFixup ; class MCFragment ; class MCSymbolRefExpr ; class MCValue ; class MCObjectWriter {)",
    "insertText": "MCObjectWriter(const MCObjectWriter &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCObjectWriter &)"
  },
  {
    "label": "MCObjectWriter()",
    "kind": "Method",
    "detail": "Function (protected : raw_pwrite_stream& OS ; unsigned IsLittleEndian : 1 ; protected :)",
    "insertText": "MCObjectWriter(raw_pwrite_stream &OS, bool IsLittleEndian) : OS(OS), IsLittleEndian(IsLittleEndian)"
  },
  {
    "label": "MCObjectWriter()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "MCObjectWriter()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "isLittleEndian()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLittleEndian()"
  },
  {
    "label": "recordRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordRelocation(MCAssembler &Asm, const MCAsmLayout &Layout, const MCFragment *Fragment, const MCFixup &Fixup, MCValue Target, bool &IsPCRel, uint64_t &FixedValue)"
  },
  {
    "label": "isSymbolRefDifferenceFullyResolved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSymbolRefDifferenceFullyResolved(const MCAssembler &Asm, const MCSymbolRefExpr *A, const MCSymbolRefExpr *B, bool InSet)"
  },
  {
    "label": "isSymbolRefDifferenceFullyResolvedImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSymbolRefDifferenceFullyResolvedImpl(const MCAssembler &Asm, const MCSymbol &SymA, const MCFragment &FB, bool InSet, bool IsPCRel)"
  },
  {
    "label": "isWeak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isWeak(const MCSymbol &Sym)"
  },
  {
    "label": "writeObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeObject(MCAssembler &Asm, const MCAsmLayout &Layout)"
  },
  {
    "label": "write8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write8(uint8_t Value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (OS<<)",
    "insertText": "char(Value)"
  },
  {
    "label": "writeLE16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeLE16(uint16_t Value)"
  },
  {
    "label": "little()",
    "kind": "Method",
    "detail": "Function (support::endian::Writer<)",
    "insertText": "little(OS).write(Value)"
  },
  {
    "label": "writeLE32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeLE32(uint32_t Value)"
  },
  {
    "label": "writeLE64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeLE64(uint64_t Value)"
  },
  {
    "label": "writeBE16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeBE16(uint16_t Value)"
  },
  {
    "label": "big()",
    "kind": "Method",
    "detail": "Function (support::endian::Writer<)",
    "insertText": "big(OS).write(Value)"
  },
  {
    "label": "writeBE32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeBE32(uint32_t Value)"
  },
  {
    "label": "writeBE64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeBE64(uint64_t Value)"
  },
  {
    "label": "write16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "write16(uint16_t Value)"
  },
  {
    "label": "write32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "write32(uint32_t Value)"
  },
  {
    "label": "write64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "write64(uint64_t Value)"
  },
  {
    "label": "WriteZeros()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteZeros(unsigned N)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const char Zeros [ 1 6 ] = { 0 } ;)",
    "insertText": "for(unsigned i = 0, e = N / 16; i != e; ++i) OS << StringRef(Zeros, 16)"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (OS<<)",
    "insertText": "StringRef(Zeros, N % 16)"
  },
  {
    "label": "writeBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeBytes(const SmallVectorImpl<char> &ByteVec, unsigned ZeroFillSize = 0)"
  },
  {
    "label": "writeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeBytes(StringRef(ByteVec.data(), ByteVec.size()), ZeroFillSize)"
  },
  {
    "label": "writeBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "writeBytes(StringRef Str, unsigned ZeroFillSize = 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((ZeroFillSize == 0 || Str.size() <= ZeroFillSize) && \"data size greater than fill size, unexpected large write will occur\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OS<<Str ;)",
    "insertText": "if(ZeroFillSize) WriteZeros(ZeroFillSize - Str.size())"
  }
]