[
  {
    "label": "AtomicFlag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicFlag"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_ATOMIC_FLAG_H_ # define CEF_INCLUDE_BASE_CEF_ATOMIC_FLAG_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (class AtomicFlag { public :)",
    "insertText": "AtomicFlag()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "UnsafeResetForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsafeResetForTesting()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<uint_fast8_t> flag_ { 0 } ; base::ThreadChecker set_thread_checker_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(AtomicFlag)"
  }
]