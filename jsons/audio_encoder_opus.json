[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "AudioEncoderOpusImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderOpusImpl"
  },
  {
    "label": "PacketLossFractionSmoother",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketLossFractionSmoother"
  },
  {
    "label": "AudioEncoderOpus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioEncoderOpus"
  },
  {
    "label": "GetNewComplexity()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_ENCODER_OPUS_H_ # define MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_ENCODER_OPUS_H_ # include<functional> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / audio_codecs / opus / audio_encoder_opus_config . h \" # include \" common_audio / smoothing_filter . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor . h \" # include \" modules / audio_coding / codecs / opus / opus_interface . h \" namespace webrtc { class RtcEventLog ; class AudioEncoderOpusImpl final : public AudioEncoder { public : absl::optional<int>)",
    "insertText": "GetNewComplexity(const AudioEncoderOpusConfig& config)"
  },
  {
    "label": "GetNewBandwidth()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetNewBandwidth(const AudioEncoderOpusConfig& config, OpusEncInst* inst)"
  },
  {
    "label": "AudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (using AudioNetworkAdaptorCreator = std::function<std::unique_ptr<)",
    "insertText": "AudioNetworkAdaptor(absl::string_view, RtcEventLog*)"
  },
  {
    "label": "AudioEncoderOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderOpusImpl(const AudioEncoderOpusConfig& config, int payload_type)"
  },
  {
    "label": "AudioEncoderOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderOpusImpl(const AudioEncoderOpusConfig& config, int payload_type, const AudioNetworkAdaptorCreator& audio_network_adaptor_creator, std::unique_ptr<SmoothingFilter> bitrate_smoother)"
  },
  {
    "label": "AudioEncoderOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderOpusImpl(int payload_type, const SdpAudioFormat& format)"
  },
  {
    "label": "AudioEncoderOpusImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioEncoderOpusImpl()"
  },
  {
    "label": "AudioEncoderOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderOpusImpl(const AudioEncoderOpusImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderOpusImpl&)",
    "insertText": "operator(const AudioEncoderOpusImpl&)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "RtpTimestampRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RtpTimestampRateHz()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFec(bool enable)"
  },
  {
    "label": "SetDtx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtx(bool enable)"
  },
  {
    "label": "GetDtx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtx()"
  },
  {
    "label": "SetApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetApplication(Application application)"
  },
  {
    "label": "SetMaxPlaybackRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxPlaybackRate(int frequency_hz)"
  },
  {
    "label": "EnableAudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableAudioNetworkAdaptor(const std::string& config_string, RtcEventLog* event_log)"
  },
  {
    "label": "DisableAudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAudioNetworkAdaptor()"
  },
  {
    "label": "OnReceivedUplinkPacketLossFraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkPacketLossFraction(float uplink_packet_loss_fraction)"
  },
  {
    "label": "OnReceivedTargetAudioBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedTargetAudioBitrate(int target_audio_bitrate_bps)"
  },
  {
    "label": "OnReceivedUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkBandwidth(int target_audio_bitrate_bps, absl::optional<int64_t> bwe_period_ms)"
  },
  {
    "label": "OnReceivedUplinkAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkAllocation(BitrateAllocationUpdate update)"
  },
  {
    "label": "OnReceivedRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtt(int rtt_ms)"
  },
  {
    "label": "OnReceivedOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedOverhead(size_t overhead_bytes_per_packet)"
  },
  {
    "label": "SetReceiverFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiverFrameLengthRange(int min_frame_length_ms, int max_frame_length_ms)"
  },
  {
    "label": "GetANAStats()",
    "kind": "Method",
    "detail": "Function (ANAStats)",
    "insertText": "GetANAStats()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "supported_frame_lengths_ms()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const int>)",
    "insertText": "supported_frame_lengths_ms()"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (private : class PacketLossFractionSmoother ; absl::optional<AudioEncoderOpusConfig>)",
    "insertText": "SdpToConfig(const SdpAudioFormat& format)"
  },
  {
    "label": "AppendSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSupportedEncoders(std::vector<AudioCodecSpec>* specs)"
  },
  {
    "label": "QueryAudioEncoder()",
    "kind": "Method",
    "detail": "Function (AudioCodecInfo)",
    "insertText": "QueryAudioEncoder(const AudioEncoderOpusConfig& config)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(const AudioEncoderOpusConfig&, int payload_type)"
  },
  {
    "label": "Num10msFramesPerPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10msFramesPerPacket()"
  },
  {
    "label": "SamplesPer10msFrame()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SamplesPer10msFrame()"
  },
  {
    "label": "SufficientOutputBufferSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SufficientOutputBufferSize()"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateEncoderInstance(const AudioEncoderOpusConfig& config)"
  },
  {
    "label": "SetFrameLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameLength(int frame_length_ms)"
  },
  {
    "label": "SetNumChannelsToEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannelsToEncode(size_t num_channels_to_encode)"
  },
  {
    "label": "SetProjectedPacketLossRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectedPacketLossRate(float fraction)"
  },
  {
    "label": "OnReceivedUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkBandwidth(int target_audio_bitrate_bps, absl::optional<int64_t> bwe_period_ms, absl::optional<int64_t> link_capacity_allocation)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(int target_bps)"
  },
  {
    "label": "ApplyAudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAudioNetworkAdaptor()"
  },
  {
    "label": "DefaultAudioNetworkAdaptorCreator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioNetworkAdaptor>)",
    "insertText": "DefaultAudioNetworkAdaptorCreator(absl::string_view config_string, RtcEventLog* event_log)"
  },
  {
    "label": "MaybeUpdateUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateUplinkBandwidth()"
  }
]