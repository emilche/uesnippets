[
  {
    "label": "ESteamItemFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamItemFlags"
  },
  {
    "label": "SteamItemDetails_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamItemDetails_t"
  },
  {
    "label": "ISteamInventory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamInventory"
  },
  {
    "label": "SteamInventoryResultReady_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryResultReady_t"
  },
  {
    "label": "SteamInventoryFullUpdate_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryFullUpdate_t"
  },
  {
    "label": "SteamInventoryDefinitionUpdate_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryDefinitionUpdate_t"
  },
  {
    "label": "SteamInventoryEligiblePromoItemDefIDs_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryEligiblePromoItemDefIDs_t"
  },
  {
    "label": "SteamInventoryStartPurchaseResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryStartPurchaseResult_t"
  },
  {
    "label": "SteamInventoryRequestPricesResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamInventoryRequestPricesResult_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMINVENTORY_H # define ISTEAMINVENTORY_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "k_SteamItemInstanceIDInvalid()",
    "kind": "Method",
    "detail": "Function (const SteamItemInstanceID_t)",
    "insertText": "k_SteamItemInstanceIDInvalid(SteamItemInstanceID_t)"
  },
  {
    "label": "GetResultStatus()",
    "kind": "Method",
    "detail": "Function (typedef int32 SteamItemDef_t ; enum ESteamItemFlags { k_ESteamItemNoTrade = 1<<0,k_ESteamItemRemoved = 1<<8,k_ESteamItemConsumed = 1<<9,} ; struct SteamItemDetails_t { SteamItemInstanceID_t m_itemId ; SteamItemDef_t m_iDefinition ; uint16 m_unQuantity ; uint16 m_unFlags ; } ; typedef int32 SteamInventoryResult_t ; const SteamInventoryResult_t k_SteamInventoryResultInvalid = - 1 ; typedef uint64 SteamInventoryUpdateHandle_t ; const SteamInventoryUpdateHandle_t k_SteamInventoryUpdateHandleInvalid = 0 xffffffffffffffffull ; class ISteamInventory { public : EResult)",
    "insertText": "GetResultStatus(SteamInventoryResult_t resultHandle)"
  },
  {
    "label": "GetResultItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResultItems(SteamInventoryResult_t resultHandle, STEAM_OUT_ARRAY_COUNT( punOutItemsArraySize,Output array) SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)"
  },
  {
    "label": "GetResultItemProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResultItemProperty(SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, STEAM_OUT_STRING_COUNT( punValueBufferSizeOut ) char *pchValueBuffer, uint32 *punValueBufferSizeOut)"
  },
  {
    "label": "GetResultTimestamp()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetResultTimestamp(SteamInventoryResult_t resultHandle)"
  },
  {
    "label": "CheckResultSteamID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)"
  },
  {
    "label": "DestroyResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyResult(SteamInventoryResult_t resultHandle)"
  },
  {
    "label": "GetAllItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllItems(SteamInventoryResult_t *pResultHandle)"
  },
  {
    "label": "GetItemsByID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetItemsByID(SteamInventoryResult_t *pResultHandle, STEAM_ARRAY_COUNT( unCountInstanceIDs ) const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)"
  },
  {
    "label": "SerializeResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeResult(SteamInventoryResult_t resultHandle, STEAM_OUT_BUFFER_COUNT(punOutBufferSize) void *pOutBuffer, uint32 *punOutBufferSize)"
  },
  {
    "label": "DeserializeResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeserializeResult(SteamInventoryResult_t *pOutResultHandle, STEAM_BUFFER_COUNT(punOutBufferSize) const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)"
  },
  {
    "label": "GenerateItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateItems(SteamInventoryResult_t *pResultHandle, STEAM_ARRAY_COUNT(unArrayLength) const SteamItemDef_t *pArrayItemDefs, STEAM_ARRAY_COUNT(unArrayLength) const uint32 *punArrayQuantity, uint32 unArrayLength)"
  },
  {
    "label": "GrantPromoItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GrantPromoItems(SteamInventoryResult_t *pResultHandle)"
  },
  {
    "label": "AddPromoItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)"
  },
  {
    "label": "AddPromoItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPromoItems(SteamInventoryResult_t *pResultHandle, STEAM_ARRAY_COUNT(unArrayLength) const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)"
  },
  {
    "label": "ConsumeItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)"
  },
  {
    "label": "ExchangeItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExchangeItems(SteamInventoryResult_t *pResultHandle, STEAM_ARRAY_COUNT(unArrayGenerateLength) const SteamItemDef_t *pArrayGenerate, STEAM_ARRAY_COUNT(unArrayGenerateLength) const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, STEAM_ARRAY_COUNT(unArrayDestroyLength) const SteamItemInstanceID_t *pArrayDestroy, STEAM_ARRAY_COUNT(unArrayDestroyLength) const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)"
  },
  {
    "label": "TransferItemQuantity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)"
  },
  {
    "label": "SendItemDropHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendItemDropHeartbeat()"
  },
  {
    "label": "TriggerItemDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)"
  },
  {
    "label": "TradeItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TradeItems(SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner, STEAM_ARRAY_COUNT(nArrayGiveLength) const SteamItemInstanceID_t *pArrayGive, STEAM_ARRAY_COUNT(nArrayGiveLength) const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, STEAM_ARRAY_COUNT(nArrayGetLength) const SteamItemInstanceID_t *pArrayGet, STEAM_ARRAY_COUNT(nArrayGetLength) const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)"
  },
  {
    "label": "LoadItemDefinitions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadItemDefinitions()"
  },
  {
    "label": "GetItemDefinitionIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetItemDefinitionIDs(STEAM_OUT_ARRAY_COUNT(punItemDefIDsArraySize,List of item definition IDs) SteamItemDef_t *pItemDefIDs, STEAM_DESC(Size of array is passed in and actual size used is returned in this param) uint32 *punItemDefIDsArraySize)"
  },
  {
    "label": "GetItemDefinitionProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, STEAM_OUT_STRING_COUNT(punValueBufferSizeOut) char *pchValueBuffer, uint32 *punValueBufferSizeOut)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(SteamInventoryEligiblePromoItemDefIDs_t ) virtual SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs( CSteamID steamID)"
  },
  {
    "label": "GetEligiblePromoItemDefinitionIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEligiblePromoItemDefinitionIDs(CSteamID steamID, STEAM_OUT_ARRAY_COUNT(punItemDefIDsArraySize,List of item definition IDs) SteamItemDef_t *pItemDefIDs, STEAM_DESC(Size of array is passed in and actual size used is returned in this param) uint32 *punItemDefIDsArraySize)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(SteamInventoryStartPurchaseResult_t ) virtual SteamAPICall_t StartPurchase( STEAM_ARRAY_COUNT(unArrayLength) const SteamItemDef_t *pArrayItemDefs, STEAM_ARRAY_COUNT(unArrayLength) const uint32 *punArrayQuantity, uint32 unArrayLength)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(SteamInventoryRequestPricesResult_t ) virtual SteamAPICall_t RequestPrices()"
  },
  {
    "label": "GetNumItemsWithPrices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumItemsWithPrices()"
  },
  {
    "label": "GetItemsWithPrices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetItemsWithPrices(STEAM_ARRAY_COUNT(unArrayLength) STEAM_OUT_ARRAY_COUNT(pArrayItemDefs, Items with prices) SteamItemDef_t *pArrayItemDefs, STEAM_ARRAY_COUNT(unArrayLength) STEAM_OUT_ARRAY_COUNT(pPrices, List of prices for the given item defs) uint64 *pCurrentPrices, STEAM_ARRAY_COUNT(unArrayLength) STEAM_OUT_ARRAY_COUNT(pPrices, List of prices for the given item defs) uint64 *pBasePrices, uint32 unArrayLength)"
  },
  {
    "label": "GetItemPrice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetItemPrice(SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)"
  },
  {
    "label": "StartUpdateProperties()",
    "kind": "Method",
    "detail": "Function (SteamInventoryUpdateHandle_t)",
    "insertText": "StartUpdateProperties()"
  },
  {
    "label": "RemoveProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetPropertyString ) virtual bool SetProperty( SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetPropertyBool ) virtual bool SetProperty( SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetPropertyInt64 ) virtual bool SetProperty( SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetPropertyFloat ) virtual bool SetProperty( SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)"
  },
  {
    "label": "SubmitUpdateProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle)"
  },
  {
    "label": "InspectItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InspectItem(SteamInventoryResult_t *pResultHandle, const char *pchItemToken)"
  },
  {
    "label": "SteamInventory()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMINVENTORY_INTERFACE_VERSION \" STEAMINVENTORY_INTERFACE_V003 \" ISteamInventory*)",
    "insertText": "SteamInventory()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamInventory *, SteamInventory, STEAMINVENTORY_INTERFACE_VERSION)"
  },
  {
    "label": "SteamGameServerInventory()",
    "kind": "Method",
    "detail": "Function (ISteamInventory*)",
    "insertText": "SteamGameServerInventory()"
  },
  {
    "label": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR(ISteamInventory *, SteamGameServerInventory, STEAMINVENTORY_INTERFACE_VERSION)"
  }
]