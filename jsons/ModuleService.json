[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FModuleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleInfo"
  },
  {
    "label": "FModuleInfoEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleInfoEx"
  },
  {
    "label": "IModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModule"
  },
  {
    "label": "IModuleService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModuleService"
  },
  {
    "label": "GetModuleInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" # include \" HAL / Platform . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { class IAnalysisSession ; const FName ModuleFeatureName ; struct FModuleInfo { FName Name ; const TCHAR* DisplayName = nullptr ; } ; struct FModuleInfoEx { FModuleInfo Info ; bool bIsEnabled = false ; } ; class IModule : public IModularFeature { public : void)",
    "insertText": "GetModuleInfo(FModuleInfo& OutModuleInfo)"
  },
  {
    "label": "ShouldBeEnabledByDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeEnabledByDefault()"
  },
  {
    "label": "GetCommandLineArgument()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetCommandLineArgument()"
  },
  {
    "label": "GenerateReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateReports(const IAnalysisSession& Session, const TCHAR* CmdLine, const TCHAR* OutputDirectory)"
  },
  {
    "label": "IModuleService()",
    "kind": "Method",
    "detail": "Function (} } ; class IModuleService { public : ~)",
    "insertText": "IModuleService()"
  },
  {
    "label": "GetAvailableModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableModules(TArray<FModuleInfo>& OutModules)"
  },
  {
    "label": "GetAvailableModulesEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableModulesEx(TArray<FModuleInfoEx>& OutModules)"
  },
  {
    "label": "GetEnabledModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEnabledModules(TArray<FModuleInfo>& OutModules)"
  },
  {
    "label": "SetModuleEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModuleEnabled(const FName& ModuleName, bool bEnabled)"
  }
]