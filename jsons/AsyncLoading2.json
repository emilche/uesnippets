[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FIoDispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDispatcher"
  },
  {
    "label": "IAsyncPackageLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncPackageLoader"
  },
  {
    "label": "IEDLBootNotificationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEDLBootNotificationManager"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FPackageImportReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageImportReference"
  },
  {
    "label": "FPackageObjectIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageObjectIndex"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FPublicExportKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPublicExportKey"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FZenPackageVersioningInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenPackageVersioningInfo"
  },
  {
    "label": "FZenPackageImportedPackageNamesContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenPackageImportedPackageNamesContainer"
  },
  {
    "label": "FZenPackageSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenPackageSummary"
  },
  {
    "label": "FExportBundleEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportBundleEntry"
  },
  {
    "label": "EExportCommandType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EExportCommandType"
  },
  {
    "label": "FDependencyBundleEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyBundleEntry"
  },
  {
    "label": "FDependencyBundleHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyBundleHeader"
  },
  {
    "label": "FScriptObjectEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptObjectEntry"
  },
  {
    "label": "FExportMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportMapEntry"
  },
  {
    "label": "FBulkDataMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkDataMapEntry"
  },
  {
    "label": "FPackageImportReference()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringFwd . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" IO / PackageId . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Serialization / BulkDataCookedIndex . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / MappedName . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / ObjectVersion . h \" class FArchive ; class FIoDispatcher ; class IAsyncPackageLoader ; class IEDLBootNotificationManager ; class UPackage ; class FPackageImportReference { public :)",
    "insertText": "FPackageImportReference(uint32 InImportedPackageIndex, uint32 InImportedPublicExportHashIndex) : ImportedPackageIndex(InImportedPackageIndex) , ImportedPublicExportHashIndex(InImportedPublicExportHashIndex)"
  },
  {
    "label": "GetImportedPackageIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetImportedPackageIndex()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint64 TypeMask = ~ IndexMask ; uint64 TypeShift = IndexBits ; uint64 Invalid = ~ 0 ull ; uint64 TypeAndId = Invalid ; enum EType { Export,ScriptImport,PackageImport,Null,TypeCount = Null,} ;)",
    "insertText": "static_assert((TypeCount - 1) <= (TypeMask >> TypeShift), \"FPackageObjectIndex: Too many types for TypeMask\")"
  },
  {
    "label": "FPackageObjectIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageObjectIndex(EType InType, uint64 InId) : TypeAndId((uint64(InType) << TypeShift) | InId)"
  },
  {
    "label": "GenerateImportHashFromObjectPath()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GenerateImportHashFromObjectPath(const FStringView& ObjectPath)"
  },
  {
    "label": "FPackageObjectIndex()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPackageObjectIndex()"
  },
  {
    "label": "FromExportIndex()",
    "kind": "Method",
    "detail": "Function (FPackageObjectIndex)",
    "insertText": "FromExportIndex(const int32 Index)"
  },
  {
    "label": "FromScriptPath()",
    "kind": "Method",
    "detail": "Function (} FPackageObjectIndex)",
    "insertText": "FromScriptPath(const FStringView& ScriptObjectPath)"
  },
  {
    "label": "FromPackageImportRef()",
    "kind": "Method",
    "detail": "Function (} FPackageObjectIndex)",
    "insertText": "FromPackageImportRef(const FPackageImportReference& PackageImportRef)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 Id = static_cast<)",
    "insertText": "uint64(PackageImportRef.GetImportedPackageIndex()) << 32 | PackageImportRef.GetImportedPublicExportHashIndex()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImport()"
  },
  {
    "label": "IsScriptImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsScriptImport()"
  },
  {
    "label": "IsPackageImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPackageImport()"
  },
  {
    "label": "ToExport()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ToExport()"
  },
  {
    "label": "ToPackageImportRef()",
    "kind": "Method",
    "detail": "Function (} FPackageImportReference)",
    "insertText": "ToPackageImportRef()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 ImportedPackageIndex = static_cast<)",
    "insertText": "uint32((TypeAndId & IndexMask) >> 32)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 ExportHash = static_cast<)",
    "insertText": "uint32(TypeAndId)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Value()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . TypeAndId ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FPackageObjectIndex& Value)"
  },
  {
    "label": "FPublicExportKey()",
    "kind": "Method",
    "detail": "Function (} } ; class FPublicExportKey { public :)",
    "insertText": "FPublicExportKey()"
  },
  {
    "label": "GetPackageId()",
    "kind": "Method",
    "detail": "Function (} FPackageId)",
    "insertText": "GetPackageId()"
  },
  {
    "label": "GetExportHash()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetExportHash()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPublicExportKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPublicExportKey& In)"
  },
  {
    "label": "MakeKey()",
    "kind": "Method",
    "detail": "Function (} FPublicExportKey)",
    "insertText": "MakeKey(FPackageId PackageId, uint64 ExportHash)"
  },
  {
    "label": "FromPackageImport()",
    "kind": "Method",
    "detail": "Function (} FPublicExportKey)",
    "insertText": "FromPackageImport(FPackageObjectIndex ObjectIndex, const TArrayView<const FPackageId>& ImportedPackageIds, const TArrayView<const uint64>& ImportedPublicExportHashes)"
  },
  {
    "label": "GetImportedPublicExportHashIndex()",
    "kind": "Method",
    "detail": "Function (uint64 ExportHash = ImportedPublicExportHashes [ PackageImportRef .)",
    "insertText": "GetImportedPublicExportHashIndex()"
  },
  {
    "label": "FPublicExportKey()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FPublicExportKey(uint32 InPackageIdHigh, uint32 InPackageIdLow, uint32 InExportHashHigh, uint32 InExportHashLow) : PackageIdHigh(InPackageIdHigh) , PackageIdLow(InPackageIdLow) , ExportHashHigh(InExportHashHigh) , ExportHashLow(InExportHashLow)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32 PackageIdHigh = 0 ; uint32 PackageIdLow = 0 ; uint32 ExportHashHigh = 0 ; uint32 ExportHashLow = 0 ; } ; enum class EExportFilterFlags : uint8 { None,NotForClient,NotForServer } ; enum class EZenPackageVersion : uint32 { Initial,DataResourceTable,ImportedPackageNames,ExportDependencies,LatestPlusOne,Latest = LatestPlusOne - 1 } ; struct FZenPackageVersioningInfo { EZenPackageVersion ZenVersion ; FPackageFileVersion PackageVersion ; int32 LicenseeVersion ; FCustomVersionContainer CustomVersions ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FZenPackageVersioningInfo& ExportBundleEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FZenPackageImportedPackageNamesContainer { TArray<FName> Names ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FZenPackageImportedPackageNamesContainer& Container)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FZenPackageSummary { uint32 bHasVersioningInfo ; uint32 HeaderSize ; FMappedName Name ; uint32 PackageFlags ; uint32 CookedHeaderSize ; int32 ImportedPublicExportHashesOffset ; int32 ImportMapOffset ; int32 ExportMapOffset ; int32 ExportBundleEntriesOffset ; int32 DependencyBundleHeadersOffset ; int32 DependencyBundleEntriesOffset ; int32 ImportedPackageNamesOffset ; } ; struct FExportBundleEntry { enum EExportCommandType { ExportCommandType_Create,ExportCommandType_Serialize,ExportCommandType_Count } ; uint32 LocalExportIndex ; uint32 CommandType ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FExportBundleEntry& ExportBundleEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FDependencyBundleEntry { FPackageIndex LocalImportOrExportIndex ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FDependencyBundleEntry& DependencyBundleEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FDependencyBundleHeader { int32 FirstEntryIndex ; uint32 EntryCount [ FExportBundleEntry::ExportCommandType_Count ] [ FExportBundleEntry::ExportCommandType_Count ] ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FDependencyBundleHeader& DependencyBundleHeader)"
  },
  {
    "label": "FScriptObjectEntry()",
    "kind": "Method",
    "detail": "Function (} ; struct FScriptObjectEntry { union { FMappedName Mapped ; FMinimalName ObjectName ; } ; FPackageObjectIndex GlobalIndex ; FPackageObjectIndex OuterIndex ; FPackageObjectIndex CDOClassIndex ;)",
    "insertText": "FScriptObjectEntry()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FScriptObjectEntry& ScriptObjectEntry)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(FMappedName) >= sizeof(FMinimalName))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FExportMapEntry { uint64 CookedSerialOffset = 0 ; uint64 CookedSerialSize = 0 ; FMappedName ObjectName ; FPackageObjectIndex OuterIndex ; FPackageObjectIndex ClassIndex ; FPackageObjectIndex SuperIndex ; FPackageObjectIndex TemplateIndex ; uint64 PublicExportHash ; EObjectFlags ObjectFlags = EObjectFlags::RF_NoFlags ; EExportFilterFlags FilterFlags = EExportFilterFlags::None ; uint8 Pad [ 3 ] = { } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FExportMapEntry& ExportMapEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FBulkDataMapEntry { int64 SerialOffset = 0 ; int64 DuplicateSerialOffset = 0 ; int64 SerialSize = 0 ; uint32 Flags = 0 ; FBulkDataCookedIndex CookedIndex ; uint8 Pad [ 3 ] = { 0,0,0 } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBulkDataMapEntry& BulkDataEntry)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(FBulkDataCookedIndex) == sizeof(uint8))"
  },
  {
    "label": "FindAllRuntimeScriptPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllRuntimeScriptPackages(TArray<UPackage*>& OutPackages)"
  },
  {
    "label": "MakeAsyncPackageLoader2()",
    "kind": "Method",
    "detail": "Function (IAsyncPackageLoader*)",
    "insertText": "MakeAsyncPackageLoader2(FIoDispatcher& InIoDispatcher, IAsyncPackageLoader* UncookedPackageLoader = nullptr)"
  }
]