[
  {
    "label": "CommandLine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandLine"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedAddFeatureFlags()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_ADD_FEATURE_FLAGS_H_ # define BASE_SCOPED_ADD_FEATURE_FLAGS_H_ # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / feature_list . h \" # include \" base / memory / raw_ptr . h \" namespace base { class CommandLine ; class BASE_EXPORT ScopedAddFeatureFlags { public :)",
    "insertText": "ScopedAddFeatureFlags(CommandLine* command_line)"
  },
  {
    "label": "ScopedAddFeatureFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedAddFeatureFlags(const ScopedAddFeatureFlags&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedAddFeatureFlags&)",
    "insertText": "operator(const ScopedAddFeatureFlags&)"
  },
  {
    "label": "ScopedAddFeatureFlags()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedAddFeatureFlags()"
  },
  {
    "label": "EnableIfNotSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableIfNotSet(const Feature& feature)"
  },
  {
    "label": "DisableIfNotSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableIfNotSet(const Feature& feature)"
  },
  {
    "label": "EnableIfNotSetWithParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableIfNotSetWithParameter(const Feature& feature, StringPiece name, StringPiece value)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const Feature& feature)"
  },
  {
    "label": "IsEnabledWithParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledWithParameter(const Feature& feature, StringPiece parameter_name, StringPiece parameter_value)"
  },
  {
    "label": "AddFeatureIfNotSet()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddFeatureIfNotSet(const Feature& feature, StringPiece suffix, bool enable)"
  }
]