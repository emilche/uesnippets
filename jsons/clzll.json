[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_CLZLL_H_ # define RAPIDJSON_CLZLL_H_ # include \" . . / rapidjson . h \" # if)",
    "insertText": "defined(_MSC_VER) && !defined(UNDER_CE) #include <intrin.h> #if defined(_WIN64) #pragma intrinsic(_BitScanReverse64) #else #pragma intrinsic(_BitScanReverse)"
  },
  {
    "label": "clzll()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "clzll(uint64_t x)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(x != 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && !defined(UNDER_CE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN64) _BitScanReverse64(&r, x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(_BitScanReverse(&r, static_cast<uint32_t>(x >> 32))) return 63 - (r + 32)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanReverse(&r, static_cast<uint32_t>(x & 0xFFFFFFFF))"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (# endif return 6 3 - r ; #)",
    "insertText": "elif(defined(__GNUC__) && __GNUC__ >= 4) || RAPIDJSON_HAS_BUILTIN(__builtin_clzll) return static_cast<uint32_t>(__builtin_clzll(x))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# else uint32_t r = 0 ;)",
    "insertText": "while(!(x & (static_cast<uint64_t>(1) << 63)))"
  }
]