[
  {
    "label": "CTypeAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeAlias"
  },
  {
    "label": "CAliasType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAliasType"
  },
  {
    "label": "CAliasType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / Expression . h \" # include \" uLang / Semantics / SemanticProgram . h \" # include \" uLang / Semantics / SemanticTypes . h \" namespace uLang { class CTypeAlias ; class CAliasType : public CTypeBase { public :)",
    "insertText": "CAliasType(CTypeAlias& Definition, const CTypeBase* AliasedType) : CTypeBase(AliasedType->GetProgram()), _Definition(Definition), _AliasedType(AliasedType)"
  },
  {
    "label": "GetDefinition()",
    "kind": "Method",
    "detail": "Function (} CTypeAlias&)",
    "insertText": "GetDefinition()"
  },
  {
    "label": "AsAliasType()",
    "kind": "Method",
    "detail": "Function (} const CAliasType*)",
    "insertText": "AsAliasType()"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (} CUTF8String)",
    "insertText": "AsCodeRecursive(ETypeSyntaxPrecedence OuterPrecedence, TArray<const CFlowType*>& VisitedFlowTypes, bool bLinkable)"
  },
  {
    "label": "CTypeAlias()",
    "kind": "Method",
    "detail": "Function (} private : CTypeAlias& _Definition ; const CTypeBase* _AliasedType ; } ; class CTypeAlias : public CDefinition { public : const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::TypeAlias ;)",
    "insertText": "CTypeAlias(const CSymbol& Name, CScope& EnclosingScope) : CDefinition(StaticDefinitionKind, EnclosingScope, Name)"
  },
  {
    "label": "GetTypeType()",
    "kind": "Method",
    "detail": "Function (} const CTypeType*)",
    "insertText": "GetTypeType()"
  },
  {
    "label": "GetPositiveAliasedType()",
    "kind": "Method",
    "detail": "Function (} const CTypeBase*)",
    "insertText": "GetPositiveAliasedType()"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(_PositiveAliasType)"
  },
  {
    "label": "InitType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitType(const CTypeBase* NegativeAliasedType, const CTypeBase* PositiveAliasedType)"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(!_TypeType)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (_PositiveAliasType = TURef<CAliasType)",
    "insertText": "New(*this, PositiveAliasedType)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const CAliasType* NegativeAliasType = _PositiveAliasType .)",
    "insertText": "Get()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (_NegativeAliasType = TURef<CAliasType)",
    "insertText": "New(*this, NegativeAliasedType)"
  },
  {
    "label": "GetProgram()",
    "kind": "Method",
    "detail": "Function (} _TypeType =& _EnclosingScope .)",
    "insertText": "GetProgram().GetOrCreateTypeType(NegativeAliasType, _PositiveAliasType.Get())"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAstNode(CExprTypeAliasDefinition* AstNode)"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (} CExprTypeAliasDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIrNode(CExprTypeAliasDefinition* AstNode)"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (} CExprTypeAliasDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  }
]