[
  {
    "label": "AVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVolume"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FBSPOps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBSPOps"
  },
  {
    "label": "EBspOptimization",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBspOptimization"
  },
  {
    "label": "ENodePlace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENodePlace"
  },
  {
    "label": "FBspPointsKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBspPointsKey"
  },
  {
    "label": "FBspIndexedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBspIndexedPoint"
  },
  {
    "label": "FBspPointsGridItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBspPointsGridItem"
  },
  {
    "label": "FBspPointsGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBspPointsGrid"
  },
  {
    "label": "csgPrepMovingBrush()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / Brush . h \" # include \" Engine / Polys . h \" class AVolume ; class UModel ; class FBSPOps { public : enum EBspOptimization { BSP_Lame,BSP_Good,BSP_Optimal } ; enum ENodePlace { NODE_Back = 0,NODE_Front = 1,NODE_Plane = 2,NODE_Root = 3,} ; void)",
    "insertText": "csgPrepMovingBrush(ABrush* Actor)"
  },
  {
    "label": "csgCopyBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "csgCopyBrush(ABrush* Dest, ABrush* Src, uint32 PolyFlags, EObjectFlags ResFlags, bool bNeedsPrep, bool bCopyPosRotScale, bool bAllowEmpty = false)"
  },
  {
    "label": "csgAddOperation()",
    "kind": "Method",
    "detail": "Function (ABrush*)",
    "insertText": "csgAddOperation(ABrush* Actor, uint32 PolyFlags, EBrushType BrushType)"
  },
  {
    "label": "bspAddVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspAddVector(UModel* Model, const FVector* V, bool Exact)"
  },
  {
    "label": "bspAddPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspAddPoint(UModel* Model, const FVector* V, bool Exact)"
  },
  {
    "label": "bspBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspBuild(UModel* Model, enum EBspOptimization Opt, int32 Balance, int32 PortalBias, int32 RebuildSimplePolys, int32 iNode)"
  },
  {
    "label": "bspRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspRefresh(UModel* Model, bool NoRemapSurfs)"
  },
  {
    "label": "bspBuildBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspBuildBounds(UModel* Model)"
  },
  {
    "label": "bspValidateBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspValidateBrush(UModel* Brush, bool ForceValidate, bool DoStatusUpdate)"
  },
  {
    "label": "bspUnlinkPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bspUnlinkPolys(UModel* Brush)"
  },
  {
    "label": "bspAddNode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "bspAddNode(UModel* Model, int32 iParent, enum ENodePlace ENodePlace, uint32 NodeFlags, FPoly* EdPoly)"
  },
  {
    "label": "RebuildBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildBrush(UModel* Brush)"
  },
  {
    "label": "BuildInfiniteFPoly()",
    "kind": "Method",
    "detail": "Function (FPoly)",
    "insertText": "BuildInfiniteFPoly(UModel* Model, int32 iNode)"
  },
  {
    "label": "HandleVolumeShapeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVolumeShapeChanged(AVolume& Volume)"
  },
  {
    "label": "RotateBrushVerts()",
    "kind": "Method",
    "detail": "Function (int32 GErrors ; bool GFastRebuild ; protected : void)",
    "insertText": "RotateBrushVerts(ABrush* Brush, const FRotator& Rotation, bool bClearComponents)"
  },
  {
    "label": "SplitPolyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitPolyList(UModel *Model, int32 iParent, ENodePlace NodePlace, int32 NumPolys, FPoly **PolyList, EBspOptimization Opt, int32 Balance, int32 PortalBias, int32 RebuildSimplePolys)"
  },
  {
    "label": "FBspPointsKey()",
    "kind": "Method",
    "detail": "Function (} ; typedef FBSPOps::ENodePlace ENodePlace ; struct FBspPointsKey { int32 X ; int32 Y ; int32 Z ;)",
    "insertText": "FBspPointsKey(int32 InX, int32 InY, int32 InZ) : X(InX) , Y(InY) , Z(InZ)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBspPointsKey& A, const FBspPointsKey& B)"
  },
  {
    "label": "FBspIndexedPoint()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBspIndexedPoint {)",
    "insertText": "FBspIndexedPoint(const FVector& InPoint, int32 InIndex) : Point(InPoint) , Index(InIndex)"
  },
  {
    "label": "FBspPointsGrid()",
    "kind": "Method",
    "detail": "Function (} FVector Point ; int32 Index ; } ; struct FBspPointsGridItem { TArray<FBspIndexedPoint,TInlineAllocator<1 6>> IndexedPoints ; } ; class FBspPointsGrid { public :)",
    "insertText": "FBspPointsGrid(float InGranularity, float InThreshold, int32 InitialSize = 0) : OneOverGranularity(1.0f / InGranularity) , Threshold(InThreshold)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(InitialSize)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(int32 InitialSize = 0)"
  },
  {
    "label": "FindOrAddPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddPoint(const FVector& Point, int32 Index, float Threshold)"
  }
]