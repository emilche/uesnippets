[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "IAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModel"
  },
  {
    "label": "FCurveAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveAttributes"
  },
  {
    "label": "FAnimationCurveIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCurveIdentifier"
  },
  {
    "label": "FAnimationAttributeIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationAttributeIdentifier"
  },
  {
    "label": "FOpenBracketAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenBracketAction"
  },
  {
    "label": "FCloseBracketAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCloseBracketAction"
  },
  {
    "label": "UAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationDataController"
  },
  {
    "label": "IAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataController"
  },
  {
    "label": "FScopedBracket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedBracket"
  },
  {
    "label": "found",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "found"
  },
  {
    "label": "FAnimDataControllerTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimDataControllerTestBase"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / Interface . h \" # include \" CurveIdentifier . h \" # include \" Misc / FrameRate . h \" # include \" AttributeIdentifier . h \" # include \" IAnimationDataModel . h \" # include \" Logging / LogVerbosity . h \" # include \" Algo / Transform . h \" # include \" Animation / AnimCurveTypes . h \" # if WITH_EDITOR # include \" ChangeTransactor . h \" # endif # include \" IAnimationDataController . generated . h \" # define LOCTEXT_NAMESPACE \" IAnimationDataController \" class FText ; class UAssetUserData ; class IAnimationDataModel ; struct FCurveAttributes ; struct FAnimationCurveIdentifier ; struct FAnimationAttributeIdentifier ; namespace UE { namespace Anim { class FOpenBracketAction ; class FCloseBracketAction ; } })",
    "insertText": "UINTERFACE(BlueprintType, meta=(CannotImplementInterfaceInBlueprint), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FScopedBracket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedBracket(IAnimationDataController* InController, const FText& InDescription, bool bInShouldTransact=true) : Controller(*InController), bShouldTransact(bInShouldTransact)"
  },
  {
    "label": "OpenBracket()",
    "kind": "Method",
    "detail": "Function (Controller .)",
    "insertText": "OpenBracket(InDescription, bShouldTransact)"
  },
  {
    "label": "FScopedBracket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedBracket(IAnimationDataController& InController, const FText& InDescription, bool bInShouldTransact=true) : Controller(InController), bShouldTransact(bInShouldTransact)"
  },
  {
    "label": "FScopedBracket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedBracket(const TScriptInterface<IAnimationDataController>& InController, const FText& InDescription, bool bInShouldTransact=true) : Controller(*InController), bShouldTransact(bInShouldTransact)"
  },
  {
    "label": "FScopedBracket()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedBracket()"
  },
  {
    "label": "CloseBracket()",
    "kind": "Method",
    "detail": "Function (Controller .)",
    "insertText": "CloseBracket(bShouldTransact)"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (const IAnimationDataModel* const)",
    "insertText": "GetModel()"
  },
  {
    "label": "AddBoneCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoneCurve(BoneName, bShouldTransact)"
  },
  {
    "label": "SetBoneTrackKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBoneTrackKeys(FName BoneName, const TArray<FVector3f>& PositionalKeys, const TArray<FQuat4f>& RotationalKeys, const TArray<FVector3f>& ScalingKeys, bool bShouldTransact = true)"
  },
  {
    "label": "UpdateBoneTrackKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBoneTrackKeys(FName BoneName, const FInt32Range& KeyRangeToSet, const TArray<FVector3f>& PositionalKeys, const TArray<FQuat4f>& RotationalKeys, const TArray<FVector3f>& ScalingKeys, bool bShouldTransact = true)"
  },
  {
    "label": "UpdateBoneTrackKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBoneTrackKeys(FName BoneName, const FInt32Range& KeyRangeToSet, const TArray<FVector>& PositionalKeys, const TArray<FQuat>& RotationalKeys, const TArray<FVector>& ScalingKeys, bool bShouldTransact = true)"
  },
  {
    "label": "SetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurveAttributes(const FAnimationCurveIdentifier& CurveId, const FCurveAttributes& Attributes, bool bShouldTransact = true)"
  },
  {
    "label": "RemoveBoneTracksMissingFromSkeleton()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveBoneTracksMissingFromSkeleton(const USkeleton* Skeleton, bool bShouldTransact = true)"
  },
  {
    "label": "UpdateAttributesFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttributesFromSkeleton(const USkeleton* Skeleton, bool bShouldTransact = true)"
  },
  {
    "label": "NotifyPopulated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPopulated()"
  },
  {
    "label": "ResetModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModel(bool bShouldTransact = true)"
  },
  {
    "label": "SetTypedAttributeKey()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> bool)",
    "insertText": "SetTypedAttributeKey(const FAnimationAttributeIdentifier& AttributeIdentifier, float Time, const AttributeType& KeyValue, bool bShouldTransact = true)"
  },
  {
    "label": "SetAttributeKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetAttributeKey(const FAnimationAttributeIdentifier& AttributeIdentifier, float Time, const void* KeyValue, const UScriptStruct* TypeStruct, bool bShouldTransact = true)"
  },
  {
    "label": "SetAttributeKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAttributeKeys(const FAnimationAttributeIdentifier& AttributeIdentifier, TArrayView<const float> Times, TArrayView<const void*> KeyValues, const UScriptStruct* TypeStruct, bool bShouldTransact = true)"
  },
  {
    "label": "SetTypedAttributeKeys()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> bool)",
    "insertText": "SetTypedAttributeKeys(const FAnimationAttributeIdentifier& AttributeIdentifier, TArrayView<const float> Times, TArrayView<const AttributeType> KeyValues, bool bShouldTransact = true)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (TArray<const void*> KeyValuePtrs ;)",
    "insertText": "Transform(KeyValues, KeyValuePtrs, [](const AttributeType& Value) { return static_cast<const void*>(&Value); })"
  },
  {
    "label": "UpdateWithSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithSkeleton(USkeleton* TargetSkeleton, bool bShouldTransact = true)"
  },
  {
    "label": "PopulateWithExistingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWithExistingModel(TScriptInterface<IAnimationDataModel> InModel)"
  },
  {
    "label": "InitializeModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeModel()"
  },
  {
    "label": "ConvertSecondsToFrameNumber()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "ConvertSecondsToFrameNumber(double Seconds)"
  },
  {
    "label": "ValidateModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateModel()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (const FFrameRate& ModelFrameRate =)",
    "insertText": "GetModel()->GetFrameRate()"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions DurationFormatOptions =)",
    "insertText": "FNumberFormattingOptions() .SetMinimumFractionalDigits(8) .SetMaximumFractionalDigits(8)"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (const FFrameTime FrameTime = ModelFrameRate .)",
    "insertText": "AsFrameTime(Seconds)"
  },
  {
    "label": "ReportWarningf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportWarningf(LOCTEXT(\"SecondsToFrameNumberPrecisionWarning\", \"Insufficient precision while converting seconds to frames: {0} seconds {1} frames using {2} (sub-frame in seconds {3})\"), FText::AsNumber(Seconds), FText::AsNumber(FrameTime.AsDecimal(), &DurationFormatOptions), ModelFrameRate.ToPrettyText(), FText::AsNumber(ModelFrameRate.AsSeconds(FFrameTime(0, FrameTime.GetSubFrame())), &DurationFormatOptions))"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (} return FrameTime .)",
    "insertText": "GetFrame()"
  },
  {
    "label": "NotifyBracketOpen()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "NotifyBracketOpen()"
  },
  {
    "label": "NotifyBracketClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBracketClosed()"
  },
  {
    "label": "ReportWarningf()",
    "kind": "Method",
    "detail": "Function (template<FmtType,. . . Types> void)",
    "insertText": "ReportWarningf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportWarning(FText::Format(Fmt, Args...))"
  },
  {
    "label": "ReportErrorf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ReportErrorf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError(FText::Format(Fmt, Args...))"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Report(ELogVerbosity::Type Verbosity, const FText& Message)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(GetModelInterface().GetObject(), Message, Verbosity)"
  },
  {
    "label": "Reportf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Reportf(ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(GetModelInterface().GetObject(), FText::Format(Fmt, Args...), Verbosity)"
  },
  {
    "label": "ReportWarning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportWarning(const FText& Message)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(GetModelInterface().GetObject(), Message, ELogVerbosity::Warning)"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportError(const FText& Message)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(GetModelInterface().GetObject(), Message, ELogVerbosity::Error)"
  },
  {
    "label": "IsSupportedCurveType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupportedCurveType(ERawCurveTrackTypes CurveType)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const TArray<ERawCurveTrackTypes> SupportedTypes = { ERawCurveTrackTypes::RCT_Float,ERawCurveTrackTypes::RCT_Transform } ; return SupportedTypes .)",
    "insertText": "Contains(CurveType)"
  },
  {
    "label": "CheckOuterClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckOuterClass(UClass* InClass)"
  },
  {
    "label": "ReportErrorf()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "ReportErrorf(NSLOCTEXT(\"IAnimationDataController\", \"NoValidOuterObjectFoundError\", \"No valid outer object found for Animation Data Model {0}\"), FText::FromString(GetModelInterface().GetObject()->GetName()))"
  },
  {
    "label": "GetCurveTypeValueName()",
    "kind": "Method",
    "detail": "Function (} return false ; } FString)",
    "insertText": "GetCurveTypeValueName(ERawCurveTrackTypes InType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ValueString ;)",
    "insertText": "if(const UEnum* Enum = FindObject<UEnum>(nullptr, TEXT(\"/Script/Engine.ERawCurveTrackTypes\")))"
  },
  {
    "label": "GetNameStringByValue()",
    "kind": "Method",
    "detail": "Function (ValueString = Enum ->)",
    "insertText": "GetNameStringByValue(static_cast<int64>(InType))"
  },
  {
    "label": "ConditionalTransaction()",
    "kind": "Method",
    "detail": "Function (} return ValueString ; } int32 DefaultCurveFlags = EAnimAssetCurveFlags::AACF_Editable ; # if WITH_EDITOR typedef TUniquePtr<UE::FScopedCompoundTransaction> FTransaction ; FTransaction)",
    "insertText": "ConditionalTransaction(const FText& Description, bool bCondition)"
  },
  {
    "label": "ConditionalBracket()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } typedef TUniquePtr<IAnimationDataController::FScopedBracket> FBracket ; FBracket)",
    "insertText": "ConditionalBracket(const FText& Description, bool bCondition)"
  },
  {
    "label": "ConditionalAction()",
    "kind": "Method",
    "detail": "Function (} template<ActionClass,class . . . ActionArguments> void)",
    "insertText": "ConditionalAction(bool bCondition, ActionArguments&&... Arguments)"
  },
  {
    "label": "ActionClass()",
    "kind": "Method",
    "detail": "Function (ChangeTransactor . AddTransactionChange<)",
    "insertText": "ActionClass(Forward<ActionArguments>(Arguments)...)"
  },
  {
    "label": "ReportObjectWarningf()",
    "kind": "Method",
    "detail": "Function (\\ } } protected : UE::FChangeTransactor ChangeTransactor ; # endif public : template<FmtType,. . . Types> void)",
    "insertText": "ReportObjectWarningf(const UObject* ErrorObject, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(ErrorObject, FText::Format(Fmt, Args...), ELogVerbosity::Warning)"
  },
  {
    "label": "ReportObjectErrorf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ReportObjectErrorf(const UObject* ErrorObject, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMessage(ErrorObject, FText::Format(Fmt, Args...), ELogVerbosity::Error)"
  },
  {
    "label": "Reportf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Reportf(ELogVerbosity::Type LogVerbosity, const UObject* ErrorObject, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ReportMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportMessage(const UObject* ErrorObject, const FText& InMessage, ELogVerbosity::Type LogVerbosity)"
  },
  {
    "label": "CONDITIONAL_TRANSACTION()",
    "kind": "Method",
    "detail": "Function (private : class FAnimDataControllerTestBase ; UE::Anim::FOpenBracketAction ; UE::Anim::FCloseBracketAction ; } ; # define)",
    "insertText": "CONDITIONAL_TRANSACTION(Text) FTransaction Transaction = ConditionalTransaction(Test, bShouldTransact)"
  },
  {
    "label": "CONDITIONAL_BRACKET()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_BRACKET(Text) FBracket Bracket = ConditionalBracket(Text, bShouldTransact)"
  },
  {
    "label": "CONDITIONAL_ACTION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_ACTION(ActionClass, ...) ConditionalAction<ActionClass>(bShouldTransact, __VA_ARGS__)"
  }
]