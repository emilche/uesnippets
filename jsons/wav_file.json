[
  {
    "label": "WavFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WavFile"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "WavWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WavWriter"
  },
  {
    "label": "WavReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WavReader"
  },
  {
    "label": "WavFile()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_AUDIO_WAV_FILE_H_ # define COMMON_AUDIO_WAV_FILE_H_ # include<stdint . h> # include<cstddef> # include<string> # include \" common_audio / wav_header . h \" # include \" rtc_base / system / file_wrapper . h \" namespace webrtc { class WavFile { public : enum class SampleFormat { kInt16,kFloat } ; ~)",
    "insertText": "WavFile()"
  },
  {
    "label": "sample_rate()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "sample_rate()"
  },
  {
    "label": "num_channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_channels()"
  },
  {
    "label": "num_samples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_samples()"
  },
  {
    "label": "WavWriter()",
    "kind": "Method",
    "detail": "Function (} ; class WavWriter final : public WavFile { public :)",
    "insertText": "WavWriter(absl::string_view filename, int sample_rate, size_t num_channels, SampleFormat sample_format = SampleFormat::kInt16)"
  },
  {
    "label": "WavWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WavWriter(FileWrapper file, int sample_rate, size_t num_channels, SampleFormat sample_format = SampleFormat::kInt16)"
  },
  {
    "label": "WavWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WavWriter()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "WavWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WavWriter(const WavWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WavWriter&)",
    "insertText": "operator(const WavWriter&)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSamples(const float* samples, size_t num_samples)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSamples(const int16_t* samples, size_t num_samples)"
  },
  {
    "label": "WavReader()",
    "kind": "Method",
    "detail": "Function (const int sample_rate_ ; const size_t num_channels_ ; size_t num_samples_written_ ; WavFormat format_ ; FileWrapper file_ ; } ; class WavReader final : public WavFile { public :)",
    "insertText": "WavReader(absl::string_view filename)"
  },
  {
    "label": "WavReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WavReader(FileWrapper file)"
  },
  {
    "label": "WavReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WavReader()"
  },
  {
    "label": "WavReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WavReader(const WavReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WavReader&)",
    "insertText": "operator(const WavReader&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ReadSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadSamples(size_t num_samples, float* samples)"
  },
  {
    "label": "ReadSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadSamples(size_t num_samples, int16_t* samples)"
  }
]