[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "ForceAlignedAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForceAlignedAccess"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_FORCEALIGNEDACCESS_H # define EIGEN_FORCEALIGNEDACCESS_H namespace Eigen { namespace internal { template<ExpressionType> struct traits<ForceAlignedAccess<ExpressionType>> : public traits<ExpressionType> { } ; } template<ExpressionType> class ForceAlignedAccess : public internal::dense_xpr_base<ForceAlignedAccess<ExpressionType>>::type { public : typedef internal::dense_xpr_base<ForceAlignedAccess>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(ForceAlignedAccess) EIGEN_DEVICE_FUNC explicit inline ForceAlignedAccess(const ExpressionType& matrix) : m_expression(matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "innerStride()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CoeffReturnType)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> const PacketScalar)",
    "insertText": "packet(Index row, Index col)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> void)",
    "insertText": "writePacket(Index row, Index col, const PacketScalar& x)"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (m_expression .)",
    "insertText": "const_cast_derived().template writePacket<Aligned>(row, col, x)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> const PacketScalar)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> void)",
    "insertText": "writePacket(Index index, const PacketScalar& x)"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (m_expression .)",
    "insertText": "const_cast_derived().template writePacket<Aligned>(index, x)"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC operator const)",
    "insertText": "ExpressionType()"
  },
  {
    "label": "forceAlignedAccess()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> const ForceAlignedAccess<Derived> MatrixBase<Derived)",
    "insertText": "forceAlignedAccess()"
  },
  {
    "label": "forceAlignedAccessIf()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<bool Enable> internal::add_const_on_value_type<internal::conditional<Enable,ForceAlignedAccess<Derived>,Derived&>::type>::type MatrixBase<Derived)",
    "insertText": "forceAlignedAccessIf()"
  }
]