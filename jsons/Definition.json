[
  {
    "label": "NodeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeDef"
  },
  {
    "label": "Implementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Implementation"
  },
  {
    "label": "TypeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeDef"
  },
  {
    "label": "TargetDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetDef"
  },
  {
    "label": "Member",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Member"
  },
  {
    "label": "Unit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unit"
  },
  {
    "label": "UnitDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitDef"
  },
  {
    "label": "UnitTypeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTypeDef"
  },
  {
    "label": "AttributeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AttributeDef"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "NodeDef()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_DEFINITION_H # define MATERIALX_DEFINITION_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Interface . h> MATERIALX_NAMESPACE_BEGIN const string COLOR_SEMANTIC ; const string SHADER_SEMANTIC ; class NodeDef ; class Implementation ; class TypeDef ; class TargetDef ; class Member ; class Unit ; class UnitDef ; class UnitTypeDef ; class AttributeDef ; using NodeDefPtr = shared_ptr<NodeDef> ; using ConstNodeDefPtr = shared_ptr<const NodeDef> ; using ImplementationPtr = shared_ptr<Implementation> ; using ConstImplementationPtr = shared_ptr<const Implementation> ; using TypeDefPtr = shared_ptr<TypeDef> ; using ConstTypeDefPtr = shared_ptr<const TypeDef> ; using TargetDefPtr = shared_ptr<TargetDef> ; using ConstTargetDefPtr = shared_ptr<const TargetDef> ; using MemberPtr = shared_ptr<Member> ; using ConstMemberPtr = shared_ptr<const Member> ; using UnitPtr = shared_ptr<Unit> ; using ConstUnitPtr = shared_ptr<const Unit> ; using UnitDefPtr = shared_ptr<UnitDef> ; using ConstUnitDefPtr = shared_ptr<const UnitDef> ; using UnitTypeDefPtr = shared_ptr<UnitTypeDef> ; using ConstUnitTypeDefPtr = shared_ptr<const UnitTypeDef> ; using AttributeDefPtr = shared_ptr<AttributeDef> ; using AttributeDefDefPtr = shared_ptr<const AttributeDef> ; class NodeDef : public InterfaceElement { public :)",
    "insertText": "NodeDef(ElementPtr parent, const string& name) : InterfaceElement(parent, CATEGORY, name)"
  },
  {
    "label": "NodeDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "NodeDef()"
  },
  {
    "label": "setNodeString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNodeString(const string& node)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_ATTRIBUTE, node)"
  },
  {
    "label": "hasNodeString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeString()"
  },
  {
    "label": "getNodeString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeString()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getType()"
  },
  {
    "label": "setNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNodeGroup(const string& category)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_GROUP_ATTRIBUTE, category)"
  },
  {
    "label": "hasNodeGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeGroup()"
  },
  {
    "label": "getNodeGroup()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeGroup()"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (} InterfaceElementPtr)",
    "insertText": "getImplementation(const string& target = EMPTY_STRING)"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validate(string* message = nullptr)"
  },
  {
    "label": "isVersionCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVersionCompatible(const string& version)"
  },
  {
    "label": "getDeclaration()",
    "kind": "Method",
    "detail": "Function (ConstNodeDefPtr)",
    "insertText": "getDeclaration(const string& target = EMPTY_STRING)"
  },
  {
    "label": "Implementation()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string NODE_ATTRIBUTE ; const string NODE_GROUP_ATTRIBUTE ; const string TEXTURE_NODE_GROUP ; const string PROCEDURAL_NODE_GROUP ; const string GEOMETRIC_NODE_GROUP ; const string ADJUSTMENT_NODE_GROUP ; const string CONDITIONAL_NODE_GROUP ; const string ORGANIZATION_NODE_GROUP ; const string TRANSLATION_NODE_GROUP ; } ; class Implementation : public InterfaceElement { public :)",
    "insertText": "Implementation(ElementPtr parent, const string& name) : InterfaceElement(parent, CATEGORY, name)"
  },
  {
    "label": "Implementation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Implementation()"
  },
  {
    "label": "setFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFile(const string& file)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(FILE_ATTRIBUTE, file)"
  },
  {
    "label": "hasFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasFile()"
  },
  {
    "label": "getFile()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getFile()"
  },
  {
    "label": "setFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFunction(const string& function)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(FUNCTION_ATTRIBUTE, function)"
  },
  {
    "label": "hasFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasFunction()"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getFunction()"
  },
  {
    "label": "setNodeGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNodeGraph(const string& nodegraph)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_GRAPH_ATTRIBUTE, nodegraph)"
  },
  {
    "label": "hasNodeGraph()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeGraph()"
  },
  {
    "label": "getNodeGraph()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeGraph()"
  },
  {
    "label": "setNodeDef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNodeDef(ConstNodeDefPtr nodeDef)"
  },
  {
    "label": "getNodeDef()",
    "kind": "Method",
    "detail": "Function (NodeDefPtr)",
    "insertText": "getNodeDef()"
  },
  {
    "label": "TypeDef()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string FILE_ATTRIBUTE ; const string FUNCTION_ATTRIBUTE ; const string NODE_GRAPH_ATTRIBUTE ; } ; class TypeDef : public Element { public :)",
    "insertText": "TypeDef(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "TypeDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TypeDef()"
  },
  {
    "label": "setSemantic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSemantic(const string& semantic)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(SEMANTIC_ATTRIBUTE, semantic)"
  },
  {
    "label": "hasSemantic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasSemantic()"
  },
  {
    "label": "getSemantic()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getSemantic()"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setContext(const string& context)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(CONTEXT_ATTRIBUTE, context)"
  },
  {
    "label": "hasContext()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasContext()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getContext()"
  },
  {
    "label": "addMember()",
    "kind": "Method",
    "detail": "Function (} MemberPtr)",
    "insertText": "addMember(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getMember()",
    "kind": "Method",
    "detail": "Function (} MemberPtr)",
    "insertText": "getMember(const string& name)"
  },
  {
    "label": "getMembers()",
    "kind": "Method",
    "detail": "Function (} vector<MemberPtr>)",
    "insertText": "getMembers()"
  },
  {
    "label": "removeMember()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeMember(const string& name)"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Member(name)"
  },
  {
    "label": "TargetDef()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string SEMANTIC_ATTRIBUTE ; const string CONTEXT_ATTRIBUTE ; } ; class TargetDef : public TypedElement { public :)",
    "insertText": "TargetDef(ElementPtr parent, const string& name) : TypedElement(parent, CATEGORY, name)"
  },
  {
    "label": "TargetDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TargetDef()"
  },
  {
    "label": "getMatchingTargets()",
    "kind": "Method",
    "detail": "Function (} StringVec)",
    "insertText": "getMatchingTargets()"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; } ; class Member : public TypedElement { public :)",
    "insertText": "Member(ElementPtr parent, const string& name) : TypedElement(parent, CATEGORY, name)"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Member()"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class Unit : public Element { public :)",
    "insertText": "Unit(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Unit()"
  },
  {
    "label": "UnitDef()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class UnitDef : public Element { public :)",
    "insertText": "UnitDef(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "UnitDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UnitDef()"
  },
  {
    "label": "setUnitType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUnitType(const string& type)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(UNITTYPE_ATTRIBUTE, type)"
  },
  {
    "label": "hasUnitType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUnitType()"
  },
  {
    "label": "getUnitType()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getUnitType()"
  },
  {
    "label": "addUnit()",
    "kind": "Method",
    "detail": "Function (} UnitPtr)",
    "insertText": "addUnit(const string& name)"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "Exception(\"A unit definition name cannot be empty\")"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (} return addChild<)",
    "insertText": "Unit(name)"
  },
  {
    "label": "getUnit()",
    "kind": "Method",
    "detail": "Function (} UnitPtr)",
    "insertText": "getUnit(const string& name)"
  },
  {
    "label": "getUnits()",
    "kind": "Method",
    "detail": "Function (} vector<UnitPtr>)",
    "insertText": "getUnits()"
  },
  {
    "label": "removeUnit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeUnit(const string& name)"
  },
  {
    "label": "UnitTypeDef()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string UNITTYPE_ATTRIBUTE ; } ; class UnitTypeDef : public Element { public :)",
    "insertText": "UnitTypeDef(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "UnitTypeDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UnitTypeDef()"
  },
  {
    "label": "getUnitDefs()",
    "kind": "Method",
    "detail": "Function (} vector<UnitDefPtr>)",
    "insertText": "getUnitDefs()"
  },
  {
    "label": "AttributeDef()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; } ; class AttributeDef : public TypedElement { public :)",
    "insertText": "AttributeDef(ElementPtr parent, const string& name) : TypedElement(parent, CATEGORY, name)"
  },
  {
    "label": "AttributeDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AttributeDef()"
  },
  {
    "label": "setAttrName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAttrName(const string& name)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(ATTRNAME_ATTRIBUTE, name)"
  },
  {
    "label": "hasAttrName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasAttrName()"
  },
  {
    "label": "getAttrName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getAttrName()"
  },
  {
    "label": "setValueString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueString(const string& value)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VALUE_ATTRIBUTE, value)"
  },
  {
    "label": "hasValueString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasValueString()"
  },
  {
    "label": "getValueString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getValueString()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "setValue(const T& value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setType(!type.empty() ? type : getTypeString<T>())"
  },
  {
    "label": "setValueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueString(toValueString(value))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(const char* value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(value ? string(value) : EMPTY_STRING, type)"
  },
  {
    "label": "hasValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasValue()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} ValuePtr)",
    "insertText": "getValue()"
  },
  {
    "label": "setElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setElements(const string& elements)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(ELEMENTS_ATTRIBUTE, elements)"
  },
  {
    "label": "hasElements()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasElements()"
  },
  {
    "label": "getElements()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getElements()"
  },
  {
    "label": "setExportable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setExportable(bool value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "bool(EXPORTABLE_ATTRIBUTE, value)"
  },
  {
    "label": "getExportable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getExportable()"
  }
]