[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "TTriLinearGridInterpolant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTriLinearGridInterpolant"
  },
  {
    "label": "TTriLinearGridInterpolant()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include<type_traits> namespace UE { namespace Geometry { template<class GridType,RealType = double,bool bScalarCellSize = true> class TTriLinearGridInterpolant { public : using CellSizeType = std::conditional_t<bScalarCellSize,RealType,TVector<RealType>> ; GridType* Grid ; TVector<RealType> GridOrigin ; CellSizeType CellSize ; FVector3i Dimensions ; RealType Outside = TMathUtil<RealType>::SafeLargeValue ;)",
    "insertText": "TTriLinearGridInterpolant(GridType* Grid, TVector<RealType> GridOrigin, CellSizeType CellSize, FVector3i Dimensions) : Grid(Grid), GridOrigin(GridOrigin), CellSize(CellSize), Dimensions(Dimensions)"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (} TAxisAlignedBox3<RealType>)",
    "insertText": "Bounds()"
  },
  {
    "label": "Cell()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "Cell(const TVector<RealType>& Pt)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FVector3i CellCoords ; CellCoords .)",
    "insertText": "X(int)((Pt.X - GridOrigin.X) / GetDim(CellSize, 0))"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (CellCoords .)",
    "insertText": "Y(int)((Pt.Y - GridOrigin.Y) / GetDim(CellSize, 1))"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (CellCoords .)",
    "insertText": "Z(int)((Pt.Z - GridOrigin.Z) / GetDim(CellSize, 2))"
  },
  {
    "label": "gridPt()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "gridPt(((Pt.X - GridOrigin.X) / GetDim(CellSize, 0)), ((Pt.Y - GridOrigin.Y) / GetDim(CellSize, 1)), ((Pt.Z - GridOrigin.Z) / GetDim(CellSize, 2)))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (gridPt . X =)",
    "insertText": "Clamp(gridPt.X, 0, Dimensions.X - (1 + FMathd::Epsilon))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (gridPt . Y =)",
    "insertText": "Clamp(gridPt.Y, 0, Dimensions.Y - (1 + FMathd::Epsilon))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (gridPt . Z =)",
    "insertText": "Clamp(gridPt.Z, 0, Dimensions.Z - (1 + FMathd::Epsilon))"
  },
  {
    "label": "X0()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "X0(int)"
  },
  {
    "label": "Y0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Y0(int)"
  },
  {
    "label": "Z0()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Z0(int)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (RealType fAy = gridPt .)",
    "insertText": "Y(RealType)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (RealType fAz = gridPt .)",
    "insertText": "Z(RealType)"
  },
  {
    "label": "OneMinusfAx()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "OneMinusfAx(RealType)(1.0)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (RealType xa,xb ;)",
    "insertText": "get_value_pair(X0, Y0, Z0, xa, xb)"
  },
  {
    "label": "yz()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "yz(1 - fAy) * (1 - fAz)"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "sum(OneMinusfAx * xa + fAx * xb)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_value_pair(X0, Y0, Z1, xa, xb)"
  },
  {
    "label": "yz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "yz(1 - fAy) * (fAz)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_value_pair(X0, Y1, Z0, xa, xb)"
  },
  {
    "label": "yz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "yz(fAy) * (1 - fAz)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_value_pair(X0, Y1, Z1, xa, xb)"
  },
  {
    "label": "yz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "yz(fAy) * (fAz)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(RealType)Grid->GetValue(FVector3i(I, J, K))"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "B(RealType)Grid->GetValue(FVector3i(I + 1, J, K))"
  },
  {
    "label": "Gradient()",
    "kind": "Method",
    "detail": "Function (} public : TVector<RealType>)",
    "insertText": "Gradient(const TVector<RealType>& Pt)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> gridPt = TVector<)",
    "insertText": "RealType(((Pt.X - GridOrigin.X) / GetDim(CellSize, 0)), ((Pt.Y - GridOrigin.Y) / GetDim(CellSize, 1)), ((Pt.Z - GridOrigin.Z) / GetDim(CellSize, 2)))"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (RealType fAx = gridPt .)",
    "insertText": "X(RealType)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (RealType fV000,fV100 ;)",
    "insertText": "get_value_pair(X0, Y0, Z0, fV000, fV100)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (RealType fV010,fV110 ;)",
    "insertText": "get_value_pair(X0, Y1, Z0, fV010, fV110)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (RealType fV001,fV101 ;)",
    "insertText": "get_value_pair(X0, Y0, Z1, fV001, fV101)"
  },
  {
    "label": "get_value_pair()",
    "kind": "Method",
    "detail": "Function (RealType fV011,fV111 ;)",
    "insertText": "get_value_pair(X0, Y1, Z1, fV011, fV111)"
  },
  {
    "label": "fV000()",
    "kind": "Method",
    "detail": "Function (RealType gradX = -)",
    "insertText": "fV000(1 - fAy) * (1 - fAz) + -fV001 * (1 - fAy) * (fAz)+ -fV010 * (fAy) * (1 - fAz) + -fV011 * (fAy) * (fAz)+ fV100 * (1 - fAy) * (1 - fAz) + fV101 * (1 - fAy) * (fAz)+ fV110 * (fAy) * (1 - fAz) + fV111 * (fAy) * (fAz)"
  },
  {
    "label": "fV000()",
    "kind": "Method",
    "detail": "Function (RealType gradY = -)",
    "insertText": "fV000(1 - fAx) * (1 - fAz) + -fV001 * (1 - fAx) * (fAz)+ fV010 * (1 - fAx) * (1 - fAz) + fV011 * (1 - fAx) * (fAz)+ -fV100 * (fAx) * (1 - fAz) + -fV101 * (fAx) * (fAz)+ fV110 * (fAx) * (1 - fAz) + fV111 * (fAx) * (fAz)"
  },
  {
    "label": "fV000()",
    "kind": "Method",
    "detail": "Function (RealType gradZ = -)",
    "insertText": "fV000(1 - fAx) * (1 - fAy) + fV001 * (1 - fAx) * (1 - fAy) + -fV010 * (1 - fAx) * (fAy)+ fV011 * (1 - fAx) * (fAy)+ -fV100 * (fAx) * (1 - fAy) + fV101 * (fAx) * (1 - fAy) + -fV110 * (fAx) * (fAy)+ fV111 * (fAx) * (fAy)"
  },
  {
    "label": "GetDim()",
    "kind": "Method",
    "detail": "Function (} private : RealType)",
    "insertText": "GetDim(CellSizeType CellSize, int32 Axis)"
  }
]