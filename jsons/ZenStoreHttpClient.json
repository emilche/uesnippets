[
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FZenHttpRequestPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenHttpRequestPool"
  },
  {
    "label": "FZenHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenHttpRequest"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IOSTOREUTILITIES_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOSTOREUTILITIES_API"
  },
  {
    "label": "SaltGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SaltGenerator"
  },
  {
    "label": "FZenStoreHttpClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / StringView . h \" # include \" Experimental / ZenServerInterface . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoDispatcher . h \" # include \" Misc / StringBuilder . h \" # include \" Serialization / CompactBinaryPackage . h \" # include \" Templates / UniquePtr . h \" class FCbPackage ; class FCbObject ; namespace UE { namespace Zen { struct FZenHttpRequestPool ; class FZenHttpRequest ; enum class EContentType ; } class FZenStoreHttpClient { public :)",
    "insertText": "FZenStoreHttpClient()"
  },
  {
    "label": "FZenStoreHttpClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FZenStoreHttpClient(FStringView HostName, uint16 Port)"
  },
  {
    "label": "FZenStoreHttpClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FZenStoreHttpClient(UE::Zen::FServiceSettings&& InSettings)"
  },
  {
    "label": "TryCreateProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateProject(FStringView InProjectId, FStringView InParentProjectId, FStringView InOplogId, FStringView ServerRoot, FStringView EngineRoot, FStringView ProjectRoot, FStringView ProjectFilePath)"
  },
  {
    "label": "TryCreateOplog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateOplog(FStringView InProjectId, FStringView InOplogId, FStringView InOplogLifetimeMarkerPath, bool bFullBuild)"
  },
  {
    "label": "InitializeReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeReadOnly(FStringView InProjectId, FStringView InOplogId)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "StartBuildPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartBuildPass()"
  },
  {
    "label": "EndBuildPass()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "EndBuildPass(FCbPackage OpEntry)"
  },
  {
    "label": "AppendOp()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "AppendOp(FCbPackage OpEntry)"
  },
  {
    "label": "GetChunkSize()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetChunkSize(const FIoChunkId& Id)"
  },
  {
    "label": "ReadChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadChunk(const FIoChunkId& Id, uint64 Offset = 0, uint64 Size = ~0ull)"
  },
  {
    "label": "ReadOpLogAttachment()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadOpLogAttachment(FStringView Id)"
  },
  {
    "label": "GetHostName()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_ZEN const TCHAR*)",
    "insertText": "GetHostName()"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetPort()"
  },
  {
    "label": "GetZenServiceInstance()",
    "kind": "Method",
    "detail": "Function (} const UE::Zen::FZenServiceInstance&)",
    "insertText": "GetZenServiceInstance()"
  },
  {
    "label": "GetOplog()",
    "kind": "Method",
    "detail": "Function (TFuture<TIoStatusOr<FCbObject>>)",
    "insertText": "GetOplog()"
  },
  {
    "label": "GetFiles()",
    "kind": "Method",
    "detail": "Function (TFuture<TIoStatusOr<FCbObject>>)",
    "insertText": "GetFiles()"
  },
  {
    "label": "GetChunkInfos()",
    "kind": "Method",
    "detail": "Function (TFuture<TIoStatusOr<FCbObject>>)",
    "insertText": "GetChunkInfos()"
  },
  {
    "label": "FindOrAddAttachmentId()",
    "kind": "Method",
    "detail": "Function (const UTF8CHAR*)",
    "insertText": "FindOrAddAttachmentId(FUtf8StringView AttachmentText)"
  },
  {
    "label": "FindAttachmentId()",
    "kind": "Method",
    "detail": "Function (const UTF8CHAR*)",
    "insertText": "FindAttachmentId(FUtf8StringView AttachmentText)"
  },
  {
    "label": "ReadOpLogUri()",
    "kind": "Method",
    "detail": "Function (private : TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadOpLogUri(FStringBuilderBase& ChunkUri, uint64 Offset = 0, uint64 Size = ~0ull)"
  },
  {
    "label": "Download()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Download(Zen::FZenHttpRequest& Request, FStringView Uri, TArray64<uint8>* Buffer, Zen::EContentType AcceptType)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Post(Zen::FZenHttpRequest& Request, FStringView Uri, FCbObjectView Obj)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Post(Zen::FZenHttpRequest& Request, FStringView Uri, FMemoryView Payload)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Delete(Zen::FZenHttpRequest& Request, FStringView Uri)"
  },
  {
    "label": "ShouldRecoverAndRetry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecoverAndRetry(Zen::FZenHttpRequest& Request)"
  },
  {
    "label": "SaltGenerator()",
    "kind": "Method",
    "detail": "Function (const uint32 PoolEntryCount ; struct SaltGenerator {)",
    "insertText": "SaltGenerator()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Next()"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t A = + + GOpCounter ; return static_cast<)",
    "insertText": "int32_t((A ^ (SaltBase + (A << 6) + (A >> 2))) & 0x7fffffffu)"
  }
]