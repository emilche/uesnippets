[
  {
    "label": "FuzzerTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuzzerTimeout"
  },
  {
    "label": "FuzzerCallbacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuzzerCallbacks"
  },
  {
    "label": "FuzzerTimeout()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_FUZZERS_DCSCTP_FUZZERS_H_ # define NET_DCSCTP_FUZZERS_DCSCTP_FUZZERS_H_ # include<deque> # include<memory> # include<set> # include<vector> # include \" api / array_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" namespace dcsctp { namespace dcsctp_fuzzers { class FuzzerTimeout : public Timeout { public :)",
    "insertText": "FuzzerTimeout(std::set<TimeoutID>& active_timeouts) : active_timeouts_(active_timeouts)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(DurationMs duration_ms, TimeoutID timeout_id)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(active_timeouts_.find(*timeout_id_) == active_timeouts_.end())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (} timeout_id_ = timeout_id ;)",
    "insertText": "RTC_DCHECK(active_timeouts_.insert(timeout_id).second)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(timeout_id_.has_value())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(active_timeouts_.erase(*timeout_id_) == 1)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (timeout_id_ = absl::nullopt ; } std::set<TimeoutID>& active_timeouts_ ; absl::optional<TimeoutID> timeout_id_ ; } ; class FuzzerCallbacks : public DcSctpSocketCallbacks { public : int kRandomValue = 4 2 ; void)",
    "insertText": "SendPacket(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (sent_packets_ .)",
    "insertText": "emplace_back(std::vector<uint8_t>(data.begin(), data.end()))"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Timeout>)",
    "insertText": "CreateTimeout(webrtc::TaskQueueBase::DelayPrecision precision)"
  },
  {
    "label": "TimeMillis()",
    "kind": "Method",
    "detail": "Function (} TimeMs)",
    "insertText": "TimeMillis()"
  },
  {
    "label": "GetRandomInt()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetRandomInt(uint32_t low, uint32_t high)"
  },
  {
    "label": "OnError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnError(ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnAborted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAborted(ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnConnected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnConnected()"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClosed()"
  },
  {
    "label": "OnConnectionRestarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnConnectionRestarted()"
  },
  {
    "label": "OnStreamsResetFailed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStreamsResetFailed(rtc::ArrayView<const StreamID> outgoing_streams, absl::string_view reason)"
  },
  {
    "label": "OnStreamsResetPerformed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStreamsResetPerformed(rtc::ArrayView<const StreamID> outgoing_streams)"
  },
  {
    "label": "OnIncomingStreamsReset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIncomingStreamsReset(rtc::ArrayView<const StreamID> incoming_streams)"
  },
  {
    "label": "ConsumeSentPacket()",
    "kind": "Method",
    "detail": "Function (} std::vector<uint8_t>)",
    "insertText": "ConsumeSentPacket()"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (sent_packets_ .)",
    "insertText": "pop_front()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto it = active_timeouts_ .)",
    "insertText": "begin()"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(it, index)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (TimeoutID timeout_id =* it ; active_timeouts_ .)",
    "insertText": "erase(it)"
  }
]