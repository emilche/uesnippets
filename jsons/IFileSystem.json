[
  {
    "label": "IFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileSystem"
  },
  {
    "label": "EWriteFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWriteFlags"
  },
  {
    "label": "IFileSystem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / Function . h \" # include \" uLang / Common / Text / UTF8String . h \" namespace uLang { class IFileSystem : public CSharedMix { public : enum EWriteFlags { None = 0,EvenIfReadOnly,} ; ~)",
    "insertText": "IFileSystem()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} using CFileDirectoryVisitor = TFunction<)",
    "insertText": "bool(const char* , const char* , bool)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const char* Directory, bool bRecurse, const CFileDirectoryVisitor& Visitor, bool bIsVisitorThreadSafe = false)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using CFileMemAllocator = TFunction<)",
    "insertText": "void(int32_t)"
  },
  {
    "label": "FileRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileRead(const char* FilePath, const CFileMemAllocator& Allocator)"
  },
  {
    "label": "FileWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileWrite(const char* FilePath, const char* Output, const size_t ByteSize, const EWriteFlags WriteFlags = EWriteFlags::None)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(const char* FilePath)"
  },
  {
    "label": "IsFileNewer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileNewer(const char* FilePath, const char* ComparisonPath)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const char* SourcePath, const char* DestinationPath)"
  },
  {
    "label": "DoesFileExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesFileExist(const char* FilePath)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilenameOnDisk(const char* FilePath, CUTF8String& OutFilenameOnDisk)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const char* DirPath)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const char* DirPath)"
  },
  {
    "label": "DoesDirectoryExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesDirectoryExist(const char* DirPath)"
  },
  {
    "label": "FindTempDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTempDir(CUTF8String& OutDir)"
  },
  {
    "label": "MakeTempFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeTempFile(CUTF8String& OutFilename)"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentWorkingDirectory(CUTF8String& OutWorkingDirectory)"
  },
  {
    "label": "SetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentWorkingDirectory(const char* DirPath)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const char* Filename, const bool bReadOnly)"
  }
]