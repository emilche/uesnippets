[
  {
    "label": "lapacke_llt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lapacke_llt"
  },
  {
    "label": "llt_inplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "llt_inplace"
  },
  {
    "label": "EIGEN_LAPACKE_LLT()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_LLT_LAPACKE_H # define EIGEN_LLT_LAPACKE_H namespace Eigen { namespace internal { template<Scalar> struct lapacke_llt ; # define)",
    "insertText": "EIGEN_LAPACKE_LLT(EIGTYPE, BLASTYPE, LAPACKE_PREFIX)"
  },
  {
    "label": "potrf()",
    "kind": "Method",
    "detail": "Function (\\ template<MatrixType> \\ Index)",
    "insertText": "potrf(MatrixType& m, char uplo)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int matrix_order ; \\ lapack_int size,lda,info,StorageOrder ; \\ EIGTYPE* a ; \\)",
    "insertText": "eigen_assert(m.rows()==m.cols())"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ \\ size = convert_index<)",
    "insertText": "lapack_int(m.rows())"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (\\ StorageOrder = MatrixType::Flags& RowMajorBit ? RowMajor : ColMajor ; \\ matrix_order = StorageOrder = = RowMajor ? LAPACK_ROW_MAJOR : LAPACK_COL_MAJOR ; \\)",
    "insertText": "a(m.coeffRef(0,0))"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "lapack_int(m.outerStride())"
  },
  {
    "label": "potrf()",
    "kind": "Method",
    "detail": "Function (\\ \\ info = LAPACKE_ # # LAPACKE_PREFIX # #)",
    "insertText": "potrf(matrix_order, uplo, size, (BLASTYPE*)a, lda)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "info(info==0)"
  },
  {
    "label": "blocked()",
    "kind": "Method",
    "detail": "Function (\\ return info ; \\ } \\ } ; \\ template<> struct llt_inplace<EIGTYPE,Lower> \\ { \\ template<MatrixType> \\ Index)",
    "insertText": "blocked(MatrixType& m)"
  },
  {
    "label": "potrf()",
    "kind": "Method",
    "detail": "Function (\\ return lapacke_llt<EIGTYPE)",
    "insertText": "potrf(m, 'L')"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<MatrixType,VectorType> \\ Index)",
    "insertText": "rankUpdate(MatrixType& mat, const VectorType& vec, const typename MatrixType::RealScalar& sigma)"
  },
  {
    "label": "potrf()",
    "kind": "Method",
    "detail": "Function (\\ return lapacke_llt<EIGTYPE)",
    "insertText": "potrf(m, 'U')"
  },
  {
    "label": "matt()",
    "kind": "Method",
    "detail": "Function (\\ Transpose<MatrixType>)",
    "insertText": "matt(mat)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (\\ return llt_inplace<EIGTYPE,Lower)",
    "insertText": "rankUpdate(matt, vec.conjugate(), sigma)"
  }
]