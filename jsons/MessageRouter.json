[
  {
    "label": "IMessageInterceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageInterceptor"
  },
  {
    "label": "IMessageReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageReceiver"
  },
  {
    "label": "IMessageSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageSubscription"
  },
  {
    "label": "IBusListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBusListener"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMessageRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageRouter"
  },
  {
    "label": "FDelayedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedMessage"
  },
  {
    "label": "CalculateWaitTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "CalculateWaitTime()"
  },
  {
    "label": "FilterSubscriptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterSubscriptions(\n\t\tTArray<TSharedPtr<IMessageSubscription, ESPMode::ThreadSafe>>& Subscriptions,\n\t\tconst TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context,\n\t\tTArray<TSharedPtr<IMessageReceiver, ESPMode::ThreadSafe>>& OutRecipients)"
  },
  {
    "label": "FilterRecipients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterRecipients(\n\t\tconst TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context,\n\t\tTArray<TSharedPtr<IMessageReceiver, ESPMode::ThreadSafe>>& OutRecipients)"
  },
  {
    "label": "DispatchMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Message)"
  },
  {
    "label": "ProcessCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommands()"
  },
  {
    "label": "ProcessDelayedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDelayedMessages()"
  },
  {
    "label": "HandleAddInterceptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddInterceptor(TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe> Interceptor, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleAddRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecipient(FMessageAddress Address, TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe> RecipientPtr)"
  },
  {
    "label": "HandleAddSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddSubscriber(TSharedRef<IMessageSubscription, ESPMode::ThreadSafe> Subscription)"
  },
  {
    "label": "HandleRemoveInterceptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveInterceptor(TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe> Interceptor, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleRemoveRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecipient(FMessageAddress Address)"
  },
  {
    "label": "HandleRemoveSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveSubscriber(TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe> SubscriberPtr, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleRouteMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRouteMessage(TSharedRef<IMessageContext, ESPMode::ThreadSafe> Context)"
  },
  {
    "label": "HandleAddListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddListener(TWeakPtr<IBusListener, ESPMode::ThreadSafe> ListenerPtr)"
  },
  {
    "label": "HandleRemoveListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveListener(TWeakPtr<IBusListener, ESPMode::ThreadSafe> ListenerPtr)"
  },
  {
    "label": "NotifyRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistration(const FMessageAddress& Address, EMessageBusNotification Notification)"
  }
]