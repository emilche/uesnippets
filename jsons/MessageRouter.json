[
  {
    "label": "IMessageInterceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageInterceptor"
  },
  {
    "label": "IMessageReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageReceiver"
  },
  {
    "label": "IMessageSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageSubscription"
  },
  {
    "label": "IBusListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBusListener"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMessageRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageRouter"
  },
  {
    "label": "FDelayedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedMessage"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Queue . h \" # include \" HAL / Runnable . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Templates / Atomic . h \" # include \" Containers / MpscQueue . h \" # include \" IMessageContext . h \" # include \" IMessageTracer . h \" # include \" Bus / MessageTracer . h \" class IMessageInterceptor ; class IMessageReceiver ; class IMessageSubscription ; class IBusListener ; enum class EMessageBusNotification : uint8 ; class FMessageRouter : public FRunnable,private FSingleThreadRunnable {)",
    "insertText": "DECLARE_DELEGATE(CommandDelegate) public: FMessageRouter()"
  },
  {
    "label": "FMessageRouter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMessageRouter()"
  },
  {
    "label": "AddInterceptor()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddInterceptor(const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleAddInterceptor, Interceptor, MessageType))"
  },
  {
    "label": "AddRecipient()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRecipient(const FMessageAddress& Address, const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Recipient)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleAddRecipient, Address, TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe>(Recipient)))"
  },
  {
    "label": "AddSubscription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSubscription(const TSharedRef<IMessageSubscription, ESPMode::ThreadSafe>& Subscription)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleAddSubscriber, Subscription))"
  },
  {
    "label": "GetTracer()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IMessageTracer,ESPMode::ThreadSafe>)",
    "insertText": "GetTracer()"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleRemoveInterceptor, Interceptor, MessageType))"
  },
  {
    "label": "RemoveRecipient()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveRecipient(const FMessageAddress& Address)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleRemoveRecipient, Address))"
  },
  {
    "label": "RemoveSubscription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveSubscription(const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Subscriber, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleRemoveSubscriber, TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe>(Subscriber), MessageType))"
  },
  {
    "label": "RouteMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RouteMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "TraceSentMessage()",
    "kind": "Method",
    "detail": "Function (Tracer ->)",
    "insertText": "TraceSentMessage(Context)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleRouteMessage, Context))"
  },
  {
    "label": "AddNotificationListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNotificationListener(const TSharedRef<IBusListener, ESPMode::ThreadSafe>& Listener)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleAddListener, TWeakPtr<IBusListener, ESPMode::ThreadSafe>(Listener)))"
  },
  {
    "label": "RemoveNotificationListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNotificationListener(const TSharedRef<IBusListener, ESPMode::ThreadSafe>& Listener)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueCommand(FSimpleDelegate::CreateRaw(this, &FMessageRouter::HandleRemoveListener, TWeakPtr<IBusListener, ESPMode::ThreadSafe>(Listener)))"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (} public : FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "CalculateWaitTime()",
    "kind": "Method",
    "detail": "Function (protected : FTimespan)",
    "insertText": "CalculateWaitTime()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Enqueue(Command)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (WorkEvent ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "FilterRecipients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterRecipients(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, TArray<TSharedPtr<IMessageReceiver, ESPMode::ThreadSafe>>& OutRecipients)"
  },
  {
    "label": "DispatchMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Message)"
  },
  {
    "label": "ProcessCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommands()"
  },
  {
    "label": "ProcessDelayedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDelayedMessages()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick()"
  },
  {
    "label": "FDelayedMessage()",
    "kind": "Method",
    "detail": "Function (private : struct FDelayedMessage { TSharedPtr<IMessageContext,ESPMode::ThreadSafe> Context ; int64 Sequence ;)",
    "insertText": "FDelayedMessage()"
  },
  {
    "label": "FDelayedMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDelayedMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& InContext, int64 InSequence) : Context(InContext) , Sequence(InSequence)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDelayedMessage& Other)"
  },
  {
    "label": "GetTimeSent()",
    "kind": "Method",
    "detail": "Function (const FTimespan Difference = Other . Context ->)",
    "insertText": "GetTimeSent() - Context->GetTimeSent()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(Difference > FTimespan::Zero())"
  },
  {
    "label": "HandleAddInterceptor()",
    "kind": "Method",
    "detail": "Function (} } ; private : void)",
    "insertText": "HandleAddInterceptor(TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe> Interceptor, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleAddRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecipient(FMessageAddress Address, TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe> RecipientPtr)"
  },
  {
    "label": "HandleAddSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddSubscriber(TSharedRef<IMessageSubscription, ESPMode::ThreadSafe> Subscription)"
  },
  {
    "label": "HandleRemoveInterceptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveInterceptor(TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe> Interceptor, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleRemoveRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecipient(FMessageAddress Address)"
  },
  {
    "label": "HandleRemoveSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveSubscriber(TWeakPtr<IMessageReceiver, ESPMode::ThreadSafe> SubscriberPtr, FTopLevelAssetPath MessageType)"
  },
  {
    "label": "HandleRouteMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRouteMessage(TSharedRef<IMessageContext, ESPMode::ThreadSafe> Context)"
  },
  {
    "label": "HandleAddListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddListener(TWeakPtr<IBusListener, ESPMode::ThreadSafe> ListenerPtr)"
  },
  {
    "label": "HandleRemoveListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveListener(TWeakPtr<IBusListener, ESPMode::ThreadSafe> ListenerPtr)"
  },
  {
    "label": "NotifyRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistration(const FMessageAddress& Address, EMessageBusNotification Notification)"
  }
]