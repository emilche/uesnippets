[
  {
    "label": "ESdkLimit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESdkLimit"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "SPEEDTREE_HEAP_ALLOC_CHECK()",
    "kind": "Method",
    "detail": "Function (enum ESdkLimit { SDK_LIMIT_MAX_BASE_TREES,SDK_LIMIT_MAX_VISIBLE_TREE_CELLS,SDK_LIMIT_MAX_VISIBLE_GRASS_CELLS,SDK_LIMIT_MAX_VISIBLE_TERRAIN_CELLS,SDK_LIMIT_MAX_TREE_INSTANCES_IN_ANY_CELL,SDK_LIMIT_MAX_PER_BASE_GRASS_INSTANCES_IN_ANY_CELL,SDK_LIMIT_COUNT } ; # define)",
    "insertText": "SPEEDTREE_HEAP_ALLOC_CHECK(type, variable, limit_enum) \\ CHeapAllocCheck<type > __cSdkHeapCheck(variable, limit_enum, __FILE__, __LINE__)"
  },
  {
    "label": "CHeapAllocCheck()",
    "kind": "Method",
    "detail": "Function (# ifdef SPEEDTREE_RUNTIME_HEAP_CHECK public :)",
    "insertText": "CHeapAllocCheck(const T& tContainer, ESdkLimit eLimit, const char* pSourceFilename, st_int32 nSourceLineNum)"
  },
  {
    "label": "CHeapAllocCheck()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CHeapAllocCheck()"
  },
  {
    "label": "CHeapAllocCheck()",
    "kind": "Method",
    "detail": "Function (private : const T* m_pContainer ; ESdkLimit m_eLimit ; const char* m_pSourceFilename ; st_int32 m_nSourceLineNum ; size_t m_siInitCapacity ; # else public :)",
    "insertText": "CHeapAllocCheck(const T&, ESdkLimit, const char*, st_int32)"
  }
]