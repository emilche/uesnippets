[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SSidebarButtonText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarButtonText"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Framework / SlateDelegates . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Templates / UniquePtr . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Widgets / Text / SlateTextBlockLayout . h \" class FText ; class SSidebarButtonText : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSidebarButtonText) : _Text() , _TextStyle(&FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(TEXT(\"NormalText\"))) , _AngleDegrees(0) , _OverflowPolicy()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text) SLATE_STYLE_ARGUMENT(FTextBlockStyle, TextStyle) SLATE_ATTRIBUTE(float, AngleDegrees) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute<FText>& InText)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(const TAttribute<float>& InAngleDegrees)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "OnPaint(const FPaintArgs& InArgs, const FGeometry& InAllottedGeometry, const FSlateRect& InCullingRect , FSlateWindowElementList& OutDrawElements, int32 InLayerId, const FWidgetStyle& InWidgetStyle, bool bInParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const float InLayoutScaleMultiplier)"
  }
]