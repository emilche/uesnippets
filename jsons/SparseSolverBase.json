[
  {
    "label": "SparseSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSolverBase"
  },
  {
    "label": "solve_sparse_through_dense_panels()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSESOLVERBASE_H # define EIGEN_SPARSESOLVERBASE_H namespace Eigen { namespace internal { template<Decomposition,Rhs,Dest> enable_if<Rhs::ColsAtCompileTime ! = 1&& Dest::ColsAtCompileTime ! = 1>::type)",
    "insertText": "solve_sparse_through_dense_panels(const Decomposition &dec, const Rhs& rhs, Dest &dest)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((Dest::Flags&RowMajorBit)==0,THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (typedef Dest::Scalar DestScalar ; const Index NbColsAtOnce = 4 ; Index rhsCols = rhs .)",
    "insertText": "cols()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index size = rhs .)",
    "insertText": "rows()"
  },
  {
    "label": "tmpCols()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "tmpCols(std::min)(rhsCols, NbColsAtOnce)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Eigen::Matrix<DestScalar,Dynamic,Dynamic>)",
    "insertText": "tmp(size,tmpCols)"
  },
  {
    "label": "tmpX()",
    "kind": "Method",
    "detail": "Function (Eigen::Matrix<DestScalar,Dynamic,Dynamic>)",
    "insertText": "tmpX(size,tmpCols)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualCols = std::min<)",
    "insertText": "Index(rhsCols-k, NbColsAtOnce)"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "leftCols(actualCols) = rhs.middleCols(k,actualCols)"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (tmpX .)",
    "insertText": "leftCols(actualCols) = dec.solve(tmp.leftCols(actualCols))"
  },
  {
    "label": "middleCols()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "middleCols(k,actualCols) = tmpX.leftCols(actualCols).sparseView()"
  },
  {
    "label": "rhs_dense()",
    "kind": "Method",
    "detail": "Function (Eigen::Matrix<DestScalar,Dynamic,1>)",
    "insertText": "rhs_dense(rhs)"
  },
  {
    "label": "dest_dense()",
    "kind": "Method",
    "detail": "Function (Eigen::Matrix<DestScalar,Dynamic,1>)",
    "insertText": "dest_dense(size)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (dest_dense = dec .)",
    "insertText": "solve(rhs_dense)"
  },
  {
    "label": "sparseView()",
    "kind": "Method",
    "detail": "Function (dest = dest_dense .)",
    "insertText": "sparseView()"
  },
  {
    "label": "SparseSolverBase()",
    "kind": "Method",
    "detail": "Function (} } template<Derived> class SparseSolverBase : internal::noncopyable { public :)",
    "insertText": "SparseSolverBase() : m_isInitialized(false)"
  },
  {
    "label": "SparseSolverBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseSolverBase()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (} Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> const Solve<Derived,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& b)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Solver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().rows()==b.rows() && \"solve(): invalid number of rows of the right hand side matrix b\")"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> const Solve<Derived,Rhs>)",
    "insertText": "solve(const SparseMatrixBase<Rhs>& b)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const SparseMatrixBase<Rhs> &b, SparseMatrixBase<Dest> &dest)"
  },
  {
    "label": "solve_sparse_through_dense_panels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "solve_sparse_through_dense_panels(derived(), b.derived(), dest.derived())"
  }
]