[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "User",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "User"
  },
  {
    "label": "Use",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Use"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "PrevPtrTag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrevPtrTag"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_USE_H # define LLVM_IR_USE_H # include \" llvm - c / Core . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / Support / CBindingWrapping . h \" # include \" llvm / Support / Compiler . h \" # include<cstddef> # include<iterator> namespace llvm { class Value ; class User ; class Use ; template<> struct simplify_type ; template<> class PointerLikeTypeTraits<Use**> { public : void*)",
    "insertText": "getAsVoidPointer(Use **P)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = 2 } ; } ; class Use { public : void)",
    "insertText": "swap(Use &RHS)"
  },
  {
    "label": "Use()",
    "kind": "Method",
    "detail": "Function (typedef PointerIntPair<User*,1,unsigned> UserRef ; private :)",
    "insertText": "Use(const Use &U)"
  },
  {
    "label": "Use()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Use()"
  },
  {
    "label": "Use()",
    "kind": "Method",
    "detail": "Function (} enum PrevPtrTag { zeroDigitTag,oneDigitTag,stopTag,fullStopTag } ;)",
    "insertText": "Use(PrevPtrTag tag) : Val(nullptr)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (Prev .)",
    "insertText": "setInt(tag)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} public : operator)",
    "insertText": "Value()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(Value *Val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "operator(Value *RHS)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(RHS)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(RHS.Val)"
  },
  {
    "label": "initTags()",
    "kind": "Method",
    "detail": "Function (Use*)",
    "insertText": "initTags(Use *Start, Use *Stop)"
  },
  {
    "label": "zap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zap(Use *Start, const Use *Stop, bool del = false)"
  },
  {
    "label": "getImpliedUser()",
    "kind": "Method",
    "detail": "Function (private : const Use*)",
    "insertText": "getImpliedUser()"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (Value* Val ; Use* Next ; PointerIntPair<Use**,2,PrevPtrTag> Prev ; void)",
    "insertText": "setPrev(Use **NewPrev)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (Prev .)",
    "insertText": "setPointer(NewPrev)"
  },
  {
    "label": "addToList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addToList(Use **List)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Next =* List ;)",
    "insertText": "if(Next) Next->setPrev(&Next)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPrev(List)"
  },
  {
    "label": "removeFromList()",
    "kind": "Method",
    "detail": "Function (* List = this ; } void)",
    "insertText": "removeFromList()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (Use** StrippedPrev = Prev .)",
    "insertText": "getPointer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* StrippedPrev = Next ;)",
    "insertText": "if(Next) Next->setPrev(StrippedPrev)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} class Value ; } ; template<> struct simplify_type<Use> { typedef Value* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(Use &Val)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct simplify_type<const Use> { typedef Value* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(const Use &Val)"
  }
]