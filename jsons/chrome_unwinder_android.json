[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ChromeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_CHROME_UNWINDER_ANDROID_H_ # define BASE_PROFILER_CHROME_UNWINDER_ANDROID_H_ # include<vector> # include \" base / memory / raw_ptr . h \" # include \" base / profiler / unwinder . h \" # include \" base / base_export . h \" # include \" base / profiler / arm_cfi_table . h \" # include \" base / profiler / module_cache . h \" # include \" base / profiler / register_context . h \" namespace base { class BASE_EXPORT ChromeUnwinderAndroid : public Unwinder { public :)",
    "insertText": "ChromeUnwinderAndroid(const ArmCFITable* cfi_table, uintptr_t chrome_module_base_address)"
  },
  {
    "label": "ChromeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ChromeUnwinderAndroid()"
  },
  {
    "label": "ChromeUnwinderAndroid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChromeUnwinderAndroid(const ChromeUnwinderAndroid&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChromeUnwinderAndroid&)",
    "insertText": "operator(const ChromeUnwinderAndroid&)"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  },
  {
    "label": "StepForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StepForTesting(RegisterContext* thread_context, uintptr_t stack_top, const ArmCFITable::FrameEntry& entry)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "Step(RegisterContext* thread_context, uintptr_t stack_top, const ArmCFITable::FrameEntry& entry)"
  },
  {
    "label": "StepUsingLrRegister()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StepUsingLrRegister(RegisterContext* thread_context, uintptr_t stack_top)"
  }
]