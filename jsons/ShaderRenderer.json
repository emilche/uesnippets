[
  {
    "label": "ShaderRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderRenderer"
  },
  {
    "label": "MX_RENDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDER_API"
  },
  {
    "label": "ShaderRenderer()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_SHADERRENDERER_H # define MATERIALX_SHADERRENDERER_H # include<MaterialXRender / Camera . h> # include<MaterialXRender / GeometryHandler . h> # include<MaterialXRender / ImageHandler . h> # include<MaterialXRender / LightHandler . h> # include<MaterialXGenShader / Shader . h> MATERIALX_NAMESPACE_BEGIN using ShaderRendererPtr = std::shared_ptr<class ShaderRenderer> ; class ShaderRenderer { public : using StageMap = StringMap ; public : ~)",
    "insertText": "ShaderRenderer()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize()"
  },
  {
    "label": "setCamera()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCamera(CameraPtr camera)"
  },
  {
    "label": "getCamera()",
    "kind": "Method",
    "detail": "Function (_camera = camera ; } CameraPtr)",
    "insertText": "getCamera()"
  },
  {
    "label": "getImageHandler()",
    "kind": "Method",
    "detail": "Function (_imageHandler = imageHandler ; } ImageHandlerPtr)",
    "insertText": "getImageHandler()"
  },
  {
    "label": "getLightHandler()",
    "kind": "Method",
    "detail": "Function (_lightHandler = lightHandler ; } LightHandlerPtr)",
    "insertText": "getLightHandler()"
  },
  {
    "label": "getGeometryHandler()",
    "kind": "Method",
    "detail": "Function (_geometryHandler = geometryHandler ; } GeometryHandlerPtr)",
    "insertText": "getGeometryHandler()"
  },
  {
    "label": "createProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createProgram(const StageMap& stages)"
  },
  {
    "label": "validateInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "validateInputs()"
  },
  {
    "label": "setSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSize(unsigned int width, unsigned int height)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render()"
  },
  {
    "label": "captureImage()",
    "kind": "Method",
    "detail": "Function (} ImagePtr)",
    "insertText": "captureImage(ImagePtr image = nullptr)"
  },
  {
    "label": "ShaderRenderer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ShaderRenderer(unsigned int width, unsigned int height, Image::BaseType baseType) : _width(width), _height(height), _baseType(baseType)"
  },
  {
    "label": "ExceptionRenderError()",
    "kind": "Method",
    "detail": "Function (} protected : unsigned int _width ; unsigned int _height ; Image::BaseType _baseType ; CameraPtr _camera ; ImageHandlerPtr _imageHandler ; GeometryHandlerPtr _geometryHandler ; LightHandlerPtr _lightHandler ; } ; class ExceptionRenderError : public Exception { public :)",
    "insertText": "ExceptionRenderError(const string& msg, const StringVec& errorLog = StringVec()) : Exception(msg), _errorLog(errorLog)"
  },
  {
    "label": "ExceptionRenderError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExceptionRenderError(const ExceptionRenderError& e) : Exception(e), _errorLog(e._errorLog)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ExceptionRenderError&)",
    "insertText": "operator(const ExceptionRenderError& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(e)"
  },
  {
    "label": "errorLog()",
    "kind": "Method",
    "detail": "Function (_errorLog = e . _errorLog ; return* this ; } const StringVec&)",
    "insertText": "errorLog()"
  }
]