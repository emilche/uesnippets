[
  {
    "label": "FStringFormatArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringFormatArg"
  },
  {
    "label": "FStringFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringFormatter"
  },
  {
    "label": "FStringFormatter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Templates / ValueOrError . h \" struct FStringFormatArg ; class FStringFormatter { public :)",
    "insertText": "FStringFormatter()"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Format(const TCHAR* InExpression, const TMap<FString, FStringFormatArg>& InArgs)"
  },
  {
    "label": "FormatInternal()",
    "kind": "Method",
    "detail": "Function (auto Result =)",
    "insertText": "FormatInternal(InExpression, InArgs, false)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} return InExpression ; } FString)",
    "insertText": "Format(const TCHAR* InExpression, const TArray<FStringFormatArg>& InArgs)"
  },
  {
    "label": "FormatStrict()",
    "kind": "Method",
    "detail": "Function (} return InExpression ; } TValueOrError<FString,FExpressionError>)",
    "insertText": "FormatStrict(const TCHAR* InExpression, const TMap<FString, FStringFormatArg>& InArgs)"
  },
  {
    "label": "FormatStrict()",
    "kind": "Method",
    "detail": "Function (} TValueOrError<FString,FExpressionError>)",
    "insertText": "FormatStrict(const TCHAR* InExpression, const TArray<FStringFormatArg>& InArgs)"
  },
  {
    "label": "FormatInternal()",
    "kind": "Method",
    "detail": "Function (} private : TValueOrError<FString,FExpressionError>)",
    "insertText": "FormatInternal(const TCHAR* InExpression, const TMap<FString, FStringFormatArg>& InArgs, bool bStrict)"
  },
  {
    "label": "FormatInternal()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FString,FExpressionError>)",
    "insertText": "FormatInternal(const TCHAR* InExpression, const TArray<FStringFormatArg>& InArgs, bool bStrict)"
  }
]