[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "ArrayWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayWrapper"
  },
  {
    "label": "MatrixWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixWrapper"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARRAYWRAPPER_H # define EIGEN_ARRAYWRAPPER_H namespace Eigen { namespace internal { template<ExpressionType> struct traits<ArrayWrapper<ExpressionType>> : public traits<remove_all<ExpressionType::Nested>::type> { typedef ArrayXpr XprKind ; enum { Flags0 = traits<remove_all<ExpressionType::Nested>::type>::Flags,LvalueBitFlag = is_lvalue<ExpressionType>::value ? LvalueBit : 0,)",
    "insertText": "Flags(Flags0 & ~(NestByRefBit | LvalueBit))"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<ExpressionType> class ArrayWrapper : public ArrayBase<ArrayWrapper<ExpressionType>> { public : typedef ArrayBase<ArrayWrapper> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(ArrayWrapper) EIGEN_INHERIT_ASSIGNMENT_OPERATORS(ArrayWrapper)"
  },
  {
    "label": "ArrayWrapper()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<internal::is_lvalue<ExpressionType>::value,Scalar,const Scalar>::type ScalarWithConstIfNotLvalue ; typedef internal::ref_selector<ExpressionType>::non_const_type NestedExpressionType ; using Base::coeffRef ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "ArrayWrapper(ExpressionType& matrix) : m_expression(matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "innerStride()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC ScalarWithConstIfNotLvalue*)",
    "insertText": "data()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar&)",
    "insertText": "coeffRef(Index rowId, Index colId)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (dst = m_expression ; } EIGEN_DEVICE_FUNC const internal::remove_all<NestedExpressionType>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_expression .)",
    "insertText": "resize(newSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_expression .)",
    "insertText": "resize(rows,cols)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<ExpressionType> class MatrixWrapper : public MatrixBase<MatrixWrapper<ExpressionType>> { public : typedef MatrixBase<MatrixWrapper<ExpressionType>> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(MatrixWrapper) EIGEN_INHERIT_ASSIGNMENT_OPERATORS(MatrixWrapper)"
  },
  {
    "label": "MatrixWrapper()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<internal::is_lvalue<ExpressionType>::value,Scalar,const Scalar>::type ScalarWithConstIfNotLvalue ; typedef internal::ref_selector<ExpressionType>::non_const_type NestedExpressionType ; using Base::coeffRef ; EIGEN_DEVICE_FUNC)",
    "insertText": "MatrixWrapper(ExpressionType& matrix) : m_expression(matrix)"
  }
]