[
  {
    "label": "NetPortParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetPortParser"
  },
  {
    "label": "PPOpts",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PPOpts"
  },
  {
    "label": "Prefix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Prefix"
  },
  {
    "label": "PrefixType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrefixType"
  },
  {
    "label": "NetPortParser()",
    "kind": "Method",
    "detail": "Function (class NetPortParser { public : enum PPOpts { PPO_NONE = 0,PPO_TRANSPORT = 1,PPO_PORT = 2,PPO_BOTH = PPO_TRANSPORT | PPO_PORT } ; struct Prefix { const char* mName ; int mType ; } ;)",
    "insertText": "NetPortParser()"
  },
  {
    "label": "NetPortParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetPortParser(const StrRef &portstr)"
  },
  {
    "label": "NetPortParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetPortParser(const StrRef &portstr, const Prefix *extraTransports)"
  },
  {
    "label": "NetPortParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetPortParser(const char *portstr)"
  },
  {
    "label": "NetPortParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetPortParser(const NetPortParser &rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const NetPortParser&)",
    "insertText": "operator(const NetPortParser &rhs)"
  },
  {
    "label": "MustRfc3484()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustRfc3484()"
  },
  {
    "label": "MayIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MayIPv4()"
  },
  {
    "label": "MayIPv6()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MayIPv6()"
  },
  {
    "label": "PreferIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreferIPv4()"
  },
  {
    "label": "PreferIPv6()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreferIPv6()"
  },
  {
    "label": "WantIPv6()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantIPv6()"
  },
  {
    "label": "MayJSH()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MayJSH()"
  },
  {
    "label": "MustJSH()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustJSH()"
  },
  {
    "label": "MayRSH()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MayRSH()"
  },
  {
    "label": "MustRSH()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustRSH()"
  },
  {
    "label": "MustSSL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustSSL()"
  },
  {
    "label": "MustIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustIPv4()"
  },
  {
    "label": "MustIPv6()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MustIPv6()"
  },
  {
    "label": "Transport()",
    "kind": "Method",
    "detail": "Function (const StrBuf&)",
    "insertText": "Transport()"
  },
  {
    "label": "Host()",
    "kind": "Method",
    "detail": "Function (const StrPtr&)",
    "insertText": "Host()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(const StrRef &portstr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(Error *e)"
  },
  {
    "label": "GetQualifiedP4Port()",
    "kind": "Method",
    "detail": "Function (const StrBuf)",
    "insertText": "GetQualifiedP4Port(StrBuf &serverSpecAddr, Error &e)"
  },
  {
    "label": "FindPrefix()",
    "kind": "Method",
    "detail": "Function (protected : private : enum PrefixType { PT_NONE,PT_JSH,PT_RSH,PT_TCP,PT_TCP4,PT_TCP6,PT_TCP46,PT_TCP64,PT_SSL,PT_SSL4,PT_SSL6,PT_SSL46,PT_SSL64,PT_NUM_PREFIXES } ; StrBuf mPortString ; StrBuf mTransport ; StrBuf mHost ; StrBuf mPort ; StrBuf mHostPort ; StrBuf mZoneID ; bool mPortColon ; Prefix mPrefix ; const Prefix* mExtraTransports ; private : const Prefix*)",
    "insertText": "FindPrefix(const char *prefix, int len)"
  }
]