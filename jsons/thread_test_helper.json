[
  {
    "label": "ThreadTestHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTestHelper"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "ThreadTestHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_THREAD_TEST_HELPER_H_ # define BASE_TEST_THREAD_TEST_HELPER_H_ # include \" base / memory / ref_counted . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / task / sequenced_task_runner . h \" namespace base { class ThreadTestHelper : public RefCountedThreadSafe<ThreadTestHelper> { public :)",
    "insertText": "ThreadTestHelper(scoped_refptr<SequencedTaskRunner> target_sequence)"
  },
  {
    "label": "ThreadTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadTestHelper(const ThreadTestHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadTestHelper&)",
    "insertText": "operator(const ThreadTestHelper&)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Run()"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTest()"
  },
  {
    "label": "ThreadTestHelper()",
    "kind": "Method",
    "detail": "Function (protected : class RefCountedThreadSafe<ThreadTestHelper> ; ~)",
    "insertText": "ThreadTestHelper()"
  },
  {
    "label": "set_test_result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_test_result(bool test_result)"
  },
  {
    "label": "RunOnSequence()",
    "kind": "Method",
    "detail": "Function (test_result_ = test_result ; } private : void)",
    "insertText": "RunOnSequence()"
  }
]