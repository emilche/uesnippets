[
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotify"
  },
  {
    "label": "UAnimNotifyState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotifyState"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimecodeBoneMethod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimecodeBoneMethod"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "FRecordedAnimNotify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedAnimNotify"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / GCObject . h \" # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimationRecordingSettings . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" Animation / AnimNotifyQueue . h \" # include \" Serializers / MovieSceneAnimationSerialization . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" Animation / AnimTypes . h \" # include \" AnimationRecorder . generated . h \" class UAnimBoneCompressionSettings ; class UAnimNotify ; class UAnimNotifyState ; class UAnimSequence ; class USkeletalMeshComponent ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(AnimationSerialization, Verbose, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (All,Root,UserDefined,MAX)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTimecodeBoneMethod() : BoneMode(ETimecodeBoneMode::Root)"
  },
  {
    "label": "FRecordedAnimNotify()",
    "kind": "Method",
    "detail": "Function (} ; struct FProcessRecordedTimeParams { FString HoursName ; FString MinutesName ; FString SecondsName ; FString FramesName ; FString SubFramesName ; TOptional<FString> RateName ; FString SlateName ; FString Slate ; } ; struct FAnimationRecorder : public FGCObject { private : const int32 UnBoundedFrameCount = - 1 ; private : FFrameRate RecordingRate ; FFrameNumber MaxFrame ; FFrameNumber LastFrame ; double TimePassed ; TObjectPtr<UAnimSequence> AnimationObject ; TArray<FTransform> PreviousSpacesBases ; FBlendedHeapCurve PreviousAnimCurves ; FTransform PreviousComponentToWorld ; FTransform InvInitialRootTransform ; FTransform InitialRootTransform ; int32 SkeletonRootIndex ; TMap<UAnimNotify*,UAnimNotify*> UniqueNotifies ; TMap<UAnimNotifyState*,UAnimNotifyState*> UniqueNotifyStates ; struct FRecordedAnimNotify {)",
    "insertText": "FRecordedAnimNotify(const FAnimNotifyEvent& InNewNotifyEvent, const FAnimNotifyEvent* InOriginalNotifyEvent, float InAnimNotifyStartTime, float InAnimNotifyEndTime) : NewNotifyEvent(InNewNotifyEvent) , OriginalNotifyEvent(InOriginalNotifyEvent) , AnimNotifyStartTime(InAnimNotifyStartTime) , AnimNotifyEndTime(InAnimNotifyEndTime) , bWasActive(true)"
  },
  {
    "label": "FAnimationRecorder()",
    "kind": "Method",
    "detail": "Function (} FAnimNotifyEvent NewNotifyEvent ; const FAnimNotifyEvent* OriginalNotifyEvent ; float AnimNotifyStartTime ; float AnimNotifyEndTime ; bool bWasActive ; } ; TArray<FRecordedAnimNotify> RecordedAnimNotifies ; TArray<FRecordedAnimNotify> RecordingAnimNotifies ; float DefaultSampleRate ; TArray<FQualifiedFrameTime> RecordedTimes ; public :)",
    "insertText": "FAnimationRecorder()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "TriggerRecordAnimation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TriggerRecordAnimation(USkeletalMeshComponent* Component)"
  },
  {
    "label": "TriggerRecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriggerRecordAnimation(USkeletalMeshComponent* Component, const FString& AssetPath, const FString& AssetName)"
  },
  {
    "label": "StartRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecord(USkeletalMeshComponent* Component, UAnimSequence* InAnimationObject)"
  },
  {
    "label": "StopRecord()",
    "kind": "Method",
    "detail": "Function (UAnimSequence*)",
    "insertText": "StopRecord(bool bShowMessage)"
  },
  {
    "label": "UpdateRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecord(USkeletalMeshComponent* Component, float DeltaTime)"
  },
  {
    "label": "GetAnimationObject()",
    "kind": "Method",
    "detail": "Function (UAnimSequence*)",
    "insertText": "GetAnimationObject()"
  },
  {
    "label": "SetAnimCompressionScheme()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAnimCompressionScheme(UAnimBoneCompressionSettings* Settings)"
  },
  {
    "label": "GetInitialRootTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetInitialRootTransform()"
  },
  {
    "label": "ProcessRecordedTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRecordedTimes(UAnimSequence* AnimSequence, USkeletalMeshComponent* SkeletalMeshComponent, const FTimecodeBoneMethod& TimecodeBoneMethod, const FProcessRecordedTimeParams& TimecodeInfo)"
  },
  {
    "label": "GetBoneTransforms()",
    "kind": "Method",
    "detail": "Function (uint8 bRecordLocalToWorld : 1 ; uint8 bAutoSaveAsset : 1 ; uint8 bRemoveRootTransform : 1 ; uint8 bCheckDeltaTimeAtBeginning : 1 ; EAnimInterpolationType Interpolation ; ERichCurveInterpMode InterpMode ; ERichCurveTangentMode TangentMode ; FAnimationSerializer* AnimationSerializer ; uint8 bRecordTransforms : 1 ; uint8 bRecordMorphTargets : 1 ; uint8 bRecordAttributeCurves : 1 ; uint8 bRecordMaterialCurves : 1 ; TArray<FString> IncludeAnimationNames ; TArray<FString> ExcludeAnimationNames ; bool bTransactRecording ; public : void)",
    "insertText": "GetBoneTransforms(USkeletalMeshComponent* Component, TArray<FTransform>& BoneTransforms)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Record(USkeletalMeshComponent* Component, FTransform const& ComponentToWorld, const TArray<FTransform>& SpacesBases, const FBlendedHeapCurve& AnimationCurves, int32 FrameToAdd)"
  },
  {
    "label": "RecordNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNotifies(USkeletalMeshComponent* Component, const TArray<FAnimNotifyEventReference>& AnimNotifies, float DeltaTime, float RecordTime)"
  },
  {
    "label": "ProcessNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNotifies()"
  },
  {
    "label": "ShouldSkipName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipName(const FName& InName)"
  },
  {
    "label": "FAnimRecorderInstance()",
    "kind": "Method",
    "detail": "Function (TArray<FBlendedHeapCurve> RecordedCurves ; TArray<FRawAnimSequenceTrack> RawTracks ; } ; struct FAnimRecorderInstance { public :)",
    "insertText": "FAnimRecorderInstance()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent, const FString& InAssetPath, const FString& InAssetName, const FAnimationRecordingSettings& InSettings)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent, UAnimSequence* InSequence, FAnimationSerializer *InAnimationSerializer, const FAnimationRecordingSettings& InSettings)"
  },
  {
    "label": "BeginRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginRecording()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(float DeltaTime)"
  },
  {
    "label": "FinishRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecording(bool bShowMessage = true)"
  },
  {
    "label": "InitInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitInternal(USkeletalMeshComponent* InComponent, const FAnimationRecordingSettings& Settings, FAnimationSerializer *InAnimationSerializer = nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : TWeakObjectPtr<USkeletalMeshComponent> SkelComp ; TWeakObjectPtr<UAnimSequence> Sequence ; FString AssetPath ; FString AssetName ; int CachedSkelCompForcedLodModel ; TSharedPtr<FAnimationRecorder> Recorder ; EVisibilityBasedAnimTickOption CachedVisibilityBasedAnimTickOption ; bool bCachedEnableUpdateRateOptimizations ; } ; struct FAnimationRecorderManager { public : FAnimationRecorderManager&)",
    "insertText": "Get()"
  },
  {
    "label": "FAnimationRecorderManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimationRecorderManager()"
  },
  {
    "label": "RecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordAnimation(USkeletalMeshComponent* Component, const FString& AssetPath = FString(), const FString& AssetName = FString(), const FAnimationRecordingSettings& Settings = FAnimationRecordingSettings())"
  },
  {
    "label": "RecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordAnimation(USkeletalMeshComponent* Component, UAnimSequence* Sequence, const FAnimationRecordingSettings& Settings = FAnimationRecordingSettings())"
  },
  {
    "label": "RecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordAnimation(USkeletalMeshComponent* Component, UAnimSequence* Sequence, FAnimationSerializer *InAnimationSerializer, const FAnimationRecordingSettings& Settings = FAnimationRecordingSettings())"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording(USkeletalMeshComponent* Component)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "GetCurrentlyRecordingSequence()",
    "kind": "Method",
    "detail": "Function (UAnimSequence*)",
    "insertText": "GetCurrentlyRecordingSequence(USkeletalMeshComponent* Component)"
  },
  {
    "label": "GetCurrentRecordingTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentRecordingTime(USkeletalMeshComponent* Component)"
  },
  {
    "label": "StopRecordingAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingAnimation(USkeletalMeshComponent* Component, bool bShowMessage = true)"
  },
  {
    "label": "StopRecordingAllAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingAllAnimations()"
  },
  {
    "label": "GetInitialRootTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetInitialRootTransform(USkeletalMeshComponent* Component)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(USkeletalMeshComponent* Component, float DeltaTime)"
  },
  {
    "label": "StopRecordingDeadAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingDeadAnimations(bool bShowMessage = true)"
  },
  {
    "label": "HandleEndPIE()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimRecorderInstance> RecorderInstances ; void)",
    "insertText": "HandleEndPIE(bool bSimulating)"
  }
]