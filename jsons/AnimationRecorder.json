[
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotify"
  },
  {
    "label": "UAnimNotifyState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotifyState"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimecodeBoneMethod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimecodeBoneMethod"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "FRecordedAnimNotify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedAnimNotify"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "FAnimationRecorder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAnimationRecorder()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"FAnimationRecorder\")"
  },
  {
    "label": "TriggerRecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriggerRecordAnimation(USkeletalMeshComponent* Component)"
  },
  {
    "label": "TriggerRecordAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriggerRecordAnimation(USkeletalMeshComponent* Component, const FString& AssetPath, const FString& AssetName)"
  },
  {
    "label": "StartRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecord(USkeletalMeshComponent* Component, UAnimSequence* InAnimationObject)"
  },
  {
    "label": "UpdateRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecord(USkeletalMeshComponent* Component, float DeltaTime)"
  },
  {
    "label": "SetSampleRateAndLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRateAndLength(FFrameRate SampleFrameRate, float LengthInSeconds)"
  },
  {
    "label": "SetAnimCompressionScheme()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAnimCompressionScheme(UAnimBoneCompressionSettings* Settings)"
  },
  {
    "label": "ProcessRecordedTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRecordedTimes(UAnimSequence* AnimSequence, USkeletalMeshComponent* SkeletalMeshComponent, const FString& HoursName, const FString& MinutesName, const FString& SecondsName, const FString& FramesName, const FString& SubFramesName, const FString& SlateName, const FString& Slate, const FTimecodeBoneMethod& TimecodeBoneMethod)"
  },
  {
    "label": "ProcessRecordedTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRecordedTimes(UAnimSequence* AnimSequence, USkeletalMeshComponent* SkeletalMeshComponent, const FTimecodeBoneMethod& TimecodeBoneMethod, const FProcessRecordedTimeParams& TimecodeInfo)"
  },
  {
    "label": "GetBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTransforms(USkeletalMeshComponent* Component, TArray<FTransform>& BoneTransforms)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Record(USkeletalMeshComponent* Component, FTransform const& ComponentToWorld, const TArray<FTransform>& SpacesBases, const FBlendedHeapCurve& AnimationCurves, int32 FrameToAdd)"
  },
  {
    "label": "RecordNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNotifies(USkeletalMeshComponent* Component, const TArray<FAnimNotifyEventReference>& AnimNotifies, float DeltaTime, float RecordTime)"
  },
  {
    "label": "ProcessNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNotifies()"
  },
  {
    "label": "FAnimRecorderInstance()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAnimRecorderInstance()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent, const FString& InAssetPath, const FString& InAssetName, const FAnimationRecordingSettings& InSettings)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent, UAnimSequence* InSequence, FAnimationSerializer *InAnimationSerializer, const FAnimationRecordingSettings& InSettings)"
  },
  {
    "label": "BeginRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginRecording()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(float DeltaTime)"
  },
  {
    "label": "FinishRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecording(bool bShowMessage = true)"
  },
  {
    "label": "ProcessRecordedTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRecordedTimes(UAnimSequence* AnimSequence, USkeletalMeshComponent* SkeletalMeshComponent, const FString& HoursName, const FString& MinutesName, const FString& SecondsName, const FString& FramesName, const FString& SubFramesName, const FString& SlateName, const FString& Slate, const FTimecodeBoneMethod& TimecodeBoneMethod)"
  },
  {
    "label": "ProcessRecordedTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRecordedTimes(UAnimSequence* AnimSequence, USkeletalMeshComponent* SkeletalMeshComponent, const FTimecodeBoneMethod& TimecodeBoneMethod, const FProcessRecordedTimeParams& TimecodeInfo)"
  },
  {
    "label": "InitInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitInternal(USkeletalMeshComponent* InComponent, const FAnimationRecordingSettings& Settings, FAnimationSerializer *InAnimationSerializer = nullptr)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording(USkeletalMeshComponent* Component)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "GetCurrentRecordingTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentRecordingTime(USkeletalMeshComponent* Component)"
  },
  {
    "label": "StopRecordingAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingAnimation(USkeletalMeshComponent* Component, bool bShowMessage = true)"
  },
  {
    "label": "StopRecordingAllAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingAllAnimations()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(USkeletalMeshComponent* Component, float DeltaTime)"
  },
  {
    "label": "StopRecordingDeadAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingDeadAnimations(bool bShowMessage = true)"
  },
  {
    "label": "HandleEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEndPIE(bool bSimulating)"
  }
]