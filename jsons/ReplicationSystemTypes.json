[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Misc / EnumClassFlags . h \" namespace UE::Net { enum class ENetObjectDeltaCompressionStatus : unsigned { Disallow,Allow,} ; enum class EGetRefHandleFlags : uint32 { None,EvenIfGarbage } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EGetRefHandleFlags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum class EReplicationSystemSendPass : unsigned { Invalid,PostTickDispatch,TickFlush,} ; enum class EDependentObjectSchedulingHint : uint8 { Default = 0,ScheduleBeforeParent,ScheduleBeforeParentIfInitialState,} ; using FForwardNetRPCCallDelegate = TDelegate<)",
    "insertText": "void(UObject* RootObject,UObject* SubObject, UFunction* Function, void* Params)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (using FForwardNetRPCCallMulticastDelegate = TMulticastDelegate<FForwardNetRPCCallDelegate::TFuncType> ; enum class ENetObjectAttachmentSendPolicyFlags : uint32 { None = 0,ScheduleAsOOB = 1 U<<0 U,SendInPostTickDispatch = ScheduleAsOOB<<1 U,SendImmediate = ScheduleAsOOB | SendInPostTickDispatch,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetObjectAttachmentSendPolicyFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ENetObjectAttachmentSendPolicyFlags SendFlags)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "ensure(false)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR*)",
    "insertText": "LexToString(EDependentObjectSchedulingHint SchedulingHint)"
  }
]