[
  {
    "label": "USubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsystem"
  },
  {
    "label": "UDynamicSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDynamicSubsystem"
  },
  {
    "label": "FSubsystemCollectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsystemCollectionBase"
  },
  {
    "label": "FSubsystemArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubsystemArray"
  },
  {
    "label": "FSubsystemModuleWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsystemModuleWatcher"
  },
  {
    "label": "FSubsystemCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsystemCollection"
  },
  {
    "label": "FObjectSubsystemCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectSubsystemCollection"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Casts . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / GCObject . h \" class USubsystem ; class UDynamicSubsystem ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSubsystemCollection, Log, All)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (class FSubsystemCollectionBase { public : void)",
    "insertText": "Initialize(UObject* NewOuter)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "InitializeDependency()",
    "kind": "Method",
    "detail": "Function (template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "InitializeDependency()"
  },
  {
    "label": "ActivateExternalSubsystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateExternalSubsystem(UClass* SubsystemClass)"
  },
  {
    "label": "DeactivateExternalSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateExternalSubsystem(UClass* SubsystemClass)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* Referencer, FReferenceCollector& Collector)"
  },
  {
    "label": "FSubsystemCollectionBase()",
    "kind": "Method",
    "detail": "Function (protected : struct FSubsystemArray { TArray<USubsystem*> Subsystems ; bool bIsIterating = false ; } ;)",
    "insertText": "FSubsystemCollectionBase(UClass* InBaseType)"
  },
  {
    "label": "FSubsystemCollectionBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubsystemCollectionBase()"
  },
  {
    "label": "GetSubsystemInternal()",
    "kind": "Method",
    "detail": "Function (USubsystem*)",
    "insertText": "GetSubsystemInternal(UClass* SubsystemClass)"
  },
  {
    "label": "FindAndPopulateSubsystemArrayInternal()",
    "kind": "Method",
    "detail": "Function (FSubsystemArray&)",
    "insertText": "FindAndPopulateSubsystemArrayInternal(UClass* SubsystemClass)"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (TArray<USubsystem*>)",
    "insertText": "GetSubsystemArrayCopy(UClass* SubsystemClass)"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(USubsystem*)> Operation)"
  },
  {
    "label": "ForEachSubsystemOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubsystemOfClass(UClass* SubsystemClass, TFunctionRef<void(USubsystem*)> Operation)"
  },
  {
    "label": "AddAndInitializeSubsystem()",
    "kind": "Method",
    "detail": "Function (private : USubsystem*)",
    "insertText": "AddAndInitializeSubsystem(UClass* SubsystemClass)"
  },
  {
    "label": "RemoveAndDeinitializeSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAndDeinitializeSubsystem(USubsystem* Subsystem)"
  },
  {
    "label": "AddAllInstances()",
    "kind": "Method",
    "detail": "Function (TMap<TObjectPtr<UClass>,TObjectPtr<USubsystem>> SubsystemMap ; TMap<UClass*,TUniquePtr<FSubsystemArray>> SubsystemArrayMap ; UClass* BaseType ; UObject* Outer ; bool bPopulating ; bool bIterating = false ; private : class FSubsystemModuleWatcher ; void)",
    "insertText": "AddAllInstances(UClass* SubsystemClass)"
  },
  {
    "label": "RemoveAllInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllInstances(UClass* SubsystemClass)"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} ; template<TBaseType> class FSubsystemCollection : public FSubsystemCollectionBase,public FGCObject { public : template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem(const TSubclassOf<TSubsystemClass>& SubsystemClass)"
  },
  {
    "label": "FindAndPopulateSubsystemArrayInternal()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<TBaseType> SubsystemBaseClass = SubsystemClass ; FSubsystemArray& Array =)",
    "insertText": "FindAndPopulateSubsystemArrayInternal(SubsystemBaseClass)"
  },
  {
    "label": "TSubsystemClass()",
    "kind": "Method",
    "detail": "Function (const TArray<TSubsystemClass*>* SpecificArray = reinterpret_cast<const TArray<)",
    "insertText": "TSubsystemClass(&Array.Subsystems)"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(TBaseType*)> Operation, const TSubclassOf<TBaseType>& SubsystemClass = {})"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(nullptr, Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FSubsystemCollection()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FSubsystemCollection() : FSubsystemCollectionBase(TBaseType::StaticClass())"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetSubsystemArrayCopy(const TSubclassOf<TSubsystemClass>& SubsystemClass)"
  },
  {
    "label": "ForEachSubsystemWithInterface()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemInterface> void)",
    "insertText": "ForEachSubsystemWithInterface(TFunctionRef<void(TBaseType*)> Operation)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* SubsystemInterfaceClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "FObjectSubsystemCollection()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FObjectSubsystemCollection() : FSubsystemCollectionBase(TBaseType::StaticClass())"
  }
]