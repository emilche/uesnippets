[
  {
    "label": "FEventGraphData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventGraphData"
  },
  {
    "label": "FEventGraphSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventGraphSample"
  },
  {
    "label": "FProfilerAggregatedStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerAggregatedStat"
  },
  {
    "label": "FProfilerSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerSession"
  },
  {
    "label": "IDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDataProvider"
  },
  {
    "label": "FProfilerScratchArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerScratchArea"
  },
  {
    "label": "FTimeAccuracy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeAccuracy"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGraphDataSourceDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphDataSourceDescription"
  },
  {
    "label": "TCacheDataContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCacheDataContainer"
  },
  {
    "label": "TCachedDataByTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCachedDataByTime"
  },
  {
    "label": "TCachedDataByIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCachedDataByIndex"
  },
  {
    "label": "FGraphDataSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphDataSource"
  },
  {
    "label": "FCombinedGraphDataSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCombinedGraphDataSource"
  },
  {
    "label": "FProfilerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEventProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventProperty"
  },
  {
    "label": "TEventPropertyValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventPropertyValue"
  },
  {
    "label": "FEventPropertyValue_Name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventPropertyValue_Name"
  },
  {
    "label": "FEventGraphConsts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventGraphConsts"
  },
  {
    "label": "FDuplicateHierarchyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDuplicateHierarchyTag"
  },
  {
    "label": "FDuplicateSimpleTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDuplicateSimpleTag"
  },
  {
    "label": "FEventArraySorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventArraySorter"
  },
  {
    "label": "FSetBooleanState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetBooleanState"
  },
  {
    "label": "TCompareByProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCompareByProperty"
  },
  {
    "label": "FEventArrayBooleanOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventArrayBooleanOp"
  },
  {
    "label": "EEventGraphTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EEventGraphTypes"
  },
  {
    "label": "FEventGraphContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventGraphContainer"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" HAL / ThreadSingleton . h \" # include \" Containers / ChunkedArray . h \" # include \" Misc / Guid . h \" # include \" ProfilerCommon . h \" # include \" ProfilerSample . h \" class FEventGraphData ; class FEventGraphSample ; class FProfilerAggregatedStat ; class FProfilerSession ; class IDataProvider ; typedef TSharedPtr<class FEventGraphSample> FEventGraphSamplePtr ; typedef TSharedRef<class FEventGraphSample> FEventGraphSampleRef ; typedef TWeakPtr<class FEventGraphSample> FEventGraphSampleWeak ; typedef TSharedPtr<class FEventGraphData,ESPMode::ThreadSafe> FEventGraphDataPtr ; typedef TSharedRef<class FEventGraphData,ESPMode::ThreadSafe> FEventGraphDataRef ; struct FProfilerScratchArea : public TThreadSingleton<FProfilerScratchArea> { TArray<FEventGraphSample*> ExecuteOperationArray ; } ; struct FTimeAccuracy { enum Type { FPS008,FPS015,FPS030,FPS060,FPS120,InvalidOrMax } ; const float)",
    "insertText": "AsFrameTime(Type InTimeAccuracy)"
  },
  {
    "label": "AsInvFrameTime()",
    "kind": "Method",
    "detail": "Function (const float FrameTimeTable [ InvalidOrMax ] = { 1 0 0 0 . 0 f / _FPS008,1 0 0 0 . 0 f / _FPS015,1 0 0 0 . 0 f / _FPS030,1 0 0 0 . 0 f / _FPS060,1 0 0 0 . 0 f / _FPS120 } ; return FrameTimeTable [ InTimeAccuracy ] ; } const float)",
    "insertText": "AsInvFrameTime(Type InTimeAccuracy)"
  },
  {
    "label": "AsFPSCounter()",
    "kind": "Method",
    "detail": "Function (const float FPSInvTable [ InvalidOrMax ] = { 0 . 0 0 1 f* _FPS008,0 . 0 0 1 f* _FPS015,0 . 0 0 1 f* _FPS030,0 . 0 0 1 f* _FPS060,0 . 0 0 1 f* _FPS120 } ; return FPSInvTable [ InTimeAccuracy ] ; } const int32)",
    "insertText": "AsFPSCounter(Type InTimeAccuracy)"
  },
  {
    "label": "FGraphDataSourceDescription()",
    "kind": "Method",
    "detail": "Function (const int32 FPSTable [ InvalidOrMax ] = { _FPS008,_FPS015,_FPS030,_FPS060,_FPS120 } ; return FPSTable [ InTimeAccuracy ] ; } private : const int32 _FPS008 ; const int32 _FPS015 ; const int32 _FPS030 ; const int32 _FPS060 ; const int32 _FPS120 ; } ; class FGraphDataSourceDescription { public :)",
    "insertText": "FGraphDataSourceDescription(const uint32 InStatID ) : StatID( InStatID ) , SampleType( EProfilerSampleTypes::InvalidOrMax ) , CreationTime( -1)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FString InStatName, const FString InGroupName, const EProfilerSampleTypes::Type InSampleType, const FDateTime InCreationTime)"
  },
  {
    "label": "GetStatID()",
    "kind": "Method",
    "detail": "Function (StatName = InStatName ; GroupName = InGroupName ; SampleType = InSampleType ; CreationTime = InCreationTime ; } const uint32)",
    "insertText": "GetStatID()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T MemoryUsage =)",
    "insertText": "sizeof(*this) + StatName.GetAllocatedSize() + GroupName.GetAllocatedSize()"
  },
  {
    "label": "TCacheDataContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCacheDataContainer()"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CachedChunks .)",
    "insertText": "Empty(CachedChunks.Num())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CachedValues .)",
    "insertText": "Empty(CachedValues.Num())"
  },
  {
    "label": "GetMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} const SIZE_T)",
    "insertText": "GetMemoryUsage()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T MemoryUsage = CachedValues .)",
    "insertText": "GetAllocatedSize() + CachedChunks.GetAllocatedSize()"
  },
  {
    "label": "TCachedDataByTime()",
    "kind": "Method",
    "detail": "Function (TChunkedArray<Type,NumBytesPerChunk> CachedValues ; TBitArray<> CachedChunks ; } ; template<Type,ManagerClass> class TCachedDataByTime : private TCacheDataContainer<Type> { public : typedef TCachedDataByTime<Type,ManagerClass> ThisCachedDataByTime ; typedef TCacheDataContainer<Type> ThisCacheDataContainer ;)",
    "insertText": "TCachedDataByTime(const FTimeAccuracy::Type InTimeAccuracy ) : TCacheDataContainer<Type>() , TimeAccuracyMS( FTimeAccuracy::AsFrameTime(InTimeAccuracy) ) , InvTimeAccuracyMS( FTimeAccuracy::AsInvFrameTime(InTimeAccuracy))"
  },
  {
    "label": "TCachedDataByTime()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCachedDataByTime()"
  },
  {
    "label": "SetTimeAccuracy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeAccuracy(const FTimeAccuracy::Type InTimeAccuracy)"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (TimeAccuracyMS =)",
    "insertText": "AsFrameTime(InTimeAccuracy)"
  },
  {
    "label": "AsInvFrameTime()",
    "kind": "Method",
    "detail": "Function (InvTimeAccuracyMS =)",
    "insertText": "AsInvFrameTime(InTimeAccuracy)"
  },
  {
    "label": "GetStartIndexFromTimeRange()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetStartIndexFromTimeRange(const float StartTimeMS, const float EndTimeMS)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (const uint32 Index =)",
    "insertText": "TruncToInt(StartTimeMS * InvTimeAccuracyMS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "Result(Type)"
  },
  {
    "label": "GetStartIndexFromTimeRange()",
    "kind": "Method",
    "detail": "Function (const uint32 Index =)",
    "insertText": "GetStartIndexFromTimeRange(StartTimeMS, EndTimeMS)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (const uint32 CurrentChunkIndex = Index / ThisCacheDataContainer::NumElementsPerChunk ; const uint32 TotalNumFrames =)",
    "insertText": "TruncToInt(static_cast<const ManagerClass*>(this)->GetTotalTimeMS() * InvTimeAccuracyMS)"
  },
  {
    "label": "NumNeededChunks()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "NumNeededChunks(TotalNumFrames + ThisCacheDataContainer::NumElementsPerChunk - 1)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const uint32 NumMissingValues = TotalNumFrames - ThisCacheDataContainer::CachedValues .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ThisCacheDataContainer::CachedValues .)",
    "insertText": "Add(NumMissingValues)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ThisCacheDataContainer::CachedChunks .)",
    "insertText": "Add(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const bool bIsChunkFullyCached = ThisCacheDataContainer::CachedChunks [ CurrentChunkIndex ] ; const bool bCanBeCached = CurrentChunkIndex<NumNeededChunks - 1 ;)",
    "insertText": "if(bIsChunkFullyCached)"
  },
  {
    "label": "CachedValues()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "CachedValues(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!bIsChunkFullyCached && bCanBeCached)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint32 ChunkStartIndex = CurrentChunkIndex* ThisCacheDataContainer::NumElementsPerChunk ; const uint32 ChunkEndIndex = ChunkStartIndex + ThisCacheDataContainer::NumElementsPerChunk ;)",
    "insertText": "for(uint32 NewValueIndex = ChunkStartIndex; NewValueIndex < ChunkEndIndex; NewValueIndex++)"
  },
  {
    "label": "SampleStartTimeMS()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "SampleStartTimeMS(float)"
  },
  {
    "label": "CachedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedValues(NewValueIndex) = (Type)static_cast<const ManagerClass*>(this)->GetUncachedValueFromTimeRange( SampleStartTimeMS, SampleStartTimeMS+TimeAccuracyMS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Result(Type)static_cast<const ManagerClass*>(this)->GetUncachedValueFromTimeRange( StartTimeMS, EndTimeMS)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float TimeRange = EndTimeMS - StartTimeMS ; const float AbsDiff = FMath::Abs<)",
    "insertText": "float(TimeRange-TimeAccuracyMS)"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (bool bIsNearlyEqual =)",
    "insertText": "IsNearlyZero(AbsDiff, 0.1f)"
  },
  {
    "label": "TCachedDataByIndex()",
    "kind": "Method",
    "detail": "Function (} protected : float TimeAccuracyMS ; float InvTimeAccuracyMS ; } ; template<Type,ManagerClass> class TCachedDataByIndex : private TCacheDataContainer<Type> { public : typedef TCachedDataByIndex<Type,ManagerClass> ThisCachedDataByIndex ; typedef TCacheDataContainer<Type> ThisCacheDataContainer ;)",
    "insertText": "TCachedDataByIndex() : TCacheDataContainer<Type>()"
  },
  {
    "label": "TCachedDataByIndex()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCachedDataByIndex()"
  },
  {
    "label": "GetValueFromIndex()",
    "kind": "Method",
    "detail": "Function (} const Type)",
    "insertText": "GetValueFromIndex(const uint32 Index)"
  },
  {
    "label": "ManagerClass()",
    "kind": "Method",
    "detail": "Function (const uint32 CurrentChunkIndex = Index / ThisCacheDataContainer::NumElementsPerChunk ; const uint32 TotalNumFrames = static_cast<const)",
    "insertText": "ManagerClass(this)->GetNumFrames()"
  },
  {
    "label": "CachedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachedValues(NewValueIndex) = (Type)static_cast<const ManagerClass*>(this)->GetUncachedValueFromIndex( NewValueIndex)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Result(Type)static_cast<const ManagerClass*>(this)->GetUncachedValueFromIndex( Index)"
  },
  {
    "label": "FGraphDataSource()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FGraphDataSource()"
  },
  {
    "label": "GetTotalTimeMS()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "GetTotalTimeMS()"
  },
  {
    "label": "GetDataProvider()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IDataProvider>)",
    "insertText": "GetDataProvider()"
  },
  {
    "label": "GetSessionInstanceID()",
    "kind": "Method",
    "detail": "Function (const FGuid)",
    "insertText": "GetSessionInstanceID()"
  },
  {
    "label": "GetAggregatedStat()",
    "kind": "Method",
    "detail": "Function (const FProfilerAggregatedStat*)",
    "insertText": "GetAggregatedStat()"
  },
  {
    "label": "CanBeDisplayedAsTimeBased()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "CanBeDisplayedAsTimeBased()"
  },
  {
    "label": "GetUncachedValueFromTimeRange()",
    "kind": "Method",
    "detail": "Function (const TGraphDataType)",
    "insertText": "GetUncachedValueFromTimeRange(const float StartTimeMS, const float EndTimeMS)"
  },
  {
    "label": "FCombinedGraphDataSource()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FProfilerSession> ProfilerSession ; float Scale ; } ; class FCombinedGraphDataSource : public FGraphDataSourceDescription,public TCachedDataByTime<FVector,FCombinedGraphDataSource> { class TCachedDataByTime<FVector,FCombinedGraphDataSource> ; class FProfilerManager ; protected :)",
    "insertText": "FCombinedGraphDataSource(const uint32 InStatID, const FTimeAccuracy::Type InTimeAccuracy)"
  },
  {
    "label": "FCombinedGraphDataSource()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FCombinedGraphDataSource()"
  },
  {
    "label": "CanBeDisplayedAsMulti()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "CanBeDisplayedAsMulti()"
  },
  {
    "label": "GetSourcesNum()",
    "kind": "Method",
    "detail": "Function (const bool bResult =)",
    "insertText": "GetSourcesNum()"
  },
  {
    "label": "CanBeDisplayedAsIndexBased()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "CanBeDisplayedAsIndexBased()"
  },
  {
    "label": "IsProfilerSessionRegistered()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsProfilerSessionRegistered(const FGuid& SessionInstanceID)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bIsRegistered = GraphDataSources .)",
    "insertText": "Contains(SessionInstanceID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GraphDataSources .)",
    "insertText": "Add(SessionInstanceID, GraphDataSource)"
  },
  {
    "label": "UnregisterWithProfilerSession()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterWithProfilerSession(const FGuid& SessionInstanceID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (GraphDataSources .)",
    "insertText": "Remove(SessionInstanceID)"
  },
  {
    "label": "GetSourcesIterator()",
    "kind": "Method",
    "detail": "Function (SIZE_T MemoryUsage = 0 ; return MemoryUsage ; } const TMap<FGuid,TSharedRef<const FGraphDataSource>>::TConstIterator)",
    "insertText": "GetSourcesIterator()"
  },
  {
    "label": "GetFirstSource()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<const FGraphDataSource>*)",
    "insertText": "GetFirstSource()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<const FGraphDataSource>* Result = nullptr ;)",
    "insertText": "if(GetSourcesNum() > 0)"
  },
  {
    "label": "GetSourcesIterator()",
    "kind": "Method",
    "detail": "Function (Result =&)",
    "insertText": "GetSourcesIterator().Value()"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const uint32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float MinTotalTime = 1 0 0 0 . 0 f* 6 0* 6 0* 2 4* 3 6 5 ;)",
    "insertText": "for(auto It = GetSourcesIterator(); It; ++It)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<const FGraphDataSource>& GraphDataSource = It .)",
    "insertText": "Value()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (MinTotalTime =)",
    "insertText": "Min(MinTotalTime, GraphDataSource->GetTotalTimeMS())"
  },
  {
    "label": "GetStartIndicesFromTimeRange()",
    "kind": "Method",
    "detail": "Function (} return MinTotalTime ; } else { return 0 . 0 f ; } } void)",
    "insertText": "GetStartIndicesFromTimeRange(const float StartTimeMS, const float EndTimeMS, TMap<FGuid,uint32>& out_StartIndices)"
  },
  {
    "label": "FEventProperty()",
    "kind": "Method",
    "detail": "Function (TMap<FGuid,TSharedRef<const FGraphDataSource>> GraphDataSources ; } ; enum class EEventPropertyIndex : uint32 { StatName,InclusiveTimeMS,InclusiveTimePct,ExclusiveTimeMS,ExclusiveTimePct,NumCallsPerFrame,None,MinInclusiveTimeMS,MaxInclusiveTimeMS,AvgInclusiveTimeMS,MinNumCallsPerFrame,MaxNumCallsPerFrame,AvgNumCallsPerFrame,ThreadName,ThreadDurationMS,FrameDurationMS,ThreadPct,FramePct,ThreadToFramePct,GroupName,bIsHotPath,bIsFiltered,bIsCulled,bNeedNotCulledChildrenUpdate,InvalidOrMax,} ; enum class EEventPropertyFormatters { Name,TimeMS,TimePct,Number,Bool,InvalidOrMax,} ; enum class EEventPropertyTypes { Double,Name,Bool,InvalidOrMax,} ; class FEventProperty { class FEventGraphSample ; protected :)",
    "insertText": "FEventProperty(const EEventPropertyIndex PropertyIndex, const FName PropertyName, const uint32 PropertyOffset, const EEventPropertyFormatters PropertyFormatter ) : Index( PropertyIndex ), Name( PropertyName ), Offset( PropertyOffset ), Formatter( PropertyFormatter ), Type( GetTypeFromFormatter(PropertyFormatter))"
  },
  {
    "label": "GetTypeFromFormatter()",
    "kind": "Method",
    "detail": "Function (} EEventPropertyTypes)",
    "insertText": "GetTypeFromFormatter(const EEventPropertyFormatters PropertyFormatter)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} const Type)",
    "insertText": "GetPropertyValue()"
  },
  {
    "label": "GetPropertyAddress()",
    "kind": "Method",
    "detail": "Function (const uint8* const PropertyAddress =)",
    "insertText": "GetPropertyAddress()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "Value(const Type*)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Type&)",
    "insertText": "Value(Type&)*(const Type*)"
  },
  {
    "label": "SampleAddress()",
    "kind": "Method",
    "detail": "Function (const uint8* const)",
    "insertText": "SampleAddress(const uint8* const)"
  },
  {
    "label": "FEventPropertyValue_Name()",
    "kind": "Method",
    "detail": "Function (const uint8* const PropertyAddress = SampleAddress + PropertyOffset ; return PropertyAddress ; } protected : const FEventGraphSample& Event ; const uint32 PropertyOffset ; } ; typedef TEventPropertyValue<double> FEventPropertyValue_Double ; typedef TEventPropertyValue<bool> FEventPropertyValue_Bool ; class FEventPropertyValue_Name : public TEventPropertyValue<FName> { public :)",
    "insertText": "FEventPropertyValue_Name(const FEventGraphSample& InEvent, const FEventProperty& EventProperty ) : TEventPropertyValue( InEvent, EventProperty)"
  },
  {
    "label": "GetComparablePropertyValue()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetComparablePropertyValue()"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (const FString Value =)",
    "insertText": "GetPropertyValue().GetPlainNameString()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} ; template<> FString ToString<)",
    "insertText": "Name(const FEventGraphSample& Event, const FEventProperty& EventProperty)"
  },
  {
    "label": "TimeMS()",
    "kind": "Method",
    "detail": "Function (} ; template<> FString ToString<)",
    "insertText": "TimeMS(const FEventGraphSample& Event, const FEventProperty& EventProperty)"
  },
  {
    "label": "TimePct()",
    "kind": "Method",
    "detail": "Function (} ; template<> FString ToString<)",
    "insertText": "TimePct(const FEventGraphSample& Event, const FEventProperty& EventProperty)"
  },
  {
    "label": "Number()",
    "kind": "Method",
    "detail": "Function (} ; template<> FString ToString<)",
    "insertText": "Number(const FEventGraphSample& Event, const FEventProperty& EventProperty)"
  },
  {
    "label": "InitializePropertyManagement()",
    "kind": "Method",
    "detail": "Function (} ; } struct FEventGraphConsts { FName RootEvent ; FName Self ; FName FakeRoot ; } ; class FEventGraphSample : public TSharedFromThis<FEventGraphSample> { struct FDuplicateHierarchyTag { } ; struct FDuplicateSimpleTag { } ; class FEventArraySorter ; class FEventGraphData ; public : void)",
    "insertText": "InitializePropertyManagement()"
  },
  {
    "label": "GetEventPropertyByIndex()",
    "kind": "Method",
    "detail": "Function (const FEventProperty&)",
    "insertText": "GetEventPropertyByIndex(const EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "GetEventPropertyByName()",
    "kind": "Method",
    "detail": "Function (} const FEventProperty&)",
    "insertText": "GetEventPropertyByName(const FName PropertyName)"
  },
  {
    "label": "Properties()",
    "kind": "Method",
    "detail": "Function (} protected : FEventProperty)",
    "insertText": "Properties(uint32)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (TMap<FName,const FEventProperty*> NamedProperties ; public :)",
    "insertText": "FEventGraphSample(const FName InName ) : _ParentPtr( nullptr ) , _RootPtr( nullptr ) , _ThreadPtr( nullptr ) , _ThreadName( InName ) , _GroupName( InName ) , _StatName( InName ) , _StatID( 0 ) , _InclusiveTimeMS( 0.0 ) , _InclusiveTimePct( 0.0 ) , _MinInclusiveTimeMS( TNumericLimits<double>::Max() ) , _MaxInclusiveTimeMS( TNumericLimits<double>::Min() ) , _AvgInclusiveTimeMS( 0.0 ) , _AvgExclusiveTimeMS( 0.0 ) , _NumCallsPerFrame( 1.0 ) , _MinNumCallsPerFrame( TNumericLimits<double>::Max() ) , _MaxNumCallsPerFrame( TNumericLimits<double>::Min() ) , _AvgNumCallsPerFrame( 0.0 ) , _ExclusiveTimeMS( 0.0 ) , _ExclusiveTimePct( 0.0 ) , _FrameDurationMS( 0.0 ) , _ThreadDurationMS( 0.0 ) , _ThreadToFramePct( 0.0 ) , _ThreadPct( 0.0 ) , _FramePct( 0.0 ) , _bIsHotPath( false ) , _bIsFiltered( false ) , _bIsCulled( false ) , bNeedNotCulledChildrenUpdate( true)"
  },
  {
    "label": "CreateNamedEvent()",
    "kind": "Method",
    "detail": "Function (} FEventGraphSamplePtr)",
    "insertText": "CreateNamedEvent(const FName EventName)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (FEventGraphSample* RootEventGraphSample = new)",
    "insertText": "FEventGraphSample(EventName)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FEventGraphSample(const FName InThreadName, const FName InGroupName, const uint32 InStatID, const FName InStatName, const double InInclusiveTimeMS, const double InNumCallsPerFrame, const FEventGraphSamplePtr InParentPtr = nullptr ) : _ParentPtr( InParentPtr ) , _RootPtr( nullptr ) , _ThreadPtr( nullptr ) , _ThreadName( InThreadName ) , _GroupName( InGroupName ) , _StatName( InStatName ) , _StatID( InStatID ) , _InclusiveTimeMS( InInclusiveTimeMS ) , _InclusiveTimePct( 0.0f ) , _MinInclusiveTimeMS( InInclusiveTimeMS ) , _MaxInclusiveTimeMS( InInclusiveTimeMS ) , _AvgInclusiveTimeMS( InInclusiveTimeMS ) , _AvgExclusiveTimeMS( 0.0f ) , _NumCallsPerFrame( InNumCallsPerFrame ) , _MinNumCallsPerFrame( InNumCallsPerFrame ) , _MaxNumCallsPerFrame( InNumCallsPerFrame ) , _AvgNumCallsPerFrame( InNumCallsPerFrame ) , _ExclusiveTimeMS( 0.0f ) , _ExclusiveTimePct( 0.0f ) , _FrameDurationMS( 0.0f ) , _ThreadDurationMS( 0.0f ) , _ThreadToFramePct( 0.0f ) , _ThreadPct( 0.0f ) , _FramePct( 0.0f ) , _bIsHotPath( false ) , _bIsFiltered( false ) , _bIsCulled( false ) , bNeedNotCulledChildrenUpdate( true)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventGraphSample(const FEventGraphSample& SourceEvent, const FDuplicateSimpleTag ) : _ParentPtr( nullptr ) , _RootPtr( nullptr ) , _ThreadPtr( nullptr ) , _ThreadName( SourceEvent._ThreadName ) , _GroupName( SourceEvent._GroupName ) , _StatName( SourceEvent._StatName ) , _StatID( SourceEvent._StatID ) , _InclusiveTimeMS( SourceEvent._InclusiveTimeMS ) , _InclusiveTimePct( SourceEvent._InclusiveTimePct ) , _MinInclusiveTimeMS( SourceEvent._MinInclusiveTimeMS ) , _MaxInclusiveTimeMS( SourceEvent._MaxInclusiveTimeMS ) , _AvgInclusiveTimeMS( SourceEvent._AvgInclusiveTimeMS ) , _AvgExclusiveTimeMS(SourceEvent._AvgExclusiveTimeMS) , _NumCallsPerFrame( SourceEvent._NumCallsPerFrame ) , _MinNumCallsPerFrame( SourceEvent._MinNumCallsPerFrame ) , _MaxNumCallsPerFrame( SourceEvent._MaxNumCallsPerFrame ) , _AvgNumCallsPerFrame( SourceEvent._AvgNumCallsPerFrame ) , _ExclusiveTimeMS( SourceEvent._ExclusiveTimeMS ) , _ExclusiveTimePct( SourceEvent._ExclusiveTimePct ) , _FrameDurationMS( SourceEvent._FrameDurationMS ) , _ThreadDurationMS( SourceEvent._ThreadDurationMS ) , _ThreadToFramePct( SourceEvent._ThreadToFramePct ) , _ThreadPct( SourceEvent._ThreadPct ) , _FramePct( SourceEvent._FramePct ) , _bIsHotPath( false ) , _bIsFiltered( false ) , _bIsCulled( false ) , bNeedNotCulledChildrenUpdate( true)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FEventGraphSample()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (# ifdef _DEBUG int k = 0 ; k + + ; # endif } void)",
    "insertText": "Combine(const FEventGraphSamplePtr& Other)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (_InclusiveTimeMS + = Other -> _InclusiveTimeMS ; _NumCallsPerFrame + = Other -> _NumCallsPerFrame ; _ExclusiveTimeMS + = Other -> _ExclusiveTimeMS ; _MinInclusiveTimeMS =)",
    "insertText": "Min(_MinInclusiveTimeMS, Other->_MinInclusiveTimeMS)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (_MaxInclusiveTimeMS =)",
    "insertText": "Max(_MaxInclusiveTimeMS, Other->_MaxInclusiveTimeMS)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (_MinNumCallsPerFrame =)",
    "insertText": "Min(_MinNumCallsPerFrame, Other->_MinNumCallsPerFrame)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (_MaxNumCallsPerFrame =)",
    "insertText": "Max(_MaxNumCallsPerFrame, Other->_MaxNumCallsPerFrame)"
  },
  {
    "label": "RecalcTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecalcTimes()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_FrameDurationMS = 0 ; _ThreadDurationMS = 0 ; _InclusiveTimeMS = 0 ;)",
    "insertText": "for(auto Child : GetChildren())"
  },
  {
    "label": "_InclusiveTimePct()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "_InclusiveTimePct(Child->_InclusiveTimeMS * 100)"
  },
  {
    "label": "_ThreadPct()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "_ThreadPct(Child->_ThreadDurationMS * 100)"
  },
  {
    "label": "_FramePct()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "_FramePct(Child->_FrameDurationMS * 100)"
  },
  {
    "label": "CopyAverage()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "CopyAverage(const double NumFrames)"
  },
  {
    "label": "FixFrameThreadPcts()",
    "kind": "Method",
    "detail": "Function (_InclusiveTimeMS = _AvgInclusiveTimeMS ; _ExclusiveTimeMS = _AvgExclusiveTimeMS ; _NumCallsPerFrame = _AvgNumCallsPerFrame ; _FrameDurationMS / = NumFrames ; _ThreadDurationMS / = NumFrames ;)",
    "insertText": "FixFrameThreadPcts()"
  },
  {
    "label": "CopyMaximum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyMaximum(FEventGraphSample* RootEvent, FEventGraphSample* ThreadEvent)"
  },
  {
    "label": "FixChildrenTimesAndCalcAverages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FixChildrenTimesAndCalcAverages(const double NumFrames)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (_InclusiveTimeMS)",
    "insertText": "GetRoot()"
  },
  {
    "label": "GetThread()",
    "kind": "Method",
    "detail": "Function (_InclusiveTimeMS)",
    "insertText": "GetThread()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FEventGraphSample* Parent =)",
    "insertText": "GetParent().Get()"
  },
  {
    "label": "SetMaximumTimesForAllChildren()",
    "kind": "Method",
    "detail": "Function (_ThreadToFramePct = 1 0 0 . 0 f* _ThreadDurationMS / _FrameDurationMS ; _ThreadPct = 1 0 0 . 0 f* _InclusiveTimeMS / _ThreadDurationMS ; _FramePct = 1 0 0 . 0 f* _InclusiveTimeMS / _FrameDurationMS ; } void)",
    "insertText": "SetMaximumTimesForAllChildren()"
  },
  {
    "label": "SetRootAndThreadForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootAndThreadForAllChildren()"
  },
  {
    "label": "FixChildrenTimesAndCalcAveragesForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixChildrenTimesAndCalcAveragesForAllChildren(const double NumFrames)"
  },
  {
    "label": "FindChildPtr()",
    "kind": "Method",
    "detail": "Function (const bool bAreChildrenTheSame = _ThreadName = = Other -> _ThreadName&& _StatID = = Other -> _StatID ; return bAreChildrenTheSame ; } FEventGraphSamplePtr)",
    "insertText": "FindChildPtr(const FEventGraphSamplePtr& ChildToLook)"
  },
  {
    "label": "Combine_Recurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine_Recurrent(const FEventGraphSamplePtr& Other)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (public : template<TFunc> void)",
    "insertText": "ExecuteOperationForAllChildren(TFunc FuncToCall)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArray<FEventGraphSample*>& Stack =)",
    "insertText": "Get()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Add(&AsShared().Get())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Idx = 1 ;)",
    "insertText": "while(Stack.Num() > 0)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FEventGraphSample* Current = Stack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "FuncToCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FuncToCall(Current)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<FEventGraphSamplePtr>& ChildrenPtr = Current ->)",
    "insertText": "GetChildren()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& ChildPtr = ChildrenPtr [ ChildIndex ] ; Stack .)",
    "insertText": "Push(ChildPtr.Get())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } Stack .)",
    "insertText": "Reset()"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (} template<TFunc,TArg0> void)",
    "insertText": "ExecuteOperationForAllChildren(TFunc FuncToCall, TArg0 Arg0)"
  },
  {
    "label": "FuncToCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FuncToCall(Current, Arg0)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (} template<TFunc,TArg0,TArg1> void)",
    "insertText": "ExecuteOperationForAllChildren(TFunc FuncToCall, TArg0 Arg0, TArg1 Arg1)"
  },
  {
    "label": "FuncToCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FuncToCall(Current, Arg0, Arg1)"
  },
  {
    "label": "DuplicateWithHierarchyPtr()",
    "kind": "Method",
    "detail": "Function (} protected : FEventGraphSamplePtr)",
    "insertText": "DuplicateWithHierarchyPtr()"
  },
  {
    "label": "DuplicateSimplePtr()",
    "kind": "Method",
    "detail": "Function (FEventGraphSamplePtr ParentPtr =)",
    "insertText": "DuplicateSimplePtr()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ParentPtr -> _ChildrenPtr .)",
    "insertText": "Reserve(_ChildrenPtr.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildPtr -> _ParentPtr = ParentPtr ; ParentPtr -> _ChildrenPtr .)",
    "insertText": "Add(ChildPtr)"
  },
  {
    "label": "AddChildAndSetParentPtr()",
    "kind": "Method",
    "detail": "Function (} return ParentPtr ; } void)",
    "insertText": "AddChildAndSetParentPtr(const FEventGraphSamplePtr& ChildPtr)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (ChildPtr -> _ParentPtr =)",
    "insertText": "AsShared()"
  },
  {
    "label": "SetRootAndThreadEvents_Iterative()",
    "kind": "Method",
    "detail": "Function (} # if 0 void)",
    "insertText": "SetRootAndThreadEvents_Iterative(FEventGraphSample* RootEvent, FEventGraphSample* ThreadEvent)"
  },
  {
    "label": "FSetRootAndThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSetRootAndThread()(Current, RootEvent, ThreadEvent)"
  },
  {
    "label": "AddChildPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChildPtr(const FEventGraphSamplePtr& Child)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (_ChildrenPtr .)",
    "insertText": "Add(Child)"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParent(FEventGraphSamplePtr NewParent)"
  },
  {
    "label": "FEventGraphSample()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FEventGraphSample(this)->UpdateNotCulledChildrenInternal()"
  },
  {
    "label": "GetNotCulledChildrenInternal()",
    "kind": "Method",
    "detail": "Function (bNeedNotCulledChildrenUpdate = true ; } protected : TArray<FEventGraphSamplePtr>&)",
    "insertText": "GetNotCulledChildrenInternal()"
  },
  {
    "label": "UpdateNotCulledChildrenInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNotCulledChildrenInternal()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& ChildPtr = _ChildrenPtr [ ChildIndex ] ;)",
    "insertText": "if(!ChildPtr->_bIsCulled)"
  },
  {
    "label": "HasCulledChildren()",
    "kind": "Method",
    "detail": "Function (} } bNeedNotCulledChildrenUpdate = false ; } } public : const bool)",
    "insertText": "HasCulledChildren()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const bool bHasCulledChildren =)",
    "insertText": "GetChildren().Num() != GetNotCulledChildren().Num()"
  },
  {
    "label": "GetOutermost()",
    "kind": "Method",
    "detail": "Function (} FEventGraphSamplePtr)",
    "insertText": "GetOutermost()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FEventGraphSamplePtr Outermost ;)",
    "insertText": "for(FEventGraphSamplePtr Top = AsShared(); Top.IsValid() && Top->GetParent().IsValid(); Top = Top->GetParent())"
  },
  {
    "label": "GetStack()",
    "kind": "Method",
    "detail": "Function (Outermost = Top ; } return Outermost ; } void)",
    "insertText": "GetStack(TArray<FEventGraphSamplePtr>& out_Stack)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (out_Stack .)",
    "insertText": "Add(Top)"
  },
  {
    "label": "GetLinearEvents()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetLinearEvents(TArray<FEventGraphSamplePtr>& out_LinearEvents, const bool bUseCulled)"
  },
  {
    "label": "GetNotCulledChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<FEventGraphSamplePtr> RootChildren = bUseCulled ?)",
    "insertText": "GetNotCulledChildren() : GetChildren()"
  },
  {
    "label": "GetLinearEvents_InternalRecurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearEvents_InternalRecurrent(RootChildren[ChildIndex], out_LinearEvents, bUseCulled)"
  },
  {
    "label": "GetLinearEvents_InternalRecurrent()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "GetLinearEvents_InternalRecurrent(const FEventGraphSamplePtr& ParentEvent, TArray<FEventGraphSamplePtr>& out_LinearEvents, const bool bUseCulled)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (out_LinearEvents .)",
    "insertText": "Add(ParentEvent)"
  },
  {
    "label": "GetNotCulledChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<FEventGraphSamplePtr> Children = bUseCulled ? ParentEvent ->)",
    "insertText": "GetNotCulledChildren() : ParentEvent->GetChildren()"
  },
  {
    "label": "GetLinearEvents_InternalRecurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinearEvents_InternalRecurrent(Children[ChildIndex], out_LinearEvents, bUseCulled)"
  },
  {
    "label": "GetChildrenTimeMS()",
    "kind": "Method",
    "detail": "Function (} } public : # if 0 double)",
    "insertText": "GetChildrenTimeMS(const bool bExcludeSelf = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& ChildPtr = _ChildrenPtr [ ChildIndex ] ;)",
    "insertText": "if(ChildPtr->IsSelf())"
  },
  {
    "label": "GetSelfOrNull()",
    "kind": "Method",
    "detail": "Function (ChildrenTotalTimeMS + = ChildPtr -> _InclusiveTimeMS ; } } else { ChildrenTotalTimeMS + = ChildPtr -> _InclusiveTimeMS ; } } return ChildrenTotalTimeMS ; } FEventGraphSamplePtr)",
    "insertText": "GetSelfOrNull()"
  },
  {
    "label": "PropertyValueAsDouble()",
    "kind": "Method",
    "detail": "Function (Self = ChildPtr ; break ; } } return Self ; } # endif public : double&)",
    "insertText": "PropertyValueAsDouble(const EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "GetEventPropertyByIndex()",
    "kind": "Method",
    "detail": "Function (const FEventProperty& EventProperty =)",
    "insertText": "GetEventPropertyByIndex(PropertyIndex)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FEventPropertyValue_Double)",
    "insertText": "Value(*this, EventProperty)"
  },
  {
    "label": "PropertyValueAsFName()",
    "kind": "Method",
    "detail": "Function (} FName&)",
    "insertText": "PropertyValueAsFName(const EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "PropertyValueAsBool()",
    "kind": "Method",
    "detail": "Function (} bool&)",
    "insertText": "PropertyValueAsBool(const EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetPropertyValueAsString(const EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "GetFormattedValue()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetFormattedValue(EEventPropertyIndex PropertyIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString FormattedValue ;)",
    "insertText": "if(EventProperty.Formatter == EEventPropertyFormatters::Name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EventProperty.Formatter == EEventPropertyFormatters::TimeMS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EventProperty.Formatter == EEventPropertyFormatters::TimePct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EventProperty.Formatter == EEventPropertyFormatters::Number)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return FormattedValue ; } template<bool FEventGraphSample::* BoolPtr> struct FSetBooleanState { void)",
    "insertText": "operator()( FEventGraphSample* EventPtr, const bool bValue)"
  },
  {
    "label": "SetBooleanStateForAllChildren()",
    "kind": "Method",
    "detail": "Function (EventPtr ->* BoolPtr = bValue ; } } ; public : template<const EEventPropertyIndex BooleanPropertyIndex> void)",
    "insertText": "SetBooleanStateForAllChildren(const bool bValue)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationForAllChildren(FSetBooleanState<&FEventGraphSample::_bIsCulled>(), bValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BooleanPropertyIndex == EEventPropertyIndex::bIsFiltered)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationForAllChildren(FSetBooleanState<&FEventGraphSample::_bIsFiltered>(), bValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BooleanPropertyIndex == EEventPropertyIndex::bIsHotPath)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationForAllChildren(FSetBooleanState<&FEventGraphSample::_bIsHotPath>(), bValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BooleanPropertyIndex == EEventPropertyIndex::bNeedNotCulledChildrenUpdate)"
  },
  {
    "label": "ExecuteOperationForAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationForAllChildren(FSetBooleanState<&FEventGraphSample::bNeedNotCulledChildrenUpdate>(), bValue)"
  },
  {
    "label": "SetBooleanStateForAllChildren_Recurrent()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "SetBooleanStateForAllChildren_Recurrent(const EEventPropertyIndex BooleanPropertyIndex, const bool bValue)"
  },
  {
    "label": "PropertyValueAsBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyValueAsBool(BooleanPropertyIndex)"
  },
  {
    "label": "SetBooleanStateForAllChildren_Recurrent()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& Child = _ChildrenPtr [ ChildNx ] ; Child ->)",
    "insertText": "SetBooleanStateForAllChildren_Recurrent(BooleanPropertyIndex,bValue)"
  },
  {
    "label": "TCompareByProperty()",
    "kind": "Method",
    "detail": "Function (} } protected : FEventGraphSampleWeak _ParentPtr ; FEventGraphSample* _RootPtr ; FEventGraphSample* _ThreadPtr ; TArray<FEventGraphSamplePtr> _ChildrenPtr ; TArray<FEventGraphSamplePtr> _NotCulledChildrenPtr ; public : FName _ThreadName ; FName _GroupName ; FName _StatName ; uint32 _StatID ; double _InclusiveTimeMS ; double _InclusiveTimePct ; double _MinInclusiveTimeMS ; double _MaxInclusiveTimeMS ; double _AvgInclusiveTimeMS ; double _AvgExclusiveTimeMS ; double _NumCallsPerFrame ; double _MinNumCallsPerFrame ; double _MaxNumCallsPerFrame ; double _AvgNumCallsPerFrame ; double _ExclusiveTimeMS ; double _ExclusiveTimePct ; double _FrameDurationMS ; double _ThreadDurationMS ; double _ThreadToFramePct ; double _ThreadPct ; double _FramePct ; bool _bIsHotPath ; bool _bIsFiltered ; bool _bIsCulled ; private : bool bNeedNotCulledChildrenUpdate ; } ; namespace EEventCompareOps { enum Type { Less,Greater,Equal,Contains,InvalidOrMax,} ; } namespace EventGraphPrivate { template<const EEventPropertyTypes PropType,const EEventCompareOps::Type CompareOp> struct TCompareByProperty { private : const EEventPropertyIndex PropertyIndex ; public :)",
    "insertText": "TCompareByProperty(const EEventPropertyIndex InPropertyIndex ) : PropertyIndex( InPropertyIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()( const FEventGraphSamplePtr& A, const FEventGraphSamplePtr& B)"
  },
  {
    "label": "ExecuteOperation()",
    "kind": "Method",
    "detail": "Function (} } ; } class FEventArrayBooleanOp { public : void)",
    "insertText": "ExecuteOperation(FEventGraphSamplePtr DestPtr, const EEventPropertyIndex DestPropertyIndex, const FEventGraphSamplePtr SrcPtr, const EEventPropertyIndex SrcPropertyIndex, const EEventCompareOps::Type OpType)"
  },
  {
    "label": "GetEventPropertyByIndex()",
    "kind": "Method",
    "detail": "Function (const FEventProperty& SrcEventProperty =)",
    "insertText": "GetEventPropertyByIndex(SrcPropertyIndex)"
  },
  {
    "label": "IsName()",
    "kind": "Method",
    "detail": "Function (const bool bCompareAsStrings = SrcEventProperty .)",
    "insertText": "IsName()"
  },
  {
    "label": "IsDouble()",
    "kind": "Method",
    "detail": "Function (const bool bCompareAsFloat = SrcEventProperty .)",
    "insertText": "IsDouble()"
  },
  {
    "label": "GetEventPropertyByIndex()",
    "kind": "Method",
    "detail": "Function (const FEventProperty& DestEventProperty =)",
    "insertText": "GetEventPropertyByIndex(DestPropertyIndex)"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationInternal(DestPtr->GetChildren(), DestEventProperty, SrcPtr, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Name,EEventCompareOps::Less>(SrcEventProperty.Index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bCompareAsFloat)"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationInternal(DestPtr->GetChildren(), DestEventProperty, SrcPtr, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Double,EEventCompareOps::Less>(SrcEventProperty.Index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(OpType == EEventCompareOps::Greater)"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationInternal(DestPtr->GetChildren(), DestEventProperty, SrcPtr, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Name,EEventCompareOps::Greater>(SrcEventProperty.Index))"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationInternal(DestPtr->GetChildren(), DestEventProperty, SrcPtr, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Double,EEventCompareOps::Greater>(SrcEventProperty.Index))"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (} } } private : template<const EEventPropertyTypes PropType,const EEventCompareOps::Type CompareOp> void)",
    "insertText": "ExecuteOperationInternal(TArray< FEventGraphSamplePtr >& DestEvents, const FEventProperty& DestEventProperty, const FEventGraphSamplePtr& SrcPtr, const EventGraphPrivate::TCompareByProperty<PropType,CompareOp>& Comparator)"
  },
  {
    "label": "Comparator()",
    "kind": "Method",
    "detail": "Function (FEventGraphSamplePtr& Child = DestEvents [ ChildIndex ] ; const bool bBooleanState =)",
    "insertText": "Comparator(Child, SrcPtr)"
  },
  {
    "label": "PropertyValueAsBool()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "PropertyValueAsBool(DestEventProperty.Index)"
  },
  {
    "label": "ExecuteOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperationInternal(Child->GetChildren(), DestEventProperty, SrcPtr, Comparator)"
  },
  {
    "label": "ExecuteAssignOperation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ExecuteAssignOperation(TArray< FEventGraphSamplePtr >& DestEvents, const FEventProperty& DestEventProperty)"
  },
  {
    "label": "ExecuteAssignOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAssignOperation(Child->GetChildren(), DestEventProperty)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} } } ; class FEventArraySorter { public : void)",
    "insertText": "Sort(TArray< FEventGraphSamplePtr >& ChildrenToSort, const FName PropertyName, const EEventCompareOps::Type OpType)"
  },
  {
    "label": "GetEventPropertyByName()",
    "kind": "Method",
    "detail": "Function (const FEventProperty& EventProperty =)",
    "insertText": "GetEventPropertyByName(PropertyName)"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortInternal(ChildrenToSort, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Name,EEventCompareOps::Greater>(EventProperty.Index))"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortInternal(ChildrenToSort, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Double,EEventCompareOps::Greater>(EventProperty.Index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(OpType == EEventCompareOps::Less)"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortInternal(ChildrenToSort, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Name,EEventCompareOps::Less>(EventProperty.Index))"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortInternal(ChildrenToSort, EventGraphPrivate::TCompareByProperty<EEventPropertyTypes::Double,EEventCompareOps::Less>(EventProperty.Index))"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (} } } private : template<const EEventPropertyTypes PropType,const EEventCompareOps::Type CompareOp> void)",
    "insertText": "SortInternal(TArray< FEventGraphSamplePtr >& ChildrenToSort, const EventGraphPrivate::TCompareByProperty<PropType,CompareOp>& CompareInstance)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (ChildrenToSort .)",
    "insertText": "Sort(CompareInstance)"
  },
  {
    "label": "SortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortInternal(Children, CompareInstance)"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (} } } } ; struct EEventGraphTypes { enum Type { Average,Maximum,OneFrame,Total,InvalidOrMax,} ; FString)",
    "insertText": "ToName(const EEventGraphTypes::Type EventGraphType)"
  },
  {
    "label": "ToDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToDescription(const EEventGraphTypes::Type EventGraphType)"
  },
  {
    "label": "FEventGraphContainer()",
    "kind": "Method",
    "detail": "Function (} ; struct FEventGraphContainer {)",
    "insertText": "FEventGraphContainer(uint32 InFrameStartIndex, uint32 InFrameEndIndex, const FEventGraphDataRef& InAverage, const FEventGraphDataRef& InMaximum, const FEventGraphDataRef& InTotal ) : FrameStartIndex( InFrameStartIndex ) , FrameEndIndex( InFrameEndIndex ) , Average( InAverage ) , Maximum( InMaximum ) , Total( InTotal)"
  },
  {
    "label": "FEventGraphData()",
    "kind": "Method",
    "detail": "Function (} const uint32 FrameStartIndex ; const uint32 FrameEndIndex ; FEventGraphDataRef Average ; FEventGraphDataRef Maximum ; FEventGraphDataRef Total ; } ; class FEventGraphData : public FNoncopyable { class FProfilerSession ; public :)",
    "insertText": "FEventGraphData()"
  },
  {
    "label": "FEventGraphData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventGraphData(const FEventGraphData& Source)"
  },
  {
    "label": "FEventGraphData()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FEventGraphData(const FProfilerSession * const InProfilerSession, const uint32 InFrameIndex)"
  },
  {
    "label": "PopulateHierarchy_Recurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateHierarchy_Recurrent(const FProfilerSession * const ProfilerSession, const FEventGraphSamplePtr ParentEvent, const FProfilerSample& ParentSample, const TSharedRef<IDataProvider> DataProvider)"
  },
  {
    "label": "DuplicateAsRef()",
    "kind": "Method",
    "detail": "Function (public : FEventGraphDataRef)",
    "insertText": "DuplicateAsRef()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(const FEventGraphData& Other)"
  },
  {
    "label": "SetAsAverage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsAverage()"
  },
  {
    "label": "SetAsMaximim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsMaximim()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize(const uint32 InFrameStartIndex, const uint32 InFrameEndIndex)"
  }
]