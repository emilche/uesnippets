[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / AABB . h \" # include \" Chaos / Core . h \" # include \" ChaosArchive . h \" # include \" Math / VectorRegister . h \" # include \" Math / UnrealMathVectorConstants . h \" # include \" Chaos / VectorUtility . h \" namespace Chaos { class)",
    "insertText": "alignas(32)"
  },
  {
    "label": "FAABBVectorizedDouble()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAABBVectorizedDouble()"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (Min = GlobalVectorConstants::DoubleBigNumber ; Max =)",
    "insertText": "VectorNegate(GlobalVectorConstants::DoubleBigNumber)"
  },
  {
    "label": "FAABBVectorizedDouble()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAABBVectorizedDouble(const VectorRegister4Double& InMin, const VectorRegister4Double& InMax) : Min(InMin) , Max(InMax)"
  },
  {
    "label": "FAABBVectorizedDouble()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FAABBVectorizedDouble(const TAABB<T, 3>& AABB)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (Min =)",
    "insertText": "MakeVectorRegisterDouble(AABB.Min().X, AABB.Min().Y, AABB.Min().Z, 0.0)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "MakeVectorRegisterDouble(AABB.Max().X, AABB.Max().Y, AABB.Max().Z, 0.0)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} const VectorRegister4Double&)",
    "insertText": "GetMin()"
  },
  {
    "label": "SetMax()",
    "kind": "Method",
    "detail": "Function (Min = InMin ; } void)",
    "insertText": "SetMax(const VectorRegister4Double& InMax)"
  },
  {
    "label": "RaycastFast()",
    "kind": "Method",
    "detail": "Function (Max = InMax ; } bool)",
    "insertText": "RaycastFast(const VectorRegister4Double& StartPoint, const VectorRegister4Double& InvDir, const VectorRegister4Double& Parallel, const VectorRegister4Double& Length, VectorRegister4Double& LatestStartTime)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double StarToMinGTZero =)",
    "insertText": "VectorCompareGT(Min, StartPoint)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double ZeroGTStarToMax =)",
    "insertText": "VectorCompareGT(StartPoint, Max)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double IsFalse =)",
    "insertText": "VectorBitwiseAnd(VectorBitwiseOr(StarToMinGTZero, ZeroGTStarToMax), Parallel)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double StartToMax =)",
    "insertText": "VectorSubtract(Max, StartPoint)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double StartToMinInvDir =)",
    "insertText": "VectorMultiply(StartToMin, InvDir)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double StartToMaxInvDir =)",
    "insertText": "VectorMultiply(StartToMax, InvDir)"
  },
  {
    "label": "VectorBitwiseNotAnd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double Time1 =)",
    "insertText": "VectorBitwiseNotAnd(Parallel, StartToMinInvDir)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double Time2 =)",
    "insertText": "VectorSelect(Parallel, Length, StartToMaxInvDir)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double SortedTime1 =)",
    "insertText": "VectorMin(Time1, Time2)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double SortedTime2 =)",
    "insertText": "VectorMax(Time1, Time2)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (LatestStartTime =)",
    "insertText": "VectorMax(SortedTime1, VectorSwizzle(SortedTime1, 1, 2, 0, 3))"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (LatestStartTime =)",
    "insertText": "VectorMax(LatestStartTime, VectorSwizzle(SortedTime1, 2, 0, 1, 3))"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (LatestStartTime =)",
    "insertText": "VectorMax(LatestStartTime, VectorZero())"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double EarliestEndTime =)",
    "insertText": "VectorMin(SortedTime2, VectorSwizzle(SortedTime2, 1, 2, 0, 3))"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (EarliestEndTime =)",
    "insertText": "VectorMin(EarliestEndTime, VectorSwizzle(SortedTime2, 2, 0, 1, 3))"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (EarliestEndTime =)",
    "insertText": "VectorMin(EarliestEndTime, Length)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (IsFalse =)",
    "insertText": "VectorCompareGT(LatestStartTime, EarliestEndTime)"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Intersects(const FAABBVectorizedDouble& Other)"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double IsFalse =)",
    "insertText": "VectorBitwiseOr(VectorCompareGT(Min, Other.GetMax()), VectorCompareGT(Other.GetMin(), Max))"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (} FAABBVectorizedDouble&)",
    "insertText": "Thicken(const VectorRegister4Double& Thickness)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (Min =)",
    "insertText": "VectorSubtract(Min, Thickness)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "VectorAdd(Max, Thickness)"
  }
]