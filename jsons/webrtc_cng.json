[
  {
    "label": "ComfortNoiseDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComfortNoiseDecoder"
  },
  {
    "label": "ComfortNoiseEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComfortNoiseEncoder"
  },
  {
    "label": "ComfortNoiseDecoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_CNG_WEBRTC_CNG_H_ # define MODULES_AUDIO_CODING_CODECS_CNG_WEBRTC_CNG_H_ # include<stdint . h> # include<cstddef> # include \" api / array_view . h \" # include \" rtc_base / buffer . h \" # define WEBRTC_CNG_MAX_LPC_ORDER 1 2 namespace webrtc { class ComfortNoiseDecoder { public :)",
    "insertText": "ComfortNoiseDecoder()"
  },
  {
    "label": "ComfortNoiseDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComfortNoiseDecoder(const ComfortNoiseDecoder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ComfortNoiseDecoder&)",
    "insertText": "operator(const ComfortNoiseDecoder&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateSid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSid(rtc::ArrayView<const uint8_t> sid)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Generate(rtc::ArrayView<int16_t> out_data, bool new_period)"
  },
  {
    "label": "ComfortNoiseEncoder()",
    "kind": "Method",
    "detail": "Function (private : uint32_t dec_seed_ ; int32_t dec_target_energy_ ; int32_t dec_used_energy_ ; int16_t dec_target_reflCoefs_ [ WEBRTC_CNG_MAX_LPC_ORDER + 1 ] ; int16_t dec_used_reflCoefs_ [ WEBRTC_CNG_MAX_LPC_ORDER + 1 ] ; int16_t dec_filtstate_ [ WEBRTC_CNG_MAX_LPC_ORDER + 1 ] ; int16_t dec_filtstateLow_ [ WEBRTC_CNG_MAX_LPC_ORDER + 1 ] ; uint16_t dec_order_ ; int16_t dec_target_scale_factor_ ; int16_t dec_used_scale_factor_ ; } ; class ComfortNoiseEncoder { public :)",
    "insertText": "ComfortNoiseEncoder(int fs, int interval, int quality)"
  },
  {
    "label": "ComfortNoiseEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ComfortNoiseEncoder()"
  },
  {
    "label": "ComfortNoiseEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComfortNoiseEncoder(const ComfortNoiseEncoder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ComfortNoiseEncoder&)",
    "insertText": "operator(const ComfortNoiseEncoder&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int fs, int interval, int quality)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Encode(rtc::ArrayView<const int16_t> speech, bool force_sid, rtc::Buffer* output)"
  }
]