[
  {
    "label": "FDeformableXPBDWeakConstraintParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeformableXPBDWeakConstraintParams"
  },
  {
    "label": "FXPBDWeakConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDWeakConstraints"
  },
  {
    "label": "FXPBDWeakConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / MPMTransfer . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Misc / FileHelper . h \" # include \" HAL / PlatformFileManager . h \" # include \" HAL / IConsoleManager . h \" # include \" Misc / Paths . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / DebugDrawQueue . h \" namespace Chaos::Softs { struct FDeformableXPBDWeakConstraintParams { float DebugLineWidth = 5 . f ; float DebugParticleWidth = 2 0 . f ; bool bVisualizeBindings = false ; } ; using Chaos::TVec3 ; template<T,ParticleType> class FXPBDWeakConstraints { public :)",
    "insertText": "FXPBDWeakConstraints(const ParticleType& InParticles, const TArray<TArray<int32>>& InIndices, const TArray<TArray<T>>& InWeights, const TArray<T>& InStiffness ) : Stiffness(InStiffness), Indices(InIndices), Weights(InWeights)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (SecondIndices .)",
    "insertText": "SetNum(0)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaArray .)",
    "insertText": "Init((T)0., Indices.Num() * 3)"
  },
  {
    "label": "FXPBDWeakConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDWeakConstraints(const ParticleType& InParticles, const TArray<TArray<int32>>& InIndices, const TArray<TArray<T>>& InWeights, const TArray<T>& InStiffness, const TArray<TArray<int32>>& InSecondIndices, const TArray<TArray<T>>& InSecondWeights, const FDeformableXPBDWeakConstraintParams& InParams ) : Indices(InIndices), Weights(InWeights), SecondIndices(InSecondIndices), SecondWeights(InSecondWeights), Stiffness(InStiffness), DebugDrawParams(InParams)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (TSet<int32> IndicesSet = TSet<)",
    "insertText": "int32(Indices[i])"
  },
  {
    "label": "FXPBDWeakConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDWeakConstraints()"
  },
  {
    "label": "ApplyInParallel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInParallel(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDWeakConstraintApply)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ConstraintsPerColor[Color].Num(), [&](const int32 Index) { const int32 ConstraintIndex = ConstraintsPerColor[Color][Index]; ApplySingleConstraintWithoutSelfTarget(Particles, Dt, ConstraintIndex); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 Color = 0; Color < ConstraintsPerColor.Num(); Color++)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ConstraintsPerColor[Color].Num(), [&](const int32 Index) { const int32 ConstraintIndex = ConstraintsPerColor[Color][Index]; ApplySingleConstraintWithSelfTarget(Particles, Dt, ConstraintIndex); })"
  },
  {
    "label": "GetIndices()",
    "kind": "Method",
    "detail": "Function (} } } } const TArray<TArray<int32>>&)",
    "insertText": "GetIndices()"
  },
  {
    "label": "Lambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambdas(T)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DebugDrawParams.bVisualizeBindings)"
  },
  {
    "label": "VisualizeAllBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizeAllBindings(InParticles, Dt)"
  },
  {
    "label": "UpdateTargets()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateTargets(TArray<TVector<T, 3>>&& InTargets)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Constraints =)",
    "insertText": "MoveTemp(InTargets)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InitColor(const ParticleType& Particles)"
  },
  {
    "label": "ComputeWeakConstraintsColoring()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWeakConstraintsColoring(Indices, SecondIndices, Particles, ConstraintsPerColor)"
  },
  {
    "label": "ApplySingleConstraintWithoutSelfTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplySingleConstraintWithoutSelfTarget(ParticleType& Particles, const T Dt, const int32 ConstraintIndex, const T Tol = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AlphaTilde =)",
    "insertText": "T(0)"
  },
  {
    "label": "SpringEdge()",
    "kind": "Method",
    "detail": "Function (} TVec3<T>)",
    "insertText": "SpringEdge((T)0.)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (SpringEdge [ alpha ] + = Weights [ ConstraintIndex ] [ j ]* Particles .)",
    "insertText": "P(Indices[ConstraintIndex][j])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } SpringEdge - = Constraints [ ConstraintIndex ] ; T Denom = AlphaTilde ;)",
    "insertText": "for(int32 j = 0; j < Indices[ConstraintIndex].Num(); j++)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = Weights [ ConstraintIndex ] [ j ]* Weights [ ConstraintIndex ] [ j ]* Particles .)",
    "insertText": "InvM(Indices[ConstraintIndex][j])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Beta = 0; Beta < 3; Beta++)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(Indices[ConstraintIndex][j])[Beta] += DLambda * Weights[ConstraintIndex][j] * Particles.InvM(Indices[ConstraintIndex][j])"
  },
  {
    "label": "ApplySingleConstraintWithSelfTarget()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ApplySingleConstraintWithSelfTarget(ParticleType& Particles, const T Dt, const int32 ConstraintIndex, const T Tol = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T AlphaTilde =)",
    "insertText": "T(2) / (Stiffness[ConstraintIndex] * Dt * Dt)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 j = 0; j < SecondIndices[ConstraintIndex].Num(); j++)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (SpringEdge - = SecondWeights [ ConstraintIndex ] [ j ]* Particles .)",
    "insertText": "P(SecondIndices[ConstraintIndex][j])"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = SecondWeights [ ConstraintIndex ] [ j ]* SecondWeights [ ConstraintIndex ] [ j ]* Particles .)",
    "insertText": "InvM(SecondIndices[ConstraintIndex][j])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(SecondIndices[ConstraintIndex][j])[Beta] -= DLambda * SecondWeights[ConstraintIndex][j] * Particles.InvM(SecondIndices[ConstraintIndex][j])"
  },
  {
    "label": "VisualizeAllBindings()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "VisualizeAllBindings(const FSolverParticles& InParticles, const T Dt)"
  },
  {
    "label": "DoubleVert()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR auto)",
    "insertText": "DoubleVert(Chaos::TVec3<T> V)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "for(int32 i = 0; i < Indices.Num(); i++)"
  },
  {
    "label": "SourcePos()",
    "kind": "Method",
    "detail": "Function (Chaos::TVec3<T>)",
    "insertText": "SourcePos((T)0.), TargetPos((T)0.)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (SourcePos + = Weights [ i ] [ j ]* InParticles .)",
    "insertText": "P(Indices[i][j])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 j = 0; j < SecondIndices[i].Num(); j++)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (TargetPos + = SecondWeights [ i ] [ j ]* InParticles .)",
    "insertText": "P(SecondIndices[i][j])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} float ParticleThickness = DebugDrawParams . DebugParticleWidth ; float LineThickness = DebugDrawParams . DebugLineWidth ;)",
    "insertText": "if(Indices[i].Num() == 1)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(DoubleVert(SourcePos), FColor::Red, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(DoubleVert(InParticles.P(SecondIndices[i][j])), FColor::Green, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugLine(DoubleVert(InParticles.P(SecondIndices[i][j])), DoubleVert(InParticles.P(SecondIndices[i][(j+1) % SecondIndices[i].Num()])), FColor::Green, false, Dt, 0, LineThickness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SecondIndices[i].Num() == 1)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(DoubleVert(TargetPos), FColor::Red, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(DoubleVert(InParticles.P(Indices[i][j])), FColor::Green, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugLine(DoubleVert(InParticles.P(Indices[i][j])), DoubleVert(InParticles.P(Indices[i][(j + 1) % SecondIndices[i].Num()])), FColor::Green, false, Dt, 0, LineThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} } Chaos::)",
    "insertText": "GetInstance().DrawDebugLine(DoubleVert(SourcePos), DoubleVert(TargetPos), FColor::Yellow, false, Dt, 0, LineThickness)"
  }
]