[
  {
    "label": "ParticlePairBroadPhaseFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Collision / CollisionConstraintFlags . h \" # include \" Chaos / Collision / CollisionFilterBits . h \" # include \" Chaos / CollisionFilterData . h \" # include \" Chaos / GeometryParticles . h \" # include \" Chaos / ImplicitObjectType . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { typedef uint8 FMaskFilter ; bool)",
    "insertText": "ParticlePairBroadPhaseFilter(const FGeometryParticleHandle* Particle1, const FGeometryParticleHandle* Particle2, const FIgnoreCollisionManager* IgnoreCollisionManager)"
  },
  {
    "label": "IsKinematic()",
    "kind": "Method",
    "detail": "Function (bIsKinematic1 = Rigid1 ->)",
    "insertText": "IsKinematic()"
  },
  {
    "label": "UseIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (bUseIgnoreCollisionManager1 = Rigid1 ->)",
    "insertText": "UseIgnoreCollisionManager()"
  },
  {
    "label": "Disabled()",
    "kind": "Method",
    "detail": "Function (bDisabled1 = Rigid1 ->)",
    "insertText": "Disabled()"
  },
  {
    "label": "CollisionGroup()",
    "kind": "Method",
    "detail": "Function (CollisionGroup1 = Rigid1 ->)",
    "insertText": "CollisionGroup()"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (} bool bIsKinematic2 = true ; bool bUseIgnoreCollisionManager2 = false ; bool bDisabled2 = false ; int32 CollisionGroup2 = 0 ; const FPBDRigidParticleHandle* Rigid2 = Particle2 ->)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDisabled1 || bDisabled2)"
  },
  {
    "label": "DoCollide()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoCollide(EImplicitObjectType ImplicitType, const FPerShapeData* Shape)"
  },
  {
    "label": "GetChaosCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (FMaskFilter Filter0Mask,Filter1Mask ; const uint32 Filter0Channel =)",
    "insertText": "GetChaosCollisionChannelAndExtraFilter(Shape0->GetSimData().Word3, Filter0Mask)"
  },
  {
    "label": "GetChaosCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (const uint32 Filter1Channel =)",
    "insertText": "GetChaosCollisionChannelAndExtraFilter(Shape1->GetSimData().Word3, Filter1Mask)"
  },
  {
    "label": "Filter1Bit()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Filter1Bit(Filter1Channel)"
  },
  {
    "label": "Filter0Bit()",
    "kind": "Method",
    "detail": "Function (uint32 const)",
    "insertText": "Filter0Bit(Filter0Channel)"
  },
  {
    "label": "ShapePairNarrowPhaseFilter()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "ShapePairNarrowPhaseFilter(EImplicitObjectType Implicit0Type, const FPerShapeData* Shape0, EImplicitObjectType Implicit1Type, const FPerShapeData* Shape1)"
  }
]