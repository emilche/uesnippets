[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "SFbxSceneMaterialsListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFbxSceneMaterialsListView"
  },
  {
    "label": "SFbxSceneMaterialsListView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Factories / FbxSceneImportFactory . h \" # include \" Widgets / Views / SListView . h \" struct FAssetData ; typedef TSharedPtr<FFbxMaterialInfo> FbxMaterialInfoPtr ; typedef TSharedPtr<FFbxTextureInfo> FbxTextureInfoPtr ; typedef TArray<FbxTextureInfoPtr> FbxTextureInfoArray ; class SFbxSceneMaterialsListView : public SListView<FbxMaterialInfoPtr> { public : ~)",
    "insertText": "SFbxSceneMaterialsListView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFbxSceneMaterialsListView) : _SceneInfo(nullptr) , _SceneInfoOriginal(nullptr) , _GlobalImportSettings(nullptr) , _TexturesArray(nullptr) , _FullPath(TEXT(\"\")) , _IsReimport(false) , _CreateContentFolderHierarchy(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FFbxSceneInfo>, SceneInfo) SLATE_ARGUMENT(TSharedPtr<FFbxSceneInfo>, SceneInfoOriginal) SLATE_ARGUMENT(UnFbx::FBXImportOptions*, GlobalImportSettings) SLATE_ARGUMENT(FbxTextureInfoArray *, TexturesArray) SLATE_ARGUMENT(FString, FullPath) SLATE_ARGUMENT(bool, IsReimport) SLATE_ARGUMENT(bool, CreateContentFolderHierarchy) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnGenerateRowFbxSceneListView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowFbxSceneListView(FbxMaterialInfoPtr Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnToggleSelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSelectAll(ECheckBoxState CheckType)"
  },
  {
    "label": "SetCreateContentFolderHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateContentFolderHierarchy(bool CreateFolder)"
  },
  {
    "label": "UpdateMaterialBasePath()",
    "kind": "Method",
    "detail": "Function (CreateContentFolderHierarchy = CreateFolder ; } void)",
    "insertText": "UpdateMaterialBasePath()"
  },
  {
    "label": "OnOpenContextMenu()",
    "kind": "Method",
    "detail": "Function (protected : FString FullPath ; bool IsReimport ; bool CreateContentFolderHierarchy ; TSharedPtr<FFbxSceneInfo> SceneInfo ; TSharedPtr<FFbxSceneInfo> SceneInfoOriginal ; UnFbx::FBXImportOptions* GlobalImportSettings ; TArray<FbxMaterialInfoPtr> MaterialsArray ; FbxTextureInfoArray* TexturesArray ; TSharedPtr<SWidget>)",
    "insertText": "OnOpenContextMenu()"
  },
  {
    "label": "AddSelectionToImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectionToImport()"
  },
  {
    "label": "RemoveSelectionFromImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectionFromImport()"
  },
  {
    "label": "SetSelectionImportState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionImportState(bool MarkForImport)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(FbxMaterialInfoPtr Item, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "AssignMaterialToExisting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignMaterialToExisting()"
  },
  {
    "label": "AssignMaterialAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignMaterialAssetData(const FAssetData& AssetData)"
  },
  {
    "label": "ResetAssignMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAssignMaterial()"
  },
  {
    "label": "GetMaterialsFromHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialsFromHierarchy(TArray<FbxMaterialInfoPtr> &OutMaterials, TSharedPtr<FFbxSceneInfo> SceneInfoSource, bool bFillPathInformation)"
  },
  {
    "label": "FindMatchAndFillOverrideInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindMatchAndFillOverrideInformation(TArray<FbxMaterialInfoPtr> &OldMaterials, TArray<FbxMaterialInfoPtr> &NewMaterials)"
  }
]