[
  {
    "label": "FPerParticleExternalForces",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleExternalForces"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticleExternalForces()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PerParticleRule . h \" namespace Chaos { class FPerParticleExternalForces : public FPerParticleRule { public :)",
    "insertText": "FPerParticleExternalForces()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& HandleIn, const FReal Dt)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_PARTICLEHANDLE_TODO Handle ->)",
    "insertText": "F() += Handle->ExternalForce()"
  },
  {
    "label": "Torque()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "Torque() += Handle->ExternalTorque()"
  }
]