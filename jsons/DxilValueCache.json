[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "DxilValueCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilValueCache"
  },
  {
    "label": "WeakValueMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WeakValueMap"
  },
  {
    "label": "ValueVH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueVH"
  },
  {
    "label": "ValueEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueEntry"
  },
  {
    "label": "llvm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "llvm"
  },
  {
    "label": "ValueVH()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_DXILVALUECACHE_H # define LLVM_ANALYSIS_DXILVALUECACHE_H # include \" llvm / IR / ValueMap . h \" # include \" llvm / Pass . h \" namespace llvm { class Module ; class DominatorTree ; class Constant ; class ConstantInt ; class PHINode ; struct DxilValueCache : public ImmutablePass { char ID ; struct WeakValueMap { struct ValueVH : public CallbackVH {)",
    "insertText": "ValueVH(Value *V) : CallbackVH(V)"
  },
  {
    "label": "allUsesReplacedWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allUsesReplacedWith(Value *)"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValPtr(nullptr)"
  },
  {
    "label": "ValueEntry()",
    "kind": "Method",
    "detail": "Function (} } ; struct ValueEntry { WeakVH Value ; ValueVH Self ;)",
    "insertText": "ValueEntry() : Value(nullptr), Self(nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(llvm::Value *Key, llvm::Value *V)"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (Self = Key ; Value = V ; } bool)",
    "insertText": "IsStale()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Value *Key, Value *V)"
  },
  {
    "label": "Seen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seen(Value *v)"
  },
  {
    "label": "SetSentinel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSentinel(Value *V)"
  },
  {
    "label": "ResetUnknowns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetUnknowns()"
  },
  {
    "label": "ResetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAll()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "GetSentinel()",
    "kind": "Method",
    "detail": "Function (private : Value*)",
    "insertText": "GetSentinel(LLVMContext &Ctx)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PHINode> Sentinel ; } ; private : WeakValueMap Map ;)",
    "insertText": "bool(*ShouldSkipCallback)(Value *V)"
  },
  {
    "label": "MarkUnreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkUnreachable(BasicBlock *BB)"
  },
  {
    "label": "IsUnreachable_()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnreachable_(BasicBlock *BB)"
  },
  {
    "label": "MayBranchTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MayBranchTo(BasicBlock *A, BasicBlock *B)"
  },
  {
    "label": "TryGetCachedValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "TryGetCachedValue(Value *V)"
  },
  {
    "label": "ProcessValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ProcessValue(Value *V, DominatorTree *DT)"
  },
  {
    "label": "ProcessAndSimplify_PHI()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ProcessAndSimplify_PHI(Instruction *I, DominatorTree *DT)"
  },
  {
    "label": "ProcessAndSimplify_Br()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ProcessAndSimplify_Br(Instruction *I, DominatorTree *DT)"
  },
  {
    "label": "ProcessAndSimplify_Switch()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ProcessAndSimplify_Switch(Instruction *I, DominatorTree *DT)"
  },
  {
    "label": "ProcessAndSimplify_Load()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ProcessAndSimplify_Load(Instruction *LI, DominatorTree *DT)"
  },
  {
    "label": "SimplifyAndCacheResult()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "SimplifyAndCacheResult(Instruction *I, DominatorTree *DT)"
  },
  {
    "label": "getPassName()",
    "kind": "Method",
    "detail": "Function (public : StringRef)",
    "insertText": "getPassName()"
  },
  {
    "label": "DxilValueCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilValueCache()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "GetValue(Value *V, DominatorTree *DT = nullptr)"
  },
  {
    "label": "GetConstValue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "GetConstValue(Value *V, DominatorTree *DT = nullptr)"
  },
  {
    "label": "GetConstInt()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "GetConstInt(Value *V, DominatorTree *DT = nullptr)"
  },
  {
    "label": "IsUnreachable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnreachable(BasicBlock *BB, DominatorTree *DT = nullptr)"
  },
  {
    "label": "SetShouldSkipCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldSkipCallback(bool (*Callback)(Value *V))"
  },
  {
    "label": "initializeDxilValueCachePass()",
    "kind": "Method",
    "detail": "Function (ShouldSkipCallback = Callback ; } ; } ; void)",
    "insertText": "initializeDxilValueCachePass(class llvm::PassRegistry &)"
  },
  {
    "label": "createDxilValueCachePass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "createDxilValueCachePass()"
  }
]