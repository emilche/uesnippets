[
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInterpControlPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterpControlPoint"
  },
  {
    "label": "UInterpToMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterpToMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # include \" Engine / HitResult . h \" # endif # include \" GameFramework / MovementComponent . h \" # include \" UObject / ObjectMacros . h \" # include \" InterpToMovementComponent . generated . h \" struct FHitResult ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (OneShot,OneShot_Reverse,Loop_Reset,PingPong } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Location, meta=(MakeEditWidget=true))"
  },
  {
    "label": "FInterpControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInterpControlPoint()"
  },
  {
    "label": "FInterpControlPoint()",
    "kind": "Method",
    "detail": "Function (PositionControlPoint = FVector::ZeroVector ; bPositionIsRelative = true ; })",
    "insertText": "FInterpControlPoint(FVector InPosition, bool bIsRelative)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (PositionControlPoint = InPosition ; bPositionIsRelative = bIsRelative ; } float StartTime ; float DistanceToNext ; float Percentage ; } ;)",
    "insertText": "UCLASS(ClassGroup=Movement, meta=(BlueprintSpawnableComponent),HideCategories=Velocity, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( FOnInterpToReverseDelegate, const FHitResult&, ImpactResult, float, Time)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnInterpToStopDelegate, const FHitResult&, ImpactResult, float, Time)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnInterpToWaitBeginDelegate , const FHitResult&, ImpactResult, float, Time)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnInterpToWaitEndDelegate , const FHitResult&, ImpactResult, float, Time)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnInterpToResetDelegate , const FHitResult&, ImpactResult, float, Time)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "StopMovementImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovementImmediately()"
  },
  {
    "label": "CheckStillInWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckStillInWorld()"
  },
  {
    "label": "HasStoppedSimulation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStoppedSimulation()"
  },
  {
    "label": "ShouldUseSubStepping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseSubStepping()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "HandleHitWall()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "HandleHitWall(const FHitResult& Hit, float TimeTick, const FVector& MoveDelta)"
  },
  {
    "label": "HandleImpact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleImpact(const FHitResult& Hit, float TimeSlice=0.f, const FVector& MoveDelta = FVector::ZeroVector)"
  },
  {
    "label": "ReverseDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseDirection(const FHitResult& Hit, float Time, bool InBroadcastEvent)"
  },
  {
    "label": "ComputeMoveDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeMoveDelta(float Time)"
  },
  {
    "label": "UpdateControlPoints()",
    "kind": "Method",
    "detail": "Function (float CurrentTime ; float TimeMultiplier ; float CurrentDirection ; bool bIsWaiting ; bool bStopped ; bool bContainsActorControlPoints ; const float MIN_TICK_TIME ; void)",
    "insertText": "UpdateControlPoints(bool InForceUpdate)"
  },
  {
    "label": "CalculateNewTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateNewTime(float TimeNow, float Delta, FHitResult& HitResult, bool InBroadcastEvent, bool& OutStopped, float& OutTimeRemainder)"
  }
]