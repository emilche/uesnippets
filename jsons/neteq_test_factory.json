[
  {
    "label": "SsrcSwitchDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SsrcSwitchDetector"
  },
  {
    "label": "NetEqStatsGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqStatsGetter"
  },
  {
    "label": "NetEqStatsPlotter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqStatsPlotter"
  },
  {
    "label": "NetEqTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqTestFactory"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "NetEqTestFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_TEST_FACTORY_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_TEST_FACTORY_H_ # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" modules / audio_coding / neteq / tools / neteq_test . h \" # include \" test / field_trial . h \" namespace webrtc { namespace test { class SsrcSwitchDetector ; class NetEqStatsGetter ; class NetEqStatsPlotter ; class NetEqTestFactory { public :)",
    "insertText": "NetEqTestFactory()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config& other)"
  },
  {
    "label": "default_pcmu()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcmu()"
  },
  {
    "label": "default_pcma()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcma()"
  },
  {
    "label": "default_ilbc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_ilbc()"
  },
  {
    "label": "default_isac()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_isac()"
  },
  {
    "label": "default_isac_swb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_isac_swb()"
  },
  {
    "label": "default_opus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_opus()"
  },
  {
    "label": "default_pcm16b()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcm16b()"
  },
  {
    "label": "default_pcm16b_wb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcm16b_wb()"
  },
  {
    "label": "default_pcm16b_swb32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcm16b_swb32()"
  },
  {
    "label": "default_pcm16b_swb48()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_pcm16b_swb48()"
  },
  {
    "label": "default_g722()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_g722()"
  },
  {
    "label": "default_avt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_avt()"
  },
  {
    "label": "default_avt_16()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_avt_16()"
  },
  {
    "label": "default_avt_32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_avt_32()"
  },
  {
    "label": "default_avt_48()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_avt_48()"
  },
  {
    "label": "default_red()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_red()"
  },
  {
    "label": "default_cn_nb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_cn_nb()"
  },
  {
    "label": "default_cn_wb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_cn_wb()"
  },
  {
    "label": "default_cn_swb32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_cn_swb32()"
  },
  {
    "label": "default_cn_swb48()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_cn_swb48()"
  },
  {
    "label": "default_audio_level()",
    "kind": "Method",
    "detail": "Function (std::string replacement_audio_file ; absl::optional<uint32_t> ssrc_filter ; int)",
    "insertText": "default_audio_level()"
  },
  {
    "label": "default_abs_send_time()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_abs_send_time()"
  },
  {
    "label": "default_transport_seq_no()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_transport_seq_no()"
  },
  {
    "label": "default_video_content_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_video_content_type()"
  },
  {
    "label": "default_video_timing()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_video_timing()"
  },
  {
    "label": "default_max_nr_packets_in_buffer()",
    "kind": "Method",
    "detail": "Function (bool matlabplot = false ; bool pythonplot = false ; bool concealment_events = false ; int)",
    "insertText": "default_max_nr_packets_in_buffer()"
  },
  {
    "label": "default_initial_dummy_packets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_initial_dummy_packets()"
  },
  {
    "label": "default_skip_get_audio_events()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "default_skip_get_audio_events()"
  },
  {
    "label": "InitializeTestFromFile()",
    "kind": "Method",
    "detail": "Function (bool enable_fast_accelerate = false ; bool textlog = false ; absl::optional<std::string> textlog_filename ; absl::optional<std::string> plot_scripts_basename ; absl::optional<std::string> output_audio_filename ; std::string field_trial_string ; } ; std::unique_ptr<NetEqTest>)",
    "insertText": "InitializeTestFromFile(absl::string_view input_filename, NetEqFactory* neteq_factory, const Config& config)"
  },
  {
    "label": "InitializeTestFromString()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NetEqTest>)",
    "insertText": "InitializeTestFromString(absl::string_view input_string, NetEqFactory* neteq_factory, const Config& config)"
  },
  {
    "label": "InitializeTest()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<NetEqTest>)",
    "insertText": "InitializeTest(std::unique_ptr<NetEqInput> input, NetEqFactory* neteq_factory, const Config& config)"
  }
]