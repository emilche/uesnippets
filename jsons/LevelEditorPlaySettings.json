[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "ELabelAnchorMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELabelAnchorMode"
  },
  {
    "label": "ELaunchModeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELaunchModeType"
  },
  {
    "label": "EPlayModeLocations",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayModeLocations"
  },
  {
    "label": "EPlayModeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayModeType"
  },
  {
    "label": "EPlayNetMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayNetMode"
  },
  {
    "label": "EPlayOnBuildMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayOnBuildMode"
  },
  {
    "label": "EPlayOnLaunchConfiguration",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayOnLaunchConfiguration"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPlayScreenResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlayScreenResolution"
  },
  {
    "label": "UCommonResolutionMenuContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCommonResolutionMenuContext"
  },
  {
    "label": "ULevelEditorPlaySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorPlaySettings"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UDeviceProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDeviceProfile"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Misc / App . h \" # include \" Settings / LevelEditorPlayNetworkEmulationSettings . h \" # include \" ToolMenuContext . h \" # include \" LevelEditorPlaySettings . generated . h \" class SWindow ; class UToolMenu ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (LabelAnchorMode_TopLeft)",
    "insertText": "UMETA(DisplayName=\"Top Left\"), LabelAnchorMode_TopCenter UMETA(DisplayName=\"Top Center\"), LabelAnchorMode_TopRight UMETA(DisplayName=\"Top Right\"), LabelAnchorMode_CenterLeft UMETA(DisplayName=\"Center Left\"), LabelAnchorMode_Centered UMETA(DisplayName=\"Centered\"), LabelAnchorMode_CenterRight UMETA(DisplayName=\"Center Right\"), LabelAnchorMode_BottomLeft UMETA(DisplayName=\"Bottom Left\"), LabelAnchorMode_BottomCenter UMETA(DisplayName=\"Bottom Center\"), LabelAnchorMode_BottomRight UMETA(DisplayName=\"Bottom Right\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PIE_Standalone)",
    "insertText": "UMETA(DisplayName=\"Play Standalone\"), PIE_ListenServer UMETA(DisplayName=\"Play As Listen Server\"), PIE_Client UMETA(DisplayName=\"Play As Client\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PlayOnBuild_Always)",
    "insertText": "UMETA(DisplayName=\"Always\"), PlayOnBuild_Never UMETA(DisplayName=\"Never\"), PlayOnBuild_Default UMETA(DisplayName=\"If project has code, or running a locally built editor\"), PlayOnBuild_IfEditorBuiltLocally UMETA(DisplayName=\"If running a locally built editor\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (LaunchConfig_Default)",
    "insertText": "UMETA(DisplayName = \"Same as Editor\"), LaunchConfig_Debug UMETA(DisplayName = \"Debug\"), LaunchConfig_Development UMETA(DisplayName = \"Development\"), LaunchConfig_Test UMETA(DisplayName = \"Test\"), LaunchConfig_Shipping UMETA(DisplayName = \"Shipping\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (NoPak)",
    "insertText": "UMETA(DisplayName=\"Use loose files\"), PakNoCompress UMETA(DisplayName=\"Use pak files without compression\"), PakCompress UMETA(DisplayName=\"Use compressed pak files\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(config)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_DELEGATE_RetVal_OneParam(FUIAction, FGetUIActionFromLevelPlaySettings, const FPlayScreenResolution&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FGetUIActionFromLevelPlaySettings GetUIActionFromLevelPlaySettings ; } ;)",
    "insertText": "UCLASS(config=EditorPerProjectUserSettings, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(globalconfig)"
  },
  {
    "label": "PushDebugDrawingSettings()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushDebugDrawingSettings()"
  },
  {
    "label": "ShowServerDebugDrawingByDefault()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShowServerDebugDrawingByDefault()"
  },
  {
    "label": "IsNetworkEmulationEnabled()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsNetworkEmulationEnabled()"
  },
  {
    "label": "SetPlayNetMode()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPlayNetMode(const EPlayNetMode InPlayNetMode)"
  },
  {
    "label": "IsPlayNetModeActive()",
    "kind": "Method",
    "detail": "Function (PlayNetMode = InPlayNetMode ; } bool)",
    "insertText": "IsPlayNetModeActive()"
  },
  {
    "label": "GetPlayNetModeVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetPlayNetModeVisibility()"
  },
  {
    "label": "SetRunUnderOneProcess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRunUnderOneProcess(const bool InRunUnderOneProcess)"
  },
  {
    "label": "IsRunUnderOneProcessActive()",
    "kind": "Method",
    "detail": "Function (RunUnderOneProcess = InRunUnderOneProcess ; } bool)",
    "insertText": "IsRunUnderOneProcessActive()"
  },
  {
    "label": "SetPlayNumberOfClients()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlayNumberOfClients(const int32 InPlayNumberOfClients)"
  },
  {
    "label": "IsPlayNumberOfClientsActive()",
    "kind": "Method",
    "detail": "Function (PlayNumberOfClients = InPlayNumberOfClients ; } bool)",
    "insertText": "IsPlayNumberOfClientsActive()"
  },
  {
    "label": "GetPrimaryPIEClientIndex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetPrimaryPIEClientIndex()"
  },
  {
    "label": "IsServerPortActive()",
    "kind": "Method",
    "detail": "Function (ServerPort = InServerPort ; } bool)",
    "insertText": "IsServerPortActive()"
  },
  {
    "label": "GetServerPort()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetServerPort(uint16 &OutServerPort)"
  },
  {
    "label": "IsRouteGamepadToSecondWindowActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRouteGamepadToSecondWindowActive()"
  },
  {
    "label": "GetRouteGamepadToSecondWindowVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetRouteGamepadToSecondWindowVisibility()"
  },
  {
    "label": "GetNetworkEmulationVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetNetworkEmulationVisibility()"
  },
  {
    "label": "IsServerMapNameOverrideActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsServerMapNameOverrideActive()"
  },
  {
    "label": "GetServerMapNameOverrideVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetServerMapNameOverrideVisibility()"
  },
  {
    "label": "GetAdditionalServerGameOptions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAdditionalServerGameOptions(FString &OutAdditionalServerGameOptions)"
  },
  {
    "label": "IsAdditionalServerGameOptionsActive()",
    "kind": "Method",
    "detail": "Function (OutAdditionalServerGameOptions = AdditionalServerGameOptions ; return)",
    "insertText": "IsAdditionalServerGameOptionsActive()"
  },
  {
    "label": "SetClientWindowSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClientWindowSize(const FIntPoint InClientWindowSize)"
  },
  {
    "label": "IsClientWindowSizeActive()",
    "kind": "Method",
    "detail": "Function (ClientWindowWidth = InClientWindowSize . X ; ClientWindowHeight = InClientWindowSize . Y ; } bool)",
    "insertText": "IsClientWindowSizeActive()"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (OutClientWindowSize =)",
    "insertText": "FIntPoint(ClientWindowWidth, ClientWindowHeight)"
  },
  {
    "label": "GetClientWindowSizeVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetClientWindowSizeVisibility()"
  },
  {
    "label": "IsCreateAudioDeviceForEveryPlayer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCreateAudioDeviceForEveryPlayer()"
  },
  {
    "label": "IsHMDForPrimaryProcessOnly()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return bOneHeadsetEachProcess_DEPRECATED ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "IsHMDForPrimaryProcessOnly()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "UpdateCustomSafeZones()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateCustomSafeZones()"
  },
  {
    "label": "CalculateCustomUnsafeZones()",
    "kind": "Method",
    "detail": "Function (# endif FMargin)",
    "insertText": "CalculateCustomUnsafeZones(TArray<FVector2D>& CustomSafeZoneStarts, TArray<FVector2D>& CustomSafeZoneDimensions, FString& DeviceType, FVector2D PreviewSize)"
  },
  {
    "label": "FlipCustomUnsafeZones()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "FlipCustomUnsafeZones(TArray<FVector2D>& CustomSafeZoneStarts, TArray<FVector2D>& CustomSafeZoneDimensions, FString& DeviceType, FVector2D PreviewSize)"
  },
  {
    "label": "RescaleForMobilePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RescaleForMobilePreview(const class UDeviceProfile* DeviceProfile, int32 &PreviewWidth, int32 &PreviewHeight, float &ScaleFactor)"
  },
  {
    "label": "RegisterCommonResolutionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCommonResolutionsMenu()"
  },
  {
    "label": "GetCommonResolutionsMenuName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCommonResolutionsMenuName()"
  },
  {
    "label": "AddScreenResolutionSection()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddScreenResolutionSection(UToolMenu* InToolMenu, const TArray<FPlayScreenResolution>* Resolutions, const FString SectionName)"
  }
]