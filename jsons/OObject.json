[
  {
    "label": "OCompoundProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OCompoundProperty"
  },
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_OObject_h # define Alembic_Abc_OObject_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / OArchive . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class OCompoundProperty ; class ALEMBIC_EXPORT OObject : public Base { public : typedef OObject this_type ; typedef OObject operator_bool_base_type ;)",
    "insertText": "OObject()"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OObject(OObject iParentObject, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OObject(AbcA::ObjectWriterPtr iPtr, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument() ) : m_object( iPtr)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( GetErrorHandlerPolicy( iPtr, iArg0, iArg1, iArg2 ))"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OObject(AbcA::ObjectWriterPtr iPtr, WrapExistingFlag , const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument() ) : m_object( iPtr)"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OObject(OArchive & iArchive, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArchive, iArg0, iArg1, iArg2)"
  },
  {
    "label": "OObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OObject(OArchive & iArchive, TopFlag , const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::ObjectHeader&)",
    "insertText": "getHeader()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "getFullName()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "getFullName()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (} const AbcA::MetaData&)",
    "insertText": "getMetaData()"
  },
  {
    "label": "getArchive()",
    "kind": "Method",
    "detail": "Function (} OArchive)",
    "insertText": "getArchive()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (OObject)",
    "insertText": "getParent()"
  },
  {
    "label": "getNumChildren()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumChildren()"
  },
  {
    "label": "getChildHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::ObjectHeader&)",
    "insertText": "getChildHeader(size_t i)"
  },
  {
    "label": "getChildHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::ObjectHeader*)",
    "insertText": "getChildHeader(const std::string &iName)"
  },
  {
    "label": "getProperties()",
    "kind": "Method",
    "detail": "Function (OCompoundProperty)",
    "insertText": "getProperties()"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (OObject)",
    "insertText": "getChild(size_t iChildIndex)"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (OObject)",
    "insertText": "getChild(const std::string &iChildName)"
  },
  {
    "label": "addChildInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addChildInstance(OObject iTarget, const std::string& iName)"
  },
  {
    "label": "getPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::ObjectWriterPtr)",
    "insertText": "getPtr()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_object .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(OArchive & iArchive, const Argument &iArg0, const Argument &iArg1, const Argument &iArg2)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(AbcA::ObjectWriterPtr iParentObject, const std::string &iName, ErrorHandler::Policy iParentPolicy, const Argument &iArg0, const Argument &iArg1, const Argument &iARg2)"
  }
]