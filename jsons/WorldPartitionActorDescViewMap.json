[
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "TActorDescViewMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorDescViewMap"
  },
  {
    "label": "FWorldPartitionStreamingGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionStreamingGenerator"
  },
  {
    "label": "Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Func"
  },
  {
    "label": "ClassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassType"
  },
  {
    "label": "ForEachActorDescView()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" OverrideVoidReturnInvoker . h \" # include \" WorldPartition / WorldPartitionActorDescView . h \" template<class Type> class TActorDescViewMap { class FWorldPartitionStreamingGenerator ; private : template<class Func> void)",
    "insertText": "ForEachActorDescView(Func InFunc)"
  },
  {
    "label": "Invoker()",
    "kind": "Method",
    "detail": "Function (TOverrideVoidReturnInvoker)",
    "insertText": "Invoker(true, InFunc)"
  },
  {
    "label": "TActorDescViewMap()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TActorDescViewMap()"
  },
  {
    "label": "TActorDescViewMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TActorDescViewMap(const TActorDescViewMap&)"
  },
  {
    "label": "TActorDescViewMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TActorDescViewMap(TActorDescViewMap&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TActorDescViewMap&)",
    "insertText": "operator(const TActorDescViewMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TActorDescViewMap&)",
    "insertText": "operator(TActorDescViewMap&&)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "Emplace(const FGuid& InActorGuid, const Type& InActorDescView)"
  },
  {
    "label": "NewActorDescView()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "NewActorDescView(Type*)ActorDescViewList.Emplace_GetRef(MakeUnique<Type>(InActorDescView)).Get()"
  },
  {
    "label": "GetActorNativeClass()",
    "kind": "Method",
    "detail": "Function (const UClass* NativeClass = NewActorDescView ->)",
    "insertText": "GetActorNativeClass()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (const FName NativeClassName = NativeClass ->)",
    "insertText": "GetFName()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ActorDescViewsByGuid .)",
    "insertText": "Emplace(InActorGuid, NewActorDescView)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorDescViewsByClass .)",
    "insertText": "Add(NativeClassName, NewActorDescView)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "FindByExactNativeClass()",
    "kind": "Method",
    "detail": "Function (} template<class ClassType> TArray<const Type*>)",
    "insertText": "FindByExactNativeClass()"
  },
  {
    "label": "FindByExactNativeClass()",
    "kind": "Method",
    "detail": "Function (} TArray<const Type*>)",
    "insertText": "FindByExactNativeClass(UClass* InExactNativeClass)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (TArray<const Type*> Result ; ActorDescViewsByClass .)",
    "insertText": "MultiFind(NativeClassName, Result)"
  }
]