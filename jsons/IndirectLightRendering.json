[
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" SceneTextureParameters . h \" # include \" ShaderParameterMacros . h \" # include \" Substrate / Substrate . h \" class FSkyLightSceneProxy ; namespace HybridIndirectLighting { int32 kInterleavingTileSize = 4 ; int32 kInterleavingBucketCount = kInterleavingTileSize* kInterleavingTileSize ; int32 kMaxRayPerPixel = 8 ; int32 kMaxTracingResolution = 8 1 9 2 ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FCommonParameters, ) SHADER_PARAMETER(FIntPoint, TracingViewportSize) SHADER_PARAMETER(FIntPoint, TracingViewportBufferSize) SHADER_PARAMETER(FVector2f, TracingViewportTexelSize) SHADER_PARAMETER(int32, DownscaleFactor) SHADER_PARAMETER(int32, RayCountPerPixel) SHADER_PARAMETER(FIntPoint, RayStoragePerPixelVector) SHADER_PARAMETER(int32, PixelRayIndexAbscissMask) SHADER_PARAMETER(int32, PixelRayIndexOrdinateShift) SHADER_PARAMETER_STRUCT_INCLUDE(FSceneTextureParameters, SceneTextures) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FSubstrateGlobalUniformParameters, Substrate) END_SHADER_PARAMETER_STRUCT() } BEGIN_SHADER_PARAMETER_STRUCT(FSkyDiffuseLightingParameters, ) SHADER_PARAMETER(FVector4f, OcclusionTintAndMinOcclusion) SHADER_PARAMETER(FVector3f, ContrastAndNormalizeMulAdd) SHADER_PARAMETER(float, ApplyBentNormalAO) SHADER_PARAMETER(float, InvSkySpecularOcclusionStrength) SHADER_PARAMETER(float, OcclusionExponent) SHADER_PARAMETER(float, OcclusionCombineMode) END_SHADER_PARAMETER_STRUCT() FSkyDiffuseLightingParameters GetSkyDiffuseLightingParameters(const FSkyLightSceneProxy* SkyLight, float DynamicBentNormalAO)"
  }
]