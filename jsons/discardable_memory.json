[
  {
    "label": "MemoryAllocatorDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryAllocatorDump"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DiscardableMemory()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_DISCARDABLE_MEMORY_H_ # define BASE_MEMORY_DISCARDABLE_MEMORY_H_ # include \" base / base_export . h \" # include \" build / build_config . h \" namespace base { namespace trace_event { class MemoryAllocatorDump ; class ProcessMemoryDump ; } class BASE_EXPORT DiscardableMemory { public :)",
    "insertText": "DiscardableMemory()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "data()"
  },
  {
    "label": "DiscardForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardForTesting()"
  },
  {
    "label": "data_as()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "data_as()"
  },
  {
    "label": "CreateMemoryAllocatorDump()",
    "kind": "Method",
    "detail": "Function (} trace_event::MemoryAllocatorDump*)",
    "insertText": "CreateMemoryAllocatorDump(const char* name, trace_event::ProcessMemoryDump* pmd)"
  },
  {
    "label": "GetDiscardableMemoryBacking()",
    "kind": "Method",
    "detail": "Function (} ; enum class DiscardableMemoryBacking { kSharedMemory,kMadvFree } ; BASE_EXPORT DiscardableMemoryBacking)",
    "insertText": "GetDiscardableMemoryBacking()"
  }
]