[
  {
    "label": "EShowFlagGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShowFlagGroup"
  },
  {
    "label": "EShowFlagInitMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShowFlagInitMode"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "EShowFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShowFlag"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TCustomShowFlag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomShowFlag"
  },
  {
    "label": "SetAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (off)",
    "insertText": "SetAmbientOcclusion(false)"
  },
  {
    "label": "SetIndirectLightingCache()",
    "kind": "Method",
    "detail": "Function (enabled)",
    "insertText": "SetIndirectLightingCache(false)"
  },
  {
    "label": "SetVirtualShadowMapPersistentData()",
    "kind": "Method",
    "detail": "Function (frame)",
    "insertText": "SetVirtualShadowMapPersistentData(false)"
  },
  {
    "label": "SetAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (off)",
    "insertText": "SetAmbientOcclusion(true)"
  },
  {
    "label": "SetIndirectLightingCache()",
    "kind": "Method",
    "detail": "Function (enabled)",
    "insertText": "SetIndirectLightingCache(true)"
  },
  {
    "label": "SetVirtualShadowMapPersistentData()",
    "kind": "Method",
    "detail": "Function (necessary)",
    "insertText": "SetVirtualShadowMapPersistentData(false)"
  },
  {
    "label": "SetSingleFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleFlag(uint32 Index, bool bSet)"
  },
  {
    "label": "IsForceFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForceFlagSet(uint32 Index)"
  },
  {
    "label": "SetFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFromString(const TCHAR* In)"
  },
  {
    "label": "FindIndexByName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindIndexByName(const TCHAR* Name, const TCHAR *CommaSeparatedNames = 0)"
  },
  {
    "label": "FindNameByIndex()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindNameByIndex(uint32 InIndex)"
  },
  {
    "label": "RegisterCustomShowFlag()",
    "kind": "Method",
    "detail": "Function (ECustomShowFlag)",
    "insertText": "RegisterCustomShowFlag(const TCHAR* Name, bool DefaultEnabled, EShowFlagGroup Group, FText DisplayName)"
  },
  {
    "label": "EngineOverrideCustomShowFlagsFromCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EngineOverrideCustomShowFlagsFromCVars()"
  },
  {
    "label": "InitCustomShowFlags()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "InitCustomShowFlags(InitMode)"
  },
  {
    "label": "SetStereoRendering()",
    "kind": "Method",
    "detail": "Function (use)",
    "insertText": "SetStereoRendering(false)"
  },
  {
    "label": "SetSnap()",
    "kind": "Method",
    "detail": "Function (ports)",
    "insertText": "SetSnap(false)"
  },
  {
    "label": "AddNameByIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNameByIndex(uint32 InIndex, FString& Out)"
  },
  {
    "label": "InitCustomShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCustomShowFlags(EShowFlagInitMode InitMode)"
  },
  {
    "label": "UpdateNewCustomShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNewCustomShowFlags()"
  },
  {
    "label": "FindCustomShowFlagDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindCustomShowFlagDisplayName(const FString& InName, FText& OutText)"
  },
  {
    "label": "IsRegisteredCustomShowFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegisteredCustomShowFlag(ECustomShowFlag Index)"
  },
  {
    "label": "GetCustomShowFlagName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCustomShowFlagName(ECustomShowFlag Index)"
  },
  {
    "label": "GetCustomShowFlagDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCustomShowFlagDisplayName(ECustomShowFlag Index)"
  },
  {
    "label": "GetCustomShowFlagGroup()",
    "kind": "Method",
    "detail": "Function (EShowFlagGroup)",
    "insertText": "GetCustomShowFlagGroup(ECustomShowFlag Index)"
  },
  {
    "label": "FindCustomShowFlagByName()",
    "kind": "Method",
    "detail": "Function (ECustomShowFlag)",
    "insertText": "FindCustomShowFlagByName(const FString& Name)"
  },
  {
    "label": "ApplyViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewMode(EViewModeIndex ViewModeIndex, bool bPerspective, FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "EngineShowFlagOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EngineShowFlagOverride(EShowFlagInitMode ShowFlagInitMode, EViewModeIndex ViewModeIndex, FEngineShowFlags& EngineShowFlags, bool bCanDisableTonemapper)"
  },
  {
    "label": "EngineShowFlagOrthographicOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EngineShowFlagOrthographicOverride(bool bIsPerspective, FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "FindViewMode()",
    "kind": "Method",
    "detail": "Function (EViewModeIndex)",
    "insertText": "FindViewMode(const FEngineShowFlags& EngineShowFlags)"
  }
]