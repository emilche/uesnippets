[
  {
    "label": "AnalysisManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisManager"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "PassConcept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassConcept"
  },
  {
    "label": "PassRunAcceptsAnalysisManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRunAcceptsAnalysisManager"
  },
  {
    "label": "BigType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BigType"
  },
  {
    "label": "Checker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Checker"
  },
  {
    "label": "PassModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassModel"
  },
  {
    "label": "AnalysisResultConcept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalysisResultConcept"
  },
  {
    "label": "ResultHasInvalidateMethod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultHasInvalidateMethod"
  },
  {
    "label": "AnalysisResultModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalysisResultModel"
  },
  {
    "label": "AnalysisPassConcept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalysisPassConcept"
  },
  {
    "label": "AnalysisPassModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalysisPassModel"
  },
  {
    "label": "PassConcept()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_PASSMANAGERINTERNAL_H # define LLVM_IR_PASSMANAGERINTERNAL_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / STLExtras . h \" namespace llvm { template<IRUnitT> class AnalysisManager ; class PreservedAnalyses ; namespace detail { template<IRUnitT> struct PassConcept { ~)",
    "insertText": "PassConcept()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} PreservedAnalyses)",
    "insertText": "run(IRUnitT &IR, AnalysisManager<IRUnitT> *AM)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "name()"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (} ; template<IRUnitT,PassT,ResultT> class PassRunAcceptsAnalysisManager { typedef char SmallType ; struct BigType { char a,b ; } ; template<T,)",
    "insertText": "ResultT(T::*)(IRUnitT &, AnalysisManager<IRUnitT> *)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (template<T> SmallType)",
    "insertText": "f(Checker<T, &T::run> *)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (template<T> BigType)",
    "insertText": "f(...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : enum { Value =)",
    "insertText": "sizeof(f<PassT>(nullptr)) == sizeof(SmallType)"
  },
  {
    "label": "PassModel()",
    "kind": "Method",
    "detail": "Function (} ; template<IRUnitT,PassT,PreservedAnalysesT = PreservedAnalyses,bool AcceptsAnalysisManager = PassRunAcceptsAnalysisManager<IRUnitT,PassT,PreservedAnalysesT>::Value> struct PassModel ; template<IRUnitT,PassT,PreservedAnalysesT> struct PassModel<IRUnitT,PassT,PreservedAnalysesT,true> : PassConcept<IRUnitT> {)",
    "insertText": "PassModel(PassT Pass) : Pass(std::move(Pass))"
  },
  {
    "label": "PassModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassModel(const PassModel &Arg) : Pass(Arg.Pass)"
  },
  {
    "label": "PassModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassModel(PassModel &&Arg) : Pass(std::move(Arg.Pass))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(PassModel &LHS, PassModel &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(LHS.Pass, RHS.Pass)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PassModel&)",
    "insertText": "operator(PassModel RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(*this, RHS)"
  },
  {
    "label": "AnalysisResultConcept()",
    "kind": "Method",
    "detail": "Function (} PassT Pass ; } ; template<IRUnitT> struct AnalysisResultConcept { ~)",
    "insertText": "AnalysisResultConcept()"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "invalidate(IRUnitT &IR, const PreservedAnalyses &PA)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<IRUnitT,ResultT> class ResultHasInvalidateMethod { typedef char SmallType ; struct BigType { char a,b ; } ; template<T,)",
    "insertText": "bool(T::*)(IRUnitT &, const PreservedAnalyses &)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (template<T> SmallType)",
    "insertText": "f(Checker<T, &T::invalidate> *)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : enum { Value =)",
    "insertText": "sizeof(f<ResultT>(nullptr)) == sizeof(SmallType)"
  },
  {
    "label": "AnalysisResultModel()",
    "kind": "Method",
    "detail": "Function (} ; template<IRUnitT,PassT,ResultT,PreservedAnalysesT = PreservedAnalyses,bool HasInvalidateHandler = ResultHasInvalidateMethod<IRUnitT,ResultT>::Value> struct AnalysisResultModel ; template<IRUnitT,PassT,ResultT,PreservedAnalysesT> struct AnalysisResultModel<IRUnitT,PassT,ResultT,PreservedAnalysesT,false> : AnalysisResultConcept<IRUnitT> {)",
    "insertText": "AnalysisResultModel(ResultT Result) : Result(std::move(Result))"
  },
  {
    "label": "AnalysisResultModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnalysisResultModel(const AnalysisResultModel &Arg) : Result(Arg.Result)"
  },
  {
    "label": "AnalysisResultModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnalysisResultModel(AnalysisResultModel &&Arg) : Result(std::move(Arg.Result))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AnalysisResultModel &LHS, AnalysisResultModel &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(LHS.Result, RHS.Result)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AnalysisResultModel&)",
    "insertText": "operator(AnalysisResultModel RHS)"
  },
  {
    "label": "AnalysisPassConcept()",
    "kind": "Method",
    "detail": "Function (} ResultT Result ; } ; template<IRUnitT> struct AnalysisPassConcept { ~)",
    "insertText": "AnalysisPassConcept()"
  },
  {
    "label": "AnalysisPassModel()",
    "kind": "Method",
    "detail": "Function (} ; template<IRUnitT,PassT,bool AcceptsAnalysisManager = PassRunAcceptsAnalysisManager<IRUnitT,PassT,PassT::Result>::Value> struct AnalysisPassModel ; template<IRUnitT,PassT> struct AnalysisPassModel<IRUnitT,PassT,true> : AnalysisPassConcept<IRUnitT> {)",
    "insertText": "AnalysisPassModel(PassT Pass) : Pass(std::move(Pass))"
  },
  {
    "label": "AnalysisPassModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnalysisPassModel(const AnalysisPassModel &Arg) : Pass(Arg.Pass)"
  },
  {
    "label": "AnalysisPassModel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnalysisPassModel(AnalysisPassModel &&Arg) : Pass(std::move(Arg.Pass))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AnalysisPassModel &LHS, AnalysisPassModel &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AnalysisPassModel&)",
    "insertText": "operator(AnalysisPassModel RHS)"
  }
]