[
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMallocBinned2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocBinned2"
  },
  {
    "label": "FFreeBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeBlock"
  },
  {
    "label": "FPoolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolInfo"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Private"
  },
  {
    "label": "FPoolList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolList"
  },
  {
    "label": "FPoolTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolTable"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UE_MB2_MAX_CACHED_OS_FREES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / Allocators / CachedOSPageAllocator . h \" # include \" HAL / Allocators / CachedOSVeryLargePageAllocator . h \" # include \" HAL / Allocators / PooledVirtualMemoryAllocator . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / MallocBinnedCommon . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Fork . h \" # include \" Templates / Atomic . h \" struct FGenericMemoryStats ; # define)",
    "insertText": "UE_MB2_MAX_CACHED_OS_FREES(64) #if PLATFORM_64BITS # define UE_MB2_MAX_CACHED_OS_FREES_BYTE_LIMIT (64*1024*1024) #else # define UE_MB2_MAX_CACHED_OS_FREES_BYTE_LIMIT (16*1024*1024) #endif #define UE_MB2_LARGE_ALLOC 65536 #if AGGRESSIVE_MEMORY_SAVING # define UE_MB2_MAX_SMALL_POOL_SIZE (13104) # define UE_MB2_SMALL_POOL_COUNT 48 #else # define UE_MB2_MAX_SMALL_POOL_SIZE (32768-16) # define UE_MB2_SMALL_POOL_COUNT 51 #endif #ifndef UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK # define UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK 0 #endif #ifndef BINNED2_FORK_SUPPORT # define BINNED2_FORK_SUPPORT (UE_SERVER && (PLATFORM_UNIX || DEFAULT_SERVER_FAKE_FORKS)) #endif #define UE_MB2_ALLOCATOR_STATS UE_MBC_ALLOCATOR_STATS #define UE_MB2_ALLOCATOR_STATS_VALIDATION (UE_MB2_ALLOCATOR_STATS && 0)"
  },
  {
    "label": "FPoolInfo()",
    "kind": "Method",
    "detail": "Function (FCriticalSection ValidationCriticalSection ; int32 RecursionCounter ; # endif int32 EnableLegacyCachedOSPageAllocatorFreeMemReporting ; enum class EBlockCanary : uint8 { Zero = 0 x0,# if BINNED2_FORK_SUPPORT PreFork = 0 xb7,PostFork = 0 xca,# else Value = 0 xe3 # endif } ; class FMallocBinned2 : public TMallocBinnedCommon<FMallocBinned2,UE_MB2_SMALL_POOL_COUNT,UE_MB2_MAX_SMALL_POOL_SIZE> { struct FFreeBlock ; public : struct FPoolInfo { enum class ECanary : uint16 { Unassigned = 0 x3941,FirstFreeBlockIsOSAllocSize = 0 x17ea,FirstFreeBlockIsPtr = 0 xf317 } ; uint16 Taken ; ECanary Canary ; uint32 AllocSize ; FFreeBlock* FirstFreeBlock ; FPoolInfo* Next ; FPoolInfo** PtrToPrevNext ;)",
    "insertText": "FPoolInfo()"
  },
  {
    "label": "CheckCanary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckCanary(ECanary ShouldBe)"
  },
  {
    "label": "SetCanary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanary(ECanary ShouldBe, bool bPreexisting, bool bGuaranteedToBeNew)"
  },
  {
    "label": "HasFreeBin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFreeBin()"
  },
  {
    "label": "AllocateBin()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocateBin()"
  },
  {
    "label": "GetOSRequestedBytes()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetOSRequestedBytes()"
  },
  {
    "label": "GetOsAllocatedBytes()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetOsAllocatedBytes()"
  },
  {
    "label": "SetOSAllocationSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOSAllocationSizes(SIZE_T InRequestedBytes, UPTRINT InAllocatedBytes)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(FPoolInfo*& PrevNext)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "ExhaustPoolIfNecessary()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExhaustPoolIfNecessary()"
  },
  {
    "label": "FFreeBlock()",
    "kind": "Method",
    "detail": "Function (} ; private : struct Private ; struct FFreeBlock {)",
    "insertText": "FFreeBlock(uint32 InPageSize, uint16 InBinSize, uint8 InPoolIndex, EBlockCanary InCanary) : BinSize(InBinSize) , PoolIndex(InPoolIndex) , CanaryAndForkState(InCanary) , NextFreeBlock(nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumFreeBins = InPageSize / InBinSize ;)",
    "insertText": "if(NumFreeBins * InBinSize + sizeof(FFreeBlock) > InPageSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NumFreeBins - - ; })",
    "insertText": "check(NumFreeBins * InBinSize + sizeof(FFreeBlock) <= InPageSize)"
  },
  {
    "label": "GetNumFreeBins()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumFreeBins()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - NumFreeBins ; # if ! UE_USE_VERYLARGEPAGEALLOCATOR | | ! UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK)",
    "insertText": "if(IsAligned(this, UE_MB2_LARGE_ALLOC))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "if(IsAligned((uintptr_t)this + sizeof(FFreeBlock), UE_MB2_LARGE_ALLOC))"
  },
  {
    "label": "AlignDown()",
    "kind": "Method",
    "detail": "Function (const uintptr_t Ptr =)",
    "insertText": "AlignDown((uintptr_t)this, UE_MB2_LARGE_ALLOC)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "return(uint8*)this + (NumFreeBins * BinSize)"
  },
  {
    "label": "FPoolList()",
    "kind": "Method",
    "detail": "Function (} uint16 BinSize ; uint8 PoolIndex ; EBlockCanary CanaryAndForkState ; uint32 NumFreeBins ; FFreeBlock* NextFreeBlock ; } ; struct FPoolList {)",
    "insertText": "FPoolList()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetFrontPool()",
    "kind": "Method",
    "detail": "Function (FPoolInfo&)",
    "insertText": "GetFrontPool()"
  },
  {
    "label": "LinkToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkToFront(FPoolInfo* Pool)"
  },
  {
    "label": "PushNewPoolToFront()",
    "kind": "Method",
    "detail": "Function (FPoolInfo&)",
    "insertText": "PushNewPoolToFront(FMallocBinned2& Allocator, uint32 InBytes, uint32 InPoolIndex)"
  },
  {
    "label": "ValidateActivePools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateActivePools()"
  },
  {
    "label": "ValidateExhaustedPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateExhaustedPools()"
  },
  {
    "label": "FPoolTable()",
    "kind": "Method",
    "detail": "Function (private : FPoolInfo* Front = nullptr ; } ; struct FPoolTable { FPoolList ActivePools ; FPoolList ExhaustedPools ; uint32 BinSize = 0 ; FCriticalSection Mutex ;)",
    "insertText": "FPoolTable()"
  },
  {
    "label": "IsOSAllocation()",
    "kind": "Method",
    "detail": "Function (} ; FPoolTable SmallPoolTables [ UE_MB2_SMALL_POOL_COUNT ] ; # if BINNED2_FORK_SUPPORT EBlockCanary CurrentCanary = EBlockCanary::PreFork ; EBlockCanary OldCanary = EBlockCanary::PreFork ; # else EBlockCanary CurrentCanary = EBlockCanary::Value ; # endif # if ! PLATFORM_UNIX&& ! PLATFORM_ANDROID # if UE_USE_VERYLARGEPAGEALLOCATOR FCachedOSVeryLargePageAllocator CachedOSPageAllocator ; # else TCachedOSPageAllocator<UE_MB2_MAX_CACHED_OS_FREES,UE_MB2_MAX_CACHED_OS_FREES_BYTE_LIMIT> CachedOSPageAllocator ; # endif # else FPooledVirtualMemoryAllocator CachedOSPageAllocator ; # endif bool)",
    "insertText": "IsOSAllocation(const void* Ptr)"
  },
  {
    "label": "IsSmallBlockAllocation()",
    "kind": "Method",
    "detail": "Function (# if UE_USE_VERYLARGEPAGEALLOCATOR&& ! PLATFORM_UNIX&& ! PLATFORM_ANDROID return ! CachedOSPageAllocator .)",
    "insertText": "IsSmallBlockAllocation(Ptr) && IsAligned(Ptr, UE_MB2_LARGE_ALLOC)"
  },
  {
    "label": "IsAligned()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "IsAligned(Ptr, UE_MB2_LARGE_ALLOC)"
  },
  {
    "label": "GetPoolHeaderFromPointer()",
    "kind": "Method",
    "detail": "Function (# endif } FFreeBlock*)",
    "insertText": "GetPoolHeaderFromPointer(void* Ptr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if ! UE_USE_VERYLARGEPAGEALLOCATOR | | ! UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK)",
    "insertText": "return(FFreeBlock*)AlignDown(Ptr, UE_MB2_LARGE_ALLOC)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(FFreeBlock*)(AlignDown((uintptr_t) Ptr, UE_MB2_LARGE_ALLOC) + UE_MB2_LARGE_ALLOC - sizeof(FFreeBlock))"
  },
  {
    "label": "FMallocBinned2()",
    "kind": "Method",
    "detail": "Function (# endif } public :)",
    "insertText": "FMallocBinned2()"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS_VALIDATION FScopeLock)",
    "insertText": "Lock(&ValidationCriticalSection)"
  },
  {
    "label": "MallocInline()",
    "kind": "Method",
    "detail": "Function (+ + RecursionCounter ; void* Result =)",
    "insertText": "MallocInline(Size, Alignment)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (SIZE_T OutSize ;)",
    "insertText": "ensure(GetAllocationSize(Result, OutSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AllocatedSmallPoolMemoryValidation + = OutSize ;)",
    "insertText": "if(RecursionCounter == 1)"
  },
  {
    "label": "UE_DEBUG_BREAK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEBUG_BREAK()"
  },
  {
    "label": "MallocInline()",
    "kind": "Method",
    "detail": "Function (# endif } void*)",
    "insertText": "MallocInline(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "UseSmallAlloc()",
    "kind": "Method",
    "detail": "Function (const bool bUseSmallPool =)",
    "insertText": "UseSmallAlloc(Size, Alignment)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FPerThreadFreeBlockLists* Lists = GMallocBinnedPerThreadCaches ?)",
    "insertText": "Get()"
  },
  {
    "label": "BoundSizeToPoolIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 PoolIndex =)",
    "insertText": "BoundSizeToPoolIndex(Size, MemSizeToPoolIndex)"
  },
  {
    "label": "PoolIndexToBinSize()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS const uint32 BinSize =)",
    "insertText": "PoolIndexToBinSize(PoolIndex)"
  },
  {
    "label": "MallocSelect()",
    "kind": "Method",
    "detail": "Function (Lists -> AllocatedMemory + = BinSize ; # endif return Result ; } } } return)",
    "insertText": "MallocSelect(Size, Alignment, bUseSmallPool)"
  },
  {
    "label": "UseSmallAlloc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseSmallAlloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_USE_VERYLARGEPAGEALLOCATOR&& UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK)",
    "insertText": "if(Alignment > UE_MBC_MIN_SMALL_POOL_ALIGNMENT)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "Align(Size, Alignment)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "bResult(Size <= UE_MB2_MAX_SMALL_POOL_SIZE)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (# else const bool)",
    "insertText": "bResult((Size <= UE_MB2_MAX_SMALL_POOL_SIZE) & (Alignment <= UE_MBC_MIN_SMALL_POOL_ALIGNMENT))"
  },
  {
    "label": "MallocSelect()",
    "kind": "Method",
    "detail": "Function (# endif return bResult ; } void*)",
    "insertText": "MallocSelect(SIZE_T Size, uint32 Alignment, bool bUseSmallPool)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "IsOSAllocation()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS_VALIDATION const bool bOldIsOsAllocation =)",
    "insertText": "IsOSAllocation(Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SIZE_T OldSize ;)",
    "insertText": "if(!bOldIsOsAllocation)"
  },
  {
    "label": "ReallocInline()",
    "kind": "Method",
    "detail": "Function (+ + RecursionCounter ; void* Result =)",
    "insertText": "ReallocInline(Ptr, NewSize, Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AllocatedSmallPoolMemoryValidation - = OldSize ; })",
    "insertText": "if(!IsOSAllocation(Result))"
  },
  {
    "label": "ReallocInline()",
    "kind": "Method",
    "detail": "Function (# endif } void*)",
    "insertText": "ReallocInline(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_USE_VERYLARGEPAGEALLOCATOR&& UE_MB2_BOOKKEEPING_AT_THE_END_OF_LARGEBLOCK)",
    "insertText": "if(Alignment > UE_MBC_MIN_SMALL_POOL_ALIGNMENT && (NewSize <= UE_MB2_MAX_SMALL_POOL_SIZE))"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (NewSize =)",
    "insertText": "Align(NewSize, Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewSize <= UE_MB2_MAX_SMALL_POOL_SIZE) #else if (NewSize <= UE_MB2_MAX_SMALL_POOL_SIZE && Alignment <= UE_MBC_MIN_SMALL_POOL_ALIGNMENT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 BinSize = 0 ; uint32 PoolIndex = 0 ; bool bCanFree = true ;)",
    "insertText": "if(Ptr)"
  },
  {
    "label": "GetPoolHeaderFromPointer()",
    "kind": "Method",
    "detail": "Function (FFreeBlock* Free =)",
    "insertText": "GetPoolHeaderFromPointer(Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BinSize = Free -> BinSize ; PoolIndex = Free -> PoolIndex ; bCanFree = Free -> CanaryAndForkState = = CurrentCanary ;)",
    "insertText": "if(NewSize && bCanFree && NewSize <= BinSize && (PoolIndex == 0 || NewSize > PoolIndexToBinSize(PoolIndex - 1)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bCanFree)"
  },
  {
    "label": "BoundSizeToPoolIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 NewPoolIndex =)",
    "insertText": "BoundSizeToPoolIndex(NewSize, MemSizeToPoolIndex)"
  },
  {
    "label": "PoolIndexToBinSize()",
    "kind": "Method",
    "detail": "Function (const uint32 NewBinSize =)",
    "insertText": "PoolIndexToBinSize(NewPoolIndex)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Result = NewSize ? Lists ->)",
    "insertText": "Malloc(NewPoolIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS)",
    "insertText": "if(Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Lists -> AllocatedMemory + = NewBinSize ; } # endif)",
    "insertText": "if(Result || !NewSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Result, Ptr, FPlatformMath::Min<SIZE_T>(NewSize, BinSize))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (const bool bDidPush = Lists ->)",
    "insertText": "Free(Ptr, PoolIndex, BinSize)"
  },
  {
    "label": "ReallocExternal()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS Lists -> AllocatedMemory - = BinSize ; # endif } return Result ; } } } } void* Result =)",
    "insertText": "ReallocExternal(Ptr, NewSize, Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + RecursionCounter ;)",
    "insertText": "if(!IsOSAllocation(Ptr))"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (SIZE_T OutSize ;)",
    "insertText": "ensure(GetAllocationSize(Ptr, OutSize))"
  },
  {
    "label": "FreeInline()",
    "kind": "Method",
    "detail": "Function (AllocatedSmallPoolMemoryValidation - = OutSize ; })",
    "insertText": "FreeInline(Ptr)"
  },
  {
    "label": "FreeInline()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "FreeInline(void* Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 BinSize = BasePtr -> BinSize ;)",
    "insertText": "if(BasePtr->CanaryAndForkState == CurrentCanary && Lists->Free(Ptr, BasePtr->PoolIndex, BinSize))"
  },
  {
    "label": "FreeExternal()",
    "kind": "Method",
    "detail": "Function (# if UE_MB2_ALLOCATOR_STATS Lists -> AllocatedMemory - = BinSize ; # endif return ; } } })",
    "insertText": "FreeExternal(Ptr)"
  },
  {
    "label": "GetSmallAllocationSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSmallAllocationSize(void* Ptr, SIZE_T& SizeOut)"
  },
  {
    "label": "CanaryTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CanaryTest(Free)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (SizeOut = Free -> BinSize ; return true ; } return false ; } bool)",
    "insertText": "GetAllocationSize(void *Ptr, SIZE_T &SizeOut)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMallocInitialized()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostFork()"
  },
  {
    "label": "GetFreeCachedMemorySize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetFreeCachedMemorySize()"
  },
  {
    "label": "GetCachedImmediatelyFreeable()",
    "kind": "Method",
    "detail": "Function (} return CachedOSPageAllocator .)",
    "insertText": "GetCachedImmediatelyFreeable()"
  },
  {
    "label": "MallocExternalSmall()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MallocExternalSmall(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "MallocExternalLarge()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "MallocExternalLarge(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "ReallocExternal()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ReallocExternal(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "FreeExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeExternal(void *Ptr)"
  },
  {
    "label": "CanaryFail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CanaryFail(const FFreeBlock* Block)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if BINNED2_FORK_SUPPORT)",
    "insertText": "if(Block->CanaryAndForkState != CurrentCanary && Block->CanaryAndForkState != OldCanary) #else if (Block->CanaryAndForkState != CurrentCanary)"
  },
  {
    "label": "CanaryFail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CanaryFail(Block)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "MemSizeToPoolIndex()",
    "kind": "Method",
    "detail": "Function (uint16 SmallBinSizesReversed [ UE_MB2_SMALL_POOL_COUNT ] ; FMallocBinned2* MallocBinned2 ; uint32 PageSize ; uint8)",
    "insertText": "MemSizeToPoolIndex(UE_MB2_MAX_SMALL_POOL_SIZE >> UE_MBC_MIN_SMALL_POOL_ALIGNMENT_SHIFT)"
  },
  {
    "label": "AllocateMetaDataMemory()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocateMetaDataMemory(SIZE_T Size)"
  },
  {
    "label": "FreeMetaDataMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMetaDataMemory(void* Ptr, SIZE_T Size)"
  },
  {
    "label": "FlushCurrentThreadCacheInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCurrentThreadCacheInternal(bool bNewEpochOnly = false)"
  }
]