[
  {
    "label": "ICustomRenderPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomRenderPass"
  },
  {
    "label": "ICustomRenderPassUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomRenderPassUserData"
  },
  {
    "label": "FCustomRenderPassBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomRenderPassBase"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FDeferredShadingSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredShadingSceneRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "ICustomRenderPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderGraphFwd . h \" # include \" Engine / EngineTypes . h \" class ICustomRenderPass { public : ~)",
    "insertText": "ICustomRenderPass()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetTypeName() const PURE_VIRTUAL(ICustomRenderPass::GetTypeName, static FName Name; return Name;)"
  },
  {
    "label": "IMPLEMENT_CUSTOM_RENDER_PASS()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "IMPLEMENT_CUSTOM_RENDER_PASS(TypeName) const FName& GetTypeName()"
  },
  {
    "label": "GetTypeNameStatic()",
    "kind": "Method",
    "detail": "Function (} \\ const FName&)",
    "insertText": "GetTypeNameStatic()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(TEXT(#TypeName))"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetTypeName() const PURE_VIRTUAL(ICustomRenderPassUserData::GetTypeName, static FName Name; return Name;)"
  },
  {
    "label": "IMPLEMENT_CUSTOM_RENDER_PASS_USER_DATA()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "IMPLEMENT_CUSTOM_RENDER_PASS_USER_DATA(TypeName) const FName& GetTypeName()"
  },
  {
    "label": "FCustomRenderPassBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCustomRenderPassBase(const FString& InDebugName, ERenderMode InRenderMode, ERenderOutput InRenderOutput, const FIntPoint& InRenderTargetSize)"
  },
  {
    "label": "FCustomRenderPassBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCustomRenderPassBase()"
  },
  {
    "label": "BeginPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginPass(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "PreRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "EndPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPass(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetSceneCaptureSource()",
    "kind": "Method",
    "detail": "Function (ESceneCaptureSource)",
    "insertText": "GetSceneCaptureSource()"
  },
  {
    "label": "PerformRenderCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformRenderCapture(ERenderCaptureType InRenderCaptureType, const FString& InFileName = FString())"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (ICustomRenderPassUserData*)",
    "insertText": "GetUserData(const FName& InTypeName)"
  },
  {
    "label": "GetUserDataTyped()",
    "kind": "Method",
    "detail": "Function (template<UserDataType> TEnableIf<TPointerIsConvertibleFromTo<UserDataType,ICustomRenderPassUserData>::Value,UserDataType>::Type*)",
    "insertText": "GetUserDataTyped()"
  },
  {
    "label": "OnBeginPass()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected : void)",
    "insertText": "OnBeginPass(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "OnPreRender()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "OnPostRender()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "OnEndPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndPass(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "OverrideRenderOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OverrideRenderOutput(ERenderOutput InRenderOutput)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (RenderOutput = InRenderOutput ; } protected : FString DebugName ; ERenderMode RenderMode = ERenderMode::DepthPass ; ERenderOutput RenderOutput = ERenderOutput::SceneDepth ; FRDGTextureRef RenderTargetTexture = nullptr ; FIntPoint RenderTargetSize =)",
    "insertText": "FIntPoint(ForceInit)"
  }
]