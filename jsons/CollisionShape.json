[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "MinBoxExtent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Vector . h \" namespace ECollisionShape { enum Type { Line,Box,Sphere,Capsule } ; } ; struct FCollisionShape { ECollisionShape::Type ShapeType ; float)",
    "insertText": "MinBoxExtent()"
  },
  {
    "label": "IsLine()",
    "kind": "Method",
    "detail": "Function (ShapeType = ECollisionShape::Line ; } bool)",
    "insertText": "IsLine()"
  },
  {
    "label": "SetSphere()",
    "kind": "Method",
    "detail": "Function (ShapeType = ECollisionShape::Box ; Box . HalfExtentX = HalfExtent . X ; Box . HalfExtentY = HalfExtent . Y ; Box . HalfExtentZ = HalfExtent . Z ; } void)",
    "insertText": "SetSphere(const float Radius)"
  },
  {
    "label": "SetCapsule()",
    "kind": "Method",
    "detail": "Function (ShapeType = ECollisionShape::Sphere ; Sphere . Radius = Radius ; } void)",
    "insertText": "SetCapsule(const float Radius, const float HalfHeight)"
  },
  {
    "label": "SetCapsule()",
    "kind": "Method",
    "detail": "Function (ShapeType = ECollisionShape::Capsule ; Capsule . Radius = Radius ; Capsule . HalfHeight = HalfHeight ; } void)",
    "insertText": "SetCapsule(const FVector3f& Extent)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ShapeType = ECollisionShape::Capsule ; Capsule . Radius =)",
    "insertText": "Max(Extent.X, Extent.Y)"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (Capsule . HalfHeight = Extent . Z ; } bool)",
    "insertText": "IsNearlyZero()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} case ECollisionShape::Sphere : {)",
    "insertText": "return(Sphere.Radius <= FCollisionShape::MinSphereRadius())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} case ECollisionShape::Capsule : {)",
    "insertText": "return(Capsule.Radius <= FCollisionShape::MinCapsuleRadius())"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (} } return true ; } FVector)",
    "insertText": "GetExtent()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} case ECollisionShape::Sphere : { return)",
    "insertText": "FVector(Sphere.Radius, Sphere.Radius, Sphere.Radius)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} case ECollisionShape::Capsule : { return)",
    "insertText": "FVector(Capsule.Radius, Capsule.Radius, Capsule.HalfHeight)"
  },
  {
    "label": "GetCapsuleAxisHalfLength()",
    "kind": "Method",
    "detail": "Function (} } return FVector::ZeroVector ; } float)",
    "insertText": "GetCapsuleAxisHalfLength()"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetBox()"
  },
  {
    "label": "GetSphereRadius()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "GetSphereRadius()"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (FCollisionShape BoxShape ; BoxShape .)",
    "insertText": "SetBox(FVector3f(BoxHalfExtent))"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (FCollisionShape BoxShape ; BoxShape .)",
    "insertText": "SetBox(BoxHalfExtent)"
  },
  {
    "label": "SetSphere()",
    "kind": "Method",
    "detail": "Function (FCollisionShape SphereShape ; SphereShape .)",
    "insertText": "SetSphere(SphereRadius)"
  },
  {
    "label": "SetCapsule()",
    "kind": "Method",
    "detail": "Function (FCollisionShape CapsuleShape ; CapsuleShape .)",
    "insertText": "SetCapsule(CapsuleRadius, CapsuleHalfHeight)"
  },
  {
    "label": "SetCapsule()",
    "kind": "Method",
    "detail": "Function (FCollisionShape CapsuleShape ; CapsuleShape .)",
    "insertText": "SetCapsule(FVector3f(Extent))"
  }
]