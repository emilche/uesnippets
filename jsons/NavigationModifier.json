[
  {
    "label": "UBrushComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UNavAreaBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavAreaBase"
  },
  {
    "label": "TNavStatArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNavStatArray"
  },
  {
    "label": "FNavigationModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationModifier"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCylinderNavAreaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCylinderNavAreaData"
  },
  {
    "label": "FBoxNavAreaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoxNavAreaData"
  },
  {
    "label": "FConvexNavAreaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexNavAreaData"
  },
  {
    "label": "FAreaNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAreaNavModifier"
  },
  {
    "label": "FSimpleLinkNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleLinkNavModifier"
  },
  {
    "label": "FCustomLinkNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomLinkNavModifier"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FCompositeNavModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeNavModifier"
  },
  {
    "label": "FNavigationModifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CollisionShape . h \" # endif # include \" Templates / SubclassOf . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" AI / Navigation / NavLinkDefinition . h \" # include \" AI / Navigation / NavigationDataResolution . h \" # include \" AI / Navigation / NavigationTypes . h \" class UBrushComponent ; class UPrimitiveComponent ; class UNavAreaBase ; template<InElementType> class TNavStatArray ; struct FNavigationModifier {)",
    "insertText": "FNavigationModifier() : bHasMetaAreas(false)"
  },
  {
    "label": "HasMetaAreas()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMetaAreas()"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(float Radius, float Height, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const FVector& Extent, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const FBox& Box, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const TArray<FVector>& Points, ENavigationCoordSystem::Type CoordType, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const TConstArrayView<FVector> Points, ENavigationCoordSystem::Type CoordType, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const TArray<FVector>& Points, const int32 FirstIndex, const int32 LastIndex, ENavigationCoordSystem::Type CoordType, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "FAreaNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAreaNavModifier(const TNavStatArray<FVector>& Points, const int32 FirstIndex, const int32 LastIndex, ENavigationCoordSystem::Type CoordType, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "InitializePerInstanceConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePerInstanceConvex(const TNavStatArray<FVector>& Points, const int32 FirstIndex, const int32 LastIndex, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "InitializeConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeConvex(const TNavStatArray<FVector>& Points, const int32 FirstIndex, const int32 LastIndex, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "SetIncludeAgentHeight()",
    "kind": "Method",
    "detail": "Function (bExpandTopByCellHeight = bExpand ; } FAreaNavModifier&)",
    "insertText": "SetIncludeAgentHeight(bool bInclude)"
  },
  {
    "label": "GetAreaClass()",
    "kind": "Method",
    "detail": "Function (bIncludeAgentHeight = bInclude ; return* this ; } const TSubclassOf<UNavAreaBase>)",
    "insertText": "GetAreaClass()"
  },
  {
    "label": "GetAreaClassToReplace()",
    "kind": "Method",
    "detail": "Function (} const TSubclassOf<UNavAreaBase>)",
    "insertText": "GetAreaClassToReplace()"
  },
  {
    "label": "SetAreaClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAreaClass(const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "SetApplyMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyMode(ENavigationAreaMode::Type InApplyMode)"
  },
  {
    "label": "SetAreaClassToReplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreaClassToReplace(const TSubclassOf<UNavAreaBase> AreaClass)"
  },
  {
    "label": "GetCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinder(FCylinderNavAreaData& Data)"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBox(FBoxNavAreaData& Data)"
  },
  {
    "label": "GetConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConvex(FConvexNavAreaData& Data)"
  },
  {
    "label": "GetPerInstanceConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPerInstanceConvex(const FTransform& InLocalToWorld, FConvexNavAreaData& OutData)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : TWeakObjectPtr<UClass> AreaClassOb ; TWeakObjectPtr<UClass> ReplaceAreaClassOb ; FBox Bounds ; TArray<FVector> Points ; TEnumAsByte<ENavigationShapeType::Type> ShapeType ; TEnumAsByte<ENavigationAreaMode::Type> ApplyMode ; uint8 bExpandTopByCellHeight : 1 ; uint8 bIncludeAgentHeight : 1 ; uint8 bIsLowAreaModifier : 1 ; void)",
    "insertText": "Init(const TSubclassOf<UNavAreaBase> InAreaClass)"
  },
  {
    "label": "SetConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConvex(const FVector* InPoints, const int32 FirstIndex, const int32 LastIndex, ENavigationCoordSystem::Type CoordType, const FTransform& LocalToWorld)"
  },
  {
    "label": "SetPerInstanceConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerInstanceConvex(const FVector* InPoints, const int32 InFirstIndex, const int32 InLastIndex)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBox(const FBox& Box, const FTransform& LocalToWorld)"
  },
  {
    "label": "FillConvexNavAreaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillConvexNavAreaData(const FVector* InPoints, const int32 InNumPoints, const FTransform& InLocalToWorld, FConvexNavAreaData& OutConvexData, FBox& OutBounds)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (FNavLinkId NavLinkId ;)",
    "insertText": "FSimpleLinkNavModifier() : bHasFallDownLinks(false) , bHasMetaAreasPoint(false) , bHasMetaAreasSegment(false)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleLinkNavModifier(const FNavigationLink& InLink, const FTransform& InLocalToWorld) : LocalToWorld(InLocalToWorld) , bHasFallDownLinks(false) , bHasMetaAreasPoint(false) , bHasMetaAreasSegment(false)"
  },
  {
    "label": "AddLink()",
    "kind": "Method",
    "detail": "Function (NavLinkId = InLink . NavLinkId ;)",
    "insertText": "AddLink(InLink)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleLinkNavModifier(const TArray<FNavigationLink>& InLinks, const FTransform& InLocalToWorld) : LocalToWorld(InLocalToWorld) , bHasFallDownLinks(false) , bHasMetaAreasPoint(false) , bHasMetaAreasSegment(false)"
  },
  {
    "label": "SetLinks()",
    "kind": "Method",
    "detail": "Function (NavLinkId = InLinks [ 0 ] . NavLinkId ;)",
    "insertText": "SetLinks(InLinks)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FSimpleLinkNavModifier(const FNavigationSegmentLink& InLink, const FTransform& InLocalToWorld) : LocalToWorld(InLocalToWorld) , bHasFallDownLinks(false) , bHasMetaAreasPoint(false) , bHasMetaAreasSegment(false)"
  },
  {
    "label": "AddSegmentLink()",
    "kind": "Method",
    "detail": "Function (NavLinkId = InLink . NavLinkId ;)",
    "insertText": "AddSegmentLink(InLink)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleLinkNavModifier(const TArray<FNavigationSegmentLink>& InSegmentLinks, const FTransform& InLocalToWorld) : LocalToWorld(InLocalToWorld) , bHasFallDownLinks(false) , bHasMetaAreasPoint(false) , bHasMetaAreasSegment(false)"
  },
  {
    "label": "SetSegmentLinks()",
    "kind": "Method",
    "detail": "Function (NavLinkId = InSegmentLinks [ 0 ] . NavLinkId ;)",
    "insertText": "SetSegmentLinks(InSegmentLinks)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (} } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FSimpleLinkNavModifier(const FSimpleLinkNavModifier&)"
  },
  {
    "label": "FSimpleLinkNavModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleLinkNavModifier(FSimpleLinkNavModifier&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSimpleLinkNavModifier&)",
    "insertText": "operator(const FSimpleLinkNavModifier& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSimpleLinkNavModifier&)",
    "insertText": "operator(FSimpleLinkNavModifier&& Other)"
  },
  {
    "label": "HasFallDownLinks()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "HasFallDownLinks()"
  },
  {
    "label": "SetSegmentLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSegmentLinks(const TArray<FNavigationSegmentLink>& InLinks)"
  },
  {
    "label": "AppendLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendLinks(const TArray<FNavigationLink>& InLinks)"
  },
  {
    "label": "AppendSegmentLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSegmentLinks(const TArray<FNavigationSegmentLink>& InLinks)"
  },
  {
    "label": "AddLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLink(const FNavigationLink& InLink)"
  },
  {
    "label": "AddSegmentLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSegmentLink(const FNavigationSegmentLink& InLink)"
  },
  {
    "label": "UpdateFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFlags()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (protected : int32 bHasFallDownLinks : 1 ; int32 bHasMetaAreasPoint : 1 ; int32 bHasMetaAreasSegment : 1 ; } ; struct FCustomLinkNavModifier : public FNavigationModifier { FTransform LocalToWorld ; void)",
    "insertText": "Set(TSubclassOf<UNavLinkDefinition> LinkDefinitionClass, const FTransform& InLocalToWorld)"
  },
  {
    "label": "FCompositeNavModifier()",
    "kind": "Method",
    "detail": "Function (} protected : TWeakObjectPtr<UClass> LinkDefinitionClassOb ; } ; struct FCollisionShape ; struct FCompositeNavModifier : public FNavigationModifier {)",
    "insertText": "FCompositeNavModifier() : bHasPotentialLinks(false) , bAdjustHeight(false) , bHasLowAreaModifiers(false) , bIsPerInstanceModifier(false) , bFillCollisionUnderneathForNavmesh(false) , bMaskFillCollisionUnderneathForNavmesh(false) , NavMeshResolution(ENavigationDataResolution::Invalid)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDynamic()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FAreaNavModifier& Area)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Areas .)",
    "insertText": "Add(Area)"
  },
  {
    "label": "ShouldIncludeAgentHeight()",
    "kind": "Method",
    "detail": "Function (bAdjustHeight | = Area .)",
    "insertText": "ShouldIncludeAgentHeight()"
  },
  {
    "label": "IsLowAreaModifier()",
    "kind": "Method",
    "detail": "Function (bHasLowAreaModifiers | = Area .)",
    "insertText": "IsLowAreaModifier()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FSimpleLinkNavModifier& Link)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SimpleLinks .)",
    "insertText": "Add(Link)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FCustomLinkNavModifier& Link)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FCompositeNavModifier& Modifiers)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Areas .)",
    "insertText": "Append(Modifiers.Areas)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (SimpleLinks .)",
    "insertText": "Append(Modifiers.SimpleLinks)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CustomLinks .)",
    "insertText": "Append(Modifiers.CustomLinks)"
  },
  {
    "label": "HasAgentHeightAdjust()",
    "kind": "Method",
    "detail": "Function (bHasMetaAreas | = Modifiers . bHasMetaAreas ; bAdjustHeight | = Modifiers .)",
    "insertText": "HasAgentHeightAdjust()"
  },
  {
    "label": "HasLowAreaModifiers()",
    "kind": "Method",
    "detail": "Function (bHasLowAreaModifiers | = Modifiers .)",
    "insertText": "HasLowAreaModifiers()"
  },
  {
    "label": "GetFillCollisionUnderneathForNavmesh()",
    "kind": "Method",
    "detail": "Function (bFillCollisionUnderneathForNavmesh | = Modifiers .)",
    "insertText": "GetFillCollisionUnderneathForNavmesh()"
  },
  {
    "label": "GetMaskFillCollisionUnderneathForNavmesh()",
    "kind": "Method",
    "detail": "Function (bMaskFillCollisionUnderneathForNavmesh | = Modifiers .)",
    "insertText": "GetMaskFillCollisionUnderneathForNavmesh()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NavMeshResolution =)",
    "insertText": "Max(NavMeshResolution, Modifiers.GetNavMeshResolution())"
  },
  {
    "label": "CreateAreaModifiers()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateAreaModifiers(const UPrimitiveComponent* PrimComp, const TSubclassOf<UNavAreaBase> AreaClass, const TSubclassOf<UNavAreaBase> AreaClassToReplace = {})"
  },
  {
    "label": "CreateAreaModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAreaModifiers(const FCollisionShape& CollisionShape, const FTransform& LocalToWorld, const TSubclassOf<UNavAreaBase> AreaClass, const bool bIncludeAgentHeight = false)"
  },
  {
    "label": "HasPotentialLinks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPotentialLinks()"
  },
  {
    "label": "GetNavMeshResolution()",
    "kind": "Method",
    "detail": "Function (bMaskFillCollisionUnderneathForNavmesh = bValue ; } ENavigationDataResolution)",
    "insertText": "GetNavMeshResolution()"
  },
  {
    "label": "ReserveForAdditionalAreas()",
    "kind": "Method",
    "detail": "Function (NavMeshResolution = Resolution ; } void)",
    "insertText": "ReserveForAdditionalAreas(int32 AdditionalElementsCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Areas .)",
    "insertText": "Reserve(Areas.Num() + AdditionalElementsCount)"
  },
  {
    "label": "MarkPotentialLinks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkPotentialLinks()"
  },
  {
    "label": "MarkAsPerInstanceModifier()",
    "kind": "Method",
    "detail": "Function (bHasPotentialLinks = true ; } void)",
    "insertText": "MarkAsPerInstanceModifier()"
  },
  {
    "label": "GetInstantiatedMetaModifier()",
    "kind": "Method",
    "detail": "Function (bIsPerInstanceModifier = true ; } FCompositeNavModifier)",
    "insertText": "GetInstantiatedMetaModifier(const FNavAgentProperties* NavAgent, const TWeakObjectPtr<const UObject>& WeakOwnerPtr)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetMutableAreas()",
    "kind": "Method",
    "detail": "Function (TArray<FAreaNavModifier>&)",
    "insertText": "GetMutableAreas()"
  }
]