[
  {
    "label": "FShowFlagData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShowFlagData"
  },
  {
    "label": "COMMONMENUEXTENSIONS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COMMONMENUEXTENSIONS_API"
  },
  {
    "label": "EDefaultMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDefaultMode"
  },
  {
    "label": "FGroupedShowFlagIndices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroupedShowFlagIndices"
  },
  {
    "label": "FGroupedShowFlagIndices()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" EditorShowFlags . h \" # include \" HAL / Platform . h \" # include \" ShowFlags . h \" class FShowFlagData ; class FShowFlagFilter { public : enum EDefaultMode { IncludeAllFlagsByDefault,ExcludeAllFlagsByDefault } ; struct FGroupedShowFlagIndices {)",
    "insertText": "FGroupedShowFlagIndices()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} { } TArray<uint32>&)",
    "insertText": "operator(EShowFlagGroup Group)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (GroupedIndices [ Index ] .)",
    "insertText": "Empty()"
  },
  {
    "label": "TotalIndices()",
    "kind": "Method",
    "detail": "Function (} } ; int32)",
    "insertText": "TotalIndices()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < SFG_Max; ++Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Count + = GroupedIndices [ Index ] .)",
    "insertText": "Num()"
  },
  {
    "label": "FShowFlagFilter()",
    "kind": "Method",
    "detail": "Function (} return Count ; } private : TArray<uint32> GroupedIndices [ SFG_Max ] ; } ;)",
    "insertText": "FShowFlagFilter(EDefaultMode InDefaultMode)"
  },
  {
    "label": "IncludeFlag()",
    "kind": "Method",
    "detail": "Function (FShowFlagFilter&)",
    "insertText": "IncludeFlag(FEngineShowFlags::EShowFlag Flag)"
  },
  {
    "label": "ExcludeFlag()",
    "kind": "Method",
    "detail": "Function (FShowFlagFilter&)",
    "insertText": "ExcludeFlag(FEngineShowFlags::EShowFlag Flag)"
  },
  {
    "label": "IncludeGroup()",
    "kind": "Method",
    "detail": "Function (FShowFlagFilter&)",
    "insertText": "IncludeGroup(EShowFlagGroup Group)"
  },
  {
    "label": "ExcludeGroup()",
    "kind": "Method",
    "detail": "Function (FShowFlagFilter&)",
    "insertText": "ExcludeGroup(EShowFlagGroup Group)"
  },
  {
    "label": "GetFilteredIndices()",
    "kind": "Method",
    "detail": "Function (const FGroupedShowFlagIndices&)",
    "insertText": "GetFilteredIndices(bool bForceRebuild = false)"
  },
  {
    "label": "ShouldIncludeFlag()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldIncludeFlag(const FShowFlagData& Flag)"
  },
  {
    "label": "RebuildIndexArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildIndexArray()"
  }
]