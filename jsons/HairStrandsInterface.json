[
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRDGExternalBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGExternalBuffer"
  },
  {
    "label": "FRDGImportedBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGImportedBuffer"
  },
  {
    "label": "FHairStrandClusterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandClusterData"
  },
  {
    "label": "IPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPooledRenderTarget"
  },
  {
    "label": "FRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBuffer"
  },
  {
    "label": "FRDGPooledBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGPooledBuffer"
  },
  {
    "label": "FHairGroupPublicData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHairGroupPublicData"
  },
  {
    "label": "FRDGShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGShaderResourceView"
  },
  {
    "label": "FResourceArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceArrayInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "EHairGeometryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHairGeometryType"
  },
  {
    "label": "EHairBindingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHairBindingType"
  },
  {
    "label": "EHairInterpolationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHairInterpolationType"
  },
  {
    "label": "FHairStrandsInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsInstance"
  },
  {
    "label": "FVertexFactoryInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexFactoryInput"
  },
  {
    "label": "FStrands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStrands"
  },
  {
    "label": "FCards",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCards"
  },
  {
    "label": "FMeshes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshes"
  },
  {
    "label": "FCulling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCulling"
  },
  {
    "label": "FHairTransientResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairTransientResources"
  },
  {
    "label": "FPointPerCurveDispatchInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointPerCurveDispatchInfo"
  },
  {
    "label": "FHairStrandsBookmarkParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsBookmarkParameters"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Engine / EngineTypes . h \" # include \" Shader . h \" # include \" RenderResource . h \" # include \" RenderGraphResources . h \" # include \" ShaderPrintParameters . h \" # include \" GroomVisualizationData . h \" # include \" HairStrandsDefinitions . h \" # include \" CachedGeometry . h \" class UTexture2D ; class FSceneInterface ; class FGlobalShaderMap ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceAttributeParameters, RENDERER_API) SHADER_PARAMETER(uint32, CurveAttributeIndexToChunkDivAsShift) SHADER_PARAMETER(uint32, CurveAttributeChunkElementCount) SHADER_PARAMETER(uint32, CurveAttributeChunkStrideInBytes) SHADER_PARAMETER(uint32, PointAttributeIndexToChunkDivAsShift) SHADER_PARAMETER(uint32, PointAttributeChunkElementCount) SHADER_PARAMETER(uint32, PointAttributeChunkStrideInBytes) SHADER_PARAMETER_ARRAY(FUintVector4, CurveAttributeOffsets, [HAIR_CURVE_ATTRIBUTE_OFFSET_COUNT]) SHADER_PARAMETER_ARRAY(FUintVector4, PointAttributeOffsets, [HAIR_POINT_ATTRIBUTE_OFFSET_COUNT]) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceCommonParameters, RENDERER_API) SHADER_PARAMETER(float, Density) SHADER_PARAMETER(float, Radius) SHADER_PARAMETER(float, RootScale) SHADER_PARAMETER(float, TipScale) SHADER_PARAMETER(float, Length) SHADER_PARAMETER(float, LengthScale) SHADER_PARAMETER(float, RaytracingRadiusScale) SHADER_PARAMETER(uint32, RegisteredIndex) SHADER_PARAMETER(uint32, GroupIndex) SHADER_PARAMETER(uint32, GroupCount) SHADER_PARAMETER(uint32, PointCount) SHADER_PARAMETER(uint32, CurveCount) SHADER_PARAMETER(uint32, RaytracingProceduralSplits) SHADER_PARAMETER(uint32, Flags) SHADER_PARAMETER(uint32, bSimulation) SHADER_PARAMETER(uint32, bSingleGuide) SHADER_PARAMETER(FVector3f, PositionOffset) SHADER_PARAMETER(FVector3f, PrevPositionOffset) SHADER_PARAMETER(FMatrix44f, LocalToWorldPrimitiveTransform) SHADER_PARAMETER(FMatrix44f, LocalToTranslatedWorldPrimitiveTransform) SHADER_PARAMETER_STRUCT_INCLUDE(FHairStrandsInstanceAttributeParameters, Attributes) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceResourceParameters, RENDERER_API) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PositionBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer, PositionOffsetBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, CurveBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PointToCurveBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, CurveAttributeBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PointAttributeBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstancePrevResourceParameters, RENDERER_API) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PrevPositionBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer, PrevPositionOffsetBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceCullingParameters, RENDERER_API) SHADER_PARAMETER(uint32, bCullingEnable) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer, CullingIndirectBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer, CullingIndexBuffer) RDG_BUFFER_ACCESS(CullingIndirectBufferArgs, ERHIAccess::IndirectArgs) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceInterpolationParameters, RENDERER_API) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, CurveInterpolationBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PointInterpolationBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceResourceRawParameters, RENDERER_API) SHADER_PARAMETER_SRV(ByteAddressBuffer, PositionBuffer) SHADER_PARAMETER_SRV(StructuredBuffer<float4>, PositionOffsetBuffer) SHADER_PARAMETER_SRV(ByteAddressBuffer, CurveBuffer) SHADER_PARAMETER_SRV(ByteAddressBuffer, PointToCurveBuffer) SHADER_PARAMETER_SRV(Buffer<float4>, TangentBuffer) SHADER_PARAMETER_SRV(ByteAddressBuffer, CurveAttributeBuffer) SHADER_PARAMETER_SRV(ByteAddressBuffer, PointAttributeBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstancePrevResourceRawParameters, RENDERER_API) SHADER_PARAMETER_SRV(ByteAddressBuffer, PreviousPositionBuffer) SHADER_PARAMETER_SRV(StructuredBuffer<float4>, PreviousPositionOffsetBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceCullingRawParameters, RENDERER_API) SHADER_PARAMETER(uint32, bCullingEnable) SHADER_PARAMETER_SRV(Buffer<uint>, CullingIndexBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceIntermediateParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FHairStrandsInstanceCommonParameters, Common) SHADER_PARAMETER_STRUCT_INCLUDE(FHairStrandsInstanceResourceParameters, Resources) SHADER_PARAMETER_STRUCT_INCLUDE(FHairStrandsInstanceCullingParameters, Culling) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsInstanceParameters, ) SHADER_PARAMETER_STRUCT(FHairStrandsInstanceIntermediateParameters, HairStrandsVF) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,CreateSRV = 0 x1,CreateUAV = 0 x2,CreateViews = CreateSRV | CreateUAV } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERDGImportedBufferFlags)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (struct FRDGExternalBuffer { TRefCountPtr<FRDGPooledBuffer> Buffer = nullptr ; FShaderResourceViewRHIRef SRV = nullptr ; FUnorderedAccessViewRHIRef UAV = nullptr ; EPixelFormat Format = PF_Unknown ; void)",
    "insertText": "Release()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} ; struct FRDGImportedBuffer { FRDGBufferRef Buffer = nullptr ; FRDGBufferSRVRef SRV = nullptr ; FRDGBufferUAVRef UAV = nullptr ; } ; FRDGImportedBuffer)",
    "insertText": "Register(FRDGBuilder& GraphBuilder, const FRDGExternalBuffer& In, ERDGImportedBufferFlags Flags, ERDGUnorderedAccessViewFlags UAVFlags = ERDGUnorderedAccessViewFlags::None)"
  },
  {
    "label": "RegisterAsSRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRVRef)",
    "insertText": "RegisterAsSRV(FRDGBuilder& GraphBuilder, const FRDGExternalBuffer& In)"
  },
  {
    "label": "RegisterAsUAV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferUAVRef)",
    "insertText": "RegisterAsUAV(FRDGBuilder& GraphBuilder, const FRDGExternalBuffer& In, ERDGUnorderedAccessViewFlags Flags = ERDGUnorderedAccessViewFlags::None)"
  },
  {
    "label": "AddTransitionPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransitionPass(FRDGBuilder& GraphBuilder, FGlobalShaderMap* ShaderMap, EShaderPlatform InPlatform, const TArray<FRDGBufferSRVRef>& Transitions)"
  },
  {
    "label": "FHairStrandsInstance()",
    "kind": "Method",
    "detail": "Function (struct FHairStrandClusterData ; struct IPooledRenderTarget ; struct FRWBuffer ; class FRDGPooledBuffer ; class FHairGroupPublicData ; class FRDGShaderResourceView ; class FResourceArrayInterface ; class FSceneView ; enum EHairGeometryType { Strands,Cards,Meshes,NoneGeometry } ; enum EHairBindingType { NoneBinding,Rigid,Skinning } ; enum EHairInterpolationType { NoneSkinning,RigidSkinning,OffsetSkinning,SmoothSkinning,} ; struct FHairStrandsInstance : public FRefCountBase { ~)",
    "insertText": "FHairStrandsInstance()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (int32 RegisteredIndex = - 1 ; const FBoxSphereBounds&)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetLocalBounds()",
    "kind": "Method",
    "detail": "Function (const FBoxSphereBounds&)",
    "insertText": "GetLocalBounds()"
  },
  {
    "label": "GetHairData()",
    "kind": "Method",
    "detail": "Function (const FHairGroupPublicData*)",
    "insertText": "GetHairData()"
  },
  {
    "label": "GetGroupIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetGroupIndex()"
  },
  {
    "label": "SupportVoxelization()",
    "kind": "Method",
    "detail": "Function (Culling -> bCullingResultAvailable = b ; } void)",
    "insertText": "SupportVoxelization(bool InVoxelize)"
  },
  {
    "label": "DoesSupportVoxelization()",
    "kind": "Method",
    "detail": "Function (bSupportVoxelization = InVoxelize ; } bool)",
    "insertText": "DoesSupportVoxelization()"
  },
  {
    "label": "GetLODGeometryTypes()",
    "kind": "Method",
    "detail": "Function (LODGeometryTypes = InTypes ; } const TArray<EHairGeometryType>&)",
    "insertText": "GetLODGeometryTypes()"
  },
  {
    "label": "GetLODVisibilities()",
    "kind": "Method",
    "detail": "Function (LODVisibilities = InLODVisibility ; } const TArray<bool>&)",
    "insertText": "GetLODVisibilities()"
  },
  {
    "label": "GetGeometryType()",
    "kind": "Method",
    "detail": "Function (} EHairGeometryType)",
    "insertText": "GetGeometryType(int32 InLODIndex)"
  },
  {
    "label": "GetBindingType()",
    "kind": "Method",
    "detail": "Function (} EHairBindingType)",
    "insertText": "GetBindingType(int32 InLODIndex)"
  },
  {
    "label": "IsSimulationEnable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulationEnable(int32 InLODIndex)"
  },
  {
    "label": "IsGlobalInterpolationEnable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGlobalInterpolationEnable(int32 InLODIndex)"
  },
  {
    "label": "SetLODScreenSizes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLODScreenSizes(const TArray<float>& ScreenSizes)"
  },
  {
    "label": "GetLODScreenSizes()",
    "kind": "Method",
    "detail": "Function (LODScreenSizes = ScreenSizes ; } const TArray<float>&)",
    "insertText": "GetLODScreenSizes()"
  },
  {
    "label": "GetLODBias()",
    "kind": "Method",
    "detail": "Function (LODBias = InLODBias ; } float)",
    "insertText": "GetLODBias()"
  },
  {
    "label": "GetLODIndex()",
    "kind": "Method",
    "detail": "Function (LODIndex = InLODIndex ; } float)",
    "insertText": "GetLODIndex()"
  },
  {
    "label": "SetMeshLODIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMeshLODIndex(float InMeshLODIndex)"
  },
  {
    "label": "GetMeshLODIndex()",
    "kind": "Method",
    "detail": "Function (MeshLODIndex = InMeshLODIndex ; } float)",
    "insertText": "GetMeshLODIndex()"
  },
  {
    "label": "GetLODVisibility()",
    "kind": "Method",
    "detail": "Function (bLODVisibility = bVisible ; } bool)",
    "insertText": "GetLODVisibility()"
  },
  {
    "label": "GetActiveStrandsCurveCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetActiveStrandsCurveCount(bool bPrevious=false)"
  },
  {
    "label": "GetActiveStrandsCoverageScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActiveStrandsCoverageScale()"
  },
  {
    "label": "GetActiveStrandsRadiusScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetActiveStrandsRadiusScale()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (struct FVertexFactoryInput { struct FStrands { FRDGImportedBuffer PositionBuffer ; FRDGImportedBuffer PrevPositionBuffer ; FRDGImportedBuffer TangentBuffer ; FRDGImportedBuffer CurveAttributeBuffer ; FRDGImportedBuffer PointAttributeBuffer ; FRDGImportedBuffer PointToCurveBuffer ; FRDGImportedBuffer PositionOffsetBuffer ; FRDGImportedBuffer PrevPositionOffsetBuffer ; FRDGImportedBuffer CurveBuffer ; FRDGExternalBuffer PositionBufferExternal ; FRDGExternalBuffer PrevPositionBufferExternal ; FRDGExternalBuffer TangentBufferExternal ; FRDGExternalBuffer CurveAttributeBufferExternal ; FRDGExternalBuffer PointAttributeBufferExternal ; FRDGExternalBuffer PointToCurveBufferExternal ; FRDGExternalBuffer PositionOffsetBufferExternal ; FRDGExternalBuffer PrevPositionOffsetBufferExternal ; FRDGExternalBuffer CurveBufferExternal ; FShaderResourceViewRHIRef PositionBufferRHISRV = nullptr ; FShaderResourceViewRHIRef PrevPositionBufferRHISRV = nullptr ; FShaderResourceViewRHIRef TangentBufferRHISRV = nullptr ; FShaderResourceViewRHIRef CurveAttributeBufferRHISRV = nullptr ; FShaderResourceViewRHIRef PointAttributeBufferRHISRV = nullptr ; FShaderResourceViewRHIRef PointToCurveBufferRHISRV = nullptr ; FShaderResourceViewRHIRef PositionOffsetBufferRHISRV = nullptr ; FShaderResourceViewRHIRef PrevPositionOffsetBufferRHISRV = nullptr ; FShaderResourceViewRHIRef CurveBufferRHISRV = nullptr ; FHairStrandsInstanceCommonParameters Common ; } Strands ; struct FCards { } Cards ; struct FMeshes { } Meshes ; bool bHasLODSwitch = false ; bool bHasLODSwitchBindingType = false ; EHairGeometryType GeometryType = EHairGeometryType::NoneGeometry ; EHairBindingType BindingType = EHairBindingType::NoneBinding ; FTransform LocalToWorldTransform ; } ; struct FCulling { FRDGExternalBuffer DrawIndirectBuffer ; FRDGExternalBuffer DrawIndirectRasterComputeBuffer ; FRDGExternalBuffer CulledCurveBuffer ; FRDGExternalBuffer CulledVertexIdBuffer ; bool bCullingResultAvailable = false ; } ; FHairStrandsInstance* Instance = nullptr ; FCulling* Culling = nullptr ; FVertexFactoryInput VFInput ; uint32 ClusterDataIndex = ~ 0 ; uint32 GroupIndex = 0 ; uint32 RestPointCount = 0 ; uint32 RestCurveCount = 0 ; uint32 ClusterCount = 0 ; float ClusterScale = 0 ; bool bSupportVoxelization = true ; TArray<bool> LODVisibilities ; TArray<float> LODScreenSizes ; TArray<bool> LODSimulations ; TArray<bool> LODGlobalInterpolations ; TArray<EHairGeometryType> LODGeometryTypes ; bool bIsDeformationEnable = false ; bool bIsSimulationCacheEnable = false ; TArray<EHairBindingType> BindingTypes ; float MeshLODIndex = - 1 ; float LODIndex = - 1 ; float LODBias = 0 ; bool bLODVisibility = true ; bool bAutoLOD = false ; float AutoLODBias = 0 ; uint32 ContinuousLODPointCount = 0 ; uint32 ContinuousLODCurveCount = 0 ; uint32 ContinuousLODPreviousPointCount = 0 ; uint32 ContinuousLODPreviousCurveCount = 0 ; float ContinuousLODScreenSize = 1 . f ; float ContinuousLODCoverageScale = 1 . f ; float ContinuousLODRadiusScale = 1 . f ; FVector2f ContinuousLODScreenPos =)",
    "insertText": "FVector2f(0,0)"
  },
  {
    "label": "GetClusterOffset()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds ContinuousLODBounds ; bool bDebugDrawLODInfo = false ; float DebugScreenSize = 0 . f ; FLinearColor DebugGroupColor ; } ; struct FHairTransientResources { uint32)",
    "insertText": "GetClusterOffset(uint32 InRegisterIndex)"
  },
  {
    "label": "GetMeshLODData()",
    "kind": "Method",
    "detail": "Function (} TBitArray<> bIsGroupAABBValid ; FRDGBufferRef GroupAABBBuffer = nullptr ; FRDGBufferSRVRef GroupAABBSRV = nullptr ; TArray<FUintVector2> ClusterAABBOffetAndCounts ; FRDGBufferRef ClusterAABBBuffer = nullptr ; FRDGBufferSRVRef ClusterAABBSRV = nullptr ; FRDGBufferRef IndirectDispatchArgsBuffer = nullptr ; FRDGBufferSRVRef IndirectDispatchArgsSRV = nullptr ; TArray<FCachedGeometry> SimMeshDatas ; TArray<FCachedGeometry> RenMeshDatas ; const FCachedGeometry&)",
    "insertText": "GetMeshLODData(uint32 InRegisteredIndex, bool bSim)"
  },
  {
    "label": "IsHairStrandsSupported()",
    "kind": "Method",
    "detail": "Function (enum class EHairStrandsShaderType { Strands,Cards,Meshes,Tool,All } ; bool)",
    "insertText": "IsHairStrandsSupported(EHairStrandsShaderType Type, EShaderPlatform Platform)"
  },
  {
    "label": "IsHairStrandsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairStrandsEnabled(EHairStrandsShaderType Type, EShaderPlatform Platform = EShaderPlatform::SP_NumPlatforms)"
  },
  {
    "label": "IsHairRayTracingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairRayTracingEnabled()"
  },
  {
    "label": "IsHairStrandsSimulationEnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairStrandsSimulationEnable()"
  },
  {
    "label": "IsHairStrandsBindingEnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairStrandsBindingEnable()"
  },
  {
    "label": "IsHairStrandContinuousDecimationReorderingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairStrandContinuousDecimationReorderingEnabled()"
  },
  {
    "label": "IsHairVisibilityComputeRasterContinuousLODEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairVisibilityComputeRasterContinuousLODEnabled()"
  },
  {
    "label": "TransitBufferToReadable()",
    "kind": "Method",
    "detail": "Function (typedef TArray<FRHIUnorderedAccessView*> FBufferTransitionQueue ; void)",
    "insertText": "TransitBufferToReadable(FRDGBuilder& GraphBuilder, FBufferTransitionQueue& BuffersToTransit)"
  },
  {
    "label": "GetHairCoverage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHairCoverage(uint32 HairCount, float AverageHairRadius)"
  },
  {
    "label": "GetHairAvgRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHairAvgRadius(uint32 InCount, float InCoverage)"
  },
  {
    "label": "HasInstances()",
    "kind": "Method",
    "detail": "Function (enum class EHairStrandsBookmark : uint8 { ProcessTasks,ProcessLODSelection,ProcessBindingSurfaceUpdate,ProcessGuideInterpolation,ProcessCardsAndMeshesInterpolation_PrimaryView,ProcessCardsAndMeshesInterpolation_ShadowView,ProcessStrandsInterpolation,ProcessDebug,ProcessEndOfFrame } ; enum class EHairInstanceVisibilityType : uint8 { NotVisible = 0,StrandsPrimaryView = 1,StrandsShadowView = 2,CardsOrMeshesPrimaryView = 3,CardsOrMeshesShadowView = 4,Count } ; struct FHairStrandsBookmarkParameters { FShaderPrintData* ShaderPrintData = nullptr ; class FGlobalShaderMap* ShaderMap = nullptr ; uint32 ViewUniqueID = ~ 0 ; FIntRect ViewRect ; FHairStrandsInstances VisibleStrands ; FHairStrandsInstances VisibleCardsOrMeshes_Primary ; FHairStrandsInstances VisibleCardsOrMeshes_Shadow ; FHairTransientResources* TransientResources = nullptr ; FHairStrandsInstances* Instances = nullptr ; TArray<EHairInstanceVisibilityType> InstancesVisibilityType ; const FSceneView* View = nullptr ; FSceneInterface* Scene = nullptr ; TArray<const FSceneView*> AllViews ; FRDGTextureRef SceneColorTexture = nullptr ; FRDGTextureRef SceneDepthTexture = nullptr ; bool)",
    "insertText": "HasInstances()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; typedef)",
    "insertText": "void(*THairStrandsBookmarkFunction)(FRDGBuilder* GraphBuilder, EHairStrandsBookmark Bookmark, FHairStrandsBookmarkParameters& Parameters)"
  },
  {
    "label": "RegisterBookmarkFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBookmarkFunction(THairStrandsBookmarkFunction Bookmark)"
  }
]