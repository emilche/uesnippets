[
  {
    "label": "FEngineServicePong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineServicePong"
  },
  {
    "label": "FSessionLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionLogMessage"
  },
  {
    "label": "FSessionServiceLog",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServiceLog"
  },
  {
    "label": "FSessionServicePong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServicePong"
  },
  {
    "label": "FSessionInstanceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionInstanceInfo"
  },
  {
    "label": "FSessionInstanceInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" IMessageContext . h \" # include \" IMessageBus . h \" # include \" MessageEndpoint . h \" # include \" ISessionInstanceInfo . h \" # include \" ISessionInfo . h \" struct FEngineServicePong ; struct FSessionLogMessage ; struct FSessionServiceLog ; struct FSessionServicePong ; class FSessionInstanceInfo : public TSharedFromThis<FSessionInstanceInfo>,public ISessionInstanceInfo { public :)",
    "insertText": "FSessionInstanceInfo()"
  },
  {
    "label": "FSessionInstanceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSessionInstanceInfo(const FGuid& InInstanceId, const TSharedRef<ISessionInfo>& InOwner, const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InMessageBus)"
  },
  {
    "label": "UpdateFromMessage()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateFromMessage(const FEngineServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "UpdateFromMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromMessage(const FSessionServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ExecuteCommand(const FString& CommandString)"
  },
  {
    "label": "GetBuildDate()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetBuildDate()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "OnLogReceived()",
    "kind": "Method",
    "detail": "Function (FLogReceivedEvent&)",
    "insertText": "OnLogReceived()"
  },
  {
    "label": "HandleSessionLogMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleSessionLogMessage(const FSessionServiceLog& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  }
]