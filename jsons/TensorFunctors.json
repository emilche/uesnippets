[
  {
    "label": "scalar_mod_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_mod_op"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "scalar_mod2_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_mod2_op"
  },
  {
    "label": "scalar_fmod_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_fmod_op"
  },
  {
    "label": "reducer_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "reducer_traits"
  },
  {
    "label": "SumReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SumReducer"
  },
  {
    "label": "MeanReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MeanReducer"
  },
  {
    "label": "MinMaxBottomValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MinMaxBottomValue"
  },
  {
    "label": "MaxReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaxReducer"
  },
  {
    "label": "MinReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MinReducer"
  },
  {
    "label": "ProdReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProdReducer"
  },
  {
    "label": "AndReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AndReducer"
  },
  {
    "label": "OrReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrReducer"
  },
  {
    "label": "ArgMaxTupleReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgMaxTupleReducer"
  },
  {
    "label": "ArgMinTupleReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgMinTupleReducer"
  },
  {
    "label": "GaussianGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GaussianGenerator"
  },
  {
    "label": "scalar_clamp_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_clamp_op"
  },
  {
    "label": "scalar_mod_op()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_FUNCTORS_H # define EIGEN_CXX11_TENSOR_TENSOR_FUNCTORS_H namespace Eigen { namespace internal { template<Scalar> struct scalar_mod_op { EIGEN_DEVICE_FUNC)",
    "insertText": "scalar_mod_op(const Scalar& divisor) : m_divisor(divisor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "operator() (const Scalar& a)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_fmod_op<Scalar>> { enum { Cost = 1 3,PacketAccess = false } ; } ; template<Reducer,Device> struct reducer_traits { enum { Cost = 1,PacketAccess = false,IsStateful = false,IsExactlyAssociative = true } ; } ; template<T> struct SumReducer { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(const T t, T* accum)"
  },
  {
    "label": "sum_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_sum_op<T> sum_op ;* accum =)",
    "insertText": "sum_op(*accum, t)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reducePacket(const Packet& p, Packet* accum)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "initialize()"
  },
  {
    "label": "conv()",
    "kind": "Method",
    "detail": "Function (internal::scalar_cast_op<int,T> conv ; return)",
    "insertText": "conv(0)"
  },
  {
    "label": "initializePacket()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "initializePacket()"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "finalize(const T accum)"
  },
  {
    "label": "sum_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_sum_op<T> sum_op ; return)",
    "insertText": "sum_op(saccum, predux(vaccum))"
  },
  {
    "label": "MeanReducer()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,Device> struct reducer_traits<SumReducer<T>,Device> { enum { Cost = NumTraits<T>::AddCost,PacketAccess = PacketType<T,Device>::HasAdd,IsStateful = false,IsExactlyAssociative = NumTraits<T>::IsInteger } ; } ; template<T> struct MeanReducer { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "MeanReducer() : scalarCount_(0), packetCount_(0)"
  },
  {
    "label": "quotient_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_quotient_op<T> quotient_op ; return)",
    "insertText": "quotient_op(accum, T(scalarCount_))"
  },
  {
    "label": "finalizePacket()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "finalizePacket(const Packet& vaccum)"
  },
  {
    "label": "finalizeBoth()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "finalizeBoth(const T saccum, const Packet& vaccum)"
  },
  {
    "label": "quotient_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_sum_op<T> sum_op ; internal::scalar_quotient_op<T> quotient_op ; return)",
    "insertText": "quotient_op(sum_op(saccum, predux(vaccum)), T(scalarCount_ + packetCount_ * unpacket_traits<Packet>::size))"
  },
  {
    "label": "bottom_value()",
    "kind": "Method",
    "detail": "Function (} protected : DenseIndex scalarCount_ ; DenseIndex packetCount_ ; } ; template<T,Device> struct reducer_traits<MeanReducer<T>,Device> { enum { Cost = NumTraits<T>::AddCost,PacketAccess = PacketType<T,Device>::HasAdd&& PacketType<T,Device>::HasDiv&& ! NumTraits<T>::IsInteger,IsStateful = true,IsExactlyAssociative = NumTraits<T>::IsInteger } ; } ; template<T,bool IsMax = true,bool IsInteger = true> struct MinMaxBottomValue { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "bottom_value()"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (scalar_max_op<T,T,NaNPropagation> op ;* accum =)",
    "insertText": "op(t, *accum)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (scalar_max_op<T,T,NaNPropagation>)",
    "insertText": "op(*accum) = op.packetOp(*accum, p)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (scalar_max_op<T,T,NaNPropagation> op ; return)",
    "insertText": "op(saccum, op.predux(vaccum))"
  },
  {
    "label": "IsExactlyAssociative()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,Device,int NaNPropagation> struct reducer_traits<MaxReducer<T,NaNPropagation>,Device> { enum { Cost = NumTraits<T>::AddCost,PacketAccess = PacketType<T,Device>::HasMax,IsStateful = false,)",
    "insertText": "IsExactlyAssociative(NaNPropagation!=PropagateFast)"
  },
  {
    "label": "prod_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_product_op<T>)",
    "insertText": "prod_op(*accum) = prod_op(*accum, t)"
  },
  {
    "label": "conv()",
    "kind": "Method",
    "detail": "Function (internal::scalar_cast_op<int,T> conv ; return)",
    "insertText": "conv(1)"
  },
  {
    "label": "prod_op()",
    "kind": "Method",
    "detail": "Function (internal::scalar_product_op<T> prod_op ; return)",
    "insertText": "prod_op(saccum, predux_mul(vaccum))"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,Device> struct reducer_traits<ProdReducer<T>,Device> { enum { Cost = NumTraits<T>::MulCost,PacketAccess = PacketType<T,Device>::HasMul,IsStateful = false,IsExactlyAssociative = true } ; } ; struct AndReducer { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(bool t, bool* accum)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "finalize(const T& accum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(size_t i = 0; i < NumDims; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_two_sigmas [ i ] = std_devs [ i ]* std_devs [ i ]* 2 ; } } EIGEN_DEVICE_FUNC T)",
    "insertText": "operator()(const array<Index, NumDims>& coordinates)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T tmp =)",
    "insertText": "T(0)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (T offset = coordinates [ i ] - m_means [ i ] ; tmp + = offset* offset / m_two_sigmas [ i ] ; } return)",
    "insertText": "exp(-tmp)"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (} private : array<T,NumDims> m_means ; array<T,NumDims> m_two_sigmas ; } ; template<T,Index,size_t NumDims> struct functor_traits<GaussianGenerator<T,Index,NumDims>> { enum { Cost =)",
    "insertText": "NumDims(2 * NumTraits<T>::AddCost + NumTraits<T>::MulCost + functor_traits<scalar_quotient_op<T, T> >::Cost)"
  },
  {
    "label": "scalar_clamp_op()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar> struct scalar_clamp_op { EIGEN_DEVICE_FUNC)",
    "insertText": "scalar_clamp_op(const Scalar& _min, const Scalar& _max) : m_min(_min), m_max(_max)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(const Scalar& x)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& x)"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (} const Scalar m_min ; const Scalar m_max ; } ; template<Scalar> struct functor_traits<scalar_clamp_op<Scalar>> { enum { Cost = 2* NumTraits<Scalar>::AddCost,)",
    "insertText": "PacketAccess(packet_traits<Scalar>::HasMin && packet_traits<Scalar>::HasMax)"
  }
]