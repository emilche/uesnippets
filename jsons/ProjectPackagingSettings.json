[
  {
    "label": "FTargetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPakOrderFileSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakOrderFileSpec"
  },
  {
    "label": "FProjectBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectBuildSettings"
  },
  {
    "label": "DEVELOPERTOOLSETTINGS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DEVELOPERTOOLSETTINGS_API"
  },
  {
    "label": "FConfigurationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigurationInfo"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" ProjectPackagingSettings . generated . h \" struct FTargetInfo ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PPBC_Debug)",
    "insertText": "UMETA(DisplayName=\"Debug\"), PPBC_DebugGame UMETA(DisplayName=\"DebugGame\"), PPBC_Development UMETA(DisplayName=\"Development\"), PPBC_Test UMETA(DisplayName=\"Test\"), PPBC_Shipping UMETA(DisplayName=\"Shipping\"), PPBC_MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Always)",
    "insertText": "UMETA(DisplayName=\"Always\"), Never UMETA(DisplayName=\"Never\"), IfProjectHasCode UMETA(DisplayName=\"If project has code, or running a locally built editor\"), IfEditorWasBuiltLocally UMETA(DisplayName=\"If running a locally built editor\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Disabled,OriginalFile,AdjacentFile } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FPakOrderFileSpec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPakOrderFileSpec() : Priority(0)"
  },
  {
    "label": "FPakOrderFileSpec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPakOrderFileSpec(FString InPattern) : Pattern(MoveTemp(InPattern)) , Priority(0)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config=Game, defaultconfig)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual void OverrideConfigSection(FString& InOutSectionName)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (InOutSectionName =)",
    "insertText": "TEXT(\"/Script/UnrealEd.ProjectPackagingSettings\")"
  },
  {
    "label": "ConfigurationInfo()",
    "kind": "Method",
    "detail": "Function (} public : struct FConfigurationInfo { EBuildConfiguration Configuration ; FText Name ; FText ToolTip ; } ; const FConfigurationInfo)",
    "insertText": "ConfigurationInfo(int)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (private : TArray<FFilePath> CachedNativizeBlueprintAssets ; FString ConfigPlatform ; public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "GetBuildTargetInfo()",
    "kind": "Method",
    "detail": "Function (const FTargetInfo*)",
    "insertText": "GetBuildTargetInfo()"
  },
  {
    "label": "LoadSettingsForPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettingsForPlatform(FString PlatformName)"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (ConfigPlatform = PlatformName ;)",
    "insertText": "LoadConfig()"
  },
  {
    "label": "GetConfigPlatform()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetConfigPlatform()"
  },
  {
    "label": "FixCookingPaths()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "FixCookingPaths()"
  }
]