[
  {
    "label": "FArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayReader"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSimpleAbstractSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleAbstractSocket"
  },
  {
    "label": "FSimpleAbstractSocket_FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleAbstractSocket_FSocket"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FSimpleAbstractSocket_FMultichannelTCPSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleAbstractSocket_FMultichannelTCPSocket"
  },
  {
    "label": "FMultichannelTcpSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultichannelTcpSocket"
  },
  {
    "label": "FNFSMessageHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNFSMessageHeader"
  },
  {
    "label": "FFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileInfo"
  },
  {
    "label": "FNetworkFileArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkFileArchive"
  },
  {
    "label": "USE_MCSOCKET_FOR_NFS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ByteSwap . h \" # include \" Misc / Crc . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArrayReader . h \" # include \" Serialization / BufferArchive . h \" class FArrayReader ; class FString ; enum { DEFAULT_TCP_FILE_SERVING_PORT = 4 1 8 9 9,DEFAULT_HTTP_FILE_SERVING_PORT = 4 1 8 9 8 } ; # define)",
    "insertText": "USE_MCSOCKET_FOR_NFS(0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum Type { SyncFile,DeleteFile,MoveFile,SetReadOnly,OpenRead,OpenWrite,OpenAppend,CreateDirectory,DeleteDirectory,IterateDirectory,IterateDirectoryRecursively,DeleteDirectoryRecursively,CopyFile,GetFileInfo,Read,ReadAt,Write,Close,Seek,SetTimeStamp,ToAbsolutePathForRead,ToAbsolutePathForWrite,ReportLocalFiles,GetFileList,Heartbeat,RecompileShaders,} ; } namespace NFS_Channels { enum Type { Main = 1 0 0,UnsolicitedFiles = 1 0 1,Heatbeat = 1 0 2,} ; } enum class EConnectionFlags : uint8 { None = 0 x00000000,Streaming = 0 x00000001,PreCookedIterative = 0 x00000002,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EConnectionFlags)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (class FSimpleAbstractSocket { public : bool)",
    "insertText": "Receive(uint8 *Results, int32 Size)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const uint8 *Buffer, int32 Size)"
  },
  {
    "label": "GetMagic()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMagic()"
  },
  {
    "label": "FSimpleAbstractSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSimpleAbstractSocket()"
  },
  {
    "label": "FSimpleAbstractSocket_FSocket()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleAbstractSocket_FSocket : public FSimpleAbstractSocket { class FSocket* Socket ; public :)",
    "insertText": "FSimpleAbstractSocket_FSocket(class FSocket* InSocket) : Socket(InSocket)"
  },
  {
    "label": "FNFSMessageHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNFSMessageHeader(const FSimpleAbstractSocket& InSocket, const TArray<uint8>& Payload) : Magic(InSocket.GetMagic())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (PayloadSize = Payload .)",
    "insertText": "Num()"
  },
  {
    "label": "MemCrc_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (PayloadCrc =)",
    "insertText": "MemCrc_DEPRECATED(Payload.GetData(), Payload.Num())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FNFSMessageHeader& Header)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 DesiredMagic = Header . Magic ; Ar<<Header . Magic ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "BYTESWAP_ORDER32()",
    "kind": "Method",
    "detail": "Function (uint32 DesiredMagicSwapped =)",
    "insertText": "BYTESWAP_ORDER32(DesiredMagic)"
  },
  {
    "label": "SetByteSwapping()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetByteSwapping(!Ar.ForceByteSwapping())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Header . Magic = DesiredMagic ; } } })",
    "insertText": "if(Header.Magic == DesiredMagic)"
  },
  {
    "label": "WrapAndSendPayload()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . PayloadSize ; Ar<<Header . PayloadCrc ; } return Ar ; } bool)",
    "insertText": "WrapAndSendPayload(const TArray<uint8>& Payload, const FSimpleAbstractSocket& Socket)"
  },
  {
    "label": "ReceivePayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivePayload(FArrayReader& OutPayload, const FSimpleAbstractSocket& Socket)"
  },
  {
    "label": "SendPayloadAndReceiveResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPayloadAndReceiveResponse(const TArray<uint8>& Payload, class FArrayReader& Response, const FSimpleAbstractSocket& Socket)"
  },
  {
    "label": "FFileInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FFileInfo { bool FileExists ; bool ReadOnly ; FDateTime TimeStamp ; FDateTime AccessTimeStamp ; int64 Size ;)",
    "insertText": "FFileInfo() : FileExists(false) , ReadOnly(false) , TimeStamp(FDateTime::MinValue()) , AccessTimeStamp(FDateTime::MinValue()) , Size(-1)"
  },
  {
    "label": "FNetworkFileArchive()",
    "kind": "Method",
    "detail": "Function (} } ; class FNetworkFileArchive : public FBufferArchive { public :)",
    "insertText": "FNetworkFileArchive(uint32 Command)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this<<Command ; } FNetworkFileArchive&)",
    "insertText": "operator(FNetworkFileArchive& Ar, const TCHAR*& Str)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Temp(Str)"
  }
]