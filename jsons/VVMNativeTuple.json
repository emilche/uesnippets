[
  {
    "label": "TNativeTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNativeTuple"
  },
  {
    "label": "TGetTupleElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetTupleElem"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / IsConstructible . h \" # include \" Templates / UnrealTemplate . h \" # if)",
    "insertText": "defined(__clang__)"
  },
  {
    "label": "TNativeTuple()",
    "kind": "Method",
    "detail": "Function (template<. . . Types> struct TNativeTuple ; template<size_t Idx,Type> struct TGetTupleElem ; template<> struct TNativeTuple<> { } ; template<Type> struct TNativeTuple<Type> { Type First ;)",
    "insertText": "TNativeTuple()"
  },
  {
    "label": "TNativeTuple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TNativeTuple(const Type& Arg) : First(Arg)"
  },
  {
    "label": "TNativeTuple()",
    "kind": "Method",
    "detail": "Function (} template<TArg,= TEnableIf<TIsConstructible<Type,TArg&&>::Value>::Type>)",
    "insertText": "TNativeTuple(TArg&& Arg) : First(Forward<TArg>(Arg))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<size_t Idx> auto&)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TNativeTuple<Type>& Lhs, const TNativeTuple<Type>& Rhs)"
  },
  {
    "label": "TNativeTuple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TNativeTuple(const Type& Arg, const RestTypes&... Args) : First(Arg) , Rest(Args...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<TArg,. . . TArgs,= TEnableIf<)",
    "insertText": "sizeof(RestTypes) == sizeof...(TArgs)>::Type> TNativeTuple(TArg&& Arg, TArgs&&... Args) : First(Forward<TArg>(Arg)) , Rest(Forward<TArgs>(Args)...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<OtherType,. . . OtherRestTypes,= TEnableIf<)",
    "insertText": "sizeof(RestTypes) == sizeof...(OtherRestTypes)>::Type> TNativeTuple(const TNativeTuple<OtherType, OtherRestTypes...>& Other) : First(Other.First) , Rest(Other.Rest)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TNativeTuple<Type, RestTypes...>& Lhs, const TNativeTuple<Type, RestTypes...>& Rhs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; template<Type,. . . RestTypes> struct TGetTupleElem<0,TNativeTuple<Type,RestTypes . . .>> { Type&)",
    "insertText": "Get(TNativeTuple<Type, RestTypes...>& Data)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "decltype(auto) Get(const TNativeTuple<Type, RestTypes...>& Data)"
  }
]