[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FMenuEntryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuEntryBlock"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "IMultiBlockBaseWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMultiBlockBaseWidget"
  },
  {
    "label": "SMenuEntryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuEntryBlock"
  },
  {
    "label": "FSlateMacMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMacMenu"
  },
  {
    "label": "FMenuEntryBuildParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMenuEntryBuildParams"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBox . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" class FActiveTimerHandle ; class FMenuEntryBlock : public FMultiBlock { public :)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TSharedPtr< const FUICommandInfo > InCommand, TSharedPtr< const FUICommandList > InCommandList, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const FSlateIcon& InIconOverride = FSlateIcon(), bool bInCloseSelfOnly = false, bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FNewMenuDelegate& InEntryBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, const FSlateIcon& InIcon = FSlateIcon(), bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FOnGetContent& InMenuBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, const FSlateIcon& InIcon = FSlateIcon(), bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const TSharedPtr<SWidget>& InEntryWidget, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, const FSlateIcon& InIcon = FSlateIcon(), bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FNewMenuDelegate& InEntryBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, const FSlateIcon& InIcon, const FUIAction& InUIAction, const EUserInterfaceActionType InUserInterfaceActionType, bool bInCloseSelfOnly, bool bInShouldCloseWindowAfterMenuSelection = true, TSharedPtr< const FUICommandList > InCommandList = nullptr)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FSlateIcon& InIcon, const FUIAction& InUIAction, const EUserInterfaceActionType InUserInterfaceActionType, bool bInCloseSelfOnly, bool bInShouldCloseWindowAfterMenuSelection = true, const TAttribute<FText>& InInputBindingOverride = TAttribute<FText>())"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const FUIAction& UIAction, const TSharedRef< SWidget > Contents, const TAttribute<FText>& InToolTip, const EUserInterfaceActionType InUserInterfaceActionType, bool bInCloseSelfOnly, bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const TSharedRef< SWidget > Contents, const FNewMenuDelegate& InEntryBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const FUIAction& UIAction, const TSharedRef< SWidget > Contents, const FNewMenuDelegate& InEntryBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FName& InExtensionHook, const FUIAction& UIAction, const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FOnGetContent& InMenuBuilder, TSharedPtr<FExtender> InExtender, bool bInSubMenu, bool bInSubMenuOnClick, bool bInCloseSelfOnly, const FSlateIcon& InIcon = FSlateIcon(), bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "FMenuEntryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMenuEntryBlock(const FMenuEntryParams& InMenuEntryParams)"
  },
  {
    "label": "CreateMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMenuEntry(class FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "HasIcon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIcon()"
  },
  {
    "label": "SetCheckBoxStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCheckBoxStyle(FName InCheckBoxStyle)"
  },
  {
    "label": "IsSubMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubMenu()"
  },
  {
    "label": "IsRecursivelySearchable()",
    "kind": "Method",
    "detail": "Function (bIsRecursivelySearchable = bInRecursivelySearchable ; } bool)",
    "insertText": "IsRecursivelySearchable()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : class SMenuEntryBlock ; class FSlateMacMenu ; TAttribute<FText> LabelOverride ; TAttribute<FText> ToolTipOverride ; TAttribute<FText> InputBindingOverride ; FSlateIcon IconOverride ; FNewMenuDelegate EntryBuilder ; FOnGetContent MenuBuilder ; TSharedPtr<SWidget> EntryWidget ; bool bIsSubMenu ; bool bIsRecursivelySearchable ; bool bOpenSubMenuOnClick ; EUserInterfaceActionType UserInterfaceActionType ; bool bCloseSelfOnly ; TSharedPtr<FExtender> Extender ; bool bShouldCloseWindowAfterMenuSelection ; bool bInvertLabelOnHover ; FName CheckBoxStyle = NAME_None ; } ; class SMenuEntryBlock : public SMultiBlockBaseWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMenuEntryBlock)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SLATE_API virtual void BuildMultiBlockWidget(const ISlateStyle* StyleSet, const FName& StyleName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "MakeNewMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeNewMenuWidget()"
  },
  {
    "label": "OnMenuItemButtonClicked()",
    "kind": "Method",
    "detail": "Function (protected : struct FMenuEntryBuildParams { TSharedPtr<const FMultiBox> MultiBox ; TSharedPtr<const FMenuEntryBlock> MenuEntryBlock ; TSharedPtr<const FUICommandInfo> UICommand ; TAttribute<FText> Label ; TAttribute<FText> ToolTip ; TAttribute<FText> InputBinding ; const ISlateStyle* StyleSet ; FName StyleName ; } ; FReply)",
    "insertText": "OnMenuItemButtonClicked()"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClicked(bool bCheckBoxClicked)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsEnabledDuringEditMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledDuringEditMode()"
  },
  {
    "label": "OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCheckStateChanged(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsChecked()"
  },
  {
    "label": "OnGetCheckImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "OnGetCheckImage()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "GetMenuBarButtonBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMenuBarButtonBorder()"
  },
  {
    "label": "GetMenuBarForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetMenuBarForegroundColor()"
  },
  {
    "label": "BuildMenuBarWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuBarWidget(const FMenuEntryBuildParams& InBuildParams)"
  },
  {
    "label": "FindTextBlockWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "FindTextBlockWidget(TSharedRef<SWidget> Content)"
  },
  {
    "label": "BuildMenuEntryWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuEntryWidget(const FMenuEntryBuildParams& InBuildParams)"
  },
  {
    "label": "BuildSubMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildSubMenuWidget(const FMenuEntryBuildParams& InBuildParams)"
  },
  {
    "label": "RequestSubMenuToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSubMenuToggle(bool bOpenMenu, const bool bClobber)"
  },
  {
    "label": "CancelPendingSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingSubMenu()"
  },
  {
    "label": "ShouldSubMenuAppearHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSubMenuAppearHovered()"
  },
  {
    "label": "GetFilteredToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilteredToolTipText(TAttribute<FText> ToolTipText)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "TintOnHover()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "TintOnHover()"
  },
  {
    "label": "InvertOnHover()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "InvertOnHover()"
  },
  {
    "label": "GetCheckBoxImageBrushFromStyle()",
    "kind": "Method",
    "detail": "Function (private : const FSlateBrush*)",
    "insertText": "GetCheckBoxImageBrushFromStyle(const FCheckBoxStyle* Style)"
  },
  {
    "label": "UpdateSubMenuState()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateSubMenuState(double InCurrentTime, float InDeltaTime, bool bWantsOpen)"
  }
]