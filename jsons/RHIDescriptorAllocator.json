[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIDescriptorHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDescriptorHandle"
  },
  {
    "label": "FRHIDescriptorAllocatorRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDescriptorAllocatorRange"
  },
  {
    "label": "FRHIDescriptorAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDescriptorAllocator"
  },
  {
    "label": "FRHIHeapDescriptorAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIHeapDescriptorAllocator"
  },
  {
    "label": "FRHIOffsetHeapDescriptorAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIOffsetHeapDescriptorAllocator"
  },
  {
    "label": "FRHIDescriptorAllocatorRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / CriticalSection . h \" # include \" Stats / Stats . h \" enum class ERHIDescriptorHeapType : uint8 ; struct FRHIDescriptorHandle ; struct FRHIDescriptorAllocatorRange {)",
    "insertText": "FRHIDescriptorAllocatorRange(uint32 InFirst, uint32 InLast) : First(InFirst), Last(InLast)"
  },
  {
    "label": "FRHIDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (} uint32 First ; uint32 Last ; } ; class FRHIDescriptorAllocator { public :)",
    "insertText": "FRHIDescriptorAllocator()"
  },
  {
    "label": "FRHIDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIDescriptorAllocator(uint32 InNumDescriptors, TConstArrayView<TStatId> InStats)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 InNumDescriptors, TConstArrayView<TStatId> InStats)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "ResizeGrowAndAllocate()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "ResizeGrowAndAllocate(uint32 InNewNumDescriptors, ERHIDescriptorHeapType InType)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "Allocate(ERHIDescriptorHeapType InType)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FRHIDescriptorHandle InHandle)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Allocate(uint32 NumDescriptors, uint32& OutSlot)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(uint32 Slot, uint32 NumDescriptors)"
  },
  {
    "label": "GetAllocatedRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocatedRange(FRHIDescriptorAllocatorRange& OutRange)"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "RecordAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordAlloc(uint32 Count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "for(TStatId Stat : Stats)"
  },
  {
    "label": "INC_DWORD_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_DWORD_STAT_BY_FName(Stat.GetName(), Count)"
  },
  {
    "label": "RecordFree()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "RecordFree(uint32 Count)"
  },
  {
    "label": "DEC_DWORD_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT_BY_FName(Stat.GetName(), Count)"
  },
  {
    "label": "FRHIHeapDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (} # endif } TArray<FRHIDescriptorAllocatorRange> Ranges ; uint32 Capacity = 0 ; FCriticalSection CriticalSection ; # if STATS TArray<TStatId> Stats ; # endif } ; class FRHIHeapDescriptorAllocator : protected FRHIDescriptorAllocator { public :)",
    "insertText": "FRHIHeapDescriptorAllocator()"
  },
  {
    "label": "FRHIHeapDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIHeapDescriptorAllocator(ERHIDescriptorHeapType InType, uint32 InDescriptorCount, TConstArrayView<TStatId> InStats)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "Allocate()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (using FRHIDescriptorAllocator::GetAllocatedRange ; using FRHIDescriptorAllocator::GetCapacity ; using FRHIDescriptorAllocator::ResizeGrowAndAllocate ; ERHIDescriptorHeapType)",
    "insertText": "GetType()"
  },
  {
    "label": "FRHIOffsetHeapDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (} private : ERHIDescriptorHeapType Type ; } ; class FRHIOffsetHeapDescriptorAllocator : protected FRHIHeapDescriptorAllocator { public :)",
    "insertText": "FRHIOffsetHeapDescriptorAllocator()"
  },
  {
    "label": "FRHIOffsetHeapDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIOffsetHeapDescriptorAllocator(ERHIDescriptorHeapType InType, uint32 InDescriptorCount, uint32 InHeapOffset, TConstArrayView<TStatId> InStats)"
  }
]