[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FSceneTextureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureParameters"
  },
  {
    "label": "FTranslucencyPassResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyPassResources"
  },
  {
    "label": "FTemporalAAHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporalAAHistory"
  },
  {
    "label": "FPhysicalCocModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicalCocModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBokehModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBokehModel"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" PostProcess / PostProcessing . h \" class FViewInfo ; class FSceneTextureParameters ; struct FTranslucencyPassResources ; struct FTemporalAAHistory ; namespace DiaphragmDOF { bool)",
    "insertText": "IsEnabled(const FViewInfo& View)"
  },
  {
    "label": "CircleDofHalfCoc()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "CircleDofHalfCoc(const FViewInfo& View)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (struct FPhysicalCocModel { float SensorWidth ; float SensorHeight ; float RenderingAspectRatio ; float VerticalFocalLength ; float FStops ; float InfinityBackgroundCocRadius ; bool bEnableDynamicOffset ; float InFocusRadius ; FRHITexture* DynamicRadiusOffsetLUT ; float MinForegroundCocRadius ; float MaxBackgroundCocRadius ; float FocusDistance ; float Squeeze ; float MaxDepthBlurRadius ; float DepthBlurExponent ; void)",
    "insertText": "Compile(const FViewInfo& View)"
  },
  {
    "label": "GetLensRadius()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetLensRadius()"
  },
  {
    "label": "DepthToResCocRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DepthToResCocRadius(float SceneDepth, float HorizontalResolution)"
  },
  {
    "label": "ComputeViewMinForegroundCocRadius()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ComputeViewMinForegroundCocRadius(float HorizontalResolution)"
  },
  {
    "label": "GetCocOffset()",
    "kind": "Method",
    "detail": "Function (} private : float)",
    "insertText": "GetCocOffset(float CocRadius)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsSupported(const FStaticShaderPlatform ShaderPlatform)"
  },
  {
    "label": "AddPasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPasses(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, FRDGTextureRef InputSceneColor, const FTranslucencyPassResources& TranslucencyViewResources, FRDGTextureRef& OutputColor)"
  }
]