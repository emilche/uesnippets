[
  {
    "label": "RAIIResizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RAIIResizer"
  },
  {
    "label": "ZlibCompressAppend()",
    "kind": "Method",
    "detail": "Function (# include \" DxilCompression . h \" # include \" llvm / ADT / SmallVector . h \" # include<vector> namespace hlsl { template<Buffer> ZlibResult)",
    "insertText": "ZlibCompressAppend(IMalloc *pMalloc, const void *pData, size_t dataSize, Buffer &outBuffer)"
  },
  {
    "label": "RAIIResizer()",
    "kind": "Method",
    "detail": "Function (class RAIIResizer { Buffer& m_Buffer ; size_t m_OriginalSize ; bool m_Resize = true ; public :)",
    "insertText": "RAIIResizer(Buffer &buffer) : m_Buffer(buffer), m_OriginalSize(buffer.size())"
  },
  {
    "label": "RAIIResizer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RAIIResizer()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_Buffer .)",
    "insertText": "resize(m_OriginalSize)"
  },
  {
    "label": "DoNotResize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DoNotResize()"
  },
  {
    "label": "resizer()",
    "kind": "Method",
    "detail": "Function (m_Resize = false ; } } ; RAIIResizer)",
    "insertText": "resizer(outBuffer)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t sizeBeforeCompress = outBuffer .)",
    "insertText": "size()"
  },
  {
    "label": "ZlibCompress()",
    "kind": "Method",
    "detail": "Function (size_t compressedDataSize = 0 ; ZlibResult ret =)",
    "insertText": "ZlibCompress(pMalloc, pData, dataSize, &outBuffer, [](void *pUserData, size_t requiredSize) -> void * { Buffer *pBuffer = (Buffer *)pUserData; const size_t lastSize = pBuffer->size(); pBuffer->resize(pBuffer->size() + requiredSize); void *ptr = pBuffer->data() + lastSize; return ptr; }, &compressedDataSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (outBuffer .)",
    "insertText": "resize(sizeBeforeCompress + compressedDataSize)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (} return ret ; } template ZlibResult ZlibCompressAppend<llvm::SmallVectorImpl<)",
    "insertText": "char(IMalloc *pMalloc, const void *pData, size_t dataSize, llvm::SmallVectorImpl<char> &outBuffer)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (template ZlibResult ZlibCompressAppend<llvm::SmallVectorImpl<)",
    "insertText": "uint8_t(IMalloc *pMalloc, const void *pData, size_t dataSize, llvm::SmallVectorImpl<uint8_t> &outBuffer)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (template ZlibResult ZlibCompressAppend<std::vector<)",
    "insertText": "char(IMalloc *pMalloc, const void *pData, size_t dataSize, std::vector<char> &outBuffer)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (template ZlibResult ZlibCompressAppend<std::vector<)",
    "insertText": "uint8_t(IMalloc *pMalloc, const void *pData, size_t dataSize, std::vector<uint8_t> &outBuffer)"
  }
]