[
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "CDiagnostics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDiagnostics"
  },
  {
    "label": "CSyntaxFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSyntaxFunction"
  },
  {
    "label": "CIrGeneratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CIrGeneratorImpl"
  },
  {
    "label": "GenerateIr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Text / Symbol . h \" # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / UniquePointer . h \" # include \" uLang / CompilerPasses / CompilerTypes . h \" # include \" uLang / CompilerPasses / SemanticAnalyzerPassUtils . h \" namespace uLang { class CSemanticProgram ; class CDiagnostics ; class CSyntaxFunction ; class CIrGeneratorImpl ; bool)",
    "insertText": "GenerateIr(const TSRef<CSemanticProgram>& Program, const TSRef<CDiagnostics>& Diagnostics, SBuildParams::EWhichVM TargetVM)"
  }
]