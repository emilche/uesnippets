[
  {
    "label": "TopologyDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyDescriptor"
  },
  {
    "label": "FVarChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVarChannel"
  },
  {
    "label": "FVarChannel()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_TOPOLOGY_DESCRIPTOR_H # define OPENSUBDIV3_FAR_TOPOLOGY_DESCRIPTOR_H # include \" . . / version . h \" # include \" . . / far / topologyRefiner . h \" # include \" . . / far / topologyRefinerFactory . h \" # include \" . . / far / error . h \" # include<cassert> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { struct TopologyDescriptor { int numVertices,numFaces ; int const* numVertsPerFace ; Index const* vertIndicesPerFace ; int numCreases ; Index const* creaseVertexIndexPairs ; float const* creaseWeights ; int numCorners ; Index const* cornerVertexIndices ; float const* cornerWeights ; int numHoles ; Index const* holeIndices ; bool isLeftHanded ; struct FVarChannel { int numValues ; Index const* valueIndices ;)",
    "insertText": "FVarChannel() : numValues(0), valueIndices(0)"
  },
  {
    "label": "TopologyDescriptor()",
    "kind": "Method",
    "detail": "Function (} } ; int numFVarChannels ; FVarChannel const* fvarChannels ;)",
    "insertText": "TopologyDescriptor()"
  },
  {
    "label": "resizeComponentTopology()",
    "kind": "Method",
    "detail": "Function (} ; template<> bool TopologyRefinerFactory<TopologyDescriptor)",
    "insertText": "resizeComponentTopology(TopologyRefiner & refiner, TopologyDescriptor const & desc)"
  },
  {
    "label": "assignComponentTopology()",
    "kind": "Method",
    "detail": "Function (template<> bool TopologyRefinerFactory<TopologyDescriptor)",
    "insertText": "assignComponentTopology(TopologyRefiner & refiner, TopologyDescriptor const & desc)"
  },
  {
    "label": "assignComponentTags()",
    "kind": "Method",
    "detail": "Function (template<> bool TopologyRefinerFactory<TopologyDescriptor)",
    "insertText": "assignComponentTags(TopologyRefiner & refiner, TopologyDescriptor const & desc)"
  },
  {
    "label": "assignFaceVaryingTopology()",
    "kind": "Method",
    "detail": "Function (template<> bool TopologyRefinerFactory<TopologyDescriptor)",
    "insertText": "assignFaceVaryingTopology(TopologyRefiner & refiner, TopologyDescriptor const & desc)"
  },
  {
    "label": "reportInvalidTopology()",
    "kind": "Method",
    "detail": "Function (template<> void TopologyRefinerFactory<TopologyDescriptor)",
    "insertText": "reportInvalidTopology(TopologyError errCode, char const * msg, TopologyDescriptor const & desc)"
  }
]