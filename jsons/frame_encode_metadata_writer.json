[
  {
    "label": "FrameEncodeMetadataWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncodeMetadataWriter"
  },
  {
    "label": "FrameMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameMetadata"
  },
  {
    "label": "TimingFramesLayerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingFramesLayerInfo"
  },
  {
    "label": "FrameEncodeMetadataWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_FRAME_ENCODE_METADATA_WRITER_H_ # define VIDEO_FRAME_ENCODE_METADATA_WRITER_H_ # include<list> # include<vector> # include \" absl / types / optional . h \" # include \" api / video / encoded_image . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class FrameEncodeMetadataWriter { public :)",
    "insertText": "FrameEncodeMetadataWriter(EncodedImageCallback* frame_drop_callback)"
  },
  {
    "label": "FrameEncodeMetadataWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameEncodeMetadataWriter()"
  },
  {
    "label": "OnEncoderInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderInit(const VideoCodec& codec)"
  },
  {
    "label": "OnSetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetRates(const VideoBitrateAllocation& bitrate_allocation, uint32_t framerate_fps)"
  },
  {
    "label": "OnEncodeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeStarted(const VideoFrame& frame)"
  },
  {
    "label": "FillTimingInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillTimingInfo(size_t simulcast_svc_idx, EncodedImage* encoded_image)"
  },
  {
    "label": "UpdateBitstream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBitstream(const CodecSpecificInfo* codec_specific_info, EncodedImage* encoded_image)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ExtractEncodeStartTimeAndFillMetadata()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<int64_t>)",
    "insertText": "ExtractEncodeStartTimeAndFillMetadata(size_t simulcast_svc_idx, EncodedImage* encoded_image) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "TimingFramesLayerInfo()",
    "kind": "Method",
    "detail": "Function (struct FrameMetadata { uint32_t rtp_timestamp ; int64_t encode_start_time_ms ; int64_t ntp_time_ms = 0 ; int64_t timestamp_us = 0 ; VideoRotation rotation = kVideoRotation_0 ; absl::optional<ColorSpace> color_space ; RtpPacketInfos packet_infos ; } ; struct TimingFramesLayerInfo {)",
    "insertText": "TimingFramesLayerInfo()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (size_t target_bitrate_bytes_per_sec = 0 ; std::list<FrameMetadata> frames ; } ; Mutex lock_ ; EncodedImageCallback* const frame_drop_callback_ ; VideoCodec codec_settings_)",
    "insertText": "RTC_GUARDED_BY(&lock_)"
  }
]