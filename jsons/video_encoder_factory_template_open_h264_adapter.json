[
  {
    "label": "OpenH264EncoderTemplateAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpenH264EncoderTemplateAdapter"
  },
  {
    "label": "SupportedFormats()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_ENCODER_FACTORY_TEMPLATE_OPEN_H264_ADAPTER_H_ # define API_VIDEO_CODECS_VIDEO_ENCODER_FACTORY_TEMPLATE_OPEN_H264_ADAPTER_H_ # include<memory> # include<vector> # include \" modules / video_coding / codecs / h264 / include / h264 . h \" namespace webrtc { struct OpenH264EncoderTemplateAdapter { std::vector<SdpVideoFormat>)",
    "insertText": "SupportedFormats()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_H264) return SupportedH264Codecs( true)"
  },
  {
    "label": "CreateEncoder()",
    "kind": "Method",
    "detail": "Function (# else return { } ; # endif } std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateEncoder(const SdpVideoFormat& format)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_H264) return H264Encoder::Create(cricket::VideoCodec(format))"
  },
  {
    "label": "IsScalabilityModeSupported()",
    "kind": "Method",
    "detail": "Function (# else return nullptr ; # endif } bool)",
    "insertText": "IsScalabilityModeSupported(ScalabilityMode scalability_mode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_H264) return H264Encoder::SupportsScalabilityMode(scalability_mode)"
  }
]