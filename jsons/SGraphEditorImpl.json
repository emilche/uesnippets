[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SNotificationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FGraphContextMenuArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphContextMenuArguments"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FAlignmentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignmentData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAlignmentHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignmentHelper"
  },
  {
    "label": "SGraphEditorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditorImpl"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FGraphNodeFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeFactory"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "TargetPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "TargetPosition(Entry.Node->NodePosX, Entry.Node->NodePosY)"
  },
  {
    "label": "GetAlignmentDataForNode()",
    "kind": "Method",
    "detail": "Function (FAlignmentData)",
    "insertText": "GetAlignmentDataForNode(UEdGraphNode* Node)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "OnClosedActionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosedActionMenu()"
  },
  {
    "label": "GraphEd_OnGetContextMenuFor()",
    "kind": "Method",
    "detail": "Function (FActionMenuContent)",
    "insertText": "GraphEd_OnGetContextMenuFor(const FGraphContextMenuArguments& SpawnInfo)"
  },
  {
    "label": "GraphEd_OnPanelUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GraphEd_OnPanelUpdated()"
  },
  {
    "label": "FocusLockedEditorHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusLockedEditorHere()"
  },
  {
    "label": "ReconstructNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructNodes()"
  },
  {
    "label": "BreakNodeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakNodeLinks()"
  },
  {
    "label": "SummonCreateNodeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonCreateNodeMenu()"
  },
  {
    "label": "GetNodeParentContextMenuName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeParentContextMenuName(UClass* InClass)"
  },
  {
    "label": "GetNodeContextMenuName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeContextMenuName(UClass* InClass)"
  },
  {
    "label": "AddContextMenuCommentSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContextMenuCommentSection(UToolMenu* InMenu)"
  },
  {
    "label": "HandleFocusEditorDeferred()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleFocusEditorDeferred(double InCurrentTime, float InDeltaTime)"
  }
]