[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SNotificationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FGraphContextMenuArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphContextMenuArguments"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FAlignmentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignmentData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAlignmentHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignmentHelper"
  },
  {
    "label": "SGraphEditorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditorImpl"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FGraphNodeFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeFactory"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FAlignmentData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraph . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" GraphEditor . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Guid . h \" # include \" Styling / SlateColor . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Types / WidgetActiveTimerDelegate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SOverlay . h \" class FActiveTimerHandle ; class FUICommandList ; class SGraphPanel ; class SNotificationList ; class SWidget ; class UClass ; class UToolMenu ; struct FDiffSingleResult ; struct FEdGraphEditAction ; struct FFocusEvent ; struct FGeometry ; struct FGraphContextMenuArguments ; struct FKeyEvent ; struct FNotificationInfo ; struct FPointerEvent ; struct FToolMenuContext ; struct FAlignmentData {)",
    "insertText": "FAlignmentData(UEdGraphNode* InNode, int32& InTargetProperty, float InTargetOffset) : Node(InNode), TargetProperty(InTargetProperty), TargetOffset(InTargetOffset)"
  },
  {
    "label": "GetTarget()",
    "kind": "Method",
    "detail": "Function (} UEdGraphNode* Node ; int32& TargetProperty ; float TargetOffset ; float)",
    "insertText": "GetTarget()"
  },
  {
    "label": "FAlignmentHelper()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EAlignType : uint8 { Minimum,Middle,Maximum } ; struct FAlignmentHelper {)",
    "insertText": "FAlignmentHelper(TSharedRef<SGraphEditor> InGraphEditor, EOrientation InOrientation, EAlignType InAlignType) : GraphEditor(MoveTemp(InGraphEditor))"
  },
  {
    "label": "GetGraphNodeForMenu()",
    "kind": "Method",
    "detail": "Function (CardinalNode = GraphEditor ->)",
    "insertText": "GetGraphNodeForMenu()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Orientation = InOrientation ; AlignType = InAlignType ;)",
    "insertText": "for(UObject* It : GraphEditor->GetSelectedNodes())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AlignmentData .)",
    "insertText": "Add(GetAlignmentDataForNode(Node))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} } AlignmentData .)",
    "insertText": "Sort([](const FAlignmentData& A, const FAlignmentData& B) { return A.GetTarget() < B.GetTarget(); })"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Align()"
  },
  {
    "label": "GetGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph* Graph = AlignmentData [ 0 ] . Node ->)",
    "insertText": "GetGraph()"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (const UEdGraphSchema* Schema = Graph ->)",
    "insertText": "GetSchema()"
  },
  {
    "label": "DetermineAlignmentTarget()",
    "kind": "Method",
    "detail": "Function (float Target =)",
    "insertText": "DetermineAlignmentTarget()"
  },
  {
    "label": "TargetPosition()",
    "kind": "Method",
    "detail": "Function (int32 TargetProperty = Target - Entry . TargetOffset ; FVector2D)",
    "insertText": "TargetPosition(Entry.Node->NodePosX, Entry.Node->NodePosY)"
  },
  {
    "label": "SetNodePosition()",
    "kind": "Method",
    "detail": "Function (TargetPosition . X = TargetProperty ; } else { TargetPosition . Y = TargetProperty ; } Schema ->)",
    "insertText": "SetNodePosition(Entry.Node, TargetPosition)"
  },
  {
    "label": "GetAlignmentDataForNode()",
    "kind": "Method",
    "detail": "Function (} } } } } private : FAlignmentData)",
    "insertText": "GetAlignmentDataForNode(UEdGraphNode* Node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AlignType == EAlignType::Minimum)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float Target = TNumericLimits<float)",
    "insertText": "Max()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Target =)",
    "insertText": "Min(Target, Entry.GetTarget())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return Target ; } else)",
    "insertText": "if(AlignType == EAlignType::Maximum)"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (float Target = TNumericLimits<float)",
    "insertText": "Lowest()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Target =)",
    "insertText": "Max(Target, Entry.GetTarget())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} return Target ; } else { float SumTotal = 0 . f ;)",
    "insertText": "for(const FAlignmentData& Entry : AlignmentData)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return SumTotal / AlignmentData .)",
    "insertText": "Num()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SGraphEditor> GraphEditor ; EOrientation Orientation ; EAlignType AlignType ; UEdGraphNode* CardinalNode ; TArray<FAlignmentData> AlignmentData ; } ; class SGraphEditorImpl : public SGraphEditor { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphEditorImpl ) : _AdditionalCommands( TSharedPtr<FUICommandList>() ) , _IsEditable(true) , _DisplayAsReadOnly(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FUICommandList>, AdditionalCommands) SLATE_ATTRIBUTE( bool, IsEditable ) SLATE_ATTRIBUTE( bool, DisplayAsReadOnly ) SLATE_ARGUMENT( TSharedPtr<SWidget>, TitleBar ) SLATE_ATTRIBUTE( FGraphAppearanceInfo, Appearance ) SLATE_ARGUMENT( UEdGraph*, GraphToEdit ) SLATE_ARGUMENT(TSharedPtr<TArray<FDiffSingleResult>>, DiffResults ) SLATE_ATTRIBUTE(int32, FocusedDiffResult ) SLATE_ARGUMENT(SGraphEditor::FGraphEditorEvents, GraphEvents) SLATE_ARGUMENT(bool, AutoExpandActionMenu) SLATE_EVENT(FSimpleDelegate, OnNavigateHistoryBack) SLATE_EVENT(FSimpleDelegate, OnNavigateHistoryForward) SLATE_ATTRIBUTE(bool, ShowGraphStateOverlay) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "PIENotification()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FUICommandList> Commands ; TSet<UEdGraphNode*> SelectedNodeCache ; SOverlay::FOverlaySlot* GraphPanelSlot ; TSharedPtr<SGraphPanel> GraphPanel ; TSharedPtr<SWidget> TitleBar ; FEdGraphPinReference GraphPinForMenu ; TWeakObjectPtr<UEdGraphNode> GraphNodeForMenu ; bool bResetMenuContext ; TAttribute<FGraphAppearanceInfo> Appearance ; SGraphEditor::FOnFocused OnFocused ; SGraphEditor::FOnCreateActionMenu OnCreateActionMenu ; SGraphEditor::FOnCreateNodeOrPinMenu OnCreateNodeOrPinMenu ; TAttribute<bool> IsEditable ; TAttribute<bool> DisplayAsReadOnly ; bool bAutoExpandActionMenu ; TAttribute<bool> ShowGraphStateOverlay ; TArray<TWeakPtr<SGraphEditor>> LockedGraphs ; EVisibility)",
    "insertText": "PIENotification()"
  },
  {
    "label": "ReadOnlyVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ReadOnlyVisibility()"
  },
  {
    "label": "GetInstructionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetInstructionText()"
  },
  {
    "label": "InstructionTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "InstructionTextVisibility()"
  },
  {
    "label": "GetInstructionTextFade()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstructionTextFade()"
  },
  {
    "label": "InstructionTextTint()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "InstructionTextTint()"
  },
  {
    "label": "InstructionBorderColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "InstructionBorderColor()"
  },
  {
    "label": "SGraphEditorImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SNotificationList> NotificationListPtr ; FSimpleDelegate OnNavigateHistoryBack ; FSimpleDelegate OnNavigateHistoryForward ; FOnNodeSpawnedByKeymap OnNodeSpawnedByKeymap ; public : ~)",
    "insertText": "SGraphEditorImpl()"
  },
  {
    "label": "OnClosedActionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosedActionMenu()"
  },
  {
    "label": "GraphEd_OnGetContextMenuFor()",
    "kind": "Method",
    "detail": "Function (FActionMenuContent)",
    "insertText": "GraphEd_OnGetContextMenuFor(const FGraphContextMenuArguments& SpawnInfo)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "FocusLockedEditorHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusLockedEditorHere()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (const TSet<class UObject*>&)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "ClearSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionSet()"
  },
  {
    "label": "SetNodeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeSelection(UEdGraphNode* Node, bool bSelect)"
  },
  {
    "label": "SelectAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllNodes()"
  },
  {
    "label": "GetPasteLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetPasteLocation()"
  },
  {
    "label": "IsNodeTitleVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeTitleVisible(const UEdGraphNode* Node, bool bRequestRename)"
  },
  {
    "label": "JumpToNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToNode(const UEdGraphNode* JumpToMe, bool bRequestRename = false, bool bSelectNode = true)"
  },
  {
    "label": "JumpToPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToPin(const UEdGraphPin* JumpToMe)"
  },
  {
    "label": "GetGraphPinForMenu()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetGraphPinForMenu()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(bool bOnlySelection)"
  },
  {
    "label": "GetBoundsForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForSelectedNodes(class FSlateRect& Rect, float Padding)"
  },
  {
    "label": "GetBoundsForNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForNode(const UEdGraphNode* InNode, class FSlateRect& Rect, float Padding)"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged()"
  },
  {
    "label": "GetTitleBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetTitleBar()"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewLocation(const FVector2D& Location, float ZoomAmount, const FGuid& BookmarkId = FGuid())"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewLocation(FVector2D& Location, float& ZoomAmount)"
  },
  {
    "label": "GetViewBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewBookmark(FGuid& BookmarkId)"
  },
  {
    "label": "LockToGraphEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockToGraphEditor(TWeakPtr<SGraphEditor> Other)"
  },
  {
    "label": "UnlockFromGraphEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockFromGraphEditor(TWeakPtr<SGraphEditor> Other)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotification(FNotificationInfo& Info, bool bSuccess)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SNotificationItem>)",
    "insertText": "AddNotification(FNotificationInfo& Info)"
  },
  {
    "label": "SetPinVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinVisibility(SGraphEditor::EPinVisibility Visibility)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FActiveTimerHandle>)",
    "insertText": "RegisterActiveTimer(float TickPeriod, FWidgetActiveTimerDelegate TickFunction)"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenConnections()"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenConnections(UEdGraphPin* SourcePin, UEdGraphPin* PinToAlign)"
  },
  {
    "label": "RefreshNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNode(UEdGraphNode& Node)"
  },
  {
    "label": "CaptureKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureKeyboard()"
  },
  {
    "label": "SetNodeFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeFactory(const TSharedRef<class FGraphNodeFactory>& NewNodeFactory)"
  },
  {
    "label": "OnAlignTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignTop()"
  },
  {
    "label": "OnAlignMiddle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignMiddle()"
  },
  {
    "label": "OnAlignBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignBottom()"
  },
  {
    "label": "OnAlignLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignLeft()"
  },
  {
    "label": "OnAlignCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignCenter()"
  },
  {
    "label": "OnAlignRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignRight()"
  },
  {
    "label": "OnStraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStraightenConnections()"
  },
  {
    "label": "OnDistributeNodesH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDistributeNodesH()"
  },
  {
    "label": "OnDistributeNodesV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDistributeNodesV()"
  },
  {
    "label": "GetNumberOfSelectedNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSelectedNodes()"
  },
  {
    "label": "GetSingleSelectedNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "GetSingleSelectedNode()"
  },
  {
    "label": "GetGraphPanel()",
    "kind": "Method",
    "detail": "Function (SGraphPanel*)",
    "insertText": "GetGraphPanel()"
  },
  {
    "label": "CanReconstructNodes()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanReconstructNodes()"
  },
  {
    "label": "CanBreakNodeLinks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBreakNodeLinks()"
  },
  {
    "label": "CanSummonCreateNodeMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSummonCreateNodeMenu()"
  },
  {
    "label": "ReconstructNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructNodes()"
  },
  {
    "label": "BreakNodeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakNodeLinks()"
  },
  {
    "label": "SummonCreateNodeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonCreateNodeMenu()"
  },
  {
    "label": "OnGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphChanged(const FEdGraphEditAction& InAction)"
  },
  {
    "label": "GetZoomText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetZoomText()"
  },
  {
    "label": "GetZoomTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetZoomTextColorAndOpacity()"
  },
  {
    "label": "IsGraphEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphEditable()"
  },
  {
    "label": "DisplayGraphAsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisplayGraphAsReadOnly()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "RegisterContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterContextMenu(const class UEdGraphSchema* Schema, struct FToolMenuContext& MenuContext)"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (class UToolMenu*)",
    "insertText": "GenerateContextMenu(const class UEdGraphSchema* Schema, struct FToolMenuContext& MenuContext)"
  },
  {
    "label": "GetNodeParentContextMenuName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeParentContextMenuName(UClass* InClass)"
  },
  {
    "label": "GetNodeContextMenuName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeContextMenuName(UClass* InClass)"
  },
  {
    "label": "AddContextMenuCommentSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContextMenuCommentSection(UToolMenu* InMenu)"
  },
  {
    "label": "GetPinContextMenuActionsForSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPinContextMenuActionsForSchema(UToolMenu* InMenu)"
  },
  {
    "label": "ExecuteBreakPinLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteBreakPinLinks(const FToolMenuContext& InContext)"
  },
  {
    "label": "IsBreakPinLinksVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBreakPinLinksVisible(const FToolMenuContext& InContext)"
  },
  {
    "label": "IsBreakThisLinkVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBreakThisLinkVisible(const FToolMenuContext& InContext)"
  },
  {
    "label": "HasAnyLinkedPins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyLinkedPins(const FToolMenuContext& InContext)"
  },
  {
    "label": "ExecuteSelectConnectedNodesFromPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSelectConnectedNodesFromPin(const FToolMenuContext& InContext)"
  },
  {
    "label": "SelectAllNodesInDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllNodesInDirection(const UEdGraphPin* InGraphPin)"
  },
  {
    "label": "IsSelectConnectedNodesFromPinVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectConnectedNodesFromPinVisible(const FToolMenuContext& InContext, EEdGraphPinDirection DirectionToSelect)"
  },
  {
    "label": "HandleFocusEditorDeferred()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleFocusEditorDeferred(double InCurrentTime, float InDeltaTime)"
  }
]