[
  {
    "label": "SProjectLauncherCookModeSelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherCookModeSelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / CoreStyle . h \" # include \" ILauncherProfile . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Widgets / Input / SComboButton . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherCookModeSelector \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSProjectLauncherCookModeSelected, ELauncherProfileCookModes::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherCookModeSelector)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnSProjectLauncherCookModeSelected, OnCookModeSelected) SLATE_ATTRIBUTE(FText, Text) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (OnCookModeSelected = InArgs . _OnCookModeSelected ; FMenuBuilder)",
    "insertText": "MenuBuilder(true, NULL)"
  },
  {
    "label": "ByTheBookAction()",
    "kind": "Method",
    "detail": "Function ({ FUIAction)",
    "insertText": "ByTheBookAction(FExecuteAction::CreateSP(this, &SProjectLauncherCookModeSelector::HandleMenuEntryClicked, ELauncherProfileCookModes::ByTheBook))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"ByTheBookAction\", \"By the book\"), LOCTEXT(\"ByTheBookActionHint\", \"Specify which content should be cooked and cook everything in advance prior to launching the game.\"), FSlateIcon(), ByTheBookAction)"
  },
  {
    "label": "OnTheFlyAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "OnTheFlyAction(FExecuteAction::CreateSP(this, &SProjectLauncherCookModeSelector::HandleMenuEntryClicked, ELauncherProfileCookModes::OnTheFly))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"OnTheFlyAction\", \"On the fly\"), LOCTEXT(\"OnTheFlyActionHint\", \"Cook the content at run-time before it is being sent to the device.\"), FSlateIcon(), OnTheFlyAction)"
  },
  {
    "label": "DoNotCookAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "DoNotCookAction(FExecuteAction::CreateSP(this, &SProjectLauncherCookModeSelector::HandleMenuEntryClicked, ELauncherProfileCookModes::DoNotCook))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"DoNotCookAction\", \"Do not cook\"), LOCTEXT(\"DoNotCookActionHint\", \"Do not cook the content at this time.\"), FSlateIcon(), DoNotCookAction)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [)",
    "insertText": "SNew(SComboButton) .VAlign(VAlign_Center) .ButtonContent() [ SNew(STextBlock) .Font(FCoreStyle::Get().GetFontStyle(TEXT(\"SmallFont\"))) .Text(InArgs._Text) ] .ContentPadding(FMargin(6.0f, 0.0f)) .MenuContent() [ MenuBuilder.MakeWidget()"
  },
  {
    "label": "HandleMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleMenuEntryClicked(ELauncherProfileCookModes::Type CookMode)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnCookModeSelected .)",
    "insertText": "ExecuteIfBound(CookMode)"
  }
]