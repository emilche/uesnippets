[
  {
    "label": "FBlueprintActionDatabaseRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintActionDatabaseRegistrar"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UAnimGraphNode_SaveCachedPose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_SaveCachedPose"
  },
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AnimGraphNode_Base . h \" # include \" EdGraph / EdGraphNodeUtils . h \" # include \" Kismet2 / Kismet2NameValidators . h \" # include \" Animation / AnimNode_SaveCachedPose . h \" # include \" AnimGraphNode_SaveCachedPose . generated . h \" class FBlueprintActionDatabaseRegistrar ; class UEdGraph ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=Settings)"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetNodeTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNodeTitle(ENodeTitleType::Type TitleType)"
  },
  {
    "label": "OnRenameNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameNode(const FString& NewName)"
  },
  {
    "label": "MakeNameValidator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class INameValidatorInterface>)",
    "insertText": "MakeNameValidator()"
  },
  {
    "label": "IsCompatibleWithGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithGraph(const UEdGraph* TargetGraph)"
  },
  {
    "label": "IsNodeRootSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeRootSet()"
  },
  {
    "label": "GetNodeCategory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeCategory()"
  },
  {
    "label": "IsSinkNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSinkNode()"
  }
]