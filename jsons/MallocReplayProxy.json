[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FMallocReplayProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocReplayProxy"
  },
  {
    "label": "FHistoryEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHistoryEntry"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ScopeLock . h \" class FOutputDevice ; class UWorld ; struct FGenericMemoryStats ; # if !)",
    "insertText": "defined(UE_USE_MALLOC_REPLAY_PROXY) #define UE_USE_MALLOC_REPLAY_PROXY (PLATFORM_UNIX && !UE_BUILD_SHIPPING)"
  },
  {
    "label": "AddToHistory()",
    "kind": "Method",
    "detail": "Function (private : FMalloc* UsedMalloc ; private : enum { HistoryCacheSize = 1 6 3 8 4 } ; struct FHistoryEntry { const char* Operation ; void* PointerOut ; void* PointerIn ; SIZE_T Size ; uint32 Alignment ; } ; FHistoryEntry HistoryCache [ HistoryCacheSize ] ; int32 CurrentCacheIdx ; uint64 OperationNumber ; FCriticalSection HistoryLock ; FILE* HistoryFile ; void)",
    "insertText": "AddToHistory(const char *Op, void * PtrOut, void * PtrIn, SIZE_T Size, SIZE_T Alignment)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&HistoryLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HistoryCache [ CurrentCacheIdx ] . Operation = Op ; HistoryCache [ CurrentCacheIdx ] . PointerOut = PtrOut ; HistoryCache [ CurrentCacheIdx ] . PointerIn = PtrIn ; HistoryCache [ CurrentCacheIdx ] . Size = Size ; HistoryCache [ CurrentCacheIdx ] . Alignment = Alignment ; + + CurrentCacheIdx ;)",
    "insertText": "if(CurrentCacheIdx > HistoryCacheSize - 1)"
  },
  {
    "label": "DumpHistoryToDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpHistoryToDisk()"
  },
  {
    "label": "FMallocReplayProxy()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMallocReplayProxy(FMalloc* InMalloc)"
  },
  {
    "label": "FMallocReplayProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMallocReplayProxy()"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "CloseHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHistory()"
  }
]