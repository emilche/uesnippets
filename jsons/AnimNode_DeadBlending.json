[
  {
    "label": "FAnimNode_DeadBlending",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_DeadBlending"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FDeadBlendingCurveElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeadBlendingCurveElement"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimNode_Inertialization . h \" # include \" AnimNode_DeadBlending . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Links)"
  },
  {
    "label": "FAnimNode_DeadBlending()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FAnimNode_DeadBlending()"
  },
  {
    "label": "RequestInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInertialization(const FInertializationRequest& Request)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "NeedsDynamicReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsDynamicReset()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FCompactPose& InPose, const FBlendedCurve& InCurves, const UE::Anim::FStackAttributeContainer& Attributes, const FInertializationSparsePose& SrcPosePrev, const FInertializationSparsePose& SrcPoseCurr)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTo(FCompactPose& InOutPose, FBlendedCurve& InOutCurves, UE::Anim::FStackAttributeContainer& InOutAttributes)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (public : class USkeleton*)",
    "insertText": "GetSkeleton(bool& bInvalidSkeletonIsError, const IPropertyHandle* PropertyHandle)"
  },
  {
    "label": "FDeadBlendingCurveElement()",
    "kind": "Method",
    "detail": "Function (FGraphTraversalCounter UpdateCounter ; private : TArray<int32> BoneIndices ; TArray<FVector> BoneTranslations ; TArray<FQuat> BoneRotations ; TArray<FQuat4f> BoneRotationDirections ; TArray<FVector> BoneScales ; TArray<FVector3f> BoneTranslationVelocities ; TArray<FVector3f> BoneRotationVelocities ; TArray<FVector3f> BoneScaleVelocities ; TArray<FVector3f> BoneTranslationDecayHalfLives ; TArray<FVector3f> BoneRotationDecayHalfLives ; TArray<FVector3f> BoneScaleDecayHalfLives ; FVector3f RootTranslationVelocity ; FVector3f RootRotationVelocity ; FVector3f RootScaleVelocity ; struct FDeadBlendingCurveElement : public UE::Anim::FCurveElement { float Velocity = 0 . 0 f ; float HalfLife = 0 . 0 f ;)",
    "insertText": "FDeadBlendingCurveElement()"
  }
]