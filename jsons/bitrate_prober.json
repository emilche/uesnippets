[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "BitrateProberConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitrateProberConfig"
  },
  {
    "label": "BitrateProber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateProber"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ProbeCluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProbeCluster"
  },
  {
    "label": "BitrateProberConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_PACING_BITRATE_PROBER_H_ # define MODULES_PACING_BITRATE_PROBER_H_ # include<stddef . h> # include<stdint . h> # include<queue> # include \" api / transport / field_trial_based_config . h \" # include \" api / transport / network_types . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class RtcEventLog ; struct BitrateProberConfig {)",
    "insertText": "BitrateProberConfig(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "BitrateProberConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitrateProberConfig(const BitrateProberConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitrateProberConfig&)",
    "insertText": "operator(const BitrateProberConfig&)"
  },
  {
    "label": "BitrateProberConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitrateProberConfig()"
  },
  {
    "label": "BitrateProber()",
    "kind": "Method",
    "detail": "Function (FieldTrialParameter<TimeDelta> min_probe_delta ; FieldTrialParameter<TimeDelta> max_probe_delay ; FieldTrialParameter<DataSize> min_packet_size ; } ; class BitrateProber { public :)",
    "insertText": "BitrateProber(const FieldTrialsView& field_trials)"
  },
  {
    "label": "BitrateProber()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitrateProber()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool enable)"
  },
  {
    "label": "is_probing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_probing()"
  },
  {
    "label": "CreateProbeCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProbeCluster(const ProbeClusterConfig& cluster_config)"
  },
  {
    "label": "NextProbeTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "NextProbeTime(Timestamp now)"
  },
  {
    "label": "CurrentCluster()",
    "kind": "Method",
    "detail": "Function (absl::optional<PacedPacketInfo>)",
    "insertText": "CurrentCluster(Timestamp now)"
  },
  {
    "label": "RecommendedMinProbeSize()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "RecommendedMinProbeSize()"
  },
  {
    "label": "ProbeSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProbeSent(Timestamp now, DataSize size)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (private : enum class ProbingState { kDisabled,kInactive,kActive,kSuspended,} ; struct ProbeCluster { PacedPacketInfo pace_info ; int sent_probes = 0 ; int sent_bytes = 0 ; Timestamp requested_at =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "CalculateNextProbeTime()",
    "kind": "Method",
    "detail": "Function (int retries = 0 ; } ; Timestamp)",
    "insertText": "CalculateNextProbeTime(const ProbeCluster& cluster)"
  }
]