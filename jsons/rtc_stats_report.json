[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RTCStatsReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCStatsReport"
  },
  {
    "label": "rtc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef API_STATS_RTC_STATS_REPORT_H_ # define API_STATS_RTC_STATS_REPORT_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / stats / rtc_stats . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / ref_counted_object . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT RTCStatsReport final : public rtc::RefCountedNonVirtual<RTCStatsReport> { public : typedef std::map<std::string,std::unique_ptr<const RTCStats>> StatsMap ; class RTC_EXPORT ConstIterator { public :)",
    "insertText": "ConstIterator(ConstIterator&& other)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstIterator&)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const ConstIterator& other)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : class RTCStatsReport ;)",
    "insertText": "ConstIterator(const rtc::scoped_refptr<const RTCStatsReport>& report, StatsMap::const_iterator it)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<const RTCStatsReport> report_ ; StatsMap::const_iterator it_ ; } ; rtc::scoped_refptr<RTCStatsReport>)",
    "insertText": "Create(int64_t timestamp_us = 0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RTCStatsReport>)",
    "insertText": "Create(Timestamp timestamp)"
  },
  {
    "label": "RTCStatsReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCStatsReport(int64_t timestamp_us)"
  },
  {
    "label": "RTCStatsReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCStatsReport(Timestamp timestamp)"
  },
  {
    "label": "RTCStatsReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCStatsReport(const RTCStatsReport& other)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RTCStatsReport>)",
    "insertText": "Copy()"
  },
  {
    "label": "timestamp_us()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "timestamp_us()"
  },
  {
    "label": "timestamp()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "timestamp()"
  },
  {
    "label": "TryAddStats()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "TryAddStats(std::unique_ptr<T> stats)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (T* stats_ptr = stats .)",
    "insertText": "get()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "GetAs()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetAs(const std::string& id)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const RTCStats* stats =)",
    "insertText": "Get(id)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<const RTCStats>)",
    "insertText": "Take(const std::string& id)"
  },
  {
    "label": "TakeMembersFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeMembersFrom(rtc::scoped_refptr<RTCStatsReport> other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (ConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (ConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "GetStatsOfType()",
    "kind": "Method",
    "detail": "Function (template<T> std::vector<const T*>)",
    "insertText": "GetStatsOfType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<const T*> stats_of_type ;)",
    "insertText": "for(const RTCStats& stats : *this)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (} return stats_of_type ; } std::string)",
    "insertText": "ToJson()"
  },
  {
    "label": "RTCStatsReport()",
    "kind": "Method",
    "detail": "Function (protected : class rtc::RefCountedNonVirtual<RTCStatsReport> ; ~)",
    "insertText": "RTCStatsReport()"
  }
]