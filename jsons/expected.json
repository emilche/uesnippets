[
  {
    "label": "ok",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ok"
  },
  {
    "label": "unexpected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "unexpected"
  },
  {
    "label": "expected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "expected"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TYPES_EXPECTED_H_ # define BASE_TYPES_EXPECTED_H_ # include<type_traits> # include<utility> # include \" base / check . h \" # include \" base / types / expected_internal . h \" # include \" third_party / abseil - cpp / absl / utility / utility . h \" namespace base { template<T> class ok { public : template<U = T,internal::EnableIfOkValueConstruction<T,U> = 0>)",
    "insertText": "ok(U&& val) noexcept : value_(std::forward<U>(val))"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "ok(absl::in_place_t, Args&&... args) noexcept : value_(std::forward<Args>(args)...)"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "ok(absl::in_place_t, std::initializer_list<U> il, Args&&... args) noexcept : value_(il, std::forward<Args>(args)...)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "value()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(ok& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(value(), other.value())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(ok& x, ok& y)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "swap(y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : T value_ ; } ; template<T,U> bool)",
    "insertText": "operator(const ok<T>& lhs, const ok<U>& rhs)"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (ok<T>)",
    "insertText": "ok(T)"
  },
  {
    "label": "unexpected()",
    "kind": "Method",
    "detail": "Function (template<E> class unexpected { public : template<Err = E,internal::EnableIfUnexpectedValueConstruction<E,Err> = 0>)",
    "insertText": "unexpected(Err&& err) noexcept : error_(std::forward<Err>(err))"
  },
  {
    "label": "unexpected()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "unexpected(absl::in_place_t, Args&&... args) noexcept : error_(std::forward<Args>(args)...)"
  },
  {
    "label": "unexpected()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "unexpected(absl::in_place_t, std::initializer_list<U> il, Args&&... args) noexcept : error_(il, std::forward<Args>(args)...)"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} E&)",
    "insertText": "error()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(unexpected& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(error(), other.error())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(unexpected& x, unexpected& y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : E error_ ; } ; template<E,G> bool)",
    "insertText": "operator(const unexpected<E>& lhs, const unexpected<G>& rhs)"
  },
  {
    "label": "unexpected()",
    "kind": "Method",
    "detail": "Function (unexpected<E>)",
    "insertText": "unexpected(E)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<T,E> class expected<T,E,false> {)",
    "insertText": "static_assert(!std::is_void_v<T>, \"Error: T must not be void\")"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (public : using value_type = T ; using error_type = E ; using unexpected_type = unexpected<E> ; template<U> using rebind = expected<U,E> ; template<U,G,bool IsVoid> class expected ;)",
    "insertText": "expected()"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (template<U,G,internal::EnableIfExplicitConversion<T,E,const U&,const G&> = 0>)",
    "insertText": "expected(const expected<U, G>& rhs) noexcept : impl_(rhs.impl_)"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U,G,internal::EnableIfExplicitConversion<T,E,U,G> = 0>)",
    "insertText": "expected(expected<U, G>&& rhs) noexcept : impl_(std::move(rhs.impl_))"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U = T,internal::EnableIfExplicitValueConstruction<T,E,U> = 0>)",
    "insertText": "expected(U&& v) noexcept : impl_(kValTag, std::forward<U>(v))"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U,internal::EnableIfExplicitConstruction<T,const U&> = 0>)",
    "insertText": "expected(const ok<U>& o) noexcept : impl_(kValTag, o.value())"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U,internal::EnableIfExplicitConstruction<T,U> = 0>)",
    "insertText": "expected(ok<U>&& o) noexcept : impl_(kValTag, std::move(o.value()))"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<G,internal::EnableIfExplicitConstruction<E,const G&> = 0>)",
    "insertText": "expected(const unexpected<G>& e) noexcept : impl_(kErrTag, e.error())"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<G,internal::EnableIfExplicitConstruction<E,G> = 0>)",
    "insertText": "expected(unexpected<G>&& e) noexcept : impl_(kErrTag, std::move(e.error()))"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "expected(absl::in_place_t, Args&&... args) noexcept : impl_(kValTag, std::forward<Args>(args)...)"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "expected(absl::in_place_t, std::initializer_list<U> il, Args&&... args) noexcept : impl_(kValTag, il, std::forward<Args>(args)...)"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "expected(unexpect_t, Args&&... args) noexcept : impl_(kErrTag, std::forward<Args>(args)...)"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "expected(unexpect_t, std::initializer_list<U> il, Args&&... args) noexcept : impl_(kErrTag, il, std::forward<Args>(args)...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U = T,internal::EnableIfValueAssignment<T,E,U> = 0> expected&)",
    "insertText": "operator(U&& v)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace(std::forward<U>(v))"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace(o.value())"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace(std::move(o.value()))"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "emplace_error(e.error())"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "emplace_error(std::move(e.error()))"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args> T&)",
    "insertText": "emplace(std::initializer_list<U> il, Args&&... args)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(expected& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "swap(rhs.impl_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(expected& x, expected& y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_value()"
  },
  {
    "label": "value_or()",
    "kind": "Method",
    "detail": "Function (} template<U> T)",
    "insertText": "value_or(U&& v)"
  },
  {
    "label": "error_or()",
    "kind": "Method",
    "detail": "Function (} template<G> E)",
    "insertText": "error_or(G&& e)"
  },
  {
    "label": "and_then()",
    "kind": "Method",
    "detail": "Function (} template<F,LazyE = E,internal::EnableIfCopyConstructible<LazyE> = 0> auto)",
    "insertText": "and_then(F&& f)"
  },
  {
    "label": "or_else()",
    "kind": "Method",
    "detail": "Function (} template<F,LazyT = T,internal::EnableIfCopyConstructible<LazyT> = 0> auto)",
    "insertText": "or_else(F&& f)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} template<F,LazyE = E,internal::EnableIfCopyConstructible<LazyE> = 0> auto)",
    "insertText": "transform(F&& f)"
  },
  {
    "label": "transform_error()",
    "kind": "Method",
    "detail": "Function (} template<F,LazyT = T,internal::EnableIfCopyConstructible<LazyT> = 0> auto)",
    "insertText": "transform_error(F&& f)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : using Impl = internal::ExpectedImpl<T,E> ; auto kValTag = Impl::kValTag ; auto kErrTag = Impl::kErrTag ; Impl impl_ ; } ; template<T,E> class expected<T,E,true> {)",
    "insertText": "static_assert(std::is_void_v<T>, \"Error: T must be void\")"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "expected(absl::in_place_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<G> expected&)",
    "insertText": "operator(const unexpected<G>& e)"
  },
  {
    "label": "emplace_value()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "emplace_value()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : using Impl = internal::ExpectedImpl<absl::monostate,E> ; auto kErrTag = Impl::kErrTag ; Impl impl_ ; } ; template<T,E,U,G,bool IsVoid> bool)",
    "insertText": "operator(const expected<T, E, IsVoid>& x, const expected<U, G, IsVoid>& y)"
  },
  {
    "label": "equal_values()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "equal_values(const auto& x, const auto& y)"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (} } ; return x .)",
    "insertText": "has_value() == y.has_value() && (x.has_value() ? equal_values(x, y) : x.error() == y.error())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,U,internal::EnableIfNotVoid<T> = 0> bool)",
    "insertText": "operator(const expected<T, E>& x, const U& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,U,internal::EnableIfNotVoid<T> = 0> bool)",
    "insertText": "operator(const U& v, const expected<T, E>& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,U,internal::EnableIfNotVoid<T> = 0> bool)",
    "insertText": "operator(const ok<U>& o, const expected<T, E>& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,G> bool)",
    "insertText": "operator(const unexpected<G>& e, const expected<T, E>& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,U,internal::EnableIfNotVoid<T> = 0> bool)",
    "insertText": "operator(const expected<T, E>& x, const ok<U>& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,E,G> bool)",
    "insertText": "operator(const expected<T, E>& x, const unexpected<G>& e)"
  }
]