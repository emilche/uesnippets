[
  {
    "label": "FConstraintHandleHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandleHolder"
  },
  {
    "label": "FSolverBodyContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBodyContainer"
  },
  {
    "label": "FConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintContainerSolver"
  },
  {
    "label": "TSimpleConstraintContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpleConstraintContainerSolver"
  },
  {
    "label": "FConstraintContainerSolver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Island / IslandManagerFwd . h \" namespace Chaos { class FConstraintHandleHolder ; class FSolverBodyContainer ; class FConstraintContainerSolver { public :)",
    "insertText": "FConstraintContainerSolver(const int32 InPriority) : Priority(InPriority)"
  },
  {
    "label": "FConstraintContainerSolver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FConstraintContainerSolver()"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPriority(const int32 InPriority)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (Priority = InPriority ; } int32)",
    "insertText": "GetPriority()"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraints(const TArrayView<Private::FPBDIslandConstraint*>& Constraints)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "PreApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreApplyPositionConstraints(const FReal Dt)"
  },
  {
    "label": "PreApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreApplyVelocityConstraints(const FReal Dt)"
  },
  {
    "label": "PreApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreApplyProjectionConstraints(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "TSimpleConstraintContainerSolver()",
    "kind": "Method",
    "detail": "Function (private : int32 Priority ; } ; template<ConstraintContainerType> class TSimpleConstraintContainerSolver : public FConstraintContainerSolver { public : using FConstraintContainerType = ConstraintContainerType ; using FConstraintHandleType = FConstraintContainerType::FConstraintContainerHandle ;)",
    "insertText": "TSimpleConstraintContainerSolver(FConstraintContainerType& InConstraintContainer, const int32 InPriority) : FConstraintContainerSolver(InPriority) , ConstraintContainer(InConstraintContainer)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const int32 MaxConstraints)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "AddBodies(SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "GatherInput(Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ScatterOutput(Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyPositionConstraints(Dt, It, NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyVelocityConstraints(Dt, It, NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintContainer .)",
    "insertText": "ApplyProjectionConstraints(Dt, It, NumIts)"
  }
]