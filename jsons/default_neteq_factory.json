[
  {
    "label": "DefaultNetEqFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultNetEqFactory"
  },
  {
    "label": "DefaultNetEqFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_DEFAULT_NETEQ_FACTORY_H_ # define MODULES_AUDIO_CODING_NETEQ_DEFAULT_NETEQ_FACTORY_H_ # include<memory> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / neteq / default_neteq_controller_factory . h \" # include \" api / neteq / neteq_factory . h \" # include \" api / scoped_refptr . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class DefaultNetEqFactory : public NetEqFactory { public :)",
    "insertText": "DefaultNetEqFactory()"
  },
  {
    "label": "DefaultNetEqFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultNetEqFactory(const DefaultNetEqFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultNetEqFactory&)",
    "insertText": "operator(const DefaultNetEqFactory&)"
  },
  {
    "label": "CreateNetEq()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NetEq>)",
    "insertText": "CreateNetEq(const NetEq::Config& config, const rtc::scoped_refptr<AudioDecoderFactory>& decoder_factory, Clock* clock)"
  }
]