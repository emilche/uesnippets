[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__common_type3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_type3"
  },
  {
    "label": "__common_type2_imp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_type2_imp"
  },
  {
    "label": "__common_type_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_type_impl"
  },
  {
    "label": "__common_types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_types"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__no_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__no_arg"
  },
  {
    "label": "_Vp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Vp"
  },
  {
    "label": "_Unused",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Unused"
  },
  {
    "label": "common_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "common_type"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_COMMON_TYPE_H # define _LIBCPP___TYPE_TRAITS_COMMON_TYPE_H # include<__config> # include<__type_traits / conditional . h> # include<__type_traits / decay . h> # include<__type_traits / is_same . h> # include<__type_traits / remove_cvref . h> # include<__type_traits / void_t . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 template <class _Tp, class _Up> using __cond_type = decltype(false ? declval<_Tp>() : declval<_Up>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,class _Up,class = void> struct __common_type3 { } ; template<class _Tp,class _Up> struct __common_type3<_Tp,_Up,void_t<__cond_type<const _Tp&,const _Up&>>> { using type = remove_cvref_t<__cond_type<const _Tp&,const _Up&>> ; } ; template<class _Tp,class _Up,class = void> struct __common_type2_imp : __common_type3<_Tp,_Up> { } ; # else template<class _Tp,class _Up,class = void> struct __common_type2_imp { } ; # endif template<class _Tp,class _Up> struct __common_type2_imp<_Tp,_Up,__void_t<)",
    "insertText": "decltype(true ? declval<_Tp>() : declval<_Up>())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; template<class,class = void> struct __common_type_impl { } ; # if !)",
    "insertText": "defined(_LIBCPP_CXX03_LANG) || defined(__clang__) # define _LIBCPP_OPTIONAL_PACK(...)"
  },
  {
    "label": "_LIBCPP_OPTIONAL_PACK()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Tp> struct _LIBCPP_TEMPLATE_VIS common_type ; # else # define)",
    "insertText": "_LIBCPP_OPTIONAL_PACK(...)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,class _Up,class = __no_arg> struct __common_types ; template<class _Tp = __no_arg,class _Up = __no_arg,class _Vp = __no_arg,class _Unused = __no_arg> struct common_type {)",
    "insertText": "static_assert(sizeof(_Unused) == 0, \"common_type accepts at most 3 arguments in C++03\")"
  },
  {
    "label": "_LIBCPP_OPTIONAL_PACK()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<class _Tp,class _Up> struct __common_type_impl<__common_types<_Tp,_Up>,__void_t<common_type<_Tp,_Up>::type>::type> { typedef common_type<_Tp,_Up>::type type ; } ; template<class _Tp,class _Up,class _Vp)",
    "insertText": "_LIBCPP_OPTIONAL_PACK(class... _Rest)> struct __common_type_impl< __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)>, typename __void_t<typename common_type<_Tp, _Up>::type>::type> : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)"
  },
  {
    "label": "_LIBCPP_OPTIONAL_PACK()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct _LIBCPP_TEMPLATE_VIS common_type<> { } ; template<class _Tp> struct _LIBCPP_TEMPLATE_VIS common_type<_Tp> : public common_type<_Tp,_Tp> { } ; template<class _Tp,class _Up> struct _LIBCPP_TEMPLATE_VIS common_type<_Tp,_Up> : conditional<_IsSame<_Tp,decay<_Tp>::type>::value&& _IsSame<_Up,decay<_Up>::type>::value,__common_type2_imp<_Tp,_Up>,common_type<decay<_Tp>::type,decay<_Up>::type>>::type { } ; template<class _Tp,class _Up,class _Vp)",
    "insertText": "_LIBCPP_OPTIONAL_PACK(class... _Rest)> struct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)> : __common_type_impl< __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)"
  }
]