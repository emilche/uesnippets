[
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FOrientedEdge()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / OrientedEntity . h \" # include \" Geo / GeoEnum . h \" # include \" Math / Boundary . h \" # include \" Topo / TopologicalEdge . h \" # include \" Topo / TopologicalEntity . h \" # include \" Topo / TopologicalVertex . h \" namespace UE::CADKernel { class FDatabase ; class FPoint2D ; class FTopologicalFace ; class FTopologicalVertex ; class FOrientedEdge : public TOrientedEntity<FTopologicalEdge> { public :)",
    "insertText": "FOrientedEdge(TSharedPtr<FTopologicalEdge>& InEntity, EOrientation InDirection) : TOrientedEntity(InEntity, InDirection)"
  },
  {
    "label": "FOrientedEdge()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOrientedEdge() : TOrientedEntity()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FOrientedEdge& Edge)"
  },
  {
    "label": "FTopologicalLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopologicalLoop()"
  },
  {
    "label": "SetSurface()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetSurface(FTopologicalFace* HostedFace)"
  },
  {
    "label": "ResetSurface()",
    "kind": "Method",
    "detail": "Function (Face = HostedFace ; } void)",
    "insertText": "ResetSurface()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FTopologicalLoop>)",
    "insertText": "Make(const TArray<TSharedPtr<FTopologicalEdge>>& EdgeList, const TArray<EOrientation>& EdgeDirections, const bool bIsExternalLoop, const double GeometricTolerance)"
  },
  {
    "label": "DeleteLoopEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLoopEdges()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TOrientedEntity<FEntity>>&) Edges)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, &Face)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (Ar<<bIsExternal ; } void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<TOrientedEntity<FEntity>>&) Edges)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "EdgeCount()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "EdgeCount()"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (} const TArray<FOrientedEdge>&)",
    "insertText": "GetEdges()"
  },
  {
    "label": "GetLinkActiveEdge()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge> ActiveEdge = Edge . Entity ->)",
    "insertText": "GetLinkActiveEdge()"
  },
  {
    "label": "SetMarker1()",
    "kind": "Method",
    "detail": "Function (ActiveEdge ->)",
    "insertText": "SetMarker1()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutEdges .)",
    "insertText": "Emplace(ActiveEdge)"
  },
  {
    "label": "GetFace()",
    "kind": "Method",
    "detail": "Function (} } } FTopologicalFace*)",
    "insertText": "GetFace()"
  },
  {
    "label": "SetInternal()",
    "kind": "Method",
    "detail": "Function (bIsExternal = true ; } void)",
    "insertText": "SetInternal()"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (bIsExternal = false ; } bool)",
    "insertText": "Orient()"
  },
  {
    "label": "SwapOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapOrientation()"
  },
  {
    "label": "ReplaceEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceEdge(TSharedPtr<FTopologicalEdge>& OldEdge, TSharedPtr<FTopologicalEdge>& NewEdge)"
  },
  {
    "label": "ReplaceEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceEdge(TSharedPtr<FTopologicalEdge>& Edge, TArray<TSharedPtr<FTopologicalEdge>>& NewEdges)"
  },
  {
    "label": "ReplaceEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceEdges(TArray<FOrientedEdge>& Candidates, TSharedPtr<FTopologicalEdge>& NewEdge)"
  },
  {
    "label": "SplitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitEdge(FTopologicalEdge& Edge, TSharedPtr<FTopologicalEdge> NewEdge, bool bNewEdgeIsFirst)"
  },
  {
    "label": "RemoveEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEdge(TSharedPtr<FTopologicalEdge>& Edge)"
  },
  {
    "label": "GetDirection()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetDirection(TSharedPtr<FTopologicalEdge>& Edge, bool bAllowLinkedEdge = false)"
  },
  {
    "label": "GetDirection()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetDirection(int32 Index)"
  },
  {
    "label": "Get2DSamplingWithoutDegeneratedEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Get2DSamplingWithoutDegeneratedEdges(TArray<FPoint2D>& LoopSampling)"
  },
  {
    "label": "FindSurfaceCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindSurfaceCorners(TArray<TSharedPtr<FTopologicalVertex>>& OutCorners, TArray<int32>& OutStartSideIndex)"
  },
  {
    "label": "FindBreaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBreaks(TArray<TSharedPtr<FTopologicalVertex>>& Ruptures, TArray<int32>& OutStartSideIndex, TArray<double>& RuptureValues)"
  },
  {
    "label": "ComputeBoundaryProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBoundaryProperties(const TArray<int32>& StartSideIndex, TArray<FEdge2DProperties>& OutSideProperties)"
  },
  {
    "label": "EnsureLogicalClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureLogicalClosing(const double GeometricTolerance)"
  },
  {
    "label": "CheckEdgesOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckEdgesOrientation()"
  },
  {
    "label": "CheckLoopWithTwoEdgesOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckLoopWithTwoEdgesOrientation()"
  },
  {
    "label": "RemoveDegeneratedEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDegeneratedEdges()"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInside(const FTopologicalLoop& Other)"
  }
]