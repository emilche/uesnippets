[
  {
    "label": "FPBDTetConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDTetConstraintsBase"
  },
  {
    "label": "FPBDTetConstraintsBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / DynamicParticles . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" namespace Chaos::Softs { class FPBDTetConstraintsBase { public :)",
    "insertText": "FPBDTetConstraintsBase(const FSolverParticles& InParticles, TArray<TVec4<int32>>&& InConstraints, const FSolverReal InStiffness = (FSolverReal)1.) : Constraints(InConstraints), Stiffness(InStiffness)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = InParticles .)",
    "insertText": "GetX(Constraint[0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "GetX(Constraint[1])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "GetX(Constraint[2])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "GetX(Constraint[3])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Volumes .)",
    "insertText": "Add(FSolverVec3::DotProduct(FSolverVec3::CrossProduct(P2 - P1, P3 - P1), P4 - P1) / (FSolverReal)6.)"
  },
  {
    "label": "FPBDTetConstraintsBase()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPBDTetConstraintsBase()"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (} TVec4<FSolverVec3>)",
    "insertText": "GetGradients(const FSolverParticles& InParticles, const int32 i)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3> Grads ; const TVec4<int32>& Constraint = Constraints [ i ] ; const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(Constraint[0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "P(Constraint[1])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "P(Constraint[2])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "P(Constraint[3])"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P2P1 = P2 - P1 ; const FSolverVec3 P4P1 = P4 - P1 ; const FSolverVec3 P3P1 = P3 - P1 ; Grads [ 1 ] =)",
    "insertText": "CrossProduct(P3P1, P4P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 2 ] =)",
    "insertText": "CrossProduct(P4P1, P2P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 3 ] =)",
    "insertText": "CrossProduct(P2P1, P3P1) / (FSolverReal)"
  },
  {
    "label": "Grads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grads(Grads[1] + Grads[2] + Grads[3])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ i ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ; const int32 i3 = Constraint [ 2 ] ; const int32 i4 = Constraint [ 3 ] ; const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "P(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "P(i4)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Volume =)",
    "insertText": "DotProduct(FSolverVec3::CrossProduct(P2 - P1, P3 - P1), P4 - P1) / (FSolverReal)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "S(Volume - Volumes[i]) / ( InParticles.InvM(i1) * Grads[0].SizeSquared() + InParticles.InvM(i2) * Grads[1].SizeSquared() + InParticles.InvM(i3) * Grads[2].SizeSquared() + InParticles.InvM(i4) * Grads[3].SizeSquared())"
  }
]