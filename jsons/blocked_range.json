[
  {
    "label": "blocked_rangeNd_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_rangeNd_impl"
  },
  {
    "label": "blocked_range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_range"
  },
  {
    "label": "blocked_range2d",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_range2d"
  },
  {
    "label": "blocked_range3d",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_range3d"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "blocked_range()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_blocked_range_H # define __TBB_blocked_range_H # include \" tbb_stddef . h \" namespace tbb { namespace internal { template<Value,unsigned int N,> class blocked_rangeNd_impl ; } template<Value> class blocked_range { public : typedef Value const_iterator ; typedef std::size_t size_type ; # if __TBB_DEPRECATED_BLOCKED_RANGE_DEFAULT_CTOR)",
    "insertText": "blocked_range() : my_end(), my_begin(), my_grainsize()"
  },
  {
    "label": "blocked_range()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "blocked_range(Value begin_, Value end_, size_type grainsize_=1 ) : my_end(end_), my_begin(begin_), my_grainsize(grainsize_)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_grainsize>0, \"grainsize must be positive\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!(end()<begin()), \"size() unspecified if end()<begin()\")"
  },
  {
    "label": "grainsize()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "grainsize()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "blocked_range()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "blocked_range(blocked_range& r, split ) : my_end(r.my_end), my_begin(do_split(r, split())), my_grainsize(r.my_grainsize)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!(my_begin < r.my_end) && !(r.my_end < my_begin), \"blocked_range has been split incorrectly\")"
  },
  {
    "label": "blocked_range()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES const bool is_splittable_in_proportion = true ;)",
    "insertText": "blocked_range(blocked_range& r, proportional_split& proportion ) : my_end(r.my_end), my_begin(do_split(r, proportion)), my_grainsize(r.my_grainsize)"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (} # endif private : Value my_end ; Value my_begin ; size_type my_grainsize ; Value)",
    "insertText": "do_split(blocked_range& r, split)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(r.is_divisible(), \"cannot split blocked_range that is not divisible\")"
  },
  {
    "label": "my_begin()",
    "kind": "Method",
    "detail": "Function (Value middle = r .)",
    "insertText": "my_begin(r.my_end - r.my_begin)"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (r . my_end = middle ; return middle ; } # if __TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES Value)",
    "insertText": "do_split(blocked_range& r, proportional_split& proportion)"
  },
  {
    "label": "size_type()",
    "kind": "Method",
    "detail": "Function (size_type right_part =)",
    "insertText": "size_type(float(r.size()) * float(proportion.right()) / float(proportion.left() + proportion.right()) + 0.5f)"
  }
]