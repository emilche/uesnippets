[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ReadBigEndian()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_BIG_ENDIAN_H_ # define BASE_BIG_ENDIAN_H_ # include<stddef . h> # include<stdint . h> # include<type_traits> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" namespace base { template<T> void)",
    "insertText": "ReadBigEndian(const uint8_t buf[], T* out)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::make_unsigned<T>::type unsigned_result = buf [ 0 ] ;)",
    "insertText": "for(size_t i = 1; i < sizeof(T); ++i)"
  },
  {
    "label": "WriteBigEndian()",
    "kind": "Method",
    "detail": "Function (unsigned_result<<= 8 ; unsigned_result | = buf [ i ] ; }* out = unsigned_result ; } template<T> void)",
    "insertText": "WriteBigEndian(char buf[], T val)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (auto unsigned_val = static_cast<std::make_unsigned<T)",
    "insertText": "type(val)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (buf [)",
    "insertText": "sizeof(T) - i - 1] = static_cast<char>(unsigned_val & 0xFF)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (unsigned_val>> = 8 ; } } template<> void ReadBigEndian<)",
    "insertText": "uint8_t(const uint8_t buf[], uint8_t* out)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* out = buf [ 0 ] ; } template<> void WriteBigEndian<)",
    "insertText": "uint8_t(char buf[], uint8_t val)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (buf [ 0 ] = static_cast<)",
    "insertText": "char(val)"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (} template<> void ReadBigEndian<)",
    "insertText": "int8_t(const uint8_t buf[], int8_t* out)"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (* out = static_cast<)",
    "insertText": "int8_t(buf[0])"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (} template<> void WriteBigEndian<)",
    "insertText": "int8_t(char buf[], int8_t val)"
  },
  {
    "label": "FromStringPiece()",
    "kind": "Method",
    "detail": "Function (} class BASE_EXPORT BigEndianReader { public : BigEndianReader)",
    "insertText": "FromStringPiece(base::StringPiece string_piece)"
  },
  {
    "label": "BigEndianReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BigEndianReader(const uint8_t* buf, size_t len)"
  },
  {
    "label": "BigEndianReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BigEndianReader(base::span<const uint8_t> buf)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "ptr()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Skip(size_t len)"
  },
  {
    "label": "ReadBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBytes(void* out, size_t len)"
  },
  {
    "label": "ReadPiece()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPiece(base::StringPiece* out, size_t len)"
  },
  {
    "label": "ReadSpan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadSpan(base::span<const uint8_t>* out, size_t len)"
  },
  {
    "label": "ReadU8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU8(uint8_t* value)"
  },
  {
    "label": "ReadU16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU16(uint16_t* value)"
  },
  {
    "label": "ReadU32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU32(uint32_t* value)"
  },
  {
    "label": "ReadU64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU64(uint64_t* value)"
  },
  {
    "label": "ReadU8LengthPrefixed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU8LengthPrefixed(base::StringPiece* out)"
  },
  {
    "label": "ReadU16LengthPrefixed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadU16LengthPrefixed(base::StringPiece* out)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (private : template<T> bool)",
    "insertText": "Read(T* v)"
  },
  {
    "label": "ReadLengthPrefixed()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "ReadLengthPrefixed(base::StringPiece* out)"
  },
  {
    "label": "BigEndianWriter()",
    "kind": "Method",
    "detail": "Function (const uint8_t* ptr_ ; const uint8_t* end_ ; } ; class BASE_EXPORT BigEndianWriter { public :)",
    "insertText": "BigEndianWriter(char* buf, size_t len)"
  },
  {
    "label": "WriteBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteBytes(const void* buf, size_t len)"
  },
  {
    "label": "WriteU8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteU8(uint8_t value)"
  },
  {
    "label": "WriteU16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteU16(uint16_t value)"
  },
  {
    "label": "WriteU32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteU32(uint32_t value)"
  },
  {
    "label": "WriteU64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteU64(uint64_t value)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (private : template<T> bool)",
    "insertText": "Write(T v)"
  }
]