[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FPropertyChangedParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyChangedParams"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FKeyOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyOperation"
  },
  {
    "label": "FKeySectionOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeySectionOperation"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "F2DTransformTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F2DTransformTrackEditor"
  },
  {
    "label": "F2DTransformTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimatedPropertyKey . h \" # include \" Animation / MovieScene2DTransformTrack . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" KeyframeTrackEditor . h \" # include \" PropertyTrackEditor . h \" # include \" Slate / WidgetTransform . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class FName ; class FPropertyChangedParams ; class ISequencer ; class ISequencerSection ; class ISequencerTrackEditor ; class UMovieSceneSection ; class UMovieSceneTrack ; class UObject ; namespace UE::Sequencer { struct FKeyOperation ; } namespace UE::Sequencer { struct FKeySectionOperation ; } struct FFrameNumber ; struct FGuid ; class F2DTransformTrackEditor : public FPropertyTrackEditor<UMovieScene2DTransformTrack> { public :)",
    "insertText": "F2DTransformTrackEditor(TSharedRef<ISequencer> InSequencer ) : FPropertyTrackEditor( InSequencer, GetAnimatedPropertyTypes())"
  },
  {
    "label": "GetAnimatedPropertyTypes()",
    "kind": "Method",
    "detail": "Function (} TArray<FAnimatedPropertyKey,TInlineAllocator<1>>)",
    "insertText": "GetAnimatedPropertyTypes()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyOperation(FFrameNumber InKeyTime, const UE::Sequencer::FKeyOperation& Operation, ISequencer& InSequencer)"
  },
  {
    "label": "GenerateKeysFromPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeysFromPropertyChanged(const FPropertyChangedParams& PropertyChangedParams, UMovieSceneSection* SectionToKey, FGeneratedTrackKeys& OutGeneratedKeys)"
  },
  {
    "label": "RecomposeTransform()",
    "kind": "Method",
    "detail": "Function (FWidgetTransform)",
    "insertText": "RecomposeTransform(const FWidgetTransform& InTransform, UObject* AnimatedObject, UMovieSceneSection* Section)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyOperation(UObject* ObjectToKey, TArrayView<const UE::Sequencer::FKeySectionOperation> SectionsToKey, ISequencer& InSequencer, FFrameNumber KeyTime)"
  }
]