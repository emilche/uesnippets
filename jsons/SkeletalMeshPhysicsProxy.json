[
  {
    "label": "FParticleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleData"
  },
  {
    "label": "FSkeletalMeshPhysicsProxyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshPhysicsProxyParams"
  },
  {
    "label": "FSkeletalMeshPhysicsProxyInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshPhysicsProxyInputs"
  },
  {
    "label": "FSkeletalMeshPhysicsProxyOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshPhysicsProxyOutputs"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshPhysicsProxy"
  },
  {
    "label": "FSkeletalMeshPhysicsProxyParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / PhysicsProxy . h \" # include \" Chaos / Framework / BufferedData . h \" # include \" BoneHierarchy . h \" # include \" GeometryCollection / GeometryCollectionSimulationTypes . h \" # include \" Framework / TripleBufferedData . h \" namespace Chaos { class FParticleData ; } struct FSkeletalMeshPhysicsProxyParams {)",
    "insertText": "FSkeletalMeshPhysicsProxyParams() : Name(\"\") , InitialTransform(FTransform::Identity) , InitialLinearVelocity(FVector::ZeroVector) , InitialAngularVelocity(FVector::ZeroVector) , ObjectType(EObjectStateTypeEnum::Chaos_Object_Kinematic) , CollisionType(ECollisionTypeEnum::Chaos_Volumetric) , ParticlesPerUnitArea(0.1f) , MinNumParticles(0) , MaxNumParticles(50) , MinRes(5) , MaxRes(10) , CollisionGroup(0) #if 0 , bEnableClustering(false) , ClusterGroupIndex(0) , MaxClusterLevel(100) , DamageThreshold(250.f) #endif , Density(2.4f) , MinMass(0.001f) , MaxMass(1.e6f) , bSimulating(false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FString Name ; FBoneHierarchy BoneHierarchy ; TArray<FVector> MeshVertexPositions ; TArray<FIntVector> Triangles ; FTransform InitialTransform ; FTransform LocalToWorld ; FVector InitialLinearVelocity ; FVector InitialAngularVelocity ; Chaos::TSerializablePtr<Chaos::FChaosPhysicsMaterial> PhysicalMaterial ; EObjectStateTypeEnum ObjectType ; ECollisionTypeEnum CollisionType ; float ParticlesPerUnitArea ; int32 MinNumParticles ; int32 MaxNumParticles ; int32 MinRes ; int32 MaxRes ; int32 CollisionGroup ; # if 0 bool bEnableClustering ; int32 ClusterGroupIndex ; int32 MaxClusterLevel ; float DamageThreshold ; # endif float Density ; float MinMass ; float MaxMass ; bool bSimulating ; } ; struct FSkeletalMeshPhysicsProxyInputs { TArray<FTransform> Transforms ; TArray<FVector> LinearVelocities ; TArray<FVector> AngularVelocities ; } ; struct FSkeletalMeshPhysicsProxyOutputs { TArray<FTransform> Transforms ; TArray<FVector> LinearVelocities ; TArray<FVector> AngularVelocities ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (Transforms = TArray<)",
    "insertText": "FTransform()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (LinearVelocities = TArray<)",
    "insertText": "FVector()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; class FSkeletalMeshPhysicsProxy : public TPhysicsProxy<FSkeletalMeshPhysicsProxy,FSkeletalMeshPhysicsProxyOutputs,FProxyTimestampBase> { typedef TPhysicsProxy<FSkeletalMeshPhysicsProxy,FSkeletalMeshPhysicsProxyOutputs,FProxyTimestampBase> Base ; public : using FInitFunc = TFunction<)",
    "insertText": "void(FSkeletalMeshPhysicsProxyParams& OutParams)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FInputFunc = TFunction<)",
    "insertText": "bool(const float Dt, FSkeletalMeshPhysicsProxyParams& OutParams)"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshPhysicsProxy()"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshPhysicsProxy(UObject* InOwner, const FInitFunc& InitFunc)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsSimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulating()"
  },
  {
    "label": "UpdateKinematicBodiesCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicBodiesCallback(const FParticlesType& Particles, const float Dt, const float Time, FKinematicProxy& Proxy)"
  },
  {
    "label": "StartFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFrameCallback(const float InDt, const float InTime)"
  },
  {
    "label": "EndFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameCallback(const float InDt)"
  },
  {
    "label": "CreateRigidBodyCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRigidBodyCallback(FParticlesType& InOutParticles)"
  },
  {
    "label": "ParameterUpdateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParameterUpdateCallback(FParticlesType& InParticles, const float InTime)"
  },
  {
    "label": "DisableCollisionsCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCollisionsCallback(TSet<TTuple<int32, int32>>& InPairs)"
  },
  {
    "label": "AddForceCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceCallback(FParticlesType& InParticles, const float InDt, const int32 InIndex)"
  },
  {
    "label": "BindParticleCallbackMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindParticleCallbackMapping(Chaos::TArrayCollectionArray<PhysicsProxyWrapper>& PhysicsProxyReverseMap, Chaos::TArrayCollectionArray<int32>& ParticleIDReverseMap)"
  },
  {
    "label": "BufferCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferCommand(Chaos::FPhysicsSolver* InSolver, const FFieldSystemCommand& InCommmand)"
  },
  {
    "label": "NewData()",
    "kind": "Method",
    "detail": "Function (} FSkeletalMeshPhysicsProxyOutputs*)",
    "insertText": "NewData()"
  },
  {
    "label": "OnRemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveFromScene()"
  },
  {
    "label": "PushToPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushToPhysicsState(const Chaos::FParticleData*)"
  },
  {
    "label": "ClearAccumulatedData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ClearAccumulatedData()"
  },
  {
    "label": "BufferPhysicsResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferPhysicsResults()"
  },
  {
    "label": "FlipBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBuffer()"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullFromPhysicsState(const int32 SolverSyncTimestamp)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "CaptureInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureInputs(const float Dt, const FInputFunc& InputFunc)"
  },
  {
    "label": "GetOutputs()",
    "kind": "Method",
    "detail": "Function (const FSkeletalMeshPhysicsProxyOutputs*)",
    "insertText": "GetOutputs()"
  }
]