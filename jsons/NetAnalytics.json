[
  {
    "label": "FNetAnalyticsAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetAnalyticsAggregator"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FNetAnalyticsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetAnalyticsData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLocalNetAnalyticsStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalNetAnalyticsStruct"
  },
  {
    "label": "FNetAnalyticsDataDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetAnalyticsDataDeleter"
  },
  {
    "label": "TDataStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDataStruct"
  },
  {
    "label": "TBasicNetAnalyticsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBasicNetAnalyticsData"
  },
  {
    "label": "FThreadedNetAnalyticsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadedNetAnalyticsData"
  },
  {
    "label": "TThreadedNetAnalyticsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TThreadedNetAnalyticsData"
  },
  {
    "label": "REGISTER_NET_ANALYTICS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" class FNetAnalyticsAggregator ; class IAnalyticsProvider ; struct FAnalyticsEventAttribute ; # define NET_ANALYTICS_MULTITHREADING 0 const ESPMode NetAnalyticsThreadSafety = ESPMode::ThreadSafe ; struct FNetAnalyticsData ; template<class T = FNetAnalyticsData> using TNetAnalyticsDataRef = TSharedRef<T,NetAnalyticsThreadSafety> ; template<class T = FNetAnalyticsData> using TNetAnalyticsDataPtr = TSharedPtr<T,NetAnalyticsThreadSafety> ; template<class T = FNetAnalyticsData> using TNetAnalyticsDataWeakPtr = TWeakPtr<T,NetAnalyticsThreadSafety> ; # define)",
    "insertText": "REGISTER_NET_ANALYTICS(Aggregator, AnalyticsDataType, InDataName) \\ StaticCastSharedPtr<AnalyticsDataType, FNetAnalyticsData, NetAnalyticsThreadSafety>( \\ (Aggregator->RegisterAnalyticsData_Internal(MakeShareable(new AnalyticsDataType(), FNetAnalyticsDataDeleter()), InDataName, \\ TEXT(#AnalyticsDataType))))"
  },
  {
    "label": "FNetAnalyticsData()",
    "kind": "Method",
    "detail": "Function (struct FLocalNetAnalyticsStruct : public FVirtualDestructor { } ; struct FNetAnalyticsData : public FVirtualDestructor,public TSharedFromThis<FNetAnalyticsData,NetAnalyticsThreadSafety> { class FNetAnalyticsAggregator ; struct FNetAnalyticsDataDeleter ; protected : FNetAnalyticsAggregator* Aggregator ; public :)",
    "insertText": "FNetAnalyticsData()"
  },
  {
    "label": "SendAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendAnalytics()"
  },
  {
    "label": "InternalSendAnalytics()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InternalSendAnalytics()"
  },
  {
    "label": "NotifyFinalRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFinalRelease()"
  },
  {
    "label": "GENERATE_MEMBER_FUNCTION_CHECK()",
    "kind": "Method",
    "detail": "Function (} } ; template<class TDataStruct> struct TBasicNetAnalyticsData : public FNetAnalyticsData,protected TDataStruct {)",
    "insertText": "GENERATE_MEMBER_FUNCTION_CHECK(CommitAnalytics, void,, TDataStruct&)"
  },
  {
    "label": "CommitAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitAnalytics(TDataStruct& AnalyticsVars)"
  },
  {
    "label": "CommitAnalytics()",
    "kind": "Method",
    "detail": "Function (AnalyticsVars .)",
    "insertText": "CommitAnalytics(*this)"
  },
  {
    "label": "FThreadedNetAnalyticsData()",
    "kind": "Method",
    "detail": "Function (} } ; # if NET_ANALYTICS_MULTITHREADING struct FThreadedNetAnalyticsData : public FNetAnalyticsData {)",
    "insertText": "FThreadedNetAnalyticsData()"
  },
  {
    "label": "TThreadedNetAnalyticsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TThreadedNetAnalyticsData() : ThreadLocalData()"
  },
  {
    "label": "GetLocalData()",
    "kind": "Method",
    "detail": "Function (} TDataStruct*)",
    "insertText": "GetLocalData()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (thread_local TMap<FThreadedNetAnalyticsData*,FLocalNetAnalyticsStruct*> LocalNetAnalyticsMap ; FLocalNetAnalyticsStruct** FoundVal = LocalNetAnalyticsMap .)",
    "insertText": "Find(this)"
  },
  {
    "label": "AddLocalData()",
    "kind": "Method",
    "detail": "Function (} protected : TDataStruct*)",
    "insertText": "AddLocalData(TMap<FThreadedNetAnalyticsData*, FLocalNetAnalyticsStruct*>& LocalNetAnalyticsMap)"
  },
  {
    "label": "TDataStruct()",
    "kind": "Method",
    "detail": "Function (TDataStruct* ReturnVal = new)",
    "insertText": "TDataStruct()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (thread_local TMap<TNetAnalyticsDataWeakPtr<FThreadedNetAnalyticsData>,FThreadedNetAnalyticsData*> StaleNetAnalyticsTracking ; LocalNetAnalyticsMap .)",
    "insertText": "Add(this, ReturnVal)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StaleNetAnalyticsTracking .)",
    "insertText": "Add(StaticCastSharedRef<FThreadedNetAnalyticsData, FNetAnalyticsData, NetAnalyticsThreadSafety>(AsShared()), this)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (ThreadLocalData .)",
    "insertText": "Enqueue(ReturnVal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (thread_local uint8 LastNetAnalyticsCounter = 0 ; uint8 CurNetAnalyticsCounter = GNetAnalyticsCounter ;)",
    "insertText": "if(CurNetAnalyticsCounter != LastNetAnalyticsCounter)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LocalNetAnalyticsMap .)",
    "insertText": "Remove(It.Value())"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (It .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TDataStruct* CurAnalyticsData = nullptr ;)",
    "insertText": "while(ThreadLocalData.Dequeue(CurAnalyticsData))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : TQueue<TDataStruct*,EQueueMode::Mpsc> ThreadLocalData ; } ; # endif struct FNetAnalyticsDataDeleter { void)",
    "insertText": "operator()(FNetAnalyticsData* Data)"
  },
  {
    "label": "FNetAnalyticsAggregator()",
    "kind": "Method",
    "detail": "Function (} delete Data ; } } ; class FNetAnalyticsAggregator { public :)",
    "insertText": "FNetAnalyticsAggregator(TSharedPtr<IAnalyticsProvider> InProvider, FName InNetDriverName)"
  },
  {
    "label": "FNetAnalyticsAggregator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetAnalyticsAggregator()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "InitConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfig()"
  },
  {
    "label": "AppendGameInstanceAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGameInstanceAttributes(TArray<FAnalyticsEventAttribute>& OutAttributes)"
  },
  {
    "label": "RegisterAnalyticsData_Internal()",
    "kind": "Method",
    "detail": "Function (TNetAnalyticsDataPtr<>)",
    "insertText": "RegisterAnalyticsData_Internal(TNetAnalyticsDataRef<> InData, const FName& InDataName, FString InTypeName)"
  },
  {
    "label": "GetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IAnalyticsProvider>&)",
    "insertText": "GetAnalyticsProvider()"
  },
  {
    "label": "SetAnalyticsAppender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsAppender(FAnalyticsAppender AppenderFunction)"
  }
]