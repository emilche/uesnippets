[
  {
    "label": "start_for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_for"
  },
  {
    "label": "parallel_for_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_for_body"
  },
  {
    "label": "allocate_sibling()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_for_H # define __TBB_parallel_for_H # include<new> # include \" task . h \" # include \" partitioner . h \" # include \" blocked_range . h \" # include \" tbb_exception . h \" # include \" internal / _tbb_trace_impl . h \" namespace tbb { namespace interface9 { namespace internal { void*)",
    "insertText": "allocate_sibling(task* start_for_task, size_t bytes)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (template<Range,Body,Partitioner> class start_for : public task { Range my_range ; const Body my_body ; Partitioner::task_partition_type my_partition ; task*)",
    "insertText": "execute()"
  },
  {
    "label": "note_affinity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "note_affinity(affinity_id id)"
  },
  {
    "label": "note_affinity()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "note_affinity(id)"
  },
  {
    "label": "start_for()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "start_for(const Range& range, const Body& body, Partitioner& partitioner ) : my_range(range), my_body(body), my_partition(partitioner)"
  },
  {
    "label": "fgt_algorithm()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "fgt_algorithm(tbb::internal::PARALLEL_FOR_TASK, this, NULL)"
  },
  {
    "label": "start_for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "start_for(start_for& parent_, typename Partitioner::split_type& split_obj) : my_range(parent_.my_range, split_obj), my_body(parent_.my_body), my_partition(parent_.my_partition, split_obj)"
  },
  {
    "label": "set_affinity()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "set_affinity(*this)"
  },
  {
    "label": "fgt_algorithm()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "fgt_algorithm(tbb::internal::PARALLEL_FOR_TASK, this, (void *)&parent_)"
  },
  {
    "label": "start_for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "start_for(start_for& parent_, const Range& r, depth_t d ) : my_range(r), my_body(parent_.my_body), my_partition(parent_.my_partition, split())"
  },
  {
    "label": "align_depth()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "align_depth(d)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(const Range& range, const Body& body, Partitioner& partitioner)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if ! __TBB_TASK_GROUP_CONTEXT | | TBB_JOIN_OUTER_TASK_GROUP start_for& a =*)",
    "insertText": "new(task::allocate_root()) start_for(range,body,partitioner)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (# else task_group_context)",
    "insertText": "context(PARALLEL_FOR)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (start_for& a =*)",
    "insertText": "new(task::allocate_root(context)) start_for(range,body,partitioner)"
  },
  {
    "label": "fgt_begin_algorithm()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "fgt_begin_algorithm(tbb::internal::PARALLEL_FOR_TASK, (void*)&context)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_root_and_wait(a)"
  },
  {
    "label": "fgt_end_algorithm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_end_algorithm((void*)&context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } # if __TBB_TASK_GROUP_CONTEXT void)",
    "insertText": "run(const Range& range, const Body& body, Partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "run_body()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "run_body(Range &r)"
  },
  {
    "label": "fgt_alg_begin_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_alg_begin_body(tbb::internal::PARALLEL_FOR_TASK, (void *)const_cast<Body*>(&(this->my_body)), (void*)this)"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body(r)"
  },
  {
    "label": "fgt_alg_end_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_alg_end_body((void *)const_cast<Body*>(&(this->my_body)))"
  },
  {
    "label": "offer_work()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "offer_work(typename Partitioner::split_type& split_obj)"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*new( allocate_sibling(static_cast<task*>(this), sizeof(start_for)) ) start_for(*this, split_obj))"
  },
  {
    "label": "offer_work()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "offer_work(const Range& r, depth_t d = 0)"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*new( allocate_sibling(static_cast<task*>(this), sizeof(start_for)) ) start_for(*this, r, d))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (task* parent_ptr =)",
    "insertText": "new(start_for_task->allocate_continuation() ) flag_task()"
  },
  {
    "label": "set_parent()",
    "kind": "Method",
    "detail": "Function (start_for_task ->)",
    "insertText": "set_parent(parent_ptr)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (parent_ptr ->)",
    "insertText": "set_ref_count(2)"
  },
  {
    "label": "check_being_stolen()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "check_being_stolen(*this)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "execute(*this, my_range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( const tbb::blocked_range<Index>& r)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Index b = r .)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (Index e = r .)",
    "insertText": "end()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index ms = my_step ; Index k = my_begin + b* ms ; # if __INTEL_COMPILER # pragma ivdep # if __TBB_ASSERT_ON_VECTORIZATION_FAILURE # pragma vector always assert # endif # endif)",
    "insertText": "for(Index i = b; i < e; ++i, k += ms)"
  },
  {
    "label": "my_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_func(k)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_for<Range,Body,const __TBB_DEFAULT_PARTITIONER)",
    "insertText": "run(range,body,__TBB_DEFAULT_PARTITIONER())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const simple_partitioner& partitioner)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_for<Range,Body,const simple_partitioner)",
    "insertText": "run(range,body,partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const auto_partitioner& partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const static_partitioner& partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, affinity_partitioner& partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_for<Range,Body,const __TBB_DEFAULT_PARTITIONER)",
    "insertText": "run(range, body, __TBB_DEFAULT_PARTITIONER(), context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const simple_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_for<Range,Body,const simple_partitioner)",
    "insertText": "run(range, body, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const auto_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, const static_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_for(const Range& range, const Body& body, affinity_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_for<Range,Body,affinity_partitioner)",
    "insertText": "run(range,body,partitioner, context)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (} # endif namespace strict_ppl { template<Index,Function,Partitioner> void)",
    "insertText": "parallel_for_impl(Index first, Index last, Index step, const Function& f, Partitioner& partitioner)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "end(last - first - Index(1)) / step + Index(1)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<Index>)",
    "insertText": "range(static_cast<Index>(0), end)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (internal::parallel_for_body<Function,Index>)",
    "insertText": "body(f, first, step)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, body, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} } template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, step, f, auto_partitioner())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const simple_partitioner& partitioner)"
  },
  {
    "label": "simple_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "simple_partitioner(first, last, step, f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const auto_partitioner& partitioner)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, step, f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const static_partitioner& partitioner)"
  },
  {
    "label": "static_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "static_partitioner(first, last, step, f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, affinity_partitioner& partitioner)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_impl(first, last, step, f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, static_cast<Index>(1), f, auto_partitioner())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const simple_partitioner& partitioner)"
  },
  {
    "label": "simple_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "simple_partitioner(first, last, static_cast<Index>(1), f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const auto_partitioner& partitioner)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, static_cast<Index>(1), f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const static_partitioner& partitioner)"
  },
  {
    "label": "static_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "static_partitioner(first, last, static_cast<Index>(1), f, partitioner)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, affinity_partitioner& partitioner)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_impl(first, last, static_cast<Index>(1), f, partitioner)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Index,Function,Partitioner> void)",
    "insertText": "parallel_for_impl(Index first, Index last, Index step, const Function& f, Partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, body, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} } template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, tbb::task_group_context &context)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, step, f, auto_partitioner(), context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const simple_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "simple_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "simple_partitioner(first, last, step, f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const auto_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, step, f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, const static_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "static_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "static_partitioner(first, last, step, f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, Index step, const Function& f, affinity_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_impl(first, last, step, f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, tbb::task_group_context &context)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, static_cast<Index>(1), f, auto_partitioner(), context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const simple_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "simple_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "simple_partitioner(first, last, static_cast<Index>(1), f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const auto_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "auto_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "auto_partitioner(first, last, static_cast<Index>(1), f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, const static_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "static_partitioner()",
    "kind": "Method",
    "detail": "Function (parallel_for_impl<Index,Function,const)",
    "insertText": "static_partitioner(first, last, static_cast<Index>(1), f, partitioner, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} template<Index,Function> void)",
    "insertText": "parallel_for(Index first, Index last, const Function& f, affinity_partitioner& partitioner, tbb::task_group_context &context)"
  },
  {
    "label": "parallel_for_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_impl(first, last, static_cast<Index>(1), f, partitioner, context)"
  }
]