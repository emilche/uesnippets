[
  {
    "label": "TAttributeArrayContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttributeArrayContainer"
  },
  {
    "label": "FChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunk"
  },
  {
    "label": "TArrayAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayAttribute"
  },
  {
    "label": "TAttributeArrayContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StaticArray . h \" # include \" Algo / Rotate . h \" template<AttributeType> class TAttributeArrayContainer { public :)",
    "insertText": "TAttributeArrayContainer()"
  },
  {
    "label": "TAttributeArrayContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TAttributeArrayContainer(const AttributeType& InDefaultValue) : DefaultValue(InDefaultValue)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetNumRequiredChunks()",
    "kind": "Method",
    "detail": "Function (int32 NumChunks =)",
    "insertText": "GetNumRequiredChunks(ElementCount)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Chunks .)",
    "insertText": "Empty(NumChunks)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Chunks .)",
    "insertText": "SetNum(NumChunks)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Chunks .)",
    "insertText": "Last().NumElements = GetElementsInLastChunk(ElementCount)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} NumElements = ElementCount ; } void)",
    "insertText": "SetNum(const int32 ElementCount, const AttributeType& Default)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ElementCount > NumElements)"
  },
  {
    "label": "GetElementsInLastChunk()",
    "kind": "Method",
    "detail": "Function (int32 IndexInOldLastChunk = NumElements& ChunkMask ; int32 ElementsInLastChunk =)",
    "insertText": "GetElementsInLastChunk(ElementCount)"
  },
  {
    "label": "LastIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LastIndex(NumChunks == OldNumChunks)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FChunk& OldLastChunk = Chunks [ OldNumChunks - 1 ] ; int32 DataStartIndex = OldLastChunk . StartIndex [ IndexInOldLastChunk - 1 ] + OldLastChunk . MaxCount [ IndexInOldLastChunk - 1 ] ; OldLastChunk . Data .)",
    "insertText": "SetNum(DataStartIndex, EAllowShrinking::No)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (OldLastChunk . StartIndex [ IndexInOldLastChunk ] = DataStartIndex ; OldLastChunk . Count [ IndexInOldLastChunk ] = 0 ; OldLastChunk . MaxCount [ IndexInOldLastChunk ] = 0 ; } OldLastChunk . NumElements = LastIndex ; } Chunks .)",
    "insertText": "Last()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} NumElements = ElementCount ; } uint32)",
    "insertText": "GetHash(uint32 Crc = 0)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (Crc =)",
    "insertText": "MemCrc32(Chunk.Data.GetData(), Chunk.Data.Num() * sizeof(AttributeType), Crc)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return Crc ; } void)",
    "insertText": "Insert(const int32 Index, const AttributeType& Default)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = Index + 1 ;)",
    "insertText": "if(EndIndex > NumElements)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(EndIndex, Default)"
  },
  {
    "label": "SetToDefault()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetToDefault(const int32 Index, const AttributeType& Default)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; Chunks [ ChunkIndex ] . Count [ ElementIndex ] = 0 ; } void)",
    "insertText": "Remap(const TSparseArray<int32>& IndexRemap, const AttributeType& Default)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, TAttributeArrayContainer<AttributeType>& Array)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Ar<<Array . Chunks ; Ar<<Array . NumElements ; Ar<<Array . DefaultValue ; return Ar ; } TArrayView<AttributeType>)",
    "insertText": "Get(int32 Index)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; FChunk& Chunk = Chunks [ ChunkIndex ] ; return TArrayView<)",
    "insertText": "AttributeType(Chunk.Data.GetData() + Chunk.StartIndex[ElementIndex], Chunk.Count[ElementIndex])"
  },
  {
    "label": "GetElementCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetElementCount(int32 Index)"
  },
  {
    "label": "GetReservedElementCount()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; const FChunk& Chunk = Chunks [ ChunkIndex ] ; return Chunk . Count [ ElementIndex ] ; } int32)",
    "insertText": "GetReservedElementCount(int32 Index)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; const FChunk& Chunk = Chunks [ ChunkIndex ] ; return Chunk . MaxCount [ ElementIndex ] ; } void)",
    "insertText": "Set(int32 Index, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (const bool bSetCount = true ; const bool bSetDefault = false ; TArrayView<AttributeType> Element =)",
    "insertText": "SetElementSize(Index, Value.Num(), bSetCount, bSetDefault)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (Element [ I ] = Value [ I ] ; } } TArrayView<AttributeType>)",
    "insertText": "SetElementSize(int32 Index, int32 Size, bool bSetCount, bool bSetDefault = true)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; FChunk& Chunk = Chunks [ ChunkIndex ] ; AttributeType* BasePtr = Chunk . Data .)",
    "insertText": "GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Extra = Size - Chunk . MaxCount [ ElementIndex ] ;)",
    "insertText": "if(Extra > 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Chunk . Data .)",
    "insertText": "SetNum(OldDataSize + Extra)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (AttributeType* StartPtr = BasePtr + Chunk . StartIndex [ ElementIndex ] + Chunk . MaxCount [ ElementIndex ] ; AttributeType* EndPtr = BasePtr + OldDataSize ;)",
    "insertText": "Memmove(StartPtr + Extra, StartPtr, (EndPtr - StartPtr) * sizeof(AttributeType))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Chunk . MaxCount [ ElementIndex ] = Size ;)",
    "insertText": "for(int32 I = ElementIndex + 1; I < Chunk.NumElements; I++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Chunk . StartIndex [ I ] + = Extra ; } })",
    "insertText": "if(bSetDefault)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Chunk . Data [ Chunk . StartIndex [ ElementIndex ] + I ] = DefaultValue ; } } else {)",
    "insertText": "for(int32 I = Size; I < Chunk.Count[ElementIndex]; I++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Chunk . Data [ Chunk . StartIndex [ ElementIndex ] + I ] = DefaultValue ; } } })",
    "insertText": "if(bSetCount)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (Chunk . Count [ ElementIndex ] = Size ; } return TArrayView<)",
    "insertText": "AttributeType(BasePtr + Chunk.StartIndex[ElementIndex], Chunk.Count[ElementIndex])"
  },
  {
    "label": "InsertIntoElement()",
    "kind": "Method",
    "detail": "Function (} TArrayView<AttributeType>)",
    "insertText": "InsertIntoElement(int32 Index, int32 SubArrayIndex, int32 InsertCount = 1)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (int32 ChunkIndex = Index>> ChunkBits ; int32 ElementIndex = Index& ChunkMask ; FChunk& Chunk = Chunks [ ChunkIndex ] ; int32 CurrentCount = Chunk . Count [ ElementIndex ] ;)",
    "insertText": "checkSlow(SubArrayIndex >= 0 && SubArrayIndex <= CurrentCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NewCount = CurrentCount + InsertCount ;)",
    "insertText": "if(NewCount > Chunk.MaxCount[ElementIndex])"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (NewCount = NewCount* 4 / 3 ; const bool bSetCount = false ; const bool bSetDefault = true ;)",
    "insertText": "SetElementSize(Index, NewCount, bSetCount, bSetDefault)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Chunk . Count [ ElementIndex ] + = InsertCount ; TArrayView<AttributeType> Element =)",
    "insertText": "Get(Index)"
  },
  {
    "label": "ElementToRotate()",
    "kind": "Method",
    "detail": "Function (int32 SpanSize = NewCount - SubArrayIndex ; TArrayView<AttributeType>)",
    "insertText": "ElementToRotate(Element.GetData() + SubArrayIndex, SpanSize)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(ElementToRotate, SpanSize - InsertCount)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (Element [ I - Count ] = Element [ I ] ; } const bool bSetCount = true ; const bool bSetDefault = true ; return)",
    "insertText": "SetElementSize(Index, Element.Num() - Count, bSetCount, bSetDefault)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} AttributeType)",
    "insertText": "GetDefault()"
  },
  {
    "label": "GetElementsInLastChunk()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetElementsInLastChunk(const int32 ElementCount)"
  },
  {
    "label": "ChunkSize()",
    "kind": "Method",
    "detail": "Function (} const int32 ChunkBits = 8 ; const int32)",
    "insertText": "ChunkSize(1 << ChunkBits)"
  },
  {
    "label": "FChunk()",
    "kind": "Method",
    "detail": "Function (const int32 ChunkMask = ChunkSize - 1 ; struct FChunk {)",
    "insertText": "FChunk()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Reserve(ChunkSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FChunk& Chunk)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Chunk . Data ; Ar<<Chunk . NumElements ;)",
    "insertText": "for(int32 Index = 0; Index < Chunk.NumElements; Index++)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (Ar<<Chunk . MaxCount [ Index ] ; } return Ar ; } TArray<AttributeType> Data ; TStaticArray<int32,ChunkSize> StartIndex { InPlace,0 } ; TStaticArray<int32,ChunkSize> Count { InPlace,0 } ; TStaticArray<int32,ChunkSize> MaxCount { InPlace,0 } ; int32 NumElements = ChunkSize ; } ; TArray<FChunk> Chunks ; int32 NumElements = 0 ; AttributeType DefaultValue =)",
    "insertText": "AttributeType()"
  },
  {
    "label": "NewAttributeArray()",
    "kind": "Method",
    "detail": "Function (TAttributeArrayContainer<AttributeType>)",
    "insertText": "NewAttributeArray(Default)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 OldElementIndex = It .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (const int32 NewElementIndex = IndexRemap [ OldElementIndex ] ; NewAttributeArray .)",
    "insertText": "Insert(NewElementIndex, Default)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (NewAttributeArray .)",
    "insertText": "Set(NewElementIndex, Get(OldElementIndex))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (}* this =)",
    "insertText": "MoveTemp(NewAttributeArray)"
  },
  {
    "label": "TArrayAttribute()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> class TArrayAttribute { template<T> class TArrayAttribute ; using ArrayType = TCopyQualifiersFromTo<AttributeType,TAttributeArrayContainer<std::remove_cv_t<AttributeType>>>::Type ; public :)",
    "insertText": "TArrayAttribute(ArrayType& InArray, int32 InIndex) : Array(&InArray), Index(InIndex)"
  },
  {
    "label": "TArrayAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T = AttributeType,TEnableIf<std::is_same_v<T,const T>,int>::Type = 0>)",
    "insertText": "TArrayAttribute(TArrayAttribute<std::remove_cv_t<T>> InValue) : Array(InValue.Array), Index(InValue.Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 ArrayAttributeIndex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AttributeType&)",
    "insertText": "operator(int32 ArrayAttributeIndex)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} AttributeType&)",
    "insertText": "Last(int32 IndexFromTheEnd = 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNum(int32 Num)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (const bool bSetCount = true ; const bool bSetDefault = true ; Array ->)",
    "insertText": "SetElementSize(Index, Num, bSetCount, bSetDefault)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumUninitialized(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(const AttributeType& Value)"
  },
  {
    "label": "GetElementCount()",
    "kind": "Method",
    "detail": "Function (int32 ElementCount = Array ->)",
    "insertText": "GetElementCount(Index)"
  },
  {
    "label": "InsertIntoElement()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Element = Array ->)",
    "insertText": "InsertIntoElement(Index, ElementCount, 1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Element [ ElementCount ] = Value ; return ElementCount ; } int32)",
    "insertText": "AddUnique(const AttributeType& Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex =)",
    "insertText": "Find(Value)"
  },
  {
    "label": "InsertDefaulted()",
    "kind": "Method",
    "detail": "Function (} else { return FoundIndex ; } } void)",
    "insertText": "InsertDefaulted(int32 StartIndex, int32 Count)"
  },
  {
    "label": "InsertIntoElement()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "InsertIntoElement(Index, StartIndex, Count)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(const AttributeType& Value, int32 StartIndex)"
  },
  {
    "label": "InsertIntoElement()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Element = Array ->)",
    "insertText": "InsertIntoElement(Index, StartIndex, 1)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Element [ StartIndex ] = Value ; } void)",
    "insertText": "RemoveAt(int32 StartIndex, int32 Count)"
  },
  {
    "label": "RemoveFromElement()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "RemoveFromElement(Index, StartIndex, Count)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32)",
    "insertText": "RemoveAll(Predicate Pred)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 WriteIndex = 0 ;)",
    "insertText": "for(int32 ReadIndex = 0; ReadIndex < Count; ReadIndex++)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (Element [ WriteIndex ] = Element [ ReadIndex ] ; WriteIndex + + ; } } const bool bSetCount = true ; const bool bSetDefault = true ; Array ->)",
    "insertText": "SetElementSize(Index, WriteIndex, bSetCount, bSetDefault)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Find(const AttributeType& Value)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> AttributeType*)",
    "insertText": "FindByPredicate(Predicate Pred)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32)",
    "insertText": "IndexOfByPredicate(Predicate Pred)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const AttributeType& Value)"
  },
  {
    "label": "ContainsByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> bool)",
    "insertText": "ContainsByPredicate(Predicate Pred)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "Get(Index).Sort()"
  },
  {
    "label": "SortByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> void)",
    "insertText": "SortByPredicate(Predicate Pred)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "Get(Index).template Sort<Predicate>(Pred)"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StableSort()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "Get(Index).StableSort()"
  },
  {
    "label": "StableSortByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> void)",
    "insertText": "StableSortByPredicate(Predicate Pred)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Array ->)",
    "insertText": "Get(Index).template StableSort<Predicate>(Pred)"
  },
  {
    "label": "ToArrayView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<AttributeType>)",
    "insertText": "ToArrayView()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : AttributeType*)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} AttributeType*)",
    "insertText": "end()"
  }
]