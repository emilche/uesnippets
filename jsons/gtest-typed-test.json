[
  {
    "label": "FooTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooTest"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_TEST_CLASS_NAME_"
  },
  {
    "label": "TestName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestName"
  },
  {
    "label": "TYPED_TEST_SUITE()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_ # if 0 template<T> class FooTest : public testing::Test { public : . . . typedef std::list<T> List ; T shared_ ; T value_ ; } ; typedef testing::Types<char,int,unsigned int> MyTypes ;)",
    "insertText": "TYPED_TEST_SUITE(FooTest, MyTypes)"
  },
  {
    "label": "TYPED_TEST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST(FooTest, DoesBlah)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (TypeParam n = this -> value_ ; n + = TestFixture::shared_ ; TestFixture::List values ; values .)",
    "insertText": "push_back(n)"
  },
  {
    "label": "TYPED_TEST()",
    "kind": "Method",
    "detail": "Function (. . . })",
    "insertText": "TYPED_TEST(FooTest, HasPropertyA)"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (. . . } # endif # if 0 template<T> class FooTest : public testing::Test { . . . } ;)",
    "insertText": "TYPED_TEST_SUITE_P(FooTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(FooTest, DoesBlah)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (TypeParam n = 0 ; . . . })",
    "insertText": "TYPED_TEST_P(FooTest, HasPropertyA)"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (. . . })",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(FooTest, DoesBlah, HasPropertyA)"
  },
  {
    "label": "INSTANTIATE_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (typedef testing::Types<char,int,unsigned int> MyTypes ;)",
    "insertText": "INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes)"
  },
  {
    "label": "GTEST_TYPE_PARAMS_()",
    "kind": "Method",
    "detail": "Function (# endif # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - port . h \" # include \" gtest / internal / gtest - type - util . h \" # define)",
    "insertText": "GTEST_TYPE_PARAMS_(TestSuiteName) gtest_type_params_##TestSuiteName##_ #define GTEST_NAME_GENERATOR_(TestSuiteName) \\ gtest_type_params_##TestSuiteName##_NameGenerator #define TYPED_TEST_SUITE(CaseName, Types, ...) \\ typedef ::testing::internal::GenerateTypeList<Types>::type \\ GTEST_TYPE_PARAMS_(CaseName)"
  },
  {
    "label": "GTEST_NAME_GENERATOR_()",
    "kind": "Method",
    "detail": "Function (\\ typedef::testing::internal::NameGeneratorSelector<__VA_ARGS__>::type \\)",
    "insertText": "GTEST_NAME_GENERATOR_(CaseName) #define TYPED_TEST(CaseName, TestName) \\ static_assert(sizeof(GTEST_STRINGIFY_(TestName)) > 1, \\ \"test-name must not be empty\")"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ template<gtest_TypeParam_> \\ class)",
    "insertText": "GTEST_TEST_CLASS_NAME_(CaseName, TestName)"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ typedef CaseName<gtest_TypeParam_> TestFixture ; \\ typedef gtest_TypeParam_ TypeParam ; \\ void)",
    "insertText": "TestBody()"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ bool gtest_ # # CaseName # # _ # # TestName # # _registered_ \\ GTEST_ATTRIBUTE_UNUSED_ =::testing::internal::TypeParameterizedTest<\\ CaseName,\\::testing::internal::TemplateSel<)",
    "insertText": "GTEST_TEST_CLASS_NAME_(CaseName, \\ TestName)>, \\ GTEST_TYPE_PARAMS_( \\ CaseName)>::Register(\"\", \\ ::testing::internal::CodeLocation( \\ __FILE__, __LINE__), \\ GTEST_STRINGIFY_(CaseName), \\ GTEST_STRINGIFY_(TestName), 0, \\ ::testing::internal::GenerateNames< \\ GTEST_NAME_GENERATOR_(CaseName), \\ GTEST_TYPE_PARAMS_(CaseName)>())"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ template<gtest_TypeParam_> \\ void)",
    "insertText": "GTEST_TEST_CLASS_NAME_(CaseName, \\ TestName)<gtest_TypeParam_>::TestBody() #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ #define TYPED_TEST_CASE \\ static_assert(::testing::internal::TypedTestCaseIsDeprecated(), \"\")"
  },
  {
    "label": "GTEST_SUITE_NAMESPACE_()",
    "kind": "Method",
    "detail": "Function (\\ TYPED_TEST_SUITE # endif # define)",
    "insertText": "GTEST_SUITE_NAMESPACE_(TestSuiteName) gtest_suite_##TestSuiteName##_ #define GTEST_TYPED_TEST_SUITE_P_STATE_(TestSuiteName) \\ gtest_typed_test_suite_p_state_##TestSuiteName##_ #define GTEST_REGISTERED_TEST_NAMES_(TestSuiteName) \\ gtest_registered_test_names_##TestSuiteName##_ #define TYPED_TEST_SUITE_P(SuiteName) \\ static ::testing::internal::TypedTestSuitePState \\ GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName) #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ #define TYPED_TEST_CASE_P \\ static_assert(::testing::internal::TypedTestCase_P_IsDeprecated(), \"\")"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (\\ TYPED_TEST_SUITE_P # endif # define)",
    "insertText": "TYPED_TEST_P(SuiteName, TestName) \\ namespace GTEST_SUITE_NAMESPACE_(SuiteName)"
  },
  {
    "label": "GTEST_TYPED_TEST_SUITE_P_STATE_()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ bool gtest_ # # TestName # # _defined_ GTEST_ATTRIBUTE_UNUSED_ = \\)",
    "insertText": "GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName).AddTestName( \\ __FILE__, __LINE__, GTEST_STRINGIFY_(SuiteName), \\ GTEST_STRINGIFY_(TestName))"
  },
  {
    "label": "GTEST_SUITE_NAMESPACE_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<gtest_TypeParam_> \\ void)",
    "insertText": "GTEST_SUITE_NAMESPACE_(\\ SuiteName)::TestName<gtest_TypeParam_>::TestBody() #define REGISTER_TYPED_TEST_SUITE_P(SuiteName, ...) \\ namespace GTEST_SUITE_NAMESPACE_(SuiteName)"
  },
  {
    "label": "GTEST_REGISTERED_TEST_NAMES_()",
    "kind": "Method",
    "detail": "Function (\\ typedef::testing::internal::Templates<__VA_ARGS__> gtest_AllTests_ ; \\ } \\ const char* const)",
    "insertText": "GTEST_REGISTERED_TEST_NAMES_(\\ SuiteName) GTEST_ATTRIBUTE_UNUSED_ = \\ GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName).VerifyRegisteredTestNames( \\ GTEST_STRINGIFY_(SuiteName), __FILE__, __LINE__, #__VA_ARGS__) #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ #define REGISTER_TYPED_TEST_CASE_P \\ static_assert(::testing::internal::RegisterTypedTestCase_P_IsDeprecated(), \\ \"\")"
  },
  {
    "label": "INSTANTIATE_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (\\ REGISTER_TYPED_TEST_SUITE_P # endif # define)",
    "insertText": "INSTANTIATE_TYPED_TEST_SUITE_P(Prefix, SuiteName, Types, ...) \\ static_assert(sizeof(GTEST_STRINGIFY_(Prefix)) > 1, \\ \"test-suit-prefix must not be empty\")"
  },
  {
    "label": "GTEST_SUITE_NAMESPACE_()",
    "kind": "Method",
    "detail": "Function (\\ bool gtest_ # # Prefix # # _ # # SuiteName GTEST_ATTRIBUTE_UNUSED_ = \\::testing::internal::TypeParameterizedTestSuite<\\ SuiteName,)",
    "insertText": "GTEST_SUITE_NAMESPACE_(SuiteName)::gtest_AllTests_, \\ ::testing::internal::GenerateTypeList<Types>::type>:: \\ Register(GTEST_STRINGIFY_(Prefix), \\ ::testing::internal::CodeLocation(__FILE__, __LINE__), \\ &GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName), \\ GTEST_STRINGIFY_(SuiteName), \\ GTEST_REGISTERED_TEST_NAMES_(SuiteName), \\ ::testing::internal::GenerateNames< \\ ::testing::internal::NameGeneratorSelector< \\ __VA_ARGS__>::type, \\ ::testing::internal::GenerateTypeList<Types>::type>()) #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ #define INSTANTIATE_TYPED_TEST_CASE_P \\ static_assert( \\ ::testing::internal::InstantiateTypedTestCase_P_IsDeprecated(), \"\")"
  }
]