[
  {
    "label": "ir_variable_refcount_entry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_variable_refcount_entry"
  },
  {
    "label": "ir_variable_refcount_visitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_variable_refcount_visitor"
  },
  {
    "label": "ir_variable_refcount_entry()",
    "kind": "Method",
    "detail": "Function (# include \" ir . h \" # include \" ir_visitor . h \" # include \" glsl_types . h \" # include<map> class ir_variable_refcount_entry : public exec_node { public :)",
    "insertText": "ir_variable_refcount_entry(ir_variable *var)"
  },
  {
    "label": "ir_variable_refcount_visitor()",
    "kind": "Method",
    "detail": "Function (ir_variable* var ; ir_assignment* assign ; ir_assignment* last_assign ; ir_call* call ; unsigned referenced_count ; unsigned assigned_count ; bool declaration ; } ; class ir_variable_refcount_visitor : public ir_hierarchical_visitor { public :)",
    "insertText": "ir_variable_refcount_visitor(void)"
  },
  {
    "label": "ralloc_context()",
    "kind": "Method",
    "detail": "Function (this -> mem_ctx =)",
    "insertText": "ralloc_context(NULL)"
  },
  {
    "label": "ralloc_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ralloc_free(this->mem_ctx)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} ir_visitor_status)",
    "insertText": "visit(ir_variable *)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit(ir_dereference_variable *)"
  },
  {
    "label": "visit_enter()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_enter(ir_function_signature *)"
  },
  {
    "label": "visit_leave()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_leave(ir_assignment *)"
  },
  {
    "label": "visit_leave()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_leave(ir_call *)"
  },
  {
    "label": "visit_enter()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_enter(ir_if *)"
  },
  {
    "label": "visit_leave()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_leave(ir_if *)"
  },
  {
    "label": "visit_enter()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_enter(ir_loop *)"
  },
  {
    "label": "visit_leave()",
    "kind": "Method",
    "detail": "Function (ir_visitor_status)",
    "insertText": "visit_leave(ir_loop *)"
  },
  {
    "label": "get_variable_entry()",
    "kind": "Method",
    "detail": "Function (ir_variable_refcount_entry*)",
    "insertText": "get_variable_entry(ir_variable *var)"
  }
]