[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedBstr()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_BSTR_H_ # define BASE_WIN_SCOPED_BSTR_H_ # include<windows . h> # include<oleauto . h> # include<stddef . h> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / strings / string_piece . h \" namespace base { namespace win { class BASE_EXPORT ScopedBstr { public :)",
    "insertText": "ScopedBstr()"
  },
  {
    "label": "ScopedBstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedBstr(WStringPiece non_bstr)"
  },
  {
    "label": "ScopedBstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedBstr(const ScopedBstr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedBstr&)",
    "insertText": "operator(const ScopedBstr&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BSTR)",
    "insertText": "Get()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (BSTR)",
    "insertText": "Release()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (BSTR)",
    "insertText": "Allocate(WStringPiece str)"
  },
  {
    "label": "AllocateBytes()",
    "kind": "Method",
    "detail": "Function (BSTR)",
    "insertText": "AllocateBytes(size_t bytes)"
  },
  {
    "label": "SetByteLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetByteLen(size_t bytes)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ScopedBstr& bstr2)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (BSTR*)",
    "insertText": "Receive()"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Length()"
  },
  {
    "label": "ByteLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ByteLength()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const ScopedBstr& bstr2)"
  }
]