[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VideoCodecVP8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecVP8"
  },
  {
    "label": "VideoCodecVP9",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecVP9"
  },
  {
    "label": "VideoCodecH264",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecH264"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "TimingFrameTriggerThresholds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingFrameTriggerThresholds"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_CODEC_H_ # define API_VIDEO_CODECS_VIDEO_CODEC_H_ # include<stddef . h> # include<stdint . h> # include<string> # include \" absl / strings / string_view . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_codec_type . h \" # include \" api / video_codecs / scalability_mode . h \" # include \" api / video_codecs / simulcast_stream . h \" # include \" api / video_codecs / spatial_layer . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class VideoCodecComplexity { kComplexityLow = - 1,kComplexityNormal = 0,kComplexityHigh = 1,kComplexityHigher = 2,kComplexityMax = 3 } ; struct VideoCodecVP8 { bool)",
    "insertText": "operator(const VideoCodecVP8& other)"
  },
  {
    "label": "SetNumberOfTemporalLayers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumberOfTemporalLayers(unsigned char n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (numberOfTemporalLayers = n ; } unsigned char numberOfTemporalLayers ; bool denoisingOn ; bool automaticResizeOn ; int keyFrameInterval ; } ; enum class InterLayerPredMode : int { kOff = 0,kOn = 1,kOnKeyPic = 2 } ; struct VideoCodecVP9 { bool)",
    "insertText": "operator(const VideoCodecVP9& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (numberOfTemporalLayers = n ; } unsigned char numberOfTemporalLayers ; bool denoisingOn ; int keyFrameInterval ; bool adaptiveQpMode ; bool automaticResizeOn ; unsigned char numberOfSpatialLayers ; bool flexibleMode ; InterLayerPredMode interLayerPred ; } ; struct VideoCodecH264 { bool)",
    "insertText": "operator(const VideoCodecH264& other)"
  },
  {
    "label": "CodecTypeToPayloadString()",
    "kind": "Method",
    "detail": "Function (numberOfTemporalLayers = n ; } int keyFrameInterval ; uint8_t numberOfTemporalLayers ; } ; RTC_EXPORT const char*)",
    "insertText": "CodecTypeToPayloadString(VideoCodecType type)"
  },
  {
    "label": "PayloadStringToCodecType()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT VideoCodecType)",
    "insertText": "PayloadStringToCodecType(const std::string& name)"
  },
  {
    "label": "VideoCodec()",
    "kind": "Method",
    "detail": "Function (union VideoCodecUnion { VideoCodecVP8 VP8 ; VideoCodecVP9 VP9 ; VideoCodecH264 H264 ; } ; enum class VideoCodecMode { kRealtimeVideo,kScreensharing } ; class RTC_EXPORT VideoCodec { public :)",
    "insertText": "VideoCodec()"
  },
  {
    "label": "GetScalabilityMode()",
    "kind": "Method",
    "detail": "Function (absl::optional<ScalabilityMode>)",
    "insertText": "GetScalabilityMode()"
  },
  {
    "label": "UnsetScalabilityMode()",
    "kind": "Method",
    "detail": "Function (scalability_mode_ = scalability_mode ; } void)",
    "insertText": "UnsetScalabilityMode()"
  },
  {
    "label": "GetVideoEncoderComplexity()",
    "kind": "Method",
    "detail": "Function (scalability_mode_ = absl::nullopt ; } VideoCodecComplexity)",
    "insertText": "GetVideoEncoderComplexity()"
  },
  {
    "label": "SetVideoEncoderComplexity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoEncoderComplexity(VideoCodecComplexity complexity_setting)"
  },
  {
    "label": "GetFrameDropEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFrameDropEnabled()"
  },
  {
    "label": "SetFrameDropEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDropEnabled(bool enabled)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoCodecType codecType ; uint16_t width ; uint16_t height ; unsigned int startBitrate ; unsigned int maxBitrate ; unsigned int minBitrate ; uint32_t maxFramerate ; bool active ; unsigned int qpMax ; unsigned char numberOfSimulcastStreams ; SimulcastStream simulcastStream [ kMaxSimulcastStreams ] ; SpatialLayer spatialLayers [ kMaxSpatialLayers ] ; VideoCodecMode mode ; bool expect_encode_from_texture ; struct TimingFrameTriggerThresholds { int64_t delay_ms ; uint16_t outlier_ratio_percent ; } timing_frame_thresholds ; bool legacy_conference_mode ; bool)",
    "insertText": "operator(const VideoCodec& other)"
  },
  {
    "label": "VP8()",
    "kind": "Method",
    "detail": "Function (VideoCodecVP8*)",
    "insertText": "VP8()"
  },
  {
    "label": "VP9()",
    "kind": "Method",
    "detail": "Function (VideoCodecVP9*)",
    "insertText": "VP9()"
  },
  {
    "label": "H264()",
    "kind": "Method",
    "detail": "Function (VideoCodecH264*)",
    "insertText": "H264()"
  }
]