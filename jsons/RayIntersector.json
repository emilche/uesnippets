[
  {
    "label": "LinearSearchImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinearSearchImpl"
  },
  {
    "label": "LevelSetRayIntersector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetRayIntersector"
  },
  {
    "label": "VolumeRayIntersector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumeRayIntersector"
  },
  {
    "label": "math",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "math"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_RAYINTERSECTOR_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_RAYINTERSECTOR_HAS_BEEN_INCLUDED # include<openvdb / math / DDA . h> # include<openvdb / math / Math . h> # include<openvdb / math / Ray . h> # include<openvdb / math / Stencils . h> # include<openvdb / Grid . h> # include<openvdb / Types . h> # include \" Morphology . h \" # include<iostream> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT,int Iterations = 0,RealT = double> class LinearSearchImpl ; template<GridT,SearchImplT = LinearSearchImpl<GridT>,int NodeLevel = GridT::TreeType::RootNodeType::ChildNodeType::LEVEL,RayT = math::Ray<Real>> class LevelSetRayIntersector { public : using GridType = GridT ; using RayType = RayT ; using RealType = RayT::RealType ; using Vec3Type = RayT::Vec3T ; using ValueT = GridT::ValueType ; using TreeT = GridT::TreeType ;)",
    "insertText": "static_assert(NodeLevel >= -1 && NodeLevel < int(TreeT::DEPTH)-1, \"NodeLevel out of range\")"
  },
  {
    "label": "LevelSetRayIntersector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetRayIntersector(const GridT& grid, const ValueT& isoValue = zeroVal<ValueT>()) : mTester(grid, isoValue)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LevelSetRayIntersector only supports uniform voxels!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(grid.getGridClass() != GRID_LEVEL_SET)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LevelSetRayIntersector only supports level sets!\" \"\\nUse Grid::setGridClass(openvdb::GRID_LEVEL_SET)\")"
  },
  {
    "label": "getIsoValue()",
    "kind": "Method",
    "detail": "Function (} } const ValueT&)",
    "insertText": "getIsoValue()"
  },
  {
    "label": "intersectsIS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersectsIS(const RayType& iRay)"
  },
  {
    "label": "intersectsIS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersectsIS(const RayType& iRay, RealType &iTime)"
  },
  {
    "label": "getIndexTime()",
    "kind": "Method",
    "detail": "Function (iTime = mTester .)",
    "insertText": "getIndexTime()"
  },
  {
    "label": "intersectsIS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersectsIS(const RayType& iRay, Vec3Type& xyz)"
  },
  {
    "label": "getIndexPos()",
    "kind": "Method",
    "detail": "Function (mTester .)",
    "insertText": "getIndexPos(xyz)"
  },
  {
    "label": "intersectsWS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersectsWS(const RayType& wRay, RealType &wTime)"
  },
  {
    "label": "getWorldTime()",
    "kind": "Method",
    "detail": "Function (wTime = mTester .)",
    "insertText": "getWorldTime()"
  },
  {
    "label": "intersectsWS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "intersectsWS(const RayType& wRay, Vec3Type& world)"
  },
  {
    "label": "getWorldPos()",
    "kind": "Method",
    "detail": "Function (mTester .)",
    "insertText": "getWorldPos(world)"
  },
  {
    "label": "getWorldPosAndNml()",
    "kind": "Method",
    "detail": "Function (mTester .)",
    "insertText": "getWorldPosAndNml(world, normal)"
  },
  {
    "label": "VolumeRayIntersector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VolumeRayIntersector(const GridT& grid, int dilationCount = 0) : mIsMaster(true) , mTree(new TreeT(grid.tree(), false, TopologyCopy())) , mGrid(&grid) , mAccessor(*mTree)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"VolumeRayIntersector only supports uniform voxels!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(grid.empty())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LinearSearchImpl does not supports empty grids\")"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dilateActiveValues(*mTree, dilationCount, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (mTree ->)",
    "insertText": "root().evalActiveBoundingBox(mBBox, false)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (mBBox .)",
    "insertText": "max().offset(1)"
  },
  {
    "label": "VolumeRayIntersector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VolumeRayIntersector(const GridT& grid, const math::CoordBBox& bbox) : mIsMaster(true) , mTree(new TreeT(grid.tree(), false, TopologyCopy())) , mGrid(&grid) , mAccessor(*mTree) , mBBox(bbox)"
  },
  {
    "label": "VolumeRayIntersector()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "VolumeRayIntersector(const VolumeRayIntersector& other) : mIsMaster(false) , mTree(other.mTree) , mGrid(other.mGrid) , mAccessor(*mTree) , mRay(other.mRay) , mTmax(other.mTmax) , mBBox(other.mBBox)"
  },
  {
    "label": "VolumeRayIntersector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VolumeRayIntersector()"
  },
  {
    "label": "setIndexRay()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "setIndexRay(const RayT& iRay)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (mRay = iRay ; const bool hit = mRay .)",
    "insertText": "clip(mBBox)"
  },
  {
    "label": "march()",
    "kind": "Method",
    "detail": "Function (} RayT::TimeSpan)",
    "insertText": "march()"
  },
  {
    "label": "march()",
    "kind": "Method",
    "detail": "Function (const RayT::TimeSpan t = mHDDA .)",
    "insertText": "march(mRay, mAccessor)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (t .)",
    "insertText": "get(t0, t1)"
  },
  {
    "label": "hits()",
    "kind": "Method",
    "detail": "Function (} template<ListType> void)",
    "insertText": "hits(ListType& list)"
  },
  {
    "label": "hits()",
    "kind": "Method",
    "detail": "Function (mHDDA .)",
    "insertText": "hits(mRay, mAccessor, list)"
  },
  {
    "label": "getIndexPos()",
    "kind": "Method",
    "detail": "Function (} Vec3R)",
    "insertText": "getIndexPos(RealType time)"
  },
  {
    "label": "getWorldPos()",
    "kind": "Method",
    "detail": "Function (} Vec3R)",
    "insertText": "getWorldPos(RealType time)"
  },
  {
    "label": "getWorldTime()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "getWorldTime(RealType time)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (} const GridT&)",
    "insertText": "grid()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (os<<\" BBox : \"<<mBBox<<std::endl ;)",
    "insertText": "if(verboseLevel==2)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (mTree ->)",
    "insertText": "print(os, 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(verboseLevel>2)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (mTree ->)",
    "insertText": "print(os, 2)"
  },
  {
    "label": "LinearSearchImpl()",
    "kind": "Method",
    "detail": "Function (} } } private : using AccessorT = tree::ValueAccessor<const TreeT,false> ; const bool mIsMaster ; TreeT* mTree ; const GridT* mGrid ; AccessorT mAccessor ; RayT mRay ; RealType mTmax ; math::CoordBBox mBBox ; math::VolumeHDDA<TreeT,RayType,NodeLevel> mHDDA ; } ; template<GridT,int Iterations,RealT> class LinearSearchImpl { public : using RayT = math::Ray<RealT> ; using VecT = math::Vec3<RealT> ; using ValueT = GridT::ValueType ; using AccessorT = GridT::ConstAccessor ; using StencilT = math::BoxStencil<GridT> ;)",
    "insertText": "LinearSearchImpl(const GridT& grid, const ValueT& isoValue = zeroVal<ValueT>()) : mStencil(grid), mIsoValue(isoValue), mMinValue(isoValue - ValueT(2 * grid.voxelSize()[0])), mMaxValue(isoValue + ValueT(2 * grid.voxelSize()[0]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mIsoValue<= -grid.background() || mIsoValue>= grid.background())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"The iso-value must be inside the narrow-band!\")"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (} grid .)",
    "insertText": "tree().root().evalActiveBoundingBox(mBBox, false)"
  },
  {
    "label": "setWorldRay()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "setWorldRay(const RayT& wRay)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (mRay = wRay .)",
    "insertText": "worldToIndex(mStencil.grid())"
  },
  {
    "label": "getIndexPos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getIndexPos(VecT& xyz)"
  },
  {
    "label": "mRay()",
    "kind": "Method",
    "detail": "Function (xyz =)",
    "insertText": "mRay(mTime)"
  },
  {
    "label": "getWorldPos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getWorldPos(VecT& xyz)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (xyz = mStencil .)",
    "insertText": "grid().indexToWorld(mRay(mTime))"
  },
  {
    "label": "getWorldPosAndNml()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getWorldPosAndNml(VecT& xyz, VecT& nml)"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (mStencil .)",
    "insertText": "moveTo(xyz)"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (nml = mStencil .)",
    "insertText": "gradient(xyz)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (nml .)",
    "insertText": "normalize()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (xyz = mStencil .)",
    "insertText": "grid().indexToWorld(xyz)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "init(RealT t0)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (mT [ 0 ] = t0 ; mV [ 0 ] = static_cast<)",
    "insertText": "ValueT(this->interpValue(t0))"
  },
  {
    "label": "setRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRange(RealT t0, RealT t1)"
  },
  {
    "label": "setTimes()",
    "kind": "Method",
    "detail": "Function (mRay .)",
    "insertText": "setTimes(t0, t1)"
  },
  {
    "label": "ray()",
    "kind": "Method",
    "detail": "Function (} const RayT&)",
    "insertText": "ray()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const Coord& ijk, RealT time)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueT V ;)",
    "insertText": "if(mStencil.accessor().probeValue(ijk, V) && V>mMinValue && V<mMaxValue)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (mT [ 1 ] = time ; mV [ 1 ] = static_cast<)",
    "insertText": "ValueT(this->interpValue(time))"
  },
  {
    "label": "interpTime()",
    "kind": "Method",
    "detail": "Function (mTime = this ->)",
    "insertText": "interpTime()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "for(int n=0; Iterations>0 && n<Iterations; ++n)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (V = static_cast<)",
    "insertText": "ValueT(this->interpValue(mTime))"
  },
  {
    "label": "ZeroCrossing()",
    "kind": "Method",
    "detail": "Function (const int m =)",
    "insertText": "ZeroCrossing(mV[0], V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(math::isApproxLarger(mT[1], mT[0], RealT(1e-6) ))"
  },
  {
    "label": "interpValue()",
    "kind": "Method",
    "detail": "Function (} RealT)",
    "insertText": "interpValue(RealT time)"
  },
  {
    "label": "mRay()",
    "kind": "Method",
    "detail": "Function (const VecT pos =)",
    "insertText": "mRay(time)"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (mStencil .)",
    "insertText": "moveTo(pos)"
  }
]