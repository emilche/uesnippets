[
  {
    "label": "SCustomToolbarPreviewWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCustomToolbarPreviewWidget"
  },
  {
    "label": "FDropPreviewBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDropPreviewBlock"
  },
  {
    "label": "IMultiBlockBaseWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMultiBlockBaseWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / MultiBox / MultiBox . h \" class SCustomToolbarPreviewWidget : public SMultiBlockBaseWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCustomToolbarPreviewWidget)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "BuildMultiBlockWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMultiBlockWidget(const ISlateStyle* StyleSet, const FName& StyleName)"
  },
  {
    "label": "FDropPreviewBlock()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWidget> Content ; } ; class FDropPreviewBlock : public FMultiBlock { public :)",
    "insertText": "FDropPreviewBlock(TSharedRef<const FMultiBlock> InActualBlock, TSharedRef<IMultiBlockBaseWidget> InActualWidget ) : FMultiBlock( NULL, NULL ) , ActualBlock( InActualBlock ) , ActualWidget( InActualWidget)"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IMultiBlockBaseWidget>)",
    "insertText": "ConstructWidget()"
  },
  {
    "label": "HasIcon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIcon()"
  },
  {
    "label": "GetActualBlock()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FMultiBlock>)",
    "insertText": "GetActualBlock()"
  }
]