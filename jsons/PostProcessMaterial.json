[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FHighResolutionScreenshotMaskInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHighResolutionScreenshotMaskInputs"
  },
  {
    "label": "GetPostProcessMaterialChain()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" OverridePassSequence . h \" # include \" Substrate / Substrate . h \" # include \" NeuralPostProcess . h \" # include \" PostProcess / PostProcessMaterialInputs . h \" class UMaterialInterface ; using FPostProcessMaterialChain = TArray<const UMaterialInterface*,TInlineAllocator<1 0>> ; FPostProcessMaterialChain)",
    "insertText": "GetPostProcessMaterialChain(const FViewInfo& View, EBlendableLocation Location)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FPostProcessMaterialParameters, ) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, View) SHADER_PARAMETER_STRUCT_INCLUDE(FSceneTextureShaderParameters, SceneTextures) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FSubstrateGlobalUniformParameters, Substrate) SHADER_PARAMETER_STRUCT_INCLUDE(FNeuralPostProcessShaderParameters, NeuralPostProcessParameters) SHADER_PARAMETER_STRUCT(FScreenPassTextureViewportParameters, PostProcessOutput) SHADER_PARAMETER_STRUCT_ARRAY(FScreenPassTextureSliceInput, PostProcessInput, [kPostProcessMaterialInputCountMax]) SHADER_PARAMETER_STRUCT_ARRAY(FScreenPassTextureInput, PathTracingPostProcessInput, [kPathTracingPostProcessMaterialInputCountMax]) SHADER_PARAMETER_SAMPLER(SamplerState, PostProcessInput_BilinearSampler) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, EyeAdaptationBuffer) SHADER_PARAMETER(uint32, bMetalMSAAHDRDecode) SHADER_PARAMETER(uint32, bSceneDepthWithoutWaterTextureAvailable) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, SceneDepthWithoutSingleLayerWaterTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SceneDepthWithoutSingleLayerWaterSampler) SHADER_PARAMETER(FVector4f, SceneWithoutSingleLayerWaterMinMaxUV) SHADER_PARAMETER(FVector2f, SceneWithoutSingleLayerWaterTextureSize) SHADER_PARAMETER(FVector2f, SceneWithoutSingleLayerWaterInvTextureSize) SHADER_PARAMETER(uint32, ManualStencilReferenceValue) SHADER_PARAMETER(uint32, ManualStencilTestMask) SHADER_PARAMETER(uint32, UserSceneTextureSceneColorInput) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() FScreenPassTexture AddPostProcessMaterialPass( FRDGBuilder& GraphBuilder, const FViewInfo& View, const FPostProcessMaterialInputs& Inputs, const UMaterialInterface* MaterialInterface)"
  },
  {
    "label": "AddPostProcessMaterialChain()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddPostProcessMaterialChain(FRDGBuilder& GraphBuilder, const FViewInfo& View, int32 ViewIndex, const FPostProcessMaterialInputs& Inputs, const FPostProcessMaterialChain& MaterialChain, EPostProcessMaterialInput MaterialInput = EPostProcessMaterialInput::SceneColor)"
  },
  {
    "label": "IsHighResolutionScreenshotMaskEnabled()",
    "kind": "Method",
    "detail": "Function (struct FHighResolutionScreenshotMaskInputs { FScreenPassRenderTarget OverrideOutput ; FScreenPassTexture SceneColor ; FSceneTextureShaderParameters SceneTextures ; UMaterialInterface* Material = nullptr ; UMaterialInterface* MaskMaterial = nullptr ; UMaterialInterface* CaptureRegionMaterial = nullptr ; } ; bool)",
    "insertText": "IsHighResolutionScreenshotMaskEnabled(const FViewInfo& View)"
  },
  {
    "label": "IsPathTracingVarianceTextureRequiredInPostProcessMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPathTracingVarianceTextureRequiredInPostProcessMaterial(const FViewInfo& View)"
  },
  {
    "label": "AddHighResolutionScreenshotMaskPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddHighResolutionScreenshotMaskPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FHighResolutionScreenshotMaskInputs& Inputs)"
  }
]