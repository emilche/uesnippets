[
  {
    "label": "FVelocityAndPressureField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVelocityAndPressureField"
  },
  {
    "label": "DefaultDragCoefficient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / SoftsSimulationSpace . h \" # include \" Chaos / TriangleMesh . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / PBDFlatWeightMap . h \" namespace Chaos::Softs { class FVelocityAndPressureField final { public : FSolverReal)",
    "insertText": "DefaultDragCoefficient(FSolverReal)"
  },
  {
    "label": "DefaultLiftCoefficient()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultLiftCoefficient(FSolverReal)"
  },
  {
    "label": "DefaultFluidDensity()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "DefaultFluidDensity(FSolverReal)"
  },
  {
    "label": "MinCoefficient()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinCoefficient(FSolverReal)"
  },
  {
    "label": "MaxCoefficient()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxCoefficient(FSolverReal)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (EChaosSoftsSimulationSpace DefaultWindVelocitySpace = EChaosSoftsSimulationSpace::WorldSpace ; bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVelocityAndPressureField(const FCollectionPropertyConstFacade& PropertyCollection) : Offset(INDEX_NONE) , NumParticles(0) , Lift(GetWeightedFloatLift(PropertyCollection, (FSolverReal)0.).ClampAxes(MinCoefficient, MaxCoefficient)) , OuterLift(GetWeightedFloatOuterLift(PropertyCollection, FSolverVec2(Lift.GetLow(), Lift.GetHigh())).ClampAxes(MinCoefficient, MaxCoefficient)) , Drag(GetWeightedFloatDrag(PropertyCollection, (FSolverReal)0.).ClampAxes(MinCoefficient, MaxCoefficient)) , OuterDrag(GetWeightedFloatOuterDrag(PropertyCollection, FSolverVec2(Drag.GetLow(), Drag.GetHigh())).ClampAxes(MinCoefficient, MaxCoefficient)) , Pressure(GetWeightedFloatPressure(PropertyCollection, (FSolverReal)0.)) , Rho(FMath::Max(GetFluidDensity(PropertyCollection, (FSolverReal)0.), (FSolverReal)0.)) , QuarterRho(Rho * (FSolverReal)0.25f) , DragIndex(PropertyCollection) , OuterDragIndex(PropertyCollection) , LiftIndex(PropertyCollection) , OuterLiftIndex(PropertyCollection) , FluidDensityIndex(PropertyCollection) , PressureIndex(PropertyCollection) , WindVelocityIndex(PropertyCollection) , WindVelocitySpaceIndex(PropertyCollection)"
  },
  {
    "label": "FVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVelocityAndPressureField(const FSolverParticlesRange& Particles, const FTriangleMesh* TriangleMesh, const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& Weightmaps, FSolverReal WorldScale) : Lift(GetWeightedFloatLift(PropertyCollection, (FSolverReal)0.).ClampAxes(MinCoefficient, MaxCoefficient)) , OuterLift(GetWeightedFloatOuterLift(PropertyCollection, FSolverVec2(Lift.GetLow(), Lift.GetHigh())).ClampAxes(MinCoefficient, MaxCoefficient)) , Drag(GetWeightedFloatDrag(PropertyCollection, (FSolverReal)0.).ClampAxes(MinCoefficient, MaxCoefficient)) , OuterDrag(GetWeightedFloatOuterDrag(PropertyCollection, FSolverVec2(Drag.GetLow(), Drag.GetHigh())).ClampAxes(MinCoefficient, MaxCoefficient)) , Pressure(GetWeightedFloatPressure(PropertyCollection, (FSolverReal)0.)/WorldScale) , Rho(FMath::Max(GetFluidDensity(PropertyCollection, (FSolverReal)0.)/FMath::Cube(WorldScale), (FSolverReal)0.)) , QuarterRho(Rho* (FSolverReal)0.25f) , DragIndex(PropertyCollection) , OuterDragIndex(PropertyCollection) , LiftIndex(PropertyCollection) , OuterLiftIndex(PropertyCollection) , FluidDensityIndex(PropertyCollection) , PressureIndex(PropertyCollection) , WindVelocityIndex(PropertyCollection) , WindVelocitySpaceIndex(PropertyCollection)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry(Particles, TriangleMesh)"
  },
  {
    "label": "SetMultipliers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultipliers(PropertyCollection, Weightmaps)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(Particles)"
  },
  {
    "label": "FVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVelocityAndPressureField() : Offset(INDEX_NONE) , NumParticles(0) , Lift(FSolverVec2(0.)) , OuterLift(FSolverVec2(0.)) , Drag(FSolverVec2(0.)) , OuterDrag(FSolverVec2(0.)) , Pressure(FSolverVec2(0.)) , Rho((FSolverReal)0.) , QuarterRho(Rho* (FSolverReal)0.25f) , DragIndex(ForceInit) , OuterDragIndex(ForceInit) , LiftIndex(ForceInit) , OuterLiftIndex(ForceInit) , FluidDensityIndex(ForceInit) , PressureIndex(ForceInit) , WindVelocityIndex(ForceInit) , WindVelocitySpaceIndex(ForceInit)"
  },
  {
    "label": "FVelocityAndPressureField()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVelocityAndPressureField()"
  },
  {
    "label": "UpdateForces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateForces(const FSolverParticles& InParticles, const FSolverReal)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>& ElementIndices = PointToTriangleMap [ Index ] ;)",
    "insertText": "for(const int32 ElementIndex : ElementIndices)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "Acceleration(Index) += InParticles.InvM(Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Apply(FSolverParticlesRange& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& Weightmaps, FSolverReal WorldScale, bool bEnableAerodynamics)"
  },
  {
    "label": "SetPropertiesAndWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertiesAndWind(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& Weightmaps, FSolverReal WorldScale, bool bEnableAerodynamics, const FSolverVec3& SolverWind, const FRotation3& LocalSpaceRotation = FRotation3::Identity, const FRotation3& ReferenceSpaceRotation = FRotation3::Identity)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FSolverVec2& Drag, const FSolverVec2& OuterDrag, const FSolverVec2& Lift, const FSolverVec2& OuterLift, const FSolverReal FluidDensity, const FSolverVec2& Pressure = FSolverVec2::ZeroVector, FSolverReal WorldScale = 1.f)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(InDrag, InDrag, InLift, InLift, InFluidDensity, InPressure, WorldScale)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometry(const FTriangleMesh* TriangleMesh, const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& Weightmaps, FSolverReal WorldScale)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry(const FTriangleMesh* TriangleMesh, const TConstArrayView<FRealSingle>& DragMultipliers, const TConstArrayView<FRealSingle>& OuterDragMultipliers, const TConstArrayView<FRealSingle>& LiftMultipliers, const TConstArrayView<FRealSingle>& OuterLiftMultipliers, const TConstArrayView<FRealSingle>& PressureMultipliers)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry(TriangleMesh, DragMultipliers, DragMultipliers, LiftMultipliers, LiftMultipliers, PressureMultipliers)"
  },
  {
    "label": "SetVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocity(const FSolverVec3& InVelocity)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (Velocity = InVelocity ; } TConstArrayView<TVector<int32,3>>)",
    "insertText": "GetElements()"
  },
  {
    "label": "GetForces()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetForces()"
  },
  {
    "label": "CalculateForce()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "CalculateForce(const TConstArrayView<FSolverVec3>& Xs, const TConstArrayView<FSolverVec3>& Vs, int32 ElementIndex)"
  },
  {
    "label": "AreAerodynamicsEnabled()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "AreAerodynamicsEnabled()"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitColor(const FSolverParticlesRange& InParticles)"
  },
  {
    "label": "ResetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetColor()"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry(const FSolverParticlesRange& Particles, const FTriangleMesh* TriangleMesh)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry(const FTriangleMesh* TriangleMesh)"
  },
  {
    "label": "SetMultipliers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultipliers(const FCollectionPropertyConstFacade& PropertyCollection,const TMap<FString, TConstArrayView<FRealSingle>>& Weightmaps)"
  },
  {
    "label": "SetMultipliers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultipliers(const TConstArrayView<FRealSingle>& DragMultipliers, const TConstArrayView<FRealSingle>& OuterDragMultipliers, const TConstArrayView<FRealSingle>& LiftMultipliers, const TConstArrayView<FRealSingle>& OuterLiftMultipliers, const TConstArrayView<FRealSingle>& PressureMultipliers)"
  },
  {
    "label": "CalculateForce()",
    "kind": "Method",
    "detail": "Function (FSolverVec3)",
    "insertText": "CalculateForce(const TConstArrayView<FSolverVec3>& Xs, const TConstArrayView<FSolverVec3>& Vs, int32 ElementIndex, const FSolverVec3& InVelocity, const FSolverReal CdI, const FSolverReal CdO, const FSolverReal ClI, const FSolverReal ClO, const FSolverReal Cp)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const TVec3<int32>& Element = Elements [ ElementIndex ] ; FSolverVec3 N =)",
    "insertText": "CrossProduct(Xs[Element[2]] - Xs[Element[0]], Xs[Element[1]] - Xs[Element[0]])"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (const FSolverReal DoubleArea = N .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "SurfaceVelocity()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3&)",
    "insertText": "SurfaceVelocity(FSolverReal)(1. / 3.) * ( Vs[Element[0]] + Vs[Element[1]] + Vs[Element[2]])"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 V = InVelocity - SurfaceVelocity ; const FSolverReal VDotN =)",
    "insertText": "DotProduct(V, N)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VSquare =)",
    "insertText": "DotProduct(V, V)"
  },
  {
    "label": "UpdateField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateField(const FSolverParticles& InParticles, int32 ElementIndex, const FSolverVec3& InVelocity, const FSolverReal CdI, const FSolverReal CdO, const FSolverReal ClI, const FSolverReal ClO, const FSolverReal Cp)"
  },
  {
    "label": "CalculateForce()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "CalculateForce(const TConstArrayView<FSolverVec3>& Xs, const TConstArrayView<FSolverVec3>& Vs, int32 ElementIndex, const FSolverVec3& InVelocity, const FSolverReal CdI, const FSolverReal CdO, const FSolverReal ClI, const FSolverReal ClO, const FSolverReal Cp, const FSolverReal MaxVelocitySquared)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (FSolverVec3 V = InVelocity - SurfaceVelocity ; const FSolverReal RelVelocitySquared = V .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (V* =)",
    "insertText": "Sqrt(MaxVelocitySquared / RelVelocitySquared)"
  },
  {
    "label": "UpdateField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateField(const FSolverParticles& InParticles, int32 ElementIndex, const FSolverVec3& InVelocity, const FSolverReal CdI, const FSolverReal CdO, const FSolverReal ClI, const FSolverReal ClO, const FSolverReal Cp, const FSolverReal MaxVelocitySquared)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} private : int32 Offset ; int32 NumParticles ; TConstArrayView<TArray<int32>> PointToTriangleMap ; TConstArrayView<TVec3<int32>> Elements ; TArray<TArray<int32>> PointToTriangleMapLocal ; TArray<TVec3<int32>> ElementsLocal ; TArray<int32> ConstraintsPerColorStartIndex ; FPBDFlatWeightMap Lift ; FPBDFlatWeightMap OuterLift ; FPBDFlatWeightMap Drag ; FPBDFlatWeightMap OuterDrag ; FPBDFlatWeightMap Pressure ; TArray<FSolverVec3> Forces ; FSolverVec3 Velocity ; FSolverReal Rho ; FSolverReal QuarterRho ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(Drag, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(OuterDrag, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(Lift, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(OuterLift, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(FluidDensity, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(Pressure, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(WindVelocity, FVector3f)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(WindVelocitySpace, int32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_VELOCITY_FIELD_ISPC_ENABLED_DEFAULT)"
  }
]