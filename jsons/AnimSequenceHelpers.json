[
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "IAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModel"
  },
  {
    "label": "UAnimDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimDataController"
  },
  {
    "label": "IAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataController"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FRawCurveTracks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawCurveTracks"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FBoneAnimationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneAnimationTrack"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "IAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataController"
  },
  {
    "label": "FVirtualBoneCompactPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBoneCompactPoseData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FScopedCompressionGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCompressionGuard"
  },
  {
    "label": "FEvaluationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationContext"
  },
  {
    "label": "FRetargetTracking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetargetTracking"
  },
  {
    "label": "FRetargetingScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetargetingScope"
  },
  {
    "label": "FBuildRawPoseScratchArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildRawPoseScratchArea"
  },
  {
    "label": "BuildPoseFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPoseFromModel(const IAnimationDataModel* Model, FCompactPose& OutPose, const float Time, const EAnimInterpolationType& InterpolationType, const FName& RetargetSource, const TArray<FTransform>& RetargetTransforms)"
  },
  {
    "label": "BuildPoseFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPoseFromModel(const IAnimationDataModel* Model, FAnimationPoseData& OutPoseData, const double Time, const EAnimInterpolationType& InterpolationType, const FName& RetargetSource, const TArray<FTransform>& RetargetTransforms)"
  },
  {
    "label": "EvaluateFloatCurvesFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateFloatCurvesFromModel(const IAnimationDataModel* Model, FBlendedCurve& OutCurves, double Time)"
  },
  {
    "label": "EvaluateTransformCurvesFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransformCurvesFromModel(const IAnimationDataModel* Model, TMap<FName, FTransform>& OutCurves, double Time, float BlendWeight)"
  },
  {
    "label": "GetBoneTransformFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTransformFromModel(const IAnimationDataModel* Model, FTransform& OutTransform, int32 TrackIndex, double Time, const EAnimInterpolationType& Interpolation)"
  },
  {
    "label": "GetBoneTransformFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTransformFromModel(const IAnimationDataModel* Model, FTransform& OutTransform, int32 TrackIndex, int32 KeyIndex)"
  },
  {
    "label": "CopyCurveDataToModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurveDataToModel(const FRawCurveTracks& CurveData, const USkeleton* Skeleton, IAnimationDataController& Controller)"
  },
  {
    "label": "CopyNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyNotifies(const UAnimSequenceBase* SourceAnimSeq, UAnimSequenceBase* DestAnimSeq, bool bShowDialogs = true, bool bDeleteExistingNotifies = false)"
  },
  {
    "label": "AddLoopingInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLoopingInterpolation(UAnimSequence* InSequence)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Trim(UAnimSequence* InSequence, float TrimStart, float TrimEnd, bool bInclusiveEnd=false)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateKeys(UAnimSequence* InSequence, int32 StartKeyIndex, int32 NumDuplicates, int32 SourceKeyIndex = INDEX_NONE)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeys(UAnimSequence* InSequence, int32 StartKeyIndex, int32 NumKeysToRemove)"
  },
  {
    "label": "FindFirstChildTrackName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindFirstChildTrackName(const UAnimSequence* InSequence, const USkeleton* Skeleton, const FName& BoneName)"
  },
  {
    "label": "ExtractBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractBoneTransform(const struct FRawAnimSequenceTrack& RawTrack, FTransform& OutTransform, int32 KeyIndex)"
  },
  {
    "label": "MirrorTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MirrorTransform(const FTransform& Transform, const UMirrorDataTable& MirrorDataTable)"
  },
  {
    "label": "ExtractRootMotionFromAnimationAsset()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotionFromAnimationAsset(const UAnimationAsset* Animation, const UMirrorDataTable* MirrorDataTable, float StartPosition, float EndPosition)"
  },
  {
    "label": "ExtractRootTransformFromAnimationAsset()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootTransformFromAnimationAsset(const UAnimationAsset* Animation, float Position)"
  },
  {
    "label": "CompressAnimationDataTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressAnimationDataTracks(TArray<FRawAnimSequenceTrack>& RawAnimationData, int32 NumberOfKeys, FName ErrorName, float MaxPosDiff = 0.0001f, float MaxAngleDiff = 0.0003f, float MaxScaleDiff = 0.0001f)"
  },
  {
    "label": "CompressAnimationDataTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressAnimationDataTracks(const USkeleton* Skeleton, const TArray<FTrackToSkeletonMap>& TrackToSkeleton,TArray<FRawAnimSequenceTrack>& RawAnimationData, int32 NumberOfKeys, FName ErrorName, float MaxPosDiff = 0.0001f, float MaxAngleDiff = 0.0003f, float MaxScaleDiff = 0.0001f)"
  },
  {
    "label": "CompressRawAnimSequenceTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressRawAnimSequenceTrack(FRawAnimSequenceTrack& RawTrack, int32 NumberOfKeys, FName ErrorName, float MaxPosDiff, float MaxAngleDiff)"
  },
  {
    "label": "CompressRawAnimSequenceTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressRawAnimSequenceTrack(FRawAnimSequenceTrack& RawTrack, int32 NumberOfKeys, FName ErrorName, float MaxPosDiff, float MaxAngleDiff, float MaxScaleDiff)"
  },
  {
    "label": "SanitizeRawAnimSequenceTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeRawAnimSequenceTrack(FRawAnimSequenceTrack& RawTrack)"
  },
  {
    "label": "FScopedCompressionGuard()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FScopedCompressionGuard(UAnimSequence* InAnimSequence)"
  },
  {
    "label": "FRetargetingScope()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FRetargetingScope(const USkeleton* InSourceSkeleton, FCompactPose& ToRetargetPose, const DataModel::FEvaluationContext& InEvaluationContext)"
  },
  {
    "label": "RetargetPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetPose(FCompactPose& InOutPose, const FName& RetargetSource, const TArray<FTransform>& RetargetTransforms)"
  }
]