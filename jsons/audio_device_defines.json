[
  {
    "label": "AudioTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTransport"
  },
  {
    "label": "AudioParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioParameters"
  },
  {
    "label": "RecordedDataIsAvailable()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_DEVICE_INCLUDE_AUDIO_DEVICE_DEFINES_H_ # define MODULES_AUDIO_DEVICE_INCLUDE_AUDIO_DEVICE_DEFINES_H_ # include<stddef . h> # include<string> # include \" rtc_base / checks . h \" # include \" rtc_base / strings / string_builder . h \" namespace webrtc { const int kAdmMaxDeviceNameSize = 1 2 8 ; const int kAdmMaxFileNameSize = 5 1 2 ; const int kAdmMaxGuidSize = 1 2 8 ; const int kAdmMinPlayoutBufferSizeMs = 1 0 ; const int kAdmMaxPlayoutBufferSizeMs = 2 5 0 ; class AudioTransport { public : int32_t)",
    "insertText": "RecordedDataIsAvailable(const void* audioSamples, size_t nSamples, size_t nBytesPerSample, size_t nChannels, uint32_t samplesPerSec, uint32_t totalDelayMS, int32_t clockDrift, uint32_t currentMicLevel, bool keyPressed, uint32_t& newMicLevel)"
  },
  {
    "label": "RecordedDataIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordedDataIsAvailable(const void* audioSamples, size_t nSamples, size_t nBytesPerSample, size_t nChannels, uint32_t samplesPerSec, uint32_t totalDelayMS, int32_t clockDrift, uint32_t currentMicLevel, bool keyPressed, uint32_t& newMicLevel, int64_t estimatedCaptureTimeNS)"
  },
  {
    "label": "NeedMorePlayData()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "NeedMorePlayData(size_t nSamples, size_t nBytesPerSample, size_t nChannels, uint32_t samplesPerSec, void* audioSamples, size_t& nSamplesOut, int64_t* elapsed_time_ms, int64_t* ntp_time_ms)"
  },
  {
    "label": "PullRenderData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullRenderData(int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames, void* audio_data, int64_t* elapsed_time_ms, int64_t* ntp_time_ms)"
  },
  {
    "label": "AudioTransport()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "AudioTransport()"
  },
  {
    "label": "AudioParameters()",
    "kind": "Method",
    "detail": "Function (} } ; class AudioParameters { public : const size_t kBitsPerSample = 1 6 ;)",
    "insertText": "AudioParameters() : sample_rate_(0), channels_(0), frames_per_buffer_(0), frames_per_10ms_buffer_(0)"
  },
  {
    "label": "AudioParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioParameters(int sample_rate, size_t channels, size_t frames_per_buffer) : sample_rate_(sample_rate), channels_(channels), frames_per_buffer_(frames_per_buffer), frames_per_10ms_buffer_(static_cast<size_t>(sample_rate / 100))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(int sample_rate, size_t channels, size_t frames_per_buffer)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (sample_rate_ = sample_rate ; channels_ = channels ; frames_per_buffer_ = frames_per_buffer ; frames_per_10ms_buffer_ = static_cast<)",
    "insertText": "size_t(sample_rate / 100)"
  },
  {
    "label": "bits_per_sample()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "bits_per_sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(sample_rate, channels, static_cast<size_t>(sample_rate * buffer_duration + 0.5))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(int sample_rate, size_t channels)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(sample_rate, channels, static_cast<size_t>(0))"
  },
  {
    "label": "sample_rate()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "sample_rate()"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_valid()"
  },
  {
    "label": "is_complete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_complete()"
  },
  {
    "label": "GetBytesPer10msBuffer()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetBytesPer10msBuffer()"
  },
  {
    "label": "GetBufferSizeInMilliseconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetBufferSizeInMilliseconds()"
  },
  {
    "label": "GetBufferSizeInSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetBufferSizeInSeconds()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ss()",
    "kind": "Method",
    "detail": "Function (char ss_buf [ 1 0 2 4 ] ; rtc::SimpleStringBuilder)",
    "insertText": "ss(ss_buf)"
  },
  {
    "label": "sample_rate()",
    "kind": "Method",
    "detail": "Function (ss<<\" AudioParameters : \" ; ss<<\" sample_rate = \"<<)",
    "insertText": "sample_rate() << \", channels=\" << channels()"
  },
  {
    "label": "frames_per_buffer()",
    "kind": "Method",
    "detail": "Function (ss<<\",frames_per_buffer = \"<<)",
    "insertText": "frames_per_buffer()"
  },
  {
    "label": "frames_per_10ms_buffer()",
    "kind": "Method",
    "detail": "Function (ss<<\",frames_per_10ms_buffer = \"<<)",
    "insertText": "frames_per_10ms_buffer()"
  },
  {
    "label": "GetBytesPerFrame()",
    "kind": "Method",
    "detail": "Function (ss<<\",bytes_per_frame = \"<<)",
    "insertText": "GetBytesPerFrame()"
  },
  {
    "label": "GetBytesPerBuffer()",
    "kind": "Method",
    "detail": "Function (ss<<\",bytes_per_buffer = \"<<)",
    "insertText": "GetBytesPerBuffer()"
  }
]