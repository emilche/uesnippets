[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SSLCertificateVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertificateVerifier"
  },
  {
    "label": "SSLCertificateStats()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SSL_CERTIFICATE_H_ # define RTC_BASE_SSL_CERTIFICATE_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { struct RTC_EXPORT SSLCertificateStats {)",
    "insertText": "SSLCertificateStats(std::string&& fingerprint, std::string&& fingerprint_algorithm, std::string&& base64_certificate, std::unique_ptr<SSLCertificateStats> issuer)"
  },
  {
    "label": "SSLCertificateStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSLCertificateStats()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (std::string fingerprint ; std::string fingerprint_algorithm ; std::string base64_certificate ; std::unique_ptr<SSLCertificateStats> issuer ; std::unique_ptr<SSLCertificateStats>)",
    "insertText": "Copy()"
  },
  {
    "label": "FromPEMString()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT SSLCertificate { public : std::unique_ptr<SSLCertificate>)",
    "insertText": "FromPEMString(absl::string_view pem_string)"
  },
  {
    "label": "SSLCertificate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSLCertificate()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertificate>)",
    "insertText": "Clone()"
  },
  {
    "label": "ToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToPEMString()"
  },
  {
    "label": "ToDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDER(Buffer* der_buffer)"
  },
  {
    "label": "GetSignatureDigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSignatureDigestAlgorithm(std::string* algorithm)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "CertificateExpirationTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "CertificateExpirationTime()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertificateStats>)",
    "insertText": "GetStats()"
  },
  {
    "label": "SSLCertChain()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT SSLCertChain final { public :)",
    "insertText": "SSLCertChain(std::unique_ptr<SSLCertificate> single_cert)"
  },
  {
    "label": "SSLCertChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSLCertChain(std::vector<std::unique_ptr<SSLCertificate>> certs)"
  },
  {
    "label": "SSLCertChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSLCertChain(SSLCertChain&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SSLCertChain&)",
    "insertText": "operator(SSLCertChain&&)"
  },
  {
    "label": "SSLCertChain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSLCertChain()"
  },
  {
    "label": "SSLCertChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSLCertChain(const SSLCertChain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SSLCertChain&)",
    "insertText": "operator(const SSLCertChain&)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const SSLCertificate&)",
    "insertText": "Get(size_t pos)"
  },
  {
    "label": "SSLCertificateVerifier()",
    "kind": "Method",
    "detail": "Function (private : std::vector<std::unique_ptr<SSLCertificate>> certs_ ; } ; class SSLCertificateVerifier { public : ~)",
    "insertText": "SSLCertificateVerifier()"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(const SSLCertificate& certificate)"
  }
]