[
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "UProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProperty"
  },
  {
    "label": "FPropertyAccessLibrary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAccessLibrary"
  },
  {
    "label": "FAnimNodeConstantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodeConstantData"
  },
  {
    "label": "FAnimNodeTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodeTracker"
  },
  {
    "label": "FScopedAnimNodeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedAnimNodeTracker"
  },
  {
    "label": "FAnimationUpdateSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateSharedContext"
  },
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimationInitializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationInitializeContext"
  },
  {
    "label": "FAnimationCacheBonesContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCacheBonesContext"
  },
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "FPoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseContext"
  },
  {
    "label": "FScopedExpectsAdditiveOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedExpectsAdditiveOverride"
  },
  {
    "label": "FComponentSpacePoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentSpacePoseContext"
  },
  {
    "label": "FNodeDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDebugData"
  },
  {
    "label": "DebugItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DebugItem"
  },
  {
    "label": "FFlattenedDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlattenedDebugData"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FPoseLinkBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseLinkBase"
  },
  {
    "label": "FPoseLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseLink"
  },
  {
    "label": "FComponentSpacePoseLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentSpacePoseLink"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAnimBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedClass"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "DECLARE_SCOPE_HIERARCHICAL_COUNTER_ANIMNODE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / Class . h \" # include \" Engine / EngineTypes . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimCurveTypes . h \" # include \" BonePose . h \" # include \" Stats / StatsHierarchical . h \" # include \" Animation / AnimationPoseData . h \" # include \" Animation / AttributesRuntime . h \" # include \" Animation / AnimNodeMessages . h \" # include \" Animation / AnimNodeData . h \" # include \" Animation / ExposedValueHandler . h \" # include \" AnimNodeFunctionRef . h \" # include \" AnimNodeBase . generated . h \" # define)",
    "insertText": "DECLARE_SCOPE_HIERARCHICAL_COUNTER_ANIMNODE(Method) \\ DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (class UAnimBlueprint ; class UAnimInstance ; struct FAnimInstanceProxy ; struct FAnimNode_Base ; class UProperty ; struct FPropertyAccessLibrary ; struct FAnimNodeConstantData ; struct FAnimNodeTracker { using FKey = FObjectKey ; using FNodeStack = TArray<FAnimNode_Base*,TInlineAllocator<4>> ; using FMap = TMap<FKey,FNodeStack,TInlineSetAllocator<4>> ; FMap Map ; template<NodeType> FKey)",
    "insertText": "GetKey()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> FKey)",
    "insertText": "Push(NodeType* Node)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (FKey)",
    "insertText": "Key(GetKey<NodeType>())"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FNodeStack& Stack = Map .)",
    "insertText": "FindOrAdd(Key)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Push(Node)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FNodeStack* Stack = Map .)",
    "insertText": "Find(GetKey<NodeType>())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} FAnimNode_Base*)",
    "insertText": "Pop(FKey Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FNodeStack* Stack = Map .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> NodeType*)",
    "insertText": "Top()"
  },
  {
    "label": "CopyTopsOnly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTopsOnly(const FAnimNodeTracker& Source)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "Reserve(Source.Map.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNodeStack& Stack = Map .)",
    "insertText": "Add(Iter.Key)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Push(Iter.Value.Top())"
  },
  {
    "label": "FScopedAnimNodeTracker()",
    "kind": "Method",
    "detail": "Function (} } } } ; class FScopedAnimNodeTracker { public :)",
    "insertText": "FScopedAnimNodeTracker()"
  },
  {
    "label": "FScopedAnimNodeTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedAnimNodeTracker(FAnimNodeTracker* InTracker, FAnimNodeTracker::FKey InKey) : Tracker(InTracker) , TrackedKey(InKey)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "Pop(TrackedKey)"
  },
  {
    "label": "FAnimationUpdateSharedContext()",
    "kind": "Method",
    "detail": "Function (} } private : FAnimNodeTracker* Tracker = nullptr ; FAnimNodeTracker::FKey TrackedKey ; } ; struct FAnimationUpdateSharedContext {)",
    "insertText": "FAnimationUpdateSharedContext()"
  },
  {
    "label": "FAnimationUpdateSharedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimationUpdateSharedContext(FAnimationUpdateSharedContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimationUpdateSharedContext&)",
    "insertText": "operator(const FAnimationUpdateSharedContext&)"
  },
  {
    "label": "CopyForCachedUpdate()",
    "kind": "Method",
    "detail": "Function (# endif UE::Anim::FMessageStack MessageStack ; void)",
    "insertText": "CopyForCachedUpdate(FAnimationUpdateSharedContext& Source)"
  },
  {
    "label": "CopyTopsOnly()",
    "kind": "Method",
    "detail": "Function (# if ! UE_ANIM_REMOVE_DEPRECATED_ANCESTOR_TRACKER PRAGMA_DISABLE_DEPRECATION_WARNINGS AncestorTracker .)",
    "insertText": "CopyTopsOnly(Source.AncestorTracker)"
  },
  {
    "label": "CopyForCachedUpdate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS # endif MessageStack .)",
    "insertText": "CopyForCachedUpdate(Source.MessageStack)"
  },
  {
    "label": "FAnimationBaseContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAnimationBaseContext { public : FAnimInstanceProxy* AnimInstanceProxy ; FAnimationUpdateSharedContext* SharedContext ;)",
    "insertText": "FAnimationBaseContext()"
  },
  {
    "label": "FAnimationBaseContext()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FAnimationBaseContext(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "FAnimationBaseContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimationBaseContext(FAnimInstanceProxy* InAnimInstanceProxy, FAnimationUpdateSharedContext* InSharedContext = nullptr)"
  },
  {
    "label": "FAnimationBaseContext()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FAnimationBaseContext(FAnimationBaseContext&&)"
  },
  {
    "label": "FAnimationBaseContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimationBaseContext(const FAnimationBaseContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimationBaseContext&)",
    "insertText": "operator(FAnimationBaseContext&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimationBaseContext&)",
    "insertText": "operator(const FAnimationBaseContext&)"
  },
  {
    "label": "GetAnimClass()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS public : IAnimClassInterface*)",
    "insertText": "GetAnimClass()"
  },
  {
    "label": "GetAnimInstanceObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetAnimInstanceObject()"
  },
  {
    "label": "GetAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA UAnimBlueprint*)",
    "insertText": "GetAnimBlueprint()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (FAnimNodeTracker::FKey Key = SharedContext -> AncestorTracker . Push<)",
    "insertText": "NodeType(Node)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Base* Node = SharedContext -> AncestorTracker . Top<)",
    "insertText": "NodeType()"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } # endif template<TGraphMessageType> TGraphMessageType*)",
    "insertText": "GetMessage()"
  },
  {
    "label": "TGraphMessageType()",
    "kind": "Method",
    "detail": "Function (TGraphMessageType* Message = nullptr ; SharedContext -> MessageStack . TopMessage<)",
    "insertText": "TGraphMessageType([&Message](TGraphMessageType& InMessage) { Message = &InMessage; })"
  },
  {
    "label": "SetNodeIds()",
    "kind": "Method",
    "detail": "Function (PreviousNodeId = CurrentNodeId ; CurrentNodeId = InNodeId ; } void)",
    "insertText": "SetNodeIds(const FAnimationBaseContext& InContext)"
  },
  {
    "label": "GetCurrentNodeId()",
    "kind": "Method",
    "detail": "Function (CurrentNodeId = InContext . CurrentNodeId ; PreviousNodeId = InContext . PreviousNodeId ; } int32)",
    "insertText": "GetCurrentNodeId()"
  },
  {
    "label": "FAnimationInitializeContext()",
    "kind": "Method",
    "detail": "Function (} ; struct FAnimationInitializeContext : public FAnimationBaseContext { public :)",
    "insertText": "FAnimationInitializeContext(FAnimInstanceProxy* InAnimInstanceProxy, FAnimationUpdateSharedContext* InSharedContext = nullptr) : FAnimationBaseContext(InAnimInstanceProxy, InSharedContext)"
  },
  {
    "label": "FAnimationCacheBonesContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAnimationCacheBonesContext : public FAnimationBaseContext { public :)",
    "insertText": "FAnimationCacheBonesContext(FAnimInstanceProxy* InAnimInstanceProxy) : FAnimationBaseContext(InAnimInstanceProxy)"
  },
  {
    "label": "WithNodeId()",
    "kind": "Method",
    "detail": "Function (} FAnimationCacheBonesContext)",
    "insertText": "WithNodeId(int32 InNodeId)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FAnimationCacheBonesContext)",
    "insertText": "Result(*this)"
  },
  {
    "label": "SetNodeId()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNodeId(InNodeId)"
  },
  {
    "label": "FAnimationUpdateContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimationUpdateContext(FAnimInstanceProxy* InAnimInstanceProxy, float InDeltaTime, FAnimationUpdateSharedContext* InSharedContext = nullptr) : FAnimationBaseContext(InAnimInstanceProxy, InSharedContext) , CurrentWeight(1.0f) , RootMotionWeightModifier(1.0f) , DeltaTime(InDeltaTime)"
  },
  {
    "label": "FAnimationUpdateContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimationUpdateContext(const FAnimationUpdateContext& Copy, FAnimInstanceProxy* InAnimInstanceProxy) : FAnimationBaseContext(InAnimInstanceProxy, Copy.SharedContext) , CurrentWeight(Copy.CurrentWeight) , RootMotionWeightModifier(Copy.RootMotionWeightModifier) , DeltaTime(Copy.DeltaTime)"
  },
  {
    "label": "WithOtherProxy()",
    "kind": "Method",
    "detail": "Function (CurrentNodeId = Copy . CurrentNodeId ; PreviousNodeId = Copy . PreviousNodeId ; } public : FAnimationUpdateContext)",
    "insertText": "WithOtherProxy(FAnimInstanceProxy* InAnimInstanceProxy)"
  },
  {
    "label": "WithOtherSharedContext()",
    "kind": "Method",
    "detail": "Function (} FAnimationUpdateContext)",
    "insertText": "WithOtherSharedContext(FAnimationUpdateSharedContext* InSharedContext)"
  },
  {
    "label": "AsInactive()",
    "kind": "Method",
    "detail": "Function (Result . SharedContext = InSharedContext ; return Result ; } FAnimationUpdateContext)",
    "insertText": "AsInactive()"
  },
  {
    "label": "FractionalWeight()",
    "kind": "Method",
    "detail": "Function (Result . bIsActive = false ; return Result ; } FAnimationUpdateContext)",
    "insertText": "FractionalWeight(float WeightMultiplier)"
  },
  {
    "label": "FractionalWeightAndRootMotion()",
    "kind": "Method",
    "detail": "Function (Result . CurrentWeight = CurrentWeight* WeightMultiplier ; return Result ; } FAnimationUpdateContext)",
    "insertText": "FractionalWeightAndRootMotion(float WeightMultiplier, float RootMotionMultiplier)"
  },
  {
    "label": "FractionalWeightAndTime()",
    "kind": "Method",
    "detail": "Function (Result . CurrentWeight = CurrentWeight* WeightMultiplier ; Result . RootMotionWeightModifier = RootMotionWeightModifier* RootMotionMultiplier ; return Result ; } FAnimationUpdateContext)",
    "insertText": "FractionalWeightAndTime(float WeightMultiplier, float TimeMultiplier)"
  },
  {
    "label": "FractionalWeightTimeAndRootMotion()",
    "kind": "Method",
    "detail": "Function (Result . DeltaTime = DeltaTime* TimeMultiplier ; Result . CurrentWeight = CurrentWeight* WeightMultiplier ; return Result ; } FAnimationUpdateContext)",
    "insertText": "FractionalWeightTimeAndRootMotion(float WeightMultiplier, float TimeMultiplier, float RootMotionMultiplier)"
  },
  {
    "label": "LogMessageInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessageInternal(\"Update\", InMessage)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogMessage(EMessageSeverity::Type InSeverity, FText InMessage)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(FTokenizedMessage::Create(InSeverity, InMessage))"
  },
  {
    "label": "FPoseContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPoseContext : public FAnimationBaseContext { public : FCompactPose Pose ; FBlendedCurve Curve ; UE::Anim::FStackAttributeContainer CustomAttributes ; public : class FScopedExpectsAdditiveOverride ;)",
    "insertText": "FPoseContext(FAnimInstanceProxy* InAnimInstanceProxy, bool bInExpectsAdditivePose = false) : FAnimationBaseContext(InAnimInstanceProxy) , bExpectsAdditivePose(bInExpectsAdditivePose)"
  },
  {
    "label": "InitializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeImpl(InAnimInstanceProxy)"
  },
  {
    "label": "FPoseContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPoseContext(const FPoseContext& SourceContext, bool bInOverrideExpectsAdditivePose = false) : FAnimationBaseContext(SourceContext.AnimInstanceProxy) , bExpectsAdditivePose(SourceContext.bExpectsAdditivePose || bInOverrideExpectsAdditivePose)"
  },
  {
    "label": "InitializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeImpl(SourceContext.AnimInstanceProxy)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogMessage(const TSharedRef<FTokenizedMessage>& InMessage)"
  },
  {
    "label": "LogMessageInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessageInternal(\"Evaluate\", InMessage)"
  },
  {
    "label": "ResetToRefPose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetToRefPose()"
  },
  {
    "label": "ResetToAdditiveIdentity()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "ResetToAdditiveIdentity()"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsNaN()"
  },
  {
    "label": "IsNormalized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNormalized()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoseContext&)",
    "insertText": "operator(const FPoseContext& Other)"
  },
  {
    "label": "InitializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeImpl(AnimInstanceProxy)"
  },
  {
    "label": "ExpectsAdditivePose()",
    "kind": "Method",
    "detail": "Function (} Pose = Other . Pose ; Curve = Other . Curve ; CustomAttributes = Other . CustomAttributes ; bExpectsAdditivePose = Other . bExpectsAdditivePose ; return* this ; } bool)",
    "insertText": "ExpectsAdditivePose()"
  },
  {
    "label": "FScopedExpectsAdditiveOverride()",
    "kind": "Method",
    "detail": "Function (bool bExpectsAdditivePose ; } ; class FScopedExpectsAdditiveOverride { public :)",
    "insertText": "FScopedExpectsAdditiveOverride(FPoseContext& InContext, bool bInExpectsAdditive) : Context(InContext)"
  },
  {
    "label": "FScopedExpectsAdditiveOverride()",
    "kind": "Method",
    "detail": "Function (Context . bExpectsAdditivePose = bInExpectsAdditive ; } ~)",
    "insertText": "FScopedExpectsAdditiveOverride()"
  },
  {
    "label": "FComponentSpacePoseContext()",
    "kind": "Method",
    "detail": "Function (Context . bExpectsAdditivePose = bPreviousValue ; } private : FPoseContext& Context ; bool bPreviousValue ; } ; struct FComponentSpacePoseContext : public FAnimationBaseContext { public : FCSPose<FCompactPose> Pose ; FBlendedCurve Curve ; UE::Anim::FStackAttributeContainer CustomAttributes ; public :)",
    "insertText": "FComponentSpacePoseContext(FAnimInstanceProxy* InAnimInstanceProxy) : FAnimationBaseContext(InAnimInstanceProxy)"
  },
  {
    "label": "FComponentSpacePoseContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FComponentSpacePoseContext(const FComponentSpacePoseContext& SourceContext) : FAnimationBaseContext(SourceContext.AnimInstanceProxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentNodeId = SourceContext . CurrentNodeId ; PreviousNodeId = SourceContext . PreviousNodeId ; } FComponentSpacePoseContext&)",
    "insertText": "operator(const FComponentSpacePoseContext&)"
  },
  {
    "label": "DebugItem()",
    "kind": "Method",
    "detail": "Function (} ; # define ANIM_NODE_DEBUG_MAX_CHAIN 5 0 # define ANIM_NODE_DEBUG_MAX_CHILDREN 1 2 # define ANIM_NODE_DEBUG_MAX_CACHEPOSE 2 0 struct FNodeDebugData { private : struct DebugItem {)",
    "insertText": "DebugItem(FString Data, bool bInPoseSource) : DebugData(Data), bPoseSource(bInPoseSource)"
  },
  {
    "label": "FFlattenedDebugData()",
    "kind": "Method",
    "detail": "Function (} FString DebugData ; bool bPoseSource ; TArray<FNodeDebugData> ChildNodeChain ; } ; float AbsoluteWeight ; TArray<DebugItem> NodeChain ; FString NodeDescription ; FNodeDebugData* RootNodePtr ; TArray<FNodeDebugData> SaveCachePoseNodes ; public : struct FFlattenedDebugData {)",
    "insertText": "FFlattenedDebugData(FString Line, float AbsWeight, int32 InIndent, int32 InChainID, bool bInPoseSource) : DebugLine(Line), AbsoluteWeight(AbsWeight), Indent(InIndent), ChainID(InChainID), bPoseSource(bInPoseSource)"
  },
  {
    "label": "IsOnActiveBranch()",
    "kind": "Method",
    "detail": "Function (} FString DebugLine ; float AbsoluteWeight ; int32 Indent ; int32 ChainID ; bool bPoseSource ; bool)",
    "insertText": "IsOnActiveBranch()"
  },
  {
    "label": "FNodeDebugData()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FNodeDebugData(const class UAnimInstance* InAnimInstance) : AbsoluteWeight(1.f), RootNodePtr(this), AnimInstance(InAnimInstance)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SaveCachePoseNodes .)",
    "insertText": "Reserve(ANIM_NODE_DEBUG_MAX_CACHEPOSE)"
  },
  {
    "label": "FNodeDebugData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNodeDebugData(const class UAnimInstance* InAnimInstance, const float AbsWeight, FString InNodeDescription, FNodeDebugData* InRootNodePtr) : AbsoluteWeight(AbsWeight) , NodeDescription(InNodeDescription) , RootNodePtr(InRootNodePtr) , AnimInstance(InAnimInstance)"
  },
  {
    "label": "AddDebugItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDebugItem(FString DebugData, bool bPoseSource = false)"
  },
  {
    "label": "BranchFlow()",
    "kind": "Method",
    "detail": "Function (FNodeDebugData&)",
    "insertText": "BranchFlow(float BranchWeight, FString InNodeDescription = FString())"
  },
  {
    "label": "GetCachePoseDebugData()",
    "kind": "Method",
    "detail": "Function (FNodeDebugData*)",
    "insertText": "GetCachePoseDebugData(float GlobalWeight)"
  },
  {
    "label": "GetNodeName()",
    "kind": "Method",
    "detail": "Function (template<class Type> FString)",
    "insertText": "GetNodeName(Type* Node)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString FinalString =)",
    "insertText": "Printf(TEXT(\"%s<W:%.1f%%> %s\"), *Node->StaticStruct()->GetName(), AbsoluteWeight*100.f, *NodeDescription)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NodeDescription .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetFlattenedDebugData()",
    "kind": "Method",
    "detail": "Function (TArray<FFlattenedDebugData>)",
    "insertText": "GetFlattenedDebugData()"
  },
  {
    "label": "GetFlattenedDebugData()",
    "kind": "Method",
    "detail": "Function (TArray<FFlattenedDebugData> Data ; int32 ChainID = 0 ;)",
    "insertText": "GetFlattenedDebugData(Data, 0, ChainID)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NeverAsPin,PinHiddenByDefault,PinShownByDefault,AlwaysAsPin } ; } # define ENABLE_ANIMGRAPH_TRAVERSAL_DEBUG 0)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FPoseLinkBase()",
    "kind": "Method",
    "detail": "Function (# endif # if ENABLE_ANIMGRAPH_TRAVERSAL_DEBUG FGraphTraversalCounter InitializationCounter ; FGraphTraversalCounter CachedBonesCounter ; FGraphTraversalCounter UpdateCounter ; FGraphTraversalCounter EvaluationCounter ; # endif protected : # if DO_CHECK bool bProcessed ; # endif public :)",
    "insertText": "FPoseLinkBase() : LinkedNode(nullptr) , LinkID(INDEX_NONE) #if WITH_EDITORONLY_DATA , SourceLinkID(INDEX_NONE) #endif #if DO_CHECK , bProcessed(false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "AttemptRelink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptRelink(const FAnimationBaseContext& Context)"
  },
  {
    "label": "SetLinkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinkNode(FAnimNode_Base* NewLinkNode)"
  },
  {
    "label": "SetDynamicLinkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicLinkNode(struct FPoseLinkBase* InPoseLink)"
  },
  {
    "label": "GetLinkNode()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Base*)",
    "insertText": "GetLinkNode()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: ENGINE_API void Evaluate(FPoseContext& Output)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: ENGINE_API void EvaluateComponentSpace(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API virtual void Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "EvaluateComponentSpace_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentSpace_AnyThread(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "AddDebugItem()",
    "kind": "Method",
    "detail": "Function (DebugData .)",
    "insertText": "AddDebugItem(FString::Printf(TEXT(\"Non Overriden GatherDebugData! (%s)\"), *DebugData.GetNodeName(this)))"
  },
  {
    "label": "CanUpdateInWorkerThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanUpdateInWorkerThread()"
  },
  {
    "label": "NeedsDynamicReset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsDynamicReset()"
  },
  {
    "label": "PostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCompile(const class USkeleton* InSkeleton)"
  },
  {
    "label": "NeedsOnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsOnInitializeAnimInstance()"
  },
  {
    "label": "GetEvaluateGraphExposedInputs()",
    "kind": "Method",
    "detail": "Function (} const FExposedValueHandler&)",
    "insertText": "GetEvaluateGraphExposedInputs()"
  },
  {
    "label": "GetNodeIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNodeIndex()"
  },
  {
    "label": "GetAnimClassInterface()",
    "kind": "Method",
    "detail": "Function (} const IAnimClassInterface*)",
    "insertText": "GetAnimClassInterface()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} protected : template<DataType> const DataType&)",
    "insertText": "GetData(UE::Anim::FNodeDataId InId, const UObject* InObject = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(NodeData)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} else { return* InId .)",
    "insertText": "GetProperty()->ContainerPtrToValuePtr<const DataType>(this)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "check(NodeData)"
  },
  {
    "label": "GetMutableData()",
    "kind": "Method",
    "detail": "Function (# endif } # if WITH_EDITORONLY_DATA template<DataType> DataType&)",
    "insertText": "GetMutableData(UE::Anim::FNodeDataId InId, UObject* InObject = nullptr)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} else { return* InId .)",
    "insertText": "GetProperty()->ContainerPtrToValuePtr<DataType>(this)"
  },
  {
    "label": "GetInstanceDataPtr()",
    "kind": "Method",
    "detail": "Function (} } # endif template<DataType> DataType*)",
    "insertText": "GetInstanceDataPtr(UE::Anim::FNodeDataId InId, UObject* InObject = nullptr)"
  },
  {
    "label": "IsLODEnabled()",
    "kind": "Method",
    "detail": "Function (# endif } protected : bool)",
    "insertText": "IsLODEnabled(FAnimInstanceProxy* AnimInstanceProxy)"
  },
  {
    "label": "GetLODThreshold()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODThreshold()"
  },
  {
    "label": "GetInitialUpdateFunction()",
    "kind": "Method",
    "detail": "Function (struct FAnimInstanceProxy ; private : const FAnimNodeFunctionRef&)",
    "insertText": "GetInitialUpdateFunction()"
  },
  {
    "label": "GetBecomeRelevantFunction()",
    "kind": "Method",
    "detail": "Function (const FAnimNodeFunctionRef&)",
    "insertText": "GetBecomeRelevantFunction()"
  },
  {
    "label": "GetUpdateFunction()",
    "kind": "Method",
    "detail": "Function (const FAnimNodeFunctionRef&)",
    "insertText": "GetUpdateFunction()"
  },
  {
    "label": "SetNodeData()",
    "kind": "Method",
    "detail": "Function (private : class IAnimClassInterface ; class UAnimBlueprintGeneratedClass ; struct UE::Anim::FNodeDataId ; struct UE::Anim::FNodeFunctionCaller ; class UAnimGraphNode_Base ; struct FPoseLinkBase ; void)",
    "insertText": "SetNodeData(const FAnimNodeData& InNodeData)"
  },
  {
    "label": "VERIFY_ANIM_NODE_MEMBER_TYPE()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITORONLY_DATA # define)",
    "insertText": "VERIFY_ANIM_NODE_MEMBER_TYPE(Type, Identifier) static_assert(std::is_same_v<decltype(Identifier), Type>, \"Incorrect return type used\")"
  },
  {
    "label": "VERIFY_ANIM_NODE_MEMBER_TYPE()",
    "kind": "Method",
    "detail": "Function (UE::Anim::FNodeDataId \\)",
    "insertText": "VERIFY_ANIM_NODE_MEMBER_TYPE(Type, Identifier) #endif #define GET_ANIM_NODE_DATA_ID_INTERNAL(Type, Identifier) \\ [this]()"
  },
  {
    "label": "VERIFY_ANIM_NODE_MEMBER_TYPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VERIFY_ANIM_NODE_MEMBER_TYPE(Type, Identifier)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!CachedId_##Identifier.IsValid())"
  },
  {
    "label": "Identifier()",
    "kind": "Method",
    "detail": "Function (\\ const FName AnimName_ # #)",
    "insertText": "Identifier(#Identifier)"
  },
  {
    "label": "FNodeDataId()",
    "kind": "Method",
    "detail": "Function (\\ CachedId_ # # Identifier = UE::)",
    "insertText": "FNodeDataId(AnimName_##Identifier, this, StaticStruct())"
  }
]