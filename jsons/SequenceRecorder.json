[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ALevelSequenceActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelSequenceActor"
  },
  {
    "label": "ISequenceAudioRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequenceAudioRecorder"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "USequenceRecordingBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecordingBase"
  },
  {
    "label": "UActorRecording",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorRecording"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "ASequenceRecorderGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASequenceRecorderGroup"
  },
  {
    "label": "USequenceRecorderActorGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecorderActorGroup"
  },
  {
    "label": "FSequenceRecorder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceRecorder"
  },
  {
    "label": "FSequenceRecorderActorFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceRecorderActorFilter"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Sections / MovieSceneAnimationSectionRecorder . h \" # include \" LevelSequence . h \" # include \" Sections / MovieScene3DTransformSectionRecorder . h \" # include \" ISequenceRecorder . h \" # include \" Sections / MovieSceneMultiPropertyRecorder . h \" class APlayerController ; class AActor ; class ALevelSequenceActor ; class ISequenceAudioRecorder ; class UCanvas ; class USequenceRecordingBase ; class UActorRecording ; class UTexture ; class ASequenceRecorderGroup ; class USequenceRecorderActorGroup ; struct FSequenceRecorder { public : FName MovieScenePropertyRecorderFactoryName ; FSequenceRecorder&)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRecording(const FString& InPathToRecordTo = FString(), const FString& InSequenceName = FString())"
  },
  {
    "label": "StartRecordingForReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRecordingForReplay(UWorld* World, const struct FSequenceRecorderActorFilter& ActorFilter)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopRecording(bool bAllowLooping = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "IsDelaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelaying()"
  },
  {
    "label": "GetCurrentDelay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentDelay()"
  },
  {
    "label": "GetCurrentSequence()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<class ULevelSequence>)",
    "insertText": "GetCurrentSequence()"
  },
  {
    "label": "IsRecordingQueued()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordingQueued(UObject* SequenceRecordingObjectToRecord)"
  },
  {
    "label": "FindRecording()",
    "kind": "Method",
    "detail": "Function (UActorRecording*)",
    "insertText": "FindRecording(AActor* Actor)"
  },
  {
    "label": "FindRecording()",
    "kind": "Method",
    "detail": "Function (USequenceRecordingBase*)",
    "insertText": "FindRecording(UObject* SequenceRecordingObjectToRecord)"
  },
  {
    "label": "StartAllQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAllQueuedRecordings()"
  },
  {
    "label": "StopAllQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllQueuedRecordings()"
  },
  {
    "label": "StopRecordingDeadAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingDeadAnimations()"
  },
  {
    "label": "AddNewQueuedRecordingsForSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewQueuedRecordingsForSelectedActors()"
  },
  {
    "label": "AddNewQueuedRecordingForCurrentPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewQueuedRecordingForCurrentPlayer()"
  },
  {
    "label": "CanAddNewQueuedRecordingForCurrentPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddNewQueuedRecordingForCurrentPlayer()"
  },
  {
    "label": "AddNewQueuedRecording()",
    "kind": "Method",
    "detail": "Function (class UActorRecording*)",
    "insertText": "AddNewQueuedRecording(AActor* Actor = nullptr, UAnimSequence* AnimSequence = nullptr, float Length = 0.0f)"
  },
  {
    "label": "AddNewQueuedRecording()",
    "kind": "Method",
    "detail": "Function (class USequenceRecordingBase*)",
    "insertText": "AddNewQueuedRecording(UObject* SequenceRecordingObjectToRecord)"
  },
  {
    "label": "RemoveQueuedRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueuedRecording(USequenceRecordingBase* Recording)"
  },
  {
    "label": "HasQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasQueuedRecordings()"
  },
  {
    "label": "ClearQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearQueuedRecordings()"
  },
  {
    "label": "GetQueuedActorRecordings()",
    "kind": "Method",
    "detail": "Function (const TArray<UActorRecording*>&)",
    "insertText": "GetQueuedActorRecordings()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bQueuedRecordingsDirty = false ; } bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "DrawDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebug(UCanvas* InCanvas, APlayerController* InPlayerController)"
  },
  {
    "label": "HandleActorSpawned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleActorSpawned(AActor* Actor)"
  },
  {
    "label": "HandleActorDespawned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleActorDespawned(AActor* Actor)"
  },
  {
    "label": "GetCurrentRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "GetCurrentRecordingGroup()"
  },
  {
    "label": "AddRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "AddRecordingGroup()"
  },
  {
    "label": "RemoveCurrentRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurrentRecordingGroup()"
  },
  {
    "label": "DuplicateRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "DuplicateRecordingGroup()"
  },
  {
    "label": "LoadRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "LoadRecordingGroup(const FName Name)"
  },
  {
    "label": "GetRecordingGroupNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetRecordingGroupNames()"
  },
  {
    "label": "GetSequenceRecordingBasePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSequenceRecordingBasePath()"
  },
  {
    "label": "GetSequenceRecordingName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSequenceRecordingName()"
  },
  {
    "label": "GetSequenceRecorderExtenders()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ISequenceRecorderExtender>>&)",
    "insertText": "GetSequenceRecorderExtenders()"
  },
  {
    "label": "ForceRefreshNextSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefreshNextSequence()"
  },
  {
    "label": "StartRecordingInternal()",
    "kind": "Method",
    "detail": "Function (FOnRecordingStarted OnRecordingStartedDelegate ; FOnRecordingFinished OnRecordingFinishedDelegate ; FOnRecordingGroupAdded OnRecordingGroupAddedDelegate ; private : bool)",
    "insertText": "StartRecordingInternal(UWorld* World)"
  },
  {
    "label": "IsActorValidForRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorValidForRecording(AActor* Actor)"
  },
  {
    "label": "HandleEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEndPIE(bool bSimulating)"
  },
  {
    "label": "SetImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImmersive()"
  },
  {
    "label": "RestoreImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreImmersive()"
  },
  {
    "label": "BuildQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildQueuedRecordings()"
  },
  {
    "label": "FSequenceRecorder()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSequenceRecorder()"
  }
]