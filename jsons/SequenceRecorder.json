[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ALevelSequenceActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelSequenceActor"
  },
  {
    "label": "ISequenceAudioRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequenceAudioRecorder"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "USequenceRecordingBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecordingBase"
  },
  {
    "label": "UActorRecording",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorRecording"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "ASequenceRecorderGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASequenceRecorderGroup"
  },
  {
    "label": "USequenceRecorderActorGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecorderActorGroup"
  },
  {
    "label": "FSequenceRecorder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceRecorder"
  },
  {
    "label": "FSequenceRecorderActorFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceRecorderActorFilter"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UActorRecording",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorRecording"
  },
  {
    "label": "USequenceRecordingBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecordingBase"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "StartRecordingForReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRecordingForReplay(UWorld* World, const struct FSequenceRecorderActorFilter& ActorFilter)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopRecording(bool bAllowLooping = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "StartAllQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAllQueuedRecordings()"
  },
  {
    "label": "StopAllQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllQueuedRecordings()"
  },
  {
    "label": "StopRecordingDeadAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingDeadAnimations()"
  },
  {
    "label": "AddNewQueuedRecordingsForSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewQueuedRecordingsForSelectedActors()"
  },
  {
    "label": "AddNewQueuedRecordingForCurrentPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewQueuedRecordingForCurrentPlayer()"
  },
  {
    "label": "RemoveQueuedRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueuedRecording(USequenceRecordingBase* Recording)"
  },
  {
    "label": "ClearQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearQueuedRecordings()"
  },
  {
    "label": "DrawDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebug(UCanvas* InCanvas, APlayerController* InPlayerController)"
  },
  {
    "label": "HandleActorSpawned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleActorSpawned(AActor* Actor)"
  },
  {
    "label": "HandleActorDespawned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleActorDespawned(AActor* Actor)"
  },
  {
    "label": "GetRecordingGroupActor()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<ASequenceRecorderGroup>)",
    "insertText": "GetRecordingGroupActor()"
  },
  {
    "label": "AddRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "AddRecordingGroup()"
  },
  {
    "label": "RemoveCurrentRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurrentRecordingGroup()"
  },
  {
    "label": "DuplicateRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "DuplicateRecordingGroup()"
  },
  {
    "label": "LoadRecordingGroup()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<USequenceRecorderActorGroup>)",
    "insertText": "LoadRecordingGroup(const FName Name)"
  },
  {
    "label": "RefreshNextSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNextSequence()"
  },
  {
    "label": "ForceRefreshNextSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefreshNextSequence()"
  },
  {
    "label": "StartRecordingInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRecordingInternal(UWorld* World)"
  },
  {
    "label": "IsActorValidForRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorValidForRecording(AActor* Actor)"
  },
  {
    "label": "HandleEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEndPIE(bool bSimulating)"
  },
  {
    "label": "SetImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImmersive()"
  },
  {
    "label": "RestoreImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreImmersive()"
  },
  {
    "label": "BuildQueuedRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildQueuedRecordings()"
  }
]