[
  {
    "label": "TopologyRefiner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefiner"
  },
  {
    "label": "StencilReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilReal"
  },
  {
    "label": "StencilTableReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTableReal"
  },
  {
    "label": "LimitStencilReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilReal"
  },
  {
    "label": "LimitStencilTableReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTableReal"
  },
  {
    "label": "StencilTableFactoryReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTableFactoryReal"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "LimitStencilTableFactoryReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTableFactoryReal"
  },
  {
    "label": "LocationArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocationArray"
  },
  {
    "label": "Stencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stencil"
  },
  {
    "label": "StencilTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTable"
  },
  {
    "label": "StencilTableFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTableFactory"
  },
  {
    "label": "LimitStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencil"
  },
  {
    "label": "LimitStencilTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTable"
  },
  {
    "label": "LimitStencilTableFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTableFactory"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_STENCILTABLE_FACTORY_H # define OPENSUBDIV3_FAR_STENCILTABLE_FACTORY_H # include \" . . / version . h \" # include \" . . / far / patchTable . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class TopologyRefiner ; template<REAL> class StencilReal ; template<REAL> class StencilTableReal ; template<REAL> class LimitStencilReal ; template<REAL> class LimitStencilTableReal ; template<REAL> class StencilTableFactoryReal { public : enum Mode { INTERPOLATE_VERTEX = 0,INTERPOLATE_VARYING,INTERPOLATE_FACE_VARYING } ; struct Options {)",
    "insertText": "Options() : interpolationMode(INTERPOLATE_VERTEX), generateOffsets(false), generateControlVerts(false), generateIntermediateLevels(true), factorizeIntermediateLevels(true), maxLevel(10), fvarChannel(0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} unsigned int interpolationMode : 2,generateOffsets : 1,generateControlVerts : 1,generateIntermediateLevels : 1,factorizeIntermediateLevels : 1,maxLevel : 4 ; unsigned int fvarChannel ; } ; StencilTableReal<REAL> const*)",
    "insertText": "Create(TopologyRefiner const & refiner, Options options = Options())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (StencilTableReal<REAL> const*)",
    "insertText": "Create(int numTables, StencilTableReal<REAL> const ** tables)"
  },
  {
    "label": "AppendLocalPointStencilTable()",
    "kind": "Method",
    "detail": "Function (StencilTableReal<REAL> const*)",
    "insertText": "AppendLocalPointStencilTable(TopologyRefiner const &refiner, StencilTableReal<REAL> const *baseStencilTable, StencilTableReal<REAL> const *localPointStencilTable, bool factorize = true)"
  },
  {
    "label": "AppendLocalPointStencilTableVarying()",
    "kind": "Method",
    "detail": "Function (StencilTableReal<REAL> const*)",
    "insertText": "AppendLocalPointStencilTableVarying(TopologyRefiner const &refiner, StencilTableReal<REAL> const *baseStencilTable, StencilTableReal<REAL> const *localPointStencilTable, bool factorize = true)"
  },
  {
    "label": "AppendLocalPointStencilTableFaceVarying()",
    "kind": "Method",
    "detail": "Function (} StencilTableReal<REAL> const*)",
    "insertText": "AppendLocalPointStencilTableFaceVarying(TopologyRefiner const &refiner, StencilTableReal<REAL> const *baseStencilTable, StencilTableReal<REAL> const *localPointStencilTable, int channel = 0, bool factorize = true)"
  },
  {
    "label": "generateControlVertStencils()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "generateControlVertStencils(int numControlVerts, StencilReal<REAL> & dst)"
  },
  {
    "label": "appendLocalPointStencilTable()",
    "kind": "Method",
    "detail": "Function (StencilTableReal<REAL> const*)",
    "insertText": "appendLocalPointStencilTable(TopologyRefiner const &refiner, StencilTableReal<REAL> const * baseStencilTable, StencilTableReal<REAL> const * localPointStencilTable, int channel, bool factorize)"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (} ; template<REAL> class LimitStencilTableFactoryReal { public : enum Mode { INTERPOLATE_VERTEX = 0,INTERPOLATE_VARYING,INTERPOLATE_FACE_VARYING } ; struct Options {)",
    "insertText": "Options() : interpolationMode(INTERPOLATE_VERTEX), generate1stDerivatives(true), generate2ndDerivatives(false), fvarChannel(0)"
  },
  {
    "label": "LocationArray()",
    "kind": "Method",
    "detail": "Function (} unsigned int interpolationMode : 2,generate1stDerivatives : 1,generate2ndDerivatives : 1 ; unsigned int fvarChannel ; } ; struct LocationArray {)",
    "insertText": "LocationArray() : ptexIdx(-1), numLocations(0), s(0), t(0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} int ptexIdx,numLocations ; REAL const* s,* t ; } ; typedef std::vector<LocationArray> LocationArrayVec ; LimitStencilTableReal<REAL> const*)",
    "insertText": "Create(TopologyRefiner const & refiner, LocationArrayVec const & locationArrays, StencilTableReal<REAL> const * cvStencils = 0, PatchTable const * patchTable = 0, Options options = Options())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} StencilTable const*)",
    "insertText": "Create(int numTables, StencilTable const ** tables)"
  },
  {
    "label": "AppendLocalPointStencilTable()",
    "kind": "Method",
    "detail": "Function (} StencilTable const*)",
    "insertText": "AppendLocalPointStencilTable(TopologyRefiner const &refiner, StencilTable const *baseStencilTable, StencilTable const *localPointStencilTable, bool factorize = true)"
  },
  {
    "label": "AppendLocalPointStencilTableVarying()",
    "kind": "Method",
    "detail": "Function (} StencilTable const*)",
    "insertText": "AppendLocalPointStencilTableVarying(TopologyRefiner const &refiner, StencilTable const *baseStencilTable, StencilTable const *localPointStencilTable, bool factorize = true)"
  },
  {
    "label": "AppendLocalPointStencilTableFaceVarying()",
    "kind": "Method",
    "detail": "Function (} StencilTable const*)",
    "insertText": "AppendLocalPointStencilTableFaceVarying(TopologyRefiner const &refiner, StencilTable const *baseStencilTable, StencilTable const *localPointStencilTable, int channel = 0, bool factorize = true)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; class LimitStencil ; class LimitStencilTable ; class LimitStencilTableFactory : public LimitStencilTableFactoryReal<float> { private : typedef LimitStencilTableFactoryReal<float> BaseFactory ; typedef StencilTableReal<float> BaseTable ; public : LimitStencilTable const*)",
    "insertText": "Create(TopologyRefiner const & refiner, LocationArrayVec const & locationArrays, StencilTable const * cvStencils = 0, PatchTable const * patchTable = 0, Options options = Options())"
  }
]