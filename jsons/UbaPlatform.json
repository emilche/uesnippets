[
  {
    "label": "StringBufferBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBufferBase"
  },
  {
    "label": "FileHandle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileHandle"
  },
  {
    "label": "MutexHandle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MutexHandle"
  },
  {
    "label": "ProcHandle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcHandle"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBase . h \" # if PLATFORM_WINDOWS # define NOMINMAX # include<ntstatus . h> # define WIN32_NO_STATUS # define _WINSOCK_DEPRECATED_NO_WARNINGS # include<ws2tcpip . h> # include<windows . h> # if)",
    "insertText": "defined(__clang_analyzer__ ) #define ANALYSIS_NORETURN __attribute__((analyzer_noreturn))"
  },
  {
    "label": "sizeof_array()",
    "kind": "Method",
    "detail": "Function (# ifndef sizeof_array # define)",
    "insertText": "sizeof_array(array) int(sizeof(array)/sizeof(array[0])) #endif #if UBA_DEBUG #define UBA_ASSERT(x)"
  },
  {
    "label": "UbaAssert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UbaAssert(TC(\"\"), __FILE__, __LINE__, #x, 543221)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define UBA_ASSERTF(x, ...)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (uba::StringBuffer<> _buf ; _buf .)",
    "insertText": "Appendf(__VA_ARGS__)"
  },
  {
    "label": "UbaAssert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UbaAssert(_buf.data, __FILE__, __LINE__, #x, 543221)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define UBA_ASSERT_MESSAGEBOX 0 #else #define UBA_ASSERT(x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define UBA_ASSERT_MESSAGEBOX 0 #endif #define UBA_NOT_IMPLEMENTED(x) UBA_ASSERTF(false, TC(\"%s not implemented!\"), #x)"
  },
  {
    "label": "WriteAssertInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAssertInfo(class StringBufferBase& out, const tchar* text, const char* file, u32 line, const char* expr, u32 skipCallstack)"
  },
  {
    "label": "UbaAssert()",
    "kind": "Method",
    "detail": "Function (ANALYSIS_NORETURN void)",
    "insertText": "UbaAssert(const tchar* text, const char* file, u32 line, const char* expr, u32 terminateCode)"
  },
  {
    "label": "FatalError()",
    "kind": "Method",
    "detail": "Function (ANALYSIS_NORETURN void)",
    "insertText": "FatalError(u32 code, const tchar* format, ...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using CustomAssertHandler =)",
    "insertText": "void(const tchar* text)"
  },
  {
    "label": "SetCustomAssertHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomAssertHandler(CustomAssertHandler* handler)"
  },
  {
    "label": "CreateGuid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateGuid(Guid& out)"
  },
  {
    "label": "IsRunningWine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningWine()"
  },
  {
    "label": "IsEscapePressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEscapePressed()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(u32 milliseconds)"
  },
  {
    "label": "GetUserDefaultUILanguage()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetUserDefaultUILanguage()"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetLastError()"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastError(u32 error)"
  },
  {
    "label": "GetComputerNameW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetComputerNameW(tchar* buffer, u32 bufferLen)"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "InvalidFileHandle()",
    "kind": "Method",
    "detail": "Function (enum FileHandle : u64 { } ; FileHandle)",
    "insertText": "InvalidFileHandle(FileHandle)"
  },
  {
    "label": "MutexHandle()",
    "kind": "Method",
    "detail": "Function (enum MutexHandle : u64 { } ; MutexHandle InvalidMutexHandle =)",
    "insertText": "MutexHandle(0)"
  },
  {
    "label": "CreateMutexW()",
    "kind": "Method",
    "detail": "Function (MutexHandle)",
    "insertText": "CreateMutexW(bool bInitialOwner, const tchar* name)"
  },
  {
    "label": "InvalidProcHandle()",
    "kind": "Method",
    "detail": "Function (enum ProcHandle : u64 { } ; ProcHandle)",
    "insertText": "InvalidProcHandle((ProcHandle)(u64)-1)"
  },
  {
    "label": "GetCurrentProcessHandle()",
    "kind": "Method",
    "detail": "Function (ProcHandle)",
    "insertText": "GetCurrentProcessHandle()"
  },
  {
    "label": "GetEnvironmentVariableW()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetEnvironmentVariableW(const tchar* name, tchar* buffer, u32 nSize)"
  },
  {
    "label": "SetEnvironmentVariableW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEnvironmentVariableW(const tchar* name, const tchar* value)"
  },
  {
    "label": "ExpandEnvironmentStringsW()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "ExpandEnvironmentStringsW(const tchar* lpSrc, tchar* lpDst, u32 nSize)"
  },
  {
    "label": "GetLogicalProcessorCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetLogicalProcessorCount()"
  },
  {
    "label": "GetProcessorGroupCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetProcessorGroupCount()"
  },
  {
    "label": "ElevateCurrentThreadPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElevateCurrentThreadPriority()"
  },
  {
    "label": "PrefetchVirtualMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchVirtualMemory(const void* mem, u64 size)"
  },
  {
    "label": "ToLow()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS bool CaseInsensitiveFs = true ; tchar PathSeparator = ' \\ \\ ' ; tchar NonPathSeparator = ' / ' ; u32 MaxPath = 1 0 2 4 ; DWORD)",
    "insertText": "ToLow(u64 v)"
  },
  {
    "label": "QuadPart()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER li ; li .)",
    "insertText": "QuadPart(LONGLONG)"
  },
  {
    "label": "HighPart()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER li ; li .)",
    "insertText": "HighPart(LONG)"
  },
  {
    "label": "TStrlen()",
    "kind": "Method",
    "detail": "Function (li . LowPart = low ; return li ; } # define)",
    "insertText": "TStrlen(s) u32(wcslen(s)) #define TStrchr(a, b) wcschr(a, b) #define TStrrchr(a, b) wcsrchr(a, b) #define TStrstr(a, b) wcsstr(a, b) #define TStrcmp(a, b) wcscmp(a, b) #define TSprintf_s swprintf_s #define Tvsprintf_s(...) vswprintf_s(__VA_ARGS__) #define TStrcpy_s wcscpy_s #define TStrcat_s wcscat_s #define TStrdup _wcsdup #define UBA_NOINLINE __declspec(noinline)"
  },
  {
    "label": "TStrlen()",
    "kind": "Method",
    "detail": "Function (tchar NonPathSeparator = ' \\ \\ ' ; u32 MaxPath = 1 0 2 4 ; # define)",
    "insertText": "TStrlen(s) u32(strlen(s)) #define TStrchr(a, b) strchr(a, b) #define TStrrchr(a, b) strrchr(a, b) #define TStrstr(a, b) strstr(a, b) #define TStrcmp(a, b) strcmp(a, b) #define TSprintf_s(...) snprintf(__VA_ARGS__) #define Tvsprintf_s(a, b, c, d) vsnprintf(a, b, c, d) #define TStrcpy_s(a, b, c) strcpy(a, c) #define TStrcat_s(a, b, c) strcat(a, c) #define TStrdup strdup #define localtime_s(a,b) localtime_r(b,a) void GetMappingHandleName(StringBufferBase& out, u64 uid)"
  },
  {
    "label": "FromTimeSpec()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "FromTimeSpec(const timespec& ts)"
  },
  {
    "label": "ToTimeSpec()",
    "kind": "Method",
    "detail": "Function (} timespec)",
    "insertText": "ToTimeSpec(u64 time)"
  },
  {
    "label": "tv_nsec()",
    "kind": "Method",
    "detail": "Function (timespec ts ; ts . tv_sec = time / 1 0 ' 0 0 0 ' 0 0 0 ull ; ts .)",
    "insertText": "tv_nsec(time - (u64(ts.tv_sec) * 10'000'000ull))"
  }
]