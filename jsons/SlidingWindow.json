[
  {
    "label": "TSlidingWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlidingWindow"
  },
  {
    "label": "TSlidingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlidingBuffer"
  },
  {
    "label": "TSlidingWindowIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlidingWindowIterator"
  },
  {
    "label": "InSampleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InSampleType"
  },
  {
    "label": "TScopedSlidingWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopedSlidingWindow"
  },
  {
    "label": "TAutoSlidingWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAutoSlidingWindow"
  },
  {
    "label": "TSlidingBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { template<InSampleType> class TSlidingWindow ; template<InSampleType> class TSlidingBuffer { class TSlidingWindow<InSampleType> ; public :)",
    "insertText": "TSlidingBuffer(const int32 InNumWindowSamples, const int32 InNumHopSamples) : NumWindowSamples(InNumWindowSamples) , NumHopSamples(InNumHopSamples) , NumUnderflowSamples(0)"
  },
  {
    "label": "GetNumWindowSamples()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumWindowSamples()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "RemoveAt(0, NumUnderflowSamples)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumUnderflowSamples = 0 ; } else { NumUnderflowSamples - = StorageBuffer .)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } int32 NumSamples = InBuffer .)",
    "insertText": "Num() + StorageBuffer.Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NumSamples < NumWindowSamples)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "Append(&InBuffer.GetData()[InBufferIndex], NumToCopy)"
  },
  {
    "label": "NumWindowsGenerated()",
    "kind": "Method",
    "detail": "Function (NumUnderflowSamples = 0 ; } else { int32)",
    "insertText": "NumWindowsGenerated(NumSamples - NumWindowSamples)"
  },
  {
    "label": "NumSamples()",
    "kind": "Method",
    "detail": "Function (int32 NumRemainingSamples =)",
    "insertText": "NumSamples(NumWindowsGenerated * NumHopSamples)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "RemoveAt(0, NumToRemove)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} StorageBuffer .)",
    "insertText": "Append(InBuffer.GetData(), InBuffer.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NumRemainingSamples > 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "Reset(NumRemainingSamples)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (StorageBuffer .)",
    "insertText": "AddUninitialized(NumRemainingSamples)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(StorageBuffer.GetData(), &InBuffer.GetData()[NewBufferCopyIndex], NumRemainingSamples * sizeof(InSampleType))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { NumUnderflowSamples = - NumRemainingSamples ; StorageBuffer .)",
    "insertText": "Reset(0)"
  },
  {
    "label": "TSlidingWindowIterator()",
    "kind": "Method",
    "detail": "Function (NumUnderflowSamples = 0 ; } private : int32 NumWindowSamples ; int32 NumHopSamples ; TArray<InSampleType> StorageBuffer ; int32 NumUnderflowSamples ; } ; template<InSampleType> class TSlidingWindow { class TSlidingWindowIterator ; protected : TArrayView<const InSampleType> StorageBuffer ; TArrayView<const InSampleType> NewBuffer ; const int32 NumWindowSamples ; const int32 NumHopSamples ; private : int32 MaxReadIndex ; int32 NumUnderflowSamples ; public : template<InAllocator = FDefaultAllocator> class TSlidingWindowIterator { const TSlidingWindow SlidingWindow ; TArray<InSampleType,InAllocator>& WindowBuffer ; int32 ReadIndex ; public : const int32 ReadIndexEnd = INDEX_NONE ;)",
    "insertText": "TSlidingWindowIterator(const TSlidingWindow& InSlidingWindow, TArray<InSampleType, InAllocator>& OutWindowBuffer, int32 InReadIndex) : SlidingWindow(InSlidingWindow) , WindowBuffer(OutWindowBuffer) , ReadIndex(InReadIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadIndex = ReadIndexEnd ; } } TSlidingWindowIterator)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ReadIndex + = SlidingWindow . NumHopSamples ;)",
    "insertText": "if(ReadIndex > SlidingWindow.MaxReadIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadIndex = ReadIndexEnd ; } } return* this ; } bool)",
    "insertText": "operator(const TSlidingWindowIterator& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (WindowBuffer .)",
    "insertText": "Reset(SlidingWindow.NumWindowSamples)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (WindowBuffer .)",
    "insertText": "AddUninitialized(SlidingWindow.NumWindowSamples)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 SamplesFilled = 0 ;)",
    "insertText": "if(ReadIndex < SlidingWindow.StorageBuffer.Num())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(WindowBuffer.GetData(), &SlidingWindow.StorageBuffer.GetData()[ReadIndex], SamplesToCopy * sizeof(InSampleType))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SamplesFilled + = SamplesToCopy ; })",
    "insertText": "if(SamplesFilled < SlidingWindow.NumWindowSamples)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 SamplesToCopy =)",
    "insertText": "Min(SlidingWindow.NumWindowSamples - SamplesFilled, NewBufferRemaining)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&WindowBuffer.GetData()[SamplesFilled], &SlidingWindow.NewBuffer.GetData()[NewBufferIndex], SamplesToCopy * sizeof(InSampleType))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (int32 SamplesToZeropad = SlidingWindow . NumWindowSamples - SamplesFilled ;)",
    "insertText": "Memset(&WindowBuffer.GetData()[SamplesFilled], 0, sizeof(InSampleType) * SamplesToZeropad)"
  },
  {
    "label": "TSlidingWindow()",
    "kind": "Method",
    "detail": "Function (} return WindowBuffer ; } } ;)",
    "insertText": "TSlidingWindow(const TSlidingBuffer<InSampleType>& InSlidingBuffer, TArrayView<const InSampleType> InNewBuffer, bool bDoFlush) : StorageBuffer(InSlidingBuffer.StorageBuffer) , NewBuffer(InNewBuffer) , NumWindowSamples(InSlidingBuffer.NumWindowSamples) , NumHopSamples(InSlidingBuffer.NumHopSamples) , MaxReadIndex(0) , NumUnderflowSamples(InSlidingBuffer.NumUnderflowSamples)"
  },
  {
    "label": "NumWindowsGenerated()",
    "kind": "Method",
    "detail": "Function (NumZeroPad = NumWindowSamples - NumSamples ; } else { int32)",
    "insertText": "NumWindowsGenerated(NumSamples - NumWindowSamples - NumUnderflowSamples)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumZeroPad = NumWindowSamples - NumRemaining ; } } NumSamples + = NumZeroPad ; } MaxReadIndex = NumSamples - NumWindowSamples ;)",
    "insertText": "if(MaxReadIndex < 0)"
  },
  {
    "label": "TSlidingWindow()",
    "kind": "Method",
    "detail": "Function (MaxReadIndex = TSlidingWindowIterator<>::ReadIndexEnd ; } } ~)",
    "insertText": "TSlidingWindow()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<InAllocator = FDefaultAllocator> TSlidingWindowIterator<InAllocator>)",
    "insertText": "begin(TArray<InSampleType, InAllocator>& OutWindowBuffer)"
  },
  {
    "label": "InAllocator()",
    "kind": "Method",
    "detail": "Function (} return TSlidingWindowIterator<)",
    "insertText": "InAllocator(*this, OutWindowBuffer, NumUnderflowSamples)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<InAllocator = FDefaultAllocator> TSlidingWindowIterator<InAllocator>)",
    "insertText": "end(TArray<InSampleType, InAllocator>& OutWindowBuffer)"
  },
  {
    "label": "TScopedSlidingWindow()",
    "kind": "Method",
    "detail": "Function (} } ; template<class InSampleType> class TScopedSlidingWindow : public TSlidingWindow<InSampleType> {)",
    "insertText": "TScopedSlidingWindow(TScopedSlidingWindow const &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(TScopedSlidingWindow const &)"
  },
  {
    "label": "TScopedSlidingWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TScopedSlidingWindow(TScopedSlidingWindow&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TScopedSlidingWindow&)",
    "insertText": "operator(TScopedSlidingWindow&&)"
  },
  {
    "label": "TScopedSlidingWindow()",
    "kind": "Method",
    "detail": "Function (TSlidingBuffer<InSampleType>& SlidingBuffer ; public :)",
    "insertText": "TScopedSlidingWindow(TSlidingBuffer<InSampleType>& InSlidingBuffer, TArrayView<const InSampleType> InNewBuffer, bool bDoFlush = false) : TSlidingWindow<InSampleType>(InSlidingBuffer, InNewBuffer, bDoFlush) , SlidingBuffer(InSlidingBuffer)"
  },
  {
    "label": "TScopedSlidingWindow()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopedSlidingWindow()"
  },
  {
    "label": "StoreForFutureWindows()",
    "kind": "Method",
    "detail": "Function (SlidingBuffer .)",
    "insertText": "StoreForFutureWindows(TSlidingWindow<InSampleType>::NewBuffer)"
  },
  {
    "label": "TAutoSlidingWindow()",
    "kind": "Method",
    "detail": "Function (} } ; template<InSampleType,InAllocator = FDefaultAllocator> class TAutoSlidingWindow : public TScopedSlidingWindow<InSampleType> { TArray<InSampleType,InAllocator>& WindowBuffer ; typedef TSlidingWindow<InSampleType>::template TSlidingWindowIterator<InAllocator> TAutoSlidingWindowIterator ; public :)",
    "insertText": "TAutoSlidingWindow(TSlidingBuffer<InSampleType>& InBuffer, TArrayView<const InSampleType> InNewBuffer, TArray<InSampleType, InAllocator>& OutWindow, bool bDoFlush = false) : TScopedSlidingWindow<InSampleType>(InBuffer, InNewBuffer, bDoFlush) , WindowBuffer(OutWindow)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TAutoSlidingWindowIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TAutoSlidingWindowIterator)",
    "insertText": "end()"
  }
]