[
  {
    "label": "_Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iterator"
  },
  {
    "label": "__bounded_iter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__bounded_iter"
  },
  {
    "label": "_OtherIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OtherIterator"
  },
  {
    "label": "_It",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_It"
  },
  {
    "label": "pointer_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pointer_traits"
  },
  {
    "label": "__is_cpp17_contiguous_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_cpp17_contiguous_iterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_BOUNDED_ITER_H # define _LIBCPP___ITERATOR_BOUNDED_ITER_H # include<__assert> # include<__config> # include<__iterator / iterator_traits . h> # include<__memory / pointer_traits . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__bounded_iter()",
    "kind": "Method",
    "detail": "Function (using value_type = iterator_traits<_Iterator>::value_type ; using difference_type = iterator_traits<_Iterator>::difference_type ; using pointer = iterator_traits<_Iterator>::pointer ; using reference = iterator_traits<_Iterator>::reference ; using iterator_category = iterator_traits<_Iterator>::iterator_category ; # if _LIBCPP_STD_VER> 1 7 using iterator_concept = contiguous_iterator_tag ; # endif _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__bounded_iter()"
  },
  {
    "label": "__bounded_iter()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__bounded_iter(__bounded_iter const&)"
  },
  {
    "label": "__bounded_iter()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__bounded_iter(__bounded_iter&&)"
  },
  {
    "label": "__bounded_iter()",
    "kind": "Method",
    "detail": "Function (template<class _OtherIterator,class = __enable_if_t<is_convertible<_OtherIterator,_Iterator>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__bounded_iter(__bounded_iter<_OtherIterator> const& __other) _NOEXCEPT : __current_(__other.__current_), __begin_(__other.__begin_), __end_(__other.__end_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __bounded_iter&)",
    "insertText": "operator(__bounded_iter const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI __bounded_iter&)",
    "insertText": "operator(__bounded_iter&&)"
  },
  {
    "label": "__bounded_iter()",
    "kind": "Method",
    "detail": "Function (private : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "__bounded_iter(_Iterator __current, _Iterator __begin, _Iterator __end) : __current_(__current), __begin_(__begin), __end_(__end)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__begin <= __end, \"__bounded_iter(current, begin, end): [begin, end) is not a valid range\")"
  },
  {
    "label": "__make_bounded_iter()",
    "kind": "Method",
    "detail": "Function (} template<class _It> _LIBCPP_CONSTEXPR __bounded_iter<_It>)",
    "insertText": "__make_bounded_iter(_It, _It, _It)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 reference)",
    "insertText": "operator()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__in_bounds(__current_), \"__bounded_iter::operator*: Attempt to dereference an out-of-range iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__in_bounds(__current_), \"__bounded_iter::operator->: Attempt to dereference an out-of-range iterator\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 reference)",
    "insertText": "operator(difference_type __n)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__in_bounds(__current_ + __n), \"__bounded_iter::operator[]: Attempt to index an iterator out-of-range\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __current_ ; return* this ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __bounded_iter)",
    "insertText": "operator(int)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (__bounded_iter)",
    "insertText": "__tmp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__current_ + = __n ; return* this ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __bounded_iter)",
    "insertText": "operator(__bounded_iter const& __self, difference_type __n)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (__bounded_iter)",
    "insertText": "__tmp(__self)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__tmp + = __n ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __bounded_iter)",
    "insertText": "operator(difference_type __n, __bounded_iter const& __self)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__tmp - = __n ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 difference_type)",
    "insertText": "operator(__bounded_iter const& __x, __bounded_iter const& __y)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER<= 1 7 template<class _Iterator> struct __is_cpp17_contiguous_iterator<__bounded_iter<_Iterator>> : true_type { } ; # endif template<class _Iterator> struct pointer_traits<__bounded_iter<_Iterator>> { using pointer = __bounded_iter<_Iterator> ; using element_type = pointer_traits<_Iterator>::element_type ; using difference_type = pointer_traits<_Iterator>::difference_type ; _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR element_type*)",
    "insertText": "to_address(pointer __it)"
  }
]