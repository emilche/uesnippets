[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FPinValueInspectorTooltip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPinValueInspectorTooltip"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "SLevelOfDetailBranchNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelOfDetailBranchNode"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWrapBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWrapBox"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" GenericPlatform / ICursor . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" SGraphNode . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SWrapBox . h \" # include \" Widgets / SWidget . h \" class FDragDropEvent ; class FDragDropOperation ; class FPinValueInspectorTooltip ; class IToolTip ; class SGraphNode ; class SGraphPanel ; class SGraphPin ; class SHorizontalBox ; class SImage ; class SLevelOfDetailBranchNode ; class SWidget ; class SWrapBox ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; # define NAME_DefaultPinLabelStyle)",
    "insertText": "TEXT(\"Graph.Node.PinName\")"
  },
  {
    "label": "FGraphPinHandle()",
    "kind": "Method",
    "detail": "Function (FGuid NodeGuid ; FGuid PinId ;)",
    "insertText": "FGraphPinHandle()"
  },
  {
    "label": "FGraphPinHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphPinHandle(UEdGraphPin* InPin)"
  },
  {
    "label": "GetPinObj()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetPinObj(const SGraphPanel& InPanel)"
  },
  {
    "label": "FindInGraphPanel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SGraphPin>)",
    "insertText": "FindInGraphPanel(const class SGraphPanel& InPanel)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGraphPinHandle& Other)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class SGraphPin : public SBorder { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPin) : _PinLabelStyle(NAME_DefaultPinLabelStyle) , _UsePinColorForText(false) , _SideToSideMargin(5.0f)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, PinLabelStyle) SLATE_ARGUMENT(bool, UsePinColorForText) SLATE_ARGUMENT(float, SideToSideMargin) SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InPin)"
  },
  {
    "label": "SGraphPin()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SGraphPin()"
  },
  {
    "label": "SetIsEditable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEditable(TAttribute<bool> InIsEditable)"
  },
  {
    "label": "GetFullPinHorizontalRowWidget()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SHorizontalBox>)",
    "insertText": "GetFullPinHorizontalRowWidget()"
  },
  {
    "label": "OnPinNameMouseDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPinNameMouseDown(const FGeometry& SenderGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolTip>)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "RefreshLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshLOD()"
  },
  {
    "label": "GetPinObj()",
    "kind": "Method",
    "detail": "Function (public : UEdGraphPin*)",
    "insertText": "GetPinObj()"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const TSharedRef<SGraphNode> OwnerNode)"
  },
  {
    "label": "SetPinObj()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinObj(UEdGraphPin* PinObj)"
  },
  {
    "label": "GetDirection()",
    "kind": "Method",
    "detail": "Function (EEdGraphPinDirection)",
    "insertText": "GetDirection()"
  },
  {
    "label": "IsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArray()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMap()"
  },
  {
    "label": "IsByMutableRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsByMutableRef()"
  },
  {
    "label": "IsDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelegate()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "AreConnectionsFaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreConnectionsFaded()"
  },
  {
    "label": "TryHandlePinConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryHandlePinConnection(SGraphPin& OtherSPin)"
  },
  {
    "label": "GetDefaultValueVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDefaultValueVisibility()"
  },
  {
    "label": "SetShowLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowLabel(bool bNewDrawLabel)"
  },
  {
    "label": "SetPinColorModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinColorModifier(FLinearColor InColor)"
  },
  {
    "label": "SetDiffHighlighted()",
    "kind": "Method",
    "detail": "Function (PinColorModifier = InColor ; } void)",
    "insertText": "SetDiffHighlighted(bool bHighlighted)"
  },
  {
    "label": "SetPinDiffColor()",
    "kind": "Method",
    "detail": "Function (bIsDiffHighlighted = bHighlighted ; } void)",
    "insertText": "SetPinDiffColor(TOptional<FLinearColor> InColor)"
  },
  {
    "label": "SetFadeConnections()",
    "kind": "Method",
    "detail": "Function (PinDiffColor = InColor ; } void)",
    "insertText": "SetFadeConnections(bool bInFadeConnections)"
  },
  {
    "label": "SetOnlyShowDefaultValue()",
    "kind": "Method",
    "detail": "Function (bFadeConnections = bInFadeConnections ; } void)",
    "insertText": "SetOnlyShowDefaultValue(bool bNewOnlyShowDefaultValue)"
  },
  {
    "label": "IsPinVisibleAsAdvanced()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsPinVisibleAsAdvanced()"
  },
  {
    "label": "GetNodeOffset()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeOffset()"
  },
  {
    "label": "GetIsConnectable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsConnectable()"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "GetValueWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetValueWidget()"
  },
  {
    "label": "GetLabelAndValue()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWrapBox>)",
    "insertText": "GetLabelAndValue()"
  },
  {
    "label": "IsEditingEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEditingEnabled()"
  },
  {
    "label": "GetDefaultValueIsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultValueIsEditable()"
  },
  {
    "label": "SetCustomPinIcon()",
    "kind": "Method",
    "detail": "Function (bGraphDataInvalid = true ; } void)",
    "insertText": "SetCustomPinIcon(const FSlateBrush* InConnectedBrush, const FSlateBrush* InDisconnectedBrush)"
  },
  {
    "label": "HasInteractiveTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInteractiveTooltip()"
  },
  {
    "label": "EnableDragAndDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDragAndDrop(bool bEnable)"
  },
  {
    "label": "DoesWidgetHandleSettingEditingEnabled()",
    "kind": "Method",
    "detail": "Function (bDragAndDropEnabled = bEnable ; } protected : bool)",
    "insertText": "DoesWidgetHandleSettingEditingEnabled()"
  },
  {
    "label": "GetPinLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPinLabelVisibility()"
  },
  {
    "label": "GetPinIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPinIcon()"
  },
  {
    "label": "GetSecondaryPinIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSecondaryPinIcon()"
  },
  {
    "label": "GetPinBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPinBorder()"
  },
  {
    "label": "GetPinStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPinStatusIcon()"
  },
  {
    "label": "GetPinStatusIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPinStatusIconVisibility()"
  },
  {
    "label": "ClickedOnPinStatusIcon()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ClickedOnPinStatusIcon()"
  },
  {
    "label": "GetPinColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetPinColor()"
  },
  {
    "label": "GetHighlightColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetHighlightColor()"
  },
  {
    "label": "GetPinDiffColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetPinDiffColor()"
  },
  {
    "label": "GetSecondaryPinColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetSecondaryPinColor()"
  },
  {
    "label": "GetPinTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetPinTextColor()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetInteractiveTooltipLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInteractiveTooltipLocation(FVector2D& InOutDesiredLocation)"
  },
  {
    "label": "GetPinCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<EMouseCursor::Type>)",
    "insertText": "GetPinCursor()"
  },
  {
    "label": "SpawnPinDragEvent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDragDropOperation>)",
    "insertText": "SpawnPinDragEvent(const TSharedRef<class SGraphPanel>& InGraphPanel, const TArray< TSharedRef<SGraphPin> >& InStartingPins)"
  },
  {
    "label": "UseLowDetailPinNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLowDetailPinNames()"
  },
  {
    "label": "GetPinVisiblity()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPinVisiblity()"
  },
  {
    "label": "GetPinImageWidget()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<SWidget>)",
    "insertText": "GetPinImageWidget()"
  },
  {
    "label": "SetPinImageWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinImageWidget(TSharedRef<SWidget> NewWidget)"
  }
]