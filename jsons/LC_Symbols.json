[
  {
    "label": "CoffCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoffCache"
  },
  {
    "label": "CoffDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoffDB"
  },
  {
    "label": "Symbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Symbol"
  },
  {
    "label": "SymbolDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolDB"
  },
  {
    "label": "Contribution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Contribution"
  },
  {
    "label": "ContributionDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContributionDB"
  },
  {
    "label": "CompilandSourceFiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompilandSourceFiles"
  },
  {
    "label": "Compiland",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Compiland"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Type"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "AmalgamatedCompiland",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AmalgamatedCompiland"
  },
  {
    "label": "ModifiedObjFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ModifiedObjFile"
  },
  {
    "label": "Dependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dependency"
  },
  {
    "label": "CompilandDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompilandDB"
  },
  {
    "label": "DiaCompilandDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiaCompilandDB"
  },
  {
    "label": "ModuleDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ModuleDB"
  },
  {
    "label": "LibraryDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LibraryDB"
  },
  {
    "label": "LinkerDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LinkerDB"
  },
  {
    "label": "ThunkDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThunkDB"
  },
  {
    "label": "ImageSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSection"
  },
  {
    "label": "ImageSectionDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSectionDB"
  },
  {
    "label": "Provider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Provider"
  },
  {
    "label": "DynamicInitializerDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DynamicInitializerDB"
  },
  {
    "label": "UserDefinedTypesDB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserDefinedTypesDB"
  },
  {
    "label": "OpenOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpenOptions"
  },
  {
    "label": "CompilandOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompilandOptions"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_ImmutableString . h \" # include \" LC_ProcessTypes . h \" # include \" LC_Types . h \" # include \" LC_Executable . h \" # include \" LC_ChangeNotification . h \" # include \" LC_DirectoryCache . h \" # include<dia2 . h> template<T> class CoffCache ; namespace coff { struct CoffDB ; } namespace symbols { struct Symbol { ImmutableString name ; uint32_t rva ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(Symbol)"
  },
  {
    "label": "LC_DISABLE_COPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_COPY(Symbol)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (} ; struct SymbolDB { types::StringMap<Symbol*> symbolsByName ; types::unordered_map<uint32_t,Symbol*> symbolsByRva ; types::StringSet symbolsWithoutRva ; types::vector<Symbol*> patchableFunctionSymbols ; types::vector<Symbol*> ansSymbols ; } ; struct Contribution { uint32_t compilandNameIndex ; uint32_t rva ; uint32_t size ; } ; struct ContributionDB { types::vector<ImmutableString> originalStringTable ; types::vector<ImmutableString> objOnDiskStringTable ; types::vector<Contribution*> contributions ; typedef types::vector<Contribution*> ContributionsPerCompiland ; types::vector<ContributionsPerCompiland> contributionsPerCompilandNameIndex ; types::StringMap<uint32_t> compilandNameToCompilandNameIndex ; } ; struct CompilandSourceFiles { types::vector<ImmutableString> files ; } ; struct Compiland { struct Type { enum Enum : uint8_t { SINGLE_FILE,AMALGAMATION,PART_OF_AMALGAMATION } ; } ; ImmutableString originalObjPath ; ImmutableString srcPath ; ImmutableString pdbPath ; ImmutableString compilerPath ; ImmutableString commandLine ; ImmutableString workingDirectory ; ImmutableString amalgamationPath ; CompilandSourceFiles* sourceFiles ; uint32_t uniqueId ; Type::Enum type ; bool isPartOfLibrary ; bool wasRecompiled ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(Compiland)"
  },
  {
    "label": "LC_DISABLE_COPY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_DISABLE_COPY(Compiland)"
  },
  {
    "label": "LC_DISABLE_ASSIGNMENT()",
    "kind": "Method",
    "detail": "Function (} ; struct AmalgamatedCompiland { types::vector<ImmutableString> singleParts ; bool isSplit ; } ; struct ModifiedObjFile { std::wstring objPath ; std::wstring amalgamatedObjPath ; } ; typedef ImmutableString ObjPath ; typedef ImmutableString FilePath ; typedef uint64_t TimeStamp ; struct Dependency { DirectoryCache::Directory* parentDirectory ; TimeStamp lastModification ; types::vector<ObjPath> objPaths ; bool hadInitialChange ; } ; struct CompilandDB { types::StringMap<Compiland*> compilands ; types::StringMap<AmalgamatedCompiland*> amalgamatedCompilands ; types::StringMap<Dependency*> dependencies ; types::StringMap<ImmutableString> compilandNameToObjOnDisk ; } ; struct DiaCompilandDB { types::vector<IDiaSymbol*> symbols ; } ; struct ModuleDB { types::vector<std::wstring> modules ; } ; struct LibraryDB { types::vector<FilePath> libraries ; } ; struct LinkerDB { ImmutableString pdbPath ; ImmutableString linkerPath ; ImmutableString commandLine ; ImmutableString workingDirectory ;)",
    "insertText": "LC_DISABLE_ASSIGNMENT(LinkerDB)"
  },
  {
    "label": "CreateNewSymbol()",
    "kind": "Method",
    "detail": "Function (} ; struct ThunkDB { types::unordered_map<uint32_t,uint32_t> thunksFromTableEntryToTarget ; types::unordered_map<uint32_t,types::vector<uint32_t>> thunksFromTargetToTableEntries ; } ; struct ImageSection { uint32_t nameIndex ; uint32_t rva ; uint32_t size ; } ; struct ImageSectionDB { types::vector<ImmutableString> sectionNames ; types::vector<ImageSection> sections ; types::StringMap<ImageSection> sectionsByName ; } ; struct Provider { IDiaDataSource* diaDataSource ; IDiaSession* diaSession ; IDiaSymbol* globalScope ; TimeStamp lastModificationTime ; } ; struct DynamicInitializerDB { types::vector<const Symbol*> dynamicInitializers ; } ; struct UserDefinedTypesDB { types::unordered_set<uint32_t> typeIds ; } ; struct OpenOptions { enum Enum : uint32_t { NONE = 0 u,ACCUMULATE_SIZE = 1 u<<0 u,USE_SYMBOL_SERVER = 1 u<<1 u } ; } ; Symbol*)",
    "insertText": "CreateNewSymbol(const ImmutableString& name, uint32_t rva, SymbolDB* db)"
  },
  {
    "label": "OpenEXE()",
    "kind": "Method",
    "detail": "Function (Provider*)",
    "insertText": "OpenEXE(const wchar_t* filename, uint32_t openOptions)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(Provider* provider)"
  },
  {
    "label": "ResetCachedUnityManifests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCachedUnityManifests()"
  },
  {
    "label": "TryGetCompilandIdFromUnityManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetCompilandIdFromUnityManifest(const std::wstring& objPath, uint32_t& compilandId)"
  },
  {
    "label": "GetCompilandIdFromPath()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCompilandIdFromPath(const std::wstring& objPath)"
  },
  {
    "label": "GatherSymbols()",
    "kind": "Method",
    "detail": "Function (SymbolDB*)",
    "insertText": "GatherSymbols(Provider* provider)"
  },
  {
    "label": "GatherContributions()",
    "kind": "Method",
    "detail": "Function (ContributionDB*)",
    "insertText": "GatherContributions(Provider* provider)"
  },
  {
    "label": "FinalizeContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeContributions(const CompilandDB* compilandDb, ContributionDB* db)"
  },
  {
    "label": "GatherDiaCompilands()",
    "kind": "Method",
    "detail": "Function (DiaCompilandDB*)",
    "insertText": "GatherDiaCompilands(Provider* provider)"
  },
  {
    "label": "GatherCompilands()",
    "kind": "Method",
    "detail": "Function (struct CompilandOptions { enum Enum : uint32_t { NONE = 0 u,GENERATE_LOGS = 1 u<<0 u,FORCE_PCH_PDBS = 1 u<<1 u,TRACK_OBJ_ONLY = 1 u<<2 u } ; } ; CompilandDB*)",
    "insertText": "GatherCompilands(const Provider* provider, const DiaCompilandDB* diaCompilandDb, unsigned int splitAmalgamatedFilesThreshold, uint32_t compilandOptions)"
  },
  {
    "label": "GatherLibraries()",
    "kind": "Method",
    "detail": "Function (LibraryDB*)",
    "insertText": "GatherLibraries(const DiaCompilandDB* diaCompilandDb)"
  },
  {
    "label": "FindLinkerSymbol()",
    "kind": "Method",
    "detail": "Function (IDiaSymbol*)",
    "insertText": "FindLinkerSymbol(const DiaCompilandDB* diaCompilandDb)"
  },
  {
    "label": "GatherLinker()",
    "kind": "Method",
    "detail": "Function (LinkerDB*)",
    "insertText": "GatherLinker(IDiaSymbol* linkerSymbol)"
  },
  {
    "label": "GatherThunks()",
    "kind": "Method",
    "detail": "Function (ThunkDB*)",
    "insertText": "GatherThunks(IDiaSymbol* linkerSymbol)"
  },
  {
    "label": "GatherImageSections()",
    "kind": "Method",
    "detail": "Function (ImageSectionDB*)",
    "insertText": "GatherImageSections(IDiaSymbol* linkerSymbol)"
  },
  {
    "label": "GatherDynamicInitializers()",
    "kind": "Method",
    "detail": "Function (DynamicInitializerDB)",
    "insertText": "GatherDynamicInitializers(const Provider* provider, const executable::Image* image, const executable::ImageSectionDB* imageSections, const ImageSectionDB* imageSectionDb, const ContributionDB* contributionDb, const CompilandDB* compilandDb, const CoffCache<coff::CoffDB>* coffCache, SymbolDB* symbolDb)"
  },
  {
    "label": "DestroyLinkerSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLinkerSymbol(IDiaSymbol* symbol)"
  },
  {
    "label": "DestroyDiaCompilandDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDiaCompilandDB(DiaCompilandDB* db)"
  },
  {
    "label": "DestroyModuleDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyModuleDB(ModuleDB* db)"
  },
  {
    "label": "DestroyCompilandDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCompilandDB(CompilandDB* db)"
  },
  {
    "label": "MergeCompilandsAndDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeCompilandsAndDependencies(CompilandDB* existingDb, CompilandDB* mergedDb)"
  },
  {
    "label": "MarkCompilandAsRecompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkCompilandAsRecompiled(Compiland* compiland)"
  },
  {
    "label": "ClearCompilandAsRecompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCompilandAsRecompiled(Compiland* compiland)"
  },
  {
    "label": "IsCompilandRecompiled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompilandRecompiled(const Compiland* compiland)"
  },
  {
    "label": "FindCompiland()",
    "kind": "Method",
    "detail": "Function (Compiland*)",
    "insertText": "FindCompiland(CompilandDB* db, const ObjPath& objPath)"
  },
  {
    "label": "FindCompiland()",
    "kind": "Method",
    "detail": "Function (const Compiland*)",
    "insertText": "FindCompiland(const CompilandDB* db, const ObjPath& objPath)"
  },
  {
    "label": "FindAmalgamatedCompiland()",
    "kind": "Method",
    "detail": "Function (AmalgamatedCompiland*)",
    "insertText": "FindAmalgamatedCompiland(CompilandDB* db, const ObjPath& objPath)"
  },
  {
    "label": "FindAmalgamatedCompiland()",
    "kind": "Method",
    "detail": "Function (const AmalgamatedCompiland*)",
    "insertText": "FindAmalgamatedCompiland(const CompilandDB* db, const ObjPath& objPath)"
  },
  {
    "label": "IsAmalgamation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAmalgamation(const Compiland* compiland)"
  },
  {
    "label": "IsPartOfAmalgamation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartOfAmalgamation(const Compiland* compiland)"
  },
  {
    "label": "FindSymbolByName()",
    "kind": "Method",
    "detail": "Function (const Symbol*)",
    "insertText": "FindSymbolByName(const SymbolDB* db, const ImmutableString& name)"
  },
  {
    "label": "FindSymbolByRVA()",
    "kind": "Method",
    "detail": "Function (const Symbol*)",
    "insertText": "FindSymbolByRVA(const SymbolDB* db, uint32_t rva)"
  },
  {
    "label": "FindImageSectionByName()",
    "kind": "Method",
    "detail": "Function (const ImageSection*)",
    "insertText": "FindImageSectionByName(const ImageSectionDB* db, const ImmutableString& name)"
  },
  {
    "label": "FindImageSectionByRVA()",
    "kind": "Method",
    "detail": "Function (const ImageSection*)",
    "insertText": "FindImageSectionByRVA(const ImageSectionDB* db, uint32_t rva)"
  },
  {
    "label": "FindThunkTargetByRVA()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FindThunkTargetByRVA(const ThunkDB* db, uint32_t tableEntryRva)"
  },
  {
    "label": "FindThunkTableEntriesByRVA()",
    "kind": "Method",
    "detail": "Function (types::vector<uint32_t>)",
    "insertText": "FindThunkTableEntriesByRVA(const ThunkDB* db, uint32_t targetRva)"
  },
  {
    "label": "UndecorateSymbolName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "UndecorateSymbolName(const ImmutableString& symbolName)"
  },
  {
    "label": "FindContributionByRVA()",
    "kind": "Method",
    "detail": "Function (const Contribution*)",
    "insertText": "FindContributionByRVA(const ContributionDB* db, uint32_t rva)"
  },
  {
    "label": "GetContributionCompilandName()",
    "kind": "Method",
    "detail": "Function (ImmutableString)",
    "insertText": "GetContributionCompilandName(const ContributionDB* db, const Contribution* contribution)"
  },
  {
    "label": "GetContributionsForCompilandName()",
    "kind": "Method",
    "detail": "Function (const ContributionDB::ContributionsPerCompiland*)",
    "insertText": "GetContributionsForCompilandName(const ContributionDB* db, const ImmutableString& compilandName)"
  },
  {
    "label": "GetContributionsForCompilandNameIndex()",
    "kind": "Method",
    "detail": "Function (const ContributionDB::ContributionsPerCompiland*)",
    "insertText": "GetContributionsForCompilandNameIndex(const ContributionDB* db, uint32_t compilandNameIndex)"
  },
  {
    "label": "GetImageSectionName()",
    "kind": "Method",
    "detail": "Function (const ImmutableString&)",
    "insertText": "GetImageSectionName(const ImageSectionDB* db, const ImageSection* imageSection)"
  },
  {
    "label": "GetCompilandId()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCompilandId(const Compiland* compiland, const wchar_t* const objPath, const types::vector<ModifiedObjFile>& modifiedObjFiles)"
  },
  {
    "label": "TransformAnonymousNamespacePattern()",
    "kind": "Method",
    "detail": "Function (ImmutableString)",
    "insertText": "TransformAnonymousNamespacePattern(const ImmutableString& immutableString, uint32_t uniqueId)"
  },
  {
    "label": "TransformAnonymousNamespaceSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformAnonymousNamespaceSymbols(SymbolDB* symbolDb, ContributionDB* contributionDb, CompilandDB* compilandDb, const types::vector<ModifiedObjFile>& modifiedObjFiles)"
  },
  {
    "label": "IsPchSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPchSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsVTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVTable(const ImmutableString& symbolName)"
  },
  {
    "label": "IsRttiObjectLocator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRttiObjectLocator(const ImmutableString& symbolName)"
  },
  {
    "label": "IsDynamicInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicInitializer(const ImmutableString& functionSymbolName)"
  },
  {
    "label": "IsDynamicAtexitDestructor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicAtexitDestructor(const ImmutableString& functionSymbolName)"
  },
  {
    "label": "IsPointerToDynamicInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointerToDynamicInitializer(const ImmutableString& symbolName)"
  },
  {
    "label": "IsStringLiteral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringLiteral(const ImmutableString& symbolName)"
  },
  {
    "label": "IsLineNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLineNumber(const ImmutableString& symbolName)"
  },
  {
    "label": "IsFloatingPointSseAvxConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloatingPointSseAvxConstant(const ImmutableString& symbolName)"
  },
  {
    "label": "IsExceptionRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExceptionRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsExceptionClauseSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExceptionClauseSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsExceptionUnwindSymbolForDynamicInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExceptionUnwindSymbolForDynamicInitializer(const ImmutableString& symbolName)"
  },
  {
    "label": "IsRuntimeCheckRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRuntimeCheckRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsSdlCheckRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSdlCheckRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsControlFlowGuardRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControlFlowGuardRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsImageBaseRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImageBaseRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsTlsArrayRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsArrayRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsTlsIndexRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsIndexRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsTlsInitRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsInitRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsTlsStaticsRelatedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsStaticsRelatedSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsSectionSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsUERegisterSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUERegisterSymbol(const ImmutableString& symbolName, const char*& name, size_t& nameLength)"
  },
  {
    "label": "IsUERegisterSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUERegisterSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsUENoStripSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUENoStripSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsUEInitializerSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUEInitializerSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsUEReversePatchSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUEReversePatchSymbol(const ImmutableString& symbolName)"
  },
  {
    "label": "IsUEStaticsSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUEStaticsSymbol(const ImmutableString& symbolName)"
  }
]