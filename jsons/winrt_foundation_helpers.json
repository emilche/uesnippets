[
  {
    "label": "Less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Less"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_WINRT_FOUNDATION_HELPERS_H_ # define BASE_WIN_WINRT_FOUNDATION_HELPERS_H_ # include<windows . foundation . h> # include<wrl / client . h> # include<algorithm> # include<vector> # include \" base / win / hstring_compare . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace win { namespace internal { template<TComplex> using AbiType = ABI::Windows::Foundation::Internal::GetAbiType<TComplex>::type ; template<TComplex> using LogicalType = ABI::Windows::Foundation::Internal::GetLogicalType<TComplex>::type ; template<TComplex> using StorageType = std::conditional_t<std::is_convertible<AbiType<TComplex>,IUnknown*>::value,Microsoft::WRL::ComPtr<std::remove_pointer_t<AbiType<TComplex>>>,AbiType<TComplex>> ; template<TComplex> using OptionalStorageType = std::conditional_t<std::is_convertible<AbiType<TComplex>,IUnknown*>::value,Microsoft::WRL::ComPtr<std::remove_pointer_t<AbiType<TComplex>>>,absl::optional<AbiType<TComplex>>> ; template<T> HRESULT)",
    "insertText": "CopyTo(const T& value, T* ptr)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (* ptr = value ; return S_OK ; } template<T> HRESULT)",
    "insertText": "CopyTo(const Microsoft::WRL::ComPtr<T>& value, T** ptr)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "CopyTo(const absl::optional<T>& value, T* ptr)"
  },
  {
    "label": "CopyN()",
    "kind": "Method",
    "detail": "Function (* ptr =* value ; return S_OK ; } template<T> HRESULT)",
    "insertText": "CopyN(typename std::vector<T>::const_iterator first, unsigned count, T* result)"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_n(first, count, result)"
  },
  {
    "label": "HStringCompare()",
    "kind": "Method",
    "detail": "Function (INT32 result ; HRESULT hr =)",
    "insertText": "HStringCompare(lhs, rhs, &result)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(SUCCEEDED(hr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct Less { bool)",
    "insertText": "operator()(const HSTRING& lhs, const HSTRING& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator()(const T& lhs, const T& rhs)"
  }
]