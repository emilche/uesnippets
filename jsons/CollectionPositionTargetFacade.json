[
  {
    "label": "FPositionTargetsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPositionTargetsData"
  },
  {
    "label": "FPositionTargetFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPositionTargetFacade"
  },
  {
    "label": "FPositionTargetFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / Facades / CollectionSelectionFacade . h \" namespace GeometryCollection::Facades { struct FPositionTargetsData { TArray<int32> TargetIndex ; TArray<int32> SourceIndex ; TArray<float> TargetWeights ; TArray<float> SourceWeights ; FString TargetName ; FString SourceName ; float Stiffness ; float Damping ; } ; class FPositionTargetFacade { public : typedef GeometryCollection::Facades::FSelectionFacade::FSelectionKey FBindingKey ; const FName GroupName ; const FName TargetIndex ; const FName SourceIndex ; const FName Stiffness ; const FName Damping ; const FName SourceName ; const FName TargetName ; const FName TargetWeights ; const FName SourceWeights ;)",
    "insertText": "FPositionTargetFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FPositionTargetFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPositionTargetFacade(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "AddPositionTarget()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddPositionTarget(const FPositionTargetsData& InputData)"
  },
  {
    "label": "GetPositionTarget()",
    "kind": "Method",
    "detail": "Function (FPositionTargetsData)",
    "insertText": "GetPositionTarget(const int32 DataIndex)"
  },
  {
    "label": "NumPositionTargets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPositionTargets()"
  }
]