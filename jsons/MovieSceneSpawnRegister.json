[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "FMovieSceneEvaluationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationState"
  },
  {
    "label": "FMovieSceneSpawnable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSpawnable"
  },
  {
    "label": "FTransformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformData"
  },
  {
    "label": "UMovieSceneSpawnableBindingBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSpawnableBindingBase"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FMovieSceneSpawnRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneSpawnRegister"
  },
  {
    "label": "FSpawnedObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpawnedObject"
  },
  {
    "label": "FMovieSceneSpawnRegisterKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSpawnRegisterKey"
  },
  {
    "label": "FNullMovieSceneSpawnRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullMovieSceneSpawnRegister"
  },
  {
    "label": "FMovieSceneSpawnRegister()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Evaluation / IMovieScenePlaybackCapability . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IMovieSceneObjectSpawner . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" Misc / OptionalFwd . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / ValueOrError . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class UClass ; class UObject ; template<FuncType> class TFunctionRef ; enum class ESpawnOwnership : uint8 ; class IMovieScenePlayer ; class ISequencer ; class UActorFactory ; class UMovieScene ; class USequencerSettings ; struct FMovieSceneEvaluationState ; struct FMovieSceneSpawnable ; struct FTransformData ; class UMovieSceneSpawnableBindingBase ; namespace UE::MovieScene { struct FSharedPlaybackState ; } class FMovieSceneSpawnRegister : public TSharedFromThis<FMovieSceneSpawnRegister> { public : using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ; UE::MovieScene::TPlaybackCapabilityID<FMovieSceneSpawnRegister> ID ;)",
    "insertText": "FMovieSceneSpawnRegister()"
  },
  {
    "label": "FMovieSceneSpawnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSpawnRegister(const FMovieSceneSpawnRegister&)"
  },
  {
    "label": "FindSpawnedObject()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<>)",
    "insertText": "FindSpawnedObject(const FGuid& BindingId, FMovieSceneSequenceIDRef TemplateID, int BindingIndex)"
  },
  {
    "label": "SpawnObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "SpawnObject(const FGuid& BindingId, UMovieScene& MovieScene, FMovieSceneSequenceIDRef Template, TSharedRef<const FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex)"
  },
  {
    "label": "DestroySpawnedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroySpawnedObject(const FGuid& BindingId, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex)"
  },
  {
    "label": "DestroyObjectDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyObjectDirectly(UObject& InObject)"
  },
  {
    "label": "DestroySpawnedObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySpawnedObject(InObject, nullptr)"
  },
  {
    "label": "DestroyObjectsByPredicate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyObjectsByPredicate(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, const TFunctionRef<bool(const FGuid&, ESpawnOwnership, FMovieSceneSequenceIDRef, int32)>& Predicate)"
  },
  {
    "label": "ForgetExternallyOwnedSpawnedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetExternallyOwnedSpawnedObjects(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CleanUp(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "CleanUpSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpSequence(FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "OnSequenceExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceExpired(FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FindSpawnedObject()",
    "kind": "Method",
    "detail": "Function (public : TWeakObjectPtr<>)",
    "insertText": "FindSpawnedObject(const FGuid& BindingId, FMovieSceneSequenceIDRef TemplateID)"
  },
  {
    "label": "SpawnObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "SpawnObject(const FGuid& BindingId, UMovieScene& MovieScene, FMovieSceneSequenceIDRef Template, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "DestroySpawnedObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DestroySpawnedObject(const FGuid& BindingId, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "SpawnObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "SpawnObject(const FGuid& BindingId, UMovieScene& MovieScene, FMovieSceneSequenceIDRef Template, IMovieScenePlayer& Player)"
  },
  {
    "label": "DestroySpawnedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroySpawnedObject(const FGuid& BindingId, FMovieSceneSequenceIDRef TemplateID, IMovieScenePlayer& Player)"
  },
  {
    "label": "DestroyObjectsByPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyObjectsByPredicate(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, const TFunctionRef<bool(const FGuid&, ESpawnOwnership, FMovieSceneSequenceIDRef)>& Predicate)"
  },
  {
    "label": "DestroyObjectsByPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyObjectsByPredicate(IMovieScenePlayer& Player, const TFunctionRef<bool(const FGuid&, ESpawnOwnership, FMovieSceneSequenceIDRef)>& Predicate)"
  },
  {
    "label": "ForgetExternallyOwnedSpawnedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetExternallyOwnedSpawnedObjects(FMovieSceneEvaluationState& State, IMovieScenePlayer& Player)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(IMovieScenePlayer& Player)"
  },
  {
    "label": "CleanUpSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpSequence(FMovieSceneSequenceIDRef TemplateID, IMovieScenePlayer& Player)"
  },
  {
    "label": "OnSequenceExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceExpired(FMovieSceneSequenceIDRef TemplateID, IMovieScenePlayer& Player)"
  },
  {
    "label": "CanSpawnObject()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR public : bool)",
    "insertText": "CanSpawnObject(UClass* InClass)"
  },
  {
    "label": "SaveDefaultSpawnableState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveDefaultSpawnableState(const FGuid& Guid, int32 BindingIndex, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "SetupDefaultsForSpawnable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupDefaultsForSpawnable(UObject* SpawnedObject, const FGuid& Guid, const TOptional<FTransformData>& TransformData, TSharedRef<ISequencer> Sequencer, USequencerSettings* Settings)"
  },
  {
    "label": "HandleConvertPossessableToSpawnable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleConvertPossessableToSpawnable(UObject* OldObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState, TOptional<FTransformData>& OutTransformData)"
  },
  {
    "label": "CanConvertToPossessable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanConvertToPossessable(const FGuid& Guid, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex=0)"
  },
  {
    "label": "SaveDefaultSpawnableState()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "SaveDefaultSpawnableState(const FGuid& Guid, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "SaveDefaultSpawnableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDefaultSpawnableState(Guid, 0, TemplateID, SharedPlaybackState)"
  },
  {
    "label": "SaveDefaultSpawnableState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveDefaultSpawnableState(FMovieSceneSpawnable& Spawnable, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "SaveDefaultSpawnableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDefaultSpawnableState(FMovieSceneSpawnable& Spawnable, FMovieSceneSequenceIDRef TemplateID, IMovieScenePlayer& Player)"
  },
  {
    "label": "HandleConvertPossessableToSpawnable()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "HandleConvertPossessableToSpawnable(UObject* OldObject, IMovieScenePlayer& Player, TOptional<FTransformData>& OutTransformData)"
  },
  {
    "label": "SpawnObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "SpawnObject(FMovieSceneSpawnable& Spawnable, FMovieSceneSequenceIDRef TemplateID, IMovieScenePlayer& Player)"
  },
  {
    "label": "CanConvertSpawnableToPossessable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertSpawnableToPossessable(FMovieSceneSpawnable& Spawnable)"
  },
  {
    "label": "PreDestroyObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreDestroyObject(UObject& Object, const FGuid& BindingId, int32 BindingIndex, FMovieSceneSequenceIDRef TemplateID)"
  },
  {
    "label": "DestroySpawnedObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroySpawnedObject(UObject& Object, UMovieSceneSpawnableBindingBase* CustomSpawnableBinding)"
  },
  {
    "label": "FSpawnedObject()",
    "kind": "Method",
    "detail": "Function (protected : struct FSpawnedObject {)",
    "insertText": "FSpawnedObject(const FGuid& InGuid, UObject& InObject, ESpawnOwnership InOwnership) : Guid(InGuid) , Object(&InObject) , Ownership(InOwnership)"
  },
  {
    "label": "FMovieSceneSpawnRegisterKey()",
    "kind": "Method",
    "detail": "Function (} FGuid Guid ; TWeakObjectPtr<UObject> Object ; ESpawnOwnership Ownership ; } ; struct FMovieSceneSpawnRegisterKey {)",
    "insertText": "FMovieSceneSpawnRegisterKey(FMovieSceneSequenceIDRef InTemplateID, const FGuid& InBindingId, int32 InBindingIndex) : BindingId(InBindingId) , TemplateID(InTemplateID) , BindingIndex(InBindingIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneSpawnRegisterKey& Other)"
  },
  {
    "label": "SpawnObject()",
    "kind": "Method",
    "detail": "Function (} FGuid BindingId ; FMovieSceneSequenceID TemplateID ; int32 BindingIndex = 0 ; } ; protected : TMap<FMovieSceneSpawnRegisterKey,FSpawnedObject> Register ; bool bCleaningUp = false ; } ; class FNullMovieSceneSpawnRegister : public FMovieSceneSpawnRegister { public : UObject*)",
    "insertText": "SpawnObject(FMovieSceneSpawnable&, FMovieSceneSequenceIDRef, TSharedRef<const FSharedPlaybackState>)"
  }
]