[
  {
    "label": "FPlatformOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLContext"
  },
  {
    "label": "FPlatformOpenGLDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLDevice"
  },
  {
    "label": "EOpenGLCurrentContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOpenGLCurrentContext"
  },
  {
    "label": "FOpenGLTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLTexture"
  },
  {
    "label": "FOpenGLTextureFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLTextureFormat"
  },
  {
    "label": "GL_CHECK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" OpenGLDrv . h \" # define SUBALLOCATED_CONSTANT_BUFFER 0 # define)",
    "insertText": "GL_CHECK(x)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"(%s:%d) GL_CHECK Failed '%s'! %d (%x)\\n\"), ANSI_TO_TCHAR(__FILE__), __LINE__, ANSI_TO_TCHAR( #x ), Err, Err)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(0) #if !defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER) && !(defined(_MSC_VER) && _MSC_VER >= 1900) #define LOG_AND_GET_GL_INT(IntEnum, Default, Dest)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (\\ Dest = Default ; \\ bool GDisableOpenGLDebugOutput ; \\ GDisableOpenGLDebugOutput = true ; \\)",
    "insertText": "glGetIntegerv(IntEnum, &Dest)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\ GDisableOpenGLDebugOutput = false ; \\ \\)",
    "insertText": "UE_LOG(LogRHI, Log, TEXT(\" \") ## TEXT(#IntEnum) ## TEXT(\": %d\"), Dest)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "while(0) #else #define LOG_AND_GET_GL_INT(IntEnum, Default, Dest)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\ GDisableOpenGLDebugOutput = false ; \\)",
    "insertText": "UE_LOG(LogRHI, Log, TEXT(\" \" #IntEnum \": %d\"), Dest)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "while(0) #endif #define GET_GL_INT(IntEnum, Default, Dest)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ GDisableOpenGLDebugOutput = false ; \\ } \\)",
    "insertText": "while(0)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (struct FPlatformOpenGLDevice ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Present time\"),STAT_OpenGLPresentTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Triangles drawn\"),STAT_OpenGLTriangles,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Lines drawn\"),STAT_OpenGLLines,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CreateTexture time\"),STAT_OpenGLCreateTextureTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"LockTexture time\"),STAT_OpenGLLockTextureTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UnlockTexture time\"),STAT_OpenGLUnlockTextureTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CopyTexture time\"),STAT_OpenGLCopyTextureTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CopyMipToMipAsync time\"),STAT_OpenGLCopyMipToMipAsyncTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UploadTextureMip time\"),STAT_OpenGLUploadTextureMipTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CreateBoundShaderState time\"),STAT_OpenGLCreateBoundShaderStateTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Constant buffer update time\"),STAT_OpenGLConstantBufferUpdateTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Uniform commit time\"),STAT_OpenGLUniformCommitTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader compile time\"),STAT_OpenGLShaderCompileTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader compile verify time\"),STAT_OpenGLShaderCompileVerifyTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader link time\"),STAT_OpenGLShaderLinkTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader link verify time\"),STAT_OpenGLShaderLinkVerifyTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader bind param time\"),STAT_OpenGLShaderBindParameterTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Uniform buffer pool cleanup time\"),STAT_OpenGLUniformBufferCleanupTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Uniform buffer pool memory\"),STAT_OpenGLFreeUniformBufferMemory,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Emulated Uniform buffer time\"), STAT_OpenGLEmulatedUniformBufferTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Uniform buffer pool num free\"),STAT_OpenGLNumFreeUniformBuffers,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Time for first draw of shader programs\"), STAT_OpenGLShaderFirstDrawTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Active Program binary memory (estimate driver use)\"), STAT_OpenGLProgramBinaryMemory, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"GL Program count\"), STAT_OpenGLProgramCount, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Program get from cache time\"),STAT_OpenGLUseCachedProgramTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Program create from binary time\"),STAT_OpenGLCreateProgramFromBinaryTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Program LRU cache eviction time\"), STAT_OpenGLShaderLRUEvictTime, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Program LRU cache miss time\"), STAT_OpenGLShaderLRUMissTime, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Program LRU count\"), STAT_OpenGLShaderLRUProgramCount, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Program LRU evicted count\"), STAT_OpenGLShaderLRUEvictedProgramCount, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Program LRU miss count\"), STAT_OpenGLShaderLRUMissCount, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Program LRU memory (evicted, heap)\"), STAT_OpenGLShaderLRUProgramMemory, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Program LRU mem mapped (evicted, filemapped)\"), STAT_OpenGLShaderLRUProgramMemoryMapped, STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# if OPENGLRHI_DETAILED_STATS)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"DrawPrimitive Time\"),STAT_OpenGLDrawPrimitiveTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"DrawPrimitive Driver Time\"),STAT_OpenGLDrawPrimitiveDriverTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"DrawPrimitiveUP Time\"),STAT_OpenGLDrawPrimitiveUPTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Shader bind time\"),STAT_OpenGLShaderBindTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Texture bind time\"),STAT_OpenGLTextureBindTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Uniform bind time\"),STAT_OpenGLUniformBindTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"VBO setup time\"),STAT_OpenGLVBOSetupTime,STATGROUP_OpenGLRHI,)"
  },
  {
    "label": "PlatformInitOpenGL()",
    "kind": "Method",
    "detail": "Function (# endif enum EOpenGLCurrentContext : int8 { CONTEXT_Other = - 2,CONTEXT_Invalid = - 1,CONTEXT_Shared = 0,CONTEXT_Rendering = 1,} ; struct FPlatformOpenGLContext ; struct FPlatformOpenGLDevice ; bool)",
    "insertText": "PlatformInitOpenGL()"
  },
  {
    "label": "PlatformOpenGLContextValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformOpenGLContextValid()"
  },
  {
    "label": "PlatformGlGetError()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PlatformGlGetError()"
  },
  {
    "label": "PlatformOpenGLCurrentContext()",
    "kind": "Method",
    "detail": "Function (EOpenGLCurrentContext)",
    "insertText": "PlatformOpenGLCurrentContext(FPlatformOpenGLDevice* Device)"
  },
  {
    "label": "PlatformContextIsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformContextIsCurrent(uint64 QueryContext)"
  },
  {
    "label": "PlatformCreateOpenGLDevice()",
    "kind": "Method",
    "detail": "Function (FPlatformOpenGLDevice*)",
    "insertText": "PlatformCreateOpenGLDevice()"
  },
  {
    "label": "PlatformCanEnableGPUCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformCanEnableGPUCapture()"
  },
  {
    "label": "PlatformDestroyOpenGLDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformDestroyOpenGLDevice(FPlatformOpenGLDevice* Device)"
  },
  {
    "label": "PlatformCreateOpenGLContext()",
    "kind": "Method",
    "detail": "Function (FPlatformOpenGLContext*)",
    "insertText": "PlatformCreateOpenGLContext(FPlatformOpenGLDevice* Device, void* InWindowHandle)"
  },
  {
    "label": "PlatformDestroyOpenGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformDestroyOpenGLContext(FPlatformOpenGLDevice* Device, FPlatformOpenGLContext* Context)"
  },
  {
    "label": "PlatformRenderingContextSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformRenderingContextSetup(FPlatformOpenGLDevice* Device)"
  },
  {
    "label": "PlatformFlushIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformFlushIfNeeded()"
  },
  {
    "label": "PlatformSharedContextSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformSharedContextSetup(FPlatformOpenGLDevice* Device)"
  },
  {
    "label": "PlatformNULLContextSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformNULLContextSetup()"
  },
  {
    "label": "PlatformCreateBuiltinBackBuffer()",
    "kind": "Method",
    "detail": "Function (class FOpenGLTexture*)",
    "insertText": "PlatformCreateBuiltinBackBuffer(FOpenGLDynamicRHI* OpenGLRHI, uint32 SizeX, uint32 SizeY)"
  },
  {
    "label": "PlatformBlitToViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformBlitToViewport(IRHICommandContext& RHICmdContext, FPlatformOpenGLDevice* Device, const FOpenGLViewport& Viewport, uint32 BackbufferSizeX, uint32 BackbufferSizeY, bool bPresent,bool bLockToVsync)"
  },
  {
    "label": "PlatformResizeGLContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformResizeGLContext(FPlatformOpenGLDevice* Device, FPlatformOpenGLContext* Context, uint32 SizeX, uint32 SizeY, bool bFullscreen, bool bWasFullscreen, GLenum BackBufferTarget, GLuint BackBufferResource)"
  },
  {
    "label": "PlatformGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformGetSupportedResolution(uint32 &Width, uint32 &Height)"
  },
  {
    "label": "PlatformGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "PlatformRestoreDesktopDisplayMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformRestoreDesktopDisplayMode()"
  },
  {
    "label": "PlatformGetWindow()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "PlatformGetWindow(FPlatformOpenGLContext* Context, void** AddParam)"
  },
  {
    "label": "FOpenGLTextureFormat()",
    "kind": "Method",
    "detail": "Function (struct FOpenGLTextureFormat { GLenum InternalFormat [ 2 ] = { GL_NONE,GL_NONE } ; GLenum Format = GL_NONE ; GLenum Type = GL_NONE ; bool bCompressed = false ; bool bBGRA = false ;)",
    "insertText": "FOpenGLTextureFormat()"
  },
  {
    "label": "FOpenGLTextureFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLTextureFormat(GLenum InInternalFormat, GLenum InInternalFormatSRGB, GLenum InFormat, GLenum InType, bool bInCompressed, bool bInBGRA)"
  },
  {
    "label": "FindMaxMipmapLevel()",
    "kind": "Method",
    "detail": "Function (InternalFormat [ 0 ] = InInternalFormat ; InternalFormat [ 1 ] = InInternalFormatSRGB ; Format = InFormat ; Type = InType ; bCompressed = bInCompressed ; bBGRA = bInBGRA ; } } ; FOpenGLTextureFormat GOpenGLTextureFormats [ PF_MAX ] ; uint32)",
    "insertText": "FindMaxMipmapLevel(uint32 Size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 MipCount = 1 ;)",
    "insertText": "while(Size >>= 1)"
  },
  {
    "label": "FindMaxMipmapLevel()",
    "kind": "Method",
    "detail": "Function (MipCount + + ; } return MipCount ; } uint32)",
    "insertText": "FindMaxMipmapLevel(uint32 Width, uint32 Height)"
  },
  {
    "label": "FindMaxMipmapLevel()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FindMaxMipmapLevel(uint32 Width, uint32 Height, uint32 Depth)"
  },
  {
    "label": "FindPrimitiveType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindPrimitiveType(uint32 InPrimitiveType, uint32 InNumPrimitives, GLenum &DrawMode, GLsizei &NumElements)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (DrawMode = GL_TRIANGLES ; NumElements = InNumPrimitives ;)",
    "insertText": "switch(InPrimitiveType)"
  },
  {
    "label": "FindUniformElementSize()",
    "kind": "Method",
    "detail": "Function (break ; } } uint32)",
    "insertText": "FindUniformElementSize(GLenum UniformType)"
  },
  {
    "label": "CalcDynamicBufferSize()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "CalcDynamicBufferSize(uint32 Size)"
  },
  {
    "label": "InitDefaultGLContextState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDefaultGLContextState(void)"
  }
]