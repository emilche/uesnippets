[
  {
    "label": "IEditorDataStorageUiProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageUiProvider"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "FTypedElementWidgetConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementWidgetConstructor"
  },
  {
    "label": "FSimpleWidgetConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleWidgetConstructor"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "IEditorDataStorageUiProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageUiProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTypedElementWidgetConstructor()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTypedElementWidgetConstructor(const UScriptStruct* InTypeInfo)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const UE::Editor::DataStorage::FMetaDataView& InArguments,\n\t\tTArray<TWeakObjectPtr<const UScriptStruct>> InMatchedColumnTypes, const UE::Editor::DataStorage::Queries::FConditions& InQueryConditions)"
  },
  {
    "label": "ConstructFinalWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ConstructFinalWidget(\n\t\tRowHandle Row, /** The row the widget will be stored in. */\n\t\tIEditorDataStorageProvider* DataStorage,\n\t\tIEditorDataStorageUiProvider* DataStorageUi,\n\t\tconst UE::Editor::DataStorage::FMetaDataView& Arguments)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "Construct(\n\t\tRowHandle Row, /** The row the widget will be stored in. */\n\t\tIEditorDataStorageProvider* DataStorage,\n\t\tIEditorDataStorageUiProvider* DataStorageUi,\n\t\tconst UE::Editor::DataStorage::FMetaDataView& Arguments)"
  },
  {
    "label": "CreateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateWidget(const UE::Editor::DataStorage::FMetaDataView& Arguments)"
  },
  {
    "label": "CreateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateWidget(\n\t\tIEditorDataStorageProvider* DataStorage,\n\t\tIEditorDataStorageUiProvider* DataStorageUi,\n\t\tUE::Editor::DataStorage::RowHandle TargetRow,\n\t\tUE::Editor::DataStorage::RowHandle WidgetRow, \n\t\tconst UE::Editor::DataStorage::FMetaDataView& Arguments)"
  },
  {
    "label": "SetColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetColumns(IEditorDataStorageProvider* DataStorage, RowHandle Row)"
  },
  {
    "label": "FinalizeWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinalizeWidget(\n\t\tIEditorDataStorageProvider* DataStorage,\n\t\tIEditorDataStorageUiProvider* DataStorageUi,\n\t\tRowHandle Row,\n\t\tconst TSharedPtr<SWidget>& Widget)"
  },
  {
    "label": "FSimpleWidgetConstructor()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FSimpleWidgetConstructor(const UScriptStruct* InTypeInfo)"
  },
  {
    "label": "RegisterWidgetFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterWidgetFactory(FName Purpose)"
  },
  {
    "label": "RegisterWidgetFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterWidgetFactory(FName Purpose, UE::Editor::DataStorage::Queries::FConditions Columns)"
  }
]