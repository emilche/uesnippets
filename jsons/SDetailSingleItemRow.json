[
  {
    "label": "IDetailKeyframeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailKeyframeHandler"
  },
  {
    "label": "FDetailLayoutCustomization",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailLayoutCustomization"
  },
  {
    "label": "SDetailSingleItemRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDetailSingleItemRow"
  },
  {
    "label": "SArrayRowHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SArrayRowHandle"
  },
  {
    "label": "FArrayRowDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayRowDragDropOp"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DetailTreeNode . h \" # include \" PropertyCustomizationHelpers . h \" # include \" SDetailTableRowBase . h \" # include \" SDetailsViewBase . h \" # include \" ScopedTransaction . h \" # include \" DragAndDrop / DecoratedDragDropOp . h \" # include \" Framework / Commands / Commands . h \" # include \" Input / Reply . h \" # include \" PropertyEditorClipboardPrivate . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableViewBase . h \" class IDetailKeyframeHandler ; struct FDetailLayoutCustomization ; class SDetailSingleItemRow ; class SArrayRowHandle : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SArrayRowHandle)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ARGUMENT(TSharedPtr<SDetailSingleItemRow>, ParentRow) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (} ; FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SDetailSingleItemRow> ParentRow ; } ; class SDetailSingleItemRow : public SDetailTableRowBase { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDetailSingleItemRow ) : _ColumnSizeData()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FDetailColumnSizeData, ColumnSizeData ) SLATE_ARGUMENT( bool, AllowFavoriteSystem) SLATE_END_ARGS() void Construct( const FArguments& InArgs, FDetailLayoutCustomization* InCustomization, bool bHasMultipleColumns, TSharedRef<FDetailTreeNode> InOwnerTreeNode, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "PopulateContextMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PopulateContextMenu(UToolMenu* ToolMenu)"
  },
  {
    "label": "GetPropertyHandles()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<IPropertyHandle>>)",
    "insertText": "GetPropertyHandles(const bool bRecursive = false)"
  },
  {
    "label": "OnCopyProperty()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnCopyProperty()"
  },
  {
    "label": "OnCopyPropertyDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyPropertyDisplayName()"
  },
  {
    "label": "CanCopyPropertyDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyPropertyDisplayName()"
  },
  {
    "label": "OnCopyPropertyInternalName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyPropertyInternalName()"
  },
  {
    "label": "CanCopyPropertyInternalName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyPropertyInternalName()"
  },
  {
    "label": "OnPasteProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteProperty()"
  },
  {
    "label": "CanPasteProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteProperty()"
  },
  {
    "label": "OnCopyGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyGroup()"
  },
  {
    "label": "CanCopyGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyGroup()"
  },
  {
    "label": "OnPasteGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteGroup()"
  },
  {
    "label": "CanPasteGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteGroup()"
  },
  {
    "label": "GetPropertyInternalName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyInternalName()"
  },
  {
    "label": "GetPropertyDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyDisplayName()"
  },
  {
    "label": "GetNameWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetNameWidget(TSharedRef<SWidget> NameWidget, const TSharedPtr<FPropertyNode>& Node)"
  },
  {
    "label": "CanPasteFromText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteFromText(const FString& InTag, const FString& InText)"
  },
  {
    "label": "OnPasteFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteFromText(const FString& InTag, const FString& InText, const TOptional<FGuid>& InOperationId)"
  },
  {
    "label": "PasteFromText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteFromText(const FString& InTag, const FString& InText)"
  },
  {
    "label": "GetOuterBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetOuterBackgroundColor()"
  },
  {
    "label": "GetInnerBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetInnerBackgroundColor()"
  },
  {
    "label": "CreateGlobalExtensionWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGlobalExtensionWidgets(TArray<FPropertyRowExtensionButton>& ExtensionButtons)"
  },
  {
    "label": "PopulateExtensionWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateExtensionWidget()"
  },
  {
    "label": "UpdateResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResetToDefault()"
  },
  {
    "label": "OnResetToDefaultClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetToDefaultClicked()"
  },
  {
    "label": "IsResetToDefaultVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResetToDefaultVisible()"
  },
  {
    "label": "IsHighlighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHighlighted()"
  },
  {
    "label": "OnFavoriteMenuToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFavoriteMenuToggle()"
  },
  {
    "label": "CanFavorite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFavorite()"
  },
  {
    "label": "IsFavorite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFavorite()"
  },
  {
    "label": "GetRowNameText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRowNameText()"
  },
  {
    "label": "CopyRowNameText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRowNameText()"
  },
  {
    "label": "OnToggleAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAllowList()"
  },
  {
    "label": "IsAllowListChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowListChecked()"
  },
  {
    "label": "OnToggleDenyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleDenyList()"
  },
  {
    "label": "IsDenyListChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDenyListChecked()"
  },
  {
    "label": "OnArrayOrCustomDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrayOrCustomDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnArrayAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnArrayAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FDetailTreeNode> TargetItem)"
  },
  {
    "label": "OnArrayHeaderAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnArrayHeaderAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FDetailTreeNode> TargetItem)"
  },
  {
    "label": "OnArrayCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "OnArrayCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr< FDetailTreeNode > Type)"
  },
  {
    "label": "OnCustomAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCustomAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FDetailTreeNode> TargetItem)"
  },
  {
    "label": "OnCustomCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "OnCustomCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FDetailTreeNode> Type)"
  },
  {
    "label": "CheckValidDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValidDrop(const TSharedPtr<SDetailSingleItemRow> RowPtr, EItemDropZone DropZone)"
  },
  {
    "label": "GetPropertyNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyNode>)",
    "insertText": "GetPropertyNode()"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle>)",
    "insertText": "GetPropertyHandle()"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (private : FDetailLayoutCustomization* Customization ; FDetailWidgetRow WidgetRow ; bool bAllowFavoriteSystem ; bool bCachedResetToDefaultVisible ; TSharedPtr<FPropertyNode> SwappablePropertyNode ; TSharedPtr<SButton> ExpanderArrow ; TWeakPtr<FDragDropOperation> DragOperation ; FUIAction CopyAction ; FUIAction PasteAction ; UE::PropertyEditor::Internal::FClipboardData PreviousClipboardData ; TSharedPtr<FOnPasteFromText> OnPasteFromTextDelegate ; FCurveSequence PulseAnimation ; } ; class FArrayRowDragDropOp : public FDecoratedDragDropOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FArrayRowDragDropOp, FDecoratedDragDropOp) FArrayRowDragDropOp(TSharedPtr<SDetailSingleItemRow> InRow)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "SetValidTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidTarget(bool IsValidTarget)"
  }
]