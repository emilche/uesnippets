[
  {
    "label": "FSimulationProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulationProperties"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FAttributeAndGroupId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeAndGroupId"
  },
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "FConstructionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructionParameters"
  },
  {
    "label": "FProcessingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessingParameters"
  },
  {
    "label": "FManagedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TManagedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TManagedType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroupInfo"
  },
  {
    "label": "FManagedArrayCollectionValueTypeWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollectionValueTypeWrapper"
  },
  {
    "label": "FValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueType"
  },
  {
    "label": "FManagedArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedArrayInterface"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AttributeFoo)",
    "insertText": "for(int32 i = 0; i < Foo.Num()"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FManagedArrayCollection()"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FManagedArrayCollection(const FManagedArrayCollection& In)"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FManagedArrayCollection(FManagedArrayCollection&&)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FName(\"FManagedArrayCollection\")"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "T()"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroup(FName Group)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddElements(int32 NumberElements, FName Group)"
  },
  {
    "label": "InsertElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InsertElements(int32 NumberElements, int32 Position, FName Group)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(const FName& Group, int32 NumberElements, int32 Position)"
  },
  {
    "label": "RemoveAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttribute(FName Name, FName Group)"
  },
  {
    "label": "RemoveGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGroup(FName Group)"
  },
  {
    "label": "SetDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDependency(FName Name, FName Group, FName DependencyGroup, bool bAllowCircularDependency = false)"
  },
  {
    "label": "RemoveDependencyFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDependencyFor(FName Group)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAttribute(const FManagedArrayCollection& InCollection, FName Name, FName Group)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAttribute(const FManagedArrayCollection& InCollection, FName SrcName, FName DestName, FName Group)"
  },
  {
    "label": "CopyMatchingAttributesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMatchingAttributesFrom(const FManagedArrayCollection& InCollection, const TMap<FName, TSet<FName>>* SkipList=nullptr)"
  },
  {
    "label": "CopyMatchingAttributesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMatchingAttributesFrom(const FManagedArrayCollection& FromCollection, const TArrayView<const FAttributeAndGroupId> SkipList)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int32 Size, FName Group)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 Size, FName Group)"
  },
  {
    "label": "EmptyGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyGroup(FName Group)"
  },
  {
    "label": "ReorderElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderElements(FName Group, const TArray<int32>& NewOrder)"
  },
  {
    "label": "SwapElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapElements(int32 Index1, int32 Index2, FName Group)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected(FName StartingNode, FName TargetNode)"
  },
  {
    "label": "InsertElementsNoReorder()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "InsertElementsNoReorder(int32 NumberElements, int32 Position, FName Group)"
  },
  {
    "label": "FKeyType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FKeyType(Name, Group)"
  },
  {
    "label": "MakeUniqueForWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUniqueForWrite()"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FValueType(ExternalArrayPtr, InitialSize, InGroupIndexDependency, bInPersistent)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FValueType()"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FValueType(const FValueType& Other)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "FValueType(FValueType&& Other)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 ReservedSize)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int32 NewSize)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FValueType& Other)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(FValueType& Other)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(FValueType& Other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const FValueType& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "RemoveGroupIndexDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGroupIndexDependency(FName Group)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaults(FName Group, uint32 StartSize, uint32 NumElements)"
  },
  {
    "label": "SyncGroupSizeFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncGroupSizeFrom(const FManagedArrayCollection& InCollection, FName Group)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FName(#TYPE_NAME)"
  }
]