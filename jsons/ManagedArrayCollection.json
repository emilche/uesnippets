[
  {
    "label": "FSimulationProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulationProperties"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FAttributeAndGroupId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeAndGroupId"
  },
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "FConstructionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstructionParameters"
  },
  {
    "label": "FProcessingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessingParameters"
  },
  {
    "label": "FManagedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TManagedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TManagedType"
  },
  {
    "label": "FGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroupInfo"
  },
  {
    "label": "FManagedArrayCollectionValueTypeWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollectionValueTypeWrapper"
  },
  {
    "label": "FValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueType"
  },
  {
    "label": "FManagedArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedArrayInterface"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArray . h \" # include \" GeometryCollection / ManagedArrayTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" GeometryCollection / GeometryCollectionSection . h \" # include \" ManagedArrayCollection . generated . h \" class FSimulationProperties ; namespace Chaos { class FChaosArchive ; } struct FAttributeAndGroupId { FName AttributeName ; FName GroupName ; bool)",
    "insertText": "operator(const FAttributeAndGroupId& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FManagedArrayCollection()"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FManagedArrayCollection(const FManagedArrayCollection& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FManagedArrayCollection&)",
    "insertText": "operator(const FManagedArrayCollection& In)"
  },
  {
    "label": "FManagedArrayCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FManagedArrayCollection(FManagedArrayCollection&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FManagedArrayCollection&)",
    "insertText": "operator(FManagedArrayCollection&&)"
  },
  {
    "label": "FConstructionParameters()",
    "kind": "Method",
    "detail": "Function (int8 Invalid ; typedef EManagedArrayType EArrayType ; struct FConstructionParameters {)",
    "insertText": "FConstructionParameters(FName GroupIndexDependencyIn = NAME_None , bool SavedIn = true, bool bInAllowCircularDependency = false) : GroupIndexDependency(GroupIndexDependencyIn) , Saved(SavedIn) , bAllowCircularDependency(bInAllowCircularDependency)"
  },
  {
    "label": "FProcessingParameters()",
    "kind": "Method",
    "detail": "Function (} FName GroupIndexDependency ; bool Saved ; bool bAllowCircularDependency ; } ; struct FProcessingParameters {)",
    "insertText": "FProcessingParameters() : bDoValidation(true), bReindexDependentAttibutes(true)"
  },
  {
    "label": "FManagedType()",
    "kind": "Method",
    "detail": "Function (} bool bDoValidation ; bool bReindexDependentAttibutes ; } ; struct FManagedType {)",
    "insertText": "FManagedType(EManagedArrayType InType, FName InName, FName InGroup) : Type(InType), Name(InName), Group(InGroup)"
  },
  {
    "label": "TManagedType()",
    "kind": "Method",
    "detail": "Function (} EManagedArrayType Type = EManagedArrayType::FNoneType ; FName Name = \" \" ; FName Group = \" \" ; } ; template<class T> struct TManagedType : FManagedType {)",
    "insertText": "TManagedType(FName InName, FName InGroup) : FManagedType(ManagedArrayType<T>(), InName, InGroup)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} } ; FName)",
    "insertText": "StaticType()"
  },
  {
    "label": "IsAType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAType(FName InTypeName)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "Cast()"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> TManagedArray<T>&)",
    "insertText": "AddAttribute(FName Name, FName Group, FConstructionParameters Parameters = FConstructionParameters())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AddNewAttributeImpl<)",
    "insertText": "T(Name, Group, Parameters)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return ModifyAttribute<)",
    "insertText": "T(Name, Group)"
  },
  {
    "label": "FindOrAddAttributeTyped()",
    "kind": "Method",
    "detail": "Function (} template<T> TManagedArray<T>*)",
    "insertText": "FindOrAddAttributeTyped(FName Name, FName Group, FConstructionParameters Parameters = FConstructionParameters())"
  },
  {
    "label": "NewCopy()",
    "kind": "Method",
    "detail": "Function (} template<class T = FManagedArrayCollection> T*)",
    "insertText": "NewCopy()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Collection = new)",
    "insertText": "T()"
  },
  {
    "label": "EmptyGroup()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "EmptyGroup(GroupName)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CopyTo(Collection)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FName& AttributeName = Entry . Key .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TTuple<FName,FName> GroupAndAttribute { AttributeName,GroupName } ;)",
    "insertText": "if(AttributesToSkip.Contains(GroupAndAttribute))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "if(!GroupsToSkip.Contains(GroupName))"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "AddGroup(GroupName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumElements(GroupName) != Collection->NumElements(GroupName))"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "AddElements(NumElements(GroupName), GroupName)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (} Collection ->)",
    "insertText": "CopyAttribute(*this, AttributeName, GroupName)"
  },
  {
    "label": "AddExternalAttribute()",
    "kind": "Method",
    "detail": "Function (} } } } template<T> void)",
    "insertText": "AddExternalAttribute(FName Name, FName Group, TManagedArray<T>& ValueIn, FConstructionParameters Parameters = FConstructionParameters())"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroup(Group)"
  },
  {
    "label": "NumElements()",
    "kind": "Method",
    "detail": "Function (} const int32 InitialSize =)",
    "insertText": "NumElements(Group)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FName GroupIndexDependency ;)",
    "insertText": "if(ensure(Parameters.bAllowCircularDependency || !IsConnected(Parameters.GroupIndexDependency, Group)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (GroupIndexDependency = Parameters . GroupIndexDependency ; } else { GroupIndexDependency = NAME_None ; } FValueType NewAttribute = FValueType::MakeExternal<)",
    "insertText": "T(&ValueIn, NumElements(Group), GroupIndexDependency, Parameters.Saved)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "Add({ Name, Group }, MoveTemp(NewAttribute))"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddGroup(FName Group)"
  },
  {
    "label": "NumAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumAttributes(FName Group)"
  },
  {
    "label": "AttributeNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "AttributeNames(FName Group)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddElements(int32 NumberElements, FName Group)"
  },
  {
    "label": "InsertElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InsertElements(int32 NumberElements, int32 Position, FName Group)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "FindAttribute()",
    "kind": "Method",
    "detail": "Function (template<T> TManagedArray<T>*)",
    "insertText": "FindAttribute(FName Name, FName Group)"
  },
  {
    "label": "MakeMapKey()",
    "kind": "Method",
    "detail": "Function (const FKeyType Key =)",
    "insertText": "MakeMapKey(Name, Group)"
  },
  {
    "label": "FindAttributeTyped()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } ; template<T> TManagedArray<T>*)",
    "insertText": "FindAttributeTyped(FName Name, FName Group)"
  },
  {
    "label": "ModifyAttribute()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } ; template<T> TManagedArray<T>&)",
    "insertText": "ModifyAttribute(FName Name, FName Group)"
  },
  {
    "label": "ModifyAttributeTyped()",
    "kind": "Method",
    "detail": "Function (} template<T> TManagedArray<T>*)",
    "insertText": "ModifyAttributeTyped(FName Name, FName Group)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<T> const TManagedArray<T>&)",
    "insertText": "GetAttribute(FName Name, FName Group)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "MakeDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDirty()"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveElements(const FName & Group, const TArray<int32> & SortedDeletionList, FProcessingParameters Params = FProcessingParameters())"
  },
  {
    "label": "MergeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeElements(const FName& Group, const TArray<int32>& SortedMergeList, const TArray<int32>& MergeRemapIndex, FProcessingParameters Params = FProcessingParameters())"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(const FName& Group, int32 NumberElements, int32 Position)"
  },
  {
    "label": "RemoveAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttribute(FName Name, FName Group)"
  },
  {
    "label": "RemoveGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGroup(FName Group)"
  },
  {
    "label": "GroupNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GroupNames()"
  },
  {
    "label": "HasAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttribute(FName Name, FName Group)"
  },
  {
    "label": "HasAttributes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttributes(const TArray<FManagedType>& Types)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (} EArrayType)",
    "insertText": "GetAttributeType(FName Name, FName Group)"
  },
  {
    "label": "IsAttributeDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeDirty(FName Name, FName Group)"
  },
  {
    "label": "IsAttributePersistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributePersistent(FName Name, FName Group)"
  },
  {
    "label": "SetDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDependency(FName Name, FName Group, FName DependencyGroup, bool bAllowCircularDependency = false)"
  },
  {
    "label": "GetDependency()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDependency(FName Name, FName Group)"
  },
  {
    "label": "RemoveDependencyFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDependencyFor(FName Group)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAttribute(const FManagedArrayCollection& InCollection, FName Name, FName Group)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAttribute(const FManagedArrayCollection& InCollection, FName SrcName, FName DestName, FName Group)"
  },
  {
    "label": "CopyMatchingAttributesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMatchingAttributesFrom(const FManagedArrayCollection& InCollection, const TMap<FName, TSet<FName>>* SkipList=nullptr)"
  },
  {
    "label": "CopyMatchingAttributesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMatchingAttributesFrom(const FManagedArrayCollection& FromCollection, const TArrayView<const FAttributeAndGroupId> SkipList)"
  },
  {
    "label": "NumElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumElements(FName Group)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int32 Size, FName Group)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 Size, FName Group)"
  },
  {
    "label": "EmptyGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyGroup(FName Group)"
  },
  {
    "label": "ReorderElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderElements(FName Group, const TArray<int32>& NewOrder)"
  },
  {
    "label": "SwapElements()",
    "kind": "Method",
    "detail": "Function (# if 0 void)",
    "insertText": "SwapElements(int32 Index1, int32 Index2, FName Group)"
  },
  {
    "label": "MakeClean()",
    "kind": "Method",
    "detail": "Function (bDirty = true ; } void)",
    "insertText": "MakeClean()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bDirty = false ; } bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected(FName StartingNode, FName TargetNode)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetElementSizeInfoForGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementSizeInfoForGroups(TArray<TPair<FName, SIZE_T>>& OutSizeInfo)"
  },
  {
    "label": "AddNewAttributeImpl()",
    "kind": "Method",
    "detail": "Function (private : template<T> void)",
    "insertText": "AddNewAttributeImpl(FName Name, FName Group, const FConstructionParameters& Parameters)"
  },
  {
    "label": "ArrayPtr()",
    "kind": "Method",
    "detail": "Function (GroupIndexDependency = Parameters . GroupIndexDependency ; } else { GroupIndexDependency = EmptyName ; } TUniquePtr<TManagedArray<T>>)",
    "insertText": "ArrayPtr(new TManagedArray<T>())"
  },
  {
    "label": "MakeManaged()",
    "kind": "Method",
    "detail": "Function (FValueType NewAttribute =)",
    "insertText": "MakeManaged(MoveTemp(ArrayPtr), InitialSize, GroupIndexDependency, Parameters.Saved)"
  },
  {
    "label": "InsertElementsNoReorder()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "InsertElementsNoReorder(int32 NumberElements, int32 Position, FName Group)"
  },
  {
    "label": "MakeMapKey()",
    "kind": "Method",
    "detail": "Function (typedef TTuple<FName,FName> FKeyType ; struct FGroupInfo { int32 Size ; } ; FKeyType)",
    "insertText": "MakeMapKey(FName Name, FName Group)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (} struct FManagedArrayCollectionValueTypeWrapper ; struct FValueType { private : EArrayType ArrayType ; FName GroupIndexDependency ; bool bPersistent ; bool bExternalValue ; TSharedPtr<FManagedArrayBase,ESPMode::NotThreadSafe> SharedManagedArray ; FManagedArrayBase* ManagedArray = nullptr ; ; private : template<T>)",
    "insertText": "FValueType(TUniquePtr<TManagedArray<T>>&& ArrayPtr, int32 InitialSize, FName InGroupIndexDependency, bool bInPersistent) : ArrayType(ManagedArrayType<T>()) , GroupIndexDependency(InGroupIndexDependency) , bPersistent(bInPersistent) , bExternalValue(false) , SharedManagedArray(ArrayPtr.Release()) , ManagedArray(SharedManagedArray.Get())"
  },
  {
    "label": "MakeUniqueForWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUniqueForWrite()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ManagedArray ->)",
    "insertText": "Reserve(InitialSize)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (ManagedArray ->)",
    "insertText": "Resize(InitialSize)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (} ; template<T>)",
    "insertText": "FValueType(TManagedArray<T>* ExternalArrayPtr, int32 InitialSize, FName InGroupIndexDependency, bool bInPersistent) : ArrayType(ManagedArrayType<T>()) , GroupIndexDependency(InGroupIndexDependency) , bPersistent(bInPersistent) , bExternalValue(true) , SharedManagedArray(nullptr) , ManagedArray(ExternalArrayPtr)"
  },
  {
    "label": "MakeManaged()",
    "kind": "Method",
    "detail": "Function (public : template<T> FValueType)",
    "insertText": "MakeManaged(TUniquePtr<TManagedArray<T>>&& ArrayPtr, int32 InitialSize, FName InGroupIndexDependency, bool bInPersistent)"
  },
  {
    "label": "MakeExternal()",
    "kind": "Method",
    "detail": "Function (} template<T> FValueType)",
    "insertText": "MakeExternal(TManagedArray<T>* ExternalArrayPtr, int32 InitialSize, FName InGroupIndexDependency, bool bInPersistent)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValueType()"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueType(const FValueType& Other)"
  },
  {
    "label": "FValueType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueType(FValueType&& Other)"
  },
  {
    "label": "GetArrayType()",
    "kind": "Method",
    "detail": "Function (EArrayType)",
    "insertText": "GetArrayType()"
  },
  {
    "label": "SetGroupIndexDependency()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroupIndexDependency(FName NewGroupDependency)"
  },
  {
    "label": "IsSameType()",
    "kind": "Method",
    "detail": "Function (GroupIndexDependency = NewGroupDependency ; } template<T> bool)",
    "insertText": "IsSameType()"
  },
  {
    "label": "GetTypedPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> const TManagedArray<T>*)",
    "insertText": "GetTypedPtr()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<T>* TypedManagedArray = static_cast<const TManagedArray<)",
    "insertText": "T(ManagedArray)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (TypedManagedArray ->)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} FManagedArrayBase&)",
    "insertText": "Modify()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 ReservedSize)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int32 NewSize)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FValueType& Other)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(FValueType& Other)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(FValueType& Other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const FValueType& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "RemoveGroupIndexDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGroupIndexDependency(FName Group)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FValueType&)",
    "insertText": "operator(const FValueType& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FValueType&)",
    "insertText": "operator(FValueType&& Other)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (} ; TMap<FKeyType,FValueType> Map ; TMap<FName,FGroupInfo> GroupInfo ; bool bDirty ; protected : void)",
    "insertText": "SetDefaults(FName Group, uint32 StartSize, uint32 NumElements)"
  },
  {
    "label": "MatchOptionalDefaultAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchOptionalDefaultAttributes(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "SyncGroupSizeFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SyncGroupSizeFrom(const FManagedArrayCollection& InCollection, FName Group)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 Version ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FGroupInfo& GroupInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FValueType& ValueIn)"
  },
  {
    "label": "FManagedArrayInterface()",
    "kind": "Method",
    "detail": "Function (} ; class FManagedArrayInterface { public :)",
    "insertText": "FManagedArrayInterface() : ManagedCollection(nullptr)"
  },
  {
    "label": "FManagedArrayInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FManagedArrayInterface(FManagedArrayCollection* InManagedArray) : ManagedCollection(InManagedArray)"
  },
  {
    "label": "InitializeInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeInterface()"
  },
  {
    "label": "CleanInterfaceForCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanInterfaceForCook()"
  },
  {
    "label": "RemoveInterfaceAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInterfaceAttributes()"
  },
  {
    "label": "MANAGED_ARRAY_COLLECTION_INTERNAL()",
    "kind": "Method",
    "detail": "Function (protected : FManagedArrayCollection* ManagedCollection ; } ; # define)",
    "insertText": "MANAGED_ARRAY_COLLECTION_INTERNAL(TYPE_NAME) \\ static FName StaticType()"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (\\ return InTypeName .)",
    "insertText": "IsEqual(TYPE_NAME::StaticType()) \\ || Super::IsAType(InTypeName)"
  }
]