[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ABSL_DECLARE_FLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_INTERNAL_PARSE_H_ # define ABSL_FLAGS_INTERNAL_PARSE_H_ # include<string> # include<vector> # include \" absl / base / config . h \" # include \" absl / flags / declare . h \" # include \" absl / strings / string_view . h \")",
    "insertText": "ABSL_DECLARE_FLAG(std::vector<std::string>, flagfile)"
  },
  {
    "label": "ABSL_DECLARE_FLAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DECLARE_FLAG(std::vector<std::string>, fromenv)"
  },
  {
    "label": "ABSL_DECLARE_FLAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DECLARE_FLAG(std::vector<std::string>, tryfromenv)"
  },
  {
    "label": "ABSL_DECLARE_FLAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DECLARE_FLAG(std::vector<std::string>, undefok)"
  },
  {
    "label": "ParseCommandLineImpl()",
    "kind": "Method",
    "detail": "Function (namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { enum class ArgvListAction { kRemoveParsedArgs,kKeepParsedArgs } ; enum class UsageFlagsAction { kHandleUsage,kIgnoreUsage } ; enum class OnUndefinedFlag { kIgnoreUndefined,kReportUndefined,kAbortIfUndefined } ; std::vector<char*>)",
    "insertText": "ParseCommandLineImpl(int argc, char* argv[], ArgvListAction arg_list_act, UsageFlagsAction usage_flag_act, OnUndefinedFlag on_undef_flag)"
  },
  {
    "label": "WasPresentOnCommandLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasPresentOnCommandLine(absl::string_view flag_name)"
  }
]