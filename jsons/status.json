[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Status",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Status"
  },
  {
    "label": "StatusCodeToString()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STATUS_STATUS_H_ # define ABSL_STATUS_STATUS_H_ # include<ostream> # include<string> # include<utility> # include \" absl / functional / function_ref . h \" # include \" absl / status / internal / status_internal . h \" # include \" absl / strings / cord . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class StatusCode : int { kOk = 0,kCancelled = 1,kUnknown = 2,kInvalidArgument = 3,kDeadlineExceeded = 4,kNotFound = 5,kAlreadyExists = 6,kPermissionDenied = 7,kResourceExhausted = 8,kFailedPrecondition = 9,kAborted = 1 0,kOutOfRange = 1 1,kUnimplemented = 1 2,kInternal = 1 3,kUnavailable = 1 4,kDataLoss = 1 5,kUnauthenticated = 1 6,kDoNotUseReservedForFutureExpansionUseDefaultInSwitchInstead_ = 2 0 } ; std::string)",
    "insertText": "StatusCodeToString(StatusCode code)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, StatusCode code)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum class StatusToStringMode : int { kWithNoExtraData = 0,kWithPayload = 1<<0,kWithEverything = ~ kWithNoExtraData,kDefault = kWithPayload,} ; StatusToStringMode)",
    "insertText": "operator(StatusToStringMode lhs, StatusToStringMode rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StatusToStringMode)",
    "insertText": "operator(StatusToStringMode arg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StatusToStringMode&)",
    "insertText": "operator(StatusToStringMode& lhs, StatusToStringMode rhs)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (lhs = lhs ^ rhs ; return lhs ; } class Status final { public :)",
    "insertText": "Status()"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Status(absl::StatusCode code, absl::string_view msg)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Status(const Status&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Status&)",
    "insertText": "operator(const Status& x)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Status(Status&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Status&)",
    "insertText": "operator(Status&&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const Status& new_status)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(Status&& new_status)"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "ok()"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (absl::StatusCode)",
    "insertText": "code()"
  },
  {
    "label": "raw_code()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "raw_code()"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "message()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Status&, const Status&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(StatusToStringMode mode = StatusToStringMode::kDefault)"
  },
  {
    "label": "IgnoreError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IgnoreError()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Status& a, Status& b)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (absl::optional<absl::Cord>)",
    "insertText": "GetPayload(absl::string_view type_url)"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayload(absl::string_view type_url, absl::Cord payload)"
  },
  {
    "label": "ErasePayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ErasePayload(absl::string_view type_url)"
  },
  {
    "label": "ForEachPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachPayload(absl::FunctionRef<void(absl::string_view, const absl::Cord&)> visitor)"
  },
  {
    "label": "CancelledError()",
    "kind": "Method",
    "detail": "Function (private : Status)",
    "insertText": "CancelledError()"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Status(absl::StatusCode code)"
  },
  {
    "label": "UnrefNonInlined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnrefNonInlined(uintptr_t rep)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ref(uintptr_t rep)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(uintptr_t rep)"
  },
  {
    "label": "PrepareToModify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToModify()"
  },
  {
    "label": "GetPayloads()",
    "kind": "Method",
    "detail": "Function (const status_internal::Payloads*)",
    "insertText": "GetPayloads()"
  },
  {
    "label": "EqualsSlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsSlow(const absl::Status& a, const absl::Status& b)"
  },
  {
    "label": "EmptyString()",
    "kind": "Method",
    "detail": "Function (const char kMovedFromString [ ] = \" Status accessed after move . \" ; const std::string*)",
    "insertText": "EmptyString()"
  },
  {
    "label": "MovedFromString()",
    "kind": "Method",
    "detail": "Function (const std::string*)",
    "insertText": "MovedFromString()"
  },
  {
    "label": "IsInlined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInlined(uintptr_t rep)"
  },
  {
    "label": "IsMovedFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovedFrom(uintptr_t rep)"
  },
  {
    "label": "MovedFromRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "MovedFromRep()"
  },
  {
    "label": "CodeToInlinedRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "CodeToInlinedRep(absl::StatusCode code)"
  },
  {
    "label": "InlinedRepToCode()",
    "kind": "Method",
    "detail": "Function (absl::StatusCode)",
    "insertText": "InlinedRepToCode(uintptr_t rep)"
  },
  {
    "label": "PointerToRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "PointerToRep(status_internal::StatusRep* r)"
  },
  {
    "label": "RepToPointer()",
    "kind": "Method",
    "detail": "Function (status_internal::StatusRep*)",
    "insertText": "RepToPointer(uintptr_t r)"
  },
  {
    "label": "ToStringSlow()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToStringSlow(StatusToStringMode mode)"
  },
  {
    "label": "OkStatus()",
    "kind": "Method",
    "detail": "Function (uintptr_t rep_ ; } ; Status)",
    "insertText": "OkStatus()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const Status& x)"
  },
  {
    "label": "IsAborted()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsAborted(const Status& status)"
  },
  {
    "label": "IsAlreadyExists()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsAlreadyExists(const Status& status)"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsCancelled(const Status& status)"
  },
  {
    "label": "IsDataLoss()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsDataLoss(const Status& status)"
  },
  {
    "label": "IsDeadlineExceeded()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsDeadlineExceeded(const Status& status)"
  },
  {
    "label": "IsFailedPrecondition()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsFailedPrecondition(const Status& status)"
  },
  {
    "label": "IsInternal()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsInternal(const Status& status)"
  },
  {
    "label": "IsInvalidArgument()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsInvalidArgument(const Status& status)"
  },
  {
    "label": "IsNotFound()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsNotFound(const Status& status)"
  },
  {
    "label": "IsOutOfRange()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsOutOfRange(const Status& status)"
  },
  {
    "label": "IsPermissionDenied()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsPermissionDenied(const Status& status)"
  },
  {
    "label": "IsResourceExhausted()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsResourceExhausted(const Status& status)"
  },
  {
    "label": "IsUnauthenticated()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsUnauthenticated(const Status& status)"
  },
  {
    "label": "IsUnavailable()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsUnavailable(const Status& status)"
  },
  {
    "label": "IsUnimplemented()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsUnimplemented(const Status& status)"
  },
  {
    "label": "IsUnknown()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "IsUnknown(const Status& status)"
  },
  {
    "label": "AbortedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "AbortedError(absl::string_view message)"
  },
  {
    "label": "AlreadyExistsError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "AlreadyExistsError(absl::string_view message)"
  },
  {
    "label": "CancelledError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "CancelledError(absl::string_view message)"
  },
  {
    "label": "DataLossError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "DataLossError(absl::string_view message)"
  },
  {
    "label": "DeadlineExceededError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "DeadlineExceededError(absl::string_view message)"
  },
  {
    "label": "FailedPreconditionError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "FailedPreconditionError(absl::string_view message)"
  },
  {
    "label": "InternalError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "InternalError(absl::string_view message)"
  },
  {
    "label": "InvalidArgumentError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "InvalidArgumentError(absl::string_view message)"
  },
  {
    "label": "NotFoundError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "NotFoundError(absl::string_view message)"
  },
  {
    "label": "OutOfRangeError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "OutOfRangeError(absl::string_view message)"
  },
  {
    "label": "PermissionDeniedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "PermissionDeniedError(absl::string_view message)"
  },
  {
    "label": "ResourceExhaustedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "ResourceExhaustedError(absl::string_view message)"
  },
  {
    "label": "UnauthenticatedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnauthenticatedError(absl::string_view message)"
  },
  {
    "label": "UnavailableError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnavailableError(absl::string_view message)"
  },
  {
    "label": "UnimplementedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnimplementedError(absl::string_view message)"
  },
  {
    "label": "UnknownError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnknownError(absl::string_view message)"
  },
  {
    "label": "ErrnoToStatusCode()",
    "kind": "Method",
    "detail": "Function (absl::StatusCode)",
    "insertText": "ErrnoToStatusCode(int error_number)"
  },
  {
    "label": "ErrnoToStatus()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "ErrnoToStatus(int error_number, absl::string_view message)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Status() : rep_(CodeToInlinedRep(absl::StatusCode::kOk))"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Status(absl::StatusCode code) : rep_(CodeToInlinedRep(code))"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Status(const Status& x) : rep_(x.rep_)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ref(rep_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uintptr_t old_rep = rep_ ;)",
    "insertText": "if(x.rep_ != old_rep)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ref(x.rep_)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (rep_ = x . rep_ ;)",
    "insertText": "Unref(old_rep)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (} return* this ; })",
    "insertText": "Status(Status&& x) noexcept : rep_(x.rep_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Status&)",
    "insertText": "operator(Status&& x)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "move(new_status)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(rep_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Status& lhs, const Status& rhs)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString(StatusToStringMode mode)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(absl::Status& a, absl::Status& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(a.rep_, b.rep_)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsInlined(rep))"
  },
  {
    "label": "RepToPointer()",
    "kind": "Method",
    "detail": "Function (} status_internal::StatusRep*)",
    "insertText": "RepToPointer(uintptr_t rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!IsInlined(rep))"
  },
  {
    "label": "PointerToRep()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "PointerToRep(status_internal::StatusRep* rep)"
  },
  {
    "label": "RepToPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepToPointer(rep)->ref.fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "UnrefNonInlined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnrefNonInlined(rep)"
  }
]