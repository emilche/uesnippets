[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "below",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "below"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ABSL_MUST_USE_RESULT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_MUST_USE_RESULT"
  },
  {
    "label": "Status",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Status"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "StatusCodeToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "StatusCodeToString(StatusCode code)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const Status& new_status)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(Status&& new_status)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Status& a, Status& b)"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayload(absl::string_view type_url, absl::Cord payload)"
  },
  {
    "label": "ErasePayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ErasePayload(absl::string_view type_url)"
  },
  {
    "label": "CancelledError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "CancelledError()"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Status(absl::StatusCode code)"
  },
  {
    "label": "UnrefNonInlined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnrefNonInlined(uintptr_t rep)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ref(uintptr_t rep)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(uintptr_t rep)"
  },
  {
    "label": "PrepareToModify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToModify()"
  },
  {
    "label": "EqualsSlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsSlow(const absl::Status& a, const absl::Status& b)"
  },
  {
    "label": "IsInlined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInlined(uintptr_t rep)"
  },
  {
    "label": "IsMovedFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovedFrom(uintptr_t rep)"
  },
  {
    "label": "MovedFromRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "MovedFromRep()"
  },
  {
    "label": "CodeToInlinedRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "CodeToInlinedRep(absl::StatusCode code)"
  },
  {
    "label": "InlinedRepToCode()",
    "kind": "Method",
    "detail": "Function (absl::StatusCode)",
    "insertText": "InlinedRepToCode(uintptr_t rep)"
  },
  {
    "label": "PointerToRep()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "PointerToRep(status_internal::StatusRep* r)"
  },
  {
    "label": "OkStatus()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "OkStatus()"
  },
  {
    "label": "IsAborted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAborted(const Status& status)"
  },
  {
    "label": "IsAlreadyExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlreadyExists(const Status& status)"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCancelled(const Status& status)"
  },
  {
    "label": "IsDataLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataLoss(const Status& status)"
  },
  {
    "label": "IsDeadlineExceeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeadlineExceeded(const Status& status)"
  },
  {
    "label": "IsFailedPrecondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFailedPrecondition(const Status& status)"
  },
  {
    "label": "IsInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternal(const Status& status)"
  },
  {
    "label": "IsInvalidArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalidArgument(const Status& status)"
  },
  {
    "label": "IsNotFound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotFound(const Status& status)"
  },
  {
    "label": "IsOutOfRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutOfRange(const Status& status)"
  },
  {
    "label": "IsPermissionDenied()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPermissionDenied(const Status& status)"
  },
  {
    "label": "IsResourceExhausted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceExhausted(const Status& status)"
  },
  {
    "label": "IsUnauthenticated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnauthenticated(const Status& status)"
  },
  {
    "label": "IsUnavailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnavailable(const Status& status)"
  },
  {
    "label": "IsUnimplemented()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnimplemented(const Status& status)"
  },
  {
    "label": "IsUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnknown(const Status& status)"
  },
  {
    "label": "AbortedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "AbortedError(absl::string_view message)"
  },
  {
    "label": "AlreadyExistsError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "AlreadyExistsError(absl::string_view message)"
  },
  {
    "label": "CancelledError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "CancelledError(absl::string_view message)"
  },
  {
    "label": "DataLossError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "DataLossError(absl::string_view message)"
  },
  {
    "label": "DeadlineExceededError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "DeadlineExceededError(absl::string_view message)"
  },
  {
    "label": "FailedPreconditionError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "FailedPreconditionError(absl::string_view message)"
  },
  {
    "label": "InternalError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "InternalError(absl::string_view message)"
  },
  {
    "label": "InvalidArgumentError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "InvalidArgumentError(absl::string_view message)"
  },
  {
    "label": "NotFoundError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "NotFoundError(absl::string_view message)"
  },
  {
    "label": "OutOfRangeError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "OutOfRangeError(absl::string_view message)"
  },
  {
    "label": "PermissionDeniedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "PermissionDeniedError(absl::string_view message)"
  },
  {
    "label": "ResourceExhaustedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "ResourceExhaustedError(absl::string_view message)"
  },
  {
    "label": "UnauthenticatedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnauthenticatedError(absl::string_view message)"
  },
  {
    "label": "UnavailableError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnavailableError(absl::string_view message)"
  },
  {
    "label": "UnimplementedError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnimplementedError(absl::string_view message)"
  },
  {
    "label": "UnknownError()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "UnknownError(absl::string_view message)"
  },
  {
    "label": "ErrnoToStatusCode()",
    "kind": "Method",
    "detail": "Function (absl::StatusCode)",
    "insertText": "ErrnoToStatusCode(int error_number)"
  },
  {
    "label": "ErrnoToStatus()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "ErrnoToStatus(int error_number, absl::string_view message)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Status()"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Status(absl::StatusCode::kCancelled)"
  }
]