[
  {
    "label": "TIntVector3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntVector3"
  },
  {
    "label": "TIntVector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntVector2"
  },
  {
    "label": "TIntVector4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntVector4"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Crc . h \" # include \" Misc / Parse . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" Serialization / StructuredArchive . h \" # include \" Misc / LargeWorldCoordinatesSerializer . h \" namespace UE::Math { template<InIntType> struct TIntVector3 { using IntType = InIntType ;)",
    "insertText": "static_assert(std::is_integral_v<IntType>, \"Only an integer types are supported.\")"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (} ; const TIntVector3 ZeroValue ; const TIntVector3 NoneValue ;)",
    "insertText": "TIntVector3()"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector3(IntType InX, IntType InY, IntType InZ) : X(InX) , Y(InY) , Z(InZ)"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector3(IntType InValue) : X(InValue) , Y(InValue) , Z(InValue)"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (} template<FloatType>)",
    "insertText": "TIntVector3(TVector<FloatType> InVector)"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector3(EForceInit) : X(0) , Y(0) , Z(0)"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (} template<OtherIntType>)",
    "insertText": "TIntVector3(TIntVector3<OtherIntType> Other) : X(IntCastChecked<IntType>(Other.X)) , Y(IntCastChecked<IntType>(Other.Y)) , Z(IntCastChecked<IntType>(Other.Z))"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "TIntVector3(TIntVector3&&)"
  },
  {
    "label": "TIntVector3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector3(const TIntVector3&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector3&)",
    "insertText": "operator(TIntVector3&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector3&)",
    "insertText": "operator(const TIntVector3&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS const IntType&)",
    "insertText": "operator()(int32 ComponentIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZ [ ComponentIndex ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } const IntType&)",
    "insertText": "operator(int32 ComponentIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZ [ ComponentIndex ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const TIntVector3& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X* = Other . X ; Y* = Other . Y ; Z* = Other . Z ; return* this ; } TIntVector3&)",
    "insertText": "operator(IntType Scale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X* = Scale ; Y* = Scale ; Z* = Scale ; return* this ; } TIntVector3&)",
    "insertText": "operator(IntType Divisor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TIntVector3)",
    "insertText": "operator(IntType Shift)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TIntVector3)",
    "insertText": "operator(IntType Value)"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "GetAbsMax()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetAbsMax()"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetMax()"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} } IntType)",
    "insertText": "GetMin()"
  },
  {
    "label": "GetAbsMin()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetAbsMin()"
  },
  {
    "label": "ComponentMax()",
    "kind": "Method",
    "detail": "Function (} } TIntVector3)",
    "insertText": "ComponentMax(const TIntVector3& Other)"
  },
  {
    "label": "ComponentMin()",
    "kind": "Method",
    "detail": "Function (} TIntVector3)",
    "insertText": "ComponentMin(const TIntVector3& Other)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "Size()"
  },
  {
    "label": "LocalX64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LocalX64(int64)"
  },
  {
    "label": "LocalY64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LocalY64(int64)"
  },
  {
    "label": "LocalZ64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LocalZ64(int64)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} template<CharType> void)",
    "insertText": "AppendString(TStringBuilderBase<CharType>& Out)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Out<<\" X = \"<<X<<\" Y = \"<<Y<<\" Z = \"<<Z ; } template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const TIntVector3& Vector)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "AppendString(Builder)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 2 8> Builder ; Builder<<* this ; Out .)",
    "insertText": "Append(Builder)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (FString Out ;)",
    "insertText": "AppendString(Out)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (X = Y = Z = 0 ; const bool bSuccessful =)",
    "insertText": "Value(*InSourceString, TEXT(\"X=\"), X) && FParse::Value(*InSourceString, TEXT(\"Y=\"), Y) && FParse::Value(*InSourceString, TEXT(\"Z=\"), Z)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (} TIntVector3)",
    "insertText": "DivideAndRoundUp(TIntVector3 Lhs, TIntVector3 Divisor)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (FStructuredArchive::FRecord Record = Slot .)",
    "insertText": "EnterRecord()"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"X\"), Vector.X)"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"Y\"), Vector.Y)"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"Z\"), Vector.Z)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "ZeroValue()",
    "kind": "Method",
    "detail": "Function (} ; template<IntType> const TIntVector3<IntType> TIntVector3<IntType)",
    "insertText": "ZeroValue(0, 0, 0)"
  },
  {
    "label": "NoneValue()",
    "kind": "Method",
    "detail": "Function (template<IntType> const TIntVector3<IntType> TIntVector3<IntType)",
    "insertText": "NoneValue(INDEX_NONE, INDEX_NONE, INDEX_NONE)"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (} ; const TIntVector2 ZeroValue ; const TIntVector2 NoneValue ;)",
    "insertText": "TIntVector2()"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector2(IntType InX, IntType InY) : X(InX) , Y(InY)"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector2(IntType InValue) : X(InValue) , Y(InValue)"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector2(EForceInit) : X(0) , Y(0)"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (} template<OtherIntType>)",
    "insertText": "TIntVector2(TIntVector2<OtherIntType> Other) : X(IntCastChecked<IntType>(Other.X)) , Y(IntCastChecked<IntType>(Other.Y))"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "TIntVector2(TIntVector2&&)"
  },
  {
    "label": "TIntVector2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector2(const TIntVector2&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector2&)",
    "insertText": "operator(TIntVector2&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector2&)",
    "insertText": "operator(const TIntVector2&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XY [ ComponentIndex ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const TIntVector2& Other)"
  },
  {
    "label": "ComponentMax()",
    "kind": "Method",
    "detail": "Function (} } TIntVector2)",
    "insertText": "ComponentMax(const TIntVector2& Other)"
  },
  {
    "label": "ComponentMin()",
    "kind": "Method",
    "detail": "Function (} TIntVector2)",
    "insertText": "ComponentMin(const TIntVector2& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Out<<\" X = \"<<X<<\" Y = \"<<Y ; } template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const TIntVector2& Vector)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (X = Y = 0 ; const bool bSuccessful =)",
    "insertText": "Value(*InSourceString, TEXT(\"X=\"), X) && FParse::Value(*InSourceString, TEXT(\"Y=\"), Y)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (} TIntVector2)",
    "insertText": "DivideAndRoundUp(TIntVector2 Lhs, TIntVector2 Divisor)"
  },
  {
    "label": "ZeroValue()",
    "kind": "Method",
    "detail": "Function (} ; template<IntType> const TIntVector2<IntType> TIntVector2<IntType)",
    "insertText": "ZeroValue(0, 0)"
  },
  {
    "label": "NoneValue()",
    "kind": "Method",
    "detail": "Function (template<IntType> const TIntVector2<IntType> TIntVector2<IntType)",
    "insertText": "NoneValue(INDEX_NONE, INDEX_NONE)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (} ; const TIntVector4 ZeroValue ; const TIntVector4 NoneValue ;)",
    "insertText": "TIntVector4()"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector4(IntType InX, IntType InY, IntType InZ, IntType InW) : X(InX) , Y(InY) , Z(InZ) , W(InW)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector4(IntType InValue) : X(InValue) , Y(InValue) , Z(InValue) , W(InValue)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector4(const TIntVector3<IntType>& InValue, IntType InW = 0) : X(InValue.X) , Y(InValue.Y) , Z(InValue.Z) , W(InW)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntVector4(EForceInit) : X(0) , Y(0) , Z(0) , W(0)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (} template<OtherIntType>)",
    "insertText": "TIntVector4(TIntVector4<OtherIntType> Other) : X(IntCastChecked<IntType>(Other.X)) , Y(IntCastChecked<IntType>(Other.Y)) , Z(IntCastChecked<IntType>(Other.Z)) , W(IntCastChecked<IntType>(Other.W))"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "TIntVector4(TIntVector4&&)"
  },
  {
    "label": "TIntVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIntVector4(const TIntVector4&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector4&)",
    "insertText": "operator(TIntVector4&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntVector4&)",
    "insertText": "operator(const TIntVector4&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZW [ ComponentIndex ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const TIntVector4& Other)"
  },
  {
    "label": "ComponentMax()",
    "kind": "Method",
    "detail": "Function (} } TIntVector4)",
    "insertText": "ComponentMax(const TIntVector4& Other)"
  },
  {
    "label": "ComponentMin()",
    "kind": "Method",
    "detail": "Function (} TIntVector4)",
    "insertText": "ComponentMin(const TIntVector4& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Out<<\" X = \"<<X<<\" Y = \"<<Y<<\" Z = \"<<Z<<\" W = \"<<W ; } template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const TIntVector4& Vector)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (X = Y = Z = W = 0 ; const bool bSuccessful =)",
    "insertText": "Value(*InSourceString, TEXT(\"X=\"), X) && FParse::Value(*InSourceString, TEXT(\"Y=\"), Y) && FParse::Value(*InSourceString, TEXT(\"Z=\"), Z) && FParse::Value(*InSourceString, TEXT(\"W=\"), W)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (} TIntVector4)",
    "insertText": "DivideAndRoundUp(TIntVector4 Lhs, TIntVector4 Divisor)"
  },
  {
    "label": "SA_VALUE()",
    "kind": "Method",
    "detail": "Function (Record<<)",
    "insertText": "SA_VALUE(TEXT(\"W\"), Vector.W)"
  },
  {
    "label": "ZeroValue()",
    "kind": "Method",
    "detail": "Function (} ; template<IntType> const TIntVector4<IntType> TIntVector4<IntType)",
    "insertText": "ZeroValue(0, 0, 0, 0)"
  },
  {
    "label": "NoneValue()",
    "kind": "Method",
    "detail": "Function (template<IntType> const TIntVector4<IntType> TIntVector4<IntType)",
    "insertText": "NoneValue(INDEX_NONE, INDEX_NONE, INDEX_NONE, INDEX_NONE)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (template<T> uint32)",
    "insertText": "GetTypeHash(const TIntVector2<T>& Vector)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32)",
    "insertText": "GetTypeHash(const TIntVector3<T>& Vector)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32)",
    "insertText": "GetTypeHash(const TIntVector4<T>& Vector)"
  }
]