[
  {
    "label": "TestAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestAttributeSet"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Descriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Descriptor"
  },
  {
    "label": "Util",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Util"
  },
  {
    "label": "NameAndType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameAndType"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "Element",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Element"
  },
  {
    "label": "Inserter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Inserter"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_ATTRIBUTE_SET_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_ATTRIBUTE_SET_HAS_BEEN_INCLUDED # include \" AttributeArray . h \" # include<openvdb / version . h> # include<openvdb / MetaMap . h> # include<limits> # include<memory> # include<vector> class TestAttributeSet ; namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { using GroupType = uint8_t ; class AttributeSet { public : enum { INVALID_POS = std::numeric_limits<size_t)",
    "insertText": "max()"
  },
  {
    "label": "NameAndType()",
    "kind": "Method",
    "detail": "Function (using Ptr = std::shared_ptr<AttributeSet> ; using ConstPtr = std::shared_ptr<const AttributeSet> ; using UniquePtr = std::unique_ptr<AttributeSet> ; class Descriptor ; using DescriptorPtr = std::shared_ptr<Descriptor> ; using DescriptorConstPtr = std::shared_ptr<const Descriptor> ; struct Util { struct NameAndType {)",
    "insertText": "NameAndType(const std::string& n, const NamePair& t, const Index s = 1) : name(n), type(t), stride(s)"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (} Name name ; NamePair type ; Index stride ; } ; using NameAndTypeVec = std::vector<NameAndType> ; using NameToPosMap = std::map<std::string,size_t> ; using GroupIndex = std::pair<size_t,uint8_t> ; } ;)",
    "insertText": "AttributeSet()"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttributeSet(const AttributeSet& attributeSet, Index arrayLength, const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttributeSet(const DescriptorPtr& descriptor, Index arrayLength = 1, const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttributeSet(const AttributeSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AttributeSet&)",
    "insertText": "operator(const AttributeSet&)"
  },
  {
    "label": "descriptor()",
    "kind": "Method",
    "detail": "Function (Descriptor&)",
    "insertText": "descriptor()"
  },
  {
    "label": "memUsage()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "memUsage()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "find(const std::string& name)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "replace(const std::string& name, const AttributeArray::Ptr&)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "replace(size_t pos, const AttributeArray::Ptr&)"
  },
  {
    "label": "getConst()",
    "kind": "Method",
    "detail": "Function (const AttributeArray*)",
    "insertText": "getConst(const std::string& name)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const AttributeArray*)",
    "insertText": "get(const std::string& name)"
  },
  {
    "label": "getConst()",
    "kind": "Method",
    "detail": "Function (const AttributeArray*)",
    "insertText": "getConst(size_t pos)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const AttributeArray*)",
    "insertText": "get(size_t pos)"
  },
  {
    "label": "groupOffset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "groupOffset(const Name& groupName)"
  },
  {
    "label": "groupOffset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "groupOffset(const Util::GroupIndex& index)"
  },
  {
    "label": "groupIndex()",
    "kind": "Method",
    "detail": "Function (Util::GroupIndex)",
    "insertText": "groupIndex(const Name& groupName)"
  },
  {
    "label": "groupIndex()",
    "kind": "Method",
    "detail": "Function (Util::GroupIndex)",
    "insertText": "groupIndex(const size_t offset)"
  },
  {
    "label": "groupAttributeIndices()",
    "kind": "Method",
    "detail": "Function (std::vector<size_t>)",
    "insertText": "groupAttributeIndices()"
  },
  {
    "label": "isShared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isShared(size_t pos)"
  },
  {
    "label": "makeUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeUnique(size_t pos)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "appendAttribute(const Name& name, const NamePair& type, const Index strideOrTotalSize = 1, const bool constantStride = true, const Metadata* defaultValue = nullptr)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "appendAttribute(const Descriptor& expected, DescriptorPtr& replacement, const size_t pos, const Index strideOrTotalSize = 1, const bool constantStride = true, const Metadata* defaultValue = nullptr, const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttribute(const Name& name)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttribute(const size_t pos)"
  },
  {
    "label": "removeAttributeUnsafe()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttributeUnsafe(const size_t pos)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(const std::vector<size_t>& pos)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(const std::vector<size_t>& pos, const Descriptor& expected, DescriptorPtr& replacement)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renameAttributes(const Descriptor& expected, const DescriptorPtr& replacement)"
  },
  {
    "label": "reorderAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reorderAttributes(const DescriptorPtr& replacement)"
  },
  {
    "label": "resetDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetDescriptor(const DescriptorPtr& replacement, const bool allowMismatchingDescriptors = false)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read(std::istream&)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(std::ostream&, bool outputTransient = false)"
  },
  {
    "label": "readDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readDescriptor(std::istream&)"
  },
  {
    "label": "writeDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeDescriptor(std::ostream&, bool outputTransient = false)"
  },
  {
    "label": "readMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readMetadata(std::istream&)"
  },
  {
    "label": "writeMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeMetadata(std::ostream&, bool outputTransient = false, bool paged = false)"
  },
  {
    "label": "readAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readAttributes(std::istream&)"
  },
  {
    "label": "writeAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeAttributes(std::ostream&, bool outputTransient = false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const AttributeSet& other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} private : using AttrArrayVec = std::vector<AttributeArray::Ptr> ; DescriptorPtr mDescr ; AttrArrayVec mAttrs ; } ; namespace future { class Container { class Element { } ; std::vector<std::shared_ptr<Element>> mElements ; } ; } class AttributeSet::Descriptor { public : using Ptr = std::shared_ptr<Descriptor> ; using NameAndType = Util::NameAndType ; using NameAndTypeVec = Util::NameAndTypeVec ; using GroupIndex = Util::GroupIndex ; using NameToPosMap = Util::NameToPosMap ; using ConstIterator = NameToPosMap::const_iterator ; struct Inserter { NameAndTypeVec vec ; Inserter&)",
    "insertText": "add(const NameAndType& nameAndType)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vec .)",
    "insertText": "push_back(nameAndType)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (vec .)",
    "insertText": "emplace_back(name, type)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (vec .)",
    "insertText": "emplace_back(it->name, it->type)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ;)",
    "insertText": "Descriptor()"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Descriptor(const Descriptor&)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const NamePair&)"
  },
  {
    "label": "duplicateAppend()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "duplicateAppend(const Name& name, const NamePair& type)"
  },
  {
    "label": "duplicateDrop()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "duplicateDrop(const std::vector<size_t>& pos)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "count(const NamePair& type)"
  },
  {
    "label": "rename()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "rename(const std::string& fromName, const std::string& toName)"
  },
  {
    "label": "valueType()",
    "kind": "Method",
    "detail": "Function (const Name&)",
    "insertText": "valueType(size_t pos)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (const NamePair&)",
    "insertText": "type(size_t pos)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (MetaMap&)",
    "insertText": "getMetadata()"
  },
  {
    "label": "hasDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasDefaultValue(const Name& name)"
  },
  {
    "label": "getDefaultValue()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "getDefaultValue(const Name& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const size_t pos =)",
    "insertText": "find(name)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(LookupError, \"Cannot find attribute name to set default value.\")"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ss<<\" default : \"<<name ; auto metadata = mMetadata . getMetadata<TypedMetadata<)",
    "insertText": "ValueType(ss.str())"
  },
  {
    "label": "setDefaultValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDefaultValue(const Name& name, const Metadata& defaultValue)"
  },
  {
    "label": "removeDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDefaultValue(const Name& name)"
  },
  {
    "label": "pruneUnusedDefaultValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneUnusedDefaultValues()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Descriptor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Descriptor& rhs)"
  },
  {
    "label": "hasSameAttributes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasSameAttributes(const Descriptor& rhs)"
  },
  {
    "label": "map()",
    "kind": "Method",
    "detail": "Function (const NameToPosMap&)",
    "insertText": "map()"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroup(const Name& group, const size_t offset, const bool checkValidOffset = false)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroup(const Name& group)"
  },
  {
    "label": "clearGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearGroups()"
  },
  {
    "label": "renameGroup()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "renameGroup(const std::string& fromName, const std::string& toName)"
  },
  {
    "label": "uniqueGroupName()",
    "kind": "Method",
    "detail": "Function (const Name)",
    "insertText": "uniqueGroupName(const Name& name)"
  },
  {
    "label": "groupOffset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "groupOffset(const GroupIndex& index)"
  },
  {
    "label": "groupBits()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "groupBits()"
  },
  {
    "label": "availableGroups()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "availableGroups()"
  },
  {
    "label": "unusedGroups()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "unusedGroups()"
  },
  {
    "label": "canCompactGroups()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canCompactGroups()"
  },
  {
    "label": "unusedGroupOffset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "unusedGroupOffset(size_t hint = std::numeric_limits<size_t>::max())"
  },
  {
    "label": "requiresGroupMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requiresGroupMove(Name& sourceName, size_t& sourceOffset, size_t& targetOffset)"
  },
  {
    "label": "groupIndexCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "groupIndexCollision(const Descriptor& rhs)"
  },
  {
    "label": "uniqueName()",
    "kind": "Method",
    "detail": "Function (const Name)",
    "insertText": "uniqueName(const Name& name)"
  },
  {
    "label": "validName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validName(const Name& name)"
  },
  {
    "label": "parseNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseNames(std::vector<std::string>& includeNames, std::vector<std::string>& excludeNames, bool& includeAll, const std::string& nameStr)"
  },
  {
    "label": "parseNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseNames(std::vector<std::string>& includeNames, std::vector<std::string>& excludeNames, const std::string& nameStr)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(std::ostream&)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "appendTo(NameAndTypeVec& attrs)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const NameAndTypeVec&, const NameToPosMap&, const MetaMap&)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "insert(const std::string& name, const NamePair& typeName)"
  }
]