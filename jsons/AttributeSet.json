[
  {
    "label": "TestAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestAttributeSet"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Descriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Descriptor"
  },
  {
    "label": "Util",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Util"
  },
  {
    "label": "NameAndType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameAndType"
  },
  {
    "label": "AttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AttributeSet"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "Element",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Element"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Inserter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Inserter"
  },
  {
    "label": "Descriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Descriptor"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (flags)",
    "insertText": "AttributeSet(const AttributeSet& attributeSet, Index arrayLength,\n        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (instead)",
    "insertText": "AttributeSet(const DescriptorPtr& descriptor, Index arrayLength = 1,\n        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "replace(const std::string& name, const AttributeArray::Ptr&)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "replace(size_t pos, const AttributeArray::Ptr&)"
  },
  {
    "label": "makeUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeUnique(size_t pos)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "appendAttribute(const Name& name,\n                                        const NamePair& type,\n                                        const Index strideOrTotalSize = 1,\n                                        const bool constantStride = true,\n                                        const Metadata* defaultValue = nullptr)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "appendAttribute(const Descriptor& expected, DescriptorPtr& replacement,\n                                        const size_t pos, const Index strideOrTotalSize = 1,\n                                        const bool constantStride = true,\n                                        const Metadata* defaultValue = nullptr,\n                                        const AttributeArray::ScopedRegistryLock* lock = nullptr)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttribute(const Name& name)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttribute(const size_t pos)"
  },
  {
    "label": "removeAttributeUnsafe()",
    "kind": "Method",
    "detail": "Function (AttributeArray::Ptr)",
    "insertText": "removeAttributeUnsafe(const size_t pos)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(const std::vector<size_t>& pos)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(const std::vector<size_t>& pos,\n                        const Descriptor& expected, DescriptorPtr& replacement)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renameAttributes(const Descriptor& expected, const DescriptorPtr& replacement)"
  },
  {
    "label": "reorderAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reorderAttributes(const DescriptorPtr& replacement)"
  },
  {
    "label": "resetDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetDescriptor(const DescriptorPtr& replacement, const bool allowMismatchingDescriptors = false)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read(std::istream&)"
  },
  {
    "label": "readDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readDescriptor(std::istream&)"
  },
  {
    "label": "readMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readMetadata(std::istream&)"
  },
  {
    "label": "readAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readAttributes(std::istream&)"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "Descriptor(const Descriptor&)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const NamePair&)"
  },
  {
    "label": "rename()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "rename(const std::string& fromName, const std::string& toName)"
  },
  {
    "label": "setDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDefaultValue(const Name& name, const Metadata& defaultValue)"
  },
  {
    "label": "removeDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDefaultValue(const Name& name)"
  },
  {
    "label": "pruneUnusedDefaultValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneUnusedDefaultValues()"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroup(const Name& group, const size_t offset,\n        const bool checkValidOffset = false)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroup(const Name& group)"
  },
  {
    "label": "clearGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearGroups()"
  },
  {
    "label": "renameGroup()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "renameGroup(const std::string& fromName, const std::string& toName)"
  },
  {
    "label": "validName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validName(const Name& name)"
  },
  {
    "label": "parseNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseNames( std::vector<std::string>& includeNames,\n                            std::vector<std::string>& excludeNames,\n                            bool& includeAll,\n                            const std::string& nameStr)"
  },
  {
    "label": "parseNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseNames( std::vector<std::string>& includeNames,\n                            std::vector<std::string>& excludeNames,\n                            const std::string& nameStr)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read(std::istream&)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const NameAndTypeVec&, const NameToPosMap&, const MetaMap&)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "insert(const std::string& name, const NamePair& typeName)"
  }
]