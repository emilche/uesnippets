[
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FAnimTimelineTrack_Notifies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_Notifies"
  },
  {
    "label": "FAnimTimelineTrack_Curves",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_Curves"
  },
  {
    "label": "FAnimTimelineTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack"
  },
  {
    "label": "FAnimTimelineTrack_NotifiesPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_NotifiesPanel"
  },
  {
    "label": "FAnimTimelineTrack_Attributes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_Attributes"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimModel_AnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel_AnimSequenceBase"
  },
  {
    "label": "FAnimModel_AnimSequenceBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimTimeline / AnimModel . h \" # include \" PersonaDelegates . h \" # include \" SAnimTimingPanel . h \" # include \" EditorUndoClient . h \" # include \" Animation / AnimSequenceHelpers . h \" # include \" Animation / AnimData / AnimDataModelNotifyCollector . h \" class UAnimSequenceBase ; class FAnimTimelineTrack_Notifies ; class FAnimTimelineTrack_Curves ; class FAnimTimelineTrack ; class FAnimTimelineTrack_NotifiesPanel ; class FAnimTimelineTrack_Attributes ; enum class EFrameNumberDisplayFormats : uint8 ; class FAnimModel_AnimSequenceBase : public FAnimModel { public :)",
    "insertText": "FAnimModel_AnimSequenceBase(const TSharedRef<IPersonaPreviewScene>& InPreviewScene, const TSharedRef<IEditableSkeleton>& InEditableSkeleton, const TSharedRef<FUICommandList>& InCommandList, UAnimSequenceBase* InAnimSequenceBase)"
  },
  {
    "label": "FAnimModel_AnimSequenceBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimModel_AnimSequenceBase()"
  },
  {
    "label": "RefreshTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTracks()"
  },
  {
    "label": "GetAnimSequenceBase()",
    "kind": "Method",
    "detail": "Function (UAnimSequenceBase*)",
    "insertText": "GetAnimSequenceBase()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "UpdateRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRange()"
  },
  {
    "label": "GetNotifyRoot()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FAnimTimelineTrack_Notifies>&)",
    "insertText": "GetNotifyRoot()"
  },
  {
    "label": "ToggleNotifiesTimingElementDisplayEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNotifiesTimingElementDisplayEnabled(ETimingElementType::Type ElementType)"
  },
  {
    "label": "ClampToEndTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClampToEndTime(float NewEndTime)"
  },
  {
    "label": "RefreshSnapTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSnapTimes()"
  },
  {
    "label": "RefreshNotifyTracks()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RefreshNotifyTracks()"
  },
  {
    "label": "RefreshCurveTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCurveTracks()"
  },
  {
    "label": "RefreshAttributeTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAttributeTracks()"
  },
  {
    "label": "OnDataModelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataModelChanged(const EAnimDataModelNotifyType& NotifyType, IAnimationDataModel* Model, const FAnimDataModelNotifPayload& PayLoad)"
  },
  {
    "label": "EditSelectedCurves()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EditSelectedCurves()"
  },
  {
    "label": "CanEditSelectedCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSelectedCurves()"
  },
  {
    "label": "RemoveSelectedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedCurves()"
  },
  {
    "label": "CopySelectedCurveNamesToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedCurveNamesToClipboard()"
  },
  {
    "label": "SetDisplayFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayFormat(EFrameNumberDisplayFormats InFormat)"
  },
  {
    "label": "IsDisplayFormatChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplayFormatChecked(EFrameNumberDisplayFormats InFormat)"
  },
  {
    "label": "ToggleDisplayPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDisplayPercentage()"
  },
  {
    "label": "IsDisplayPercentageChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplayPercentageChecked()"
  },
  {
    "label": "ToggleDisplaySecondary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDisplaySecondary()"
  },
  {
    "label": "IsDisplaySecondaryChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplaySecondaryChecked()"
  },
  {
    "label": "AreAnyCurvesSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnyCurvesSelected()"
  },
  {
    "label": "CopyToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToClipboard()"
  },
  {
    "label": "CanCopyToClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyToClipboard()"
  },
  {
    "label": "PasteDataFromClipboardToSelectedCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteDataFromClipboardToSelectedCurve()"
  },
  {
    "label": "CanPasteDataFromClipboardToSelectedCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteDataFromClipboardToSelectedCurve()"
  },
  {
    "label": "PasteFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFromClipboard()"
  },
  {
    "label": "CanPasteFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteFromClipboard()"
  },
  {
    "label": "CutToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutToClipboard()"
  },
  {
    "label": "CanCutToClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCutToClipboard()"
  }
]