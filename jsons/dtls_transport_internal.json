[
  {
    "label": "PacketFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PacketFlags"
  },
  {
    "label": "DtlsTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtlsTransportInternal"
  },
  {
    "label": "DtlsTransportInternal()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_DTLS_TRANSPORT_INTERNAL_H_ # define P2P_BASE_DTLS_TRANSPORT_INTERNAL_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" api / crypto / crypto_options . h \" # include \" api / dtls_transport_interface . h \" # include \" api / scoped_refptr . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" rtc_base / callback_list . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_fingerprint . h \" # include \" rtc_base / ssl_stream_adapter . h \" namespace cricket { enum PacketFlags { PF_NORMAL = 0 x00,PF_SRTP_BYPASS = 0 x01,} ; class DtlsTransportInternal : public rtc::PacketTransportInternal { public : ~)",
    "insertText": "DtlsTransportInternal()"
  },
  {
    "label": "DtlsTransportInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtlsTransportInternal(const DtlsTransportInternal&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DtlsTransportInternal&)",
    "insertText": "operator(const DtlsTransportInternal&)"
  },
  {
    "label": "dtls_state()",
    "kind": "Method",
    "detail": "Function (webrtc::DtlsTransportState)",
    "insertText": "dtls_state()"
  },
  {
    "label": "component()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "component()"
  },
  {
    "label": "IsDtlsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDtlsActive()"
  },
  {
    "label": "GetDtlsRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtlsRole(rtc::SSLRole* role)"
  },
  {
    "label": "SetDtlsRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtlsRole(rtc::SSLRole role)"
  },
  {
    "label": "GetSslVersionBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslVersionBytes(int* version)"
  },
  {
    "label": "GetSrtpCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSrtpCryptoSuite(int* cipher)"
  },
  {
    "label": "GetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslCipherSuite(int* cipher)"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<rtc::RTCCertificate>)",
    "insertText": "GetLocalCertificate()"
  },
  {
    "label": "SetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalCertificate(const rtc::scoped_refptr<rtc::RTCCertificate>& certificate)"
  },
  {
    "label": "GetRemoteSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::SSLCertChain>)",
    "insertText": "GetRemoteSSLCertChain()"
  },
  {
    "label": "ExportKeyingMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportKeyingMaterial(absl::string_view label, const uint8_t* context, size_t context_len, bool use_context, uint8_t* result, size_t result_len)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use SetRemoteParameters instead.\") virtual bool SetRemoteFingerprint(absl::string_view digest_alg, const uint8_t* digest, size_t digest_len)"
  },
  {
    "label": "SetRemoteParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRemoteParameters(absl::string_view digest_alg, const uint8_t* digest, size_t digest_len, absl::optional<rtc::SSLRole> role)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Set the max version via construction.\") bool SetSslMaxProtocolVersion(rtc::SSLProtocolVersion version)"
  },
  {
    "label": "SubscribeDtlsTransportState()",
    "kind": "Method",
    "detail": "Function (template<F> void)",
    "insertText": "SubscribeDtlsTransportState(F&& callback)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (dtls_transport_state_callback_list_ .)",
    "insertText": "AddReceiver(std::forward<F>(callback))"
  },
  {
    "label": "SubscribeDtlsTransportState()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeDtlsTransportState(const void* id, F&& callback)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (dtls_transport_state_callback_list_ .)",
    "insertText": "AddReceiver(id, std::forward<F>(callback))"
  },
  {
    "label": "UnsubscribeDtlsTransportState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsubscribeDtlsTransportState(const void* id)"
  },
  {
    "label": "RemoveReceivers()",
    "kind": "Method",
    "detail": "Function (dtls_transport_state_callback_list_ .)",
    "insertText": "RemoveReceivers(id)"
  },
  {
    "label": "SendDtlsState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendDtlsState(DtlsTransportInternal* transport, webrtc::DtlsTransportState state)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (dtls_transport_state_callback_list_ .)",
    "insertText": "Send(transport, state)"
  },
  {
    "label": "SubscribeDtlsHandshakeError()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeDtlsHandshakeError(F&& callback)"
  },
  {
    "label": "SendDtlsHandshakeError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendDtlsHandshakeError(rtc::SSLHandshakeError error)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (dtls_handshake_error_callback_list_ .)",
    "insertText": "Send(error)"
  }
]