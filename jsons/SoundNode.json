[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "DECLARE_SOUNDNODE_ELEMENT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / RandomStream . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Sound / SoundWave . h \" # include \" SoundNode . generated . h \" class FAudioDevice ; class UEdGraphNode ; struct FActiveSound ; struct FPropertyChangedEvent ; struct FWaveInstance ; struct FActiveSound ; # define)",
    "insertText": "DECLARE_SOUNDNODE_ELEMENT(Type,Name) \\ Type& Name = *((Type*)(Payload))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ Payload + =)",
    "insertText": "sizeof(Type)"
  },
  {
    "label": "DECLARE_SOUNDNODE_ELEMENT_PTR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_SOUNDNODE_ELEMENT_PTR(Type,Name) \\ Type* Name = (Type*)(Payload)"
  },
  {
    "label": "RETRIEVE_SOUNDNODE_PAYLOAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETRIEVE_SOUNDNODE_PAYLOAD(Size)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (\\ uint32* RequiresInitialization = NULL ; \\ { \\ uint32* TempOffset = ActiveSound . SoundNodeOffsetMap .)",
    "insertText": "Find(NodeWaveInstanceHash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ uint32 Offset ; \\)",
    "insertText": "if(!TempOffset)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (\\ Offset = ActiveSound . SoundNodeData .)",
    "insertText": "AddZeroed(Size + sizeof(uint32))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ ActiveSound . SoundNodeOffsetMap .)",
    "insertText": "Add(NodeWaveInstanceHash, Offset)"
  },
  {
    "label": "RequiresInitialization()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RequiresInitialization(uint32*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\* RequiresInitialization = 1 ; \\ Offset + =)",
    "insertText": "sizeof(uint32)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Payload =& ActiveSound . SoundNodeData [ Offset ] ; \\ })",
    "insertText": "UCLASS(abstract, hidecategories=Object, editinlinenew, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetGraphNode()",
    "kind": "Method",
    "detail": "Function (class UEdGraphNode*)",
    "insertText": "GetGraphNode()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# endif FRandomStream RandomStream ; bool bIsRetainingAudio ; public : # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "CanBeClusterRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeClusterRoot()"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "NotifyWaveInstanceFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyWaveInstanceFinished(struct FWaveInstance* WaveInstance)"
  },
  {
    "label": "GetMaxDistance()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaxDistance()"
  },
  {
    "label": "SupportsSubtitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSubtitles()"
  },
  {
    "label": "HasDelayNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDelayNode()"
  },
  {
    "label": "HasConcatenatorNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConcatenatorNode()"
  },
  {
    "label": "HasAttenuationNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttenuationNode()"
  },
  {
    "label": "IsPlayWhenSilent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayWhenSilent()"
  },
  {
    "label": "ParseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseNodes(FAudioDevice* AudioDevice, const UPTRINT NodeWaveInstanceHash, FActiveSound& ActiveSound, const struct FSoundParseParameters& ParseParams, TArray<FWaveInstance*>& WaveInstances)"
  },
  {
    "label": "GetAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllNodes(TArray<USoundNode*>& SoundNodes)"
  },
  {
    "label": "GetMaxChildNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxChildNodes()"
  },
  {
    "label": "CreateStartingConnectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateStartingConnectors(void)"
  },
  {
    "label": "InsertChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChildNode(int32 Index)"
  },
  {
    "label": "RemoveChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildNode(int32 Index)"
  },
  {
    "label": "SetChildNodes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetChildNodes(TArray<USoundNode*>& InChildNodes)"
  },
  {
    "label": "GetInputPinName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetInputPinName(int32 PinIndex)"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetTitle()"
  },
  {
    "label": "PlaceNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PlaceNode(int32 NodeColumn, int32 NodeRow, int32 RowCount)"
  },
  {
    "label": "OnBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "GetNodeWaveInstanceHash()",
    "kind": "Method",
    "detail": "Function (} ; # endif UPTRINT)",
    "insertText": "GetNodeWaveInstanceHash(const UPTRINT ParentWaveInstanceHash, const USoundNode* ChildNode, const uint32 ChildIndex)"
  },
  {
    "label": "GetNodeWaveInstanceHash()",
    "kind": "Method",
    "detail": "Function (UPTRINT)",
    "insertText": "GetNodeWaveInstanceHash(const UPTRINT ParentWaveInstanceHash, const UPTRINT ChildNodeHash, const uint32 ChildIndex)"
  },
  {
    "label": "PrimeChildWavePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimeChildWavePlayers(bool bRecurse)"
  },
  {
    "label": "RetainChildWavePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetainChildWavePlayers(bool bRecurse)"
  },
  {
    "label": "OverrideLoadingBehaviorOnChildWaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideLoadingBehaviorOnChildWaves(const bool bRecurse, const ESoundWaveLoadingBehavior InLoadingBehavior)"
  },
  {
    "label": "ReleaseRetainerOnChildWavePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRetainerOnChildWavePlayers(bool bRecurse)"
  },
  {
    "label": "RemoveSoundWaveOnChildWavePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundWaveOnChildWavePlayers()"
  },
  {
    "label": "LoadChildWavePlayerAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadChildWavePlayerAssets(bool bAddToRoot, bool bRecurse)"
  }
]