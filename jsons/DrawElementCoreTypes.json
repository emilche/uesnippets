[
  {
    "label": "FSlateBoxElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBoxElement"
  },
  {
    "label": "FSlateTextElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateTextElement"
  },
  {
    "label": "FSlateShapedTextElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateShapedTextElement"
  },
  {
    "label": "FSlateSplineElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateSplineElement"
  },
  {
    "label": "FSlateLineElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateLineElement"
  },
  {
    "label": "FSlateGradientElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateGradientElement"
  },
  {
    "label": "FSlateViewportElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateViewportElement"
  },
  {
    "label": "FSlateCustomDrawerElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCustomDrawerElement"
  },
  {
    "label": "FSlateCustomVertsElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCustomVertsElement"
  },
  {
    "label": "FSlatePostProcessElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostProcessElement"
  },
  {
    "label": "FSlateRoundedBoxElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateRoundedBoxElement"
  },
  {
    "label": "FSlateDrawElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawElement"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRenderingBufferStatTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderingBufferStatTracker"
  },
  {
    "label": "FDrawElementStatTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawElementStatTracker"
  },
  {
    "label": "FSlateStatTrackingMemoryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateStatTrackingMemoryAllocator"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" SlateGlobals . h \" struct FSlateBoxElement ; struct FSlateBoxElement ; struct FSlateTextElement ; struct FSlateShapedTextElement ; struct FSlateSplineElement ; struct FSlateLineElement ; struct FSlateGradientElement ; struct FSlateViewportElement ; struct FSlateBoxElement ; struct FSlateCustomDrawerElement ; struct FSlateCustomVertsElement ; struct FSlatePostProcessElement ; struct FSlateRoundedBoxElement ; class FSlateDrawElement ;)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Vertex/Index Buffer Pool Memory (CPU)\"), STAT_SlateBufferPoolMemory, STATGROUP_SlateMemory, SLATECORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Cached Draw Element Memory (CPU)\"), STAT_SlateCachedDrawElementMemory, STATGROUP_SlateMemory, SLATECORE_API)"
  },
  {
    "label": "MemoryAllocated()",
    "kind": "Method",
    "detail": "Function (enum class EElementType : uint8 { ET_Box,ET_DebugQuad,ET_Text,ET_ShapedText,ET_Spline,ET_Line,ET_Gradient,ET_Viewport,ET_Border,ET_Custom,ET_CustomVerts,ET_PostProcessPass,ET_RoundedBox,ET_NonMapped,ET_Count,} ; # if STATS struct FRenderingBufferStatTracker { void)",
    "insertText": "MemoryAllocated(int32 SizeBytes)"
  },
  {
    "label": "INC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_DWORD_STAT_BY(STAT_SlateBufferPoolMemory, SizeBytes)"
  },
  {
    "label": "MemoryFreed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MemoryFreed(int32 SizeBytes)"
  },
  {
    "label": "DEC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT_BY(STAT_SlateBufferPoolMemory, SizeBytes)"
  },
  {
    "label": "INC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_DWORD_STAT_BY(STAT_SlateCachedDrawElementMemory, SizeBytes)"
  },
  {
    "label": "DEC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT_BY(STAT_SlateCachedDrawElementMemory, SizeBytes)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} } ; template<StatTracker> class FSlateStatTrackingMemoryAllocator : public FDefaultAllocator { public : typedef FDefaultAllocator Super ; class ForAnyElementType : public FDefaultAllocator::ForAnyElementType { public : typedef FDefaultAllocator::ForAnyElementType Super ;)",
    "insertText": "ForAnyElementType() : AllocatedSize(0)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveToEmpty(ForAnyElementType& Other)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEmpty(Other)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (AllocatedSize = Other . AllocatedSize ; Other . AllocatedSize = 0 ; } ~)",
    "insertText": "ForAnyElementType()"
  },
  {
    "label": "MemoryFreed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryFreed(AllocatedSize)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResizeAllocation(int32 PreviousNumElements, int32 NumElements, int32 NumBytesPerElement)"
  },
  {
    "label": "MemoryAllocated()",
    "kind": "Method",
    "detail": "Function (const int32 NewSize = NumElements* NumBytesPerElement ;)",
    "insertText": "MemoryAllocated(NewSize - AllocatedSize)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (AllocatedSize = NewSize ;)",
    "insertText": "ResizeAllocation(PreviousNumElements, NumElements, NumBytesPerElement)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ForAnyElementType(const ForAnyElementType&)"
  },
  {
    "label": "TTupleElement()",
    "kind": "Method",
    "detail": "Function (private : int32 AllocatedSize ; } ; } ; template<T> struct TAllocatorTraits<FSlateStatTrackingMemoryAllocator<T>> : TAllocatorTraitsBase<FSlateStatTrackingMemoryAllocator<T>> { enum { IsZeroConstruct = TAllocatorTraits<FDefaultAllocator>::IsZeroConstruct } ; } ; # endif # if STATS template<DrawElementType> using FSlateDrawElementArray = TArray<DrawElementType,FSlateStatTrackingMemoryAllocator<FDrawElementStatTracker>> ; using FSlateDrawElementMap = TTuple<FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateTextElement>,FSlateDrawElementArray<FSlateShapedTextElement>,FSlateDrawElementArray<FSlateSplineElement>,FSlateDrawElementArray<FSlateLineElement>,FSlateDrawElementArray<FSlateGradientElement>,FSlateDrawElementArray<FSlateViewportElement>,FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateCustomDrawerElement>,FSlateDrawElementArray<FSlateCustomVertsElement>,FSlateDrawElementArray<FSlatePostProcessElement>,FSlateDrawElementArray<FSlateRoundedBoxElement>,FSlateDrawElementArray<FSlateDrawElement>> ; # else template<DrawElementType> using FSlateDrawElementArray = TArray<DrawElementType> ; using FSlateDrawElementMap = TTuple<FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateTextElement>,FSlateDrawElementArray<FSlateShapedTextElement>,FSlateDrawElementArray<FSlateSplineElement>,FSlateDrawElementArray<FSlateLineElement>,FSlateDrawElementArray<FSlateGradientElement>,FSlateDrawElementArray<FSlateViewportElement>,FSlateDrawElementArray<FSlateBoxElement>,FSlateDrawElementArray<FSlateCustomDrawerElement>,FSlateDrawElementArray<FSlateCustomVertsElement>,FSlateDrawElementArray<FSlatePostProcessElement>,FSlateDrawElementArray<FSlateRoundedBoxElement>,FSlateDrawElementArray<FSlateDrawElement>> ; # endif template<EElementType ElementType> using TSlateDrawElement =)",
    "insertText": "TTupleElement(uint8)"
  }
]