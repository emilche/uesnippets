[
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "FMediaTextureClockSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaTextureClockSink"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "was",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "was"
  },
  {
    "label": "MediaTextureOrientation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MediaTextureOrientation"
  },
  {
    "label": "UMediaTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaTexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MediaTextureOutputFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MediaTextureOutputFormat"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / EnumAsByte . h \" # include \" Engine / Texture . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" MediaSampleQueue . h \" # include \" Misc / Timespan . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" MediaTexture . generated . h \" class FMediaPlayerFacade ; class FMediaTextureClockSink ; class IMediaTextureSample ; class UMediaPlayer ;)",
    "insertText": "UENUM() enum UE_DEPRECATED(5.4, \"This enum was unused (not connected to active logic) and is now deprecated.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MTOF_Default)",
    "insertText": "UMETA(DisplayName = \"Default (sRGB)\"), MTOF_SRGB_LINOUT UMETA(DisplayName = \"sRGB (linear output)\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MTORI_Original)",
    "insertText": "UMETA(DisplayName = \"Original (as decoded)\"), MTORI_CW90 UMETA(DisplayName = \"Clockwise 90deg\"), MTORI_CW180 UMETA(DisplayName = \"Clockwise 180deg\"), MTORI_CW270 UMETA(DisplayName = \"Clockwise 270deg\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(hidecategories=(Adjustments, Compositing, LevelOfDetail, ImportSettings, Object), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "UpdateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResource()"
  },
  {
    "label": "CacheNextAvailableSampleTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheNextAvailableSampleTime(FTimespan InNextSampleTime)"
  },
  {
    "label": "GetNextSampleTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetNextSampleTime()"
  },
  {
    "label": "GetAvailableSampleCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAvailableSampleCount()"
  },
  {
    "label": "SetDefaultMediaPlayer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetDefaultMediaPlayer(UMediaPlayer* NewMediaPlayer)"
  },
  {
    "label": "GetCurrentAspectRatio()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetCurrentAspectRatio()"
  },
  {
    "label": "GetCurrentOrientation()",
    "kind": "Method",
    "detail": "Function (MediaTextureOrientation)",
    "insertText": "GetCurrentOrientation()"
  },
  {
    "label": "GetMipMapBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMipMapBias()"
  },
  {
    "label": "SetMipMapBias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMipMapBias(float InMipMapBias)"
  },
  {
    "label": "SetColorSpaceOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorSpaceOverride(UE::Color::EColorSpace InColorspaceOverride)"
  },
  {
    "label": "JustInTimeRender()",
    "kind": "Method",
    "detail": "Function (ColorspaceOverride = InColorspaceOverride ; } void)",
    "insertText": "JustInTimeRender()"
  },
  {
    "label": "SetRenderMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderMode(ERenderMode InRenderMode)"
  },
  {
    "label": "GetRenderMode()",
    "kind": "Method",
    "detail": "Function (RenderMode = InRenderMode ; } ERenderMode)",
    "insertText": "GetRenderMode()"
  },
  {
    "label": "CreateResource()",
    "kind": "Method",
    "detail": "Function (FTextureResource*)",
    "insertText": "CreateResource()"
  },
  {
    "label": "GetMaterialType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetMaterialType()"
  },
  {
    "label": "GetSurfaceWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSurfaceWidth()"
  },
  {
    "label": "GetSurfaceHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSurfaceHeight()"
  },
  {
    "label": "GetSurfaceDepth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSurfaceDepth()"
  },
  {
    "label": "SetRenderedExternalTextureGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderedExternalTextureGuid(const FGuid& InNewGuid)"
  },
  {
    "label": "GetTextureClass()",
    "kind": "Method",
    "detail": "Function (ETextureClass)",
    "insertText": "GetTextureClass()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "TickResource()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "TickResource(FTimespan Timecode)"
  },
  {
    "label": "UpdatePlayerAndQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlayerAndQueue()"
  },
  {
    "label": "UpdateSampleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSampleInfo(const TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& Sample)"
  }
]