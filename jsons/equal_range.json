[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_EQUAL_RANGE_H # define _LIBCPP___ALGORITHM_EQUAL_RANGE_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / half_positive . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / lower_bound . h> # include<__algorithm / upper_bound . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__type_traits / is_callable . h> # include<__type_traits / is_copy_constructible . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _Iter, class _Sent, class _Tp, class _Proj> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_Iter, _Iter> __equal_range(_Iter __first, _Sent __last, const _Tp& __value, _Compare&& __comp, _Proj&& __proj)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (auto __len = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (_Iter __end = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, __last)"
  },
  {
    "label": "__half_positive()",
    "kind": "Method",
    "detail": "Function (auto __half_len =)",
    "insertText": "__half_positive(__len)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (_Iter __mid = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, __half_len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__first = + + __mid ; __len - = __half_len + 1 ; } else)",
    "insertText": "if(std::__invoke(__comp, __value, std::__invoke(__proj, *__mid)))"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (__end = __mid ; __len = __half_len ; } else { _Iter __mp1 = __mid ; return pair<_Iter,)",
    "insertText": "_Iter(std::__lower_bound_impl<_AlgPolicy>(__first, __mid, __value, __comp, __proj), std::__upper_bound<_AlgPolicy>(++__mp1, __end, __value, __comp, __proj))"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (} } return pair<_Iter,)",
    "insertText": "_Iter(__first, __first)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Tp,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_ForwardIterator,_ForwardIterator>)",
    "insertText": "equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; return std::__equal_range<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), __value, static_cast<_Comp_ref>(__comp), std::__identity())"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_ForwardIterator,_ForwardIterator>)",
    "insertText": "equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)"
  }
]