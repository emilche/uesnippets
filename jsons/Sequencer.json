[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FMovieSceneClipboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboard"
  },
  {
    "label": "FSequencerPropertyKeyedStatusHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerPropertyKeyedStatusHandler"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "IDetailKeyframeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailKeyframeHandler"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "FSequencerKeyCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerKeyCollection"
  },
  {
    "label": "FObjectBindingTagCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectBindingTagCache"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "ISequencerEditorObjectBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditorObjectBinding"
  },
  {
    "label": "SSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencer"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "UMovieSceneCopyableBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCopyableBinding"
  },
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "UMovieSceneCopyableTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCopyableTrack"
  },
  {
    "label": "UMovieSceneNodeGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneNodeGroup"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UMovieSceneCustomBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCustomBinding"
  },
  {
    "label": "FMovieSceneTimeController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeController"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequencePlaybackParams"
  },
  {
    "label": "FMovieScenePossessable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePossessable"
  },
  {
    "label": "FTransformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformData"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "FEditorViewportViewModifierParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorViewportViewModifierParams"
  },
  {
    "label": "FMovieSceneMarkedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneMarkedFrame"
  },
  {
    "label": "FSidebarDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarDrawerConfig"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInitialValueCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialValueCache"
  },
  {
    "label": "FViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelTypeID"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FSequencerSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelection"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "ITimeSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSlider"
  },
  {
    "label": "FAutoScrubTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoScrubTarget"
  },
  {
    "label": "FCachedViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedViewTarget"
  },
  {
    "label": "FCachedViewState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedViewState"
  },
  {
    "label": "FSequencer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Misc / Guid . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" UObject / WeakInterfacePtr . h \" # include \" Widgets / SWidget . h \" # include \" SequencerNodeTree . h \" # include \" SequencerTimeDomainOverride . h \" # include \" UObject / GCObject . h \" # include \" MovieSceneMarkedFrame . h \" # include \" MovieSceneSequenceID . h \" # include \" IMovieScenePlayer . h \" # include \" ITimeSlider . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Animation / CurveHandle . h \" # include \" Animation / CurveSequence . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" TickableEditorObject . h \" # include \" EditorUndoClient . h \" # include \" KeyPropertyParams . h \" # include \" ISequencer . h \" # include \" ISequencerModule . h \" # include \" ISequencerObjectChangeListener . h \" # include \" SequencerSelectionPreview . h \" # include \" SequencerCustomizationManager . h \" # include \" ITransportControl . h \" # include \" Evaluation / CameraCutPlaybackCapability . h \" # include \" Evaluation / MovieSceneSequenceTransform . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Evaluation / MovieSceneEvaluationTemplateInstance . h \" # include \" LevelEditor . h \" # include \" AcquiredResources . h \" # include \" SequencerSettings . h \" # include \" Curves / RichCurve . h \" # include \" Sections / MovieScene3DTransformSection . h \" # include \" SequencerTimeChangeUndoRedoProxy . h \" # include \" Capabilities / CameraCutViewTargetCacheCapability . h \" # include \" Filters / ISequencerTrackFilters . h \" class AActor ; class ACameraActor ; class APlayerController ; class FLevelEditorViewportClient ; class FMenuBuilder ; class FMovieSceneClipboard ; class FSequencerPropertyKeyedStatusHandler ; class FViewportClient ; class IDetailKeyframeHandler ; class IAssetViewport ; class IMenu ; class FCurveEditor ; class ISequencerEditTool ; class FSequencerKeyCollection ; class FObjectBindingTagCache ; class ISequencerTrackEditor ; class ISequencerEditorObjectBinding ; class SSequencer ; class ISidebarDrawerContent ; class ULevel ; class UMovieSceneSequence ; class UMovieSceneSubSection ; class USequencerSettings ; class UMovieSceneCopyableBinding ; class UMovieSceneCompiledDataManager ; class UMovieSceneCopyableTrack ; class UMovieSceneNodeGroup ; template<class TClass> class TSubclassOf ; class UMovieSceneCustomBinding ; struct FMovieSceneTimeController ; struct FMovieSceneSequencePlaybackParams ; struct FMovieScenePossessable ; struct FTransformData ; struct FKeyAttributes ; struct FNotificationInfo ; struct FEditorViewportViewModifierParams ; struct FMovieSceneMarkedFrame ; struct FSidebarDrawerConfig ; enum class EMapChangeType : uint8 ; enum class ENearestKeyOption : uint8 ; namespace UE { namespace MovieScene { struct FInitialValueCache ; } namespace Sequencer { struct FViewModelTypeID ; class FSequenceModel ; class FSequencerEditorViewModel ; class FViewModel ; class FSequencerSelection ; } } class FSequencer final : public ISequencer,public FGCObject,public FEditorUndoClient,public FTickableEditorObject,public UE::MovieScene::FCameraCutPlaybackCapability,private UE::MovieScene::FCameraCutViewTargetCacheCapability { using FViewModel = UE::Sequencer::FViewModel ; public : const FName SelectionDrawerId ;)",
    "insertText": "FSequencer()"
  },
  {
    "label": "InitSequencer()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitSequencer(const FSequencerInitParams& InitParams, const TSharedRef<ISequencerObjectChangeListener>& InObjectChangeListener, const TArray<FOnCreateTrackEditor>& TrackEditorDelegates, const TArray<FOnCreateEditorObjectBinding>& EditorObjectBindingDelegatess, const TArray<FOnCreateOutlinerColumn>& OutlinerColumnDelegates, const TArray<FOnCreateOutlinerIndicator>& OutlinerIndicatorDelegates)"
  },
  {
    "label": "OnPlaybackContextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackContextChanged()"
  },
  {
    "label": "InitRootSequenceInstance()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitRootSequenceInstance()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (public : FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(TRange<double> NewViewRange, EViewRangeInterpolation Interpolation = EViewRangeInterpolation::Animated)"
  },
  {
    "label": "GetClampRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetClampRange()"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(TRange<double> InNewClampRange)"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (public : TRange<FFrameNumber>)",
    "insertText": "GetSelectionRange()"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(TRange<FFrameNumber> Range)"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd(FFrameTime EndFrame)"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart(FFrameTime StartFrame)"
  },
  {
    "label": "ClearSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionRange()"
  },
  {
    "label": "SelectInSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInSelectionRange(bool bSelectKeys, bool bSelectSections)"
  },
  {
    "label": "SelectForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectForward()"
  },
  {
    "label": "SelectBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBackward()"
  },
  {
    "label": "GetGridMetrics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGridMetrics(const float PhysicalWidth, const double InViewStart, const double InViewEnd, double& OutMajorInterval, int32& OutMinorDivisions)"
  },
  {
    "label": "GetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (public : TRange<FFrameNumber>)",
    "insertText": "GetPlaybackRange()"
  },
  {
    "label": "SetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRange(TRange<FFrameNumber> Range)"
  },
  {
    "label": "SetSelectionRangeToShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeToShot(const bool bNextShot)"
  },
  {
    "label": "SetPlaybackRangeToAllShots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeToAllShots()"
  },
  {
    "label": "IsPlaybackRangeLocked()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsPlaybackRangeLocked()"
  },
  {
    "label": "TogglePlaybackRangeLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlaybackRangeLocked()"
  },
  {
    "label": "FocusPlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusPlaybackTime()"
  },
  {
    "label": "ResetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewRange()"
  },
  {
    "label": "ZoomViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomViewRange(float InZoomDelta)"
  },
  {
    "label": "ZoomInViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomInViewRange()"
  },
  {
    "label": "ZoomOutViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomOutViewRange()"
  },
  {
    "label": "GetNodeTree()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<FSequencerNodeTree>)",
    "insertText": "GetNodeTree()"
  },
  {
    "label": "IsPerspectiveViewportPossessionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPerspectiveViewportPossessionEnabled()"
  },
  {
    "label": "PopToSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopToSequenceInstance(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "DeleteSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSections(const TSet<UMovieSceneSection*> & Sections)"
  },
  {
    "label": "DeleteSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedKeys()"
  },
  {
    "label": "SetInterpTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpTangentMode(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "ToggleInterpTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInterpTangentWeightMode()"
  },
  {
    "label": "SnapToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToFrame()"
  },
  {
    "label": "CanSnapToFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSnapToFrame()"
  },
  {
    "label": "TransformSelectedKeysAndSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformSelectedKeysAndSections(FFrameTime InDeltaTime, float InScale)"
  },
  {
    "label": "TranslateSelectedKeysAndSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysAndSections(bool bTranslateLeft)"
  },
  {
    "label": "StretchTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StretchTime(FFrameTime InDeltaTime)"
  },
  {
    "label": "ShrinkTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkTime(FFrameTime InDeltaTime)"
  },
  {
    "label": "GetTrackEditors()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<ISequencerTrackEditor>>&)",
    "insertText": "GetTrackEditors()"
  },
  {
    "label": "GetMarkedFrames()",
    "kind": "Method",
    "detail": "Function (TArray<FMovieSceneMarkedFrame>)",
    "insertText": "GetMarkedFrames()"
  },
  {
    "label": "GetGlobalMarkedFrames()",
    "kind": "Method",
    "detail": "Function (TArray<FMovieSceneMarkedFrame>)",
    "insertText": "GetGlobalMarkedFrames()"
  },
  {
    "label": "InvalidateGlobalMarkedFramesCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGlobalMarkedFramesCache()"
  },
  {
    "label": "UpdateGlobalMarkedFramesCache()",
    "kind": "Method",
    "detail": "Function (bGlobalMarkedFramesCached = false ; } void)",
    "insertText": "UpdateGlobalMarkedFramesCache()"
  },
  {
    "label": "ToggleShowMarkedFramesGlobally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowMarkedFramesGlobally()"
  },
  {
    "label": "ClearGlobalMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGlobalMarkedFrames()"
  },
  {
    "label": "ToggleMarkAtPlayPosition()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ToggleMarkAtPlayPosition()"
  },
  {
    "label": "StepToNextMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextMark()"
  },
  {
    "label": "StepToPreviousMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousMark()"
  },
  {
    "label": "AreMarkedFramesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMarkedFramesLocked()"
  },
  {
    "label": "ToggleMarkedFramesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMarkedFramesLocked()"
  },
  {
    "label": "SetMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarkedFrame(int32 InMarkIndex, FFrameNumber InFrameNumber)"
  },
  {
    "label": "AddMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMarkedFrame(FFrameNumber FrameNumber)"
  },
  {
    "label": "DeleteMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMarkedFrame(int32 InMarkIndex)"
  },
  {
    "label": "DeleteAllMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllMarkedFrames()"
  },
  {
    "label": "ConvertToSpawnable()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ConvertToSpawnable(TSharedRef<UE::Sequencer::FObjectBindingModel> NodeToBeConverted)"
  },
  {
    "label": "ConvertToPossessable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToPossessable(TSharedRef<UE::Sequencer::FObjectBindingModel> NodeToBeConverted)"
  },
  {
    "label": "ConvertSelectedNodesToSpawnables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedNodesToSpawnables()"
  },
  {
    "label": "ConvertSelectedNodesToPossessables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedNodesToPossessables()"
  },
  {
    "label": "SaveSelectedNodesSpawnableState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SaveSelectedNodesSpawnableState()"
  },
  {
    "label": "OnNewActorsDropped()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnNewActorsDropped(const TArray<UObject*>& DroppedObjects, const TArray<AActor*>& DroppedActors)"
  },
  {
    "label": "OnHandleAssetDropped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnHandleAssetDropped(UObject* DroppedAsset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "OnRequestNodeDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestNodeDeleted(TSharedRef<FViewModel> NodeToBeDeleted, const bool bKeepState)"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit()"
  },
  {
    "label": "GetOverlayFadeCurve()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOverlayFadeCurve()"
  },
  {
    "label": "GetCommandBindings()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandBindings(ESequencerCommandBindings Type = ESequencerCommandBindings::Sequencer)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName(FGuid InBinding)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildAddObjectBindingsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddObjectBindingsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildAddSelectedToFolderMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToFolderMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildAddSelectedToFolderSubMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BuildAddSelectedToFolderSubMenu(FMenuBuilder& InMenuBuilder, TSharedRef<TArray<UMovieSceneFolder*> > InExcludedFolders, UMovieSceneFolder* InFolder, TArray<UMovieSceneFolder*> InChildFolders)"
  },
  {
    "label": "BuildAddSelectedToFolderMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToFolderMenuEntry(FMenuBuilder& InMenuBuilder, TSharedRef<TArray<UMovieSceneFolder*> > InExcludedFolders, UMovieSceneFolder* InFolder)"
  },
  {
    "label": "BuildAddSelectedToNodeGroupMenu()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BuildAddSelectedToNodeGroupMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OnActorsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorsDropped(const TArray<TWeakObjectPtr<AActor> >& Actors)"
  },
  {
    "label": "OnRecord()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecord()"
  },
  {
    "label": "OnPlayForward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlayForward(bool bTogglePlay)"
  },
  {
    "label": "OnPlayBackward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlayBackward(bool bTogglePlay)"
  },
  {
    "label": "OnStepForward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnStepForward(FFrameNumber Increment = FFrameNumber(1))"
  },
  {
    "label": "OnStepBackward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnStepBackward(FFrameNumber Increment = FFrameNumber(1))"
  },
  {
    "label": "OnJumpToStart()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnJumpToStart()"
  },
  {
    "label": "OnJumpToEnd()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnJumpToEnd()"
  },
  {
    "label": "OnCycleLoopMode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCycleLoopMode()"
  },
  {
    "label": "SetPlaybackEnd()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "SetPlaybackEnd()"
  },
  {
    "label": "SetPlaybackStart()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "SetPlaybackStart()"
  },
  {
    "label": "JumpToPreviousKey()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "JumpToPreviousKey()"
  },
  {
    "label": "JumpToNextKey()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "JumpToNextKey()"
  },
  {
    "label": "CanAddTransformKeysForSelectedObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddTransformKeysForSelectedObjects()"
  },
  {
    "label": "OnAddTransformKeysForSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTransformKeysForSelectedObjects(EMovieSceneTransformChannel Channel)"
  },
  {
    "label": "OnTogglePilotCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTogglePilotCamera()"
  },
  {
    "label": "IsPilotCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPilotCamera()"
  },
  {
    "label": "SetLocalTimeLooped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTimeLooped(FFrameTime InTime, const FMovieSceneTransformBreadcrumbs& Breadcrumbs=FMovieSceneTransformBreadcrumbs())"
  },
  {
    "label": "GetLoopMode()",
    "kind": "Method",
    "detail": "Function (ESequencerLoopMode)",
    "insertText": "GetLoopMode()"
  },
  {
    "label": "GetPlaybackMode()",
    "kind": "Method",
    "detail": "Function (EPlaybackMode::Type)",
    "insertText": "GetPlaybackMode()"
  },
  {
    "label": "GetToolkitHost()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolkitHost>)",
    "insertText": "GetToolkitHost()"
  },
  {
    "label": "GetHostCapabilities()",
    "kind": "Method",
    "detail": "Function (} const FSequencerHostCapabilities&)",
    "insertText": "GetHostCapabilities()"
  },
  {
    "label": "GetCurveEditorIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurveEditorIsVisible()"
  },
  {
    "label": "SaveCurrentMovieScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentMovieScene()"
  },
  {
    "label": "SaveCurrentMovieSceneAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentMovieSceneAs()"
  },
  {
    "label": "NavigateForward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NavigateForward()"
  },
  {
    "label": "NavigateBackward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NavigateBackward()"
  },
  {
    "label": "CanNavigateForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNavigateForward()"
  },
  {
    "label": "CanNavigateBackward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNavigateBackward()"
  },
  {
    "label": "GetNavigateForwardTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNavigateForwardTooltip()"
  },
  {
    "label": "GetNavigateBackwardTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNavigateBackwardTooltip()"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(TSharedRef<FViewModel> NodeToBeDeleted, const bool bKeepState)"
  },
  {
    "label": "DeleteSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedNodes(const bool bKeepState)"
  },
  {
    "label": "GetSelectedNodesToMove()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FViewModel>>)",
    "insertText": "GetSelectedNodesToMove()"
  },
  {
    "label": "GetSelectedNodesInFolders()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FViewModel>>)",
    "insertText": "GetSelectedNodesInFolders()"
  },
  {
    "label": "MoveSelectedNodesToNewFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedNodesToNewFolder()"
  },
  {
    "label": "RemoveSelectedNodesFromFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedNodesFromFolders()"
  },
  {
    "label": "MoveNodeToFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodeToFolder(TSharedRef<FViewModel> NodeToMove, UMovieSceneFolder* DestinationFolder)"
  },
  {
    "label": "MoveSelectedNodesToFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedNodesToFolder(UMovieSceneFolder* DestinationFolder)"
  },
  {
    "label": "CopySelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedObjects(TArray<TSharedPtr<UE::Sequencer::FObjectBindingModel>>& ObjectNodes, const TArray<UMovieSceneFolder*>& Folders, FString& ExportedText)"
  },
  {
    "label": "CopySelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedTracks(TArray<TSharedPtr<UE::Sequencer::FViewModel>>& TrackNodes, const TArray<UMovieSceneFolder*>& Folders, FString& ExportedText)"
  },
  {
    "label": "CopySelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedFolders(const TArray<UMovieSceneFolder*>& Folders, FString& ExportedText)"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste(const FString& TextToImport)"
  },
  {
    "label": "DoPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPaste(bool bClearSelection = false)"
  },
  {
    "label": "PasteTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteTracks(const FString& TextToImport, UMovieSceneFolder* ParentFolder, const TArray<UMovieSceneFolder*>& InFolders, TArray<FNotificationInfo>& PasteErrors, bool bClearSelection = false)"
  },
  {
    "label": "PasteSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteSections(const FString& TextToImport, TArray<FNotificationInfo>& PasteErrors)"
  },
  {
    "label": "PasteObjectBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteObjectBindings(const FString& TextToImport, UMovieSceneFolder* ParentFolder, const TArray<UMovieSceneFolder*>& InFolders, TArray<FNotificationInfo>& PasteErrors, bool bClearSelection = false)"
  },
  {
    "label": "ToggleNodeLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNodeLocked()"
  },
  {
    "label": "IsNodeLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeLocked()"
  },
  {
    "label": "GroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupSelectedSections()"
  },
  {
    "label": "CanGroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGroupSelectedSections()"
  },
  {
    "label": "UngroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UngroupSelectedSections()"
  },
  {
    "label": "CanUngroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUngroupSelectedSections()"
  },
  {
    "label": "CanSetKeyTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetKeyTime()"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime()"
  },
  {
    "label": "OnSetKeyTimeTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetKeyTimeTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "CanRekey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRekey()"
  },
  {
    "label": "Rekey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rekey()"
  },
  {
    "label": "SelectKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectKey(UMovieSceneSection* InSection, TSharedPtr<UE::Sequencer::FChannelModel> InChannel, FKeyHandle KeyHandle, bool bToggle)"
  },
  {
    "label": "SynchronizeExternalSelectionWithSequencerSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeExternalSelectionWithSequencerSelection()"
  },
  {
    "label": "SynchronizeSequencerSelectionWithExternalSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeSequencerSelectionWithExternalSelection()"
  },
  {
    "label": "SelectNodesByPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodesByPath(const TSet<FString>& NodePaths)"
  },
  {
    "label": "IsBindingVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindingVisible(const FMovieSceneBinding& InBinding)"
  },
  {
    "label": "IsTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrackVisible(const UMovieSceneTrack* InTrack)"
  },
  {
    "label": "OnNodePathChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodePathChanged(const FString& OldPath, const FString& NewPath)"
  },
  {
    "label": "OnSelectedNodesOnlyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesOnlyChanged()"
  },
  {
    "label": "OnTimeDisplayFormatChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeDisplayFormatChanged()"
  },
  {
    "label": "BuildCustomContextMenuForGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCustomContextMenuForGuid(FMenuBuilder& MenuBuilder, FGuid ObjectBinding)"
  },
  {
    "label": "SetSectionColorTint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionColorTint(TArray<UMovieSceneSection*> Sections, FColor ColorTint)"
  },
  {
    "label": "CopySelection()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CopySelection()"
  },
  {
    "label": "CutSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelection()"
  },
  {
    "label": "DuplicateSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelection()"
  },
  {
    "label": "CopySelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedKeys()"
  },
  {
    "label": "CutSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedKeys()"
  },
  {
    "label": "CopySelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedSections()"
  },
  {
    "label": "CutSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedSections()"
  },
  {
    "label": "GetClipboardStack()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FMovieSceneClipboard>>&)",
    "insertText": "GetClipboardStack()"
  },
  {
    "label": "OnClipboardUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClipboardUsed(TSharedPtr<FMovieSceneClipboard> Clipboard)"
  },
  {
    "label": "FixPossessableObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixPossessableObjectClass()"
  },
  {
    "label": "FixPossessableObjectClassInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixPossessableObjectClassInternal(UMovieSceneSequence* Sequence, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "RebindPossessableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebindPossessableReferences()"
  },
  {
    "label": "StartAutoscroll()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StartAutoscroll(float UnitsPerS)"
  },
  {
    "label": "StopAutoscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAutoscroll()"
  },
  {
    "label": "UpdateAutoScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoScroll(double NewTime, float ThresholdPercentage = 0.025f)"
  },
  {
    "label": "AutoScrubToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoScrubToTime(FFrameTime DestinationTime)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : FSequencerTimeChangedHandler TimeUndoRedoHandler ; public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Close()"
  },
  {
    "label": "OnCloseEvent()",
    "kind": "Method",
    "detail": "Function (FOnCloseEvent&)",
    "insertText": "OnCloseEvent()"
  },
  {
    "label": "GetRootTemplateID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceIDRef)",
    "insertText": "GetRootTemplateID()"
  },
  {
    "label": "GetSubSequenceHierarchy()",
    "kind": "Method",
    "detail": "Function (} const TArray<FMovieSceneSequenceID>&)",
    "insertText": "GetSubSequenceHierarchy()"
  },
  {
    "label": "GetRootMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetRootMovieSceneSequence()"
  },
  {
    "label": "GetFocusedMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetFocusedMovieSceneSequence()"
  },
  {
    "label": "GetFocusedMovieSceneSequenceTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetFocusedMovieSceneSequenceTransform()"
  },
  {
    "label": "GetLocalTimeWarpTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetLocalTimeWarpTransform()"
  },
  {
    "label": "GetGlobalPlaybackWarpTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetGlobalPlaybackWarpTransform()"
  },
  {
    "label": "GetEvaluationTemplate()",
    "kind": "Method",
    "detail": "Function (FMovieSceneRootEvaluationTemplateInstance&)",
    "insertText": "GetEvaluationTemplate()"
  },
  {
    "label": "FocusSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusSequenceInstance(UMovieSceneSubSection& InSubSection)"
  },
  {
    "label": "GetSubSequenceRange()",
    "kind": "Method",
    "detail": "Function (TOptional<TRange<FFrameNumber>>)",
    "insertText": "GetSubSequenceRange()"
  },
  {
    "label": "GetViewModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::FSequencerEditorViewModel>)",
    "insertText": "GetViewModel()"
  },
  {
    "label": "SuppressAutoEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressAutoEvaluation(UMovieSceneSequence* Sequence, const FGuid& InSequenceSignature)"
  },
  {
    "label": "GetAutoChangeMode()",
    "kind": "Method",
    "detail": "Function (EAutoChangeMode)",
    "insertText": "GetAutoChangeMode()"
  },
  {
    "label": "SetAutoChangeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoChangeMode(EAutoChangeMode AutoChangeMode)"
  },
  {
    "label": "GetAllowEditsMode()",
    "kind": "Method",
    "detail": "Function (EAllowEditsMode)",
    "insertText": "GetAllowEditsMode()"
  },
  {
    "label": "SetAllowEditsMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowEditsMode(EAllowEditsMode AllowEditsMode)"
  },
  {
    "label": "GetKeyGroupMode()",
    "kind": "Method",
    "detail": "Function (EKeyGroupMode)",
    "insertText": "GetKeyGroupMode()"
  },
  {
    "label": "SetKeyGroupMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyGroupMode(EKeyGroupMode)"
  },
  {
    "label": "GetKeyInterpolation()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation)",
    "insertText": "GetKeyInterpolation()"
  },
  {
    "label": "SetKeyInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpolation(EMovieSceneKeyInterpolation)"
  },
  {
    "label": "GetInfiniteKeyAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInfiniteKeyAreas()"
  },
  {
    "label": "SetInfiniteKeyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInfiniteKeyAreas(bool bInfiniteKeyAreas)"
  },
  {
    "label": "GetAutoSetTrackDefaults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAutoSetTrackDefaults()"
  },
  {
    "label": "GetLocalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetLocalTime()"
  },
  {
    "label": "GetGlobalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetGlobalTime()"
  },
  {
    "label": "GetUnwarpedLocalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetUnwarpedLocalTime()"
  },
  {
    "label": "GetLocalLoopIndex()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetLocalLoopIndex()"
  },
  {
    "label": "OverrideTimeDomain()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::FTimeDomainOverride)",
    "insertText": "OverrideTimeDomain(UE::Sequencer::ETimeDomain NewDomain)"
  },
  {
    "label": "SetLocalTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTime(FFrameTime Time, ESnapTimeMode SnapTimeMode = ESnapTimeMode::STM_None, bool bEvaluate = true)"
  },
  {
    "label": "SetLocalTimeDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTimeDirectly(FFrameTime NewTime, bool bEvaluate = true)"
  },
  {
    "label": "GetLastEvaluatedLocalTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetLastEvaluatedLocalTime()"
  },
  {
    "label": "SetGlobalTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTime(FFrameTime Time, bool bEvaluate = true)"
  },
  {
    "label": "PlayTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams)"
  },
  {
    "label": "SnapSequencerTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapSequencerTime(FFrameTime& InOutScrubTime)"
  },
  {
    "label": "RestorePlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePlaybackSpeed()"
  },
  {
    "label": "SnapToClosestPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToClosestPlaybackSpeed()"
  },
  {
    "label": "RequestInvalidateCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInvalidateCachedData()"
  },
  {
    "label": "RequestEvaluate()",
    "kind": "Method",
    "detail": "Function (bNeedsInvalidateCachedData = true ; } void)",
    "insertText": "RequestEvaluate()"
  },
  {
    "label": "ForceEvaluate()",
    "kind": "Method",
    "detail": "Function (bNeedsEvaluate = true ; } void)",
    "insertText": "ForceEvaluate()"
  },
  {
    "label": "SetPerspectiveViewportPossessionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerspectiveViewportPossessionEnabled(bool bEnabled)"
  },
  {
    "label": "SetPerspectiveViewportCameraCutEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerspectiveViewportCameraCutEnabled(bool bEnabled)"
  },
  {
    "label": "RenderMovie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMovie(const TArray<UMovieSceneCinematicShotSection*>& InSections)"
  },
  {
    "label": "RecreateCurveEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCurveEditor()"
  },
  {
    "label": "EnterSilentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterSilentMode()"
  },
  {
    "label": "ExitSilentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitSilentMode()"
  },
  {
    "label": "IsInSilentMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSilentMode()"
  },
  {
    "label": "GetHandleToObject()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetHandleToObject(UObject* Object, bool bCreateHandleIfMissing = true, const FName& CreatedFolderName = NAME_None)"
  },
  {
    "label": "GetObjectChangeListener()",
    "kind": "Method",
    "detail": "Function (ISequencerObjectChangeListener&)",
    "insertText": "GetObjectChangeListener()"
  },
  {
    "label": "GetPropertyKeyedStatusHandler()",
    "kind": "Method",
    "detail": "Function (ISequencerPropertyKeyedStatusHandler&)",
    "insertText": "GetPropertyKeyedStatusHandler()"
  },
  {
    "label": "NotifyMovieSceneDataChangedInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotifyMovieSceneDataChangedInternal()"
  },
  {
    "label": "NotifyMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NotifyMovieSceneDataChanged(EMovieSceneDataChangeType DataChangeType)"
  },
  {
    "label": "RefreshTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTree()"
  },
  {
    "label": "UpdatePlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackRange()"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(float InPlaybackSpeed)"
  },
  {
    "label": "GetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlaybackSpeed()"
  },
  {
    "label": "AddEmptyBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AddEmptyBinding()"
  },
  {
    "label": "ConvertToSpawnable()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "ConvertToSpawnable(FGuid Guid)"
  },
  {
    "label": "AddSubSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubSequence(UMovieSceneSequence* Sequence)"
  },
  {
    "label": "CanKeyProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanKeyProperty(FCanKeyPropertyParams CanKeyPropertyParams)"
  },
  {
    "label": "KeyProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyProperty(FKeyPropertyParams KeyPropertyParams)"
  },
  {
    "label": "GetPropertyKeyedStatus()",
    "kind": "Method",
    "detail": "Function (EPropertyKeyedStatus)",
    "insertText": "GetPropertyKeyedStatus(const IPropertyHandle& PropertyHandle)"
  },
  {
    "label": "GetSelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedTracks(TArray<UMovieSceneTrack*>& OutSelectedTracks)"
  },
  {
    "label": "GetSelectedTrackRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedTrackRows(TArray<TPair<UMovieSceneTrack*, int32>>& OutSelectedTrackRows)"
  },
  {
    "label": "GetSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedSections(TArray<UMovieSceneSection*>& OutSelectedSections)"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedFolders(TArray<UMovieSceneFolder*>& OutSelectedFolders)"
  },
  {
    "label": "GetSelectedKeyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedKeyAreas(TArray<const IKeyArea*>& OutSelectedKeyAreas, bool bIncludeSelectedKeys = true)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedObjects(TArray<FGuid>& OutObjects)"
  },
  {
    "label": "SelectObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectObject(FGuid ObjectBinding)"
  },
  {
    "label": "SelectTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTrack(UMovieSceneTrack* Track)"
  },
  {
    "label": "SelectSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSection(UMovieSceneSection* Section)"
  },
  {
    "label": "SelectFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFolder(UMovieSceneFolder* Folder)"
  },
  {
    "label": "SelectByPropertyPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByPropertyPaths(const TArray<FString>& InPropertyPaths)"
  },
  {
    "label": "SelectByChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByChannels(UMovieSceneSection* Section, TArrayView<const FMovieSceneChannelHandle> InChannels, bool bSelectParentInstead, bool bSelect)"
  },
  {
    "label": "SelectByChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByChannels(UMovieSceneSection* Section, const TArray<FName>& InChannelNames, bool bSelectParentInstead, bool bSelect)"
  },
  {
    "label": "SelectByNthCategoryNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByNthCategoryNode(UMovieSceneSection* Section, int Index, bool bSelect)"
  },
  {
    "label": "EmptySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySelection()"
  },
  {
    "label": "ThrobKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrobKeySelection()"
  },
  {
    "label": "ThrobSectionSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrobSectionSelection()"
  },
  {
    "label": "OnGlobalTimeChanged()",
    "kind": "Method",
    "detail": "Function (FOnGlobalTimeChanged&)",
    "insertText": "OnGlobalTimeChanged()"
  },
  {
    "label": "GetPlaybackContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPlaybackContext()"
  },
  {
    "label": "GetPlaybackClient()",
    "kind": "Method",
    "detail": "Function (IMovieScenePlaybackClient*)",
    "insertText": "GetPlaybackClient()"
  },
  {
    "label": "GetEventContexts()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "GetEventContexts()"
  },
  {
    "label": "OnActorAddedToSequencer()",
    "kind": "Method",
    "detail": "Function (FOnActorAddedToSequencer&)",
    "insertText": "OnActorAddedToSequencer()"
  },
  {
    "label": "OnPreSave()",
    "kind": "Method",
    "detail": "Function (FOnPreSave&)",
    "insertText": "OnPreSave()"
  },
  {
    "label": "OnPostSave()",
    "kind": "Method",
    "detail": "Function (FOnPostSave&)",
    "insertText": "OnPostSave()"
  },
  {
    "label": "OnActivateSequence()",
    "kind": "Method",
    "detail": "Function (FOnActivateSequence&)",
    "insertText": "OnActivateSequence()"
  },
  {
    "label": "OnCameraCut()",
    "kind": "Method",
    "detail": "Function (FOnCameraCut&)",
    "insertText": "OnCameraCut()"
  },
  {
    "label": "GetNumericTypeInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<INumericTypeInterface<double>>)",
    "insertText": "GetNumericTypeInterface()"
  },
  {
    "label": "MakeTransportControls()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTransportControls(bool bExtended)"
  },
  {
    "label": "OnPlay()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlay(bool bTogglePlay = true)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "MakeTimeRange()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTimeRange(const TSharedRef<SWidget>& InnerContent, bool bShowWorkingRange, bool bShowViewRange, bool bShowPlaybackRange)"
  },
  {
    "label": "FindSpawnedObjectOrTemplate()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindSpawnedObjectOrTemplate(const FGuid& BindingId)"
  },
  {
    "label": "MakeNewSpawnable()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "MakeNewSpawnable(UObject& SourceObject, UActorFactory* ActorFactory = nullptr, bool bSetupDefaults = true)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "ExternalSelectionHasChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalSelectionHasChanged()"
  },
  {
    "label": "GetTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerTrackEditor>)",
    "insertText": "GetTrackEditor(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "ObjectImplicitlyAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectImplicitlyAdded(UObject* InObject)"
  },
  {
    "label": "ObjectImplicitlyRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectImplicitlyRemoved(UObject* InObject)"
  },
  {
    "label": "GetSequencerSettings()",
    "kind": "Method",
    "detail": "Function (USequencerSettings*)",
    "insertText": "GetSequencerSettings()"
  },
  {
    "label": "GetTopTimeSliderWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ITimeSlider>)",
    "insertText": "GetTopTimeSliderWidget()"
  },
  {
    "label": "ResetTimeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimeController()"
  },
  {
    "label": "SetTrackFilterEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackFilterEnabled(const FText& InFilterName, bool bInEnabled)"
  },
  {
    "label": "IsTrackFilterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrackFilterEnabled(const FText& InFilterName)"
  },
  {
    "label": "GetTrackFilterNames()",
    "kind": "Method",
    "detail": "Function (TArray<FText>)",
    "insertText": "GetTrackFilterNames()"
  },
  {
    "label": "TrackSupportsConditions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackSupportsConditions(const UMovieSceneTrack* Track)"
  },
  {
    "label": "NotifyBindingsChanged()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NotifyBindingsChanged()"
  },
  {
    "label": "SetViewportSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSettings(const TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "GetViewportSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewportSettings(TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (EMovieScenePlayerStatus::Type)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackStatus(EMovieScenePlayerStatus::Type InPlaybackStatus)"
  },
  {
    "label": "GetSpawnRegister()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSpawnRegister&)",
    "insertText": "GetSpawnRegister()"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::FSequencerSelection&)",
    "insertText": "GetSelection()"
  },
  {
    "label": "GetSelectionPreview()",
    "kind": "Method",
    "detail": "Function (FSequencerSelectionPreview&)",
    "insertText": "GetSelectionPreview()"
  },
  {
    "label": "GetTimeBounds()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetTimeBounds()"
  },
  {
    "label": "GetRootTimeBounds()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetRootTimeBounds()"
  },
  {
    "label": "GetSupportedCustomBindingTypes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TSubclassOf<UMovieSceneCustomBinding>>)",
    "insertText": "GetSupportedCustomBindingTypes()"
  },
  {
    "label": "ShouldUpdateCameraCut()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldUpdateCameraCut()"
  },
  {
    "label": "ShouldRestoreEditorViewports()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRestoreEditorViewports()"
  },
  {
    "label": "GetCameraBlendPlayRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraBlendPlayRate()"
  },
  {
    "label": "OnCameraCutUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCameraCutUpdated(const UE::MovieScene::FOnCameraCutUpdatedParams& Params)"
  },
  {
    "label": "EvaluateInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "EvaluateInternal(FMovieSceneEvaluationRange InRange, bool bHasJumped = false)"
  },
  {
    "label": "ResetPerMovieSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPerMovieSceneData()"
  },
  {
    "label": "RefreshUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshUI()"
  },
  {
    "label": "UpdateTimeBoundsToFocusedMovieScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeBoundsToFocusedMovieScene()"
  },
  {
    "label": "GetFilteringShotsTimeBounds()",
    "kind": "Method",
    "detail": "Function (TRange<float>)",
    "insertText": "GetFilteringShotsTimeBounds()"
  },
  {
    "label": "OnClampRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClampRangeChanged(TRange<double> NewClampRange)"
  },
  {
    "label": "OnGetNearestKey()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "OnGetNearestKey(FFrameTime InTime, ENearestKeyOption NearestKeyOption)"
  },
  {
    "label": "OnScrubPositionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScrubPositionChanged(FFrameTime NewScrubPosition, bool bScrubbing, bool bEvaluate)"
  },
  {
    "label": "OnBeginScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginScrubbing()"
  },
  {
    "label": "OnEndScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndScrubbing()"
  },
  {
    "label": "OnPlaybackRangeBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackRangeBeginDrag()"
  },
  {
    "label": "OnPlaybackRangeEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackRangeEndDrag()"
  },
  {
    "label": "OnSelectionRangeBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionRangeBeginDrag()"
  },
  {
    "label": "OnSelectionRangeEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionRangeEndDrag()"
  },
  {
    "label": "OnMarkBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarkBeginDrag()"
  },
  {
    "label": "OnMarkEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarkEndDrag()"
  },
  {
    "label": "GetScrubPosition()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetScrubPosition()"
  },
  {
    "label": "GetFrameTimeText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFrameTimeText()"
  },
  {
    "label": "GetScrubPositionParent()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "GetScrubPositionParent()"
  },
  {
    "label": "GetScrubPositionParentChain()",
    "kind": "Method",
    "detail": "Function (TArray<FMovieSceneSequenceID>)",
    "insertText": "GetScrubPositionParentChain()"
  },
  {
    "label": "OnScrubPositionParentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScrubPositionParentChanged(FMovieSceneSequenceID InScrubPositionParent)"
  },
  {
    "label": "ScrollIntoView()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ScrollIntoView(float InLocalTime)"
  },
  {
    "label": "CalculateAutoscrollEncroachment()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "CalculateAutoscrollEncroachment(double NewTime, float ThresholdPercentage = 0.1f)"
  },
  {
    "label": "OnToggleAutoScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAutoScroll()"
  },
  {
    "label": "IsAutoScrollEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoScrollEnabled()"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "GetCurrentAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetCurrentAsset()"
  },
  {
    "label": "GetKeysFromSelection()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetKeysFromSelection(TUniquePtr<FSequencerKeyCollection>& KeyCollection, float DuplicateThresholdSeconds)"
  },
  {
    "label": "GetKeyCollection()",
    "kind": "Method",
    "detail": "Function (FSequencerKeyCollection*)",
    "insertText": "GetKeyCollection()"
  },
  {
    "label": "GetAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllKeys(TUniquePtr<FSequencerKeyCollection>& KeyCollection, float DuplicateThresoldSeconds)"
  },
  {
    "label": "DeleteSelectedItems()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DeleteSelectedItems()"
  },
  {
    "label": "TogglePlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlay()"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart()"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "ShuttleForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuttleForward()"
  },
  {
    "label": "ShuttleBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuttleBackward()"
  },
  {
    "label": "StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForward()"
  },
  {
    "label": "StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackward()"
  },
  {
    "label": "JumpForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpForward()"
  },
  {
    "label": "JumpBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpBackward()"
  },
  {
    "label": "StepToNextShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextShot()"
  },
  {
    "label": "StepToPreviousShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousShot()"
  },
  {
    "label": "ToggleExpandCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodes()"
  },
  {
    "label": "ToggleExpandCollapseNodesAndDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodesAndDescendants()"
  },
  {
    "label": "ExpandAllNodes()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ExpandAllNodes()"
  },
  {
    "label": "CollapseAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseAllNodes()"
  },
  {
    "label": "SortAllNodesAndDescendants()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SortAllNodesAndDescendants()"
  },
  {
    "label": "AddSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedActors()"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKey()"
  },
  {
    "label": "GenericTextEntryModeless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericTextEntryModeless(const FText& DialogText, const FText& DefaultText, FOnTextCommitted OnTextComitted)"
  },
  {
    "label": "CloseEntryPopupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupMenu()"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimSection(bool bTrimLeft)"
  },
  {
    "label": "TrimOrExtendSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimOrExtendSection(bool bTrimOrExtendLeft)"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSection()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "MatchesContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesContext(const FTransactionContext& InContext, const TArray<TPair<UObject*, FTransactionObjectEvent>>& TransactionObjects)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "HandleSelectedOutlinerNodesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectedOutlinerNodesChanged()"
  },
  {
    "label": "AddNodeGroupsCollectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeGroupsCollectionChangedDelegate()"
  },
  {
    "label": "RemoveNodeGroupsCollectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNodeGroupsCollectionChangedDelegate()"
  },
  {
    "label": "OnNodeGroupsCollectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeGroupsCollectionChanged()"
  },
  {
    "label": "AddSelectedNodesToNewNodeGroup()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddSelectedNodesToNewNodeGroup()"
  },
  {
    "label": "AddSelectedNodesToExistingNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedNodesToExistingNodeGroup(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "AddNodesToExistingNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodesToExistingNodeGroup(TArrayView<const UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>> InItems, UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "ClearFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFilters()"
  },
  {
    "label": "AddFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFolder()"
  },
  {
    "label": "UpdateLevelViewportClientsActorLocks()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateLevelViewportClientsActorLocks()"
  },
  {
    "label": "RenderMovieInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMovieInternal(TRange<FFrameNumber> Range, bool bSetFrameOverrides = false)"
  },
  {
    "label": "OnLoadRecordedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadRecordedData()"
  },
  {
    "label": "OnAddBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddBinding(const FGuid& ObjectBinding, UMovieScene* MovieScene)"
  },
  {
    "label": "OnAddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTrack(const TWeakObjectPtr<UMovieSceneTrack>& InTrack, const FGuid& ObjectBinding)"
  },
  {
    "label": "CalculateSelectedFolderAndPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSelectedFolderAndPath(TArray<UMovieSceneFolder*>& OutSelectedParentFolders, FString& OutNewNodePath)"
  },
  {
    "label": "CreateFoldersRecursively()",
    "kind": "Method",
    "detail": "Function (UMovieSceneFolder*)",
    "insertText": "CreateFoldersRecursively(const TArray<FName>& FolderPaths, int32 FolderPathIndex, UMovieScene* OwningMovieScene, UMovieSceneFolder* ParentFolder, TArrayView<UMovieSceneFolder* const> FoldersToSearch)"
  },
  {
    "label": "OnCreateTransportSetPlaybackStart()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportSetPlaybackStart()"
  },
  {
    "label": "OnCreateTransportJumpToPreviousKey()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportJumpToPreviousKey()"
  },
  {
    "label": "OnCreateTransportJumpToNextKey()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportJumpToNextKey()"
  },
  {
    "label": "OnCreateTransportSetPlaybackEnd()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportSetPlaybackEnd()"
  },
  {
    "label": "SelectInSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInSelectionRange(const TSharedPtr<UE::Sequencer::FViewModel>& Item, const TRange<FFrameNumber>& SelectionRange, bool bSelectKeys, bool bSelectSections)"
  },
  {
    "label": "OnCreateTransportLoopMode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportLoopMode()"
  },
  {
    "label": "OnCreateTransportRecord()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportRecord()"
  },
  {
    "label": "UpdateSubSequenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubSequenceData()"
  },
  {
    "label": "UpdateSequencerCustomizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSequencerCustomizations(const UMovieSceneSequence* PreviousFocusedSequence)"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "GetConstructionScriptActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstructionScriptActors(UMovieScene*, FMovieSceneSequenceIDRef SequenceID, TSet<TWeakObjectPtr<AActor> >& BoundActors, TArray < TPair<FMovieSceneSequenceID, FGuid> >& BoundGuids)"
  },
  {
    "label": "IsViewingRootSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewingRootSequence()"
  },
  {
    "label": "RecompileDirtyDirectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecompileDirtyDirectors()"
  },
  {
    "label": "ToggleAsyncEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAsyncEvaluation()"
  },
  {
    "label": "UsesAsyncEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesAsyncEvaluation()"
  },
  {
    "label": "ToggleDynamicWeighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDynamicWeighting()"
  },
  {
    "label": "UsesDynamicWeighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesDynamicWeighting()"
  },
  {
    "label": "UpdateCachedPlaybackContextAndClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedPlaybackContextAndClient()"
  },
  {
    "label": "UpdateCachedCameraActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedCameraActors()"
  },
  {
    "label": "FindClosestPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestPlaybackSpeed(float InPlaybackSpeed, bool bExactOnly = false)"
  },
  {
    "label": "RestorePlaybackSpeedAfterPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePlaybackSpeedAfterPlay()"
  },
  {
    "label": "FindUnspawnedObjectGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindUnspawnedObjectGuid(UObject& InObject)"
  },
  {
    "label": "GetDisplayRateDeltaFrameCount()",
    "kind": "Method",
    "detail": "Function (public : double)",
    "insertText": "GetDisplayRateDeltaFrameCount()"
  },
  {
    "label": "GetScrubStyle()",
    "kind": "Method",
    "detail": "Function (ESequencerScrubberStyle)",
    "insertText": "GetScrubStyle()"
  },
  {
    "label": "MakePlayTimeDisplay()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlayTimeDisplay(const TSharedRef<INumericTypeInterface<double>>& InNumericTypeInterface)"
  },
  {
    "label": "IsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportSelectionLimited()"
  },
  {
    "label": "SetViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSelectionLimited(const bool bInSelectionLimited)"
  },
  {
    "label": "IsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectSelectableInViewport(UObject* const InObject)"
  },
  {
    "label": "OnViewportSelectionLimitedChanged()",
    "kind": "Method",
    "detail": "Function (ISequencer::FOnViewportSelectionLimitedChanged&)",
    "insertText": "OnViewportSelectionLimitedChanged()"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawer(FSidebarDrawerConfig&& InDrawerConfig)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawer(const FName InDrawerId)"
  },
  {
    "label": "RegisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawerSection(const FName InDrawerId, const TSharedPtr<ISidebarDrawerContent>& InSection)"
  },
  {
    "label": "UnregisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "ToggleSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebar()"
  },
  {
    "label": "IsSidebarVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSidebarVisible()"
  },
  {
    "label": "ToggleSidebarSelectionDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarSelectionDrawer()"
  },
  {
    "label": "ToggleSidebarDrawerDocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarDrawerDocked()"
  },
  {
    "label": "GetFilterInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerTrackFilters>)",
    "insertText": "GetFilterInterface()"
  },
  {
    "label": "GetFilterBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSequencerFilterBar>)",
    "insertText": "GetFilterBar()"
  },
  {
    "label": "UpdateTimeBases()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateTimeBases()"
  },
  {
    "label": "ToggleLimitViewportSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLimitViewportSelection()"
  },
  {
    "label": "ForEachSubSequenceRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSubSequenceRecursively(UMovieSceneSequence* const InSequence, const TFunctionRef<bool(UMovieSceneSequence* const InCurrentSequence)>& InFunction)"
  },
  {
    "label": "GetSidebarSelectionDrawerToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSidebarSelectionDrawerToolTipText()"
  },
  {
    "label": "FAutoScrubTarget()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<USequencerSettings> Settings ; TSharedRef<FUICommandList> SequencerCommandBindings ; TSharedRef<FUICommandList> SequencerSharedBindings ; TSharedRef<FUICommandList> CurveEditorSharedBindings ; TArray<TSharedPtr<ISequencerTrackEditor>> TrackEditors ; TMap<FObjectKey,TSharedPtr<ISequencerTrackEditor>> TrackEditorsByType ; TMap<FName,TSharedPtr<UE::Sequencer::IOutlinerColumn>> OutlinerColumns ; TMap<FName,TSharedPtr<UE::Sequencer::IOutlinerIndicatorBuilder>> OutlinerIndicators ; TArray<TSharedPtr<ISequencerEditorObjectBinding>> ObjectBindings ; TSharedPtr<ISequencerObjectChangeListener> ObjectChangeListener ; TSharedPtr<FSequencerPropertyKeyedStatusHandler> PropertyKeyedStatusHandler ; TSharedPtr<SSequencer> SequencerWidget ; TSharedPtr<FMovieSceneSpawnRegister> SpawnRegister ; TWeakPtr<IToolkitHost> ToolkitHost ; FSequencerHostCapabilities HostCapabilities ; TArray<FOnSequencerPaste> OnPaste ; TWeakObjectPtr<UMovieSceneSequence> RootSequence ; FMovieSceneRootEvaluationTemplateInstance RootTemplateInstance ; TArray<FMovieSceneSequenceID> ActiveTemplateIDs ; TArray<FMovieSceneSequenceID> TemplateIDForwardStack ; TArray<FMovieSceneSequenceID> TemplateIDBackwardStack ; TArray<bool> ActiveTemplateStates ; FMovieSceneSequenceTransform GlobalPlaybackWarpTransform ; FMovieSceneSequenceTransform RootToUnwarpedLocalTransform ; FMovieSceneSequenceTransform RootToWarpedLocalTransform ; FMovieSceneSequenceTransform LocalToWarpedLocalTransform ; FMovieSceneTransformBreadcrumbs CurrentTimeBreadcrumbs ; FMovieSceneTransformBreadcrumbs ScrubStartBreadcrumbs ; FFrameTime ScrubLinearOffset ; TRange<double> TargetViewRange ; TRange<double> LastViewRange ; int32 CurrentSpeedIndex ; int32 SpeedIndexBeforePlay ; TRange<double> ViewRangeBeforeZoom ; TOptional<float> AutoscrollOffset ; TOptional<float> AutoscrubOffset ; struct FAutoScrubTarget {)",
    "insertText": "FAutoScrubTarget(FFrameTime InDestinationTime, FFrameTime InSourceTime, double InStartTime) : DestinationTime(InDestinationTime) , SourceTime(InSourceTime) , StartTime(InStartTime)"
  },
  {
    "label": "OnCurveModelDisplayChanged()",
    "kind": "Method",
    "detail": "Function (} FFrameTime DestinationTime ; FFrameTime SourceTime ; double StartTime ; } ; TOptional<FAutoScrubTarget> AutoScrubTarget ; TOptional<TTuple<FFrameTime,UE::Sequencer::ETimeDomain>> PendingScrubPosition ; FCurveSequence ZoomAnimation ; FCurveHandle ZoomCurve ; FCurveSequence OverlayAnimation ; FCurveHandle OverlayCurve ; FCurveSequence RecordingAnimation ; EMovieScenePlayerStatus::Type PlaybackState ; FMovieScenePlaybackPosition PlayPosition ; float PlaybackSpeed ; float PlaybackSpeedBeforePlay ; float ShuttleMultiplier ; bool bPerspectiveViewportPossessionEnabled ; bool bPerspectiveViewportCameraCutEnabled ; bool bIsEditingWithinLevelEditor ; bool bReadOnly ; ESequencerScrubberStyle ScrubStyle ; TWeakPtr<IMenu> EntryPopupMenu ; bool bNeedTreeRefresh ; FSequencerSelectionPreview SelectionPreview ; TSharedRef<FSequencerNodeTree> NodeTree ; FOnCloseEvent OnCloseEventDelegate ; FOnGlobalTimeChanged OnGlobalTimeChangedDelegate ; FOnPlayEvent OnPlayDelegate ; FOnStopEvent OnStopDelegate ; FOnRecordEvent OnRecordDelegate ; FOnTreeViewChanged OnTreeViewChangedDelegate ; FOnBeginScrubbingEvent OnBeginScrubbingDelegate ; FOnEndScrubbingEvent OnEndScrubbingDelegate ; FOnMovieSceneDataChanged OnMovieSceneDataChangedDelegate ; FOnChannelChanged OnChannelChangedDelegate ; FOnMovieSceneBindingsChanged OnMovieSceneBindingsChangedDelegate ; FOnMovieSceneBindingsPasted OnMovieSceneBindingsPastedDelegate ; FOnSelectionChangedObjectGuids OnSelectionChangedObjectGuidsDelegate ; FOnSelectionChangedTracks OnSelectionChangedTracksDelegate ; FOnCurveDisplayChanged OnCurveDisplayChanged ; FOnSelectionChangedSections OnSelectionChangedSectionsDelegate ; FOnActorAddedToSequencer OnActorAddedToSequencerEvent ; FOnCameraCut OnCameraCutEvent ; FOnPreSave OnPreSaveEvent ; FOnPostSave OnPostSaveEvent ; FOnActivateSequence OnActivateSequenceEvent ; void)",
    "insertText": "OnCurveModelDisplayChanged(FCurveModel *InCurveModel, bool bDisplayed, const FCurveEditor* InCurveEditor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 SilentModeCount ; bool bUpdatingSequencerSelection ; bool bUpdatingExternalSelection ; TOptional<double> OldMaxTickRate ; TSharedPtr<FMovieSceneTimeController> TimeController ; struct FCachedViewTarget { TWeakObjectPtr<APlayerController> PlayerController ; TWeakObjectPtr<AActor> ViewTarget ; } ; TArray<FCachedViewTarget> PrePossessionViewTargets ; TAttribute<UObject*> PlaybackContextAttribute ; TAttribute<IMovieScenePlaybackClient*> PlaybackClientAttribute ; TWeakObjectPtr<UObject> CachedPlaybackContext ; TWeakInterfacePtr<IMovieScenePlaybackClient> CachedPlaybackClient ; TAttribute<TArray<UObject*>> EventContextsAttribute ; TArray<TWeakObjectPtr<UObject>> CachedEventContexts ; UE::Sequencer::ETimeDomain TimeOperationDomain ; bool bNeedsEvaluate ; bool bNeedsInvalidateCachedData ; FAcquiredResources AcquiredResources ; bool bGlobalMarkedFramesCached ; TArray<FMovieSceneMarkedFrame> GlobalMarkedFramesCache ; TOptional<FFrameTime> PauseOnFrame ; TRange<FFrameNumber> SubSequenceRange ; TObjectPtr<UMovieSceneCompiledDataManager> CompiledDataManager ; TSharedPtr<FMovieSceneEntitySystemRunner> Runner ; TSharedPtr<UE::MovieScene::IDeferredSignedObjectChangeHandler> DeferredSignedObjectChangeHandler ; TMap<FName,TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FCachedViewState()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FSequencerKeyCollection> SelectedKeyCollection ; TSharedPtr<UE::MovieScene::FInitialValueCache> InitialValueCache ; TOptional<TTuple<TWeakObjectPtr<UMovieSceneSequence>,FGuid>> SuppressAutoEvalSignature ; TUniquePtr<FObjectBindingTagCache> ObjectBindingTagCache ; TSharedPtr<UE::Sequencer::FSequencerEditorViewModel> ViewModel ; struct FCachedViewState {)",
    "insertText": "FCachedViewState() : bValid(false) , bIsViewportUIHidden(false)"
  },
  {
    "label": "StoreViewState()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "StoreViewState()"
  },
  {
    "label": "RestoreViewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreViewState()"
  }
]