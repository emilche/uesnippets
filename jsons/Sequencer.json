[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FMovieSceneClipboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboard"
  },
  {
    "label": "FSequencerPropertyKeyedStatusHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerPropertyKeyedStatusHandler"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "IDetailKeyframeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailKeyframeHandler"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "FSequencerKeyCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerKeyCollection"
  },
  {
    "label": "FObjectBindingTagCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectBindingTagCache"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "ISequencerEditorObjectBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditorObjectBinding"
  },
  {
    "label": "SSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencer"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "UMovieSceneCopyableBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCopyableBinding"
  },
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "UMovieSceneCopyableTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCopyableTrack"
  },
  {
    "label": "UMovieSceneNodeGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneNodeGroup"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UMovieSceneCustomBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCustomBinding"
  },
  {
    "label": "FMovieSceneTimeController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeController"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequencePlaybackParams"
  },
  {
    "label": "FMovieScenePossessable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePossessable"
  },
  {
    "label": "FTransformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformData"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "FEditorViewportViewModifierParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorViewportViewModifierParams"
  },
  {
    "label": "FMovieSceneMarkedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneMarkedFrame"
  },
  {
    "label": "FSidebarDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarDrawerConfig"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInitialValueCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialValueCache"
  },
  {
    "label": "FViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelTypeID"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FSequencerSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelection"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "don",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "don"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "ITimeSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSlider"
  },
  {
    "label": "FAutoScrubTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoScrubTarget"
  },
  {
    "label": "FCachedViewTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedViewTarget"
  },
  {
    "label": "FCachedViewState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedViewState"
  },
  {
    "label": "InitSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSequencer(const FSequencerInitParams& InitParams, const TSharedRef<ISequencerObjectChangeListener>& InObjectChangeListener, const TArray<FOnCreateTrackEditor>& TrackEditorDelegates, const TArray<FOnCreateEditorObjectBinding>& EditorObjectBindingDelegatess, const TArray<FOnCreateOutlinerColumn>& OutlinerColumnDelegates, const TArray<FOnCreateOutlinerIndicator>& OutlinerIndicatorDelegates)"
  },
  {
    "label": "OnPlaybackContextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackContextChanged()"
  },
  {
    "label": "InitRootSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRootSequenceInstance()"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(TRange<FFrameNumber> Range)"
  },
  {
    "label": "ClearSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionRange()"
  },
  {
    "label": "SelectInSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInSelectionRange(bool bSelectKeys, bool bSelectSections)"
  },
  {
    "label": "SelectForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectForward()"
  },
  {
    "label": "SelectBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBackward()"
  },
  {
    "label": "SetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRange(TRange<FFrameNumber> Range)"
  },
  {
    "label": "SetSelectionRangeToShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeToShot(const bool bNextShot)"
  },
  {
    "label": "SetPlaybackRangeToAllShots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeToAllShots()"
  },
  {
    "label": "TogglePlaybackRangeLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlaybackRangeLocked()"
  },
  {
    "label": "FocusPlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusPlaybackTime()"
  },
  {
    "label": "ResetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewRange()"
  },
  {
    "label": "ZoomViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomViewRange(float InZoomDelta)"
  },
  {
    "label": "ZoomInViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomInViewRange()"
  },
  {
    "label": "ZoomOutViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomOutViewRange()"
  },
  {
    "label": "DeleteSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSections(const TSet<UMovieSceneSection*> & Sections)"
  },
  {
    "label": "DeleteSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedKeys()"
  },
  {
    "label": "SetInterpTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpTangentMode(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "ToggleInterpTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInterpTangentWeightMode()"
  },
  {
    "label": "SnapToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToFrame()"
  },
  {
    "label": "TransformSelectedKeysAndSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformSelectedKeysAndSections(FFrameTime InDeltaTime, float InScale)"
  },
  {
    "label": "TranslateSelectedKeysAndSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysAndSections(bool bTranslateLeft)"
  },
  {
    "label": "StretchTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StretchTime(FFrameTime InDeltaTime)"
  },
  {
    "label": "ShrinkTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkTime(FFrameTime InDeltaTime)"
  },
  {
    "label": "UpdateGlobalMarkedFramesCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalMarkedFramesCache()"
  },
  {
    "label": "ToggleShowMarkedFramesGlobally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowMarkedFramesGlobally()"
  },
  {
    "label": "ClearGlobalMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGlobalMarkedFrames()"
  },
  {
    "label": "ToggleMarkAtPlayPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMarkAtPlayPosition()"
  },
  {
    "label": "StepToNextMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextMark()"
  },
  {
    "label": "StepToPreviousMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousMark()"
  },
  {
    "label": "ToggleMarkedFramesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMarkedFramesLocked()"
  },
  {
    "label": "SetMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarkedFrame(int32 InMarkIndex, FFrameNumber InFrameNumber)"
  },
  {
    "label": "AddMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMarkedFrame(FFrameNumber FrameNumber)"
  },
  {
    "label": "DeleteMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMarkedFrame(int32 InMarkIndex)"
  },
  {
    "label": "DeleteAllMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllMarkedFrames()"
  },
  {
    "label": "ConvertToSpawnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToSpawnable(TSharedRef<UE::Sequencer::FObjectBindingModel> NodeToBeConverted)"
  },
  {
    "label": "ConvertToPossessable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToPossessable(TSharedRef<UE::Sequencer::FObjectBindingModel> NodeToBeConverted)"
  },
  {
    "label": "ConvertSelectedNodesToSpawnables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedNodesToSpawnables()"
  },
  {
    "label": "ConvertSelectedNodesToPossessables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectedNodesToPossessables()"
  },
  {
    "label": "SaveSelectedNodesSpawnableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSelectedNodesSpawnableState()"
  },
  {
    "label": "OnNewActorsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewActorsDropped(const TArray<UObject*>& DroppedObjects, const TArray<AActor*>& DroppedActors)"
  },
  {
    "label": "OnHandleAssetDropped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnHandleAssetDropped( UObject* DroppedAsset, const FGuid& TargetObjectGuid )"
  },
  {
    "label": "OnRequestNodeDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestNodeDeleted( TSharedRef<FViewModel> NodeToBeDeleted, const bool bKeepState )"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit()"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildAddObjectBindingsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddObjectBindingsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildAddSelectedToFolderMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToFolderMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildAddSelectedToFolderSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToFolderSubMenu(FMenuBuilder& InMenuBuilder, TSharedRef<TArray<UMovieSceneFolder*> > InExcludedFolders, UMovieSceneFolder* InFolder, TArray<UMovieSceneFolder*> InChildFolders)"
  },
  {
    "label": "BuildAddSelectedToFolderMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToFolderMenuEntry(FMenuBuilder& InMenuBuilder, TSharedRef<TArray<UMovieSceneFolder*> > InExcludedFolders, UMovieSceneFolder* InFolder)"
  },
  {
    "label": "BuildAddSelectedToNodeGroupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddSelectedToNodeGroupMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OnActorsDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorsDropped( const TArray<TWeakObjectPtr<AActor> >& Actors )"
  },
  {
    "label": "OnRecord()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecord()"
  },
  {
    "label": "OnPlayForward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlayForward(bool bTogglePlay)"
  },
  {
    "label": "OnPlayBackward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlayBackward(bool bTogglePlay)"
  },
  {
    "label": "OnJumpToStart()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnJumpToStart()"
  },
  {
    "label": "OnJumpToEnd()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnJumpToEnd()"
  },
  {
    "label": "OnCycleLoopMode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCycleLoopMode()"
  },
  {
    "label": "SetPlaybackEnd()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "SetPlaybackEnd()"
  },
  {
    "label": "SetPlaybackStart()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "SetPlaybackStart()"
  },
  {
    "label": "JumpToPreviousKey()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "JumpToPreviousKey()"
  },
  {
    "label": "JumpToNextKey()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "JumpToNextKey()"
  },
  {
    "label": "OnAddTransformKeysForSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTransformKeysForSelectedObjects(EMovieSceneTransformChannel Channel)"
  },
  {
    "label": "OnTogglePilotCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTogglePilotCamera()"
  },
  {
    "label": "SaveCurrentMovieScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentMovieScene()"
  },
  {
    "label": "SaveCurrentMovieSceneAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentMovieSceneAs()"
  },
  {
    "label": "NavigateForward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NavigateForward()"
  },
  {
    "label": "NavigateBackward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NavigateBackward()"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(TSharedRef<FViewModel> NodeToBeDeleted, const bool bKeepState)"
  },
  {
    "label": "DeleteSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedNodes(const bool bKeepState)"
  },
  {
    "label": "GetSelectedNodesToMove()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FViewModel>>)",
    "insertText": "GetSelectedNodesToMove()"
  },
  {
    "label": "GetSelectedNodesInFolders()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FViewModel>>)",
    "insertText": "GetSelectedNodesInFolders()"
  },
  {
    "label": "MoveSelectedNodesToNewFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedNodesToNewFolder()"
  },
  {
    "label": "RemoveSelectedNodesFromFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedNodesFromFolders()"
  },
  {
    "label": "MoveNodeToFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodeToFolder(TSharedRef<FViewModel> NodeToMove, UMovieSceneFolder* DestinationFolder)"
  },
  {
    "label": "MoveSelectedNodesToFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedNodesToFolder(UMovieSceneFolder* DestinationFolder)"
  },
  {
    "label": "CopySelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedObjects(TArray<TSharedPtr<UE::Sequencer::FObjectBindingModel>>& ObjectNodes, const TArray<UMovieSceneFolder*>& Folders, /*out*/ FString& ExportedText)"
  },
  {
    "label": "CopySelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedTracks(TArray<TSharedPtr<UE::Sequencer::FViewModel>>& TrackNodes, const TArray<UMovieSceneFolder*>& Folders, /*out*/ FString& ExportedText)"
  },
  {
    "label": "CopySelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedFolders(const TArray<UMovieSceneFolder*>& Folders, /*out*/ FString& ExportedText)"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste(const FString& TextToImport)"
  },
  {
    "label": "DoPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPaste(bool bClearSelection = false)"
  },
  {
    "label": "PasteTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteTracks(const FString& TextToImport, UMovieSceneFolder* ParentFolder, const TArray<UMovieSceneFolder*>& InFolders, TArray<FNotificationInfo>& PasteErrors, bool bClearSelection = false)"
  },
  {
    "label": "PasteSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteSections(const FString& TextToImport, TArray<FNotificationInfo>& PasteErrors)"
  },
  {
    "label": "PasteObjectBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteObjectBindings(const FString& TextToImport, UMovieSceneFolder* ParentFolder, const TArray<UMovieSceneFolder*>& InFolders, TArray<FNotificationInfo>& PasteErrors, bool bClearSelection = false)"
  },
  {
    "label": "ToggleNodeLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNodeLocked()"
  },
  {
    "label": "GroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupSelectedSections()"
  },
  {
    "label": "UngroupSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UngroupSelectedSections()"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime()"
  },
  {
    "label": "OnSetKeyTimeTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetKeyTimeTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "Rekey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rekey()"
  },
  {
    "label": "SelectKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectKey(UMovieSceneSection* InSection, TSharedPtr<UE::Sequencer::FChannelModel> InChannel, FKeyHandle KeyHandle, bool bToggle)"
  },
  {
    "label": "SynchronizeExternalSelectionWithSequencerSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeExternalSelectionWithSequencerSelection()"
  },
  {
    "label": "SynchronizeSequencerSelectionWithExternalSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeSequencerSelectionWithExternalSelection()"
  },
  {
    "label": "SelectNodesByPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodesByPath(const TSet<FString>& NodePaths)"
  },
  {
    "label": "IsBindingVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBindingVisible(const FMovieSceneBinding& InBinding)"
  },
  {
    "label": "IsTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrackVisible(const UMovieSceneTrack* InTrack)"
  },
  {
    "label": "OnNodePathChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodePathChanged(const FString& OldPath, const FString& NewPath)"
  },
  {
    "label": "OnSelectedNodesOnlyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesOnlyChanged()"
  },
  {
    "label": "OnTimeDisplayFormatChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeDisplayFormatChanged()"
  },
  {
    "label": "BuildCustomContextMenuForGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCustomContextMenuForGuid(FMenuBuilder& MenuBuilder, FGuid ObjectBinding)"
  },
  {
    "label": "SetSectionColorTint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionColorTint(TArray<UMovieSceneSection*> Sections, FColor ColorTint)"
  },
  {
    "label": "CopySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelection()"
  },
  {
    "label": "CutSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelection()"
  },
  {
    "label": "DuplicateSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelection()"
  },
  {
    "label": "CopySelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedKeys()"
  },
  {
    "label": "CutSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedKeys()"
  },
  {
    "label": "CopySelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedSections()"
  },
  {
    "label": "CutSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedSections()"
  },
  {
    "label": "OnClipboardUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClipboardUsed(TSharedPtr<FMovieSceneClipboard> Clipboard)"
  },
  {
    "label": "FixPossessableObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixPossessableObjectClass()"
  },
  {
    "label": "FixPossessableObjectClassInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixPossessableObjectClassInternal(UMovieSceneSequence* Sequence, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "RebindPossessableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebindPossessableReferences()"
  },
  {
    "label": "StartAutoscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAutoscroll(float UnitsPerS)"
  },
  {
    "label": "StopAutoscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAutoscroll()"
  },
  {
    "label": "UpdateAutoScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutoScroll(double NewTime, float ThresholdPercentage = 0.025f)"
  },
  {
    "label": "AutoScrubToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoScrubToTime(FFrameTime DestinationTime)"
  },
  {
    "label": "IsPerspectiveViewportCameraCutEnabled()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsPerspectiveViewportCameraCutEnabled()"
  },
  {
    "label": "EvaluateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateInternal(FMovieSceneEvaluationRange InRange, bool bHasJumped = false)"
  },
  {
    "label": "ResetPerMovieSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPerMovieSceneData()"
  },
  {
    "label": "RefreshUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshUI()"
  },
  {
    "label": "UpdateTimeBoundsToFocusedMovieScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeBoundsToFocusedMovieScene()"
  },
  {
    "label": "OnClampRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClampRangeChanged( TRange<double> NewClampRange )"
  },
  {
    "label": "OnPlaybackRangeBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackRangeBeginDrag()"
  },
  {
    "label": "OnPlaybackRangeEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlaybackRangeEndDrag()"
  },
  {
    "label": "OnSelectionRangeBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionRangeBeginDrag()"
  },
  {
    "label": "OnSelectionRangeEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionRangeEndDrag()"
  },
  {
    "label": "OnMarkBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarkBeginDrag()"
  },
  {
    "label": "OnMarkEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarkEndDrag()"
  },
  {
    "label": "OnScrubPositionParentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScrubPositionParentChanged(FMovieSceneSequenceID InScrubPositionParent)"
  },
  {
    "label": "ScrollIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollIntoView(float InLocalTime)"
  },
  {
    "label": "OnToggleAutoScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAutoScroll()"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "DeleteSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedItems()"
  },
  {
    "label": "TogglePlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlay()"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart()"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "ShuttleForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuttleForward()"
  },
  {
    "label": "ShuttleBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuttleBackward()"
  },
  {
    "label": "StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForward()"
  },
  {
    "label": "StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackward()"
  },
  {
    "label": "JumpForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpForward()"
  },
  {
    "label": "JumpBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpBackward()"
  },
  {
    "label": "StepToNextShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextShot()"
  },
  {
    "label": "StepToPreviousShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousShot()"
  },
  {
    "label": "ToggleExpandCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodes()"
  },
  {
    "label": "ToggleExpandCollapseNodesAndDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodesAndDescendants()"
  },
  {
    "label": "ExpandAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAllNodes()"
  },
  {
    "label": "CollapseAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseAllNodes()"
  },
  {
    "label": "SortAllNodesAndDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAllNodesAndDescendants()"
  },
  {
    "label": "AddSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedActors()"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKey()"
  },
  {
    "label": "GenericTextEntryModeless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericTextEntryModeless(const FText& DialogText, const FText& DefaultText, FOnTextCommitted OnTextComitted)"
  },
  {
    "label": "CloseEntryPopupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupMenu()"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimSection(bool bTrimLeft)"
  },
  {
    "label": "TrimOrExtendSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimOrExtendSection(bool bTrimOrExtendLeft)"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSection()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "HandleSelectedOutlinerNodesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectedOutlinerNodesChanged()"
  },
  {
    "label": "AddNodeGroupsCollectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeGroupsCollectionChangedDelegate()"
  },
  {
    "label": "RemoveNodeGroupsCollectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNodeGroupsCollectionChangedDelegate()"
  },
  {
    "label": "OnNodeGroupsCollectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeGroupsCollectionChanged()"
  },
  {
    "label": "AddSelectedNodesToNewNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedNodesToNewNodeGroup()"
  },
  {
    "label": "AddSelectedNodesToExistingNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedNodesToExistingNodeGroup(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "AddNodesToExistingNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodesToExistingNodeGroup(TArrayView<const UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>> InItems, UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "ClearFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFilters()"
  },
  {
    "label": "AddFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFolder()"
  },
  {
    "label": "UpdateLevelViewportClientsActorLocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelViewportClientsActorLocks()"
  },
  {
    "label": "OnLoadRecordedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadRecordedData()"
  },
  {
    "label": "CalculateSelectedFolderAndPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSelectedFolderAndPath(TArray<UMovieSceneFolder*>& OutSelectedParentFolders, FString& OutNewNodePath)"
  },
  {
    "label": "OnCreateTransportSetPlaybackStart()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportSetPlaybackStart()"
  },
  {
    "label": "OnCreateTransportJumpToPreviousKey()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportJumpToPreviousKey()"
  },
  {
    "label": "OnCreateTransportJumpToNextKey()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportJumpToNextKey()"
  },
  {
    "label": "OnCreateTransportSetPlaybackEnd()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportSetPlaybackEnd()"
  },
  {
    "label": "SelectInSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInSelectionRange(const TSharedPtr<UE::Sequencer::FViewModel>& Item, const TRange<FFrameNumber>& SelectionRange, bool bSelectKeys, bool bSelectSections)"
  },
  {
    "label": "OnCreateTransportLoopMode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportLoopMode()"
  },
  {
    "label": "OnCreateTransportRecord()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnCreateTransportRecord()"
  },
  {
    "label": "UpdateSubSequenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubSequenceData()"
  },
  {
    "label": "UpdateSequencerCustomizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSequencerCustomizations(const UMovieSceneSequence* PreviousFocusedSequence)"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "GetConstructionScriptActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstructionScriptActors(UMovieScene*, FMovieSceneSequenceIDRef SequenceID, TSet<TWeakObjectPtr<AActor> >& BoundActors, TArray < TPair<FMovieSceneSequenceID, FGuid> >& BoundGuids)"
  },
  {
    "label": "RecompileDirtyDirectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompileDirtyDirectors()"
  },
  {
    "label": "ToggleAsyncEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAsyncEvaluation()"
  },
  {
    "label": "UsesAsyncEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesAsyncEvaluation()"
  },
  {
    "label": "ToggleDynamicWeighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDynamicWeighting()"
  },
  {
    "label": "UsesDynamicWeighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesDynamicWeighting()"
  },
  {
    "label": "UpdateCachedPlaybackContextAndClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedPlaybackContextAndClient()"
  },
  {
    "label": "UpdateCachedCameraActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedCameraActors()"
  },
  {
    "label": "RestorePlaybackSpeedAfterPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePlaybackSpeedAfterPlay()"
  },
  {
    "label": "FindUnspawnedObjectGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindUnspawnedObjectGuid(UObject& InObject)"
  },
  {
    "label": "MakePlayTimeDisplay()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePlayTimeDisplay(const TSharedRef<INumericTypeInterface<double>>& InNumericTypeInterface)"
  },
  {
    "label": "ToggleSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebar()"
  },
  {
    "label": "ToggleSidebarSelectionDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarSelectionDrawer()"
  },
  {
    "label": "ToggleSidebarDrawerDocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarDrawerDocked()"
  },
  {
    "label": "UpdateTimeBases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeBases()"
  },
  {
    "label": "ToggleLimitViewportSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleLimitViewportSelection()"
  },
  {
    "label": "OnCurveModelDisplayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveModelDisplayChanged(FCurveModel *InCurveModel, bool bDisplayed, const FCurveEditor* InCurveEditor)"
  },
  {
    "label": "StoreViewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreViewState()"
  },
  {
    "label": "RestoreViewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreViewState()"
  }
]