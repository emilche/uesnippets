[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_LOW_LEVEL_TESTS # include \" TestMacros / Assertions . h \" # elif)",
    "insertText": "defined(WITH_AUTOMATION_TESTS) || (WITH_DEV_AUTOMATION_TESTS || WITH_PERF_AUTOMATION_TESTS) #include \"Misc/AssertionMacros.h\" #include \"Misc/AutomationTest.h\" #include \"Tests/EnsureScope.h\" #include \"Tests/CheckScope.h\" #define REQUIRE_ENSURE(...) INTERNAL_UE_ENSURE( \"REQUIRE_ENSURE\", DO_ENSURE, #__VA_ARGS__, __VA_ARGS__ ) #define REQUIRE_ENSURE_MSG(msg, ...) INTERNAL_UE_ENSURE_MSG(msg, \"REQUIRE_ENSURE\", DO_ENSURE, #__VA_ARGS__, __VA_ARGS__ ) #define CHECK_ENSURE(...) INTERNAL_UE_ENSURE( \"CHECK_ENSURE\", DO_ENSURE, Catch::ResultDisposition::ContinueOnFailure, #__VA_ARGS__, __VA_ARGS__ ) #define CHECK_ENSURE_MSG(msg, ...) INTERNAL_UE_ENSURE_MSG(msg, \"CHECK_ENSURE\", DO_ENSURE, Catch::ResultDisposition::ContinueOnFailure, #__VA_ARGS__, __VA_ARGS__ ) #define REQUIRE_CHECK(...) INTERNAL_UE_CHECK( \"REQUIRE_CHECK\", DO_CHECK, #__VA_ARGS__, __VA_ARGS__ ) #define REQUIRE_CHECK_MSG(msg, ...) INTERNAL_UE_CHECK_MSG(msg, \"REQUIRE_CHECK\", DO_CHECK, #__VA_ARGS__, __VA_ARGS__ ) #define REQUIRE_CHECK_SLOW(...) INTERNAL_UE_CHECK( \"REQUIRE_CHECK_SLOW\", DO_GUARD_SLOW, #__VA_ARGS__, __VA_ARGS__ ) #define REQUIRE_CHECK_SLOW_MSG(msg, ...) INTERNAL_UE_CHECK_MSG(msg, \"REQUIRE_CHECK_SLOW\", DO_GUARD_SLOW, #__VA_ARGS__, __VA_ARGS__ ) #define INTERNAL_UE_ENSURE( macroName, doEnsure, ensureExpr, ...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (\\ FEnsureScope scope ; \\ static_cast<)",
    "insertText": "void(__VA_ARGS__)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (\\ bool bEncounteredEnsure = scope .)",
    "insertText": "GetCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(doEnsure && !bEncounteredEnsure) \\ FAutomationTestFramework::Get().GetCurrentTest()->AddError(TEXT(\"Expected failure of `ensure` not received.\"))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) \\ #define INTERNAL_UE_ENSURE_MSG(msg, macroName, doEnsure, ensureExpr, ...)"
  },
  {
    "label": "scope()",
    "kind": "Method",
    "detail": "Function (\\ FEnsureScope)",
    "insertText": "scope(msg)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(doEnsure && !bEncounteredEnsure) \\ FAutomationTestFramework::Get().GetCurrentTest()->AddError(TEXT(\"Expected failure of `ensure` with message %s not received\", msg))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) \\ #define INTERNAL_UE_CHECK(macroName, doCheck, checkExpr, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(doCheck && !bEncounteredEnsure) \\ FAutomationTestFramework::Get().GetCurrentTest()->AddError(TEXT(\"Expected failure of `check` not received\"))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) \\ #define INTERNAL_UE_CHECK_MSG(msg, macroName, doCheck, checkExpr, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(doCheck && !bEncounteredEnsure) \\ FAutomationTestFramework::Get().GetCurrentTest()->AddError(TEXT(\"Expected failure of `check` containing message %s not received\", msg))"
  }
]