[
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_CWISE_UNARY_OP_H # define EIGEN_SPARSE_CWISE_UNARY_OP_H namespace Eigen { namespace internal { template<UnaryOp,ArgType> struct unary_evaluator<CwiseUnaryOp<UnaryOp,ArgType>,IteratorBased> : public evaluator_base<CwiseUnaryOp<UnaryOp,ArgType>> { public : typedef CwiseUnaryOp<UnaryOp,ArgType> XprType ; class InnerIterator ; enum { CoeffReadCost =)",
    "insertText": "int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<UnaryOp>::Cost)"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unary_evaluator(const XprType& op) : m_functor(op.functor()), m_argImpl(op.nestedExpression())"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : typedef evaluator<ArgType>::InnerIterator EvalIterator ; const UnaryOp m_functor ; evaluator<ArgType> m_argImpl ; } ; template<UnaryOp,ArgType> class unary_evaluator<CwiseUnaryOp<UnaryOp,ArgType>,IteratorBased>::InnerIterator : public unary_evaluator<CwiseUnaryOp<UnaryOp,ArgType>,IteratorBased>::EvalIterator { protected : typedef XprType::Scalar Scalar ; typedef unary_evaluator<CwiseUnaryOp<UnaryOp,ArgType>,IteratorBased>::EvalIterator Base ; public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const unary_evaluator& unaryOp, Index outer) : Base(unaryOp.m_argImpl,outer), m_functor(unaryOp.m_functor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} protected : const UnaryOp m_functor ; private : Scalar&)",
    "insertText": "valueRef()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} ; template<ViewOp,ArgType> struct unary_evaluator<CwiseUnaryView<ViewOp,ArgType>,IteratorBased> : public evaluator_base<CwiseUnaryView<ViewOp,ArgType>> { public : typedef CwiseUnaryView<ViewOp,ArgType> XprType ; class InnerIterator ; enum { CoeffReadCost =)",
    "insertText": "int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<ViewOp>::Cost)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<ViewOp>::Cost)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : const ViewOp m_functor ; } ; } template<Derived> EIGEN_STRONG_INLINE Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const Scalar& other)"
  },
  {
    "label": "thisEval()",
    "kind": "Method",
    "detail": "Function (typedef internal::evaluator<Derived>::InnerIterator EvalIterator ; internal::evaluator<Derived>)",
    "insertText": "thisEval(derived())"
  }
]