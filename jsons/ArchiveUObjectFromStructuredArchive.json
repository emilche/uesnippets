[
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FArchiveUObjectFromStructuredArchiveImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveUObjectFromStructuredArchiveImpl"
  },
  {
    "label": "FArchiveUObjectFromStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveUObjectFromStructuredArchive"
  },
  {
    "label": "FArchiveUObjectFromStructuredArchiveImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" HAL / Platform . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / FileRegions . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" UObject / LazyObjectPtr . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / SoftObjectPtr . h \" # include \" UObject / WeakObjectPtr . h \" struct FObjectPtr ; # if WITH_TEXT_ARCHIVE_SUPPORT class FArchiveUObjectFromStructuredArchiveImpl : public FArchiveFromStructuredArchiveImpl { using Super = FArchiveFromStructuredArchiveImpl ; public :)",
    "insertText": "FArchiveUObjectFromStructuredArchiveImpl(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FArchive::operator<<; FArchive&)",
    "insertText": "operator(FLazyObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FWeakObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FObjectPtr& Value)"
  },
  {
    "label": "PushFileRegionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFileRegionType(EFileRegionType Type)"
  },
  {
    "label": "PopFileRegionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFileRegionType()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (private : int64 FileRegionStart = 0 ; EFileRegionType CurrentFileRegionType = EFileRegionType::None ; TArray<FLazyObjectPtr> LazyObjectPtrs ; TArray<FWeakObjectPtr> WeakObjectPtrs ; TArray<FSoftObjectPtr> SoftObjectPtrs ; TArray<FSoftObjectPath> SoftObjectPaths ; TMap<FLazyObjectPtr,int32> LazyObjectPtrToIndex ; TMap<FWeakObjectPtr,int32> WeakObjectPtrToIndex ; TMap<FSoftObjectPtr,int32> SoftObjectPtrToIndex ; TMap<FSoftObjectPath,int32> SoftObjectPathToIndex ; bool)",
    "insertText": "Finalize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "FArchiveUObjectFromStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} ; class FArchiveUObjectFromStructuredArchive { public :)",
    "insertText": "FArchiveUObjectFromStructuredArchive(FStructuredArchive::FSlot InSlot) : Impl(InSlot)"
  },
  {
    "label": "GetArchive()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "GetArchive()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Close()"
  },
  {
    "label": "FArchiveUObjectFromStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} private : FArchiveUObjectFromStructuredArchiveImpl Impl ; } ; # else class FArchiveUObjectFromStructuredArchive : public FArchiveFromStructuredArchive { public :)",
    "insertText": "FArchiveUObjectFromStructuredArchive(FStructuredArchive::FSlot InSlot) : FArchiveFromStructuredArchive(InSlot)"
  }
]