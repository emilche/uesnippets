[
  {
    "label": "FSweepParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSweepParameters"
  },
  {
    "label": "FPhysicsObjectCollisionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectCollisionInterface"
  },
  {
    "label": "FShapeOverlapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapeOverlapData"
  },
  {
    "label": "FPhysicsObjectCollisionInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Interface / SQTypes . h \" # include \" Chaos / GeometryQueries . h \" # include \" Chaos / PhysicsObject . h \" # include \" Chaos / PhysicsObjectInterface . h \" # include \" Framework / Threading . h \" namespace Chaos { struct FSweepParameters { bool bSweepComplex = false ; bool bComputeMTD = false ; } ; template<EThreadContext Id> class FPhysicsObjectCollisionInterface { public :)",
    "insertText": "FPhysicsObjectCollisionInterface(FReadPhysicsObjectInterface<Id>& InInterface) : Interface(InInterface)"
  },
  {
    "label": "PhysicsObjectOverlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PhysicsObjectOverlap(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex)"
  },
  {
    "label": "PhysicsObjectOverlap()",
    "kind": "Method",
    "detail": "Function (template<TOverlapHit> bool)",
    "insertText": "PhysicsObjectOverlap(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, TArray<TOverlapHit>& OutOverlaps)"
  },
  {
    "label": "PhysicsObjectOverlapWithMTD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PhysicsObjectOverlapWithMTD(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, FMTDInfo& OutMTD)"
  },
  {
    "label": "PhysicsObjectOverlapWithAABB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PhysicsObjectOverlapWithAABB(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, const FVector& Tolerance, FBox& OutOverlap)"
  },
  {
    "label": "PhysicsObjectOverlapWithAABBSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PhysicsObjectOverlapWithAABBSize(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, const FVector& Tolerance, FVector& OutOverlapSize)"
  },
  {
    "label": "PhysicsObjectOverlapWithAABBIntersections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PhysicsObjectOverlapWithAABBIntersections(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, const FVector& Tolerance, TArray<FBox>& Intersections)"
  },
  {
    "label": "LineTrace()",
    "kind": "Method",
    "detail": "Function (template<TRaycastHit> bool)",
    "insertText": "LineTrace(TArrayView<const FConstPhysicsObjectHandle> InObjects, const FVector& WorldStart, const FVector& WorldEnd, bool bTraceComplex, TRaycastHit& OutBestHit)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ; OutBestHit . Distance = TNumericLimits<float)",
    "insertText": "Max()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FVector Delta = WorldEnd - WorldStart ; const FReal DeltaMag = Delta .)",
    "insertText": "Size()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform WorldTM = Interface .)",
    "insertText": "GetTransform(Object)"
  },
  {
    "label": "InverseTransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVector LocalStart = WorldTM .)",
    "insertText": "InverseTransformPositionNoScale(WorldStart)"
  },
  {
    "label": "InverseTransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVector LocalDelta = WorldTM .)",
    "insertText": "InverseTransformVectorNoScale(Delta)"
  },
  {
    "label": "VisitEveryShape()",
    "kind": "Method",
    "detail": "Function (Interface .)",
    "insertText": "VisitEveryShape({ &Object, 1 }, [this, &bHit, &WorldTM, &LocalStart, &LocalDelta, &Delta, DeltaMag, &BestWorldTM, bTraceComplex, &OutBestHit](const FConstPhysicsObjectHandle IterObject, TThreadShapeInstance<Id>* Shape) { check(Shape); FCollisionFilterData ShapeFilter = Shape->GetQueryData(); const bool bShapeIsComplex = (ShapeFilter.Word3 & static_cast<uint8>(EFilterFlags::ComplexCollision)) != 0; const bool bShapeIsSimple = (ShapeFilter.Word3 & static_cast<uint8>(EFilterFlags::SimpleCollision)) != 0; if ((bTraceComplex && bShapeIsComplex) || (!bTraceComplex && bShapeIsSimple)) { FReal Distance; FVec3 LocalPosition; FVec3 LocalNormal; int32 FaceIndex; const bool bRaycastHit = Shape->GetGeometry()->Raycast( LocalStart, LocalDelta / DeltaMag, DeltaMag, 0, Distance, LocalPosition, LocalNormal, FaceIndex ); if (bRaycastHit) { if (Distance < OutBestHit.Distance) { bHit = true; BestWorldTM = WorldTM; OutBestHit.Distance = static_cast<float>(Distance); OutBestHit.WorldNormal = LocalNormal; OutBestHit.WorldPosition = LocalPosition; OutBestHit.Shape = Shape; OutBestHit.Actor = Interface.GetParticle(IterObject); OutBestHit.FaceIndex = FaceIndex; } } } return false; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bHit)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (OutBestHit . WorldNormal = BestWorldTM .)",
    "insertText": "TransformVectorNoScale(OutBestHit.WorldNormal)"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (OutBestHit . WorldPosition = BestWorldTM .)",
    "insertText": "TransformPositionNoScale(OutBestHit.WorldPosition)"
  },
  {
    "label": "ShapeOverlap()",
    "kind": "Method",
    "detail": "Function (} return bHit ; } template<TOverlapHit> bool)",
    "insertText": "ShapeOverlap(TArrayView<const FConstPhysicsObjectHandle> InObjects, const Chaos::FImplicitObject& InGeom, const FTransform& GeomTransform, TArray<TOverlapHit>& OutOverlaps)"
  },
  {
    "label": "ShapeOverlapWithMTD()",
    "kind": "Method",
    "detail": "Function (} template<TOverlapHit> bool)",
    "insertText": "ShapeOverlapWithMTD(TArrayView<const FConstPhysicsObjectHandle> InObjects, const Chaos::FImplicitObject& InGeom, const FTransform& GeomTransform, TArray<TOverlapHit>& OutOverlaps, FMTDInfo* MTD)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bHasOverlap = false ;)",
    "insertText": "for(const FConstPhysicsObjectHandle Object : InObjects)"
  },
  {
    "label": "VisitEveryShape()",
    "kind": "Method",
    "detail": "Function (Interface .)",
    "insertText": "VisitEveryShape({ &Object, 1 }, [this, &bHasOverlap, &WorldTM, &InGeom, &GeomTransform, &OutOverlaps, MTD](const FConstPhysicsObjectHandle IterObject, TThreadShapeInstance<Id>* Shape) { check(Shape); const bool bOverlap = Chaos::Utilities::CastHelper( InGeom, GeomTransform, [Shape, &WorldTM, MTD](const auto& Downcast, const auto& FullTransformB) { return Chaos::OverlapQuery(*Shape->GetGeometry(), WorldTM, Downcast, FullTransformB, 0, MTD); } ); if (bOverlap) { bHasOverlap = true; TOverlapHit Overlap; Overlap.Shape = Shape; Overlap.Actor = Interface.GetParticle(IterObject); OutOverlaps.Add(Overlap); } return false; })"
  },
  {
    "label": "ShapeSweep()",
    "kind": "Method",
    "detail": "Function (} return bHasOverlap ; } template<TSweepHit> bool)",
    "insertText": "ShapeSweep(TArrayView<const FConstPhysicsObjectHandle> InObjects, const Chaos::FImplicitObject& InGeom, const FTransform& StartTM, const FVector& EndPos, const FSweepParameters& Params, TSweepHit& OutBestHit)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ; const FVector StartPos = StartTM .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "ShapeOverlapWithMTD()",
    "kind": "Method",
    "detail": "Function (TArray<ChaosInterface::TThreadOverlapHit<Id>> OverlapHits ; FMTDInfo MTDInfo ; const bool bOverlap =)",
    "insertText": "ShapeOverlapWithMTD(InObjects, InGeom, StartTM, OverlapHits, &MTDInfo)"
  },
  {
    "label": "VisitEveryShape()",
    "kind": "Method",
    "detail": "Function (Interface .)",
    "insertText": "VisitEveryShape({ &Object, 1 }, [this, &WorldTM, &InGeom, &StartTM, &bHit, &Delta, DeltaMag, &Dir, &OutBestHit, &Params](const FConstPhysicsObjectHandle IterObject, TThreadShapeInstance<Id>* Shape) { check(Shape); FCollisionFilterData ShapeFilter = Shape->GetQueryData(); const bool bShapeIsComplex = (ShapeFilter.Word3 & static_cast<uint8>(EFilterFlags::ComplexCollision)) != 0; const bool bShapeIsSimple = (ShapeFilter.Word3 & static_cast<uint8>(EFilterFlags::SimpleCollision)) != 0; if ((Params.bSweepComplex && bShapeIsComplex) || (!Params.bSweepComplex && bShapeIsSimple)) { FVec3 WorldPosition; FVec3 WorldNormal; FReal Distance; int32 FaceIdx; FVec3 FaceNormal; const bool bShapeHit = Chaos::Utilities::CastHelper( InGeom, StartTM, [Shape, &WorldTM, &Dir, DeltaMag, &Distance, &WorldPosition, &WorldNormal, &FaceIdx, &FaceNormal, &Params](const auto& Downcast, const auto& FullTransformB) { return Chaos::SweepQuery(*Shape->GetGeometry(), WorldTM, Downcast, FullTransformB, Dir, DeltaMag, Distance, WorldPosition, WorldNormal, FaceIdx, FaceNormal, 0.f, Params.bComputeMTD); } ); const float FloatDistance = static_cast<float>(Distance); if (bShapeHit && FloatDistance < OutBestHit.Distance) { bHit = true; OutBestHit.Shape = Shape; OutBestHit.WorldPosition = WorldPosition; OutBestHit.WorldNormal = WorldNormal; OutBestHit.Distance = FloatDistance; OutBestHit.FaceIndex = FaceIdx; if (OutBestHit.Distance > 0.f) { const FVector LocalPosition = WorldTM.InverseTransformPositionNoScale(OutBestHit.WorldPosition); const FVector LocalUnitDir = WorldTM.InverseTransformVectorNoScale(Dir); OutBestHit.FaceIndex = Shape->GetGeometry()->FindMostOpposingFace(LocalPosition, LocalUnitDir, OutBestHit.FaceIndex, 1); } OutBestHit.Actor = Interface.GetParticle(IterObject); } } return false; })"
  },
  {
    "label": "PairwiseShapeOverlapHelper()",
    "kind": "Method",
    "detail": "Function (} return bHit ; } private : FReadPhysicsObjectInterface<Id>& Interface ; struct FShapeOverlapData { TThreadShapeInstance<Id>* Shape ; FAABB3 BoundingBox ; } ; bool)",
    "insertText": "PairwiseShapeOverlapHelper(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, bool bComputeMTD, const FVector& Tolerance, const TFunction<bool(const FShapeOverlapData&, const FShapeOverlapData&, const FMTDInfo&)>& Lambda)"
  }
]