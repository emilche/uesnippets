[
  {
    "label": "SyncBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SyncBuffer"
  },
  {
    "label": "SyncBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_SYNC_BUFFER_H_ # define MODULES_AUDIO_CODING_NETEQ_SYNC_BUFFER_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / audio / audio_frame . h \" # include \" modules / audio_coding / neteq / audio_multi_vector . h \" # include \" modules / audio_coding / neteq / audio_vector . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class SyncBuffer : public AudioMultiVector { public :)",
    "insertText": "SyncBuffer(size_t channels, size_t length) : AudioMultiVector(channels, length), next_index_(length), end_timestamp_(0), dtmf_index_(0)"
  },
  {
    "label": "SyncBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SyncBuffer(const SyncBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SyncBuffer&)",
    "insertText": "operator(const SyncBuffer&)"
  },
  {
    "label": "FutureLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FutureLength()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(const AudioMultiVector& append_this)"
  },
  {
    "label": "PushBackInterleaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBackInterleaved(const rtc::BufferT<int16_t>& append_this)"
  },
  {
    "label": "PushFrontZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFrontZeros(size_t length)"
  },
  {
    "label": "InsertZerosAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertZerosAtIndex(size_t length, size_t position)"
  },
  {
    "label": "ReplaceAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAtIndex(const AudioMultiVector& insert_this, size_t length, size_t position)"
  },
  {
    "label": "ReplaceAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAtIndex(const AudioMultiVector& insert_this, size_t position)"
  },
  {
    "label": "GetNextAudioInterleaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNextAudioInterleaved(size_t requested_len, AudioFrame* output)"
  },
  {
    "label": "IncreaseEndTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseEndTimestamp(uint32_t increment)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Channel()",
    "kind": "Method",
    "detail": "Function (const AudioVector&)",
    "insertText": "Channel(size_t n)"
  },
  {
    "label": "end_timestamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "end_timestamp()"
  },
  {
    "label": "dtmf_index()",
    "kind": "Method",
    "detail": "Function (end_timestamp_ = value ; } size_t)",
    "insertText": "dtmf_index()"
  }
]