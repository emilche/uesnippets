[
  {
    "label": "tagVS_FIXEDFILEINFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagVS_FIXEDFILEINFO"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FileVersionInfoWin()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILE_VERSION_INFO_WIN_H_ # define BASE_FILE_VERSION_INFO_WIN_H_ # include<windows . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / file_version_info . h \" # include \" base / memory / raw_ptr . h \" # include \" base / version . h \" struct tagVS_FIXEDFILEINFO ; typedef tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO ; class BASE_EXPORT FileVersionInfoWin : public FileVersionInfo { public :)",
    "insertText": "FileVersionInfoWin(const FileVersionInfoWin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileVersionInfoWin&)",
    "insertText": "operator(const FileVersionInfoWin&)"
  },
  {
    "label": "FileVersionInfoWin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileVersionInfoWin()"
  },
  {
    "label": "company_name()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "company_name()"
  },
  {
    "label": "company_short_name()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "company_short_name()"
  },
  {
    "label": "product_name()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "product_name()"
  },
  {
    "label": "product_short_name()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "product_short_name()"
  },
  {
    "label": "internal_name()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "internal_name()"
  },
  {
    "label": "product_version()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "product_version()"
  },
  {
    "label": "special_build()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "special_build()"
  },
  {
    "label": "original_filename()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "original_filename()"
  },
  {
    "label": "file_description()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "file_description()"
  },
  {
    "label": "file_version()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "file_version()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValue(const char16_t* name, std::u16string* value)"
  },
  {
    "label": "GetStringValue()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "GetStringValue(const char16_t* name)"
  },
  {
    "label": "GetFileVersion()",
    "kind": "Method",
    "detail": "Function (base::Version)",
    "insertText": "GetFileVersion()"
  },
  {
    "label": "CreateFileVersionInfoWin()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FileVersionInfoWin>)",
    "insertText": "CreateFileVersionInfoWin(const base::FilePath& file_path)"
  },
  {
    "label": "FileVersionInfoWin()",
    "kind": "Method",
    "detail": "Function (private : FileVersionInfo ;)",
    "insertText": "FileVersionInfoWin(std::vector<uint8_t>&& data, WORD language, WORD code_page)"
  },
  {
    "label": "FileVersionInfoWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileVersionInfoWin(void* data, WORD language, WORD code_page)"
  }
]