[
  {
    "label": "RectifyCallbackWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RectifyCallbackWrapper"
  },
  {
    "label": "RectifyCallbackSplitter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RectifyCallbackSplitter"
  },
  {
    "label": "RectifyCallbackImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RectifyCallbackImpl"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_RECTIFY_CALLBACK_INTERNAL_H_ # define BASE_TEST_RECTIFY_CALLBACK_INTERNAL_H_ # include<utility> # include \" base / functional / bind . h \" # include \" base / functional / callback . h \" # include \" base / functional / callback_helpers . h \" namespace base::internal { template<template<> CallbackType,PartialSignature,IgnoreSignature> struct RectifyCallbackWrapper ; template<template<> CallbackType,R,. . . PartialArgs,. . . IgnoredArgs> struct RectifyCallbackWrapper<CallbackType,)",
    "insertText": "R(PartialArgs...), void(IgnoredArgs...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (template<Actual> CallbackType<)",
    "insertText": "R(IgnoredArgs..., PartialArgs...)> Rectify( Actual&& callback)"
  },
  {
    "label": "BindRepeating()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "BindRepeating([](const RepeatingCallback<R(PartialArgs...)> callback, IgnoredArgs..., PartialArgs... args) { return callback.Run(std::forward<PartialArgs>(args)...); }, std::forward<Actual>(callback))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } } ; template<size_t count,Signature,Result =)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (template<Arg,. . . Args,. . . Results> struct RectifyCallbackSplitter<0,)",
    "insertText": "void(Arg, Args...), void(Results...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using type =)",
    "insertText": "void(Results...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; template<. . . Args,. . . Results> struct RectifyCallbackSplitter<0,)",
    "insertText": "void(Args...), void(Results...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; template<size_t count,Arg,. . . Args,. . . Results> struct RectifyCallbackSplitter<count,)",
    "insertText": "void(Arg, Args...), void(Results...)> : RectifyCallbackSplitter<count - 1, void(Args...), void(Results..., Arg)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<DesiredType,ActualType,SFINAE = void> struct RectifyCallbackImpl ; template<template<> DesiredCallbackType,template<> ActualCallbackType,R,. . . DesiredArgs,. . . ActualArgs> struct RectifyCallbackImpl<DesiredCallbackType<)",
    "insertText": "R(DesiredArgs...)>, ActualCallbackType<R(ActualArgs...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (DesiredCallbackType<)",
    "insertText": "R(DesiredArgs...)> Rectify( ActualCallbackType<R(ActualArgs...)> callback)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} using IgnoreSignature = RectifyCallbackSplitter<)",
    "insertText": "sizeof(DesiredArgs) - sizeof...(ActualArgs), void(DesiredArgs...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,. . . Args,template<> ActualCallbackType,ActualSignature> struct RectifyCallbackImpl<)",
    "insertText": "R(Args...), ActualCallbackType<ActualSignature>> : RectifyCallbackImpl<ActualCallbackType<R(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<template<> DesiredCallbackType,R,. . . Args,T> struct RectifyCallbackImpl<DesiredCallbackType<)",
    "insertText": "R(Args...)>, T, std::enable_if_t<!IsBaseCallback<T>::value>> : RectifyCallbackImpl<DesiredCallbackType<R(Args...)>, DesiredCallbackType<R(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,. . . Args,T> struct RectifyCallbackImpl<)",
    "insertText": "R(Args...), T> : RectifyCallbackImpl<RepeatingCallback<R(Args...)>, RepeatingCallback<R(Args...)"
  }
]