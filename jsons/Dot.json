[
  {
    "label": "dot_nocheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dot_nocheck"
  },
  {
    "label": "lpNorm_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lpNorm_selector"
  },
  {
    "label": "IsVectorAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DOT_H # define EIGEN_DOT_H namespace Eigen { namespace internal { template<T,U,bool NeedToTranspose = T::IsVectorAtCompileTime&&)",
    "insertText": "IsVectorAtCompileTime((int(T::RowsAtCompileTime) == 1 && int(U::ColsAtCompileTime) == 1) | (int(T::ColsAtCompileTime) == 1 && int(U::RowsAtCompileTime) == 1))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef scalar_conj_product_op<traits<T>::Scalar,traits<U>::Scalar> conj_prod ; typedef conj_prod::result_type ResScalar ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResScalar)",
    "insertText": "run(const MatrixBase<T>& a, const MatrixBase<U>& b)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ScalarBinaryOpTraits<internal::traits<Derived>::Scalar,internal::traits<OtherDerived>::Scalar>::ReturnType MatrixBase<Derived)",
    "insertText": "dot(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE(Derived,OtherDerived) #if !(defined(EIGEN_NO_STATIC_ASSERT) && defined(EIGEN_NO_DEBUG))"
  },
  {
    "label": "EIGEN_CHECK_BINARY_COMPATIBILIY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_CHECK_BINARY_COMPATIBILIY(func,Scalar,typename OtherDerived::Scalar)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "eigen_assert(size() == other.size())"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE NumTraits<internal::traits<Derived>::Scalar>::Real MatrixBase<Derived)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE NumTraits<internal::traits<Derived>::Scalar>::Real MatrixBase<Derived)",
    "insertText": "norm()"
  },
  {
    "label": "normalized()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const MatrixBase<Derived>::PlainObject MatrixBase<Derived)",
    "insertText": "normalized()"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Derived,2>::type _Nested ; _Nested)",
    "insertText": "n(derived())"
  },
  {
    "label": "stableNormalized()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const MatrixBase<Derived>::PlainObject MatrixBase<Derived)",
    "insertText": "stableNormalized()"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (RealScalar w = n .)",
    "insertText": "cwiseAbs().maxCoeff()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "z(n/w).squaredNorm()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "z(derived()/w).squaredNorm()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Derived,int p> struct lpNorm_selector { typedef NumTraits<traits<Derived>::Scalar>::Real RealScalar ; EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "run(const MatrixBase<Derived>& m)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(pow) return pow(m.cwiseAbs().array().pow(p).sum(), RealScalar(1)/p)"
  },
  {
    "label": "lpNorm()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<int p> # ifndef EIGEN_PARSED_BY_DOXYGEN EIGEN_DEVICE_FUNC NumTraits<internal::traits<Derived>::Scalar>::Real # else EIGEN_DEVICE_FUNC MatrixBase<Derived>::RealScalar # endif MatrixBase<Derived)",
    "insertText": "lpNorm()"
  },
  {
    "label": "isOrthogonal()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> bool MatrixBase<Derived)",
    "insertText": "isOrthogonal(const MatrixBase<OtherDerived>& other, const RealScalar& prec)"
  },
  {
    "label": "nested()",
    "kind": "Method",
    "detail": "Function (internal::nested_eval<Derived,2>::type)",
    "insertText": "nested(derived())"
  },
  {
    "label": "otherNested()",
    "kind": "Method",
    "detail": "Function (internal::nested_eval<OtherDerived,2>::type)",
    "insertText": "otherNested(other.derived())"
  },
  {
    "label": "isUnitary()",
    "kind": "Method",
    "detail": "Function (} template<Derived> bool MatrixBase<Derived)",
    "insertText": "isUnitary(const RealScalar& prec)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (internal::nested_eval<Derived,1>::type)",
    "insertText": "self(derived())"
  }
]