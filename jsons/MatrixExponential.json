[
  {
    "label": "MatrixExponentialScalingOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatrixExponentialScalingOp"
  },
  {
    "label": "matrix_exp_computeUV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_exp_computeUV"
  },
  {
    "label": "is_exp_known_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_exp_known_type"
  },
  {
    "label": "MatrixExponentialReturnValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatrixExponentialReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "MatrixExponentialScalingOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_EXPONENTIAL # define EIGEN_MATRIX_EXPONENTIAL # include \" StemFunction . h \" namespace Eigen { namespace internal { template<RealScalar> struct MatrixExponentialScalingOp {)",
    "insertText": "MatrixExponentialScalingOp(int squarings) : m_squarings(squarings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const RealScalar)",
    "insertText": "operator() (const RealScalar& x)"
  },
  {
    "label": "ldexp()",
    "kind": "Method",
    "detail": "Function (using std::ldexp ; return)",
    "insertText": "ldexp(x, -m_squarings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} typedef std::complex<RealScalar> ComplexScalar ; const ComplexScalar)",
    "insertText": "operator() (const ComplexScalar& x)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (using std::ldexp ; return)",
    "insertText": "ComplexScalar(ldexp(x.real(), -m_squarings), ldexp(x.imag(), -m_squarings))"
  },
  {
    "label": "matrix_exp_pade3()",
    "kind": "Method",
    "detail": "Function (} private : int m_squarings ; } ; template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade3(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (typedef MatA::PlainObject MatrixType ; typedef NumTraits<traits<MatA>::Scalar>::Real RealScalar ; const RealScalar b [ ] = { 1 2 0 . L,6 0 . L,1 2 . L,1 . L } ; const MatrixType A2 = A* A ; const MatrixType tmp = b [ 3 ]* A2 + b [ 1 ]*)",
    "insertText": "Identity(A.rows(), A.cols())"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (U .)",
    "insertText": "noalias()"
  },
  {
    "label": "matrix_exp_pade5()",
    "kind": "Method",
    "detail": "Function (} template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade5(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "matrix_exp_pade7()",
    "kind": "Method",
    "detail": "Function (} template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade7(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "matrix_exp_pade9()",
    "kind": "Method",
    "detail": "Function (} template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade9(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "matrix_exp_pade13()",
    "kind": "Method",
    "detail": "Function (} template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade13(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "matrix_exp_pade17()",
    "kind": "Method",
    "detail": "Function (} # if LDBL_MANT_DIG> 6 4 template<MatA,MatU,MatV> void)",
    "insertText": "matrix_exp_pade17(const MatA& A, MatU& U, MatV& V)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} # endif template<MatrixType,RealScalar = NumTraits<traits<MatrixType>::Scalar>::Real> struct matrix_exp_computeUV { void)",
    "insertText": "run(const MatrixType& arg, MatrixType& U, MatrixType& V, int& squarings)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> struct matrix_exp_computeUV<MatrixType,float> { template<ArgType> void)",
    "insertText": "run(const ArgType& arg, MatrixType& U, MatrixType& V, int& squarings)"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (using std::frexp ; using std::pow ; const float l1norm = arg .)",
    "insertText": "cwiseAbs().colwise().sum().maxCoeff()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (squarings = 0 ;)",
    "insertText": "if(l1norm < 4.258730016922831e-001f)"
  },
  {
    "label": "matrix_exp_pade3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade3(arg, U, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 1.880152677804762e+000f)"
  },
  {
    "label": "matrix_exp_pade5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade5(arg, U, V)"
  },
  {
    "label": "frexp()",
    "kind": "Method",
    "detail": "Function (} else { const float maxnorm = 3 . 9 2 5 7 2 4 7 8 3 1 3 8 6 6 0 f ;)",
    "insertText": "frexp(l1norm / maxnorm, &squarings)"
  },
  {
    "label": "unaryExpr()",
    "kind": "Method",
    "detail": "Function (MatrixType A = arg .)",
    "insertText": "unaryExpr(MatrixExponentialScalingOp<float>(squarings))"
  },
  {
    "label": "matrix_exp_pade7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade7(A, U, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (squarings = 0 ;)",
    "insertText": "if(l1norm < 1.495585217958292e-002)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 2.539398330063230e-001)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 9.504178996162932e-001)"
  },
  {
    "label": "matrix_exp_pade7()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade7(arg, U, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 2.097847961257068e+000)"
  },
  {
    "label": "matrix_exp_pade9()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade9(arg, U, V)"
  },
  {
    "label": "unaryExpr()",
    "kind": "Method",
    "detail": "Function (MatrixType A = arg .)",
    "insertText": "unaryExpr(MatrixExponentialScalingOp<RealScalar>(squarings))"
  },
  {
    "label": "matrix_exp_pade13()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade13(A, U, V)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# if LDBL_MANT_DIG = = 5 3 matrix_exp_computeUV<MatrixType,double)",
    "insertText": "run(arg, U, V, squarings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (squarings = 0 ; # if LDBL_MANT_DIG<= 6 4)",
    "insertText": "if(l1norm < 4.1968497232266989671e-003L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 1.1848116734693823091e-001L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 5.5170388480686700274e-001L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 1.3759868875587845383e+000L)"
  },
  {
    "label": "unaryExpr()",
    "kind": "Method",
    "detail": "Function (MatrixType A = arg .)",
    "insertText": "unaryExpr(MatrixExponentialScalingOp<long double>(squarings))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # elif LDBL_MANT_DIG<= 1 0 6)",
    "insertText": "if(l1norm < 3.2787892205607026992947488108213e-005L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 6.4467025060072760084130906076332e-003L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 6.8988028496595374751374122881143e-002L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 2.7339737518502231741495857201670e-001L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 1.3203382096514474905666448850278e+000L)"
  },
  {
    "label": "matrix_exp_pade13()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade13(arg, U, V)"
  },
  {
    "label": "matrix_exp_pade17()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_pade17(A, U, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # elif LDBL_MANT_DIG<= 1 1 3)",
    "insertText": "if(l1norm < 1.639394610288918690547467954466970e-005L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 4.253237712165275566025884344433009e-003L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 5.125804063165764409885122032933142e-002L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 2.170000765161155195453205651889853e-001L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(l1norm < 1.125358383453143065081397882891878e+000L)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "eigen_assert(false && \"Bug in MatrixExponential\")"
  },
  {
    "label": "matrix_exp_compute()",
    "kind": "Method",
    "detail": "Function (# endif # endif } } ; template<T> struct is_exp_known_type : false_type { } ; template<> struct is_exp_known_type<float> : true_type { } ; template<> struct is_exp_known_type<double> : true_type { } ; # if LDBL_MANT_DIG<= 1 1 3 template<> struct is_exp_known_type<long double> : true_type { } ; # endif template<ArgType,ResultType> void)",
    "insertText": "matrix_exp_compute(const ArgType& arg, ResultType &result, true_type)"
  },
  {
    "label": "partialPivLu()",
    "kind": "Method",
    "detail": "Function (MatrixType numer = U + V ; MatrixType denom = - U + V ; result = denom .)",
    "insertText": "partialPivLu().solve(numer)"
  },
  {
    "label": "matrix_exp_compute()",
    "kind": "Method",
    "detail": "Function (} template<ArgType,ResultType> void)",
    "insertText": "matrix_exp_compute(const ArgType& arg, ResultType &result, false_type)"
  },
  {
    "label": "matrixFunction()",
    "kind": "Method",
    "detail": "Function (typedef ArgType::PlainObject MatrixType ; typedef traits<MatrixType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef std::complex<RealScalar> ComplexScalar ; result = arg .)",
    "insertText": "matrixFunction(internal::stem_function_exp<ComplexScalar>)"
  },
  {
    "label": "MatrixExponentialReturnValue()",
    "kind": "Method",
    "detail": "Function (} } template<Derived> struct MatrixExponentialReturnValue : public ReturnByValue<MatrixExponentialReturnValue<Derived>> { public :)",
    "insertText": "MatrixExponentialReturnValue(const Derived& src) : m_src(src)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (const internal::nested_eval<Derived,1 0>::type)",
    "insertText": "tmp(m_src)"
  },
  {
    "label": "matrix_exp_compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_exp_compute(tmp, result, internal::is_exp_known_type<typename Derived::RealScalar>())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (} protected : const internal::ref_selector<Derived>::type m_src ; } ; namespace internal { template<Derived> struct traits<MatrixExponentialReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<Derived> const MatrixExponentialReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "exp()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows() == cols())"
  }
]