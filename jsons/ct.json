[
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_CT_H # define HEADER_CT_H # include<openssl / opensslconf . h> # ifndef OPENSSL_NO_CT # include<openssl / ossl_typ . h> # include<openssl / safestack . h> # include<openssl / x509 . h> # include<openssl / cterr . h> # ifdef __cplusplus \" C \" { # endif # define SCT_MIN_RSA_BITS 2 0 4 8 # define CT_V1_HASHLEN SHA256_DIGEST_LENGTH typedef enum { CT_LOG_ENTRY_TYPE_NOT_SET = - 1,CT_LOG_ENTRY_TYPE_X509 = 0,CT_LOG_ENTRY_TYPE_PRECERT = 1 } ct_log_entry_type_t ; typedef enum { SCT_VERSION_NOT_SET = - 1,SCT_VERSION_V1 = 0 } sct_version_t ; typedef enum { SCT_SOURCE_UNKNOWN,SCT_SOURCE_TLS_EXTENSION,SCT_SOURCE_X509V3_EXTENSION,SCT_SOURCE_OCSP_STAPLED_RESPONSE } sct_source_t ; typedef enum { SCT_VALIDATION_STATUS_NOT_SET,SCT_VALIDATION_STATUS_UNKNOWN_LOG,SCT_VALIDATION_STATUS_VALID,SCT_VALIDATION_STATUS_INVALID,SCT_VALIDATION_STATUS_UNVERIFIED,SCT_VALIDATION_STATUS_UNKNOWN_VERSION } sct_validation_status_t ;)",
    "insertText": "DEFINE_STACK_OF(SCT) DEFINE_STACK_OF(CTLOG) CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_get0_cert()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_set1_cert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_get0_issuer()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_set1_issuer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_get0_log_store()",
    "kind": "Method",
    "detail": "Function (const CTLOG_STORE*)",
    "insertText": "CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx, CTLOG_STORE *log_store)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_get_time()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "CT_POLICY_EVAL_CTX_set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)"
  },
  {
    "label": "SCT_new()",
    "kind": "Method",
    "detail": "Function (SCT*)",
    "insertText": "SCT_new(void)"
  },
  {
    "label": "SCT_new_from_base64()",
    "kind": "Method",
    "detail": "Function (SCT*)",
    "insertText": "SCT_new_from_base64(unsigned char version, const char *logid_base64, ct_log_entry_type_t entry_type, uint64_t timestamp, const char *extensions_base64, const char *signature_base64)"
  },
  {
    "label": "SCT_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_free(SCT *sct)"
  },
  {
    "label": "SCT_LIST_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_LIST_free(STACK_OF(SCT) *a)"
  },
  {
    "label": "SCT_get_version()",
    "kind": "Method",
    "detail": "Function (sct_version_t)",
    "insertText": "SCT_get_version(const SCT *sct)"
  },
  {
    "label": "SCT_set_version()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set_version(SCT *sct, sct_version_t version)"
  },
  {
    "label": "SCT_get_log_entry_type()",
    "kind": "Method",
    "detail": "Function (ct_log_entry_type_t)",
    "insertText": "SCT_get_log_entry_type(const SCT *sct)"
  },
  {
    "label": "SCT_set_log_entry_type()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)"
  },
  {
    "label": "SCT_get0_log_id()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SCT_get0_log_id(const SCT *sct, unsigned char **log_id)"
  },
  {
    "label": "SCT_set0_log_id()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)"
  },
  {
    "label": "SCT_set1_log_id()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)"
  },
  {
    "label": "SCT_get_timestamp()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "SCT_get_timestamp(const SCT *sct)"
  },
  {
    "label": "SCT_set_timestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_set_timestamp(SCT *sct, uint64_t timestamp)"
  },
  {
    "label": "SCT_get_signature_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SCT_get_signature_nid(const SCT *sct)"
  },
  {
    "label": "SCT_set_signature_nid()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set_signature_nid(SCT *sct, int nid)"
  },
  {
    "label": "SCT_get0_extensions()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SCT_get0_extensions(const SCT *sct, unsigned char **ext)"
  },
  {
    "label": "SCT_set0_extensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)"
  },
  {
    "label": "SCT_set1_extensions()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)"
  },
  {
    "label": "SCT_get0_signature()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SCT_get0_signature(const SCT *sct, unsigned char **sig)"
  },
  {
    "label": "SCT_set0_signature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)"
  },
  {
    "label": "SCT_set1_signature()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)"
  },
  {
    "label": "SCT_get_source()",
    "kind": "Method",
    "detail": "Function (sct_source_t)",
    "insertText": "SCT_get_source(const SCT *sct)"
  },
  {
    "label": "SCT_set_source()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_set_source(SCT *sct, sct_source_t source)"
  },
  {
    "label": "SCT_validation_status_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "SCT_validation_status_string(const SCT *sct)"
  },
  {
    "label": "SCT_print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs)"
  },
  {
    "label": "SCT_LIST_print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent, const char *separator, const CTLOG_STORE *logs)"
  },
  {
    "label": "SCT_get_validation_status()",
    "kind": "Method",
    "detail": "Function (sct_validation_status_t)",
    "insertText": "SCT_get_validation_status(const SCT *sct)"
  },
  {
    "label": "SCT_validate()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "SCT_LIST_validate()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx)"
  },
  {
    "label": "i2o_SCT_LIST()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp, size_t len)"
  },
  {
    "label": "i2d_SCT_LIST()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp, long len)"
  },
  {
    "label": "i2o_SCT()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "i2o_SCT(const SCT *sct, unsigned char **out)"
  },
  {
    "label": "o2i_SCT()",
    "kind": "Method",
    "detail": "Function (SCT*)",
    "insertText": "o2i_SCT(SCT **psct, const unsigned char **in, size_t len)"
  },
  {
    "label": "CTLOG_new()",
    "kind": "Method",
    "detail": "Function (CTLOG*)",
    "insertText": "CTLOG_new(EVP_PKEY *public_key, const char *name)"
  },
  {
    "label": "CTLOG_new_from_base64()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CTLOG_new_from_base64(CTLOG ** ct_log, const char *pkey_base64, const char *name)"
  },
  {
    "label": "CTLOG_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CTLOG_free(CTLOG *log)"
  },
  {
    "label": "CTLOG_get0_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "CTLOG_get0_name(const CTLOG *log)"
  },
  {
    "label": "CTLOG_get0_log_id()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id, size_t *log_id_len)"
  },
  {
    "label": "CTLOG_get0_public_key()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY*)",
    "insertText": "CTLOG_get0_public_key(const CTLOG *log)"
  },
  {
    "label": "CTLOG_STORE_new()",
    "kind": "Method",
    "detail": "Function (CTLOG_STORE*)",
    "insertText": "CTLOG_STORE_new(void)"
  },
  {
    "label": "CTLOG_STORE_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CTLOG_STORE_free(CTLOG_STORE *store)"
  },
  {
    "label": "CTLOG_STORE_get0_log_by_id()",
    "kind": "Method",
    "detail": "Function (const CTLOG*)",
    "insertText": "CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store, const uint8_t *log_id, size_t log_id_len)"
  },
  {
    "label": "CTLOG_STORE_load_file()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file)"
  },
  {
    "label": "CTLOG_STORE_load_default_file()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "CTLOG_STORE_load_default_file(CTLOG_STORE *store)"
  }
]