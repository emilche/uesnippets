[
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPrimaryAssetRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetRules"
  },
  {
    "label": "FPrimaryAssetRulesExplicitOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetRulesExplicitOverride"
  },
  {
    "label": "FPrimaryAssetTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetTypeInfo"
  },
  {
    "label": "FAssetManagerChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetManagerChunkInfo"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetManagerSearchRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetManagerSearchRules"
  },
  {
    "label": "FPrimaryAssetCookRuleUnion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetCookRuleUnion"
  },
  {
    "label": "FAssignmentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignmentInfo"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetIdentifier . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Templates / Tuple . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / PrimaryAssetId . h \" # include \" UObject / SoftObjectPtr . h \" # include \" AssetManagerTypes . generated . h \" class FCbWriter ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Unknown,NeverCook,ProductionNeverCook,DevelopmentCook = ProductionNeverCook,DevelopmentAlwaysProductionNeverCook,DevelopmentAlwaysCook = DevelopmentAlwaysProductionNeverCook,DevelopmentAlwaysProductionUnknownCook,AlwaysCook,} ; enum class EPrimaryAssetProductionLevel { Development = 0,Production,Count } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Rules)"
  },
  {
    "label": "FPrimaryAssetRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetRules() : Priority(-1), ChunkId(-1), bApplyRecursively(true), CookRule(EPrimaryAssetCookRule::Unknown)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPrimaryAssetRules& Other)"
  },
  {
    "label": "OverrideRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRules(const FPrimaryAssetRules& OverrideRules)"
  },
  {
    "label": "PropagateCookRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateCookRules(const FPrimaryAssetRules& ParentRules)"
  },
  {
    "label": "FPrimaryAssetRulesExplicitOverride()",
    "kind": "Method",
    "detail": "Function (} ; struct FPrimaryAssetRulesExplicitOverride { FPrimaryAssetRules Rules ; uint8 bOverridePriority : 1 ; uint8 bOverrideApplyRecursively : 1 ; uint8 bOverrideChunkId : 1 ; uint8 bOverrideCookRule : 1 ;)",
    "insertText": "FPrimaryAssetRulesExplicitOverride() : bOverridePriority(false), bOverrideApplyRecursively(false), bOverrideChunkId(false), bOverrideCookRule(false)"
  },
  {
    "label": "HasAnyOverride()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyOverride()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = AssetType)"
  },
  {
    "label": "FPrimaryAssetTypeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetTypeInfo() : AssetBaseClass(UObject::StaticClass()), AssetBaseClassLoaded(UObject::StaticClass()), bHasBlueprintClasses(false), bIsEditorOnly(false), bIsDynamicAsset(false), NumberOfAssets(0)"
  },
  {
    "label": "FPrimaryAssetTypeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetTypeInfo(FName InPrimaryAssetType, UClass* InAssetBaseClass, bool bInHasBlueprintClasses, bool bInIsEditorOnly) : PrimaryAssetType(InPrimaryAssetType), AssetBaseClass(InAssetBaseClass), AssetBaseClassLoaded(InAssetBaseClass), bHasBlueprintClasses(bInHasBlueprintClasses), bIsEditorOnly(bInIsEditorOnly), bIsDynamicAsset(false), NumberOfAssets(0)"
  },
  {
    "label": "FPrimaryAssetTypeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetTypeInfo(FName InPrimaryAssetType, UClass* InAssetBaseClass, bool bInHasBlueprintClasses, bool bInIsEditorOnly, TArray<FDirectoryPath>&& InDirectories, TArray<FSoftObjectPath>&& InSpecificAssets) : PrimaryAssetType(InPrimaryAssetType) , AssetBaseClass(InAssetBaseClass) , AssetBaseClassLoaded(InAssetBaseClass) , bHasBlueprintClasses(bInHasBlueprintClasses) , bIsEditorOnly(bInIsEditorOnly) , Directories(MoveTemp(InDirectories)) , SpecificAssets(MoveTemp(InSpecificAssets)) , bIsDynamicAsset(false) , NumberOfAssets(0)"
  },
  {
    "label": "GetAssetBaseClass()",
    "kind": "Method",
    "detail": "Function (} const TSoftClassPtr<UObject>&)",
    "insertText": "GetAssetBaseClass()"
  },
  {
    "label": "GetDirectories()",
    "kind": "Method",
    "detail": "Function (AssetBaseClass = InAssetBaseClass ; } } const TArray<FDirectoryPath>&)",
    "insertText": "GetDirectories()"
  },
  {
    "label": "HasValidRuntimeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidRuntimeData()"
  },
  {
    "label": "CanModifyConfigData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanModifyConfigData()"
  },
  {
    "label": "FillRuntimeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillRuntimeData(bool& bIsValid, bool& bBaseClassWasLoaded)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; struct FAssetManagerChunkInfo { TSet<FAssetIdentifier> ExplicitAssets ; TSet<FAssetIdentifier> AllAssets ; } ; enum class EAssetManagerFilter : int32 { Default = 0,UnloadedOnly = 0 x00000001 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAssetManagerFilter)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FAssetManagerShouldIncludeDelegate, const struct FAssetData&, const struct FAssetManagerSearchRules&)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Default)"
  },
  {
    "label": "AreRulesSet()",
    "kind": "Method",
    "detail": "Function (FAssetManagerShouldIncludeDelegate ShouldIncludeDelegate ; bool)",
    "insertText": "AreRulesSet()"
  },
  {
    "label": "UnionWith()",
    "kind": "Method",
    "detail": "Function (} ; struct FPrimaryAssetCookRuleUnion { void)",
    "insertText": "UnionWith(EPrimaryAssetCookRule CookRule, bool bDirectReference, const FPrimaryAssetId& Id, int32 Priority)"
  },
  {
    "label": "GetRule()",
    "kind": "Method",
    "detail": "Function (EPrimaryAssetCookRule)",
    "insertText": "GetRule(TOptional<TTuple<FPrimaryAssetId, FPrimaryAssetId>>* OutConflictIds)"
  },
  {
    "label": "InclusionByLevel()",
    "kind": "Method",
    "detail": "Function (private : struct FAssignmentInfo { FPrimaryAssetId Id ; int32 Priority = - 1 ; bool bSet = false ; } ; FAssignmentInfo)",
    "insertText": "InclusionByLevel(int32)"
  },
  {
    "label": "ExclusionByLevel()",
    "kind": "Method",
    "detail": "Function (FAssignmentInfo)",
    "insertText": "ExclusionByLevel(int32)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLog(FCbWriter& Writer, const FPrimaryAssetRules& Value)"
  }
]