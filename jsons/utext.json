[
  {
    "label": "UText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UText"
  },
  {
    "label": "UTextFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UTextFuncs"
  },
  {
    "label": "utext_close()",
    "kind": "Method",
    "detail": "Function (# ifndef __UTEXT_H__ # define __UTEXT_H__ # include \" unicode / utypes . h \" # include \" unicode / uchar . h \" # if # include \" unicode / localpointer . h \" # include \" unicode / rep . h \" # include \" unicode / unistr . h \" # include \" unicode / chariter . h \" # endif U_CDECL_BEGIN struct UText ; typedef struct UText UText ; U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_close(UText *ut)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUTextPointer, UText, utext_close)"
  },
  {
    "label": "utext_openUTF8()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status)"
  },
  {
    "label": "utext_openUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openUChars(UText *ut, const UChar *s, int64_t length, UErrorCode *status)"
  },
  {
    "label": "utext_openUnicodeString()",
    "kind": "Method",
    "detail": "Function (# if U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openUnicodeString(UText *ut, icu::UnicodeString *s, UErrorCode *status)"
  },
  {
    "label": "utext_openConstUnicodeString()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openConstUnicodeString(UText *ut, const icu::UnicodeString *s, UErrorCode *status)"
  },
  {
    "label": "utext_openReplaceable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openReplaceable(UText *ut, icu::Replaceable *rep, UErrorCode *status)"
  },
  {
    "label": "utext_openCharacterIterator()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_openCharacterIterator(UText *ut, icu::CharacterIterator *ci, UErrorCode *status)"
  },
  {
    "label": "utext_clone()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_clone(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status)"
  },
  {
    "label": "utext_equals()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "utext_equals(const UText *a, const UText *b)"
  },
  {
    "label": "utext_nativeLength()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "utext_nativeLength(UText *ut)"
  },
  {
    "label": "utext_isLengthExpensive()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "utext_isLengthExpensive(const UText *ut)"
  },
  {
    "label": "utext_char32At()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_char32At(UText *ut, int64_t nativeIndex)"
  },
  {
    "label": "utext_current32()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_current32(UText *ut)"
  },
  {
    "label": "utext_next32()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_next32(UText *ut)"
  },
  {
    "label": "utext_previous32()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_previous32(UText *ut)"
  },
  {
    "label": "utext_next32From()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_next32From(UText *ut, int64_t nativeIndex)"
  },
  {
    "label": "utext_previous32From()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "utext_previous32From(UText *ut, int64_t nativeIndex)"
  },
  {
    "label": "utext_getNativeIndex()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "utext_getNativeIndex(const UText *ut)"
  },
  {
    "label": "utext_setNativeIndex()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utext_setNativeIndex(UText *ut, int64_t nativeIndex)"
  },
  {
    "label": "utext_moveIndex32()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "utext_moveIndex32(UText *ut, int32_t delta)"
  },
  {
    "label": "utext_getPreviousNativeIndex()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "utext_getPreviousNativeIndex(UText *ut)"
  },
  {
    "label": "utext_extract()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "utext_extract(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)"
  },
  {
    "label": "UTEXT_CURRENT32()",
    "kind": "Method",
    "detail": "Function (# ifndef # define)",
    "insertText": "UTEXT_CURRENT32(ut) \\ ((ut)->chunkOffset < (ut)->chunkLength && ((ut)->chunkContents)[(ut)->chunkOffset]<0xd800 ? \\ ((ut)->chunkContents)[((ut)->chunkOffset)] : utext_current32(ut)) #endif #define UTEXT_NEXT32(ut) \\ ((ut)->chunkOffset < (ut)->chunkLength && ((ut)->chunkContents)[(ut)->chunkOffset]<0xd800 ? \\ ((ut)->chunkContents)[((ut)->chunkOffset)++] : utext_next32(ut)) #define UTEXT_PREVIOUS32(ut) \\ ((ut)->chunkOffset > 0 && \\ (ut)->chunkContents[(ut)->chunkOffset-1] < 0xd800 ? \\ (ut)->chunkContents[--((ut)->chunkOffset)] : utext_previous32(ut)) #define UTEXT_GETNATIVEINDEX(ut) \\ ((ut)->chunkOffset <= (ut)->nativeIndexingLimit? \\ (ut)->chunkNativeStart+(ut)->chunkOffset : \\ (ut)->pFuncs->mapOffsetToNative(ut)) #define UTEXT_SETNATIVEINDEX(ut, ix)"
  },
  {
    "label": "__offset()",
    "kind": "Method",
    "detail": "Function (chunkNativeStart)",
    "insertText": "__offset(ix) - (ut)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(__offset>=0 && __offset<(int64_t)(ut)->nativeIndexingLimit && (ut)->chunkContents[__offset]<0xdc00)"
  },
  {
    "label": "utext_setNativeIndex()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "utext_setNativeIndex((ut), (ix))"
  },
  {
    "label": "utext_isWritable()",
    "kind": "Method",
    "detail": "Function (} } U_STABLE UBool U_EXPORT2)",
    "insertText": "utext_isWritable(const UText *ut)"
  },
  {
    "label": "utext_hasMetaData()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "utext_hasMetaData(const UText *ut)"
  },
  {
    "label": "utext_replace()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "utext_replace(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacementLength, UErrorCode *status)"
  },
  {
    "label": "utext_copy()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utext_copy(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, UBool move, UErrorCode *status)"
  },
  {
    "label": "utext_freeze()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utext_freeze(UText *ut)"
  },
  {
    "label": "UTextClone()",
    "kind": "Method",
    "detail": "Function (enum { UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1,UTEXT_PROVIDER_STABLE_CHUNKS = 2,UTEXT_PROVIDER_WRITABLE = 3,UTEXT_PROVIDER_HAS_META_DATA = 4,UTEXT_PROVIDER_OWNS_TEXT = 5 } ; typedef UText* U_CALLCONV)",
    "insertText": "UTextClone(UText *dest, const UText *src, UBool deep, UErrorCode *status)"
  },
  {
    "label": "UTextNativeLength()",
    "kind": "Method",
    "detail": "Function (typedef int64_t U_CALLCONV)",
    "insertText": "UTextNativeLength(UText *ut)"
  },
  {
    "label": "UTextAccess()",
    "kind": "Method",
    "detail": "Function (typedef UBool U_CALLCONV)",
    "insertText": "UTextAccess(UText *ut, int64_t nativeIndex, UBool forward)"
  },
  {
    "label": "UTextExtract()",
    "kind": "Method",
    "detail": "Function (typedef int32_t U_CALLCONV)",
    "insertText": "UTextExtract(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)"
  },
  {
    "label": "UTextReplace()",
    "kind": "Method",
    "detail": "Function (typedef int32_t U_CALLCONV)",
    "insertText": "UTextReplace(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacmentLength, UErrorCode *status)"
  },
  {
    "label": "UTextCopy()",
    "kind": "Method",
    "detail": "Function (typedef void U_CALLCONV)",
    "insertText": "UTextCopy(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t nativeDest, UBool move, UErrorCode *status)"
  },
  {
    "label": "UTextMapOffsetToNative()",
    "kind": "Method",
    "detail": "Function (typedef int64_t U_CALLCONV)",
    "insertText": "UTextMapOffsetToNative(const UText *ut)"
  },
  {
    "label": "UTextMapNativeIndexToUTF16()",
    "kind": "Method",
    "detail": "Function (typedef int32_t U_CALLCONV)",
    "insertText": "UTextMapNativeIndexToUTF16(const UText *ut, int64_t nativeIndex)"
  },
  {
    "label": "UTextClose()",
    "kind": "Method",
    "detail": "Function (typedef void U_CALLCONV)",
    "insertText": "UTextClose(UText *ut)"
  },
  {
    "label": "utext_setup()",
    "kind": "Method",
    "detail": "Function (struct UTextFuncs { int32_t tableSize ; int32_t reserved1,reserved2,reserved3 ; UTextClone* clone ; UTextNativeLength* nativeLength ; UTextAccess* access ; UTextExtract* extract ; UTextReplace* replace ; UTextCopy* copy ; UTextMapOffsetToNative* mapOffsetToNative ; UTextMapNativeIndexToUTF16* mapNativeIndexToUTF16 ; UTextClose* close ; UTextClose* spare1 ; UTextClose* spare2 ; UTextClose* spare3 ; } ; typedef struct UTextFuncs UTextFuncs ; struct UText { uint32_t magic ; int32_t flags ; int32_t providerProperties ; int32_t sizeOfStruct ; int64_t chunkNativeLimit ; int32_t extraSize ; int32_t nativeIndexingLimit ; int64_t chunkNativeStart ; int32_t chunkOffset ; int32_t chunkLength ; const UChar* chunkContents ; const UTextFuncs* pFuncs ; void* pExtra ; const void* context ; const void* p ; const void* q ; const void* r ; void* privP ; int64_t a ; int32_t b ; int32_t c ; int64_t privA ; int32_t privB ; int32_t privC ; } ; U_STABLE UText* U_EXPORT2)",
    "insertText": "utext_setup(UText *ut, int32_t extraSpace, UErrorCode *status)"
  }
]