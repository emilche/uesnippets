[
  {
    "label": "LegacyFrustum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LegacyFrustum"
  },
  {
    "label": "LegacyFrustum()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_LEGACYFRUSTUM_HAS_BEEN_INCLUDED # define OPENVDB_MATH_LEGACYFRUSTUM_HAS_BEEN_INCLUDED # include<iostream> # include<openvdb / Types . h> # include \" Coord . h \" # include \" Mat4 . h \" # include \" Vec3 . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { namespace internal { class LegacyFrustum { public :)",
    "insertText": "LegacyFrustum(std::istream& is)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (Vec3i tmpMin,tmpMax ; is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpMin), sizeof(Vec3i::ValueType) * 3)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpMax), sizeof(Vec3i::ValueType) * 3)"
  },
  {
    "label": "tmpMinCoord()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "tmpMinCoord(tmpMin)"
  },
  {
    "label": "tmpMaxCoord()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "tmpMaxCoord(tmpMax)"
  },
  {
    "label": "CoordBBox()",
    "kind": "Method",
    "detail": "Function (mExtents =)",
    "insertText": "CoordBBox(tmpMinCoord, tmpMaxCoord)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (Mat4d tmpW2C,tmpC2S,tmpS2C,tmpWorldToLocal ; Mat4d tmpS2U,tmpXYLocalToUnit,tmpZLocalToUnit ; Real tmpWindow [ 6 ] ; Real tmpPadding ; is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpW2C), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mC2W), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpC2S), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpS2C), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWorldToLocal), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mLocalToWorld), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[0]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[1]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[2]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[3]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[4]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpWindow[5]), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpPadding), sizeof(Real))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpS2U), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mXYUnitToLocal), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpXYLocalToUnit), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mZUnitToLocal), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&tmpZLocalToUnit), sizeof(Mat4d::value_type) * Mat4d::size * Mat4d::size)"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (mNearPlane = tmpWindow [ 4 ] ; mFarPlane = tmpWindow [ 5 ] ; mFrNearOrigin =)",
    "insertText": "unitToLocalFrustum(Vec3R(0,0,0))"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (mFrFarOrigin =)",
    "insertText": "unitToLocalFrustum(Vec3R(0,0,1))"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (Vec3d frNearXTip =)",
    "insertText": "unitToLocalFrustum(Vec3R(1,0,0))"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (Vec3d frNearYTip =)",
    "insertText": "unitToLocalFrustum(Vec3R(0,1,0))"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (mFrNearXBasis = frNearXTip - mFrNearOrigin ; mFrNearYBasis = frNearYTip - mFrNearOrigin ; Vec3R frFarXTip =)",
    "insertText": "unitToLocalFrustum(Vec3R(1,0,1))"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (Vec3R frFarYTip =)",
    "insertText": "unitToLocalFrustum(Vec3R(0,1,1))"
  },
  {
    "label": "LegacyFrustum()",
    "kind": "Method",
    "detail": "Function (mFrFarXBasis = frFarXTip - mFrFarOrigin ; mFrFarYBasis = frFarYTip - mFrFarOrigin ; } ~)",
    "insertText": "LegacyFrustum()"
  },
  {
    "label": "getCamXForm()",
    "kind": "Method",
    "detail": "Function (} const Mat4d&)",
    "insertText": "getCamXForm()"
  },
  {
    "label": "getTaper()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getTaper()"
  },
  {
    "label": "getNearPlaneWidth()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getNearPlaneWidth()"
  },
  {
    "label": "unitToLocal()",
    "kind": "Method",
    "detail": "Function (} Vec3d)",
    "insertText": "unitToLocal(const Vec3d& U)"
  },
  {
    "label": "nearLS()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "nearLS(U[0] * mFrNearXBasis ) + ( U[1] * mFrNearYBasis)"
  },
  {
    "label": "farLS()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "farLS(U[0] * mFrFarXBasis ) + ( U[1] * mFrFarYBasis)"
  },
  {
    "label": "unitToLocalFrustum()",
    "kind": "Method",
    "detail": "Function (} Vec3d)",
    "insertText": "unitToLocalFrustum(const Vec3d& u)"
  },
  {
    "label": "transformH()",
    "kind": "Method",
    "detail": "Function (Vec3d fzu = mZUnitToLocal .)",
    "insertText": "transformH(u)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (Vec3d fu = u ; fu [ 2 ] = fzu .)",
    "insertText": "z()"
  }
]