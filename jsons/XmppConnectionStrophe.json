[
  {
    "label": "FXmppMessagesStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppMessagesStrophe"
  },
  {
    "label": "FXmppMultiUserChatStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppMultiUserChatStrophe"
  },
  {
    "label": "FXmppPingStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppPingStrophe"
  },
  {
    "label": "FXmppPresenceStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppPresenceStrophe"
  },
  {
    "label": "FXmppPrivateChatStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppPrivateChatStrophe"
  },
  {
    "label": "FXmppPubSubStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppPubSubStrophe"
  },
  {
    "label": "FStropheContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStropheContext"
  },
  {
    "label": "FStropheError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStropheError"
  },
  {
    "label": "FXmppConnectionStrophe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXmppConnectionStrophe"
  },
  {
    "label": "FXmppConnectionStrophe()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" XmppConnection . h \" # include \" XmppStrophe / StropheConnection . h \" # include \" XmppStrophe / XmppStropheThread . h \" # include \" XmppStrophe / StropheWebsocketConnection . h \" # include \" Containers / Ticker . h \" # if WITH_XMPP_STROPHE using FXmppMessagesStrophePtr = TSharedPtr<class FXmppMessagesStrophe,ESPMode::ThreadSafe> ; using FXmppMultiUserChatStrophePtr = TSharedPtr<class FXmppMultiUserChatStrophe,ESPMode::ThreadSafe> ; using FXmppPingStrophePtr = TSharedPtr<class FXmppPingStrophe,ESPMode::ThreadSafe> ; using FXmppPresenceStrophePtr = TSharedPtr<class FXmppPresenceStrophe,ESPMode::ThreadSafe> ; using FXmppPrivateChatStrophePtr = TSharedPtr<class FXmppPrivateChatStrophe,ESPMode::ThreadSafe> ; using FXmppPubSubStrophePtr = TSharedPtr<class FXmppPubSubStrophe,ESPMode::ThreadSafe> ; class FStropheContext ; class FStropheError ; class FXmppConnectionStrophe : public IXmppConnection,public FTSTickerObjectBase { FXmppStropheThread ; public :)",
    "insertText": "FXmppConnectionStrophe()"
  },
  {
    "label": "FXmppConnectionStrophe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXmppConnectionStrophe(const FXmppConnectionStrophe& Other)"
  },
  {
    "label": "FXmppConnectionStrophe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXmppConnectionStrophe(FXmppConnectionStrophe&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FXmppConnectionStrophe&)",
    "insertText": "operator(const FXmppConnectionStrophe& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FXmppConnectionStrophe&)",
    "insertText": "operator(FXmppConnectionStrophe&& Other)"
  },
  {
    "label": "SetServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetServer(const FXmppServer& NewServerConfiguration)"
  },
  {
    "label": "GetServer()",
    "kind": "Method",
    "detail": "Function (const FXmppServer&)",
    "insertText": "GetServer()"
  },
  {
    "label": "Login()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Login(const FString& UserId, const FString& Auth)"
  },
  {
    "label": "Logout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logout()"
  },
  {
    "label": "GetLoginStatus()",
    "kind": "Method",
    "detail": "Function (EXmppLoginStatus::Type)",
    "insertText": "GetLoginStatus()"
  },
  {
    "label": "GetUserJid()",
    "kind": "Method",
    "detail": "Function (const FXmppUserJid&)",
    "insertText": "GetUserJid()"
  },
  {
    "label": "OnLoginComplete()",
    "kind": "Method",
    "detail": "Function (FOnXmppLoginComplete&)",
    "insertText": "OnLoginComplete()"
  },
  {
    "label": "MultiUserChat()",
    "kind": "Method",
    "detail": "Function (IXmppMultiUserChatPtr)",
    "insertText": "MultiUserChat()"
  },
  {
    "label": "Presence()",
    "kind": "Method",
    "detail": "Function (IXmppPresencePtr)",
    "insertText": "Presence()"
  },
  {
    "label": "PrivateChat()",
    "kind": "Method",
    "detail": "Function (IXmppChatPtr)",
    "insertText": "PrivateChat()"
  },
  {
    "label": "PubSub()",
    "kind": "Method",
    "detail": "Function (IXmppPubSubPtr)",
    "insertText": "PubSub()"
  },
  {
    "label": "DumpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpState()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SendStanza()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendStanza(FStropheStanza&& Stanza)"
  },
  {
    "label": "StartXmppThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartXmppThread(const FXmppUserJid& ConnectionUser, const FString& ConnectionAuth)"
  },
  {
    "label": "StopXmppThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopXmppThread()"
  },
  {
    "label": "ReceiveConnectionStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveConnectionStateChange(EStropheConnectionEvent Event, bool bQueue = true)"
  },
  {
    "label": "ReceiveConnectionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveConnectionError(const FStropheError& Error, EStropheConnectionEvent Event)"
  },
  {
    "label": "ReceiveStanza()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveStanza(const FStropheStanza& Stanza)"
  },
  {
    "label": "QueueNewLoginStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueNewLoginStatus(EXmppLoginStatus::Type NewStatus)"
  },
  {
    "label": "ProcessLoginStatusChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLoginStatusChange(EXmppLoginStatus::Type NewLoginStatus)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (const FStropheContext&)",
    "insertText": "GetContext()"
  }
]