[
  {
    "label": "SourceMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceMgr"
  },
  {
    "label": "SMDiagnostic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMDiagnostic"
  },
  {
    "label": "SMFixIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMFixIt"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DiagKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DiagKind"
  },
  {
    "label": "SrcBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SrcBuffer"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_SOURCEMGR_H # define LLVM_SUPPORT_SOURCEMGR_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / Support / MemoryBuffer . h \" # include \" llvm / Support / SMLoc . h \" # include<string> namespace llvm { class SourceMgr ; class SMDiagnostic ; class SMFixIt ; class Twine ; class raw_ostream ; class SourceMgr { public : enum DiagKind { DK_Error,DK_Warning,DK_Note } ; typedef)",
    "insertText": "void(*DiagHandlerTy)(const SMDiagnostic &, void *Context)"
  },
  {
    "label": "SrcBuffer()",
    "kind": "Method",
    "detail": "Function (private : struct SrcBuffer { std::unique_ptr<MemoryBuffer> Buffer ; SMLoc IncludeLoc ;)",
    "insertText": "SrcBuffer()"
  },
  {
    "label": "SrcBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SrcBuffer(SrcBuffer &&O) : Buffer(std::move(O.Buffer)), IncludeLoc(O.IncludeLoc)"
  },
  {
    "label": "isValidBufferID()",
    "kind": "Method",
    "detail": "Function (} } ; std::vector<SrcBuffer> Buffers ; std::vector<std::string> IncludeDirectories ; void* LineNoCache ; DiagHandlerTy DiagHandler ; void* DiagContext ; bool)",
    "insertText": "isValidBufferID(unsigned i)"
  },
  {
    "label": "SourceMgr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SourceMgr(const SourceMgr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SourceMgr&)"
  },
  {
    "label": "SourceMgr()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SourceMgr() : LineNoCache(nullptr), DiagHandler(nullptr), DiagContext(nullptr)"
  },
  {
    "label": "SourceMgr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SourceMgr()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "setIncludeDirs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIncludeDirs(const std::vector<std::string> &Dirs)"
  },
  {
    "label": "setDiagHandler()",
    "kind": "Method",
    "detail": "Function (IncludeDirectories = Dirs ; } void)",
    "insertText": "setDiagHandler(DiagHandlerTy DH, void *Ctx = nullptr)"
  },
  {
    "label": "getDiagHandler()",
    "kind": "Method",
    "detail": "Function (DiagHandler = DH ; DiagContext = Ctx ; } DiagHandlerTy)",
    "insertText": "getDiagHandler()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValidBufferID(i))"
  },
  {
    "label": "getNumBuffers()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumBuffers()"
  },
  {
    "label": "getMainFileID()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getMainFileID()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNumBuffers())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (SrcBuffer NB ; NB . Buffer =)",
    "insertText": "move(F)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (NB . IncludeLoc = IncludeLoc ; Buffers .)",
    "insertText": "push_back(std::move(NB))"
  },
  {
    "label": "AddIncludeFile()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "AddIncludeFile(const std::string &Filename, SMLoc IncludeLoc, std::string &IncludedFile)"
  },
  {
    "label": "FindBufferContainingLoc()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "FindBufferContainingLoc(SMLoc Loc)"
  },
  {
    "label": "FindLineNumber()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "FindLineNumber(SMLoc Loc, unsigned BufferID = 0)"
  },
  {
    "label": "getLineAndColumn()",
    "kind": "Method",
    "detail": "Function (} std::pair<unsigned,unsigned>)",
    "insertText": "getLineAndColumn(SMLoc Loc, unsigned BufferID = 0)"
  },
  {
    "label": "PrintMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintMessage(raw_ostream &OS, SMLoc Loc, DiagKind Kind, const Twine &Msg, ArrayRef<SMRange> Ranges = None, ArrayRef<SMFixIt> FixIts = None, bool ShowColors = true)"
  },
  {
    "label": "PrintMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintMessage(SMLoc Loc, DiagKind Kind, const Twine &Msg, ArrayRef<SMRange> Ranges = None, ArrayRef<SMFixIt> FixIts = None, bool ShowColors = true)"
  },
  {
    "label": "PrintMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintMessage(raw_ostream &OS, const SMDiagnostic &Diagnostic, bool ShowColors = true)"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (SMDiagnostic)",
    "insertText": "GetMessage(SMLoc Loc, DiagKind Kind, const Twine &Msg, ArrayRef<SMRange> Ranges = None, ArrayRef<SMFixIt> FixIts = None)"
  },
  {
    "label": "PrintIncludeStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintIncludeStack(SMLoc IncludeLoc, raw_ostream &OS)"
  },
  {
    "label": "SMFixIt()",
    "kind": "Method",
    "detail": "Function (} ; class SMFixIt { SMRange Range ; std::string Text ; public :)",
    "insertText": "SMFixIt(SMLoc Loc, const Twine &Insertion) : Range(Loc, Loc), Text(Insertion.str())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Loc.isValid())"
  },
  {
    "label": "SMFixIt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SMFixIt(SMRange R, const Twine &Replacement) : Range(R), Text(Replacement.str())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(R.isValid())"
  },
  {
    "label": "getText()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getText()"
  },
  {
    "label": "SMDiagnostic()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SMDiagnostic(StringRef filename, SourceMgr::DiagKind Knd, StringRef Msg) : SM(nullptr), Filename(filename), LineNo(-1), ColumnNo(-1), Kind(Knd), Message(Msg)"
  },
  {
    "label": "SMDiagnostic()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN, int Line, int Col, SourceMgr::DiagKind Kind, StringRef Msg, StringRef LineStr, ArrayRef<std::pair<unsigned,unsigned> > Ranges, ArrayRef<SMFixIt> FixIts = None)"
  },
  {
    "label": "getSourceMgr()",
    "kind": "Method",
    "detail": "Function (const SourceMgr*)",
    "insertText": "getSourceMgr()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (FixIts .)",
    "insertText": "push_back(Hint)"
  },
  {
    "label": "getFixIts()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<SMFixIt>)",
    "insertText": "getFixIts()"
  }
]