[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReply"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SBuiltInFunctionVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBuiltInFunctionVisualizer"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" IDetailCustomization . h \" # include \" Generators / MovieSceneEasingCurves . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SCompoundWidget . h \" class IDetailLayoutBuilder ; enum class EMovieSceneBuiltInEasing : uint8 ; class FReply ; class IPropertyHandle ; class SBuiltInFunctionVisualizer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBuiltInFunctionVisualizer)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS()"
  },
  {
    "label": "SBuiltInFunctionVisualizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SBuiltInFunctionVisualizer()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, EMovieSceneBuiltInEasing InValue)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(EMovieSceneBuiltInEasing InValue)"
  },
  {
    "label": "SetAnimationDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationDuration(float TimeInSeconds)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (AnimationDuration = TimeInSeconds ; } private : void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "TickInterp()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TickInterp(const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyClippingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  }
]