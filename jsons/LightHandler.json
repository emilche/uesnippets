[
  {
    "label": "GenContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenContext"
  },
  {
    "label": "LightHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LightHandler"
  },
  {
    "label": "MX_RENDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDER_API"
  },
  {
    "label": "LightHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_LIGHTHANDLER_H # define MATERIALX_LIGHTHANDLER_H # include<MaterialXRender / Export . h> # include<MaterialXRender / Image . h> # include<MaterialXRender / Util . h> # include<MaterialXCore / Document . h> MATERIALX_NAMESPACE_BEGIN const int DEFAULT_ENV_SAMPLE_COUNT ; class GenContext ; using LightHandlerPtr = std::shared_ptr<class LightHandler> ; using LightIdMap = std::unordered_map<string,unsigned int> ; class LightHandler { public :)",
    "insertText": "LightHandler() : _lightTransform(Matrix44::IDENTITY), _directLighting(true), _indirectLighting(true), _envSampleCount(DEFAULT_ENV_SAMPLE_COUNT), _refractionEnv(true)"
  },
  {
    "label": "LightHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LightHandler()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} LightHandlerPtr)",
    "insertText": "create()"
  },
  {
    "label": "setLightTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLightTransform(const Matrix44& mat)"
  },
  {
    "label": "getLightTransform()",
    "kind": "Method",
    "detail": "Function (_lightTransform = mat ; } Matrix44)",
    "insertText": "getLightTransform()"
  },
  {
    "label": "getDirectLighting()",
    "kind": "Method",
    "detail": "Function (_directLighting = enable ; } bool)",
    "insertText": "getDirectLighting()"
  },
  {
    "label": "getIndirectLighting()",
    "kind": "Method",
    "detail": "Function (_indirectLighting = enable ; } bool)",
    "insertText": "getIndirectLighting()"
  },
  {
    "label": "getEnvRadianceMap()",
    "kind": "Method",
    "detail": "Function (_envRadianceMap = map ; } ImagePtr)",
    "insertText": "getEnvRadianceMap()"
  },
  {
    "label": "getEnvIrradianceMap()",
    "kind": "Method",
    "detail": "Function (_envIrradianceMap = map ; } ImagePtr)",
    "insertText": "getEnvIrradianceMap()"
  },
  {
    "label": "getEnvSampleCount()",
    "kind": "Method",
    "detail": "Function (_envSampleCount = count ; } int)",
    "insertText": "getEnvSampleCount()"
  },
  {
    "label": "getRefractionEnv()",
    "kind": "Method",
    "detail": "Function (_refractionEnv = enable ; } int)",
    "insertText": "getRefractionEnv()"
  },
  {
    "label": "getRefractionColor()",
    "kind": "Method",
    "detail": "Function (_refractionColor = color ; } Color3)",
    "insertText": "getRefractionColor()"
  },
  {
    "label": "getAlbedoTable()",
    "kind": "Method",
    "detail": "Function (_albedoTable = table ; } ImagePtr)",
    "insertText": "getAlbedoTable()"
  },
  {
    "label": "setLightSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLightSources(const vector<NodePtr>& lights)"
  },
  {
    "label": "getLightSources()",
    "kind": "Method",
    "detail": "Function (_lightSources = lights ; } const vector<NodePtr>&)",
    "insertText": "getLightSources()"
  },
  {
    "label": "findLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findLights(DocumentPtr doc, vector<NodePtr>& lights)"
  },
  {
    "label": "registerLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerLights(DocumentPtr doc, const vector<NodePtr>& lights, GenContext& context)"
  }
]