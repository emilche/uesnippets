[
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "TSetKeyFuncs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSetKeyFuncs"
  },
  {
    "label": "FCachedAssetKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAssetKey"
  },
  {
    "label": "FCachedAssetKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAssetKeyFuncs"
  },
  {
    "label": "FAssetObjectNameKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetObjectNameKeyFuncs"
  },
  {
    "label": "FAssetDataMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataMap"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FAssetDataOrArrayIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDataOrArrayIndex"
  },
  {
    "label": "FIndirectAssetDataArrays",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectAssetDataArrays"
  },
  {
    "label": "FArrayOrNextIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArrayOrNextIndex"
  },
  {
    "label": "FAssetPackageNameKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetPackageNameKeyFuncs"
  },
  {
    "label": "FAssetPackageNameMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageNameMap"
  },
  {
    "label": "FIterationSentinel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterationSentinel"
  },
  {
    "label": "FIteratorValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIteratorValue"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / Optional . h \" # include \" Misc / StringBuilder . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" UObject / NameTypes . h \" struct FSoftObjectPath ; template<ElementType,KeyFuncs> class TSetKeyFuncs ; # ifndef UE_ASSETREGISTRY_INDIRECT_ASSETDATA_POINTERS # define UE_ASSETREGISTRY_INDIRECT_ASSETDATA_POINTERS 0 # endif namespace UE::AssetRegistry::Private { struct FCachedAssetKey {)",
    "insertText": "FCachedAssetKey(const FAssetData* InAssetData)"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedAssetKey(const FAssetData& InAssetData)"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedAssetKey(FTopLevelAssetPath InAssetPath)"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedAssetKey(const FSoftObjectPath& InObjectPath)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Compare(const FCachedAssetKey& Other)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FStringBuilderBase& Builder)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FName OuterPath = NAME_None ; FName ObjectName = NAME_None ; } ; FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const FCachedAssetKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCachedAssetKey& A, const FCachedAssetKey& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FCachedAssetKey& A)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (struct FCachedAssetKeyFuncs { using KeyInitType = FCachedAssetKey ; using ElementInitType = void ; enum { bAllowDuplicateKeys = false } ; KeyInitType)",
    "insertText": "GetSetKey(const FAssetData* Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  },
  {
    "label": "FAssetDataMap()",
    "kind": "Method",
    "detail": "Function (} } ; # if ! UE_ASSETREGISTRY_INDIRECT_ASSETDATA_POINTERS using FAssetDataMap = TSet<FAssetData*,FCachedAssetKeyFuncs> ; using FConstAssetDataMap = TSet<const FAssetData*,FCachedAssetKeyFuncs> ; # else using FAssetDataPtrIndex = uint32 ; FAssetDataPtrIndex AssetDataPtrIndexInvalid = MAX_uint32 ; struct FAssetObjectNameKeyFuncs ; using FAssetObjectNameSet = TSetKeyFuncs<FAssetDataPtrIndex,FAssetObjectNameKeyFuncs> ; class FAssetDataMap { public : struct FIterator ;)",
    "insertText": "FAssetDataMap()"
  },
  {
    "label": "FAssetDataMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataMap(FAssetDataMap&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetDataMap&)",
    "insertText": "operator(FAssetDataMap&& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(int32 ReservedSize = 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FAssetDataPtrIndex)",
    "insertText": "Add(FAssetData* AssetData, bool* bAlreadyInSet = nullptr)"
  },
  {
    "label": "AddKeyLookup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyLookup(FAssetData* AssetData, FAssetDataPtrIndex AssetIndex, bool* bAlreadyInSet = nullptr)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FCachedAssetKey& Key)"
  },
  {
    "label": "RemoveOnlyKeyLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveOnlyKeyLookup(const FCachedAssetKey& Key)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData*>)",
    "insertText": "Array()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FCachedAssetKey& Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FAssetData* const*)",
    "insertText": "Find(const FCachedAssetKey& Key)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (FAssetDataPtrIndex)",
    "insertText": "FindId(const FCachedAssetKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetData*)",
    "insertText": "operator(FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enumerate(TFunctionRef<bool(FAssetData& AssetData, FAssetDataPtrIndex AssetIndex)> Callback)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (FIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (FIterator)",
    "insertText": "end()"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (public : struct FIterator {)",
    "insertText": "FIterator(const FAssetDataMap& InOwner, int32 InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetData*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FIterator& Other)"
  },
  {
    "label": "IsInUse()",
    "kind": "Method",
    "detail": "Function (const FAssetDataMap& Owner ; int32 Index ; } ; private : bool)",
    "insertText": "IsInUse(const FAssetData* DataFromAssetDatas)"
  },
  {
    "label": "AddToFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToFreeList(FAssetDataPtrIndex Index)"
  },
  {
    "label": "PopFreeIndex()",
    "kind": "Method",
    "detail": "Function (FAssetDataPtrIndex)",
    "insertText": "PopFreeIndex()"
  },
  {
    "label": "AssetByObjectNameValueToTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AssetByObjectNameValueToTypeHash(FAssetDataPtrIndex Value)"
  },
  {
    "label": "AssetByObjectNameValueMatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetByObjectNameValueMatches(FAssetDataPtrIndex Value, const FCachedAssetKey& Key)"
  },
  {
    "label": "FAssetDataOrArrayIndex()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<FAssetObjectNameSet> AssetByObjectName ; TArray<FAssetData*> AssetDatas ; FAssetDataPtrIndex FreeIndex = AssetDataPtrIndexInvalid ; int32 NumFree = 0 ; struct FAssetObjectNameKeyFuncs ; } ; using FAssetDataArrayIndex = uint32 ; struct FAssetDataOrArrayIndex {)",
    "insertText": "FAssetDataOrArrayIndex()"
  },
  {
    "label": "CreateEmptyList()",
    "kind": "Method",
    "detail": "Function (FAssetDataOrArrayIndex)",
    "insertText": "CreateEmptyList()"
  },
  {
    "label": "CreateAssetDataPtrIndex()",
    "kind": "Method",
    "detail": "Function (FAssetDataOrArrayIndex)",
    "insertText": "CreateAssetDataPtrIndex(FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "CreateArrayIndex()",
    "kind": "Method",
    "detail": "Function (FAssetDataOrArrayIndex)",
    "insertText": "CreateArrayIndex(FAssetDataArrayIndex ArrayIndex)"
  },
  {
    "label": "IsEmptyList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyList()"
  },
  {
    "label": "IsAssetDataPtrIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetDataPtrIndex()"
  },
  {
    "label": "IsAssetDataArrayIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetDataArrayIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FAssetDataOrArrayIndex& Other)"
  },
  {
    "label": "AsAssetDataPtrIndex()",
    "kind": "Method",
    "detail": "Function (FAssetDataPtrIndex)",
    "insertText": "AsAssetDataPtrIndex()"
  },
  {
    "label": "AsAssetDataArrayIndex()",
    "kind": "Method",
    "detail": "Function (FAssetDataArrayIndex)",
    "insertText": "AsAssetDataArrayIndex()"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (public : uint32 EmptyList = 0 xffff ' ffff ; uint32 TypeMask = 0 x8000 ' 0 0 0 0 ; uint32 AssetDataType = 0 x0000 ' 0 0 0 0 ; uint32 ArrayType = 0 x8000 ' 0 0 0 0 ; private : uint32 Value = EmptyList ; } ; class FIndirectAssetDataArrays { public : struct FIterator ; void)",
    "insertText": "AddElement(FAssetDataOrArrayIndex& Array, FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElement(FAssetDataOrArrayIndex& Array, FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "RemoveAllElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllElements(FAssetDataOrArrayIndex& Array)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FAssetDataPtrIndex>)",
    "insertText": "Iterate(const FAssetDataOrArrayIndex* ArrayPtr)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (private : uint32 UnusedIndex = static_cast<)",
    "insertText": "uint32(~0)"
  },
  {
    "label": "FArrayOrNextIndex()",
    "kind": "Method",
    "detail": "Function (struct FArrayOrNextIndex { union { TArray<FAssetDataPtrIndex> Array ; uint32 NextIndex ; } ; bool bArray ;)",
    "insertText": "FArrayOrNextIndex()"
  },
  {
    "label": "FArrayOrNextIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FArrayOrNextIndex(FArrayOrNextIndex&& Other)"
  },
  {
    "label": "FArrayOrNextIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FArrayOrNextIndex(const FArrayOrNextIndex& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArrayOrNextIndex&)",
    "insertText": "operator(const FArrayOrNextIndex& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArrayOrNextIndex&)",
    "insertText": "operator(FArrayOrNextIndex&& Other)"
  },
  {
    "label": "AllocateArrayIndex()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "AllocateArrayIndex()"
  },
  {
    "label": "ReleaseArrayIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseArrayIndex(int32 Index)"
  },
  {
    "label": "FAssetPackageNameMap()",
    "kind": "Method",
    "detail": "Function (private : TArray<FArrayOrNextIndex> Arrays ; uint32 FreeList = UnusedIndex ; } ; struct FAssetPackageNameKeyFuncs ; using FAssetPackageNameSet = TSetKeyFuncs<FAssetDataOrArrayIndex,FAssetPackageNameKeyFuncs> ; using FAssetPackageNameSetIteratorBytes = TAlignedBytes<1 6,8> ; class FAssetPackageNameMap { public : struct FIterator ; struct FIterationSentinel ; using KeyType = FName ;)",
    "insertText": "FAssetPackageNameMap(FAssetDataMap& InAssetDataMap, FIndirectAssetDataArrays& InIndirectAssetDataArrays)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetPackageNameMap&)",
    "insertText": "operator(FAssetPackageNameMap&& Other)"
  },
  {
    "label": "FAssetPackageNameMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetPackageNameMap()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(int32 ReservedSize=0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FName PackageName, FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FName PackageName, FAssetDataPtrIndex AssetIndex)"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyArray(TArray<FName>& OutKeys)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TOptional<TConstArrayView<FAssetDataPtrIndex>>)",
    "insertText": "Find(FName PackageName)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FName PackageName)"
  },
  {
    "label": "FAssetPackageNameMap()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAssetPackageNameMap(const FAssetPackageNameMap& Other)"
  },
  {
    "label": "FAssetPackageNameMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetPackageNameMap(FAssetPackageNameMap&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetPackageNameMap&)",
    "insertText": "operator(const FAssetPackageNameMap&& Other)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (struct FIteratorValue { FName Key ; } ; struct FIterator { public :)",
    "insertText": "FIterator(const FAssetPackageNameMap& InOwner)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FIterationSentinel)"
  },
  {
    "label": "AssetOrArrayByPackageNameValueToTypeHash()",
    "kind": "Method",
    "detail": "Function (private : const FAssetPackageNameMap& Owner ; FAssetPackageNameSetIteratorBytes HashIterBytes ; } ; struct FIterationSentinel { } ; private : uint32)",
    "insertText": "AssetOrArrayByPackageNameValueToTypeHash(FAssetDataOrArrayIndex Value)"
  },
  {
    "label": "AssetOrArrayByPackageNameValueMatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetOrArrayByPackageNameValueMatches(FAssetDataOrArrayIndex Value, FName PackageName)"
  },
  {
    "label": "AssetOrArrayIndexToFirstAssetDataPtr()",
    "kind": "Method",
    "detail": "Function (FAssetData*)",
    "insertText": "AssetOrArrayIndexToFirstAssetDataPtr(FAssetDataOrArrayIndex DataOrArrayIndex)"
  },
  {
    "label": "HashCombineQuick()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<FAssetPackageNameSet> AssetOrArrayByPackageName ; FAssetDataMap& AssetDataMap ; FIndirectAssetDataArrays& IndirectArrays ; struct FAssetPackageNameKeyFuncs ; } ; # endif } namespace UE::AssetRegistry::Private { uint32)",
    "insertText": "HashCombineQuick(uint32 A, uint32 B)"
  },
  {
    "label": "GetOptionalOuterPathName()",
    "kind": "Method",
    "detail": "Function (OuterPath = InAssetData ->)",
    "insertText": "GetOptionalOuterPathName()"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (} else # endif { OuterPath = InAssetData -> PackageName ; } ObjectName = InAssetData -> AssetName ; })",
    "insertText": "FCachedAssetKey(const FAssetData& InAssetData) : FCachedAssetKey(&InAssetData)"
  },
  {
    "label": "FCachedAssetKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedAssetKey(FTopLevelAssetPath InAssetPath) : OuterPath(InAssetPath.GetPackageName()) , ObjectName(InAssetPath.GetAssetName())"
  },
  {
    "label": "GetLongPackageFName()",
    "kind": "Method",
    "detail": "Function (OuterPath = InObjectPath .)",
    "insertText": "GetLongPackageFName()"
  },
  {
    "label": "GetAssetFName()",
    "kind": "Method",
    "detail": "Function (ObjectName = InObjectPath .)",
    "insertText": "GetAssetFName()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} else { TStringBuilder<FName::StringBufferSize> Builder ; InObjectPath .)",
    "insertText": "ToString(Builder)"
  },
  {
    "label": "SplitIntoOuterPathAndAssetName()",
    "kind": "Method",
    "detail": "Function (const FAssetPathParts Parts =)",
    "insertText": "SplitIntoOuterPathAndAssetName(Builder)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (OuterPath =)",
    "insertText": "FName(Parts.OuterPath, FNAME_Find)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (ObjectName =)",
    "insertText": "FName(Parts.InnermostName)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<FName::StringBufferSize> Builder ;)",
    "insertText": "AppendString(Builder)"
  },
  {
    "label": "CompareIndexes()",
    "kind": "Method",
    "detail": "Function (} else { return OuterPath .)",
    "insertText": "CompareIndexes(Other.OuterPath)"
  },
  {
    "label": "ConcatenateOuterPathAndObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcatenateOuterPathAndObjectName(Builder, OuterPath, ObjectName)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 InValue = static_cast<)",
    "insertText": "uint32(AssetIndex)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (FAssetDataOrArrayIndex Result ; Result . Value = static_cast<)",
    "insertText": "uint32(InValue)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 InValue = static_cast<)",
    "insertText": "uint32(ArrayIndex)"
  },
  {
    "label": "FArrayOrNextIndex()",
    "kind": "Method",
    "detail": "Function (} FIndirectAssetDataArrays::)",
    "insertText": "FArrayOrNextIndex() : NextIndex(UnusedIndex) , bArray(false)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (bArray = true ;)",
    "insertText": "new(&Array) TArray<FAssetDataPtrIndex>(MoveTemp(Other.Array))"
  },
  {
    "label": "FAssetDataPtrIndex()",
    "kind": "Method",
    "detail": "Function (Other . Array . ~ TArray<)",
    "insertText": "FAssetDataPtrIndex()"
  }
]