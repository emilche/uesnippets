[
  {
    "label": "AAudioVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAudioVolume"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAudioVolumeSubmixSendSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVolumeSubmixSendSettings"
  },
  {
    "label": "FAudioVolumeSubmixOverrideSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVolumeSubmixOverrideSettings"
  },
  {
    "label": "FInteriorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInteriorSettings"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FAudioVolumeProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVolumeProxy"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameFramework / Volume . h \" # include \" ReverbSettings . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" Sound / SoundSubmixSend . h \" # include \" AudioVolume . generated . h \" class AAudioVolume ; struct FBodyInstance ; class USoundSubmix ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (InsideTheVolume,OutsideTheVolume,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = AudioVolumeSubmixSends)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInteriorSettings()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInteriorSettings& Other)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "FAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITORONLY_DATA template<> struct TStructOpsTypeTraits<FInteriorSettings> : public TStructOpsTypeTraitsBase2<FInteriorSettings> { enum { WithPostSerialize = true,} ; } ; # endif struct FAudioVolumeProxy {)",
    "insertText": "FAudioVolumeProxy(const AAudioVolume* AudioVolume)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (uint32 AudioVolumeID = 0 ; uint32 WorldID = 0 ; float Priority = 0 . 0 f ; FReverbSettings ReverbSettings ; FInteriorSettings InteriorSettings ; TArray<FAudioVolumeSubmixSendSettings> SubmixSendSettings ; TArray<FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings ; FBodyInstance* BodyInstance = nullptr ; bool bChanged = false ; } ;)",
    "insertText": "UCLASS(hidecategories=(Advanced, Attachment, Collision, Volume), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=AudioVolume, meta=(AllowPrivateAccess=\"true\"))"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "GetPriority()"
  },
  {
    "label": "GetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabled()"
  },
  {
    "label": "GetReverbSettings()",
    "kind": "Method",
    "detail": "Function (const FReverbSettings&)",
    "insertText": "GetReverbSettings()"
  },
  {
    "label": "GetInteriorSettings()",
    "kind": "Method",
    "detail": "Function (const FInteriorSettings&)",
    "insertText": "GetInteriorSettings()"
  },
  {
    "label": "GetSubmixSendSettings()",
    "kind": "Method",
    "detail": "Function (const TArray<FAudioVolumeSubmixSendSettings>&)",
    "insertText": "GetSubmixSendSettings()"
  },
  {
    "label": "GetSubmixOverrideSettings()",
    "kind": "Method",
    "detail": "Function (const TArray<FAudioVolumeSubmixOverrideSettings>&)",
    "insertText": "GetSubmixOverrideSettings()"
  },
  {
    "label": "TransformUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformUpdated(USceneComponent* RootComponent, EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport)"
  },
  {
    "label": "AddProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProxy()"
  },
  {
    "label": "RemoveProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProxy()"
  },
  {
    "label": "UpdateProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProxy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "PostUnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUnregisterAllComponents()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  }
]