[
  {
    "label": "TRingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRingBuffer"
  },
  {
    "label": "TRingBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / SecureHash . h \" template<DataType> class TRingBuffer { public :)",
    "insertText": "TRingBuffer(uint32 BufferDataSize)"
  },
  {
    "label": "TRingBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TRingBuffer()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(const DataType& Val)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(const DataType* ValBuf, const uint32& BufLen)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Dequeue(DataType& ValOut)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Dequeue(DataType* ValBuf, const uint32& BufLen)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Peek(DataType& ValOut)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Peek(DataType* ValBuf, const uint32& BufLen)"
  },
  {
    "label": "SerialCompare()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SerialCompare(const DataType* SerialBuffer, uint32 CompareLen)"
  },
  {
    "label": "GetShaHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaHash(FSHAHash& OutHash)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(DataType* SerialBuffer)"
  },
  {
    "label": "TRingBuffer()",
    "kind": "Method",
    "detail": "Function (const uint32 BufferDataSize ; DataType* Data ; uint32 NumDataAvailable ; uint32 DataIndex ; uint64 TotalNumDataPushed ; } ; template<DataType> TRingBuffer<DataType)",
    "insertText": "TRingBuffer(uint32 InBufferDataSize) : BufferDataSize(InBufferDataSize)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Data, sizeof(DataType)* BufferDataSize)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Data [ DataIndex + + ] = Val ; DataIndex % = BufferDataSize ; + + TotalNumDataPushed ; NumDataAvailable = FMath::Clamp<)",
    "insertText": "uint32(NumDataAvailable + 1, 0, BufferDataSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (const uint32 FirstPartLen = BufferDataSize - DataIndex ;)",
    "insertText": "Memcpy(Data + DataIndex, ValBuf, sizeof(DataType)* FMath::Min(FirstPartLen, BufLen))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, ValBuf + FirstPartLen, sizeof(DataType)* (BufLen - FirstPartLen))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} DataIndex + = BufLen ; DataIndex % = BufferDataSize ; TotalNumDataPushed + = BufLen ; NumDataAvailable = FMath::Clamp<)",
    "insertText": "uint32(NumDataAvailable + BufLen, 0, BufferDataSize)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (NumDataAvailable = FMath::Clamp<)",
    "insertText": "uint32(NumDataAvailable - 1, 0, BufferDataSize)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (const uint32 DataProvided =)",
    "insertText": "Peek(ValBuf, BufLen)"
  },
  {
    "label": "Bottom()",
    "kind": "Method",
    "detail": "Function (ValOut =)",
    "insertText": "Bottom()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint32 DataProvided =)",
    "insertText": "Min(BufLen, NumDataAvailable)"
  },
  {
    "label": "BottomIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 BottomIdx =)",
    "insertText": "BottomIndex()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (const uint32 BottomPartLen = BufferDataSize - BottomIdx ;)",
    "insertText": "Memcpy(ValBuf, Data + BottomIdx, sizeof(DataType)* FMath::Min(BottomPartLen, DataProvided))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ValBuf + BottomPartLen, Data, sizeof(DataType)* (DataProvided - BottomPartLen))"
  },
  {
    "label": "Memcmp()",
    "kind": "Method",
    "detail": "Function (const uint32 FirstPartLen = BufferDataSize - DataIndex ; int32 FirstCmp =)",
    "insertText": "Memcmp(Data + BottomIndex(), SerialBuffer, sizeof(DataType)* FMath::Min(FirstPartLen, CompareLen))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint32 FirstPartLen =)",
    "insertText": "Min(BufferDataSize - DataIndex, NumDataAvailable)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (FSHA1 Sha ; Sha .)",
    "insertText": "Update(Data + BottomIndex(), sizeof(DataType) * FirstPartLen)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (Sha .)",
    "insertText": "Update(Data, sizeof(DataType) * (NumDataAvailable - FirstPartLen))"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (} Sha .)",
    "insertText": "Final()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (Sha .)",
    "insertText": "GetHash(OutHash.Hash)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (const uint32 BottomPartLen = BufferDataSize - BottomIdx ;)",
    "insertText": "Memcpy(SerialBuffer, Data + BottomIdx, sizeof(DataType)* BottomPartLen)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(SerialBuffer + BottomPartLen, Data, sizeof(DataType)* (BufferDataSize - BottomPartLen))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<DataType> const DataType& TRingBuffer<DataType)",
    "insertText": "operator(const int32& Index)"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (} template<DataType> const DataType& TRingBuffer<DataType)",
    "insertText": "Top()"
  },
  {
    "label": "TopIndex()",
    "kind": "Method",
    "detail": "Function (} template<DataType> uint32 TRingBuffer<DataType)",
    "insertText": "TopIndex()"
  },
  {
    "label": "NextIndex()",
    "kind": "Method",
    "detail": "Function (} template<DataType> uint32 TRingBuffer<DataType)",
    "insertText": "NextIndex()"
  }
]