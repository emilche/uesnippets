[
  {
    "label": "VideoCaptureImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCaptureImpl"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CAPTURE_MAIN_SOURCE_VIDEO_CAPTURE_IMPL_H_ # define MODULES_VIDEO_CAPTURE_MAIN_SOURCE_VIDEO_CAPTURE_IMPL_H_ # include<stddef . h> # include<stdint . h> # include \" api / scoped_refptr . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_rotation . h \" # include \" api / video / video_sink_interface . h \" # include \" modules / video_capture / video_capture . h \" # include \" modules / video_capture / video_capture_config . h \" # include \" modules / video_capture / video_capture_defines . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace videocapturemodule { class VideoCaptureImpl : public VideoCaptureModule { public : rtc::scoped_refptr<VideoCaptureModule>)",
    "insertText": "Create(const char* deviceUniqueIdUTF8)"
  },
  {
    "label": "CreateDeviceInfo()",
    "kind": "Method",
    "detail": "Function (DeviceInfo*)",
    "insertText": "CreateDeviceInfo()"
  },
  {
    "label": "RotationFromDegrees()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RotationFromDegrees(int degrees, VideoRotation* rotation)"
  },
  {
    "label": "RotationInDegrees()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RotationInDegrees(VideoRotation rotation, int* degrees)"
  },
  {
    "label": "RegisterCaptureDataCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCaptureDataCallback(rtc::VideoSinkInterface<VideoFrame>* dataCallback)"
  },
  {
    "label": "DeRegisterCaptureDataCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeRegisterCaptureDataCallback()"
  },
  {
    "label": "SetCaptureRotation()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetCaptureRotation(VideoRotation rotation)"
  },
  {
    "label": "SetApplyRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetApplyRotation(bool enable)"
  },
  {
    "label": "GetApplyRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplyRotation()"
  },
  {
    "label": "CurrentDeviceName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "CurrentDeviceName()"
  },
  {
    "label": "IncomingFrame()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IncomingFrame(uint8_t* videoFrame, size_t videoFrameLength, const VideoCaptureCapability& frameInfo, int64_t captureTime = 0)"
  },
  {
    "label": "StartCapture()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartCapture(const VideoCaptureCapability& capability)"
  },
  {
    "label": "StopCapture()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopCapture()"
  },
  {
    "label": "CaptureStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaptureStarted()"
  },
  {
    "label": "CaptureSettings()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "CaptureSettings(VideoCaptureCapability&)"
  },
  {
    "label": "VideoCaptureImpl()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "VideoCaptureImpl()"
  },
  {
    "label": "UpdateFrameCount()",
    "kind": "Method",
    "detail": "Function (char* _deviceUniqueId ; Mutex api_lock_ ; VideoCaptureCapability _requestedCapability ; private : void)",
    "insertText": "UpdateFrameCount()"
  },
  {
    "label": "CalculateFrameRate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "CalculateFrameRate(int64_t now_ns)"
  },
  {
    "label": "DeliverCapturedFrame()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "DeliverCapturedFrame(VideoFrame& captureFrame)"
  }
]