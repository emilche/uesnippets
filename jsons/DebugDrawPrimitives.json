[
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Declares . h \" # include \" Math / MathFwd . h \" # if CHAOS_DEBUG_DRAW namespace Chaos { struct FChaosDDPrimitives { void)",
    "insertText": "DrawPoint(const FVector3d& Position, const FColor& Color, float PointSize, float Duration)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(const FVector3d& A, const FVector3d& B, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawArrow(const FVector3d& A, const FVector3d& B, float ArrowSize, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCircle(const FVector3d& Center, const FMatrix& Axes, float Radius, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(const FVector3d& Center, const float Radius, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCapsule(const FVector3d& Center, const FQuat4d& Rotation, float HalfHeight, float Radius, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(const FVector3d& Center, const FQuat4d& Rotation, const FVector3d& Size, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangle(const FVector3d& A, const FVector3d& B, const FVector3d& C, const FColor& Color, float LineThickness, float Duration)"
  },
  {
    "label": "DrawString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawString(const FVector3d& TextLocation, const FString& Text, const FColor& Color, float FontScale, bool bDrawShadow, float Duration)"
  }
]