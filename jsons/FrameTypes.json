[
  {
    "label": "TFrame3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFrame3"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include \" Quaternion . h \" # include \" TransformTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TFrame3 { TVector<RealType> Origin ; TQuaternion<RealType> Rotation ;)",
    "insertText": "TFrame3()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (Origin = TVector<RealType)",
    "insertText": "Zero()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (Rotation = TQuaternion<RealType)",
    "insertText": "Identity()"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const TVector<RealType>& OriginIn)"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const TVector<RealType>& OriginIn, const TQuaternion<RealType> RotationIn)"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (Origin = OriginIn ; Rotation = RotationIn ; })",
    "insertText": "TFrame3(const TVector<RealType>& OriginIn, const TVector<RealType>& SetZ)"
  },
  {
    "label": "SetFromTo()",
    "kind": "Method",
    "detail": "Function (Origin = OriginIn ; Rotation .)",
    "insertText": "SetFromTo(TVector<RealType>::UnitZ(), SetZ)"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const TVector<RealType>& OriginIn, const TVector<RealType>& X, const TVector<RealType>& Y, const TVector<RealType>& Z)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Origin = OriginIn ; Rotation = TQuaternion<)",
    "insertText": "RealType(TMatrix3<RealType>(X, Y, Z, false))"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const FTransform& Transform)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Origin = TVector<)",
    "insertText": "RealType(Transform.GetTranslation())"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Rotation = TQuaternion<)",
    "insertText": "RealType(Transform.GetRotation())"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const FPlane& Plane)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Normal(Plane.X, Plane.Y, Plane.Z)"
  },
  {
    "label": "Origin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Origin(RealType)Plane.W * TVector<RealType>(Normal)"
  },
  {
    "label": "SetFromTo()",
    "kind": "Method",
    "detail": "Function (Rotation .)",
    "insertText": "SetFromTo(TVector<RealType>::UnitZ(), (TVector<RealType>)Normal)"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFrame3(const FVector& OriginIn, const FQuat& RotationIn)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Origin = TVector<)",
    "insertText": "RealType(OriginIn)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Rotation = TQuaternion<)",
    "insertText": "RealType(RotationIn)"
  },
  {
    "label": "TFrame3()",
    "kind": "Method",
    "detail": "Function (} template<RealType2>)",
    "insertText": "TFrame3(const TFrame3<RealType2>& OtherFrame)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Origin = static_cast<TVector<)",
    "insertText": "RealType(OtherFrame.Origin)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Rotation = static_cast<TQuaternion<)",
    "insertText": "RealType(OtherFrame.Rotation)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "GetAxis(int AxisIndex)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "GetAxes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAxes(TVector<RealType>& X, TVector<RealType>& Y, TVector<RealType>& Z)"
  },
  {
    "label": "GetAxes()",
    "kind": "Method",
    "detail": "Function (Rotation .)",
    "insertText": "GetAxes(X, Y, Z)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "X()"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Y()"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Z()"
  },
  {
    "label": "ToFTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "ToFTransform()"
  },
  {
    "label": "ToInverseFTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "ToInverseFTransform()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> InverseRotation = Rotation .)",
    "insertText": "Inverse()"
  },
  {
    "label": "ToFPlane()",
    "kind": "Method",
    "detail": "Function (} FPlane)",
    "insertText": "ToFPlane()"
  },
  {
    "label": "ToTransform()",
    "kind": "Method",
    "detail": "Function (} TTransformSRT3<RealType>)",
    "insertText": "ToTransform()"
  },
  {
    "label": "ToInverseTransform()",
    "kind": "Method",
    "detail": "Function (} TTransformSRT3<RealType>)",
    "insertText": "ToInverseTransform()"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "PointAt(RealType X, RealType Y, RealType Z)"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "PointAt(const TVector<RealType>& Point)"
  },
  {
    "label": "ToFramePoint()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "ToFramePoint(const TVector<RealType>& Point)"
  },
  {
    "label": "FromFramePoint()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromFramePoint(const TVector<RealType>& Point)"
  },
  {
    "label": "FromFrameVector()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromFrameVector(const TVector<RealType>& Vector)"
  },
  {
    "label": "FromFrame()",
    "kind": "Method",
    "detail": "Function (} TQuaternion<RealType>)",
    "insertText": "FromFrame(const TQuaternion<RealType>& Quat)"
  },
  {
    "label": "FromFrame()",
    "kind": "Method",
    "detail": "Function (} TRay<RealType>)",
    "insertText": "FromFrame(const TRay<RealType>& Ray)"
  },
  {
    "label": "ToFrame()",
    "kind": "Method",
    "detail": "Function (} TFrame3<RealType>)",
    "insertText": "ToFrame(const TFrame3<RealType>& Frame)"
  },
  {
    "label": "FromFrame()",
    "kind": "Method",
    "detail": "Function (} TFrame3<RealType>)",
    "insertText": "FromFrame(const TFrame3<RealType>& Frame)"
  },
  {
    "label": "ToPlaneUV()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "ToPlaneUV(const TVector<RealType>& Pos, int PlaneNormalAxis = 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Axis0 = 0,Axis1 = 1 ;)",
    "insertText": "if(PlaneNormalAxis == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Axis0 = 2 ; } else)",
    "insertText": "if(PlaneNormalAxis == 1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Axis1 = 2 ; } TVector<RealType> LocalPos = Pos - Origin ; RealType U = LocalPos .)",
    "insertText": "Dot(GetAxis(Axis0))"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType V = LocalPos .)",
    "insertText": "Dot(GetAxis(Axis1))"
  },
  {
    "label": "FromPlaneUV()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromPlaneUV(const TVector2<RealType>& PosUV, int PlaneNormalAxis = 2)"
  },
  {
    "label": "PlanePos()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "PlanePos(PosUV[0], PosUV[1], 0)"
  },
  {
    "label": "ToPlane()",
    "kind": "Method",
    "detail": "Function (PlanePos [ 1 ] = 0 ; PlanePos [ 2 ] = PosUV [ 1 ] ; } return Rotation* PlanePos + Origin ; } TVector<RealType>)",
    "insertText": "ToPlane(const TVector<RealType>& Pos, int PlaneNormalAxis = 2)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Normal =)",
    "insertText": "GetAxis(PlaneNormalAxis)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> LocalVec = Pos - Origin ; RealType SignedDist = LocalVec .)",
    "insertText": "Dot(Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> NewRotation = Quat* Rotation ;)",
    "insertText": "if(NewRotation.Normalize() > 0)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Rotation = NewRotation ; } else {)",
    "insertText": "checkSlow(false)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Transform(const FTransform& XForm)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Origin = TVector<)",
    "insertText": "RealType(XForm.TransformPosition((FVector)Origin))"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(TQuaternion<RealType>(XForm.GetRotation()))"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Transform(const TTransformSRT3<RealType>& XForm)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (Origin = XForm .)",
    "insertText": "TransformPosition(Origin)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(XForm.GetRotation())"
  },
  {
    "label": "AlignAxis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AlignAxis(int AxisIndex, const TVector<RealType>& ToDirection)"
  },
  {
    "label": "RelRotation()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType>)",
    "insertText": "RelRotation(GetAxis(AxisIndex), ToDirection)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(RelRotation)"
  },
  {
    "label": "ConstrainedAlignAxis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstrainedAlignAxis(int AxisIndex, const TVector<RealType>& ToDirection, const TVector<RealType>& AroundVector)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> AxisVec =)",
    "insertText": "GetAxis(AxisIndex)"
  },
  {
    "label": "PlaneAngleSignedD()",
    "kind": "Method",
    "detail": "Function (RealType AngleDeg =)",
    "insertText": "PlaneAngleSignedD(AxisVec, ToDirection, AroundVector)"
  },
  {
    "label": "SetAxisAngleD()",
    "kind": "Method",
    "detail": "Function (TQuaternion<RealType> RelRotation ; RelRotation .)",
    "insertText": "SetAxisAngleD(AroundVector, AngleDeg)"
  },
  {
    "label": "ConstrainedAlignPerpAxes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstrainedAlignPerpAxes(int PerpAxis1 = 0, int PerpAxis2 = 1, int NormalAxis = 2, const TVector<RealType>& UpAxis = TVector<RealType>::UnitZ(), const TVector<RealType>& FallbackAxis = TVector<RealType>::UnitX(), RealType UpDotTolerance = (RealType)0.707)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType> NormalVec =)",
    "insertText": "GetAxis(NormalAxis)"
  },
  {
    "label": "TargetAxis()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType>&)",
    "insertText": "TargetAxis(TMathUtil<RealType>::Abs(NormalVec.Dot(UpAxis)) > UpDotTolerance)"
  },
  {
    "label": "Dots()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "Dots(GetAxis(PerpAxis1).Dot(TargetAxis), GetAxis(PerpAxis2).Dot(TargetAxis))"
  },
  {
    "label": "UseAxis()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UseAxis(TMathUtil<RealType>::Abs(Dots.X) > TMathUtil<RealType>::Abs(Dots.Y))"
  },
  {
    "label": "ConstrainedAlignAxis()",
    "kind": "Method",
    "detail": "Function (RealType UseSign = Dots [ UseAxis ]<0 ? - 1 : 1 ;)",
    "insertText": "ConstrainedAlignAxis(UseAxis, UseSign*TargetAxis, NormalVec)"
  },
  {
    "label": "RayPlaneIntersection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RayPlaneIntersection(const TVector<RealType>& RayOrigin, const TVector<RealType>& RayDirection, int PlaneNormalAxis, UE::Math::TVector<RealType>& HitPointOut)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (HitPointOut = TVector<)",
    "insertText": "RealType(TNumericLimits<RealType>::Max(), TNumericLimits<RealType>::Max(), TNumericLimits<RealType>::Max())"
  }
]