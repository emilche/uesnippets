[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FAnalysisProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisProcessor"
  },
  {
    "label": "FImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Analysis / Engine . h \" # include \" HAL / Runnable . h \" # include \" Logging / MessageLog . h \" # include \" Trace / Analysis . h \" class FEvent ; class FRunnableThread ; namespace UE { namespace Trace { class FAnalysisProcessor::FImpl : public FRunnable { public :)",
    "insertText": "FImpl(IInDataStream& DataStream, TArray<IAnalyzer*>&& InAnalyzers, FMessageDelegate&& InMessage)"
  },
  {
    "label": "FImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FImpl()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "StopAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAnalysis()"
  },
  {
    "label": "WaitOnAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOnAnalysis()"
  },
  {
    "label": "PauseAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseAnalysis(bool bState)"
  },
  {
    "label": "GetLog()",
    "kind": "Method",
    "detail": "Function (FMessageLog*)",
    "insertText": "GetLog()"
  }
]