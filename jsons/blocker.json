[
  {
    "label": "BlockerCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockerCallback"
  },
  {
    "label": "Blocker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Blocker"
  },
  {
    "label": "BlockerCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_OPUS_TEST_BLOCKER_H_ # define MODULES_AUDIO_CODING_CODECS_OPUS_TEST_BLOCKER_H_ # include<memory> # include \" common_audio / channel_buffer . h \" # include \" modules / audio_coding / codecs / opus / test / audio_ring_buffer . h \" namespace webrtc { class BlockerCallback { public : ~)",
    "insertText": "BlockerCallback()"
  },
  {
    "label": "ProcessBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessBlock(const float* const* input, size_t num_frames, size_t num_input_channels, size_t num_output_channels, float* const* output)"
  },
  {
    "label": "Blocker()",
    "kind": "Method",
    "detail": "Function (} ; class Blocker { public :)",
    "insertText": "Blocker(size_t chunk_size, size_t block_size, size_t num_input_channels, size_t num_output_channels, const float* window, size_t shift_amount, BlockerCallback* callback)"
  },
  {
    "label": "Blocker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Blocker()"
  },
  {
    "label": "ProcessChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessChunk(const float* const* input, size_t chunk_size, size_t num_input_channels, size_t num_output_channels, float* const* output)"
  },
  {
    "label": "initial_delay()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "initial_delay()"
  }
]