[
  {
    "label": "FFakeChunkStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeChunkStore"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tests / Mock / ChunkStore . mock . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FFakeChunkStore : public FMockChunkStore { public : void)",
    "insertText": "Put(const FGuid& DataId, TUniquePtr<IChunkDataAccess> ChunkData)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&ThreadLock)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "Add(DataId, MoveTemp(ChunkData))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxPut .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), DataId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} IChunkDataAccess*)",
    "insertText": "Get(const FGuid& DataId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess* Result = nullptr ;)",
    "insertText": "if(Store.Contains(DataId))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result = Store [ DataId ] .)",
    "insertText": "Get()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxGet .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Result, DataId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "Remove(DataId)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Result = StoreMax - Store .)",
    "insertText": "Num()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxGetSize .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Result)"
  }
]