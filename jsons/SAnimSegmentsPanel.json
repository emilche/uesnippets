[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FAnimSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSegment"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FAnimSegmentsPanelCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSegmentsPanelCommands"
  },
  {
    "label": "SAnimSegmentsPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimSegmentsPanel"
  },
  {
    "label": "FAnimTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrack"
  },
  {
    "label": "ETrackViewStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETrackViewStyle"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / Commands / Commands . h \" # include \" Animation / AnimTypes . h \" # include \" Styling / AppStyle . h \" # include \" STrack . h \" # include \" SAnimTrackPanel . h \" struct FAssetData ; class FMenuBuilder ; class UAnimSequenceBase ; struct FAnimSegment ; class USkeleton ;)",
    "insertText": "DECLARE_DELEGATE(FOnPreAnimUpdate ) DECLARE_DELEGATE( FOnPostAnimUpdate ) DECLARE_DELEGATE_OneParam( FOnAnimSegmentNodeClicked, int32 ) DECLARE_DELEGATE_OneParam( FOnAnimSegmentNodeDoubleClicked, int32) DECLARE_DELEGATE_OneParam( FOnAnimSegmentRemoved, int32 ) DECLARE_DELEGATE_FourParams( FOnAnimReplaceMapping, FName, int32, UAnimSequenceBase*, UAnimSequenceBase*) DECLARE_DELEGATE_RetVal_ThreeParams(bool, FOnDiffFromParentAsset, FName, int32, const FAnimSegment& ) DECLARE_DELEGATE_RetVal_OneParam(FLinearColor, FOnGetNodeColor, const FAnimSegment&)"
  },
  {
    "label": "FAnimSegmentsPanelCommands()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimSegmentsPanelCommands() : TCommands<FAnimSegmentsPanelCommands>(\"AnimMontagePanel\", NSLOCTEXT(\"Contexts\", \"AnimMontagePanel\", \"Anim Montage Panel\"), NAME_None, FAppStyle::GetAppStyleSetName())"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandInfo> DeleteSegment ; void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimSegmentsPanel : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimSegmentsPanel ) : _AnimTrack(NULL) , _ViewInputMin() , _ViewInputMax() , _bChildAnimMontage(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(struct FAnimTrack*, AnimTrack) SLATE_ARGUMENT(FName, SlotName) SLATE_ARGUMENT(STrackNodeSelectionSet *, NodeSelectionSet) SLATE_ARGUMENT(TSharedPtr<FTrackColorTracker>, ColorTracker) SLATE_ATTRIBUTE(float, ViewInputMin) SLATE_ATTRIBUTE(float, ViewInputMax) SLATE_EVENT(FOnGetNodeColor, OnGetNodeColor) SLATE_ATTRIBUTE(TArray<float>, DraggableBars) SLATE_ATTRIBUTE(TArray<float>, DraggableBarSnapPositions) SLATE_ATTRIBUTE(float, ScrubPosition) SLATE_ATTRIBUTE(float, TrackMaxValue) SLATE_ATTRIBUTE(int32, TrackNumDiscreteValues) SLATE_EVENT(FOnAnimSegmentNodeClicked, OnAnimSegmentNodeClicked) SLATE_EVENT(FOnAnimSegmentNodeDoubleClicked, OnAnimSegmentNodeDoubleClicked) SLATE_EVENT(FOnPreAnimUpdate, OnPreAnimUpdate) SLATE_EVENT(FOnPostAnimUpdate, OnPostAnimUpdate) SLATE_EVENT(FOnAnimSegmentRemoved, OnAnimSegmentRemoved) SLATE_EVENT(FOnAnimReplaceMapping, OnAnimReplaceMapping) SLATE_EVENT(FOnDiffFromParentAsset, OnDiffFromParentAsset) SLATE_EVENT(FIsAnimAssetValid, OnIsAnimAssetValid) SLATE_EVENT( FOnBarDrag, OnBarDrag) SLATE_EVENT( FOnBarDrop, OnBarDrop) SLATE_EVENT( FOnBarClicked, OnBarClicked) SLATE_EVENT( FOnTrackRightClickContextMenu, OnTrackRightClickContextMenu) SLATE_ARGUMENT(bool, bChildAnimMontage) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "ValidIndex()",
    "kind": "Method",
    "detail": "Function (private : FOnPreAnimUpdate OnPreAnimUpdateDelegate ; FOnPostAnimUpdate OnPostAnimUpdateDelegate ; FOnAnimSegmentNodeClicked OnAnimSegmentNodeClickedDelegate ; FOnAnimSegmentNodeDoubleClicked OnAnimSegmentNodeDoubleClickedDelegate ; FOnAnimSegmentRemoved OnAnimSegmentRemovedDelegate ; FOnAnimReplaceMapping OnAnimReplaceMapping ; FOnDiffFromParentAsset OnDiffFromParentAsset ; FOnGetNodeColor OnGetNodeColor ; enum ETrackViewStyle { TRACK_Single,TRACK_Double,TRACK_ExpandAll } ; bool)",
    "insertText": "ValidIndex(int32 AnimSegmentIndex)"
  },
  {
    "label": "GetNodeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeColor(int32 AnimSegmentIndex)"
  },
  {
    "label": "GetSegmentLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSegmentLength(int32 AnimSegmentIndex)"
  },
  {
    "label": "GetSegmentStartPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSegmentStartPos(int32 AnimSegmentIndex)"
  },
  {
    "label": "GetAnimSegmentName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAnimSegmentName(int32 AnimSegmentIndex)"
  },
  {
    "label": "GetAnimSegmentDetailedInfo()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAnimSegmentDetailedInfo(int32 AnimSegmentIndex)"
  },
  {
    "label": "SetSegmentStartPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSegmentStartPos(float NewStartPos, int32 AnimSegmentIndex)"
  },
  {
    "label": "OnSegmentDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSegmentDropped(int32 AnimSegmentIndex)"
  },
  {
    "label": "ShowSegmentInDetailsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSegmentInDetailsView(int32 AnimSlotIndex, int32 AnimSegmentIndex)"
  },
  {
    "label": "SummonSegmentNodeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonSegmentNodeContextMenu(FMenuBuilder& MenuBuilder, int32 AnimSegmentIndex)"
  },
  {
    "label": "AddAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimSegment(UAnimSequenceBase *NewSequenceBase, float NewStartPos)"
  },
  {
    "label": "IsValidToAdd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToAdd(UAnimSequenceBase* NewSequenceBase, FText* OutReason = nullptr)"
  },
  {
    "label": "OnTrackDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackDragDrop(TSharedPtr<FDragDropOperation> DragDropOp, float DataPos)"
  },
  {
    "label": "OnAssetDragDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAssetDragDrop(TSharedPtr<FAssetDragDropOp> AssetDragDropOp)"
  },
  {
    "label": "OnAnimSegmentNodeClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimSegmentNodeClicked(int32 SegmentIdx)"
  },
  {
    "label": "OnAnimSegmentNodeDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimSegmentNodeDoubleClicked(int32 SegmentIdx)"
  },
  {
    "label": "ReplaceAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAnimSegment(UAnimSequenceBase* NewSequenceBase, float NewStartPos)"
  },
  {
    "label": "ReplaceAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAnimSegment(int32 AnimSegmentIndex, UAnimSequenceBase* NewSequenceBase)"
  },
  {
    "label": "ReplaceAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAnimSegment(const FAssetData& NewSequenceData, int32 AnimSegmentIndex)"
  },
  {
    "label": "ShouldFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilter(const FAssetData& DataToDisplay, USkeleton* InSkeleton, bool bInFilterAdditive, TEnumAsByte<EAdditiveAnimationType> InAdditiveType)"
  },
  {
    "label": "RemoveSelectedAnimSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedAnimSegments()"
  },
  {
    "label": "RemoveAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAnimSegment(int32 AnimSegmentIndex)"
  },
  {
    "label": "RevertToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RevertToParent(int32 AnimSegmentIndex)"
  },
  {
    "label": "OpenAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAsset(int32 AnimSegmentIndex)"
  },
  {
    "label": "FillSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSubMenu(FMenuBuilder& MenuBuilder, int32 AnimSegmentIndex)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  }
]