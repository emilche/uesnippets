[
  {
    "label": "visitor_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "visitor_impl"
  },
  {
    "label": "visitor_evaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "visitor_evaluator"
  },
  {
    "label": "coeff_visitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "coeff_visitor"
  },
  {
    "label": "min_coeff_visitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "min_coeff_visitor"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "max_coeff_visitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "max_coeff_visitor"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_VISITOR_H # define EIGEN_VISITOR_H namespace Eigen { namespace internal { template<Visitor,Derived,int UnrollCount> struct visitor_impl { enum {)",
    "insertText": "col(UnrollCount-1) / Derived::RowsAtCompileTime, row = (UnrollCount-1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Derived &mat, Visitor& visitor)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (visitor_impl<Visitor,Derived,UnrollCount - 1)",
    "insertText": "run(mat, visitor)"
  },
  {
    "label": "visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitor(mat.coeff(row, col), row, col)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Visitor,Derived> struct visitor_impl<Visitor,Derived,0> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Derived & , Visitor&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Visitor,Derived> struct visitor_impl<Visitor,Derived,Dynamic> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Derived& mat, Visitor& visitor)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (visitor .)",
    "insertText": "init(mat.coeff(0,0), 0, 0)"
  },
  {
    "label": "visitor_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<XprType> class visitor_evaluator { public : EIGEN_DEVICE_FUNC)",
    "insertText": "visitor_evaluator(const XprType &xpr) : m_evaluator(xpr), m_xpr(xpr)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; enum { RowsAtCompileTime = XprType::RowsAtCompileTime,CoeffReadCost = internal::evaluator<XprType>::CoeffReadCost } ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "size()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CoeffReturnType)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} protected : internal::evaluator<XprType> m_evaluator ; const XprType& m_xpr ; } ; } template<Derived> template<Visitor> EIGEN_DEVICE_FUNC void DenseBase<Derived)",
    "insertText": "visit(Visitor& visitor)"
  },
  {
    "label": "thisEval()",
    "kind": "Method",
    "detail": "Function (typedef internal::visitor_evaluator<Derived> ThisEvaluator ; ThisEvaluator)",
    "insertText": "thisEval(derived())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { unroll = SizeAtCompileTime ! = Dynamic&& SizeAtCompileTime*)",
    "insertText": "int(ThisEvaluator::CoeffReadCost) + (SizeAtCompileTime-1) * int(internal::functor_traits<Visitor>::Cost)"
  },
  {
    "label": "coeff_visitor()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Derived> struct coeff_visitor { EIGEN_DEVICE_FUNC)",
    "insertText": "coeff_visitor() : row(-1), col(-1), res(0)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} typedef Derived::Scalar Scalar ; Index row,col ; Scalar res ; EIGEN_DEVICE_FUNC void)",
    "insertText": "init(const Scalar& value, Index i, Index j)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (res = value ; row = i ; col = j ; } } ; template<Derived,int NaNPropagation> struct min_coeff_visitor : coeff_visitor<Derived> { typedef Derived::Scalar Scalar ; EIGEN_DEVICE_FUNC void)",
    "insertText": "operator() (const Scalar& value, Index i, Index j)"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (this -> res = value ; this -> row = i ; this -> col = j ; } } } ; template<Scalar,int NaNPropagation> struct functor_traits<max_coeff_visitor<Scalar,NaNPropagation>> { enum { Cost = NumTraits<Scalar>::AddCost } ; } ; } template<Derived> template<int NaNPropagation,IndexType> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "minCoeff(IndexType* rowId, IndexType* colId)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\")"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (internal::min_coeff_visitor<Derived,NaNPropagation> minVisitor ; this ->)",
    "insertText": "visit(minVisitor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* rowId = minVisitor . row ;)",
    "insertText": "if(colId)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)"
  },
  {
    "label": "IndexType()",
    "kind": "Method",
    "detail": "Function (* index =)",
    "insertText": "IndexType((RowsAtCompileTime==1) ? minVisitor.col : minVisitor.row)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (internal::max_coeff_visitor<Derived,NaNPropagation> maxVisitor ; this ->)",
    "insertText": "visit(maxVisitor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* rowPtr = maxVisitor . row ;)",
    "insertText": "if(colPtr)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "index(RowsAtCompileTime==1)"
  }
]