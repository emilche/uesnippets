[
  {
    "label": "UMeshDescriptionCommitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDescriptionCommitter"
  },
  {
    "label": "IMeshDescriptionCommitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshDescriptionCommitter"
  },
  {
    "label": "FCommitterParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommitterParams"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MeshDescription . h \" # include \" UObject / Interface . h \" # include \" TargetInterfaces / MeshTargetInterfaceTypes . h \" # include \" MeshDescriptionCommitter . generated . h \")",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IMeshDescriptionCommitter {)",
    "insertText": "GENERATED_BODY() public: virtual bool CommitMeshDescription(const FMeshDescription& Mesh, const FCommitMeshParameters& CommitParams = FCommitMeshParameters())"
  },
  {
    "label": "CommitMeshDescription()",
    "kind": "Method",
    "detail": "Function (bool bSuccess = false ;)",
    "insertText": "CommitMeshDescription([&](const FCommitterParams& CommitParams) { if (CommitParams.MeshDescriptionOut) { *CommitParams.MeshDescriptionOut = Mesh; bSuccess = true; } }, CommitParams)"
  },
  {
    "label": "CommitMeshDescription()",
    "kind": "Method",
    "detail": "Function (bool bSuccess = false ;)",
    "insertText": "CommitMeshDescription([&](const FCommitterParams& CommitParams) { if (CommitParams.MeshDescriptionOut) { *CommitParams.MeshDescriptionOut = MoveTemp(Mesh); bSuccess = true; } }, CommitParams)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} protected : struct FCommitterParams { FMeshDescription* MeshDescriptionOut = nullptr ; } ; using FCommitter = TFunction<)",
    "insertText": "void(const FCommitterParams&)"
  },
  {
    "label": "CommitMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitMeshDescription(const FCommitter& Committer, const FCommitMeshParameters& CommitParams = FCommitMeshParameters())"
  }
]