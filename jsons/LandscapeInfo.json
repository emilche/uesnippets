[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "ALandscapeStreamingProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeStreamingProxy"
  },
  {
    "label": "ALandscapeSplineActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeSplineActor"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceConstant"
  },
  {
    "label": "FLandscapeEditorLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeEditorLayerSettings"
  },
  {
    "label": "FLandscapeTargetLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTargetLayerSettings"
  },
  {
    "label": "ULandscapeSplinesComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplinesComponent"
  },
  {
    "label": "ULandscapeSplineControlPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineControlPoint"
  },
  {
    "label": "ULandscapeSplineSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineSegment"
  },
  {
    "label": "ULandscapeHeightfieldCollisionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeHeightfieldCollisionComponent"
  },
  {
    "label": "FModulateAlpha",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModulateAlpha"
  },
  {
    "label": "FLandscapeAddCollision",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeAddCollision"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDirtyOnlyInModeScope"
  },
  {
    "label": "FLandscapeInfoLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeInfoLayerSettings"
  },
  {
    "label": "FLandscapeAddCollision()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" UObject / LazyObjectPtr . h \" # include \" UObject / ScriptInterface . h \" # include \" ILandscapeSplineInterface . h \" # if WITH_EDITOR # include \" WorldPartition / WorldPartitionHandle . h \" # endif # include \" LandscapeInfo . generated . h \" class ALandscape ; class ALandscapeProxy ; class ALandscapeStreamingProxy ; class ALandscapeSplineActor ; class ULandscapeComponent ; class ULandscapeLayerInfoObject ; class ULevel ; class UMaterialInstanceConstant ; struct FLandscapeEditorLayerSettings ; struct FLandscapeTargetLayerSettings ; class ULandscapeSplinesComponent ; class ULandscapeSplineControlPoint ; class ULandscapeSplineSegment ; class ULandscapeHeightfieldCollisionComponent ; class FModulateAlpha ; # if WITH_EDITORONLY_DATA struct FLandscapeAddCollision { FVector Corners [ 4 ] ;)",
    "insertText": "FLandscapeAddCollision()"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope()",
    "kind": "Method",
    "detail": "Function (Corners [ 0 ] = Corners [ 1 ] = Corners [ 2 ] = Corners [ 3 ] = FVector::ZeroVector ; } } ; # endif class ULandscapeInfo ; # if WITH_EDITOR struct FLandscapeDirtyOnlyInModeScope {)",
    "insertText": "FLandscapeDirtyOnlyInModeScope()"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeDirtyOnlyInModeScope(ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeDirtyOnlyInModeScope(ULandscapeInfo* InLandscapeInfo, bool bInOverrideDirtyMode)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (private : ULandscapeInfo* LandscapeInfo ; bool bDirtyOnlyInModePrevious ; } ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FLandscapeInfoLayerSettings() : LayerInfoObj(nullptr) , LayerName(NAME_None) #if WITH_EDITORONLY_DATA , ThumbnailMIC(nullptr) , Owner(nullptr) , DebugColorChannel(0) , bValid(false)"
  },
  {
    "label": "FLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeInfoLayerSettings(ULandscapeLayerInfoObject* InLayerInfo, ALandscapeProxy* InProxy)"
  },
  {
    "label": "FLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeInfoLayerSettings(FName InPlaceholderLayerName, ALandscapeProxy* InProxy)"
  },
  {
    "label": "GetLayerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLayerName()"
  },
  {
    "label": "GetTargetLayerSettings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS const FLandscapeTargetLayerSettings&)",
    "insertText": "GetTargetLayerSettings()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TSet<TWeakObjectPtr<UPackage>,TWeakObjectPtrSetKeyFuncs<TWeakObjectPtr<UPackage>>> ModifiedPackages ; bool bDirtyOnlyInMode ; struct FLandscapeDirtyOnlyInModeScope ; # endif TSet<ULandscapeComponent*> SelectedComponents ; TSet<ULandscapeComponent*> SelectedRegionComponents ; FIntRect XYComponentBounds ; public : TMap<FIntPoint,float> SelectedRegion ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetLoadedBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetLoadedBounds()"
  },
  {
    "label": "GetCompleteBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FBox)",
    "insertText": "GetCompleteBounds()"
  },
  {
    "label": "SupportsLandscapeEditing()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "SupportsLandscapeEditing()"
  },
  {
    "label": "AreAllComponentsRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllComponentsRegistered()"
  },
  {
    "label": "GetComponentsInRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentsInRegion(int32 X1, int32 Y1, int32 X2, int32 Y2, TSet<ULandscapeComponent*>& OutComponents, bool bOverlap = true)"
  },
  {
    "label": "HasUnloadedComponentsInRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUnloadedComponentsInRegion(int32 X1, int32 Y1, int32 X2, int32 Y2)"
  },
  {
    "label": "GetLandscapeExtent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLandscapeExtent(ALandscapeProxy* Proxy, FIntRect& ProxyExtent)"
  },
  {
    "label": "GetLandscapeExtent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLandscapeExtent(FIntRect& LandscapeExtent)"
  },
  {
    "label": "GetLandscapeExtent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLandscapeExtent(int32& MinX, int32& MinY, int32& MaxX, int32& MaxY)"
  },
  {
    "label": "GetLandscapeXYComponentBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLandscapeXYComponentBounds(FIntRect& OutXYComponentBounds)"
  },
  {
    "label": "ForAllLandscapeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllLandscapeComponents(TFunctionRef<void(ULandscapeComponent*)> Fn)"
  },
  {
    "label": "ExportHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportHeightmap(const FString& Filename)"
  },
  {
    "label": "ExportHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportHeightmap(const FString& Filename, const FIntRect& ExportRegion)"
  },
  {
    "label": "ExportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportLayer(ULandscapeLayerInfoObject* LayerInfo, const FString& Filename)"
  },
  {
    "label": "ExportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportLayer(ULandscapeLayerInfoObject* LayerInfo, const FString& Filename, const FIntRect& ExportRegion)"
  },
  {
    "label": "ApplySplines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplySplines(bool bOnlySelected, TSet<TObjectPtr<ULandscapeComponent>>* OutModifiedComponents = nullptr, bool bMarkPackageDirty = true)"
  },
  {
    "label": "GetSelectedExtent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectedExtent(int32& MinX, int32& MinY, int32& MaxX, int32& MaxY)"
  },
  {
    "label": "GetLandscapeCenterPos()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLandscapeCenterPos(float& LengthZ, int32 MinX = MAX_int32, int32 MinY = MAX_int32, int32 MaxX = MIN_int32, int32 MaxY = MIN_int32)"
  },
  {
    "label": "IsValidPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPosition(int32 X, int32 Y)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayer(ULandscapeLayerInfoObject* LayerInfo, const FName& LayerName)"
  },
  {
    "label": "ReplaceLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLayer(ULandscapeLayerInfoObject* FromLayerInfo, ULandscapeLayerInfoObject* ToLayerInfo)"
  },
  {
    "label": "GetUsedPaintLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedPaintLayers(const FGuid& InLayerGuid, TArray<ULandscapeLayerInfoObject*>& OutUsedLayerInfos)"
  },
  {
    "label": "UpdateDebugColorMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebugColorMaterial()"
  },
  {
    "label": "GetSelectedComponents()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*>)",
    "insertText": "GetSelectedComponents()"
  },
  {
    "label": "GetSelectedRegionComponents()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*>)",
    "insertText": "GetSelectedRegionComponents()"
  },
  {
    "label": "UpdateSelectedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedComponents(TSet<ULandscapeComponent*>& NewComponents, bool bIsComponentwise = true)"
  },
  {
    "label": "ClearSelectedRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedRegion(bool bIsComponentwise = true)"
  },
  {
    "label": "UpdateAllAddCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllAddCollisions()"
  },
  {
    "label": "UpdateAddCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAddCollision(FIntPoint LandscapeKey)"
  },
  {
    "label": "GetTargetLayerSettings()",
    "kind": "Method",
    "detail": "Function (const FLandscapeTargetLayerSettings&)",
    "insertText": "GetTargetLayerSettings(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "CreateTargetLayerSettingsFor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateTargetLayerSettingsFor(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "GetLayerInfoByName()",
    "kind": "Method",
    "detail": "Function (ULandscapeLayerInfoObject*)",
    "insertText": "GetLayerInfoByName(FName LayerName, ALandscapeProxy* Owner = nullptr)"
  },
  {
    "label": "GetLayerInfoIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerInfoIndex(FName LayerName, ALandscapeProxy* Owner = nullptr)"
  },
  {
    "label": "GetLayerInfoIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerInfoIndex(ULandscapeLayerInfoObject* LayerInfo, ALandscapeProxy* Owner = nullptr)"
  },
  {
    "label": "UpdateLayerInfoMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLayerInfoMap(ALandscapeProxy* Proxy = nullptr, bool bInvalidate = false)"
  },
  {
    "label": "CanDeleteLandscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteLandscape(FText& OutReason)"
  },
  {
    "label": "GetLandscapeProxyForLevel()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "GetLandscapeProxyForLevel(ULevel* Level)"
  },
  {
    "label": "GetDirtyOnlyInMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDirtyOnlyInMode()"
  },
  {
    "label": "OnModifiedPackageSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedPackageSaved(UPackage* InPackage)"
  },
  {
    "label": "GetModifiedPackageCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetModifiedPackageCount()"
  },
  {
    "label": "GetModifiedPackages()",
    "kind": "Method",
    "detail": "Function (TArray<UPackage*>)",
    "insertText": "GetModifiedPackages()"
  },
  {
    "label": "IsPackageModified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageModified(UPackage* InPackage)"
  },
  {
    "label": "MarkModifiedPackagesAsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkModifiedPackagesAsDirty()"
  },
  {
    "label": "ModifyObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModifyObject(UObject* InObject, bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "MarkObjectDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkObjectDirty(UObject* InObject, bool bInForceResave = false, const ALandscape* InLandscapeOverride = nullptr)"
  },
  {
    "label": "GetCurrentLevelLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (# endif ALandscapeProxy*)",
    "insertText": "GetCurrentLevelLandscapeProxy(bool bRegistered)"
  },
  {
    "label": "GetLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "GetLandscapeProxy()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "Reset()"
  },
  {
    "label": "RecreateLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateLandscapeInfo(UWorld* InWorld, bool bMapCheck, bool bKeepRegistrationStatus = false)"
  },
  {
    "label": "FixupProxiesTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupProxiesTransform(bool bDirty = false)"
  },
  {
    "label": "UpdateComponentLayerAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentLayerAllowList()"
  },
  {
    "label": "RecreateCollisionComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCollisionComponents()"
  },
  {
    "label": "RemoveXYOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveXYOffsets()"
  },
  {
    "label": "CanHaveLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveLayersContent()"
  },
  {
    "label": "ClearDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDirtyData()"
  },
  {
    "label": "MoveComponentsToLevel()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "MoveComponentsToLevel(const TArray<ULandscapeComponent*>& InComponents, ULevel* TargetLevel, FName NewProxyName = NAME_None)"
  },
  {
    "label": "MoveComponentsToProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "MoveComponentsToProxy(const TArray<ULandscapeComponent*>& InComponents, ALandscapeProxy* LandscapeProxy, bool bSetPositionAndOffset = false, ULevel* TargetLevel = nullptr)"
  },
  {
    "label": "MoveSplineToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplineToLevel(ULandscapeSplineControlPoint* InControlPoint, ULevel* TargetLevel)"
  },
  {
    "label": "MoveSplinesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplinesToLevel(ULandscapeSplinesComponent* InSplineComponent, ULevel* TargetLevel)"
  },
  {
    "label": "MoveSplineToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplineToProxy(ULandscapeSplineControlPoint* InControlPoint, ALandscapeProxy* InLandscapeProxy)"
  },
  {
    "label": "MoveSplinesToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplinesToProxy(ULandscapeSplinesComponent* InSplineComponent, ALandscapeProxy* InLandscapeProxy)"
  },
  {
    "label": "MoveSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSpline(ULandscapeSplineControlPoint* InControlPoint, TScriptInterface<ILandscapeSplineInterface> InNewOwner)"
  },
  {
    "label": "MoveSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplines(ULandscapeSplinesComponent* InSplineComponent, TScriptInterface<ILandscapeSplineInterface> InNewOwner)"
  },
  {
    "label": "UpdateAllComponentMaterialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllComponentMaterialInstances(bool bInInvalidateCombinationMaterials = false)"
  },
  {
    "label": "GetGridSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetGridSize(uint32 InGridSizeInComponents)"
  },
  {
    "label": "AreNewLandscapeActorsSpatiallyLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreNewLandscapeActorsSpatiallyLoaded()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (# endif ULandscapeInfo*)",
    "insertText": "Find(UWorld* InWorld, const FGuid& LandscapeGuid)"
  },
  {
    "label": "FindOrCreate()",
    "kind": "Method",
    "detail": "Function (ULandscapeInfo*)",
    "insertText": "FindOrCreate(UWorld* InWorld, const FGuid& LandscapeGuid)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UWorld* InWorld, const FGuid& InLandscapeGuid)"
  },
  {
    "label": "ForEachLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachLandscapeProxy(TFunctionRef<bool(ALandscapeProxy*)> Fn)"
  },
  {
    "label": "UpdateNanite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNanite(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "RegisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActor(ALandscapeProxy* Proxy, bool bMapCheck = false, bool bUpdateAllAddCollisions = true)"
  },
  {
    "label": "UnregisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActor(ALandscapeProxy* Proxy)"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegistered(const ALandscapeProxy* Proxy)"
  },
  {
    "label": "RegisterActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActorComponent(ULandscapeComponent* Component, bool bMapCheck = false)"
  },
  {
    "label": "UnregisterActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActorComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "RegisterCollisionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCollisionComponent(ULandscapeHeightfieldCollisionComponent* Component)"
  },
  {
    "label": "UnregisterCollisionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCollisionComponent(ULandscapeHeightfieldCollisionComponent* Component)"
  },
  {
    "label": "GetOverlappedComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverlappedComponents(const FTransform& InAreaWorldTransform, const FBox2D& InAreaExtents, TMap<FIntPoint, ULandscapeComponent*>& OutOverlappedComponents, FIntRect& OutComponentIndicesBoundingRect)"
  },
  {
    "label": "CreateSplineActor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR ALandscapeSplineActor*)",
    "insertText": "CreateSplineActor(const FVector& Location)"
  },
  {
    "label": "ForAllSplineActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllSplineActors(TFunctionRef<void(TScriptInterface<ILandscapeSplineInterface>)> Fn)"
  },
  {
    "label": "GetSplineActors()",
    "kind": "Method",
    "detail": "Function (TArray<TScriptInterface<ILandscapeSplineInterface>>)",
    "insertText": "GetSplineActors()"
  },
  {
    "label": "RegisterSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSplineActor(TScriptInterface<ILandscapeSplineInterface> SplineActor)"
  },
  {
    "label": "UnregisterSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSplineActor(TScriptInterface<ILandscapeSplineInterface> SplineActor)"
  },
  {
    "label": "UpdateRegistrationForSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationForSplineActor(UWorld* InWorld, TScriptInterface<ILandscapeSplineInterface> InSplineActor)"
  },
  {
    "label": "RequestSplineLayerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSplineLayerUpdate()"
  },
  {
    "label": "ForceLayersFullUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceLayersFullUpdate()"
  },
  {
    "label": "SetForceNonSpatiallyLoadedByDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceNonSpatiallyLoadedByDefault(bool bInForceNonSpatiallyLoadedByDefault)"
  },
  {
    "label": "ApplySplinesInternal()",
    "kind": "Method",
    "detail": "Function (bForceNonSpatiallyLoadedByDefault = bInForceNonSpatiallyLoadedByDefault ; } private : bool bForceNonSpatiallyLoadedByDefault = false ; bool)",
    "insertText": "ApplySplinesInternal(bool bOnlySelected, TScriptInterface<ILandscapeSplineInterface> SplineOwner, TSet<TObjectPtr<ULandscapeComponent>>* OutModifiedComponents, bool bMarkPackageDirty, int32 LandscapeMinX, int32 LandscapeMinY, int32 LandscapeMaxX, int32 LandscapeMaxY, TFunctionRef<TSharedPtr<FModulateAlpha>(ULandscapeLayerInfoObject*)> GetOrCreateModulate)"
  },
  {
    "label": "MoveSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSegment(ULandscapeSplineSegment* InSegment, TScriptInterface<ILandscapeSplineInterface> From, TScriptInterface<ILandscapeSplineInterface> To)"
  },
  {
    "label": "MoveControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveControlPoint(ULandscapeSplineControlPoint* InControlPoint, TScriptInterface<ILandscapeSplineInterface> From, TScriptInterface<ILandscapeSplineInterface> To)"
  },
  {
    "label": "UpdateLayerInfoMapInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLayerInfoMapInternal(ALandscapeProxy* Proxy)"
  },
  {
    "label": "TryAddToModifiedPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddToModifiedPackages(UPackage* InPackage, const ALandscape* InLandscapeOverride = nullptr)"
  },
  {
    "label": "RegisterLandscapeActorWithProxyInternal()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "RegisterLandscapeActorWithProxyInternal(ALandscapeProxy* Proxy, bool bMapCheck)"
  }
]