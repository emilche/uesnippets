[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "ALandscapeStreamingProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeStreamingProxy"
  },
  {
    "label": "ALandscapeSplineActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeSplineActor"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceConstant"
  },
  {
    "label": "FLandscapeEditorLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeEditorLayerSettings"
  },
  {
    "label": "FLandscapeTargetLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTargetLayerSettings"
  },
  {
    "label": "ULandscapeSplinesComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplinesComponent"
  },
  {
    "label": "ULandscapeSplineControlPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineControlPoint"
  },
  {
    "label": "ULandscapeSplineSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineSegment"
  },
  {
    "label": "ULandscapeHeightfieldCollisionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeHeightfieldCollisionComponent"
  },
  {
    "label": "FModulateAlpha",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModulateAlpha"
  },
  {
    "label": "FLandscapeAddCollision",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeAddCollision"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDirtyOnlyInModeScope"
  },
  {
    "label": "FLandscapeInfoLayerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeInfoLayerSettings"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "FLandscapeDirtyOnlyInModeScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDirtyOnlyInModeScope"
  },
  {
    "label": "FLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_API)",
    "insertText": "FLandscapeInfoLayerSettings(ULandscapeLayerInfoObject* InLayerInfo, ALandscapeProxy* InProxy)"
  },
  {
    "label": "FLandscapeInfoLayerSettings()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_API)",
    "insertText": "FLandscapeInfoLayerSettings(FName InPlaceholderLayerName, ALandscapeProxy* InProxy)"
  },
  {
    "label": "ExportHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportHeightmap(const FString& Filename)"
  },
  {
    "label": "ExportHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportHeightmap(const FString& Filename, const FIntRect& ExportRegion)"
  },
  {
    "label": "ExportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportLayer(ULandscapeLayerInfoObject* LayerInfo, const FString& Filename)"
  },
  {
    "label": "ExportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportLayer(ULandscapeLayerInfoObject* LayerInfo, const FString& Filename, const FIntRect& ExportRegion)"
  },
  {
    "label": "ApplySplines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplySplines(bool bOnlySelected, TSet<TObjectPtr<ULandscapeComponent>>* OutModifiedComponents = nullptr, bool bMarkPackageDirty = true)"
  },
  {
    "label": "GetLandscapeCenterPos()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLandscapeCenterPos(float& LengthZ, int32 MinX = MAX_int32, int32 MinY = MAX_int32, int32 MaxX = MIN_int32, int32 MaxY = MIN_int32)"
  },
  {
    "label": "IsValidPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPosition(int32 X, int32 Y)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayer(ULandscapeLayerInfoObject* LayerInfo, const FName& LayerName)"
  },
  {
    "label": "ReplaceLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLayer(ULandscapeLayerInfoObject* FromLayerInfo, ULandscapeLayerInfoObject* ToLayerInfo)"
  },
  {
    "label": "UpdateDebugColorMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebugColorMaterial()"
  },
  {
    "label": "UpdateSelectedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedComponents(TSet<ULandscapeComponent*>& NewComponents, bool bIsComponentwise = true)"
  },
  {
    "label": "ClearSelectedRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedRegion(bool bIsComponentwise = true)"
  },
  {
    "label": "UpdateAllAddCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllAddCollisions()"
  },
  {
    "label": "UpdateAddCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAddCollision(FIntPoint LandscapeKey)"
  },
  {
    "label": "CreateTargetLayerSettingsFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTargetLayerSettingsFor(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "UpdateLayerInfoMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLayerInfoMap(ALandscapeProxy* Proxy = nullptr, bool bInvalidate = false)"
  },
  {
    "label": "OnModifiedPackageSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedPackageSaved(UPackage* InPackage)"
  },
  {
    "label": "MarkModifiedPackagesAsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkModifiedPackagesAsDirty()"
  },
  {
    "label": "ModifyObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModifyObject(UObject* InObject, bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "MarkObjectDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkObjectDirty(UObject* InObject, bool bInForceResave = false, const ALandscape* InLandscapeOverride = nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RecreateLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateLandscapeInfo(UWorld* InWorld, bool bMapCheck, bool bKeepRegistrationStatus = false)"
  },
  {
    "label": "FixupProxiesTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupProxiesTransform(bool bDirty = false)"
  },
  {
    "label": "UpdateComponentLayerAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentLayerAllowList()"
  },
  {
    "label": "RecreateCollisionComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCollisionComponents()"
  },
  {
    "label": "RemoveXYOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveXYOffsets()"
  },
  {
    "label": "ClearDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDirtyData()"
  },
  {
    "label": "MoveSplineToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplineToLevel(ULandscapeSplineControlPoint* InControlPoint, ULevel* TargetLevel)"
  },
  {
    "label": "MoveSplinesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplinesToLevel(ULandscapeSplinesComponent* InSplineComponent, ULevel* TargetLevel)"
  },
  {
    "label": "MoveSplineToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplineToProxy(ULandscapeSplineControlPoint* InControlPoint, ALandscapeProxy* InLandscapeProxy)"
  },
  {
    "label": "MoveSplinesToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplinesToProxy(ULandscapeSplinesComponent* InSplineComponent, ALandscapeProxy* InLandscapeProxy)"
  },
  {
    "label": "MoveSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSpline(ULandscapeSplineControlPoint* InControlPoint, TScriptInterface<ILandscapeSplineInterface> InNewOwner)"
  },
  {
    "label": "MoveSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplines(ULandscapeSplinesComponent* InSplineComponent, TScriptInterface<ILandscapeSplineInterface> InNewOwner)"
  },
  {
    "label": "UpdateAllComponentMaterialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllComponentMaterialInstances(bool bInInvalidateCombinationMaterials = false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UWorld* InWorld, const FGuid& InLandscapeGuid)"
  },
  {
    "label": "UpdateNanite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNanite(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "RegisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActor(ALandscapeProxy* Proxy, bool bMapCheck = false, bool bUpdateAllAddCollisions = true)"
  },
  {
    "label": "UnregisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActor(ALandscapeProxy* Proxy)"
  },
  {
    "label": "RegisterActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActorComponent(ULandscapeComponent* Component, bool bMapCheck = false)"
  },
  {
    "label": "UnregisterActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActorComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "RegisterCollisionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCollisionComponent(ULandscapeHeightfieldCollisionComponent* Component)"
  },
  {
    "label": "UnregisterCollisionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCollisionComponent(ULandscapeHeightfieldCollisionComponent* Component)"
  },
  {
    "label": "GetOverlappedComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverlappedComponents(const FTransform& InAreaWorldTransform, const FBox2D& InAreaExtents, TMap<FIntPoint, ULandscapeComponent*>& OutOverlappedComponents, FIntRect& OutComponentIndicesBoundingRect)"
  },
  {
    "label": "RegisterSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSplineActor(TScriptInterface<ILandscapeSplineInterface> SplineActor)"
  },
  {
    "label": "UnregisterSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSplineActor(TScriptInterface<ILandscapeSplineInterface> SplineActor)"
  },
  {
    "label": "UpdateRegistrationForSplineActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationForSplineActor(UWorld* InWorld, TScriptInterface<ILandscapeSplineInterface> InSplineActor)"
  },
  {
    "label": "RequestSplineLayerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSplineLayerUpdate()"
  },
  {
    "label": "ForceLayersFullUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceLayersFullUpdate()"
  },
  {
    "label": "MoveSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSegment(ULandscapeSplineSegment* InSegment, TScriptInterface<ILandscapeSplineInterface> From, TScriptInterface<ILandscapeSplineInterface> To)"
  },
  {
    "label": "MoveControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveControlPoint(ULandscapeSplineControlPoint* InControlPoint, TScriptInterface<ILandscapeSplineInterface> From, TScriptInterface<ILandscapeSplineInterface> To)"
  },
  {
    "label": "UpdateLayerInfoMapInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLayerInfoMapInternal(ALandscapeProxy* Proxy)"
  },
  {
    "label": "TryAddToModifiedPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddToModifiedPackages(UPackage* InPackage, const ALandscape* InLandscapeOverride = nullptr)"
  },
  {
    "label": "RegisterLandscapeActorWithProxyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLandscapeActorWithProxyInternal(ALandscapeProxy* Proxy, bool bMapCheck)"
  }
]