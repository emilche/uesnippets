[
  {
    "label": "IntLog2Floor()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_FASTMATH_H_ # define ABSL_RANDOM_INTERNAL_FASTMATH_H_ # include<cassert> # include<cmath> # include<cstdint> # include \" absl / numeric / bits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { int)",
    "insertText": "IntLog2Floor(uint64_t n)"
  },
  {
    "label": "IntLog2Ceil()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IntLog2Ceil(uint64_t n)"
  },
  {
    "label": "StirlingLogFactorial()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "StirlingLogFactorial(double n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n >= 1)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (double kLog2PI = 1 . 8 3 7 8 7 7 0 6 6 4 0 9 3 4 5 4 8 3 5 6 ; const double logn =)",
    "insertText": "log(n)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double ninv = 1 . 0 / static_cast<)",
    "insertText": "double(n)"
  }
]