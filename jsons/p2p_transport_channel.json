[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RemoteCandidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteCandidate"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "IceControllerAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceControllerAdapter"
  },
  {
    "label": "CandidateAndResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidateAndResolver"
  },
  {
    "label": "IceCredentialsChanged()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_P2P_TRANSPORT_CHANNEL_H_ # define P2P_BASE_P2P_TRANSPORT_CHANNEL_H_ # include<stddef . h> # include<stdint . h> # include<algorithm> # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / async_dns_resolver . h \" # include \" api / async_resolver_factory . h \" # include \" api / candidate . h \" # include \" api / ice_transport_interface . h \" # include \" api / rtc_error . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / enums . h \" # include \" api / transport / stun . h \" # include \" logging / rtc_event_log / events / rtc_event_ice_candidate_pair_config . h \" # include \" logging / rtc_event_log / ice_logger . h \" # include \" p2p / base / active_ice_controller_factory_interface . h \" # include \" p2p / base / basic_async_resolver_factory . h \" # include \" p2p / base / candidate_pair_interface . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / ice_agent_interface . h \" # include \" p2p / base / ice_controller_factory_interface . h \" # include \" p2p / base / ice_controller_interface . h \" # include \" p2p / base / ice_switch_reason . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / p2p_constants . h \" # include \" p2p / base / p2p_transport_channel_ice_field_trials . h \" # include \" p2p / base / port . h \" # include \" p2p / base / port_allocator . h \" # include \" p2p / base / port_interface . h \" # include \" p2p / base / regathering_controller . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / dscp . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / strings / string_builder . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RtcEventLog ; } namespace cricket { enum class IceRestartState { CONNECTING,CONNECTED,DISCONNECTED,MAX_VALUE } ; const int MIN_PINGS_AT_WEAK_PING_INTERVAL = 3 ; bool)",
    "insertText": "IceCredentialsChanged(absl::string_view old_ufrag, absl::string_view old_pwd, absl::string_view new_ufrag, absl::string_view new_pwd)"
  },
  {
    "label": "RemoteCandidate()",
    "kind": "Method",
    "detail": "Function (class RemoteCandidate : public Candidate { public :)",
    "insertText": "RemoteCandidate(const Candidate& c, PortInterface* origin_port) : Candidate(c), origin_port_(origin_port)"
  },
  {
    "label": "origin_port()",
    "kind": "Method",
    "detail": "Function (} PortInterface*)",
    "insertText": "origin_port()"
  },
  {
    "label": "P2PTransportChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P2PTransportChannel(absl::string_view transport_name, int component, PortAllocator* allocator, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "P2PTransportChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "P2PTransportChannel()"
  },
  {
    "label": "P2PTransportChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P2PTransportChannel(const P2PTransportChannel&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (P2PTransportChannel&)",
    "insertText": "operator(const P2PTransportChannel&)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (IceTransportState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetIceTransportState()",
    "kind": "Method",
    "detail": "Function (webrtc::IceTransportState)",
    "insertText": "GetIceTransportState()"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "transport_name()"
  },
  {
    "label": "component()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "component()"
  },
  {
    "label": "writable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writable()"
  },
  {
    "label": "receiving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "receiving()"
  },
  {
    "label": "SetIceRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceRole(IceRole role)"
  },
  {
    "label": "GetIceRole()",
    "kind": "Method",
    "detail": "Function (IceRole)",
    "insertText": "GetIceRole()"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "SetIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceMode(IceMode mode)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "MaybeStartGathering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaybeStartGathering()"
  },
  {
    "label": "gathering_state()",
    "kind": "Method",
    "detail": "Function (IceGatheringState)",
    "insertText": "gathering_state()"
  },
  {
    "label": "ResolveHostnameCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveHostnameCandidate(const Candidate& candidate)"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveAllRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllRemoteCandidates()"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "config()",
    "kind": "Method",
    "detail": "Function (const IceConfig&)",
    "insertText": "config()"
  },
  {
    "label": "ValidateIceConfig()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "ValidateIceConfig(const IceConfig& config)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendPacket(const char* data, size_t len, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(IceTransportStats* ice_transport_stats)"
  },
  {
    "label": "GetRttEstimate()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetRttEstimate()"
  },
  {
    "label": "selected_connection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "selected_connection()"
  },
  {
    "label": "GetSelectedCandidatePair()",
    "kind": "Method",
    "detail": "Function (absl::optional<const CandidatePair>)",
    "insertText": "GetSelectedCandidatePair()"
  },
  {
    "label": "OnStartedPinging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartedPinging()"
  },
  {
    "label": "GetLastPingSentMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetLastPingSentMs()"
  },
  {
    "label": "UpdateConnectionStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConnectionStates()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "SendPingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPingRequest(const Connection* connection)"
  },
  {
    "label": "SwitchSelectedConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchSelectedConnection(const Connection* connection, IceSwitchReason reason)"
  },
  {
    "label": "ForgetLearnedStateForConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetLearnedStateForConnections(rtc::ArrayView<const Connection* const> connections)"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PruneConnections(rtc::ArrayView<const Connection* const> connections)"
  },
  {
    "label": "best_connection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "best_connection()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "ports()",
    "kind": "Method",
    "detail": "Function (incoming_only_ = value ; } const std::vector<PortInterface*>&)",
    "insertText": "ports()"
  },
  {
    "label": "check_receiving_interval()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "check_receiving_interval()"
  },
  {
    "label": "network_route()",
    "kind": "Method",
    "detail": "Function (absl::optional<rtc::NetworkRoute>)",
    "insertText": "network_route()"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const Connection* connection)"
  },
  {
    "label": "DefaultDscpValue()",
    "kind": "Method",
    "detail": "Function (rtc::DiffServCodePoint)",
    "insertText": "DefaultDscpValue()"
  },
  {
    "label": "FindNextPingableConnection()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "FindNextPingableConnection()"
  },
  {
    "label": "MarkConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkConnectionPinged(Connection* conn)"
  },
  {
    "label": "connections()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<Connection*>)",
    "insertText": "connections()"
  },
  {
    "label": "RemoveConnectionForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnectionForTest(Connection* connection)"
  },
  {
    "label": "allocator_session()",
    "kind": "Method",
    "detail": "Function (PortAllocatorSession*)",
    "insertText": "allocator_session()"
  },
  {
    "label": "remote_candidates()",
    "kind": "Method",
    "detail": "Function (} const std::vector<RemoteCandidate>&)",
    "insertText": "remote_candidates()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (const std::string RECEIVING_ABBREV [ 2 ] = { \" _ \",\" R \" } ; const std::string WRITABLE_ABBREV [ 2 ] = { \" _ \",\" W \" } ; rtc::StringBuilder ss ; ss<<\" Channel [ \"<<transport_name_<<\" | \"<<component_<<\" | \"<<RECEIVING_ABBREV [ receiving_ ]<<WRITABLE_ABBREV [ writable_ ]<<\" ] \" ; return ss .)",
    "insertText": "Release()"
  },
  {
    "label": "P2PTransportChannel()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "P2PTransportChannel(absl::string_view transport_name, int component, PortAllocator* allocator, webrtc::AsyncDnsResolverFactoryInterface* async_dns_resolver_factory, std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface> owned_dns_resolver_factory, webrtc::RtcEventLog* event_log, IceControllerFactoryInterface* ice_controller_factory, ActiveIceControllerFactoryInterface* active_ice_controller_factory, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "IsGettingPorts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGettingPorts()"
  },
  {
    "label": "ReadyToSend()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadyToSend(const Connection* connection)"
  },
  {
    "label": "PresumedWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PresumedWritable(const Connection* conn)"
  },
  {
    "label": "RequestSortAndStateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSortAndStateUpdate(IceSwitchReason reason_to_sort)"
  },
  {
    "label": "MaybeStartPinging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStartPinging()"
  },
  {
    "label": "SendPingRequestInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPingRequestInternal(Connection* connection)"
  },
  {
    "label": "SortConnectionsAndUpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConnectionsAndUpdateState(IceSwitchReason reason_to_sort)"
  },
  {
    "label": "ConfigureNetworkRoute()",
    "kind": "Method",
    "detail": "Function (rtc::NetworkRoute)",
    "insertText": "ConfigureNetworkRoute(const Connection* conn)"
  },
  {
    "label": "SwitchSelectedConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchSelectedConnectionInternal(Connection* conn, IceSwitchReason reason)"
  },
  {
    "label": "UpdateTransportState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransportState()"
  },
  {
    "label": "HandleAllTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllTimedOut()"
  },
  {
    "label": "MaybeStopPortAllocatorSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStopPortAllocatorSessions()"
  },
  {
    "label": "OnSelectedConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedConnectionDestroyed() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "ComputeState()",
    "kind": "Method",
    "detail": "Function (IceTransportState)",
    "insertText": "ComputeState()"
  },
  {
    "label": "ComputeIceTransportState()",
    "kind": "Method",
    "detail": "Function (webrtc::IceTransportState)",
    "insertText": "ComputeIceTransportState()"
  },
  {
    "label": "CreateConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateConnections(const Candidate& remote_candidate, PortInterface* origin_port)"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateConnection(PortInterface* port, const Candidate& remote_candidate, PortInterface* origin_port)"
  },
  {
    "label": "FindConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindConnection(const Connection* connection)"
  },
  {
    "label": "GetRemoteCandidateGeneration()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRemoteCandidateGeneration(const Candidate& candidate)"
  },
  {
    "label": "IsDuplicateRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDuplicateRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RememberRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RememberRemoteCandidate(const Candidate& remote_candidate, PortInterface* origin_port)"
  },
  {
    "label": "PingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PingConnection(Connection* conn)"
  },
  {
    "label": "AddAllocatorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocatorSession(std::unique_ptr<PortAllocatorSession> session)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(Connection* connection)"
  },
  {
    "label": "OnPortReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortReady(PortAllocatorSession* session, PortInterface* port)"
  },
  {
    "label": "OnPortsPruned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortsPruned(PortAllocatorSession* session, const std::vector<PortInterface*>& ports)"
  },
  {
    "label": "OnCandidatesReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesReady(PortAllocatorSession* session, const std::vector<Candidate>& candidates)"
  },
  {
    "label": "OnCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateError(PortAllocatorSession* session, const IceCandidateErrorEvent& event)"
  },
  {
    "label": "OnCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesRemoved(PortAllocatorSession* session, const std::vector<Candidate>& candidates)"
  },
  {
    "label": "OnCandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesAllocationDone(PortAllocatorSession* session)"
  },
  {
    "label": "OnUnknownAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnknownAddress(PortInterface* port, const rtc::SocketAddress& addr, ProtocolType proto, IceMessage* stun_msg, const std::string& remote_username, bool port_muxed)"
  },
  {
    "label": "OnCandidateFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateFilterChanged(uint32_t prev_filter, uint32_t cur_filter)"
  },
  {
    "label": "OnPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortDestroyed(PortInterface* port)"
  },
  {
    "label": "PrunePort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrunePort(PortInterface* port)"
  },
  {
    "label": "OnRoleConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRoleConflict(PortInterface* port)"
  },
  {
    "label": "OnConnectionStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionStateChange(Connection* connection)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(Connection* connection, const char* data, size_t len, int64_t packet_time_us)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(Connection* connection)"
  },
  {
    "label": "OnNominated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNominated(Connection* conn)"
  },
  {
    "label": "CheckAndPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndPing()"
  },
  {
    "label": "LogCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCandidatePairConfig(Connection* conn, webrtc::IceCandidatePairConfigType type)"
  },
  {
    "label": "GetNominationAttr()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetNominationAttr(Connection* conn)"
  },
  {
    "label": "GetUseCandidateAttr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCandidateAttr(Connection* conn)"
  },
  {
    "label": "MaybeSwitchSelectedConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSwitchSelectedConnection(const Connection* new_connection, IceSwitchReason reason)"
  },
  {
    "label": "MaybeSwitchSelectedConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSwitchSelectedConnection(IceSwitchReason reason, IceControllerInterface::SwitchResult result)"
  },
  {
    "label": "AllowedToPruneConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowedToPruneConnections()"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneConnections()"
  },
  {
    "label": "remote_ice()",
    "kind": "Method",
    "detail": "Function (IceParameters*)",
    "insertText": "remote_ice()"
  },
  {
    "label": "FindRemoteIceFromUfrag()",
    "kind": "Method",
    "detail": "Function (} const IceParameters*)",
    "insertText": "FindRemoteIceFromUfrag(absl::string_view ufrag, uint32_t* generation)"
  },
  {
    "label": "remote_ice_generation()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "remote_ice_generation()"
  },
  {
    "label": "IsPortPruned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPortPruned(const Port* port)"
  },
  {
    "label": "IsRemoteCandidatePruned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRemoteCandidatePruned(const Candidate& cand)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritable(bool writable)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiving(bool receiving)"
  },
  {
    "label": "SanitizeLocalCandidate()",
    "kind": "Method",
    "detail": "Function (Candidate)",
    "insertText": "SanitizeLocalCandidate(const Candidate& c)"
  },
  {
    "label": "SanitizeRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (Candidate)",
    "insertText": "SanitizeRemoteCandidate(const Candidate& c)"
  },
  {
    "label": "FromIceController()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "FromIceController(const Connection* conn)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(FindConnection(conn))"
  },
  {
    "label": "ComputeEstimatedDisconnectedTimeMs()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ComputeEstimatedDisconnectedTimeMs(int64_t now, Connection* old_connection)"
  },
  {
    "label": "ParseFieldTrials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFieldTrials(const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::ScopedTaskSafety task_safety_ ; std::string transport_name_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "IceControllerAdapter()",
    "kind": "Method",
    "detail": "Function (class IceControllerAdapter : public ActiveIceControllerInterface { public :)",
    "insertText": "IceControllerAdapter(const IceControllerFactoryArgs& args, IceControllerFactoryInterface* ice_controller_factory, ActiveIceControllerFactoryInterface* active_ice_controller_factory, const webrtc::FieldTrialsView* field_trials, P2PTransportChannel* transport)"
  },
  {
    "label": "IceControllerAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IceControllerAdapter()"
  },
  {
    "label": "OnConnectionAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionAdded(const Connection* connection)"
  },
  {
    "label": "OnConnectionSwitched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionSwitched(const Connection* connection)"
  },
  {
    "label": "OnConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionPinged(const Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(const Connection* connection)"
  },
  {
    "label": "OnConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionUpdated(const Connection* connection)"
  },
  {
    "label": "OnSortAndSwitchRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortAndSwitchRequest(IceSwitchReason reason)"
  },
  {
    "label": "OnImmediateSortAndSwitchRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImmediateSortAndSwitchRequest(IceSwitchReason reason)"
  },
  {
    "label": "OnImmediateSwitchRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnImmediateSwitchRequest(IceSwitchReason reason, const Connection* connection)"
  },
  {
    "label": "GetUseCandidateAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCandidateAttribute(const Connection* connection, NominationMode mode, IceMode remote_ice_mode)"
  },
  {
    "label": "LegacyConnections()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<Connection*>)",
    "insertText": "LegacyConnections()"
  },
  {
    "label": "LegacyHasPingableConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegacyHasPingableConnection()"
  },
  {
    "label": "LegacySelectConnectionToPing()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::PingResult)",
    "insertText": "LegacySelectConnectionToPing(int64_t last_ping_sent_ms)"
  },
  {
    "label": "LegacyShouldSwitchConnection()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::SwitchResult)",
    "insertText": "LegacyShouldSwitchConnection(IceSwitchReason reason, const Connection* connection)"
  },
  {
    "label": "LegacySortAndSwitchConnection()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::SwitchResult)",
    "insertText": "LegacySortAndSwitchConnection(IceSwitchReason reason)"
  },
  {
    "label": "LegacyPruneConnections()",
    "kind": "Method",
    "detail": "Function (std::vector<const Connection*>)",
    "insertText": "LegacyPruneConnections()"
  },
  {
    "label": "CandidateAndResolver()",
    "kind": "Method",
    "detail": "Function (struct CandidateAndResolver final {)",
    "insertText": "CandidateAndResolver(const Candidate& candidate, std::unique_ptr<webrtc::AsyncDnsResolverInterface>&& resolver)"
  },
  {
    "label": "CandidateAndResolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CandidateAndResolver()"
  },
  {
    "label": "CandidateAndResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CandidateAndResolver(CandidateAndResolver&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CandidateAndResolver&)",
    "insertText": "operator(CandidateAndResolver&&)"
  },
  {
    "label": "FinishAddingRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAddingRemoteCandidate(const Candidate& new_remote_candidate)"
  },
  {
    "label": "OnCandidateResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateResolved(webrtc::AsyncDnsResolverInterface* resolver)"
  },
  {
    "label": "AddRemoteCandidateWithResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidateWithResult(Candidate candidate, const webrtc::AsyncDnsResolverResult& result)"
  }
]