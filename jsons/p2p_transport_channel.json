[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RemoteCandidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteCandidate"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "IceControllerAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceControllerAdapter"
  },
  {
    "label": "CandidateAndResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandidateAndResolver"
  },
  {
    "label": "IceCredentialsChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IceCredentialsChanged(absl::string_view old_ufrag,\n                           absl::string_view old_pwd,\n                           absl::string_view new_ufrag,\n                           absl::string_view new_pwd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<P2PTransportChannel>)",
    "insertText": "Create(\n      absl::string_view transport_name,\n      int component,\n      webrtc::IceTransportInit init)"
  },
  {
    "label": "ResolveHostnameCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveHostnameCandidate(const Candidate& candidate)"
  },
  {
    "label": "ValidateIceConfig()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "ValidateIceConfig(const IceConfig& config)"
  },
  {
    "label": "PruneAllPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneAllPorts()"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(const Connection* connection)"
  },
  {
    "label": "MarkConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkConnectionPinged(Connection* conn)"
  },
  {
    "label": "RemoveConnectionForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnectionForTest(Connection* connection)"
  },
  {
    "label": "P2PTransportChannel()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "P2PTransportChannel(\n      absl::string_view transport_name,\n      int component,\n      PortAllocator* allocator,\n      // DNS resolver factory\n      webrtc::AsyncDnsResolverFactoryInterface* async_dns_resolver_factory,\n      // If the P2PTransportChannel has to delete the DNS resolver factory\n      // on release, this pointer is set.\n      std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>\n          owned_dns_resolver_factory,\n      webrtc::RtcEventLog* event_log,\n      IceControllerFactoryInterface* ice_controller_factory,\n      ActiveIceControllerFactoryInterface* active_ice_controller_factory,\n      const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "RequestSortAndStateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSortAndStateUpdate(IceSwitchReason reason_to_sort)"
  },
  {
    "label": "MaybeStartPinging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStartPinging()"
  },
  {
    "label": "SendPingRequestInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPingRequestInternal(Connection* connection)"
  },
  {
    "label": "SortConnectionsAndUpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConnectionsAndUpdateState(IceSwitchReason reason_to_sort)"
  },
  {
    "label": "ConfigureNetworkRoute()",
    "kind": "Method",
    "detail": "Function (rtc::NetworkRoute)",
    "insertText": "ConfigureNetworkRoute(const Connection* conn)"
  },
  {
    "label": "SwitchSelectedConnectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchSelectedConnectionInternal(Connection* conn,\n                                        IceSwitchReason reason)"
  },
  {
    "label": "UpdateTransportState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransportState()"
  },
  {
    "label": "HandleAllTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllTimedOut()"
  },
  {
    "label": "MaybeStopPortAllocatorSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStopPortAllocatorSessions()"
  },
  {
    "label": "CreateConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateConnections(const Candidate& remote_candidate,\n                         PortInterface* origin_port)"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateConnection(PortInterface* port,\n                        const Candidate& remote_candidate,\n                        PortInterface* origin_port)"
  },
  {
    "label": "GetRemoteCandidateGeneration()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRemoteCandidateGeneration(const Candidate& candidate)"
  },
  {
    "label": "IsDuplicateRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDuplicateRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RememberRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RememberRemoteCandidate(const Candidate& remote_candidate,\n                               PortInterface* origin_port)"
  },
  {
    "label": "PingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PingConnection(Connection* conn)"
  },
  {
    "label": "AddAllocatorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocatorSession(std::unique_ptr<PortAllocatorSession> session)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(Connection* connection)"
  },
  {
    "label": "OnPortReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortReady(PortAllocatorSession* session, PortInterface* port)"
  },
  {
    "label": "OnPortsPruned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortsPruned(PortAllocatorSession* session,\n                     const std::vector<PortInterface*>& ports)"
  },
  {
    "label": "OnCandidatesReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesReady(PortAllocatorSession* session,\n                         const std::vector<Candidate>& candidates)"
  },
  {
    "label": "OnCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateError(PortAllocatorSession* session,\n                        const IceCandidateErrorEvent& event)"
  },
  {
    "label": "OnCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesRemoved(PortAllocatorSession* session,\n                           const std::vector<Candidate>& candidates)"
  },
  {
    "label": "OnCandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidatesAllocationDone(PortAllocatorSession* session)"
  },
  {
    "label": "OnUnknownAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnknownAddress(PortInterface* port,\n                        const rtc::SocketAddress& addr,\n                        ProtocolType proto,\n                        IceMessage* stun_msg,\n                        const std::string& remote_username,\n                        bool port_muxed)"
  },
  {
    "label": "OnCandidateFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateFilterChanged(uint32_t prev_filter, uint32_t cur_filter)"
  },
  {
    "label": "OnPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortDestroyed(PortInterface* port)"
  },
  {
    "label": "PrunePort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrunePort(PortInterface* port)"
  },
  {
    "label": "OnRoleConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRoleConflict(PortInterface* port)"
  },
  {
    "label": "OnConnectionStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionStateChange(Connection* connection)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(Connection* connection,\n                    const char* data,\n                    size_t len,\n                    int64_t packet_time_us)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(Connection* connection)"
  },
  {
    "label": "OnNominated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNominated(Connection* conn)"
  },
  {
    "label": "CheckAndPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndPing()"
  },
  {
    "label": "LogCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCandidatePairConfig(Connection* conn,\n                              webrtc::IceCandidatePairConfigType type)"
  },
  {
    "label": "MaybeSwitchSelectedConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSwitchSelectedConnection(const Connection* new_connection,\n                                     IceSwitchReason reason)"
  },
  {
    "label": "MaybeSwitchSelectedConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSwitchSelectedConnection(\n      IceSwitchReason reason,\n      IceControllerInterface::SwitchResult result)"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneConnections()"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWritable(bool writable)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiving(bool receiving)"
  },
  {
    "label": "ComputeEstimatedDisconnectedTimeMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ComputeEstimatedDisconnectedTimeMs(int64_t now,\n                                             Connection* old_connection)"
  },
  {
    "label": "ParseFieldTrials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFieldTrials(const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (transport_name_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (component_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (allocator_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (async_dns_resolver_factory_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (incoming_only_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (error_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (allocator_sessions_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ports_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (pruned_ports_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (connections_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_candidates_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sort_dirty_)",
    "insertText": "RTC_GUARDED_BY(\n      network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (options_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ice_parameters_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_ice_parameters_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_ice_mode_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ice_role_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (tiebreaker_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (gathering_state_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (regathering_controller_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (config_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (network_route_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ice_event_log_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "IceControllerAdapter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "IceControllerAdapter(\n        const IceControllerFactoryArgs& args,\n        IceControllerFactoryInterface* ice_controller_factory,\n        ActiveIceControllerFactoryInterface* active_ice_controller_factory,\n        const webrtc::FieldTrialsView* field_trials,\n        P2PTransportChannel* transport)"
  },
  {
    "label": "LegacySelectConnectionToPing()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::PingResult)",
    "insertText": "LegacySelectConnectionToPing(\n        int64_t last_ping_sent_ms)"
  },
  {
    "label": "LegacyShouldSwitchConnection()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::SwitchResult)",
    "insertText": "LegacyShouldSwitchConnection(\n        IceSwitchReason reason,\n        const Connection* connection)"
  },
  {
    "label": "LegacySortAndSwitchConnection()",
    "kind": "Method",
    "detail": "Function (IceControllerInterface::SwitchResult)",
    "insertText": "LegacySortAndSwitchConnection(\n        IceSwitchReason reason)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ice_adapter_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (resolvers_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "FinishAddingRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAddingRemoteCandidate(const Candidate& new_remote_candidate)"
  },
  {
    "label": "OnCandidateResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateResolved(webrtc::AsyncDnsResolverInterface* resolver)"
  },
  {
    "label": "AddRemoteCandidateWithResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidateWithResult(\n      Candidate candidate,\n      const webrtc::AsyncDnsResolverResult& result)"
  }
]