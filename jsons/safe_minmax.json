[
  {
    "label": "Limits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Limits"
  },
  {
    "label": "UnderlyingType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnderlyingType"
  },
  {
    "label": "MType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MType"
  },
  {
    "label": "DefaultType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultType"
  },
  {
    "label": "TypeOr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeOr"
  },
  {
    "label": "ClampType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampType"
  },
  {
    "label": "AcceptableType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AcceptableType"
  },
  {
    "label": "lowest()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_SAFE_MINMAX_H_ # define RTC_BASE_NUMERICS_SAFE_MINMAX_H_ # include<limits> # include<type_traits> # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / safe_compare . h \" # include \" rtc_base / type_traits . h \" namespace rtc { namespace safe_minmax_impl { template<T> struct Limits { T lowest = std::numeric_limits<T)",
    "insertText": "lowest()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (T max = std::numeric_limits<T)",
    "insertText": "max()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<T,bool is_enum = std::is_enum<T>::value> struct UnderlyingType ; template<T> struct UnderlyingType<T,false> { using type = T ; } ; template<T> struct UnderlyingType<T,true> { using type = std::underlying_type<T>::type ; } ; template<T1,T2,bool int1 = IsIntlike<T1>::value,bool int2 = IsIntlike<T2>::value> struct MType {)",
    "insertText": "static_assert(int1 == int2, \"You may not mix integral and floating-point arguments\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<T1,T2> struct MType<T1,T2,false,false> { using min_t = std::common_type<T1,T2>::type ;)",
    "insertText": "static_assert(std::is_same<min_t, T1>::value || std::is_same<min_t, T2>::value, \"\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using max_t = std::common_type<T1,T2>::type ;)",
    "insertText": "static_assert(std::is_same<max_t, T1>::value || std::is_same<max_t, T2>::value, \"\")"
  },
  {
    "label": "SafeLt()",
    "kind": "Method",
    "detail": "Function (} ; template<T1,T2> struct MType<T1,T2,true,true> { using min_t = std::conditional<)",
    "insertText": "SafeLt(Limits<T1>::lowest, Limits<T2>::lowest), T1, typename std::conditional< SafeGt(Limits<T1>::lowest, Limits<T2>::lowest), T2, typename std::conditional<SafeLe(Limits<T1>::max, Limits<T2>::max)"
  },
  {
    "label": "SafeGe()",
    "kind": "Method",
    "detail": "Function (using max_t = std::conditional<)",
    "insertText": "SafeGe(Limits<T1>::max, Limits<T2>::max)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; struct DefaultType ; template<A,B> struct TypeOr { using type = std::conditional<std::is_same<A,DefaultType>::value,B,A>::type ;)",
    "insertText": "static_assert(SafeLe(Limits<type>::lowest, Limits<B>::lowest) && SafeGe(Limits<type>::max, Limits<B>::max), \"The specified type isn't large enough\")"
  },
  {
    "label": "SafeMin()",
    "kind": "Method",
    "detail": "Function (} ; } template<R = safe_minmax_impl::DefaultType,T1 = safe_minmax_impl::DefaultType,T2 = safe_minmax_impl::DefaultType,R2 = safe_minmax_impl::TypeOr<R,safe_minmax_impl::MType<safe_minmax_impl::UnderlyingType<T1>::type,safe_minmax_impl::UnderlyingType<T2>::type>::min_t>::type> R2)",
    "insertText": "SafeMin(T1 a, T2 b)"
  },
  {
    "label": "SafeMax()",
    "kind": "Method",
    "detail": "Function (} template<R = safe_minmax_impl::DefaultType,T1 = safe_minmax_impl::DefaultType,T2 = safe_minmax_impl::DefaultType,R2 = safe_minmax_impl::TypeOr<R,safe_minmax_impl::MType<safe_minmax_impl::UnderlyingType<T1>::type,safe_minmax_impl::UnderlyingType<T2>::type>::max_t>::type> R2)",
    "insertText": "SafeMax(T1 a, T2 b)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} namespace safe_minmax_impl { template<T,L,H,bool int1 = IsIntlike<T>::value,bool int2 = IsIntlike<L>::value,bool int3 = IsIntlike<H>::value> struct ClampType {)",
    "insertText": "static_assert(int1 == int2 && int1 == int3, \"You may not mix integral and floating-point arguments\")"
  },
  {
    "label": "SafeMax()",
    "kind": "Method",
    "detail": "Function (} ; template<T,L,H> struct ClampType<T,L,H,false,false,false> { using type = std::common_type<T,L,H>::type ; } ; template<T,L,H> struct ClampType<T,L,H,true,true,true> { private : auto r_min =)",
    "insertText": "SafeMax(Limits<L>::lowest, SafeMin(Limits<H>::lowest, Limits<T>::lowest))"
  },
  {
    "label": "SafeMin()",
    "kind": "Method",
    "detail": "Function (auto r_max =)",
    "insertText": "SafeMin(Limits<H>::max, SafeMax(Limits<L>::max, Limits<T>::max))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<A> struct AcceptableType { private : bool not_too_large =)",
    "insertText": "sizeof(A) <= sizeof(L) || sizeof(A) <= sizeof(H) || sizeof(A) <= sizeof(T)"
  },
  {
    "label": "SafeLe()",
    "kind": "Method",
    "detail": "Function (bool range_contained =)",
    "insertText": "SafeLe(Limits<A>::lowest, r_min) && SafeLe(r_max, Limits<A>::max)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public : bool value = not_too_large&& range_contained ; } ; using best_signed_type = std::conditional<AcceptableType<int8_t>::value,int8_t,std::conditional<AcceptableType<int16_t>::value,int16_t,std::conditional<AcceptableType<int32_t>::value,int32_t,int64_t>::type>::type>::type ; using best_unsigned_type = std::conditional<AcceptableType<uint8_t>::value,uint8_t,std::conditional<AcceptableType<uint16_t>::value,uint16_t,std::conditional<AcceptableType<uint32_t>::value,uint32_t,uint64_t>::type>::type>::type ; public : using type = std::conditional<std::is_signed<T>::value,std::conditional<AcceptableType<best_signed_type>::value,best_signed_type,best_unsigned_type>::type,std::conditional<AcceptableType<best_unsigned_type>::value,best_unsigned_type,best_signed_type>::type>::type ;)",
    "insertText": "static_assert(AcceptableType<type>::value, \"\")"
  },
  {
    "label": "SafeClamp()",
    "kind": "Method",
    "detail": "Function (} ; } template<R = safe_minmax_impl::DefaultType,T = safe_minmax_impl::DefaultType,L = safe_minmax_impl::DefaultType,H = safe_minmax_impl::DefaultType,R2 = safe_minmax_impl::TypeOr<R,safe_minmax_impl::ClampType<safe_minmax_impl::UnderlyingType<T>::type,safe_minmax_impl::UnderlyingType<L>::type,safe_minmax_impl::UnderlyingType<H>::type>::type>::type> R2)",
    "insertText": "SafeClamp(T x, L min, H max)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(min, max)"
  }
]