[
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "FHitProxyId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyId"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FBatchedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedPoint"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "FDFRelativeViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFRelativeViewMatrices"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "ESimpleElementBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimpleElementBlendMode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSimpleElementVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleElementVertex"
  },
  {
    "label": "FSimpleElementVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementVertexDeclaration"
  },
  {
    "label": "FBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElementParameters"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FAllocationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationInfo"
  },
  {
    "label": "FBatchedWireTris",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedWireTris"
  },
  {
    "label": "FBatchedThickLines",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedThickLines"
  },
  {
    "label": "FBatchedSprite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedSprite"
  },
  {
    "label": "FBatchedMeshElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedMeshElement"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / EngineTypes . h \" # include \" Templates / RefCounting . h \" # include \" RenderResource . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" Math / DoubleFloat . h \" class FGraphicsPipelineStateInitializer ; class FHitProxyId ; class FRHICommandList ; class FSceneView ; struct FBatchedPoint ; struct FMeshPassProcessorRenderState ; struct FDFRelativeViewMatrices ; enum EBlendMode : int ; enum ESimpleElementBlendMode : int ; namespace EBlendModeFilter { enum Type { None = 0,OpaqueAndMasked = 1,Translucent = 2,)",
    "insertText": "All(OpaqueAndMasked | Translucent)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (} ; struct FSimpleElementVertex { FDFVector4 Position ; FVector2f TextureCoordinate ; FLinearColor Color ; FColor HitProxyIdColor ;)",
    "insertText": "FSimpleElementVertex()"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector3f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector3d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector3f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector4d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertex(const FVector3d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} ; class FSimpleElementVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ;)",
    "insertText": "FSimpleElementVertexDeclaration()"
  },
  {
    "label": "FSimpleElementVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVertexDeclaration(FSimpleElementVertexDeclaration&&)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "BindShaders()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FSimpleElementVertexDeclaration> GSimpleElementVertexDeclaration ; class FBatchedElementParameters : public FRefCountedObject { public : void)",
    "insertText": "BindShaders(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, ERHIFeatureLevel::Type InFeatureLevel, const FMatrix& InTransform, const float InGamma, const FMatrix& ColorWeights, const FTexture* Texture)"
  },
  {
    "label": "FBatchedElements()",
    "kind": "Method",
    "detail": "Function (} ; class FBatchedElements { public :)",
    "insertText": "FBatchedElements()"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLine(const FVector& Start,const FVector& End,const FLinearColor& Color,FHitProxyId HitProxyId, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "AddTranslucentLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTranslucentLine(const FVector& Start, const FVector& End, const FLinearColor& Color, FHitProxyId HitProxyId, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(const FVector& Position,float Size,const FLinearColor& Color,FHitProxyId HitProxyId)"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertex(const FVector4& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId HitProxyId)"
  },
  {
    "label": "AddVertexf()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertexf(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId HitProxyId)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0,int32 V1,int32 V2,const FTexture* Texture,EBlendMode BlendMode)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0, int32 V1, int32 V2, const FTexture* Texture, ESimpleElementBlendMode BlendMode, const FDepthFieldGlowInfo& GlowInfo = FDepthFieldGlowInfo())"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0,int32 V1,int32 V2,FBatchedElementParameters* BatchedElementParameters,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "AddReserveTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveTriangles(int32 NumMeshTriangles,const FTexture* Texture,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "ReserveTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveTriangles(int32 NumMeshTriangles,const FTexture* Texture,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "AddReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveVertices(int32 NumMeshVerts)"
  },
  {
    "label": "ReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVertices(int32 NumMeshVerts)"
  },
  {
    "label": "AddReserveLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveLines(int32 NumLines, bool bDepthBiased = false, bool bThickLines = false)"
  },
  {
    "label": "AddSprite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSprite(const FVector& Position, float SizeX, float SizeY, const FTexture* Texture, const FLinearColor& Color, FHitProxyId HitProxyId, float U, float UL, float V, float VL, uint8 BlendMode, float OpacityMaskRefVal)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Draw(FRHICommandList& RHICmdList, const FMeshPassProcessorRenderState& DrawRenderState, ERHIFeatureLevel::Type FeatureLevel, const FSceneView& View, bool bHitTesting, float Gamma = 1.0f, EBlendModeFilter::Type Filter = EBlendModeFilter::All)"
  },
  {
    "label": "CreateProxySceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView)",
    "insertText": "CreateProxySceneView(const FMatrix& ProjectionMatrix, const FIntRect& ViewRect)"
  },
  {
    "label": "AddTriangleExtensive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangleExtensive(int32 V0,int32 V1,int32 V2,FBatchedElementParameters* BatchedElementParameters,const FTexture* Texture,ESimpleElementBlendMode BlendMode, const FDepthFieldGlowInfo& GlowInfo = FDepthFieldGlowInfo())"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "FAllocationInfo()",
    "kind": "Method",
    "detail": "Function (} class FAllocationInfo { public :)",
    "insertText": "FAllocationInfo()"
  },
  {
    "label": "AddAllocationInfo()",
    "kind": "Method",
    "detail": "Function (private : int32 NumLineVertices = 0 ; int32 NumPoints = 0 ; int32 NumWireTris = 0 ; int32 NumWireTriVerts = 0 ; int32 NumThickLines = 0 ; int32 NumSprites = 0 ; int32 NumMeshElements = 0 ; int32 NumMeshVertices = 0 ; FBatchedElements ; } ; void)",
    "insertText": "AddAllocationInfo(FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(const FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FBatchedElements& Other)"
  },
  {
    "label": "DrawPointElements()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DrawPointElements(FRHICommandList& RHICmdList, const FMatrix& Transform, const uint32 ViewportSizeX, const uint32 ViewportSizeY, const FVector& CameraX, const FVector& CameraY)"
  },
  {
    "label": "PrepareShaders()",
    "kind": "Method",
    "detail": "Function (TArray<FSimpleElementVertex> LineVertices ; struct FBatchedPoint { FVector Position ; float Size ; FColor Color ; FColor HitProxyColor ; } ; TArray<FBatchedPoint> Points ; struct FBatchedWireTris { float DepthBias ; } ; TArray<FBatchedWireTris> WireTris ; TResourceArray<FSimpleElementVertex> WireTriVerts ; struct FBatchedThickLines { FVector Start ; FVector End ; float Thickness ; FLinearColor Color ; FColor HitProxyColor ; float DepthBias ; uint32 bScreenSpace ; } ; TArray<FBatchedThickLines> ThickLines ; struct FBatchedSprite { FVector Position ; float SizeX ; float SizeY ; const FTexture* Texture ; FLinearColor Color ; FColor HitProxyColor ; float U ; float UL ; float V ; float VL ; float OpacityMaskRefVal ; uint8 BlendMode ; } ; TArray<FBatchedSprite> Sprites ; struct FBatchedMeshElement { uint32 MinVertex ; uint32 MaxVertex ; TArray<uint16,TInlineAllocator<6>> Indices ; const FTexture* Texture ; TRefCountPtr<FBatchedElementParameters> BatchedElementParameters ; ESimpleElementBlendMode BlendMode ; FDepthFieldGlowInfo GlowInfo ; } ; int32 MaxMeshIndicesAllowed ; int32 MaxMeshVerticesAllowed ; TArray<FBatchedMeshElement,TInlineAllocator<2>> MeshElements ; TArray<FSimpleElementVertex,TInlineAllocator<4>> MeshVertices ; void)",
    "insertText": "PrepareShaders(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, uint32 StencilRef, ERHIFeatureLevel::Type FeatureLevel, ESimpleElementBlendMode BlendMode, const FDFRelativeViewMatrices& ViewMatrices, FBatchedElementParameters* BatchedElementParameters, const FTexture* Texture, bool bHitTesting, float Gamma, const FDepthFieldGlowInfo* GlowInfo = nullptr, const FSceneView* View = nullptr, float OpacityMaskRefVal = .5f)"
  }
]