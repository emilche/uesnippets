[
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "FHitProxyId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyId"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FBatchedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedPoint"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "FDFRelativeViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFRelativeViewMatrices"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "ESimpleElementBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimpleElementBlendMode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSimpleElementVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleElementVertex"
  },
  {
    "label": "FSimpleElementVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementVertexDeclaration"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElementParameters"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FAllocationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationInfo"
  },
  {
    "label": "FBatchedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedPoint"
  },
  {
    "label": "FBatchedWireTris",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedWireTris"
  },
  {
    "label": "FBatchedThickLines",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedThickLines"
  },
  {
    "label": "FBatchedSprite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedSprite"
  },
  {
    "label": "FBatchedMeshElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedMeshElement"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex()"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector3f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector3d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, const FColor& InHitProxyColor)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector3f& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector4d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertex()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertex(const FVector3d& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId InHitProxyId)"
  },
  {
    "label": "FSimpleElementVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertexDeclaration()"
  },
  {
    "label": "FSimpleElementVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementVertexDeclaration(FSimpleElementVertexDeclaration&&)"
  },
  {
    "label": "FBatchedElements()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FBatchedElements()"
  },
  {
    "label": "AddLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLine(const FVector& Start,const FVector& End,const FLinearColor& Color,FHitProxyId HitProxyId, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "AddTranslucentLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTranslucentLine(const FVector& Start, const FVector& End, const FLinearColor& Color, FHitProxyId HitProxyId, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(const FVector& Position,float Size,const FLinearColor& Color,FHitProxyId HitProxyId)"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertex(const FVector4& InPosition, const FVector2D& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId HitProxyId)"
  },
  {
    "label": "AddVertexf()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertexf(const FVector4f& InPosition, const FVector2f& InTextureCoordinate, const FLinearColor& InColor, FHitProxyId HitProxyId)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0,int32 V1,int32 V2,const FTexture* Texture,EBlendMode BlendMode)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0,int32 V1,int32 V2,FBatchedElementParameters* BatchedElementParameters,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "AddReserveTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveTriangles(int32 NumMeshTriangles,const FTexture* Texture,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "ReserveTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveTriangles(int32 NumMeshTriangles,const FTexture* Texture,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "AddReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveVertices(int32 NumMeshVerts)"
  },
  {
    "label": "ReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVertices(int32 NumMeshVerts)"
  },
  {
    "label": "AddReserveLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveLines(int32 NumLines, bool bDepthBiased = false, bool bThickLines = false)"
  },
  {
    "label": "AddSprite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSprite(\n\t\tconst FVector& Position,\n\t\tfloat SizeX,\n\t\tfloat SizeY,\n\t\tconst FTexture* Texture,\n\t\tconst FLinearColor& Color,\n\t\tFHitProxyId HitProxyId,\n\t\tfloat U,\n\t\tfloat UL,\n\t\tfloat V,\n\t\tfloat VL,\n\t\tuint8 BlendMode,\n\t\tfloat OpacityMaskRefVal\n\t\t)"
  },
  {
    "label": "CreateProxySceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView)",
    "insertText": "CreateProxySceneView(const FMatrix& ProjectionMatrix, const FIntRect& ViewRect)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(const FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FBatchedElements& Other)"
  }
]