[
  {
    "label": "UmaHistogramExactLinear()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_FUNCTIONS_H_ # define BASE_METRICS_HISTOGRAM_FUNCTIONS_H_ # include<string> # include<type_traits> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / metrics / histogram . h \" # include \" base / metrics / histogram_base . h \" # include \" base / time / time . h \" namespace base { BASE_EXPORT void)",
    "insertText": "UmaHistogramExactLinear(const std::string& name, int sample, int exclusive_max)"
  },
  {
    "label": "UmaHistogramExactLinear()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramExactLinear(const char* name, int sample, int exclusive_max)"
  },
  {
    "label": "UmaHistogramEnumeration()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "UmaHistogramEnumeration(const std::string& name, T sample)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(static_cast<uintmax_t>(sample), static_cast<uintmax_t>(T::kMaxValue))"
  },
  {
    "label": "UmaHistogramEnumeration()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "UmaHistogramEnumeration(const char* name, T sample)"
  },
  {
    "label": "UmaHistogramEnumeration()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "UmaHistogramEnumeration(const std::string& name, T sample, T enum_size)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(static_cast<uintmax_t>(enum_size), static_cast<uintmax_t>(INT_MAX))"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(static_cast<uintmax_t>(sample), static_cast<uintmax_t>(enum_size))"
  },
  {
    "label": "UmaHistogramEnumeration()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "UmaHistogramEnumeration(const char* name, T sample, T enum_size)"
  },
  {
    "label": "UmaHistogramBoolean()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT void)",
    "insertText": "UmaHistogramBoolean(const std::string& name, bool sample)"
  },
  {
    "label": "UmaHistogramBoolean()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramBoolean(const char* name, bool sample)"
  },
  {
    "label": "UmaHistogramPercentage()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramPercentage(const std::string& name, int percent)"
  },
  {
    "label": "UmaHistogramPercentage()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramPercentage(const char* name, int percent)"
  },
  {
    "label": "UmaHistogramPercentageObsoleteDoNotUse()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramPercentageObsoleteDoNotUse(const std::string& name, int percent)"
  },
  {
    "label": "UmaHistogramPercentageObsoleteDoNotUse()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramPercentageObsoleteDoNotUse(const char* name, int percent)"
  },
  {
    "label": "UmaHistogramCustomCounts()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomCounts(const std::string& name, int sample, int min, int exclusive_max, size_t buckets)"
  },
  {
    "label": "UmaHistogramCustomCounts()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomCounts(const char* name, int sample, int min, int exclusive_max, size_t buckets)"
  },
  {
    "label": "UmaHistogramCounts100()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts100(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts100()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts100(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCounts1000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts1000(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts1000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts1000(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCounts10000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts10000(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts10000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts10000(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCounts100000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts100000(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts100000()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts100000(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCounts1M()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts1M(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts1M()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts1M(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCounts10M()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts10M(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramCounts10M()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCounts10M(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramCustomTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomTimes(const std::string& name, TimeDelta sample, TimeDelta min, TimeDelta max, size_t buckets)"
  },
  {
    "label": "UmaHistogramCustomTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomTimes(const char* name, TimeDelta sample, TimeDelta min, TimeDelta max, size_t buckets)"
  },
  {
    "label": "UmaHistogramTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramTimes(const std::string& name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramTimes(const char* name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramMediumTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMediumTimes(const std::string& name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramMediumTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMediumTimes(const char* name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramLongTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramLongTimes(const std::string& name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramLongTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramLongTimes(const char* name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramLongTimes100()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramLongTimes100(const std::string& name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramLongTimes100()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramLongTimes100(const char* name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramCustomMicrosecondsTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomMicrosecondsTimes(const std::string& name, TimeDelta sample, TimeDelta min, TimeDelta max, size_t buckets)"
  },
  {
    "label": "UmaHistogramCustomMicrosecondsTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramCustomMicrosecondsTimes(const char* name, TimeDelta sample, TimeDelta min, TimeDelta max, size_t buckets)"
  },
  {
    "label": "UmaHistogramMicrosecondsTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMicrosecondsTimes(const std::string& name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramMicrosecondsTimes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMicrosecondsTimes(const char* name, TimeDelta sample)"
  },
  {
    "label": "UmaHistogramMemoryKB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryKB(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramMemoryKB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryKB(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramMemoryMB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryMB(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramMemoryMB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryMB(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramMemoryLargeMB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryLargeMB(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramMemoryLargeMB()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramMemoryLargeMB(const char* name, int sample)"
  },
  {
    "label": "UmaHistogramSparse()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramSparse(const std::string& name, int sample)"
  },
  {
    "label": "UmaHistogramSparse()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UmaHistogramSparse(const char* name, int sample)"
  }
]