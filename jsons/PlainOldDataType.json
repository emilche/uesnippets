[
  {
    "label": "bool_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "bool_t"
  },
  {
    "label": "PlainOldDataType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PlainOldDataType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PODTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PODTraits"
  },
  {
    "label": "PODTraitsFromEnum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PODTraitsFromEnum"
  },
  {
    "label": "PTYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PTYPE"
  },
  {
    "label": "PODTraitsFromType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PODTraitsFromType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Util_PlainOldDataType_h # define Alembic_Util_PlainOldDataType_h # include<Alembic / Util / Foundation . h> # include<Alembic / Util / Exception . h> # if !)",
    "insertText": "defined(_MSC_VER)"
  },
  {
    "label": "bool_t()",
    "kind": "Method",
    "detail": "Function (namespace Util { namespace ALEMBIC_VERSION_NS { typedef unsigned char byte_t ; class bool_t { public :)",
    "insertText": "bool_t() : m_byte( 0)"
  },
  {
    "label": "bool_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bool_t(bool tf ) : m_byte( static_cast<byte_t>( tf ))"
  },
  {
    "label": "bool_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bool_t(byte_t b ) : m_byte( b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool_t&)",
    "insertText": "operator(bool tf)"
  },
  {
    "label": "byte_t()",
    "kind": "Method",
    "detail": "Function (m_byte = static_cast<)",
    "insertText": "byte_t(tf)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_byte = b ; return* this ; } bool_t)",
    "insertText": "operator(void)"
  },
  {
    "label": "asBool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "asBool()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : byte_t m_byte ; } ; bool)",
    "insertText": "operator(const bool_t &a, const bool_t &b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const bool_t &a, bool b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(bool a, const bool_t &b)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (using::int8_t ; using::uint16_t ; using::int16_t ; using::uint32_t ; using::int32_t ; using::uint64_t ; using::int64_t ; # else typedef unsigned char uint8_t ; typedef signed char int8_t ; typedef unsigned short uint16_t ; typedef signed short int16_t ; typedef unsigned int uint32_t ; typedef int int32_t ; typedef unsigned long long uint64_t ; typedef long long int64_t ; # endif typedef half float16_t ; typedef float float32_t ; typedef double float64_t ; using std::string ; using std::wstring ; enum PlainOldDataType { kBooleanPOD,kUint8POD,kInt8POD,kUint16POD,kInt16POD,kUint32POD,kInt32POD,kUint64POD,kInt64POD,kFloat16POD,kFloat32POD,kFloat64POD,kStringPOD,kWstringPOD,kNumPlainOldDataTypes,kUnknownPOD = 1 2 7 } ; template<PlainOldDataType PODT,class T> struct PODTraits { } ; # define)",
    "insertText": "DECLARE_TRAITS(PENUM, PTYPE, PNAME, DFLT, PTDEF)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ const PlainOldDataType pod_enum = PENUM ; \\ typedef PTYPE value_type ; \\ const char*)",
    "insertText": "name()"
  },
  {
    "label": "numBytes()",
    "kind": "Method",
    "detail": "Function (} \\ size_t)",
    "insertText": "numBytes()"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ typedef PODTraits<PENUM,PTYPE> PTDEF)",
    "insertText": "DECLARE_TRAITS(kBooleanPOD, bool_t, \"bool_t\", false, BooleanPODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kUint8POD, uint8_t, \"uint8_t\", 0, Uint8PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kInt8POD, int8_t, \"int8_t\", 0, Int8PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kUint16POD, uint16_t, \"uint16_t\", 0, Uint16PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kInt16POD, int16_t, \"int16_t\", 0, Int16PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kUint32POD, uint32_t, \"uint32_t\", 0, Uint32PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kInt32POD, int32_t, \"int32_t\", 0, Int32PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kUint64POD, uint64_t, \"uint64_t\", 0, Uint64PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kInt64POD, int64_t, \"int64_t\", 0, Int64PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kFloat16POD, float16_t, \"float16_t\", 0.0f, Float16PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kFloat32POD, float32_t, \"float32_t\", 0.0f, Float32PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kFloat64POD, float64_t, \"float64_t\", 0.0, Float64PODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kStringPOD, string, \"string\", \"\", StringPODTraits)"
  },
  {
    "label": "DECLARE_TRAITS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRAITS(kWstringPOD, wstring, \"wstring\", L\"\", WstringPODTraits)"
  },
  {
    "label": "PODNumBytes()",
    "kind": "Method",
    "detail": "Function (# undef DECLARE_TRAITS template<PlainOldDataType PENUM> struct PODTraitsFromEnum { } ; template<> struct PODTraitsFromEnum<kBooleanPOD> : public BooleanPODTraits { } ; template<> struct PODTraitsFromEnum<kUint8POD> : public Uint8PODTraits { } ; template<> struct PODTraitsFromEnum<kInt8POD> : public Int8PODTraits { } ; template<> struct PODTraitsFromEnum<kUint16POD> : public Uint16PODTraits { } ; template<> struct PODTraitsFromEnum<kInt16POD> : public Int16PODTraits { } ; template<> struct PODTraitsFromEnum<kUint32POD> : public Uint32PODTraits { } ; template<> struct PODTraitsFromEnum<kInt32POD> : public Int32PODTraits { } ; template<> struct PODTraitsFromEnum<kUint64POD> : public Uint64PODTraits { } ; template<> struct PODTraitsFromEnum<kInt64POD> : public Int64PODTraits { } ; template<> struct PODTraitsFromEnum<kFloat16POD> : public Float16PODTraits { } ; template<> struct PODTraitsFromEnum<kFloat32POD> : public Float32PODTraits { } ; template<> struct PODTraitsFromEnum<kFloat64POD> : public Float64PODTraits { } ; template<> struct PODTraitsFromEnum<kStringPOD> : public StringPODTraits { } ; template<> struct PODTraitsFromEnum<kWstringPOD> : public WstringPODTraits { } ; template<class PTYPE> struct PODTraitsFromType { } ; template<> struct PODTraitsFromType<bool_t> : public BooleanPODTraits { } ; template<> struct PODTraitsFromType<uint8_t> : public Uint8PODTraits { } ; template<> struct PODTraitsFromType<int8_t> : public Int8PODTraits { } ; template<> struct PODTraitsFromType<uint16_t> : public Uint16PODTraits { } ; template<> struct PODTraitsFromType<int16_t> : public Int16PODTraits { } ; template<> struct PODTraitsFromType<uint32_t> : public Uint32PODTraits { } ; template<> struct PODTraitsFromType<int32_t> : public Int32PODTraits { } ; template<> struct PODTraitsFromType<uint64_t> : public Uint64PODTraits { } ; template<> struct PODTraitsFromType<int64_t> : public Int64PODTraits { } ; template<> struct PODTraitsFromType<float16_t> : public Float16PODTraits { } ; template<> struct PODTraitsFromType<float32_t> : public Float32PODTraits { } ; template<> struct PODTraitsFromType<float64_t> : public Float64PODTraits { } ; template<> struct PODTraitsFromType<string> : public StringPODTraits { } ; template<> struct PODTraitsFromType<wstring> : public WstringPODTraits { } ; size_t)",
    "insertText": "PODNumBytes(PlainOldDataType pod)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "assert(false)"
  },
  {
    "label": "PODFromName()",
    "kind": "Method",
    "detail": "Function (default : return \" UNKNOWN \" ; } ; } PlainOldDataType)",
    "insertText": "PODFromName(const std::string &n)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (typedef PODTraitsFromEnum<POD>::value_type value_type ; value_type* valPtr = reinterpret_cast<)",
    "insertText": "value_type(addr)"
  },
  {
    "label": "default_value()",
    "kind": "Method",
    "detail": "Function (* valPtr = PODTraitsFromEnum<POD)",
    "insertText": "default_value()"
  },
  {
    "label": "PODSetDefault()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PODSetDefault(PlainOldDataType pod, void *bytes)"
  }
]