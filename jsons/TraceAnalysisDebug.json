[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if !)",
    "insertText": "defined(UE_TRACE_ANALYSIS_DEBUG_API) #define UE_TRACE_ANALYSIS_DEBUG_API 0 #endif #if !defined(UE_TRACE_ANALYSIS_DEBUG) #define UE_TRACE_ANALYSIS_DEBUG 0 #endif #if !defined(UE_TRACE_ANALYSIS_DEBUG_LOG) #if UE_TRACE_ANALYSIS_DEBUG #if !defined(UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL) #define UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL 1 #endif #if UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL == 1 #define UE_TRACE_ANALYSIS_DEBUG_LOG(format, ...) printf(format \"\\n\", __VA_ARGS__) #define UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder() #define UE_TRACE_ANALYSIS_DEBUG_Append(s) printf(\"%s\", s) #define UE_TRACE_ANALYSIS_DEBUG_Appendf(format, ...) printf(format, __VA_ARGS__) #define UE_TRACE_ANALYSIS_DEBUG_AppendChar(c) printf(\"%c\", c) #define UE_TRACE_ANALYSIS_DEBUG_EndStringBuilder() printf(\"\\n\") #define UE_TRACE_ANALYSIS_DEBUG_ResetStringBuilder() #elif UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL == 2 #define UE_TRACE_ANALYSIS_DEBUG_LOG(format, ...) printf(format \"\\n\", __VA_ARGS__) #define UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder()"
  },
  {
    "label": "UE_TRACE_ANALYSIS_DEBUG_EndStringBuilder()",
    "kind": "Method",
    "detail": "Function (# define UE_TRACE_ANALYSIS_DEBUG_Append StringBuilder . Append # define UE_TRACE_ANALYSIS_DEBUG_Appendf StringBuilder . Appendf # define UE_TRACE_ANALYSIS_DEBUG_AppendChar StringBuilder . AppendChar # define)",
    "insertText": "UE_TRACE_ANALYSIS_DEBUG_EndStringBuilder() printf(\"%s\\n\", StringBuilder.ToString()) #define UE_TRACE_ANALYSIS_DEBUG_ResetStringBuilder() StringBuilder.Reset() #elif UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL == 3 #include \"Containers/StringConv.h\" #include \"CoreGlobals.h\" #include \"Misc/OutputDeviceRedirector.h\" #include \"Misc/StringBuilder.h\" #define UE_TRACE_ANALYSIS_DEBUG_LOG(format, ...)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TAnsiStringBuilder<1 0 2 4> SB ; SB .)",
    "insertText": "Appendf(format, __VA_ARGS__)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"%hs\"), SB.ToString())"
  },
  {
    "label": "UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder()"
  },
  {
    "label": "UE_TRACE_ANALYSIS_DEBUG_EndStringBuilder()",
    "kind": "Method",
    "detail": "Function (# define UE_TRACE_ANALYSIS_DEBUG_Append StringBuilder . Append # define UE_TRACE_ANALYSIS_DEBUG_Appendf StringBuilder . Appendf # define UE_TRACE_ANALYSIS_DEBUG_AppendChar StringBuilder . AppendChar # define)",
    "insertText": "UE_TRACE_ANALYSIS_DEBUG_EndStringBuilder() GLog->Logf(TEXT(\"%hs\"), StringBuilder.ToString()) #define UE_TRACE_ANALYSIS_DEBUG_ResetStringBuilder() StringBuilder.Reset() #elif UE_TRACE_ANALYSIS_DEBUG_LOG_IMPL == 4 #include \"Misc/StringBuilder.h\" #define UE_TRACE_ANALYSIS_DEBUG_LOG(format, ...)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"%hs\\n\"), SB.ToString())"
  },
  {
    "label": "UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_TRACE_ANALYSIS_DEBUG_BeginStringBuilder() #define UE_TRACE_ANALYSIS_DEBUG_Append(s) FPlatformMisc::LowLevelOutputDebugStringf(TEXT(\"%hs\"), s) #define UE_TRACE_ANALYSIS_DEBUG_Appendf(format, ...)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"%hs\"), SB.ToString())"
  }
]