[
  {
    "label": "I420Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I420Buffer"
  },
  {
    "label": "FrameReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameReader"
  },
  {
    "label": "YuvFrameReaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "YuvFrameReaderImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DropperUtil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DropperUtil"
  },
  {
    "label": "Y4mFrameReaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Y4mFrameReaderImpl"
  },
  {
    "label": "FrameReader()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TESTSUPPORT_FRAME_READER_H_ # define TEST_TESTSUPPORT_FRAME_READER_H_ # include<stdio . h> # include<string> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" namespace webrtc { class I420Buffer ; namespace test { class FrameReader { public : ~)",
    "insertText": "FrameReader()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init()"
  },
  {
    "label": "ReadFrame()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<I420Buffer>)",
    "insertText": "ReadFrame()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "FrameLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FrameLength()"
  },
  {
    "label": "NumberOfFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfFrames()"
  },
  {
    "label": "DropperUtil()",
    "kind": "Method",
    "detail": "Function (} ; class YuvFrameReaderImpl : public FrameReader { public : enum class RepeatMode { kSingle,kRepeat,kPingPong } ; class DropperUtil { public :)",
    "insertText": "DropperUtil(int source_fps, int target_fps)"
  },
  {
    "label": "UpdateLevel()",
    "kind": "Method",
    "detail": "Function (enum class DropDecision { kDropframe,kKeepFrame } ; DropDecision)",
    "insertText": "UpdateLevel()"
  },
  {
    "label": "YuvFrameReaderImpl()",
    "kind": "Method",
    "detail": "Function (private : const double frame_size_buckets_ ; double bucket_level_ ; } ;)",
    "insertText": "YuvFrameReaderImpl(std::string input_filename, int width, int height)"
  },
  {
    "label": "YuvFrameReaderImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YuvFrameReaderImpl(std::string input_filename, int input_width, int input_height, int desired_width, int desired_height, RepeatMode repeat_mode, absl::optional<int> clip_fps, int target_fps)"
  },
  {
    "label": "YuvFrameReaderImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "YuvFrameReaderImpl()"
  },
  {
    "label": "Y4mFrameReaderImpl()",
    "kind": "Method",
    "detail": "Function (protected : const std::string input_filename_ ; size_t frame_length_in_bytes_ ; const int input_width_ ; const int input_height_ ; const int desired_width_ ; const int desired_height_ ; const size_t frame_size_bytes_ ; const RepeatMode repeat_mode_ ; int number_of_frames_ ; int current_frame_index_ ; std::unique_ptr<DropperUtil> dropper_ ; FILE* input_file_ ; } ; class Y4mFrameReaderImpl : public YuvFrameReaderImpl { public :)",
    "insertText": "Y4mFrameReaderImpl(std::string input_filename, int width, int height)"
  },
  {
    "label": "Y4mFrameReaderImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Y4mFrameReaderImpl()"
  }
]