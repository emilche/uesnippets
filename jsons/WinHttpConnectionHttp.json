[
  {
    "label": "FWinHttpSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpSession"
  },
  {
    "label": "FWinHttpRequestContextHttp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpRequestContextHttp"
  },
  {
    "label": "FRequestPayload",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestPayload"
  },
  {
    "label": "FWinHttpConnectionHttp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpConnectionHttp"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_WINHTTP # include \" CoreMinimal . h \" # include \" Containers / StringView . h \" # include \" HAL / CriticalSection . h \" # include \" WinHttp / Support / WinHttpConnection . h \" # include \" WinHttp / Support / WinHttpHandle . h \" # include \" Interfaces / IHttpRequest . h \" # include \" Interfaces / IHttpResponse . h \" # include<atomic> class FWinHttpSession ; class FWinHttpRequestContextHttp ; class FRequestPayload ; using FStringKeyValueMap = TMap<FString,FString> ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FWinHttpConnectionHttpOnDataTransferred, int32 , int32)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FWinHttpConnectionHttpOnHeaderReceived, const FString& , const FString&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FWinHttpConnectionHttpOnRequestComplete, EHttpRequestStatus::Type)"
  },
  {
    "label": "CreateHttpConnection()",
    "kind": "Method",
    "detail": "Function (class FWinHttpConnectionHttp : public IWinHttpConnection { public : TSharedPtr<FWinHttpConnectionHttp,ESPMode::ThreadSafe>)",
    "insertText": "CreateHttpConnection(FWinHttpSession& Session, const FString& Verb, const FString& Url, const TMap<FString, FString>& Headers, const TSharedPtr<FRequestPayload, ESPMode::ThreadSafe>& Payload)"
  },
  {
    "label": "FWinHttpConnectionHttp()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWinHttpConnectionHttp()"
  },
  {
    "label": "FWinHttpConnectionHttp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWinHttpConnectionHttp(const FWinHttpConnectionHttp& Other)"
  },
  {
    "label": "FWinHttpConnectionHttp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWinHttpConnectionHttp(FWinHttpConnectionHttp&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWinHttpConnectionHttp&)",
    "insertText": "operator(const FWinHttpConnectionHttp& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWinHttpConnectionHttp&)",
    "insertText": "operator(FWinHttpConnectionHttp&& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetRequestUrl()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetRequestUrl()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetHandle()"
  },
  {
    "label": "StartRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRequest()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelRequest()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages()"
  },
  {
    "label": "PumpStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpStates()"
  },
  {
    "label": "GetResponseCode()",
    "kind": "Method",
    "detail": "Function (EHttpResponseCodes::Type)",
    "insertText": "GetResponseCode()"
  },
  {
    "label": "SetHeaderReceivedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderReceivedHandler(FWinHttpConnectionHttpOnHeaderReceived&& Handler)"
  },
  {
    "label": "SetRequestCompletedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestCompletedHandler(FWinHttpConnectionHttpOnRequestComplete&& Handler)"
  },
  {
    "label": "FWinHttpConnectionHttp()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FWinHttpConnectionHttp(FWinHttpSession& Session, const FString& Url, const FString& Verb, const bool bIsSecure, const FString& Domain, const TOptional<uint16> Port, const FString& PathAndQuery, const TMap<FString, FString>& Headers, const TSharedPtr<FRequestPayload, ESPMode::ThreadSafe>& Payload)"
  },
  {
    "label": "SetHeaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHeaders(const TMap<FString, FString>& Headers)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHeader(const FString& Key, const FString& Value)"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPayload(const TSharedRef<FRequestPayload, ESPMode::ThreadSafe>& NewPayload)"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRequest()"
  },
  {
    "label": "IncrementSentByteCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSentByteCounts(const uint64 AmountSent)"
  },
  {
    "label": "IncrementReceivedByteCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementReceivedByteCounts(const uint64 AmountReceived)"
  },
  {
    "label": "HasRequestBodyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRequestBodyToSend()"
  },
  {
    "label": "SendAdditionalRequestBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendAdditionalRequestBody()"
  },
  {
    "label": "RequestResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestResponse()"
  },
  {
    "label": "ProcessResponseHeaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessResponseHeaders()"
  },
  {
    "label": "RequestNextResponseBodyChunkSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestNextResponseBodyChunkSize()"
  },
  {
    "label": "RequestNextResponseBodyChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestNextResponseBodyChunkData()"
  },
  {
    "label": "FinishRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishRequest(const EHttpRequestStatus::Type FinalState)"
  },
  {
    "label": "HandleConnectedToServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectedToServer(const wchar_t* ServerIP)"
  },
  {
    "label": "HandleSendingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSendingRequest()"
  },
  {
    "label": "HandleWriteComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWriteComplete(const uint64 NumBytesSent)"
  },
  {
    "label": "HandleSendRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSendRequestComplete()"
  },
  {
    "label": "HandleHeadersAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeadersAvailable()"
  },
  {
    "label": "HandleDataAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataAvailable(const uint64 NumBytesAvailable)"
  },
  {
    "label": "HandleReadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReadComplete(const uint64 NumBytesRead)"
  },
  {
    "label": "HandleRequestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequestError(const uint32 ErrorApiId, const uint32 ErrorCode)"
  },
  {
    "label": "HandleHandleClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHandleClosing()"
  },
  {
    "label": "HandleHttpStatusCallback()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleHttpStatusCallback(HINTERNET ResourceHandle, EWinHttpCallbackStatus Status, void* StatusInformation, uint32 StatusInformationLength)"
  },
  {
    "label": "UE_WinHttpStatusHttpCallback()",
    "kind": "Method",
    "detail": "Function (void CALLBACK)",
    "insertText": "UE_WinHttpStatusHttpCallback(HINTERNET, DWORD_PTR, DWORD, LPVOID, DWORD)"
  },
  {
    "label": "ReleasePayloadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePayloadData()"
  }
]