[
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FKeyOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyOperation"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FChannelGroupModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelGroupModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FromNodes()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" SequencerCoreFwd . h \" # include \" Misc / FrameNumber . h \" # include \" SequencerKeyParams . h \" # include \" Templates / SharedPointer . h \" class IKeyArea ; class ISequencer ; class ISequencerSection ; class ISequencerTrackEditor ; class UMovieSceneTrack ; namespace UE::Sequencer { struct FKeyOperation ; } struct FFrameNumber ; namespace UE { namespace Sequencer { class FChannelGroupModel ; class FViewModel ; class ITrackExtension ; class IOutlinerExtension ; struct FAddKeyOperation { FAddKeyOperation)",
    "insertText": "FromNodes(const TSet<TWeakViewModelPtr<IOutlinerExtension>>& InModels)"
  },
  {
    "label": "FromNode()",
    "kind": "Method",
    "detail": "Function (FAddKeyOperation)",
    "insertText": "FromNode(TWeakPtr<FViewModel> InModel)"
  },
  {
    "label": "FromKeyAreas()",
    "kind": "Method",
    "detail": "Function (FAddKeyOperation)",
    "insertText": "FromKeyAreas(ISequencerTrackEditor* TrackEditor, const TArrayView<TSharedRef<IKeyArea>> InKeyAreas)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(FFrameNumber InKeyTime, ISequencer& InSequencer)"
  },
  {
    "label": "AddPreFilteredNodes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddPreFilteredNodes(TArrayView<const TWeakPtr<FViewModel>> InNodes)"
  },
  {
    "label": "ConsiderKeyableAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsiderKeyableAreas(TSharedPtr<ITrackExtension> InTrackModel, FViewModelPtr InKeyAnythingBeneath)"
  },
  {
    "label": "ProcessKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyArea(TSharedPtr<ITrackExtension> InTrackModel, TViewModelPtr<FChannelGroupModel> InChannelGroupModel)"
  },
  {
    "label": "ProcessKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyArea(ISequencerTrackEditor* InTrackEditor, TSharedPtr<IKeyArea> InKeyArea)"
  },
  {
    "label": "GetTrackOperation()",
    "kind": "Method",
    "detail": "Function (FKeyOperation&)",
    "insertText": "GetTrackOperation(ISequencerTrackEditor* TrackEditor)"
  },
  {
    "label": "FAddKeyOperation()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FAddKeyOperation()"
  }
]