[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AInstancedFoliageActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AInstancedFoliageActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFoliageUISettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageUISettings"
  },
  {
    "label": "FFoliageMeshUIInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageMeshUIInfo"
  },
  {
    "label": "FMeshInfoSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshInfoSnapshot"
  },
  {
    "label": "FFoliagePaintingGeometryFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliagePaintingGeometryFilter"
  },
  {
    "label": "FEdModeFoliage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeFoliage"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "FEdModeFoliageSelectionUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeFoliageSelectionUpdate"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Delegates / Delegate . h \" # include \" EdMode . h \" # include \" Engine / EngineBaseTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" InputCoreTypes . h \" # include \" InstancedFoliage . h \" # include \" Internationalization / Text . h \" # include \" Math / Axis . h \" # include \" Math / Box . h \" # include \" Math / Color . h \" # include \" Math / Rotator . h \" # include \" Math / Sphere . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UnrealWidgetFwd . h \" # include \" Widgets / Views / SHeaderRow . h \" class AActor ; class AInstancedFoliageActor ; class FCanvas ; class FEditorViewportClient ; class FName ; class FPrimitiveDrawInterface ; class FReferenceCollector ; class FSceneView ; class FUICommandList ; class FViewport ; class HHitProxy ; class UClass ; class UFoliageType ; class ULandscapeComponent ; class ULevel ; class UObject ; class UPrimitiveComponent ; class UStaticMeshComponent ; class UWorld ; struct FAssetData ; struct FHitResult ; struct FViewportClick ; template<FuncType> class TFunctionRef ; namespace EFoliagePaletteViewMode { enum Type { Thumbnail,Tree } ; } namespace EFoliageSingleInstantiationPlacementMode { enum class Type { All,CycleThrough,ModeCount } ; } ; const float SingleInstanceModeBrushSize = 2 0 . 0 f ; struct FFoliageUISettings { void)",
    "insertText": "Load()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save()"
  },
  {
    "label": "SetWindowSizePos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowSizePos(int32 NewX, int32 NewY, int32 NewWidth, int32 NewHeight)"
  },
  {
    "label": "GetWindowSizePos()",
    "kind": "Method",
    "detail": "Function (WindowX = NewX ; WindowY = NewY ; WindowWidth = NewWidth ; WindowHeight = NewHeight ; } void)",
    "insertText": "GetWindowSizePos(int32& OutX, int32& OutY, int32& OutWidth, int32& OutHeight)"
  },
  {
    "label": "GetPaintToolSelected()",
    "kind": "Method",
    "detail": "Function (OutX = WindowX ; OutY = WindowY ; OutWidth = WindowWidth ; OutHeight = WindowHeight ; } bool)",
    "insertText": "GetPaintToolSelected()"
  },
  {
    "label": "GetReapplyToolSelected()",
    "kind": "Method",
    "detail": "Function (bPaintToolSelected = InbPaintToolSelected ; } bool)",
    "insertText": "GetReapplyToolSelected()"
  },
  {
    "label": "GetSelectToolSelected()",
    "kind": "Method",
    "detail": "Function (bReapplyToolSelected = InbReapplyToolSelected ; } bool)",
    "insertText": "GetSelectToolSelected()"
  },
  {
    "label": "GetLassoSelectToolSelected()",
    "kind": "Method",
    "detail": "Function (bSelectToolSelected = InbSelectToolSelected ; } bool)",
    "insertText": "GetLassoSelectToolSelected()"
  },
  {
    "label": "GetPaintBucketToolSelected()",
    "kind": "Method",
    "detail": "Function (bLassoSelectToolSelected = InbLassoSelectToolSelected ; } bool)",
    "insertText": "GetPaintBucketToolSelected()"
  },
  {
    "label": "GetReapplyPaintBucketToolSelected()",
    "kind": "Method",
    "detail": "Function (bPaintBucketToolSelected = InbPaintBucketToolSelected ; } bool)",
    "insertText": "GetReapplyPaintBucketToolSelected()"
  },
  {
    "label": "GetEraseToolSelected()",
    "kind": "Method",
    "detail": "Function (bReapplyPaintBucketToolSelected = InbReapplyPaintBucketToolSelected ; } bool)",
    "insertText": "GetEraseToolSelected()"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (bEraseToolSelected = InbEraseToolSelected ; } float)",
    "insertText": "GetRadius()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRadius(float InRadius)"
  },
  {
    "label": "GetPaintDensity()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPaintDensity()"
  },
  {
    "label": "GetUnpaintDensity()",
    "kind": "Method",
    "detail": "Function (PaintDensity = InPaintDensity ; } float)",
    "insertText": "GetUnpaintDensity()"
  },
  {
    "label": "GetFilterLandscape()",
    "kind": "Method",
    "detail": "Function (UnpaintDensity = InUnpaintDensity ; } bool)",
    "insertText": "GetFilterLandscape()"
  },
  {
    "label": "GetFilterStaticMesh()",
    "kind": "Method",
    "detail": "Function (bFilterLandscape = InbFilterLandscape ; } bool)",
    "insertText": "GetFilterStaticMesh()"
  },
  {
    "label": "GetFilterBSP()",
    "kind": "Method",
    "detail": "Function (bFilterStaticMesh = InbFilterStaticMesh ; } bool)",
    "insertText": "GetFilterBSP()"
  },
  {
    "label": "GetFilterFoliage()",
    "kind": "Method",
    "detail": "Function (bFilterBSP = InbFilterBSP ; } bool)",
    "insertText": "GetFilterFoliage()"
  },
  {
    "label": "GetFilterTranslucent()",
    "kind": "Method",
    "detail": "Function (bFilterFoliage = InbFilterFoliage ; } bool)",
    "insertText": "GetFilterTranslucent()"
  },
  {
    "label": "IsInAnySingleInstantiationMode()",
    "kind": "Method",
    "detail": "Function (bFilterTranslucent = InbFilterTranslucent ; } bool)",
    "insertText": "IsInAnySingleInstantiationMode()"
  },
  {
    "label": "GetIsInSingleInstantiationMode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsInSingleInstantiationMode()"
  },
  {
    "label": "GetIsInQuickSingleInstantiationMode()",
    "kind": "Method",
    "detail": "Function (IsInSingleInstantiationMode = InIsInSingleInstantiationMode ; } bool)",
    "insertText": "GetIsInQuickSingleInstantiationMode()"
  },
  {
    "label": "IsInAnyEraseMode()",
    "kind": "Method",
    "detail": "Function (IsInQuickSingleInstantiationMode = InIsInQuickSingleInstantiationMode ; } bool)",
    "insertText": "IsInAnyEraseMode()"
  },
  {
    "label": "GetIsInQuickEraseMode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetIsInQuickEraseMode()"
  },
  {
    "label": "GetSingleInstantiationPlacementMode()",
    "kind": "Method",
    "detail": "Function (IsInQuickEraseMode = InIsInQuickEraseMode ; } EFoliageSingleInstantiationPlacementMode::Type)",
    "insertText": "GetSingleInstantiationPlacementMode()"
  },
  {
    "label": "GetSingleInstantiationCycleThroughIndex()",
    "kind": "Method",
    "detail": "Function (SingleInstantiationPlacementMode = InSingleInstantiationPlacementMode ; } int32)",
    "insertText": "GetSingleInstantiationCycleThroughIndex()"
  },
  {
    "label": "GetIsInSpawnInCurrentLevelMode()",
    "kind": "Method",
    "detail": "Function (SingleInstantiationCycleThroughIndex + + ; } bool)",
    "insertText": "GetIsInSpawnInCurrentLevelMode()"
  },
  {
    "label": "GetShowPaletteItemDetails()",
    "kind": "Method",
    "detail": "Function (IsInSpawnInCurrentLevelMode = InSpawnInCurrentLevelMode ; } bool)",
    "insertText": "GetShowPaletteItemDetails()"
  },
  {
    "label": "GetShowPaletteItemTooltips()",
    "kind": "Method",
    "detail": "Function (bShowPaletteItemDetails = InbShowPaletteItemDetails ; } bool)",
    "insertText": "GetShowPaletteItemTooltips()"
  },
  {
    "label": "GetActivePaletteViewMode()",
    "kind": "Method",
    "detail": "Function (bShowPaletteItemTooltips = InbShowPaletteItemTooltips ; } EFoliagePaletteViewMode::Type)",
    "insertText": "GetActivePaletteViewMode()"
  },
  {
    "label": "GetPaletteThumbnailScale()",
    "kind": "Method",
    "detail": "Function (ActivePaletteViewMode = InActivePaletteViewMode ; } float)",
    "insertText": "GetPaletteThumbnailScale()"
  },
  {
    "label": "FFoliageUISettings()",
    "kind": "Method",
    "detail": "Function (PaletteThumbnailScale = InThumbnailScale ; })",
    "insertText": "FFoliageUISettings() : WindowX(-1) , WindowY(-1) , WindowWidth(284) , WindowHeight(400) , bPaintToolSelected(true) , bReapplyToolSelected(false) , bSelectToolSelected(false) , bLassoSelectToolSelected(false) , bPaintBucketToolSelected(false) , bReapplyPaintBucketToolSelected(false) , bEraseToolSelected(false) , bShowPaletteItemDetails(true) , bShowPaletteItemTooltips(true) , ActivePaletteViewMode(EFoliagePaletteViewMode::Thumbnail) , PaletteThumbnailScale(0.3f) , Radius(250.f) , PaintDensity(0.5f) , UnpaintDensity(0.f) , IsInSingleInstantiationMode(false) , IsInQuickSingleInstantiationMode(false) , IsInQuickEraseMode(false) , SingleInstantiationPlacementMode(EFoliageSingleInstantiationPlacementMode::Type::All) , SingleInstantiationCycleThroughIndex(0) , IsInSpawnInCurrentLevelMode(false) , bFilterLandscape(true) , bFilterStaticMesh(true) , bFilterBSP(true) , bFilterFoliage(false) , bFilterTranslucent(false)"
  },
  {
    "label": "FFoliageUISettings()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFoliageUISettings()"
  },
  {
    "label": "FFoliageMeshUIInfo()",
    "kind": "Method",
    "detail": "Function (} private : int32 WindowX ; int32 WindowY ; int32 WindowWidth ; int32 WindowHeight ; bool bPaintToolSelected ; bool bReapplyToolSelected ; bool bSelectToolSelected ; bool bLassoSelectToolSelected ; bool bPaintBucketToolSelected ; bool bReapplyPaintBucketToolSelected ; bool bEraseToolSelected ; bool bShowPaletteItemDetails ; bool bShowPaletteItemTooltips ; EFoliagePaletteViewMode::Type ActivePaletteViewMode ; float PaletteThumbnailScale ; float Radius ; float PaintDensity ; float UnpaintDensity ; bool IsInSingleInstantiationMode ; bool IsInQuickSingleInstantiationMode ; bool IsInQuickEraseMode ; EFoliageSingleInstantiationPlacementMode::Type SingleInstantiationPlacementMode ; int32 SingleInstantiationCycleThroughIndex ; bool IsInSpawnInCurrentLevelMode ; public : bool bFilterLandscape ; bool bFilterStaticMesh ; bool bFilterBSP ; bool bFilterFoliage ; bool bFilterTranslucent ; } ; struct FFoliageMeshUIInfo { TObjectPtr<UFoliageType> Settings ; int32 InstanceCountCurrentLevel ; int32 InstanceCountTotal ;)",
    "insertText": "FFoliageMeshUIInfo(UFoliageType* InSettings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFoliageMeshUIInfo& Other)"
  },
  {
    "label": "FMeshInfoSnapshot()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedPtr<FFoliageMeshUIInfo> FFoliageMeshUIInfoPtr ; class FMeshInfoSnapshot { FFoliageInstanceHash Hash ; TArray<FVector> Locations ; public :)",
    "insertText": "FMeshInfoSnapshot(FFoliageInfo* MeshInfo) : Hash(*MeshInfo->InstanceHash)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumInstances = MeshInfo -> Instances .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Locations .)",
    "insertText": "Reserve(NumInstances)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Locations .)",
    "insertText": "AddUninitialized(NumInstances)"
  },
  {
    "label": "CountInstancesInsideSphere()",
    "kind": "Method",
    "detail": "Function (Locations [ Idx ] = MeshInfo -> Instances [ Idx ] . Location ; } } int32)",
    "insertText": "CountInstancesInsideSphere(const FSphere& Sphere)"
  },
  {
    "label": "GetInstancesOverlappingBox()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ; auto TempInstances = Hash .)",
    "insertText": "GetInstancesOverlappingBox(FBox::BuildAABB(Sphere.Center, FVector(Sphere.W)))"
  },
  {
    "label": "FFoliagePaintingGeometryFilter()",
    "kind": "Method",
    "detail": "Function (Count + + ; } } return Count ; } } ; struct FFoliagePaintingGeometryFilter { bool bAllowLandscape ; bool bAllowStaticMesh ; bool bAllowBSP ; bool bAllowFoliage ; bool bAllowTranslucent ;)",
    "insertText": "FFoliagePaintingGeometryFilter(const FFoliageUISettings& InUISettings) : bAllowLandscape(InUISettings.bFilterLandscape) , bAllowStaticMesh(InUISettings.bFilterStaticMesh) , bAllowBSP(InUISettings.bFilterBSP) , bAllowFoliage(InUISettings.bFilterFoliage) , bAllowTranslucent(InUISettings.bFilterTranslucent)"
  },
  {
    "label": "FFoliagePaintingGeometryFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFoliagePaintingGeometryFilter() : bAllowLandscape(false) , bAllowStaticMesh(false) , bAllowBSP(false) , bAllowFoliage(false) , bAllowTranslucent(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator() (const UPrimitiveComponent* Component)"
  },
  {
    "label": "FEdModeFoliage()",
    "kind": "Method",
    "detail": "Function (} ; # define NUM_INSTANCE_BUCKETS 1 0 enum class EFoliageEditingState : uint8 { Unknown,Enabled,PIEWorld,SIEWorld,} ; class FEdModeFoliage : public FEdMode { public : FFoliageUISettings UISettings ; TSharedPtr<FUICommandList> UICommandList ;)",
    "insertText": "FEdModeFoliage()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "NotifyLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelAddedToWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "NotifyLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelRemovedFromWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "NotifyAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAssetRemoved(const FAssetData& AssetInfo)"
  },
  {
    "label": "NotifyActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorSelectionChanged(bool bSelect, const TArray<AActor*>& Selection)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Select(AActor* InActor, bool bInSelected)"
  },
  {
    "label": "IsSelectionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionAllowed(AActor* InActor, bool bInSelection)"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "MoveSelectedFoliageToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedFoliageToLevel(ULevel* InTargetLevel)"
  },
  {
    "label": "CanMoveSelectedFoliageToLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveSelectedFoliageToLevel(ULevel* InTargetLevel)"
  },
  {
    "label": "MoveSelectedFoliageToActorEditorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedFoliageToActorEditorContext()"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "DisallowMouseDeltaTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisallowMouseDeltaTracking()"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "ForceRealTimeViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRealTimeViewports(const bool bEnable)"
  },
  {
    "label": "StartFoliageBrushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFoliageBrushTrace(FEditorViewportClient* ViewportClient, class UViewportInteractor* Interactor = nullptr)"
  },
  {
    "label": "EndFoliageBrushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFoliageBrushTrace()"
  },
  {
    "label": "FoliageBrushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoliageBrushTrace(FEditorViewportClient* ViewportClient, const FVector& InRayOrigin, const FVector& InRayDirection)"
  },
  {
    "label": "GetRandomVectorInBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRandomVectorInBrush(FVector& OutStart, FVector& OutEnd)"
  },
  {
    "label": "PreApplyBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreApplyBrush()"
  },
  {
    "label": "ApplyBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBrush(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "GetFoliageMeshList()",
    "kind": "Method",
    "detail": "Function (TArray<FFoliageMeshUIInfoPtr>&)",
    "insertText": "GetFoliageMeshList()"
  },
  {
    "label": "PopulateFoliageMeshList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateFoliageMeshList()"
  },
  {
    "label": "OnFoliageMeshListSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFoliageMeshListSortModeChanged(EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "GetFoliageMeshListSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetFoliageMeshListSortMode()"
  },
  {
    "label": "OnInstanceCountUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInstanceCountUpdated(const UFoliageType* FoliageType)"
  },
  {
    "label": "CalcTotalInstanceCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTotalInstanceCount(int32& OutInstanceCountTotal, int32& OutInstanceCountCurrentLevel)"
  },
  {
    "label": "CanPaint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaint(const ULevel* InLevel)"
  },
  {
    "label": "CanPaint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaint(const UFoliageType* FoliageType, const ULevel* InLevel)"
  },
  {
    "label": "IsModifierButtonPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModifierButtonPressed(const FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "AddFoliageAsset()",
    "kind": "Method",
    "detail": "Function (UFoliageType*)",
    "insertText": "AddFoliageAsset(UObject* InAsset, bool bInPlaceholderAsset = false)"
  },
  {
    "label": "RemoveFoliageType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFoliageType(UFoliageType** FoliageTypes, int32 Num)"
  },
  {
    "label": "ReallocateClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocateClusters(UFoliageType* Settings)"
  },
  {
    "label": "BakeFoliage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeFoliage(UFoliageType* Settings, bool bSelectedOnly)"
  },
  {
    "label": "CopySettingsObject()",
    "kind": "Method",
    "detail": "Function (UFoliageType*)",
    "insertText": "CopySettingsObject(UFoliageType* Settings)"
  },
  {
    "label": "ReplaceSettingsObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSettingsObject(UFoliageType* OldSettings, UFoliageType* NewSettings)"
  },
  {
    "label": "SaveFoliageTypeObject()",
    "kind": "Method",
    "detail": "Function (UFoliageType*)",
    "insertText": "SaveFoliageTypeObject(UFoliageType* Settings, bool bPlaceholderAsset = false)"
  },
  {
    "label": "IncludeNonFoliageActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeNonFoliageActors(const TArray<const UFoliageType*>& FoliageTypes, bool bOnlyCurrentLevel)"
  },
  {
    "label": "ExcludeFoliageActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeFoliageActors(const TArray<const UFoliageType*>& FoliageTypes, bool bOnlyCurrentLevel)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(const TArray<const UFoliageType*>& FoliageTypes, bool bSelect)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(const UFoliageType* Settings, bool bSelect)"
  },
  {
    "label": "FocusSelectedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusSelectedInstances()"
  },
  {
    "label": "SelectInvalidInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInvalidInstances(const TArray<const UFoliageType*>& FoliageTypes)"
  },
  {
    "label": "SelectInvalidInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInvalidInstances(const UFoliageType* Settings)"
  },
  {
    "label": "GetSelectedInstanceFoliageTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedInstanceFoliageTypes(TArray<const UFoliageType*>& OutFoliageTypes)"
  },
  {
    "label": "AdjustBrushRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustBrushRadius(float Multiplier)"
  },
  {
    "label": "AdjustPaintDensity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPaintDensity(float Multiplier)"
  },
  {
    "label": "AdjustUnpaintDensity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustUnpaintDensity(float Multiplier)"
  },
  {
    "label": "AddInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstances(UWorld* InWorld, const TArray<FDesiredFoliageInstance>& DesiredInstances, const FFoliagePaintingGeometryFilter& OverrideGeometryFilter, bool InRebuildFoliageTree = true)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "GetEditingState()",
    "kind": "Method",
    "detail": "Function (EFoliageEditingState)",
    "insertText": "GetEditingState()"
  },
  {
    "label": "IsEditingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingEnabled()"
  },
  {
    "label": "OnSetPaint()",
    "kind": "Method",
    "detail": "Function (} typedef TMap<FName,TMap<ULandscapeComponent*,TArray<uint8>>> LandscapeLayerCacheData ; FSimpleMulticastDelegate OnToolChanged ; void)",
    "insertText": "OnSetPaint()"
  },
  {
    "label": "OnSetReapplySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetReapplySettings()"
  },
  {
    "label": "OnSetSelectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetSelectInstance()"
  },
  {
    "label": "OnSetLasso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetLasso()"
  },
  {
    "label": "OnSetPaintFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetPaintFill()"
  },
  {
    "label": "OnSetErase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetErase()"
  },
  {
    "label": "OnSetPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetPlace()"
  },
  {
    "label": "OnReflectSelectionInPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReflectSelectionInPalette()"
  },
  {
    "label": "RemoveSelectedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedInstances(UWorld* InWorld)"
  },
  {
    "label": "GetFoliageTypeFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFoliageTypeFilters(TArray<const UClass*>& OutFilters)"
  },
  {
    "label": "ForEachFoliageInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachFoliageInfo(UWorld* InWorld, const UFoliageType* FoliageType, const FSphere& BrushSphere, TFunctionRef<bool(AInstancedFoliageActor* IFA, FFoliageInfo* FoliageInfo, const UFoliageType* FoliageType)> InOperation)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "CurrentToolUsesBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentToolUsesBrush()"
  },
  {
    "label": "HandleToolChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToolChanged()"
  },
  {
    "label": "ClearAllToolSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllToolSelection()"
  },
  {
    "label": "AddInstancesForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstancesForBrush(UWorld* InWorld, const UFoliageType* Settings, const FSphere& BrushSphere, int32 DesiredInstanceCount, float Pressure)"
  },
  {
    "label": "AddSingleInstanceForBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSingleInstanceForBrush(UWorld* InWorld, const UFoliageType* Settings, float Pressure)"
  },
  {
    "label": "RemoveInstancesForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstancesForBrush(UWorld* InWorld, const UFoliageType* Settings, const FSphere& BrushSphere, int32 DesiredInstanceCount, float Pressure)"
  },
  {
    "label": "ApplyPaintBucket_Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPaintBucket_Add(AActor* Actor)"
  },
  {
    "label": "ApplyPaintBucket_Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPaintBucket_Remove(AActor* Actor)"
  },
  {
    "label": "ReapplyInstancesDensityForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReapplyInstancesDensityForBrush(UWorld* InWorld, const UFoliageType* Settings, const FSphere& BrushSphere, float Pressure)"
  },
  {
    "label": "ReapplyInstancesForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReapplyInstancesForBrush(UWorld* InWorld, const UFoliageType* Settings, const FSphere& BrushSphere, float Pressure, bool bSingleInstanceMode)"
  },
  {
    "label": "ReapplyInstancesForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReapplyInstancesForBrush(UWorld* InWorld, AInstancedFoliageActor* IFA, const UFoliageType* Settings, FFoliageInfo* MeshInfo, const FSphere& BrushSphere, float Pressure, bool bSingleInstanceMode)"
  },
  {
    "label": "SelectInstancesForBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstancesForBrush(UWorld* InWorld, const UFoliageType* Settings, const FSphere& BrushSphere, bool bSelect)"
  },
  {
    "label": "SelectInstanceAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstanceAtLocation(UWorld* InWorld, const UFoliageType* Settings, const FVector& BrushLocation, bool bSelect)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(UWorld* InWorld, bool bSelect)"
  },
  {
    "label": "SelectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstances(UWorld* InWorld, const UFoliageType* Settings, bool bSelect)"
  },
  {
    "label": "ApplySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySelection(UWorld* InWorld, bool bApply)"
  },
  {
    "label": "UpdateInstancePartitioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstancePartitioning(UWorld* InWorld)"
  },
  {
    "label": "PostTransformSelectedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTransformSelectedInstances(UWorld* InWorld)"
  },
  {
    "label": "TransformSelectedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformSelectedInstances(UWorld* InWorld, const FVector& InDrag, const FRotator& InRot, const FVector& InScale, bool bDuplicate)"
  },
  {
    "label": "GetSelectionLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectionLocation(UWorld* InWorld, FVector& OutLocation)"
  },
  {
    "label": "UpdateWidgetLocationToInstanceSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidgetLocationToInstanceSelection()"
  },
  {
    "label": "SnapInstanceToGround()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapInstanceToGround(AInstancedFoliageActor* InIFA, const UFoliageType* Settings, FFoliageInfo& Mesh, int32 InstanceIdx)"
  },
  {
    "label": "SnapSelectedInstancesToGround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapSelectedInstancesToGround(UWorld* InWorld)"
  },
  {
    "label": "HandleOnActorSpawned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnActorSpawned(AActor* Actor)"
  },
  {
    "label": "HandleOnFoliageTypeMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnFoliageTypeMeshChanged(UFoliageType* FoliageType)"
  },
  {
    "label": "AddInstancesImp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddInstancesImp(UWorld* InWorld, const UFoliageType* Settings, const TArray<FDesiredFoliageInstance>& DesiredInstances, const TArray<int32>& ExistingInstances = TArray<int32>(), const float Pressure = 1.f, LandscapeLayerCacheData* LandscapeLayerCaches = nullptr, const FFoliageUISettings* UISettings = nullptr, const FFoliagePaintingGeometryFilter* OverrideGeometryFilter = nullptr, bool InRebuildFoliageTree = true)"
  },
  {
    "label": "CalculatePotentialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePotentialInstances(UWorld* InWorld, const UFoliageType* Settings, const TArray<FDesiredFoliageInstance>& DesiredInstances, TArray<FPotentialInstance> OutPotentialInstances[NUM_INSTANCE_BUCKETS], LandscapeLayerCacheData* LandscaleLayerCachesPtr, const FFoliageUISettings* UISettings, const FFoliagePaintingGeometryFilter* OverrideGeometryFilter = nullptr)"
  },
  {
    "label": "CalculatePotentialInstances_ThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePotentialInstances_ThreadSafe(UWorld* InWorld, const UFoliageType* Settings, const TArray<FDesiredFoliageInstance>* DesiredInstances, TArray<FPotentialInstance> OutPotentialInstances[NUM_INSTANCE_BUCKETS], const FFoliageUISettings* UISettings, const int32 StartIdx, const int32 LastIdx, const FFoliagePaintingGeometryFilter* OverrideGeometryFilter = nullptr)"
  },
  {
    "label": "GetStaticMeshVertexColorForHit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticMeshVertexColorForHit(const UStaticMeshComponent* InStaticMeshComponent, int32 InTriangleIndex, const FVector& InHitLocation, FColor& OutVertexColor)"
  },
  {
    "label": "IsUsingVertexColorMask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingVertexColorMask(const UFoliageType* Settings)"
  },
  {
    "label": "VertexMaskCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VertexMaskCheck(const FHitResult& Hit, const UFoliageType* Settings)"
  },
  {
    "label": "SetBrushOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBrushOpacity(const float InOpacity)"
  },
  {
    "label": "GetPaintingBrushRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPaintingBrushRadius()"
  },
  {
    "label": "RebuildFoliageTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildFoliageTree(const UFoliageType* Settings)"
  },
  {
    "label": "BeginSelectionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSelectionUpdate()"
  },
  {
    "label": "EndSelectionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSelectionUpdate()"
  }
]