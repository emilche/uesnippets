[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12ResourceInitConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceInitConfig"
  },
  {
    "label": "FD3D12VRAMCopyOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12VRAMCopyOperation"
  },
  {
    "label": "ECopyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECopyType"
  },
  {
    "label": "FD3D12HeapAndOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12HeapAndOffset"
  },
  {
    "label": "FD3D12MemoryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12MemoryPool"
  },
  {
    "label": "FD3D12PoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PoolAllocator"
  },
  {
    "label": "FrameFencedAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameFencedAllocationData"
  },
  {
    "label": "CreateUpload()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIPoolAllocator . h \" # include \" D3D12Resources . h \" enum class EResourceAllocationStrategy { kPlacedResource,kManualSubAllocation } ; struct FD3D12ResourceInitConfig { FD3D12ResourceInitConfig)",
    "insertText": "CreateUpload()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FD3D12ResourceInitConfig Config ; Config . HeapType = D3D12_HEAP_TYPE_UPLOAD ; Config . HeapFlags = D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS ; Config . ResourceFlags = D3D12_RESOURCE_FLAG_NONE ; Config . InitialResourceState = D3D12_RESOURCE_STATE_GENERIC_READ ; return Config ; } bool)",
    "insertText": "operator(const FD3D12ResourceInitConfig& InOther)"
  },
  {
    "label": "FD3D12MemoryPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12MemoryPool()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetBackingResource()",
    "kind": "Method",
    "detail": "Function (FD3D12Resource*)",
    "insertText": "GetBackingResource()"
  },
  {
    "label": "GetBackingHeap()",
    "kind": "Method",
    "detail": "Function (} FD3D12Heap*)",
    "insertText": "GetBackingHeap()"
  },
  {
    "label": "GetLastUsedFrameFence()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetLastUsedFrameFence()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastUsedFrameFence =)",
    "insertText": "Max(LastUsedFrameFence, InFrameFence)"
  },
  {
    "label": "FD3D12PoolAllocator()",
    "kind": "Method",
    "detail": "Function (} protected : const FD3D12ResourceInitConfig InitConfig ; const FString Name ; EResourceAllocationStrategy AllocationStrategy ; TRefCountPtr<FD3D12Resource> BackingResource ; TRefCountPtr<FD3D12Heap> BackingHeap ; uint64 LastUsedFrameFence ; private : HeapId TraceHeapId ; } ; class FD3D12PoolAllocator : public FRHIPoolAllocator,public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject,public ID3D12ResourceAllocator { public :)",
    "insertText": "FD3D12PoolAllocator(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, const FD3D12ResourceInitConfig& InInitConfig, const FString& InName, EResourceAllocationStrategy InAllocationStrategy, uint64 InDefaultPoolSize, uint32 InPoolAlignment, uint32 InMaxAllocationSize, FRHIMemoryPool::EFreeListOrder InFreeListOrder, bool bInDefragEnabled, HeapId InTraceParentHeapId)"
  },
  {
    "label": "FD3D12PoolAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12PoolAllocator()"
  },
  {
    "label": "SupportsAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsAllocation(D3D12_HEAP_TYPE InHeapType, D3D12_RESOURCE_FLAGS InResourceFlags, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "AllocDefaultResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocDefaultResource(D3D12_HEAP_TYPE InHeapType, const FD3D12ResourceDesc& InDesc, EBufferUsageFlags InBufferUsage, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, uint32 InAlignment, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "DeallocateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateResource(FD3D12ResourceLocation& ResourceLocation, bool bDefragFree = false)"
  },
  {
    "label": "AllocateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateResource(uint32 GPUIndex, D3D12_HEAP_TYPE InHeapType, const FD3D12ResourceDesc& InDesc, uint64 InSize, uint32 InAllocationAlignment, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, const D3D12_CLEAR_VALUE* InClearValue, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "CleanUpAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAllocations(uint64 InFrameLag, bool bForceFree = false)"
  },
  {
    "label": "FlushPendingCopyOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingCopyOps(FD3D12CommandContext& InCommandContext)"
  },
  {
    "label": "TransferOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferOwnership(FD3D12ResourceLocation& InSource, FD3D12ResourceLocation& InDest)"
  },
  {
    "label": "IsOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwner(FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "GetAllocationStrategy()",
    "kind": "Method",
    "detail": "Function (} EResourceAllocationStrategy)",
    "insertText": "GetAllocationStrategy()"
  },
  {
    "label": "GetBackingHeapAndAllocationOffsetInBytes()",
    "kind": "Method",
    "detail": "Function (FD3D12HeapAndOffset)",
    "insertText": "GetBackingHeapAndAllocationOffsetInBytes(FD3D12ResourceLocation& InResourceLocation)"
  },
  {
    "label": "GetBackingHeapAndAllocationOffsetInBytes()",
    "kind": "Method",
    "detail": "Function (FD3D12HeapAndOffset)",
    "insertText": "GetBackingHeapAndAllocationOffsetInBytes(const FRHIPoolAllocationData& InAllocationData)"
  },
  {
    "label": "GetPendingDeleteRequestSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPendingDeleteRequestSize()"
  },
  {
    "label": "GetResourceAllocationStrategy()",
    "kind": "Method",
    "detail": "Function (EResourceAllocationStrategy)",
    "insertText": "GetResourceAllocationStrategy(D3D12_RESOURCE_FLAGS InResourceFlags, ED3D12ResourceStateMode InResourceStateMode, uint32 Alignment)"
  },
  {
    "label": "CreateNewPool()",
    "kind": "Method",
    "detail": "Function (protected : FRHIMemoryPool*)",
    "insertText": "CreateNewPool(int16 InPoolIndex, uint32 InMinimumAllocationSize, ERHIPoolResourceTypes InAllocationResourceType)"
  },
  {
    "label": "HandleDefragRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDefragRequest(FRHIContextArray const& Contexts, FRHIPoolAllocationData* InSourceBlock, FRHIPoolAllocationData& InTmpTargetBlock)"
  },
  {
    "label": "CreatePlacedResource()",
    "kind": "Method",
    "detail": "Function (FD3D12Resource*)",
    "insertText": "CreatePlacedResource(const FRHIPoolAllocationData& InAllocationData, const FD3D12ResourceDesc& InDesc, D3D12_RESOURCE_STATES InCreateState, ED3D12ResourceStateMode InResourceStateMode, const D3D12_CLEAR_VALUE* InClearValue, const TCHAR* InName)"
  },
  {
    "label": "UpdateAllocationTracking()",
    "kind": "Method",
    "detail": "Function (enum class EAllocationType { Allocate,DefragFree,Free } ; void)",
    "insertText": "UpdateAllocationTracking(FD3D12ResourceLocation& InAllocation, EAllocationType InAllocationType)"
  }
]