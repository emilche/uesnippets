[
  {
    "label": "FFrameNumberInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumberInterface"
  },
  {
    "label": "FFrameNumberInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FrameNumberDisplayFormat . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Misc / FrameRate . h \" # include \" FrameNumberTimeEvaluator . h \" # include \" Misc / Timecode . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Math / BasicMathExpressionEvaluator . h \" # include \" Internationalization / FastDecimalFormat . h \" struct FFrameNumberInterface : public INumericTypeInterface<double> {)",
    "insertText": "FFrameNumberInterface(const TAttribute<EFrameNumberDisplayFormats>& InDisplayFormatAttr, const TAttribute<uint8>& InOnGetZeroPadFrameNumber, const TAttribute<FFrameRate>& InTickResolutionAttr, const TAttribute<FFrameRate>& InDisplayRateAttr) : DisplayFormatAttr(InDisplayFormatAttr) , TickResolutionAttr(InTickResolutionAttr) , DisplayRateAttr(InDisplayRateAttr) , ZeroPadFramesAttr(InOnGetZeroPadFrameNumber) , SubframeIndicator(TEXT(\"*\"))"
  },
  {
    "label": "GetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMinFractionalDigits()"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxFractionalDigits(const TAttribute<TOptional<int32>>& NewValue)"
  },
  {
    "label": "IsCharacterValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCharacterValid(TCHAR InChar)"
  },
  {
    "label": "InChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InChar()"
  },
  {
    "label": "GetLocalizedNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules& NumberFormattingRules =)",
    "insertText": "GetLocalizedNumberFormattingRules()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; const FString ValidChars =)",
    "insertText": "TEXT(\"1234567890()-+=\\\\/.,*^%%hrmsf[]:; \")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(const double& Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FFrameRate SourceFrameRate = TickResolutionAttr .)",
    "insertText": "Get()"
  },
  {
    "label": "IsDropFormatTimecodeSupported()",
    "kind": "Method",
    "detail": "Function (bool bIsValidRateForDropFrame =)",
    "insertText": "IsDropFormatTimecodeSupported(DestinationFrameRate)"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (FString SubframeSuffix =)",
    "insertText": "IsNearlyZero(DisplayTime.GetSubFrame()) ? TEXT(\"\")"
  },
  {
    "label": "AsSeconds()",
    "kind": "Method",
    "detail": "Function (} case EFrameNumberDisplayFormats::Seconds : { double TimeInSeconds = SourceFrameRate .)",
    "insertText": "AsSeconds(FFrameTime::FromDecimal(Value))"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions NumberFormattingOptions =)",
    "insertText": "FNumberFormattingOptions() .SetUseGrouping(false) .SetMinimumFractionalDigits(2) .SetMaximumFractionalDigits(ZeroPadFramesAttr.Get())"
  },
  {
    "label": "FromDecimal()",
    "kind": "Method",
    "detail": "Function (} case EFrameNumberDisplayFormats::NonDropFrameTimecode : case EFrameNumberDisplayFormats::DropFrameTimecode : { FFrameTime InternalFrameNumber =)",
    "insertText": "FromDecimal(Value)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime DisplayTime =)",
    "insertText": "TransformTime(InternalFrameNumber, SourceFrameRate, DestinationFrameRate)"
  },
  {
    "label": "FromFrameNumber()",
    "kind": "Method",
    "detail": "Function (bool bIsDropTimecode = Format = = EFrameNumberDisplayFormats::DropFrameTimecode ; FTimecode AsNonDropTimecode =)",
    "insertText": "FromFrameNumber(DisplayTime.FloorToFrame(), DestinationFrameRate, bIsDropTimecode)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} default : return)",
    "insertText": "FString(TEXT(\"Unsupported Format\"))"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} } TOptional<double>)",
    "insertText": "FromString(const FString& InString, const double& InExistingValue)"
  },
  {
    "label": "EvaluateTimecode()",
    "kind": "Method",
    "detail": "Function (FFrameNumberTimeEvaluator Eval ; bool bWasTimecodeText ; TValueOrError<FFrameTime,FExpressionError> TimecodeResult = Eval .)",
    "insertText": "EvaluateTimecode(*InString, SourceFrameRate, DestinationFrameRate, bWasTimecodeText)"
  },
  {
    "label": "EvaluateFrame()",
    "kind": "Method",
    "detail": "Function (bool bWasFrameText ; TValueOrError<FFrameTime,FExpressionError> FrameResult = Eval .)",
    "insertText": "EvaluateFrame(*InString, SourceFrameRate, DestinationFrameRate, bWasFrameText)"
  },
  {
    "label": "EvaluateTime()",
    "kind": "Method",
    "detail": "Function (bool bWasTimeText ; TValueOrError<FFrameTime,FExpressionError> TimeResult = Eval .)",
    "insertText": "EvaluateTime(*InString, DestinationFrameRate, bWasTimeText)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TimeResult.IsValid() && FallbackFormat == EFrameNumberDisplayFormats::Seconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FrameResult.IsValid() && FallbackFormat == EFrameNumberDisplayFormats::Frames)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FBasicMathExpressionEvaluator Parser ;)",
    "insertText": "if(FallbackFormat == EFrameNumberDisplayFormats::Seconds)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (TValueOrError<double,FExpressionError> Result = Parser .)",
    "insertText": "Evaluate(*InString, TimeInSeconds)"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime ResultTime = DestinationFrameRate .)",
    "insertText": "AsFrameTime(Result.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(FallbackFormat == EFrameNumberDisplayFormats::Frames)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime ExistingTime =)",
    "insertText": "TransformTime(FFrameTime::FromDecimal(InExistingValue), DestinationFrameRate, SourceFrameRate)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (TValueOrError<double,FExpressionError> Result = Parser .)",
    "insertText": "Evaluate(*InString, (double)(ExistingTime.GetFrame().Value))"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime ResultTime =)",
    "insertText": "TransformTime(FFrameTime::FromDecimal(Result.GetValue()), SourceFrameRate, DestinationFrameRate)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} } return TOptional<)",
    "insertText": "double()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bWasTimecodeText)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bWasTimeText)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bWasFrameText)"
  },
  {
    "label": "GetSubframeIndicator()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetSubframeIndicator()"
  },
  {
    "label": "DisplayFormatChanged()",
    "kind": "Method",
    "detail": "Function (SubframeIndicator = InSubframeIndicator ; } void)",
    "insertText": "DisplayFormatChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnSettingChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetOnSettingChanged()",
    "kind": "Method",
    "detail": "Function (} FOnSettingChanged*)",
    "insertText": "GetOnSettingChanged()"
  }
]