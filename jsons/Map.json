[
  {
    "label": "Map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Map"
  },
  {
    "label": "KeyValuePair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyValuePair"
  },
  {
    "label": "MapChangedEventArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapChangedEventArgs"
  },
  {
    "label": "MapView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapView"
  },
  {
    "label": "MapIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapIterator"
  },
  {
    "label": "KeyValuePair()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_MAP_H_ # define BASE_WIN_MAP_H_ # include<windows . foundation . collections . h> # include<wrl / implements . h> # include<map> # include<utility> # include \" base / check_op . h \" # include \" base / containers / contains . h \" # include \" base / notreached . h \" # include \" base / win / vector . h \" # include \" base / win / winrt_foundation_helpers . h \" namespace base { namespace win { template<K,V> class Map ; namespace internal { template<K,V> using ComplexK = ABI::Windows::Foundation::Collections::IMap<K,V>::K_complex ; template<K,V> using ComplexV = ABI::Windows::Foundation::Collections::IMap<K,V>::V_complex ; template<K,V> using LogicalK = LogicalType<ComplexK<K,V>> ; template<K,V> using LogicalV = LogicalType<ComplexV<K,V>> ; template<K,V> using AbiK = AbiType<ComplexK<K,V>> ; template<K,V> using AbiV = AbiType<ComplexV<K,V>> ; template<K,V> using StorageK = StorageType<ComplexK<K,V>> ; template<K,V> using StorageV = StorageType<ComplexV<K,V>> ; template<K,V> class KeyValuePair : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK<K,V>,LogicalV<K,V>>> { public : using AbiK = AbiK<K,V> ; using AbiV = AbiV<K,V> ; using StorageK = StorageK<K,V> ; using StorageV = StorageV<K,V> ;)",
    "insertText": "KeyValuePair(StorageK key, StorageV value) : key_(std::move(key)), value_(std::move(value))"
  },
  {
    "label": "get_Key()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Key(AbiK* key)"
  },
  {
    "label": "get_Value()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Value(AbiV* value)"
  },
  {
    "label": "MapChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (} private : StorageK key_ ; StorageV value_ ; } ; template<K> class MapChangedEventArgs : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IMapChangedEventArgs<K>> { public :)",
    "insertText": "MapChangedEventArgs(ABI::Windows::Foundation::Collections::CollectionChange change, K key) : change_(change), key_(std::move(key))"
  },
  {
    "label": "MapChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MapChangedEventArgs()"
  },
  {
    "label": "get_Key()",
    "kind": "Method",
    "detail": "Function (* value = change_ ; return S_OK ; } IFACEMETHODIMP)",
    "insertText": "get_Key(K* value)"
  },
  {
    "label": "MapIterator()",
    "kind": "Method",
    "detail": "Function (* value = key_ ; return S_OK ; } private : const ABI::Windows::Foundation::Collections::CollectionChange change_ ; K key_ ; } ; } template<K,V> class Map : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRt | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IMap<internal::LogicalK<K,V>,internal::LogicalV<K,V>>,ABI::Windows::Foundation::Collections::IObservableMap<internal::LogicalK<K,V>,internal::LogicalV<K,V>>,ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<internal::LogicalK<K,V>,internal::LogicalV<K,V>>*>> { public : using LogicalK = internal::LogicalK<K,V> ; using LogicalV = internal::LogicalV<K,V> ; using AbiK = internal::AbiK<K,V> ; using AbiV = internal::AbiV<K,V> ; using StorageK = internal::StorageK<K,V> ; using StorageV = internal::StorageV<K,V> ; private : class MapView ; class MapIterator : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<internal::LogicalK<K,V>,internal::LogicalV<K,V>>*>> { public :)",
    "insertText": "MapIterator(Microsoft::WRL::ComPtr<MapView> view) : view_(std::move(view))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(view_->ValidState())"
  },
  {
    "label": "ConvertMapToVectorIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertMapToVectorIterator()"
  },
  {
    "label": "get_Current()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Current(ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK, LogicalV>** current)"
  },
  {
    "label": "get_HasCurrent()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_HasCurrent(boolean* has_current)"
  },
  {
    "label": "MoveNext()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "MoveNext(boolean* has_current)"
  },
  {
    "label": "GetMany()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "GetMany(unsigned capacity, ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK, LogicalV>** value, unsigned* actual)"
  },
  {
    "label": "LogicalV()",
    "kind": "Method",
    "detail": "Function (auto vector = Microsoft::WRL::Make<Vector<ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK,)",
    "insertText": "LogicalV()"
  },
  {
    "label": "AbiV()",
    "kind": "Method",
    "detail": "Function (auto key_value_pair = Microsoft::WRL::Make<internal::KeyValuePair<AbiK,)",
    "insertText": "AbiV(pair.first, pair.second)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (vector ->)",
    "insertText": "Append(key_value_pair.Get())"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} HRESULT hr = vector ->)",
    "insertText": "First(&iterator_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(SUCCEEDED(hr))"
  },
  {
    "label": "MapView()",
    "kind": "Method",
    "detail": "Function (} Microsoft::WRL::ComPtr<MapView> view_ ; Microsoft::WRL::ComPtr<ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK,LogicalV>*>> iterator_ ; } ; class MapView : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IMapView<internal::LogicalK<K,V>,internal::LogicalV<K,V>>,ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<internal::LogicalK<K,V>,internal::LogicalV<K,V>>*>,ABI::Windows::Foundation::Collections::MapChangedEventHandler<internal::LogicalK<K,V>,internal::LogicalV<K,V>>> { public :)",
    "insertText": "MapView(Microsoft::WRL::ComPtr<Map<LogicalK, LogicalV>> map) : map_(std::move(map))"
  },
  {
    "label": "add_MapChanged()",
    "kind": "Method",
    "detail": "Function (map_ ->)",
    "insertText": "add_MapChanged(this, &map_changed_token_)"
  },
  {
    "label": "MapView()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MapView()"
  },
  {
    "label": "Lookup()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "Lookup(AbiK key, AbiV* value)"
  },
  {
    "label": "get_Size()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Size(unsigned int* size)"
  },
  {
    "label": "HasKey()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "HasKey(AbiK key, boolean* found)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "Split(ABI::Windows::Foundation::Collections::IMapView<LogicalK, LogicalV>** first_partition, ABI::Windows::Foundation::Collections::IMapView<LogicalK, LogicalV>** second_partition)"
  },
  {
    "label": "NOTIMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NOTIMPLEMENTED()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "Invoke(ABI::Windows::Foundation::Collections::IObservableMap<LogicalK, LogicalV>* sender, ABI::Windows::Foundation::Collections::IMapChangedEventArgs<LogicalK>* e)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(map_.Get(), sender)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (map_ .)",
    "insertText": "Reset()"
  },
  {
    "label": "remove_MapChanged()",
    "kind": "Method",
    "detail": "Function (sender ->)",
    "insertText": "remove_MapChanged(map_changed_token_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(map_)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Map(const std::map<StorageK, StorageV, internal::Less>& map) : map_(map)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Map(std::map<StorageK, StorageV, internal::Less>&& map) : map_(std::move(map))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = map_ .)",
    "insertText": "find(key)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (* size = map_ .)",
    "insertText": "size()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (* found =)",
    "insertText": "Contains(map_, key)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "Insert(AbiK key, AbiV value, boolean* replaced)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (auto [ it,inserted ] = map_ .)",
    "insertText": "insert_or_assign(key, std::move(value))"
  },
  {
    "label": "NotifyMapChanged()",
    "kind": "Method",
    "detail": "Function (* replaced = ! inserted ;)",
    "insertText": "NotifyMapChanged(*replaced ? ABI::Windows::Foundation::Collections:: CollectionChange_ItemChanged : ABI::Windows::Foundation::Collections:: CollectionChange_ItemInserted, key)"
  },
  {
    "label": "NotifyMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMapChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemRemoved, key)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (map_ .)",
    "insertText": "clear()"
  },
  {
    "label": "NotifyMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMapChanged(ABI::Windows::Foundation::Collections::CollectionChange_Reset, 0)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (token -> value = handler_id_ + + ; handlers_ .)",
    "insertText": "emplace_hint(handlers_.end(), token->value, handler)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "First(ABI::Windows::Foundation::Collections::IIterator< ABI::Windows::Foundation::Collections::IKeyValuePair<LogicalK, LogicalV>*>** first)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (} private : ~)",
    "insertText": "Map()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(handlers_.empty())"
  },
  {
    "label": "NotifyMapChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyMapChanged(ABI::Windows::Foundation::Collections::CollectionChange change, AbiK key)"
  },
  {
    "label": "AbiK()",
    "kind": "Method",
    "detail": "Function (auto args = Microsoft::WRL::Make<internal::MapChangedEventArgs<)",
    "insertText": "AbiK(change, key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto handlers = handlers_ ;)",
    "insertText": "for(auto& handler : handlers) handler.second->Invoke(this, args.Get())"
  }
]