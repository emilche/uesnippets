[
  {
    "label": "Formattable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Formattable"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "MessageFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageFormatter"
  },
  {
    "label": "BASE_I18N_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_I18N_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_MESSAGE_FORMATTER_H_ # define BASE_I18N_MESSAGE_FORMATTER_H_ # include<stdint . h> # include<memory> # include<string> # include \" base / i18n / base_i18n_export . h \" # include \" base / strings / string_piece . h \" # include \" third_party / icu / source / common / unicode / uversion . h \" U_NAMESPACE_BEGIN class Formattable ; U_NAMESPACE_END namespace base { class Time ; namespace i18n { class MessageFormatter ; namespace internal { class BASE_I18N_EXPORT MessageArg { public :)",
    "insertText": "MessageArg(const char* s)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(StringPiece s)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(const std::string& s)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(const std::u16string& s)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(int i)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(int64_t i)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(double d)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(const Time& t)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageArg(const MessageArg&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessageArg&)",
    "insertText": "operator(const MessageArg&)"
  },
  {
    "label": "MessageArg()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessageArg()"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_value(int* count)"
  },
  {
    "label": "MessageFormatter()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<icu::Formattable> formattable ; } ; } class BASE_I18N_EXPORT MessageFormatter { public :)",
    "insertText": "MessageFormatter()"
  },
  {
    "label": "MessageFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageFormatter(const MessageFormatter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessageFormatter&)",
    "insertText": "operator(const MessageFormatter&)"
  },
  {
    "label": "FormatWithNamedArgs()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "FormatWithNamedArgs(StringPiece16 msg, StringPiece name0 = StringPiece(), const internal::MessageArg& arg0 = internal::MessageArg(), StringPiece name1 = StringPiece(), const internal::MessageArg& arg1 = internal::MessageArg(), StringPiece name2 = StringPiece(), const internal::MessageArg& arg2 = internal::MessageArg(), StringPiece name3 = StringPiece(), const internal::MessageArg& arg3 = internal::MessageArg(), StringPiece name4 = StringPiece(), const internal::MessageArg& arg4 = internal::MessageArg(), StringPiece name5 = StringPiece(), const internal::MessageArg& arg5 = internal::MessageArg(), StringPiece name6 = StringPiece(), const internal::MessageArg& arg6 = internal::MessageArg())"
  },
  {
    "label": "FormatWithNumberedArgs()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "FormatWithNumberedArgs(StringPiece16 msg, const internal::MessageArg& arg0 = internal::MessageArg(), const internal::MessageArg& arg1 = internal::MessageArg(), const internal::MessageArg& arg2 = internal::MessageArg(), const internal::MessageArg& arg3 = internal::MessageArg(), const internal::MessageArg& arg4 = internal::MessageArg(), const internal::MessageArg& arg5 = internal::MessageArg(), const internal::MessageArg& arg6 = internal::MessageArg())"
  }
]