[
  {
    "label": "InitialTimeZoneRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialTimeZoneRule"
  },
  {
    "label": "TimeZoneTransition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneTransition"
  },
  {
    "label": "AnnualTimeZoneRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnnualTimeZoneRule"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "TimeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TimeMode"
  },
  {
    "label": "method",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "method"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "have",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "have"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "IDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDs"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "EMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMode"
  },
  {
    "label": "setStartYear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartYear(int32_t year)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek,\n                      int32_t time, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek,\n                      int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t time,\n                      UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t time,\n                      TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek,\n                      int32_t time, UBool after, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek,\n                      int32_t time, TimeMode mode, UBool after, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek,\n                    int32_t time, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek,\n                    int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t time, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t time,\n                    TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek,\n                    int32_t time, UBool after, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek,\n                    int32_t time, TimeMode mode, UBool after, UErrorCode& status)"
  },
  {
    "label": "setRawOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRawOffset(int32_t offsetMillis)"
  },
  {
    "label": "setDSTSavings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDSTSavings(int32_t millisSavedDuringDST, UErrorCode& status)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(int32_t rawOffsetGMT,\n                   int8_t startMonth, int8_t startDay, int8_t startDayOfWeek,\n                   int32_t startTime, TimeMode startTimeMode,\n                   int8_t endMonth, int8_t endDay, int8_t endDayOfWeek,\n                   int32_t endTime, TimeMode endTimeMode,\n                   int32_t dstSavings, UErrorCode& status)"
  },
  {
    "label": "compareToRule()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "compareToRule(int8_t month, int8_t monthLen, int8_t prevMonthLen,\n                                 int8_t dayOfMonth,\n                                 int8_t dayOfWeek, int32_t millis, int32_t millisDelta,\n                                 EMode ruleMode, int8_t ruleMonth, int8_t ruleDayOfWeek,\n                                 int8_t ruleDay, int32_t ruleMillis)"
  },
  {
    "label": "decodeRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeRules(UErrorCode& status)"
  },
  {
    "label": "decodeStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeStartRule(UErrorCode& status)"
  },
  {
    "label": "decodeEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeEndRule(UErrorCode& status)"
  },
  {
    "label": "initTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initTransitionRules(UErrorCode& status)"
  },
  {
    "label": "clearTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearTransitionRules(void)"
  },
  {
    "label": "deleteTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteTransitionRules(void)"
  }
]