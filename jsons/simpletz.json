[
  {
    "label": "InitialTimeZoneRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialTimeZoneRule"
  },
  {
    "label": "TimeZoneTransition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneTransition"
  },
  {
    "label": "AnnualTimeZoneRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnnualTimeZoneRule"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "TimeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TimeMode"
  },
  {
    "label": "EMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMode"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (# ifndef SIMPLETZ_H # define SIMPLETZ_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / basictz . h \" U_NAMESPACE_BEGIN class InitialTimeZoneRule ; class TimeZoneTransition ; class AnnualTimeZoneRule ; class U_I18N_API SimpleTimeZone : public BasicTimeZone { public : enum TimeMode { WALL_TIME = 0,STANDARD_TIME,UTC_TIME } ;)",
    "insertText": "SimpleTimeZone(const SimpleTimeZone& source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleTimeZone&)",
    "insertText": "operator(const SimpleTimeZone& right)"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleTimeZone()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const TimeZone& that)"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTimeZone(int32_t rawOffsetGMT, const UnicodeString& ID)"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTimeZone(int32_t rawOffsetGMT, const UnicodeString& ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, UErrorCode& status)"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTimeZone(int32_t rawOffsetGMT, const UnicodeString& ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, int32_t savingsDST, UErrorCode& status)"
  },
  {
    "label": "SimpleTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTimeZone(int32_t rawOffsetGMT, const UnicodeString& ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, TimeMode savingsStartTimeMode, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, TimeMode savingsEndTimeMode, int32_t savingsDST, UErrorCode& status)"
  },
  {
    "label": "setStartYear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartYear(int32_t year)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t time, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, UBool after, UErrorCode& status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UBool after, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t time, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t time, TimeMode mode, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, UBool after, UErrorCode& status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UBool after, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t milliseconds, int32_t monthLength, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t milliseconds, int32_t monthLength, int32_t prevMonthLength, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(UDate date, UBool local, int32_t& rawOffset, int32_t& dstOffset, UErrorCode& ec)"
  },
  {
    "label": "getOffsetFromLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffsetFromLocal(UDate date, int32_t nonExistingTimeOpt, int32_t duplicatedTimeOpt, int32_t& rawOffset, int32_t& dstOffset, UErrorCode& status)"
  },
  {
    "label": "getRawOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRawOffset(void)"
  },
  {
    "label": "setRawOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRawOffset(int32_t offsetMillis)"
  },
  {
    "label": "setDSTSavings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDSTSavings(int32_t millisSavedDuringDST, UErrorCode& status)"
  },
  {
    "label": "getDSTSavings()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getDSTSavings(void)"
  },
  {
    "label": "useDaylightTime()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "useDaylightTime(void)"
  },
  {
    "label": "inDaylightTime()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inDaylightTime(UDate date, UErrorCode& status)"
  },
  {
    "label": "hasSameRules()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasSameRules(const TimeZone& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (TimeZone*)",
    "insertText": "clone(void)"
  },
  {
    "label": "getNextTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getNextTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "getPreviousTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getPreviousTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "countTransitionRules()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countTransitionRules(UErrorCode& status)"
  },
  {
    "label": "getTimeZoneRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTimeZoneRules(const InitialTimeZoneRule*& initial, const TimeZoneRule* trsrules[], int32_t& trscount, UErrorCode& status)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(int32_t rawOffsetGMT, int8_t startMonth, int8_t startDay, int8_t startDayOfWeek, int32_t startTime, TimeMode startTimeMode, int8_t endMonth, int8_t endDay, int8_t endDayOfWeek, int32_t endTime, TimeMode endTimeMode, int32_t dstSavings, UErrorCode& status)"
  },
  {
    "label": "compareToRule()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "compareToRule(int8_t month, int8_t monthLen, int8_t prevMonthLen, int8_t dayOfMonth, int8_t dayOfWeek, int32_t millis, int32_t millisDelta, EMode ruleMode, int8_t ruleMonth, int8_t ruleDayOfWeek, int8_t ruleDay, int32_t ruleMillis)"
  },
  {
    "label": "decodeRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeRules(UErrorCode& status)"
  },
  {
    "label": "decodeStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeStartRule(UErrorCode& status)"
  },
  {
    "label": "decodeEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeEndRule(UErrorCode& status)"
  },
  {
    "label": "checkTransitionRules()",
    "kind": "Method",
    "detail": "Function (int8_t startMonth,startDay,startDayOfWeek ; int32_t startTime ; TimeMode startTimeMode,endTimeMode ; int8_t endMonth,endDay,endDayOfWeek ; int32_t endTime ; int32_t startYear ; int32_t rawOffset ; UBool useDaylight ; const int8_t STATICMONTHLENGTH [ 1 2 ] ; EMode startMode,endMode ; int32_t dstSavings ; void)",
    "insertText": "checkTransitionRules(UErrorCode& status)"
  },
  {
    "label": "initTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initTransitionRules(UErrorCode& status)"
  },
  {
    "label": "clearTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearTransitionRules(void)"
  },
  {
    "label": "deleteTransitionRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteTransitionRules(void)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(month, dayOfWeekInMonth, dayOfWeek, time, WALL_TIME, status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(month, dayOfMonth, time, WALL_TIME, status)"
  },
  {
    "label": "setStartRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStartRule(month, dayOfMonth, dayOfWeek, time, WALL_TIME, after, status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(month, dayOfWeekInMonth, dayOfWeek, time, WALL_TIME, status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(month, dayOfMonth, time, WALL_TIME, status)"
  },
  {
    "label": "setEndRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEndRule(month, dayOfMonth, dayOfWeek, time, WALL_TIME, after, status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getOffset(UDate date, UBool local, int32_t& rawOffsetRef, int32_t& dstOffsetRef, UErrorCode& ec)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(date, local, rawOffsetRef, dstOffsetRef, ec)"
  }
]