[
  {
    "label": "FBasicCollisionDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasicCollisionDetector"
  },
  {
    "label": "FBasicCollisionDetector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Collision / CollisionDetector . h \" # include \" Chaos / Collision / BasicBroadPhase . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / ChaosPerfTest . h \" # include \" ChaosStats . h \" # include \" ProfilingDebugging / CsvProfiler . h \" namespace Chaos { class FBasicCollisionDetector : public FCollisionDetector { public :)",
    "insertText": "FBasicCollisionDetector(FBasicBroadPhase& InBroadPhase, FPBDCollisionConstraints& InCollisionContainer) : FCollisionDetector(InCollisionContainer) , BroadPhase(InBroadPhase)"
  },
  {
    "label": "GetBroadPhase()",
    "kind": "Method",
    "detail": "Function (} FBasicBroadPhase&)",
    "insertText": "GetBroadPhase()"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_Detect)"
  },
  {
    "label": "CHAOS_SCOPED_TIMER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_SCOPED_TIMER(DetectCollisions)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_TIMING_STAT(Chaos, DetectCollisions)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (BroadPhase .)",
    "insertText": "ProduceOverlaps(Dt, &GetCollisionContainer().GetConstraintAllocator(), GetCollisionContainer().GetDetectorSettings())"
  },
  {
    "label": "EndDetectCollisions()",
    "kind": "Method",
    "detail": "Function (CollisionContainer .)",
    "insertText": "EndDetectCollisions()"
  }
]