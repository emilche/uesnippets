[
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMovieSceneClipboardKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboardKey"
  },
  {
    "label": "IKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IKey"
  },
  {
    "label": "TKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TKey"
  },
  {
    "label": "FMovieSceneClipboardKeyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboardKeyTrack"
  },
  {
    "label": "FMovieSceneClipboardEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneClipboardEnvironment"
  },
  {
    "label": "FMovieSceneClipboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboard"
  },
  {
    "label": "FMovieSceneClipboardBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneClipboardBuilder"
  },
  {
    "label": "TImplicitConversionFacade",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitConversionFacade"
  },
  {
    "label": "GetKeyTypeName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / InlineValue . h \" # include \" Misc / Optional . h \" # include \" MovieSceneTrack . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / UnrealNames . h \" # if WITH_EDITOR namespace MovieSceneClipboard { template<T> FName)",
    "insertText": "GetKeyTypeName()"
  },
  {
    "label": "FMovieSceneClipboardKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneClipboardKey(const FMovieSceneClipboardKey& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKey&)",
    "insertText": "operator(const FMovieSceneClipboardKey& In)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "GetTime()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(FFrameNumber InTime)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "GetValue()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T Default =)",
    "insertText": "T()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TryGetValue<)",
    "insertText": "T(Default)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Value = static_cast<const TKey<)",
    "insertText": "T(Data.GetValue())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKey Key = ConversionFunction ->)",
    "insertText": "operator()(*this)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Value = static_cast<const TKey<)",
    "insertText": "T(Key.Data.GetValue())"
  },
  {
    "label": "IKey()",
    "kind": "Method",
    "detail": "Function (struct IKey { ~)",
    "insertText": "IKey()"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTo(TInlineValue<IKey, 64>& OutDest)"
  },
  {
    "label": "FindConversionTo()",
    "kind": "Method",
    "detail": "Function (FConversionFunction*)",
    "insertText": "FindConversionTo(FName DestinationTypeName)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "TKey()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TKey : IKey {)",
    "insertText": "TKey(T InValue) : Value(MoveTemp(InValue))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FConversionFunction>* ConversionBucket = ConversionMap .)",
    "insertText": "Find(MovieSceneClipboard::GetKeyTypeName<T>())"
  },
  {
    "label": "TKey()",
    "kind": "Method",
    "detail": "Function (OutDest =)",
    "insertText": "TKey(Value)"
  },
  {
    "label": "DefineConversion()",
    "kind": "Method",
    "detail": "Function (} T Value ; } ; FFrameNumber Time ; TInlineValue<IKey,6 4> Data ; public : template<FromType,ToType> void)",
    "insertText": "DefineConversion(TFunction<ToType(const FromType&)> InFunction)"
  },
  {
    "label": "Facade()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKey)",
    "insertText": "Facade(const FMovieSceneClipboardKey& InKey)"
  },
  {
    "label": "FromType()",
    "kind": "Method",
    "detail": "Function (const TKey<FromType>& TypedKey = static_cast<const TKey<)",
    "insertText": "FromType(InKey.Data.GetValue())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; ConversionMap .)",
    "insertText": "Add(MovieSceneClipboard::GetKeyTypeName<FromType>()) .Add(MovieSceneClipboard::GetKeyTypeName<ToType>(), Facade)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FName,TMap<FName,FConversionFunction>> ConversionMap ; } ; class FMovieSceneClipboardKeyTrack { public : template<KeyType> FMovieSceneClipboardKeyTrack)",
    "insertText": "Create(FName InName, FFrameNumber KeyOffset = 0)"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKeyTrack Track ; Track . = MovieSceneClipboard::GetKeyTypeName<)",
    "insertText": "KeyType()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Track . Name =)",
    "insertText": "MoveTemp(InName)"
  },
  {
    "label": "FMovieSceneClipboardKeyTrack()",
    "kind": "Method",
    "detail": "Function (Track . KeyOffset = KeyOffset ; return Track ; } public :)",
    "insertText": "FMovieSceneClipboardKeyTrack(FMovieSceneClipboardKeyTrack&& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKeyTrack&)",
    "insertText": "operator(FMovieSceneClipboardKeyTrack&& In)"
  },
  {
    "label": "FMovieSceneClipboardKeyTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneClipboardKeyTrack(const FMovieSceneClipboardKeyTrack& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKeyTrack&)",
    "insertText": "operator(const FMovieSceneClipboardKeyTrack& In)"
  },
  {
    "label": "IsKeyOfType()",
    "kind": "Method",
    "detail": "Function (template<KeyType> bool)",
    "insertText": "IsKeyOfType()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "AddKey(FFrameNumber Time, KeyType Value)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (Time - = KeyOffset ;)",
    "insertText": "checkf(IsKeyOfType<KeyType>(), TEXT(\"Unable to add a key of a different value type to the track\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Keys .)",
    "insertText": "Add(FMovieSceneClipboardKey(Time, MoveTemp(Value)))"
  },
  {
    "label": "IterateKeys()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateKeys(TFunctionRef<bool(const FMovieSceneClipboardKey& Key)> Iter)"
  },
  {
    "label": "FMovieSceneClipboardKeyTrack()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMovieSceneClipboardKeyTrack()"
  },
  {
    "label": "FMovieSceneClipboardEnvironment()",
    "kind": "Method",
    "detail": "Function (} TArray<FMovieSceneClipboardKey> Keys ; FName ; FName Name ; FFrameNumber KeyOffset ; } ; struct FMovieSceneClipboardEnvironment {)",
    "insertText": "FMovieSceneClipboardEnvironment() : CardinalTime(0) , DateTime(FDateTime::UtcNow())"
  },
  {
    "label": "FMovieSceneClipboard()",
    "kind": "Method",
    "detail": "Function (} FFrameTime CardinalTime ; FDateTime DateTime ; FFrameRate TickResolution ; } ; class FMovieSceneClipboard { public :)",
    "insertText": "FMovieSceneClipboard()"
  },
  {
    "label": "FMovieSceneClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneClipboard(FMovieSceneClipboard&& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboard&)",
    "insertText": "operator(FMovieSceneClipboard&& In)"
  },
  {
    "label": "FMovieSceneClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneClipboard(const FMovieSceneClipboard& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboard&)",
    "insertText": "operator(const FMovieSceneClipboard& In)"
  },
  {
    "label": "GetKeyTrackGroups()",
    "kind": "Method",
    "detail": "Function (const TArray<TArray<FMovieSceneClipboardKeyTrack>>&)",
    "insertText": "GetKeyTrackGroups()"
  },
  {
    "label": "GetDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayText()"
  },
  {
    "label": "GetEnvironment()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneClipboardEnvironment&)",
    "insertText": "GetEnvironment()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (private : class FMovieSceneClipboardBuilder ; FMovieSceneClipboardEnvironment Environment ; TArray<TArray<FMovieSceneClipboardKeyTrack>> KeyTrackGroups ; } ; class FMovieSceneClipboardBuilder { public : FFrameNumber KeyOffset ; FMovieSceneClipboard)",
    "insertText": "Commit(TOptional<FFrameNumber> CopyRelativeTo)"
  },
  {
    "label": "FindOrAddKeyTrack()",
    "kind": "Method",
    "detail": "Function (template<KeyType> FMovieSceneClipboardKeyTrack&)",
    "insertText": "FindOrAddKeyTrack(FName InName, UMovieSceneTrack& ParentTrack)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<FMovieSceneClipboardKeyTrack>& Tracks = TrackIndex .)",
    "insertText": "FindOrAdd(&ParentTrack)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKeyTrack* Existing = Tracks .)",
    "insertText": "FindByPredicate([&](const FMovieSceneClipboardKeyTrack& In){ return In.GetName() == InName; })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tracks .)",
    "insertText": "Add(FMovieSceneClipboardKeyTrack::Create<KeyType>(MoveTemp(InName)))"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} private : TMap<UMovieSceneTrack*,TArray<FMovieSceneClipboardKeyTrack>> TrackIndex ; } ; namespace MovieSceneClipboard { template<From,To> struct TImplicitConversionFacade { To)",
    "insertText": "Cast(const From& Value)"
  },
  {
    "label": "To()",
    "kind": "Method",
    "detail": "Function (FMovieSceneClipboardKey::DefineConversion<From,)",
    "insertText": "To(InConversion)"
  },
  {
    "label": "DefineImplicitConversion()",
    "kind": "Method",
    "detail": "Function (} template<From,To> void)",
    "insertText": "DefineImplicitConversion()"
  },
  {
    "label": "To()",
    "kind": "Method",
    "detail": "Function (DefineExplicitConversion<From,)",
    "insertText": "To(&TImplicitConversionFacade<From, To>::Cast)"
  }
]