[
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "PacketTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketTransportInternal"
  },
  {
    "label": "JsepTransportController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepTransportController"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_JSEP_TRANSPORT_CONTROLLER_H_ # define PC_JSEP_TRANSPORT_CONTROLLER_H_ # include<stdint . h> # include<functional> # include<map> # include<memory> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / async_dns_resolver . h \" # include \" api / candidate . h \" # include \" api / crypto / crypto_options . h \" # include \" api / ice_transport_factory . h \" # include \" api / ice_transport_interface . h \" # include \" api / jsep . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" api / transport / sctp_transport_factory_interface . h \" # include \" media / sctp / sctp_transport_internal . h \" # include \" p2p / base / dtls_transport . h \" # include \" p2p / base / dtls_transport_factory . h \" # include \" p2p / base / dtls_transport_internal . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" p2p / base / p2p_transport_channel . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" p2p / base / port . h \" # include \" p2p / base / port_allocator . h \" # include \" p2p / base / transport_description . h \" # include \" p2p / base / transport_info . h \" # include \" pc / dtls_srtp_transport . h \" # include \" pc / dtls_transport . h \" # include \" pc / jsep_transport . h \" # include \" pc / jsep_transport_collection . h \" # include \" pc / rtp_transport . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / sctp_transport . h \" # include \" pc / session_description . h \" # include \" pc / srtp_transport . h \" # include \" pc / transport_stats . h \" # include \" rtc_base / callback_list . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / helpers . h \" # include \" rtc_base / rtc_certificate . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class Thread ; class PacketTransportInternal ; } namespace webrtc { class JsepTransportController : public sigslot::has_slots<> { public : class Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnTransportChanged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnTransportChanged(const std::string& mid, RtpTransportInternal* rtp_transport, rtc::scoped_refptr<DtlsTransport> dtls_transport, DataChannelTransportInterface* data_channel_transport)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct Config { bool redetermine_role_on_ice_restart = true ; rtc::SSLProtocolVersion ssl_max_version = rtc::SSL_PROTOCOL_DTLS_12 ; webrtc::CryptoOptions crypto_options ; PeerConnectionInterface::BundlePolicy bundle_policy = PeerConnectionInterface::kBundlePolicyBalanced ; PeerConnectionInterface::RtcpMuxPolicy rtcp_mux_policy = PeerConnectionInterface::kRtcpMuxPolicyRequire ; bool disable_encryption = false ; bool enable_external_auth = false ; webrtc::IceTransportFactory* ice_transport_factory = nullptr ; cricket::DtlsTransportFactory* dtls_transport_factory = nullptr ; Observer* transport_observer = nullptr ; std::function<)",
    "insertText": "void(const rtc::CopyOnWriteBuffer& packet, int64_t packet_time_us)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool active_reset_srtp_params = false ; RtcEventLog* event_log = nullptr ; SctpTransportFactoryInterface* sctp_factory = nullptr ; std::function<)",
    "insertText": "void(rtc::SSLHandshakeError)"
  },
  {
    "label": "JsepTransportController()",
    "kind": "Method",
    "detail": "Function (const webrtc::FieldTrialsView* field_trials ; } ;)",
    "insertText": "JsepTransportController(rtc::Thread* network_thread, cricket::PortAllocator* port_allocator, AsyncDnsResolverFactoryInterface* async_dns_resolver_factory, Config config)"
  },
  {
    "label": "JsepTransportController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JsepTransportController()"
  },
  {
    "label": "JsepTransportController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepTransportController(const JsepTransportController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepTransportController&)",
    "insertText": "operator(const JsepTransportController&)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetLocalDescription(SdpType type, const cricket::SessionDescription* description)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetRemoteDescription(SdpType type, const cricket::SessionDescription* description)"
  },
  {
    "label": "GetRtpTransport()",
    "kind": "Method",
    "detail": "Function (RtpTransportInternal*)",
    "insertText": "GetRtpTransport(absl::string_view mid)"
  },
  {
    "label": "GetDtlsTransport()",
    "kind": "Method",
    "detail": "Function (cricket::DtlsTransportInternal*)",
    "insertText": "GetDtlsTransport(const std::string& mid)"
  },
  {
    "label": "GetRtcpDtlsTransport()",
    "kind": "Method",
    "detail": "Function (const cricket::DtlsTransportInternal*)",
    "insertText": "GetRtcpDtlsTransport(const std::string& mid)"
  },
  {
    "label": "LookupDtlsTransportByMid()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::DtlsTransport>)",
    "insertText": "LookupDtlsTransportByMid(const std::string& mid)"
  },
  {
    "label": "GetSctpTransport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<SctpTransport>)",
    "insertText": "GetSctpTransport(const std::string& mid)"
  },
  {
    "label": "GetDataChannelTransport()",
    "kind": "Method",
    "detail": "Function (DataChannelTransportInterface*)",
    "insertText": "GetDataChannelTransport(const std::string& mid)"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const cricket::IceConfig& config)"
  },
  {
    "label": "SetNeedsIceRestartFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeedsIceRestartFlag()"
  },
  {
    "label": "NeedsIceRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsIceRestart(const std::string& mid)"
  },
  {
    "label": "MaybeStartGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStartGathering()"
  },
  {
    "label": "AddRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "AddRemoteCandidates(const std::string& mid, const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "RemoveRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "RemoveRemoteCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "SetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalCertificate(const rtc::scoped_refptr<rtc::RTCCertificate>& certificate)"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<rtc::RTCCertificate>)",
    "insertText": "GetLocalCertificate(const std::string& mid)"
  },
  {
    "label": "GetRemoteSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::SSLCertChain>)",
    "insertText": "GetRemoteSSLCertChain(const std::string& mid)"
  },
  {
    "label": "GetDtlsRole()",
    "kind": "Method",
    "detail": "Function (absl::optional<rtc::SSLRole>)",
    "insertText": "GetDtlsRole(const std::string& mid)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(const std::string& mid, cricket::TransportStats* stats)"
  },
  {
    "label": "initial_offerer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initial_offerer()"
  },
  {
    "label": "RollbackTransports()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "RollbackTransports()"
  },
  {
    "label": "SubscribeIceCandidateGathered()",
    "kind": "Method",
    "detail": "Function (template<F> void)",
    "insertText": "SubscribeIceCandidateGathered(F&& callback)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (signal_ice_candidates_gathered_ .)",
    "insertText": "AddReceiver(std::forward<F>(callback))"
  },
  {
    "label": "SubscribeIceConnectionState()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeIceConnectionState(F&& callback)"
  },
  {
    "label": "SubscribeConnectionState()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeConnectionState(F&& callback)"
  },
  {
    "label": "SubscribeStandardizedIceConnectionState()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeStandardizedIceConnectionState(F&& callback)"
  },
  {
    "label": "SubscribeIceGatheringState()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeIceGatheringState(F&& callback)"
  },
  {
    "label": "SubscribeIceCandidateError()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeIceCandidateError(F&& callback)"
  },
  {
    "label": "SubscribeIceCandidatesRemoved()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeIceCandidatesRemoved(F&& callback)"
  },
  {
    "label": "SubscribeIceCandidatePairChanged()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "SubscribeIceCandidatePairChanged(F&& callback)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : CallbackList<cricket::IceConnectionState> signal_ice_connection_state_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "ApplyDescription_n()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "ApplyDescription_n(bool local, SdpType type, const cricket::SessionDescription* description) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "ValidateAndMaybeUpdateBundleGroups()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "ValidateAndMaybeUpdateBundleGroups(bool local, SdpType type, const cricket::SessionDescription* description)"
  },
  {
    "label": "ValidateContent()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "ValidateContent(const cricket::ContentInfo& content_info)"
  },
  {
    "label": "HandleRejectedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRejectedContent(const cricket::ContentInfo& content_info) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "HandleBundledContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBundledContent(const cricket::ContentInfo& content_info, const cricket::ContentGroup& bundle_group) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "CreateJsepTransportDescription()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransportDescription)",
    "insertText": "CreateJsepTransportDescription(const cricket::ContentInfo& content_info, const cricket::TransportInfo& transport_info, const std::vector<int>& encrypted_extension_ids, int rtp_abs_sendtime_extn_id)"
  },
  {
    "label": "MergeEncryptedHeaderExtensionIdsForBundles()",
    "kind": "Method",
    "detail": "Function (std::map<const cricket::ContentGroup*,std::vector<int>>)",
    "insertText": "MergeEncryptedHeaderExtensionIdsForBundles(const cricket::SessionDescription* description)"
  },
  {
    "label": "GetEncryptedHeaderExtensionIds()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "GetEncryptedHeaderExtensionIds(const cricket::ContentInfo& content_info)"
  },
  {
    "label": "GetRtpAbsSendTimeHeaderExtensionId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRtpAbsSendTimeHeaderExtensionId(const cricket::ContentInfo& content_info)"
  },
  {
    "label": "GetJsepTransportForMid()",
    "kind": "Method",
    "detail": "Function (const cricket::JsepTransport*)",
    "insertText": "GetJsepTransportForMid(const std::string& mid) const RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "GetJsepTransportForMid()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetJsepTransportForMid(const std::string& mid) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "GetJsepTransportForMid()",
    "kind": "Method",
    "detail": "Function (const cricket::JsepTransport*)",
    "insertText": "GetJsepTransportForMid(absl::string_view mid) const RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "GetJsepTransportForMid()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetJsepTransportForMid(absl::string_view mid) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "GetJsepTransportByName()",
    "kind": "Method",
    "detail": "Function (const cricket::JsepTransport*)",
    "insertText": "GetJsepTransportByName(const std::string& transport_name) const RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "GetJsepTransportByName()",
    "kind": "Method",
    "detail": "Function (cricket::JsepTransport*)",
    "insertText": "GetJsepTransportByName(const std::string& transport_name) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "MaybeCreateJsepTransport()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "MaybeCreateJsepTransport(bool local, const cricket::ContentInfo& content_info, const cricket::SessionDescription& description) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "DestroyAllJsepTransports_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllJsepTransports_n() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "SetIceRole_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceRole_n(cricket::IceRole ice_role) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "DetermineIceRole()",
    "kind": "Method",
    "detail": "Function (cricket::IceRole)",
    "insertText": "DetermineIceRole(cricket::JsepTransport* jsep_transport, const cricket::TransportInfo& transport_info, SdpType type, bool local)"
  },
  {
    "label": "CreateDtlsTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<cricket::DtlsTransportInternal>)",
    "insertText": "CreateDtlsTransport(const cricket::ContentInfo& content_info, cricket::IceTransportInternal* ice)"
  },
  {
    "label": "CreateIceTransport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::IceTransportInterface>)",
    "insertText": "CreateIceTransport(const std::string& transport_name, bool rtcp)"
  },
  {
    "label": "CreateUnencryptedRtpTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::RtpTransport>)",
    "insertText": "CreateUnencryptedRtpTransport(const std::string& transport_name, rtc::PacketTransportInternal* rtp_packet_transport, rtc::PacketTransportInternal* rtcp_packet_transport)"
  },
  {
    "label": "CreateSdesTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::SrtpTransport>)",
    "insertText": "CreateSdesTransport(const std::string& transport_name, cricket::DtlsTransportInternal* rtp_dtls_transport, cricket::DtlsTransportInternal* rtcp_dtls_transport)"
  },
  {
    "label": "CreateDtlsSrtpTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::DtlsSrtpTransport>)",
    "insertText": "CreateDtlsSrtpTransport(const std::string& transport_name, cricket::DtlsTransportInternal* rtp_dtls_transport, cricket::DtlsTransportInternal* rtcp_dtls_transport)"
  },
  {
    "label": "GetDtlsTransports()",
    "kind": "Method",
    "detail": "Function (std::vector<cricket::DtlsTransportInternal*>)",
    "insertText": "GetDtlsTransports()"
  },
  {
    "label": "GetActiveDtlsTransports()",
    "kind": "Method",
    "detail": "Function (std::vector<cricket::DtlsTransportInternal*>)",
    "insertText": "GetActiveDtlsTransports()"
  },
  {
    "label": "OnTransportWritableState_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportWritableState_n(rtc::PacketTransportInternal* transport) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportReceivingState_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReceivingState_n(rtc::PacketTransportInternal* transport) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportGatheringState_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportGatheringState_n(cricket::IceTransportInternal* transport) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportCandidateGathered_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportCandidateGathered_n(cricket::IceTransportInternal* transport, const cricket::Candidate& candidate) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportCandidateError_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportCandidateError_n(cricket::IceTransportInternal* transport, const cricket::IceCandidateErrorEvent& event) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportCandidatesRemoved_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportCandidatesRemoved_n(cricket::IceTransportInternal* transport, const cricket::Candidates& candidates) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportRoleConflict_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportRoleConflict_n(cricket::IceTransportInternal* transport) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportStateChanged_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportStateChanged_n(cricket::IceTransportInternal* transport) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnTransportCandidatePairChanged_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportCandidatePairChanged_n(const cricket::CandidatePairChangeEvent& event) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "UpdateAggregateStates_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregateStates_n() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnRtcpPacketReceived_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtcpPacketReceived_n(rtc::CopyOnWriteBuffer* packet, int64_t packet_time_us) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "OnDtlsHandshakeError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDtlsHandshakeError(rtc::SSLHandshakeError error)"
  },
  {
    "label": "OnTransportChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTransportChanged(const std::string& mid, cricket::JsepTransport* transport)"
  },
  {
    "label": "CreateRandomId64()",
    "kind": "Method",
    "detail": "Function (const cricket::SessionDescription* local_desc_ = nullptr ; const cricket::SessionDescription* remote_desc_ = nullptr ; absl::optional<bool> initial_offerer_ ; cricket::IceConfig ice_config_ ; cricket::IceRole ice_role_ = cricket::ICEROLE_CONTROLLING ; uint64_t ice_tiebreaker_ =)",
    "insertText": "CreateRandomId64()"
  }
]