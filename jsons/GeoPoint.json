[
  {
    "label": "FCurvePoint2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint2D"
  },
  {
    "label": "FSurfacicPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicPoint"
  },
  {
    "label": "FSurfacicCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicCurvePoint"
  },
  {
    "label": "FSurfacicCurvePointWithTolerance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicCurvePointWithTolerance"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FCoordinateGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoordinateGrid"
  },
  {
    "label": "FCurvePoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Math / Point . h \" namespace UE::CADKernel { struct FCurvePoint2D { int32 DerivativeOrder = - 1 ; FPoint2D Point = FPoint2D::ZeroPoint ; FPoint2D Gradient = FPoint2D::ZeroPoint ; FPoint2D Laplacian = FPoint2D::ZeroPoint ; } ; struct FSurfacicPoint { int32 DerivativeOrder = - 1 ; FPoint Point = FPoint::ZeroPoint ; FPoint GradientU = FPoint::ZeroPoint ; FPoint GradientV = FPoint::ZeroPoint ; FPoint LaplacianU = FPoint::ZeroPoint ; FPoint LaplacianV = FPoint::ZeroPoint ; FPoint LaplacianUV = FPoint::ZeroPoint ; } ; struct FSurfacicCurvePoint { bool bWithNormals ; bool bWithTangent ; FPoint2D Point2D = FPoint2D::ZeroPoint ; FPoint Point = FPoint::ZeroPoint ; FPoint Normal = FPoint::ZeroPoint ; FPoint Tangent = FPoint::ZeroPoint ; } ; struct FSurfacicCurvePointWithTolerance { FPoint2D Point2D = FPoint2D::ZeroPoint ; FPoint Point = FPoint::ZeroPoint ; FSurfacicTolerance Tolerance = FPoint2D::FarawayPoint ; } ; typedef FSurfacicCurvePointWithTolerance FSurfacicCurveExtremities [ 2 ] ; struct FCurvePoint { int32 DerivativeOrder = - 1 ; FPoint Point = FPoint::ZeroPoint ; FPoint Gradient = FPoint::ZeroPoint ; FPoint Laplacian = FPoint::ZeroPoint ;)",
    "insertText": "FCurvePoint()"
  },
  {
    "label": "FCurvePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCurvePoint(FPoint InPoint) : Point(InPoint)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Gradient = FPoint::ZeroPoint ; Laplacian = FPoint::ZeroPoint ; } void)",
    "insertText": "Init()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (Point = FPoint::ZeroPoint ; Gradient = FPoint::ZeroPoint ; Laplacian = FPoint::ZeroPoint ; } void)",
    "insertText": "Combine(const FCurvePoint2D& Point2D, const FSurfacicPoint& SurfacicPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DerivativeOrder = Point2D . DerivativeOrder ; Point = SurfacicPoint . Point ;)",
    "insertText": "if(DerivativeOrder > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Gradient = SurfacicPoint . GradientU* Point2D . Gradient . U + SurfacicPoint . GradientV* Point2D . Gradient . V ; })",
    "insertText": "if(DerivativeOrder > 1)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (Laplacian = SurfacicPoint . LaplacianU*)",
    "insertText": "Square(Point2D.Gradient.U) + 2.0 * SurfacicPoint.LaplacianUV * Point2D.Gradient.U * Point2D.Gradient.V + SurfacicPoint.LaplacianV * FMath::Square(Point2D.Gradient.V)"
  },
  {
    "label": "FCoordinateGrid()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FCoordinateGrid { TArray<double> Coordinates [ 2 ] ;)",
    "insertText": "FCoordinateGrid()"
  },
  {
    "label": "FCoordinateGrid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCoordinateGrid(const TArray<double>& InUCoordinates, const TArray<double>& InVCoordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (Coordinates [ EIso::IsoU ] = InUCoordinates ; Coordinates [ EIso::IsoV ] = InVCoordinates ; } void)",
    "insertText": "Swap(TArray<double>& InUCoordinates, TArray<double>& InVCoordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Coordinates[EIso::IsoU], InUCoordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Coordinates[EIso::IsoV], InVCoordinates)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Count()"
  },
  {
    "label": "IsoCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "IsoCount(EIso Iso)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNum(int32 UNumber, int32 VNumber)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Coordinates [ 0 ] .)",
    "insertText": "SetNum(UNumber)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Coordinates [ 1 ] .)",
    "insertText": "SetNum(VNumber)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 UNumber = 0, int32 VNumber = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Coordinates [ 0 ] .)",
    "insertText": "Empty(UNumber)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Coordinates [ 1 ] .)",
    "insertText": "Empty(VNumber)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TArray<double>&)",
    "insertText": "operator(EIso Iso)"
  }
]