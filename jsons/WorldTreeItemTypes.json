[
  {
    "label": "FLevelModelTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelModelTreeItem"
  },
  {
    "label": "FFolderTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFolderTreeItem"
  },
  {
    "label": "IsInPie()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IWorldTreeItem . h \" namespace WorldHierarchy { const int32 FolderSortPriority = 1 0 ; const int32 LevelModelSortPriority = 0 ; bool)",
    "insertText": "IsInPie()"
  },
  {
    "label": "FLevelModelTreeItem()",
    "kind": "Method",
    "detail": "Function (struct FLevelModelTreeItem : IWorldTreeItem { public :)",
    "insertText": "FLevelModelTreeItem(TSharedRef<FLevelModel> InLevelModel)"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (FWorldTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "CreateParent()",
    "kind": "Method",
    "detail": "Function (FWorldTreeItemPtr)",
    "insertText": "CreateParent()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (FLevelModelList)",
    "insertText": "GetModel()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetLockToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockToolTipText()"
  },
  {
    "label": "GetEditorVisibilityToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEditorVisibilityToolTipText()"
  },
  {
    "label": "GetGameVisibilityToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGameVisibilityToolTipText()"
  },
  {
    "label": "GetSaveToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSaveToolTipText()"
  },
  {
    "label": "GetPackageFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackageFileName()"
  },
  {
    "label": "GetParentID()",
    "kind": "Method",
    "detail": "Function (FWorldTreeItemID)",
    "insertText": "GetParentID()"
  },
  {
    "label": "CanHaveChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveChildren()"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansion(bool bExpanded)"
  },
  {
    "label": "HasModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasModel(TSharedPtr<FLevelModel> InLevelModel)"
  },
  {
    "label": "GetAncestorPaths()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetAncestorPaths()"
  },
  {
    "label": "SetParentPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentPath(const FName& InParentPath)"
  },
  {
    "label": "GetSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSortPriority()"
  },
  {
    "label": "IsVisibleInGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleInGame()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransient()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "CanSave()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanSave()"
  },
  {
    "label": "HasLightingControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLightingControls()"
  },
  {
    "label": "HasLockControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLockControls()"
  },
  {
    "label": "HasEditorVisibilityControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEditorVisibilityControls()"
  },
  {
    "label": "HasGameVisibilityControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasGameVisibilityControls()"
  },
  {
    "label": "HasColorButtonControls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColorButtonControls()"
  },
  {
    "label": "HasKismet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKismet()"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "CanBeCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeCurrent()"
  },
  {
    "label": "HasValidPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidPackage()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "IsLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoaded()"
  },
  {
    "label": "GetDrawColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetDrawColor()"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawColor(const FLinearColor& Color)"
  },
  {
    "label": "OnToggleEditorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleEditorVisibility()"
  },
  {
    "label": "OnShowInEditorOnlySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowInEditorOnlySelected()"
  },
  {
    "label": "OnShowInEditorAllButSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowInEditorAllButSelected()"
  },
  {
    "label": "OnToggleGameVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleGameVisibility()"
  },
  {
    "label": "OnShowInGameOnlySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowInGameOnlySelected()"
  },
  {
    "label": "OnShowInGameAllButSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowInGameAllButSelected()"
  },
  {
    "label": "PopulateLevelModelList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateLevelModelList(FLevelModelList& InModelList)"
  },
  {
    "label": "OnToggleLightingScenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleLightingScenario()"
  },
  {
    "label": "OnToggleLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleLock()"
  },
  {
    "label": "OnLockOnlySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockOnlySelected()"
  },
  {
    "label": "OnLockAllButSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockAllButSelected()"
  },
  {
    "label": "OnSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSave()"
  },
  {
    "label": "OnOpenKismet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenKismet()"
  },
  {
    "label": "GetLevelSelectionFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLevelSelectionFlag()"
  },
  {
    "label": "IsLightingScenario()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingScenario()"
  },
  {
    "label": "GetHierarchyItemBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetHierarchyItemBrush()"
  },
  {
    "label": "CanChangeParents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeParents()"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateContextMenu(UToolMenu* Menu, const SWorldHierarchyImpl& Hierarchy)"
  },
  {
    "label": "GetAsLevelModelTreeItem()",
    "kind": "Method",
    "detail": "Function (public : FLevelModelTreeItem*)",
    "insertText": "GetAsLevelModelTreeItem()"
  },
  {
    "label": "GetAsFolderTreeItem()",
    "kind": "Method",
    "detail": "Function (} FFolderTreeItem*)",
    "insertText": "GetAsFolderTreeItem()"
  },
  {
    "label": "SetVisibleInGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleInGame(bool bVisible)"
  },
  {
    "label": "SetLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocked(bool bLocked)"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (public : FValidationInfo)",
    "insertText": "ValidateDrop(const FDragDropEvent& DragEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(const FDragDropEvent& DragEvent, TSharedRef<SWorldHierarchyImpl> Hierarchy)"
  },
  {
    "label": "SetSelectedLevelsToPopulatedList()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<FLevelModel> LevelModel ; bool bPersistentLevel : 1 ; private : FWorldTreeItemID ID ; void)",
    "insertText": "SetSelectedLevelsToPopulatedList()"
  },
  {
    "label": "IsPersistentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistentLevel()"
  },
  {
    "label": "FFolderTreeItem()",
    "kind": "Method",
    "detail": "Function (} ; struct FFolderTreeItem : IWorldTreeItem { public :)",
    "insertText": "FFolderTreeItem(FName InPath)"
  },
  {
    "label": "GetHierarchyItemBrushWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHierarchyItemBrushWidth()"
  },
  {
    "label": "SetNewPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewPath(FName NewPath)"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetFullPath()"
  },
  {
    "label": "IsAnyChildLoaded()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsAnyChildLoaded()"
  },
  {
    "label": "SetSelectionToFolderChildren()",
    "kind": "Method",
    "detail": "Function (FLevelModelList)",
    "insertText": "SetSelectionToFolderChildren()"
  }
]