[
  {
    "label": "IsJsonMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsJsonMatcher"
  },
  {
    "label": "ExpectDictBooleanValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_VALUES_TEST_UTIL_H_ # define BASE_TEST_VALUES_TEST_UTIL_H_ # include<iosfwd> # include<memory> # include<string> # include \" base / strings / string_piece . h \" # include \" base / values . h \" # include \" testing / gmock / include / gmock / gmock - matchers . h \" namespace base { void)",
    "insertText": "ExpectDictBooleanValue(bool expected_value, const Value::Dict& dict, StringPiece path)"
  },
  {
    "label": "ExpectDictIntegerValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectDictIntegerValue(int expected_value, const Value::Dict& dict, StringPiece path)"
  },
  {
    "label": "ExpectDictStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectDictStringValue(StringPiece expected_value, const Value::Dict& dict, StringPiece path)"
  },
  {
    "label": "ExpectDictValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectDictValue(const Value::Dict& expected_value, const Value::Dict& dict, StringPiece path)"
  },
  {
    "label": "ExpectDictValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectDictValue(const Value& expected_value, const Value::Dict& dict, StringPiece path)"
  },
  {
    "label": "ExpectStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStringValue(const std::string& expected_str, const Value& actual)"
  },
  {
    "label": "DictionaryHasValue()",
    "kind": "Method",
    "detail": "Function (namespace test { testing::Matcher<const base::Value&>)",
    "insertText": "DictionaryHasValue(const std::string& key, const base::Value& expected_value)"
  },
  {
    "label": "DictionaryHasValues()",
    "kind": "Method",
    "detail": "Function (testing::Matcher<const base::Value&>)",
    "insertText": "DictionaryHasValues(const base::Value& template_value)"
  },
  {
    "label": "IsJsonMatcher()",
    "kind": "Method",
    "detail": "Function (class IsJsonMatcher { public :)",
    "insertText": "IsJsonMatcher(base::StringPiece json)"
  },
  {
    "label": "IsJsonMatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsJsonMatcher(const base::Value& value)"
  },
  {
    "label": "IsJsonMatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsJsonMatcher(const IsJsonMatcher& other)"
  },
  {
    "label": "IsJsonMatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IsJsonMatcher()"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndExplain(base::StringPiece json, testing::MatchResultListener* listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndExplain(const base::Value& value, testing::MatchResultListener* listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndExplain(const base::Value::Dict& dict, testing::MatchResultListener* listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndExplain(const base::Value::List& list, testing::MatchResultListener* listener)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeTo(std::ostream* os)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeNegationTo(std::ostream* os)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : IsJsonMatcher&)",
    "insertText": "operator(const IsJsonMatcher& other)"
  },
  {
    "label": "IsJson()",
    "kind": "Method",
    "detail": "Function (base::Value expected_value_ ; } ; template<T> testing::PolymorphicMatcher<IsJsonMatcher>)",
    "insertText": "IsJson(const T& value)"
  },
  {
    "label": "ParseJson()",
    "kind": "Method",
    "detail": "Function (} Value)",
    "insertText": "ParseJson(StringPiece json)"
  },
  {
    "label": "ParseJsonDict()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "ParseJsonDict(StringPiece json)"
  },
  {
    "label": "ParseJsonList()",
    "kind": "Method",
    "detail": "Function (Value::List)",
    "insertText": "ParseJsonList(StringPiece json)"
  }
]