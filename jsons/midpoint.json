[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_TPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_TPtr"
  },
  {
    "label": "_Fp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_MIDPOINT_H # define _LIBCPP___NUMERIC_MIDPOINT_H # include<__config> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 template <class _Tp> _LIBCPP_INLINE_VISIBILITY constexpr enable_if_t<is_integral_v<_Tp> && !is_same_v<bool, _Tp> && !is_null_pointer_v<_Tp>, _Tp> midpoint(_Tp __a, _Tp __b)"
  },
  {
    "label": "_Up()",
    "kind": "Method",
    "detail": "Function (using _Up = make_unsigned_t<_Tp> ; _Up __bitshift = numeric_limits<_Up>::digits - 1 ; _Up __diff =)",
    "insertText": "_Up(__b) - _Up(__a)"
  },
  {
    "label": "__half_diff()",
    "kind": "Method",
    "detail": "Function (_Up __sign_bit = __b<__a ; _Up)",
    "insertText": "__half_diff(__diff / 2) + (__sign_bit << __bitshift) + (__sign_bit & __diff)"
  },
  {
    "label": "__sign()",
    "kind": "Method",
    "detail": "Function (} template<_Tp> int)",
    "insertText": "__sign(_Tp __val)"
  },
  {
    "label": "__fp_abs()",
    "kind": "Method",
    "detail": "Function (} template<_Fp> _Fp)",
    "insertText": "__fp_abs(_Fp __f)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (_Fp __lo = numeric_limits<_Fp)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (_Fp __hi = numeric_limits<_Fp)",
    "insertText": "max()"
  }
]