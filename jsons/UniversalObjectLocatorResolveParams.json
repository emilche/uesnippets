[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FResolveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveParams"
  },
  {
    "label": "TResolveParamsWithBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TResolveParamsWithBuffer"
  },
  {
    "label": "FResolveResultFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveResultFlags"
  },
  {
    "label": "FResolveResultData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveResultData"
  },
  {
    "label": "FResolveResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveResult"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / Future . h \" # include \" Misc / TVariant . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" UniversalObjectLocatorResolveParameterBuffer . h \" # include \" UniversalObjectLocatorResolveParams . generated . h \" class UObject ;)",
    "insertText": "UENUM(BlueprintType, meta = (Bitflags, UseEnumValuesAsMaskValuesInEditor = \"true\"))"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None,Load = 1<<0,Unload = 1<<1,Async = 1<<2,WillWait = 1<<3,AsyncWait = Async | WillWait,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELocatorResolveFlags)"
  },
  {
    "label": "FResolveParams()",
    "kind": "Method",
    "detail": "Function (struct FResolveParams {)",
    "insertText": "FResolveParams() : Context(nullptr) , ParameterBuffer(nullptr) , Flags(ELocatorResolveFlags::None)"
  },
  {
    "label": "FResolveParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveParams(UObject* InContext) : Context(InContext) , ParameterBuffer(nullptr) , Flags(ELocatorResolveFlags::None)"
  },
  {
    "label": "FResolveParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveParams(UObject* InContext, ELocatorResolveFlags InFlags) : Context(InContext) , ParameterBuffer(nullptr) , Flags(InFlags)"
  },
  {
    "label": "FindParameter()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "FindParameter()"
  },
  {
    "label": "FindParameter()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "FindParameter(TParameterTypeHandle<T> ParameterType)"
  },
  {
    "label": "AsyncFind()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "AsyncFind(UObject* InContext = nullptr)"
  },
  {
    "label": "AsyncLoad()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "AsyncLoad(UObject* InContext = nullptr)"
  },
  {
    "label": "AsyncUnload()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "AsyncUnload(UObject* InContext)"
  },
  {
    "label": "SyncFind()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "SyncFind(UObject* InContext = nullptr)"
  },
  {
    "label": "SyncLoad()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "SyncLoad(UObject* InContext = nullptr)"
  },
  {
    "label": "SyncUnload()",
    "kind": "Method",
    "detail": "Function (} FResolveParams)",
    "insertText": "SyncUnload(UObject* InContext)"
  },
  {
    "label": "TResolveParamsWithBuffer()",
    "kind": "Method",
    "detail": "Function (} UObject* Context ; FResolveParameterBuffer* ParameterBuffer ; ELocatorResolveFlags Flags ; } ; template<int InlineSize> struct TResolveParamsWithBuffer : TInlineResolveParameterBuffer<InlineSize>,FResolveParams {)",
    "insertText": "TResolveParamsWithBuffer()"
  },
  {
    "label": "TResolveParamsWithBuffer()",
    "kind": "Method",
    "detail": "Function (ParameterBuffer = this ; })",
    "insertText": "TResolveParamsWithBuffer(UObject* InContext) : FResolveParams(InContext)"
  },
  {
    "label": "TResolveParamsWithBuffer()",
    "kind": "Method",
    "detail": "Function (ParameterBuffer = this ; })",
    "insertText": "TResolveParamsWithBuffer(UObject* InContext, ELocatorResolveFlags InFlags) : FResolveParams(InContext, InFlags)"
  },
  {
    "label": "FResolveResultFlags()",
    "kind": "Method",
    "detail": "Function (ParameterBuffer = this ; } } ; struct FResolveResultFlags {)",
    "insertText": "FResolveResultFlags() : bWasLoaded(0) , bWasLoadedIndirectly(0)"
  },
  {
    "label": "FResolveResultData()",
    "kind": "Method",
    "detail": "Function (} uint8 bWasLoaded : 1 ; uint8 bWasLoadedIndirectly : 1 ; } ; struct FResolveResultData {)",
    "insertText": "FResolveResultData() : Object(nullptr)"
  },
  {
    "label": "FResolveResultData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveResultData(UObject* InObject, FResolveResultFlags InFlags = FResolveResultFlags()) : Object(InObject) , Flags(InFlags)"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (} UObject* Object = nullptr ; FResolveResultFlags Flags ; } ; struct FResolveResult {)",
    "insertText": "FResolveResult() : Value(TInPlaceType<FResolveResultData>())"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveResult(FResolveResultData InValue) : Value(TInPlaceType<FResolveResultData>(), MoveTemp(InValue))"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveResult(TFuture<FResolveResultData>&& InFuture) : Value(TInPlaceType<TFuture<FResolveResultData>>(), MoveTemp(InFuture))"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveResult(const FResolveResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FResolveResult&)"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FResolveResult(FResolveResult&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FResolveResult&)",
    "insertText": "operator(FResolveResult&&)"
  },
  {
    "label": "IsAsync()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsAsync()"
  },
  {
    "label": "ReleaseFuture()",
    "kind": "Method",
    "detail": "Function (} TFuture<FResolveResultData>)",
    "insertText": "ReleaseFuture()"
  },
  {
    "label": "FResolveResultData()",
    "kind": "Method",
    "detail": "Function (} return TFuture<)",
    "insertText": "FResolveResultData()"
  },
  {
    "label": "NeedsWait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsWait()"
  },
  {
    "label": "SyncGetNoWait()",
    "kind": "Method",
    "detail": "Function (} return false ; } const FResolveResultData*)",
    "insertText": "SyncGetNoWait()"
  },
  {
    "label": "FResolveResultData()",
    "kind": "Method",
    "detail": "Function (Value . Emplace<)",
    "insertText": "FResolveResultData(Data)"
  },
  {
    "label": "SyncGet()",
    "kind": "Method",
    "detail": "Function (} FResolveResultData)",
    "insertText": "SyncGet()"
  },
  {
    "label": "AsyncGet()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AsyncGet(TUniqueFunction<void(const FResolveResultData&)>&& OnComplete)"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComplete(Future->Get())"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} else { Future ->)",
    "insertText": "Then([OnComplete = MoveTemp(OnComplete)](TFuture<FResolveResultData>&& InValue) { OnComplete(InValue.Get()); })"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "OnComplete(MoveTemp(Value.Get<FResolveResultData>()))"
  }
]