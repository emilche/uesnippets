[
  {
    "label": "ComponentContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComponentContext"
  },
  {
    "label": "OutgoingDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingDirectory"
  },
  {
    "label": "ServiceDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ServiceDirectory"
  },
  {
    "label": "FilteredServiceDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilteredServiceDirectory"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TestComponentContextForProcess()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_TEST_COMPONENT_CONTEXT_FOR_PROCESS_H_ # define BASE_FUCHSIA_TEST_COMPONENT_CONTEXT_FOR_PROCESS_H_ # include<memory> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / strings / string_piece . h \" namespace sys { class ComponentContext ; class OutgoingDirectory ; class ServiceDirectory ; } namespace base { class FilteredServiceDirectory ; class BASE_EXPORT TestComponentContextForProcess { public : enum class InitialState { kEmpty,kCloneAll,} ;)",
    "insertText": "TestComponentContextForProcess(InitialState initial_state = InitialState::kEmpty)"
  },
  {
    "label": "TestComponentContextForProcess()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestComponentContextForProcess()"
  },
  {
    "label": "TestComponentContextForProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestComponentContextForProcess(const TestComponentContextForProcess&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestComponentContextForProcess&)",
    "insertText": "operator(const TestComponentContextForProcess&)"
  },
  {
    "label": "additional_services()",
    "kind": "Method",
    "detail": "Function (sys::OutgoingDirectory*)",
    "insertText": "additional_services()"
  },
  {
    "label": "AddService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddService(const base::StringPiece service)"
  },
  {
    "label": "AddServices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddServices(base::span<const base::StringPiece> services)"
  },
  {
    "label": "published_services()",
    "kind": "Method",
    "detail": "Function (sys::ServiceDirectory*)",
    "insertText": "published_services()"
  }
]