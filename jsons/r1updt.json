[
  {
    "label": "r1updt()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "r1updt(Matrix< Scalar, Dynamic, Dynamic > &s, const Matrix< Scalar, Dynamic, 1> &u, std::vector<JacobiRotation<Scalar> > &v_givens, std::vector<JacobiRotation<Scalar> > &w_givens, Matrix< Scalar, Dynamic, 1> &v, Matrix< Scalar, Dynamic, 1> &w, bool *sing)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (typedef DenseIndex Index ; const JacobiRotation<Scalar> IdentityRotation = JacobiRotation<)",
    "insertText": "Scalar(1,0)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index m = s .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index n = s .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (Index i,j = 1 ; Scalar temp ; JacobiRotation<Scalar> givens ;)",
    "insertText": "eigen_assert(m==n)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(u.size()==m)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(v.size()==n)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(w.size()==n)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (w [ n - 1 ] =)",
    "insertText": "s(n-1,n-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (w [ j ] = 0 . ;)",
    "insertText": "if(v[j] != 0.)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (givens .)",
    "insertText": "makeGivens(-v[n-1], v[j])"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (v [ n - 1 ] = givens .)",
    "insertText": "s() * v[j] + givens.c()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (v_givens [ j ] = givens ;)",
    "insertText": "for(i = j; i < m; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * s(j,i) - givens.s()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (w [ i ] = givens .)",
    "insertText": "s() * s(j,i) + givens.c()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(j,i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else v_givens [ j ] = IdentityRotation ; } w + = v [ n - 1 ]* u ;* sing = false ;)",
    "insertText": "for(j = 0; j < n-1; ++j)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (givens .)",
    "insertText": "makeGivens(-s(j,j), w[j])"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (temp = givens .)",
    "insertText": "c() * s(j,i) + givens.s()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} w_givens [ j ] = givens ; } else v_givens [ j ] = IdentityRotation ;)",
    "insertText": "if(s(j,j) == 0.)"
  }
]