[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_IS_HEAP_UNTIL_H # define _LIBCPP___ALGORITHM_RANGES_IS_HEAP_UNTIL_H # include<__algorithm / is_heap_until . h> # include<__algorithm / make_projected . h> # include<__config> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__is_heap_until_fn_impl()",
    "kind": "Method",
    "detail": "Function (namespace __is_heap_until { struct __fn { template<class _Iter,class _Sent,class _Proj,class _Comp> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "__is_heap_until_fn_impl(_Iter __first, _Sent __last, _Comp& __comp, _Proj& __proj)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last_iter =)",
    "insertText": "next(__first, __last)"
  },
  {
    "label": "__make_projected()",
    "kind": "Method",
    "detail": "Function (auto&& __projected_comp =)",
    "insertText": "__make_projected(__comp, __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<random_access_iterator _Iter,sentinel_for<_Iter> _Sent,class _Proj = identity,indirect_strict_weak_order<projected<_Iter,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<random_access_range _Range,class _Proj = identity,indirect_strict_weak_order<projected<iterator_t<_Range>,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Range>)",
    "insertText": "operator()(_Range&& __range, _Comp __comp = {}, _Proj __proj = {})"
  }
]