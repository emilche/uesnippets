[
  {
    "label": "SVector4Slider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVector4Slider"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" NumericPropertyParams . h \" # include \" Editor . h \" # define LOCTEXT_NAMESPACE \" VectorTextBox \" template<NumericType> class SVector4Slider : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNumericValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SVector4Slider)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, VisibleText_0) SLATE_ATTRIBUTE(FString, VisibleText_1) SLATE_ATTRIBUTE(FString, VisibleText_2) SLATE_ATTRIBUTE(FString, VisibleText_3) SLATE_EVENT(FOnNumericValueCommitted, OnNumericCommitted_Box_0) SLATE_EVENT(FOnNumericValueCommitted, OnNumericCommitted_Box_1) SLATE_EVENT(FOnNumericValueCommitted, OnNumericCommitted_Box_2) SLATE_EVENT(FOnNumericValueCommitted, OnNumericCommitted_Box_3) SLATE_END_ARGS() void Construct(const FArguments& InArgs, FProperty* InProperty)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (PinProperty = InProperty ; VisibleText_0 = InArgs . _VisibleText_0 ; VisibleText_1 = InArgs . _VisibleText_1 ; VisibleText_2 = InArgs . _VisibleText_2 ; VisibleText_3 = InArgs . _VisibleText_3 ; const FLinearColor LabelClr =)",
    "insertText": "FLinearColor(1.f, 1.f, 1.f, 0.4f)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (OnNumericCommitted_0 = InArgs . _OnNumericCommitted_Box_0 ; OnNumericCommitted_1 = InArgs . _OnNumericCommitted_Box_1 ; OnNumericCommitted_2 = InArgs . _OnNumericCommitted_Box_2 ; OnNumericCommitted_3 = InArgs . _OnNumericCommitted_Box_3 ; const TNumericPropertyParams<NumericType>::FMetaDataGetter MetaDataGetter = TNumericPropertyParams<NumericType>::)",
    "insertText": "CreateLambda([&](const FName& Key) { return PinProperty->GetMetaData(Key); })"
  },
  {
    "label": "NumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (TNumericPropertyParams<NumericType>)",
    "insertText": "NumericPropertyParams(PinProperty, PinProperty ? MetaDataGetter : nullptr)"
  },
  {
    "label": "bAllowSpin()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bAllowSpin(PinProperty && PinProperty->GetBoolMetaData(\"NoSpinbox\"))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot [)",
    "insertText": "SNew(SBox) .MinDesiredWidth(275) .MaxDesiredWidth(400) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth().Padding(2).HAlign(HAlign_Fill) [ SNew(SNumericEntryBox<NumericType>) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew(STextBlock) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .Text(LOCTEXT(\"VectorNodeXAxisValueLabel\", \"X\")) .ColorAndOpacity(LabelClr) ] .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .Value(this, &SVector4Slider::GetTypeInValue_0) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted(InArgs._OnNumericCommitted_Box_0) .OnValueChanged(this, &SVector4Slider::OnValueChanged_0) .OnBeginSliderMovement(this, &SVector4Slider::OnBeginSliderMovement_0) .OnEndSliderMovement(this, &SVector4Slider::OnEndSliderMovement_0) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .UndeterminedString(LOCTEXT(\"MultipleValues\", \"Multiple Values\")) .ToolTipText(LOCTEXT(\"VectorNodeXAxisValueLabel_ToolTip\", \"X value\")) .EditableTextBoxStyle(&FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>(\"Graph.VectorEditableTextBox\")) .BorderForegroundColor(FLinearColor::White) .BorderBackgroundColor(FLinearColor::White) ] + SHorizontalBox::Slot() .AutoWidth().Padding(2).HAlign(HAlign_Fill) [ SNew(SNumericEntryBox<NumericType>) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew(STextBlock) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .Text(LOCTEXT(\"VectorNodeYAxisValueLabel\", \"Y\")) .ColorAndOpacity(LabelClr) ] .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .Value(this, &SVector4Slider::GetTypeInValue_1) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted(InArgs._OnNumericCommitted_Box_1) .OnValueChanged(this, &SVector4Slider::OnValueChanged_1) .OnBeginSliderMovement(this, &SVector4Slider::OnBeginSliderMovement_1) .OnEndSliderMovement(this, &SVector4Slider::OnEndSliderMovement_1) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .UndeterminedString(LOCTEXT(\"MultipleValues\", \"Multiple Values\")) .ToolTipText(LOCTEXT(\"VectorNodeYAxisValueLabel_ToolTip\", \"Y value\")) .EditableTextBoxStyle(&FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>(\"Graph.VectorEditableTextBox\")) .BorderForegroundColor(FLinearColor::White) .BorderBackgroundColor(FLinearColor::White) ] + SHorizontalBox::Slot() .AutoWidth().Padding(2).HAlign(HAlign_Fill) [ SNew(SNumericEntryBox<NumericType>) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew(STextBlock) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .Text(LOCTEXT(\"VectorNodeZAxisValueLabel\", \"Z\")) .ColorAndOpacity(LabelClr) ] .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .Value(this, &SVector4Slider::GetTypeInValue_2) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted(InArgs._OnNumericCommitted_Box_2) .OnValueChanged(this, &SVector4Slider::OnValueChanged_2) .OnBeginSliderMovement(this, &SVector4Slider::OnBeginSliderMovement_2) .OnEndSliderMovement(this, &SVector4Slider::OnEndSliderMovement_2) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .UndeterminedString(LOCTEXT(\"MultipleValues\", \"Multiple Values\")) .ToolTipText(LOCTEXT(\"VectorNodeZAxisValueLabel_ToolTip\", \"Z value\")) .EditableTextBoxStyle(&FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>(\"Graph.VectorEditableTextBox\")) .BorderForegroundColor(FLinearColor::White) .BorderBackgroundColor(FLinearColor::White) ] + SHorizontalBox::Slot() .AutoWidth().Padding(2).HAlign(HAlign_Fill) [ SNew(SNumericEntryBox<NumericType>) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew(STextBlock) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .Text(LOCTEXT(\"VectorNodeWAxisValueLabel\", \"W\")) .ColorAndOpacity(LabelClr) ] .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .Value(this, &SVector4Slider::GetTypeInValue_3) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted(InArgs._OnNumericCommitted_Box_3) .OnValueChanged(this, &SVector4Slider::OnValueChanged_3) .OnBeginSliderMovement(this, &SVector4Slider::OnBeginSliderMovement_3) .OnEndSliderMovement(this, &SVector4Slider::OnEndSliderMovement_3) .Font(FAppStyle::GetFontStyle(\"Graph.VectorEditableTextBox\")) .UndeterminedString(LOCTEXT(\"MultipleValues\", \"Multiple Values\")) .ToolTipText(LOCTEXT(\"VectorNodeWAxisValueLabel_ToolTip\", \"W value\")) .EditableTextBoxStyle(&FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>(\"Graph.VectorEditableTextBox\")) .BorderForegroundColor(FLinearColor::White) .BorderBackgroundColor(FLinearColor::White)"
  },
  {
    "label": "OnBeginSliderMovement_0()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnBeginSliderMovement_0()"
  },
  {
    "label": "SyncValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncValues()"
  },
  {
    "label": "OnEndSliderMovement_0()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_0(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_0 != NewValue)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnNumericCommitted_0 .)",
    "insertText": "ExecuteIfBound(NewValue, ETextCommit::Default)"
  },
  {
    "label": "OnBeginSliderMovement_1()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue_0 = NewValue ; } } void)",
    "insertText": "OnBeginSliderMovement_1()"
  },
  {
    "label": "OnEndSliderMovement_1()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_1(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_1 != NewValue)"
  },
  {
    "label": "OnBeginSliderMovement_2()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue_1 = NewValue ; } } void)",
    "insertText": "OnBeginSliderMovement_2()"
  },
  {
    "label": "OnEndSliderMovement_2()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_2(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_2 != NewValue)"
  },
  {
    "label": "OnBeginSliderMovement_3()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue_2 = NewValue ; } } void)",
    "insertText": "OnBeginSliderMovement_3()"
  },
  {
    "label": "OnEndSliderMovement_3()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_3(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_3 != NewValue)"
  },
  {
    "label": "OnValueChanged_0()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue_3 = NewValue ; } } void)",
    "insertText": "OnValueChanged_0(NumericType NewValue)"
  },
  {
    "label": "OnValueChanged_1()",
    "kind": "Method",
    "detail": "Function (SliderValue_0 = NewValue ; } void)",
    "insertText": "OnValueChanged_1(NumericType NewValue)"
  },
  {
    "label": "OnValueChanged_2()",
    "kind": "Method",
    "detail": "Function (SliderValue_1 = NewValue ; } void)",
    "insertText": "OnValueChanged_2(NumericType NewValue)"
  },
  {
    "label": "OnValueChanged_3()",
    "kind": "Method",
    "detail": "Function (SliderValue_2 = NewValue ; } void)",
    "insertText": "OnValueChanged_3(NumericType NewValue)"
  },
  {
    "label": "GetTypeInValue_0()",
    "kind": "Method",
    "detail": "Function (SliderValue_0 = LastSliderCommittedValue_0 =)",
    "insertText": "GetTypeInValue_0().GetValue()"
  },
  {
    "label": "GetTypeInValue_1()",
    "kind": "Method",
    "detail": "Function (SliderValue_1 = LastSliderCommittedValue_1 =)",
    "insertText": "GetTypeInValue_1().GetValue()"
  },
  {
    "label": "GetTypeInValue_2()",
    "kind": "Method",
    "detail": "Function (SliderValue_2 = LastSliderCommittedValue_2 =)",
    "insertText": "GetTypeInValue_2().GetValue()"
  },
  {
    "label": "GetTypeInValue_3()",
    "kind": "Method",
    "detail": "Function (SliderValue_3 = LastSliderCommittedValue_3 =)",
    "insertText": "GetTypeInValue_3().GetValue()"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "GetValueType(const FString& InString)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<double, NumericType>)"
  },
  {
    "label": "GetTypeInValue_0()",
    "kind": "Method",
    "detail": "Function (} else { return NumericType { } ; } } TOptional<NumericType>)",
    "insertText": "GetTypeInValue_0()"
  },
  {
    "label": "GetTypeInValue_1()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_1()"
  },
  {
    "label": "GetTypeInValue_2()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_2()"
  },
  {
    "label": "GetTypeInValue_3()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_3()"
  }
]