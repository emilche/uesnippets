[
  {
    "label": "ShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGenerator"
  },
  {
    "label": "ColorManagementSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ColorManagementSystem"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "ColorSpaceTransform()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_COLOR_MANAGEMENT_SYSTEM_H # define MATERIALX_COLOR_MANAGEMENT_SYSTEM_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / ShaderNode . h> # include<MaterialXGenShader / ShaderNodeImpl . h> # include<MaterialXGenShader / TypeDesc . h> # include<MaterialXCore / Document . h> MATERIALX_NAMESPACE_BEGIN class ShaderGenerator ; using ColorManagementSystemPtr = shared_ptr<class ColorManagementSystem> ; struct ColorSpaceTransform {)",
    "insertText": "ColorSpaceTransform(const string& ss, const string& ts, const TypeDesc* t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (string sourceSpace ; string targetSpace ; const TypeDesc* type ; bool)",
    "insertText": "operator(const ColorSpaceTransform &other)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getName()"
  },
  {
    "label": "loadLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "loadLibrary(DocumentPtr document)"
  },
  {
    "label": "supportsTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "supportsTransform(const ColorSpaceTransform& transform)"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (ShaderNodePtr)",
    "insertText": "createNode(const ShaderGraph* parent, const ColorSpaceTransform& transform, const string& name, GenContext& context)"
  },
  {
    "label": "ColorManagementSystem()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ColorManagementSystem()"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (ImplementationPtr)",
    "insertText": "getImplementation(const ColorSpaceTransform& transform)"
  }
]