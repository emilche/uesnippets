[
  {
    "label": "FAttributeBlendData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeBlendData"
  },
  {
    "label": "FStackAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainer"
  },
  {
    "label": "IAttributeBlendOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAttributeBlendOperator"
  },
  {
    "label": "IAttributeBlendOperator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" namespace UE { namespace Anim { struct FAttributeBlendData ; struct FStackAttributeContainer ; class IAttributeBlendOperator { public : ~)",
    "insertText": "IAttributeBlendOperator()"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Blend(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "BlendPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPerBone(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Override(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "ConvertToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAdditive(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAdditiveAttributes)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Interpolate(const void* FromData, const void* ToData, float Alpha, void* InOutData)"
  }
]