[
  {
    "label": "TAffine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAffine"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace AbsHelper { template<T> T)",
    "insertText": "Abs(T A)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector2<T>)",
    "insertText": "Abs(const UE::Math::TVector2<T>& A)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "Abs(const UE::Math::TVector<T>& A)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector4<T>)",
    "insertText": "Abs(const UE::Math::TVector4<T>& A)"
  },
  {
    "label": "TAffine()",
    "kind": "Method",
    "detail": "Function (} } template<T,uint32 Num> struct TAffine { T c ; T K ; T e [ Num ] ;)",
    "insertText": "TAffine()"
  },
  {
    "label": "TAffine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAffine(T Constant ) : c( Constant ) , K( 0.0f)"
  },
  {
    "label": "TAffine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAffine(T Min, T Max ) : c( 0.5f * ( Min + Max ) ) , K( 0.5f * ( Max - Min ))"
  },
  {
    "label": "TAffine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAffine(T Min, T Max, uint32 Index ) : c( 0.5f * ( Min + Max ) ) , K( 0.0f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (e [ Index ] = 0 . 5)",
    "insertText": "f(Max - Min)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TAffine<T,Num>&)",
    "insertText": "operator(const TAffine< T, Num >& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (c + = Other . c ; K + = Other . K ;)",
    "insertText": "for(uint32 i = 0; i < Num; i++)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetMin()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (using namespace AbsHelper ; T Result = c -)",
    "insertText": "Abs(K)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (using namespace AbsHelper ; TAffine<float,Num> Result ; Result . c = c .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Result . K = 2 . 0 f*)",
    "insertText": "Abs(c | K)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Extent + =)",
    "insertText": "Abs(e[i])"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Result . e [ i ] = 2 . 0)",
    "insertText": "f(c | e[i])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (using namespace AbsHelper ; TAffine<T,Num> Result ; Result . c = A . c* B . c ; Result . K =)",
    "insertText": "Abs(A.K * B.c ) + Abs( A.c * B.K)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Result . e [ i ] = A . e [ i ]* B . c + A . c* B . e [ i ] ; AK + =)",
    "insertText": "Abs(A.e[i])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (BK + =)",
    "insertText": "Abs(B.e[i])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Result . K + = AK* BK ; return Result ; } template<T,uint32 Num> TAffine<float,Num>)",
    "insertText": "operator(const TAffine< T, Num >& A, const TAffine< T, Num >& B)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (using namespace AbsHelper ; TAffine<float,Num> Result ; Result . c = A . c | B . c ; Result . K =)",
    "insertText": "Abs(A.K | B.c ) + Abs( A.c | B.K)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Result . e [)",
    "insertText": "i(A.e[i] | B.c ) + ( A.c | B.e[i])"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} Result . K + = AK | BK ; return Result ; } template<uint32 Num> TAffine<float,Num>)",
    "insertText": "Clamp(const TAffine< float, Num >& x, float Min, float Max)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (float xMax = x .)",
    "insertText": "GetMax()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float FuncMin =)",
    "insertText": "Clamp(xMin, Min, Max)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float FuncMax =)",
    "insertText": "Clamp(xMax, Min, Max)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Alpha(FuncMax - FuncMin ) / ( xMax - xMin)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (float Gamma = 0 . 5)",
    "insertText": "f(1.0f - Alpha ) * ( FuncMax + FuncMin)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Delta(1.0f - Alpha)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (TAffine<float,Num> Result ; Result . c = Alpha* x . c + Gamma ; Result . K =)",
    "insertText": "Abs(Alpha * x.K)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float xMin =)",
    "insertText": "Max(1e-4f, x.GetMin())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float xMax =)",
    "insertText": "Max(1e-4f, x.GetMax())"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (float FuncMin =)",
    "insertText": "InvSqrt(xMin)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (float FuncMax =)",
    "insertText": "InvSqrt(xMax)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (float Alpha = - 0 . 5 f* FuncMax* FuncMax* FuncMax ; float Gamma = 0 . 5)",
    "insertText": "f(FuncMin + FuncMax - Alpha * ( xMin + xMax ))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (float Delta =)",
    "insertText": "Abs(0.5f * ( FuncMin - FuncMax - Alpha * ( xMin - xMax ) ))"
  }
]