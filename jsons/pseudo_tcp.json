[
  {
    "label": "PseudoTcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PseudoTcp"
  },
  {
    "label": "IPseudoTcpNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPseudoTcpNotify"
  },
  {
    "label": "WriteResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WriteResult"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "TcpState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TcpState"
  },
  {
    "label": "Option",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Option"
  },
  {
    "label": "SendFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SendFlags"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Segment"
  },
  {
    "label": "SSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSegment"
  },
  {
    "label": "RSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RSegment"
  },
  {
    "label": "LockedFifoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LockedFifoBuffer"
  },
  {
    "label": "Shutdown",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Shutdown"
  },
  {
    "label": "OnTcpOpen()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_PSEUDO_TCP_H_ # define P2P_BASE_PSEUDO_TCP_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<memory> # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { class PseudoTcp ; class IPseudoTcpNotify { public : void)",
    "insertText": "OnTcpOpen(PseudoTcp* tcp)"
  },
  {
    "label": "OnTcpReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTcpReadable(PseudoTcp* tcp)"
  },
  {
    "label": "OnTcpWriteable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTcpWriteable(PseudoTcp* tcp)"
  },
  {
    "label": "OnTcpClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTcpClosed(PseudoTcp* tcp, uint32_t error)"
  },
  {
    "label": "TcpWritePacket()",
    "kind": "Method",
    "detail": "Function (enum WriteResult { WR_SUCCESS,WR_TOO_LARGE,WR_FAIL } ; WriteResult)",
    "insertText": "TcpWritePacket(PseudoTcp* tcp, const char* buffer, size_t len)"
  },
  {
    "label": "IPseudoTcpNotify()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "IPseudoTcpNotify()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (} } ; class RTC_EXPORT PseudoTcp { public : uint32_t)",
    "insertText": "Now()"
  },
  {
    "label": "PseudoTcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PseudoTcp(IPseudoTcpNotify* notify, uint32_t conv)"
  },
  {
    "label": "PseudoTcp()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PseudoTcp()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect()"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(char* buffer, size_t len)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const char* buffer, size_t len)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(bool force)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (enum TcpState { TCP_LISTEN,TCP_SYN_SENT,TCP_SYN_RECEIVED,TCP_ESTABLISHED,TCP_CLOSED } ; TcpState)",
    "insertText": "State()"
  },
  {
    "label": "NotifyClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyClock(uint32_t now)"
  },
  {
    "label": "NotifyPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyPacket(const char* buffer, size_t len)"
  },
  {
    "label": "GetNextClock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextClock(uint32_t now, long& timeout)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (enum Option { OPT_NODELAY,OPT_ACKDELAY,OPT_RCVBUF,OPT_SNDBUF,} ; void)",
    "insertText": "GetOption(Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(Option opt, int value)"
  },
  {
    "label": "GetCongestionWindow()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCongestionWindow()"
  },
  {
    "label": "GetBytesInFlight()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetBytesInFlight()"
  },
  {
    "label": "GetBytesBufferedNotSent()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetBytesBufferedNotSent()"
  },
  {
    "label": "GetRoundTripTimeEstimateMs()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRoundTripTimeEstimateMs()"
  },
  {
    "label": "SSegment()",
    "kind": "Method",
    "detail": "Function (protected : enum SendFlags { sfNone,sfDelayedAck,sfImmediateAck } ; struct Segment { uint32_t conv,seq,ack ; uint8_t flags ; uint16_t wnd ; const char* data ; uint32_t len ; uint32_t tsval,tsecr ; } ; struct SSegment {)",
    "insertText": "SSegment(uint32_t s, uint32_t l, bool c) : seq(s), len(l), xmit(0), bCtrl(c)"
  },
  {
    "label": "queue()",
    "kind": "Method",
    "detail": "Function (} uint32_t seq,len ; uint8_t xmit ; bool bCtrl ; } ; typedef std::list<SSegment> SList ; struct RSegment { uint32_t seq,len ; } ; uint32_t)",
    "insertText": "queue(const char* data, uint32_t len, bool bCtrl)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (IPseudoTcpNotify::WriteResult)",
    "insertText": "packet(uint32_t seq, uint8_t flags, uint32_t offset, uint32_t len)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(const uint8_t* buffer, uint32_t size)"
  },
  {
    "label": "attemptSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "attemptSend(SendFlags sflags = sfNone)"
  },
  {
    "label": "closedown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closedown(uint32_t err = 0)"
  },
  {
    "label": "clock_check()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "clock_check(uint32_t now, long& nTimeout)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "process(Segment& seg)"
  },
  {
    "label": "transmit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "transmit(const SList::iterator& seg, uint32_t now)"
  },
  {
    "label": "adjustMTU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adjustMTU()"
  },
  {
    "label": "isReceiveBufferFull()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "isReceiveBufferFull()"
  },
  {
    "label": "disableWindowScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disableWindowScale()"
  },
  {
    "label": "queueConnectMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "queueConnectMessage()"
  },
  {
    "label": "parseOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseOptions(const char* data, uint32_t len)"
  },
  {
    "label": "applyOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyOption(char kind, const char* data, uint32_t len)"
  },
  {
    "label": "applyWindowScaleOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyWindowScaleOption(uint8_t scale_factor)"
  },
  {
    "label": "resizeSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeSendBuffer(uint32_t new_size)"
  },
  {
    "label": "resizeReceiveBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeReceiveBuffer(uint32_t new_size)"
  },
  {
    "label": "LockedFifoBuffer()",
    "kind": "Method",
    "detail": "Function (class LockedFifoBuffer final { public :)",
    "insertText": "LockedFifoBuffer(size_t size)"
  },
  {
    "label": "LockedFifoBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LockedFifoBuffer()"
  },
  {
    "label": "GetBuffered()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBuffered()"
  },
  {
    "label": "SetCapacity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCapacity(size_t size)"
  },
  {
    "label": "ReadOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadOffset(void* buffer, size_t bytes, size_t offset, size_t* bytes_read)"
  },
  {
    "label": "WriteOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteOffset(const void* buffer, size_t bytes, size_t offset, size_t* bytes_written)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(void* buffer, size_t bytes, size_t* bytes_read)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(const void* buffer, size_t bytes, size_t* bytes_written)"
  },
  {
    "label": "ConsumeReadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeReadData(size_t size)"
  },
  {
    "label": "ConsumeWriteBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeWriteBuffer(size_t size)"
  },
  {
    "label": "GetWriteRemaining()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWriteRemaining(size_t* size)"
  },
  {
    "label": "ReadOffsetLocked()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ReadOffsetLocked(void* buffer, size_t bytes, size_t offset, size_t* bytes_read) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "WriteOffsetLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteOffsetLocked(const void* buffer, size_t bytes, size_t offset, size_t* bytes_written) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<char [ ]> buffer_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]