[
  {
    "label": "PseudoTcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PseudoTcp"
  },
  {
    "label": "IPseudoTcpNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPseudoTcpNotify"
  },
  {
    "label": "WriteResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WriteResult"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "TcpState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TcpState"
  },
  {
    "label": "Option",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Option"
  },
  {
    "label": "SendFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SendFlags"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Segment"
  },
  {
    "label": "SSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSegment"
  },
  {
    "label": "RSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RSegment"
  },
  {
    "label": "LockedFifoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LockedFifoBuffer"
  },
  {
    "label": "Shutdown",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Shutdown"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "Now()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Connect()"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(char* buffer, size_t len)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const char* buffer, size_t len)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(bool force)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "NotifyMTU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMTU(uint16_t mtu)"
  },
  {
    "label": "NotifyClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyClock(uint32_t now)"
  },
  {
    "label": "NotifyPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyPacket(const char* buffer, size_t len)"
  },
  {
    "label": "GetNextClock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextClock(uint32_t now, long& timeout)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOption(Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(Option opt, int value)"
  },
  {
    "label": "queue()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "queue(const char* data, uint32_t len, bool bCtrl)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (IPseudoTcpNotify::WriteResult)",
    "insertText": "packet(uint32_t seq,\n                                       uint8_t flags,\n                                       uint32_t offset,\n                                       uint32_t len)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(const uint8_t* buffer, uint32_t size)"
  },
  {
    "label": "attemptSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "attemptSend(SendFlags sflags = sfNone)"
  },
  {
    "label": "closedown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closedown(uint32_t err = 0)"
  },
  {
    "label": "clock_check()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "clock_check(uint32_t now, long& nTimeout)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "process(Segment& seg)"
  },
  {
    "label": "transmit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "transmit(const SList::iterator& seg, uint32_t now)"
  },
  {
    "label": "adjustMTU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adjustMTU()"
  },
  {
    "label": "disableWindowScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disableWindowScale()"
  },
  {
    "label": "queueConnectMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "queueConnectMessage()"
  },
  {
    "label": "parseOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseOptions(const char* data, uint32_t len)"
  },
  {
    "label": "applyOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyOption(char kind, const char* data, uint32_t len)"
  },
  {
    "label": "applyWindowScaleOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyWindowScaleOption(uint8_t scale_factor)"
  },
  {
    "label": "resizeSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeSendBuffer(uint32_t new_size)"
  },
  {
    "label": "resizeReceiveBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeReceiveBuffer(uint32_t new_size)"
  },
  {
    "label": "LockedFifoBuffer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LockedFifoBuffer(size_t size)"
  },
  {
    "label": "SetCapacity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCapacity(size_t size)"
  },
  {
    "label": "ReadOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadOffset(void* buffer,\n                    size_t bytes,\n                    size_t offset,\n                    size_t* bytes_read)"
  },
  {
    "label": "WriteOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteOffset(const void* buffer,\n                     size_t bytes,\n                     size_t offset,\n                     size_t* bytes_written)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(void* buffer, size_t bytes, size_t* bytes_read)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(const void* buffer, size_t bytes, size_t* bytes_written)"
  },
  {
    "label": "ConsumeReadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeReadData(size_t size)"
  },
  {
    "label": "ConsumeWriteBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeWriteBuffer(size_t size)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (buffer_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (buffer_length_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (data_length_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (read_position_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]