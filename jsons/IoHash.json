[
  {
    "label": "FCompositeBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeBuffer"
  },
  {
    "label": "TStringBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringBuilderBase"
  },
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "FIoHashBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoHashBuilder"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformString . h \" # include \" HAL / UnrealMemory . h \" # include \" Hash / Blake3 . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / MemoryView . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" String / BytesToHex . h \" # include \" String / HexToBytes . h \" class FCompositeBuffer ; template<CharType> class TStringBuilderBase ; struct FIoHash { public : using ByteArray = uint8 [ 2 0 ] ;)",
    "insertText": "FIoHash()"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoHash(const ByteArray& Hash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoHash(const FBlake3Hash& Hash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoHash(FAnsiStringView HexHash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoHash(FWideStringView HexHash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoHash(FUtf8StringView HexHash)"
  },
  {
    "label": "FromView()",
    "kind": "Method",
    "detail": "Function (FIoHash)",
    "insertText": "FromView(FMemoryView Hash)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "GetBytes()",
    "kind": "Method",
    "detail": "Function (ByteArray&)",
    "insertText": "GetBytes()"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "HashBuffer(const void* Data, uint64 Size)"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "HashBuffer(const FCompositeBuffer& Buffer)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (const FIoHash Zero ; private :)",
    "insertText": "alignas(uint32)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FIoHash& A, const FIoHash& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FIoHash& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoHash& InHash)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(InHash.GetBytes(), sizeof(decltype(InHash.GetBytes())))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Hash, InHash, sizeof(ByteArray))"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoHash(const FBlake3Hash& InHash)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Hash, InHash.GetBytes(), sizeof(ByteArray))"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoHash(const FAnsiStringView HexHash)"
  },
  {
    "label": "HexToBytes()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "HexToBytes(HexHash, Hash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoHash(const FWideStringView HexHash)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoHash(const FUtf8StringView HexHash)"
  },
  {
    "label": "FromView()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "FromView(const FMemoryView InHash)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (FIoHash NewHash ;)",
    "insertText": "Memcpy(NewHash.Hash, InHash.GetData(), sizeof(ByteArray))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using UInt32Array = uint32 [ 5 ] ;)",
    "insertText": "static_assert(sizeof(UInt32Array) == sizeof(ByteArray), \"Invalid size for UInt32Array\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FIoHash& Hash)"
  },
  {
    "label": "BytesToHexLower()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "BytesToHexLower(Hash.GetBytes(), Builder)"
  },
  {
    "label": "FIoHash()",
    "kind": "Method",
    "detail": "Function (OutHash =)",
    "insertText": "FIoHash(Buffer)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FString)",
    "insertText": "LexToString(const FIoHash& Hash)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (class FIoHashBuilder : public FBlake3 { public : [ [ nodiscard ] ] FIoHash)",
    "insertText": "Finalize()"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FIoHash)",
    "insertText": "HashBuffer(FMemoryView View)"
  }
]