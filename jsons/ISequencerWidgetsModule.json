[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimeRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeRangeArgs"
  },
  {
    "label": "ISequencerWidgetsModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerWidgetsModule"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" ITimeSlider . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Modules / ModuleInterface . h \" # include \" Misc / QualifiedFrameTime . h \" enum class EShowRange { None = 0,WorkingRange = 1<<0,ViewRange = 1<<1,PlaybackRange = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShowRange)"
  },
  {
    "label": "FTimeRangeArgs()",
    "kind": "Method",
    "detail": "Function (struct FTimeRangeArgs {)",
    "insertText": "FTimeRangeArgs(EShowRange InShowRanges, TSharedRef<ITimeSliderController> InController, TAttribute<EVisibility> InVisibilityDelegate, TSharedRef<INumericTypeInterface<double>> InNumericTypeInterface ) : ShowRanges(InShowRanges) , EnableRanges(InShowRanges) , Controller(InController) , VisibilityDelegate(InVisibilityDelegate) , NumericTypeInterface(InNumericTypeInterface)"
  },
  {
    "label": "FTimeRangeArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimeRangeArgs(EShowRange InShowRanges, EShowRange InEnableRanges, TSharedRef<ITimeSliderController> InController, TAttribute<EVisibility> InVisibilityDelegate, TSharedRef<INumericTypeInterface<double>> InNumericTypeInterface ) : ShowRanges(InShowRanges) , EnableRanges(InEnableRanges) , Controller(InController) , VisibilityDelegate(InVisibilityDelegate) , NumericTypeInterface(InNumericTypeInterface)"
  },
  {
    "label": "CreateTimeSlider()",
    "kind": "Method",
    "detail": "Function (} EShowRange ShowRanges ; EShowRange EnableRanges ; TSharedRef<ITimeSliderController> Controller ; TAttribute<EVisibility> VisibilityDelegate ; TSharedRef<INumericTypeInterface<double>> NumericTypeInterface ; } ; class ISequencerWidgetsModule : public IModuleInterface { public : TSharedRef<ITimeSlider>)",
    "insertText": "CreateTimeSlider(const TSharedRef<ITimeSliderController>& InController, bool bMirrorLabels)"
  },
  {
    "label": "CreateTimeSlider()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITimeSlider>)",
    "insertText": "CreateTimeSlider(const TSharedRef<ITimeSliderController>& InController, const TAttribute<EVisibility>& VisibilityDelegate, bool bMirrorLabels)"
  },
  {
    "label": "CreateTimeRangeSlider()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTimeRangeSlider(const TSharedRef<class ITimeSliderController>& InController)"
  },
  {
    "label": "CreateTimeRange()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITimeSlider>)",
    "insertText": "CreateTimeRange(const FTimeRangeArgs& InArgs, const TSharedRef<SWidget>& Content)"
  }
]