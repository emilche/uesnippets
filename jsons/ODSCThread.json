[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FMaterialShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapId"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "ICookOnTheFlyServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServerConnection"
  },
  {
    "label": "FCookOnTheFlyMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyMessage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FODSCMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCMessageHandler"
  },
  {
    "label": "FODSCThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCThread"
  },
  {
    "label": "FODSCShaderId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCShaderId"
  },
  {
    "label": "FODSCShaderMapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCShaderMapData"
  },
  {
    "label": "FODSCMessageHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Runnable . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" Containers / Queue . h \" # include \" ShaderCompiler . h \" # include \" RHIDefinitions . h \" class FEvent ; class FRunnableThread ; class FMaterialShaderMap ; class FMaterialShaderMapId ; class FPrimitiveSceneInfo ; namespace UE { namespace Cook { class ICookOnTheFlyServerConnection ; class FCookOnTheFlyMessage ; } } enum class EODSCMetaDataType { Default = 0,IsDependentOnMaterialName,IsNotDependentOnMaterialName,} ; class FODSCMessageHandler : public IPlatformFile::IFileServerMessageHandler { public :)",
    "insertText": "FODSCMessageHandler(EShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type InQualityLevel, ODSCRecompileCommand InRecompileCommandType)"
  },
  {
    "label": "FODSCMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FODSCMessageHandler(const TArray<FString>& InMaterials, const FString& ShaderTypesToLoad, EShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type InQualityLevel, ODSCRecompileCommand InRecompileCommandType)"
  },
  {
    "label": "FillPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPayload(FArchive& Payload)"
  },
  {
    "label": "ProcessResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessResponse(FArchive& Response)"
  },
  {
    "label": "AddPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayload(const FODSCRequestPayload& Payload)"
  },
  {
    "label": "GetMaterialsToLoad()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetMaterialsToLoad()"
  },
  {
    "label": "GetMeshMaterialMaps()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetMeshMaterialMaps()"
  },
  {
    "label": "GetGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetGlobalShaderMap()"
  },
  {
    "label": "ReloadGlobalShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReloadGlobalShaders()"
  },
  {
    "label": "GetRecompileCommandType()",
    "kind": "Method",
    "detail": "Function (ODSCRecompileCommand)",
    "insertText": "GetRecompileCommandType()"
  },
  {
    "label": "FODSCThread()",
    "kind": "Method",
    "detail": "Function (} private : double RequestStartTime = 0 . 0 ; TArray<FString> MaterialsToLoad ; FString ShaderTypesToLoad ; EShaderPlatform ShaderPlatform ; ERHIFeatureLevel::Type FeatureLevel ; EMaterialQualityLevel::Type QualityLevel ; ODSCRecompileCommand RecompileCommandType = ODSCRecompileCommand::None ; TArray<FODSCRequestPayload> RequestBatch ; TArray<uint8> OutMeshMaterialMaps ; TArray<uint8> OutGlobalShaderMap ; } ; class FODSCThread : FRunnable,FSingleThreadRunnable { public :)",
    "insertText": "FODSCThread(const FString& HostIP)"
  },
  {
    "label": "FODSCThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FODSCThread()"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartThread()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(const TArray<FString>& MaterialsToCompile, const FString& ShaderTypesToLoad, EShaderPlatform ShaderPlatform, ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, ODSCRecompileCommand RecompileCommandType)"
  },
  {
    "label": "AddShaderPipelineRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderPipelineRequest(EShaderPlatform ShaderPlatform, ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, const FMaterial* Material, const FPrimitiveSceneInfo* PrimitiveSceneInfo, const FString& VertexFactoryName, const FString& PipelineName, const TArray<FString>& ShaderTypeNames, int32 PermutationId, const TArray<FShaderId>& RequestShaderIds)"
  },
  {
    "label": "GetCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompletedRequests(TArray<FODSCMessageHandler*>& OutCompletedRequests)"
  },
  {
    "label": "Wakeup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wakeup()"
  },
  {
    "label": "WaitUntilAllRequestsDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilAllRequestsDone()"
  },
  {
    "label": "GetPendingShaderData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPendingShaderData(bool& bOutIsConnectedToODSCServer, bool& bOutHasPendingGlobalShaders, uint32& OutNumPendingMaterialsRecompile, uint32& OutNumPendingMaterialsShaders)"
  },
  {
    "label": "ResetMaterialsODSCData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaterialsODSCData(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "CheckIfRequestAlreadySent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfRequestAlreadySent(const TArray<FShaderId>& RequestShaderIds, const FMaterial* Material)"
  },
  {
    "label": "GetODSCHostIP()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetODSCHostIP()"
  },
  {
    "label": "RegisterMaterialShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMaterialShaderMaps(const FString& MaterialName, const TArray<TRefCountPtr<FMaterialShaderMap>>& LoadedShaderMaps)"
  },
  {
    "label": "FindMaterialShaderMap()",
    "kind": "Method",
    "detail": "Function (FMaterialShaderMap*)",
    "insertText": "FindMaterialShaderMap(const FString& MaterialName, const FMaterialShaderMapId& ShaderMapId)"
  },
  {
    "label": "RetrieveMissedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveMissedMaterials(TArray<FString>& OutMaterialPaths)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (FThreadSafeCounter ExitRequest ; private : void)",
    "insertText": "Process()"
  },
  {
    "label": "ConnectToODSCHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectToODSCHost()"
  },
  {
    "label": "CheckODSCConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckODSCConnection()"
  },
  {
    "label": "FODSCShaderId()",
    "kind": "Method",
    "detail": "Function (TQueue<FODSCMessageHandler*,EQueueMode::Mpsc> PendingMaterialThreadedRequests ; TQueue<FODSCRequestPayload,EQueueMode::Mpsc> PendingMeshMaterialThreadedRequests ; TQueue<FODSCMessageHandler*,EQueueMode::Spsc> CompletedThreadedRequests ; FRWLock RequestHashesRWLock ; FCriticalSection RequestHashCriticalSection ; struct FODSCShaderId { public :)",
    "insertText": "FODSCShaderId()"
  },
  {
    "label": "FODSCShaderId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FODSCShaderId(const FShaderId& ShaderId)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (FHashedName ShaderTypeHashedName = 0 ; FHashedName VFTypeHashedName = 0 ; FHashedName ShaderPipelineName = 0 ; int32 PermutationId = 0 ; uint32 Platform : SP_NumBits = SP_NumPlatforms ; uint32)",
    "insertText": "GetTypeHash(const FODSCShaderId& Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FODSCShaderId& X, const FODSCShaderId& Y)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FODSCShaderMapData { TArray<TRefCountPtr<FMaterialShaderMap>> MaterialShaderMaps ; TSet<FODSCShaderId> CurrentRequests ; FName ActorPath ; } ; TMap<FName,FODSCShaderMapData> RequestHashes ; TMap<UPTRINT,FName> ODSCPointerToNames ; FRunnableThread* Thread = nullptr ; FEvent* WakeupEvent ; FEvent* AllRequestsDoneEvent ; bool)",
    "insertText": "SendMessageToServer(IPlatformFile::IFileServerMessageHandler* Handler)"
  }
]