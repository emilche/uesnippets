[
  {
    "label": "frame_contexts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "frame_contexts"
  },
  {
    "label": "VP8Common",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP8Common"
  },
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "postproc_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "postproc_state"
  },
  {
    "label": "QINDEX_RANGE()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_COMMON_ONYXC_INT_H_ # define VPX_VP8_COMMON_ONYXC_INT_H_ # include \" vpx_config . h \" # include \" vp8_rtcd . h \" # include \" vpx / internal / vpx_codec_internal . h \" # include \" loopfilter . h \" # include \" entropymv . h \" # include \" entropy . h \" # if CONFIG_POSTPROC # include \" postproc . h \" # endif # include \" header . h \" # ifdef __cplusplus \" C \" { # endif # define MINQ 0 # define MAXQ 1 2 7 # define)",
    "insertText": "QINDEX_RANGE(MAXQ + 1)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (vp8_prob bmode_prob [ VP8_BINTRAMODES - 1 ] ; vp8_prob ymode_prob [ VP8_YMODES - 1 ] ; vp8_prob uv_mode_prob [ VP8_UV_MODES - 1 ] ; vp8_prob sub_mv_ref_prob [ VP8_SUBMVREFS - 1 ] ; vp8_prob coef_probs [ BLOCK_TYPES ] [ COEF_BANDS ] [ PREV_COEF_CONTEXTS ] [ ENTROPY_NODES ] ; MV_CONTEXT mvc [ 2 ] ; } FRAME_CONTEXT ; typedef enum { ONE_PARTITION = 0,TWO_PARTITION = 1,FOUR_PARTITION = 2,EIGHT_PARTITION = 3 } TOKEN_PARTITION ; typedef enum { RECON_CLAMP_REQUIRED = 0,RECON_CLAMP_NOTREQUIRED = 1 } CLAMP_TYPE ; typedef struct VP8Common { struct vpx_internal_error_info error ;)",
    "insertText": "DECLARE_ALIGNED(16, short, Y1dequant[QINDEX_RANGE][2])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, short, Y2dequant[QINDEX_RANGE][2])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, short, UVdequant[QINDEX_RANGE][2])"
  }
]