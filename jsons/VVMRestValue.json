[
  {
    "label": "VFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFrame"
  },
  {
    "label": "VRestValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VRestValue"
  },
  {
    "label": "VValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VValue"
  },
  {
    "label": "VArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VArray"
  },
  {
    "label": "VObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VObject"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "VRestValue()",
    "kind": "Method",
    "detail": "Function (struct VFrame ; struct VRestValue {)",
    "insertText": "VRestValue(const VRestValue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VRestValue&)",
    "insertText": "operator(const VRestValue&)"
  },
  {
    "label": "VRestValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VRestValue(uint16 SplitDepth)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(SplitDepth)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(uint16 SplitDepth)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonCellNorPlaceholder(VValue::Root(SplitDepth))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FAccessContext Context, VValue NewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Set(Context, NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransactionally(FAccessContext Context, VCell* Owner, VValue NewValue)"
  },
  {
    "label": "SetTransactionally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransactionally(FAccessContext Context, UObject* Owner, VValue NewValue)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonCellNorPlaceholder(VValue NewValue)"
  },
  {
    "label": "SetNonCellNorPlaceholder()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "SetNonCellNorPlaceholder(NewValue)"
  },
  {
    "label": "CanDefQuickly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDefQuickly()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "Get(FAllocationContext Context)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const VRestValue& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<TVisitor> void)",
    "insertText": "Visit(TVisitor& Visitor, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(Value, ElementName)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(VRestValue RestValue)"
  },
  {
    "label": "VRestValue()",
    "kind": "Method",
    "detail": "Function (private : TWriteBarrier<VValue> Value ;)",
    "insertText": "VRestValue()"
  }
]