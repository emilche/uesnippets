[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ParameterEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterEntry"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Connection"
  },
  {
    "label": "MaterialFlatten",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaterialFlatten"
  },
  {
    "label": "MaterialFlatten()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcMaterial_MaterialFlatten_h # define Alembic_AbcMaterial_MaterialFlatten_h # include<Alembic / Util / Export . h> # include<Alembic / AbcMaterial / IMaterial . h> namespace Alembic { namespace AbcMaterial { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT MaterialFlatten { public :)",
    "insertText": "MaterialFlatten()"
  },
  {
    "label": "MaterialFlatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaterialFlatten(IMaterialSchema iMaterialSchema)"
  },
  {
    "label": "MaterialFlatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaterialFlatten(IMaterial iMaterialObject)"
  },
  {
    "label": "MaterialFlatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaterialFlatten(Abc::IObject iObject, Abc::IArchive iAlternateSearchArchive=Abc::IArchive())"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(IMaterialSchema iMaterialSchema)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(IMaterial iMaterialObject)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "getTargetNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTargetNames(std::vector<std::string> & oTargetNames)"
  },
  {
    "label": "getShaderTypesForTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getShaderTypesForTarget(const std::string & iTargetName, std::vector<std::string> & oShaderTypeNames)"
  },
  {
    "label": "getShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getShader(const std::string & iTarget, const std::string & iShaderType, std::string & oResult)"
  },
  {
    "label": "ParameterEntry()",
    "kind": "Method",
    "detail": "Function (struct ParameterEntry {)",
    "insertText": "ParameterEntry() : header(0)"
  },
  {
    "label": "ParameterEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ParameterEntry(const std::string & iName, Abc::ICompoundProperty iParent, const AbcCoreAbstract::PropertyHeader * iHeader ) : name(iName) , parent(iParent) , header(iHeader)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ParameterEntry &iRhs)"
  },
  {
    "label": "getNetworkTerminalTargetNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNetworkTerminalTargetNames(std::vector<std::string> & iTargetNames)"
  },
  {
    "label": "getNetworkTerminalShaderTypesForTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNetworkTerminalShaderTypesForTarget(const std::string & iTargetName, std::vector<std::string> & oShaderTypeNames)"
  },
  {
    "label": "getNetworkTerminal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getNetworkTerminal(const std::string & iTarget, const std::string & iShaderType, std::string & oNodeName, std::string & oOutputName)"
  },
  {
    "label": "NetworkNode()",
    "kind": "Method",
    "detail": "Function (typedef std::map<std::string,std::string> StringMap ; typedef Alembic::Util::shared_ptr<StringMap> StringMapPtr ; typedef std::vector<IMaterialSchema> SchemaVector ; class ALEMBIC_EXPORT NetworkNode { public :)",
    "insertText": "NetworkNode()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "valid()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getName()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getTarget(std::string & oResult)"
  },
  {
    "label": "getNodeType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getNodeType(std::string & oResult)"
  },
  {
    "label": "getParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getParameters(ParameterEntryVector & oResult)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (struct Connection {)",
    "insertText": "Connection(const std::string & iInputName, const std::string & iConnectedNodeName, const std::string & iConnectedOutputName ) : inputName( iInputName ) , connectedNodeName( iConnectedNodeName ) , connectedOutputName( iConnectedOutputName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Connection & iRhs)"
  },
  {
    "label": "NetworkNode()",
    "kind": "Method",
    "detail": "Function (private : class MaterialFlatten ;)",
    "insertText": "NetworkNode(const std::string & iName, SchemaVector & iSchemas, StringMapPtr iInterfaceMappings)"
  },
  {
    "label": "getNumNetworkNodes()",
    "kind": "Method",
    "detail": "Function (std::string m_name ; std::vector<IMaterialSchema::NetworkNode> m_nodes ; std::vector<Abc::ICompoundProperty> m_networkParameters ; StringMapPtr m_interfaceMappings ; } ; size_t)",
    "insertText": "getNumNetworkNodes()"
  },
  {
    "label": "getNetworkNode()",
    "kind": "Method",
    "detail": "Function (NetworkNode)",
    "insertText": "getNetworkNode(size_t iIndex)"
  },
  {
    "label": "getNetworkNode()",
    "kind": "Method",
    "detail": "Function (NetworkNode)",
    "insertText": "getNetworkNode(const std::string & iNodeName)"
  },
  {
    "label": "flattenNetwork()",
    "kind": "Method",
    "detail": "Function (private : SchemaVector m_schemas ; void)",
    "insertText": "flattenNetwork()"
  }
]