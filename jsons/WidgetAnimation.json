[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "UWidgetAnimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetAnimation"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" MovieSceneSequence . h \" # include \" Animation / WidgetAnimationBinding . h \" # include \" Animation / WidgetAnimationEvents . h \" # include \" WidgetAnimation . generated . h \" class UMovieScene ; class UUserWidget ; # if WITH_EDITOR struct FSlateBrush ; # endif)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: #if WITH_EDITOR static UMG_API UWidgetAnimation* GetNullAnimation()"
  },
  {
    "label": "GetDisplayLabel()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDisplayLabel()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "BindPossessableObject()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BindPossessableObject(const FGuid& ObjectId, UObject& PossessedObject, UObject* Context)"
  },
  {
    "label": "CanPossessObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPossessObject(UObject& Object, UObject* InPlaybackContext)"
  },
  {
    "label": "GetMovieScene()",
    "kind": "Method",
    "detail": "Function (UMovieScene*)",
    "insertText": "GetMovieScene()"
  },
  {
    "label": "GetParentObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetParentObject(UObject* Object)"
  },
  {
    "label": "UnbindPossessableObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindPossessableObjects(const FGuid& ObjectId)"
  },
  {
    "label": "UnbindObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindObjects(const FGuid& ObjectId, const TArray<UObject*>& InObjects, UObject* InContext)"
  },
  {
    "label": "UnbindInvalidObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnbindInvalidObjects(const FGuid& ObjectId, UObject* InContext)"
  },
  {
    "label": "LocateBoundObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LocateBoundObjects(const FGuid& ObjectId, const UE::UniversalObjectLocator::FResolveParams& ResolveParams, TSharedPtr<const FSharedPlaybackState> SharedPlaybackState, TArray<UObject*, TInlineAllocator<1>>& OutObjects)"
  },
  {
    "label": "CreateDirectorInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateDirectorInstance(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "IterateDynamicBindings()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "IterateDynamicBindings(TFunction<void(const FGuid&, FMovieSceneDynamicBinding&)> InCallback)"
  },
  {
    "label": "IsTrackSupportedImpl()",
    "kind": "Method",
    "detail": "Function (ETrackSupport)",
    "insertText": "IsTrackSupportedImpl(TSubclassOf<class UMovieSceneTrack> InTrackClass)"
  },
  {
    "label": "GetCustomBrushForBinding()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCustomBrushForBinding(FGuid BindingID)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FFixupWidgetDynamicBindingsEvent, UWidgetAnimation*)"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (FFixupWidgetDynamicBindingsEvent FixupWidgetDynamicBindingsEvent ; # endif bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "GetBindings()",
    "kind": "Method",
    "detail": "Function (const TArray<FWidgetAnimationBinding>&)",
    "insertText": "GetBindings()"
  },
  {
    "label": "RemoveBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBinding(const FWidgetAnimationBinding& Binding)"
  },
  {
    "label": "GetLegacyFinishOnStop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLegacyFinishOnStop()"
  }
]