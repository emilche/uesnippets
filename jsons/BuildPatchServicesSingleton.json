[
  {
    "label": "FBuildPatchServices",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPatchServices"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuildPatchSettings . h \" # include \" CoreMinimal . h \" # include \" Interfaces / IBuildPatchServicesModule . h \" # include \" Modules / ModuleManager . h \" # include \" UObject / NameTypes . h \" class FBuildPatchServices { public : bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} IBuildPatchServicesModule&)",
    "insertText": "Get()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (} const BuildPatchServices::FBuildPatchServicesInitSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ModuleName = Value ; InitSettings = BuildPatchServicesInitSettings ;)",
    "insertText": "Get().LoadModuleChecked<IBuildPatchServicesModule>(ModuleName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnloadModule(ModuleName)"
  }
]