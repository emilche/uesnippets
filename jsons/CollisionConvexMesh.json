[
  {
    "label": "FConvexBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexBuilder"
  },
  {
    "label": "EBuildMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBuildMethod"
  },
  {
    "label": "Params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Params"
  },
  {
    "label": "FMemPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemPool"
  },
  {
    "label": "FHalfEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHalfEdge"
  },
  {
    "label": "FConvexFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexFace"
  },
  {
    "label": "FHalfEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHalfEdge"
  },
  {
    "label": "FMemPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemPool"
  },
  {
    "label": "TPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPair"
  },
  {
    "label": "FPointSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointSegment"
  },
  {
    "label": "DefaultHorizonEpsilon()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultHorizonEpsilon()"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (FVec3Type)",
    "insertText": "Normal(0)"
  },
  {
    "label": "IsValidTriangle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValidTriangle(A, B, C, Normal)"
  },
  {
    "label": "TriPlane()",
    "kind": "Method",
    "detail": "Function (UE::Math::TPlane<FRealType>)",
    "insertText": "TriPlane(A, B, C)"
  },
  {
    "label": "TriPlane()",
    "kind": "Method",
    "detail": "Function (UE::Math::TPlane<FRealType>)",
    "insertText": "TriPlane(InVertices[0], InVertices[1], InVertices[2])"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(const TArray<FVec3Type>& InVertices, TArray<FPlaneType>& OutPlanes, TArray<TArray<int32>>& OutFaceIndices, TArray<FVec3Type>& OutVertices, FAABB3Type& OutLocalBounds, EBuildMethod BuildMethod = EBuildMethod::Default)"
  },
  {
    "label": "UseConvexHull3()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseConvexHull3(EBuildMethod BuildMethod)"
  },
  {
    "label": "UseConvexHull3Simplifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseConvexHull3Simplifier(EBuildMethod BuildMethod)"
  },
  {
    "label": "BuildIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildIndices(const TArray<FVec3Type>& InVertices, TArray<int32>& OutResultIndexData, EBuildMethod BuildMethod = EBuildMethod::Default)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3Type>)",
    "insertText": "Vertices(InOutVertices)"
  },
  {
    "label": "Segment0()",
    "kind": "Method",
    "detail": "Function (FVec3Type)",
    "insertText": "Segment0(Point1 - Point0)"
  },
  {
    "label": "Segment1()",
    "kind": "Method",
    "detail": "Function (FVec3Type)",
    "insertText": "Segment1(Point2 - Point1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (them)",
    "insertText": "for(int32 PlaneIndex0 = 0; PlaneIndex0 < InOutPlanes.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (first)",
    "insertText": "for(int32 VertexIndex1 = 0; VertexIndex1 < Vertices1.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (edges)",
    "insertText": "for(int32 PlaneIndex0 = 0; PlaneIndex0 < InOutPlanes.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (faces)",
    "insertText": "for(int32 PlaneIndex0 = 0; PlaneIndex0 < InOutFaceVertexIndices.Num()"
  },
  {
    "label": "Centroid()",
    "kind": "Method",
    "detail": "Function (FVec3Type)",
    "insertText": "Centroid(0)"
  },
  {
    "label": "MakeTwins()",
    "kind": "Method",
    "detail": "Function (faces)",
    "insertText": "MakeTwins(Edges[0], Faces[1]->FirstEdge)"
  },
  {
    "label": "StealConflictList()",
    "kind": "Method",
    "detail": "Function (list)",
    "insertText": "StealConflictList(Pool, InVertices, DummyHalfEdge->Next, Faces, 4)"
  },
  {
    "label": "SetIt()",
    "kind": "Method",
    "detail": "Function (TConstIterator)",
    "insertText": "SetIt(Processed)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (a)",
    "insertText": "check()"
  }
]