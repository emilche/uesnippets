[
  {
    "label": "CoffType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoffType"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "TypeMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeMap"
  },
  {
    "label": "GetCoffType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_PointerUtil . h \" # include \" LC_Platform . h \" # include<inttypes . h> # include \" Windows / WindowsHWrapper . h \" namespace coffDetail { struct CoffType { enum Enum { COFF,BIGOBJ,IMPORT_LIBRARY,UNKNOWN } ; template<Enum> struct TypeMap { } ; template<> struct TypeMap<Enum::COFF> { typedef IMAGE_FILE_HEADER HeaderType ; typedef IMAGE_SYMBOL SymbolType ; typedef IMAGE_AUX_SYMBOL AuxSymbolType ; } ; template<> struct TypeMap<Enum::BIGOBJ> { typedef ANON_OBJECT_HEADER_BIGOBJ HeaderType ; typedef IMAGE_SYMBOL_EX SymbolType ; typedef IMAGE_AUX_SYMBOL_EX AuxSymbolType ; } ; } ; CoffType::Enum)",
    "insertText": "GetCoffType(const void* imageBase)"
  },
  {
    "label": "GetRelocationCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetRelocationCount(const void* imageBase, const IMAGE_SECTION_HEADER* section)"
  },
  {
    "label": "GetSectionIndex()",
    "kind": "Method",
    "detail": "Function (template<SymbolType> uint32_t)",
    "insertText": "GetSectionIndex(const SymbolType* symbol)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef std::make_unsigned<)",
    "insertText": "decltype(symbol->SectionNumber)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t sectionIndex = static_cast<)",
    "insertText": "uint32_t(static_cast<UnsignedSectionNumberType>(symbol->SectionNumber) - 1u)"
  },
  {
    "label": "GetAssociatedComdatSectionIndex()",
    "kind": "Method",
    "detail": "Function (template<> uint32_t)",
    "insertText": "GetAssociatedComdatSectionIndex(const IMAGE_AUX_SYMBOL* symbol)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef std::make_unsigned<)",
    "insertText": "decltype(symbol->Section.Number)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t sectionIndex = static_cast<)",
    "insertText": "uint32_t(static_cast<UnsignedSectionNumberType>(symbol->Section.Number) - 1u)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef std::make_unsigned<)",
    "insertText": "decltype(symbol->Section.HighNumber)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t highSectionIndex = static_cast<)",
    "insertText": "uint32_t(static_cast<UnsignedHighSectionNumberType>(symbol->Section.HighNumber))"
  },
  {
    "label": "IsFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> bool)",
    "insertText": "IsFunctionSymbol(const SymbolType* symbol)"
  },
  {
    "label": "IsUndefinedSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> bool)",
    "insertText": "IsUndefinedSymbol(const SymbolType* symbol)"
  },
  {
    "label": "IsAbsoluteSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> bool)",
    "insertText": "IsAbsoluteSymbol(const SymbolType* symbol)"
  },
  {
    "label": "IsDebugSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> bool)",
    "insertText": "IsDebugSymbol(const SymbolType* symbol)"
  },
  {
    "label": "IsSectionSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> bool)",
    "insertText": "IsSectionSymbol(const SymbolType* symbol)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if LC_64_BIT)",
    "insertText": "return(relocation->Type == IMAGE_REL_AMD64_SECTION)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(relocation->Type == IMAGE_REL_I386_SECTION)"
  },
  {
    "label": "IsDiscardableSection()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "IsDiscardableSection(const IMAGE_SECTION_HEADER* section)"
  },
  {
    "label": "IsPartOfImage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPartOfImage(const IMAGE_SECTION_HEADER* section)"
  },
  {
    "label": "IsComdatSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComdatSection(const IMAGE_SECTION_HEADER* section)"
  },
  {
    "label": "IsDirectiveSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirectiveSection(const IMAGE_SECTION_HEADER* section)"
  },
  {
    "label": "IsCodeSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCodeSection(uint32_t characteristics)"
  },
  {
    "label": "IsReadSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadSection(uint32_t characteristics)"
  },
  {
    "label": "IsWriteSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWriteSection(uint32_t characteristics)"
  },
  {
    "label": "GetNumberOfSections()",
    "kind": "Method",
    "detail": "Function (} template<HeaderType> uint32_t)",
    "insertText": "GetNumberOfSections(const void* imageBase)"
  },
  {
    "label": "HeaderType()",
    "kind": "Method",
    "detail": "Function (const HeaderType* header = pointer::As<const)",
    "insertText": "HeaderType(imageBase)"
  },
  {
    "label": "GetSymbolTable()",
    "kind": "Method",
    "detail": "Function (} template<HeaderType> const void*)",
    "insertText": "GetSymbolTable(const void* imageBase)"
  },
  {
    "label": "GetStringTable()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> const char*)",
    "insertText": "GetStringTable(const void* symbolTable, uint32_t symbolCount)"
  },
  {
    "label": "GetSymbol()",
    "kind": "Method",
    "detail": "Function (} template<SymbolType> const SymbolType*)",
    "insertText": "GetSymbol(const void* symbolTable, size_t index)"
  },
  {
    "label": "GetArchiveMemberSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetArchiveMemberSize(const IMAGE_ARCHIVE_MEMBER_HEADER* header)"
  },
  {
    "label": "sscanf_s()",
    "kind": "Method",
    "detail": "Function (uint32_t size = 0 u ;)",
    "insertText": "sscanf_s(reinterpret_cast<const char*>(header->Size), \"%\" SCNu32, &size)"
  }
]