[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "FFilterVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterVertex"
  },
  {
    "label": "FFilterVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterVertexDeclaration"
  },
  {
    "label": "FEmptyVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmptyVertexDeclaration"
  },
  {
    "label": "FScreenRectangleVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenRectangleVertexBuffer"
  },
  {
    "label": "FScreenRectangleIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenRectangleIndexBuffer"
  },
  {
    "label": "FScreenVertexShaderVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenVertexShaderVS"
  },
  {
    "label": "FInstancedScreenVertexShaderVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstancedScreenVertexShaderVS"
  },
  {
    "label": "FMobileMultiViewVertexShaderVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileMultiViewVertexShaderVS"
  },
  {
    "label": "FCopyRectPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyRectPS"
  },
  {
    "label": "FCopyRectSrvPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyRectSrvPS"
  },
  {
    "label": "FImagePreTransformVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImagePreTransformVS"
  },
  {
    "label": "FFilterVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GlobalShader . h \" # include \" HAL / Platform . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" PipelineStateCache . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" RenderResource . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderParameterMacros . h \" # include \" ShaderParameterStruct . h \" # include \" Templates / UnrealTemplate . h \" # include \" DataDrivenShaderPlatformInfo . h \" class FPointerTableBase ; class FRDGTexture ; struct FFilterVertex { public : FVector4f Position ; FVector2f UV ; } ; class FFilterVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ; ~)",
    "insertText": "FFilterVertexDeclaration()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationElementList Elements ; uint16 Stride =)",
    "insertText": "sizeof(FFilterVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FVertexElement(0, STRUCT_OFFSET(FFilterVertex, Position), VET_Float4, 0, Stride))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FVertexElement(0, STRUCT_OFFSET(FFilterVertex, UV), VET_Float2, 1, Stride))"
  },
  {
    "label": "GetOrCreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (VertexDeclarationRHI =)",
    "insertText": "GetOrCreateVertexDeclaration(Elements)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (VertexDeclarationRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "FEmptyVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} } ; TGlobalResource<FFilterVertexDeclaration,FRenderResource::EInitPhase::Pre> GFilterVertexDeclaration ; class FEmptyVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ; ~)",
    "insertText": "FEmptyVertexDeclaration()"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FScreenRectangleIndexBuffer,FRenderResource::EInitPhase::Pre> GScreenRectangleIndexBuffer ; class FScreenVertexShaderVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FScreenVertexShaderVS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FScreenVertexShaderVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FInstancedScreenVertexShaderVS : public FScreenVertexShaderVS {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FInstancedScreenVertexShaderVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FInstancedScreenVertexShaderVS, FScreenVertexShaderVS)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SCREEN_VS_FOR_INSTANCED_VIEWS\"), 1)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FMobileMultiViewVertexShaderVS : public FScreenVertexShaderVS {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FMobileMultiViewVertexShaderVS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FMobileMultiViewVertexShaderVS, FScreenVertexShaderVS)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SCREEN_VS_FOR_MOBILE_MULTI_VIEW\"), 1)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FCopyRectPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FCopyRectPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FCopyRectPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, InputTexture) SHADER_PARAMETER_SAMPLER(SamplerState, InputSampler) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FCopyRectSrvPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FCopyRectSrvPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FCopyRectSrvPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_TEXTURE_SRV(Texture2D, InputTexture) SHADER_PARAMETER_SAMPLER(SamplerState, InputSampler) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FImagePreTransformVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FImagePreTransformVS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FImagePreTransformVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(FVector4f, PreTransform) END_SHADER_PARAMETER_STRUCT()"
  }
]