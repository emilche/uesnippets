[
  {
    "label": "FUniqueRequestList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueRequestList"
  },
  {
    "label": "FLoadRequestFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadRequestFlags"
  },
  {
    "label": "FPriorityAndIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPriorityAndIndex"
  },
  {
    "label": "FMappingRequest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / HashTable . h \" # include \" VirtualTexturing . h \" # include \" VirtualTextureSystem . h \" # include \" VirtualTextureProducer . h \" # include \" VirtualTexturePhysicalSpace . h \" union FMappingRequest {)",
    "insertText": "FMappingRequest()"
  },
  {
    "label": "FMappingRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMappingRequest(uint16 InLoadIndex, uint8 InPhysicalGroupIndex, uint8 InSpaceID, uint8 InPageTableLayerIndex, uint32 InMaxLevel, uint32 InAddress, uint8 InLevel, uint8 InLocalLevel) : vAddress(InAddress), vLevel(InLevel), SpaceID(InSpaceID), LoadRequestIndex(InLoadIndex), Local_vLevel(InLocalLevel), ProducerPhysicalGroupIndex(InPhysicalGroupIndex), PageTableLayerIndex(InPageTableLayerIndex), MaxLevel(InMaxLevel)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint64 PackedValue ; struct { uint32 vAddress : 2 4 ; uint32 vLevel : 4 ; uint32 SpaceID : 4 ; uint32 LoadRequestIndex : 1 6 ; uint32 Local_vLevel : 4 ; uint32 ProducerPhysicalGroupIndex : 4 ; uint32 PageTableLayerIndex : 4 ; uint32 MaxLevel : 4 ; } ; } ;)",
    "insertText": "static_assert(sizeof(FMappingRequest) == sizeof(uint64), \"Bad packing\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMappingRequest& Lhs, const FMappingRequest& Rhs)"
  },
  {
    "label": "FDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDirectMappingRequest(uint8 InSpaceID, uint16 InPhysicalSpaceID, uint8 InPageTableLayerIndex, uint32 InMaxLevel, uint32 InAddress, uint8 InLevel, uint8 InLocalLevel, uint16 InPhysicalAddress) : vAddress(InAddress), vLevel(InLevel), SpaceID(InSpaceID), pAddress(InPhysicalAddress), PhysicalSpaceID(InPhysicalSpaceID), Local_vLevel(InLocalLevel), MaxLevel(InMaxLevel), PageTableLayerIndex(InPageTableLayerIndex), Pad(0u)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint32 PackedValue [ 3 ] ; struct { uint32 vAddress : 2 4 ; uint32 vLevel : 4 ; uint32 SpaceID : 4 ; uint32 pAddress : 1 6 ; uint32 PhysicalSpaceID : 8 ; uint32 Local_vLevel : 4 ; uint32 MaxLevel : 4 ; uint32 PageTableLayerIndex : 4 ; uint32 Pad : 2 8 ; } ; } ;)",
    "insertText": "static_assert(sizeof(FDirectMappingRequest) == sizeof(uint32) * 3, \"Bad packing\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDirectMappingRequest& Lhs, const FDirectMappingRequest& Rhs)"
  },
  {
    "label": "FUniqueRequestList()",
    "kind": "Method",
    "detail": "Function (} class FUniqueRequestList { public :)",
    "insertText": "FUniqueRequestList(FConcurrentLinearBulkObjectAllocator& Allocator) : LoadRequestHash(NoInit) , MappingRequestHash(NoInit) , DirectMappingRequestHash(NoInit) , LoadRequests(Allocator.CreateArray<FVirtualTextureLocalTile>(LoadRequestCapacity)) , MappingRequests(Allocator.CreateArray<FMappingRequest>(MappingRequestCapacity)) , DirectMappingRequests(Allocator.CreateArray<FDirectMappingRequest>(DirectMappingRequestCapacity)) , ContinuousUpdateRequests(Allocator.CreateArray<FVirtualTextureLocalTile>(LoadRequestCapacity)) , AdaptiveAllocationsRequests(Allocator.MallocArray<uint32>(LoadRequestCapacity)) , LoadRequestCount(Allocator.MallocArray<uint16>(LoadRequestCapacity)) , LoadRequestGroupMask(Allocator.MallocArray<uint8>(LoadRequestCapacity)) , LoadRequestFlags(Allocator.MallocArray<FLoadRequestFlags>(LoadRequestCapacity)) , NumLoadRequests(0u) , NumLockRequests(0u) , NumNonStreamingLoadRequests(0u) , NumMappingRequests(0u) , NumDirectMappingRequests(0u) , NumContinuousUpdateRequests(0u) , NumAdaptiveAllocationRequests(0u)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (LoadRequestHash .)",
    "insertText": "Clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(bool bResetContinousUpdates)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumLoadRequests = 0 ; NumLockRequests = 0 ; NumNonStreamingLoadRequests = 0 ; NumMappingRequests = 0 ; NumDirectMappingRequests = 0 ; NumAdaptiveAllocationRequests = 0 ;)",
    "insertText": "if(bResetContinousUpdates)"
  },
  {
    "label": "GetNumLoadRequests()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetNumLoadRequests()"
  },
  {
    "label": "LockLoadRequest()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "LockLoadRequest(const FVirtualTextureLocalTile& Tile, uint8 GroupMask, bool bStreamingRequest)"
  },
  {
    "label": "AddMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMappingRequest(uint16 LoadRequestIndex, uint8 ProducerPhysicalGroupIndex, uint8 SpaceID, uint8 PageTableLayerIndex, uint32 MaxLevel, uint32 vAddress, uint8 vLevel, uint8 Local_vLevel)"
  },
  {
    "label": "AddDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectMappingRequest(uint8 InSpaceID, uint16 InPhysicalSpaceID, uint8 InPageTableLayerIndex, uint32 MaxLevel, uint32 InAddress, uint8 InLevel, uint8 InLocalLevel, uint16 InPhysicalAddress)"
  },
  {
    "label": "AddDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectMappingRequest(const FDirectMappingRequest& Request)"
  },
  {
    "label": "AddContinuousUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContinuousUpdateRequest(const FVirtualTextureLocalTile& Request)"
  },
  {
    "label": "AddAdaptiveAllocationRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptiveAllocationRequest(uint32 Request)"
  },
  {
    "label": "MergeRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeRequests(const FUniqueRequestList* RESTRICT Other, FConcurrentLinearBulkObjectAllocator& Allocator)"
  },
  {
    "label": "SortRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortRequests(FVirtualTextureProducerCollection& Producers, FConcurrentLinearBulkObjectAllocator& Allocator, uint32 MaxNonStreamingLoadRequests, uint32 MaxStreamingLoadRequests, bool bUseCombinedLimit)"
  },
  {
    "label": "FLoadRequestFlags()",
    "kind": "Method",
    "detail": "Function (private : const uint32 LoadRequestCapacity = 4 u* 1 0 2 4 ; const uint32 MappingRequestCapacity = 8 u* 1 0 2 4 - 2 5 6 u ; const uint32 DirectMappingRequestCapacity = MappingRequestCapacity ; const uint32 ContinuousUpdateRequestCapacity = LoadRequestCapacity ; const uint32 AdaptiveAllocationRequestCapacity = LoadRequestCapacity ; TStaticHashTable<1 0 2 4 u,LoadRequestCapacity> LoadRequestHash ; TStaticHashTable<1 0 2 4 u,MappingRequestCapacity> MappingRequestHash ; TStaticHashTable<5 1 2 u,DirectMappingRequestCapacity> DirectMappingRequestHash ; TStaticHashTable<1 0 2 4 u,ContinuousUpdateRequestCapacity> ContinuousUpdateRequestHash ; FVirtualTextureLocalTile* LoadRequests ; FMappingRequest* MappingRequests ; FDirectMappingRequest* DirectMappingRequests ; FVirtualTextureLocalTile* ContinuousUpdateRequests ; uint32* AdaptiveAllocationsRequests ; uint16* LoadRequestCount ; uint8* LoadRequestGroupMask ; struct FLoadRequestFlags { uint8 bLocked : 1 ; uint8 bStreaming : 1 ; uint8 Padding : 6 ;)",
    "insertText": "FLoadRequestFlags(bool bInLocked, bool bInStreaming) : bLocked(bInLocked) , bStreaming(bInStreaming)"
  },
  {
    "label": "AddLoadRequest()",
    "kind": "Method",
    "detail": "Function (} } ; FLoadRequestFlags* LoadRequestFlags ; uint32 NumLoadRequests ; uint32 NumLockRequests ; uint32 NumNonStreamingLoadRequests ; uint32 NumMappingRequests ; uint32 NumDirectMappingRequests ; uint32 NumContinuousUpdateRequests ; uint32 NumAdaptiveAllocationRequests ; } ; uint16)",
    "insertText": "AddLoadRequest(const FVirtualTextureLocalTile& Tile, uint8 GroupMask, uint16 Count, bool bStreamingRequest)"
  },
  {
    "label": "MurmurFinalize64()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash =)",
    "insertText": "MurmurFinalize64(Tile.PackedValue)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (LoadRequestCount [ Index ] = FMath::Min<)",
    "insertText": "uint32((uint32)LoadRequestCount[Index] + Count, MAX_uint16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LoadRequestGroupMask [ Index ] | = GroupMask ; return Index ; } })",
    "insertText": "if(NumLoadRequests < LoadRequestCapacity)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const uint32 Index = NumLoadRequests + + ; LoadRequestHash .)",
    "insertText": "Add(Hash, Index)"
  },
  {
    "label": "FLoadRequestFlags()",
    "kind": "Method",
    "detail": "Function (LoadRequests [ Index ] = Tile ; LoadRequestCount [ Index ] = Count ; LoadRequestGroupMask [ Index ] = GroupMask ; LoadRequestFlags [ Index ] =)",
    "insertText": "FLoadRequestFlags(false, bStreamingRequest)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FLoadRequestFlags& Flags = LoadRequestFlags [ Index ] ;)",
    "insertText": "check(bStreamingRequest == Flags.bStreaming)"
  },
  {
    "label": "FLoadRequestFlags()",
    "kind": "Method",
    "detail": "Function (LoadRequests [ Index ] = Tile ; LoadRequestCount [ Index ] = MAX_uint16 ; LoadRequestGroupMask [ Index ] = GroupMask ; LoadRequestFlags [ Index ] =)",
    "insertText": "FLoadRequestFlags(true, bStreamingRequest)"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (const FMappingRequest)",
    "insertText": "Request(LoadRequestIndex, ProducerPhysicalGroupIndex, SpaceID, PageTableLayerIndex, MaxLevel, vAddress, vLevel, Local_vLevel)"
  },
  {
    "label": "MurmurFinalize64()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash =)",
    "insertText": "MurmurFinalize64(Request.PackedValue)"
  },
  {
    "label": "AddDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (MappingRequests [ Index ] = Request ; } } void)",
    "insertText": "AddDirectMappingRequest(uint8 InSpaceID, uint16 InPhysicalSpaceID, uint8 InPageTableLayerIndex, uint32 InMaxLevel, uint32 InAddress, uint8 InLevel, uint8 InLocalLevel, uint16 InPhysicalAddress)"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (const FDirectMappingRequest)",
    "insertText": "Request(InSpaceID, InPhysicalSpaceID, InPageTableLayerIndex, InMaxLevel, InAddress, InLevel, InLocalLevel, InPhysicalAddress)"
  },
  {
    "label": "AddDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectMappingRequest(Request)"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash =)",
    "insertText": "Murmur32({ Request.PackedValue[0], Request.PackedValue[1], Request.PackedValue[2] })"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16* LoadRequestIndexRemap = Allocator . MallocArray<)",
    "insertText": "uint16(Other->NumLoadRequests)"
  },
  {
    "label": "LockLoadRequest()",
    "kind": "Method",
    "detail": "Function (LoadRequestIndexRemap [ Index ] =)",
    "insertText": "LockLoadRequest(Other->GetLoadRequest(Index), Other->LoadRequestGroupMask[Index], Other->LoadRequestFlags[Index].bStreaming)"
  },
  {
    "label": "AddLoadRequest()",
    "kind": "Method",
    "detail": "Function (} else { LoadRequestIndexRemap [ Index ] =)",
    "insertText": "AddLoadRequest(Other->GetLoadRequest(Index), Other->LoadRequestGroupMask[Index], Other->LoadRequestCount[Index], Other->LoadRequestFlags[Index].bStreaming)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(uint32 Index = 0u; Index < Other->NumMappingRequests; ++Index)"
  },
  {
    "label": "GetMappingRequest()",
    "kind": "Method",
    "detail": "Function (const FMappingRequest& Request = Other ->)",
    "insertText": "GetMappingRequest(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint16 LoadRequestIndex = LoadRequestIndexRemap [ Request . LoadRequestIndex ] ;)",
    "insertText": "if(LoadRequestIndex != 0xffff)"
  },
  {
    "label": "AddMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMappingRequest(LoadRequestIndex, Request.ProducerPhysicalGroupIndex, Request.SpaceID, Request.PageTableLayerIndex, Request.MaxLevel, Request.vAddress, Request.vLevel, Request.Local_vLevel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(uint32 Index = 0u; Index < Other->NumDirectMappingRequests; ++Index)"
  },
  {
    "label": "AddDirectMappingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectMappingRequest(Other->GetDirectMappingRequest(Index))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 Index = 0u; Index < Other->NumContinuousUpdateRequests; ++Index)"
  },
  {
    "label": "AddContinuousUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContinuousUpdateRequest(Other->GetContinuousUpdateRequest(Index))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 Index = 0u; Index < Other->NumAdaptiveAllocationRequests; ++Index)"
  },
  {
    "label": "AddAdaptiveAllocationRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptiveAllocationRequest(Other->GetAdaptiveAllocationRequest(Index))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FPriorityAndIndex { uint32 Priority ; uint16 Index ; bool)",
    "insertText": "operator(const FPriorityAndIndex& Rhs)"
  },
  {
    "label": "FPriorityAndIndex()",
    "kind": "Method",
    "detail": "Function (MaxNonStreamingLoadRequests + = MaxStreamingLoadRequests ; MaxStreamingLoadRequests = 0 ; } uint32 CheckNumLockRequests = 0 u ; uint32 NumNonStreamingLockRequests = 0 u ; uint32 NumStreamingNonLockRequests = 0 u ; FPriorityAndIndex* SortedKeys = Allocator . CreateArray<)",
    "insertText": "FPriorityAndIndex(NumLoadRequests)"
  },
  {
    "label": "GetLoadRequest()",
    "kind": "Method",
    "detail": "Function (const uint32 Count = LoadRequestCount [ i ] ; const FLoadRequestFlags Flags = LoadRequestFlags [ i ] ; const FVirtualTextureLocalTile& TileToLoad =)",
    "insertText": "GetLoadRequest(i)"
  },
  {
    "label": "Priority()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Priority(Count * (1u + TileToLoad.Local_vLevel))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SortedKeys [ i ] . Index = i ;)",
    "insertText": "if(Flags.bLocked)"
  },
  {
    "label": "NumNonStreamingLockRequests()",
    "kind": "Method",
    "detail": "Function (SortedKeys [ i ] . Priority = MAX_uint32 ;)",
    "insertText": "NumNonStreamingLockRequests(bUseCombinedLimit || !Flags.bStreaming ? 1 : 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + CheckNumLockRequests ; } else)",
    "insertText": "if(bUseCombinedLimit || !Flags.bStreaming)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (SortedKeys [ i ] . Priority = 0 xd0000000 | Priority ; } else { SortedKeys [ i ] . Priority = 0 xe0000000 | Priority ; + + NumStreamingNonLockRequests ; } })",
    "insertText": "checkSlow(CheckNumLockRequests == NumLockRequests)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(MakeArrayView(SortedKeys, NumLoadRequests))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint32 NumStreamingLockRequests = NumLockRequests - NumNonStreamingLockRequests ; const uint32 NumStreamingRequests = NumStreamingNonLockRequests + NumStreamingLockRequests ; const uint32 NumNonStreamingRequests = NumLoadRequests - NumStreamingRequests ; const uint32 NewNumNonStreamingRequests =)",
    "insertText": "Min(NumNonStreamingRequests, FMath::Max(NumNonStreamingLockRequests, MaxNonStreamingLoadRequests))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint32 NewNumStreamingRequests =)",
    "insertText": "Min(NumStreamingRequests, FMath::Max(NumStreamingLockRequests, MaxStreamingLoadRequests))"
  },
  {
    "label": "FVirtualTextureLocalTile()",
    "kind": "Method",
    "detail": "Function (const uint32 NewNumLoadRequests = NewNumNonStreamingRequests + NewNumStreamingRequests ; FVirtualTextureLocalTile* SortedLoadRequests = Allocator . CreateArray<)",
    "insertText": "FVirtualTextureLocalTile(NewNumLoadRequests)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* SortedGroupMask = Allocator . MallocArray<)",
    "insertText": "uint8(NewNumLoadRequests)"
  },
  {
    "label": "FLoadRequestFlags()",
    "kind": "Method",
    "detail": "Function (FLoadRequestFlags* SortedFlags = Allocator . MallocArray<)",
    "insertText": "FLoadRequestFlags(NewNumLoadRequests)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16* LoadIndexToSortedLoadIndex = Allocator . MallocArray<)",
    "insertText": "uint16(NumLoadRequests)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(LoadIndexToSortedLoadIndex, 0xff, NumLoadRequests * sizeof(uint16))"
  },
  {
    "label": "LoadIndexToSortedLoadIndex()",
    "kind": "Method",
    "detail": "Function (uint32 WriteIndex = 0 ; auto CopyRequestToSorted = [ this,& WriteIndex,SortedKeys,SortedLoadRequests,SortedGroupMask,SortedFlags,)",
    "insertText": "LoadIndexToSortedLoadIndex(uint32 SortedIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const uint32 OldIndex = SortedKeys [ SortedIndex ] . Index ;)",
    "insertText": "checkSlow(OldIndex < NumLoadRequests)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SortedLoadRequests [ WriteIndex ] = LoadRequests [ OldIndex ] ; SortedGroupMask [ WriteIndex ] = LoadRequestGroupMask [ OldIndex ] ; SortedFlags [ WriteIndex ] = LoadRequestFlags [ OldIndex ] ; LoadIndexToSortedLoadIndex [ OldIndex ] = WriteIndex ; + + WriteIndex ; } ;)",
    "insertText": "for(uint32 i = 0u; i < NumLockRequests; ++i)"
  },
  {
    "label": "CopyRequestToSorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRequestToSorted(i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 i = 0u; i < NewNumStreamingRequests - NumStreamingLockRequests; ++i)"
  },
  {
    "label": "CopyRequestToSorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRequestToSorted(NumLockRequests + i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 i = 0u; i < NewNumNonStreamingRequests - NumNonStreamingLockRequests; ++i)"
  },
  {
    "label": "CopyRequestToSorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRequestToSorted(NumLockRequests + NumStreamingNonLockRequests + i)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(NewNumLoadRequests == WriteIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LoadRequests = SortedLoadRequests ; LoadRequestGroupMask = SortedGroupMask ; LoadRequestFlags = SortedFlags ; uint32 NewNumMappingRequests = 0 u ;)",
    "insertText": "for(uint32 i = 0u; i < NumMappingRequests; ++i)"
  },
  {
    "label": "GetMappingRequest()",
    "kind": "Method",
    "detail": "Function (FMappingRequest Request =)",
    "insertText": "GetMappingRequest(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint16 SortedLoadIndex = LoadIndexToSortedLoadIndex [ Request . LoadRequestIndex ] ;)",
    "insertText": "if(SortedLoadIndex != 0xffff)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Request . LoadRequestIndex = SortedLoadIndex ; MappingRequests [ NewNumMappingRequests + + ] = Request ; } } NumLoadRequests = NewNumLoadRequests ; NumNonStreamingLoadRequests = NewNumNonStreamingRequests ;)",
    "insertText": "check(!bUseCombinedLimit || NumLoadRequests == NumNonStreamingLoadRequests)"
  }
]