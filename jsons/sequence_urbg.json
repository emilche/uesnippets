[
  {
    "label": "sequence_urbg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sequence_urbg"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_SEQUENCE_URBG_H_ # define ABSL_RANDOM_INTERNAL_SEQUENCE_URBG_H_ # include<cstdint> # include<cstring> # include<limits> # include<type_traits> # include<vector> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class sequence_urbg { public : using result_type = uint64_t ;)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "sequence_urbg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sequence_urbg(std::initializer_list<result_type> data) : i_(0), data_(data)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (i_ = 0 ; } result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "invocations()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "invocations()"
  }
]