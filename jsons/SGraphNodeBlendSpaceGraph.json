[
  {
    "label": "SPoseWatchOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseWatchOverlay"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FOverlayWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayWidgetInfo"
  },
  {
    "label": "SGraphNodeBlendSpaceGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNodeBlendSpaceGraph"
  },
  {
    "label": "UAnimGraphNode_BlendSpaceGraphBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceGraphBase"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" KismetNodes / SGraphNodeK2Composite . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class SPoseWatchOverlay ; class SToolTip ; class SWidget ; class UEdGraph ; struct FOverlayWidgetInfo ; class SGraphNodeBlendSpaceGraph : public SGraphNodeK2Composite { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphNodeBlendSpaceGraph)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, class UAnimGraphNode_BlendSpaceGraphBase* InNode)"
  },
  {
    "label": "GetInnerGraph()",
    "kind": "Method",
    "detail": "Function (protected : UEdGraph*)",
    "insertText": "GetInnerGraph()"
  },
  {
    "label": "GetOverlayWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<FOverlayWidgetInfo>)",
    "insertText": "GetOverlayWidgets(bool bSelected, const FVector2D& WidgetSize)"
  },
  {
    "label": "CreateNodeBody()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateNodeBody()"
  },
  {
    "label": "GetComplexTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip>)",
    "insertText": "GetComplexTooltip()"
  }
]