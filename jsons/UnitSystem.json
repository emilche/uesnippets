[
  {
    "label": "ShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGenerator"
  },
  {
    "label": "UnitSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitSystem"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "UnitTransform()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_UNITSYSTEM_H # define MATERIALX_UNITSYSTEM_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / ShaderNode . h> # include<MaterialXGenShader / ShaderNodeImpl . h> # include<MaterialXGenShader / TypeDesc . h> # include<MaterialXCore / Unit . h> # include<MaterialXCore / Document . h> MATERIALX_NAMESPACE_BEGIN class ShaderGenerator ; using UnitSystemPtr = shared_ptr<class UnitSystem> ; struct UnitTransform {)",
    "insertText": "UnitTransform(const string& ss, const string& ts, const TypeDesc* t, const string& unittype)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (string sourceUnit ; string targetUnit ; const TypeDesc* type ; string unitType ; bool)",
    "insertText": "operator(const UnitTransform& rhs)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} UnitSystemPtr)",
    "insertText": "create(const string& target)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getName()"
  },
  {
    "label": "getUnitConverterRegistry()",
    "kind": "Method",
    "detail": "Function (UnitConverterRegistryPtr)",
    "insertText": "getUnitConverterRegistry()"
  },
  {
    "label": "loadLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "loadLibrary(DocumentPtr document)"
  },
  {
    "label": "supportsTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "supportsTransform(const UnitTransform& transform)"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (ShaderNodePtr)",
    "insertText": "createNode(ShaderGraph* parent, const UnitTransform& transform, const string& name, GenContext& context)"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (ImplementationPtr)",
    "insertText": "getImplementation(const UnitTransform& transform, const string& unitname)"
  },
  {
    "label": "UnitSystem()",
    "kind": "Method",
    "detail": "Function (const string UNITSYTEM_NAME ; protected :)",
    "insertText": "UnitSystem(const string& language)"
  }
]