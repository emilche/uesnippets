[
  {
    "label": "IChunkReferenceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkReferenceTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChunkReferenceTrackerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkReferenceTrackerFactory"
  },
  {
    "label": "IChunkReferenceTracker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BuildPatchManifest . h \" # include \" IBuildManifestSet . h \" namespace BuildPatchServices { class IChunkReferenceTracker { public : enum class ESortDirection : uint8 { Ascending = 0,Descending } ; public : ~)",
    "insertText": "IChunkReferenceTracker()"
  },
  {
    "label": "GetReferencedChunks()",
    "kind": "Method",
    "detail": "Function (} TSet<FGuid>)",
    "insertText": "GetReferencedChunks()"
  },
  {
    "label": "GetReferenceCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReferenceCount(const FGuid& ChunkId)"
  },
  {
    "label": "SortByUseOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortByUseOrder(TArray<FGuid>& ChunkList, ESortDirection Direction)"
  },
  {
    "label": "GetNextReferences()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "GetNextReferences(int32 Count, const TFunction<bool(const FGuid&)>& SelectPredicate)"
  },
  {
    "label": "SelectFromNextReferences()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "SelectFromNextReferences(int32 Count, const TFunction<bool(const FGuid&)>& SelectPredicate)"
  },
  {
    "label": "PopReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopReference(const FGuid& ChunkId)"
  },
  {
    "label": "GetRemainingChunkCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRemainingChunkCount()"
  },
  {
    "label": "CopyOutOrderedUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyOutOrderedUseList(TArray<FGuid>& OutUseList)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FChunkReferenceTrackerFactory { public : IChunkReferenceTracker*)",
    "insertText": "Create(const IBuildManifestSet* Manifest, const TSet<FString>& FilesToConstruct)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (IChunkReferenceTracker*)",
    "insertText": "Create(TArray<FGuid> CustomChunkReferences)"
  },
  {
    "label": "OrderedUniqueReferences()",
    "kind": "Method",
    "detail": "Function (} ; namespace CustomChunkReferencesHelpers { TArray<FGuid>)",
    "insertText": "OrderedUniqueReferences(const FBuildPatchAppManifestRef& InstallManifest)"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid> ChunkReferences ; TArray<FString> AllFiles ; TSet<FGuid> AllChunks ; InstallManifest ->)",
    "insertText": "GetFileList(AllFiles)"
  },
  {
    "label": "GetFileManifest()",
    "kind": "Method",
    "detail": "Function (const FFileManifest* NewFileManifest = InstallManifest ->)",
    "insertText": "GetFileManifest(File)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bWasAlreadyInSet = false ; AllChunks .)",
    "insertText": "Add(ChunkPart.Guid, &bWasAlreadyInSet)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChunkReferences .)",
    "insertText": "Add(ChunkPart.Guid)"
  },
  {
    "label": "OrderedUniquePatchReferences()",
    "kind": "Method",
    "detail": "Function (} } } } return ChunkReferences ; } TArray<FGuid>)",
    "insertText": "OrderedUniquePatchReferences(const FBuildPatchAppManifestRef& InstallManifest, const FBuildPatchAppManifestRef& CurrentManifest)"
  },
  {
    "label": "GetDataList()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid> ChunkReferences ; TArray<FString> AllFiles ; TSet<FGuid> OldChunks ; TSet<FGuid> NewChunks ; CurrentManifest ->)",
    "insertText": "GetDataList(OldChunks)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bIsNewChunk = ! OldChunks .)",
    "insertText": "Contains(ChunkPart.Guid)"
  },
  {
    "label": "OrderedUniqueReferencesTagged()",
    "kind": "Method",
    "detail": "Function (} } } } } return ChunkReferences ; } TArray<FGuid>)",
    "insertText": "OrderedUniqueReferencesTagged(const FBuildPatchAppManifestRef& InstallManifest, const TSet<FString>& InstallTagSet)"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid> ChunkReferences ; TArray<FString> TaggedFiles ; TSet<FGuid> TaggedChunks ; InstallManifest ->)",
    "insertText": "GetTaggedFileList(InstallTagSet, TaggedFiles)"
  },
  {
    "label": "OrderedUniquePatchReferencesTagged()",
    "kind": "Method",
    "detail": "Function (} } } } return ChunkReferences ; } TArray<FGuid>)",
    "insertText": "OrderedUniquePatchReferencesTagged(const FBuildPatchAppManifestRef& InstallManifest, const TSet<FString>& InstallTagSet, const FBuildPatchAppManifestRef& CurrentManifest, const TSet<FString>& CurrentTagSet)"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (TSet<FString> FilesInstalled ; TSet<FGuid> ChunksRequired ; TSet<FGuid> ChunksInstalled ; CurrentManifest ->)",
    "insertText": "GetTaggedFileList(CurrentTagSet, FilesInstalled)"
  },
  {
    "label": "GetChunksRequiredForFiles()",
    "kind": "Method",
    "detail": "Function (CurrentManifest ->)",
    "insertText": "GetChunksRequiredForFiles(FilesInstalled, ChunksRequired)"
  },
  {
    "label": "EnumerateProducibleChunks()",
    "kind": "Method",
    "detail": "Function (CurrentManifest ->)",
    "insertText": "EnumerateProducibleChunks(CurrentTagSet, ChunksRequired, ChunksInstalled)"
  }
]