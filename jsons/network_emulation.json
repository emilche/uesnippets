[
  {
    "label": "EmulatedNetworkOutgoingStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkOutgoingStatsBuilder"
  },
  {
    "label": "EmulatedNetworkIncomingStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkIncomingStatsBuilder"
  },
  {
    "label": "EmulatedNetworkStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkStatsBuilder"
  },
  {
    "label": "LinkEmulation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkEmulation"
  },
  {
    "label": "StoredPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StoredPacket"
  },
  {
    "label": "NetworkRouterNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkRouterNode"
  },
  {
    "label": "EmulatedNetworkNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkNode"
  },
  {
    "label": "EmulatedEndpointImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedEndpointImpl"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "ReceiverBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiverBinding"
  },
  {
    "label": "EmulatedRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedRoute"
  },
  {
    "label": "EndpointsContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndpointsContainer"
  },
  {
    "label": "FakePacketRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePacketRoute"
  },
  {
    "label": "TwoWayFakeTrafficRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TwoWayFakeTrafficRoute"
  },
  {
    "label": "TrafficHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrafficHandlerInterface"
  },
  {
    "label": "EmulatedNetworkOutgoingStatsBuilder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EmulatedNetworkOutgoingStatsBuilder()"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(Timestamp sent_time,\n                    DataSize packet_size,\n                    EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddOutgoingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutgoingStats(const EmulatedNetworkOutgoingStats& stats)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stats_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "EmulatedNetworkIncomingStatsBuilder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EmulatedNetworkIncomingStatsBuilder()"
  },
  {
    "label": "OnPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDropped(DataSize packet_size,\n                       EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(Timestamp received_time,\n                        DataSize packet_size,\n                        EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddIncomingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIncomingStats(const EmulatedNetworkIncomingStats& stats)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stats_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "EmulatedNetworkStatsBuilder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EmulatedNetworkStatsBuilder()"
  },
  {
    "label": "EmulatedNetworkStatsBuilder()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "EmulatedNetworkStatsBuilder(rtc::IPAddress local_ip)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(Timestamp queued_time,\n                    Timestamp sent_time,\n                    rtc::IPAddress destination_ip,\n                    DataSize packet_size,\n                    EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDropped(rtc::IPAddress source_ip,\n                       DataSize packet_size,\n                       EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(Timestamp received_time,\n                        rtc::IPAddress source_ip,\n                        DataSize packet_size,\n                        EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddEmulatedNetworkStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEmulatedNetworkStats(const EmulatedNetworkStats& stats)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (local_addresses_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (outgoing_stats_per_destination_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (incoming_stats_per_source_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (network_behavior_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (process_task_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (packets_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "NetworkRouterNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "NetworkRouterNode(rtc::TaskQueue* task_queue)"
  },
  {
    "label": "SetReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiver(const rtc::IPAddress& dest_ip,\n                   EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "RemoveReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReceiver(const rtc::IPAddress& dest_ip)"
  },
  {
    "label": "SetDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultReceiver(EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "RemoveDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefaultReceiver()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (default_receiver_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (routing_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (watcher_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (filter_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "CreateRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRoute(const rtc::IPAddress& receiver_ip,\n                          std::vector<EmulatedNetworkNode*> nodes,\n                          EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "ClearRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRoute(const rtc::IPAddress& receiver_ip,\n                         std::vector<EmulatedNetworkNode*> nodes)"
  },
  {
    "label": "BindOneShotReceiver()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint16_t>)",
    "insertText": "BindOneShotReceiver(\n      uint16_t desired_port,\n      EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "BindReceiverInternal()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint16_t>)",
    "insertText": "BindReceiverInternal(\n      uint16_t desired_port,\n      EmulatedNetworkReceiverInterface* receiver,\n      bool is_one_shot)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (is_enabled_)",
    "insertText": "RTC_GUARDED_BY(enabled_state_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (next_port_)",
    "insertText": "RTC_GUARDED_BY(receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (default_receiver_)",
    "insertText": "RTC_GUARDED_BY(receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (port_to_receiver_)",
    "insertText": "RTC_GUARDED_BY(receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stats_builder_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "EndpointsContainer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "EndpointsContainer(\n      const std::vector<EmulatedEndpointImpl*>& endpoints)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (rtc::CopyOnWriteBuffer)",
    "insertText": "buf(size)"
  }
]