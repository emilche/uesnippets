[
  {
    "label": "EmulatedNetworkOutgoingStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkOutgoingStatsBuilder"
  },
  {
    "label": "EmulatedNetworkIncomingStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkIncomingStatsBuilder"
  },
  {
    "label": "EmulatedNetworkStatsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkStatsBuilder"
  },
  {
    "label": "LinkEmulation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkEmulation"
  },
  {
    "label": "StoredPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StoredPacket"
  },
  {
    "label": "NetworkRouterNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkRouterNode"
  },
  {
    "label": "EmulatedNetworkNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkNode"
  },
  {
    "label": "EmulatedEndpointImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedEndpointImpl"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "ReceiverBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiverBinding"
  },
  {
    "label": "EmulatedRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedRoute"
  },
  {
    "label": "EndpointsContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndpointsContainer"
  },
  {
    "label": "FakePacketRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePacketRoute"
  },
  {
    "label": "TwoWayFakeTrafficRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TwoWayFakeTrafficRoute"
  },
  {
    "label": "TrafficHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrafficHandlerInterface"
  },
  {
    "label": "EmulatedNetworkOutgoingStatsBuilder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_NETWORK_EMULATION_H_ # define TEST_NETWORK_NETWORK_EMULATION_H_ # include<cstdint> # include<deque> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / sequence_checker . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / simulated_network . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / network . h \" # include \" rtc_base / network_constants . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class EmulatedNetworkOutgoingStatsBuilder { public :)",
    "insertText": "EmulatedNetworkOutgoingStatsBuilder()"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(Timestamp sent_time, DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddOutgoingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutgoingStats(const EmulatedNetworkOutgoingStats& stats)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkOutgoingStats)",
    "insertText": "Build()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : RTC_NO_UNIQUE_ADDRESS SequenceChecker sequence_checker_ ; EmulatedNetworkOutgoingStats stats_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "EmulatedNetworkIncomingStatsBuilder()",
    "kind": "Method",
    "detail": "Function (} ; class EmulatedNetworkIncomingStatsBuilder { public :)",
    "insertText": "EmulatedNetworkIncomingStatsBuilder()"
  },
  {
    "label": "OnPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDropped(DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(Timestamp received_time, DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddIncomingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIncomingStats(const EmulatedNetworkIncomingStats& stats)"
  },
  {
    "label": "EmulatedNetworkStatsBuilder()",
    "kind": "Method",
    "detail": "Function (} ; class EmulatedNetworkStatsBuilder { public :)",
    "insertText": "EmulatedNetworkStatsBuilder()"
  },
  {
    "label": "EmulatedNetworkStatsBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedNetworkStatsBuilder(rtc::IPAddress local_ip)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(Timestamp queued_time, Timestamp sent_time, rtc::IPAddress destination_ip, DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketDropped(rtc::IPAddress source_ip, DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(Timestamp received_time, rtc::IPAddress source_ip, DataSize packet_size, EmulatedEndpointConfig::StatsGatheringMode mode)"
  },
  {
    "label": "AddEmulatedNetworkStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEmulatedNetworkStats(const EmulatedNetworkStats& stats)"
  },
  {
    "label": "LinkEmulation()",
    "kind": "Method",
    "detail": "Function (} ; class LinkEmulation : public EmulatedNetworkReceiverInterface { public :)",
    "insertText": "LinkEmulation(Clock* clock, rtc::TaskQueue* task_queue, std::unique_ptr<NetworkBehaviorInterface> network_behavior, EmulatedNetworkReceiverInterface* receiver) : clock_(clock), task_queue_(task_queue), network_behavior_(std::move(network_behavior)), receiver_(receiver)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPacketReceived(EmulatedIpPacket packet)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (private : struct StoredPacket { uint64_t id ; EmulatedIpPacket packet ; bool removed ; } ; void)",
    "insertText": "Process(Timestamp at_time) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; rtc::TaskQueue* const task_queue_ ; const std::unique_ptr<NetworkBehaviorInterface> network_behavior_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "NetworkRouterNode()",
    "kind": "Method",
    "detail": "Function (} ; class NetworkRouterNode : public EmulatedNetworkReceiverInterface { public :)",
    "insertText": "NetworkRouterNode(rtc::TaskQueue* task_queue)"
  },
  {
    "label": "SetReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiver(const rtc::IPAddress& dest_ip, EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "RemoveReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReceiver(const rtc::IPAddress& dest_ip)"
  },
  {
    "label": "SetDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultReceiver(EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "RemoveDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefaultReceiver()"
  },
  {
    "label": "SetWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWatcher(std::function<void(const EmulatedIpPacket&)> watcher)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilter(std::function<bool(const EmulatedIpPacket&)> filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const EmulatedIpPacket&)> watcher_ RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "bool(const EmulatedIpPacket&)> filter_ RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "EmulatedNetworkNode()",
    "kind": "Method",
    "detail": "Function (} ; class EmulatedNetworkNode : public EmulatedNetworkReceiverInterface { public :)",
    "insertText": "EmulatedNetworkNode(Clock* clock, rtc::TaskQueue* task_queue, std::unique_ptr<NetworkBehaviorInterface> network_behavior)"
  },
  {
    "label": "EmulatedNetworkNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EmulatedNetworkNode()"
  },
  {
    "label": "EmulatedNetworkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmulatedNetworkNode(const EmulatedNetworkNode&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkNode&)",
    "insertText": "operator(const EmulatedNetworkNode&)"
  },
  {
    "label": "link()",
    "kind": "Method",
    "detail": "Function (LinkEmulation*)",
    "insertText": "link()"
  },
  {
    "label": "ClearRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRoute(const rtc::IPAddress& receiver_ip, std::vector<EmulatedNetworkNode*> nodes)"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (private : NetworkRouterNode router_ ; LinkEmulation link_ ; } ; class EmulatedEndpointImpl : public EmulatedEndpoint { public : struct Options {)",
    "insertText": "Options(uint64_t id, const rtc::IPAddress& ip, const EmulatedEndpointConfig& config)"
  },
  {
    "label": "EmulatedEndpointImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t id ; rtc::IPAddress ip ; EmulatedEndpointConfig::StatsGatheringMode stats_gathering_mode ; rtc::AdapterType type ; bool allow_send_packet_with_different_source_ip ; bool allow_receive_packets_with_different_dest_ip ; std::string log_name ; } ;)",
    "insertText": "EmulatedEndpointImpl(const Options& options, bool is_enabled, rtc::TaskQueue* task_queue, Clock* clock)"
  },
  {
    "label": "EmulatedEndpointImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EmulatedEndpointImpl()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetId()"
  },
  {
    "label": "router()",
    "kind": "Method",
    "detail": "Function (NetworkRouterNode*)",
    "insertText": "router()"
  },
  {
    "label": "BindReceiver()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint16_t>)",
    "insertText": "BindReceiver(uint16_t desired_port, EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "BindOneShotReceiver()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint16_t>)",
    "insertText": "BindOneShotReceiver(uint16_t desired_port, EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "UnbindReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindReceiver(uint16_t port)"
  },
  {
    "label": "BindDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDefaultReceiver(EmulatedNetworkReceiverInterface* receiver)"
  },
  {
    "label": "UnbindDefaultReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindDefaultReceiver()"
  },
  {
    "label": "GetPeerLocalAddress()",
    "kind": "Method",
    "detail": "Function (rtc::IPAddress)",
    "insertText": "GetPeerLocalAddress()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enabled()"
  },
  {
    "label": "network()",
    "kind": "Method",
    "detail": "Function (const rtc::Network&)",
    "insertText": "network()"
  },
  {
    "label": "stats()",
    "kind": "Method",
    "detail": "Function (} EmulatedNetworkStats)",
    "insertText": "stats()"
  },
  {
    "label": "BindReceiverInternal()",
    "kind": "Method",
    "detail": "Function (private : struct ReceiverBinding { EmulatedNetworkReceiverInterface* receiver ; bool is_one_shot ; } ; absl::optional<uint16_t>)",
    "insertText": "BindReceiverInternal(uint16_t desired_port, EmulatedNetworkReceiverInterface* receiver, bool is_one_shot)"
  },
  {
    "label": "NextPort()",
    "kind": "Method",
    "detail": "Function (uint16_t kFirstEphemeralPort = 4 9 1 5 2 ; uint16_t)",
    "insertText": "NextPort() RTC_EXCLUSIVE_LOCKS_REQUIRED(receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex receiver_lock_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker enabled_state_checker_ ; const Options options_ ; bool is_enabled_)",
    "insertText": "RTC_GUARDED_BY(enabled_state_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; rtc::TaskQueue* const task_queue_ ; std::unique_ptr<rtc::Network> network_ ; NetworkRouterNode router_ ; uint16_t next_port_)",
    "insertText": "RTC_GUARDED_BY(receiver_lock_)"
  },
  {
    "label": "EmulatedRoute()",
    "kind": "Method",
    "detail": "Function (} ; class EmulatedRoute { public :)",
    "insertText": "EmulatedRoute(EmulatedEndpointImpl* from, std::vector<EmulatedNetworkNode*> via_nodes, EmulatedEndpointImpl* to, bool is_default) : from(from), via_nodes(std::move(via_nodes)), to(to), active(true), is_default(is_default)"
  },
  {
    "label": "EndpointsContainer()",
    "kind": "Method",
    "detail": "Function (} EmulatedEndpointImpl* from ; std::vector<EmulatedNetworkNode*> via_nodes ; EmulatedEndpointImpl* to ; bool active ; bool is_default ; } ; class EndpointsContainer { public :)",
    "insertText": "EndpointsContainer(const std::vector<EmulatedEndpointImpl*>& endpoints)"
  },
  {
    "label": "LookupByLocalAddress()",
    "kind": "Method",
    "detail": "Function (EmulatedEndpointImpl*)",
    "insertText": "LookupByLocalAddress(const rtc::IPAddress& local_ip)"
  },
  {
    "label": "HasEndpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEndpoint(EmulatedEndpointImpl* endpoint)"
  },
  {
    "label": "GetEnabledNetworks()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<rtc::Network>>)",
    "insertText": "GetEnabledNetworks()"
  },
  {
    "label": "GetEndpoints()",
    "kind": "Method",
    "detail": "Function (std::vector<EmulatedEndpoint*>)",
    "insertText": "GetEndpoints()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "FakePacketRoute()",
    "kind": "Method",
    "detail": "Function (private : const std::vector<EmulatedEndpointImpl*> endpoints_ ; } ; template<FakePacketType> class FakePacketRoute : public EmulatedNetworkReceiverInterface { public :)",
    "insertText": "FakePacketRoute(EmulatedRoute* route, std::function<void(FakePacketType, Timestamp)> action) : route_(route), action_(std::move(action)), send_addr_(route_->from->GetPeerLocalAddress(), 0), recv_addr_(route_->to->GetPeerLocalAddress(), *route_->to->BindReceiver(0, this))"
  },
  {
    "label": "FakePacketRoute()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakePacketRoute()"
  },
  {
    "label": "UnbindReceiver()",
    "kind": "Method",
    "detail": "Function (route_ -> to ->)",
    "insertText": "UnbindReceiver(recv_addr_.port())"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendPacket(size_t size, FakePacketType packet)"
  },
  {
    "label": "RTC_CHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_GE(size, sizeof(int))"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (sent_ .)",
    "insertText": "emplace(next_packet_id_, packet)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (rtc::CopyOnWriteBuffer)",
    "insertText": "buf(size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "int(buf.MutableData())"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (route_ -> from ->)",
    "insertText": "SendPacket(send_addr_, recv_addr_, buf)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int packet_id = reinterpret_cast<const)",
    "insertText": "int(packet.data.data())"
  },
  {
    "label": "action_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "action_(std::move(sent_[packet_id]), packet.arrival_time)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (sent_ .)",
    "insertText": "erase(packet_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : EmulatedRoute* const route_ ; const std::function<)",
    "insertText": "void(FakePacketType, Timestamp)"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (const rtc::SocketAddress send_addr_ ; const rtc::SocketAddress recv_addr_ ; int next_packet_id_ = 0 ; std::map<int,FakePacketType> sent_ ; } ; template<RequestPacketType,ResponsePacketType> class TwoWayFakeTrafficRoute { public : class TrafficHandlerInterface { public : void)",
    "insertText": "OnRequest(RequestPacketType, Timestamp)"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResponse(ResponsePacketType, Timestamp)"
  },
  {
    "label": "TrafficHandlerInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TrafficHandlerInterface()"
  },
  {
    "label": "TwoWayFakeTrafficRoute()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TwoWayFakeTrafficRoute(TrafficHandlerInterface* handler, EmulatedRoute* send_route, EmulatedRoute* ret_route) : handler_(handler)"
  },
  {
    "label": "send_route()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "send_route(RequestPacketType packet, Timestamp arrival_time)"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (handler_ ->)",
    "insertText": "OnRequest(std::move(packet), arrival_time)"
  },
  {
    "label": "ret_route()",
    "kind": "Method",
    "detail": "Function (} },response_handler_ {)",
    "insertText": "ret_route(ResponsePacketType packet, Timestamp arrival_time)"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (handler_ ->)",
    "insertText": "OnResponse(std::move(packet), arrival_time)"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (} } { } void)",
    "insertText": "SendRequest(size_t size, RequestPacketType packet)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (request_handler_ .)",
    "insertText": "SendPacket(size, std::move(packet))"
  },
  {
    "label": "SendResponse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendResponse(size_t size, ResponsePacketType packet)"
  }
]