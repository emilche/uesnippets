[
  {
    "label": "RenderDelayBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderDelayBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_BUFFER_H_ # include<stddef . h> # include<vector> # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / block . h \" # include \" modules / audio_processing / aec3 / downsampled_render_buffer . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" namespace webrtc { class RenderDelayBuffer { public : enum class BufferingEvent { kNone,kRenderUnderrun,kRenderOverrun,kApiCallSkew } ; RenderDelayBuffer*)",
    "insertText": "Create(const EchoCanceller3Config& config, int sample_rate_hz, size_t num_render_channels)"
  },
  {
    "label": "RenderDelayBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RenderDelayBuffer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (BufferingEvent)",
    "insertText": "Insert(const Block& block)"
  },
  {
    "label": "PrepareCaptureProcessing()",
    "kind": "Method",
    "detail": "Function (BufferingEvent)",
    "insertText": "PrepareCaptureProcessing()"
  },
  {
    "label": "HandleSkippedCaptureProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSkippedCaptureProcessing()"
  },
  {
    "label": "AlignFromDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlignFromDelay(size_t delay)"
  },
  {
    "label": "AlignFromExternalDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignFromExternalDelay()"
  },
  {
    "label": "Delay()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Delay()"
  },
  {
    "label": "MaxDelay()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxDelay()"
  },
  {
    "label": "GetRenderBuffer()",
    "kind": "Method",
    "detail": "Function (RenderBuffer*)",
    "insertText": "GetRenderBuffer()"
  },
  {
    "label": "GetDownsampledRenderBuffer()",
    "kind": "Method",
    "detail": "Function (const DownsampledRenderBuffer&)",
    "insertText": "GetDownsampledRenderBuffer()"
  },
  {
    "label": "DelayEstimatorOffset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DelayEstimatorOffset(const EchoCanceller3Config& config)"
  },
  {
    "label": "SetAudioBufferDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioBufferDelay(int delay_ms)"
  },
  {
    "label": "HasReceivedBufferDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReceivedBufferDelay()"
  }
]