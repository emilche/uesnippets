[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditorViewport"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FAnimSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSegment"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FAnimMontageSegmentDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimMontageSegmentDetails"
  },
  {
    "label": "SAnimationSegmentViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationSegmentViewport"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "SAnimationSegmentScrubPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationSegmentScrubPanel"
  },
  {
    "label": "SScrubControlPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrubControlPanel"
  },
  {
    "label": "FAnimationSegmentViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationSegmentViewportClient"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AdvancedPreviewScene . h \" # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" EditorViewportClient . h \" # include \" HAL / Platform . h \" # include \" IDetailCustomization . h \" # include \" ITransportControl . h \" # include \" Input / Reply . h \" # include \" Math / Color . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" PreviewScene . h \" # include \" SScrubWidget . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / ObjectPtr . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FSceneInterface ; class IDetailLayoutBuilder ; class IPropertyHandle ; class SEditorViewport ; class STextBlock ; class SViewport ; class UAnimSequenceBase ; class UAnimationAsset ; class USceneComponent ; struct FAnimSegment ; struct FAssetData ; struct FGeometry ; class FAnimMontageSegmentDetails : public IDetailCustomization { public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "OnShouldFilterAnimAsset()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "OnShouldFilterAnimAsset(const FAssetData& AssetData)"
  },
  {
    "label": "GetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (const UAnimSequenceBase*)",
    "insertText": "GetAnimationAsset()"
  },
  {
    "label": "GetAnimationSegment()",
    "kind": "Method",
    "detail": "Function (FAnimSegment*)",
    "insertText": "GetAnimationSegment()"
  },
  {
    "label": "CanEditSegmentProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSegmentProperties()"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationAsset(const FAssetData& InAssetData)"
  },
  {
    "label": "OnStartTimeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartTimeChanged(float InValue, ETextCommit::Type InCommitType, bool bInteractive = false)"
  },
  {
    "label": "OnEndTimeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndTimeChanged(float InValue, ETextCommit::Type InCommitType, bool bInteractive = false)"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "GetAnimationAssetPlayLength()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetAnimationAssetPlayLength()"
  },
  {
    "label": "GetPlayRate()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetPlayRate()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<IPropertyHandle> AnimSegmentHandle ; TSharedPtr<IPropertyHandle> AnimationAssetHandle ; TSharedPtr<IPropertyHandle> AnimStartTimeProperty ; TSharedPtr<IPropertyHandle> AnimEndTimeProperty ; } ; class SAnimationSegmentViewport : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnValueChanged, float, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimationSegmentViewport)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(const UAnimSequenceBase*, AnimRef) SLATE_ATTRIBUTE(TOptional<float>, StartTime) SLATE_ATTRIBUTE(TOptional<float>, EndTime) SLATE_ATTRIBUTE(TOptional<float>, PlayRate) SLATE_EVENT(FOnValueChanged, OnStartTimeChanged) SLATE_EVENT(FOnValueChanged, OnEndTimeChanged) SLATE_END_ARGS() public: SAnimationSegmentViewport()"
  },
  {
    "label": "SAnimationSegmentViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimationSegmentViewport()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RefreshViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshViewport()"
  },
  {
    "label": "InitSkeleton()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitSkeleton()"
  },
  {
    "label": "CleanupComponent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEditorViewportClient> LevelViewportClient ; TAttribute<const UAnimSequenceBase*> AnimationRefAttribute ; TAttribute<TOptional<float>> StartTimeAttribute ; TAttribute<TOptional<float>> EndTimeAttribute ; TAttribute<TOptional<float>> PlayRateAttribute ; FOnValueChanged OnStartTimeChanged ; FOnValueChanged OnEndTimeChanged ; TSharedPtr<SViewport> ViewportWidget ; TSharedPtr<class FSceneViewport> SceneViewport ; TObjectPtr<UAnimSequenceBase> CurrentAnimSequenceBase ; FAdvancedPreviewScene AdvancedPreviewScene ; class UDebugSkelMeshComponent* PreviewComponent ; TSharedPtr<STextBlock> Description ; void)",
    "insertText": "CleanupComponent(USceneComponent* Component)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "GetViewMinInput()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "GetViewMinInput()"
  },
  {
    "label": "GetViewMaxInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMaxInput()"
  },
  {
    "label": "GetPreviewInstance()",
    "kind": "Method",
    "detail": "Function (class UAnimSingleNodeInstance*)",
    "insertText": "GetPreviewInstance()"
  },
  {
    "label": "GetBars()",
    "kind": "Method",
    "detail": "Function (TArray<float>)",
    "insertText": "GetBars()"
  },
  {
    "label": "OnBarDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBarDrag(int32 index, float newPos, bool bInteractive)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimationSegmentScrubPanel : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimationSegmentScrubPanel) : _LockedSequence()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UAnimSequenceBase*, LockedSequence) SLATE_ATTRIBUTE(class UAnimSingleNodeInstance*, PreviewInstance) SLATE_ATTRIBUTE( float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ARGUMENT( bool, bAllowZoom ) SLATE_ATTRIBUTE( TArray<float>, DraggableBars ) SLATE_EVENT( FOnScrubBarDrag, OnBarDrag ) SLATE_EVENT( FOnScrubBarCommit, OnBarCommit ) SLATE_EVENT( FOnTickPlayback, OnTickPlayback ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SAnimationSegmentScrubPanel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimationSegmentScrubPanel()"
  },
  {
    "label": "ReplaceLockedSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLockedSequence(class UAnimSequenceBase * NewLockedSequence)"
  },
  {
    "label": "OnClick_Forward()",
    "kind": "Method",
    "detail": "Function (protected : bool bSliderBeingDragged ; FReply)",
    "insertText": "OnClick_Forward()"
  },
  {
    "label": "AnimChanged()",
    "kind": "Method",
    "detail": "Function (TAttribute<class UAnimSingleNodeInstance*> PreviewInstance ; void)",
    "insertText": "AnimChanged(UAnimationAsset * AnimAsset)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueChanged(float NewValue)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(float NewValue)"
  },
  {
    "label": "GetPlaybackMode()",
    "kind": "Method",
    "detail": "Function (EPlaybackMode::Type)",
    "insertText": "GetPlaybackMode()"
  },
  {
    "label": "IsRealtimeStreamingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealtimeStreamingMode()"
  },
  {
    "label": "GetScrubValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrubValue()"
  },
  {
    "label": "DoesSyncViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SScrubControlPanel> ScrubControlPanel ; class UAnimSequenceBase* LockedSequence ; bool)",
    "insertText": "DoesSyncViewport()"
  },
  {
    "label": "GetNumOfFrames()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumOfFrames()"
  },
  {
    "label": "GetSequenceLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSequenceLength()"
  },
  {
    "label": "FAnimationSegmentViewportClient()",
    "kind": "Method",
    "detail": "Function (} ; class FAnimationSegmentViewportClient : public FEditorViewportClient { public :)",
    "insertText": "FAnimationSegmentViewportClient(FAdvancedPreviewScene& InPreviewScene, const TWeakPtr<SEditorViewport>& InEditorViewportWidget = nullptr)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "GetScene()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "UpdateLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLighting()"
  }
]