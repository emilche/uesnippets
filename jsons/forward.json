[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___UTILITY_FORWARD_H # define _LIBCPP___UTILITY_FORWARD_H # include<__config> # include<__type_traits / is_reference . h> # include<__type_traits / remove_reference . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Tp> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Tp&& forward(typename remove_reference<_Tp>::type& __t)"
  },
  {
    "label": "forward()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Tp&&)",
    "insertText": "forward(typename remove_reference<_Tp>::type&& __t)"
  }
]