[
  {
    "label": "NEON_HALF_TO_FLOAT_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NEON_SPECIALFUNCTIONS_H # define EIGEN_NEON_SPECIALFUNCTIONS_H namespace Eigen { namespace internal { # if EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC # define)",
    "insertText": "NEON_HALF_TO_FLOAT_FUNCTIONS(METHOD) \\ template <> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE \\ Packet8hf METHOD<Packet8hf>(const Packet8hf& x)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (\\ const Packet4f lo = METHOD<)",
    "insertText": "Packet4f(vcvt_f32_f16(vget_low_f16(x)))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (\\ const Packet4f hi = METHOD<)",
    "insertText": "Packet4f(vcvt_f32_f16(vget_high_f16(x)))"
  },
  {
    "label": "vcombine_f16()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vcombine_f16(vcvt_f16_f32(lo), vcvt_f16_f32(hi))"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE \\ Packet4hf METHOD<)",
    "insertText": "Packet4hf(const Packet4hf& x)"
  },
  {
    "label": "vcvt_f16_f32()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vcvt_f16_f32(METHOD<Packet4f>(vcvt_f32_f16(x)))"
  }
]at4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 pzeta<)",
    "insertText": "float4(const float4& x, const float4& q)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::zeta ; return)",
    "insertText": "make_float4(zeta(x.x, q.x), zeta(x.y, q.y), zeta(x.z, q.z), zeta(x.w, q.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 pzeta<)",
    "insertText": "double2(const double2& x, const double2& q)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::zeta ; return)",
    "insertText": "make_double2(zeta(x.x, q.x), zeta(x.y, q.y))"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 ppolygamma<)",
    "insertText": "float4(const float4& n, const float4& x)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::polygamma ; return)",
    "insertText": "make_float4(polygamma(n.x, x.x), polygamma(n.y, x.y), polygamma(n.z, x.z), polygamma(n.w, x.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 ppolygamma<)",
    "insertText": "double2(const double2& n, const double2& x)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::polygamma ; return)",
    "insertText": "make_double2(polygamma(n.x, x.x), polygamma(n.y, x.y))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::erf ; return)",
    "insertText": "make_double2(erf(a.x), erf(a.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::erfc ; return)",
    "insertText": "make_float4(erfc(a.x), erfc(a.y), erfc(a.z), erfc(a.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::erfc ; return)",
    "insertText": "make_double2(erfc(a.x), erfc(a.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::ndtri ; return)",
    "insertText": "make_float4(ndtri(a.x), ndtri(a.y), ndtri(a.z), ndtri(a.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::ndtri ; return)",
    "insertText": "make_double2(ndtri(a.x), ndtri(a.y))"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 pigamma<)",
    "insertText": "float4(const float4& a, const float4& x)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::igamma ; return)",
    "insertText": "make_float4(igamma(a.x, x.x), igamma(a.y, x.y), igamma(a.z, x.z), igamma(a.w, x.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 pigamma<)",
    "insertText": "double2(const double2& a, const double2& x)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::igamma ; return)",
    "insertText": "make_double2(igamma(a.x, x.x), igamma(a.y, x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::igamma_der_a ; return)",
    "insertText": "make_float4(igamma_der_a(a.x, x.x), igamma_der_a(a.y, x.y), igamma_der_a(a.z, x.z), igamma_der_a(a.w, x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::igamma_der_a ; return)",
    "insertText": "make_double2(igamma_der_a(a.x, x.x), igamma_der_a(a.y, x.y))"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 pgamma_sample_der_alpha<)",
    "insertText": "float4(const float4& alpha, const float4& sample)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::gamma_sample_der_alpha ; return)",
    "insertText": "make_float4(gamma_sample_der_alpha(alpha.x, sample.x), gamma_sample_der_alpha(alpha.y, sample.y), gamma_sample_der_alpha(alpha.z, sample.z), gamma_sample_der_alpha(alpha.w, sample.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 pgamma_sample_der_alpha<)",
    "insertText": "double2(const double2& alpha, const double2& sample)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::gamma_sample_der_alpha ; return)",
    "insertText": "make_double2(gamma_sample_der_alpha(alpha.x, sample.x), gamma_sample_der_alpha(alpha.y, sample.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::igammac ; return)",
    "insertText": "make_float4(igammac(a.x, x.x), igammac(a.y, x.y), igammac(a.z, x.z), igammac(a.w, x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::igammac ; return)",
    "insertText": "make_double2(igammac(a.x, x.x), igammac(a.y, x.y))"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 pbetainc<)",
    "insertText": "float4(const float4& a, const float4& b, const float4& x)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::betainc ; return)",
    "insertText": "make_float4(betainc(a.x, b.x, x.x), betainc(a.y, b.y, x.y), betainc(a.z, b.z, x.z), betainc(a.w, b.w, x.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 pbetainc<)",
    "insertText": "double2(const double2& a, const double2& b, const double2& x)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::betainc ; return)",
    "insertText": "make_double2(betainc(a.x, b.x, x.x), betainc(a.y, b.y, x.y))"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 pbessel_i0e<)",
    "insertText": "float4(const float4& x)"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i0e ; return)",
    "insertText": "make_float4(bessel_i0e(x.x), bessel_i0e(x.y), bessel_i0e(x.z), bessel_i0e(x.w))"
  },
  {
    "label": "double2()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE double2 pbessel_i0e<)",
    "insertText": "double2(const double2& x)"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i0e ; return)",
    "insertText": "make_double2(bessel_i0e(x.x), bessel_i0e(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i0 ; return)",
    "insertText": "make_float4(bessel_i0(x.x), bessel_i0(x.y), bessel_i0(x.z), bessel_i0(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i0 ; return)",
    "insertText": "make_double2(bessel_i0(x.x), bessel_i0(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i1e ; return)",
    "insertText": "make_float4(bessel_i1e(x.x), bessel_i1e(x.y), bessel_i1e(x.z), bessel_i1e(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i1e ; return)",
    "insertText": "make_double2(bessel_i1e(x.x), bessel_i1e(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i1 ; return)",
    "insertText": "make_float4(bessel_i1(x.x), bessel_i1(x.y), bessel_i1(x.z), bessel_i1(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_i1 ; return)",
    "insertText": "make_double2(bessel_i1(x.x), bessel_i1(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k0e ; return)",
    "insertText": "make_float4(bessel_k0e(x.x), bessel_k0e(x.y), bessel_k0e(x.z), bessel_k0e(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k0e ; return)",
    "insertText": "make_double2(bessel_k0e(x.x), bessel_k0e(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k0 ; return)",
    "insertText": "make_float4(bessel_k0(x.x), bessel_k0(x.y), bessel_k0(x.z), bessel_k0(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k0 ; return)",
    "insertText": "make_double2(bessel_k0(x.x), bessel_k0(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k1e ; return)",
    "insertText": "make_float4(bessel_k1e(x.x), bessel_k1e(x.y), bessel_k1e(x.z), bessel_k1e(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k1e ; return)",
    "insertText": "make_double2(bessel_k1e(x.x), bessel_k1e(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k1 ; return)",
    "insertText": "make_float4(bessel_k1(x.x), bessel_k1(x.y), bessel_k1(x.z), bessel_k1(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_k1 ; return)",
    "insertText": "make_double2(bessel_k1(x.x), bessel_k1(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_j0 ; return)",
    "insertText": "make_float4(bessel_j0(x.x), bessel_j0(x.y), bessel_j0(x.z), bessel_j0(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_j0 ; return)",
    "insertText": "make_double2(bessel_j0(x.x), bessel_j0(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_j1 ; return)",
    "insertText": "make_float4(bessel_j1(x.x), bessel_j1(x.y), bessel_j1(x.z), bessel_j1(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_j1 ; return)",
    "insertText": "make_double2(bessel_j1(x.x), bessel_j1(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_y0 ; return)",
    "insertText": "make_float4(bessel_y0(x.x), bessel_y0(x.y), bessel_y0(x.z), bessel_y0(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_y0 ; return)",
    "insertText": "make_double2(bessel_y0(x.x), bessel_y0(x.y))"
  },
  {
    "label": "make_float4()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_y1 ; return)",
    "insertText": "make_float4(bessel_y1(x.x), bessel_y1(x.y), bessel_y1(x.z), bessel_y1(x.w))"
  },
  {
    "label": "make_double2()",
    "kind": "Method",
    "detail": "Function (using numext::bessel_y1 ; return)",
    "insertText": "make_double2(bessel_y1(x.x), bessel_y1(x.y))"
  }
]