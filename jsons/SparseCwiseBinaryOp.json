[
  {
    "label": "CwiseBinaryOpImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CwiseBinaryOpImpl"
  },
  {
    "label": "binary_sparse_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "binary_sparse_evaluator"
  },
  {
    "label": "binary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "binary_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "sparse_conjunction_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_conjunction_evaluator"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_CWISE_BINARY_OP_H # define EIGEN_SPARSE_CWISE_BINARY_OP_H namespace Eigen { template<BinaryOp,Lhs,Rhs> class CwiseBinaryOpImpl<BinaryOp,Lhs,Rhs,Sparse> : public SparseMatrixBase<CwiseBinaryOp<BinaryOp,Lhs,Rhs>> { public : typedef CwiseBinaryOp<BinaryOp,Lhs,Rhs> Derived ; typedef SparseMatrixBase<Derived> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(Derived) CwiseBinaryOpImpl()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(( (!internal::is_same<typename internal::traits<Lhs>::StorageKind, typename internal::traits<Rhs>::StorageKind>::value) || ((internal::evaluator<Lhs>::Flags&RowMajorBit) == (internal::evaluator<Rhs>::Flags&RowMajorBit))), THE_STORAGE_ORDER_OF_BOTH_SIDES_MUST_MATCH)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<XprType> struct binary_sparse_evaluator ; template<BinaryOp,Lhs,Rhs> struct binary_evaluator<CwiseBinaryOp<BinaryOp,Lhs,Rhs>,IteratorBased,IteratorBased> : evaluator_base<CwiseBinaryOp<BinaryOp,Lhs,Rhs>> { protected : typedef evaluator<Lhs>::InnerIterator LhsIterator ; typedef evaluator<Rhs>::InnerIterator RhsIterator ; typedef CwiseBinaryOp<BinaryOp,Lhs,Rhs> XprType ; typedef traits<XprType>::Scalar Scalar ; typedef XprType::StorageIndex StorageIndex ; public : class InnerIterator { public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const binary_evaluator& aEval, Index outer) : m_lhsIter(aEval.m_lhsImpl,outer), m_rhsIter(aEval.m_rhsImpl,outer), m_functor(aEval.m_functor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (m_id = m_lhsIter .)",
    "insertText": "index()"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (m_value =)",
    "insertText": "m_functor(m_lhsIter.value(), m_rhsIter.value())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + m_lhsIter ; + + m_rhsIter ; } else)",
    "insertText": "if(m_lhsIter && (!m_rhsIter || (m_lhsIter.index() < m_rhsIter.index())))"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (m_value =)",
    "insertText": "m_functor(m_lhsIter.value(), Scalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + m_lhsIter ; } else)",
    "insertText": "if(m_rhsIter && (!m_lhsIter || (m_lhsIter.index() > m_rhsIter.index())))"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (m_value =)",
    "insertText": "m_functor(Scalar(0), m_rhsIter.value())"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (+ + m_rhsIter ; } else { m_value =)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_id = - 1 ; } return* this ; } EIGEN_STRONG_INLINE Scalar)",
    "insertText": "value()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "binary_evaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "binary_evaluator(const XprType& xpr) : m_functor(xpr.functor()), m_lhsImpl(xpr.lhs()), m_rhsImpl(xpr.rhs())"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<BinaryOp>::Cost)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<Lhs> m_lhsImpl ; evaluator<Rhs> m_rhsImpl ; } ; template<BinaryOp,Lhs,Rhs> struct binary_evaluator<CwiseBinaryOp<BinaryOp,Lhs,Rhs>,IndexBased,IteratorBased> : evaluator_base<CwiseBinaryOp<BinaryOp,Lhs,Rhs>> { protected : typedef evaluator<Rhs>::InnerIterator RhsIterator ; typedef CwiseBinaryOp<BinaryOp,Lhs,Rhs> XprType ; typedef traits<XprType>::Scalar Scalar ; typedef XprType::StorageIndex StorageIndex ; public : class InnerIterator { enum {)",
    "insertText": "IsRowMajor(int(Rhs::Flags)&RowMajorBit)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const binary_evaluator& aEval, Index outer) : m_lhsEval(aEval.m_lhsImpl), m_rhsIter(aEval.m_rhsImpl,outer), m_functor(aEval.m_functor), m_value(0), m_id(-1), m_innerSize(aEval.m_expr.rhs().innerSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + m_id ;)",
    "insertText": "if(m_id<m_innerSize)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar lhsVal = m_lhsEval .)",
    "insertText": "coeff(IsRowMajor?m_rhsIter.outer():m_id, IsRowMajor?m_id:m_rhsIter.outer())"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (m_value =)",
    "insertText": "m_functor(lhsVal, m_rhsIter.value())"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (+ + m_rhsIter ; } else m_value =)",
    "insertText": "m_functor(lhsVal, Scalar(0))"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(m_id<m_innerSize)"
  },
  {
    "label": "binary_evaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "binary_evaluator(const XprType& xpr) : m_functor(xpr.functor()), m_lhsImpl(xpr.lhs()), m_rhsImpl(xpr.rhs()), m_expr(xpr)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<Lhs> m_lhsImpl ; evaluator<Rhs> m_rhsImpl ; const XprType& m_expr ; } ; template<BinaryOp,Lhs,Rhs> struct binary_evaluator<CwiseBinaryOp<BinaryOp,Lhs,Rhs>,IteratorBased,IndexBased> : evaluator_base<CwiseBinaryOp<BinaryOp,Lhs,Rhs>> { protected : typedef evaluator<Lhs>::InnerIterator LhsIterator ; typedef CwiseBinaryOp<BinaryOp,Lhs,Rhs> XprType ; typedef traits<XprType>::Scalar Scalar ; typedef XprType::StorageIndex StorageIndex ; public : class InnerIterator { enum {)",
    "insertText": "IsRowMajor(int(Lhs::Flags)&RowMajorBit)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const binary_evaluator& aEval, Index outer) : m_lhsIter(aEval.m_lhsImpl,outer), m_rhsEval(aEval.m_rhsImpl), m_functor(aEval.m_functor), m_value(0), m_id(-1), m_innerSize(aEval.m_expr.lhs().innerSize())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar rhsVal = m_rhsEval .)",
    "insertText": "coeff(IsRowMajor?m_lhsIter.outer():m_id, IsRowMajor?m_id:m_lhsIter.outer())"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (m_value =)",
    "insertText": "m_functor(m_lhsIter.value(), rhsVal)"
  },
  {
    "label": "m_functor()",
    "kind": "Method",
    "detail": "Function (+ + m_lhsIter ; } else m_value =)",
    "insertText": "m_functor(Scalar(0),rhsVal)"
  },
  {
    "label": "binary_evaluator()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<Lhs> m_lhsImpl ; evaluator<Rhs> m_rhsImpl ; const XprType& m_expr ; } ; template<T,LhsKind = evaluator_traits<T::Lhs>::Kind,RhsKind = evaluator_traits<T::Rhs>::Kind,LhsScalar = traits<T::Lhs>::Scalar,RhsScalar = traits<T::Rhs>::Scalar> struct sparse_conjunction_evaluator ; template<T1,T2,Lhs,Rhs> struct binary_evaluator<CwiseBinaryOp<scalar_product_op<T1,T2>,Lhs,Rhs>,IteratorBased,IteratorBased> : sparse_conjunction_evaluator<CwiseBinaryOp<scalar_product_op<T1,T2>,Lhs,Rhs>> { typedef CwiseBinaryOp<scalar_product_op<T1,T2>,Lhs,Rhs> XprType ; typedef sparse_conjunction_evaluator<XprType> Base ;)",
    "insertText": "binary_evaluator(const XprType& xpr) : Base(xpr)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<XprType> struct sparse_conjunction_evaluator<XprType,IteratorBased,IteratorBased> : evaluator_base<XprType> { protected : typedef XprType::Functor BinaryOp ; typedef XprType::Lhs LhsArg ; typedef XprType::Rhs RhsArg ; typedef evaluator<LhsArg>::InnerIterator LhsIterator ; typedef evaluator<RhsArg>::InnerIterator RhsIterator ; typedef XprType::StorageIndex StorageIndex ; typedef traits<XprType>::Scalar Scalar ; public : class InnerIterator { public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const sparse_conjunction_evaluator& aEval, Index outer) : m_lhsIter(aEval.m_lhsImpl,outer), m_rhsIter(aEval.m_rhsImpl,outer), m_functor(aEval.m_functor)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + m_lhsIter ; + + m_rhsIter ;)",
    "insertText": "while(m_lhsIter && m_rhsIter && (m_lhsIter.index() != m_rhsIter.index()))"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "outer()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} protected : LhsIterator m_lhsIter ; RhsIterator m_rhsIter ; const BinaryOp& m_functor ; } ; enum { CoeffReadCost =)",
    "insertText": "int(evaluator<LhsArg>::CoeffReadCost) + int(evaluator<RhsArg>::CoeffReadCost) + int(functor_traits<BinaryOp>::Cost)"
  },
  {
    "label": "sparse_conjunction_evaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparse_conjunction_evaluator(const XprType& xpr) : m_functor(xpr.functor()), m_lhsImpl(xpr.lhs()), m_rhsImpl(xpr.rhs())"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<LhsArg> m_lhsImpl ; evaluator<RhsArg> m_rhsImpl ; } ; template<XprType> struct sparse_conjunction_evaluator<XprType,IndexBased,IteratorBased> : evaluator_base<XprType> { protected : typedef XprType::Functor BinaryOp ; typedef XprType::Lhs LhsArg ; typedef XprType::Rhs RhsArg ; typedef evaluator<LhsArg> LhsEvaluator ; typedef evaluator<RhsArg>::InnerIterator RhsIterator ; typedef XprType::StorageIndex StorageIndex ; typedef traits<XprType>::Scalar Scalar ; public : class InnerIterator { enum {)",
    "insertText": "IsRowMajor(int(RhsArg::Flags)&RowMajorBit)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const sparse_conjunction_evaluator& aEval, Index outer) : m_lhsEval(aEval.m_lhsImpl), m_rhsIter(aEval.m_rhsImpl,outer), m_functor(aEval.m_functor), m_outer(outer)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<LhsArg> m_lhsImpl ; evaluator<RhsArg> m_rhsImpl ; } ; template<XprType> struct sparse_conjunction_evaluator<XprType,IteratorBased,IndexBased> : evaluator_base<XprType> { protected : typedef XprType::Functor BinaryOp ; typedef XprType::Lhs LhsArg ; typedef XprType::Rhs RhsArg ; typedef evaluator<LhsArg>::InnerIterator LhsIterator ; typedef evaluator<RhsArg> RhsEvaluator ; typedef XprType::StorageIndex StorageIndex ; typedef traits<XprType>::Scalar Scalar ; public : class InnerIterator { enum {)",
    "insertText": "IsRowMajor(int(LhsArg::Flags)&RowMajorBit)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const sparse_conjunction_evaluator& aEval, Index outer) : m_lhsIter(aEval.m_lhsImpl,outer), m_rhsEval(aEval.m_rhsImpl), m_functor(aEval.m_functor), m_outer(outer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : const BinaryOp m_functor ; evaluator<LhsArg> m_lhsImpl ; evaluator<RhsArg> m_rhsImpl ; } ; } template<Derived> template<OtherDerived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_STRONG_INLINE Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_STRONG_INLINE Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> Derived& SparseMatrixBase<Derived)",
    "insertText": "operator(const DiagonalBase<OtherDerived>& other)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived(), internal::sub_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_STRONG_INLINE const SparseMatrixBase<Derived>::template CwiseProductDenseReturnType<OtherDerived>::Type SparseMatrixBase<Derived)",
    "insertText": "cwiseProduct(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<DenseDerived,SparseDerived> EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_sum_op<DenseDerived::Scalar,SparseDerived::Scalar>,const DenseDerived,const SparseDerived>)",
    "insertText": "operator(const MatrixBase<DenseDerived> &a, const SparseMatrixBase<SparseDerived> &b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SparseDerived,DenseDerived> EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_sum_op<SparseDerived::Scalar,DenseDerived::Scalar>,const SparseDerived,const DenseDerived>)",
    "insertText": "operator(const SparseMatrixBase<SparseDerived> &a, const MatrixBase<DenseDerived> &b)"
  }
]