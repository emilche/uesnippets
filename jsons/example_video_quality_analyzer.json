[
  {
    "label": "ExampleVideoQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExampleVideoQualityAnalyzer"
  },
  {
    "label": "ExampleVideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_EXAMPLE_VIDEO_QUALITY_ANALYZER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_EXAMPLE_VIDEO_QUALITY_ANALYZER_H_ # include<atomic> # include<map> # include<set> # include<string> # include \" api / array_view . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_frame . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class ExampleVideoQualityAnalyzer : public VideoQualityAnalyzerInterface { public :)",
    "insertText": "ExampleVideoQualityAnalyzer()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(std::string test_case_name, rtc::ArrayView<const std::string> peer_names, int max_threads_count)"
  },
  {
    "label": "OnFrameCaptured()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "OnFrameCaptured(absl::string_view peer_name, const std::string& stream_label, const VideoFrame& frame)"
  },
  {
    "label": "OnFramePreEncode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFramePreEncode(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnFrameEncoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameEncoded(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& encoded_image, const EncoderStats& stats, bool discarded)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(absl::string_view peer_name, EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "OnFramePreDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFramePreDecode(absl::string_view peer_name, uint16_t frame_id, const EncodedImage& encoded_image)"
  },
  {
    "label": "OnFrameDecoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDecoded(absl::string_view peer_name, const VideoFrame& frame, const DecoderStats& stats)"
  },
  {
    "label": "OnFrameRendered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameRendered(absl::string_view peer_name, const VideoFrame& frame)"
  },
  {
    "label": "OnEncoderError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncoderError(absl::string_view peer_name, const VideoFrame& frame, int32_t error_code)"
  },
  {
    "label": "OnDecoderError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecoderError(absl::string_view peer_name, uint16_t frame_id, int32_t error_code, const DecoderStats& stats)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetStreamLabel()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetStreamLabel(uint16_t frame_id)"
  },
  {
    "label": "frames_captured()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_captured()"
  },
  {
    "label": "frames_pre_encoded()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_pre_encoded()"
  },
  {
    "label": "frames_encoded()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_encoded()"
  },
  {
    "label": "frames_received()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_received()"
  },
  {
    "label": "frames_decoded()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_decoded()"
  },
  {
    "label": "frames_rendered()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_rendered()"
  },
  {
    "label": "frames_dropped()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "frames_dropped()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex lock_ ; std::set<uint16_t> frames_in_flight_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]