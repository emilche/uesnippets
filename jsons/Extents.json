[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / CoordSys . h \" # include \" Core / Vector . h \" # include<cfloat> # include<cassert> # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (class ST_DLL_LINK CExtents { public :)",
    "insertText": "CExtents()"
  },
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CExtents(const st_float32 afExtents[6])"
  },
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CExtents(const Vec3& cMin, const Vec3& cMax)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(void)"
  },
  {
    "label": "SetToZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToZeros(void)"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Order(void)"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Valid(void)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(const st_float32 afPoint[3])"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(const Vec3& vPoint)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(const Vec3& vPoint, st_float32 fRadius)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(const CExtents& cOther)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 fScalar)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(const Vec3& vTranslation)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Orient(const Vec3& vUp, const Vec3& vRight)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(st_float32 fRadians)"
  },
  {
    "label": "ComputeRadiusFromCenter3D()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ComputeRadiusFromCenter3D(void)"
  },
  {
    "label": "ComputeRadiusSquaredFromCenter3D()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ComputeRadiusSquaredFromCenter3D(void)"
  },
  {
    "label": "ComputeRadiusFromCenter2D()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ComputeRadiusFromCenter2D(void)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const Vec3&)",
    "insertText": "Min(void)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const Vec3&)",
    "insertText": "Max(void)"
  },
  {
    "label": "Midpoint()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "Midpoint(st_uint32 uiAxis)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "GetCenter(void)"
  },
  {
    "label": "GetDiagonal()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "GetDiagonal(void)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "GetHeight(void)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "st_float32(void)"
  }
]