[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "ImagePatchCopyOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImagePatchCopyOp"
  },
  {
    "label": "ImagePatchPaddingOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImagePatchPaddingOp"
  },
  {
    "label": "TensorImagePatchOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorImagePatchOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_IMAGE_PATCH_H # define EIGEN_CXX11_TENSOR_TENSOR_IMAGE_PATCH_H namespace Eigen { namespace internal { template<DenseIndex Rows,DenseIndex Cols,XprType> struct traits<TensorImagePatchOp<Rows,Cols,XprType>> : public traits<XprType> { typedef internal::remove_const<XprType::Scalar>::type Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions + 1 ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<DenseIndex Rows,DenseIndex Cols,XprType> struct eval<TensorImagePatchOp<Rows,Cols,XprType>,Eigen::Dense> { typedef const TensorImagePatchOp<Rows,Cols,XprType>& type ; } ; template<DenseIndex Rows,DenseIndex Cols,XprType> struct nested<TensorImagePatchOp<Rows,Cols,XprType>,1,eval<TensorImagePatchOp<Rows,Cols,XprType>>::type> { typedef TensorImagePatchOp<Rows,Cols,XprType> type ; } ; template<Self,bool Vectorizable> struct ImagePatchCopyOp { typedef Self::Index Index ; typedef Self::Scalar Scalar ; typedef Self::Impl Impl ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "Run(const Self& self, const Index num_coeff_to_copy, const Index dst_index, Scalar* dst_data, const Index src_index)"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (const Impl& impl = self .)",
    "insertText": "impl()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (dst_data [ dst_index + i ] = impl .)",
    "insertText": "coeff(src_index + i)"
  },
  {
    "label": "vectorized_size()",
    "kind": "Method",
    "detail": "Function (const Index packet_size = internal::unpacket_traits<Packet>::size ; const Index)",
    "insertText": "vectorized_size(num_coeff_to_copy / packet_size)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (Packet p = impl . template packet<)",
    "insertText": "Unaligned(src_index + i)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<Scalar,Packet,)",
    "insertText": "Unaligned(dst_data + dst_index + i, p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = vectorized_size; i < num_coeff_to_copy; ++i)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Self> struct ImagePatchPaddingOp { typedef Self::Index Index ; typedef Self::Scalar Scalar ; typedef packet_traits<Scalar>::type Packet ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "Run(const Index num_coeff_to_pad, const Scalar padding_value, const Index dst_index, Scalar* dst_data)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Index packet_size = internal::unpacket_traits<Packet>::size ; const Packet padded_packet = internal::pset1<)",
    "insertText": "Packet(padding_value)"
  },
  {
    "label": "vectorized_size()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "vectorized_size(num_coeff_to_pad / packet_size)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<Scalar,Packet,)",
    "insertText": "Unaligned(dst_data + dst_index + i, padded_packet)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = vectorized_size; i < num_coeff_to_pad; ++i)"
  },
  {
    "label": "TensorImagePatchOp()",
    "kind": "Method",
    "detail": "Function (dst_data [ dst_index + i ] = padding_value ; } } } ; } template<DenseIndex Rows,DenseIndex Cols,XprType> class TensorImagePatchOp : public TensorBase<TensorImagePatchOp<Rows,Cols,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorImagePatchOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorImagePatchOp>::type Nested ; typedef Eigen::internal::traits<TensorImagePatchOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorImagePatchOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorImagePatchOp(const XprType& expr, DenseIndex patch_rows, DenseIndex patch_cols, DenseIndex row_strides, DenseIndex col_strides, DenseIndex in_row_strides, DenseIndex in_col_strides, DenseIndex row_inflate_strides, DenseIndex col_inflate_strides, PaddingType padding_type, Scalar padding_value) : m_xpr(expr), m_patch_rows(patch_rows), m_patch_cols(patch_cols), m_row_strides(row_strides), m_col_strides(col_strides), m_in_row_strides(in_row_strides), m_in_col_strides(in_col_strides), m_row_inflate_strides(row_inflate_strides), m_col_inflate_strides(col_inflate_strides), m_padding_explicit(false), m_padding_top(0), m_padding_bottom(0), m_padding_left(0), m_padding_right(0), m_padding_type(padding_type), m_padding_value(padding_value)"
  },
  {
    "label": "TensorImagePatchOp()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorImagePatchOp(const XprType& expr, DenseIndex patch_rows, DenseIndex patch_cols, DenseIndex row_strides, DenseIndex col_strides, DenseIndex in_row_strides, DenseIndex in_col_strides, DenseIndex row_inflate_strides, DenseIndex col_inflate_strides, DenseIndex padding_top, DenseIndex padding_bottom, DenseIndex padding_left, DenseIndex padding_right, Scalar padding_value) : m_xpr(expr), m_patch_rows(patch_rows), m_patch_cols(patch_cols), m_row_strides(row_strides), m_col_strides(col_strides), m_in_row_strides(in_row_strides), m_in_col_strides(in_col_strides), m_row_inflate_strides(row_inflate_strides), m_col_inflate_strides(col_inflate_strides), m_padding_explicit(true), m_padding_top(padding_top), m_padding_bottom(padding_bottom), m_padding_left(padding_left), m_padding_right(padding_right), m_padding_type(PADDING_VALID), m_padding_value(padding_value)"
  },
  {
    "label": "patch_rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC DenseIndex)",
    "insertText": "patch_rows()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims >= 4), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "padding_value()",
    "kind": "Method",
    "detail": "Function (m_paddingValue = op .)",
    "insertText": "padding_value()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "row_strides()",
    "kind": "Method",
    "detail": "Function (m_inputDepth = input_dims [ 0 ] ; m_inputRows = input_dims [ 1 ] ; m_inputCols = input_dims [ 2 ] ; } else { m_inputDepth = input_dims [ NumInputDims - 1 ] ; m_inputRows = input_dims [ NumInputDims - 2 ] ; m_inputCols = input_dims [ NumInputDims - 3 ] ; } m_row_strides = op .)",
    "insertText": "row_strides()"
  },
  {
    "label": "col_strides()",
    "kind": "Method",
    "detail": "Function (m_col_strides = op .)",
    "insertText": "col_strides()"
  },
  {
    "label": "in_row_strides()",
    "kind": "Method",
    "detail": "Function (m_in_row_strides = op .)",
    "insertText": "in_row_strides()"
  },
  {
    "label": "in_col_strides()",
    "kind": "Method",
    "detail": "Function (m_in_col_strides = op .)",
    "insertText": "in_col_strides()"
  },
  {
    "label": "row_inflate_strides()",
    "kind": "Method",
    "detail": "Function (m_row_inflate_strides = op .)",
    "insertText": "row_inflate_strides()"
  },
  {
    "label": "col_inflate_strides()",
    "kind": "Method",
    "detail": "Function (m_col_inflate_strides = op .)",
    "insertText": "col_inflate_strides()"
  },
  {
    "label": "m_input_rows_eff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_input_rows_eff(m_inputRows - 1)"
  },
  {
    "label": "m_input_cols_eff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_input_cols_eff(m_inputCols - 1)"
  },
  {
    "label": "patch_rows()",
    "kind": "Method",
    "detail": "Function (m_patch_rows_eff = op .)",
    "insertText": "patch_rows() + (op.patch_rows() - 1) * (m_in_row_strides - 1)"
  },
  {
    "label": "patch_cols()",
    "kind": "Method",
    "detail": "Function (m_patch_cols_eff = op .)",
    "insertText": "patch_cols() + (op.patch_cols() - 1) * (m_in_col_strides - 1)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_outputRows =)",
    "insertText": "ceil((m_input_rows_eff + op.padding_top() + op.padding_bottom() - m_patch_rows_eff + 1.f) / static_cast<float>(m_row_strides))"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_outputCols =)",
    "insertText": "ceil((m_input_cols_eff + op.padding_left() + op.padding_right() - m_patch_cols_eff + 1.f) / static_cast<float>(m_col_strides))"
  },
  {
    "label": "padding_top()",
    "kind": "Method",
    "detail": "Function (m_rowPaddingTop = op .)",
    "insertText": "padding_top()"
  },
  {
    "label": "padding_left()",
    "kind": "Method",
    "detail": "Function (m_colPaddingLeft = op .)",
    "insertText": "padding_left()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "switch(op.padding_type())"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_outputCols =)",
    "insertText": "ceil((m_input_cols_eff - m_patch_cols_eff + 1.f) / static_cast<float>(m_col_strides))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_rowPaddingTop = numext::maxi<)",
    "insertText": "Index(0, ((m_outputRows - 1) * m_row_strides + m_patch_rows_eff - m_input_rows_eff) / 2)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_colPaddingLeft = numext::maxi<)",
    "insertText": "Index(0, ((m_outputCols - 1) * m_col_strides + m_patch_cols_eff - m_input_cols_eff) / 2)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (break ; case PADDING_SAME : m_outputRows =)",
    "insertText": "ceil(m_input_rows_eff / static_cast<float>(m_row_strides))"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_outputCols =)",
    "insertText": "ceil(m_input_cols_eff / static_cast<float>(m_col_strides))"
  },
  {
    "label": "m_rowPaddingTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_rowPaddingTop((m_outputRows - 1) * m_row_strides + m_patch_rows_eff - m_input_rows_eff)"
  },
  {
    "label": "m_colPaddingLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_colPaddingLeft((m_outputCols - 1) * m_col_strides + m_patch_cols_eff - m_input_cols_eff)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_rowPaddingTop = numext::maxi<)",
    "insertText": "Index(0, m_rowPaddingTop)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_colPaddingLeft = numext::maxi<)",
    "insertText": "Index(0, m_colPaddingLeft)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "eigen_assert(false && \"unexpected padding\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (m_outputCols = 0 ; m_outputRows = 0 ; } })",
    "insertText": "eigen_assert(m_outputRows > 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_outputCols > 0)"
  },
  {
    "label": "patch_cols()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ 2 ] = op .)",
    "insertText": "patch_cols()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ 3 ] = m_outputRows* m_outputCols ;)",
    "insertText": "for(int i = 4; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ NumDims - 4 ] = m_outputRows* m_outputCols ;)",
    "insertText": "for(int i = NumDims-5; i >= 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = input_dims [ i ] ; } })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_colStride = m_dimensions [ 1 ] ; m_patchStride = m_colStride* m_dimensions [ 2 ]* m_dimensions [ 0 ] ; m_otherStride = m_patchStride* m_dimensions [ 3 ] ; } else { m_colStride = m_dimensions [ NumDims - 2 ] ; m_patchStride = m_colStride* m_dimensions [ NumDims - 3 ]* m_dimensions [ NumDims - 1 ] ; m_otherStride = m_patchStride* m_dimensions [ NumDims - 4 ] ; } m_rowInputStride = m_inputDepth ; m_colInputStride = m_inputDepth* m_inputRows ; m_patchInputStride = m_inputDepth* m_inputRows* m_inputCols ; m_fastOtherStride = internal::TensorIntDivisor<)",
    "insertText": "Index(m_otherStride)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastPatchStride = internal::TensorIntDivisor<)",
    "insertText": "Index(m_patchStride)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastColStride = internal::TensorIntDivisor<)",
    "insertText": "Index(m_colStride)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastInflateRowStride = internal::TensorIntDivisor<)",
    "insertText": "Index(m_row_inflate_strides)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastInflateColStride = internal::TensorIntDivisor<)",
    "insertText": "Index(m_col_inflate_strides)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastInputColsEff = internal::TensorIntDivisor<)",
    "insertText": "Index(m_input_cols_eff)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastOutputRows = internal::TensorIntDivisor<)",
    "insertText": "Index(m_outputRows)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastOutputDepth = internal::TensorIntDivisor<)",
    "insertText": "Index(m_dimensions[0])"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} else { m_fastOutputDepth = internal::TensorIntDivisor<)",
    "insertText": "Index(m_dimensions[NumDims-1])"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "patchOffset()",
    "kind": "Method",
    "detail": "Function (const Index patchIndex = index / m_fastPatchStride ; const Index)",
    "insertText": "patchOffset(index - patchIndex * m_patchStride)"
  },
  {
    "label": "otherIndex()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "otherIndex(NumDims == 4)"
  },
  {
    "label": "patch2DIndex()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "patch2DIndex(NumDims == 4) ? patchIndex : (index - otherIndex * m_otherStride)"
  },
  {
    "label": "origInputCol()",
    "kind": "Method",
    "detail": "Function (const Index colIndex = patch2DIndex / m_fastOutputRows ; const Index colOffset = patchOffset / m_fastColStride ; const Index inputCol = colIndex* m_col_strides + colOffset* m_in_col_strides - m_colPaddingLeft ; const Index)",
    "insertText": "origInputCol(m_col_inflate_strides == 1) ? inputCol : ((inputCol >= 0) ? (inputCol / m_fastInflateColStride) : 0)"
  },
  {
    "label": "origInputRow()",
    "kind": "Method",
    "detail": "Function (} const Index rowIndex = patch2DIndex - colIndex* m_outputRows ; const Index rowOffset = patchOffset - colOffset* m_colStride ; const Index inputRow = rowIndex* m_row_strides + rowOffset* m_in_row_strides - m_rowPaddingTop ; const Index)",
    "insertText": "origInputRow(m_row_inflate_strides == 1) ? inputRow : ((inputRow >= 0) ? (inputRow / m_fastInflateRowStride) : 0)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} const int depth_index = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (const Index depth =)",
    "insertText": "index(index / m_fastOutputDepth)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Index inputIndex = depth + origInputRow* m_rowInputStride + origInputCol* m_colInputStride + otherIndex* m_patchInputStride ; return m_impl .)",
    "insertText": "coeff(inputIndex)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const Index indices [ 2 ] = { index,index + PacketSize - 1 } ; const Index patchIndex = indices [ 0 ] / m_fastPatchStride ;)",
    "insertText": "if(patchIndex != indices[1] / m_fastPatchStride)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(otherIndex == indices[1] / m_fastOtherStride)"
  },
  {
    "label": "patchOffsets()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "patchOffsets(indices[0] - patchIndex * m_patchStride) / m_fastOutputDepth, (indices[1] - patchIndex * m_patchStride)"
  },
  {
    "label": "patch2DIndex()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "patch2DIndex(NumDims == 4) ? patchIndex : (indices[0] - otherIndex * m_otherStride)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(patch2DIndex == (indices[1] - otherIndex * m_otherStride) / m_fastPatchStride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index colIndex = patch2DIndex / m_fastOutputRows ; const Index colOffsets [ 2 ] = { patchOffsets [ 0 ] / m_fastColStride,patchOffsets [ 1 ] / m_fastColStride } ; const Index inputCols [ 2 ] = { colIndex* m_col_strides + colOffsets [ 0 ] - m_colPaddingLeft,colIndex* m_col_strides + colOffsets [ 1 ] - m_colPaddingLeft } ;)",
    "insertText": "if(inputCols[1] < 0 || inputCols[0] >= m_inputCols)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(inputCols[0] == inputCols[1])"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index rowIndex = patch2DIndex - colIndex* m_outputRows ; const Index rowOffsets [ 2 ] = { patchOffsets [ 0 ] - colOffsets [ 0 ]* m_colStride,patchOffsets [ 1 ] - colOffsets [ 1 ]* m_colStride } ;)",
    "insertText": "eigen_assert(rowOffsets[0] <= rowOffsets[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index inputRows [ 2 ] = { rowIndex* m_row_strides + rowOffsets [ 0 ] - m_rowPaddingTop,rowIndex* m_row_strides + rowOffsets [ 1 ] - m_rowPaddingTop } ;)",
    "insertText": "if(inputRows[1] < 0 || inputRows[0] >= m_inputRows)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(inputRows[0] >= 0 && inputRows[1] < m_inputRows)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (const Index inputIndex = depth + inputRows [ 0 ]* m_rowInputStride + inputCols [ 0 ]* m_colInputStride + otherIndex* m_patchInputStride ; return m_impl . template packet<)",
    "insertText": "Unaligned(inputIndex)"
  },
  {
    "label": "packetWithPossibleZero()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "packetWithPossibleZero(index)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "rowPaddingTop()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rowPaddingTop()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const double compute_cost = 3* TensorOpCost::DivCost<)",
    "insertText": "Index() + 6 * TensorOpCost::MulCost<Index>() + 8 * TensorOpCost::MulCost<Index>()"
  },
  {
    "label": "packetWithPossibleZero()",
    "kind": "Method",
    "detail": "Function (} protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetWithPossibleZero(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  }
]