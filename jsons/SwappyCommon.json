[
  {
    "label": "SwappyCommonSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwappyCommonSettings"
  },
  {
    "label": "SwappyCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwappyCommon"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SwapHandlers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwapHandlers"
  },
  {
    "label": "Tracer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tracer"
  },
  {
    "label": "FrameDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDuration"
  },
  {
    "label": "FrameDurations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDurations"
  },
  {
    "label": "SwappyTracerCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwappyTracerCallbacks"
  },
  {
    "label": "TimingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingSettings"
  },
  {
    "label": "getFromApp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFromApp(JNIEnv* env, jobject jactivity,\n                           SwappyCommonSettings* out)"
  },
  {
    "label": "getSDKVersion()",
    "kind": "Method",
    "detail": "Function (SdkVersion)",
    "insertText": "getSDKVersion(JNIEnv* env)"
  },
  {
    "label": "queryDisplayTimings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "queryDisplayTimings(JNIEnv* env, jobject jactivity,\n                                    SwappyCommonSettings* out)"
  },
  {
    "label": "getSwapDuration()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getSwapDuration()"
  },
  {
    "label": "onChoreographer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onChoreographer(int64_t frameTimeNanos)"
  },
  {
    "label": "onPreSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onPreSwap(const SwapHandlers& h)"
  },
  {
    "label": "onPostSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onPostSwap(const SwapHandlers& h)"
  },
  {
    "label": "addTracerCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTracerCallbacks(const SwappyTracer& tracer)"
  },
  {
    "label": "removeTracerCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeTracerCallbacks(const SwappyTracer& tracer)"
  },
  {
    "label": "setAutoSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoSwapInterval(bool enabled)"
  },
  {
    "label": "setAutoPipelineMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoPipelineMode(bool enabled)"
  },
  {
    "label": "isDeviceUnsupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDeviceUnsupported()"
  },
  {
    "label": "setANativeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setANativeWindow(ANativeWindow* window)"
  },
  {
    "label": "getSupportedRefreshPeriodsNS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getSupportedRefreshPeriodsNS(uint64_t* out_refreshrates,\n                                     int allocated_entries)"
  },
  {
    "label": "resetFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetFramePacing()"
  },
  {
    "label": "enableFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableFramePacing(bool enable)"
  },
  {
    "label": "enableBlockingWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableBlockingWait(bool enable)"
  },
  {
    "label": "SwappyCommon()",
    "kind": "Method",
    "detail": "Function (testing)",
    "insertText": "SwappyCommon(const SwappyCommonSettings& settings)"
  },
  {
    "label": "addFrameDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addFrameDuration(FrameDuration duration)"
  },
  {
    "label": "wakeClient()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "wakeClient(\n        std::optional<std::chrono::nanoseconds> sfToVsyncDelay)"
  },
  {
    "label": "updateSwapInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "updateSwapInterval()"
  },
  {
    "label": "preSwapBuffersCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preSwapBuffersCallbacks()"
  },
  {
    "label": "postSwapBuffersCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postSwapBuffersCallbacks()"
  },
  {
    "label": "preWaitCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preWaitCallbacks()"
  },
  {
    "label": "postWaitCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postWaitCallbacks(std::chrono::nanoseconds cpuTime,\n                           std::chrono::nanoseconds gpuTime)"
  },
  {
    "label": "startFrameCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startFrameCallbacks()"
  },
  {
    "label": "swapIntervalChangedCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapIntervalChangedCallbacks()"
  },
  {
    "label": "onSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onSettingsChanged()"
  },
  {
    "label": "updateMeasuredSwapDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateMeasuredSwapDuration(std::chrono::nanoseconds duration)"
  },
  {
    "label": "startFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startFrame()"
  },
  {
    "label": "waitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitUntil(int32_t target)"
  },
  {
    "label": "waitUntilTargetFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitUntilTargetFrame()"
  },
  {
    "label": "waitOneFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitOneFrame()"
  },
  {
    "label": "setPreferredDisplayModeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPreferredDisplayModeId(int index)"
  },
  {
    "label": "calculateSwapInterval()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "calculateSwapInterval(std::chrono::nanoseconds frameTime,\n                              std::chrono::nanoseconds refreshPeriod)"
  },
  {
    "label": "updateDisplayTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateDisplayTimings()"
  },
  {
    "label": "waitForNextFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "waitForNextFrame(const SwapHandlers& h)"
  },
  {
    "label": "onRefreshRateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onRefreshRateChanged()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(FrameDuration frameDuration)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (mFrameDurations)",
    "insertText": "GUARDED_BY(mMutex)"
  }
]