[
  {
    "label": "SwappyCommonSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwappyCommonSettings"
  },
  {
    "label": "SwappyCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwappyCommon"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SwapHandlers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwapHandlers"
  },
  {
    "label": "Tracer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tracer"
  },
  {
    "label": "FrameDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDuration"
  },
  {
    "label": "FrameDurations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDurations"
  },
  {
    "label": "SwappyTracerCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwappyTracerCallbacks"
  },
  {
    "label": "TimingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingSettings"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<jni . h> # include<atomic> # include<chrono> # include<deque> # include<list> # include<memory> # include<mutex> # include \" CPUTracer . h \" # include \" ChoreographerFilter . h \" # include \" ChoreographerThread . h \" # include \" SwappyDisplayManager . h \" # include \" Thread . h \" # include \" swappy / swappyGL . h \" # include \" swappy / swappyGL_extra . h \" namespace swappy { using PFN_ANativeWindow_setFrameRate =)",
    "insertText": "int32_t(*)(ANativeWindow* window, float frameRate, int8_t compatibility)"
  },
  {
    "label": "getFromApp()",
    "kind": "Method",
    "detail": "Function (using namespace std::chrono_literals ; struct SwappyCommonSettings { SdkVersion sdkVersion ; std::chrono::nanoseconds refreshPeriod ; std::chrono::nanoseconds appVsyncOffset ; std::chrono::nanoseconds sfVsyncOffset ; bool)",
    "insertText": "getFromApp(JNIEnv* env, jobject jactivity, SwappyCommonSettings* out)"
  },
  {
    "label": "getSDKVersion()",
    "kind": "Method",
    "detail": "Function (SdkVersion)",
    "insertText": "getSDKVersion(JNIEnv* env)"
  },
  {
    "label": "queryDisplayTimings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "queryDisplayTimings(JNIEnv* env, jobject jactivity, SwappyCommonSettings* out)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; class SwappyCommon { public : enum class PipelineMode { Off,On } ; struct SwapHandlers { std::function<)",
    "insertText": "bool()"
  },
  {
    "label": "nanoseconds()",
    "kind": "Method",
    "detail": "Function (std::function<std::)",
    "insertText": "nanoseconds()"
  },
  {
    "label": "SwappyCommon()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SwappyCommon(JNIEnv* env, jobject jactivity)"
  },
  {
    "label": "SwappyCommon()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SwappyCommon()"
  },
  {
    "label": "getSwapDuration()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getSwapDuration()"
  },
  {
    "label": "onChoreographer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onChoreographer(int64_t frameTimeNanos)"
  },
  {
    "label": "onPreSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onPreSwap(const SwapHandlers& h)"
  },
  {
    "label": "needToSetPresentationTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "needToSetPresentationTime()"
  },
  {
    "label": "getCurrentPipelineMode()",
    "kind": "Method",
    "detail": "Function (PipelineMode)",
    "insertText": "getCurrentPipelineMode()"
  },
  {
    "label": "addTracerCallbacks()",
    "kind": "Method",
    "detail": "Function (void* userData ; } ; void)",
    "insertText": "addTracerCallbacks(const SwappyTracer& tracer)"
  },
  {
    "label": "removeTracerCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeTracerCallbacks(const SwappyTracer& tracer)"
  },
  {
    "label": "setAutoSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoSwapInterval(bool enabled)"
  },
  {
    "label": "setAutoPipelineMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoPipelineMode(bool enabled)"
  },
  {
    "label": "setMaxAutoSwapDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxAutoSwapDuration(std::chrono::nanoseconds swapDuration)"
  },
  {
    "label": "getPresentationTime()",
    "kind": "Method",
    "detail": "Function (mAutoSwapIntervalThreshold = swapDuration ; } std::chrono::steady_clock::time_point)",
    "insertText": "getPresentationTime()"
  },
  {
    "label": "isDeviceUnsupported()",
    "kind": "Method",
    "detail": "Function (mFenceTimeout = t ; } bool)",
    "insertText": "isDeviceUnsupported()"
  },
  {
    "label": "setANativeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setANativeWindow(ANativeWindow* window)"
  },
  {
    "label": "setBufferStuffingFixWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBufferStuffingFixWait(int32_t nFrames)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (mBufferStuffingFixWait =)",
    "insertText": "max(0, nFrames)"
  },
  {
    "label": "getSupportedRefreshPeriodsNS()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getSupportedRefreshPeriodsNS(uint64_t* out_refreshrates, int allocated_entries)"
  },
  {
    "label": "setLastLatencyRecordedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLastLatencyRecordedCallback(std::function<int32_t()> callback)"
  },
  {
    "label": "resetFramePacing()",
    "kind": "Method",
    "detail": "Function (mLastLatencyRecorded = callback ; } void)",
    "insertText": "resetFramePacing()"
  },
  {
    "label": "enableFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableFramePacing(bool enable)"
  },
  {
    "label": "enableBlockingWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableBlockingWait(bool enable)"
  },
  {
    "label": "SwappyCommon()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SwappyCommon(const SwappyCommonSettings& settings)"
  },
  {
    "label": "FrameDuration()",
    "kind": "Method",
    "detail": "Function (private : class FrameDuration { public :)",
    "insertText": "FrameDuration()"
  },
  {
    "label": "FrameDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameDuration(std::chrono::nanoseconds cpuTime, std::chrono::nanoseconds gpuTime, bool frameMissedDeadline) : mCpuTime(cpuTime), mGpuTime(gpuTime), mFrameMissedDeadline(frameMissedDeadline)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (mCpuTime =)",
    "insertText": "min(mCpuTime, MAX_DURATION)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (mGpuTime =)",
    "insertText": "min(mGpuTime, MAX_DURATION)"
  },
  {
    "label": "getCpuTime()",
    "kind": "Method",
    "detail": "Function (} std::chrono::nanoseconds)",
    "insertText": "getCpuTime()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return mCpuTime + mGpuTime + FRAME_MARGIN ; } FrameDuration&)",
    "insertText": "operator(const FrameDuration& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mCpuTime - = other . mCpuTime ; mGpuTime - = other . mGpuTime ; return* this ; } FrameDuration)",
    "insertText": "operator(FrameDuration lhs, int rhs)"
  },
  {
    "label": "nanoseconds()",
    "kind": "Method",
    "detail": "Function (lhs . mCpuTime / = rhs ; lhs . mGpuTime / = rhs ; return lhs ; } private : std::chrono::nanoseconds mCpuTime = std::)",
    "insertText": "nanoseconds(0)"
  },
  {
    "label": "milliseconds()",
    "kind": "Method",
    "detail": "Function (bool mFrameMissedDeadline = false ; std::chrono::nanoseconds MAX_DURATION = std::)",
    "insertText": "milliseconds(100)"
  },
  {
    "label": "addFrameDuration()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "addFrameDuration(FrameDuration duration)"
  },
  {
    "label": "wakeClient()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "wakeClient(std::optional<std::chrono::nanoseconds> sfToVsyncDelay)"
  },
  {
    "label": "swapFaster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "swapFaster(int newSwapInterval) REQUIRES(mMutex)"
  },
  {
    "label": "swapSlower()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "swapSlower(const FrameDuration& averageFrameTime, const std::chrono::nanoseconds& upperBound, int newSwapInterval) REQUIRES(mMutex)"
  },
  {
    "label": "updateSwapInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "updateSwapInterval()"
  },
  {
    "label": "preSwapBuffersCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preSwapBuffersCallbacks()"
  },
  {
    "label": "postSwapBuffersCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postSwapBuffersCallbacks()"
  },
  {
    "label": "preWaitCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preWaitCallbacks()"
  },
  {
    "label": "postWaitCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postWaitCallbacks(std::chrono::nanoseconds cpuTime, std::chrono::nanoseconds gpuTime)"
  },
  {
    "label": "startFrameCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startFrameCallbacks()"
  },
  {
    "label": "swapIntervalChangedCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapIntervalChangedCallbacks()"
  },
  {
    "label": "onSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onSettingsChanged()"
  },
  {
    "label": "updateMeasuredSwapDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateMeasuredSwapDuration(std::chrono::nanoseconds duration)"
  },
  {
    "label": "startFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startFrame()"
  },
  {
    "label": "waitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitUntil(int32_t target)"
  },
  {
    "label": "waitUntilTargetFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitUntilTargetFrame()"
  },
  {
    "label": "waitOneFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitOneFrame()"
  },
  {
    "label": "setPreferredDisplayModeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPreferredDisplayModeId(int index)"
  },
  {
    "label": "setPreferredRefreshPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPreferredRefreshPeriod(std::chrono::nanoseconds frameTime) REQUIRES(mMutex)"
  },
  {
    "label": "calculateSwapInterval()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "calculateSwapInterval(std::chrono::nanoseconds frameTime, std::chrono::nanoseconds refreshPeriod)"
  },
  {
    "label": "updateDisplayTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateDisplayTimings()"
  },
  {
    "label": "waitForNextFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "waitForNextFrame(const SwapHandlers& h)"
  },
  {
    "label": "onRefreshRateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onRefreshRateChanged()"
  },
  {
    "label": "swapFasterCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "swapFasterCondition()"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (} const jobject mJactivity ; void* mLibAndroid = nullptr ; PFN_ANativeWindow_setFrameRate mANativeWindow_setFrameRate = nullptr ; JavaVM* mJVM = nullptr ; SwappyCommonSettings mCommonSettings ; std::unique_ptr<ChoreographerFilter> mChoreographerFilter ; bool mUsingExternalChoreographer = false ; std::unique_ptr<ChoreographerThread> mChoreographerThread ; std::mutex mWaitingMutex ; std::condition_variable mWaitingCondition ; std::chrono::steady_clock::time_point mCurrentFrameTimestamp = std::chrono::)",
    "insertText": "now()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (int32_t mCurrentFrame = 0 ; std::optional<std::chrono::nanoseconds> mSfToVsyncDelay ; std::atomic<std::chrono::nanoseconds> mMeasuredSwapDuration ; std::chrono::steady_clock::time_point mSwapTime ; std::mutex mMutex ; class FrameDurations { public : void)",
    "insertText": "add(FrameDuration frameDuration)"
  },
  {
    "label": "hasEnoughSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasEnoughSamples()"
  },
  {
    "label": "getAverageFrameTime()",
    "kind": "Method",
    "detail": "Function (FrameDuration)",
    "insertText": "getAverageFrameTime()"
  },
  {
    "label": "getMissedFramePercent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getMissedFramePercent()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : std::chrono::nanoseconds FRAME_DURATION_SAMPLE_SECONDS = 2 s ; std::deque<std::pair<std::chrono::time_point<std::chrono::steady_clock>,FrameDuration>> mFrames ; FrameDuration mFrameDurationsSum = { } ; int mMissedFrameCount = 0 ; } ; FrameDurations mFrameDurations)",
    "insertText": "GUARDED_BY(mMutex)"
  },
  {
    "label": "nanoseconds()",
    "kind": "Method",
    "detail": "Function (bool mPresentationTimeNeeded ; PipelineMode mPipelineMode = PipelineMode::On ; bool mValid ; std::chrono::nanoseconds mFenceTimeout = std::)",
    "insertText": "nanoseconds(50ms)"
  },
  {
    "label": "from()",
    "kind": "Method",
    "detail": "Function (bool USE_DISPLAY_MANAGER = true ; std::unique_ptr<SwappyDisplayManager> mDisplayManager ; int mNextModeId = - 1 ; std::shared_ptr<SwappyDisplayManager::RefreshPeriodMap> mSupportedRefreshPeriods ; struct TimingSettings { std::chrono::nanoseconds refreshPeriod = { } ; std::chrono::nanoseconds swapDuration = { } ; TimingSettings)",
    "insertText": "from(const Settings& settings)"
  },
  {
    "label": "getDisplayTimings()",
    "kind": "Method",
    "detail": "Function (TimingSettings timingSettings ; timingSettings . refreshPeriod = settings .)",
    "insertText": "getDisplayTimings()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TimingSettings& other)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (float FRAME_RATE_VOTE_MARGIN = 1 . f ; std::function<)",
    "insertText": "int32_t()"
  }
]