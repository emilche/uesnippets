[
  {
    "label": "FSoundFileDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundFileDescription"
  },
  {
    "label": "FSoundFileConvertFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundFileConvertFormat"
  },
  {
    "label": "FSoundFileChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundFileChunkInfo"
  },
  {
    "label": "FSoundFileChunkInfoWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundFileChunkInfoWrapper"
  },
  {
    "label": "ISoundFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundFile"
  },
  {
    "label": "ISoundFileReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundFileReader"
  },
  {
    "label": "ISoundFileWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundFileWriter"
  },
  {
    "label": "CreateDefault()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SoundFileIOEnums . h \" namespace Audio { using SoundFileCount = int64 ; struct FSoundFileDescription { int64 NumFrames = 0 ; int32 SampleRate = 0 ; int32 NumChannels = 0 ; int32 FormatFlags = 0 ; int32 NumSections = 0 ; int32 bIsSeekable = 0 ; } ; struct FSoundFileConvertFormat { int32 Format ; uint32 SampleRate ; double EncodingQuality ; bool bPerformPeakNormalization ; FSoundFileConvertFormat)",
    "insertText": "CreateDefault()"
  },
  {
    "label": "FSoundFileConvertFormat()",
    "kind": "Method",
    "detail": "Function (FSoundFileConvertFormat Default =)",
    "insertText": "FSoundFileConvertFormat()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Default . Format = Audio::ESoundFileFormat::WAV | Audio::ESoundFileFormat::PCM_SIGNED_16 ; Default . SampleRate = 4 8 0 0 0 ; Default . EncodingQuality = 1 . 0 ; Default . bPerformPeakNormalization = false ; return)",
    "insertText": "MoveTemp(Default)"
  },
  {
    "label": "FSoundFileChunkInfoWrapper()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundFileChunkInfo { ANSICHAR ChunkId [ 6 4 ] ; uint32 ChunkIdSize = 0 ; uint32 DataLength = 0 ; void* DataPtr = nullptr ; } ; class FSoundFileChunkInfoWrapper { public :)",
    "insertText": "FSoundFileChunkInfoWrapper()"
  },
  {
    "label": "FSoundFileChunkInfoWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundFileChunkInfoWrapper(const FSoundFileChunkInfoWrapper& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoundFileChunkInfoWrapper&)",
    "insertText": "operator(const FSoundFileChunkInfoWrapper& Other)"
  },
  {
    "label": "FSoundFileChunkInfoWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundFileChunkInfoWrapper(FSoundFileChunkInfoWrapper&& Other)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ChunkInfo.ChunkId, Other.ChunkInfo.ChunkId, sizeof(ChunkInfo.ChunkId))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} ChunkInfo . ChunkIdSize = Other . ChunkInfo . ChunkIdSize ; ChunkInfo . DataLength = Other . ChunkInfo . DataLength ; ChunkInfo . DataPtr = Other . ChunkInfo . DataPtr ; ChunkData =)",
    "insertText": "MoveTemp(Other.ChunkData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSoundFileChunkInfoWrapper&)",
    "insertText": "operator(FSoundFileChunkInfoWrapper&& Other)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (ChunkData = MakeUnique<)",
    "insertText": "uint8(ChunkInfo.DataLength)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ChunkInfo . DataPtr = ChunkData .)",
    "insertText": "Get()"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (} } FSoundFileChunkInfo*)",
    "insertText": "GetPtr()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (} ESoundFileError::Type)",
    "insertText": "GetState(ESoundFileState::Type& OutState)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetError()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetId(uint32& OutId)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetPath(FName& OutPath)"
  },
  {
    "label": "GetBulkData()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetBulkData(TArray<uint8>** OutData)"
  },
  {
    "label": "GetDataSize()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetDataSize(int32& DataSize)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetDescription(FSoundFileDescription& OutDescription)"
  },
  {
    "label": "GetChannelMap()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetChannelMap(TArray<ESoundFileChannelMap::Type>& OutChannelMap)"
  },
  {
    "label": "IsStreamed()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "IsStreamed(bool& bOutIsStreamed)"
  },
  {
    "label": "ISoundFileReader()",
    "kind": "Method",
    "detail": "Function (} ; class ISoundFileReader { public : ~)",
    "insertText": "ISoundFileReader()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ESoundFileError::Type)",
    "insertText": "Init(TSharedPtr<ISoundFile> InSoundFileData, bool bIsStreamed)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "Init(const TArray<uint8>* InData)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "Release()"
  },
  {
    "label": "SeekFrames()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "SeekFrames(SoundFileCount Offset, ESoundFileSeekMode::Type SeekMode, SoundFileCount& OutOffset)"
  },
  {
    "label": "ReadFrames()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "ReadFrames(float* DataPtr, SoundFileCount NumFrames, SoundFileCount& OutNumFramesRead)"
  },
  {
    "label": "ReadFrames()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "ReadFrames(double* DataPtr, SoundFileCount NumFrames, SoundFileCount& OutNumFramesRead)"
  },
  {
    "label": "ReadSamples()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "ReadSamples(float* DataPtr, SoundFileCount NumSamples, SoundFileCount& OutNumSamplesRead)"
  },
  {
    "label": "ReadSamples()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "ReadSamples(double* DataPtr, SoundFileCount NumSamples, SoundFileCount& OutNumSamplesRead)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetDescription(FSoundFileDescription& OutputDescription, TArray<ESoundFileChannelMap::Type>& OutChannelMap)"
  },
  {
    "label": "GetOptionalChunks()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetOptionalChunks(FSoundFileChunkArray& OutChunkInfoArray)"
  },
  {
    "label": "ISoundFileWriter()",
    "kind": "Method",
    "detail": "Function (} ; class ISoundFileWriter { public : ~)",
    "insertText": "ISoundFileWriter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ESoundFileError::Type)",
    "insertText": "Init(const FSoundFileDescription& FileDescription, const TArray<ESoundFileChannelMap::Type>& InChannelMap, double EncodingQuality)"
  },
  {
    "label": "WriteFrames()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "WriteFrames(const float* Data, SoundFileCount NumFrames, SoundFileCount& OutNumFramesWritten)"
  },
  {
    "label": "WriteFrames()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "WriteFrames(const double* Data, SoundFileCount NumFrames, SoundFileCount& OutNumFramesWritten)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "WriteSamples(const float* DataPtr, SoundFileCount NumSamples, SoundFileCount& OutNumSampleWritten)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "WriteSamples(const double* DataPtr, SoundFileCount NumSamples, SoundFileCount& OutNumSampleWritten)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "GetData(TArray<uint8>** OutData)"
  },
  {
    "label": "WriteOptionalChunks()",
    "kind": "Method",
    "detail": "Function (ESoundFileError::Type)",
    "insertText": "WriteOptionalChunks(const FSoundFileChunkArray& ChunkInfoArray)"
  }
]