[
  {
    "label": "CodecSpecificInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfo"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "Error",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "QpThresholds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QpThresholds"
  },
  {
    "label": "KOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KOff"
  },
  {
    "label": "ResolutionBitrateLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ResolutionBitrateLimits"
  },
  {
    "label": "LossNotification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LossNotification"
  },
  {
    "label": "Capabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Capabilities"
  },
  {
    "label": "Settings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Settings"
  },
  {
    "label": "EncodedImageCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_ENCODER_H_ # define API_VIDEO_CODECS_VIDEO_ENCODER_H_ # include<limits> # include<memory> # include<string> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" absl / types / optional . h \" # include \" api / fec_controller_override . h \" # include \" api / units / data_rate . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_codec_constants . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_codec . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct CodecSpecificInfo ; int kDefaultMinPixelsPerFrame = 3 2 0* 1 8 0 ; class RTC_EXPORT EncodedImageCallback { public : ~)",
    "insertText": "EncodedImageCallback()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} struct Result { enum Error { OK,ERROR_SEND_FAILED,} ;)",
    "insertText": "Result(Error error) : error(error)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(Error error, uint32_t frame_id) : error(error), frame_id(frame_id)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (} Error error ; uint32_t frame_id = 0 ; bool drop_next_frame = false ; } ; enum class DropReason : uint8_t { kDroppedByMediaOptimizations,kDroppedByEncoder } ; Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(DropReason reason)"
  },
  {
    "label": "QpThresholds()",
    "kind": "Method",
    "detail": "Function (} } ; class RTC_EXPORT VideoEncoder { public : struct QpThresholds {)",
    "insertText": "QpThresholds(int l, int h) : low(l), high(h)"
  },
  {
    "label": "QpThresholds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "QpThresholds() : low(-1), high(-1)"
  },
  {
    "label": "ScalingSettings()",
    "kind": "Method",
    "detail": "Function (} int low ; int high ; } ; struct RTC_EXPORT ScalingSettings { private : struct KOff { } ; public : KOff kOff = { } ;)",
    "insertText": "ScalingSettings(int low, int high)"
  },
  {
    "label": "ScalingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalingSettings(int low, int high, int min_pixels)"
  },
  {
    "label": "ScalingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalingSettings(const ScalingSettings&)"
  },
  {
    "label": "ScalingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScalingSettings(KOff)"
  },
  {
    "label": "ScalingSettings()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScalingSettings()"
  },
  {
    "label": "ResolutionBitrateLimits()",
    "kind": "Method",
    "detail": "Function (} ; struct ResolutionBitrateLimits {)",
    "insertText": "ResolutionBitrateLimits(int frame_size_pixels, int min_start_bitrate_bps, int min_bitrate_bps, int max_bitrate_bps) : frame_size_pixels(frame_size_pixels), min_start_bitrate_bps(min_start_bitrate_bps), min_bitrate_bps(min_bitrate_bps), max_bitrate_bps(max_bitrate_bps)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int frame_size_pixels = 0 ; int min_start_bitrate_bps = 0 ; int min_bitrate_bps = 0 ; int max_bitrate_bps = 0 ; bool)",
    "insertText": "operator(const ResolutionBitrateLimits& rhs)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT EncoderInfo { uint8_t kMaxFramerateFraction = std::numeric_limits<uint8_t)",
    "insertText": "max()"
  },
  {
    "label": "EncoderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderInfo()"
  },
  {
    "label": "EncoderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderInfo(const EncoderInfo&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const EncoderInfo& rhs)"
  },
  {
    "label": "GetEncoderBitrateLimitsForResolution()",
    "kind": "Method",
    "detail": "Function (} ScalingSettings scaling_settings ; int requested_resolution_alignment ; bool apply_alignment_to_all_simulcast_layers ; bool supports_native_handle ; std::string implementation_name ; bool has_trusted_rate_controller ; bool is_hardware_accelerated ; absl::InlinedVector<uint8_t,kMaxTemporalStreams> fps_allocation [ kMaxSpatialLayers ] ; std::vector<ResolutionBitrateLimits> resolution_bitrate_limits ; absl::optional<ResolutionBitrateLimits>)",
    "insertText": "GetEncoderBitrateLimitsForResolution(int frame_size_pixels)"
  },
  {
    "label": "RateControlParameters()",
    "kind": "Method",
    "detail": "Function (bool supports_simulcast ; absl::InlinedVector<VideoFrameBuffer::Type,kMaxPreferredPixelFormats> preferred_pixel_formats ; absl::optional<bool> is_qp_trusted ; } ; struct RTC_EXPORT RateControlParameters {)",
    "insertText": "RateControlParameters()"
  },
  {
    "label": "RateControlParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateControlParameters(const VideoBitrateAllocation& bitrate, double framerate_fps)"
  },
  {
    "label": "RateControlParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateControlParameters(const VideoBitrateAllocation& bitrate, double framerate_fps, DataRate bandwidth_allocation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoBitrateAllocation target_bitrate ; VideoBitrateAllocation bitrate ; double framerate_fps ; DataRate bandwidth_allocation ; bool)",
    "insertText": "operator(const RateControlParameters& rhs)"
  },
  {
    "label": "Capabilities()",
    "kind": "Method",
    "detail": "Function (} ; struct LossNotification { uint32_t timestamp_of_last_decodable ; uint32_t timestamp_of_last_received ; absl::optional<bool> dependencies_of_last_received_decodable ; absl::optional<bool> last_received_decodable ; } ; struct Capabilities {)",
    "insertText": "Capabilities(bool loss_notification) : loss_notification(loss_notification)"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (} bool loss_notification ; } ; struct Settings {)",
    "insertText": "Settings(const Capabilities& capabilities, int number_of_cores, size_t max_payload_size) : capabilities(capabilities), number_of_cores(number_of_cores), max_payload_size(max_payload_size)"
  },
  {
    "label": "GetDefaultVp8Settings()",
    "kind": "Method",
    "detail": "Function (} Capabilities capabilities ; int number_of_cores ; size_t max_payload_size ; } ; VideoCodecVP8)",
    "insertText": "GetDefaultVp8Settings()"
  },
  {
    "label": "GetDefaultVp9Settings()",
    "kind": "Method",
    "detail": "Function (VideoCodecVP9)",
    "insertText": "GetDefaultVp9Settings()"
  },
  {
    "label": "GetDefaultH264Settings()",
    "kind": "Method",
    "detail": "Function (VideoCodecH264)",
    "insertText": "GetDefaultH264Settings()"
  },
  {
    "label": "VideoEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoEncoder()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, int32_t number_of_cores, size_t max_payload_size)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, const VideoEncoder::Settings& settings)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Encode(const VideoFrame& frame, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const LossNotification& loss_notification)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  }
]