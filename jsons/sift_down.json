[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SIFT_DOWN_H # define _LIBCPP___ALGORITHM_SIFT_DOWN_H # include<__algorithm / iterator_operations . h> # include<__assert> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _RandomAccessIterator> _LIBCPP_CONSTEXPR_AFTER_CXX11 void __sift_down(_RandomAccessIterator __first, _Compare&& __comp, typename iterator_traits<_RandomAccessIterator>::difference_type __len, _RandomAccessIterator __start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ; typedef iterator_traits<_RandomAccessIterator>::difference_type difference_type ; typedef iterator_traits<_RandomAccessIterator>::value_type value_type ; difference_type __child = __start - __first ;)",
    "insertText": "if(__len < 2 || (__len - 2) / 2 < __child)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__child = 2* __child + 1 ; _RandomAccessIterator __child_i = __first + __child ;)",
    "insertText": "if((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1))))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __child_i ; + + __child ; })",
    "insertText": "if(__comp(*__child_i, *__start))"
  },
  {
    "label": "__top()",
    "kind": "Method",
    "detail": "Function (value_type)",
    "insertText": "__top(_Ops::__iter_move(__start))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__start = __child_i ;)",
    "insertText": "if((__len - 2) / 2 < __child)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + __child_i ; + + __child ; } })",
    "insertText": "while(!__comp(*__child_i, __top))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* __start =)",
    "insertText": "move(__top)"
  },
  {
    "label": "__floyd_sift_down()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Compare,class _RandomAccessIterator> _LIBCPP_CONSTEXPR_AFTER_CXX11 _RandomAccessIterator)",
    "insertText": "__floyd_sift_down(_RandomAccessIterator __first, _Compare&& __comp, typename iterator_traits<_RandomAccessIterator>::difference_type __len)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (using difference_type = iterator_traits<_RandomAccessIterator>::difference_type ;)",
    "insertText": "_LIBCPP_ASSERT(__len >= 2, \"shouldn't be called unless __len >= 2\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator __hole = __first ; _RandomAccessIterator __child_i = __first ; difference_type __child = 0 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "difference_type()",
    "kind": "Method",
    "detail": "Function (__child_i + =)",
    "insertText": "difference_type(__child + 1)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (+ + __child_i ; + + __child ; }* __hole = _IterOps<_AlgPolicy)",
    "insertText": "__iter_move(__child_i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__hole = __child_i ;)",
    "insertText": "if(__child > (__len - 2) / 2)"
  }
]