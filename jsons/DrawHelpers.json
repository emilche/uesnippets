[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "FDrawHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawHelpers"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Math / Color . h \" struct FSlateBrush ; namespace UE::Insights { class FDrawContext ; } class FTimingTrackViewport ; class FDrawHelpers { public : void)",
    "insertText": "DrawBackground(const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* BackgroundAreaBrush, const FLinearColor& ValidAreaColor, const FLinearColor& InvalidAreaColor, const FLinearColor& EdgeColor, const float X0, const float X1, const float X2, const float X3, const float Y, const float H, float& OutValidAreaX, float& OutValidAreaW)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBackground(const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* BackgroundAreaBrush, const float X0, const float X1, const float X2, const float X3, const float Y, const float H)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBackground(const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* BackgroundAreaBrush, const FTimingTrackViewport& Viewport, const float Y, const float H)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBackground(const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* BackgroundAreaBrush, const FTimingTrackViewport& Viewport, const float Y, const float H, float& OutValidAreaX, float& OutValidAreaW)"
  },
  {
    "label": "DrawTimeRangeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTimeRangeSelection(const UE::Insights::FDrawContext& DrawContext, const FTimingTrackViewport& Viewport, const double StartTime, const double EndTime, const FSlateBrush* Brush, const FSlateFontInfo& Font)"
  },
  {
    "label": "DrawSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelection(const UE::Insights::FDrawContext& DrawContext, const float MinX, const float MaxX, float SelectionX1, float SelectionX2, const float Y, const float H, const float TextY, const FString Text, const FSlateBrush* Brush, const FSlateFontInfo& Font)"
  }
]