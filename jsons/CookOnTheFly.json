[
  {
    "label": "FArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayReader"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookOnTheFlyMessageHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyMessageHeader"
  },
  {
    "label": "FCookOnTheFlyMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyMessage"
  },
  {
    "label": "FCookOnTheFlyRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyRequest"
  },
  {
    "label": "FCookOnTheFlyResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyResponse"
  },
  {
    "label": "FCookOnTheFlyHostOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyHostOptions"
  },
  {
    "label": "ICookOnTheFlyServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServerConnection"
  },
  {
    "label": "ICookOnTheFlyModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Async / Future . h \" # include \" Misc / Timespan . h \" # include \" Serialization / MemoryReader . h \" # include \" Serialization / MemoryWriter . h \" # include \" Delegates / Delegate . h \" class FArrayReader ; class FInternetAddr ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCookOnTheFly, Log, All)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Cook { enum class ECookOnTheFlyMessage : uint32 { None = 0 x00,Request = 0 x02,Response = 0 x04,TypeFlags = 0 x0F,CookPackage = 0 x20,GetCookedPackages = 0 x30,RecompileShaders = 0 x40,PackagesCooked = 0 x50,FilesAdded = 0 x60,RecookPackages = 0 x70,NetworkPlatformFile = 0 x80,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookOnTheFlyMessage)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ECookOnTheFlyMessage Message)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumRemoveFlags(Message, ECookOnTheFlyMessage::TypeFlags)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; } enum class ECookOnTheFlyMessageStatus : uint32 { None,Ok,Error } ; const TCHAR*)",
    "insertText": "LexToString(ECookOnTheFlyMessageStatus Status)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } struct FCookOnTheFlyMessageHeader { ECookOnTheFlyMessage MessageType = ECookOnTheFlyMessage::None ; ECookOnTheFlyMessageStatus MessageStatus = ECookOnTheFlyMessageStatus::Ok ; uint32 CorrelationId = 0 ; int64 Timestamp = 0 ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookOnTheFlyMessageHeader& Header)"
  },
  {
    "label": "FCookOnTheFlyMessage()",
    "kind": "Method",
    "detail": "Function (} ; class FCookOnTheFlyMessage { public :)",
    "insertText": "FCookOnTheFlyMessage()"
  },
  {
    "label": "FCookOnTheFlyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookOnTheFlyMessage(ECookOnTheFlyMessage MessageType)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (Header . MessageType = MessageType ; } ECookOnTheFlyMessage)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (ECookOnTheFlyMessage MessageType = Header . MessageType ;)",
    "insertText": "EnumRemoveFlags(MessageType, ECookOnTheFlyMessage::TypeFlags)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (Header = InHeader ; } void)",
    "insertText": "SetStatus(ECookOnTheFlyMessageStatus InStatus)"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (Header . MessageStatus = InStatus ; } ECookOnTheFlyMessageStatus)",
    "insertText": "GetStatus()"
  },
  {
    "label": "SetBodyTo()",
    "kind": "Method",
    "detail": "Function (template<BodyType> void)",
    "insertText": "SetBodyTo(BodyType InBody)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Body .)",
    "insertText": "Empty()"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryWriter)",
    "insertText": "Ar(Body)"
  },
  {
    "label": "GetBody()",
    "kind": "Method",
    "detail": "Function (Ar<<InBody ; } TArray<uint8>&)",
    "insertText": "GetBody()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Ar<<Type ; return)",
    "insertText": "MoveTemp(Type)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "ReadBody()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FArchive>)",
    "insertText": "ReadBody()"
  },
  {
    "label": "WriteBody()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "WriteBody()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "FCookOnTheFlyRequest()",
    "kind": "Method",
    "detail": "Function (protected : FCookOnTheFlyMessageHeader Header ; TArray<uint8> Body ; } ; class FCookOnTheFlyRequest : public FCookOnTheFlyMessage { public :)",
    "insertText": "FCookOnTheFlyRequest()"
  },
  {
    "label": "FCookOnTheFlyRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookOnTheFlyRequest(ECookOnTheFlyMessage MessageType) : FCookOnTheFlyMessage(MessageType | ECookOnTheFlyMessage::Request)"
  },
  {
    "label": "FCookOnTheFlyResponse()",
    "kind": "Method",
    "detail": "Function (} } ; class FCookOnTheFlyResponse : public FCookOnTheFlyMessage { public :)",
    "insertText": "FCookOnTheFlyResponse()"
  },
  {
    "label": "FCookOnTheFlyResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookOnTheFlyResponse(ECookOnTheFlyMessage MessageType) : FCookOnTheFlyMessage(MessageType | ECookOnTheFlyMessage::Response)"
  },
  {
    "label": "FCookOnTheFlyResponse()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCookOnTheFlyResponse(const FCookOnTheFlyRequest& Request) : FCookOnTheFlyMessage(Request.GetMessageType())"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (Header . MessageType | = ECookOnTheFlyMessage::Response ; Header . CorrelationId = Request .)",
    "insertText": "GetHeader()"
  },
  {
    "label": "ICookOnTheFlyServerConnection()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCookOnTheFlyHostOptions { TArray<FString> Hosts ; FTimespan ServerStartupWaitTime ; } ; class ICookOnTheFlyServerConnection { public : ~)",
    "insertText": "ICookOnTheFlyServerConnection()"
  },
  {
    "label": "GetHost()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetHost()"
  },
  {
    "label": "GetZenProjectName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetZenProjectName()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "GetZenHostNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>)",
    "insertText": "GetZenHostNames()"
  },
  {
    "label": "GetZenHostPort()",
    "kind": "Method",
    "detail": "Function (const uint16)",
    "insertText": "GetZenHostPort()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsSingleThreaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleThreaded()"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (TFuture<FCookOnTheFlyResponse>)",
    "insertText": "SendRequest(FCookOnTheFlyRequest& Request)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ICookOnTheFlyServerConnection, FMessageEvent, const FCookOnTheFlyMessage&)"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (FMessageEvent&)",
    "insertText": "OnMessage()"
  },
  {
    "label": "ICookOnTheFlyModule()",
    "kind": "Method",
    "detail": "Function (} ; class ICookOnTheFlyModule : public IModuleInterface { public : ~)",
    "insertText": "ICookOnTheFlyModule()"
  },
  {
    "label": "GetDefaultServerConnection()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ICookOnTheFlyServerConnection>)",
    "insertText": "GetDefaultServerConnection()"
  },
  {
    "label": "ConnectToServer()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ICookOnTheFlyServerConnection>)",
    "insertText": "ConnectToServer(const FCookOnTheFlyHostOptions& HostOptions)"
  }
]