[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FArrangedChildren()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Layout / ArrangedWidget . h \" class FArrangedChildren { private : EVisibility VisibilityFilter ; public : typedef TArray<FArrangedWidget,TInlineAllocator<4>> FArrangedWidgetArray ;)",
    "insertText": "FArrangedChildren(EVisibility InVisibilityFilter, bool bInAllow3DWidgets = false ) : VisibilityFilter( InVisibilityFilter ) , bAllow3DWidgets( bInAllow3DWidgets)"
  },
  {
    "label": "Hittest2_FromArray()",
    "kind": "Method",
    "detail": "Function (} FArrangedChildren)",
    "insertText": "Hittest2_FromArray(const TArrayView<FWidgetAndPointer> InWidgets)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren)",
    "insertText": "Temp(EVisibility::All)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Temp . Array .)",
    "insertText": "Reserve(InWidgets.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Temp . Array .)",
    "insertText": "Add(WidgetAndPointer)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} return Temp ; } void)",
    "insertText": "Reverse()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 LastElementIndex = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Swap(WidgetIndex, LastElementIndex - WidgetIndex)"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddWidget(EVisibility VisibilityOverride, const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Add(InWidgetGeometry)"
  },
  {
    "label": "InsertWidget()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertWidget(EVisibility VisibilityOverride, const FArrangedWidget& InWidgetGeometry, int32 Index)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Insert(InWidgetGeometry, Index)"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddWidget(const FArrangedWidget& InWidgetGeometry)"
  },
  {
    "label": "InsertWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertWidget(const FArrangedWidget& InWidgetGeometry, int32 Index)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (VisibilityFilter = InVisibility ; } EVisibility)",
    "insertText": "GetFilter()"
  },
  {
    "label": "Allows3DWidgets()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Allows3DWidgets()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FArrangedWidget&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} FArrangedWidget&)",
    "insertText": "Last()"
  },
  {
    "label": "FindItemIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindItemIndex(const FArrangedWidget& ItemToFind)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<PredicateType> int32)",
    "insertText": "IndexOfByPredicate(const PredicateType& Pred)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<PredicateType> int32)",
    "insertText": "FindLastByPredicate(const PredicateType& Pred)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(int32 Index, int32 Count=1)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(Index, Count)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const FArrangedChildren& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Append(Source.Array)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  }
]