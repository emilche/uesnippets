[
  {
    "label": "TSimpleBlendResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimpleBlendResult"
  },
  {
    "label": "TSimpleBlendResultTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimpleBlendResultTraits"
  },
  {
    "label": "TSimpleBlenderGatherResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimpleBlenderGatherResults"
  },
  {
    "label": "TSimpleBlenderCombineResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimpleBlenderCombineResults"
  },
  {
    "label": "TSimpleBlenderSystemImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpleBlenderSystemImpl"
  },
  {
    "label": "ZeroAccumulationBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneBlenderSystem . h \" # include \" EntitySystem / MovieSceneCachedEntityFilterResult . h \" # include \" EntitySystem / MovieSceneEntitySystemLinker . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" Templates / UnrealTypeTraits . h \" namespace UE { namespace MovieScene { template<PropertyType> struct TSimpleBlendResult { PropertyType Value ; uint32 NumContributors ; } ; template<PropertyType> struct TSimpleBlendResultTraits { void)",
    "insertText": "ZeroAccumulationBuffer(TArrayView<TSimpleBlendResult<PropertyType>> Buffer)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Buffer.GetData(), sizeof(TSimpleBlendResult<PropertyType>) * Buffer.Num())"
  },
  {
    "label": "AccumulateResult()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AccumulateResult(TSimpleBlendResult<PropertyType>& InOutValue, typename TCallTraits<PropertyType>::ParamType Contributor)"
  },
  {
    "label": "BlendResult()",
    "kind": "Method",
    "detail": "Function (InOutValue . Value + = Contributor ; + + InOutValue . NumContributors ; } PropertyType)",
    "insertText": "BlendResult(const TSimpleBlendResult<PropertyType>& InResult)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachEntity(FMovieSceneBlendChannelID BlendChannelInput, PropertyType Value)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (using FResultTraits = TSimpleBlendResultTraits<PropertyType> ;)",
    "insertText": "ensureMsgf(BlendChannelInput.SystemID == SystemID, TEXT(\"Overriding the standard blender system of standard types isn't supported.\"))"
  },
  {
    "label": "AccumulateResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateResult(BlendChannelResults[BlendChannelInput.ChannelID], Value)"
  },
  {
    "label": "TSimpleBlenderCombineResults()",
    "kind": "Method",
    "detail": "Function (} } } ; template<PropertyType> struct TSimpleBlenderCombineResults { FMovieSceneBlenderSystemID SystemID ; TArray<TSimpleBlendResult<PropertyType>>& BlendChannelResults ;)",
    "insertText": "TSimpleBlenderCombineResults(FMovieSceneBlenderSystemID InSystemID, TArray<TSimpleBlendResult<PropertyType>>& InBlendChannelResults) : SystemID(InSystemID) , BlendChannelResults(InBlendChannelResults)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachEntity(FMovieSceneBlendChannelID BlendChannelOutput, PropertyType& OutValue)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (using FResultTraits = TSimpleBlendResultTraits<PropertyType> ;)",
    "insertText": "ensureMsgf(BlendChannelOutput.SystemID == SystemID, TEXT(\"Overriding the standard blender system of standard types isn't supported.\"))"
  },
  {
    "label": "BlendResult()",
    "kind": "Method",
    "detail": "Function (OutValue =)",
    "insertText": "BlendResult(BlendChannelResults[BlendChannelOutput.ChannelID])"
  },
  {
    "label": "TSimpleBlenderSystemImpl()",
    "kind": "Method",
    "detail": "Function (} } } ; template<PropertyType> class TSimpleBlenderSystemImpl { public :)",
    "insertText": "TSimpleBlenderSystemImpl() : BlenderSystem(nullptr)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Setup(UMovieSceneBlenderSystem* InBlenderSystem, TComponentTypeID<PropertyType> InResultComponentID, UClass* ChannelEvaluatorSystem = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlenderSystem = InBlenderSystem ; ResultComponentID = InResultComponentID ;)",
    "insertText": "if(ChannelEvaluatorSystem && BlenderSystem->HasAnyFlags(RF_ClassDefaultObject))"
  },
  {
    "label": "DefineImplicitPrerequisite()",
    "kind": "Method",
    "detail": "Function (BlenderSystem ->)",
    "insertText": "DefineImplicitPrerequisite(ChannelEvaluatorSystem, BlenderSystem->GetClass())"
  },
  {
    "label": "Schedule()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Schedule(UMovieSceneEntitySystemLinker* Linker, TBitArray<>& AllocatedBlendChannels, IEntitySystemScheduler* TaskScheduler)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; const int32 MaximumNumBlends = AllocatedBlendChannels .)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BlendChannelResults .)",
    "insertText": "Reset()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bHasChannels = Linker -> EntityManager .)",
    "insertText": "Contains(FEntityComponentFilter().All({ ResultComponentID, BlenderSystem->GetBlenderTypeTag(), BuiltInComponents->BlendChannelInput }))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (BlendChannelResults .)",
    "insertText": "SetNum(MaximumNumBlends)"
  },
  {
    "label": "AddMemberFunctionTask()",
    "kind": "Method",
    "detail": "Function (} FTaskID ResetWeightsTask = TaskScheduler ->)",
    "insertText": "AddMemberFunctionTask(FTaskParams(TEXT(\"Reset Simple Blender Weights\")), this, &TSimpleBlenderSystemImpl::ZeroAccumulationBuffers)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (FTaskID AccumulateTask =)",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BlendChannelInput) .Read(ResultComponentID) .FilterAll({ BlenderSystem->GetBlenderTypeTag() }) .FilterNone({ BuiltInComponents->Tags.Ignored }) .template Schedule_PerEntity<TSimpleBlenderGatherResults<PropertyType>>( &Linker->EntityManager, TaskScheduler, BlenderSystem->GetBlenderSystemID(), BlendChannelResults)"
  },
  {
    "label": "AddPrerequisite()",
    "kind": "Method",
    "detail": "Function (TaskScheduler ->)",
    "insertText": "AddPrerequisite(ResetWeightsTask, AccumulateTask)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (FTaskID CombineTask =)",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BlendChannelOutput) .Write(ResultComponentID) .FilterAll({ BlenderSystem->GetBlenderTypeTag() }) .FilterNone({ BuiltInComponents->Tags.Ignored }) .template Fork_PerEntity<TSimpleBlenderCombineResults<PropertyType>>( &Linker->EntityManager, TaskScheduler, BlenderSystem->GetBlenderSystemID(), BlendChannelResults)"
  },
  {
    "label": "AddPrerequisite()",
    "kind": "Method",
    "detail": "Function (TaskScheduler ->)",
    "insertText": "AddPrerequisite(AccumulateTask, CombineTask)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run(UMovieSceneEntitySystemLinker* Linker, TBitArray<>& AllocatedBlendChannels, FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "ZeroAccumulationBuffer()",
    "kind": "Method",
    "detail": "Function (} } using FResultTraits = TSimpleBlendResultTraits<PropertyType> ;)",
    "insertText": "ZeroAccumulationBuffer(MakeArrayView(BlendChannelResults))"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (FSystemTaskPrerequisites Prereqs ; FGraphEventRef Task =)",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BlendChannelInput) .Read(ResultComponentID) .FilterAll({ BlenderSystem->GetBlenderTypeTag() }) .FilterNone({ BuiltInComponents->Tags.Ignored }) .template Dispatch_PerEntity<TSimpleBlenderGatherResults<PropertyType>>( &Linker->EntityManager, InPrerequisites, nullptr, BlenderSystem->GetBlenderSystemID(), BlendChannelResults)"
  },
  {
    "label": "AddRootTask()",
    "kind": "Method",
    "detail": "Function (Prereqs .)",
    "insertText": "AddRootTask(Task)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityTaskBuilder() .Read(BuiltInComponents->BlendChannelOutput) .Write(ResultComponentID) .FilterAll({ BlenderSystem->GetBlenderTypeTag() }) .FilterNone({ BuiltInComponents->Tags.Ignored }) .template Dispatch_PerEntity<TSimpleBlenderCombineResults<PropertyType>>( &Linker->EntityManager, Prereqs, &Subsequents, BlenderSystem->GetBlenderSystemID(), BlendChannelResults)"
  },
  {
    "label": "ZeroAccumulationBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ZeroAccumulationBuffers()"
  }
]