[
  {
    "label": "FSchematicGraphTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphTag"
  },
  {
    "label": "FSchematicGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphNode"
  },
  {
    "label": "FSchematicGraphLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphLink"
  },
  {
    "label": "FSchematicGraphModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphModel"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Styling / SlateBrush . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSchematicGraph, Log, All)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (class FSchematicGraphTag ; class FSchematicGraphNode ; class FSchematicGraphLink ; class FSchematicGraphModel ; namespace ESchematicGraphVisibility { enum Type : int { Visible,FadedOut,Hidden } ; })",
    "insertText": "DECLARE_EVENT_TwoParams(FSchematicGraph, FOnSchematicGraphTagAdded, const FSchematicGraphNode*, const FSchematicGraphTag*)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(FSchematicGraph, FOnTagRemoved, const FSchematicGraphNode*, const FSchematicGraphTag*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSchematicGraph, FOnSchematicGraphNodeAdded, const FSchematicGraphNode*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSchematicGraph, FOnNodeRemoved, const FSchematicGraphNode*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSchematicGraph, FOnSchematicGraphLinkAdded, const FSchematicGraphLink*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSchematicGraph, FOnLinkRemoved, const FSchematicGraphLink*)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FSchematicGraph, FOnGraphReset)"
  },
  {
    "label": "SCHEMATICGRAPHELEMENT_BODY_BASE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCHEMATICGRAPHELEMENT_BODY_BASE(ClassName) \\ virtual ~ClassName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} \\ const FName& Type =)",
    "insertText": "TEXT(#ClassName)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (\\ const FName&)",
    "insertText": "GetType()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (\\ return ClassName::Type ; \\ } \\ bool)",
    "insertText": "IsA(const FName& InType)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (\\ return Type = = InType ; \\ } \\ template<ElementType> \\ bool)",
    "insertText": "IsA()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "IsA(ElementType::Type)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ template<T> \\ const T*)",
    "insertText": "Cast(const ClassName* InElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(InElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(InElement->IsA<T>())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ return static_cast<const)",
    "insertText": "T(InElement)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ return nullptr ; \\ } \\ \\ template<T> \\ T*)",
    "insertText": "Cast(ClassName* InElement)"
  },
  {
    "label": "CastChecked()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ return nullptr ; \\ } \\ \\ template<T> \\ const T*)",
    "insertText": "CastChecked(const ClassName* InElement)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(Element)"
  },
  {
    "label": "CastChecked()",
    "kind": "Method",
    "detail": "Function (\\ return Element ; \\ } \\ \\ template<T> \\ T*)",
    "insertText": "CastChecked(ClassName* InElement)"
  },
  {
    "label": "SCHEMATICGRAPHELEMENT_BODY()",
    "kind": "Method",
    "detail": "Function (\\ return Element ; \\ } # define)",
    "insertText": "SCHEMATICGRAPHELEMENT_BODY(ClassName, SuperClass, BaseClass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ClassName::Type == InType)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (\\ return true ; \\ } \\ return)",
    "insertText": "IsA(InType)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ return Cast<)",
    "insertText": "T((const BaseClass*) InElement)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (\\ return Cast<)",
    "insertText": "T((BaseClass*) InElement)"
  }
]