[
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" SequencerCoreFwd . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" namespace UE::Sequencer { class STrackLane ; class SOutlinerViewRow : public ISequencerTreeViewRow { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TSharedRef<SWidget>, FOnGenerateWidgetForColumn, TViewModelPtr<IOutlinerExtension>, const FName&, const TSharedRef<SOutlinerViewRow>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(FReply, FDetectDrag, const FGeometry&, const FPointerEvent&, TSharedRef<SOutlinerViewRow>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsColumnVisible, const FName&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SOutlinerViewRow)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FIsColumnVisible, OnGetColumnVisibility) SLATE_EVENT(FOnGenerateWidgetForColumn, OnGenerateWidgetForColumn) SLATE_EVENT(FDetectDrag, OnDetectDrag) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView, TWeakViewModelPtr<IOutlinerExtension> InDataModel)"
  },
  {
    "label": "SOutlinerViewRow()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SOutlinerViewRow()"
  },
  {
    "label": "GetDataModel()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<IOutlinerExtension>)",
    "insertText": "GetDataModel()"
  },
  {
    "label": "GetTrackLane()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STrackLane>)",
    "insertText": "GetTrackLane(bool bOnlyOwnTrackLane = false)"
  },
  {
    "label": "SetTrackLane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackLane(const TSharedPtr<STrackLane>& InTrackLane)"
  },
  {
    "label": "IsSelectable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectable()"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnPaintDropIndicator()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintDropIndicator(EItemDropZone InItemDropZone, const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructChildren(ETableViewMode::Type InOwnerTableMode, const TAttribute<FMargin>& InPadding, const TSharedRef<SWidget>& InContent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName& InColumnName)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "OnCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "OnCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone ItemDropZone, TWeakViewModelPtr<IOutlinerExtension> InDataModel)"
  },
  {
    "label": "OnAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone ItemDropZone, TWeakViewModelPtr<IOutlinerExtension> InDataModel)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnId)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  }
]