[
  {
    "label": "ReverseFourBytes()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_REVERSE_BYTES_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_REVERSE_BYTES_H_ # include<cstdint> # include \" build / build_config . h \" namespace partition_alloc::internal { uint32_t)",
    "insertText": "ReverseFourBytes(uint32_t value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) return value >> 24 | (value >> 8 & 0xff00) | (value & 0xff00)"
  },
  {
    "label": "__builtin_bswap32()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__builtin_bswap32(value)"
  },
  {
    "label": "ReverseEightBytes()",
    "kind": "Method",
    "detail": "Function (# endif } uint64_t)",
    "insertText": "ReverseEightBytes(uint64_t value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) return value >> 56 | (value >> 40 & 0xff00) | (value >> 24 & 0xff0000) | (value >> 8 & 0xff000000) | (value & 0xff000000) << 8 | (value & 0xff0000) << 24 | (value & 0xff00) << 40 | (value & 0xff)"
  },
  {
    "label": "__builtin_bswap64()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__builtin_bswap64(value)"
  },
  {
    "label": "ReverseBytes()",
    "kind": "Method",
    "detail": "Function (# endif } uintptr_t)",
    "insertText": "ReverseBytes(uintptr_t value)"
  },
  {
    "label": "ReverseEightBytes()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ReverseEightBytes(static_cast<uint64_t>(value))"
  }
]