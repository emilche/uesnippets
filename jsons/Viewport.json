[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewScene"
  },
  {
    "label": "SAutoRefreshViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAutoRefreshViewport"
  },
  {
    "label": "FUMGViewportCameraTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUMGViewportCameraTransform"
  },
  {
    "label": "FUMGViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUMGViewportClient"
  },
  {
    "label": "UViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewport"
  },
  {
    "label": "FUMGViewportCameraTransform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" ShowFlags . h \" # include \" Widgets / SWidget . h \" # include \" UnrealClient . h \" # include \" SceneTypes . h \" # include \" Camera / CameraTypes . h \" # include \" SceneManagement . h \" # include \" Components / ContentWidget . h \" # include \" ViewportClient . h \" # include \" Viewport . generated . h \" class FCanvas ; class FPreviewScene ; class SAutoRefreshViewport ; struct FUMGViewportCameraTransform { public :)",
    "insertText": "FUMGViewportCameraTransform()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation(const FVector& Position)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(const FRotator& Rotation)"
  },
  {
    "label": "SetLookAt()",
    "kind": "Method",
    "detail": "Function (ViewRotation = Rotation ; } void)",
    "insertText": "SetLookAt(const FVector& InLookAt)"
  },
  {
    "label": "SetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (LookAt = InLookAt ; } void)",
    "insertText": "SetOrthoZoom(float InOrthoZoom)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (OrthoZoom = InOrthoZoom ; } const FVector&)",
    "insertText": "GetLocation()"
  },
  {
    "label": "UpdateTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTransition()"
  },
  {
    "label": "ComputeOrbitMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "ComputeOrbitMatrix()"
  },
  {
    "label": "FUMGViewportClient()",
    "kind": "Method",
    "detail": "Function (private : double TransitionStartTime ; FVector ViewLocation ; FRotator ViewRotation ; FVector DesiredLocation ; FVector LookAt ; FVector StartLocation ; float OrthoZoom ; } ; class FUMGViewportClient : public FCommonViewportClient,public FViewElementDrawer { public :)",
    "insertText": "FUMGViewportClient(FPreviewScene* InPreviewScene = nullptr)"
  },
  {
    "label": "FUMGViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FUMGViewportClient()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (using FViewElementDrawer::Draw ; UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* InViewport, FCanvas* Canvas)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float InDeltaTime)"
  },
  {
    "label": "CalcSceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView*)",
    "insertText": "CalcSceneView(FSceneViewFamily* ViewFamily)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "GetScene()"
  },
  {
    "label": "IsAspectRatioConstrained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAspectRatioConstrained()"
  },
  {
    "label": "SetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundColor(FLinearColor InBackgroundColor)"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewLocation(const FVector& NewLocation)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLocation(NewLocation)"
  },
  {
    "label": "SetViewRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewRotation(const FRotator& NewRotation)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetRotation(NewRotation)"
  },
  {
    "label": "SetLookAtLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLookAtLocation(const FVector& LookAt, bool bRecalculateView = false)"
  },
  {
    "label": "SetLookAt()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLookAt(LookAt)"
  },
  {
    "label": "InverseFast()",
    "kind": "Method",
    "detail": "Function (OrbitMatrix = OrbitMatrix .)",
    "insertText": "InverseFast()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetRotation(OrbitMatrix.Rotator())"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetLocation(OrbitMatrix.GetOrigin())"
  },
  {
    "label": "SetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (ViewTransform .)",
    "insertText": "SetOrthoZoom(InOrthoZoom)"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetViewLocation()"
  },
  {
    "label": "GetViewRotation()",
    "kind": "Method",
    "detail": "Function (} const FRotator&)",
    "insertText": "GetViewRotation()"
  },
  {
    "label": "GetLookAtLocation()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetLookAtLocation()"
  },
  {
    "label": "GetOrthoZoom()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOrthoZoom()"
  },
  {
    "label": "GetOrthoUnitsPerPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOrthoUnitsPerPixel(const FViewport* Viewport)"
  },
  {
    "label": "SetEngineShowFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEngineShowFlags(FEngineShowFlags InEngineShowFlags)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (EngineShowFlags = InEngineShowFlags ; } protected : FPreviewScene* PreviewScene ; FMinimalViewInfo ViewInfo ; FLinearColor BackgroundColor ; FUMGViewportCameraTransform ViewTransform ; FViewport* Viewport ; FSceneViewStateReference ViewState ; FEngineShowFlags EngineShowFlags ; } ;)",
    "insertText": "UCLASS(Experimental, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UE_DEPRECATED(5.2, \"Direct access to BackgroundColor is deprecated. Please use the getter or setter.\") UPROPERTY(EditAnywhere, BlueprintReadWrite, Getter, Setter, Category = Appearance)"
  },
  {
    "label": "SetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundColor(const FLinearColor& InColor)"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "OnSlotAdded()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "OnSlotAdded(UPanelSlot* Slot)"
  },
  {
    "label": "OnSlotRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSlotRemoved(UPanelSlot* Slot)"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<class SAutoRefreshViewport> ViewportWidget ; protected : TSharedRef<SWidget>)",
    "insertText": "RebuildWidget()"
  }
]