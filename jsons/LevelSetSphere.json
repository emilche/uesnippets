[
  {
    "label": "LevelSetSphere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetSphere"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Op"
  },
  {
    "label": "createLevelSetSphere()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETSPHERE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETSPHERE_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / util / NullInterrupter . h> # include \" SignedFloodFill . h \" # include<type_traits> # include<tbb / enumerable_thread_specific . h> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<tbb / blocked_range . h> # include<thread> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetSphere(float radius, const openvdb::Vec3f& center, float voxelSize, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr, bool threaded = true)"
  },
  {
    "label": "createLevelSetSphere()",
    "kind": "Method",
    "detail": "Function (template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetSphere(float radius, const openvdb::Vec3f& center, float voxelSize, float halfWidth = float(LEVEL_SET_HALF_WIDTH), bool threaded = true)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT = util::NullInterrupter> class LevelSetSphere { public : using TreeT = GridT::TreeType ; using ValueT = GridT::ValueType ; using Vec3T = math::Vec3<ValueT> ;)",
    "insertText": "static_assert(std::is_floating_point<ValueT>::value, \"level set grids must have scalar, floating-point value types\")"
  },
  {
    "label": "LevelSetSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetSphere(ValueT radius, const Vec3T &center, InterruptT* interrupt = nullptr) : mRadius(radius), mCenter(center), mInterrupt(interrupt)"
  },
  {
    "label": "getLevelSet()",
    "kind": "Method",
    "detail": "Function (} GridT::Ptr)",
    "insertText": "getLevelSet(ValueT voxelSize, ValueT halfWidth, bool threaded = true)"
  },
  {
    "label": "GridT()",
    "kind": "Method",
    "detail": "Function (mGrid = createLevelSet<)",
    "insertText": "GridT(voxelSize, halfWidth)"
  },
  {
    "label": "rasterSphere()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "rasterSphere(voxelSize, halfWidth, threaded)"
  },
  {
    "label": "setGridClass()",
    "kind": "Method",
    "detail": "Function (mGrid ->)",
    "insertText": "setGridClass(GRID_LEVEL_SET)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ValueT r0 = mRadius / dx,rmax = r0 + w ;)",
    "insertText": "if(r0 < 1.5f)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (const Vec3T)",
    "insertText": "c(mCenter[0]/dx, mCenter[1]/dx, mCenter[2]/dx)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (const int imin =)",
    "insertText": "Floor(c[0]-rmax), imax=math::Ceil(c[0]+rmax)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (const int jmin =)",
    "insertText": "Floor(c[1]-rmax), jmax=math::Ceil(c[1]+rmax)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (const int kmin =)",
    "insertText": "Floor(c[2]-rmax), kmax=math::Ceil(c[2]+rmax)"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (GridT::Accessor accessor = mGrid ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "pool()",
    "kind": "Method",
    "detail": "Function (tbb::enumerable_thread_specific<TreeT>)",
    "insertText": "pool(mGrid->tree())"
  },
  {
    "label": "kernel()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "kernel(const tbb::blocked_range<int>& r)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (openvdb::Coord ijk ; int& i = ijk [ 0 ],& j = ijk [ 1 ],& k = ijk [ 2 ],m = 1 ; TreeT& tree = pool .)",
    "insertText": "local()"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (GridT::Accessor)",
    "insertText": "acc(tree)"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const auto x2 =)",
    "insertText": "Pow2(ValueT(i) - c[0])"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const auto x2y2 =)",
    "insertText": "Pow2(ValueT(j) - c[1])"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (m = 1 ; const auto v =)",
    "insertText": "Sqrt(x2y2 + math::Pow2(ValueT(k)-c[2]))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const auto d =)",
    "insertText": "Abs(v)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "setValue(ijk, dx*v)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (} else { m + =)",
    "insertText": "Floor(d-w)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } } ;)",
    "insertText": "if(threaded)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<int>(imin, imax, 128), kernel)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (using RangeT = tbb::blocked_range<tbb::enumerable_thread_specific<TreeT>::iterator> ; struct Op { const bool mDelete ; TreeT* mTree ;)",
    "insertText": "Op(TreeT &tree) : mDelete(false), mTree(&tree)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Op(const Op& other, tbb::split) : mDelete(true), mTree(new TreeT(other.mTree->background()))"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Op()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(RangeT &r)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(Op &other)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "merge(*(other.mTree))"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "merge(TreeT &tree)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (mTree ->)",
    "insertText": "merge(tree, openvdb::MERGE_ACTIVE_STATES)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "op(mGrid->tree())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(RangeT(pool.begin(), pool.end(), 4), op)"
  },
  {
    "label": "kernel()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "kernel(tbb::blocked_range<int>(imin, imax))"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (mGrid ->)",
    "insertText": "tree().merge(*pool.begin(), openvdb::MERGE_ACTIVE_STATES)"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "signedFloodFill(mGrid->tree(), threaded)"
  },
  {
    "label": "createLevelSetSphere()",
    "kind": "Method",
    "detail": "Function (} const ValueT mRadius ; const Vec3T mCenter ; InterruptT* mInterrupt ; GridT::Ptr mGrid ; } ; template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetSphere(float radius, const openvdb::Vec3f& center, float voxelSize, float halfWidth, InterruptT* interrupt, bool threaded)"
  },
  {
    "label": "factory()",
    "kind": "Method",
    "detail": "Function (using ValueT = GridType::ValueType ; LevelSetSphere<GridType,InterruptT>)",
    "insertText": "factory(ValueT(radius), center, interrupt)"
  }
]