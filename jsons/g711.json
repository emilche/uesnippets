[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_THIRD_PARTY_G711_G711_H_ # define MODULES_THIRD_PARTY_G711_G711_H_ # ifdef __cplusplus \" C \" { # endif # include<stdint . h> # if)",
    "insertText": "defined(__i386__) static __inline__ int top_bit(unsigned int bits)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int res ; __asm__)",
    "insertText": "__volatile__(\" movl $-1,%%edx;\\n\" \" bsrl %%eax,%%edx;\\n\" : \"=d\"(res) : \"a\"(bits))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int res ; __asm__)",
    "insertText": "__volatile__(\" movl $-1,%%edx;\\n\" \" bsfl %%eax,%%edx;\\n\" : \"=d\"(res) : \"a\"(bits))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int res ; __asm__)",
    "insertText": "__volatile__(\" movq $-1,%%rdx;\\n\" \" bsrq %%rax,%%rdx;\\n\" : \"=d\"(res) : \"a\"(bits))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int res ; __asm__)",
    "insertText": "__volatile__(\" movq $-1,%%rdx;\\n\" \" bsfq %%rax,%%rdx;\\n\" : \"=d\"(res) : \"a\"(bits))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "if(bits == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 xFFFF0000 ; i + = 1 6 ; })",
    "insertText": "if(bits & 0xFF00FF00)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 xFF00FF00 ; i + = 8 ; })",
    "insertText": "if(bits & 0xF0F0F0F0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 xF0F0F0F0 ; i + = 4 ; })",
    "insertText": "if(bits & 0xCCCCCCCC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 xCCCCCCCC ; i + = 2 ; })",
    "insertText": "if(bits & 0xAAAAAAAA)"
  },
  {
    "label": "bottom_bit()",
    "kind": "Method",
    "detail": "Function (bits& = 0 xAAAAAAAA ; i + = 1 ; } return i ; } __inline int)",
    "insertText": "bottom_bit(unsigned int bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 x0000FFFF ; i - = 1 6 ; })",
    "insertText": "if(bits & 0x00FF00FF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 x00FF00FF ; i - = 8 ; })",
    "insertText": "if(bits & 0x0F0F0F0F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 x0F0F0F0F ; i - = 4 ; })",
    "insertText": "if(bits & 0x33333333)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits& = 0 x33333333 ; i - = 2 ; })",
    "insertText": "if(bits & 0x55555555)"
  },
  {
    "label": "linear_to_ulaw()",
    "kind": "Method",
    "detail": "Function (bits& = 0 x55555555 ; i - = 1 ; } return i ; } # endif # define ULAW_BIAS 0 x84 __inline uint8_t)",
    "insertText": "linear_to_ulaw(int linear)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8_t u_val ; int mask ; int seg ;)",
    "insertText": "if(linear < 0)"
  },
  {
    "label": "top_bit()",
    "kind": "Method",
    "detail": "Function (linear = ULAW_BIAS - linear - 1 ; mask = 0 x7F ; } else { linear = ULAW_BIAS + linear ; mask = 0 xFF ; } seg =)",
    "insertText": "top_bit(linear | 0xFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef ULAW_ZEROTRAP)",
    "insertText": "if(u_val == 0)"
  },
  {
    "label": "ulaw_to_linear()",
    "kind": "Method",
    "detail": "Function (# endif return u_val ; } __inline int16_t)",
    "insertText": "ulaw_to_linear(uint8_t ulaw)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (int t ; ulaw = ~ ulaw ;)",
    "insertText": "t(((ulaw & 0x0F) << 3) + ULAW_BIAS) << (((int)ulaw & 0x70) >> 4)"
  },
  {
    "label": "linear_to_alaw()",
    "kind": "Method",
    "detail": "Function (} # define ALAW_AMI_MASK 0 x55 __inline uint8_t)",
    "insertText": "linear_to_alaw(int linear)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int mask ; int seg ;)",
    "insertText": "if(linear >= 0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(uint8_t)(0x00 ^ mask)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(uint8_t)(((seg << 4) | ((linear >> ((seg) ? (seg + 3) : 4)) & 0x0F)) ^ mask)"
  },
  {
    "label": "alaw_to_linear()",
    "kind": "Method",
    "detail": "Function (} __inline int16_t)",
    "insertText": "alaw_to_linear(uint8_t alaw)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int i ; int seg ; alaw ^ = ALAW_AMI_MASK ;)",
    "insertText": "i((alaw & 0x0F) << 4)"
  },
  {
    "label": "seg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seg(((int)alaw & 0x70) >> 4)"
  },
  {
    "label": "alaw_to_ulaw()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "alaw_to_ulaw(uint8_t alaw)"
  },
  {
    "label": "ulaw_to_alaw()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "ulaw_to_alaw(uint8_t ulaw)"
  }
]