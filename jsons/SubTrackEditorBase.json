[
  {
    "label": "FMovieSceneTimeWarpChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpChannel"
  },
  {
    "label": "FMovieSceneSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceTransform"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FSubSectionPainterParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubSectionPainterParams"
  },
  {
    "label": "FSubSectionPainterResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FSubSectionPainterResult"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "TSubSectionMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubSectionMixin"
  },
  {
    "label": "FSubSectionPainterParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Editor . h \" # include \" ISequencerSection . h \" # include \" Templates / UniquePtr . h \" # include \" Sections / MovieSceneSubSection . h \" # include \" Styling / AppStyle . h \" # include \" Framework / Application / SlateApplication . h \" # include \" ISequencer . h \" # include \" Misc / FrameRate . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" MovieScene . h \" # include \" MovieSceneMetaData . h \" # include \" MovieSceneSequence . h \" # include \" MovieSceneTimeHelpers . h \" # include \" Rendering / DrawElements . h \" # include \" SequencerSectionPainter . h \" # include \" Subsystems / AssetEditorSubsystem . h \" # include \" Tracks / MovieSceneSubTrack . h \" struct FMovieSceneTimeWarpChannel ; struct FMovieSceneSequenceTransform ; class ISequencer ; struct FSubSectionPainterParams {)",
    "insertText": "FSubSectionPainterParams() : bShowTrackNum(true)"
  },
  {
    "label": "FSubSectionPainterParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSubSectionPainterParams(FMargin InContentPadding) : ContentPadding(InContentPadding), bShowTrackNum(true)"
  },
  {
    "label": "PaintSection()",
    "kind": "Method",
    "detail": "Function (} FMargin ContentPadding ; bool bShowTrackNum ; } ; enum FSubSectionPainterResult { FSSPR_Success,FSSPR_InvalidSection,FSSPR_NoInnerSequence } ; class FSubSectionPainterUtil { public : FSubSectionPainterResult)",
    "insertText": "PaintSection(TSharedPtr<const ISequencer> Sequencer, const UMovieSceneSubSection& SectionObject, FSequencerSectionPainter& InPainter, FSubSectionPainterParams Params)"
  },
  {
    "label": "PaintSectionBounds()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PaintSectionBounds(const UMovieSceneSubSection& SectionObject, const UMovieSceneSequence& InnerSequence, FSequencerSectionPainter& InPainter, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "FSubSectionEditorUtil()",
    "kind": "Method",
    "detail": "Function (} ; class FSubSectionEditorUtil { public :)",
    "insertText": "FSubSectionEditorUtil(UMovieSceneSubSection& InSection)"
  },
  {
    "label": "FSubSectionEditorUtil()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSubSectionEditorUtil()"
  },
  {
    "label": "BeginResizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginResizeSection()"
  },
  {
    "label": "ResizeSection()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "ResizeSection(ESequencerSectionResizeMode ResizeMode, FFrameNumber ResizeTime)"
  },
  {
    "label": "BeginSlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlipSection()"
  },
  {
    "label": "SlipSection()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "SlipSection(FFrameNumber SlipTime)"
  },
  {
    "label": "BeginDilateSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDilateSection()"
  },
  {
    "label": "DilateSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DilateSection(const TRange<FFrameNumber>& NewRange, float DilationFactor)"
  },
  {
    "label": "CanAddSubSequence()",
    "kind": "Method",
    "detail": "Function (private : UMovieSceneSubSection& SectionObject ; TUniquePtr<FMovieSceneSequenceTransform> InitialDragTransform ; TUniquePtr<FMovieSceneTimeWarpChannel> PreDilateChannel ; double PreDilateTimeScale ; } ; class FSubTrackEditorUtil { public : bool)",
    "insertText": "CanAddSubSequence(const UMovieSceneSequence* CurrentSequence, const UMovieSceneSequence& SubSequence)"
  },
  {
    "label": "FindOrAddMetaData()",
    "kind": "Method",
    "detail": "Function (UMovieSceneMetaData*)",
    "insertText": "FindOrAddMetaData(UMovieSceneSequence* Sequence)"
  },
  {
    "label": "GetMetaDataText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMetaDataText(const UMovieSceneSequence* Sequence)"
  },
  {
    "label": "TSubSectionMixin()",
    "kind": "Method",
    "detail": "Function (} ; template<ParentSectionClass = ISequencerSection> class TSubSectionMixin : public ParentSectionClass { public : template<. . . ParentCtorParams>)",
    "insertText": "TSubSectionMixin(TSharedPtr<ISequencer> InSequencer, UMovieSceneSubSection& InSection, ParentCtorParams&&... Params)"
  },
  {
    "label": "GetSectionObject()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "GetSectionObject()"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionToolTip()"
  },
  {
    "label": "GetSectionTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetSectionTime(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "OnSectionDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSectionDoubleClicked(const FGeometry& SectionGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "RequestDeleteKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestDeleteKeyArea(const TArray<FName>& KeyAreaNamePath)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (protected : const float TrackHeight ; TSharedPtr<ISequencer>)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetSubSectionObject()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneSubSection&)",
    "insertText": "GetSubSectionObject()"
  },
  {
    "label": "GetSectionObjectAs()",
    "kind": "Method",
    "detail": "Function (} template<SectionType> const SectionType&)",
    "insertText": "GetSectionObjectAs()"
  },
  {
    "label": "TSubSectionMixin()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<ISequencer> SequencerPtr ; UMovieSceneSubSection& SubSectionObject ; FSubSectionEditorUtil EditorUtil ; } ; template<ParentSectionClass> const float TSubSectionMixin<ParentSectionClass>::TrackHeight = 5 0 . f ; template<ParentSectionClass> template<. . . ParentCtorParams> TSubSectionMixin<ParentSectionClass)",
    "insertText": "TSubSectionMixin(TSharedPtr<ISequencer> InSequencer, UMovieSceneSubSection& InSection, ParentCtorParams&&... Params) : ParentSectionClass(std::forward<ParentCtorParams>(Params)...) , SequencerPtr(InSequencer) , SubSectionObject(InSection) , EditorUtil(InSection)"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "LOCTEXT(\"NoSequenceSelected\", \"No Sequence Selected\")"
  },
  {
    "label": "UMovieScene()",
    "kind": "Method",
    "detail": "Function (const UMovieScene* MovieScene = SubSectionObject . GetTypedOuter<)",
    "insertText": "UMovieScene()"
  },
  {
    "label": "GetSequence()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneSequence* InnerSequence = SubSectionObject .)",
    "insertText": "GetSequence()"
  },
  {
    "label": "GetMovieScene()",
    "kind": "Method",
    "detail": "Function (const UMovieScene* InnerMovieScene = InnerSequence ? InnerSequence ->)",
    "insertText": "GetMovieScene()"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (} FFrameRate InnerTickResolution = InnerMovieScene ->)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "ConvertFrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime SectionLength =)",
    "insertText": "ConvertFrameTime(SubSectionObject.GetExclusiveEndFrame() - SubSectionObject.GetInclusiveStartFrame(), MovieScene->GetTickResolution(), InnerTickResolution)"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime StartOffset = SubSectionObject .)",
    "insertText": "GetOffsetTime().Get(0)"
  },
  {
    "label": "GetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (FFrameTime InnerStartTime = InnerMovieScene ->)",
    "insertText": "GetPlaybackRange().GetLowerBoundValue()"
  },
  {
    "label": "ConvertFrameTime()",
    "kind": "Method",
    "detail": "Function (int32 InnerStartFrame =)",
    "insertText": "ConvertFrameTime(InnerStartTime, InnerTickResolution, InnerMovieScene->GetDisplayRate()).RoundToFrame()"
  },
  {
    "label": "ConvertFrameTime()",
    "kind": "Method",
    "detail": "Function (int32 InnerFrameLength =)",
    "insertText": "ConvertFrameTime(FMath::Min(SectionLength, InnerMovieScene->GetPlaybackRange().GetUpperBoundValue() - InnerStartTime), InnerTickResolution, InnerMovieScene->GetDisplayRate()).RoundToFrame()"
  },
  {
    "label": "GetMetaDataText()",
    "kind": "Method",
    "detail": "Function (int32 InnerEndFrame = InnerStartFrame + InnerFrameLength ; FText MetaDataText =)",
    "insertText": "GetMetaDataText(InnerSequence)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Format(LOCTEXT(\"ToolTipContentFormatWithMetaData\", \"{0} - {1} ({2} frames @ {3})\\n\\n{4}\"), InnerStartFrame, InnerEndFrame, InnerFrameLength, InnerMovieScene->GetDisplayRate().ToPrettyText(), MetaDataText)"
  },
  {
    "label": "GetLocalTime()",
    "kind": "Method",
    "detail": "Function (} FFrameTime CurrentTime = Sequencer ->)",
    "insertText": "GetLocalTime()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!SubSectionObject.GetSequence() || !SubSectionObject.GetSequence()->GetMovieScene())"
  },
  {
    "label": "GetSequence()",
    "kind": "Method",
    "detail": "Function (} const UMovieScene* SubSequenceMovieScene = SubSectionObject .)",
    "insertText": "GetSequence()->GetMovieScene()"
  },
  {
    "label": "OuterToInnerTransform()",
    "kind": "Method",
    "detail": "Function (const FFrameTime HintFrameTime = CurrentTime* SubSectionObject .)",
    "insertText": "OuterToInnerTransform()"
  },
  {
    "label": "PaintSectionBackground()",
    "kind": "Method",
    "detail": "Function (InPainter . LayerId = InPainter .)",
    "insertText": "PaintSectionBackground()"
  },
  {
    "label": "PaintSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintSection(this->GetSequencer(), SubSectionObject, InPainter, FSubSectionPainterParams(this->GetContentPadding()))"
  },
  {
    "label": "UAssetEditorSubsystem()",
    "kind": "Method",
    "detail": "Function (GEditor -> GetEditorSubsystem<)",
    "insertText": "UAssetEditorSubsystem()->OpenEditorForAsset(SubSectionObject.GetSequence())"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "GetSequencer()->FocusSequenceInstance(SubSectionObject)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "Handled()"
  },
  {
    "label": "ResizeSection()",
    "kind": "Method",
    "detail": "Function (ResizeTime = EditorUtil .)",
    "insertText": "ResizeSection(ResizeMode, ResizeTime)"
  },
  {
    "label": "SlipSection()",
    "kind": "Method",
    "detail": "Function (SlipTime = EditorUtil .)",
    "insertText": "SlipSection(SlipTime)"
  },
  {
    "label": "DilateSection()",
    "kind": "Method",
    "detail": "Function (EditorUtil .)",
    "insertText": "DilateSection(NewRange, DilationFactor)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (SubSectionObject .)",
    "insertText": "Modify()"
  },
  {
    "label": "DeleteChannels()",
    "kind": "Method",
    "detail": "Function (SubSectionObject .)",
    "insertText": "DeleteChannels(KeyAreaNamePath)"
  }
]