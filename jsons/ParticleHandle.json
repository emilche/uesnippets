[
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "UGeometryCollectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionComponent"
  },
  {
    "label": "FConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandle"
  },
  {
    "label": "FPBDRigidsEvolutionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionBase"
  },
  {
    "label": "FConvexOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexOptimizer"
  },
  {
    "label": "FGeometryParticleParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryParticleParameters"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FKinematicGeometryParticleParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKinematicGeometryParticleParameters"
  },
  {
    "label": "FPBDRigidParticleParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPBDRigidParticleParameters"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "TParticleHandleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticleHandleBase"
  },
  {
    "label": "TConstParticleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstParticleIterator"
  },
  {
    "label": "TKinematicGeometryParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TKinematicGeometryParticleHandleImp"
  },
  {
    "label": "TPBDRigidParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidParticleHandleImp"
  },
  {
    "label": "TGeometryParticleHandles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticleHandles"
  },
  {
    "label": "TGeometryParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticleHandleImp"
  },
  {
    "label": "FInvalidFromTransient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvalidFromTransient"
  },
  {
    "label": "TPBDRigidClusteredParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidClusteredParticleHandleImp"
  },
  {
    "label": "FRigidClustering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClustering"
  },
  {
    "label": "TPBDGeometryCollectionParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDGeometryCollectionParticleHandleImp"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericParticleHandleImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericParticleHandleImp"
  },
  {
    "label": "FGenericParticleHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericParticleHandle"
  },
  {
    "label": "FConstGenericParticleHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstGenericParticleHandle"
  },
  {
    "label": "TKinematicGeometryParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TKinematicGeometryParticle"
  },
  {
    "label": "TPBDRigidParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidParticle"
  },
  {
    "label": "FParticleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleData"
  },
  {
    "label": "TGeometryParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticle"
  },
  {
    "label": "FPBDGeometryCollectionParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDGeometryCollectionParticle"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "ISpatialAcceleration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAcceleration"
  },
  {
    "label": "ISpatialVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialVisitor"
  },
  {
    "label": "ForceDeepCopyOnModifyGeometry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / NumericLimits . h \" # include \" Chaos / ChaosUserEntity . h \" # include \" Chaos / ISpatialAcceleration . h \" # include \" Chaos / PBDRigidClusteredParticles . h \" # include \" Chaos / PBDGeometryCollectionParticles . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / ParticleIterator . h \" # include \" Chaos / Properties . h \" # include \" Chaos / Collision / CollisionFilterBits . h \" # include \" ChaosCheck . h \" # include \" Chaos / ChaosDebugDrawDeclares . h \" # include \" Chaos / AsyncInitBodyHelper . h \" # include \" ChaosVisualDebugger / ChaosVisualDebuggerTrace . h \" # include \" PhysicsInterfaceTypesCore . h \" # if CHAOS_DEBUG_DRAW # include \" Chaos / ChaosDebugDraw . h \" # endif # ifndef UE_DEBUG_DANGLING_HANDLES # define UE_DEBUG_DANGLING_HANDLES 0 # endif class IPhysicsProxyBase ; class UGeometryCollectionComponent ; namespace Chaos { class FConstraintHandle ; class FPBDRigidsEvolutionBase ; namespace Private { class FConvexOptimizer ; FString EmptyParticleName ; } namespace CVars { bool)",
    "insertText": "ForceDeepCopyOnModifyGeometry()"
  },
  {
    "label": "FGeometryParticleParameters()",
    "kind": "Method",
    "detail": "Function (} struct FGeometryParticleParameters {)",
    "insertText": "FGeometryParticleParameters() : bDisabled(false)"
  },
  {
    "label": "FKinematicGeometryParticleParameters()",
    "kind": "Method",
    "detail": "Function (struct FKinematicGeometryParticleParameters : public FGeometryParticleParameters {)",
    "insertText": "FKinematicGeometryParticleParameters() : FGeometryParticleParameters()"
  },
  {
    "label": "FPBDRigidParticleParameters()",
    "kind": "Method",
    "detail": "Function (struct FPBDRigidParticleParameters : public FKinematicGeometryParticleParameters {)",
    "insertText": "FPBDRigidParticleParameters() : FKinematicGeometryParticleParameters() , bStartSleeping(false) , bGravityEnabled(true) , bCCDEnabled(false)"
  },
  {
    "label": "GeometryParticleDefaultConstruct()",
    "kind": "Method",
    "detail": "Function (template<T,int d,FConcrete> void)",
    "insertText": "GeometryParticleDefaultConstruct(FConcrete& Concrete, const FGeometryParticleParameters& Params)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetX(TVector<T, d>(0))"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetR(TRotation<T, d>::Identity)"
  },
  {
    "label": "SetSpatialIdx()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetSpatialIdx(FSpatialAccelerationIdx{ 0,0 })"
  },
  {
    "label": "SetResimType()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetResimType(EResimType::FullResim)"
  },
  {
    "label": "SetEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetEnabledDuringResim(true)"
  },
  {
    "label": "KinematicGeometryParticleDefaultConstruct()",
    "kind": "Method",
    "detail": "Function (} int32 AccelerationStructureSplitStaticAndDynamic ; template<T,int d,FConcrete> void)",
    "insertText": "KinematicGeometryParticleDefaultConstruct(FConcrete& Concrete, const FKinematicGeometryParticleParameters& Params)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetV(TVector<T, d>(0))"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetW(TVector<T, d>(0))"
  },
  {
    "label": "SetSpatialIdx()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetSpatialIdx(FSpatialAccelerationIdx{ 0,1 })"
  },
  {
    "label": "PBDRigidParticleDefaultConstruct()",
    "kind": "Method",
    "detail": "Function (} } template<T,int d,FConcrete> void)",
    "insertText": "PBDRigidParticleDefaultConstruct(FConcrete& Concrete, const FPBDRigidParticleParameters& Params)"
  },
  {
    "label": "SetCollisionGroup()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetCollisionGroup(0)"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetLinearImpulseVelocity(TVector<T, d>(0))"
  },
  {
    "label": "SetAngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetAngularImpulseVelocity(TVector<T, d>(0))"
  },
  {
    "label": "SetMaxLinearSpeedSq()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetMaxLinearSpeedSq(TNumericLimits<T>::Max())"
  },
  {
    "label": "SetMaxAngularSpeedSq()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetMaxAngularSpeedSq(TNumericLimits<T>::Max())"
  },
  {
    "label": "SetInitialOverlapDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetInitialOverlapDepenetrationVelocity(-1.0f)"
  },
  {
    "label": "SetSleepThresholdMultiplier()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetSleepThresholdMultiplier(1.0f)"
  },
  {
    "label": "SetM()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetM(1)"
  },
  {
    "label": "SetInvM()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetInvM(1)"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetCenterOfMass(TVector<T,d>(0))"
  },
  {
    "label": "SetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetRotationOfMass(TRotation<T, d>::FromIdentity())"
  },
  {
    "label": "SetI()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetI(TVec3<FRealSingle>(1, 1, 1))"
  },
  {
    "label": "SetInvI()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetInvI(TVec3<FRealSingle>(1, 1, 1))"
  },
  {
    "label": "SetLinearEtherDrag()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetLinearEtherDrag(0.f)"
  },
  {
    "label": "SetAngularEtherDrag()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetAngularEtherDrag(0.f)"
  },
  {
    "label": "SetGravityEnabled()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetGravityEnabled(Params.bGravityEnabled)"
  },
  {
    "label": "SetGravityGroupIndex()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetGravityGroupIndex(0)"
  },
  {
    "label": "SetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetCCDEnabled(Params.bCCDEnabled)"
  },
  {
    "label": "SetMACDEnabled()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetMACDEnabled(false)"
  },
  {
    "label": "SetIterationSettings()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetIterationSettings(Private::FIterationSettings(INDEX_NONE, INDEX_NONE, INDEX_NONE))"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetDisabled(Params.bDisabled)"
  },
  {
    "label": "SetSleepType()",
    "kind": "Method",
    "detail": "Function (Concrete .)",
    "insertText": "SetSleepType(ESleepType::MaterialSleep)"
  },
  {
    "label": "PBDRigidClusteredParticleDefaultConstruct()",
    "kind": "Method",
    "detail": "Function (} template<T,int d,FConcrete> void)",
    "insertText": "PBDRigidClusteredParticleDefaultConstruct(FConcrete& Concrete, const FPBDRigidParticleParameters& Params)"
  },
  {
    "label": "GeometryParticleSleeping()",
    "kind": "Method",
    "detail": "Function (} template<FConcrete> bool)",
    "insertText": "GeometryParticleSleeping(const FConcrete& Concrete)"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (} else { return Concrete .)",
    "insertText": "ObjectState()"
  },
  {
    "label": "PrePreQueryFilterImp()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "PrePreQueryFilterImp(const FCollisionFilterData& QueryFilterData, const FCollisionFilterData& UnionFilterData)"
  },
  {
    "label": "QuerierChannel()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "QuerierChannel(QueryFilterData.Word3 << 6) >> (32 - 5)"
  },
  {
    "label": "QuerierBit()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "QuerierBit(1 << (QuerierChannel))"
  },
  {
    "label": "TouchOrBlock()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "TouchOrBlock(UnionFilterData.Word1 | UnionFilterData.Word2)"
  },
  {
    "label": "GetChaosCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (} return false ; } uint32)",
    "insertText": "GetChaosCollisionChannelAndExtraFilter(uint32 Word3, uint8& OutMaskFilter)"
  },
  {
    "label": "ChannelMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ChannelMask(Word3 << ChaosNumExtraFilterBits) >> (32 - ChaosNumCollisionChannelBits)"
  },
  {
    "label": "Word3()",
    "kind": "Method",
    "detail": "Function (OutMaskFilter =)",
    "insertText": "Word3(32 - ChaosNumExtraFilterBits)"
  },
  {
    "label": "PrePreSimFilterImp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PrePreSimFilterImp(const FCollisionFilterData& SimFilterData, const FCollisionFilterData& OtherSimFilterData)"
  },
  {
    "label": "GetChaosCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (uint8 QuerierMaskFilter ; const uint32 QuerierChannel =)",
    "insertText": "GetChaosCollisionChannelAndExtraFilter(SimFilterData.Word3, QuerierMaskFilter)"
  },
  {
    "label": "GetChaosCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (uint8 OtherMaskFilter ; const uint32 OtherChannel =)",
    "insertText": "GetChaosCollisionChannelAndExtraFilter(OtherSimFilterData.Word3, OtherMaskFilter)"
  },
  {
    "label": "OtherBit()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "OtherBit(1 << (OtherChannel))"
  },
  {
    "label": "CanCollide()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "CanCollide(QuerierBit & OtherSimFilterData.Word1) && (OtherBit & SimFilterData.Word1)"
  },
  {
    "label": "FAccelerationStructureHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAccelerationStructureHandle(FGeometryParticle* InGeometryParticle = nullptr, bool bUsePrefiltering = true)"
  },
  {
    "label": "FAccelerationStructureHandle()",
    "kind": "Method",
    "detail": "Function (template<bool bPersistent>)",
    "insertText": "FAccelerationStructureHandle(TGeometryParticleHandleImp<FReal, 3, bPersistent>& InHandle)"
  },
  {
    "label": "GetExternalGeometryParticle_ExternalThread()",
    "kind": "Method",
    "detail": "Function (FGeometryParticle*)",
    "insertText": "GetExternalGeometryParticle_ExternalThread()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "UniqueIdx()",
    "kind": "Method",
    "detail": "Function (FUniqueIdx)",
    "insertText": "UniqueIdx()"
  },
  {
    "label": "PrePreSimFilter()",
    "kind": "Method",
    "detail": "Function (} } return false ; } bool)",
    "insertText": "PrePreSimFilter(const void* SimData)"
  },
  {
    "label": "UpdateFrom()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "UpdateFrom(const FAccelerationStructureHandle& InOther)"
  },
  {
    "label": "ComputeParticleQueryFilterDataFromShapes()",
    "kind": "Method",
    "detail": "Function (UnionQueryFilterData . Word0 = InOther . UnionQueryFilterData . Word0 ; UnionQueryFilterData . Word1 = InOther . UnionQueryFilterData . Word1 ; UnionQueryFilterData . Word2 = InOther . UnionQueryFilterData . Word2 ; UnionQueryFilterData . Word3 = InOther . UnionQueryFilterData . Word3 ; UnionSimFilterData . Word0 = InOther . UnionSimFilterData . Word0 ; UnionSimFilterData . Word1 = InOther . UnionSimFilterData . Word1 ; UnionSimFilterData . Word2 = InOther . UnionSimFilterData . Word2 ; UnionSimFilterData . Word3 = InOther . UnionSimFilterData . Word3 ; } public : template<TParticle> void)",
    "insertText": "ComputeParticleQueryFilterDataFromShapes(const TParticle& Particle, FCollisionFilterData& OutQueryFilterData)"
  },
  {
    "label": "ComputeParticleSimFilterDataFromShapes()",
    "kind": "Method",
    "detail": "Function (template<TParticle> void)",
    "insertText": "ComputeParticleSimFilterDataFromShapes(const TParticle& Particle, FCollisionFilterData& OutSimFilterData)"
  },
  {
    "label": "UpdatePrePreFilter()",
    "kind": "Method",
    "detail": "Function (private : FGeometryParticle* ExternalGeometryParticle ; FGeometryParticleHandle* GeometryParticleHandle ; FUniqueIdx CachedUniqueIdx ; FCollisionFilterData UnionQueryFilterData ; FCollisionFilterData UnionSimFilterData ; bool bCanPrePreFilter ; template<TParticle> void)",
    "insertText": "UpdatePrePreFilter(const TParticle& Particle)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (public : # if CHAOS_DEBUG_DRAW void)",
    "insertText": "DebugDraw(const bool bExternal, const bool bHit)"
  },
  {
    "label": "TParticleHandleBase()",
    "kind": "Method",
    "detail": "Function (template<T,int d> class TParticleHandleBase { public : using TType = T ; int D = d ;)",
    "insertText": "TParticleHandleBase() : SerializableGeometryParticles(TSerializablePtr<TGeometryParticles<T,d>>()) , ParticleIdx(0) , Type(EParticleType::Static)"
  },
  {
    "label": "TParticleHandleBase()",
    "kind": "Method",
    "detail": "Function (} template<TParticlesType>)",
    "insertText": "TParticleHandleBase(TSerializablePtr<TParticlesType> InParticles, int32 InParticleIdx) : SerializableGeometryParticles(InParticles) , ParticleIdx(InParticleIdx) , Type(InParticles ? InParticles->ParticleType() : EParticleType::Static)"
  },
  {
    "label": "TParticleHandleBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TParticleHandleBase(TGeometryParticles<T,d>* InParticles, int32 InParticleIdx) : SerializableGeometryParticles(TSerializablePtr<TGeometryParticles<T, d>>()) , ParticleIdx(InParticleIdx) , Type(InParticles ? InParticles->ParticleType() : EParticleType::Static)"
  },
  {
    "label": "TParticleHandleBase()",
    "kind": "Method",
    "detail": "Function (GeometryParticles = InParticles ; } ~)",
    "insertText": "TParticleHandleBase()"
  },
  {
    "label": "RawType()",
    "kind": "Method",
    "detail": "Function (Ar<<ParticleIdx ; uint8)",
    "insertText": "RawType(uint8)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (Ar<<RawType ;)",
    "insertText": "Type(EParticleType)"
  },
  {
    "label": "SetSOALowLevel()",
    "kind": "Method",
    "detail": "Function (Ar<<SerializableGeometryParticles ; } void)",
    "insertText": "SetSOALowLevel(TGeometryParticles<T, d>* InParticles)"
  },
  {
    "label": "GetParticleType()",
    "kind": "Method",
    "detail": "Function (GeometryParticles = InParticles ; } EParticleType)",
    "insertText": "GetParticleType()"
  },
  {
    "label": "GetHandleHelper()",
    "kind": "Method",
    "detail": "Function (template<T,int d> const TGeometryParticleHandle<T,d>*)",
    "insertText": "GetHandleHelper(const TTransientGeometryParticleHandle<T, d>* Handle)"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (template<T,int d> class TGeometryParticleHandles ; template<T,int d,bool bPersistent> class TGeometryParticleHandleImp : public TParticleHandleBase<T,d> { public : using FDynamicParticleHandleType = TPBDRigidParticleHandleImp<T,d,bPersistent> ; using FKinematicParticleHandleType = TKinematicGeometryParticleHandleImp<T,d,bPersistent> ; using TTransientHandle = TTransientGeometryParticleHandle<T,d> ; using THandleBase = TParticleHandleBase<T,d> ; using THandleBase::GeometryParticles ; using THandleBase::ParticleIdx ; using THandleBase::Type ; using TSOAType = TGeometryParticles<T,d> ; bool AlwaysSerializable = bPersistent ; TGeometryParticleHandleImp<T,d,bPersistent>*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, TGeometryParticleHandleImp<T, d, bPersistent>* Handle)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (template<TPayloadType> TPayloadType)",
    "insertText": "GetPayload(int32 Idx)"
  },
  {
    "label": "TGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TGeometryParticleHandleImp() : TParticleHandleBase<T, d>()"
  },
  {
    "label": "SetConstraintGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintGraphNode(nullptr)"
  },
  {
    "label": "TGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeometryParticleHandleImp(TSerializablePtr<TGeometryParticles<T, d>> InParticles, int32 InParticleIdx, int32 InHandleIdx, const FGeometryParticleParameters& Params) : TParticleHandleBase<T, d>(InParticles, InParticleIdx) , HandleIdx(InHandleIdx)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (GeometryParticleDefaultConstruct<T,)",
    "insertText": "d(*this, Params)"
  },
  {
    "label": "SetHasBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasBounds(false)"
  },
  {
    "label": "SetLightWeightDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightWeightDisabled(false)"
  },
  {
    "label": "TGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeometryParticleHandleImp(TGeometryParticles<T, d>* InParticles, const int32 InParticleIdx) : TParticleHandleBase<T, d>(InParticles, InParticleIdx)"
  },
  {
    "label": "CreateParticleHandleHelper()",
    "kind": "Method",
    "detail": "Function (} template<TParticlesType,TParams> TUniquePtr<TParticlesType::THandleType>)",
    "insertText": "CreateParticleHandleHelper(TSerializablePtr<TParticlesType> InParticles, int32 InParticleIdx, int32 InHandleIdx, const TParams& Params)"
  },
  {
    "label": "THandleType()",
    "kind": "Method",
    "detail": "Function (auto NewHandle = new)",
    "insertText": "THandleType(InParticles, InParticleIdx, InHandleIdx, Params)"
  },
  {
    "label": "Unique()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TParticlesType::THandleType>)",
    "insertText": "Unique(NewHandle)"
  },
  {
    "label": "TParticlesType()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "TParticlesType(InParticles.Get())->SetHandle(InParticleIdx, NewHandle)"
  },
  {
    "label": "TGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TGeometryParticleHandleImp()"
  },
  {
    "label": "ResetWeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "ResetWeakParticleHandle(ParticleIdx)"
  },
  {
    "label": "DestroyParticle()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "DestroyParticle(ParticleIdx)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (ParticleIdx = ParticleIdx)",
    "insertText": "Handle(ParticleIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 Idx = ParticleIdx; static_cast<uint32>(Idx) < GeometryParticles->Size(); ++Idx)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (ParticleIdx -= 1)",
    "insertText": "Handle(Idx)"
  },
  {
    "label": "GetHandleHelper()",
    "kind": "Method",
    "detail": "Function (} } } HandleIdx = INDEX_NONE ; GeometryParticles = nullptr ; ParticleIdx = INDEX_NONE ; Type = EParticleType::Unknown ; } } template<T2,int d2> TGeometryParticleHandle<T2,d2>*)",
    "insertText": "GetHandleHelper(TTransientGeometryParticleHandle<T2, d2>* Handle)"
  },
  {
    "label": "GetHandleHelper()",
    "kind": "Method",
    "detail": "Function (template<T2,int d2> const TGeometryParticleHandle<T2,d2>*)",
    "insertText": "GetHandleHelper(const TTransientGeometryParticleHandle<T2, d2>* Handle)"
  },
  {
    "label": "AsTransient()",
    "kind": "Method",
    "detail": "Function (class TGeometryParticleHandleImp<T,d,false> ; class TGeometryParticleHandleImp<T,d,true> ; TGeometryParticleHandleImp<T,d,false>)",
    "insertText": "AsTransient()"
  },
  {
    "label": "TGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeometryParticleHandleImp(const TGeometryParticleHandleImp&)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return GeometryParticles ->)",
    "insertText": "X(ParticleIdx)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const TVector<T,d>&)",
    "insertText": "GetX()"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetX(const TVector<T, d>& InX, bool bInvalidate = false)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SetX(ParticleIdx, InX)"
  },
  {
    "label": "SetUniqueIdx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUniqueIdx(const FUniqueIdx UniqueIdx, bool bInvalidate = false)"
  },
  {
    "label": "UniqueIdx()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "UniqueIdx(ParticleIdx)"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "GetR()"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetR(const TRotation<T, d>& InR, bool bInvalidate = false)"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SetR(ParticleIdx, InR)"
  },
  {
    "label": "GetRf()",
    "kind": "Method",
    "detail": "Function (} const TRotation<FRealSingle,d>)",
    "insertText": "GetRf()"
  },
  {
    "label": "SetRf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRf(const TRotation<FRealSingle, d>& InR, bool bInvalidate = false)"
  },
  {
    "label": "SetRf()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SetRf(ParticleIdx, InR)"
  },
  {
    "label": "GetTransformXR()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3)",
    "insertText": "GetTransformXR()"
  },
  {
    "label": "InitTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitTransform(const FVec3& InP, const FRotation3& InQ)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetX(InP)"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetR(InQ)"
  },
  {
    "label": "SetXR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetXR(const FParticlePositionRotation& XR)"
  },
  {
    "label": "SetNonFrequentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonFrequentData(const FParticleNonFrequentData& InData)"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_NAME)",
    "insertText": "SetDebugName(InData.DebugName())"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "SetGeometry(Chaos::FImplicitObjectPtr(InData.GetGeometry()))"
  },
  {
    "label": "SetUniqueIdx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueIdx(InData.UniqueIdx())"
  },
  {
    "label": "SetSpatialIdx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpatialIdx(InData.SpatialIdx())"
  },
  {
    "label": "SetResimType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResimType(InData.ResimType())"
  },
  {
    "label": "SetParticleID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleID(InData.ParticleID())"
  },
  {
    "label": "HasCollision()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCollision()"
  },
  {
    "label": "SetHasCollision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasCollision(const bool bHasCollision)"
  },
  {
    "label": "HasCollision()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "HasCollision(ParticleIdx)"
  },
  {
    "label": "SyncState()",
    "kind": "Method",
    "detail": "Function (} ESyncState)",
    "insertText": "SyncState()"
  },
  {
    "label": "SetSyncState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSyncState(ESyncState State)"
  },
  {
    "label": "SyncState()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SyncState(ParticleIdx)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (} const FImplicitObjectRef)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometry(const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SetGeometry(ParticleIdx, InGeometry)"
  },
  {
    "label": "MergeGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeGeometry(TArray<Chaos::FImplicitObjectPtr>&& Objects)"
  },
  {
    "label": "DummyPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FImplicitObject,ESPMode::ThreadSafe>)",
    "insertText": "DummyPtr(nullptr)"
  },
  {
    "label": "ShapesArray()",
    "kind": "Method",
    "detail": "Function (} const FShapesArray&)",
    "insertText": "ShapesArray()"
  },
  {
    "label": "ShapeInstances()",
    "kind": "Method",
    "detail": "Function (} const FShapeInstanceArray&)",
    "insertText": "ShapeInstances()"
  },
  {
    "label": "RemoveShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveShape(FPerShapeData* InShape)"
  },
  {
    "label": "RemoveShapesAtSortedIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveShapesAtSortedIndices(const TArrayView<const int32>& InIndices)"
  },
  {
    "label": "LocalBounds()",
    "kind": "Method",
    "detail": "Function (const TAABB<T,d>&)",
    "insertText": "LocalBounds()"
  },
  {
    "label": "SetLocalBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalBounds(const TAABB<T, d>& NewBounds)"
  },
  {
    "label": "LocalBounds()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "LocalBounds(ParticleIdx)"
  },
  {
    "label": "CCDAxisThreshold()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "CCDAxisThreshold()"
  },
  {
    "label": "WorldSpaceInflatedBounds()",
    "kind": "Method",
    "detail": "Function (} const TAABB<T,d>&)",
    "insertText": "WorldSpaceInflatedBounds()"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWorldSpaceState(const FRigidTransform3& WorldTransform, const FVec3& BoundsExpansion)"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "UpdateWorldSpaceState(ParticleIdx, WorldTransform, BoundsExpansion)"
  },
  {
    "label": "UpdateWorldSpaceStateSwept()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWorldSpaceStateSwept(const FRigidTransform3& WorldTransform, const FVec3& BoundsExpansion, const FVec3& DeltaX)"
  },
  {
    "label": "UpdateWorldSpaceStateSwept()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "UpdateWorldSpaceStateSwept(ParticleIdx, WorldTransform, BoundsExpansion, DeltaX)"
  },
  {
    "label": "HasBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBounds()"
  },
  {
    "label": "SetHasBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasBounds(bool bHasBounds)"
  },
  {
    "label": "HasBounds()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "HasBounds(ParticleIdx)"
  },
  {
    "label": "SpatialIdx()",
    "kind": "Method",
    "detail": "Function (} FSpatialAccelerationIdx)",
    "insertText": "SpatialIdx()"
  },
  {
    "label": "SetSpatialIdx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSpatialIdx(FSpatialAccelerationIdx Idx)"
  },
  {
    "label": "SpatialIdx()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SpatialIdx(ParticleIdx)"
  },
  {
    "label": "DebugName()",
    "kind": "Method",
    "detail": "Function (} # if CHAOS_DEBUG_NAME const TSharedPtr<FString,ESPMode::ThreadSafe>&)",
    "insertText": "DebugName()"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDebugName(const TSharedPtr<FString, ESPMode::ThreadSafe>& InDebugName)"
  },
  {
    "label": "DebugName()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "DebugName(ParticleIdx)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} # endif const FString&)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GTGeometryParticle()",
    "kind": "Method",
    "detail": "Function (TGeometryParticle<T,d>*)",
    "insertText": "GTGeometryParticle()"
  },
  {
    "label": "PhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} const IPhysicsProxyBase*)",
    "insertText": "PhysicsProxy()"
  },
  {
    "label": "SetPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPhysicsProxy(IPhysicsProxyBase* PhysicsProxy)"
  },
  {
    "label": "SetPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "SetPhysicsProxy(ParticleIdx, PhysicsProxy)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (} const TKinematicGeometryParticleHandleImp<T,d,bPersistent>*)",
    "insertText": "CastToKinematicParticle()"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (const TPBDRigidParticleHandleImp<T,d,bPersistent>*)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "CastToClustered()",
    "kind": "Method",
    "detail": "Function (const TPBDRigidClusteredParticleHandleImp<T,d,bPersistent>*)",
    "insertText": "CastToClustered()"
  },
  {
    "label": "CastToGeometryCollection()",
    "kind": "Method",
    "detail": "Function (const TPBDGeometryCollectionParticleHandleImp<T,d,bPersistent>*)",
    "insertText": "CastToGeometryCollection()"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (const TGeometryParticleHandle<T,d>*)",
    "insertText": "Handle()"
  },
  {
    "label": "GetHandleIdx()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHandleIdx()"
  },
  {
    "label": "AuxilaryValue()",
    "kind": "Method",
    "detail": "Function (} template<Container> const auto&)",
    "insertText": "AuxilaryValue(const Container& AuxContainer)"
  },
  {
    "label": "SetResimType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResimType(EResimType ResimType)"
  },
  {
    "label": "ResimType()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "ResimType(ParticleIdx)"
  },
  {
    "label": "EnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EnabledDuringResim()"
  },
  {
    "label": "SetEnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabledDuringResim(bool bEnabledDuringResim)"
  },
  {
    "label": "EnabledDuringResim()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "EnabledDuringResim(ParticleIdx)"
  },
  {
    "label": "LightWeightDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LightWeightDisabled()"
  },
  {
    "label": "SetLightWeightDisabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLightWeightDisabled(bool bLightWeightDisabled)"
  },
  {
    "label": "LightWeightDisabled()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "LightWeightDisabled(ParticleIdx)"
  },
  {
    "label": "ListMask()",
    "kind": "Method",
    "detail": "Function (} EGeometryParticleListMask)",
    "insertText": "ListMask()"
  },
  {
    "label": "IsInAnyList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInAnyList(const EGeometryParticleListMask ListMask)"
  },
  {
    "label": "IsInAllLists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInAllLists(const EGeometryParticleListMask ListMask)"
  },
  {
    "label": "AddToLists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToLists(const EGeometryParticleListMask ListMask)"
  },
  {
    "label": "ListMask()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "ListMask(ParticleIdx)"
  },
  {
    "label": "RemoveFromLists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromLists(const EGeometryParticleListMask ListMask)"
  },
  {
    "label": "ParticleID()",
    "kind": "Method",
    "detail": "Function (} # if CHAOS_DETERMINISTIC FParticleID)",
    "insertText": "ParticleID()"
  },
  {
    "label": "SetParticleID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParticleID(const FParticleID& ParticleID)"
  },
  {
    "label": "ParticleID()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "ParticleID(ParticleIdx)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "MoveToSOA(TGeometryParticles<T, d>& ToSOA)"
  },
  {
    "label": "MoveToOtherParticles()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "MoveToOtherParticles(ParticleIdx, ToSOA)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} const int32 NewParticleIdx = ToSOA .)",
    "insertText": "Size()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ParticleIdx = NewParticleIdx ;)",
    "insertText": "check(GeometryParticles->GetContainerListMask() != EGeometryParticleListMask::None)"
  },
  {
    "label": "ListMask()",
    "kind": "Method",
    "detail": "Function (ToSOA .)",
    "insertText": "ListMask(ParticleIdx) &= ~GeometryParticles->GetContainerListMask()"
  },
  {
    "label": "ListMask()",
    "kind": "Method",
    "detail": "Function (ToSOA .)",
    "insertText": "ListMask(ParticleIdx) |= ToSOA.GetContainerListMask()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (GeometryParticles =& ToSOA ; } } EParticleType)",
    "insertText": "StaticType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SetHandle()",
    "kind": "Method",
    "detail": "Function (Ar<<HandleIdx ; GeometryParticles ->)",
    "insertText": "SetHandle(ParticleIdx, this)"
  },
  {
    "label": "WeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (} FWeakParticleHandle&)",
    "insertText": "WeakParticleHandle()"
  },
  {
    "label": "ParticleConstraints()",
    "kind": "Method",
    "detail": "Function (} FConstraintHandleArray&)",
    "insertText": "ParticleConstraints()"
  },
  {
    "label": "AddConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintHandle(FConstraintHandle* InConstraintHandle)"
  },
  {
    "label": "RemoveConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveConstraintHandle(FConstraintHandle* InConstraintHandle)"
  },
  {
    "label": "ParticleCollisions()",
    "kind": "Method",
    "detail": "Function (} FParticleCollisions&)",
    "insertText": "ParticleCollisions()"
  },
  {
    "label": "IsInConstraintGraph()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInConstraintGraph()"
  },
  {
    "label": "GetConstraintGraphNode()",
    "kind": "Method",
    "detail": "Function (} Private::FPBDIslandParticle*)",
    "insertText": "GetConstraintGraphNode()"
  },
  {
    "label": "SetConstraintGraphNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConstraintGraphNode(Private::FPBDIslandParticle* InNode)"
  },
  {
    "label": "ConstraintGraphNode()",
    "kind": "Method",
    "detail": "Function (GeometryParticles ->)",
    "insertText": "ConstraintGraphNode(ParticleIdx)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} protected : TGeometryParticleHandles<T,d> ; struct FInvalidFromTransient { } ; std::conditional_t<bPersistent,int32,FInvalidFromTransient> HandleIdx ; } ; template<> template<> int32 TGeometryParticleHandleImp<FReal,3,true>::GetPayload<)",
    "insertText": "int32(int32 Idx)"
  },
  {
    "label": "GetHandleHelper()",
    "kind": "Method",
    "detail": "Function (template<T,int d> TGeometryParticleHandle<T,d>*)",
    "insertText": "GetHandleHelper(TTransientGeometryParticleHandle<T, d>* Handle)"
  },
  {
    "label": "TKinematicGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (} template<T,int d,bool bPersistent> class TKinematicGeometryParticleHandleImp : public TGeometryParticleHandleImp<T,d,bPersistent> { public : using TGeometryParticleHandleImp<T,d,bPersistent>::ParticleIdx ; using TGeometryParticleHandleImp<T,d,bPersistent>::KinematicGeometryParticles ; using TGeometryParticleHandleImp<T,d,bPersistent>::Type ; using TGeometryParticleHandleImp<T,d,bPersistent>::CastToRigidParticle ; using TTransientHandle = TTransientKinematicGeometryParticleHandle<T,d> ; using TSOAType = TKinematicGeometryParticles<T,d> ; using TGeometryParticleHandleImp<T,d,bPersistent>::SetXR ; protected : class TGeometryParticleHandleImp<T,d,bPersistent> ;)",
    "insertText": "TKinematicGeometryParticleHandleImp() : TGeometryParticleHandleImp<T, d, bPersistent>()"
  },
  {
    "label": "TKinematicGeometryParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TKinematicGeometryParticleHandleImp(TSerializablePtr<TKinematicGeometryParticles<T, d>> Particles, int32 InIdx, int32 InGlobalIdx, const FKinematicGeometryParticleParameters& Params) : TGeometryParticleHandleImp<T, d, bPersistent>(TSerializablePtr<TGeometryParticles<T, d>>(Particles), InIdx, InGlobalIdx, Params)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TKinematicGeometryParticleHandleImp<T,d,bPersistent>>)",
    "insertText": "CreateParticleHandle(TSerializablePtr<TKinematicGeometryParticles<T, d>> InParticles, int32 InParticleIdx, int32 InHandleIdx, const FKinematicGeometryParticleParameters& Params = FKinematicGeometryParticleParameters())"
  },
  {
    "label": "ToSerializable()",
    "kind": "Method",
    "detail": "Function (} TSerializablePtr<TKinematicGeometryParticleHandleImp<T,d,bPersistent>>)",
    "insertText": "ToSerializable()"
  },
  {
    "label": "SetFromRawLowLevel()",
    "kind": "Method",
    "detail": "Function (TSerializablePtr<TKinematicGeometryParticleHandleImp<T,d,bPersistent>> Serializable ; Serializable .)",
    "insertText": "SetFromRawLowLevel(this)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetV()"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetV(const TVector<T, d>& InV, bool bInvalidate = false)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (KinematicGeometryParticles ->)",
    "insertText": "SetV(ParticleIdx, InV)"
  },
  {
    "label": "GetVf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetVf()"
  },
  {
    "label": "SetVf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVf(const TVector<FRealSingle, d>& InV, bool bInvalidate = false)"
  },
  {
    "label": "SetVf()",
    "kind": "Method",
    "detail": "Function (KinematicGeometryParticles ->)",
    "insertText": "SetVf(ParticleIdx, InV)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetW()"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetW(const TVector<T, d>& InW, bool bInvalidate = false)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (KinematicGeometryParticles ->)",
    "insertText": "SetW(ParticleIdx, InW)"
  },
  {
    "label": "GetWf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetWf()"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWf(const TVector<FRealSingle, d>& InW, bool bInvalidate = false)"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (KinematicGeometryParticles ->)",
    "insertText": "SetWf(ParticleIdx, InW)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetV(Velocities.V())"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetW(Velocities.W())"
  },
  {
    "label": "SetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKinematicTarget(const FKinematicTarget& InKinematicTarget, bool bInvalidate = true)"
  },
  {
    "label": "KinematicTarget()",
    "kind": "Method",
    "detail": "Function (KinematicGeometryParticles ->)",
    "insertText": "KinematicTarget(ParticleIdx)"
  },
  {
    "label": "KinematicTarget()",
    "kind": "Method",
    "detail": "Function (} const FKinematicTarget&)",
    "insertText": "KinematicTarget()"
  },
  {
    "label": "bPersistent()",
    "kind": "Method",
    "detail": "Function (} TPBDRigidParticleHandleImp<T,d,)",
    "insertText": "bPersistent(TSerializablePtr<TPBDRigidParticles<T, d>> Particles, int32 InIdx, int32 InGlobalIdx, const FPBDRigidParticleParameters& Params = FPBDRigidParticleParameters()) : TKinematicGeometryParticleHandleImp<T, d, bPersistent>(TSerializablePtr<TKinematicGeometryParticles<T, d>>(Particles), InIdx, InGlobalIdx, Params)"
  },
  {
    "label": "SetCollisionConstraintFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionConstraintFlags(0)"
  },
  {
    "label": "SetPreVf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreVf(this->GetVf())"
  },
  {
    "label": "SetPreWf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreWf(this->GetWf())"
  },
  {
    "label": "SetSolverBodyIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSolverBodyIndex(INDEX_NONE)"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetP(this->GetX())"
  },
  {
    "label": "SetQf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQf(this->GetRf())"
  },
  {
    "label": "SetVSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVSmooth(this->GetV())"
  },
  {
    "label": "SetWSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWSmooth(this->GetW())"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcceleration(TVector<T, d>(0))"
  },
  {
    "label": "SetAngularAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularAcceleration(TVector<T, d>(0))"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectStateLowLevel(Params.bStartSleeping ? EObjectStateType::Sleeping : EObjectStateType::Dynamic)"
  },
  {
    "label": "SetPreObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreObjectStateLowLevel(ObjectState())"
  },
  {
    "label": "SetSleepCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSleepCounter(0)"
  },
  {
    "label": "SetDisableCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableCounter(0)"
  },
  {
    "label": "SetInvIConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvIConditioning(TVec3<FRealSingle>(1))"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TPBDRigidParticleHandleImp<T,d,bPersistent>>)",
    "insertText": "CreateParticleHandle(TSerializablePtr<TPBDRigidParticles<T, d>> InParticles, int32 InParticleIdx, int32 InHandleIdx, const FPBDRigidParticleParameters& Params = FPBDRigidParticleParameters())"
  },
  {
    "label": "IsKinematic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsKinematic()"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDynamic()"
  },
  {
    "label": "CollisionParticles()",
    "kind": "Method",
    "detail": "Function (} const TUniquePtr<TBVHParticles<T,d>>&)",
    "insertText": "CollisionParticles()"
  },
  {
    "label": "CollisionParticlesSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CollisionParticlesSize()"
  },
  {
    "label": "CollisionParticlesInitIfNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CollisionParticlesInitIfNeeded()"
  },
  {
    "label": "CollisionParticlesInitIfNeeded()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "CollisionParticlesInitIfNeeded(ParticleIdx)"
  },
  {
    "label": "SetCollisionParticles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionParticles(TParticles<T, d>&& Points)"
  },
  {
    "label": "SetCollisionParticles()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetCollisionParticles(ParticleIdx, MoveTemp(Points))"
  },
  {
    "label": "CollisionGroup()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CollisionGroup()"
  },
  {
    "label": "SetCollisionGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionGroup(const int32 InCollisionGroup)"
  },
  {
    "label": "CollisionGroup()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "CollisionGroup(ParticleIdx)"
  },
  {
    "label": "HasCollisionConstraintFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCollisionConstraintFlag(const ECollisionConstraintFlags Flag)"
  },
  {
    "label": "AddCollisionConstraintFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCollisionConstraintFlag(const ECollisionConstraintFlags Flag)"
  },
  {
    "label": "AddCollisionConstraintFlag()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "AddCollisionConstraintFlag(Flag, ParticleIdx)"
  },
  {
    "label": "RemoveCollisionConstraintFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCollisionConstraintFlag(const ECollisionConstraintFlags Flag)"
  },
  {
    "label": "RemoveCollisionConstraintFlag()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "RemoveCollisionConstraintFlag(Flag, ParticleIdx)"
  },
  {
    "label": "SetCollisionConstraintFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionConstraintFlags(const uint32 Flags)"
  },
  {
    "label": "SetCollisionConstraintFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetCollisionConstraintFlags(ParticleIdx, Flags)"
  },
  {
    "label": "CollisionConstraintFlags()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CollisionConstraintFlags()"
  },
  {
    "label": "Disabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Disabled()"
  },
  {
    "label": "SetDisabledLowLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisabledLowLevel(bool disabled)"
  },
  {
    "label": "SetDisabledLowLevel()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetDisabledLowLevel(ParticleIdx, disabled)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisabled(const bool InDisabled)"
  },
  {
    "label": "DisabledRef()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "DisabledRef(ParticleIdx)"
  },
  {
    "label": "GetPreV()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetPreV()"
  },
  {
    "label": "SetPreV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreV(const TVector<T, d>& InPreV)"
  },
  {
    "label": "SetPreV()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetPreV(ParticleIdx, InPreV)"
  },
  {
    "label": "GetPreVf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetPreVf()"
  },
  {
    "label": "SetPreVf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreVf(const TVector<FRealSingle, d>& InPreV)"
  },
  {
    "label": "SetPreVf()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetPreVf(ParticleIdx, InPreV)"
  },
  {
    "label": "GetPreW()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetPreW()"
  },
  {
    "label": "SetPreW()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreW(const TVector<T, d>& InPreW)"
  },
  {
    "label": "SetPreW()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetPreW(ParticleIdx, InPreW)"
  },
  {
    "label": "GetPreWf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetPreWf()"
  },
  {
    "label": "SetPreWf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreWf(const TVector<FRealSingle, d>& InPreW)"
  },
  {
    "label": "SetPreWf()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetPreWf(ParticleIdx, InPreW)"
  },
  {
    "label": "SolverBodyIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SolverBodyIndex()"
  },
  {
    "label": "SetSolverBodyIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSolverBodyIndex(const int32 InSolverBodyIndex)"
  },
  {
    "label": "SetSolverBodyIndex()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetSolverBodyIndex(ParticleIdx, InSolverBodyIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return PBDRigidParticles ->)",
    "insertText": "P(ParticleIdx)"
  },
  {
    "label": "GetP()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const TVector<T,d>&)",
    "insertText": "GetP()"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetP(const TVector<T, d>& InP)"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetP(ParticleIdx, InP)"
  },
  {
    "label": "GetQ()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "GetQ()"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQ(const TRotation<T, d>& InQ)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetQ(ParticleIdx, InQ)"
  },
  {
    "label": "GetQf()",
    "kind": "Method",
    "detail": "Function (} const TRotation<FRealSingle,d>)",
    "insertText": "GetQf()"
  },
  {
    "label": "SetQf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQf(const TRotation<FRealSingle, d>& InQ)"
  },
  {
    "label": "SetQf()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetQf(ParticleIdx, InQ)"
  },
  {
    "label": "XCom()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "XCom()"
  },
  {
    "label": "PCom()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "PCom()"
  },
  {
    "label": "RCom()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "RCom()"
  },
  {
    "label": "QCom()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "QCom()"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetP(InP)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQ(InQ)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransformPQCom(const TVector<T, d>& InPCom, const TRotation<T, d>& InQCom)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetTransformPQCom(ParticleIdx, InPCom, InQCom)"
  },
  {
    "label": "GetTransformPQ()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3)",
    "insertText": "GetTransformPQ()"
  },
  {
    "label": "GetTransformXRCom()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3)",
    "insertText": "GetTransformXRCom()"
  },
  {
    "label": "GetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3)",
    "insertText": "GetTransformPQCom()"
  },
  {
    "label": "VSmooth()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "VSmooth()"
  },
  {
    "label": "SetVSmooth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVSmooth(const TVector<T, d>& InVSmooth)"
  },
  {
    "label": "VSmooth()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "VSmooth(ParticleIdx)"
  },
  {
    "label": "WSmooth()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "WSmooth()"
  },
  {
    "label": "SetWSmooth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWSmooth(const TVector<T, d>& InWSmooth)"
  },
  {
    "label": "WSmooth()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "WSmooth(ParticleIdx)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "Acceleration()"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAcceleration(const TVector<T, d>& InAcceleration)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "Acceleration(ParticleIdx)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddForce(const TVector<T, d>& InF, bool bInvalidate = true)"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcceleration(Acceleration() + InF * InvM())"
  },
  {
    "label": "AngularAcceleration()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "AngularAcceleration()"
  },
  {
    "label": "SetAngularAcceleration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularAcceleration(const TVector<T, d>& InAngularAcceleration)"
  },
  {
    "label": "AngularAcceleration()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "AngularAcceleration(ParticleIdx)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTorque(const TVector<T, d>& InTorque, bool bInvalidate = true)"
  },
  {
    "label": "SetTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTorque(const TVector<T, d>& InTorque, bool bInvalidate = true)"
  },
  {
    "label": "LinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d>&)",
    "insertText": "LinearImpulseVelocity()"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearImpulseVelocity(const TVector<T, d>& InLinearImpulseVelocity, bool bInvalidate = false)"
  },
  {
    "label": "LinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "LinearImpulseVelocity(ParticleIdx)"
  },
  {
    "label": "AngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "AngularImpulseVelocity()"
  },
  {
    "label": "SetAngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularImpulseVelocity(const TVector<T, d>& InAngularImpulseVelocity, bool bInvalidate = false)"
  },
  {
    "label": "AngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "AngularImpulseVelocity(ParticleIdx)"
  },
  {
    "label": "SetDynamics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDynamics(const FParticleDynamics& Dynamics)"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcceleration(Dynamics.Acceleration())"
  },
  {
    "label": "SetAngularAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularAcceleration(Dynamics.AngularAcceleration())"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearImpulseVelocity(Dynamics.LinearImpulseVelocity())"
  },
  {
    "label": "SetAngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularImpulseVelocity(Dynamics.AngularImpulseVelocity())"
  },
  {
    "label": "SetMassProps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMassProps(const FParticleMassProps& Props)"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCenterOfMass(Props.CenterOfMass())"
  },
  {
    "label": "SetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationOfMass(Props.RotationOfMass())"
  },
  {
    "label": "SetI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetI(Props.I())"
  },
  {
    "label": "SetInvI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvI(Props.InvI())"
  },
  {
    "label": "SetM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetM(Props.M())"
  },
  {
    "label": "SetInvM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvM(Props.InvM())"
  },
  {
    "label": "SetInertiaConditioningDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInertiaConditioningDirty()"
  },
  {
    "label": "ResetSmoothedVelocities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetSmoothedVelocities()"
  },
  {
    "label": "SetVSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVSmooth(GetV())"
  },
  {
    "label": "SetWSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWSmooth(GetW())"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (} const TVec3<FRealSingle>&)",
    "insertText": "I()"
  },
  {
    "label": "SetI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetI(const TVec3<FRealSingle>& InI)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "I(ParticleIdx)"
  },
  {
    "label": "InvI()",
    "kind": "Method",
    "detail": "Function (} const TVec3<FRealSingle>&)",
    "insertText": "InvI()"
  },
  {
    "label": "SetInvI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInvI(const TVec3<FRealSingle>& InInvI)"
  },
  {
    "label": "InvI()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "InvI(ParticleIdx)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "M()"
  },
  {
    "label": "SetM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetM(const T& InM)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "M(ParticleIdx)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "InvM()"
  },
  {
    "label": "SetInvM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInvM(const T& InInvM)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "InvM(ParticleIdx)"
  },
  {
    "label": "CenterOfMass()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "CenterOfMass()"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCenterOfMass(const TVector<T,d>& InCenterOfMass, bool bInvalidate = false)"
  },
  {
    "label": "CenterOfMass()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "CenterOfMass(ParticleIdx)"
  },
  {
    "label": "RotationOfMass()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>&)",
    "insertText": "RotationOfMass()"
  },
  {
    "label": "SetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationOfMass(const TRotation<T,d>& InRotationOfMass, bool bInvalidate = false)"
  },
  {
    "label": "RotationOfMass()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "RotationOfMass(ParticleIdx)"
  },
  {
    "label": "InvIConditioning()",
    "kind": "Method",
    "detail": "Function (} const TVec3<FRealSingle>&)",
    "insertText": "InvIConditioning()"
  },
  {
    "label": "SetInvIConditioning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInvIConditioning(const TVec3<FRealSingle>& InInvIConditioning)"
  },
  {
    "label": "InvIConditioning()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "InvIConditioning(ParticleIdx)"
  },
  {
    "label": "ConditionedInvI()",
    "kind": "Method",
    "detail": "Function (} TVec3<FRealSingle>)",
    "insertText": "ConditionedInvI()"
  },
  {
    "label": "ConditionedI()",
    "kind": "Method",
    "detail": "Function (} TVec3<FRealSingle>)",
    "insertText": "ConditionedI()"
  },
  {
    "label": "LinearEtherDrag()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "LinearEtherDrag()"
  },
  {
    "label": "SetLinearEtherDrag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearEtherDrag(const T& InLinearEtherDrag)"
  },
  {
    "label": "LinearEtherDrag()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "LinearEtherDrag(ParticleIdx)"
  },
  {
    "label": "AngularEtherDrag()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "AngularEtherDrag()"
  },
  {
    "label": "SetAngularEtherDrag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularEtherDrag(const T& InAngularEtherDrag)"
  },
  {
    "label": "AngularEtherDrag()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "AngularEtherDrag(ParticleIdx)"
  },
  {
    "label": "MaxLinearSpeedSq()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "MaxLinearSpeedSq()"
  },
  {
    "label": "SetMaxLinearSpeedSq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxLinearSpeedSq(const T& InMaxLinearSpeed)"
  },
  {
    "label": "MaxLinearSpeedSq()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "MaxLinearSpeedSq(ParticleIdx)"
  },
  {
    "label": "MaxAngularSpeedSq()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "MaxAngularSpeedSq()"
  },
  {
    "label": "SetMaxAngularSpeedSq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxAngularSpeedSq(const T& InMaxAngularSpeed)"
  },
  {
    "label": "MaxAngularSpeedSq()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "MaxAngularSpeedSq(ParticleIdx)"
  },
  {
    "label": "InitialOverlapDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "InitialOverlapDepenetrationVelocity()"
  },
  {
    "label": "SetInitialOverlapDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInitialOverlapDepenetrationVelocity(FRealSingle InVel)"
  },
  {
    "label": "InitialOverlapDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "InitialOverlapDepenetrationVelocity(ParticleIdx)"
  },
  {
    "label": "SleepThresholdMultiplier()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "SleepThresholdMultiplier()"
  },
  {
    "label": "SetSleepThresholdMultiplier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleepThresholdMultiplier(FRealSingle Multiplier)"
  },
  {
    "label": "SleepThresholdMultiplier()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SleepThresholdMultiplier(ParticleIdx)"
  },
  {
    "label": "PreObjectState()",
    "kind": "Method",
    "detail": "Function (} EObjectStateType)",
    "insertText": "PreObjectState()"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObjectStateLowLevel(EObjectStateType InState)"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetObjectState(ParticleIdx, InState)"
  },
  {
    "label": "SetPreObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreObjectStateLowLevel(EObjectStateType InState)"
  },
  {
    "label": "PreObjectState()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "PreObjectState(ParticleIdx)"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSleeping()"
  },
  {
    "label": "WasSleeping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasSleeping()"
  },
  {
    "label": "Sleeping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Sleeping()"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleeping(bool bSleeping)"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetSleeping(ParticleIdx, bSleeping)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (} FRigidParticleControlFlags)",
    "insertText": "ControlFlags()"
  },
  {
    "label": "SetControlFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetControlFlags(const FRigidParticleControlFlags Flags)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx)"
  },
  {
    "label": "GravityEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GravityEnabled()"
  },
  {
    "label": "SetGravityEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGravityEnabled(bool bEnabled)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetGravityEnabled(bEnabled)"
  },
  {
    "label": "GravityGroupIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GravityGroupIndex()"
  },
  {
    "label": "SetGravityGroupIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGravityGroupIndex(int32 GravityGroupIndex)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetGravityGroupIndex(GravityGroupIndex)"
  },
  {
    "label": "UpdateKinematicFromSimulation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateKinematicFromSimulation()"
  },
  {
    "label": "SetUpdateKinematicFromSimulation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUpdateKinematicFromSimulation(bool bUpdateKinematicFromSimulation)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetUpdateKinematicFromSimulation(bUpdateKinematicFromSimulation)"
  },
  {
    "label": "CCDEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CCDEnabled()"
  },
  {
    "label": "SetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCCDEnabled(bool bEnabled)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetCCDEnabled(bEnabled)"
  },
  {
    "label": "MACDEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MACDEnabled()"
  },
  {
    "label": "SetMACDEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMACDEnabled(bool bEnabled)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetMACDEnabled(bEnabled)"
  },
  {
    "label": "IterationSettings()",
    "kind": "Method",
    "detail": "Function (} Private::FIterationSettings)",
    "insertText": "IterationSettings()"
  },
  {
    "label": "SetIterationSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIterationSettings(const Private::FIterationSettings& IterationSettingsIn)"
  },
  {
    "label": "ParticleIterationCounts()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ParticleIterationCounts(ParticleIdx)"
  },
  {
    "label": "SetPositionSolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPositionSolverIterations(const int32 PositionIterationsIn)"
  },
  {
    "label": "ParticleIterationCounts()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ParticleIterationCounts(ParticleIdx).SetNumPositionIterations(PositionIterationsIn)"
  },
  {
    "label": "SetVelocitySolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocitySolverIterations(const int32 VelocityIterationsIn)"
  },
  {
    "label": "ParticleIterationCounts()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ParticleIterationCounts(ParticleIdx).SetNumVelocityIterations(VelocityIterationsIn)"
  },
  {
    "label": "SetProjectionSolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProjectionSolverIterations(const int32 ProjectionIterationsIn)"
  },
  {
    "label": "ParticleIterationCounts()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ParticleIterationCounts(ParticleIdx).SetNumProjectionIterations(ProjectionIterationsIn)"
  },
  {
    "label": "OneWayInteraction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OneWayInteraction()"
  },
  {
    "label": "SetOneWayInteraction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOneWayInteraction(bool bEnabled)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetOneWayInteractionEnabled(bEnabled)"
  },
  {
    "label": "InertiaConditioningEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InertiaConditioningEnabled()"
  },
  {
    "label": "SetInertiaConditioningEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInertiaConditioningEnabled(bool bEnabled)"
  },
  {
    "label": "ControlFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "ControlFlags(ParticleIdx).SetInertiaConditioningEnabled(bEnabled)"
  },
  {
    "label": "InertiaConditioningDirty()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "InertiaConditioningDirty()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).SetInertiaConditioningDirty()"
  },
  {
    "label": "ClearInertiaConditioningDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearInertiaConditioningDirty()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).ClearInertiaConditioningDirty()"
  },
  {
    "label": "UseIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseIgnoreCollisionManager()"
  },
  {
    "label": "SetUseIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUseIgnoreCollisionManager()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).SetUseIgnoreCollisionManager()"
  },
  {
    "label": "ClearUseIgnoreCollisionManager()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearUseIgnoreCollisionManager()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).ClearUseIgnoreCollisionManager()"
  },
  {
    "label": "IsMovingKinematic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMovingKinematic()"
  },
  {
    "label": "SetIsMovingKinematic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsMovingKinematic()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).SetIsMovingKinematic()"
  },
  {
    "label": "ClearIsMovingKinematic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearIsMovingKinematic()"
  },
  {
    "label": "TransientFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "TransientFlags(ParticleIdx).ClearIsMovingKinematic()"
  },
  {
    "label": "SleepType()",
    "kind": "Method",
    "detail": "Function (} ESleepType)",
    "insertText": "SleepType()"
  },
  {
    "label": "SetSleepType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleepType(ESleepType SleepType)"
  },
  {
    "label": "SetSleepType()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SetSleepType(ParticleIdx, SleepType)"
  },
  {
    "label": "SleepCounter()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "SleepCounter()"
  },
  {
    "label": "SetSleepCounter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleepCounter(int8 SleepCounter)"
  },
  {
    "label": "SleepCounter()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "SleepCounter(ParticleIdx)"
  },
  {
    "label": "DisableCounter()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "DisableCounter()"
  },
  {
    "label": "SetDisableCounter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisableCounter(int8 DisableCounter)"
  },
  {
    "label": "DisableCounter()",
    "kind": "Method",
    "detail": "Function (PBDRigidParticles ->)",
    "insertText": "DisableCounter(ParticleIdx)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetX(XR.X())"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetR(XR.R())"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (Rigid ->)",
    "insertText": "SetP(GetX())"
  },
  {
    "label": "SetQf()",
    "kind": "Method",
    "detail": "Function (Rigid ->)",
    "insertText": "SetQf(GetRf())"
  },
  {
    "label": "bPersistent()",
    "kind": "Method",
    "detail": "Function (} } template<T,int d,bool bPersistent> class TPBDRigidClusteredParticleHandleImp : public TPBDRigidParticleHandleImp<T,d,bPersistent> { public : using TGeometryParticleHandleImp<T,d,bPersistent>::ParticleIdx ; using TGeometryParticleHandleImp<T,d,bPersistent>::PBDRigidClusteredParticles ; using TGeometryParticleHandleImp<T,d,bPersistent>::Type ; using TTransientHandle = TTransientPBDRigidParticleHandle<T,d> ; using TSOAType = TPBDRigidClusteredParticles<T,d> ; protected : class TGeometryParticleHandleImp<T,d,bPersistent> ; TPBDRigidClusteredParticleHandleImp<T,d,)",
    "insertText": "bPersistent() : TPBDRigidParticleHandleImp<T, d, bPersistent>()"
  },
  {
    "label": "bPersistent()",
    "kind": "Method",
    "detail": "Function (} TPBDRigidClusteredParticleHandleImp<T,d,)",
    "insertText": "bPersistent(TSerializablePtr<TPBDRigidClusteredParticles<T, d>> Particles, int32 InIdx, int32 InGlobalIdx, const FPBDRigidParticleParameters& Params) : TPBDRigidParticleHandleImp<T, d, bPersistent>(TSerializablePtr<TPBDRigidParticles<T, d>>(Particles), InIdx, InGlobalIdx, Params)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TPBDRigidClusteredParticleHandleImp<T,d,bPersistent>>)",
    "insertText": "CreateParticleHandle(TSerializablePtr<TPBDRigidClusteredParticles<T, d>> InParticles, int32 InParticleIdx, int32 InHandleIdx, const FPBDRigidParticleParameters& Params = FPBDRigidParticleParameters())"
  },
  {
    "label": "AddPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPhysicsProxy(IPhysicsProxyBase* PhysicsProxy)"
  },
  {
    "label": "PhysicsProxies()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "PhysicsProxies(ParticleIdx).Add(PhysicsProxy)"
  },
  {
    "label": "RemovePhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePhysicsProxy(IPhysicsProxyBase* PhysicsProxy)"
  },
  {
    "label": "PhysicsProxies()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "PhysicsProxies(ParticleIdx).Remove(PhysicsProxy)"
  },
  {
    "label": "ClearPhysicsProxies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearPhysicsProxies()"
  },
  {
    "label": "PhysicsProxies()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "PhysicsProxies(ParticleIdx).Empty()"
  },
  {
    "label": "SetClusterId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClusterId(const ClusterId& Id)"
  },
  {
    "label": "ClusterIds()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ClusterIds(ParticleIdx)"
  },
  {
    "label": "ClusterIds()",
    "kind": "Method",
    "detail": "Function (} const ClusterId&)",
    "insertText": "ClusterIds()"
  },
  {
    "label": "Parent()",
    "kind": "Method",
    "detail": "Function (} FPBDRigidClusteredParticleHandle*)",
    "insertText": "Parent()"
  },
  {
    "label": "ChildToParent()",
    "kind": "Method",
    "detail": "Function (} const TRigidTransform<T,d>&)",
    "insertText": "ChildToParent()"
  },
  {
    "label": "SetChildToParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChildToParent(const TRigidTransform<T, d>& Xf)"
  },
  {
    "label": "ChildToParent()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ChildToParent(ParticleIdx)"
  },
  {
    "label": "ClusterGroupIndex()",
    "kind": "Method",
    "detail": "Function (} const int32&)",
    "insertText": "ClusterGroupIndex()"
  },
  {
    "label": "SetClusterGroupIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClusterGroupIndex(const int32 Idx)"
  },
  {
    "label": "ClusterGroupIndex()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ClusterGroupIndex(ParticleIdx)"
  },
  {
    "label": "InternalCluster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InternalCluster()"
  },
  {
    "label": "SetInternalCluster()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInternalCluster(bool bValue)"
  },
  {
    "label": "RigidClusteredFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "RigidClusteredFlags(ParticleIdx).SetInternalCluster(bValue)"
  },
  {
    "label": "GetChildrenSpatial()",
    "kind": "Method",
    "detail": "Function (} const FImplicitObjectUnionClusteredPtr&)",
    "insertText": "GetChildrenSpatial()"
  },
  {
    "label": "SetChildrenSpatial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChildrenSpatial(FImplicitObjectUnionClusteredPtr& Obj)"
  },
  {
    "label": "GetChildrenSpatial()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "GetChildrenSpatial(ParticleIdx)"
  },
  {
    "label": "CollisionImpulse()",
    "kind": "Method",
    "detail": "Function (} const FRealSingle&)",
    "insertText": "CollisionImpulse()"
  },
  {
    "label": "SetCollisionImpulse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionImpulse(const FRealSingle Value)"
  },
  {
    "label": "CollisionImpulses()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "CollisionImpulses(ParticleIdx)"
  },
  {
    "label": "CollisionImpulses()",
    "kind": "Method",
    "detail": "Function (} const FRealSingle&)",
    "insertText": "CollisionImpulses()"
  },
  {
    "label": "SetCollisionImpulses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionImpulses(const FRealSingle Value)"
  },
  {
    "label": "ClearCollisionImpulse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCollisionImpulse()"
  },
  {
    "label": "CollisionImpulses()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "CollisionImpulses(ParticleIdx) = static_cast<FRealSingle>(0)"
  },
  {
    "label": "GetExternalStrain()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "GetExternalStrain()"
  },
  {
    "label": "ExternalStrains()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ExternalStrains(ParticleIdx)"
  },
  {
    "label": "ExternalStrains()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ExternalStrains(ParticleIdx) = static_cast<FRealSingle>(0)"
  },
  {
    "label": "GetInternalStrains()",
    "kind": "Method",
    "detail": "Function (} const FRealSingle&)",
    "insertText": "GetInternalStrains()"
  },
  {
    "label": "Strain()",
    "kind": "Method",
    "detail": "Function (} const FRealSingle&)",
    "insertText": "Strain()"
  },
  {
    "label": "Strains()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "Strains(ParticleIdx)"
  },
  {
    "label": "Strains()",
    "kind": "Method",
    "detail": "Function (} const FRealSingle&)",
    "insertText": "Strains()"
  },
  {
    "label": "SetMaximumInternalStrain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaximumInternalStrain()"
  },
  {
    "label": "ConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (} const TArray<TConnectivityEdge<T>>&)",
    "insertText": "ConnectivityEdges()"
  },
  {
    "label": "SetConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConnectivityEdges(const TArray<TConnectivityEdge<T>>& Edges)"
  },
  {
    "label": "ConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ConnectivityEdges(ParticleIdx)"
  },
  {
    "label": "SetConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConnectivityEdges(TArray<TConnectivityEdge<T>>&& Edges)"
  },
  {
    "label": "ConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "ConnectivityEdges(ParticleIdx) = MoveTemp(Edges)"
  },
  {
    "label": "IsAnchored()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnchored()"
  },
  {
    "label": "SetIsAnchored()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsAnchored(bool bValue)"
  },
  {
    "label": "RigidClusteredFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "RigidClusteredFlags(ParticleIdx).SetAnchored(bValue)"
  },
  {
    "label": "Unbreakable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Unbreakable()"
  },
  {
    "label": "SetUnbreakable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUnbreakable(bool bValue)"
  },
  {
    "label": "RigidClusteredFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "RigidClusteredFlags(ParticleIdx).SetUnbreakable(bValue)"
  },
  {
    "label": "IsChildToParentLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsChildToParentLocked()"
  },
  {
    "label": "SetChildToParentLocked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChildToParentLocked(bool bValue)"
  },
  {
    "label": "RigidClusteredFlags()",
    "kind": "Method",
    "detail": "Function (PBDRigidClusteredParticles ->)",
    "insertText": "RigidClusteredFlags(ParticleIdx).SetChildToParentLocked(bValue)"
  },
  {
    "label": "ConvexOptimizer()",
    "kind": "Method",
    "detail": "Function (} TPimplPtr<Private::FConvexOptimizer>&)",
    "insertText": "ConvexOptimizer()"
  },
  {
    "label": "SetInternalStrains()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetInternalStrains(const FRealSingle Value)"
  },
  {
    "label": "SetExternalStrains()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExternalStrains(const FRealSingle Value)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} class FRigidClustering ; Chaos::FRealSingle MaxStrain = TNumericLimits<Chaos::FRealSingle)",
    "insertText": "Max() - TNumericLimits<Chaos::FRealSingle>::Min()"
  },
  {
    "label": "TPBDGeometryCollectionParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (} ; template<T,int d,bool bPersistent = true> class TPBDGeometryCollectionParticleHandleImp : public TPBDRigidClusteredParticleHandleImp<T,d,bPersistent> { public : using TGeometryParticleHandleImp<T,d,bPersistent>::ParticleIdx ; using TGeometryParticleHandleImp<T,d,bPersistent>::PBDRigidParticles ; using TGeometryParticleHandleImp<T,d,bPersistent>::Type ; using TTransientHandle = TTransientPBDGeometryCollectionParticleHandle<T,d> ; using TSOAType = TPBDGeometryCollectionParticles<T,d> ; protected : class TGeometryParticleHandleImp<T,d,bPersistent> ;)",
    "insertText": "TPBDGeometryCollectionParticleHandleImp() : TPBDRigidClusteredParticleHandleImp<T, d, bPersistent>()"
  },
  {
    "label": "bPersistent()",
    "kind": "Method",
    "detail": "Function (} TPBDGeometryCollectionParticleHandleImp<T,d,)",
    "insertText": "bPersistent(TSerializablePtr<TPBDGeometryCollectionParticles<T, d>> Particles, int32 InIdx, int32 InGlobalIdx, const FPBDRigidParticleParameters& Params = FPBDRigidParticleParameters()) : TPBDRigidClusteredParticleHandleImp<T, d, bPersistent>( TSerializablePtr<TPBDRigidClusteredParticles<T, d>>(Particles), InIdx, InGlobalIdx, Params)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TPBDGeometryCollectionParticleHandleImp<T,d,bPersistent>>)",
    "insertText": "CreateParticleHandle(TSerializablePtr<TPBDGeometryCollectionParticles<T, d>> InParticles, int32 InParticleIdx, int32 InHandleIdx, const FPBDRigidParticleParameters& Params = FPBDRigidParticleParameters())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} enum class EWakeEventEntry : uint8 { None,Awake,Sleep } ; template<T,int d,bool bPersistent> FString TGeometryParticleHandleImp<T,d,bPersistent)",
    "insertText": "ToString()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (default : break ; } return)",
    "insertText": "FString()"
  },
  {
    "label": "FGenericParticleHandleImp()",
    "kind": "Method",
    "detail": "Function (} class FGenericParticleHandleImp { public : using FDynamicParticleHandleType = FPBDRigidParticleHandle ; using FKinematicParticleHandleType = FKinematicGeometryParticleHandle ;)",
    "insertText": "FGenericParticleHandleImp(FGeometryParticleHandle* InHandle) : MHandle(InHandle)"
  },
  {
    "label": "IsStatic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStatic()"
  },
  {
    "label": "GeometryParticleHandle()",
    "kind": "Method",
    "detail": "Function (} const FGeometryParticleHandle*)",
    "insertText": "GeometryParticleHandle()"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransform(const FVec3& Pos, const FRotation3& Rot)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "SetX(Pos)"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "SetR(Rot)"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (Dynamic ->)",
    "insertText": "SetP(Pos)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (Dynamic ->)",
    "insertText": "SetQ(Rot)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return MHandle ->)",
    "insertText": "X()"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetX(const FVec3& InX)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "SetX(InX)"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetR(const FRotation3& InR)"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "SetR(InR)"
  },
  {
    "label": "AuxilaryValue()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto&)",
    "insertText": "AuxilaryValue(Container& AuxContainer)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "V()"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "W()"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetV(const FVec3& InV)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToKinematicParticle()->SetV(InV)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetW(const FVec3& InW)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToKinematicParticle()->SetW(InW)"
  },
  {
    "label": "SetVf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVf(const FVec3f& InV)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToKinematicParticle()->SetVf(InV)"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetWf(const FVec3f& InW)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToKinematicParticle()->SetWf(InW)"
  },
  {
    "label": "FIterationSettings()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FIterationSettings(0, 0, 0)"
  },
  {
    "label": "PreV()",
    "kind": "Method",
    "detail": "Function (} return false ; } const FVec3)",
    "insertText": "PreV()"
  },
  {
    "label": "PreW()",
    "kind": "Method",
    "detail": "Function (} return ZeroVector ; } const FVec3)",
    "insertText": "PreW()"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetP(const FVec3& InP)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "P()"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQ(const FRotation3& InQ)"
  },
  {
    "label": "Q()",
    "kind": "Method",
    "detail": "Function (} const FRotation3)",
    "insertText": "Q()"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToRigidParticle()->InitTransform(InP, InQ)"
  },
  {
    "label": "InitTransform()",
    "kind": "Method",
    "detail": "Function (} MHandle ->)",
    "insertText": "InitTransform(InP, InQ)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransformPQCom(const FVec3& InPCom, const FRotation3& InQCom)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToRigidParticle()->SetTransformPQCom(InPCom, InQCom)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetTransform(InPCom, InQCom)"
  },
  {
    "label": "GetComRelativePosition()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetComRelativePosition(const FVec3& P)"
  },
  {
    "label": "GetComRelativeRotation()",
    "kind": "Method",
    "detail": "Function (} return P ; } FRotation3)",
    "insertText": "GetComRelativeRotation(const FRotation3& Q)"
  },
  {
    "label": "GetComRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} return Q ; } FRigidTransform3)",
    "insertText": "GetComRelativeTransform(const FRigidTransform3& T)"
  },
  {
    "label": "HasBoundingBox()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBoundingBox()"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (} const FAABB3&)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "UpdateWorldSpaceState(WorldTransform, BoundsExpansion)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (} return TVec3<)",
    "insertText": "FRealSingle(0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(FReal)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FVec3(0)"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCenterOfMass(const FVec3& InCom)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToRigidParticle()->SetCenterOfMass(InCom)"
  },
  {
    "label": "FromIdentity()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromIdentity()"
  },
  {
    "label": "SetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationOfMass(const FRotation3& InRom)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "CastToRigidParticle()->SetRotationOfMass(InRom)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (} return TVec3<)",
    "insertText": "FRealSingle(1)"
  },
  {
    "label": "SetInvIConditioning()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetInvIConditioning(InInvIConditioning)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FReal(0)"
  },
  {
    "label": "SetConstraintGraphNode()",
    "kind": "Method",
    "detail": "Function (MHandle ->)",
    "insertText": "SetConstraintGraphNode(InNode)"
  },
  {
    "label": "FGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (class FGenericParticleHandle { public :)",
    "insertText": "FGenericParticleHandle() : Imp(nullptr)"
  },
  {
    "label": "FGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGenericParticleHandle(FGeometryParticleHandle* InHandle) : Imp(InHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FGenericParticleHandleImp*)",
    "insertText": "operator()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FGenericParticleHandleImp*)",
    "insertText": "Get()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FGenericParticleHandle& H)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGenericParticleHandle& L, const FGenericParticleHandle& R)"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (class FConstGenericParticleHandle { public :)",
    "insertText": "FConstGenericParticleHandle() : Imp(nullptr)"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstGenericParticleHandle(const FGeometryParticleHandle* InHandle) : Imp(const_cast<FGeometryParticleHandle*>(InHandle))"
  },
  {
    "label": "FConstGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstGenericParticleHandle(const FGenericParticleHandle InHandle) : Imp(InHandle->Handle())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FConstGenericParticleHandle& H)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FConstGenericParticleHandle& L, const FConstGenericParticleHandle& R)"
  },
  {
    "label": "TGeometryParticleHandles()",
    "kind": "Method",
    "detail": "Function (template<T,int d> class TGeometryParticleHandles : public TArrayCollection { public :)",
    "insertText": "TGeometryParticleHandles()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&Handles)"
  },
  {
    "label": "AddHandles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHandles(int32 NumHandles)"
  },
  {
    "label": "AddElementsHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementsHelper(NumHandles)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResizeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeHelper(0)"
  },
  {
    "label": "DestroyHandleSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyHandleSwap(TGeometryParticleHandle<T,d>* Handle)"
  },
  {
    "label": "RemoveAtSwapHelper()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "RemoveAtSwapHelper(UnstableIdx)"
  },
  {
    "label": "ResizeHelper()",
    "kind": "Method",
    "detail": "Function (Ar<<Handles ;)",
    "insertText": "ResizeHelper(Handles.Num())"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} const TUniquePtr<TGeometryParticleHandle<T,d>>&)",
    "insertText": "Handle(int32 Idx)"
  },
  {
    "label": "FParticleData()",
    "kind": "Method",
    "detail": "Function (Type = EParticleType::; } ~)",
    "insertText": "FParticleData()"
  },
  {
    "label": "TGeometryParticle()",
    "kind": "Method",
    "detail": "Function (EParticleType Type ; } ; template<T,int d> class TGeometryParticle { public : typedef TGeometryParticleHandle<T,d> FHandle ; bool AlwaysSerializable = true ; protected :)",
    "insertText": "TGeometryParticle(const FGeometryParticleParameters& StaticParams = FGeometryParticleParameters())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (Type = EParticleType::; Proxy = nullptr ; MUserData = nullptr ; GeometryParticleDefaultConstruct<T,)",
    "insertText": "d(*this, StaticParams)"
  },
  {
    "label": "CreateParticle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TGeometryParticle<T,d>>)",
    "insertText": "CreateParticle(const FGeometryParticleParameters& Params = FGeometryParticleParameters())"
  },
  {
    "label": "TGeometryParticle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TGeometryParticle()"
  },
  {
    "label": "SetUniqueIdx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueIdx(FUniqueIdx{}, false)"
  },
  {
    "label": "TGeometryParticle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeometryParticle(const TGeometryParticle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TGeometryParticle&)",
    "insertText": "operator(const TGeometryParticle&)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar<<MXR ; Ar<<MNonFrequentData ; Ar<<MShapesArray ; Ar<<Type ; Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeBounds()"
  },
  {
    "label": "IsParticleValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsParticleValid()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (auto Geometry = MNonFrequentData .)",
    "insertText": "Read().GetGeometry()"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (} TGeometryParticle<T,d>*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, TGeometryParticle<T, d>* Serializable)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetX(const TVector<T, d>& InX, bool bInvalidate = true)"
  },
  {
    "label": "SetUniqueIdx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUniqueIdx(const FUniqueIdx UniqueIdx, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[UniqueIdx](auto& Data){ Data.SetUniqueIdx(UniqueIdx);})"
  },
  {
    "label": "SetParticleID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParticleID(const FParticleID& ParticleID, bool bInvalidate = true)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "R()"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetR(const TRotation<T, d>& InR, bool bInvalidate = true)"
  },
  {
    "label": "XR()",
    "kind": "Method",
    "detail": "Function (const FParticlePositionRotation&)",
    "insertText": "XR()"
  },
  {
    "label": "SetXR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetXR(const FParticlePositionRotation& InXR, bool bInvalidate = true)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MXR .)",
    "insertText": "Write(InXR,bInvalidate,MDirtyFlags,Proxy)"
  },
  {
    "label": "SetGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeometry(Chaos::FImplicitObjectPtr ImplicitObjectPtr)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&ImplicitObjectPtr](auto& Data){ Data.SetGeometry(Chaos::FImplicitObjectPtr(ImplicitObjectPtr));})"
  },
  {
    "label": "UpdateShapesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapesArray()"
  },
  {
    "label": "RemoveShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveShape(FPerShapeData* InShape, bool bWakeTouching)"
  },
  {
    "label": "UserData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "UserData()"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeBounds(FRigidTransform3(X(), R()))"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateShapeBounds(const FRigidTransform3& Transform)"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (Shape ->)",
    "insertText": "UpdateShapeBounds(Transform)"
  },
  {
    "label": "SetShapeSimCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetShapeSimCollisionEnabled(int32 InShapeIndex, bool bInEnabled)"
  },
  {
    "label": "GetSimEnabled()",
    "kind": "Method",
    "detail": "Function (const bool bCurrent = MShapesArray [ InShapeIndex ] ->)",
    "insertText": "GetSimEnabled()"
  },
  {
    "label": "SetSimEnabled()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ InShapeIndex ] ->)",
    "insertText": "SetSimEnabled(bInEnabled)"
  },
  {
    "label": "SetShapeQueryCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetShapeQueryCollisionEnabled(int32 InShapeIndex, bool bInEnabled)"
  },
  {
    "label": "GetQueryEnabled()",
    "kind": "Method",
    "detail": "Function (const bool bCurrent = MShapesArray [ InShapeIndex ] ->)",
    "insertText": "GetQueryEnabled()"
  },
  {
    "label": "SetQueryEnabled()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ InShapeIndex ] ->)",
    "insertText": "SetQueryEnabled(bInEnabled)"
  },
  {
    "label": "SetShapeCollisionTraceType()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetShapeCollisionTraceType(int32 InShapeIndex,EChaosCollisionTraceFlag TraceType)"
  },
  {
    "label": "GetCollisionTraceType()",
    "kind": "Method",
    "detail": "Function (const EChaosCollisionTraceFlag Current = MShapesArray [ InShapeIndex ] ->)",
    "insertText": "GetCollisionTraceType()"
  },
  {
    "label": "SetCollisionTraceType()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ InShapeIndex ] ->)",
    "insertText": "SetCollisionTraceType(TraceType)"
  },
  {
    "label": "SetShapeSimData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetShapeSimData(int32 InShapeIndex,const FCollisionFilterData& SimData)"
  },
  {
    "label": "GetSimData()",
    "kind": "Method",
    "detail": "Function (const FCollisionFilterData& Current = MShapesArray [ InShapeIndex ] ->)",
    "insertText": "GetSimData()"
  },
  {
    "label": "SetSimData()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ InShapeIndex ] ->)",
    "insertText": "SetSimData(SimData)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&InDebugName](auto& Data){ Data.SetDebugName(InDebugName);})"
  },
  {
    "label": "MergeShapesArray()",
    "kind": "Method",
    "detail": "Function (} # endif return Private::EmptyParticleName ; } void)",
    "insertText": "MergeShapesArray(FShapesArray&& InShapesArray)"
  },
  {
    "label": "MergeShapeInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeShapeInstances(reinterpret_cast<FShapeInstanceProxyArray&&>(InShapesArray))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MShapesArray =)",
    "insertText": "MoveTemp(InShapes)"
  },
  {
    "label": "MergeShapeInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeShapeInstances(FShapeInstanceProxyArray&& InShapes)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int Idx = MShapesArray .)",
    "insertText": "Num() - InShapes.Num()"
  },
  {
    "label": "ModifyShapeIndex()",
    "kind": "Method",
    "detail": "Function (Shape ->)",
    "insertText": "ModifyShapeIndex(Idx)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ Idx + + ] =)",
    "insertText": "MoveTemp(Shape)"
  },
  {
    "label": "SetIgnoreAnalyticCollisionsImp()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetIgnoreAnalyticCollisionsImp(FImplicitObject* Implicit, bool bIgnoreAnalyticCollisions)"
  },
  {
    "label": "SetIgnoreAnalyticCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreAnalyticCollisions(bool bIgnoreAnalyticCollisions)"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (EParticleType)",
    "insertText": "ObjectType()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[Idx](auto& Data){ Data.SetSpatialIdx(Idx);})"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [ResimType](auto& Data) { Data.SetResimType(ResimType); })"
  },
  {
    "label": "ResimType()",
    "kind": "Method",
    "detail": "Function (} EResimType)",
    "insertText": "ResimType()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bEnabledDuringResim](auto& Data) { Data.SetEnabledDuringResim(bEnabledDuringResim); })"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MNonFrequentData .)",
    "insertText": "Write(InData,true,MDirtyFlags,Proxy)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "IsClean()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClean()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty(const EChaosPropertyFlags CheckBits)"
  },
  {
    "label": "ForceDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForceDirty(EChaosPropertyFlags CheckBits)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (MDirtyFlags .)",
    "insertText": "MarkDirty(CheckBits)"
  },
  {
    "label": "DirtyFlags()",
    "kind": "Method",
    "detail": "Function (} const FDirtyChaosPropertyFlags&)",
    "insertText": "DirtyFlags()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (MDirtyFlags .)",
    "insertText": "Clear()"
  },
  {
    "label": "SyncRemoteData()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "SyncRemoteData(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData, const TArray<int32>& ShapeDataIndices, FShapeDirtyData* ShapesRemoteData)"
  },
  {
    "label": "SetParticleBufferType()",
    "kind": "Method",
    "detail": "Function (RemoteData .)",
    "insertText": "SetParticleBufferType(Type)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (RemoteData .)",
    "insertText": "SetFlags(MDirtyFlags)"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteDataImp(Manager, DataIdx, RemoteData)"
  },
  {
    "label": "GetShapeIdx()",
    "kind": "Method",
    "detail": "Function (FShapeDirtyData& ShapeRemoteData = ShapesRemoteData [ ShapeDataIdx ] ; const int32 ShapeIdx = ShapeRemoteData .)",
    "insertText": "GetShapeIdx()"
  },
  {
    "label": "SyncRemoteData()",
    "kind": "Method",
    "detail": "Function (MShapesArray [ ShapeIdx ] ->)",
    "insertText": "SyncRemoteData(Manager, ShapeDataIdx, ShapeRemoteData)"
  },
  {
    "label": "PrepareBVH()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PrepareBVH()"
  },
  {
    "label": "PrepareBVHImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareBVHImpl()"
  },
  {
    "label": "GetProxy()",
    "kind": "Method",
    "detail": "Function (} } class IPhysicsProxyBase*)",
    "insertText": "GetProxy()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Proxy = InProxy ;)",
    "insertText": "if(Proxy)"
  },
  {
    "label": "AddDirtyProxy()",
    "kind": "Method",
    "detail": "Function (PhysicsSolverBase ->)",
    "insertText": "AddDirtyProxy(Proxy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(auto& Shape : MShapesArray)"
  },
  {
    "label": "SetProxy()",
    "kind": "Method",
    "detail": "Function (Shape ->)",
    "insertText": "SetProxy(Proxy)"
  },
  {
    "label": "ModifyGeometry()",
    "kind": "Method",
    "detail": "Function (} } protected : class IPhysicsProxyBase* Proxy ; enum class EGeometryAccess { Direct,ShallowCopy,DeepCopy } ; template<Lambda> void)",
    "insertText": "ModifyGeometry(const Lambda& Func, const bool bDirectAccess = false)"
  },
  {
    "label": "ModifyGeometry()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "ModifyGeometry(EGeometryAccess AccessType, const Lambda& Func)"
  },
  {
    "label": "GetSolverBase()",
    "kind": "Method",
    "detail": "Function (FPhysicsSolverBase* Solver = Proxy ? Proxy ->)",
    "insertText": "GetSolverBase()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AccessType = EGeometryAccess::Direct ; } else)",
    "insertText": "if(AccessType == EGeometryAccess::ShallowCopy && CVars::ForceDeepCopyOnModifyGeometry())"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (AccessType = EGeometryAccess::DeepCopy ; } MNonFrequentData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [this, Solver, &Func, AccessType](auto& Data) { FImplicitObjectPtr GeomToModify = nullptr; bool bNewGeom = false; if(Data.GetGeometry()) { switch(AccessType) { case EGeometryAccess::Direct: GeomToModify = Data.AccessGeometryDangerous(); break; case EGeometryAccess::ShallowCopy: GeomToModify = Data.GetGeometry()->CopyGeometry(); bNewGeom = true; break; case EGeometryAccess::DeepCopy: GeomToModify = Data.GetGeometry()->DeepCopyGeometry(); bNewGeom = true; break; default: check(false); break; } Func(*GeomToModify); if(bNewGeom) { Data.SetGeometry(GeomToModify); } else { CVD_TRACE_INVALIDATE_CACHED_GEOMETRY(GeomToModify); } UpdateShapesArray(); } })"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteDataImp(FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (MXR .)",
    "insertText": "SyncRemote(Manager, DataIdx, RemoteData)"
  },
  {
    "label": "UpdateParticleShapes()",
    "kind": "Method",
    "detail": "Function (} } ; template<ParticleType> void)",
    "insertText": "UpdateParticleShapes(const TArray<ParticleType*>& ShapesParticles, const FImplicitObject* ImplicitObject, const FShapesArray& ShapesArray, const int32 ActorId, const int32 ComponentID)"
  },
  {
    "label": "GetCollisionData()",
    "kind": "Method",
    "detail": "Function ({ FCollisionData Data = TemplateShape ->)",
    "insertText": "GetCollisionData()"
  },
  {
    "label": "SetCollisionData()",
    "kind": "Method",
    "detail": "Function (Data . UserData = nullptr ; ShapeData ->)",
    "insertText": "SetCollisionData(Data)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (} { FCollisionFilterData Data = TemplateShape ->)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "SetQueryData()",
    "kind": "Method",
    "detail": "Function (Data . Word0 = ActorId ; ShapeData ->)",
    "insertText": "SetQueryData(Data)"
  },
  {
    "label": "SetSimData()",
    "kind": "Method",
    "detail": "Function (Data . Word0 = 0 ; Data . Word2 = ComponentID ; ShapeData ->)",
    "insertText": "SetSimData(Data)"
  },
  {
    "label": "SetSimEnabled()",
    "kind": "Method",
    "detail": "Function (} ShapeData ->)",
    "insertText": "SetSimEnabled(TemplateShape->GetSimEnabled())"
  },
  {
    "label": "SetQueryEnabled()",
    "kind": "Method",
    "detail": "Function (ShapeData ->)",
    "insertText": "SetQueryEnabled(TemplateShape->GetQueryEnabled())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } } template<T,int d> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TGeometryParticle<T, d>& Particle)"
  },
  {
    "label": "TKinematicGeometryParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TKinematicGeometryParticle(const FKinematicGeometryParticleParameters& KinematicParams = FKinematicGeometryParticleParameters()) : TGeometryParticle<T, d>(KinematicParams)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (Type = EParticleType::Kinematic ; KinematicGeometryParticleDefaultConstruct<T,)",
    "insertText": "d(*this, KinematicParams)"
  },
  {
    "label": "CreateParticle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TKinematicGeometryParticle<T,d>>)",
    "insertText": "CreateParticle(const FKinematicGeometryParticleParameters& Params = FKinematicGeometryParticleParameters())"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetV(const TVector<T, d>& InV, bool bInvalidate = true)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetW(const TVector<T, d>& InW, bool bInvalidate = true)"
  },
  {
    "label": "SetKinematicTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKinematicTarget(const FKinematicTarget& KinematicTarget, bool bInvalidate = true)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MKinematicTarget .)",
    "insertText": "Write(KinematicTarget, bInvalidate, MDirtyFlags, Proxy)"
  },
  {
    "label": "IsKinematicTargetDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsKinematicTargetDirty()"
  },
  {
    "label": "ClearKinematicTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearKinematicTarget()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (MKinematicTarget .)",
    "insertText": "Clear(MDirtyFlags, Proxy)"
  },
  {
    "label": "Velocities()",
    "kind": "Method",
    "detail": "Function (} const FParticleVelocities&)",
    "insertText": "Velocities()"
  },
  {
    "label": "SetVelocities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocities(const FParticleVelocities& InVelocities,bool bInvalidate = true)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MVelocities .)",
    "insertText": "Write(InVelocities,bInvalidate,MDirtyFlags,Proxy)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (TKinematicGeometryParticle<T,d>*)",
    "insertText": "Cast(TGeometryParticle<T, d>* Particle)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} const TKinematicGeometryParticle<T,d>*)",
    "insertText": "Cast(const TGeometryParticle<T, d>* Particle)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (TPBDRigidParticle<T,)",
    "insertText": "d(const FPBDRigidParticleParameters& DynamicParams = FPBDRigidParticleParameters()) : TKinematicGeometryParticle<T, d>(DynamicParams), MWakeEvent(EWakeEventEntry::None)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (Type = EParticleType::Rigid ; MIsland = INDEX_NONE ; PBDRigidParticleDefaultConstruct<T,)",
    "insertText": "d(*this, DynamicParams)"
  },
  {
    "label": "ClearForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForces()"
  },
  {
    "label": "ClearTorques()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques()"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectState(DynamicParams.bStartSleeping ? EObjectStateType::Sleeping : EObjectStateType::Dynamic)"
  },
  {
    "label": "ClearEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEvents()"
  },
  {
    "label": "SetInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialized(false)"
  },
  {
    "label": "CreateParticle()",
    "kind": "Method",
    "detail": "Function (} public : TUniquePtr<TPBDRigidParticle<T,d>>)",
    "insertText": "CreateParticle(const FPBDRigidParticleParameters& DynamicParams = FPBDRigidParticleParameters())"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[InCollisionGroup](auto& Data){ Data.SetCollisionGroup(InCollisionGroup);})"
  },
  {
    "label": "SetGravityEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGravityEnabled(const bool bInEnabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInEnabled](auto& Data) { Data.SetGravityEnabled(bInEnabled); })"
  },
  {
    "label": "SetGravityGroupIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGravityGroupIndex(int32 NewIndex)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [NewIndex](auto& Data) { Data.SetGravityGroupIndex(NewIndex); })"
  },
  {
    "label": "SetUpdateKinematicFromSimulation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUpdateKinematicFromSimulation(const bool bUpdateKinematicFromSimulation)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bUpdateKinematicFromSimulation](auto& Data) { Data.SetUpdateKinematicFromSimulation(bUpdateKinematicFromSimulation); })"
  },
  {
    "label": "SetOneWayInteraction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOneWayInteraction(const bool bInEnabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInEnabled](auto& Data) { Data.SetOneWayInteraction(bInEnabled); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [Flag](auto& Data) { Data.AddCollisionConstraintFlag(Flag); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [Flag](auto& Data) { Data.RemoveCollisionConstraintFlag(Flag); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [Flags](auto& Data) { Data.SetCollisionConstraintFlags(Flags); })"
  },
  {
    "label": "SetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCCDEnabled(bool bInEnabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInEnabled](auto& Data) { Data.SetCCDEnabled(bInEnabled); })"
  },
  {
    "label": "SetMACDEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMACDEnabled(bool bInEnabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInEnabled](auto& Data) { Data.SetMACDEnabled(bInEnabled); })"
  },
  {
    "label": "SetIterationSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIterationSettings(const Private::FIterationSettings& SolverIterationSettingsIn)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [SolverIterationSettingsIn](auto& Data) { Data.SetIterationSettings(SolverIterationSettingsIn); })"
  },
  {
    "label": "SetPositionSolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPositionSolverIterations(const uint32 PositionSolverIterationCount)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [PositionSolverIterationCount](auto& Data) { Data.SetPositionSolverIterationCount((int32)PositionSolverIterationCount); })"
  },
  {
    "label": "SetVelocitySolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocitySolverIterations(const uint32 VelocitySolverIterationCount)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [VelocitySolverIterationCount](auto& Data) { Data.SetVelocitySolverIterationCount((int32)VelocitySolverIterationCount); })"
  },
  {
    "label": "SetProjectionSolverIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProjectionSolverIterations(const uint32 ProjectionSolverIterationCount)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [ProjectionSolverIterationCount](auto& Data) { Data.SetProjectionSolverIterationCount((int32)ProjectionSolverIterationCount); })"
  },
  {
    "label": "SetInertiaConditioningEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInertiaConditioningEnabled(bool bInEnabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInEnabled](auto& Data) { Data.SetInertiaConditioningEnabled(bInEnabled); })"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisabled(bool bInDisabled)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [bInDisabled](auto& Data) {Data.SetDisabled(bInDisabled); })"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAcceleration(const FVec3& Acceleration, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&Acceleration](auto& Data) { Data.SetAcceleration(Acceleration); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InF, InvMass](auto& Data){ Data.SetAcceleration(InF * InvMass + Data.Acceleration());})"
  },
  {
    "label": "ClearForces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearForces(bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [](auto& Data) { Data.SetAcceleration(FVec3(0)); })"
  },
  {
    "label": "ApplyDynamicsWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyDynamicsWeight(const FReal DynamicsWeight)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(false, MDirtyFlags, Proxy, [DynamicsWeight](auto& Data) { Data.SetAcceleration(Data.Acceleration() * DynamicsWeight); Data.SetAngularAcceleration(Data.AngularAcceleration() * DynamicsWeight); })"
  },
  {
    "label": "SetAngularAcceleration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularAcceleration(const TVector<T, d>& InTorque, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&InTorque](auto& Data) { Data.SetAngularAcceleration(InTorque);})"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTorque(const TVector<T, d>& InTorque, bool bInvalidate=true)"
  },
  {
    "label": "ClearTorques()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques(bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [](auto& Data) { Data.SetAngularAcceleration(FVec3(0)); })"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearImpulseVelocity(const TVector<T, d>& InLinearImpulseVelocity, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InLinearImpulseVelocity](auto& Data){ Data.SetLinearImpulseVelocity(InLinearImpulseVelocity);})"
  },
  {
    "label": "SetAngularImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAngularImpulseVelocity(const TVector<T, d>& InAngularImpulseVelocity, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InAngularImpulseVelocity](auto& Data){ Data.SetAngularImpulseVelocity(InAngularImpulseVelocity);})"
  },
  {
    "label": "SetDynamics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDynamics(const FParticleDynamics& InDynamics,bool bInvalidate = true)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MDynamics .)",
    "insertText": "Write(InDynamics,bInvalidate,MDirtyFlags,Proxy)"
  },
  {
    "label": "SetI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetI(const TVec3<FRealSingle>& InI, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InI](auto& Data){ Data.SetI(InI);})"
  },
  {
    "label": "SetInvI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInvI(const TVec3<FRealSingle>& InInvI, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InInvI](auto& Data){ Data.SetInvI(InInvI);})"
  },
  {
    "label": "SetM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetM(const T& InM, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[InM](auto& Data){ Data.SetM(InM);})"
  },
  {
    "label": "SetInvM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInvM(const T& InInvM, bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[InInvM](auto& Data){ Data.SetInvM(InInvM);})"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCenterOfMass(const TVector<T,d>& InCenterOfMass,bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InCenterOfMass](auto& Data){ Data.SetCenterOfMass(InCenterOfMass);})"
  },
  {
    "label": "SetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotationOfMass(const TRotation<T,d>& InRotationOfMass,bool bInvalidate = true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InRotationOfMass](auto& Data){ Data.SetRotationOfMass(InRotationOfMass);})"
  },
  {
    "label": "SetMassProps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMassProps(const FParticleMassProps& InProps)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "Write(InProps,true,MDirtyFlags,Proxy)"
  },
  {
    "label": "SetDynamicMisc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDynamicMisc(const FParticleDynamicMisc& DynamicMisc)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Write(DynamicMisc,true,MDirtyFlags,Proxy)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&InLinearEtherDrag](auto& Data){ Data.SetLinearEtherDrag(InLinearEtherDrag);})"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&InAngularEtherDrag](auto& Data){ Data.SetAngularEtherDrag(InAngularEtherDrag);})"
  },
  {
    "label": "SetMaxLinearSpeedSq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxLinearSpeedSq(const T& InLinearSpeed)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&InLinearSpeed](auto& Data){ Data.SetMaxLinearSpeedSq(InLinearSpeed);})"
  },
  {
    "label": "SetMaxAngularSpeedSq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxAngularSpeedSq(const T& InAngularSpeed)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[&InAngularSpeed](auto& Data){ Data.SetMaxAngularSpeedSq(InAngularSpeed);})"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [InVel](auto& Data) { Data.SetInitialOverlapDepenetrationVelocity(InVel); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true, MDirtyFlags, Proxy, [Multiplier](auto& Data) { Data.SetSleepThresholdMultiplier(Multiplier); })"
  },
  {
    "label": "Island()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Island()"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObjectState(const EObjectStateType InState, bool bAllowEvents=false, bool bInvalidate=true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MWakeEvent = EWakeEventEntry::Sleep ; } else)",
    "insertText": "if(PreState == EObjectStateType::Sleeping && InState == EObjectStateType::Dynamic)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MWakeEvent = EWakeEventEntry::Awake ; } })",
    "insertText": "if(InState == EObjectStateType::Sleeping)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetV(FVec3(0.f), bInvalidate)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetW(FVec3(0.f), bInvalidate)"
  },
  {
    "label": "MarkClean()",
    "kind": "Method",
    "detail": "Function (MDirtyFlags .)",
    "insertText": "MarkClean(ChaosPropertyToFlag(EChaosProperty::Dynamics))"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} MMiscData .)",
    "insertText": "Modify(bInvalidate,MDirtyFlags,Proxy,[&InState](auto& Data){ Data.SetObjectState(InState);})"
  },
  {
    "label": "SetSleepType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleepType(ESleepType SleepType, bool bAllowEvents=false, bool bInvalidate=true)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MMiscData .)",
    "insertText": "Modify(true,MDirtyFlags,Proxy,[SleepType](auto& Data){ Data.SetSleepType(SleepType);})"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectState(EObjectStateType::Dynamic, bAllowEvents, bInvalidate)"
  },
  {
    "label": "GetWakeEvent()",
    "kind": "Method",
    "detail": "Function (MWakeEvent = EWakeEventEntry::None ; } EWakeEventEntry)",
    "insertText": "GetWakeEvent()"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteDataImp(Manager,DataIdx,RemoteData)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (MMassProps .)",
    "insertText": "SyncRemote(Manager,DataIdx,RemoteData)"
  },
  {
    "label": "FPBDGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (} } ; class FPBDGeometryCollectionParticle : public TPBDRigidParticle<FReal,3> { public : typedef TPBDGeometryCollectionParticleHandle<FReal,3> FHandle ; using FGeometryParticle::Type ; public :)",
    "insertText": "FPBDGeometryCollectionParticle(const FPBDRigidParticleParameters& DynamicParams = FPBDRigidParticleParameters()) : FPBDRigidParticle(DynamicParams)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,int d> void TGeometryParticle<T,d)",
    "insertText": "SetX(const TVector<T, d>& InX, bool bInvalidate)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MXR .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&InX](auto& Data) { Data.SetX(InX); })"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (} template<T,int d> void TGeometryParticle<T,d)",
    "insertText": "SetR(const TRotation<T, d>& InR, bool bInvalidate)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MXR .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&InR](auto& Data) { Data.SetR(InR); })"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (} template<T,int d> void TKinematicGeometryParticle<T,d)",
    "insertText": "SetV(const TVector<T, d>& InV, bool bInvalidate)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MVelocities .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&InV](auto& Data) { Data.SetV(InV); })"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (} template<T,int d> void TKinematicGeometryParticle<T,d)",
    "insertText": "SetW(const TVector<T, d>& InW, bool bInvalidate)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MVelocities .)",
    "insertText": "Modify(bInvalidate, MDirtyFlags, Proxy, [&InW](auto& Data) { Data.SetW(InW); })"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "IsLoading() ? 0 : (int8)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (Ar<<ObjectType ;)",
    "insertText": "switch((EParticleType)ObjectType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case EParticleType::Kinematic :)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "check(false)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<> void Chaos::TGeometryParticle<FReal,3)",
    "insertText": "MarkDirty(const EChaosPropertyFlags DirtyBits, bool bInvalidate)"
  },
  {
    "label": "UpdatePrePreFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrePreFilter(*InHandle)"
  },
  {
    "label": "FAccelerationStructureHandle()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FAccelerationStructureHandle(FGeometryParticle* InGeometryParticle, bool bUsePrefiltering) : ExternalGeometryParticle(InGeometryParticle) , GeometryParticleHandle(InGeometryParticle ? InGeometryParticle->Handle() : nullptr) , CachedUniqueIdx(InGeometryParticle ? InGeometryParticle->UniqueIdx() : FUniqueIdx()) , bCanPrePreFilter(false)"
  },
  {
    "label": "UpdatePrePreFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrePreFilter(*InGeometryParticle)"
  },
  {
    "label": "FAccelerationStructureHandle()",
    "kind": "Method",
    "detail": "Function (} } } template<bool bPersistent>)",
    "insertText": "FAccelerationStructureHandle(TGeometryParticleHandleImp<FReal, 3, bPersistent>& InHandle) : ExternalGeometryParticle(InHandle.GTGeometryParticle()) , GeometryParticleHandle(InHandle.Handle()) , CachedUniqueIdx(InHandle.UniqueIdx()) , bCanPrePreFilter(false)"
  },
  {
    "label": "UpdatePrePreFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrePreFilter(InHandle)"
  },
  {
    "label": "ComputeParticleQueryFilterDataFromShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeParticleQueryFilterDataFromShapes(Particle, UnionQueryFilterData)"
  },
  {
    "label": "ComputeParticleSimFilterDataFromShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeParticleSimFilterDataFromShapes(Particle, UnionSimFilterData)"
  },
  {
    "label": "AsAlwaysSerializable()",
    "kind": "Method",
    "detail": "Function (Ar<<)",
    "insertText": "AsAlwaysSerializable(ExternalGeometryParticle)"
  },
  {
    "label": "AsAlwaysSerializable()",
    "kind": "Method",
    "detail": "Function (Ar<<)",
    "insertText": "AsAlwaysSerializable(GeometryParticleHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 DummyHash ; Ar<<DummyHash ; })",
    "insertText": "if(GeometryParticleHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ExternalGeometryParticle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GeometryParticleHandle && ExternalGeometryParticle)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(!GeometryParticleHandle || CachedUniqueIdx.IsValid())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, FAccelerationStructureHandle& AccelerationHandle)"
  },
  {
    "label": "DrawParticleShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawParticleShapes(FRigidTransform3(), ExternalGeometryParticle, bHit ? FColor::Red : FColor::Green)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GeometryParticleHandle && !bExternal)"
  },
  {
    "label": "DrawParticleShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawParticleShapes(FRigidTransform3(), GeometryParticleHandle, bHit ? FColor(200, 100, 100) : FColor(100, 200, 100))"
  },
  {
    "label": "SetObjectStateHelper()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "SetObjectStateHelper(IPhysicsProxyBase& Proxy, FPBDRigidParticle& Rigid, EObjectStateType InState, bool bAllowEvents = false, bool bInvalidate = true)"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (Rigid .)",
    "insertText": "SetObjectState(InState, bAllowEvents, bInvalidate)"
  },
  {
    "label": "SetObjectStateHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObjectStateHelper(IPhysicsProxyBase& Proxy, FPBDRigidParticleHandle& Rigid, EObjectStateType InState, bool bAllowEvents = false, bool bInvalidate = true)"
  }
]