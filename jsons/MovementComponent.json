[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Chaos / ChaosEngineInterface . h \" # include \" Components / ActorComponent . h \" # include \" Components / SceneComponent . h \" # include \" MovementComponent . generated . h \" class AActor ; class APhysicsVolume ; class UPrimitiveComponent ; struct FCollisionQueryParams ; struct FCollisionResponseParams ; struct FCollisionShape ; namespace MovementComponentCVars { int32 MoveIgnoreFirstBlockingOverlap ; float PenetrationOverlapCheckInflation ; float PenetrationPullbackDistance ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Custom,X,Y,Z,UseGlobalPhysicsSetting } ;)",
    "insertText": "UCLASS(ClassGroup=Movement, abstract, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(BlueprintReadOnly, Transient, DuplicateTransient, Category=MovementComponent)"
  },
  {
    "label": "GetPlaneConstraintNormalFromAxisSetting()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPlaneConstraintNormalFromAxisSetting(EPlaneConstraintAxisSetting AxisSetting)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "RegisterComponentTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentTickFunctions(bool bRegister)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PhysicsLockedAxisSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsLockedAxisSettingChanged()"
  },
  {
    "label": "ShouldSkipUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipUpdate(float DeltaTime)"
  },
  {
    "label": "IsInWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInWater()"
  },
  {
    "label": "UpdateTickRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTickRegistration()"
  },
  {
    "label": "HandleImpact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleImpact(const FHitResult& Hit, float TimeSlice=0.f, const FVector& MoveDelta = FVector::ZeroVector)"
  },
  {
    "label": "UpdateComponentVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentVelocity()"
  },
  {
    "label": "InitCollisionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCollisionParams(FCollisionQueryParams &OutParams, FCollisionResponseParams& OutResponseParam)"
  },
  {
    "label": "OverlapTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTest(const FVector& Location, const FQuat& RotationQuat, const ECollisionChannel CollisionChannel, const FCollisionShape& CollisionShape, const AActor* IgnoreActor)"
  },
  {
    "label": "MoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveUpdatedComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit = NULL, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveUpdatedComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, FHitResult* OutHit = NULL, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MoveUpdatedComponentImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "MoveUpdatedComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit = NULL, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SafeMoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeMoveUpdatedComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult& OutHit, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SafeMoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeMoveUpdatedComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, FHitResult& OutHit, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "GetPenetrationAdjustment()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPenetrationAdjustment(const FHitResult& Hit)"
  },
  {
    "label": "ResolvePenetration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePenetration(const FVector& Adjustment, const FHitResult& Hit, const FQuat& NewRotation)"
  },
  {
    "label": "ResolvePenetration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePenetration(const FVector& Adjustment, const FHitResult& Hit, const FRotator& NewRotation)"
  },
  {
    "label": "ResolvePenetrationImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ResolvePenetrationImpl(const FVector& Adjustment, const FHitResult& Hit, const FQuat& NewRotation)"
  },
  {
    "label": "ComputeSlideVector()",
    "kind": "Method",
    "detail": "Function (public : FVector)",
    "insertText": "ComputeSlideVector(const FVector& Delta, const float Time, const FVector& Normal, const FHitResult& Hit)"
  },
  {
    "label": "SlideAlongSurface()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SlideAlongSurface(const FVector& Delta, float Time, const FVector& Normal, FHitResult &Hit, bool bHandleImpact = false)"
  },
  {
    "label": "TwoWallAdjust()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TwoWallAdjust(FVector &Delta, const FHitResult& Hit, const FVector &OldHitNormal)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(const FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(const FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange)"
  },
  {
    "label": "OnTeleported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTeleported()"
  },
  {
    "label": "GetMaxSpeed()",
    "kind": "Method",
    "detail": "Function (} ; } ; float)",
    "insertText": "GetMaxSpeed()"
  },
  {
    "label": "GetPlaneConstraintAxisSetting()",
    "kind": "Method",
    "detail": "Function (} EPlaneConstraintAxisSetting)",
    "insertText": "GetPlaneConstraintAxisSetting()"
  },
  {
    "label": "MoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MoveUpdatedComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit, ETeleportType Teleport)"
  },
  {
    "label": "MoveUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MoveUpdatedComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, FHitResult* OutHit, ETeleportType Teleport)"
  }
]