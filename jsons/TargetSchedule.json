[
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "TargetSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSubtargetInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "TargetSchedModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSchedModel"
  },
  {
    "label": "computeInstrLatency()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_TARGETSCHEDULE_H # define LLVM_CODEGEN_TARGETSCHEDULE_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / MC / MCInstrItineraries . h \" # include \" llvm / MC / MCSchedule . h \" # include \" llvm / Target / TargetSubtargetInfo . h \" namespace llvm { class TargetRegisterInfo ; class TargetSubtargetInfo ; class TargetInstrInfo ; class MachineInstr ; class TargetSchedModel { MCSchedModel SchedModel ; InstrItineraryData InstrItins ; const TargetSubtargetInfo* STI ; const TargetInstrInfo* TII ; SmallVector<unsigned,1 6> ResourceFactors ; unsigned MicroOpFactor ; unsigned ResourceLCM ; unsigned)",
    "insertText": "computeInstrLatency(const MCSchedClassDesc &SCDesc)"
  },
  {
    "label": "TargetSchedModel()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TargetSchedModel(): SchedModel(MCSchedModel::GetDefaultSchedModel()), STI(nullptr), TII(nullptr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(const MCSchedModel &sm, const TargetSubtargetInfo *sti, const TargetInstrInfo *tii)"
  },
  {
    "label": "resolveSchedClass()",
    "kind": "Method",
    "detail": "Function (const MCSchedClassDesc*)",
    "insertText": "resolveSchedClass(const MachineInstr *MI)"
  },
  {
    "label": "getInstrInfo()",
    "kind": "Method",
    "detail": "Function (const TargetInstrInfo*)",
    "insertText": "getInstrInfo()"
  },
  {
    "label": "getMCSchedModel()",
    "kind": "Method",
    "detail": "Function (const MCSchedModel*)",
    "insertText": "getMCSchedModel()"
  },
  {
    "label": "getInstrItineraries()",
    "kind": "Method",
    "detail": "Function (const InstrItineraryData*)",
    "insertText": "getInstrItineraries()"
  },
  {
    "label": "getIssueWidth()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getIssueWidth()"
  },
  {
    "label": "getNumProcResourceKinds()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumProcResourceKinds()"
  },
  {
    "label": "getProcResource()",
    "kind": "Method",
    "detail": "Function (} const MCProcResourceDesc*)",
    "insertText": "getProcResource(unsigned PIdx)"
  },
  {
    "label": "getResourceName()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG const char*)",
    "insertText": "getResourceName(unsigned PIdx)"
  },
  {
    "label": "getWriteProcResBegin()",
    "kind": "Method",
    "detail": "Function (} # endif typedef const MCWriteProcResEntry* ProcResIter ; ProcResIter)",
    "insertText": "getWriteProcResBegin(const MCSchedClassDesc *SC)"
  },
  {
    "label": "getWriteProcResEnd()",
    "kind": "Method",
    "detail": "Function (} ProcResIter)",
    "insertText": "getWriteProcResEnd(const MCSchedClassDesc *SC)"
  },
  {
    "label": "getResourceFactor()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getResourceFactor(unsigned ResIdx)"
  },
  {
    "label": "computeOperandLatency()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "computeOperandLatency(const MachineInstr *DefMI, unsigned DefOperIdx, const MachineInstr *UseMI, unsigned UseOperIdx)"
  },
  {
    "label": "computeInstrLatency()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeInstrLatency(const MachineInstr *MI, bool UseDefaultDefLatency = true)"
  },
  {
    "label": "computeInstrLatency()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeInstrLatency(unsigned Opcode)"
  },
  {
    "label": "computeOutputLatency()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeOutputLatency(const MachineInstr *DefMI, unsigned DefIdx, const MachineInstr *DepMI)"
  }
]