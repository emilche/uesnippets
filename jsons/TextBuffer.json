[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UTextBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextBuffer"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / OutputDevice . h \" # include \" Serialization / StructuredArchive . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" class FArchive ; class UTextBuffer : public UObject,public FOutputDevice {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UTextBuffer, UObject, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_None, COREUOBJECT_API) public: COREUOBJECT_API UTextBuffer (const FObjectInitializer& ObjectInitializer, const TCHAR* InText)"
  },
  {
    "label": "UTextBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UTextBuffer(const TCHAR* InText)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (public : const FString&)",
    "insertText": "GetText()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName& Category, const double Time)"
  }
]