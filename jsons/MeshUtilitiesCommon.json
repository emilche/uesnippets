[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBoneVertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneVertInfo"
  },
  {
    "label": "FIndexAndZ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexAndZ"
  },
  {
    "label": "FCompareIndexAndZ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareIndexAndZ"
  },
  {
    "label": "FIndexAndZ()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" enum class ELightmapUVVersion : int32 { BitByBit = 0,Segments = 1,SmallChartPacking = 2,ScaleChartsOrderingFix = 3,ChartJoiningLFix = 4,Allocator2DFlipFix = 5,ConsiderLightmapPadding = 6,ForceLightmapPadding = 7,Segments2D = 8,OptimalSurfaceArea = 9,ScaleByEdgesLength = 1 0,Latest = ScaleByEdgesLength } ; struct FBoneVertInfo { TArray<FVector3f> Positions ; TArray<FVector3f> Normals ; } ; struct FIndexAndZ { float Z ; int32 Index ;)",
    "insertText": "FIndexAndZ()"
  },
  {
    "label": "FIndexAndZ()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndexAndZ(int32 InIndex, FVector3f V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Z = 0 . 3 0 f* V . X + 0 . 3 3 f* V . Y + 0 . 3 7 f* V . Z ; Index = InIndex ; } } ; struct FCompareIndexAndZ { bool)",
    "insertText": "operator()(FIndexAndZ const& A, FIndexAndZ const& B)"
  },
  {
    "label": "ComputeTriangleCornerAngle()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ComputeTriangleCornerAngle(const FVector3f& PointA, const FVector3f& PointB, const FVector3f& PointC)"
  },
  {
    "label": "E1()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "E1(PointB - PointA)"
  },
  {
    "label": "E2()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "E2(PointC - PointA)"
  }
]