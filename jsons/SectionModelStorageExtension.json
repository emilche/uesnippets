[
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectKey . h \" class ISequencerSection ; class UMovieSceneSection ; namespace UE { namespace Sequencer { class FSectionModel ; class FSequenceModel ; class FSectionModelStorageExtension : public IDynamicExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FSectionModelStorageExtension)"
  },
  {
    "label": "FSectionModelStorageExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionModelStorageExtension()"
  },
  {
    "label": "CreateModelForSection()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSectionModel>)",
    "insertText": "CreateModelForSection(UMovieSceneSection* InSection, TSharedRef<ISequencerSection> SectionInterface)"
  },
  {
    "label": "FindModelForSection()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSectionModel>)",
    "insertText": "FindModelForSection(const UMovieSceneSection* InSection)"
  },
  {
    "label": "OnReinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReinitialize()"
  }
]