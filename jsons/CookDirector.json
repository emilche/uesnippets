[
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FCookWorkerServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerServer"
  },
  {
    "label": "FAssignPackageExtraData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignPackageExtraData"
  },
  {
    "label": "FCookWorkerProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookWorkerProfileData"
  },
  {
    "label": "FGeneratorEventMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratorEventMessage"
  },
  {
    "label": "FGenerationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationHelper"
  },
  {
    "label": "FHeartbeatMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeartbeatMessage"
  },
  {
    "label": "FInitialConfigMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialConfigMessage"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FRetractionResultsMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetractionResultsMessage"
  },
  {
    "label": "FWorkerId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkerId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDirector"
  },
  {
    "label": "EShowWorker",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShowWorker"
  },
  {
    "label": "FLaunchInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLaunchInfo"
  },
  {
    "label": "FPendingConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingConnection"
  },
  {
    "label": "FRunnableShunt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunnableShunt"
  },
  {
    "label": "FRetractionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRetractionHandler"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FDirectorConnectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectorConnectionInfo"
  },
  {
    "label": "FWorkerConnectMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkerConnectMessage"
  },
  {
    "label": "FRetractionRequestMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRetractionRequestMessage"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CompactBinaryTCP . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Cooker / CookSockets . h \" # include \" Cooker / CookTypes . h \" # include \" Cooker / MPCollector . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Event . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / Runnable . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / Guid . h \" # include \" Misc / ScopeLock . h \" # include \" ProfilingDebugging / CookStats . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include<atomic> class FCbObject ; class FCbWriter ; class FRunnableThread ; class UCookOnTheFlyServer ; namespace UE::Cook { class FCookWorkerServer ; } namespace UE::Cook { struct FAssignPackageExtraData ; } namespace UE::Cook { struct FCookWorkerProfileData ; } namespace UE::Cook { struct FGeneratorEventMessage ; } namespace UE::Cook { struct FGenerationHelper ; } namespace UE::Cook { struct FHeartbeatMessage ; } namespace UE::Cook { struct FInitialConfigMessage ; } namespace UE::Cook { struct FPackageData ; } namespace UE::Cook { struct FRetractionResultsMessage ; } namespace UE::Cook { struct FWorkerId ; })",
    "insertText": "LLM_DECLARE_TAG(Cooker_MPCook)"
  },
  {
    "label": "FCookDirector()",
    "kind": "Method",
    "detail": "Function (namespace UE::Cook { enum class ECookDirectorThread : uint8 { SchedulerThread,CommunicateThread,Invalid,} ; class FCookDirector { public :)",
    "insertText": "FCookDirector(UCookOnTheFlyServer& InCOTFS, int32 CookProcessCount)"
  },
  {
    "label": "FCookDirector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookDirector()"
  },
  {
    "label": "IsMultiprocessAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultiprocessAvailable()"
  },
  {
    "label": "StartCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCook(const FBeginCookContext& Context)"
  },
  {
    "label": "AssignRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignRequests(TArrayView<FPackageData*> Requests, TArray<FWorkerId>& OutAssignments, TMap<FPackageData*, TArray<FPackageData*>>&& RequestGraph)"
  },
  {
    "label": "RemoveFromWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromWorker(FPackageData& PackageData)"
  },
  {
    "label": "BroadcastGeneratorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastGeneratorMessage(FGeneratorEventMessage&& Message)"
  },
  {
    "label": "TickFromSchedulerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFromSchedulerThread()"
  },
  {
    "label": "UpdateDisplayDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisplayDiagnostics()"
  },
  {
    "label": "PumpCookComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpCookComplete(bool& bOutCompleted)"
  },
  {
    "label": "ShutdownCookSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCookSession()"
  },
  {
    "label": "GetShowWorkerOption()",
    "kind": "Method",
    "detail": "Function (enum EShowWorker { CombinedLogs,SeparateLogs,SeparateWindows,} ; EShowWorker)",
    "insertText": "GetShowWorkerOption()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(IMPCollector* Collector)"
  },
  {
    "label": "GetLaunchInfo()",
    "kind": "Method",
    "detail": "Function (struct FLaunchInfo { EShowWorker ShowWorkerOption ; FString CommandletExecutable ; FString WorkerCommandLine ; } ; FLaunchInfo)",
    "insertText": "GetLaunchInfo(FWorkerId WorkerId, int32 ProfileId)"
  },
  {
    "label": "GetInitialConfigMessage()",
    "kind": "Method",
    "detail": "Function (const FInitialConfigMessage&)",
    "insertText": "GetInitialConfigMessage()"
  },
  {
    "label": "FPendingConnection()",
    "kind": "Method",
    "detail": "Function (private : enum class ELoadBalanceAlgorithm { Striped,CookBurden,} ; struct FPendingConnection {)",
    "insertText": "FPendingConnection(FSocket* InSocket = nullptr) :Socket(InSocket)"
  },
  {
    "label": "FPendingConnection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPendingConnection(FPendingConnection&& Other)"
  },
  {
    "label": "FPendingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingConnection(const FPendingConnection& Other)"
  },
  {
    "label": "FPendingConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPendingConnection()"
  },
  {
    "label": "DetachSocket()",
    "kind": "Method",
    "detail": "Function (FSocket*)",
    "insertText": "DetachSocket()"
  },
  {
    "label": "FRunnableShunt()",
    "kind": "Method",
    "detail": "Function (FSocket* Socket = nullptr ; UE::CompactBinaryTCP::FReceiveBuffer Buffer ; } ; struct FRunnableShunt : public FRunnable {)",
    "insertText": "FRunnableShunt(FCookDirector& InDirector) : Director(InDirector)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "ParseConfig()",
    "kind": "Method",
    "detail": "Function (FCookDirector& Director ; } ; class FRetractionHandler ; private : void)",
    "insertText": "ParseConfig(int32 CookProcessCount, bool& bOutValid)"
  },
  {
    "label": "TryCreateWorkerConnectSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateWorkerConnectSocket()"
  },
  {
    "label": "InitializeWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWorkers()"
  },
  {
    "label": "ConstructReadonlyThreadVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructReadonlyThreadVariables()"
  },
  {
    "label": "RecreateWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateWorkers()"
  },
  {
    "label": "ActivateMachineResourceReduction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateMachineResourceReduction()"
  },
  {
    "label": "LaunchCommunicationThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchCommunicationThread()"
  },
  {
    "label": "StopCommunicationThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCommunicationThread()"
  },
  {
    "label": "RunCommunicationThread()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RunCommunicationThread()"
  },
  {
    "label": "TickCommunication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCommunication(ECookDirectorThread TickThread)"
  },
  {
    "label": "TickWorkerConnects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickWorkerConnects(ECookDirectorThread TickThread)"
  },
  {
    "label": "TickWorkerShutdowns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickWorkerShutdowns(ECookDirectorThread TickThread)"
  },
  {
    "label": "GetWorkerLogFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorkerLogFileName(int32 ProfileId)"
  },
  {
    "label": "GetWorkerCommandLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorkerCommandLine(FWorkerId WorkerId, int32 ProfileId)"
  },
  {
    "label": "LoadBalance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBalance(TConstArrayView<FWorkerId> SortedWorkers, TArrayView<FPackageData*> Requests, TMap<FPackageData*, TArray<FPackageData*>>&& RequestGraph, TArray<FWorkerId>& OutAssignments)"
  },
  {
    "label": "TickHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickHeartbeat(bool bForceHeartbeat, double CurrentTimeSeconds, bool& bOutSendHeartbeat, int32& OutHeartbeatNumber)"
  },
  {
    "label": "ResetFinalIdleHeartbeatFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFinalIdleHeartbeatFence()"
  },
  {
    "label": "HandleHeartbeatMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatMessage(FMPCollectorServerMessageContext& Context, bool bReadSuccessful, FHeartbeatMessage&& Message)"
  },
  {
    "label": "AbortWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortWorker(FWorkerId WorkerId, ECookDirectorThread TickThread)"
  },
  {
    "label": "ReassignAbortedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReassignAbortedPackages(TArray<FPackageData*>& PackagesToReassign)"
  },
  {
    "label": "SetWorkersStalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkersStalled(bool bInWorkersStalled)"
  },
  {
    "label": "LogCookStats()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_COOK_STATS void)",
    "insertText": "LogCookStats(FCookStatsManager::AddStatFuncRef AddStat)"
  },
  {
    "label": "AssignRequests()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AssignRequests(TArray<FWorkerId>&& InWorkers, TArray<TRefCountPtr<FCookWorkerServer>>& InRemoteWorkers, TArrayView<FPackageData*> Requests, TArray<FWorkerId>& OutAssignments, TMap<FPackageData*, TArray<FPackageData*>>&& RequestGraph, bool bInitialAssignment)"
  },
  {
    "label": "CopyRemoteWorkers()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FCookWorkerServer>>)",
    "insertText": "CopyRemoteWorkers()"
  },
  {
    "label": "DisplayRemainingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayRemainingPackages()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName(const FWorkerId& WorkerId, int32 PreferredWidth = -1)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName(const FCookWorkerServer& RemoteWorker, int32 PreferredWidth=-1)"
  },
  {
    "label": "FindRemoteWorkerInLock()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FCookWorkerServer>*)",
    "insertText": "FindRemoteWorkerInLock(const FWorkerId& WorkerId)"
  },
  {
    "label": "GetAssignPackageExtraDatas()",
    "kind": "Method",
    "detail": "Function (TMap<FPackageData*,FAssignPackageExtraData>)",
    "insertText": "GetAssignPackageExtraDatas(TConstArrayView<FPackageData*> Requests)"
  },
  {
    "label": "GetInfoPackagesForRequests()",
    "kind": "Method",
    "detail": "Function (TArray<FPackageData*>)",
    "insertText": "GetInfoPackagesForRequests(TConstArrayView<FPackageData*> Requests)"
  },
  {
    "label": "TryParseCommandLine()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection CommunicationLock ; FEventRef ShutdownEvent { EEventMode::ManualReset } ; FRunnableShunt RunnableShunt ; FRunnableThread* CommunicationThread = nullptr ; TArray<FCookWorkerProfileData> RemoteWorkerProfileDatas ; TArray<FPendingConnection> PendingConnections ; TUniquePtr<FCookWorkerProfileData> LocalWorkerProfileData ; TArray<FGeneratorEventMessage> QueuedGeneratorBroadcasts ; UCookOnTheFlyServer& COTFS ; double WorkersStalledStartTimeSeconds = 0 . ; double WorkersStalledWarnTimeSeconds = 0 . ; double LastTickTimeSeconds = 0 . ; double NextHeartbeatTimeSeconds = 0 . ; int32 HeartbeatNumber = 0 ; int32 FinalIdleHeartbeatFence = - 1 ; bool bWorkersInitialized = false ; bool bHasReducedMachineResources = false ; bool bIsFirstAssignment = true ; bool bCookCompleteSent = false ; bool bWorkersStalled = false ; bool bMultiprocessAvailable = false ; bool bReceivingMessages = false ; FBeginCookContextForWorker BeginCookContext ; TMap<FGuid,TRefCountPtr<IMPCollector>> Collectors ; TUniquePtr<FInitialConfigMessage> InitialConfigMessage ; FString WorkerConnectAuthority ; FString CommandletExecutablePath ; int32 RequestedCookWorkerCount = 0 ; int32 WorkerConnectPort = 0 ; int32 CoreLimit = 0 ; EShowWorker ShowWorkerOption = EShowWorker::CombinedLogs ; ELoadBalanceAlgorithm LoadBalanceAlgorithm = ELoadBalanceAlgorithm::CookBurden ; bool bAllowLocalCooks = true ; FSocket* WorkerConnectSocket = nullptr ; TMap<int32,TRefCountPtr<FCookWorkerServer>> RemoteWorkers ; TMap<FCookWorkerServer*,TRefCountPtr<FCookWorkerServer>> ShuttingDownWorkers ; TArray<FPackageData*> DeferredPackagesToReassign ; TUniquePtr<FRetractionHandler> RetractionHandler ; bool bWorkersActive = false ; class UE::Cook::FCookWorkerServer ; } ; struct FDirectorConnectionInfo { bool)",
    "insertText": "TryParseCommandLine()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (FString HostURI ; int32 RemoteIndex = 0 ; } ; struct FWorkerConnectMessage : public IMPCollectorMessage { public : void)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbObjectView Object)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetMessageType()"
  }
]