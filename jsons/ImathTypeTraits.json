[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "has_xy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_xy"
  },
  {
    "label": "has_xyz",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_xyz"
  },
  {
    "label": "has_xyzw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_xyzw"
  },
  {
    "label": "has_subscript",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_subscript"
  },
  {
    "label": "has_double_subscript",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_double_subscript"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHTYPETRAITS_H # define INCLUDED_IMATHTYPETRAITS_H # include<type_traits> # include \" ImathPlatform . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER #)",
    "insertText": "if(IMATH_CPLUSPLUS_VERSION >= 14)"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (# else template<bool B,class T = void> using enable_if_t = std::enable_if<B,T>::type ; # endif # define)",
    "insertText": "IMATH_ENABLE_IF(...) IMATH_INTERNAL_NAMESPACE::enable_if_t<(__VA_ARGS__)"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (private : typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<C,)",
    "insertText": "IMATH_ENABLE_IF(std::is_same<decltype(C().x), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().y), Base>::value)> static Yes& test(int)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (template<C> No&)",
    "insertText": "test(...)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "value(sizeof(test<T>(0)) == sizeof(Yes) && sizeof(T) == 2*sizeof(Base))"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} ; template<T,Base> struct has_xyz { private : typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<C,)",
    "insertText": "IMATH_ENABLE_IF(std::is_same<decltype(C().x), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().y), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().z), Base>::value)> static Yes& test(int)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "value(sizeof(test<T>(0)) == sizeof(Yes) && sizeof(T) == 3*sizeof(Base))"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} ; template<T,Base> struct has_xyzw { private : typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<C,)",
    "insertText": "IMATH_ENABLE_IF(std::is_same<decltype(C().x), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().y), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().z), Base>::value), IMATH_ENABLE_IF(std::is_same<decltype(C().w), Base>::value)> static Yes& test(int)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "value(sizeof(test<T>(0)) == sizeof(Yes) && sizeof(T) == 4*sizeof(Base))"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} ; template<T,Base,int Nelem> struct has_subscript { private : typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<C,)",
    "insertText": "IMATH_ENABLE_IF(std::is_same<typename std::decay<decltype(C()[0])>::type, Base>::value)> static Yes& test(int)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "value(sizeof(test<T>(0)) == sizeof(Yes) && sizeof(T) == Nelem*sizeof(Base))"
  },
  {
    "label": "IMATH_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} ; template<Base,int Nelem> struct has_subscript<Base [ Nelem ],Base,Nelem> : public std::true_type { } ; template<T,Base,int Rows,int Cols> struct has_double_subscript { private : typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<C,)",
    "insertText": "IMATH_ENABLE_IF(std::is_same<typename std::decay<decltype(C()[0][0])>::type, Base>::value)> static Yes& test(int)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "value(sizeof(test<T>(0)) == sizeof(Yes) && sizeof(T) == (Rows*Cols)*sizeof(Base))"
  }
]