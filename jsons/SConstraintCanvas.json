[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SConstraintCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SConstraintCanvas"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Layout / Margin . h \" # include \" Layout / Geometry . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / Layout / Anchors . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; class SConstraintCanvas : public SPanel { public : class FSlot : public TSlotBase<FSlot> { public :)",
    "insertText": "FSlot() : TSlotBase<FSlot>() , OffsetAttr(FMargin(0, 0, 1, 1)) , AnchorsAttr(FAnchors(0.0f, 0.0f)) , AlignmentAttr(FVector2D(0.5f, 0.5f)) , AutoSizeAttr(false) , ZOrder(0)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TSlotBase<FSlot>) SLATE_ATTRIBUTE(FMargin, Offset) SLATE_ATTRIBUTE(FAnchors, Anchors) SLATE_ATTRIBUTE(FVector2D, Alignment) SLATE_ATTRIBUTE(bool, AutoSize) SLATE_ARGUMENT(TOptional<float>, ZOrder) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "SetOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffset(const TAttribute<FMargin>& InOffset)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(OffsetAttr, InOffset, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "GetOffset()"
  },
  {
    "label": "SetAnchors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAnchors(const TAttribute<FAnchors>& InAnchors)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(AnchorsAttr, InAnchors, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetAnchors()",
    "kind": "Method",
    "detail": "Function (} FAnchors)",
    "insertText": "GetAnchors()"
  },
  {
    "label": "SetAlignment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlignment(const TAttribute<FVector2D>& InAlignment)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(AlignmentAttr, InAlignment, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "SetAutoSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAutoSize(const TAttribute<bool>& InAutoSize)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(AutoSizeAttr, InAutoSize, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "GetAutoSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAutoSize()"
  },
  {
    "label": "SetZOrder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetZOrder(float InZOrder)"
  },
  {
    "label": "GetZOrder()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetZOrder()"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_END_ARGS() SLATE_API SConstraintCanvas()"
  },
  {
    "label": "SConstraintCanvas()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SConstraintCanvas()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ArrangeLayeredChildren()",
    "kind": "Method",
    "detail": "Function (private : typedef TArray<bool,TInlineAllocator<1 6>> FArrangedChildLayers ; void)",
    "insertText": "ArrangeLayeredChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren, FArrangedChildLayers& ArrangedChildLayers)"
  }
]