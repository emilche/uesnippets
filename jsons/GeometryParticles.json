[
  {
    "label": "FConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintHandle"
  },
  {
    "label": "FParticleCollisions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleCollisions"
  },
  {
    "label": "FPBDIslandParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandParticle"
  },
  {
    "label": "FShapeOrShapesArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapeOrShapesArray"
  },
  {
    "label": "FWeakParticleHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakParticleHandle"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TGeometryParticlesImp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticlesImp"
  },
  {
    "label": "FShapeOrShapesArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / SimpleGeometryParticles . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / GeometryParticlesfwd . h \" # include \" Chaos / CollisionFilterData . h \" # include \" Chaos / Collision / ParticleCollisions . h \" # include \" Chaos / Box . h \" # include \" Chaos / PhysicalMaterials . h \" # include \" UObject / PhysicsObjectVersion . h \" # include \" UObject / ExternalPhysicsCustomObjectVersion . h \" # include \" UObject / FortniteValkyrieBranchObjectVersion . h \" # include \" UObject / ExternalPhysicsMaterialCustomObjectVersion . h \" # include \" Chaos / Properties . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Chaos / ShapeInstance . h \" # ifndef CHAOS_DETERMINISTIC # define CHAOS_DETERMINISTIC 1 # endif namespace Chaos { class FConstraintHandle ; class FParticleCollisions ; using FConstraintHandleArray = TArray<FConstraintHandle*> ; namespace CVars { int32 CCDAxisThresholdMode ; bool bCCDAxisThresholdUsesProbeShapes ; } namespace Private { class FPBDIslandParticle ; FString EmptyParticleName ; } class FShapeOrShapesArray { public :)",
    "insertText": "FShapeOrShapesArray(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "FShapeOrShapesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShapeOrShapesArray() : Shape(nullptr) , bIsSingleShape(true)"
  },
  {
    "label": "FShapeOrShapesArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeOrShapesArray(const FPerShapeData* InShape) : Shape(InShape) , bIsSingleShape(true)"
  },
  {
    "label": "FShapeOrShapesArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeOrShapesArray(const FShapesArray* InShapeArray) : ShapeArray(InShapeArray) , bIsSingleShape(false)"
  },
  {
    "label": "IsSingleShape()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSingleShape()"
  },
  {
    "label": "FWeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (} class FWeakParticleHandle { public :)",
    "insertText": "FWeakParticleHandle()"
  },
  {
    "label": "FWeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWeakParticleHandle(TGeometryParticleHandle<FReal,3>* InHandle) : SharedData(MakeShared<FData, ESPMode::ThreadSafe>(FData{InHandle}))"
  },
  {
    "label": "GetHandleUnsafe()",
    "kind": "Method",
    "detail": "Function (} TGeometryParticleHandle<FReal,3>*)",
    "insertText": "GetHandleUnsafe()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (SharedData -> Handle = nullptr ; } } bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (template<class T,int d,EGeometryParticlesSimType SimType> class TGeometryParticlesImp : public TSimpleGeometryParticles<T,d> { public : using TArrayCollection::Size ; using TParticles<T,d>::GetX ; using TSimpleGeometryParticles<T,d>::GetR ; using TSimpleGeometryParticles<T,d>::GetGeometry ; using TSimpleGeometryParticles<T,d>::SetGeometry ; using TSimpleGeometryParticles<T,d>::GetAllGeometry ; TGeometryParticlesImp<T,d,SimType>*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, TGeometryParticlesImp < T, d, SimType>* Particles)"
  },
  {
    "label": "TGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TGeometryParticlesImp() : TSimpleGeometryParticles<T, d>() , MContainerListMask(EGeometryParticleListMask::None)"
  },
  {
    "label": "RegisterArrays()",
    "kind": "Method",
    "detail": "Function (MParticleType = EParticleType::;)",
    "insertText": "RegisterArrays()"
  },
  {
    "label": "TGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TGeometryParticlesImp(const TGeometryParticlesImp<T, d, SimType>& Other)"
  },
  {
    "label": "TGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TGeometryParticlesImp(TGeometryParticlesImp<T, d, SimType>&& Other) : TSimpleGeometryParticles<T, d>(MoveTemp(Other)) , MContainerListMask(Other.MContainerListMask) , MUniqueIdx(MoveTemp(Other.MUniqueIdx)) , MGeometryParticleHandle(MoveTemp(Other.MGeometryParticleHandle)) , MGeometryParticle(MoveTemp(Other.MGeometryParticle)) , MPhysicsProxy(MoveTemp(Other.MPhysicsProxy)) , MHasCollision(MoveTemp(Other.MHasCollision)) , MShapesArray(MoveTemp(Other.MShapesArray)) , MLocalBounds(MoveTemp(Other.MLocalBounds)) , MCCDAxisThreshold(MoveTemp(Other.MCCDAxisThreshold)) , MWorldSpaceInflatedBounds(MoveTemp(Other.MWorldSpaceInflatedBounds)) , MHasBounds(MoveTemp(Other.MHasBounds)) , MSpatialIdx(MoveTemp(Other.MSpatialIdx)) , MSyncState(MoveTemp(Other.MSyncState)) , MWeakParticleHandle(MoveTemp(Other.MWeakParticleHandle)) , MParticleConstraints(MoveTemp(Other.MParticleConstraints)) , MParticleCollisions(MoveTemp(Other.MParticleCollisions)) , MGraphNode(MoveTemp(Other.MGraphNode)) , MResimType(MoveTemp(Other.MResimType)) , MEnabledDuringResim(MoveTemp(Other.MEnabledDuringResim)) , MLightWeightDisabled(MoveTemp(Other.MLightWeightDisabled)) #if CHAOS_DETERMINISTIC , MParticleIDs(MoveTemp(Other.MParticleIDs)) #endif #if CHAOS_DEBUG_NAME , MDebugName(MoveTemp(Other.MDebugName))"
  },
  {
    "label": "IsRigidBodySim()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRigidBodySim()"
  },
  {
    "label": "TGeometryParticlesImp()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TGeometryParticlesImp()"
  },
  {
    "label": "UniqueIdx()",
    "kind": "Method",
    "detail": "Function (} FUniqueIdx)",
    "insertText": "UniqueIdx(const int32 Index)"
  },
  {
    "label": "HasCollision()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FImplicitObject,ESPMode::ThreadSafe> DummyPtr ; return DummyPtr ; } bool)",
    "insertText": "HasCollision(const int32 Index)"
  },
  {
    "label": "RemoveShapesAtSortedIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveShapesAtSortedIndices(const int32 ParticleIndex, const TArrayView<const int32>& InIndices)"
  },
  {
    "label": "ShapeInstances()",
    "kind": "Method",
    "detail": "Function (const FShapeInstanceArray&)",
    "insertText": "ShapeInstances(const int32 Index)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MUniqueIdx)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DETERMINISTIC)",
    "insertText": "AddArray(&MParticleIDs)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "AddArray(&MHasCollision)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MShapesArray)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MLocalBounds)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MCCDAxisThreshold)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MWorldSpaceInflatedBounds)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MHasBounds)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MSpatialIdx)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MSyncState)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MWeakParticleHandle)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MParticleConstraints)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MParticleCollisions)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MGraphNode)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MResimType)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MEnabledDuringResim)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MLightWeightDisabled)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MParticleListMask)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_NAME)",
    "insertText": "AddArray(&MDebugName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(IsRigidBodySim())"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MGeometryParticleHandle)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MGeometryParticle)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MPhysicsProxy)"
  },
  {
    "label": "SetGeometryImpl()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGeometryImpl(const int32 Index, const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "SetGeometryImpl()",
    "kind": "Method",
    "detail": "Function (TSimpleGeometryParticles<T,d)",
    "insertText": "SetGeometryImpl(Index, InGeometry)"
  },
  {
    "label": "UpdateShapesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapesArray(Index)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (MHasBounds [)",
    "insertText": "Index(InGeometry && InGeometry->HasBoundingBox())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MLocalBounds [ Index ] = TAABB<T,)",
    "insertText": "d(InGeometry->BoundingBox())"
  },
  {
    "label": "UpdateCCDAxisThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCCDAxisThreshold(Index)"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpaceState(Index, TRigidTransform<FReal, 3>(GetX(Index), GetR(Index)), FVec3(0))"
  },
  {
    "label": "UpdateCCDAxisThreshold()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateCCDAxisThreshold(const int32 Index)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (MCCDAxisThreshold [ Index ] =)",
    "insertText": "FVec3(0)"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (MCCDAxisThreshold [ Index ] = MLocalBounds [ Index ] .)",
    "insertText": "Extents()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CVars::CCDAxisThresholdMode == 1)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (MCCDAxisThreshold [ Index ] =)",
    "insertText": "FVec3(MLocalBounds[Index].Extents().GetMin())"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (const FImplicitObjectRef Geometry = Shape ->)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> ShapeExtents = Geometry ->)",
    "insertText": "BoundingBox().Extents()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVector<T,d>& CCDAxisThreshold = MCCDAxisThreshold [ Index ] ;)",
    "insertText": "for(int32 AxisIndex = 0; AxisIndex < d; ++AxisIndex)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (ThinnestBoundsPerAxis [ AxisIndex ] =)",
    "insertText": "Min(ShapeExtents[AxisIndex], ThinnestBoundsPerAxis[AxisIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(CVars::CCDAxisThresholdMode == 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MCCDAxisThreshold [ Index ] = ThinnestBoundsPerAxis ; } else)",
    "insertText": "if(CVars::CCDAxisThresholdMode == 3)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (MCCDAxisThreshold [ Index ] =)",
    "insertText": "FVec3(ThinnestBoundsPerAxis.GetMin())"
  },
  {
    "label": "LocalBounds()",
    "kind": "Method",
    "detail": "Function (} } } public : const TAABB<T,d>&)",
    "insertText": "LocalBounds(const int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_NAME)",
    "insertText": "if(MDebugName[Index].IsValid())"
  },
  {
    "label": "WorldSpaceInflatedBounds()",
    "kind": "Method",
    "detail": "Function (} # endif return Private::EmptyParticleName ; } const TAABB<T,d>&)",
    "insertText": "WorldSpaceInflatedBounds(const int32 Index)"
  },
  {
    "label": "ShapesArray()",
    "kind": "Method",
    "detail": "Function (const FShapesArray& Shapes =)",
    "insertText": "ShapesArray(Index)"
  },
  {
    "label": "WorldBounds()",
    "kind": "Method",
    "detail": "Function (FAABB3)",
    "insertText": "WorldBounds(Shapes.Num() > 0) ? FAABB3::EmptyAABB() : FAABB3::ZeroAABB()"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (Shape ->)",
    "insertText": "UpdateWorldSpaceState(WorldTransform)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (WorldBounds .)",
    "insertText": "GrowToInclude(Shape->GetWorldSpaceShapeBounds())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (} MWorldSpaceInflatedBounds [ Index ] = TAABB<T,)",
    "insertText": "d(WorldBounds).ThickenSymmetrically(BoundsExpansion)"
  },
  {
    "label": "UpdateWorldSpaceStateSwept()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWorldSpaceStateSwept(const int32 Index, const FRigidTransform3& WorldTransform, const FVec3& BoundsExpansion, const FVec3& DeltaX)"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpaceState(Index, WorldTransform, BoundsExpansion)"
  },
  {
    "label": "GrowByVector()",
    "kind": "Method",
    "detail": "Function (MWorldSpaceInflatedBounds [ Index ] .)",
    "insertText": "GrowByVector(DeltaX)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} typedef FGeometryParticleHandle THandleType ; THandleType*)",
    "insertText": "Handle(int32 Index)"
  },
  {
    "label": "SetHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHandle(int32 Index, FGeometryParticleHandle* Handle)"
  },
  {
    "label": "GTGeometryParticle()",
    "kind": "Method",
    "detail": "Function (FGeometryParticle*)",
    "insertText": "GTGeometryParticle(const int32 Index)"
  },
  {
    "label": "WeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (MPhysicsProxy [ Index ] = InPhysicsProxy ; } FWeakParticleHandle&)",
    "insertText": "WeakParticleHandle(const int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FWeakParticleHandle& WeakHandle = MWeakParticleHandle [ Index ] ;)",
    "insertText": "if(WeakHandle.IsInitialized())"
  },
  {
    "label": "CHAOS_ENSURE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_ENSURE(!MParticleConstraints[Index].Contains(InConstraintHandle))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MParticleConstraints [ Index ] .)",
    "insertText": "Add(InConstraintHandle)"
  },
  {
    "label": "RemoveConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveConstraintHandle(const int32& Index, FConstraintHandle* InConstraintHandle)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (MParticleConstraints [ Index ] .)",
    "insertText": "RemoveSingleSwap(InConstraintHandle)"
  },
  {
    "label": "ParticleCollisions()",
    "kind": "Method",
    "detail": "Function (} FParticleCollisions&)",
    "insertText": "ParticleCollisions(const int32 Index)"
  },
  {
    "label": "ResetWeakParticleHandle()",
    "kind": "Method",
    "detail": "Function (int32 Dummy = INDEX_NONE ; return Dummy ; } private : THandleType ; void)",
    "insertText": "ResetWeakParticleHandle(const int32 Index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } public : FString)",
    "insertText": "ToString(int32 index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString BaseString = TParticles<T,d)",
    "insertText": "ToString(index)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::ChaosParticles)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TSimpleGeometryParticles<T,d)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<MShapesArray ; })",
    "insertText": "if(Ar.CustomVer(FPhysicsObjectVersion::GUID) >= FPhysicsObjectVersion::SerializeGTGeometryParticles)"
  },
  {
    "label": "SerializeGeometryParticleHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeGeometryParticleHelper(Ar, this)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "SerializeAsAABBs()",
    "kind": "Method",
    "detail": "Function (TBox<FReal,3)",
    "insertText": "SerializeAsAABBs(Ar, MLocalBounds)"
  },
  {
    "label": "SerializeAsAABBs()",
    "kind": "Method",
    "detail": "Function (TBox<FReal,3)",
    "insertText": "SerializeAsAABBs(Ar, MWorldSpaceInflatedBounds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<MHasBounds ;)",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) < FExternalPhysicsCustomObjectVersion::SerializeShapeWorldSpaceBounds)"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpaceState(Idx, FRigidTransform3(GetX(Idx), GetR(Idx)), FVec3(0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int32 Idx = 0; Idx < GetAllGeometry().Num(); ++Idx)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (MHasBounds [ Idx ] =)",
    "insertText": "GetGeometry(Idx) && GetGeometry(Idx)->HasBoundingBox()"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MLocalBounds [ Idx ] = TAABB<T,)",
    "insertText": "d(GetGeometry(Idx)->BoundingBox())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) < FExternalPhysicsCustomObjectVersion::SpatialIdxSerialized)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (MSpatialIdx .)",
    "insertText": "AddZeroed(GetAllGeometry().Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Ar<<MSpatialIdx ; })",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) < FExternalPhysicsCustomObjectVersion::SerializeHashResult)"
  },
  {
    "label": "ParticleType()",
    "kind": "Method",
    "detail": "Function (} } EParticleType)",
    "insertText": "ParticleType()"
  },
  {
    "label": "AllLocalBounds()",
    "kind": "Method",
    "detail": "Function (MContainerListMask = InMask ; } TArray<TAABB<T,d>>&)",
    "insertText": "AllLocalBounds()"
  },
  {
    "label": "SerializeGeometryParticleHelper()",
    "kind": "Method",
    "detail": "Function (template<T2,int d2,EGeometryParticlesSimType SimType2> class TGeometryParticlesImp ; void)",
    "insertText": "SerializeGeometryParticleHelper(FChaosArchive& Ar, TGeometryParticlesImp<T, d, EGeometryParticlesSimType::RigidBodySim>* GeometryParticles)"
  },
  {
    "label": "SerializeGeometryParticleHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeGeometryParticleHelper(FChaosArchive& Ar, TGeometryParticlesImp<T, d, EGeometryParticlesSimType::Other>* GeometryParticles)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if CHAOS_DETERMINISTIC TArrayCollectionArray<FParticleID> MParticleIDs ; # endif # if CHAOS_DEBUG_NAME TArrayCollectionArray<TSharedPtr<FString,ESPMode::ThreadSafe>> MDebugName ; # endif } ; template<T,int d,EGeometryParticlesSimType SimType> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TGeometryParticlesImp<T, d, SimType>& Particles)"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (template<> TGeometryParticlesImp<FReal,3,EGeometryParticlesSimType::Other>* TGeometryParticlesImp<FReal,3,EGeometryParticlesSimType::Other)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, TGeometryParticlesImp<FReal, 3, EGeometryParticlesSimType::Other>* Particles)"
  }
]