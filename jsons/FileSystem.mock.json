[
  {
    "label": "FMockFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockFileSystem"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / FileSystem . h \" # include \" Tests / TestHelpers . h \" # include \" Common / StatsCollector . h \" # include \" Serialization / MemoryReader . h \" # include \" Serialization / MemoryWriter . h \" # include \" Misc / Paths . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockFileSystem : public IFileSystem { public : typedef TTuple<double,FArchive*,FString,EReadFlags> FCreateFileReader ; typedef TTuple<double,FArchive*,FString,EWriteFlags> FCreateFileWriter ; typedef TTuple<double,FString,int64> FGetFileSize ; typedef TTuple<double,FString,EAttributeFlags> FGetAttributes ; typedef TTuple<double,FString,bool> FSetReadOnly ; typedef TTuple<double,FString,bool> FSetCompressed ; typedef TTuple<double,FString,bool> FSetExecutable ; public : TUniquePtr<FArchive>)",
    "insertText": "CreateFileReader(const TCHAR* Filename, EReadFlags ReadFlags = EReadFlags::None)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&ThreadLock)"
  },
  {
    "label": "Reader()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "Reader(new FMemoryReader(ReadFile))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxCreateFileReader .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Reader.Get(), Filename, ReadFlags)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "Writer(new FMemoryWriter(WriteFile))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxCreateFileWriter .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Writer.Get(), Filename, WriteFlags)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::LoadFileToString\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::SaveStringToFile\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::DirectoryExists\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::MakeDirectory\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::DeleteFile\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::MoveFile\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::CopyFile\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFileSize = - 1 ;)",
    "insertText": "if(FileSizes.Contains(Filename))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutFileSize = FileSizes [ Filename ] ; } RxGetFileSize .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, OutFileSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFileAttributes = EAttributeFlags::None ;)",
    "insertText": "if(FileAttributes.Contains(Filename))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutFileAttributes = FileAttributes [ Filename ] ; } RxGetAttributes .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, OutFileAttributes)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxSetReadOnly .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, bIsReadOnly)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxSetCompressed .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, bIsCompressed)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxSetExecutable .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, bIsExecutable)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::FileExists\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::FindFiles\")"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::FindFilesRecursively\")"
  },
  {
    "label": "FindFilesRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesRecursively(FoundFiles, Directory, FileExtension)"
  },
  {
    "label": "GetAllowedBytesToWriteThrottledStorage()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetAllowedBytesToWriteThrottledStorage(const TCHAR* DestinationPath = nullptr)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockFileSystem::GetAllowedBytesToWriteThrottledStorage\")"
  }
]