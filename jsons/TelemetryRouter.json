[
  {
    "label": "FTelemetryRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTelemetryRouter"
  },
  {
    "label": "FSinkSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSinkSet"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" Templates / Models . h \" # include \" Memory / MemoryView . h \" # include \" Misc / Guid . h \" # include<type_traits> namespace UE::Telemetry::Private { template<DATA_TYPE,= void> bool HasTelemetryID = false ; template<DATA_TYPE> bool HasTelemetryID<DATA_TYPE,std::enable_if_t<std::is_same_v<std::decay_t<)",
    "insertText": "decltype(DATA_TYPE::TelemetryID)"
  },
  {
    "label": "GetDataKeyInternal()",
    "kind": "Method",
    "detail": "Function (template<DATA_TYPE> auto)",
    "insertText": "GetDataKeyInternal()"
  },
  {
    "label": "FTelemetryRouter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTelemetryRouter()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTelemetryRouter&)",
    "insertText": "Get()"
  },
  {
    "label": "ProvideTelemetry()",
    "kind": "Method",
    "detail": "Function (template<DATA_TYPE> void)",
    "insertText": "ProvideTelemetry(const DATA_TYPE& Data)"
  },
  {
    "label": "ProvideTelemetryInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProvideTelemetryInternal(UE::Telemetry::Private::GetDataKey<DATA_TYPE>(), MakeMemoryView(&Data, sizeof(DATA_TYPE)))"
  },
  {
    "label": "OnTelemetry()",
    "kind": "Method",
    "detail": "Function (} template<DATA_TYPE> FDelegateHandle)",
    "insertText": "OnTelemetry(TDelegate<void(const DATA_TYPE&)> Sink)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle Handle = Sink .)",
    "insertText": "GetHandle()"
  },
  {
    "label": "RegisterTelemetrySinkInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTelemetrySinkInternal(UE::Telemetry::Private::GetDataKey<DATA_TYPE>(), sizeof(DATA_TYPE), Handle, [Sink=MoveTemp(Sink)](FMemoryView Data) -> bool { return Sink.ExecuteIfBound(*reinterpret_cast<const DATA_TYPE*>(Data.GetData())); })"
  },
  {
    "label": "RegisterTelemetrySinkInternal()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle Handle { FDelegateHandle::GenerateNewHandle } ;)",
    "insertText": "RegisterTelemetrySinkInternal(UE::Telemetry::Private::GetDataKey<DATA_TYPE>(), sizeof(DATA_TYPE), Handle, [Sink=MoveTemp(Sink)](FMemoryView Data) -> bool { Sink(*reinterpret_cast<const DATA_TYPE*>(Data.GetData())); return true; })"
  },
  {
    "label": "UnregisterTelemetrySinkInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTelemetrySinkInternal(UE::Telemetry::Private::GetDataKey<DATA_TYPE>(), Handle)"
  },
  {
    "label": "RegisterTelemetrySinkInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RegisterTelemetrySinkInternal(FGuid Key, SIZE_T ExpectedSize, FDelegateHandle InHandle, TFunction<bool(FMemoryView)> Sink)"
  },
  {
    "label": "UnregisterTelemetrySinkInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTelemetrySinkInternal(FGuid Key, FDelegateHandle InHandle)"
  },
  {
    "label": "ProvideTelemetryInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProvideTelemetryInternal(FGuid Key, FMemoryView Data)"
  },
  {
    "label": "CheckNotReentrant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckNotReentrant()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FRWLock SinkLock ; struct FSinkSet { SIZE_T DataSize ; TMap<FDelegateHandle,TFunction<)",
    "insertText": "bool(FMemoryView)"
  },
  {
    "label": "FSinkSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSinkSet(SIZE_T InDataSize) : DataSize(InDataSize)"
  }
]