[
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Apple / ApplePlatformProcess . h \" # import \" IOSAsyncTask . h \" struct FProcHandle : public TProcHandle<void*,nullptr> { public :)",
    "insertText": "FProcHandle() : TProcHandle()"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProcHandle(HandleType Other ) : TProcHandle( Other)"
  },
  {
    "label": "ComputerName()",
    "kind": "Method",
    "detail": "Function (} } ; struct FIOSPlatformProcess : public FApplePlatformProcess { const TCHAR*)",
    "insertText": "ComputerName()"
  },
  {
    "label": "BaseDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "BaseDir()"
  },
  {
    "label": "CreateRunnableThread()",
    "kind": "Method",
    "detail": "Function (FRunnableThread*)",
    "insertText": "CreateRunnableThread()"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const TCHAR* URL, const TCHAR* Parms, FString* Error)"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "SetupGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupGameThread()"
  },
  {
    "label": "SetupRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRenderThread()"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(uint64 AffinityMask)"
  },
  {
    "label": "ExecutablePath()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutablePath()"
  },
  {
    "label": "ExecutableName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutableName(bool bRemoveExtension = true)"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath(const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "SetupThread()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetupThread(int Priority)"
  }
]