[
  {
    "label": "Event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Event"
  },
  {
    "label": "Event()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBase . h \" namespace uba { class Event { public :)",
    "insertText": "Event()"
  },
  {
    "label": "Event()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event(bool manualReset)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(bool manualReset, bool shared = false)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet(u32 timeOutMs = ~0u)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetHandle()"
  },
  {
    "label": "Event()",
    "kind": "Method",
    "detail": "Function (private : # if PLATFORM_WINDOWS void* m_ev ; # else u64 m_data [ 1 6 ] ; # endif)",
    "insertText": "Event(const Event&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const Event&)"
  }
]