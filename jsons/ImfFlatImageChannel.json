[
  {
    "label": "FlatImageLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlatImageLevel"
  },
  {
    "label": "IMFUTIL_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IMFUTIL_EXPORT_TEMPLATE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TEMPLATE_TYPE"
  },
  {
    "label": "IMFUTIL_EXPORT_EXTERN_TEMPLATE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_EXTERN_TEMPLATE"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_FLAT_IMAGE_CHANNEL_H # define INCLUDED_IMF_FLAT_IMAGE_CHANNEL_H # include \" ImfImageChannel . h \" # include \" ImfImageLevel . h \" # include \" ImfUtilExport . h \" # include \" ImfFrameBuffer . h \" # include \" ImfPixelType . h \" # include<ImathBox . h> # include<half . h> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class FlatImageLevel ; class IMFUTIL_EXPORT_TYPE FlatImageChannel : public ImageChannel { public : Slice)",
    "insertText": "slice()"
  },
  {
    "label": "flatLevel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT FlatImageLevel&)",
    "insertText": "flatLevel()"
  },
  {
    "label": "FlatImageChannel()",
    "kind": "Method",
    "detail": "Function (protected : class FlatImageLevel ; IMFUTIL_EXPORT)",
    "insertText": "FlatImageChannel(FlatImageLevel& level, int xSampling, int ySampling, bool pLinear)"
  },
  {
    "label": "FlatImageChannel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT ~)",
    "insertText": "FlatImageChannel()"
  },
  {
    "label": "FlatImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlatImageChannel(const FlatImageChannel& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FlatImageChannel&)",
    "insertText": "operator(const FlatImageChannel& other)"
  },
  {
    "label": "FlatImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlatImageChannel(FlatImageChannel&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FlatImageChannel&)",
    "insertText": "operator(FlatImageChannel&& other)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "resize()"
  },
  {
    "label": "resetBasePointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetBasePointer()"
  },
  {
    "label": "pixelType()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class IMFUTIL_EXPORT_TEMPLATE_TYPE TypedFlatImageChannel : public FlatImageChannel { public : PixelType)",
    "insertText": "pixelType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T&)",
    "insertText": "operator() (int x, int y)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (T&)",
    "insertText": "at(int x, int y)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "row(int r)"
  },
  {
    "label": "TypedFlatImageChannel()",
    "kind": "Method",
    "detail": "Function (private : class FlatImageLevel ; IMFUTIL_HIDDEN)",
    "insertText": "TypedFlatImageChannel(FlatImageLevel& level, int xSampling, int ySampling, bool pLinear)"
  },
  {
    "label": "TypedFlatImageChannel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_HIDDEN ~)",
    "insertText": "TypedFlatImageChannel()"
  },
  {
    "label": "TypedFlatImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedFlatImageChannel(const TypedFlatImageChannel& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TypedFlatImageChannel&)",
    "insertText": "operator(const TypedFlatImageChannel& other)"
  },
  {
    "label": "TypedFlatImageChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedFlatImageChannel(TypedFlatImageChannel&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TypedFlatImageChannel&)",
    "insertText": "operator(TypedFlatImageChannel&& other)"
  },
  {
    "label": "boundsCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boundsCheck(x, y)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T* TypedFlatImageChannel<T)",
    "insertText": "row(int n)"
  }
]