[
  {
    "label": "CUTF8StringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUTF8StringView"
  },
  {
    "label": "SToolchainOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SToolchainOverrides"
  },
  {
    "label": "SBuildManagerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildManagerParams"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CProgramBuildManager()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CProgramBuildManager(const SBuildManagerParams& Params)"
  },
  {
    "label": "SetSourceProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceProject(const TSRef<CSourceProject>& Project)"
  },
  {
    "label": "AddSourceSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSourceSnippet(const TSRef<ISourceSnippet>& Snippet, const CUTF8StringView& PackageName, const CUTF8StringView& PackageVersePath)"
  },
  {
    "label": "RemoveSourceSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSourceSnippet(const TSRef<ISourceSnippet>& Snippet)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (SBuildResults)",
    "insertText": "Build(const SBuildParams& Params)"
  },
  {
    "label": "BuildProject()",
    "kind": "Method",
    "detail": "Function (SBuildResults)",
    "insertText": "BuildProject(const CSourceProject& SourceProject, const SBuildContext& BuildContext)"
  },
  {
    "label": "ParseSnippet()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "ParseSnippet(const uLang::TSRef<Verse::Vst::Snippet>& OutVst, const CUTF8StringView& TextSnippet, const SBuildContext& BuildContext)"
  },
  {
    "label": "SemanticAnalyzeVst()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "SemanticAnalyzeVst(TOptional<TSRef<CSemanticProgram>>& OutProgram, const TSRef<Verse::Vst::Project>& Vst, const SBuildContext& BuildContext)"
  },
  {
    "label": "IrGenerateProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "IrGenerateProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext)"
  },
  {
    "label": "AssembleProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "AssembleProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (ELinkerResult)",
    "insertText": "Link(const SBuildContext& BuildContext)"
  },
  {
    "label": "ResetSemanticProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSemanticProgram()"
  },
  {
    "label": "EnablePackageUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePackageUsage(bool bEnable = true)"
  },
  {
    "label": "OnBuildDiagnostic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBuildDiagnostic(const TSRef<SGlitch>& Diagnostic)"
  },
  {
    "label": "OnBuildStatistic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBuildStatistic(const SBuildEventInfo& EventInfo)"
  }
]