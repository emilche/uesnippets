[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "OUTPUTLOG_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OUTPUTLOG_API"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Styling / SlateBrush . h \" # include \" Containers / EnumAsByte . h \" # include \" Misc / OutputDevice . h \" # include \" Delegates / DelegateCombinations . h \" # include \" OutputLogSettings . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (None,ColorizeWholeLine,ColorizeCategoryOnly,ColorizeCategoryAsBadge } ;)",
    "insertText": "UCLASS(config=EditorPerProjectUserSettings)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UOutputLogSettings()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "DECLARE_EVENT_OneParam(UOutputLogSettings, FSettingChangedEvent, FName)"
  },
  {
    "label": "OnSettingChanged()",
    "kind": "Method",
    "detail": "Function (FSettingChangedEvent&)",
    "insertText": "OnSettingChanged()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(PropertyChangedEvent)"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig()"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "PropertyName(PropertyChangedEvent.Property != nullptr) ? PropertyChangedEvent.Property->GetFName()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (SettingChangedEvent .)",
    "insertText": "Broadcast(PropertyName)"
  }
]