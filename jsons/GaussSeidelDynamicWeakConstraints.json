[
  {
    "label": "FGaussSeidelDynamicWeakConstraints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGaussSeidelDynamicWeakConstraints"
  },
  {
    "label": "FGaussSeidelDynamicWeakConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / BoundingVolumeHierarchy . h \" # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / NewtonCorotatedCache . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Utilities . h \" # include \" Chaos / DebugDrawQueue . h \" # include \" Chaos / XPBDWeakConstraints . h \" # include \" Chaos / Triangle . h \" # include \" Chaos / TriangleCollisionPoint . h \" # include \" Chaos / TriangleMesh . h \" # include \" Chaos / Deformable / GaussSeidelWeakConstraints . h \" # include \" GeometryCollection / Facades / CollectionTetrahedralFacade . h \" namespace Chaos::Softs { using Chaos::TVec3 ; template<T,ParticleType> struct FGaussSeidelDynamicWeakConstraints : public FGaussSeidelWeakConstraints<T,ParticleType> { typedef FGaussSeidelWeakConstraints<T,ParticleType> Base ; using Base::ConstraintsData ; using Base::NodalWeights ; using Base::WCIncidentElements ; using Base::WCIncidentElementsLocal ; typedef FGaussSeidelWeakConstraints<T,ParticleType>::FGaussSeidelConstraintHandle GSConstraintHandle ;)",
    "insertText": "FGaussSeidelDynamicWeakConstraints(const FDeformableXPBDWeakConstraintParams& InParams) : Base({}, {}, {}, {}, {}, InParams)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (ConstraintsData .)",
    "insertText": "AddArray(&Handles)"
  },
  {
    "label": "FGaussSeidelDynamicWeakConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGaussSeidelDynamicWeakConstraints()"
  },
  {
    "label": "AddSingleParticleTetrahedraConstraint()",
    "kind": "Method",
    "detail": "Function (delete Handle ; } } const GSConstraintHandle*)",
    "insertText": "AddSingleParticleTetrahedraConstraint(const GeometryCollection::Facades::FTetrahedralFacade& InTargetGeom, const ParticleType& AllParticles, const GeometryCollection::Facades::TetrahedralParticleEmbedding& InIntersection, const int32 InConstraintIndex, const FIntVector2& SourceRange, const FIntVector2& TargetRange, const T PositionTargetStiffness)"
  },
  {
    "label": "GSConstraintHandle()",
    "kind": "Method",
    "detail": "Function (GSConstraintHandle* NewConstraintPtr = new)",
    "insertText": "GSConstraintHandle()"
  },
  {
    "label": "FIntVector4()",
    "kind": "Method",
    "detail": "Function (NewConstraintPtr -> ConstraintIndex = InConstraintIndex ; Handles [ InConstraintIndex ] = NewConstraintPtr ; const FIntVector4 TargetTet = InTargetGeom . Tetrahedron [ InTargetGeom . TetrahedronStart [ InIntersection . GeometryIndex ] + InIntersection . TetrahedronIndex ] +)",
    "insertText": "FIntVector4(TargetRange[0])"
  },
  {
    "label": "SingleWeights()",
    "kind": "Method",
    "detail": "Function (FGaussSeidelWeakConstraintSingleData<T> SingleConstraintData ; SingleConstraintData . SingleIndices = { InIntersection . ParticleIndex + SourceRange [ 0 ] } ; SingleConstraintData . SingleSecondIndices = { TargetTet [ 0 ],TargetTet [ 1 ],TargetTet [ 2 ],TargetTet [ 3 ] } ; SingleConstraintData .)",
    "insertText": "SingleWeights(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (SingleConstraintData . SingleSecondWeights = { InIntersection . BarycentricWeights [ 0 ],InIntersection . BarycentricWeights [ 1 ],InIntersection . BarycentricWeights [ 2 ],InIntersection . BarycentricWeights [ 3 ] } ; SingleConstraintData . bIsAnisotropic = false ; SingleConstraintData . SingleNormal = TVec3<)",
    "insertText": "T((T)0.)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float ConstraintStiffness = 0 . f ;)",
    "insertText": "for(int32 k = 0; k < 4; k++)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (ConstraintStiffness + = SingleConstraintData . SingleSecondWeights [ k ]* PositionTargetStiffness* AllParticles .)",
    "insertText": "M(TargetTet[k])"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (} ConstraintStiffness + = PositionTargetStiffness* AllParticles .)",
    "insertText": "M(SingleConstraintData.SingleIndices[0])"
  },
  {
    "label": "SingleStiffness()",
    "kind": "Method",
    "detail": "Function (SingleConstraintData .)",
    "insertText": "SingleStiffness(T)"
  },
  {
    "label": "SetSingleConstraint()",
    "kind": "Method",
    "detail": "Function (ConstraintsData .)",
    "insertText": "SetSingleConstraint(SingleConstraintData, InConstraintIndex)"
  },
  {
    "label": "GetSingleConstraintData()",
    "kind": "Method",
    "detail": "Function (const int32 OldConstraintIndex = DeletedSingleConstraint -> ConstraintIndex ; const FGaussSeidelWeakConstraintSingleData<T>& SingleData = ConstraintsData .)",
    "insertText": "GetSingleConstraintData(OldConstraintIndex)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (delete DeletedSingleConstraint ; ConstraintsData .)",
    "insertText": "RemoveConstraint(OldConstraintIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Handles [ OldConstraintIndex ] -> ConstraintIndex = OldConstraintIndex ; } const int32 IndicesOffset = SingleData . SingleIndices .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 ParticleIndex = SingleData . SingleIndices [ i ] ;)",
    "insertText": "for(int32 j = 0; j < WCIncidentElements[ParticleIndex].Num(); j++)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (WCIncidentElements [ ParticleIndex ] .)",
    "insertText": "Remove(j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "for(int32 i = 0; i < SingleData.SingleSecondIndices.Num(); i++)"
  },
  {
    "label": "AddParticleTetrahedraConstraints()",
    "kind": "Method",
    "detail": "Function (break ; } } } } TArray<const GSConstraintHandle*>)",
    "insertText": "AddParticleTetrahedraConstraints(const GeometryCollection::Facades::FTetrahedralFacade& InTargetGeom, const ParticleType& AllParticles, const TArray<GeometryCollection::Facades::TetrahedralParticleEmbedding>& InIntersections, const FIntVector2& SourceRange, const FIntVector2& TargetRange, const T ConstraintStiffness)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<const GSConstraintHandle*> ConstraintHandles ; ConstraintHandles .)",
    "insertText": "SetNum(InIntersections.Num())"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const int32 NumConstraintsOffset = ConstraintsData .)",
    "insertText": "Size()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintsData .)",
    "insertText": "AddConstraints(InIntersections.Num())"
  },
  {
    "label": "AddSingleParticleTetrahedraConstraint()",
    "kind": "Method",
    "detail": "Function (ConstraintHandles [ i ] =)",
    "insertText": "AddSingleParticleTetrahedraConstraint(InTargetGeom, AllParticles, InIntersections[i], NumConstraintsOffset + i, SourceRange, TargetRange, ConstraintStiffness)"
  },
  {
    "label": "ComputeInitialWCData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ComputeInitialWCData(AllParticles)"
  },
  {
    "label": "RemoveSingleConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSingleConstraint(DeletedPtr)"
  },
  {
    "label": "ReComputeNodalWeights()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReComputeNodalWeights(const TSet<int32>& DirtyVerts)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NodalWeights [ Vert ] .)",
    "insertText": "Init(T(0), 6)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintIndex = WCIncidentElements [ Vert ] [ j ] ; const int32 LocalIndex = WCIncidentElementsLocal [ Vert ] [ j ] ; T Weight =)",
    "insertText": "T(0)"
  },
  {
    "label": "GetSecondWeights()",
    "kind": "Method",
    "detail": "Function (Weight = ConstraintsData .)",
    "insertText": "GetSecondWeights(ConstraintIndex)[LocalIndex - ConstraintsData.GetIndices(ConstraintIndex).Num()"
  },
  {
    "label": "GetWeights()",
    "kind": "Method",
    "detail": "Function (} else { Weight = ConstraintsData .)",
    "insertText": "GetWeights(ConstraintIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ConstraintsData.GetIsAnisotropic(ConstraintIndex))"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (NodalWeights [ Vert ] [ alpha ] + = ConstraintsData .)",
    "insertText": "GetNormal(ConstraintIndex)[alpha] * ConstraintsData.GetNormal(ConstraintIndex)[alpha] * Weight * Weight * ConstraintsData.GetStiffness(ConstraintIndex)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} NodalWeights [ Vert ] [ 3 ] + = ConstraintsData .)",
    "insertText": "GetNormal(ConstraintIndex)[0] * ConstraintsData.GetNormal(ConstraintIndex)[1] * Weight * Weight * ConstraintsData.GetStiffness(ConstraintIndex)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (NodalWeights [ Vert ] [ 4 ] + = ConstraintsData .)",
    "insertText": "GetNormal(ConstraintIndex)[0] * ConstraintsData.GetNormal(ConstraintIndex)[2] * Weight * Weight * ConstraintsData.GetStiffness(ConstraintIndex)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (NodalWeights [ Vert ] [ 5 ] + = ConstraintsData .)",
    "insertText": "GetNormal(ConstraintIndex)[1] * ConstraintsData.GetNormal(ConstraintIndex)[2] * Weight * Weight * ConstraintsData.GetStiffness(ConstraintIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "GetStiffness()",
    "kind": "Method",
    "detail": "Function (NodalWeights [ Vert ] [ alpha ] + = Weight* Weight* ConstraintsData .)",
    "insertText": "GetStiffness(ConstraintIndex)"
  },
  {
    "label": "AdjustStiffness()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "AdjustStiffness(const TArray<const GSConstraintHandle*> ConstraintHandles, const TArray<T>& StiffnessPerConstraint, const ParticleType& Particles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSet<int32> DirtyVertices ;)",
    "insertText": "for(int32 i = 0; i < ConstraintHandles.Num(); i++)"
  },
  {
    "label": "GetSingleConstraintData()",
    "kind": "Method",
    "detail": "Function (const GSConstraintHandle* SingleHandle = ConstraintHandles [ i ] ; const T NewStiffness = StiffnessPerConstraint [ i ] ; const int32 ConstraintIndex = SingleHandle -> ConstraintIndex ; const FGaussSeidelWeakConstraintSingleData<T>& SingleConstraintData = ConstraintsData .)",
    "insertText": "GetSingleConstraintData(ConstraintIndex)"
  },
  {
    "label": "NewConstraintStiffness()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "NewConstraintStiffness(T)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (NewConstraintStiffness + = SingleConstraintData . SingleWeights [ k ]* NewStiffness* Particles .)",
    "insertText": "M(SingleConstraintData.SingleIndices[k])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 k = 0; k < SingleConstraintData.SingleSecondWeights.Num(); k++)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (NewConstraintStiffness + = SingleConstraintData . SingleSecondWeights [ k ]* NewStiffness* Particles .)",
    "insertText": "M(SingleConstraintData.SingleSecondIndices[k])"
  },
  {
    "label": "SetStiffness()",
    "kind": "Method",
    "detail": "Function (} ConstraintsData .)",
    "insertText": "SetStiffness(ConstraintIndex, NewConstraintStiffness)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DirtyVertices .)",
    "insertText": "Append(SingleConstraintData.SingleIndices)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DirtyVertices .)",
    "insertText": "Append(SingleConstraintData.SingleSecondIndices)"
  },
  {
    "label": "ReComputeNodalWeights()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReComputeNodalWeights(DirtyVertices)"
  }
]