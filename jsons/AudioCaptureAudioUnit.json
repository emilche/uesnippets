[
  {
    "label": "FAudioCaptureAudioUnitStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioCaptureAudioUnitStream"
  },
  {
    "label": "FAudioCaptureAudioUnitStream()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioCaptureCore . h \" # include<AudioToolbox / AudioToolbox . h> # include<AudioUnit / AudioUnit . h> namespace Audio { class FAudioCaptureAudioUnitStream : public IAudioCaptureStream { public :)",
    "insertText": "FAudioCaptureAudioUnitStream()"
  },
  {
    "label": "GetCaptureDeviceInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCaptureDeviceInfo(FCaptureDeviceInfo& OutInfo, int32 DeviceIndex)"
  },
  {
    "label": "OpenAudioCaptureStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAudioCaptureStream(const FAudioCaptureDeviceParams& InParams, FOnAudioCaptureFunction InOnCapture, uint32 NumFramesDesired)"
  },
  {
    "label": "CloseStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseStream()"
  },
  {
    "label": "StartStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartStream()"
  },
  {
    "label": "StopStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopStream()"
  },
  {
    "label": "AbortStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbortStream()"
  },
  {
    "label": "GetStreamTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStreamTime(double& OutStreamTime)"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "IsCapturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing()"
  },
  {
    "label": "OnAudioCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioCapture(void* InBuffer, uint32 InBufferFrames, double StreamTime, bool bOverflow)"
  },
  {
    "label": "GetInputDevicesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInputDevicesAvailable(TArray<FCaptureDeviceInfo>& OutDevices)"
  },
  {
    "label": "SetHardwareFeatureEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHardwareFeatureEnabled(EHardwareInputFeature FeatureType, bool bEnabled)"
  },
  {
    "label": "OnCaptureCallback()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "OnCaptureCallback(AudioUnitRenderActionFlags* ioActionFlags, const AudioTimeStamp* inTimeStamp, UInt32 inBusNumber, UInt32 inNumberFrames, AudioBufferList* ioData)"
  },
  {
    "label": "AllocateBuffer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AllocateBuffer(int SizeInBytes)"
  }
]