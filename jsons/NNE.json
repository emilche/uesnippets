[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / RemoveIf . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" NNERuntime . h \" # include \" NNEStatus . h \" # include \" UObject / WeakInterfacePtr . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNNE, Log, All)"
  },
  {
    "label": "RegisterRuntime()",
    "kind": "Method",
    "detail": "Function (namespace UE::NNE { using ERegisterRuntimeStatus = EResultStatus ; using EUnregisterRuntimeStatus = EResultStatus ; ERegisterRuntimeStatus)",
    "insertText": "RegisterRuntime(TWeakInterfacePtr<INNERuntime> Runtime)"
  },
  {
    "label": "UnregisterRuntime()",
    "kind": "Method",
    "detail": "Function (EUnregisterRuntimeStatus)",
    "insertText": "UnregisterRuntime(TWeakInterfacePtr<INNERuntime> Runtime)"
  },
  {
    "label": "GetAllRuntimeNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAllRuntimeNames()"
  },
  {
    "label": "GetRuntime()",
    "kind": "Method",
    "detail": "Function (TWeakInterfacePtr<INNERuntime>)",
    "insertText": "GetRuntime(const FString& Name)"
  },
  {
    "label": "GetRuntime()",
    "kind": "Method",
    "detail": "Function (TWeakInterfacePtr<INNERuntime> Runtime =)",
    "insertText": "GetRuntime(Name)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* RuntimePtr = Cast<)",
    "insertText": "T(Runtime.Get())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNum(Algo::RemoveIf(Result, [] (const FString &RuntimeName) { return !GetRuntime<T>(RuntimeName).IsValid(); }))"
  }
]