[
  {
    "label": "FMetalShaderResourceMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalShaderResourceMask"
  },
  {
    "label": "EMetalShaderFrequency",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalShaderFrequency"
  },
  {
    "label": "EMetalLimits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalLimits"
  },
  {
    "label": "EMetalPipelineHashBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalPipelineHashBits"
  },
  {
    "label": "EMetalPipelineHashOffsets",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalPipelineHashOffsets"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "FMetalPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalPipelineStateCacheManager"
  },
  {
    "label": "FMetalShaderPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalShaderPipeline"
  },
  {
    "label": "FMetalPipelineStateCacheManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" ShaderPipelineCache . h \" # include \" MetalShaderResources . h \" # if PLATFORM_IOS # define METAL_MAX_TEXTURES 3 1 typedef uint32 FMetalTextureMask ; # elif PLATFORM_MAC # define METAL_MAX_TEXTURES 1 2 8 typedef __uint128_t FMetalTextureMask ; # else # error \" Unsupported Platform ! \" # endif typedef uint32 FMetalBufferMask ; typedef uint16 FMetalSamplerMask ; struct FMetalShaderResourceMask { FMetalTextureMask TextureMask ; FMetalBufferMask BufferMask ; FMetalSamplerMask SamplerMask ; } ; enum EMetalShaderFrequency { EMetalShaderVertex = 0,EMetalShaderFragment = 1,EMetalShaderCompute = 2,EMetalShaderStream = 3,EMetalShaderRenderNum = 2,EMetalShaderStagesNum = 4 } ; enum EMetalLimits { ML_MaxSamplers = 1 6,ML_MaxBuffers = METAL_MAX_BUFFERS,ML_MaxTextures = METAL_MAX_TEXTURES,ML_MaxViewports = 1 6 } ; enum EMetalPipelineHashBits { NumBits_RenderTargetFormat = 6,NumBits_DepthFormat = 3,NumBits_StencilFormat = 3,NumBits_SampleCount = 3,NumBits_BlendState = 7,NumBits_PrimitiveTopology = 2,NumBits_AlphaToCoverage = 1,} ; enum EMetalPipelineHashOffsets { Offset_BlendState0 = 0,Offset_BlendState1 = Offset_BlendState0 + NumBits_BlendState,Offset_BlendState2 = Offset_BlendState1 + NumBits_BlendState,Offset_BlendState3 = Offset_BlendState2 + NumBits_BlendState,Offset_BlendState4 = Offset_BlendState3 + NumBits_BlendState,Offset_BlendState5 = Offset_BlendState4 + NumBits_BlendState,Offset_BlendState6 = Offset_BlendState5 + NumBits_BlendState,Offset_BlendState7 = Offset_BlendState6 + NumBits_BlendState,Offset_PrimitiveTopology = Offset_BlendState7 + NumBits_BlendState,Offset_RasterEnd = Offset_PrimitiveTopology + NumBits_PrimitiveTopology,Offset_RenderTargetFormat0 = 6 4,Offset_RenderTargetFormat1 = Offset_RenderTargetFormat0 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat2 = Offset_RenderTargetFormat1 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat3 = Offset_RenderTargetFormat2 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat4 = Offset_RenderTargetFormat3 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat5 = Offset_RenderTargetFormat4 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat6 = Offset_RenderTargetFormat5 + NumBits_RenderTargetFormat,Offset_RenderTargetFormat7 = Offset_RenderTargetFormat6 + NumBits_RenderTargetFormat,Offset_DepthFormat = Offset_RenderTargetFormat7 + NumBits_RenderTargetFormat,Offset_StencilFormat = Offset_DepthFormat + NumBits_DepthFormat,Offset_SampleCount = Offset_StencilFormat + NumBits_StencilFormat,Offset_AlphaToCoverage = Offset_SampleCount + NumBits_SampleCount,Offset_End = Offset_AlphaToCoverage + NumBits_AlphaToCoverage } ; class FMetalDevice ; class FMetalPipelineStateCacheManager { public :)",
    "insertText": "FMetalPipelineStateCacheManager(FMetalDevice& Device)"
  },
  {
    "label": "FMetalPipelineStateCacheManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalPipelineStateCacheManager()"
  },
  {
    "label": "OnShaderPipelineCachePreOpen()",
    "kind": "Method",
    "detail": "Function (private : FDelegateHandle OnShaderPipelineCachePreOpenDelegate ; FDelegateHandle OnShaderPipelineCacheOpenedDelegate ; FDelegateHandle OnShaderPipelineCachePrecompilationCompleteDelegate ; void)",
    "insertText": "OnShaderPipelineCachePreOpen(FString const& Name, EShaderPlatform Platform, bool& bReady)"
  },
  {
    "label": "OnShaderPipelineCacheOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPipelineCacheOpened(FString const& Name, EShaderPlatform Platform, uint32 Count, const FGuid& VersionGuid, FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "OnShaderPipelineCachePrecompilationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPipelineCachePrecompilationComplete(uint32 Count, double Seconds, const FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "FMetalShaderPipeline()",
    "kind": "Method",
    "detail": "Function (} ; class FMetalShaderPipeline { public :)",
    "insertText": "FMetalShaderPipeline(FMetalDevice& MetalDevice) : Device(MetalDevice)"
  },
  {
    "label": "FMetalShaderPipeline()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FMetalShaderPipeline()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "InitResourceMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResourceMask()"
  },
  {
    "label": "InitResourceMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResourceMask(EMetalShaderFrequency Frequency)"
  },
  {
    "label": "ShutdownPipelineCache()",
    "kind": "Method",
    "detail": "Function (FMetalDevice& Device ; MTLRenderPipelineStatePtr RenderPipelineState ; MTLComputePipelineStatePtr ComputePipelineState ; MTLRenderPipelineStatePtr StreamPipelineState ; TArray<uint32> BufferDataSizes [ EMetalShaderStagesNum ] ; TMap<uint8,uint8> TextureTypes [ EMetalShaderStagesNum ] ; FMetalShaderResourceMask ResourceMask [ EMetalShaderStagesNum ] ; MTLRenderPipelineReflectionPtr RenderPipelineReflection ; MTLRenderPipelineReflectionPtr StreamPipelineReflection ; MTLComputePipelineReflectionPtr ComputePipelineReflection ; # if METAL_DEBUG_OPTIONS NS::String* VertexSource = nullptr ; NS::String* FragmentSource = nullptr ; NS::String* ComputeSource = nullptr ; # if PLATFORM_SUPPORTS_MESH_SHADERS NS::String* MeshSource = nullptr ; NS::String* ObjectSource = nullptr ; # endif MTLRenderPipelineDescriptorPtr RenderDesc ; MTLMeshRenderPipelineDescriptorPtr MeshRenderDesc ; MTLRenderPipelineDescriptorPtr StreamDesc ; MTLComputePipelineDescriptorPtr ComputeDesc ; # endif } ; void)",
    "insertText": "ShutdownPipelineCache()"
  }
]