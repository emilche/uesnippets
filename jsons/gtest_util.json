[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "TestIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestIdentifier"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_GTEST_UTIL_H_ # define BASE_TEST_GTEST_UTIL_H_ # include<string> # include<utility> # include<vector> # include \" base / check . h \" # include \" base / debug / debugging_buildflags . h \" # include \" build / build_config . h \" # include \" testing / gtest / include / gtest / gtest . h \" # if)",
    "insertText": "DCHECK_IS_ON() && defined(GTEST_HAS_DEATH_TEST) && \\ !BUILDFLAG(DCHECK_IS_CONFIGURABLE) && !BUILDFLAG(IS_ANDROID) #define EXPECT_DCHECK_DEATH(statement) EXPECT_DEATH(statement, \"Check failed\") #define EXPECT_DCHECK_DEATH_WITH(statement, msg) EXPECT_DEATH(statement, msg) #define ASSERT_DCHECK_DEATH(statement) ASSERT_DEATH(statement, \"Check failed\") #define ASSERT_DCHECK_DEATH_WITH(statement, msg) ASSERT_DEATH(statement, msg) #else #define EXPECT_DCHECK_DEATH(statement) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"Check failed\", ) #define EXPECT_DCHECK_DEATH_WITH(statement, msg) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, msg, ) #define ASSERT_DCHECK_DEATH(statement) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"Check failed\", return ) #define ASSERT_DCHECK_DEATH_WITH(statement, msg) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, msg, return ) #endif #if defined(GTEST_HAS_DEATH_TEST) && !BUILDFLAG(IS_ANDROID) #if CHECK_WILL_STREAM() #define EXPECT_CHECK_DEATH(statement) EXPECT_DEATH(statement, \"Check failed\") #define EXPECT_CHECK_DEATH_WITH(statement, msg) EXPECT_DEATH(statement, msg) #define ASSERT_CHECK_DEATH(statement) ASSERT_DEATH(statement, \"Check failed\") #else #define EXPECT_CHECK_DEATH(statement) EXPECT_DEATH(statement, \"\") #define EXPECT_CHECK_DEATH_WITH(statement, msg) EXPECT_DEATH(statement, \"\") #define ASSERT_CHECK_DEATH(statement) ASSERT_DEATH(statement, \"\") #endif #else #define EXPECT_CHECK_DEATH(statement) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"\", ) #define EXPECT_CHECK_DEATH_WITH(statement, msg) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"\", ) #define ASSERT_CHECK_DEATH(statement) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"\", return ) #endif #if defined(GTEST_HAS_DEATH_TEST) && !BUILDFLAG(IS_ANDROID) #define BASE_EXPECT_DEATH EXPECT_DEATH #else #define BASE_EXPECT_DEATH(statement, matcher) \\ GTEST_UNSUPPORTED_DEATH_TEST(statement, \"\",)"
  },
  {
    "label": "TestIdentifier()",
    "kind": "Method",
    "detail": "Function (class FilePath ; struct TestIdentifier {)",
    "insertText": "TestIdentifier()"
  },
  {
    "label": "TestIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestIdentifier(const TestIdentifier& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestIdentifier&)",
    "insertText": "operator(const TestIdentifier& other)"
  },
  {
    "label": "FormatFullTestName()",
    "kind": "Method",
    "detail": "Function (std::string test_case_name ; std::string test_name ; std::string file ; int line ; } ; std::string)",
    "insertText": "FormatFullTestName(const std::string& test_case_name, const std::string& test_name)"
  },
  {
    "label": "TestNameWithoutDisabledPrefix()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TestNameWithoutDisabledPrefix(const std::string& full_test_name)"
  },
  {
    "label": "GetCompiledInTests()",
    "kind": "Method",
    "detail": "Function (std::vector<TestIdentifier>)",
    "insertText": "GetCompiledInTests()"
  },
  {
    "label": "WriteCompiledInTestsToFile()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "WriteCompiledInTestsToFile(const FilePath& path)"
  },
  {
    "label": "ReadTestNamesFromFile()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ReadTestNamesFromFile(const FilePath& path, std::vector<TestIdentifier>* output)"
  }
]