[
  {
    "label": "SaltedSeedSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SaltedSeedSeq"
  },
  {
    "label": "ContiguousAndUint32Tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContiguousAndUint32Tag"
  },
  {
    "label": "DefaultTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultTag"
  },
  {
    "label": "is_salted_seed_seq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_salted_seed_seq"
  },
  {
    "label": "SaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_SALTED_SEED_SEQ_H_ # define ABSL_RANDOM_INTERNAL_SALTED_SEED_SEQ_H_ # include<cstdint> # include<cstdlib> # include<initializer_list> # include<iterator> # include<memory> # include<type_traits> # include<utility> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / seed_material . h \" # include \" absl / types / optional . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<SSeq> class SaltedSeedSeq { public : using inner_sequence_type = SSeq ; using result_type = SSeq::result_type ;)",
    "insertText": "SaltedSeedSeq() : seq_(absl::make_unique<SSeq>())"
  },
  {
    "label": "SaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "SaltedSeedSeq(Iterator begin, Iterator end) : seq_(absl::make_unique<SSeq>(begin, end))"
  },
  {
    "label": "SaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "SaltedSeedSeq(std::initializer_list<T> il) : SaltedSeedSeq(il.begin(), il.end())"
  },
  {
    "label": "SaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SaltedSeedSeq(const SaltedSeedSeq&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SaltedSeedSeq&)",
    "insertText": "operator(const SaltedSeedSeq&)"
  },
  {
    "label": "SaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaltedSeedSeq(SaltedSeedSeq&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SaltedSeedSeq&)",
    "insertText": "operator(SaltedSeedSeq&&)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (template<RandomAccessIterator> void)",
    "insertText": "generate(RandomAccessIterator begin, RandomAccessIterator end)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (using U = std::iterator_traits<RandomAccessIterator>::value_type ; using TagType =)",
    "insertText": "conditional_t(std::is_same<U, uint32_t>::value && (std::is_pointer<RandomAccessIterator>::value || std::is_same<RandomAccessIterator, typename std::vector<U>::iterator>::value))"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generate_impl(TagType{}, begin, end, std::distance(begin, end))"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} } template<OutIterator> void)",
    "insertText": "param(OutIterator out)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (seq_ ->)",
    "insertText": "param(out)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (} private : struct ContiguousAndUint32Tag { } ; struct DefaultTag { } ; template<Contiguous> void)",
    "insertText": "generate_impl(ContiguousAndUint32Tag, Contiguous begin, Contiguous end, size_t n)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (seq_ ->)",
    "insertText": "generate(begin, end)"
  },
  {
    "label": "GetSaltMaterial()",
    "kind": "Method",
    "detail": "Function (const uint32_t salt = absl::)",
    "insertText": "GetSaltMaterial().value_or(0)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (auto span = absl::Span<)",
    "insertText": "uint32_t(&*begin, n)"
  },
  {
    "label": "MixIntoSeedMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixIntoSeedMaterial(absl::MakeConstSpan(&salt, 1), span)"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (} template<RandomAccessIterator> void)",
    "insertText": "generate_impl(DefaultTag, RandomAccessIterator begin, RandomAccessIterator, size_t n)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (absl::InlinedVector<uint32_t,8>)",
    "insertText": "data(n, 0)"
  },
  {
    "label": "generate_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generate_impl(ContiguousAndUint32Tag{}, data.begin(), data.end(), n)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(data.begin(), data.end(), begin)"
  },
  {
    "label": "MakeSaltedSeedSeq()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SSeq> seq_ ; } ; template<T,= void> struct is_salted_seed_seq : public std::false_type { } ; template<T> struct is_salted_seed_seq<T,std::enable_if<std::is_same<T,SaltedSeedSeq<T::inner_sequence_type>>::value>::type> : public std::true_type { } ; template<SSeq,EnableIf = absl::enable_if_t<is_salted_seed_seq<SSeq>::value>> SSeq)",
    "insertText": "MakeSaltedSeedSeq(SSeq&& seq)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (using sseq_type = std::decay<SSeq>::type ; using result_type = sseq_type::result_type ; absl::InlinedVector<result_type,8> data ; seq .)",
    "insertText": "param(std::back_inserter(data))"
  }
]