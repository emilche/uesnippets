[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPseudoConstantQKernelSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPseudoConstantQKernelSettings"
  },
  {
    "label": "FPseudoConstantQBandSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPseudoConstantQBandSettings"
  },
  {
    "label": "FPseudoConstantQ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPseudoConstantQ"
  },
  {
    "label": "FPseudoConstantQKernelSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / AlignedBuffer . h \" # include \" DSP / FloatArrayMath . h \" namespace Audio { enum class EPseudoConstantQNormalization : uint8 { EqualAmplitude,EqualEuclideanNorm,EqualEnergy } ; struct FPseudoConstantQKernelSettings { int32 NumBands ; float NumBandsPerOctave ; float KernelLowestCenterFreq ; float BandWidthStretch ; EPseudoConstantQNormalization Normalization ;)",
    "insertText": "FPseudoConstantQKernelSettings() : NumBands(96) , NumBandsPerOctave(12) , KernelLowestCenterFreq(40.f) , BandWidthStretch(1.0) , Normalization(EPseudoConstantQNormalization::EqualEnergy)"
  },
  {
    "label": "NewPseudoConstantQKernelTransform()",
    "kind": "Method",
    "detail": "Function (} } ; TUniquePtr<FContiguousSparse2DKernelTransform>)",
    "insertText": "NewPseudoConstantQKernelTransform(const FPseudoConstantQKernelSettings& InSettings, const int32 InFFTSize, const float InSampleRate)"
  },
  {
    "label": "GetConstantQCenterFrequency()",
    "kind": "Method",
    "detail": "Function (struct FPseudoConstantQBandSettings { float CenterFreq ; float BandWidth ; int32 FFTSize ; float SampleRate ; EPseudoConstantQNormalization Normalization ; } ; struct FPseudoConstantQ { float)",
    "insertText": "GetConstantQCenterFrequency(const int32 InBandIndex, const float InBaseFrequency, const float InBandsPerOctave)"
  },
  {
    "label": "GetConstantQBandWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetConstantQBandWidth(const float InBandCenter, const float InBandsPerOctave, const float InBandWidthStretch)"
  },
  {
    "label": "FillArrayWithConstantQBand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillArrayWithConstantQBand(const FPseudoConstantQBandSettings& InSettings, FAlignedFloatBuffer& OutOffsetArray, int32& OutOffsetIndex)"
  }
]