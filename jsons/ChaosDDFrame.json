[
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "FChaosDDGlobalFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosDDGlobalFrame"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosDebugDraw / ChaosDDTypes . h \" # include \" Chaos / DebugDrawCommand . h \" # include \" Containers / Map . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / CriticalSection . h \" # include \" Math / Box . h \" # include \" Math / Sphere . h \" # if CHAOS_DEBUG_DRAW namespace ChaosDD::Private { using FChaosDDCommand = TFunction<)",
    "insertText": "void(IChaosDDRenderer&)"
  },
  {
    "label": "FChaosDDFrame()",
    "kind": "Method",
    "detail": "Function (class FChaosDDFrame : public TSharedFromThis<FChaosDDFrame> { public :)",
    "insertText": "FChaosDDFrame(const FChaosDDTimelineWeakPtr& InTimeline, int64 InFrameIndex, double InTime, double InDt, const FSphere3d& InDrawRegion, int32 InCommandBudget, int32 InCommandQueueLength) : Timeline(InTimeline) , FrameIndex(InFrameIndex) , Time(InTime) , Dt(InDt) , DrawRegion(InDrawRegion) , CommandBudget(InCommandBudget) , CommandCost(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Reserve(InCommandQueueLength)"
  },
  {
    "label": "FChaosDDFrame()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FChaosDDFrame()"
  },
  {
    "label": "GetTimeline()",
    "kind": "Method",
    "detail": "Function (} FChaosDDTimelinePtr)",
    "insertText": "GetTimeline()"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetFrameIndex()"
  },
  {
    "label": "GetDrawRegion()",
    "kind": "Method",
    "detail": "Function (DrawRegion = InRegion ; } const FSphere3d&)",
    "insertText": "GetDrawRegion()"
  },
  {
    "label": "IsInDrawRegion()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "IsInDrawRegion(const FSphere3d& InSphere)"
  },
  {
    "label": "IsInDrawRegion()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "IsInDrawRegion(const FBox3d& InBox)"
  },
  {
    "label": "ComputeSquaredDistanceToPoint()",
    "kind": "Method",
    "detail": "Function (const double BoxDistanceSq = InBox .)",
    "insertText": "ComputeSquaredDistanceToPoint(DrawRegion.Center)"
  },
  {
    "label": "SetCommandBudget()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "SetCommandBudget(int32 InCommandBudget)"
  },
  {
    "label": "GetCommandBudget()",
    "kind": "Method",
    "detail": "Function (CommandBudget = InCommandBudget ; } int32)",
    "insertText": "GetCommandBudget()"
  },
  {
    "label": "AddToCost()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddToCost(int32 InCost)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CommandsCS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CommandCost + = InCost ;)",
    "insertText": "if((CommandCost <= CommandBudget) || (CommandBudget == 0))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Emplace(MoveTemp(InCommand))"
  },
  {
    "label": "EnqueueLatentCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueLatentCommand(const Chaos::FLatentDrawCommand& InCommand)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LatentCommands .)",
    "insertText": "Add(InCommand)"
  },
  {
    "label": "GetNumCommands()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumCommands()"
  },
  {
    "label": "GetNumLatentCommands()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumLatentCommands()"
  },
  {
    "label": "VisitCommands()",
    "kind": "Method",
    "detail": "Function (} template<VisitorType> void)",
    "insertText": "VisitCommands(const VisitorType& Visitor)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(Command)"
  },
  {
    "label": "VisitLatentCommands()",
    "kind": "Method",
    "detail": "Function (} } template<VisitorType> void)",
    "insertText": "VisitLatentCommands(const VisitorType& Visitor)"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BeginWrite()"
  },
  {
    "label": "EndWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndWrite()"
  },
  {
    "label": "ExtractFrame()",
    "kind": "Method",
    "detail": "Function (} FChaosDDFramePtr)",
    "insertText": "ExtractFrame()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const int32 CommandQueueLength = Commands .)",
    "insertText": "Max()"
  },
  {
    "label": "FChaosDDFrame()",
    "kind": "Method",
    "detail": "Function (FChaosDDFrame* ExtractedFrame = new)",
    "insertText": "FChaosDDFrame(MoveTemp(*this))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Commands .)",
    "insertText": "Reset(CommandQueueLength)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (LatentCommands .)",
    "insertText": "Reset(LatentCommandQueueLength)"
  },
  {
    "label": "FChaosDDFramePtr()",
    "kind": "Method",
    "detail": "Function (CommandCost = 0 ; return)",
    "insertText": "FChaosDDFramePtr(ExtractedFrame)"
  },
  {
    "label": "FChaosDDFrame()",
    "kind": "Method",
    "detail": "Function (} protected : class FChaosDDGlobalFrame ;)",
    "insertText": "FChaosDDFrame(FChaosDDFrame&& Other) : Timeline(Other.Timeline) , FrameIndex(Other.FrameIndex) , Time(Other.Time) , Dt(Other.Dt) , DrawRegion(Other.DrawRegion) , CommandBudget(Other.CommandBudget) , CommandCost(Other.CommandCost) , Commands(MoveTemp(Other.Commands)) , LatentCommands(MoveTemp(Other.LatentCommands))"
  },
  {
    "label": "FChaosDDGlobalFrame()",
    "kind": "Method",
    "detail": "Function (} FChaosDDTimelineWeakPtr Timeline ; int64 FrameIndex ; double Time ; double Dt ; FSphere3d DrawRegion ; int32 CommandBudget ; int32 CommandCost ; TArray<FChaosDDCommand> Commands ; TArray<Chaos::FLatentDrawCommand> LatentCommands ; FCriticalSection CommandsCS ; } ; class FChaosDDGlobalFrame : public FChaosDDFrame { public :)",
    "insertText": "FChaosDDGlobalFrame(int32 InCommandBudget) : FChaosDDFrame(FChaosDDTimelinePtr(), 0, 0.0f, 0.0f, FSphere3d(FVector::Zero(), 0.0), InCommandBudget, 0)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FrameWriteCS .)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (FrameWriteCS .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&FrameWriteCS)"
  },
  {
    "label": "FChaosDDFrameWriter()",
    "kind": "Method",
    "detail": "Function (} protected : FCriticalSection FrameWriteCS ; } ; class FChaosDDFrameWriter { public :)",
    "insertText": "FChaosDDFrameWriter(const FChaosDDFramePtr& InFrame) : Frame(InFrame)"
  },
  {
    "label": "FChaosDDFrameWriter()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FChaosDDFrameWriter()"
  },
  {
    "label": "FSphere3d()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSphere3d(FVector3d(0), 0)"
  },
  {
    "label": "IsInDrawRegion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInDrawRegion(const FVector& InPos)"
  },
  {
    "label": "TryEnqueueCommand()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "TryEnqueueCommand(int32 InCost, const FBox3d& InBox, FChaosDDCommand&& InCommand)"
  },
  {
    "label": "EnqueueCommand()",
    "kind": "Method",
    "detail": "Function (Frame ->)",
    "insertText": "EnqueueCommand(MoveTemp(InCommand))"
  },
  {
    "label": "EnqueueLatentCommand()",
    "kind": "Method",
    "detail": "Function (Frame ->)",
    "insertText": "EnqueueLatentCommand(InCommand)"
  }
]