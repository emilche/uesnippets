[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FTrackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedData"
  },
  {
    "label": "FPackageAccessRefScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageAccessRefScope"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_SCOPED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Optional . h \" # include \" Misc / PackageName . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectHandle . h \" # include \" UObject / Package . h \" class ITargetPlatform ; class UPackage ; # define UE_WITH_PACKAGE_ACCESS_TRACKING UE_WITH_OBJECT_HANDLE_TRACKING # if UE_WITH_PACKAGE_ACCESS_TRACKING # define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_SCOPED(Object, OpName) PackageAccessTracking_Private::FPackageAccessRefScope ANONYMOUS_VARIABLE(PackageAccessTracker_)(Object, OpName)"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_DELAYED_SCOPED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_DELAYED_SCOPED(TrackerName, OpName)"
  },
  {
    "label": "_OpName()",
    "kind": "Method",
    "detail": "Function (FName TrackerName # #)",
    "insertText": "_OpName(OpName)"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_DELAYED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_DELAYED(TrackerName, Package) if (TrackerName) TrackerName->SetPackageName(Package->GetFName())"
  },
  {
    "label": "UE_TRACK_REFERENCING_PLATFORM_SCOPED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PLATFORM_SCOPED(TargetPlatform) PackageAccessTracking_Private::FPackageAccessRefScope ANONYMOUS_VARIABLE(PackageAccessTracker_)(TargetPlatform)"
  },
  {
    "label": "UE_TRACK_REFERENCING_OPNAME_SCOPED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_OPNAME_SCOPED(OpName) PackageAccessTracking_Private::FPackageAccessRefScope ANONYMOUS_VARIABLE(PackageAccessTracker_)(OpName)"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_DECLARE_SCOPE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_DECLARE_SCOPE_VARIABLE(VariableName)"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_ACTIVATE_SCOPE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_ACTIVATE_SCOPE_VARIABLE(VariableName, Object, OpName) check(!VariableName.IsSet())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (VariableName .)",
    "insertText": "Emplace(Object, OpName)"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_DEACTIVATE_SCOPE_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_DEACTIVATE_SCOPE_VARIABLE(VariableName) VariableName.Reset()"
  },
  {
    "label": "UE_TRACK_REFERENCING_PACKAGE_SCOPED()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_TRACK_REFERENCING_PACKAGE_SCOPED(Package, OpName) #define UE_TRACK_REFERENCING_PACKAGE_DELAYED_SCOPED(TrackerName, OpName) #define UE_TRACK_REFERENCING_PACKAGE_DELAYED(TrackerName, Package) #define UE_TRACK_REFERENCING_PLATFORM_SCOPED(TargetPlatform) #define UE_TRACK_REFERENCING_OPNAME_SCOPED(OpName) #define UE_TRACK_REFERENCING_PACKAGE_DECLARE_SCOPE_VARIABLE(VariableName) #define UE_TRACK_REFERENCING_PACKAGE_ACTIVATE_SCOPE_VARIABLE(VariableName, Object, OpName) #define UE_TRACK_REFERENCING_PACKAGE_DEACTIVATE_SCOPE_VARIABLE(VariableName)"
  },
  {
    "label": "FTrackedData()",
    "kind": "Method",
    "detail": "Function (struct FTrackedData {)",
    "insertText": "FTrackedData(FName PackageName, FName OpName, const ITargetPlatform* InTargetPlatform, const UObject* InObject)"
  },
  {
    "label": "FTrackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTrackedData(FTrackedData& DirectData, FTrackedData* OuterAccumulatedData)"
  },
  {
    "label": "FPackageAccessRefScope()",
    "kind": "Method",
    "detail": "Function (FName PackageName ; FName OpName ; FName BuildOpName ; const UObject* Object = nullptr ; const ITargetPlatform* TargetPlatform = nullptr ; } ; class FPackageAccessRefScope { public :)",
    "insertText": "FPackageAccessRefScope(FName InPackageName, FName InOpName, const ITargetPlatform* InTargetPlatform=nullptr, const UObject* InObject=nullptr)"
  },
  {
    "label": "FPackageAccessRefScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageAccessRefScope(const UObject* InObject, FName InOpName)"
  },
  {
    "label": "FPackageAccessRefScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageAccessRefScope(FName InOpName)"
  },
  {
    "label": "FPackageAccessRefScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageAccessRefScope(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "FPackageAccessRefScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackageAccessRefScope()"
  },
  {
    "label": "SetPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageName(FName InPackageName)"
  },
  {
    "label": "GetCurrentThreadAccumulatedData()",
    "kind": "Method",
    "detail": "Function (FTrackedData*)",
    "insertText": "GetCurrentThreadAccumulatedData()"
  }
]