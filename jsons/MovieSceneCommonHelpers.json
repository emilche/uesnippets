[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCameraComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraComponent"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UMovieSceneCustomBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCustomBinding"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "UMovieSceneCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCondition"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "MovieSceneHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovieSceneHelpers"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FMovieSceneScopedPackageDirtyGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneScopedPackageDirtyGuard"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "FPropertyAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAddress"
  },
  {
    "label": "FPropertyAndFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndFunction"
  },
  {
    "label": "FMovieSceneScopedPackageDirtyGuard()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "FMovieSceneScopedPackageDirtyGuard(class USceneComponent* InComponent)"
  },
  {
    "label": "keyable()",
    "kind": "Method",
    "detail": "Function (is)",
    "insertText": "keyable(active, on a track that is not muted, etc \n\t */\n\tstatic MOVIESCENE_API bool IsSectionKeyable(const UMovieSceneSection*)"
  },
  {
    "label": "FixupConsecutiveSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupConsecutiveSections(TArray<UMovieSceneSection*>& Sections, UMovieSceneSection& Section, bool bDelete, bool bCleanUp = false)"
  },
  {
    "label": "FixupConsecutiveBlendingSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupConsecutiveBlendingSections(TArray<UMovieSceneSection*>& Sections, UMovieSceneSection& Section, bool bDelete, bool bCleanUp = false)"
  },
  {
    "label": "SortConsecutiveSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConsecutiveSections(TArray<UMovieSceneSection*>& Sections)"
  },
  {
    "label": "GetDescendantMovieScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescendantMovieScenes(UMovieSceneSequence* InSequence, TArray<UMovieScene*> & InMovieScenes)"
  },
  {
    "label": "GetDescendantSubSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescendantSubSections(const UMovieScene* InMovieScene, TArray<UMovieSceneSubSection*>& InSubSections)"
  },
  {
    "label": "SetRuntimeObjectMobility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRuntimeObjectMobility(UObject* Object, EComponentMobility::Type ComponentMobility = EComponentMobility::Movable)"
  },
  {
    "label": "GetSoundDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSoundDuration(USoundBase* Sound)"
  },
  {
    "label": "SortOverlappingSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SortOverlappingSections(const UMovieSceneSection* A, const UMovieSceneSection* B)"
  },
  {
    "label": "CalculateWeightForBlending()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateWeightForBlending(UMovieSceneSection* SectionToKey, FFrameNumber Time)"
  },
  {
    "label": "MakeUniqueBindingName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueBindingName(UMovieScene* InMovieScene, const FString& InName)"
  },
  {
    "label": "MakeUniqueSpawnableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueSpawnableName(UMovieScene* InMovieScene, const FString& InName)"
  },
  {
    "label": "IsBoundToAnySpawnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToAnySpawnable(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "IsBoundToSpawnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToSpawnable(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "TryCreateCustomSpawnableBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "TryCreateCustomSpawnableBinding(UMovieSceneSequence* Sequence, UObject* CustomBindingObject)"
  },
  {
    "label": "SetObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, UObject* InSourceObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "SupportsObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "CopyObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, UObject* InSourceObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "GetPrioritySortedCustomBindingTypes()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "GetPrioritySortedCustomBindingTypes(TArray<const TSubclassOf<UMovieSceneCustomBinding>>& OutCustomBindingTypes)"
  },
  {
    "label": "CreateTransientSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "CreateTransientSharedPlaybackState(UObject* WorldContext, UMovieSceneSequence* Sequence)"
  },
  {
    "label": "EvaluateSequenceCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateSequenceCondition(const FGuid& BindingID, const FMovieSceneSequenceID& SequenceID, const UMovieSceneCondition* Condition, UObject* ConditionOwnerObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FTrackInstancePropertyBindings()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "FTrackInstancePropertyBindings( FName InPropertyName, const FString& InPropertyPath)"
  },
  {
    "label": "CallFunctionForEnum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallFunctionForEnum( UObject& InRuntimeObject, int64 PropertyValue )"
  },
  {
    "label": "CacheBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBinding( const UObject& InRuntimeObject )"
  },
  {
    "label": "GetCurrentValueForEnum()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetCurrentValueForEnum(const UObject& Object)"
  },
  {
    "label": "InvokeSetterFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeSetterFunction(UObject* InRuntimeObject, UFunction* Setter, T&& InPropertyValue)"
  },
  {
    "label": "FindPropertyAddressRecursive()",
    "kind": "Method",
    "detail": "Function (FPropertyAddress)",
    "insertText": "FindPropertyAddressRecursive(void* BasePointer, UStruct* InStruct, TArray<FString>& InPropertyNames, uint32 Index)"
  },
  {
    "label": "FindPropertyAddress()",
    "kind": "Method",
    "detail": "Function (FPropertyAddress)",
    "insertText": "FindPropertyAddress(const UObject& Object, const FString& InPropertyPath)"
  },
  {
    "label": "ObjectKey()",
    "kind": "Method",
    "detail": "Function (FObjectKey)",
    "insertText": "ObjectKey(&InObject)"
  }
]