[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCameraComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraComponent"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UMovieSceneCustomBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCustomBinding"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "UMovieSceneCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCondition"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "MovieSceneHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovieSceneHelpers"
  },
  {
    "label": "FMovieSceneScopedPackageDirtyGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneScopedPackageDirtyGuard"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "FPropertyAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAddress"
  },
  {
    "label": "FPropertyAndFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndFunction"
  },
  {
    "label": "FMovieSceneScopedPackageDirtyGuard()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / UnrealType . h \" # include \" UObject / ObjectKey . h \" # include \" Curves / KeyHandle . h \" # include \" Misc / FrameNumber . h \" # include \" UObject / WeakFieldPtr . h \" class AActor ; class UCameraComponent ; class UMovieScene ; class UMovieSceneSection ; class UMovieSceneSubSection ; class UMovieSceneSequence ; class USceneComponent ; class USoundBase ; template<class TClass> class TSubclassOf ; class UMovieSceneCustomBinding ; struct FRichCurve ; enum class EMovieSceneKeyInterpolation : uint8 ; struct FMovieSceneSequenceID ; class UMovieSceneCondition ; class UMovieSceneTrack ; namespace UE::MovieScene { struct FSharedPlaybackState ; } class MovieSceneHelpers { public : struct FMovieSceneScopedPackageDirtyGuard {)",
    "insertText": "FMovieSceneScopedPackageDirtyGuard(class USceneComponent* InComponent)"
  },
  {
    "label": "FMovieSceneScopedPackageDirtyGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieSceneScopedPackageDirtyGuard()"
  },
  {
    "label": "IsSectionKeyable()",
    "kind": "Method",
    "detail": "Function (private : class USceneComponent* Component ; bool bPackageWasDirty ; } ; bool)",
    "insertText": "IsSectionKeyable(const UMovieSceneSection*)"
  },
  {
    "label": "FindSectionAtTime()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "FindSectionAtTime(TArrayView<UMovieSceneSection* const> Sections, FFrameNumber Time, int32 RowIndex = INDEX_NONE)"
  },
  {
    "label": "FindNearestSectionAtTime()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "FindNearestSectionAtTime(TArrayView<UMovieSceneSection* const> Sections, FFrameNumber Time, int32 RowIndex = INDEX_NONE)"
  },
  {
    "label": "FindNextSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "FindNextSection(TArrayView<UMovieSceneSection* const> Sections, FFrameNumber Time)"
  },
  {
    "label": "FindPreviousSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "FindPreviousSection(TArrayView<UMovieSceneSection* const> Sections, FFrameNumber Time)"
  },
  {
    "label": "FixupConsecutiveSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupConsecutiveSections(TArray<UMovieSceneSection*>& Sections, UMovieSceneSection& Section, bool bDelete, bool bCleanUp = false)"
  },
  {
    "label": "FixupConsecutiveBlendingSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupConsecutiveBlendingSections(TArray<UMovieSceneSection*>& Sections, UMovieSceneSection& Section, bool bDelete, bool bCleanUp = false)"
  },
  {
    "label": "SortConsecutiveSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortConsecutiveSections(TArray<UMovieSceneSection*>& Sections)"
  },
  {
    "label": "GetDescendantMovieScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescendantMovieScenes(UMovieSceneSequence* InSequence, TArray<UMovieScene*> & InMovieScenes)"
  },
  {
    "label": "GetDescendantSubSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescendantSubSections(const UMovieScene* InMovieScene, TArray<UMovieSceneSubSection*>& InSubSections)"
  },
  {
    "label": "SceneComponentFromRuntimeObject()",
    "kind": "Method",
    "detail": "Function (USceneComponent*)",
    "insertText": "SceneComponentFromRuntimeObject(UObject* Object)"
  },
  {
    "label": "ResolveSceneComponentBoundObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolveSceneComponentBoundObject(UObject* Object)"
  },
  {
    "label": "CameraComponentFromActor()",
    "kind": "Method",
    "detail": "Function (UCameraComponent*)",
    "insertText": "CameraComponentFromActor(const AActor* InActor)"
  },
  {
    "label": "CameraComponentFromRuntimeObject()",
    "kind": "Method",
    "detail": "Function (UCameraComponent*)",
    "insertText": "CameraComponentFromRuntimeObject(UObject* RuntimeObject)"
  },
  {
    "label": "SetRuntimeObjectMobility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRuntimeObjectMobility(UObject* Object, EComponentMobility::Type ComponentMobility = EComponentMobility::Movable)"
  },
  {
    "label": "GetSoundDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSoundDuration(USoundBase* Sound)"
  },
  {
    "label": "SortLowerBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SortLowerBounds(TRangeBound<FFrameNumber> A, TRangeBound<FFrameNumber> B)"
  },
  {
    "label": "SortUpperBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortUpperBounds(TRangeBound<FFrameNumber> A, TRangeBound<FFrameNumber> B)"
  },
  {
    "label": "SortOverlappingSections()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortOverlappingSections(const UMovieSceneSection* A, const UMovieSceneSection* B)"
  },
  {
    "label": "CalculateWeightForBlending()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateWeightForBlending(UMovieSceneSection* SectionToKey, FFrameNumber Time)"
  },
  {
    "label": "MakeUniqueBindingName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueBindingName(UMovieScene* InMovieScene, const FString& InName)"
  },
  {
    "label": "MakeUniqueSpawnableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueSpawnableName(UMovieScene* InMovieScene, const FString& InName)"
  },
  {
    "label": "MakeSpawnableTemplateFromInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "MakeSpawnableTemplateFromInstance(UObject& InSourceObject, UMovieScene* InMovieScene, FName InName)"
  },
  {
    "label": "IsBoundToAnySpawnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToAnySpawnable(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "IsBoundToSpawnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToSpawnable(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "TryCreateCustomSpawnableBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "TryCreateCustomSpawnableBinding(UMovieSceneSequence* Sequence, UObject* CustomBindingObject)"
  },
  {
    "label": "GetSingleBoundObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetSingleBoundObject(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "GetObjectTemplate()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "SetObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, UObject* InSourceObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "SupportsObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "CopyObjectTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyObjectTemplate(UMovieSceneSequence* Sequence, const FGuid& ObjectId, UObject* InSourceObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, int32 BindingIndex = 0)"
  },
  {
    "label": "GetBoundObjectClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA const UClass*)",
    "insertText": "GetBoundObjectClass(UMovieSceneSequence* Sequence, const FGuid& ObjectId, int32 BindingIndex = 0)"
  },
  {
    "label": "GetPrioritySortedCustomBindingTypes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetPrioritySortedCustomBindingTypes(TArray<const TSubclassOf<UMovieSceneCustomBinding>>& OutCustomBindingTypes)"
  },
  {
    "label": "CreateTransientSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (TSharedRef<UE::MovieScene::FSharedPlaybackState>)",
    "insertText": "CreateTransientSharedPlaybackState(UObject* WorldContext, UMovieSceneSequence* Sequence)"
  },
  {
    "label": "GetResolutionContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetResolutionContext(UMovieSceneSequence* Sequence, const FGuid& ObjectId, const FMovieSceneSequenceID& SequenceID, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetSequenceCondition()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneCondition*)",
    "insertText": "GetSequenceCondition(const UMovieSceneTrack* Track, const UMovieSceneSection* Section, bool bFromCompilation=false)"
  },
  {
    "label": "EvaluateSequenceCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateSequenceCondition(const FGuid& BindingID, const FMovieSceneSequenceID& SequenceID, const UMovieSceneCondition* Condition, UObject* ConditionOwnerObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FTrackInstancePropertyBindings()",
    "kind": "Method",
    "detail": "Function (} ; class FTrackInstancePropertyBindings { public :)",
    "insertText": "FTrackInstancePropertyBindings(FName InPropertyName, const FString& InPropertyPath)"
  },
  {
    "label": "CallFunction()",
    "kind": "Method",
    "detail": "Function (template<ValueType> void)",
    "insertText": "CallFunction(UObject& InRuntimeObject, typename TCallTraits<ValueType>::ParamType PropertyValue)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPropertyAndFunction PropAndFunction =)",
    "insertText": "FindOrAdd(InRuntimeObject)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (FProperty* Property =)",
    "insertText": "GetProperty(InRuntimeObject)"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallSetter(&InRuntimeObject, &PropertyValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(UFunction* SetterFunction = PropAndFunction.SetterFunction.Get())"
  },
  {
    "label": "InvokeSetterFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeSetterFunction(&InRuntimeObject, SetterFunction, PropertyValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ValueType* Val = PropAndFunction.GetPropertyAddress<ValueType>())"
  },
  {
    "label": "MoveTempIfPossible()",
    "kind": "Method",
    "detail": "Function (* Val =)",
    "insertText": "MoveTempIfPossible(PropertyValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UFunction* NotifyFunction = PropAndFunction.NotifyFunction.Get())"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (InRuntimeObject .)",
    "insertText": "ProcessEvent(NotifyFunction, nullptr)"
  },
  {
    "label": "CallFunctionForEnum()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CallFunctionForEnum(UObject& InRuntimeObject, int64 PropertyValue)"
  },
  {
    "label": "CacheBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBinding(const UObject& InRuntimeObject)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetProperty(const UObject& Object)"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "GetCurrentValue(const UObject& Object)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (ValueType Value { } ; FPropertyAndFunction PropAndFunction =)",
    "insertText": "FindOrAdd(Object)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ResolvePropertyValue<)",
    "insertText": "ValueType(PropAndFunction.PropertyAddress, Value)"
  },
  {
    "label": "StaticValue()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> TOptional<ValueType>)",
    "insertText": "StaticValue(const UObject* Object, const FString& InPropertyPath)"
  },
  {
    "label": "FindPropertyAddress()",
    "kind": "Method",
    "detail": "Function (FPropertyAddress Address =)",
    "insertText": "FindPropertyAddress(*Object, InPropertyPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueType Value ;)",
    "insertText": "if(ResolvePropertyValue<ValueType>(Address, Value))"
  },
  {
    "label": "GetCurrentValueForEnum()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetCurrentValueForEnum(const UObject& Object)"
  },
  {
    "label": "SetCurrentValue()",
    "kind": "Method",
    "detail": "Function (template<ValueType> void)",
    "insertText": "SetCurrentValue(UObject& Object, typename TCallTraits<ValueType>::ParamType InValue)"
  },
  {
    "label": "GetPropertyPath()",
    "kind": "Method",
    "detail": "Function (} } } const FString&)",
    "insertText": "GetPropertyPath()"
  },
  {
    "label": "InvokeSetterFunction()",
    "kind": "Method",
    "detail": "Function (private : template<T> void)",
    "insertText": "InvokeSetterFunction(UObject* InRuntimeObject, UFunction* Setter, T&& InPropertyValue)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (struct FPropertyAddress { TWeakFieldPtr<FProperty> Property ; void* Address ; FProperty*)",
    "insertText": "GetProperty()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FProperty* PropertyPtr = Property .)",
    "insertText": "Get()"
  },
  {
    "label": "FPropertyAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyAddress() : Property(nullptr) , Address(nullptr)"
  },
  {
    "label": "GetPropertyAddress()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyAndFunction { FPropertyAddress PropertyAddress ; TWeakObjectPtr<UFunction> SetterFunction ; TWeakObjectPtr<UFunction> NotifyFunction ; template<ValueType> ValueType*)",
    "insertText": "GetPropertyAddress()"
  },
  {
    "label": "FPropertyAndFunction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyAndFunction() : PropertyAddress() , SetterFunction( nullptr ) , NotifyFunction( nullptr)"
  },
  {
    "label": "ResolvePropertyValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> bool)",
    "insertText": "ResolvePropertyValue(const FPropertyAddress& Address, ValueType& OutValue)"
  },
  {
    "label": "FindPropertyAddressRecursive()",
    "kind": "Method",
    "detail": "Function (OutValue =* Value ; return true ; } return false ; } FPropertyAddress)",
    "insertText": "FindPropertyAddressRecursive(void* BasePointer, UStruct* InStruct, TArray<FString>& InPropertyNames, uint32 Index)"
  },
  {
    "label": "FindPropertyAddress()",
    "kind": "Method",
    "detail": "Function (FPropertyAddress)",
    "insertText": "FindPropertyAddress(const UObject& Object, const FString& InPropertyPath)"
  },
  {
    "label": "FindPropertyRecursive()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "FindPropertyRecursive(UStruct* InStruct, TArray<FString>& InPropertyNames, uint32 Index)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPropertyAndFunction)",
    "insertText": "FindOrAdd(const UObject& InObject)"
  },
  {
    "label": "ObjectKey()",
    "kind": "Method",
    "detail": "Function (FObjectKey)",
    "insertText": "ObjectKey(&InObject)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FPropertyAndFunction* PropAndFunction = RuntimeObjectToFunctionMap .)",
    "insertText": "Find(ObjectKey)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FObjectKey,FPropertyAndFunction> RuntimeObjectToFunctionMap ; FString PropertyPath ; FName FunctionName ; FName NotifyFunctionName ; FName PropertyName ; } ; template<> void FTrackInstancePropertyBindings::CallFunction<)",
    "insertText": "bool(UObject& InRuntimeObject, TCallTraits<bool>::ParamType PropertyValue)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<> bool FTrackInstancePropertyBindings::ResolvePropertyValue<)",
    "insertText": "bool(const FPropertyAddress& Address, bool& OutValue)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<> void FTrackInstancePropertyBindings::SetCurrentValue<)",
    "insertText": "bool(UObject& Object, TCallTraits<bool>::ParamType InValue)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (template<> void FTrackInstancePropertyBindings::CallFunction<)",
    "insertText": "UObject(UObject& InRuntimeObject, UObject* PropertyValue)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (template<> bool FTrackInstancePropertyBindings::ResolvePropertyValue<)",
    "insertText": "UObject(const FPropertyAddress& Address, UObject*& OutValue)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (template<> void FTrackInstancePropertyBindings::SetCurrentValue<)",
    "insertText": "UObject(UObject& InRuntimeObject, UObject* InValue)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (const int32 ParmsSize = Setter -> ParmsSize ; void* InputParameter = const_cast<TDecay<T)",
    "insertText": "Type(&InPropertyValue)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* Params = reinterpret_cast<)",
    "insertText": "uint8(InputParameter)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Params = reinterpret_cast<)",
    "insertText": "uint8(FMemory_Alloca(ParmsSize))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFirstProperty = true ;)",
    "insertText": "for(FProperty* Property = Setter->PropertyLink; Property; Property = Property->PropertyLinkNext)"
  },
  {
    "label": "InitializeValue_InContainer()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "InitializeValue_InContainer(Params)"
  }
]