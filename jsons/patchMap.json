[
  {
    "label": "PatchMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchMap"
  },
  {
    "label": "QuadNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadNode"
  },
  {
    "label": "Child",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Child"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "initializeHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeHandles(PatchTable const & patchTable)"
  },
  {
    "label": "initializeQuadtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeQuadtree(PatchTable const & patchTable)"
  },
  {
    "label": "SetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildren(int index)"
  },
  {
    "label": "SetChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChild(int quadrant, int index, bool isLeaf)"
  },
  {
    "label": "assignRootNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignRootNode(QuadNode * node, int index)"
  },
  {
    "label": "transformUVToQuadQuadrant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "transformUVToQuadQuadrant(T const & median, T & u, T & v)"
  },
  {
    "label": "transformUVToTriQuadrant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "transformUVToTriQuadrant(T const & median, T & u, T & v, bool & rotated)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (face)",
    "insertText": "assert(node->children[quadrant].isSet)"
  }
]