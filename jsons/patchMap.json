[
  {
    "label": "PatchMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchMap"
  },
  {
    "label": "QuadNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadNode"
  },
  {
    "label": "Child",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Child"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PatchMap()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_PATCH_MAP_H # define OPENSUBDIV3_FAR_PATCH_MAP_H # include \" . . / version . h \" # include \" . . / far / patchTable . h \" # include<cassert> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchMap { public : typedef PatchTable::PatchHandle Handle ;)",
    "insertText": "PatchMap(PatchTable const & patchTable)"
  },
  {
    "label": "FindPatch()",
    "kind": "Method",
    "detail": "Function (Handle const*)",
    "insertText": "FindPatch(int patchFaceId, double u, double v)"
  },
  {
    "label": "initializeHandles()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "initializeHandles(PatchTable const & patchTable)"
  },
  {
    "label": "initializeQuadtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeQuadtree(PatchTable const & patchTable)"
  },
  {
    "label": "QuadNode()",
    "kind": "Method",
    "detail": "Function (private : struct QuadNode {)",
    "insertText": "QuadNode()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(QuadNode))"
  },
  {
    "label": "SetChildren()",
    "kind": "Method",
    "detail": "Function (} struct Child { unsigned int isSet : 1 ; unsigned int isLeaf : 1 ; unsigned int index : 3 0 ; } ; void)",
    "insertText": "SetChildren(int index)"
  },
  {
    "label": "SetChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChild(int quadrant, int index, bool isLeaf)"
  },
  {
    "label": "assignRootNode()",
    "kind": "Method",
    "detail": "Function (Child children [ 4 ] ; } ; typedef std::vector<QuadNode> QuadTree ; void)",
    "insertText": "assignRootNode(QuadNode * node, int index)"
  },
  {
    "label": "assignLeafOrChildNode()",
    "kind": "Method",
    "detail": "Function (QuadNode*)",
    "insertText": "assignLeafOrChildNode(QuadNode * node, bool isLeaf, int quad, int index)"
  },
  {
    "label": "transformUVToQuadQuadrant()",
    "kind": "Method",
    "detail": "Function (template<class T> int)",
    "insertText": "transformUVToQuadQuadrant(T const & median, T & u, T & v)"
  },
  {
    "label": "transformUVToTriQuadrant()",
    "kind": "Method",
    "detail": "Function (template<class T> int)",
    "insertText": "transformUVToTriQuadrant(T const & median, T & u, T & v, bool & rotated)"
  },
  {
    "label": "uHalf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "uHalf(u >= median)"
  },
  {
    "label": "vHalf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vHalf(v >= median)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u - = median ; return 1 ; })",
    "insertText": "if(v >= median)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (v - = median ; return 2 ; })",
    "insertText": "if((u + v) >= median)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (rotated = true ; return 3 ; } return 0 ; } else {)",
    "insertText": "if(u < median)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (v - = median ; return 1 ; })",
    "insertText": "if(v < median)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u - = median ; return 2 ; } u - = median ; v - = median ;)",
    "insertText": "if((u + v) < median)"
  },
  {
    "label": "FindPatch()",
    "kind": "Method",
    "detail": "Function (rotated = false ; return 3 ; } return 0 ; } } PatchMap::Handle const*)",
    "insertText": "FindPatch(int faceid, double u, double v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QuadNode const* node =& _quadtree [ faceid - _minPatchFace ] ;)",
    "insertText": "if(!node->children[0].isSet)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((u>=0.0) && (u<=1.0) && (v>=0.0) && (v<=1.0))"
  },
  {
    "label": "transformUVToTriQuadrant()",
    "kind": "Method",
    "detail": "Function (int quadrant = _patchesAreTriangular ?)",
    "insertText": "transformUVToTriQuadrant(median, u, v, triRotated) : transformUVToQuadQuadrant(median, u, v)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(node->children[quadrant].isSet)"
  }
]