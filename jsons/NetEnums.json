[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" NetEnums . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NetDriverAlreadyExists,NetDriverCreateFailure,NetDriverListenFailure,ConnectionLost,ConnectionTimeout,FailureReceived,OutdatedClient,OutdatedServer,PendingConnectionFailure,NetGuidMismatch,NetChecksumMismatch } ; } namespace ENetworkFailure { const TCHAR*)",
    "insertText": "ToString(ENetworkFailure::Type FailureType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown ENetworkFailure error occurred.\")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Default,Generic,Iris,} ; namespace ESecurityEvent { enum Type { Malformed_Packet = 0,Invalid_Data = 1,Closed = 2 } ; const TCHAR*)",
    "insertText": "ToString(const ESecurityEvent::Type EnumVal)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Invalid_Data : { return)",
    "insertText": "TEXT(\"Invalid_Data\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Closed : { return)",
    "insertText": "TEXT(\"Closed\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # endif namespace UE::Net { enum class ENetRefHandleError : uint32 { None = 0 x00,BitstreamCorrupted = 0 x01,ReplicationDisabled = 0 x02,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetRefHandleError)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ENetRefHandleError NetRefHandleError)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"missing\")"
  }
]