[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FRichTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRichTextLayoutMarshaller"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "IRichTextMarkupParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRichTextMarkupParser"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SRichTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRichTextBlock"
  },
  {
    "label": "ITextDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextDecorator"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" SlateGlobals . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / Text / TextLayout . h \" # include \" Framework / Text / SlateHyperlinkRun . h \" # include \" Framework / Text / ITextDecorator . h \" # include \" Framework / Text / TextDecorators . h \" # include \" Framework / Text / SlateTextLayoutFactory . h \" class FArrangedChildren ; class FPaintArgs ; class FRichTextLayoutMarshaller ; class FSlateWindowElementList ; class FSlateTextBlockLayout ; class IRichTextMarkupParser ; enum class ETextShapingMethod : uint8 ; # if WITH_FANCY_TEXT class SRichTextBlock : public SWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRichTextBlock ) : _Text() , _HighlightText() , _WrapTextAt( 0.0f ) , _AutoWrapText(false) , _WrappingPolicy(ETextWrappingPolicy::DefaultWrapping) , _TransformPolicy(ETextTransformPolicy::None) , _Marshaller() , _DecoratorStyleSet( &FCoreStyle::Get() ) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>( \"NormalText\" ) ) , _Margin( FMargin() ) , _LineHeightPercentage( 1.0f ) , _ApplyLineHeightToBottomLine( true ) , _Justification( ETextJustify::Left ) , _TextShapingMethod() , _TextFlowDirection() , _Decorators() , _Parser() , _OverflowPolicy() , _MinDesiredWidth()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::OnDemand ; })",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_ATTRIBUTE( FText, HighlightText ) SLATE_ATTRIBUTE( float, WrapTextAt ) SLATE_ATTRIBUTE( bool, AutoWrapText ) SLATE_ATTRIBUTE( ETextWrappingPolicy, WrappingPolicy ) SLATE_ATTRIBUTE( ETextTransformPolicy, TransformPolicy ) SLATE_ARGUMENT(TSharedPtr<class FRichTextLayoutMarshaller>, Marshaller) SLATE_EVENT(FCreateSlateTextLayout, CreateSlateTextLayout) SLATE_ARGUMENT( const ISlateStyle*, DecoratorStyleSet ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle ) SLATE_ATTRIBUTE( FMargin, Margin ) SLATE_ATTRIBUTE( float, LineHeightPercentage ) SLATE_ATTRIBUTE( bool, ApplyLineHeightToBottomLine ) SLATE_ATTRIBUTE( ETextJustify::Type, Justification ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_ARGUMENT( TArray< TSharedRef< class ITextDecorator > >, Decorators ) SLATE_ARGUMENT( TSharedPtr< class IRichTextMarkupParser >, Parser ) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_ATTRIBUTE(float, MinDesiredWidth)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SRichTextBlock::FArguments&)",
    "insertText": "operator(const TSharedRef< ITextDecorator >& DecoratorToAdd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InlineDecorators .)",
    "insertText": "Add(DecoratorToAdd)"
  },
  {
    "label": "WidgetDecorator()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> TSharedRef<ITextDecorator>)",
    "insertText": "WidgetDecorator(const FString RunName, UserClass* InUserObjectPtr, typename FWidgetDecorator::FCreateWidget::TConstMethodPtr< UserClass > InFunc)"
  },
  {
    "label": "ImageDecorator()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITextDecorator>)",
    "insertText": "ImageDecorator(FString RunName = TEXT(\"img\"), const ISlateStyle* const OverrideStyle = NULL)"
  },
  {
    "label": "HyperlinkDecorator()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITextDecorator>)",
    "insertText": "HyperlinkDecorator(const FString Id, const FSlateHyperlinkRun::FOnClick& NavigateDelegate)"
  },
  {
    "label": "HyperlinkDecorator()",
    "kind": "Method",
    "detail": "Function (} template<class UserClass> TSharedRef<ITextDecorator>)",
    "insertText": "HyperlinkDecorator(const FString Id, UserClass* InUserObjectPtr, typename FSlateHyperlinkRun::FOnClick::TMethodPtr< UserClass > NavigateFunc)"
  },
  {
    "label": "SRichTextBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SRichTextBlock()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetText()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetText(const TAttribute<FText>& InTextAttr)"
  },
  {
    "label": "SetHighlightText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightText(const TAttribute<FText>& InHighlightText)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(const TAttribute<bool>& InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetTransformPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformPolicy(const TAttribute<ETextTransformPolicy>& InTransformPolicy)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(const TAttribute<float>& InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(const TAttribute<bool>& InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(const TAttribute<FMargin>& InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredWidth(const TAttribute<float>& InMinDesiredWidth)"
  },
  {
    "label": "SetDecoratorStyleSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecoratorStyleSet(const ISlateStyle* NewDecoratorStyleSet)"
  },
  {
    "label": "SetDecorators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecorators(TArrayView<TSharedRef<ITextDecorator>> InDecorators)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetTextBlockScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBlockScale(const float NewTextBlockScale)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  }
]