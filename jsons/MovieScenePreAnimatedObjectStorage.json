[
  {
    "label": "FBoundObjectPreAnimatedStateTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoundObjectPreAnimatedStateTraits"
  },
  {
    "label": "TPreAnimatedStateStorage_ObjectTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedStateStorage_ObjectTraits"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Evaluation / PreAnimatedState / MovieSceneRestoreStateParams . h \" # include \" Evaluation / PreAnimatedState / IMovieScenePreAnimatedStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedObjectGroupManager . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedCaptureSources . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" namespace UE { namespace MovieScene { struct FBoundObjectPreAnimatedStateTraits : FPreAnimatedStateTraits { enum { NeedsInitialize = true,SupportsGrouping = true,SupportsReplaceObject = true } ; void)",
    "insertText": "Initialize(FPreAnimatedStorageID InStorageID, FPreAnimatedStateExtension* InParentExtension)"
  },
  {
    "label": "FindGroup()",
    "kind": "Method",
    "detail": "Function (template<. . . T> FPreAnimatedStorageGroupHandle)",
    "insertText": "FindGroup(UObject* BoundObject, T&&... Unused)"
  },
  {
    "label": "FindGroup()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> FPreAnimatedStorageGroupHandle)",
    "insertText": "FindGroup(const FObjectComponent& BoundObject, T&&... Unused)"
  },
  {
    "label": "MakeGroup()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> FPreAnimatedStorageGroupHandle)",
    "insertText": "MakeGroup(UObject* BoundObject, T&&... Unused)"
  },
  {
    "label": "MakeGroup()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> FPreAnimatedStorageGroupHandle)",
    "insertText": "MakeGroup(const FObjectComponent& BoundObject, T&&... Unused)"
  },
  {
    "label": "FindGroupImpl()",
    "kind": "Method",
    "detail": "Function (} FPreAnimatedStorageGroupHandle)",
    "insertText": "FindGroupImpl(UObject* BoundObject)"
  },
  {
    "label": "FindGroupImpl()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageGroupHandle)",
    "insertText": "FindGroupImpl(const FObjectComponent& BoundObject)"
  },
  {
    "label": "MakeGroupImpl()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageGroupHandle)",
    "insertText": "MakeGroupImpl(UObject* BoundObject)"
  },
  {
    "label": "MakeGroupImpl()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageGroupHandle)",
    "insertText": "MakeGroupImpl(const FObjectComponent& BoundObject)"
  },
  {
    "label": "ReplaceObject()",
    "kind": "Method",
    "detail": "Function (template<. . . T> void)",
    "insertText": "ReplaceObject(TTuple<FObjectKey, T...>& InOutKey, const FObjectKey& NewObject)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (InOutKey . template)",
    "insertText": "Get()"
  },
  {
    "label": "ReplaceObject()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "ReplaceObject(KeyType& InOutKey, const FObjectKey& NewObject)"
  },
  {
    "label": "ReplaceObject()",
    "kind": "Method",
    "detail": "Function (InOutKey . Object = NewObject ; } template<ObjectType> void)",
    "insertText": "ReplaceObject(TObjectKey<ObjectType>& InOutKey, const FObjectKey& NewObject)"
  },
  {
    "label": "ReplaceObject()",
    "kind": "Method",
    "detail": "Function (InOutKey = CastResult ; } } void)",
    "insertText": "ReplaceObject(FObjectKey& InOutKey, const FObjectKey& NewObject)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (InOutKey = NewObject ; } TSharedPtr<FPreAnimatedObjectGroupManager> ObjectGroupManager ; } ; template<ObjectTraits> struct TPreAnimatedStateStorage_ObjectTraits : TPreAnimatedStateStorage<ObjectTraits>,IPreAnimatedObjectEntityStorage { using KeyType = ObjectTraits::KeyType ; using StorageType = ObjectTraits::StorageType ;)",
    "insertText": "static_assert(ObjectTraits::SupportsGrouping, \"Pre-animated object state storage should support grouping by object\")"
  },
  {
    "label": "TPreAnimatedStateStorage_ObjectTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPreAnimatedStateStorage_ObjectTraits()"
  },
  {
    "label": "AsObjectStorage()",
    "kind": "Method",
    "detail": "Function (} public : IPreAnimatedObjectEntityStorage*)",
    "insertText": "AsObjectStorage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Params . Num ; const bool bWantsRestore = Params . bWantsRestoreState ;)",
    "insertText": "if(!this->ParentExtension->IsCapturingGlobalState() && !bWantsRestore)"
  },
  {
    "label": "MakeGroup()",
    "kind": "Method",
    "detail": "Function (UObject* BoundObject = BoundObjects [ Index ] ; KeyType Key { BoundObject } ; FPreAnimatedStorageGroupHandle GroupHandle = this -> Traits .)",
    "insertText": "MakeGroup(BoundObject)"
  },
  {
    "label": "GetOrCreateStorageIndex()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageIndex StorageIndex = this ->)",
    "insertText": "GetOrCreateStorageIndex(Key)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStateEntry Entry { GroupHandle,FPreAnimatedStateCachedValueHandle { this -> StorageID,StorageIndex } } ; EntityMetaData ->)",
    "insertText": "BeginTrackingEntity(Entry, EntityIDs[Index], InstanceHandles[Index], bWantsRestore)"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (} } FPreAnimatedStateEntry)",
    "insertText": "MakeEntry(UObject* BoundObject)"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStateEntry Entry =)",
    "insertText": "MakeEntry(BoundObject)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (EntityMetaData ->)",
    "insertText": "BeginTrackingEntity(Entry, EntityID, RootInstanceHandle, bWantsRestoreState)"
  },
  {
    "label": "CachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CachePreAnimatedValues(const FCachePreAnimatedValueParams& Params, TArrayView<UObject* const> BoundObjects)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValue(Params, BoundObject)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CachePreAnimatedValue(const FCachePreAnimatedValueParams& Params, UObject* BoundObject, EPreAnimatedCaptureSourceTracking TrackingMode = EPreAnimatedCaptureSourceTracking::CacheIfTracked)"
  },
  {
    "label": "TrackCaptureSource()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "TrackCaptureSource(Entry, TrackingMode)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValue(Params, Entry, BoundObject)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CachePreAnimatedValue(const FCachePreAnimatedValueParams& Params, const FPreAnimatedStateEntry& Entry, UObject* BoundObject)"
  },
  {
    "label": "GetStorageRequirement()",
    "kind": "Method",
    "detail": "Function (const FPreAnimatedStorageIndex StorageIndex = Entry . ValueHandle . StorageIndex ; EPreAnimatedStorageRequirement StorageRequirement = this -> ParentExtension ->)",
    "insertText": "GetStorageRequirement(Entry)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (StorageType NewValue = this -> Traits .)",
    "insertText": "CachePreAnimatedValue(BoundObject)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AssignPreAnimatedValue(StorageIndex, StorageRequirement, MoveTemp(NewValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Params.bForcePersist)"
  },
  {
    "label": "ForciblyPersistStorage()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ForciblyPersistStorage(StorageIndex)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} } template<OnCacheValue> void)",
    "insertText": "CachePreAnimatedValue(const FCachePreAnimatedValueParams& Params, UObject* BoundObject, OnCacheValue&& CacheCallback, EPreAnimatedCaptureSourceTracking TrackingMode = EPreAnimatedCaptureSourceTracking::CacheIfTracked)"
  },
  {
    "label": "CacheCallback()",
    "kind": "Method",
    "detail": "Function (KeyType Key { BoundObject } ; StorageType NewValue =)",
    "insertText": "CacheCallback(Key)"
  }
]