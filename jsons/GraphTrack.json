[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FGraphTrackBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphTrackBuilder"
  },
  {
    "label": "ShowDebugInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / ViewModels / BaseTimingTrack . h \" # include \" Insights / ViewModels / GraphSeries . h \" class FMenuBuilder ; struct FSlateBrush ; class FTimingTrackViewport ; enum class EGraphOptions { None = 0,)",
    "insertText": "ShowDebugInfo(1 << 0), ShowPoints = (1 << 1), ShowPointsWithBorder = (1 << 2), ShowLines = (1 << 3), ShowPolygon = (1 << 4), UseEventDuration = (1 << 5), ShowBars = (1 << 6), ShowBaseline = (1 << 7), ShowVerticalAxisGrid = (1 << 8), ShowHeader = (1 << 9), FirstCustomOption = (1 << 10)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EGraphOptions)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (class FGraphTrack : public FBaseTimingTrack { class FGraphTrackBuilder ;)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FGraphTrack, FBaseTimingTrack)"
  },
  {
    "label": "FGraphTrack()",
    "kind": "Method",
    "detail": "Function (double PointSizeX = 3 . 0 f ; float PointSizeY = 3 . 0 f ; public :)",
    "insertText": "FGraphTrack()"
  },
  {
    "label": "FGraphTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphTrack(const FString& InName)"
  },
  {
    "label": "GetEnabledOptions()",
    "kind": "Method",
    "detail": "Function (EGraphOptions)",
    "insertText": "GetEnabledOptions()"
  },
  {
    "label": "AreAllOptionsEnabled()",
    "kind": "Method",
    "detail": "Function (EnabledOptions = Options ; } bool)",
    "insertText": "AreAllOptionsEnabled(EGraphOptions Options)"
  },
  {
    "label": "IsAnyOptionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnyOptionEnabled(EGraphOptions Options)"
  },
  {
    "label": "EnableOptions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableOptions(EGraphOptions Options)"
  },
  {
    "label": "DisableOptions()",
    "kind": "Method",
    "detail": "Function (EnabledOptions | = Options ; } void)",
    "insertText": "DisableOptions(EGraphOptions Options)"
  },
  {
    "label": "ToggleOptions()",
    "kind": "Method",
    "detail": "Function (EnabledOptions& = ~ Options ; } void)",
    "insertText": "ToggleOptions(EGraphOptions Options)"
  },
  {
    "label": "GetVisibleOptions()",
    "kind": "Method",
    "detail": "Function (EnabledOptions ^ = Options ; } EGraphOptions)",
    "insertText": "GetVisibleOptions()"
  },
  {
    "label": "GetEditableOptions()",
    "kind": "Method",
    "detail": "Function (VisibleOptions = Options ; } EGraphOptions)",
    "insertText": "GetEditableOptions()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (EditableOptions = Options ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PreDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "DrawEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEvent(const ITimingTrackDrawContext& Context, const ITimingEvent& InTimingEvent, EDrawEventMode InDrawMode)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(float InPosX, float InPosY, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetSeries()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FGraphSeries>>&)",
    "insertText": "GetSeries()"
  },
  {
    "label": "DrawSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSeries(const FGraphSeries& Series, UE::Insights::FDrawContext& DrawContext, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "DrawVerticalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVerticalAxisGrid(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "DrawHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHeader(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "GetBorderY()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBorderY()"
  },
  {
    "label": "ContextMenu_ToggleOption_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ToggleOption_Execute(EGraphOptions Option)"
  },
  {
    "label": "ContextMenu_ToggleOption_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ToggleOption_IsChecked(EGraphOptions Option)"
  },
  {
    "label": "ContextMenu_ShowPointsWithBorder_CanExecute()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ContextMenu_ShowPointsWithBorder_CanExecute()"
  },
  {
    "label": "ContextMenu_UseEventDuration_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_UseEventDuration_CanExecute()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TSharedPtr<FGraphSeries>> AllSeries ; const FSlateBrush* WhiteBrush ; const FSlateBrush* PointBrush ; const FSlateBrush* BorderBrush ; const FSlateFontInfo Font ; EGraphOptions EnabledOptions ; EGraphOptions VisibleOptions ; EGraphOptions EditableOptions ; FGraphValueViewport SharedValueViewport ; double TimeScaleX ; int32 NumAddedEvents ; int32 NumDrawPoints ; int32 NumDrawLines ; int32 NumDrawBoxes ; } ; class FRandomGraphTrack : public FGraphTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FRandomGraphTrack, FGraphTrack) public: FRandomGraphTrack()"
  },
  {
    "label": "FRandomGraphTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRandomGraphTrack()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "AddDefaultSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultSeries()"
  },
  {
    "label": "GenerateSeries()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GenerateSeries(FGraphSeries& Series, const FTimingTrackViewport& Viewport, const int32 EventCount, int32 Seed)"
  }
]