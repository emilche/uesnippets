[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TManagedArrayAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TManagedArrayAccessor"
  },
  {
    "label": "TManagedArrayAccessor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GeometryCollection / ManagedArrayCollection . h \" namespace ManageArrayAccessor { enum class EPersistencePolicy : uint8 { KeepExistingPersistence,MakePersistent } ; } ; template<T> struct TManagedArrayAccessor { public :)",
    "insertText": "TManagedArrayAccessor(FManagedArrayCollection& InCollection, const FName& InAttributeName, const FName& InAttributeGroup, const FName& InGroupDependency = NAME_None) : ConstCollection(InCollection) , Collection(&InCollection) , Name(InAttributeName) , Group(InAttributeGroup) , GroupDependency(InGroupDependency) , AttributeArray(InCollection.FindAttributeTyped<T>(InAttributeName, InAttributeGroup)) , ConstAttributeArray(AttributeArray)"
  },
  {
    "label": "TManagedArrayAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArrayAccessor(const FManagedArrayCollection& InCollection, const FName& InAttributeName, const FName& InAttributeGroup, const FName& InGroupDependency = NAME_None) : ConstCollection(InCollection) , Collection(nullptr) , Name(InAttributeName) , Group(InAttributeGroup) , GroupDependency(InGroupDependency) , AttributeArray(nullptr) , ConstAttributeArray(InCollection.FindAttributeTyped<T>(InAttributeName, InAttributeGroup))"
  },
  {
    "label": "GetConstCollection()",
    "kind": "Method",
    "detail": "Function (} const FManagedArrayCollection&)",
    "insertText": "GetConstCollection()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddElements(int32 NumElements)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<T>&)",
    "insertText": "Get()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (AttributeArray ->)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<T>&)",
    "insertText": "Add(ManageArrayAccessor::EPersistencePolicy PersistencePolicy = ManageArrayAccessor::EPersistencePolicy::MakePersistent, FName InGroupDependency = FName(NAME_None))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Collection->HasGroup(Group))"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "AddGroup(Group)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FName LocalGroupDependency = GroupDependency ;)",
    "insertText": "if(!InGroupDependency.IsNone())"
  },
  {
    "label": "bSaved()",
    "kind": "Method",
    "detail": "Function (LocalGroupDependency = InGroupDependency ; } bool)",
    "insertText": "bSaved(PersistencePolicy == ManageArrayAccessor::EPersistencePolicy::MakePersistent)"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (FManagedArrayCollection::FConstructionParameters)",
    "insertText": "Params(LocalGroupDependency, bSaved)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (ConstAttributeArray = AttributeArray =& Collection -> AddAttribute<)",
    "insertText": "T(Name, Group, Params)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(PersistencePolicy, InGroupDependency)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (AttributeArray ->)",
    "insertText": "Fill(Value)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Fill(const T& Value)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Copy(const TManagedArrayAccessor<T>& FromAttribute)"
  },
  {
    "label": "CopyAttribute()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "CopyAttribute(FromAttribute.ConstCollection, FromAttribute.Name, Name, Group)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AttributeArray = Collection -> FindAttributeTyped<)",
    "insertText": "T(Name, Group)"
  },
  {
    "label": "RemoveAttribute()",
    "kind": "Method",
    "detail": "Function (Collection ->)",
    "insertText": "RemoveAttribute(Name, Group)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ConstAttributeArray = AttributeArray = nullptr ; } int32)",
    "insertText": "Num()"
  }
]