[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "UAnimGraphNode_BlendSpaceGraphBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceGraphBase"
  },
  {
    "label": "FBlendSampleDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSampleDetails"
  },
  {
    "label": "SBlendSpaceGridWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlendSpaceGridWidget"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "FBlendSampleDetails()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IDetailCustomization . h \" # include \" Templates / Function . h \" # include \" DetailWidgetRow . h \" # include \" SAnimationBlendSpaceGridWidget . h \" struct FAssetData ; class FDetailWidgetRow ; class UBlendSpace ; class UAnimGraphNode_BlendSpaceGraphBase ; class FBlendSampleDetails : public IDetailCustomization { public :)",
    "insertText": "FBlendSampleDetails(const class UBlendSpace* InBlendSpace, class SBlendSpaceGridWidget* InGridWidget, int32 InSampleIndex)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance(const class UBlendSpace* InBlendSpace, class SBlendSpaceGridWidget* InGridWidget, int32 InSampleIndex)"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeDetails(class IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "GenerateBlendSampleWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBlendSampleWidget(TFunction<IDetailPropertyRow& (void)>InFunctor, FOnSampleMoved OnSampleMoved, const class UBlendSpace* BlendSpace, const int32 SampleIndex, bool bShowLabel)"
  },
  {
    "label": "GenerateAnimationWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAnimationWidget(IDetailPropertyRow& PropertyRow, const UBlendSpace* BlendSpace, TSharedPtr<IPropertyHandle> AnimationProperty)"
  },
  {
    "label": "GenerateSampleGraphWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSampleGraphWidget(FDetailWidgetRow& Row, UAnimGraphNode_BlendSpaceGraphBase* BlendSpaceNode, int32 SampleIndex)"
  },
  {
    "label": "ShouldFilterAssetStatic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterAssetStatic(const FAssetData& AssetData, const UBlendSpace* BlendSpaceBase)"
  },
  {
    "label": "ShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldFilterAsset(const FAssetData& AssetData)"
  },
  {
    "label": "HandleAnalyzeAndDuplicateSample()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnalyzeAndDuplicateSample()"
  },
  {
    "label": "HandleAnalyzeAndMoveSample()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnalyzeAndMoveSample()"
  },
  {
    "label": "HandleAnalyzeAndMoveSampleX()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnalyzeAndMoveSampleX()"
  },
  {
    "label": "HandleAnalyzeAndMoveSampleY()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnalyzeAndMoveSampleY()"
  }
]