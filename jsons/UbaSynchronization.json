[
  {
    "label": "AtomicU64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AtomicU64"
  },
  {
    "label": "CriticalSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CriticalSection"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Functor"
  },
  {
    "label": "ScopedCriticalSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCriticalSection"
  },
  {
    "label": "ReaderWriterLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReaderWriterLock"
  },
  {
    "label": "ContentionTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentionTracker"
  },
  {
    "label": "ScopedReadLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedReadLock"
  },
  {
    "label": "ScopedWriteLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedWriteLock"
  },
  {
    "label": "ScopeGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopeGuard"
  },
  {
    "label": "STRING_JOIN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBase . h \" # include<atomic> # include<utility> # define UBA_TRACK_CONTENTION 0 # define)",
    "insertText": "STRING_JOIN(arg1, arg2) STRING_JOIN_INNER(arg1, arg2) #define STRING_JOIN_INNER(arg1, arg2)"
  },
  {
    "label": "AtomicU64()",
    "kind": "Method",
    "detail": "Function (template<Type> using Atomic = std::atomic<Type> ; struct AtomicU64 : Atomic<u64> {)",
    "insertText": "AtomicU64(u64 initialValue = 0) : Atomic<u64>(initialValue)"
  },
  {
    "label": "AtomicU64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicU64(AtomicU64&& o) noexcept : Atomic<u64>(o.load())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(u64 o)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store(o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const AtomicU64& o)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (} } ; class CriticalSection { public :)",
    "insertText": "CriticalSection()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Leave()"
  },
  {
    "label": "Scoped()",
    "kind": "Method",
    "detail": "Function (template<class Functor> auto)",
    "insertText": "Scoped(const Functor& f)"
  },
  {
    "label": "CriticalSection()",
    "kind": "Method",
    "detail": "Function (private : # if PLATFORM_WINDOWS u64 data [ 5 ] ; # else u64 data [ 1 0 ] ; # endif)",
    "insertText": "CriticalSection(const CriticalSection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CriticalSection&)",
    "insertText": "operator(const CriticalSection&)"
  },
  {
    "label": "ScopedCriticalSection()",
    "kind": "Method",
    "detail": "Function (} ; class ScopedCriticalSection { public :)",
    "insertText": "ScopedCriticalSection(CriticalSection& cs) : m_cs(cs), m_active(true)"
  },
  {
    "label": "ScopedCriticalSection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedCriticalSection()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (ScopedCriticalSection)",
    "insertText": "c(*this)"
  },
  {
    "label": "ReaderWriterLock()",
    "kind": "Method",
    "detail": "Function (} class ReaderWriterLock { public :)",
    "insertText": "ReaderWriterLock()"
  },
  {
    "label": "EnterRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterRead()"
  },
  {
    "label": "LeaveRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveRead()"
  },
  {
    "label": "EnterWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterWrite()"
  },
  {
    "label": "LeaveWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveWrite()"
  },
  {
    "label": "ReaderWriterLock()",
    "kind": "Method",
    "detail": "Function (private : # if PLATFORM_WINDOWS u64 data [ 1 ] ; # elif PLATFORM_LINUX u64 data [ 7 ] ; # else u64 data [ 2 5 ] ; # endif)",
    "insertText": "ReaderWriterLock(const ReaderWriterLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReaderWriterLock&)",
    "insertText": "operator(const ReaderWriterLock&)"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (} ; # if ! UBA_TRACK_CONTENTION # define)",
    "insertText": "SCOPED_READ_LOCK(readerWriterLock, name) ScopedReadLock name(readerWriterLock)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_WRITE_LOCK(readerWriterLock, name) ScopedWriteLock name(readerWriterLock)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (# else u64)",
    "insertText": "GetTime()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (struct ContentionTracker { void)",
    "insertText": "Add(u64 t)"
  },
  {
    "label": "GetContentionTracker()",
    "kind": "Method",
    "detail": "Function (time + = t ; + + count ; } ; Atomic<u64> time ; Atomic<u64> count ; const char* file ; u64 line ; } ; ContentionTracker&)",
    "insertText": "GetContentionTracker(const char* file, u64 line)"
  },
  {
    "label": "SCOPED_LOCK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_LOCK(readerWriterLock, lockType, name) \\ u64 STRING_JOIN(contentionStart, __LINE__) = GetTime()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ lockType)",
    "insertText": "name(readerWriterLock)"
  },
  {
    "label": "STRING_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ ContentionTracker&)",
    "insertText": "STRING_JOIN(tracker, __LINE__) = GetContentionTracker(__FILE__, __LINE__)"
  },
  {
    "label": "STRING_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "STRING_JOIN(tracker, __LINE__).Add(GetTime() - STRING_JOIN(contentionStart, __LINE__))"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_READ_LOCK(readerWriterLock, name) SCOPED_LOCK(readerWriterLock, ScopedReadLock, name) #define SCOPED_WRITE_LOCK(readerWriterLock, name) SCOPED_LOCK(readerWriterLock, ScopedWriteLock, name)"
  },
  {
    "label": "ScopedReadLock()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedReadLock(ReaderWriterLock& lock) : m_lock(lock)"
  },
  {
    "label": "ScopedReadLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedReadLock()"
  },
  {
    "label": "ScopedWriteLock()",
    "kind": "Method",
    "detail": "Function (} ReaderWriterLock& m_lock ; bool m_active = true ; } ; class ScopedWriteLock { public :)",
    "insertText": "ScopedWriteLock(ReaderWriterLock& lock) : m_lock(lock)"
  },
  {
    "label": "ScopedWriteLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedWriteLock()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} ReaderWriterLock& m_lock ; bool m_active = true ; } ; template<Lambda> struct ScopeGuard { void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (m_called = true ; } auto)",
    "insertText": "Execute()"
  },
  {
    "label": "m_lambda()",
    "kind": "Method",
    "detail": "Function (m_called = true ; return)",
    "insertText": "m_lambda()"
  },
  {
    "label": "ScopeGuard()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopeGuard(Lambda lambda) : m_lambda(lambda)"
  },
  {
    "label": "ScopeGuard()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopeGuard(ScopeGuard&& o)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (m_lambda =)",
    "insertText": "move(o.m_lambda)"
  },
  {
    "label": "ScopeGuard()",
    "kind": "Method",
    "detail": "Function (o . m_called = true ; })",
    "insertText": "ScopeGuard()"
  },
  {
    "label": "ScopeGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopeGuard(const ScopeGuard& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const ScopeGuard&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(ScopeGuard&&)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (} private : Lambda m_lambda ; bool m_called = false ; } ; template<Lambda> ScopeGuard<Lambda>)",
    "insertText": "MakeGuard(Lambda&& lambda)"
  }
]