[
  {
    "label": "MainMessageLoopExternalPump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainMessageLoopExternalPump"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_SHARED_BROWSER_MAIN_MESSAGE_LOOP_EXTERNAL_PUMP_H_ # define CEF_TESTS_SHARED_BROWSER_MAIN_MESSAGE_LOOP_EXTERNAL_PUMP_H_ # pragma once # include \" tests / shared / browser / main_message_loop_std . h \" namespace client { class MainMessageLoopExternalPump : public MainMessageLoopStd { public : std::unique_ptr<MainMessageLoopExternalPump>)",
    "insertText": "Create()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (MainMessageLoopExternalPump*)",
    "insertText": "Get()"
  },
  {
    "label": "OnScheduleMessagePumpWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScheduleMessagePumpWork(int64 delay_ms)"
  },
  {
    "label": "MainMessageLoopExternalPump()",
    "kind": "Method",
    "detail": "Function (protected : std::default_delete<MainMessageLoopExternalPump> ;)",
    "insertText": "MainMessageLoopExternalPump()"
  },
  {
    "label": "OnScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScheduleWork(int64 delay_ms)"
  },
  {
    "label": "OnTimerTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimerTimeout()"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimer(int64 delay_ms)"
  },
  {
    "label": "KillTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillTimer()"
  },
  {
    "label": "IsTimerPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerPending()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DoWork()"
  },
  {
    "label": "PerformMessageLoopWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformMessageLoopWork()"
  }
]