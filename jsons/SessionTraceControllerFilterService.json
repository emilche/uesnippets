[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IEventInfoProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEventInfoProvider"
  },
  {
    "label": "FSessionTraceControllerFilterService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionTraceControllerFilterService"
  },
  {
    "label": "FSessionTraceControllerFilterService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ISessionTraceFilterService . h \" # include \" Misc / DateTime . h \" namespace TraceServices { class IAnalysisSession ; typedef uint64 FSessionHandle ; } namespace UE::TraceTools { class IEventInfoProvider ; class FSessionTraceControllerFilterService : public ISessionTraceFilterService { public :)",
    "insertText": "FSessionTraceControllerFilterService(TSharedPtr<ITraceController> InTraceController)"
  },
  {
    "label": "FSessionTraceControllerFilterService()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSessionTraceControllerFilterService()"
  },
  {
    "label": "GetRootObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootObjects(TArray<FTraceObjectInfo>& OutObjects)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (const FTraceObjectInfo*)",
    "insertText": "GetObject(const FString& Name)"
  },
  {
    "label": "GetChannelsUpdateTimestamp()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetChannelsUpdateTimestamp()"
  },
  {
    "label": "SetObjectFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectFilterState(const FString& InObjectName, const bool bFilterState)"
  },
  {
    "label": "UpdateFilterPreset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterPreset(const TSharedPtr<ITraceFilterPreset> InPreset, bool IsEnabled)"
  },
  {
    "label": "HasSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSettings()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (const FTraceStatus::FSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "HasStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStats()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (const FTraceStats&)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetTraceEndpoint()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetTraceEndpoint()"
  },
  {
    "label": "HasAvailableInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAvailableInstance()"
  },
  {
    "label": "OnApplyChannelChanges()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnApplyChannelChanges()"
  },
  {
    "label": "DisableAllChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllChannels()"
  },
  {
    "label": "OnTraceStatusUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceStatusUpdated(const FTraceStatus& InStatus, FTraceStatus::EUpdateType InUpdateType, ITraceControllerCommands& Commands)"
  },
  {
    "label": "UpdateChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChannels(const FTraceStatus& InStatus)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  }
]