[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_BidirectionalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_REVERSE_H # define _LIBCPP___ALGORITHM_REVERSE_H # include<__algorithm / iter_swap . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _BidirectionalIterator> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void __reverse_impl(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "iter_swap(__first, __last)"
  },
  {
    "label": "__reverse_impl()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } } template<class _AlgPolicy,class _RandomAccessIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "__reverse_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)"
  },
  {
    "label": "__reverse()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _BidirectionalIterator,class _Sentinel> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "__reverse(_BidirectionalIterator __first, _Sentinel __last)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _IterCategory = _IterOps<_AlgPolicy>::template __iterator_category<_BidirectionalIterator> ; std::__reverse_impl<)",
    "insertText": "_AlgPolicy(std::move(__first), std::move(__last), _IterCategory())"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} template<class _BidirectionalIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__reverse<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last))"
  }
]