[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FAerofoilConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { enum class EAerofoilType : uint8 { Fixed = 0,Wing,Rudder,Elevator } ; struct FAerofoilConfig {)",
    "insertText": "FAerofoilConfig() : Offset(FVector(0.f, 0.f, 0.0f)) , UpAxis(FVector(0.f, 0.f, 1.f)) , Area(5.0f) , Camber(3.0f) , MaxControlAngle(1.f) , StallAngle(16.0f) , MaxCeiling(1E30) , MinCeiling(-1E30) , Type(EAerofoilType::Fixed) , LiftMultiplier(1.0f) , DragMultiplier(1.0f)"
  },
  {
    "label": "FAerofoil()",
    "kind": "Method",
    "detail": "Function (} FVector Offset ; FVector UpAxis ; float Area ; float Camber ; float MaxControlAngle ; float StallAngle ; float MaxCeiling ; float MinCeiling ; EAerofoilType Type ; float LiftMultiplier ; float DragMultiplier ; } ; class FAerofoil : public TVehicleSystem<FAerofoilConfig> { public :)",
    "insertText": "FAerofoil()"
  },
  {
    "label": "FAerofoil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAerofoil(const FAerofoilConfig* SetupIn)"
  },
  {
    "label": "SetAerofoilId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAerofoilId(int Id)"
  },
  {
    "label": "SetControlSurface()",
    "kind": "Method",
    "detail": "Function (AerofoilId = Id ; } void)",
    "insertText": "SetControlSurface(float CtrlSurfaceInput)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (ControlSurfaceAngle = CtrlSurfaceInput*)",
    "insertText": "Setup()"
  },
  {
    "label": "SetDensityOfMedium()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDensityOfMedium(float InDensity)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (CurrentAirDensity = InDensity ; } FVector)",
    "insertText": "GetAxis()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetOffset()"
  },
  {
    "label": "GetCenterOfLiftOffset()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetCenterOfLiftOffset()"
  },
  {
    "label": "GetForce()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetForce(FTransform& BodyTransform, const FVector& v, float Altitude, float DeltaTime)"
  },
  {
    "label": "CalcDynamicPressure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcDynamicPressure(float VelocitySqr, float InAltitude)"
  },
  {
    "label": "CalcCentreOfLift()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcCentreOfLift()"
  },
  {
    "label": "CalcDragCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcDragCoefficient(float InAngleOfAttack, float InControlSurfaceAngle)"
  },
  {
    "label": "CalcLiftCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLiftCoefficient(float InAngleOfAttack, float InControlSurfaceAngle)"
  },
  {
    "label": "CalcAngleOfAttackDegrees()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcAngleOfAttackDegrees(const FVector& UpAxis, const FVector& InAirflowVector)"
  }
]