[
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "FStaticMeshVertexDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshVertexDataInterface"
  },
  {
    "label": "FStaticMeshDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshDataType"
  },
  {
    "label": "TStaticMeshVertexTangentDatum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticMeshVertexTangentDatum"
  },
  {
    "label": "TStaticMeshVertexUVsDatum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticMeshVertexUVsDatum"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TStaticMeshVertexTangentTypeSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticMeshVertexTangentTypeSelector"
  },
  {
    "label": "TStaticMeshVertexUVsTypeSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticMeshVertexUVsTypeSelector"
  },
  {
    "label": "FStaticMeshVertexBufferFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexBufferFlags"
  },
  {
    "label": "FStaticMeshVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshVertexBuffer"
  },
  {
    "label": "FTangentsVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTangentsVertexBuffer"
  },
  {
    "label": "FTexcoordVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexcoordVertexBuffer"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" RenderUtils . h \" # include \" StaticMeshVertexData . h \" # include \" PackedNormal . h \" # include \" Components . h \" # include \" Math / Vector2DHalf . h \" # include \" RenderMath . h \" class FVertexFactory ; class FStaticMeshVertexDataInterface ; class FVertexFactory ; struct FStaticMeshDataType ; template<TangentTypeT> struct TStaticMeshVertexTangentDatum { TangentTypeT TangentX ; TangentTypeT TangentZ ; FVector3f)",
    "insertText": "GetTangentX()"
  },
  {
    "label": "GetTangentZ()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "GetTangentZ()"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetTangentY()"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTangents(FVector3f X, FVector3f Y, FVector3f Z)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (TangentX = X ; TangentZ =)",
    "insertText": "FVector4f(Z.X, Z.Y, Z.Z, GetBasisDeterminantSign(FVector3d(X), FVector3d(Y), FVector3d(Z)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TStaticMeshVertexTangentDatum& Vertex)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (Ar<<Vertex . TangentX ; Ar<<Vertex . TangentZ ; return Ar ; } } ; template<UVTypeT> struct TStaticMeshVertexUVsDatum { UVTypeT UVs ; FVector2f)",
    "insertText": "GetUV()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UVs = UV ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, TStaticMeshVertexUVsDatum& Vertex)"
  },
  {
    "label": "FStaticMeshVertexBuffer()",
    "kind": "Method",
    "detail": "Function (Ar<<Vertex . UVs ; return Ar ; } } ; enum class EStaticMeshVertexTangentBasisType { Default,HighPrecision,} ; enum class EStaticMeshVertexUVType { Default,HighPrecision,} ; template<EStaticMeshVertexTangentBasisType TangentBasisType> struct TStaticMeshVertexTangentTypeSelector { } ; template<> struct TStaticMeshVertexTangentTypeSelector<EStaticMeshVertexTangentBasisType::Default> { typedef FPackedNormal TangentTypeT ; const EVertexElementType VertexElementType = VET_PackedNormal ; } ; template<> struct TStaticMeshVertexTangentTypeSelector<EStaticMeshVertexTangentBasisType::HighPrecision> { typedef FPackedRGBA16N TangentTypeT ; const EVertexElementType VertexElementType = VET_Short4N ; } ; template<EStaticMeshVertexUVType UVType> struct TStaticMeshVertexUVsTypeSelector { } ; template<> struct TStaticMeshVertexUVsTypeSelector<EStaticMeshVertexUVType::Default> { typedef FVector2DHalf UVsTypeT ; } ; template<> struct TStaticMeshVertexUVsTypeSelector<EStaticMeshVertexUVType::HighPrecision> { typedef FVector2f UVsTypeT ; } ; struct FStaticMeshVertexBufferFlags { bool bNeedsCPUAccess = true ; bool bUseBackwardsCompatibleF16TruncUVs = false ; } ; class FStaticMeshVertexBuffer : public FRenderResource { class FStaticMeshVertexBuffer ; public :)",
    "insertText": "FStaticMeshVertexBuffer()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 InNumVertices, uint32 InNumTexCoords, bool bNeedsCPUAccess = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const TArray<FStaticMeshBuildVertex>& InVertices, uint32 InNumTexCoords, const FStaticMeshVertexBufferFlags & InInitFlags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FConstMeshBuildVertexView& InVertices, const FStaticMeshVertexBufferFlags& InInitFlags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FConstMeshBuildVertexView& InVertices, bool bNeedsCPUAccess = true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FStaticMeshVertexBufferFlags Flags ; Flags . bNeedsCPUAccess = bNeedsCPUAccess ;)",
    "insertText": "Init(InVertices, Flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const TArray<FStaticMeshBuildVertex>& InVertices, uint32 InNumTexCoords, bool bNeedsCPUAccess = true)"
  },
  {
    "label": "MakeConstMeshBuildVertexView()",
    "kind": "Method",
    "detail": "Function (FConstMeshBuildVertexView VertexView =)",
    "insertText": "MakeConstMeshBuildVertexView(InVertices)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FStaticMeshVertexBufferFlags Flags ; Flags . bNeedsCPUAccess = bNeedsCPUAccess ;)",
    "insertText": "Init(VertexView, Flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FStaticMeshVertexBuffer& InVertexBuffer, bool bNeedsCPUAccess = true)"
  },
  {
    "label": "AppendVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendVertices(const FStaticMeshBuildVertex* Vertices, const uint32 NumVerticesToAppend, bool bUseBackwardsCompatibleF16TruncUVs = false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, bool bNeedsCPUAccess)"
  },
  {
    "label": "SerializeMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeMetaData(FArchive& Ar)"
  },
  {
    "label": "ClearMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMetaData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FStaticMeshVertexBuffer &Other)"
  },
  {
    "label": "VertexTangentX_Typed()",
    "kind": "Method",
    "detail": "Function (template<EStaticMeshVertexTangentBasisType TangentBasisTypeT> FVector4f)",
    "insertText": "VertexTangentX_Typed(uint32 VertexIndex)"
  },
  {
    "label": "TangentType()",
    "kind": "Method",
    "detail": "Function (typedef TStaticMeshVertexTangentDatum<TStaticMeshVertexTangentTypeSelector<TangentBasisTypeT>::TangentTypeT> TangentType ; TangentType* ElementData = reinterpret_cast<)",
    "insertText": "TangentType(TangentsDataPtr)"
  },
  {
    "label": "VertexTangentX()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "VertexTangentX(uint32 VertexIndex)"
  },
  {
    "label": "Default()",
    "kind": "Method",
    "detail": "Function (} else { return VertexTangentX_Typed<)",
    "insertText": "Default(VertexIndex)"
  },
  {
    "label": "VertexTangentZ_Typed()",
    "kind": "Method",
    "detail": "Function (} } template<EStaticMeshVertexTangentBasisType TangentBasisTypeT> FVector4f)",
    "insertText": "VertexTangentZ_Typed(uint32 VertexIndex)"
  },
  {
    "label": "VertexTangentZ()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "VertexTangentZ(uint32 VertexIndex)"
  },
  {
    "label": "VertexTangentY_Typed()",
    "kind": "Method",
    "detail": "Function (} } template<EStaticMeshVertexTangentBasisType TangentBasisTypeT> FVector4f)",
    "insertText": "VertexTangentY_Typed(uint32 VertexIndex)"
  },
  {
    "label": "VertexTangentY()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "VertexTangentY(uint32 VertexIndex)"
  },
  {
    "label": "SetVertexTangents()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetVertexTangents(uint32 VertexIndex, FVector3f X, FVector3f Y, FVector3f Z)"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (ElementData [ VertexIndex ] .)",
    "insertText": "SetTangents(X, Y, Z)"
  },
  {
    "label": "SetVertexUV()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetVertexUV(uint32 VertexIndex, uint32 UVIndex, const FVector2f& Vec2D, bool bUseBackwardsCompatibleF16TruncUVs = false)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t UvStride =)",
    "insertText": "sizeof(FVector2f) * GetNumTexCoords()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (FVector2f* ElementData = reinterpret_cast<)",
    "insertText": "FVector2f(TexcoordDataPtr + (VertexIndex * UvStride))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (ElementData [ UVIndex ] = Vec2D ; } else { size_t UvStride =)",
    "insertText": "sizeof(FVector2DHalf) * GetNumTexCoords()"
  },
  {
    "label": "FVector2DHalf()",
    "kind": "Method",
    "detail": "Function (FVector2DHalf* ElementData = reinterpret_cast<)",
    "insertText": "FVector2DHalf(TexcoordDataPtr + (VertexIndex * UvStride))"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (ElementData [ UVIndex ] .)",
    "insertText": "SetTruncate(Vec2D)"
  },
  {
    "label": "GetVertexUV_Typed()",
    "kind": "Method",
    "detail": "Function (} else { ElementData [ UVIndex ] = Vec2D ; } } } template<EStaticMeshVertexUVType UVTypeT> FVector2f)",
    "insertText": "GetVertexUV_Typed(uint32 VertexIndex, uint32 UVIndex)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef TStaticMeshVertexUVsDatum<TStaticMeshVertexUVsTypeSelector<UVTypeT>::UVsTypeT> UVType ; size_t UvStride =)",
    "insertText": "sizeof(UVType) * GetNumTexCoords()"
  },
  {
    "label": "UVType()",
    "kind": "Method",
    "detail": "Function (UVType* ElementData = reinterpret_cast<)",
    "insertText": "UVType(TexcoordDataPtr + (VertexIndex * UvStride))"
  },
  {
    "label": "GetVertexUV()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetVertexUV(uint32 VertexIndex, uint32 UVIndex)"
  },
  {
    "label": "Default()",
    "kind": "Method",
    "detail": "Function (} else { return GetVertexUV_Typed<)",
    "insertText": "Default(VertexIndex, UVIndex)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetUseHighPrecisionTangentBasis()",
    "kind": "Method",
    "detail": "Function (bUseFullPrecisionUVs = UseFull ; } bool)",
    "insertText": "GetUseHighPrecisionTangentBasis()"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (bUseHighPrecisionTangentBasis = bUseHighPrecision ; } uint32)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "CreateTangentsRHIBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateTangentsRHIBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateTexCoordRHIBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "CreateTexCoordRHIBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "InitRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHIForStreaming(FRHIBuffer* IntermediateTangentsBuffer, FRHIBuffer* IntermediateTexCoordBuffer, FRHIResourceReplaceBatcher& Batcher)"
  },
  {
    "label": "ReleaseRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHIForStreaming(FRHIResourceReplaceBatcher& Batcher)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResource(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "BindTangentVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindTangentVertexBuffer(const FVertexFactory* VertexFactory, struct FStaticMeshDataType& Data)"
  },
  {
    "label": "BindTexCoordVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindTexCoordVertexBuffer(const FVertexFactory* VertexFactory, struct FStaticMeshDataType& Data, int ClampedNumTexCoords = -1)"
  },
  {
    "label": "BindPackedTexCoordVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindPackedTexCoordVertexBuffer(const FVertexFactory* VertexFactory, struct FStaticMeshDataType& Data, int32 MaxNumTexCoords = -1)"
  },
  {
    "label": "BindLightMapVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindLightMapVertexBuffer(const FVertexFactory* VertexFactory, struct FStaticMeshDataType& Data, int LightMapCoordinateIndex)"
  },
  {
    "label": "GetTexCoordSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTexCoordSize()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } TexCoordVertexBuffer ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTangentsSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetTangentsSRV()"
  },
  {
    "label": "ConvertHalfTexcoordsToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertHalfTexcoordsToFloat(const uint8* InData)"
  },
  {
    "label": "InitTangentAndTexCoordStrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTangentAndTexCoordStrides()"
  }
]