[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetControlMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetControlMessage"
  },
  {
    "label": "FNetControlMessageInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetControlMessageInfo"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Misc / NetworkGuid . h \" # include \" GameFramework / OnlineReplStructs . h \" # include \" Net / DataBunch . h \" # include \" Engine / ChildConnection . h \" enum class ENetPingControlMessage : uint8 ; template<uint8 MessageType> class FNetControlMessage { } ; class FNetControlMessageInfo { public : const TCHAR*)",
    "insertText": "GetName(uint8 MessageIndex)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Names [ i ] =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} bInitialized = true ; } } void)",
    "insertText": "SetName(uint8 MessageType, const TCHAR* InName)"
  },
  {
    "label": "SendParams()",
    "kind": "Method",
    "detail": "Function (Names [ MessageType ] = InName ; } template<. . . ParamTypes> void)",
    "insertText": "SendParams(FControlChannelOutBunch& Bunch, ParamTypes&... Params)"
  },
  {
    "label": "SendParams()",
    "kind": "Method",
    "detail": "Function (} template<FirstParamType,. . . ParamTypes> void)",
    "insertText": "SendParams(FControlChannelOutBunch& Bunch, FirstParamType& FirstParam, ParamTypes&... Params)"
  },
  {
    "label": "SendParams()",
    "kind": "Method",
    "detail": "Function (Bunch<<FirstParam ;)",
    "insertText": "SendParams(Bunch, Params...)"
  },
  {
    "label": "ReceiveParams()",
    "kind": "Method",
    "detail": "Function (} template<. . . ParamTypes> void)",
    "insertText": "ReceiveParams(FInBunch& Bunch, ParamTypes&... Params)"
  },
  {
    "label": "ReceiveParams()",
    "kind": "Method",
    "detail": "Function (} template<FirstParamType,. . . ParamTypes> void)",
    "insertText": "ReceiveParams(FInBunch& Bunch, FirstParamType& FirstParam, ParamTypes&... Params)"
  },
  {
    "label": "ReceiveParams()",
    "kind": "Method",
    "detail": "Function (Bunch<<FirstParam ;)",
    "insertText": "ReceiveParams(Bunch, Params...)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} int MaxNames = TNumericLimits<uint8)",
    "insertText": "Max()"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Names [ MaxNames ] ; bool bInitialized ; } ; # define)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, ...)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (NMT_ # # Name = Index } ; \\ template<> class FNetControlMessage<Index> \\ { \\ public : \\ uint8)",
    "insertText": "Initialize()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SetName(Index, TEXT(#Name))"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (\\ return 0 ; \\ } \\ \\ template<. . . ParamTypes> \\ void)",
    "insertText": "Send(UNetConnection* Conn, ParamTypes&... Params)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(Index < FNetControlMessageInfo::MaxNames, \"Control channel message must be a byte.\")"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkSlow(!Conn->IsA(UChildConnection::StaticClass()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Conn->Channels[0] != NULL && !Conn->Channels[0]->Closing)"
  },
  {
    "label": "Bunch()",
    "kind": "Method",
    "detail": "Function (\\ FControlChannelOutBunch)",
    "insertText": "Bunch(Conn->Channels[0], false)"
  },
  {
    "label": "SendBunch()",
    "kind": "Method",
    "detail": "Function (\\ Conn -> Channels [ 0 ] ->)",
    "insertText": "SendBunch(&Bunch, true)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ \\ template<. . . ParamTypes> \\ [ [ nodiscard ] ] bool)",
    "insertText": "Receive(FInBunch& Bunch, ParamTypes&... Params)"
  },
  {
    "label": "IsError()",
    "kind": "Method",
    "detail": "Function (\\ return ! Bunch .)",
    "insertText": "IsError()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ void)",
    "insertText": "Discard(FInBunch& Bunch)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (\\ TTuple<__VA_ARGS__> Params ; \\)",
    "insertText": "VisitTupleElements([&Bunch](auto& Param) \\ { \\ Bunch << Param; \\ }, \\ Params)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE_ZEROPARAM()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; # define)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE_ZEROPARAM(Name, Index) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index) #define DEFINE_CONTROL_CHANNEL_MESSAGE_ONEPARAM(Name, Index, TypeA) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA) #define DEFINE_CONTROL_CHANNEL_MESSAGE_TWOPARAM(Name, Index, TypeA, TypeB) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB) #define DEFINE_CONTROL_CHANNEL_MESSAGE_THREEPARAM(Name, Index, TypeA, TypeB, TypeC) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC) #define DEFINE_CONTROL_CHANNEL_MESSAGE_FOURPARAM(Name, Index, TypeA, TypeB, TypeC, TypeD) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC, TypeD) #define DEFINE_CONTROL_CHANNEL_MESSAGE_FIVEPARAM(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE) #define DEFINE_CONTROL_CHANNEL_MESSAGE_SIXPARAM(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF) #define DEFINE_CONTROL_CHANNEL_MESSAGE_SEVENPARAM(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF, TypeG) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF, TypeG) #define DEFINE_CONTROL_CHANNEL_MESSAGE_EIGHTPARAM(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF, TypeG, TypeH) DEFINE_CONTROL_CHANNEL_MESSAGE(Name, Index, TypeA, TypeB, TypeC, TypeD, TypeE, TypeF, TypeG, TypeH) #define IMPLEMENT_CONTROL_CHANNEL_MESSAGE(Name) static uint8 Dummy##_FNetControlMessage_##Name = FNetControlMessage<NMT_##Name>::Initialize()"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Hello, 0, uint8, uint32, FString, uint16)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Welcome, 1, FString, FString, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Upgrade, 2, uint32, uint16)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Challenge, 3, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Netspeed, 4, int32)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Login, 5, FString, FString, FUniqueNetIdRepl, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Failure, 6, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Join, 9)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(JoinSplit, 10, FString, FUniqueNetIdRepl)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Skip, 12, FGuid)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(Abort, 13, FGuid)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(PCSwap, 15, int32)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(ActorChannelFailure, 16, int32)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(DebugText, 17, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(NetGUIDAssign, 18, FNetworkGUID, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(SecurityViolation, 19, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(GameSpecific, 20, uint8, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(EncryptionAck, 21)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(DestructionInfo, 22)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(CloseReason, 23, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(NetPing, 24, ENetPingControlMessage , FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(BeaconWelcome, 25)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(BeaconJoin, 26, FString, FUniqueNetIdRepl)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(BeaconAssignGUID, 27, FNetworkGUID)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(BeaconNetGUIDAck, 28, FString)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(IrisProtocolMismatch, 29, uint64)"
  },
  {
    "label": "DEFINE_CONTROL_CHANNEL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_CONTROL_CHANNEL_MESSAGE(IrisNetRefHandleError, 30, uint32, uint64)"
  }
]