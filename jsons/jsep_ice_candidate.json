[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "JsepCandidateCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepCandidateCollection"
  },
  {
    "label": "JsepIceCandidate()",
    "kind": "Method",
    "detail": "Function (# ifndef API_JSEP_ICE_CANDIDATE_H_ # define API_JSEP_ICE_CANDIDATE_H_ # include<stddef . h> # include<memory> # include<string> # include<vector> # include \" api / candidate . h \" # include \" api / jsep . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT JsepIceCandidate : public IceCandidateInterface { public :)",
    "insertText": "JsepIceCandidate(const std::string& sdp_mid, int sdp_mline_index)"
  },
  {
    "label": "JsepIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepIceCandidate(const std::string& sdp_mid, int sdp_mline_index, const cricket::Candidate& candidate)"
  },
  {
    "label": "JsepIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepIceCandidate(const JsepIceCandidate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepIceCandidate&)",
    "insertText": "operator(const JsepIceCandidate&)"
  },
  {
    "label": "JsepIceCandidate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JsepIceCandidate()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const std::string& sdp, SdpParseError* err)"
  },
  {
    "label": "SetCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCandidate(const cricket::Candidate& candidate)"
  },
  {
    "label": "sdp_mid()",
    "kind": "Method",
    "detail": "Function (candidate_ = candidate ; } std::string)",
    "insertText": "sdp_mid()"
  },
  {
    "label": "sdp_mline_index()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sdp_mline_index()"
  },
  {
    "label": "candidate()",
    "kind": "Method",
    "detail": "Function (const cricket::Candidate&)",
    "insertText": "candidate()"
  },
  {
    "label": "server_url()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "server_url()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToString(std::string* out)"
  },
  {
    "label": "JsepCandidateCollection()",
    "kind": "Method",
    "detail": "Function (private : std::string sdp_mid_ ; int sdp_mline_index_ ; cricket::Candidate candidate_ ; } ; class JsepCandidateCollection : public IceCandidateCollection { public :)",
    "insertText": "JsepCandidateCollection()"
  },
  {
    "label": "JsepCandidateCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepCandidateCollection(JsepCandidateCollection&& o)"
  },
  {
    "label": "JsepCandidateCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JsepCandidateCollection(const JsepCandidateCollection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JsepCandidateCollection&)",
    "insertText": "operator(const JsepCandidateCollection&)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (JsepCandidateCollection)",
    "insertText": "Clone()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "count()"
  },
  {
    "label": "HasCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(JsepIceCandidate* candidate)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (const IceCandidateInterface*)",
    "insertText": "at(size_t index)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "remove(const cricket::Candidate& candidate)"
  }
]