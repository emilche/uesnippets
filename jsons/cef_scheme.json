[
  {
    "label": "CefSchemeHandlerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefSchemeHandlerFactory"
  },
  {
    "label": "CefSchemeRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefSchemeRegistrar"
  },
  {
    "label": "CefRegisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_SCHEME_H_ # define CEF_INCLUDE_CEF_SCHEME_H_ # pragma once # include \" include / cef_base . h \" # include \" include / cef_browser . h \" # include \" include / cef_frame . h \" # include \" include / cef_request . h \" # include \" include / cef_resource_handler . h \" # include \" include / cef_response . h \" class CefSchemeHandlerFactory ; bool)",
    "insertText": "CefRegisterSchemeHandlerFactory(const CefString& scheme_name, const CefString& domain_name, CefRefPtr<CefSchemeHandlerFactory> factory)"
  },
  {
    "label": "CefClearSchemeHandlerFactories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CefClearSchemeHandlerFactories()"
  },
  {
    "label": "AddCustomScheme()",
    "kind": "Method",
    "detail": "Function (class CefSchemeRegistrar : public CefBaseScoped { public : bool)",
    "insertText": "AddCustomScheme(const CefString& scheme_name, int options)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class CefSchemeHandlerFactory : public CefBaseRefCounted { public : CefRefPtr<CefResourceHandler>)",
    "insertText": "Create(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& scheme_name, CefRefPtr<CefRequest> request)"
  }
]