[
  {
    "label": "kDxt1()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_H # define SQUISH_H namespace squish { typedef unsigned char u8 ; enum {)",
    "insertText": "kDxt1(1 << 0 ), kDxt3 = ( 1 << 1 ), kDxt5 = ( 1 << 2 ), kColourClusterFit = ( 1 << 3 ), kColourRangeFit = ( 1 << 4 ), kColourMetricPerceptual = ( 1 << 5 ), kColourMetricUniform = ( 1 << 6 ), kWeightColourByAlpha = ( 1 << 7)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress(u8 const* rgba, void* block, int flags)"
  },
  {
    "label": "CompressMasked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressMasked(u8 const* rgba, int mask, void* block, int flags)"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decompress(u8* rgba, void const* block, int flags)"
  },
  {
    "label": "GetStorageRequirements()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStorageRequirements(int width, int height, int flags)"
  },
  {
    "label": "CompressImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressImage(u8 const* rgba, int width, int height, void* blocks, int flags)"
  },
  {
    "label": "DecompressImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressImage(u8* rgba, int width, int height, void const* blocks, int flags)"
  }
]