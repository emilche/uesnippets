[
  {
    "label": "callable_cache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "callable_cache"
  },
  {
    "label": "_PyCodeConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_PyCodeConstructor"
  },
  {
    "label": "_specialization_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_specialization_stats"
  },
  {
    "label": "_opcode_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_opcode_stats"
  },
  {
    "label": "_call_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_call_stats"
  },
  {
    "label": "_object_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_object_stats"
  },
  {
    "label": "_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_stats"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_CODE_H # define Py_INTERNAL_CODE_H # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "CACHE_ENTRIES(cache) (sizeof(cache)/sizeof(_Py_CODEUNIT))"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT index ; _Py_CODEUNIT module_keys_version [ 2 ] ; _Py_CODEUNIT builtin_keys_version ; } _PyLoadGlobalCache ; # define INLINE_CACHE_ENTRIES_LOAD_GLOBAL)",
    "insertText": "CACHE_ENTRIES(_PyLoadGlobalCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; } _PyBinaryOpCache ; # define INLINE_CACHE_ENTRIES_BINARY_OP)",
    "insertText": "CACHE_ENTRIES(_PyBinaryOpCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; } _PyUnpackSequenceCache ; # define INLINE_CACHE_ENTRIES_UNPACK_SEQUENCE \\)",
    "insertText": "CACHE_ENTRIES(_PyUnpackSequenceCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT mask ; } _PyCompareOpCache ; # define INLINE_CACHE_ENTRIES_COMPARE_OP)",
    "insertText": "CACHE_ENTRIES(_PyCompareOpCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT type_version [ 2 ] ; _Py_CODEUNIT func_version ; } _PyBinarySubscrCache ; # define INLINE_CACHE_ENTRIES_BINARY_SUBSCR)",
    "insertText": "CACHE_ENTRIES(_PyBinarySubscrCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT version [ 2 ] ; _Py_CODEUNIT index ; } _PyAttrCache ; # define INLINE_CACHE_ENTRIES_LOAD_ATTR)",
    "insertText": "CACHE_ENTRIES(_PyAttrCache) #define INLINE_CACHE_ENTRIES_STORE_ATTR CACHE_ENTRIES(_PyAttrCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT type_version [ 2 ] ; _Py_CODEUNIT dict_offset ; _Py_CODEUNIT keys_version [ 2 ] ; _Py_CODEUNIT descr [ 4 ] ; } _PyLoadMethodCache ; # define INLINE_CACHE_ENTRIES_LOAD_METHOD)",
    "insertText": "CACHE_ENTRIES(_PyLoadMethodCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; _Py_CODEUNIT func_version [ 2 ] ; _Py_CODEUNIT min_args ; } _PyCallCache ; # define INLINE_CACHE_ENTRIES_CALL)",
    "insertText": "CACHE_ENTRIES(_PyCallCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; } _PyPrecallCache ; # define INLINE_CACHE_ENTRIES_PRECALL)",
    "insertText": "CACHE_ENTRIES(_PyPrecallCache)"
  },
  {
    "label": "CACHE_ENTRIES()",
    "kind": "Method",
    "detail": "Function (_Py_CODEUNIT counter ; } _PyStoreSubscrCache ; # define INLINE_CACHE_ENTRIES_STORE_SUBSCR)",
    "insertText": "CACHE_ENTRIES(_PyStoreSubscrCache) #define QUICKENING_WARMUP_DELAY 8 #define QUICKENING_INITIAL_WARMUP_VALUE (-QUICKENING_WARMUP_DELAY) void _PyCode_Quicken(PyCodeObject *code)"
  },
  {
    "label": "_PyCode_Warmup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyCode_Warmup(PyCodeObject *code)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (code -> co_warmup + + ;)",
    "insertText": "if(code->co_warmup == 0)"
  },
  {
    "label": "_PyCode_Quicken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyCode_Quicken(code)"
  },
  {
    "label": "_PyLocals_GetKind()",
    "kind": "Method",
    "detail": "Function (} } } uint8_t _PyOpcode_Adaptive [ 2 5 6 ] ; Py_ssize_t _Py_QuickenedCount ; struct callable_cache { PyObject* isinstance ; PyObject* len ; PyObject* list_append ; } ; # define CO_FAST_LOCAL 0 x20 # define CO_FAST_CELL 0 x40 # define CO_FAST_FREE 0 x80 typedef unsigned char _PyLocals_Kind ; _PyLocals_Kind)",
    "insertText": "_PyLocals_GetKind(PyObject *kinds, int i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(PyBytes_Check(kinds))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(0 <= i && i < PyBytes_GET_SIZE(kinds))"
  },
  {
    "label": "PyBytes_AS_STRING()",
    "kind": "Method",
    "detail": "Function (char* ptr =)",
    "insertText": "PyBytes_AS_STRING(kinds)"
  },
  {
    "label": "_PyLocals_SetKind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyLocals_SetKind(PyObject *kinds, int i, _PyLocals_Kind kind)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (ptr [)",
    "insertText": "i(char)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (} struct _PyCodeConstructor { PyObject* filename ; PyObject* name ; PyObject* qualname ; int flags ; PyObject* code ; int firstlineno ; PyObject* linetable ; PyObject* consts ; PyObject* names ; PyObject* localsplusnames ; PyObject* localspluskinds ; int argcount ; int posonlyargcount ; int kwonlyargcount ; int stacksize ; PyObject* exceptiontable ; } ;)",
    "insertText": "PyAPI_FUNC(int) _PyCode_Validate(struct _PyCodeConstructor *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyCodeObject *) _PyCode_New(struct _PyCodeConstructor *)"
  },
  {
    "label": "_PyCode_GetVarnames()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyCode_GetVarnames(PyCodeObject *)"
  },
  {
    "label": "_PyCode_GetCellvars()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyCode_GetCellvars(PyCodeObject *)"
  },
  {
    "label": "_PyCode_GetFreevars()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyCode_GetFreevars(PyCodeObject *)"
  },
  {
    "label": "_PyCode_GetCode()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyCode_GetCode(PyCodeObject *)"
  },
  {
    "label": "_PyCode_InitAddressRange()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyCode_InitAddressRange(PyCodeObject* co, PyCodeAddressRange *bounds)"
  },
  {
    "label": "_PyLineTable_InitAddressRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyLineTable_InitAddressRange(const char *linetable, Py_ssize_t length, int firstlineno, PyCodeAddressRange *range)"
  },
  {
    "label": "_PyLineTable_NextAddressRange()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyLineTable_NextAddressRange(PyCodeAddressRange *range)"
  },
  {
    "label": "_PyLineTable_PreviousAddressRange()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyLineTable_PreviousAddressRange(PyCodeAddressRange *range)"
  },
  {
    "label": "_Py_Specialize_LoadAttr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_LoadAttr(PyObject *owner, _Py_CODEUNIT *instr, PyObject *name)"
  },
  {
    "label": "_Py_Specialize_StoreAttr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_StoreAttr(PyObject *owner, _Py_CODEUNIT *instr, PyObject *name)"
  },
  {
    "label": "_Py_Specialize_LoadGlobal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_LoadGlobal(PyObject *globals, PyObject *builtins, _Py_CODEUNIT *instr, PyObject *name)"
  },
  {
    "label": "_Py_Specialize_LoadMethod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_LoadMethod(PyObject *owner, _Py_CODEUNIT *instr, PyObject *name)"
  },
  {
    "label": "_Py_Specialize_BinarySubscr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_BinarySubscr(PyObject *sub, PyObject *container, _Py_CODEUNIT *instr)"
  },
  {
    "label": "_Py_Specialize_StoreSubscr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_StoreSubscr(PyObject *container, PyObject *sub, _Py_CODEUNIT *instr)"
  },
  {
    "label": "_Py_Specialize_Call()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_Call(PyObject *callable, _Py_CODEUNIT *instr, int nargs, PyObject *kwnames)"
  },
  {
    "label": "_Py_Specialize_Precall()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_Py_Specialize_Precall(PyObject *callable, _Py_CODEUNIT *instr, int nargs, PyObject *kwnames, int oparg)"
  },
  {
    "label": "_Py_Specialize_BinaryOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_Specialize_BinaryOp(PyObject *lhs, PyObject *rhs, _Py_CODEUNIT *instr, int oparg, PyObject **locals)"
  },
  {
    "label": "_Py_Specialize_CompareOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_Specialize_CompareOp(PyObject *lhs, PyObject *rhs, _Py_CODEUNIT *instr, int oparg)"
  },
  {
    "label": "_Py_Specialize_UnpackSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_Specialize_UnpackSequence(PyObject *seq, _Py_CODEUNIT *instr, int oparg)"
  },
  {
    "label": "_PyStaticCode_Dealloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyStaticCode_Dealloc(PyCodeObject *co)"
  },
  {
    "label": "_PyStaticCode_InternStrings()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyStaticCode_InternStrings(PyCodeObject *co)"
  },
  {
    "label": "STAT_INC()",
    "kind": "Method",
    "detail": "Function (# ifdef Py_STATS # define SPECIALIZATION_FAILURE_KINDS 3 0 typedef struct _specialization_stats { uint64_t success ; uint64_t failure ; uint64_t hit ; uint64_t deferred ; uint64_t miss ; uint64_t deopt ; uint64_t failure_kinds [ SPECIALIZATION_FAILURE_KINDS ] ; } SpecializationStats ; typedef struct _opcode_stats { SpecializationStats specialization ; uint64_t execution_count ; uint64_t pair_count [ 2 5 6 ] ; } OpcodeStats ; typedef struct _call_stats { uint64_t inlined_py_calls ; uint64_t pyeval_calls ; uint64_t frames_pushed ; uint64_t frame_objects_created ; } CallStats ; typedef struct _object_stats { uint64_t allocations ; uint64_t allocations512 ; uint64_t allocations4k ; uint64_t allocations_big ; uint64_t frees ; uint64_t to_freelist ; uint64_t from_freelist ; uint64_t new_values ; uint64_t dict_materialized_on_request ; uint64_t dict_materialized_new_key ; uint64_t dict_materialized_too_big ; uint64_t dict_materialized_str_subclass ; } ObjectStats ; typedef struct _stats { OpcodeStats opcode_stats [ 2 5 6 ] ; CallStats call_stats ; ObjectStats object_stats ; } PyStats ; PyStats _py_stats ; # define)",
    "insertText": "STAT_INC(opname, name) _py_stats.opcode_stats[opname].specialization.name++ #define STAT_DEC(opname, name) _py_stats.opcode_stats[opname].specialization.name-- #define OPCODE_EXE_INC(opname) _py_stats.opcode_stats[opname].execution_count++ #define CALL_STAT_INC(name) _py_stats.call_stats.name++ #define OBJECT_STAT_INC(name) _py_stats.object_stats.name++ #define OBJECT_STAT_INC_COND(name, cond)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) extern void _Py_PrintSpecializationStats(int to_file)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _Py_GetSpecializationStats(void)"
  },
  {
    "label": "STAT_INC()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "STAT_INC(opname, name) ((void)0) #define STAT_DEC(opname, name) ((void)0) #define OPCODE_EXE_INC(opname) ((void)0) #define CALL_STAT_INC(name) ((void)0) #define OBJECT_STAT_INC(name) ((void)0) #define OBJECT_STAT_INC_COND(name, cond) ((void)0) #endif #ifdef WORDS_BIGENDIAN static inline void write_u32(uint16_t *p, uint32_t val)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint16_t)(val >> 16)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint16_t)(val >> 0)"
  },
  {
    "label": "write_u64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "write_u64(uint16_t *p, uint64_t val)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint16_t)(val >> 48)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint16_t)(val >> 32)"
  },
  {
    "label": "read_u32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "read_u32(uint16_t *p)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (uint32_t val = 0 ;)",
    "insertText": "val(uint32_t)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (uint64_t val = 0 ;)",
    "insertText": "val(uint64_t)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "val(uintptr_t)"
  },
  {
    "label": "write_u64()",
    "kind": "Method",
    "detail": "Function (# if SIZEOF_VOID_P = = 8)",
    "insertText": "write_u64(p, val)"
  },
  {
    "label": "write_u32()",
    "kind": "Method",
    "detail": "Function (# elif SIZEOF_VOID_P = = 4)",
    "insertText": "write_u32(p, val)"
  },
  {
    "label": "read_obj()",
    "kind": "Method",
    "detail": "Function (# else # error \" SIZEOF_VOID_P must be 4 or 8 \" # endif } PyObject*)",
    "insertText": "read_obj(uint16_t *p)"
  },
  {
    "label": "read_u64()",
    "kind": "Method",
    "detail": "Function (uintptr_t val ; # if SIZEOF_VOID_P = = 8 val =)",
    "insertText": "read_u64(p)"
  },
  {
    "label": "read_u32()",
    "kind": "Method",
    "detail": "Function (# elif SIZEOF_VOID_P = = 4 val =)",
    "insertText": "read_u32(p)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else # error \" SIZEOF_VOID_P must be 4 or 8 \" # endif)",
    "insertText": "return(PyObject *)"
  },
  {
    "label": "parse_varint()",
    "kind": "Method",
    "detail": "Function (} unsigned char*)",
    "insertText": "parse_varint(unsigned char *p, int *result)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int val = p [ 0 ]& 6 3 ;)",
    "insertText": "while(p[0] & 64)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (p + + ;)",
    "insertText": "val(val << 6) | (p[0] & 63)"
  },
  {
    "label": "write_varint()",
    "kind": "Method",
    "detail": "Function (}* result = val ; return p + 1 ; } int)",
    "insertText": "write_varint(uint8_t *ptr, unsigned int val)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int written = 1 ;)",
    "insertText": "while(val >= 64)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "ptr(val & 63)"
  },
  {
    "label": "write_signed_varint()",
    "kind": "Method",
    "detail": "Function (val>> = 6 ; written + + ; }* ptr = val ; return written ; } int)",
    "insertText": "write_signed_varint(uint8_t *ptr, int val)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "val((-val)<<1)"
  },
  {
    "label": "write_varint()",
    "kind": "Method",
    "detail": "Function (} else { val = val<<1 ; } return)",
    "insertText": "write_varint(ptr, val)"
  },
  {
    "label": "write_location_entry_start()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "write_location_entry_start(uint8_t *ptr, int code, int length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((code & 15) == code)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "ptr(code << 3) | (length - 1)"
  },
  {
    "label": "adaptive_counter_start()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "adaptive_counter_start(void)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "value(1 << ADAPTIVE_BACKOFF_START)"
  },
  {
    "label": "adaptive_counter_backoff()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "adaptive_counter_backoff(uint16_t counter)"
  },
  {
    "label": "counter()",
    "kind": "Method",
    "detail": "Function (unsigned int backoff =)",
    "insertText": "counter((1<<ADAPTIVE_BACKOFF_BITS)-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (backoff + + ;)",
    "insertText": "if(backoff > MAX_BACKOFF_VALUE)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (backoff = MAX_BACKOFF_VALUE ; } unsigned int)",
    "insertText": "value(1 << backoff)"
  },
  {
    "label": "_PyCode_CreateLineArray()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "_PyCode_CreateLineArray(PyCodeObject *co)"
  },
  {
    "label": "_PyCode_InitLineArray()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyCode_InitLineArray(PyCodeObject *co)"
  },
  {
    "label": "_PyCode_LineNumberFromArray()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "_PyCode_LineNumberFromArray(PyCodeObject *co, int index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(co->_co_linearray != NULL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index < Py_SIZE(co))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(co->_co_linearray_entry_size == 4)"
  }
]