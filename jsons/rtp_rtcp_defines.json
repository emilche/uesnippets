[
  {
    "label": "RtpPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacket"
  },
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "TransportFeedback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportFeedback"
  },
  {
    "label": "RTPExtensionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTPExtensionType"
  },
  {
    "label": "RTCPAppSubTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTCPAppSubTypes"
  },
  {
    "label": "RTCPPacketType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTCPPacketType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RtxMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RtxMode"
  },
  {
    "label": "RTCPReportBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTCPReportBlock"
  },
  {
    "label": "RtpState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpState"
  },
  {
    "label": "RecoveredPacketReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecoveredPacketReceiver"
  },
  {
    "label": "RtcpIntraFrameObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpIntraFrameObserver"
  },
  {
    "label": "RtcpLossNotificationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpLossNotificationObserver"
  },
  {
    "label": "RtcpBandwidthObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpBandwidthObserver"
  },
  {
    "label": "RtpPacketSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpPacketSendInfo"
  },
  {
    "label": "NetworkStateEstimateObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkStateEstimateObserver"
  },
  {
    "label": "TransportFeedbackObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportFeedbackObserver"
  },
  {
    "label": "RtcpFeedbackSenderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpFeedbackSenderInterface"
  },
  {
    "label": "StreamFeedbackObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamFeedbackObserver"
  },
  {
    "label": "StreamPacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamPacketInfo"
  },
  {
    "label": "StreamFeedbackProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamFeedbackProvider"
  },
  {
    "label": "RtcpRttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpRttStats"
  },
  {
    "label": "RtpPacketCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpPacketCounter"
  },
  {
    "label": "StreamDataCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamDataCounters"
  },
  {
    "label": "RtpSendRates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpSendRates"
  },
  {
    "label": "StreamDataCountersCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamDataCountersCallback"
  },
  {
    "label": "RtpReceiveStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpReceiveStats"
  },
  {
    "label": "BitrateStatisticsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateStatisticsObserver"
  },
  {
    "label": "SendSideDelayObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendSideDelayObserver"
  },
  {
    "label": "SendPacketObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendPacketObserver"
  },
  {
    "label": "IsLegalMidName()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_DEFINES_H_ # define MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_DEFINES_H_ # include<stddef . h> # include<list> # include<memory> # include<vector> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" absl / types / variant . h \" # include \" api / array_view . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / rtp_headers . h \" # include \" api / transport / network_types . h \" # include \" api / units / time_delta . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / remote_estimate . h \" # include \" system_wrappers / include / clock . h \" # define RTCP_CNAME_SIZE 2 5 6 # define IP_PACKET_SIZE 1 5 0 0 namespace webrtc { class RtpPacket ; class RtpPacketToSend ; namespace rtcp { class TransportFeedback ; } const int kVideoPayloadTypeFrequency = 9 0 0 0 0 ; const int kBogusRtpRateForAudioRtcp = 8 0 0 0 ; const uint8_t kRtpHeaderSize = 1 2 ; bool)",
    "insertText": "IsLegalMidName(absl::string_view name)"
  },
  {
    "label": "IsLegalRsidName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLegalRsidName(absl::string_view name)"
  },
  {
    "label": "RTCPReportBlock()",
    "kind": "Method",
    "detail": "Function (enum RTPExtensionType : int { kRtpExtensionNone,kRtpExtensionTransmissionTimeOffset,kRtpExtensionAudioLevel,kRtpExtensionCsrcAudioLevel,kRtpExtensionInbandComfortNoise,kRtpExtensionAbsoluteSendTime,kRtpExtensionAbsoluteCaptureTime,kRtpExtensionVideoRotation,kRtpExtensionTransportSequenceNumber,kRtpExtensionTransportSequenceNumber02,kRtpExtensionPlayoutDelay,kRtpExtensionVideoContentType,kRtpExtensionVideoLayersAllocation,kRtpExtensionVideoTiming,kRtpExtensionRtpStreamId,kRtpExtensionRepairedRtpStreamId,kRtpExtensionMid,kRtpExtensionGenericFrameDescriptor00,kRtpExtensionGenericFrameDescriptor = kRtpExtensionGenericFrameDescriptor00,kRtpExtensionGenericFrameDescriptor02,kRtpExtensionColorSpace,kRtpExtensionVideoFrameTrackingId,kRtpExtensionNumberOfExtensions } ; enum RTCPAppSubTypes { kAppSubtypeBwe = 0 x00 } ; enum RTCPPacketType : uint32_t { kRtcpReport = 0 x0001,kRtcpSr = 0 x0002,kRtcpRr = 0 x0004,kRtcpSdes = 0 x0008,kRtcpBye = 0 x0010,kRtcpPli = 0 x0020,kRtcpNack = 0 x0040,kRtcpFir = 0 x0080,kRtcpTmmbr = 0 x0100,kRtcpTmmbn = 0 x0200,kRtcpSrReq = 0 x0400,kRtcpLossNotification = 0 x2000,kRtcpRemb = 0 x10000,kRtcpTransmissionTimeOffset = 0 x20000,kRtcpXrReceiverReferenceTime = 0 x40000,kRtcpXrDlrrReportBlock = 0 x80000,kRtcpTransportFeedback = 0 x100000,kRtcpXrTargetBitrate = 0 x200000 } ; enum class KeyFrameReqMethod : uint8_t { kNone,kPliRtcp,kFirRtcp } ; enum RtxMode { kRtxOff = 0 x0,kRtxRetransmitted = 0 x1,kRtxRedundantPayloads = 0 x2 } ; const size_t kRtxHeaderSize = 2 ; struct RTCPReportBlock {)",
    "insertText": "RTCPReportBlock() : sender_ssrc(0), source_ssrc(0), fraction_lost(0), packets_lost(0), extended_highest_sequence_number(0), jitter(0), last_sender_report_timestamp(0), delay_since_last_sender_report(0)"
  },
  {
    "label": "RTCPReportBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCPReportBlock(uint32_t sender_ssrc, uint32_t source_ssrc, uint8_t fraction_lost, int32_t packets_lost, uint32_t extended_highest_sequence_number, uint32_t jitter, uint32_t last_sender_report_timestamp, uint32_t delay_since_last_sender_report) : sender_ssrc(sender_ssrc), source_ssrc(source_ssrc), fraction_lost(fraction_lost), packets_lost(packets_lost), extended_highest_sequence_number(extended_highest_sequence_number), jitter(jitter), last_sender_report_timestamp(last_sender_report_timestamp), delay_since_last_sender_report(delay_since_last_sender_report)"
  },
  {
    "label": "RtpState()",
    "kind": "Method",
    "detail": "Function (} uint32_t sender_ssrc ; uint32_t source_ssrc ; uint8_t fraction_lost ; int32_t packets_lost ; uint32_t extended_highest_sequence_number ; uint32_t jitter ; uint32_t last_sender_report_timestamp ; uint32_t delay_since_last_sender_report ; } ; typedef std::list<RTCPReportBlock> ReportBlockList ; struct RtpState {)",
    "insertText": "RtpState() : sequence_number(0), start_timestamp(0), timestamp(0), capture_time_ms(-1), last_timestamp_time_ms(-1), ssrc_has_acked(false)"
  },
  {
    "label": "OnRecoveredPacket()",
    "kind": "Method",
    "detail": "Function (} uint16_t sequence_number ; uint32_t start_timestamp ; uint32_t timestamp ; int64_t capture_time_ms ; int64_t last_timestamp_time_ms ; bool ssrc_has_acked ; } ; class RecoveredPacketReceiver { public : void)",
    "insertText": "OnRecoveredPacket(const uint8_t* packet, size_t length)"
  },
  {
    "label": "RecoveredPacketReceiver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "RecoveredPacketReceiver()"
  },
  {
    "label": "RtcpIntraFrameObserver()",
    "kind": "Method",
    "detail": "Function (} ; class RtcpIntraFrameObserver { public : ~)",
    "insertText": "RtcpIntraFrameObserver()"
  },
  {
    "label": "OnReceivedIntraFrameRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceivedIntraFrameRequest(uint32_t ssrc)"
  },
  {
    "label": "RtcpLossNotificationObserver()",
    "kind": "Method",
    "detail": "Function (} ; class RtcpLossNotificationObserver { public : ~)",
    "insertText": "RtcpLossNotificationObserver()"
  },
  {
    "label": "OnReceivedLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedLossNotification(uint32_t ssrc, uint16_t seq_num_of_last_decodable, uint16_t seq_num_of_last_received, bool decodability_flag)"
  },
  {
    "label": "OnReceivedEstimatedBitrate()",
    "kind": "Method",
    "detail": "Function (} ; class RtcpBandwidthObserver { public : void)",
    "insertText": "OnReceivedEstimatedBitrate(uint32_t bitrate)"
  },
  {
    "label": "OnReceivedRtcpReceiverReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtcpReceiverReport(const ReportBlockList& report_blocks, int64_t rtt, int64_t now_ms)"
  },
  {
    "label": "RtcpBandwidthObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcpBandwidthObserver()"
  },
  {
    "label": "OnRemoteNetworkEstimate()",
    "kind": "Method",
    "detail": "Function (} } ; size_t kNumMediaTypes = 5 ; enum class RtpPacketMediaType : size_t { kAudio,kVideo,kRetransmission,kForwardErrorCorrection,kPadding = kNumMediaTypes - 1,} ; struct RtpPacketSendInfo { uint16_t transport_sequence_number = 0 ; absl::optional<uint32_t> media_ssrc ; uint16_t rtp_sequence_number = 0 ; uint32_t rtp_timestamp = 0 ; size_t length = 0 ; absl::optional<RtpPacketMediaType> packet_type ; PacedPacketInfo pacing_info ; } ; class NetworkStateEstimateObserver { public : void)",
    "insertText": "OnRemoteNetworkEstimate(NetworkStateEstimate estimate)"
  },
  {
    "label": "NetworkStateEstimateObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkStateEstimateObserver()"
  },
  {
    "label": "TransportFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (} ; class TransportFeedbackObserver { public :)",
    "insertText": "TransportFeedbackObserver()"
  },
  {
    "label": "OnAddPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddPacket(const RtpPacketSendInfo& packet_info)"
  },
  {
    "label": "OnTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportFeedback(const rtcp::TransportFeedback& feedback)"
  },
  {
    "label": "RtcpFeedbackSenderInterface()",
    "kind": "Method",
    "detail": "Function (} ; class RtcpFeedbackSenderInterface { public : ~)",
    "insertText": "RtcpFeedbackSenderInterface()"
  },
  {
    "label": "SendCombinedRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCombinedRtcpPacket(std::vector<std::unique_ptr<rtcp::RtcpPacket>> rtcp_packets)"
  },
  {
    "label": "SetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "UnsetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetRemb()"
  },
  {
    "label": "StreamFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (} ; class StreamFeedbackObserver { public : struct StreamPacketInfo { bool received ; absl::optional<uint32_t> ssrc ; uint16_t rtp_sequence_number ; bool is_retransmission ; } ; ~)",
    "insertText": "StreamFeedbackObserver()"
  },
  {
    "label": "OnPacketFeedbackVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketFeedbackVector(std::vector<StreamPacketInfo> packet_feedback_vector)"
  },
  {
    "label": "RegisterStreamFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (} ; class StreamFeedbackProvider { public : void)",
    "insertText": "RegisterStreamFeedbackObserver(std::vector<uint32_t> ssrcs, StreamFeedbackObserver* observer)"
  },
  {
    "label": "DeRegisterStreamFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeRegisterStreamFeedbackObserver(StreamFeedbackObserver* observer)"
  },
  {
    "label": "StreamFeedbackProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StreamFeedbackProvider()"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (} ; class RtcpRttStats { public : void)",
    "insertText": "OnRttUpdate(int64_t rtt)"
  },
  {
    "label": "LastProcessedRtt()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "LastProcessedRtt()"
  },
  {
    "label": "RtcpRttStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcpRttStats()"
  },
  {
    "label": "RtpPacketCounter()",
    "kind": "Method",
    "detail": "Function (} } ; struct RtpPacketCounter {)",
    "insertText": "RtpPacketCounter() : header_bytes(0), payload_bytes(0), padding_bytes(0), packets(0)"
  },
  {
    "label": "RtpPacketCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpPacketCounter(const RtpPacket& packet)"
  },
  {
    "label": "RtpPacketCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketCounter(const RtpPacketToSend& packet_to_send)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const RtpPacketCounter& other)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (header_bytes + = other . header_bytes ; payload_bytes + = other . payload_bytes ; padding_bytes + = other . padding_bytes ; packets + = other . packets ; total_packet_delay + = other . total_packet_delay ; } void)",
    "insertText": "Subtract(const RtpPacketCounter& other)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(header_bytes, other.header_bytes)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (header_bytes - = other . header_bytes ;)",
    "insertText": "RTC_DCHECK_GE(payload_bytes, other.payload_bytes)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (payload_bytes - = other . payload_bytes ;)",
    "insertText": "RTC_DCHECK_GE(padding_bytes, other.padding_bytes)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (padding_bytes - = other . padding_bytes ;)",
    "insertText": "RTC_DCHECK_GE(packets, other.packets)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (packets - = other . packets ;)",
    "insertText": "RTC_DCHECK_GE(total_packet_delay, other.total_packet_delay)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (total_packet_delay - = other . total_packet_delay ; } bool)",
    "insertText": "operator(const RtpPacketCounter& other)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacket(const RtpPacketToSend& packet_to_send)"
  },
  {
    "label": "TotalBytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "TotalBytes()"
  },
  {
    "label": "StreamDataCounters()",
    "kind": "Method",
    "detail": "Function (} ; struct StreamDataCounters {)",
    "insertText": "StreamDataCounters()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const StreamDataCounters& other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (transmitted .)",
    "insertText": "Add(other.transmitted)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (retransmitted .)",
    "insertText": "Add(other.retransmitted)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (fec .)",
    "insertText": "Add(other.fec)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (first_packet_time_ms = other . first_packet_time_ms ; } } void)",
    "insertText": "Subtract(const StreamDataCounters& other)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (transmitted .)",
    "insertText": "Subtract(other.transmitted)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (retransmitted .)",
    "insertText": "Subtract(other.retransmitted)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (fec .)",
    "insertText": "Subtract(other.fec)"
  },
  {
    "label": "TimeSinceFirstPacketInMs()",
    "kind": "Method",
    "detail": "Function (first_packet_time_ms = other . first_packet_time_ms ; } } int64_t)",
    "insertText": "TimeSinceFirstPacketInMs(int64_t now_ms)"
  },
  {
    "label": "MediaPayloadBytes()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "MediaPayloadBytes()"
  },
  {
    "label": "RtpSendRates()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "RtpSendRates() : send_rates_( make_zero_array(std::make_index_sequence<kNumMediaTypes>()))"
  },
  {
    "label": "RtpSendRates()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpSendRates(const RtpSendRates& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpSendRates&)",
    "insertText": "operator(const RtpSendRates&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DataRate&)",
    "insertText": "operator(RtpPacketMediaType type)"
  },
  {
    "label": "Sum()",
    "kind": "Method",
    "detail": "Function (} DataRate)",
    "insertText": "Sum()"
  },
  {
    "label": "StreamDataCountersCallback()",
    "kind": "Method",
    "detail": "Function (} private : std::array<DataRate,kNumMediaTypes> send_rates_ ; } ; class StreamDataCountersCallback { public : ~)",
    "insertText": "StreamDataCountersCallback()"
  },
  {
    "label": "DataCountersUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DataCountersUpdated(const StreamDataCounters& counters, uint32_t ssrc)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} ; struct RtpReceiveStats { int32_t packets_lost = 0 ; uint32_t jitter = 0 ; webrtc::TimeDelta interarrival_jitter = webrtc::)",
    "insertText": "Zero()"
  },
  {
    "label": "BitrateStatisticsObserver()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t> last_packet_received_timestamp_ms ; RtpPacketCounter packet_counter ; } ; class BitrateStatisticsObserver { public : ~)",
    "insertText": "BitrateStatisticsObserver()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Notify(uint32_t total_bitrate_bps, uint32_t retransmit_bitrate_bps, uint32_t ssrc)"
  },
  {
    "label": "SendSideDelayObserver()",
    "kind": "Method",
    "detail": "Function (} ; class SendSideDelayObserver { public : ~)",
    "insertText": "SendSideDelayObserver()"
  },
  {
    "label": "SendSideDelayUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendSideDelayUpdated(int avg_delay_ms, int max_delay_ms, uint32_t ssrc)"
  },
  {
    "label": "SendPacketObserver()",
    "kind": "Method",
    "detail": "Function (} ; class SendPacketObserver { public : ~)",
    "insertText": "SendPacketObserver()"
  },
  {
    "label": "OnSendPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSendPacket(uint16_t packet_id, int64_t capture_time_ms, uint32_t ssrc)"
  }
]