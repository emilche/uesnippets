[
  {
    "label": "WinHeapMalloc()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_WINHEAP_STUBS_WIN_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_WINHEAP_STUBS_WIN_H_ # include<stdint . h> # include \" base / base_export . h \" namespace allocator_shim { bool g_is_win_shim_layer_initialized ; void*)",
    "insertText": "WinHeapMalloc(size_t size)"
  },
  {
    "label": "WinHeapFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WinHeapFree(void* ptr)"
  },
  {
    "label": "WinHeapRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "WinHeapRealloc(void* ptr, size_t size)"
  },
  {
    "label": "WinHeapGetSizeEstimate()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WinHeapGetSizeEstimate(void* ptr)"
  },
  {
    "label": "WinCallNewHandler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WinCallNewHandler(size_t size)"
  },
  {
    "label": "WinHeapAlignedMalloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "WinHeapAlignedMalloc(size_t size, size_t alignment)"
  },
  {
    "label": "WinHeapAlignedRealloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "WinHeapAlignedRealloc(void* ptr, size_t size, size_t alignment)"
  },
  {
    "label": "WinHeapAlignedFree()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "WinHeapAlignedFree(void* ptr)"
  }
]