[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FGraphContextMenuArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphContextMenuArguments"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FGraphNodeFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeFactory"
  },
  {
    "label": "AddNodeBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AddNodeBehavior"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / CurveSequence . h \" # include \" BlueprintUtilities . h \" # include \" ConnectionDrawingPolicy . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphPin . h \" # include \" GraphEditAction . h \" # include \" GraphEditor . h \" # include \" GraphSplineOverlapResult . h \" # include \" HAL / PlatformMath . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Layout / Clipping . h \" # include \" Layout / Geometry . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Guid . h \" # include \" SGraphNode . h \" # include \" SGraphPin . h \" # include \" SNodePanel . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / GCObject . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" class FActiveTimerHandle ; class FArrangedChildren ; class FDragDropEvent ; class FPaintArgs ; class FReferenceCollector ; class FSlateRect ; class FSlateWindowElementList ; class FText ; class FWidgetStyle ; class IMenu ; class IToolTip ; class SGraphNode ; class SWidget ; class UEdGraph ; class UEdGraphNode ; class UObject ; struct FAssetData ; struct FDiffSingleResult ; struct FEdGraphEditAction ; struct FGuid ;)",
    "insertText": "DECLARE_DELEGATE(FOnUpdateGraphPanel)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (FVector2D NodeAddPosition ; UEdGraphNode* GraphNode ; UEdGraphPin* GraphPin ; TArray<UEdGraphPin*> DragFromPins ; } ; class SGraphPanel : public SNodePanel,public FGCObject { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FActionMenuContent, FOnGetContextMenuFor, const FGraphContextMenuArguments& ) SLATE_BEGIN_ARGS( SGraphPanel ) : _OnGetContextMenuFor() , _OnSelectionChanged() , _OnNodeDoubleClicked() , _GraphObj( static_cast<UEdGraph*>(NULL) ) , _InitialZoomToFit( false ) , _IsEditable( true ) , _DisplayAsReadOnly( false ) , _ShowGraphStateOverlay(true) , _OnUpdateGraphPanel()"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_EVENT(FOnGetContextMenuFor, OnGetContextMenuFor ) SLATE_EVENT( SGraphEditor::FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FSingleNodeEvent, OnNodeDoubleClicked ) SLATE_EVENT( SGraphEditor::FOnDropActor, OnDropActor ) SLATE_EVENT( SGraphEditor::FOnDropStreamingLevel, OnDropStreamingLevel ) SLATE_ARGUMENT( class UEdGraph*, GraphObj ) SLATE_ARGUMENT( TSharedPtr<TArray<FDiffSingleResult>>, DiffResults ) SLATE_ATTRIBUTE( int32, FocusedDiffResult ) SLATE_ARGUMENT( bool, InitialZoomToFit ) SLATE_ATTRIBUTE( bool, IsEditable ) SLATE_ATTRIBUTE( bool, DisplayAsReadOnly ) SLATE_ATTRIBUTE(bool, ShowGraphStateOverlay) SLATE_EVENT( FOnNodeVerifyTextCommit, OnVerifyTextCommit ) SLATE_EVENT( FOnNodeTextCommitted, OnTextCommitted ) SLATE_EVENT( SGraphEditor::FOnSpawnNodeByShortcut, OnSpawnNodeByShortcut ) SLATE_EVENT( FOnUpdateGraphPanel, OnUpdateGraphPanel ) SLATE_EVENT( SGraphEditor::FOnDisallowedPinConnection, OnDisallowedPinConnection ) SLATE_EVENT( SGraphEditor::FOnDoubleClicked, OnDoubleClicked ) SLATE_EVENT( SGraphEditor::FOnMouseButtonDown, OnMouseButtonDown ) SLATE_EVENT( SGraphEditor::FOnNodeSingleClicked, OnNodeSingleClicked ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SGraphPanel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SGraphPanel()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "CustomPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CustomPrepass(float LayoutScaleMultiplier)"
  },
  {
    "label": "OnSummonContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnSummonContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnHandleLeftMouseRelease()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnHandleLeftMouseRelease(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AddGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGraphNode(const TSharedRef<SNode>& NodeToAdd)"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ArrangeChildrenForContextMenuSummon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeChildrenForContextMenuSummon(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "SummonContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "SummonContextMenu(const FVector2D& WhereToSummon, const FVector2D& WhereToAddNode, UEdGraphNode* ForNode, UEdGraphPin* ForPin, const TArray<UEdGraphPin*>& DragFromPins)"
  },
  {
    "label": "SummonCreateNodeMenuFromUICommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonCreateNodeMenuFromUICommand(uint32 NumNodesAdded)"
  },
  {
    "label": "DismissContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissContextMenu()"
  },
  {
    "label": "OnBeginMakingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginMakingConnection(UEdGraphPin* InOriginatingPin)"
  },
  {
    "label": "OnBeginMakingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginMakingConnection(FGraphPinHandle PinHandle)"
  },
  {
    "label": "OnStopMakingConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStopMakingConnection(bool bForceStop = false)"
  },
  {
    "label": "PreservePinPreviewUntilForced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreservePinPreviewUntilForced()"
  },
  {
    "label": "OnBeginRelinkConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginRelinkConnection(const FGraphPinHandle& InSourcePinHandle, const FGraphPinHandle& InTargetPinHandle)"
  },
  {
    "label": "OnEndRelinkConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndRelinkConnection(bool bForceStop = false)"
  },
  {
    "label": "IsRelinkingConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelinkingConnection()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "PurgeVisualRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeVisualRepresentation()"
  },
  {
    "label": "IsNodeTitleVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeTitleVisible(const class UEdGraphNode* Node, bool bRequestRename)"
  },
  {
    "label": "IsRectVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRectVisible(const FVector2D &TopLeft, const FVector2D &BottomRight)"
  },
  {
    "label": "JumpToRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JumpToRect(const FVector2D &BottomLeft, const FVector2D &TopRight)"
  },
  {
    "label": "JumpToNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToNode(const class UEdGraphNode* JumpToMe, bool bRequestRename, bool bSelectNode)"
  },
  {
    "label": "JumpToPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToPin(const class UEdGraphPin* JumptToMe)"
  },
  {
    "label": "GetAllPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllPins(TSet< TSharedRef<SWidget> >& AllPins)"
  },
  {
    "label": "AddPinToHoverSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPinToHoverSet(UEdGraphPin* HoveredPin)"
  },
  {
    "label": "RemovePinFromHoverSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePinFromHoverSet(UEdGraphPin* UnhoveredPin)"
  },
  {
    "label": "GetPinVisibility()",
    "kind": "Method",
    "detail": "Function (SGraphEditor::EPinVisibility)",
    "insertText": "GetPinVisibility()"
  },
  {
    "label": "GetGraphObj()",
    "kind": "Method",
    "detail": "Function (PinVisibility = InVisibility ; } UEdGraph*)",
    "insertText": "GetGraphObj()"
  },
  {
    "label": "IsGraphEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphEditable()"
  },
  {
    "label": "GetBoundsForNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetBoundsForNode(const UObject* InNode, FVector2D& MinCorner, FVector2D& MaxCorner, float Padding = 0.0f)"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenConnections()"
  },
  {
    "label": "StraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenConnections(UEdGraphPin* SourcePin, UEdGraphPin* PinToAlign = nullptr)"
  },
  {
    "label": "RefreshNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNode(UEdGraphNode& Node)"
  },
  {
    "label": "InvalidatePerTick()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "InvalidatePerTick(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "SetNodeFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeFactory(const TSharedRef<class FGraphNodeFactory>& NewNodeFactory)"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotifyGraphChanged(const struct FEdGraphEditAction& InAction)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SGraphNode>)",
    "insertText": "GetChild(int32 ChildIndex)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (enum AddNodeBehavior { CheckUserAddedNodesList,WasUserAdded,NotUserAdded } ; void)",
    "insertText": "AddNode(class UEdGraphNode* Node, AddNodeBehavior Behavior)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(const UEdGraphNode* Node)"
  },
  {
    "label": "RemoveAllNodesWithInvalidPointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodesWithInvalidPointers()"
  },
  {
    "label": "GetNodeWidgetFromGuid()",
    "kind": "Method",
    "detail": "Function (public : TWeakPtr<SGraphPin> MarkedPin ; TSharedPtr<SGraphNode>)",
    "insertText": "GetNodeWidgetFromGuid(FGuid Guid)"
  },
  {
    "label": "GetSelectedGraphNodes()",
    "kind": "Method",
    "detail": "Function (TArray<UEdGraphNode*>)",
    "insertText": "GetSelectedGraphNodes()"
  },
  {
    "label": "GetPreviousFrameSplineOverlap()",
    "kind": "Method",
    "detail": "Function (const FGraphSplineOverlapResult&)",
    "insertText": "GetPreviousFrameSplineOverlap()"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphChanged(const FEdGraphEditAction& InAction)"
  },
  {
    "label": "UpdateSelectedNodesPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedNodesPositions(FVector2D PositionIncrement)"
  },
  {
    "label": "OnSplineHoverStateChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSplineHoverStateChanged(const FGraphSplineOverlapResult& NewSplineHoverState)"
  },
  {
    "label": "GetBestPinFromHoveredSpline()",
    "kind": "Method",
    "detail": "Function (class SGraphPin*)",
    "insertText": "GetBestPinFromHoveredSpline()"
  },
  {
    "label": "PassesAssetReferenceFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAssetReferenceFilter(const TArray<FAssetData>& ReferencedAssets, FText* OutFailureReason = nullptr)"
  },
  {
    "label": "GetGraphNodeUnderMouse()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphNode>)",
    "insertText": "GetGraphNodeUnderMouse(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetPinUnderMouse()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetPinUnderMouse(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TSharedPtr<SGraphNode> GraphNode)"
  },
  {
    "label": "AdjustNewlySpawnedNodePositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustNewlySpawnedNodePositions(TArrayView<UEdGraphNode* const> SpawnedNodes, TArrayView<UEdGraphPin*> DraggedFromPins, FVector2D SpawnGraphPosition)"
  },
  {
    "label": "MoveNodesToAnchorPinAtGraphPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodesToAnchorPinAtGraphPosition(TArrayView<UEdGraphNode* const> NodesToMove, FGraphPinHandle PinToAnchor, FVector2D DesiredPinGraphPosition)"
  }
]