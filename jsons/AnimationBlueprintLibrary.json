[
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "UAnimCurveCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveCompressionSettings"
  },
  {
    "label": "UVariableFrameStrippingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVariableFrameStrippingSettings"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "UAnimMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMetaData"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotify"
  },
  {
    "label": "UAnimNotifyState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotifyState"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAnimationGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationGraph"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ANIMATIONBLUEPRINTLIBRARY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMATIONBLUEPRINTLIBRARY_API"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "EAdditiveBasePoseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveBasePoseType"
  },
  {
    "label": "EAdditiveBasePoseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveBasePoseType"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNumFrames(const UAnimSequenceBase* AnimationSequenceBase, int32& NumFrames)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNumKeys(const UAnimSequenceBase* AnimationSequenceBase, int32& NumKeys)"
  },
  {
    "label": "GetAnimationTrackNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationTrackNames(const UAnimSequenceBase* AnimationSequenceBase, TArray<FName>& TrackNames)"
  },
  {
    "label": "GetMontageSlotNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMontageSlotNames(const UAnimMontage* AnimationMontage, TArray<FName>& SlotNames)"
  },
  {
    "label": "GetAnimationCurveNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationCurveNames(const UAnimSequenceBase* AnimationSequenceBase, ERawCurveTrackTypes CurveType, TArray<FName>& CurveNames)"
  },
  {
    "label": "ExtractRootTrackTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootTrackTransform(const UAnimSequenceBase* AnimationSequenceBase, float Time)"
  },
  {
    "label": "GetBoneCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneCompressionSettings(const UAnimSequence* AnimationSequence, UAnimBoneCompressionSettings*& CompressionSettings)"
  },
  {
    "label": "SetBoneCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneCompressionSettings(UAnimSequence* AnimationSequence, UAnimBoneCompressionSettings* CompressionSettings)"
  },
  {
    "label": "GetCurveCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveCompressionSettings(const UAnimSequence* AnimationSequence, UAnimCurveCompressionSettings*& CompressionSettings)"
  },
  {
    "label": "SetCurveCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveCompressionSettings(UAnimSequence* AnimationSequence, UAnimCurveCompressionSettings* CompressionSettings)"
  },
  {
    "label": "GetVariableFrameStrippingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVariableFrameStrippingSettings(const UAnimSequence* AnimationSequence, UVariableFrameStrippingSettings*& VariableFrameStrippingSettings)"
  },
  {
    "label": "SetVariableFrameStrippingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableFrameStrippingSettings(UAnimSequence* AnimationSequence, UVariableFrameStrippingSettings* VariableFrameStrippingSettings)"
  },
  {
    "label": "GetAdditiveAnimationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAdditiveAnimationType(const UAnimSequence* AnimationSequence, TEnumAsByte<enum EAdditiveAnimationType>& AdditiveAnimationType)"
  },
  {
    "label": "SetAdditiveAnimationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditiveAnimationType(UAnimSequence* AnimationSequence, const TEnumAsByte<enum EAdditiveAnimationType> AdditiveAnimationType)"
  },
  {
    "label": "GetAdditiveBasePoseType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAdditiveBasePoseType(const UAnimSequence* AnimationSequence, TEnumAsByte<enum EAdditiveBasePoseType>& AdditiveBasePoseType)"
  },
  {
    "label": "SetAdditiveBasePoseType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditiveBasePoseType(UAnimSequence* AnimationSequence, const TEnumAsByte<enum EAdditiveBasePoseType> AdditiveBasePoseType)"
  },
  {
    "label": "GetAnimationInterpolationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationInterpolationType(const UAnimSequence* AnimationSequence, EAnimInterpolationType& InterpolationType)"
  },
  {
    "label": "SetAnimationInterpolationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationInterpolationType(UAnimSequence* AnimationSequence, EAnimInterpolationType InterpolationType)"
  },
  {
    "label": "IsRootMotionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootMotionEnabled(const UAnimSequence* AnimationSequence)"
  },
  {
    "label": "SetRootMotionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootMotionEnabled(UAnimSequence* AnimationSequence, bool bEnabled)"
  },
  {
    "label": "GetRootMotionLockType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootMotionLockType(const UAnimSequence* AnimationSequence, TEnumAsByte<ERootMotionRootLock::Type>& LockType)"
  },
  {
    "label": "SetRootMotionLockType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootMotionLockType(UAnimSequence* AnimationSequence, TEnumAsByte<ERootMotionRootLock::Type> RootMotionLockType)"
  },
  {
    "label": "IsRootMotionLockForced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootMotionLockForced(const UAnimSequence* AnimationSequence)"
  },
  {
    "label": "SetIsRootMotionLockForced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRootMotionLockForced(UAnimSequence* AnimationSequence, bool bForced)"
  },
  {
    "label": "GetAnimationSyncMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationSyncMarkers(const UAnimSequence* AnimationSequence, TArray<FAnimSyncMarker>& Markers)"
  },
  {
    "label": "GetUniqueMarkerNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUniqueMarkerNames(const UAnimSequence* AnimationSequence, TArray<FName>& MarkerNames)"
  },
  {
    "label": "AddAnimationSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimationSyncMarker(UAnimSequence* AnimationSequence, FName MarkerName, float Time, FName NotifyTrackName)"
  },
  {
    "label": "IsValidAnimationSyncMarkerName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAnimationSyncMarkerName(const UAnimSequence* AnimationSequence, FName MarkerName)"
  },
  {
    "label": "RemoveAnimationSyncMarkersByName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAnimationSyncMarkersByName(UAnimSequence* AnimationSequence, FName MarkerName)"
  },
  {
    "label": "RemoveAnimationSyncMarkersByTrack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAnimationSyncMarkersByTrack(UAnimSequence* AnimationSequence, FName NotifyTrackName)"
  },
  {
    "label": "RemoveAllAnimationSyncMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAnimationSyncMarkers(UAnimSequence* AnimationSequence)"
  },
  {
    "label": "GetAnimationNotifyEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationNotifyEvents(const UAnimSequenceBase* AnimationSequenceBase, TArray<FAnimNotifyEvent>& NotifyEvents)"
  },
  {
    "label": "GetAnimationNotifyEventNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationNotifyEventNames(const UAnimSequenceBase* AnimationSequenceBase, TArray<FName>& EventNames)"
  },
  {
    "label": "AddAnimationNotifyEventObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimationNotifyEventObject(UAnimSequenceBase* AnimationSequenceBase, float StartTime, UAnimNotify* Notify, FName NotifyTrackName)"
  },
  {
    "label": "AddAnimationNotifyStateEventObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimationNotifyStateEventObject(UAnimSequenceBase* AnimationSequenceBase, float StartTime, float Duration, UAnimNotifyState* NotifyState, FName NotifyTrackName)"
  },
  {
    "label": "RemoveAnimationNotifyEventsByName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAnimationNotifyEventsByName(UAnimSequenceBase* AnimationSequenceBase, FName NotifyName)"
  },
  {
    "label": "RemoveAnimationNotifyEventsByTrack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAnimationNotifyEventsByTrack(UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "ReplaceAnimNotifyStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAnimNotifyStates(UAnimSequenceBase* AnimationSequenceBase, TSubclassOf<UAnimNotifyState> OldNotifyClass, TSubclassOf<UAnimNotifyState> NewNotifyClass, FOnNotifyStateReplaced OnNotifyStateReplaced)"
  },
  {
    "label": "ReplaceAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAnimNotifies(UAnimSequenceBase* AnimationSequenceBase, TSubclassOf<UAnimNotify> OldNotifyClass, TSubclassOf<UAnimNotify> NewNotifyClass, FOnNotifyReplaced OnNotifyReplaced)"
  },
  {
    "label": "CopyAnimNotifiesFromSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAnimNotifiesFromSequence(UAnimSequenceBase* SourceAnimationSequenceBase, UAnimSequenceBase* DestinationAnimationSequenceBase, bool bDeleteExistingNotifies = false)"
  },
  {
    "label": "GetAnimationNotifyTrackNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationNotifyTrackNames(const UAnimSequenceBase* AnimationSequenceBase, TArray<FName>& TrackNames)"
  },
  {
    "label": "AddAnimationNotifyTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimationNotifyTrack(UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName, FLinearColor TrackColor = FLinearColor::White)"
  },
  {
    "label": "RemoveAnimationNotifyTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAnimationNotifyTrack(UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "RemoveAllAnimationNotifyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAnimationNotifyTracks(UAnimSequenceBase* AnimationSequenceBase)"
  },
  {
    "label": "IsValidAnimNotifyTrackName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAnimNotifyTrackName(const UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "GetTrackIndexForAnimationNotifyTrackName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTrackIndexForAnimationNotifyTrackName(const UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "GetAnimNotifyEventTriggerTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAnimNotifyEventTriggerTime(const FAnimNotifyEvent& NotifyEvent)"
  },
  {
    "label": "GetAnimNotifyEventDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAnimNotifyEventDuration(const FAnimNotifyEvent& NotifyEvent)"
  },
  {
    "label": "GetAnimationSyncMarkersForTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationSyncMarkersForTrack(const UAnimSequence* AnimationSequence, FName NotifyTrackName, TArray<FAnimSyncMarker>& Markers)"
  },
  {
    "label": "GetAnimationNotifyEventsForTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationNotifyEventsForTrack(const UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName, TArray<FAnimNotifyEvent>& Events)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurve(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, ERawCurveTrackTypes CurveType = ERawCurveTrackTypes::RCT_Float, bool bMetaDataCurve = false)"
  },
  {
    "label": "RemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurve(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, bool bRemoveNameFromSkeleton = false)"
  },
  {
    "label": "RemoveAllCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCurveData(UAnimSequenceBase* AnimationSequenceBase)"
  },
  {
    "label": "AddTransformationCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformationCurveKey(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const float Time, const FTransform& Transform)"
  },
  {
    "label": "AddTransformationCurveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformationCurveKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const TArray<float>& Times, const TArray<FTransform>& Transforms)"
  },
  {
    "label": "AddFloatCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloatCurveKey(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const float Time, const float Value)"
  },
  {
    "label": "AddFloatCurveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloatCurveKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const TArray<float>& Times, const TArray<float>& Values)"
  },
  {
    "label": "AddVectorCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVectorCurveKey(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const float Time, const FVector Vector)"
  },
  {
    "label": "AddVectorCurveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVectorCurveKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const TArray<float>& Times, const TArray<FVector>& Vectors)"
  },
  {
    "label": "AddCurveKeysInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveKeysInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const TArray<float>& Times, const TArray<DataType>& KeyData)"
  },
  {
    "label": "AddCurveInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, int32 CurveFlags, ERawCurveTrackTypes SupportedCurveType)"
  },
  {
    "label": "RemoveCurveInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, ERawCurveTrackTypes SupportedCurveType)"
  },
  {
    "label": "DoesBoneNameExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoesBoneNameExist(UAnimSequence* AnimationSequence, FName BoneName, bool& bExists)"
  },
  {
    "label": "DoesBoneNameExistInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesBoneNameExistInternal(USkeleton* Skeleton, FName BoneName)"
  },
  {
    "label": "GetFloatKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFloatKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, TArray<float>& Times, TArray<float>& Values)"
  },
  {
    "label": "GetVectorKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVectorKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, TArray<float>& Times, TArray<FVector>& Values)"
  },
  {
    "label": "GetTransformationKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransformationKeys(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, TArray<float>& Times, TArray<FTransform>& Values)"
  },
  {
    "label": "GetFloatValueAtTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFloatValueAtTime(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, float Time)"
  },
  {
    "label": "GetCurveKeysInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveKeysInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, TArray<float>& Times, TArray<DataType>& KeyData)"
  },
  {
    "label": "RemoveBoneAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBoneAnimation(UAnimSequence* AnimationSequence, FName BoneName, bool bIncludeChildren = true, bool bFinalize = true)"
  },
  {
    "label": "RemoveAllBoneAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllBoneAnimation(UAnimSequence* AnimationSequence)"
  },
  {
    "label": "DoesCurveExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesCurveExist(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, ERawCurveTrackTypes CurveType)"
  },
  {
    "label": "FSmartName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FSmartName(CurveName, 0)"
  },
  {
    "label": "RetrieveCurveTypeForCurve()",
    "kind": "Method",
    "detail": "Function (ERawCurveTrackTypes)",
    "insertText": "RetrieveCurveTypeForCurve(const UAnimSequenceBase* AnimationSequenceBase, FName CurveName)"
  },
  {
    "label": "AddMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetaData(UAnimationAsset* AnimationAsset, TSubclassOf<UAnimMetaData> MetaDataClass, UAnimMetaData*& MetaDataInstance)"
  },
  {
    "label": "AddMetaDataObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetaDataObject(UAnimationAsset* AnimationAsset, UAnimMetaData* MetaDataObject)"
  },
  {
    "label": "RemoveAllMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllMetaData(UAnimationAsset* AnimationAsset)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(UAnimationAsset* AnimationAsset, UAnimMetaData* MetaDataObject)"
  },
  {
    "label": "RemoveMetaDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaDataOfClass(UAnimationAsset* AnimationAsset, TSubclassOf<UAnimMetaData> MetaDataClass)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMetaData(const UAnimationAsset* AnimationAsset, TArray<UAnimMetaData*>& MetaData)"
  },
  {
    "label": "GetMetaDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMetaDataOfClass(const UAnimationAsset* AnimationAsset, TSubclassOf<UAnimMetaData> MetaDataClass, TArray<UAnimMetaData*>& MetaDataOfClass)"
  },
  {
    "label": "ContainsMetaDataOfClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsMetaDataOfClass(const UAnimationAsset* AnimationAsset, TSubclassOf<UAnimMetaData> MetaDataClass)"
  },
  {
    "label": "GetBonePoseForTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePoseForTime(const UAnimSequenceBase* AnimationSequenceBase, FName BoneName, float Time, bool bExtractRootMotion, FTransform& Pose)"
  },
  {
    "label": "GetBonePoseForFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePoseForFrame(const UAnimSequenceBase* AnimationSequenceBase, FName BoneName, int32 Frame, bool bExtractRootMotion, FTransform& Pose)"
  },
  {
    "label": "GetBonePosesForTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePosesForTime(const UAnimSequenceBase* AnimationSequenceBase, TArray<FName> BoneNames, float Time, bool bExtractRootMotion, TArray<FTransform>& Poses, const USkeletalMesh* PreviewMesh = nullptr)"
  },
  {
    "label": "GetBonePosesForFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePosesForFrame(const UAnimSequenceBase* AnimationSequenceBase, TArray<FName> BoneNames, int32 Frame, bool bExtractRootMotion, TArray<FTransform>& Poses, const USkeletalMesh* PreviewMesh = nullptr)"
  },
  {
    "label": "AddVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVirtualBone(const UAnimSequence* AnimationSequence, FName SourceBoneName, FName TargetBoneName, FName& VirtualBoneName)"
  },
  {
    "label": "RemoveVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVirtualBone(const UAnimSequence* AnimationSequence, FName VirtualBoneName)"
  },
  {
    "label": "RemoveVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVirtualBones(const UAnimSequence* AnimationSequence, TArray<FName> VirtualBoneNames)"
  },
  {
    "label": "RemoveAllVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllVirtualBones(const UAnimSequence* AnimationSequence)"
  },
  {
    "label": "DoesVirtualBoneNameExistInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesVirtualBoneNameExistInternal(USkeleton* Skeleton, FName BoneName)"
  },
  {
    "label": "GetSequenceLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSequenceLength(const UAnimSequenceBase* AnimationSequenceBase, float& Length)"
  },
  {
    "label": "GetRateScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRateScale(const UAnimSequenceBase* AnimationSequenceBase, float& RateScale)"
  },
  {
    "label": "SetRateScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRateScale(UAnimSequenceBase* AnimationSequenceBase, float RateScale)"
  },
  {
    "label": "GetFrameAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFrameAtTime(const UAnimSequenceBase* AnimationSequenceBase, const float Time, int32& Frame)"
  },
  {
    "label": "GetTimeAtFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeAtFrame(const UAnimSequenceBase* AnimationSequenceBase, const int32 Frame, float& Time)"
  },
  {
    "label": "GetTimeAtFrameInternal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeAtFrameInternal(const UAnimSequenceBase* AnimationSequenceBase, const int32 Frame)"
  },
  {
    "label": "IsValidTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsValidTime(const UAnimSequenceBase* AnimationSequenceBase, const float Time, bool& IsValid)"
  },
  {
    "label": "IsValidTimeInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTimeInternal(const UAnimSequenceBase* AnimationSequenceBase, const float Time)"
  },
  {
    "label": "FindBoneNameWithTimecodeAttributes()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindBoneNameWithTimecodeAttributes(const UAnimSequenceBase* AnimSequenceBase)"
  },
  {
    "label": "EvaluateRootBoneTimecodeAttributesAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateRootBoneTimecodeAttributesAtTime(const UAnimSequenceBase* AnimationSequenceBase, const float EvalTime, FQualifiedFrameTime& OutQualifiedFrameTime)"
  },
  {
    "label": "EvaluateBoneTimecodeAndSlateAttributesAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateBoneTimecodeAndSlateAttributesAtTime(const FName BoneName, const UAnimSequenceBase* AnimationSequenceBase, const float EvalTime, FQualifiedFrameTime& OutQualifiedFrameTime, FString& Slate)"
  },
  {
    "label": "EvaluateRootBoneTimecodeSubframeAttributeAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateRootBoneTimecodeSubframeAttributeAtTime(const UAnimSequenceBase* AnimationSequenceBase, const float EvalTime, float& OutSubframe)"
  },
  {
    "label": "FindBonePathToRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBonePathToRoot(const UAnimSequenceBase* AnimationSequenceBase, FName BoneName, TArray<FName>& BonePath)"
  },
  {
    "label": "GetAnimationGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationGraphs(UAnimBlueprint* AnimationBlueprint, TArray<UAnimationGraph*>& AnimationGraphs)"
  },
  {
    "label": "GetNodesOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodesOfClass(UAnimBlueprint* AnimationBlueprint, TSubclassOf<UAnimGraphNode_Base> NodeClass, TArray<UAnimGraphNode_Base*>& GraphNodes, bool bIncludeChildClasses = true)"
  },
  {
    "label": "AddNodeAssetOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeAssetOverride(UAnimBlueprint* AnimBlueprint, const UAnimationAsset* Target, UAnimationAsset* Override, bool bPrintAppliedOverrides = false)"
  }
]