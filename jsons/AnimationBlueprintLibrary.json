[
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "UAnimCurveCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveCompressionSettings"
  },
  {
    "label": "UVariableFrameStrippingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVariableFrameStrippingSettings"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "UAnimMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMetaData"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotify"
  },
  {
    "label": "UAnimNotifyState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimNotifyState"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAnimationGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationGraph"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ANIMATIONBLUEPRINTLIBRARY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMATIONBLUEPRINTLIBRARY_API"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "EAdditiveBasePoseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveBasePoseType"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimEnums . h \" # include \" Animation / AnimMetaData . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / SmartName . h \" # include \" AnimationGraph . h \" # include \" Containers / Array . h \" # include \" Containers / EnumAsByte . h \" # include \" Delegates / Delegate . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Math / Color . h \" # include \" Math / Quat . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" AnimationBlueprintLibrary . generated . h \" class UAnimBlueprint ; class UAnimBoneCompressionSettings ; class UAnimCompress ; class UAnimCurveCompressionSettings ; class UVariableFrameStrippingSettings ; class UAnimGraphNode_Base ; class UAnimMetaData ; class UAnimMontage ; class UAnimNotify ; class UAnimNotifyState ; class UAnimSequence ; class UAnimSequenceBase ; class UAnimationAsset ; class UAnimationGraph ; class UObject ; class USkeletalMesh ; class USkeleton ; struct FFrame ; struct FQualifiedFrameTime ; struct FRawAnimSequenceTrack ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SNCT_CurveMapping)",
    "insertText": "UMETA(DisplayName = \"Curve Names\"), SNCT_TrackCurveMapping UMETA(DisplayName = \"Track Curve Names\")"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FOnNotifyReplaced, UAnimNotify*, OldNotify, UAnimNotify*, NewNotify)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FOnNotifyStateReplaced, UAnimNotifyState*, OldNotifyState, UAnimNotifyState*, NewNotifyState)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(meta=(ScriptName=\"AnimationLibrary\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintPure, meta=(AutoCreateRefTerm = \"AnimationSequence\"), Category = \"AnimationBlueprintLibrary|Animation\") static void GetNumFrames(const UAnimSequenceBase* AnimationSequenceBase, int32& NumFrames)"
  },
  {
    "label": "GetTrackIndexForAnimationNotifyTrackName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTrackIndexForAnimationNotifyTrackName(const UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "GetNotifyTrackByName()",
    "kind": "Method",
    "detail": "Function (const FAnimNotifyTrack&)",
    "insertText": "GetNotifyTrackByName(const UAnimSequenceBase* AnimationSequenceBase, FName NotifyTrackName)"
  },
  {
    "label": "AddCurveKeysInternal()",
    "kind": "Method",
    "detail": "Function (template<DataType,CurveClass,ERawCurveTrackTypes CurveType> void)",
    "insertText": "AddCurveKeysInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, const TArray<float>& Times, const TArray<DataType>& KeyData)"
  },
  {
    "label": "AddCurveInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, int32 CurveFlags, ERawCurveTrackTypes SupportedCurveType)"
  },
  {
    "label": "RemoveCurveInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, ERawCurveTrackTypes SupportedCurveType)"
  },
  {
    "label": "DoesBoneNameExistInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesBoneNameExistInternal(USkeleton* Skeleton, FName BoneName)"
  },
  {
    "label": "GetCurveKeysInternal()",
    "kind": "Method",
    "detail": "Function (template<DataType,CurveClass,ERawCurveTrackTypes CurveType> void)",
    "insertText": "GetCurveKeysInternal(UAnimSequenceBase* AnimationSequenceBase, FName CurveName, TArray<float>& Times, TArray<DataType>& KeyData)"
  },
  {
    "label": "FSmartName()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "FSmartName(CurveName, 0)"
  },
  {
    "label": "DoesVirtualBoneNameExistInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesVirtualBoneNameExistInternal(USkeleton* Skeleton, FName BoneName)"
  },
  {
    "label": "GetTimeAtFrameInternal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeAtFrameInternal(const UAnimSequenceBase* AnimationSequenceBase, const int32 Frame)"
  },
  {
    "label": "IsValidTimeInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTimeInternal(const UAnimSequenceBase* AnimationSequenceBase, const float Time)"
  },
  {
    "label": "FindBoneNameWithTimecodeAttributes()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindBoneNameWithTimecodeAttributes(const UAnimSequenceBase* AnimSequenceBase)"
  }
]