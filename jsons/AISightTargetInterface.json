[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UAISightTargetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISightTargetInterface"
  },
  {
    "label": "FCanBeSeenFromContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanBeSeenFromContext"
  },
  {
    "label": "IAISightTargetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAISightTargetInterface"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AISense_Sight . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Interface . h \" # include \" AISightTargetInterface . generated . h \" class AActor ;)",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_UINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UINTERFACE_BODY()"
  },
  {
    "label": "GENERATED_IINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (struct FCanBeSeenFromContext { FAISightQueryID SightQueryID ; FVector ObserverLocation ; const AActor* IgnoreActor = nullptr ; const bool* bWasVisible = nullptr ; } ; class IAISightTargetInterface {)",
    "insertText": "GENERATED_IINTERFACE_BODY() virtual UAISense_Sight::EVisibilityResult CanBeSeenFrom(const FCanBeSeenFromContext& Context, FVector& OutSeenLocation, int32& OutNumberOfLoSChecksPerformed, int32& OutNumberOfAsyncLosCheckRequested, float& OutSightStrength, int32* UserData = nullptr, const FOnPendingVisibilityQueryProcessedDelegate* Delegate = nullptr)"
  },
  {
    "label": "CanBeSeenFrom()",
    "kind": "Method",
    "detail": "Function (OutNumberOfAsyncLosCheckRequested = 0 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS const bool bCanBeSeenFrom =)",
    "insertText": "CanBeSeenFrom(Context.ObserverLocation, OutSeenLocation, OutNumberOfLoSChecksPerformed, OutSightStrength, Context.IgnoreActor, Context.bWasVisible, UserData)"
  }
]