[
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyDrawParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawParams"
  },
  {
    "label": "FMovieSceneChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannel"
  },
  {
    "label": "TMovieSceneExternalValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneExternalValue"
  },
  {
    "label": "TMovieSceneChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelData"
  },
  {
    "label": "TExtendKeyMenuParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TExtendKeyMenuParams"
  },
  {
    "label": "FSequencerChannelPaintArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerChannelPaintArgs"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "STrackAreaLaneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaLaneView"
  },
  {
    "label": "FCreateTrackLaneViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateTrackLaneViewParams"
  },
  {
    "label": "ExtendSectionMenu()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelData . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" Evaluation / MovieSceneRootOverridePath . h \" # include \" ISequencer . h \" # include \" ISequencerChannelInterface . h \" # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" MovieSceneClipboard . h \" # include \" MovieSceneSection . h \" # include \" MVVM / Views / KeyDrawParams . h \" # include \" SequencerClipboardReconciler . h \" # include \" SequencerKeyStructGenerator . h \" # include \" Templates / Decay . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / SNullWidget . h \" # include \" TimeToPixel . h \" class FCurveModel ; class FMenuBuilder ; class FSequencerSectionPainter ; class FStructOnScope ; class FTrackInstancePropertyBindings ; class SWidget ; class UMovieSceneTrack ; class UObject ; struct FGeometry ; struct FKeyDrawParams ; struct FMovieSceneChannel ; template<T> struct TMovieSceneExternalValue ; template<ValueType> struct TMovieSceneChannelData ; template<ChannelType> struct TExtendKeyMenuParams { TWeakObjectPtr<UMovieSceneSection> Section ; TWeakObjectPtr<UObject> WeakOwner ; TMovieSceneChannelHandle<ChannelType> Channel ; TArray<FKeyHandle> Handles ; } ; struct FSequencerChannelPaintArgs { FSlateWindowElementList& DrawElements ; const FPaintArgs& WidgetPaintArgs ; const FGeometry& Geometry ; const FSlateRect& MyCullingRect ; const FWidgetStyle& WidgetStyle ; FTimeToPixel TimeToPixel ; bool bParentEnabled = true ; } ; namespace UE::Sequencer { class FChannelModel ; class STrackAreaLaneView ; struct FCreateTrackLaneViewParams ; } namespace Sequencer { template<ChannelType> void)",
    "insertText": "ExtendSectionMenu(FMenuBuilder& MenuBuilder , TSharedPtr<FExtender> InMenuExtender , TArray<TMovieSceneChannelHandle<ChannelType>>&& InChannels , const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections , TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "ExtendSidebarMenu()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> TSharedPtr<ISidebarChannelExtension>)",
    "insertText": "ExtendSidebarMenu(FMenuBuilder& MenuBuilder , TSharedPtr<FExtender> InMenuExtender , TArray<TMovieSceneChannelHandle<ChannelType>>&& InChannels , const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections , TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "GetKeyStruct()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> TSharedPtr<FStructOnScope>)",
    "insertText": "GetKeyStruct(const TMovieSceneChannelHandle<ChannelType>& ChannelHandle, FKeyHandle KeyHandle)"
  },
  {
    "label": "CanCreateKeyEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCreateKeyEditor(const FMovieSceneChannel* InChannel)"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; ValueType ValueAtTime = InDefaultValue ;)",
    "insertText": "EvaluateChannel(InChannel, InTime, ValueAtTime)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation InterpolationMode =)",
    "insertText": "GetInterpolationMode(InChannel, InTime, InSequencer.GetKeyInterpolation())"
  },
  {
    "label": "AddKeyForExternalValue()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> TOptional<FKeyHandle>)",
    "insertText": "AddKeyForExternalValue(ChannelType* InChannel, const TMovieSceneExternalValue<ValueType>& InExternalValue, FFrameNumber InTime, ISequencer& InSequencer, const FGuid& InObjectBindingID, FTrackInstancePropertyBindings* InPropertyBindings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "if(InExternalValue.OnGetExternalValue && InObjectBindingID.IsValid())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UObject* Object = WeakObject .)",
    "insertText": "Get()"
  },
  {
    "label": "OnGetExternalValue()",
    "kind": "Method",
    "detail": "Function (TOptional<ValueType> Value = InExternalValue .)",
    "insertText": "OnGetExternalValue(*Object, InPropertyBindings)"
  },
  {
    "label": "FKeyHandle()",
    "kind": "Method",
    "detail": "Function (} } } } return TOptional<)",
    "insertText": "FKeyHandle()"
  },
  {
    "label": "AddOrUpdateKey()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> FKeyHandle)",
    "insertText": "AddOrUpdateKey(ChannelType* InChannel, UMovieSceneSection* InSectionToKey, FFrameNumber InTime, ISequencer& InSequencer, const FGuid& InObjectBindingID, FTrackInstancePropertyBindings* InPropertyBindings)"
  },
  {
    "label": "AddOrUpdateKey()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> FKeyHandle)",
    "insertText": "AddOrUpdateKey(ChannelType* InChannel, UMovieSceneSection* SectionToKey, const TMovieSceneExternalValue<ValueType>& InExternalValue, FFrameNumber InTime, ISequencer& InSequencer, const FGuid& InObjectBindingID, FTrackInstancePropertyBindings* InPropertyBindings)"
  },
  {
    "label": "AddKeyForExternalValue()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; TOptional<FKeyHandle> Handle =)",
    "insertText": "AddKeyForExternalValue(InChannel, InExternalValue, InTime, InSequencer, InObjectBindingID, InPropertyBindings)"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (Handle =)",
    "insertText": "AddKeyToChannel(InChannel, InTime, ValueAtTime, InterpolationMode)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return Handle .)",
    "insertText": "GetValue()"
  },
  {
    "label": "DrawKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawKeys(FMovieSceneChannel* Channel, TArrayView<const FKeyHandle> InHandles, const UMovieSceneSection* InOwner, TArrayView<FKeyDrawParams> OutKeyDrawParams)"
  },
  {
    "label": "DrawExtra()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawExtra(FMovieSceneChannel* InChannel, const UMovieSceneSection* InOwner, const FSequencerChannelPaintArgs& PaintArgs, int32 LayerId)"
  },
  {
    "label": "CopyKeys()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "CopyKeys(ChannelType* InChannel, const UMovieSceneSection* InSection, FName KeyAreaName, FMovieSceneClipboardBuilder& ClipboardBuilder, TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "UMovieSceneTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack* Track = InSection ? InSection -> GetTypedOuter<)",
    "insertText": "UMovieSceneTrack()"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FFrameNumber> Times = ChannelData .)",
    "insertText": "GetTimes()"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (auto Values = ChannelData .)",
    "insertText": "GetValues()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex = ChannelData .)",
    "insertText": "GetIndex(Handle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FFrameNumber KeyTime = Times [ KeyIndex ] ; auto KeyValue = Values [ KeyIndex ] ;)",
    "insertText": "if(!KeyTrack)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (KeyTrack =& ClipboardBuilder . FindOrAddKeyTrack<)",
    "insertText": "decltype(KeyValue)>(KeyAreaName, *Track)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} KeyTrack ->)",
    "insertText": "AddKey(KeyTime, KeyValue)"
  },
  {
    "label": "PasteKeys()",
    "kind": "Method",
    "detail": "Function (} } } template<ChannelType> void)",
    "insertText": "PasteKeys(ChannelType* InChannel, UMovieSceneSection* Section, const FMovieSceneClipboardKeyTrack& KeyTrack, const FMovieSceneClipboardEnvironment& SrcEnvironment, const FSequencerPasteEnvironment& DstEnvironment, TArray<FKeyHandle>& OutPastedKeys)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (FFrameTime PasteAt = DstEnvironment . CardinalTime ; auto ChannelData = InChannel ->)",
    "insertText": "GetData()"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber> NewRange = Section ->)",
    "insertText": "GetRange()"
  },
  {
    "label": "DstEnvironment()",
    "kind": "Method",
    "detail": "Function (auto ForEachKey = [ Section,PasteAt,& NewRange,& ChannelData,& OutPastedKeys,& SrcEnvironment,&)",
    "insertText": "DstEnvironment(const FMovieSceneClipboardKey& Key)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Time(PasteAt + FFrameRate::TransformTime(Key.GetTime(), SrcEnvironment.TickResolution, DstEnvironment.TickResolution)).FloorToFrame()"
  },
  {
    "label": "Hull()",
    "kind": "Method",
    "detail": "Function (NewRange = TRange<FFrameNumber)",
    "insertText": "Hull(NewRange, TRange<FFrameNumber>(Time))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef TDecay<)",
    "insertText": "decltype(ChannelData.GetValues()[0])"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (KeyType NewKey = Key . GetValue<)",
    "insertText": "KeyType()"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle KeyHandle = ChannelData .)",
    "insertText": "UpdateOrAddKey(Time, NewKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPastedKeys .)",
    "insertText": "Add(KeyHandle)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (Section ->)",
    "insertText": "SetRange(NewRange)"
  },
  {
    "label": "SupportsCurveEditorModels()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsCurveEditorModels(const FMovieSceneChannelHandle& ChannelHandle)"
  },
  {
    "label": "CreateCurveEditorModel()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FCurveModel>)",
    "insertText": "CreateCurveEditorModel(const FMovieSceneChannelHandle& ChannelHandle, const UE::Sequencer::FCreateCurveEditorModelParams& Params)"
  },
  {
    "label": "CreateChannelModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::FChannelModel>)",
    "insertText": "CreateChannelModel(const FMovieSceneChannelHandle& InChannelHandle, const UE::Sequencer::FSectionModel& InSection, FName InChannelName)"
  }
]