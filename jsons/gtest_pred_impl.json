[
  {
    "label": "GTEST_ASSERT_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_ # include \" gtest / gtest - assertion - result . h \" # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - port . h \" namespace testing { # define)",
    "insertText": "GTEST_ASSERT_(expression, on_failure) \\ GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\ if (const ::testing::AssertionResult gtest_ar = (expression))"
  },
  {
    "label": "on_failure()",
    "kind": "Method",
    "detail": "Function (\\ else \\)",
    "insertText": "on_failure(gtest_ar.failure_message()) template <typename Pred, typename T1> AssertionResult AssertPred1Helper(const char* pred_text, const char* e1, Pred pred, const T1& v1)"
  },
  {
    "label": "GTEST_PRED_FORMAT1_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "GTEST_PRED_FORMAT1_(pred_format, v1, on_failure) \\ GTEST_ASSERT_(pred_format(#v1, v1), on_failure) #define GTEST_PRED1_(pred, v1, on_failure) \\ GTEST_ASSERT_(::testing::AssertPred1Helper(#pred, #v1, pred, v1), on_failure) #define EXPECT_PRED_FORMAT1(pred_format, v1) \\ GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_NONFATAL_FAILURE_) #define EXPECT_PRED1(pred, v1) GTEST_PRED1_(pred, v1, GTEST_NONFATAL_FAILURE_) #define ASSERT_PRED_FORMAT1(pred_format, v1) \\ GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_FATAL_FAILURE_) #define ASSERT_PRED1(pred, v1) GTEST_PRED1_(pred, v1, GTEST_FATAL_FAILURE_) template <typename Pred, typename T1, typename T2> AssertionResult AssertPred2Helper(const char* pred_text, const char* e1, const char* e2, Pred pred, const T1& v1, const T2& v2)"
  },
  {
    "label": "GTEST_PRED_FORMAT2_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "GTEST_PRED_FORMAT2_(pred_format, v1, v2, on_failure) \\ GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2), on_failure) #define GTEST_PRED2_(pred, v1, v2, on_failure) \\ GTEST_ASSERT_(::testing::AssertPred2Helper(#pred, #v1, #v2, pred, v1, v2), \\ on_failure) #define EXPECT_PRED_FORMAT2(pred_format, v1, v2) \\ GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_NONFATAL_FAILURE_) #define EXPECT_PRED2(pred, v1, v2) \\ GTEST_PRED2_(pred, v1, v2, GTEST_NONFATAL_FAILURE_) #define ASSERT_PRED_FORMAT2(pred_format, v1, v2) \\ GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_) #define ASSERT_PRED2(pred, v1, v2) \\ GTEST_PRED2_(pred, v1, v2, GTEST_FATAL_FAILURE_) template <typename Pred, typename T1, typename T2, typename T3> AssertionResult AssertPred3Helper(const char* pred_text, const char* e1, const char* e2, const char* e3, Pred pred, const T1& v1, const T2& v2, const T3& v3)"
  },
  {
    "label": "GTEST_PRED_FORMAT3_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, on_failure) \\ GTEST_ASSERT_(pred_format(#v1, #v2, #v3, v1, v2, v3), on_failure) #define GTEST_PRED3_(pred, v1, v2, v3, on_failure) \\ GTEST_ASSERT_( \\ ::testing::AssertPred3Helper(#pred, #v1, #v2, #v3, pred, v1, v2, v3), \\ on_failure) #define EXPECT_PRED_FORMAT3(pred_format, v1, v2, v3) \\ GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_NONFATAL_FAILURE_) #define EXPECT_PRED3(pred, v1, v2, v3) \\ GTEST_PRED3_(pred, v1, v2, v3, GTEST_NONFATAL_FAILURE_) #define ASSERT_PRED_FORMAT3(pred_format, v1, v2, v3) \\ GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_FATAL_FAILURE_) #define ASSERT_PRED3(pred, v1, v2, v3) \\ GTEST_PRED3_(pred, v1, v2, v3, GTEST_FATAL_FAILURE_) template <typename Pred, typename T1, typename T2, typename T3, typename T4> AssertionResult AssertPred4Helper(const char* pred_text, const char* e1, const char* e2, const char* e3, const char* e4, Pred pred, const T1& v1, const T2& v2, const T3& v3, const T4& v4)"
  },
  {
    "label": "GTEST_PRED_FORMAT4_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, on_failure) \\ GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, v1, v2, v3, v4), on_failure) #define GTEST_PRED4_(pred, v1, v2, v3, v4, on_failure) \\ GTEST_ASSERT_(::testing::AssertPred4Helper(#pred, #v1, #v2, #v3, #v4, pred, \\ v1, v2, v3, v4), \\ on_failure) #define EXPECT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \\ GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_) #define EXPECT_PRED4(pred, v1, v2, v3, v4) \\ GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_) #define ASSERT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \\ GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_FATAL_FAILURE_) #define ASSERT_PRED4(pred, v1, v2, v3, v4) \\ GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_FATAL_FAILURE_) template <typename Pred, typename T1, typename T2, typename T3, typename T4, typename T5> AssertionResult AssertPred5Helper(const char* pred_text, const char* e1, const char* e2, const char* e3, const char* e4, const char* e5, Pred pred, const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5)"
  }
]