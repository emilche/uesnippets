[
  {
    "label": "TImplicitSolidify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitSolidify"
  },
  {
    "label": "FWindingNumberBasedSolidify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindingNumberBasedSolidify"
  },
  {
    "label": "TImplicitSolidify()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / FastWinding . h \" # include \" Generators / MarchingCubes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<TriangleMeshType> class TImplicitSolidify { public :)",
    "insertText": "TImplicitSolidify(const TriangleMeshType* Source = nullptr, TMeshAABBTree3<TriangleMeshType>* SourceSpatial = nullptr, TFastWindingTree<TriangleMeshType>* SourceWinding = nullptr) : Source(Source), SourceSpatial(SourceSpatial), SourceWinding(SourceWinding)"
  },
  {
    "label": "SetCellSizeAndExtendBounds()",
    "kind": "Method",
    "detail": "Function (} const TriangleMeshType* Source = nullptr ; TMeshAABBTree3<TriangleMeshType>* SourceSpatial = nullptr ; TFastWindingTree<TriangleMeshType>* SourceWinding = nullptr ; double WindingThreshold = . 5 ; double ExtendBounds = 1 ; bool bSolidAtBoundaries = true ; int SurfaceSearchSteps = 4 ; double MeshCellSize = 1 . 0 ; void)",
    "insertText": "SetCellSizeAndExtendBounds(FAxisAlignedBox3d Bounds, double ExtendBoundsIn, int TargetOutputVoxelCount)"
  },
  {
    "label": "MeshCellSize()",
    "kind": "Method",
    "detail": "Function (ExtendBounds = ExtendBoundsIn ;)",
    "insertText": "MeshCellSize(Bounds.MaxDim() + ExtendBounds * 2.0) / double(TargetOutputVoxelCount)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} TFunction<)",
    "insertText": "bool(void)> CancelF = []()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool bValidMeshAndSpatial = Source ! = nullptr&& SourceSpatial ! = nullptr&& SourceSpatial ->)",
    "insertText": "IsValid(false)"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (bool bValidWinding = SourceWinding ! = nullptr ; bool bValidParams = SurfaceSearchSteps> = 0&& MeshCellSize> 0&&)",
    "insertText": "IsFinite(MeshCellSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MarchingCubes .)",
    "insertText": "Reset()"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (InternalBounds .)",
    "insertText": "Expand(ExtendBounds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MarchingCubes . CubeSize = MeshCellSize ; MarchingCubes . Bounds = InternalBounds ;)",
    "insertText": "if(bSolidAtBoundaries)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (MarchingCubes . Bounds .)",
    "insertText": "Expand(MeshCellSize * .1)"
  },
  {
    "label": "InternalBounds()",
    "kind": "Method",
    "detail": "Function (MarchingCubes . Implicit = [ this,)",
    "insertText": "InternalBounds(const FVector3d& Pos)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (} ; } else { MarchingCubes . Implicit = [)",
    "insertText": "this(const FVector3d& Pos)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ; } TArray<FVector3d> MCSeeds ;)",
    "insertText": "for(int32 VertIdx : Source->VertexIndicesItr())"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d Vertex = Source ->)",
    "insertText": "GetVertex(VertIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MCSeeds .)",
    "insertText": "Add(Vertex)"
  },
  {
    "label": "GenerateContinuation()",
    "kind": "Method",
    "detail": "Function (} } MarchingCubes .)",
    "insertText": "GenerateContinuation(MCSeeds)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> WindingFunction =)",
    "insertText": "MoveTemp(WindingFunctionIn)"
  },
  {
    "label": "FWindingNumberBasedSolidify()",
    "kind": "Method",
    "detail": "Function (this -> FunctionBounds = BoundsIn ; this -> SeedPoints = SeedPointsIn ; } ~)",
    "insertText": "FWindingNumberBasedSolidify()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} TUniqueFunction<)",
    "insertText": "double(const FVector3d&)> WindingFunction = [](const FVector3d& Pos)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ; } TArray<TVector<double>> MCSeeds ;)",
    "insertText": "for(const FVector3d& SeedPoint : SeedPoints)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MCSeeds .)",
    "insertText": "Add(SeedPoint)"
  }
]