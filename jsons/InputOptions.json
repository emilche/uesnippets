[
  {
    "label": "InputOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InputOptions"
  },
  {
    "label": "InputImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InputImage"
  },
  {
    "label": "Private()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_TT_INPUTOPTIONS_H # define NV_TT_INPUTOPTIONS_H # include<nvcore / Ptr . h> # include<nvmath / Vector . h> # include<nvmath / Matrix . h> # include<nvimage / Image . h> # include \" nvtt . h \" namespace nvtt { struct InputOptions::Private {)",
    "insertText": "Private() : images(NULL)"
  },
  {
    "label": "computeTargetExtents()",
    "kind": "Method",
    "detail": "Function (} WrapMode wrapMode ; TextureType textureType ; InputFormat inputFormat ; AlphaMode alphaMode ; uint faceCount ; uint mipmapCount ; uint imageCount ; struct InputImage ; InputImage* images ; float inputGamma ; float outputGamma ; ColorTransform colorTransform ; nv::Matrix linearTransform ; bool generateMipmaps ; int maxLevel ; MipmapFilter mipmapFilter ; float kaiserWidth ; float kaiserAlpha ; float kaiserStretch ; bool isNormalMap ; bool normalizeMipmaps ; bool convertToNormalMap ; nv::Vector4 heightFactors ; nv::Vector4 bumpFrequencyScale ; uint maxExtent ; RoundMode roundMode ; uint targetWidth ; uint targetHeight ; uint targetDepth ; uint targetMipmapCount ; void)",
    "insertText": "computeTargetExtents()"
  },
  {
    "label": "realMipmapCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "realMipmapCount()"
  },
  {
    "label": "image()",
    "kind": "Method",
    "detail": "Function (const nv::Image*)",
    "insertText": "image(uint face, uint mipmap)"
  },
  {
    "label": "image()",
    "kind": "Method",
    "detail": "Function (const nv::Image*)",
    "insertText": "image(uint idx)"
  },
  {
    "label": "InputImage()",
    "kind": "Method",
    "detail": "Function (} ; struct InputOptions::Private::InputImage {)",
    "insertText": "InputImage()"
  }
]