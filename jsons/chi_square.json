[
  {
    "label": "ChiSquareWithExpected()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_CHI_SQUARE_H_ # define ABSL_RANDOM_INTERNAL_CHI_SQUARE_H_ # include<cassert> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { const char kChiSquared [ ] = \" chi - squared \" ; template<Iterator> double)",
    "insertText": "ChiSquareWithExpected(Iterator begin, Iterator end, double expected)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(expected >= 10)"
  },
  {
    "label": "ChiSquare()",
    "kind": "Method",
    "detail": "Function (chi_square + = d* d ; } chi_square = chi_square / expected ; return chi_square ; } template<Iterator,Expected> double)",
    "insertText": "ChiSquare(Iterator it, Iterator end, Expected eit, Expected eend)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(*eit > 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} double e = static_cast<)",
    "insertText": "double(*eit)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(e > 0)"
  },
  {
    "label": "chi_square()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "chi_square(d * d)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "assert(it == end && eit == eend)"
  }
]