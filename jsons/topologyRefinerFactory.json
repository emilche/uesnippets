[
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "TopologyRefinerFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefinerFactoryBase"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "TopologyRefinerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefinerFactory"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "method",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "method"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "prepareComponentTopologySizing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareComponentTopologySizing(TopologyRefiner& refiner)"
  },
  {
    "label": "prepareComponentTopologyAssignment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareComponentTopologyAssignment(TopologyRefiner& refiner, bool fullValidation,\n                                                   TopologyCallback callback, void const * callbackData)"
  },
  {
    "label": "prepareComponentTagsAndSharpness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareComponentTagsAndSharpness(TopologyRefiner& refiner)"
  },
  {
    "label": "prepareFaceVaryingChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareFaceVaryingChannels(TopologyRefiner& refiner)"
  },
  {
    "label": "resizeComponentTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resizeComponentTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignComponentTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignComponentTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignComponentTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignComponentTags(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignFaceVaryingTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignFaceVaryingTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "reportInvalidTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reportInvalidTopology(TopologyError errCode, char const * msg, MESH const& mesh)"
  },
  {
    "label": "setNumBaseVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseVertices(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseFaces(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseEdges(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseFaceVertices(TopologyRefiner & newRefiner, Index f, int count)"
  },
  {
    "label": "setNumBaseEdgeFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseEdgeFaces(TopologyRefiner & newRefiner, Index e, int count)"
  },
  {
    "label": "setNumBaseVertexFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseVertexFaces(TopologyRefiner & newRefiner, Index v, int count)"
  },
  {
    "label": "setNumBaseVertexEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseVertexEdges(TopologyRefiner & newRefiner, Index v, int count)"
  },
  {
    "label": "getNumBaseVertices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseVertices(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getNumBaseFaces()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseFaces(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getNumBaseEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseEdges(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getBaseFaceVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceVertices(TopologyRefiner & newRefiner, Index f)"
  },
  {
    "label": "getBaseFaceEdges()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceEdges(TopologyRefiner & newRefiner,    Index f)"
  },
  {
    "label": "getBaseEdgeVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseEdgeVertices(TopologyRefiner & newRefiner, Index e)"
  },
  {
    "label": "getBaseEdgeFaces()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseEdgeFaces(TopologyRefiner & newRefiner,    Index e)"
  },
  {
    "label": "getBaseVertexFaces()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseVertexFaces(TopologyRefiner & newRefiner,  Index v)"
  },
  {
    "label": "getBaseVertexEdges()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseVertexEdges(TopologyRefiner & newRefiner,  Index v)"
  },
  {
    "label": "getBaseVertexFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseVertexFaceLocalIndices(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseVertexEdgeLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseVertexEdgeLocalIndices(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseEdgeFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseEdgeFaceLocalIndices(TopologyRefiner & newRefiner, Index e)"
  },
  {
    "label": "populateBaseLocalIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateBaseLocalIndices(TopologyRefiner & newRefiner)"
  },
  {
    "label": "setBaseEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseEdgeNonManifold(TopologyRefiner & newRefiner, Index e, bool b)"
  },
  {
    "label": "setBaseVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseVertexNonManifold(TopologyRefiner & newRefiner, Index v, bool b)"
  },
  {
    "label": "findBaseEdge()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findBaseEdge(TopologyRefiner const & newRefiner, Index v0, Index v1)"
  },
  {
    "label": "setBaseEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseEdgeSharpness(TopologyRefiner & newRefiner, Index e, float sharpness)"
  },
  {
    "label": "setBaseVertexSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseVertexSharpness(TopologyRefiner & newRefiner, Index v, float sharpness)"
  },
  {
    "label": "setBaseFaceHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseFaceHole(TopologyRefiner & newRefiner, Index f, bool isHole)"
  },
  {
    "label": "createBaseFVarChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "createBaseFVarChannel(TopologyRefiner & newRefiner, int numValues)"
  },
  {
    "label": "createBaseFVarChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "createBaseFVarChannel(TopologyRefiner & newRefiner, int numValues, Sdc::Options const& fvarOptions)"
  },
  {
    "label": "getBaseFaceFVarValues()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceFVarValues(TopologyRefiner & newRefiner, Index face, int channel = 0)"
  },
  {
    "label": "populateBaseLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "populateBaseLevel(TopologyRefiner& refiner, MESH const& mesh, Options options)"
  },
  {
    "label": "TopologyRefiner()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "TopologyRefiner(options.schemeType, options.schemeOptions)"
  },
  {
    "label": "TopologyRefiner()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "TopologyRefiner(source)"
  },
  {
    "label": "setBaseEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseEdgeNonManifold(TopologyRefiner& newRefiner, Index edge, bool b)"
  },
  {
    "label": "setBaseVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseVertexNonManifold(TopologyRefiner& newRefiner, Index vertex, bool b)"
  }
]