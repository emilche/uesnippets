[
  {
    "label": "TopologyRefinerFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefinerFactoryBase"
  },
  {
    "label": "MESH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESH"
  },
  {
    "label": "TopologyRefinerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TopologyRefinerFactory"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "prepareComponentTopologySizing()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_TOPOLOGY_REFINER_FACTORY_H # define OPENSUBDIV3_FAR_TOPOLOGY_REFINER_FACTORY_H # include \" . . / version . h \" # include \" . . / far / topologyRefiner . h \" # include \" . . / far / error . h \" # include<cassert> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class TopologyRefinerFactoryBase { protected : typedef Vtr::internal::Level::ValidationCallback TopologyCallback ; bool)",
    "insertText": "prepareComponentTopologySizing(TopologyRefiner& refiner)"
  },
  {
    "label": "prepareComponentTopologyAssignment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareComponentTopologyAssignment(TopologyRefiner& refiner, bool fullValidation, TopologyCallback callback, void const * callbackData)"
  },
  {
    "label": "prepareComponentTagsAndSharpness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareComponentTagsAndSharpness(TopologyRefiner& refiner)"
  },
  {
    "label": "prepareFaceVaryingChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "prepareFaceVaryingChannels(TopologyRefiner& refiner)"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (} ; template<class MESH> class TopologyRefinerFactory : public TopologyRefinerFactoryBase { public : struct Options {)",
    "insertText": "Options(Sdc::SchemeType sdcType = Sdc::SCHEME_CATMARK, Sdc::Options sdcOptions = Sdc::Options()) : schemeType(sdcType), schemeOptions(sdcOptions), validateFullTopology(false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} Sdc::SchemeType schemeType ; Sdc::Options schemeOptions ; unsigned int validateFullTopology : 1 ; } ; TopologyRefiner*)",
    "insertText": "Create(MESH const& mesh, Options options = Options())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TopologyRefiner*)",
    "insertText": "Create(TopologyRefiner const & baseLevel)"
  },
  {
    "label": "resizeComponentTopology()",
    "kind": "Method",
    "detail": "Function (protected : typedef Vtr::internal::Level::TopologyError TopologyError ; bool)",
    "insertText": "resizeComponentTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignComponentTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignComponentTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignComponentTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignComponentTags(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "assignFaceVaryingTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "assignFaceVaryingTopology(TopologyRefiner& newRefiner, MESH const& mesh)"
  },
  {
    "label": "reportInvalidTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reportInvalidTopology(TopologyError errCode, char const * msg, MESH const& mesh)"
  },
  {
    "label": "setNumBaseVertices()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "setNumBaseVertices(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseFaces(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseEdges(TopologyRefiner & newRefiner, int count)"
  },
  {
    "label": "setNumBaseFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseFaceVertices(TopologyRefiner & newRefiner, Index f, int count)"
  },
  {
    "label": "setNumBaseEdgeFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseEdgeFaces(TopologyRefiner & newRefiner, Index e, int count)"
  },
  {
    "label": "setNumBaseVertexFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseVertexFaces(TopologyRefiner & newRefiner, Index v, int count)"
  },
  {
    "label": "setNumBaseVertexEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumBaseVertexEdges(TopologyRefiner & newRefiner, Index v, int count)"
  },
  {
    "label": "getNumBaseVertices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseVertices(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getNumBaseFaces()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseFaces(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getNumBaseEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumBaseEdges(TopologyRefiner const & newRefiner)"
  },
  {
    "label": "getBaseFaceVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceVertices(TopologyRefiner & newRefiner, Index f)"
  },
  {
    "label": "getBaseFaceEdges()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceEdges(TopologyRefiner & newRefiner, Index f)"
  },
  {
    "label": "getBaseEdgeVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseEdgeVertices(TopologyRefiner & newRefiner, Index e)"
  },
  {
    "label": "getBaseEdgeFaces()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseEdgeFaces(TopologyRefiner & newRefiner, Index e)"
  },
  {
    "label": "getBaseVertexFaces()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseVertexFaces(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseVertexEdges()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseVertexEdges(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseVertexFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseVertexFaceLocalIndices(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseVertexEdgeLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseVertexEdgeLocalIndices(TopologyRefiner & newRefiner, Index v)"
  },
  {
    "label": "getBaseEdgeFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (LocalIndexArray)",
    "insertText": "getBaseEdgeFaceLocalIndices(TopologyRefiner & newRefiner, Index e)"
  },
  {
    "label": "populateBaseLocalIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateBaseLocalIndices(TopologyRefiner & newRefiner)"
  },
  {
    "label": "setBaseEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseEdgeNonManifold(TopologyRefiner & newRefiner, Index e, bool b)"
  },
  {
    "label": "setBaseVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseVertexNonManifold(TopologyRefiner & newRefiner, Index v, bool b)"
  },
  {
    "label": "findBaseEdge()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findBaseEdge(TopologyRefiner const & newRefiner, Index v0, Index v1)"
  },
  {
    "label": "setBaseEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseEdgeSharpness(TopologyRefiner & newRefiner, Index e, float sharpness)"
  },
  {
    "label": "setBaseVertexSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseVertexSharpness(TopologyRefiner & newRefiner, Index v, float sharpness)"
  },
  {
    "label": "setBaseFaceHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBaseFaceHole(TopologyRefiner & newRefiner, Index f, bool isHole)"
  },
  {
    "label": "createBaseFVarChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "createBaseFVarChannel(TopologyRefiner & newRefiner, int numValues)"
  },
  {
    "label": "createBaseFVarChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "createBaseFVarChannel(TopologyRefiner & newRefiner, int numValues, Sdc::Options const& fvarOptions)"
  },
  {
    "label": "getBaseFaceFVarValues()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getBaseFaceFVarValues(TopologyRefiner & newRefiner, Index face, int channel = 0)"
  },
  {
    "label": "populateBaseLevel()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "populateBaseLevel(TopologyRefiner& refiner, MESH const& mesh, Options options)"
  },
  {
    "label": "reportInvalidTopologyAdapter()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "reportInvalidTopologyAdapter(TopologyError errCode, char const * msg, MESH const * mesh)"
  },
  {
    "label": "reportInvalidTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reportInvalidTopology(errCode, msg, *mesh)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; template<class MESH> TopologyRefiner* TopologyRefinerFactory<MESH)",
    "insertText": "Create(MESH const& mesh, Options options)"
  },
  {
    "label": "TopologyRefiner()",
    "kind": "Method",
    "detail": "Function (TopologyRefiner* refiner = new)",
    "insertText": "TopologyRefiner(options.schemeType, options.schemeOptions)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (delete refiner ; return 0 ; } return refiner ; } template<class MESH> TopologyRefiner* TopologyRefinerFactory<MESH)",
    "insertText": "Create(TopologyRefiner const & source)"
  },
  {
    "label": "TopologyCallback()",
    "kind": "Method",
    "detail": "Function (bool validate = options . validateFullTopology ; TopologyCallback callback = reinterpret_cast<)",
    "insertText": "TopologyCallback(reportInvalidTopologyAdapter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void const* userData =& mesh ;)",
    "insertText": "if(! assignComponentTopology(refiner, mesh))"
  },
  {
    "label": "resizeFaces()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeFaces(count)"
  },
  {
    "label": "resizeEdges()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeEdges(count)"
  },
  {
    "label": "resizeVertices()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeVertices(count)"
  },
  {
    "label": "resizeFaceVertices()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeFaceVertices(f, count)"
  },
  {
    "label": "_hasIrregFaces()",
    "kind": "Method",
    "detail": "Function (newRefiner . _hasIrregFaces = newRefiner .)",
    "insertText": "_hasIrregFaces(count != newRefiner._regFaceSize)"
  },
  {
    "label": "resizeEdgeFaces()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeEdgeFaces(e, count)"
  },
  {
    "label": "resizeVertexFaces()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeVertexFaces(v, count)"
  },
  {
    "label": "resizeVertexEdges()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "resizeVertexEdges(v, count)"
  },
  {
    "label": "populateLocalIndices()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "populateLocalIndices()"
  },
  {
    "label": "setEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "setEdgeNonManifold(e, b)"
  },
  {
    "label": "setVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "setVertexNonManifold(v, b)"
  },
  {
    "label": "setBaseEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (} template<class MESH> void TopologyRefinerFactory<MESH)",
    "insertText": "setBaseEdgeSharpness(TopologyRefiner & newRefiner, Index e, float s)"
  },
  {
    "label": "getEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "getEdgeSharpness(e)"
  },
  {
    "label": "setBaseVertexSharpness()",
    "kind": "Method",
    "detail": "Function (} template<class MESH> void TopologyRefinerFactory<MESH)",
    "insertText": "setBaseVertexSharpness(TopologyRefiner & newRefiner, Index v, float s)"
  },
  {
    "label": "getVertexSharpness()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "getVertexSharpness(v)"
  },
  {
    "label": "setBaseFaceHole()",
    "kind": "Method",
    "detail": "Function (} template<class MESH> void TopologyRefinerFactory<MESH)",
    "insertText": "setBaseFaceHole(TopologyRefiner & newRefiner, Index f, bool b)"
  },
  {
    "label": "setFaceHole()",
    "kind": "Method",
    "detail": "Function (newRefiner . _levels [ 0 ] ->)",
    "insertText": "setFaceHole(f, b)"
  },
  {
    "label": "SetFVarLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (Sdc::Options newOptions = newRefiner . _subdivOptions ; newOptions .)",
    "insertText": "SetFVarLinearInterpolation(fvarOptions.GetFVarLinearInterpolation())"
  },
  {
    "label": "getBaseFaceFVarValues()",
    "kind": "Method",
    "detail": "Function (} template<class MESH> IndexArray TopologyRefinerFactory<MESH)",
    "insertText": "getBaseFaceFVarValues(TopologyRefiner & newRefiner, Index face, int channel)"
  },
  {
    "label": "resizeComponentTopology()",
    "kind": "Method",
    "detail": "Function (} template<class MESH> bool TopologyRefinerFactory<MESH)",
    "insertText": "resizeComponentTopology(TopologyRefiner& , MESH const&)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(FAR_RUNTIME_ERROR, \"Failure in TopologyRefinerFactory<>::resizeComponentTopology() -- no specialization provided.\")"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(FAR_RUNTIME_ERROR, \"Failure in TopologyRefinerFactory<>::assignComponentTopology() -- no specialization provided.\")"
  }
]