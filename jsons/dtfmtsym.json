[
  {
    "label": "SimpleDateFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleDateFormat"
  },
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "DtContextType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DtContextType"
  },
  {
    "label": "DtWidthType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DtWidthType"
  },
  {
    "label": "EMonthPatternType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMonthPatternType"
  },
  {
    "label": "ECapitalizationContextUsageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECapitalizationContextUsageType"
  },
  {
    "label": "DateFormatSymbolsSingleSetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormatSymbolsSingleSetter"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (# ifndef DTFMTSYM_H # define DTFMTSYM_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / calendar . h \" # include \" unicode / strenum . h \" # include \" unicode / uobject . h \" # include \" unicode / locid . h \" # include \" unicode / udat . h \" # include \" unicode / ures . h \" U_NAMESPACE_BEGIN class SimpleDateFormat ; class Hashtable ; class U_I18N_API DateFormatSymbols U_FINAL : public UObject { public :)",
    "insertText": "DateFormatSymbols(UErrorCode& status)"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateFormatSymbols(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "DateFormatSymbols(const char *type, UErrorCode& status)"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateFormatSymbols(const Locale& locale, const char *type, UErrorCode& status)"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DateFormatSymbols(const DateFormatSymbols&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DateFormatSymbols&)",
    "insertText": "operator(const DateFormatSymbols&)"
  },
  {
    "label": "DateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DateFormatSymbols()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const DateFormatSymbols& other)"
  },
  {
    "label": "getEras()",
    "kind": "Method",
    "detail": "Function (} const UnicodeString*)",
    "insertText": "getEras(int32_t& count)"
  },
  {
    "label": "setEras()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEras(const UnicodeString* eras, int32_t count)"
  },
  {
    "label": "getEraNames()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getEraNames(int32_t& count)"
  },
  {
    "label": "setEraNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEraNames(const UnicodeString* eraNames, int32_t count)"
  },
  {
    "label": "getNarrowEras()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getNarrowEras(int32_t& count)"
  },
  {
    "label": "setNarrowEras()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNarrowEras(const UnicodeString* narrowEras, int32_t count)"
  },
  {
    "label": "getMonths()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getMonths(int32_t& count)"
  },
  {
    "label": "setMonths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMonths(const UnicodeString* months, int32_t count)"
  },
  {
    "label": "getShortMonths()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getShortMonths(int32_t& count)"
  },
  {
    "label": "setShortMonths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShortMonths(const UnicodeString* shortMonths, int32_t count)"
  },
  {
    "label": "getMonths()",
    "kind": "Method",
    "detail": "Function (enum DtContextType { FORMAT,STANDALONE,# ifndef DT_CONTEXT_COUNT # endif } ; enum DtWidthType { ABBREVIATED,WIDE,NARROW,SHORT,# ifndef DT_WIDTH_COUNT = 4 # endif } ; const UnicodeString*)",
    "insertText": "getMonths(int32_t& count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "setMonths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMonths(const UnicodeString* months, int32_t count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "getWeekdays()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getWeekdays(int32_t& count)"
  },
  {
    "label": "setWeekdays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setWeekdays(const UnicodeString* weekdays, int32_t count)"
  },
  {
    "label": "getShortWeekdays()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getShortWeekdays(int32_t& count)"
  },
  {
    "label": "setShortWeekdays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShortWeekdays(const UnicodeString* abbrevWeekdays, int32_t count)"
  },
  {
    "label": "getWeekdays()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getWeekdays(int32_t& count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "setWeekdays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setWeekdays(const UnicodeString* weekdays, int32_t count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "getQuarters()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getQuarters(int32_t& count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "setQuarters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setQuarters(const UnicodeString* quarters, int32_t count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "getAmPmStrings()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getAmPmStrings(int32_t& count)"
  },
  {
    "label": "setAmPmStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAmPmStrings(const UnicodeString* ampms, int32_t count)"
  },
  {
    "label": "getTimeSeparatorString()",
    "kind": "Method",
    "detail": "Function (# ifndef const char16_t DEFAULT_TIME_SEPARATOR = 0 x003a ; const char16_t ALTERNATE_TIME_SEPARATOR = 0 x002e ; UnicodeString&)",
    "insertText": "getTimeSeparatorString(UnicodeString& result)"
  },
  {
    "label": "setTimeSeparatorString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSeparatorString(const UnicodeString& newTimeSeparator)"
  },
  {
    "label": "getYearNames()",
    "kind": "Method",
    "detail": "Function (# endif const UnicodeString*)",
    "insertText": "getYearNames(int32_t& count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "setYearNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setYearNames(const UnicodeString* yearNames, int32_t count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "getZodiacNames()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getZodiacNames(int32_t& count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "setZodiacNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setZodiacNames(const UnicodeString* zodiacNames, int32_t count, DtContextType context, DtWidthType width)"
  },
  {
    "label": "getLeapMonthPatterns()",
    "kind": "Method",
    "detail": "Function (# ifndef enum EMonthPatternType { kLeapMonthPatternFormatWide,kLeapMonthPatternFormatAbbrev,kLeapMonthPatternFormatNarrow,kLeapMonthPatternStandaloneWide,kLeapMonthPatternStandaloneAbbrev,kLeapMonthPatternStandaloneNarrow,kLeapMonthPatternNumeric,kMonthPatternsCount } ; const UnicodeString*)",
    "insertText": "getLeapMonthPatterns(int32_t& count)"
  },
  {
    "label": "getZoneStrings()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef const UnicodeString**)",
    "insertText": "getZoneStrings(int32_t& rowCount, int32_t& columnCount)"
  },
  {
    "label": "setZoneStrings()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "setZoneStrings(const UnicodeString* const* strings, int32_t rowCount, int32_t columnCount)"
  },
  {
    "label": "getPatternUChars()",
    "kind": "Method",
    "detail": "Function (const char16_t* U_EXPORT2)",
    "insertText": "getPatternUChars(void)"
  },
  {
    "label": "getLocalPatternChars()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getLocalPatternChars(UnicodeString& result)"
  },
  {
    "label": "setLocalPatternChars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocalPatternChars(const UnicodeString& newLocalPatternChars)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale(ULocDataLocaleType type, UErrorCode& status)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (enum ECapitalizationContextUsageType { # ifndef kCapContextUsageOther = 0,kCapContextUsageMonthFormat,kCapContextUsageMonthStandalone,kCapContextUsageMonthNarrow,kCapContextUsageDayFormat,kCapContextUsageDayStandalone,kCapContextUsageDayNarrow,kCapContextUsageEraWide,kCapContextUsageEraAbbrev,kCapContextUsageEraNarrow,kCapContextUsageZoneLong,kCapContextUsageZoneShort,kCapContextUsageMetazoneLong,kCapContextUsageMetazoneShort,# endif kCapContextUsageTypeCount = 1 4 } ; UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "initializeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeData(const Locale& locale, const char *type, UErrorCode& status, UBool useLastResortData = FALSE)"
  },
  {
    "label": "assignArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignArray(UnicodeString*& dstArray, int32_t& dstCount, const UnicodeString* srcArray, int32_t srcCount)"
  },
  {
    "label": "arrayCompare()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "arrayCompare(const UnicodeString* array1, const UnicodeString* array2, int32_t count)"
  },
  {
    "label": "createZoneStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createZoneStrings(const UnicodeString *const * otherStrings)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispose(void)"
  },
  {
    "label": "copyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyData(const DateFormatSymbols& other)"
  },
  {
    "label": "initZoneStringsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initZoneStringsArray(void)"
  },
  {
    "label": "disposeZoneStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disposeZoneStrings(void)"
  },
  {
    "label": "getPatternCharIndex()",
    "kind": "Method",
    "detail": "Function (UDateFormatField U_EXPORT2)",
    "insertText": "getPatternCharIndex(char16_t c)"
  },
  {
    "label": "isNumericField()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "isNumericField(UDateFormatField f, int32_t count)"
  },
  {
    "label": "isNumericPatternChar()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "isNumericPatternChar(char16_t c, int32_t count)"
  },
  {
    "label": "createForLocale()",
    "kind": "Method",
    "detail": "Function (public : # ifndef DateFormatSymbols* U_EXPORT2)",
    "insertText": "createForLocale(const Locale &locale, UErrorCode &status)"
  }
]