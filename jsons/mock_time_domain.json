[
  {
    "label": "MockTimeDomain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockTimeDomain"
  },
  {
    "label": "MockTimeDomain()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TEST_MOCK_TIME_DOMAIN_H_ # define BASE_TASK_SEQUENCE_MANAGER_TEST_MOCK_TIME_DOMAIN_H_ # include \" base / task / sequence_manager / time_domain . h \" # include \" base / time / tick_clock . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { class MockTimeDomain : public TimeDomain { public :)",
    "insertText": "MockTimeDomain(TimeTicks initial_now_ticks)"
  },
  {
    "label": "MockTimeDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockTimeDomain(const MockTimeDomain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MockTimeDomain&)",
    "insertText": "operator(const MockTimeDomain&)"
  },
  {
    "label": "MockTimeDomain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MockTimeDomain()"
  },
  {
    "label": "SetNowTicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNowTicks(TimeTicks now_ticks)"
  },
  {
    "label": "NowTicks()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "NowTicks()"
  },
  {
    "label": "MaybeFastForwardToWakeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeFastForwardToWakeUp(absl::optional<WakeUp> next_wake_up, bool quit_when_idle_requested)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  }
]