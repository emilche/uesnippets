[
  {
    "label": "FSelectionFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionFacade"
  },
  {
    "label": "FSelectionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionKey"
  },
  {
    "label": "InitUnboundedGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" namespace GeometryCollection::Facades { class FSelectionFacade { void)",
    "insertText": "InitUnboundedGroup(FName GroupName, FName DependencyGroup)"
  },
  {
    "label": "InitWeightedUnboundedGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWeightedUnboundedGroup(FName GroupName, FName DependencyGroup)"
  },
  {
    "label": "InitBoundedGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBoundedGroup(FName GroupName, FName DependencyGroup, FName BoneDependencyGroup)"
  },
  {
    "label": "InitWeightedBoundedGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWeightedBoundedGroup(FName GroupName, FName DependencyGroup, FName BoneDependencyGroup)"
  },
  {
    "label": "FSelectionKey()",
    "kind": "Method",
    "detail": "Function (public : const FName UnboundGroup ; const FName WeightedUnboundGroup ; const FName BoundGroup ; const FName WeightedBoundGroup ; const FName IndexAttribute ; const FName WeightAttribute ; const FName BoneIndexAttribute ; struct FSelectionKey {)",
    "insertText": "FSelectionKey(int32 InIndex = INDEX_NONE, FName InGroupName = \"\") : Index(InIndex), GroupName(InGroupName)"
  },
  {
    "label": "FSelectionFacade()",
    "kind": "Method",
    "detail": "Function (} int32 Index ; FName GroupName ; } ;)",
    "insertText": "FSelectionFacade(FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FSelectionFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSelectionFacade(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "AddSelection()",
    "kind": "Method",
    "detail": "Function (FSelectionKey)",
    "insertText": "AddSelection(const TArray<int32>& Indices, const TArray<float>& Weights, FName DependencyGroup)"
  },
  {
    "label": "AddSelection()",
    "kind": "Method",
    "detail": "Function (FSelectionKey)",
    "insertText": "AddSelection(const int32 BoneIndex, const TArray<int32>& Indices, FName DependencyGroup, FName BoneDependencyGroup = FName(\"\"))"
  },
  {
    "label": "AddSelection()",
    "kind": "Method",
    "detail": "Function (FSelectionKey)",
    "insertText": "AddSelection(const int32 BoneIndex, const TArray<int32>& Indices, const TArray<float>& Weights, FName DependencyGroup, FName BoneDependencyGroup = FName(\"\"))"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelection(const FSelectionKey& Key, TArray<int32>& Indices)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelection(const FSelectionKey& Key, TArray<int32>& Indices, TArray<float>& Weights)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelection(const FSelectionKey& Key, int32& BoneIndex, TArray<int32>& Indices)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelection(const FSelectionKey& Key, int32& BoneIndex, TArray<int32>& Indices, TArray<float>& Weights)"
  }
]