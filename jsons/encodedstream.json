[
  {
    "label": "EncodedInputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedInputStream"
  },
  {
    "label": "EncodedOutputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedOutputStream"
  },
  {
    "label": "AutoUTFInputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoUTFInputStream"
  },
  {
    "label": "AutoUTFOutputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoUTFOutputStream"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_ENCODEDSTREAM_H_ # define RAPIDJSON_ENCODEDSTREAM_H_ # include \" stream . h \" # include \" memorystream . h \" # ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++) #endif #ifdef __clang__ RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(padded)"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(typename InputByteStream::Ch) == 1)"
  },
  {
    "label": "EncodedInputStream()",
    "kind": "Method",
    "detail": "Function (public : typedef Encoding::Ch Ch ;)",
    "insertText": "EncodedInputStream(InputByteStream& is) : is_(is)"
  },
  {
    "label": "TakeBOM()",
    "kind": "Method",
    "detail": "Function (current_ =)",
    "insertText": "TakeBOM(is_)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (} Ch)",
    "insertText": "Peek()"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (Ch c = current_ ; current_ =)",
    "insertText": "Take(is_)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Put(Ch)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(false)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "PutBegin()",
    "kind": "Method",
    "detail": "Function (} Ch*)",
    "insertText": "PutBegin()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EncodedInputStream&)",
    "insertText": "operator(const EncodedInputStream&)"
  },
  {
    "label": "EncodedInputStream()",
    "kind": "Method",
    "detail": "Function (InputByteStream& is_ ; Ch current_ ; } ; template<> class EncodedInputStream<UTF8<>,MemoryStream> { public : typedef UTF8<>::Ch Ch ;)",
    "insertText": "EncodedInputStream(MemoryStream& is) : is_(is)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (} Ch)",
    "insertText": "Take()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Tell()"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} ; template<Encoding,OutputByteStream> class EncodedOutputStream {)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(typename OutputByteStream::Ch) == 1)"
  },
  {
    "label": "EncodedOutputStream()",
    "kind": "Method",
    "detail": "Function (public : typedef Encoding::Ch Ch ;)",
    "insertText": "EncodedOutputStream(OutputByteStream& os, bool putBOM = true) : os_(os)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Put(Ch c)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Put(os_, c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EncodedOutputStream&)",
    "insertText": "operator(const EncodedOutputStream&)"
  },
  {
    "label": "RAPIDJSON_ENCODINGS_FUNC()",
    "kind": "Method",
    "detail": "Function (OutputByteStream& os_ ; } ; # define)",
    "insertText": "RAPIDJSON_ENCODINGS_FUNC(x)"
  },
  {
    "label": "AutoUTFInputStream()",
    "kind": "Method",
    "detail": "Function (public : typedef CharType Ch ;)",
    "insertText": "AutoUTFInputStream(InputByteStream& is, UTFType type = kUTF8) : is_(&is), type_(type), hasBOM_(false)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(type >= kUTF8 && type <= kUTF32BE)"
  },
  {
    "label": "DetectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectType()"
  },
  {
    "label": "RAPIDJSON_ENCODINGS_FUNC()",
    "kind": "Method",
    "detail": "Function (const TakeFunc f [ ] = {)",
    "insertText": "RAPIDJSON_ENCODINGS_FUNC(Take)"
  },
  {
    "label": "takeFunc_()",
    "kind": "Method",
    "detail": "Function (takeFunc_ = f [ type_ ] ; current_ =)",
    "insertText": "takeFunc_(*is_)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} UTFType)",
    "insertText": "GetType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AutoUTFInputStream&)",
    "insertText": "operator(const AutoUTFInputStream&)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned char* c = reinterpret_cast<const unsigned)",
    "insertText": "char(is_->Peek4())"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned bom = static_cast<)",
    "insertText": "unsigned(c[0] | (c[1] << 8) | (c[2] << 16) | (c[3] << 24))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hasBOM_ = false ;)",
    "insertText": "if(bom == 0xFFFE0000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bom == 0x0000FEFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((bom & 0xFFFF) == 0xFFFE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((bom & 0xFFFF) == 0xFEFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((bom & 0xFFFFFF) == 0xBFBBEF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!hasBOM_)"
  },
  {
    "label": "pattern()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "pattern(c[0] ? 1 : 0) | (c[1] ? 2 : 0) | (c[2] ? 4 : 0) | (c[3] ? 8 : 0)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "Ch(*TakeFunc)(InputByteStream& is)"
  },
  {
    "label": "AutoUTFOutputStream()",
    "kind": "Method",
    "detail": "Function (public : typedef CharType Ch ;)",
    "insertText": "AutoUTFOutputStream(OutputByteStream& os, UTFType type, bool putBOM) : os_(&os), type_(type)"
  },
  {
    "label": "RAPIDJSON_ENCODINGS_FUNC()",
    "kind": "Method",
    "detail": "Function (const PutFunc f [ ] = {)",
    "insertText": "RAPIDJSON_ENCODINGS_FUNC(Put)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (putFunc_ = f [ type_ ] ;)",
    "insertText": "if(putBOM) PutBOM()"
  },
  {
    "label": "putFunc_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "putFunc_(*os_, c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AutoUTFOutputStream&)",
    "insertText": "operator(const AutoUTFOutputStream&)"
  },
  {
    "label": "PutBOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutBOM()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*PutBOMFunc)(OutputByteStream&)"
  },
  {
    "label": "RAPIDJSON_ENCODINGS_FUNC()",
    "kind": "Method",
    "detail": "Function (const PutBOMFunc f [ ] = {)",
    "insertText": "RAPIDJSON_ENCODINGS_FUNC(PutBOM)"
  },
  {
    "label": "type_()",
    "kind": "Method",
    "detail": "Function (f [)",
    "insertText": "type_(*os_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "void(*PutFunc)(OutputByteStream&, Ch)"
  }
]