[
  {
    "label": "FConcreteTypeCompatibleWithReflectedTypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConcreteTypeCompatibleWithReflectedTypeHelper"
  },
  {
    "label": "FPropertySizesMatchHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertySizesMatchHelper"
  },
  {
    "label": "IsConcreteTypeCompatibleWithReflectedType_Impl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Class . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / UnrealType . h \" # include \" UObject / EnumProperty . h \" # include \" UObject / TextProperty . h \" # include \" Math / InterpCurvePoint . h \" template<T> bool)",
    "insertText": "IsConcreteTypeCompatibleWithReflectedType_Impl(FProperty* Property)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "bool(FProperty* Property)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "int8(FProperty* Property)"
  },
  {
    "label": "GetUnderlyingProperty()",
    "kind": "Method",
    "detail": "Function (Property = EnumProperty ->)",
    "insertText": "GetUnderlyingProperty()"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FInt8Property::StaticClass()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "uint8(FProperty* Property)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FBoolProperty* BoolProperty = CastField<FBoolProperty>(Property))"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FByteProperty::StaticClass()"
  },
  {
    "label": "int16()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "int16(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FInt16Property::StaticClass()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "uint16(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FUInt16Property::StaticClass()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "int32(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FIntProperty::StaticClass()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "uint32(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FUInt32Property::StaticClass()"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "int64(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FInt64Property::StaticClass()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "uint64(FProperty* Property)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} return Property ->)",
    "insertText": "GetClass() == FUInt64Property::StaticClass()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "float(FProperty* Property)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "double(FProperty* Property)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FText(FProperty* Property)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FString(FProperty* Property)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FName(FProperty* Property)"
  },
  {
    "label": "IsConcreteTypeCompatibleWithReflectedType_BuiltInStruct()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsConcreteTypeCompatibleWithReflectedType_BuiltInStruct(FProperty* Property)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* BuiltInStruct = TBaseStructure<T)",
    "insertText": "Get()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FLinearColor(FProperty* Property)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FVector2D(FProperty* Property)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FVector(FProperty* Property)"
  },
  {
    "label": "FRotator()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FRotator(FProperty* Property)"
  },
  {
    "label": "FQuat()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FQuat(FProperty* Property)"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FTransform(FProperty* Property)"
  },
  {
    "label": "FBox2D()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FBox2D(FProperty* Property)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FGuid(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointFloat()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointFloat(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointVector()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointVector(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointVector2D()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointVector2D(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointQuat()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointQuat(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointTwoVectors()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointTwoVectors(FProperty* Property)"
  },
  {
    "label": "FInterpCurvePointLinearColor()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInterpCurvePointLinearColor(FProperty* Property)"
  },
  {
    "label": "FFloatRangeBound()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FFloatRangeBound(FProperty* Property)"
  },
  {
    "label": "FFloatRange()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FFloatRange(FProperty* Property)"
  },
  {
    "label": "FInt32RangeBound()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInt32RangeBound(FProperty* Property)"
  },
  {
    "label": "FInt32Range()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInt32Range(FProperty* Property)"
  },
  {
    "label": "FFloatInterval()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FFloatInterval(FProperty* Property)"
  },
  {
    "label": "FInt32Interval()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FInt32Interval(FProperty* Property)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FSoftObjectPath(FProperty* Property)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (} template<> bool IsConcreteTypeCompatibleWithReflectedType_Impl<)",
    "insertText": "FSoftClassPath(FProperty* Property)"
  },
  {
    "label": "IsConcreteTypeCompatibleWithReflectedType()",
    "kind": "Method",
    "detail": "Function (} template<T> struct FConcreteTypeCompatibleWithReflectedTypeHelper { bool)",
    "insertText": "IsConcreteTypeCompatibleWithReflectedType(FProperty* Property)"
  },
  {
    "label": "IsConcreteTypeCompatibleWithReflectedType()",
    "kind": "Method",
    "detail": "Function (} else { return FConcreteTypeCompatibleWithReflectedTypeHelper<T)",
    "insertText": "IsConcreteTypeCompatibleWithReflectedType(Property)"
  },
  {
    "label": "PropertySizesMatch_Impl()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "PropertySizesMatch_Impl(FProperty* InProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (} return InProperty ->)",
    "insertText": "GetElementSize() == sizeof(T)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} template<> bool PropertySizesMatch_Impl<)",
    "insertText": "uint8(FProperty* InProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (} return InProperty ->)",
    "insertText": "GetElementSize() == sizeof(uint8)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} template<> bool PropertySizesMatch_Impl<)",
    "insertText": "uint16(FProperty* InProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (} return InProperty ->)",
    "insertText": "GetElementSize() == sizeof(uint16)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} template<> bool PropertySizesMatch_Impl<)",
    "insertText": "uint32(FProperty* InProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (} return InProperty ->)",
    "insertText": "GetElementSize() == sizeof(uint32)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} template<> bool PropertySizesMatch_Impl<)",
    "insertText": "uint64(FProperty* InProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (} return InProperty ->)",
    "insertText": "GetElementSize() == sizeof(uint64)"
  },
  {
    "label": "PropertySizesMatch()",
    "kind": "Method",
    "detail": "Function (} template<T> struct FPropertySizesMatchHelper { bool)",
    "insertText": "PropertySizesMatch(FProperty* InProperty)"
  }
]