[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPopupMethodReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupMethodReply"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / ReplyBase . h \" enum class EPopupMethod : uint8 { CreateNewWindow,UseCurrentWindow } ; enum class EShouldThrottle : uint8 { No,Yes } ; class FPopupMethodReply : public TReplyBase<FPopupMethodReply> { public : FPopupMethodReply)",
    "insertText": "Unhandled()"
  },
  {
    "label": "UseMethod()",
    "kind": "Method",
    "detail": "Function (} FPopupMethodReply)",
    "insertText": "UseMethod(EPopupMethod WithMethod)"
  },
  {
    "label": "SetShouldThrottle()",
    "kind": "Method",
    "detail": "Function (} FPopupMethodReply&)",
    "insertText": "SetShouldThrottle(EShouldThrottle InShouldThrottle)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (ShouldThrottle = InShouldThrottle ; return)",
    "insertText": "Me()"
  },
  {
    "label": "GetShouldThrottle()",
    "kind": "Method",
    "detail": "Function (} EShouldThrottle)",
    "insertText": "GetShouldThrottle()"
  },
  {
    "label": "FPopupMethodReply()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FPopupMethodReply() :TReplyBase<FPopupMethodReply>(false) , PopupMethod(EPopupMethod::CreateNewWindow) , ShouldThrottle(EShouldThrottle::Yes)"
  },
  {
    "label": "FPopupMethodReply()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FPopupMethodReply(bool bIsHandled, EPopupMethod InMethod) : TReplyBase<FPopupMethodReply>(bIsHandled) , PopupMethod(InMethod) , ShouldThrottle(EShouldThrottle::Yes)"
  }
]