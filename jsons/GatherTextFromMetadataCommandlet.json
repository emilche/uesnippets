[
  {
    "label": "UGatherTextFromMetaDataCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGatherTextFromMetaDataCommandlet"
  },
  {
    "label": "FGatherParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherParameters"
  },
  {
    "label": "FFieldClassFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldClassFilter"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Commandlets / GatherTextCommandletBase . h \" # include \" GatherTextFromMetadataCommandlet . generated . h \")",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual int32 Main(const FString& Params)"
  },
  {
    "label": "ShouldRunInPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunInPreview(const TArray<FString>& Switches, const TMap<FString, FString>& ParamVals)"
  },
  {
    "label": "GatherTextFromUObjects()",
    "kind": "Method",
    "detail": "Function (struct FGatherParameters { TArray<FString> InputKeys ; TArray<FString> OutputNamespaces ; TArray<FString> OutputKeys ; } ; private : void)",
    "insertText": "GatherTextFromUObjects(const TArray<FString>& IncludePaths, const TArray<FString>& ExcludePaths, const FGatherParameters& Arguments)"
  },
  {
    "label": "GatherTextFromField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherTextFromField(UField* Field, const FGatherParameters& Arguments, const FName InPlatformName)"
  },
  {
    "label": "GatherTextFromField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherTextFromField(FField* Field, const FGatherParameters& Arguments, const FName InPlatformName)"
  },
  {
    "label": "ShouldGatherFromField()",
    "kind": "Method",
    "detail": "Function (template<FieldType> bool)",
    "insertText": "ShouldGatherFromField(const FieldType* Field, const bool bIsEditorOnly)"
  },
  {
    "label": "GatherTextFromFieldImpl()",
    "kind": "Method",
    "detail": "Function (template<FieldType> void)",
    "insertText": "GatherTextFromFieldImpl(FieldType* Field, const FGatherParameters& Arguments, const FName InPlatformName)"
  },
  {
    "label": "EnsureFieldDisplayNameImpl()",
    "kind": "Method",
    "detail": "Function (template<FieldType> void)",
    "insertText": "EnsureFieldDisplayNameImpl(FieldType* Field, const bool bIsBool)"
  },
  {
    "label": "FFieldClassFilter()",
    "kind": "Method",
    "detail": "Function (private : bool ShouldGatherFromEditorOnlyData ; struct FFieldClassFilter {)",
    "insertText": "FFieldClassFilter(const FFieldClass* InFieldClass) : FieldClass(InFieldClass) , ObjectClass(nullptr)"
  },
  {
    "label": "FFieldClassFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldClassFilter(const UClass* InObjectClass) : FieldClass(nullptr) , ObjectClass(InObjectClass)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ObjectClass)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FString()"
  },
  {
    "label": "TestClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestClass(const FFieldClass* InFieldClass)"
  },
  {
    "label": "TestClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestClass(const UClass* InObjectClass)"
  }
]