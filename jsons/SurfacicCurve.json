[
  {
    "label": "FCADKernelArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCADKernelArchive"
  },
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FEntityGeom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityGeom"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "FSurfacicPolyline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurfacicPolyline"
  },
  {
    "label": "FCurvePoint2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint2D"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FLinearBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearBoundary"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FSurfacicCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADEntity . h \" # include \" Core / Types . h \" # include \" Geo / Curves / Curve . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Math / MatrixH . h \" namespace UE::CADKernel { class FCADKernelArchive ; class FDatabase ; class FEntityGeom ; class FPoint2D ; class FSurfacicPolyline ; struct FCurvePoint2D ; struct FCurvePoint ; struct FLinearBoundary ; class FSurfacicCurve : public FCurve { class FEntity ; protected : TSharedPtr<FCurve> Curve2D ; TSharedPtr<FSurface> CarrierSurface ;)",
    "insertText": "FSurfacicCurve(TSharedRef<FCurve> InCurve2D, TSharedRef<FSurface> InSurface) : FCurve(InCurve2D->GetBoundary()) , Curve2D(InCurve2D) , CarrierSurface(InSurface)"
  },
  {
    "label": "FSurfacicCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSurfacicCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, Curve2D)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, CarrierSurface)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (CarrierSurface ->)",
    "insertText": "SpawnIdent(Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Set2DCurve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set2DCurve(TSharedPtr<FCurve>& NewCurve2D)"
  },
  {
    "label": "GetSurface()",
    "kind": "Method",
    "detail": "Function (Curve2D = NewCurve2D ; } const TSharedPtr<FSurface>&)",
    "insertText": "GetSurface()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (Curve2D ->)",
    "insertText": "Evaluate2DPoint(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FPoint2D& OutPoint)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (Curve2D ->)",
    "insertText": "Evaluate2DPoint(Coordinate, OutPoint)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePoints(const TArray<double>& Coordinates, TArray<FCurvePoint>& OutPoints, int32 DerivativeOrder = 0)"
  },
  {
    "label": "EvaluateSurfacicPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSurfacicPolyline(FSurfacicPolyline& OutPolyline)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoints(const TArray<double>& Coordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (Curve2D ->)",
    "insertText": "Evaluate2DPoints(Coordinates, OutPoints)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoints(const TArray<double>& Coordinates, TArray<FCurvePoint2D>& OutPoints, int32 DerivativeOrder = 0)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (Curve2D ->)",
    "insertText": "Evaluate2DPoints(Coordinates, OutPoints, DerivativeOrder)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindNotDerivableCoordinates(const FLinearBoundary& InBoundary, int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "EvaluateSurfacicPolylineWithNormalAndTangent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EvaluateSurfacicPolylineWithNormalAndTangent(FSurfacicPolyline& OutPolyline)"
  }
]