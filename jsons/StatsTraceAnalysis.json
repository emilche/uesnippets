[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "ICounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICounter"
  },
  {
    "label": "ICounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICounterProvider"
  },
  {
    "label": "IEditableCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounter"
  },
  {
    "label": "IEditableCounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounterProvider"
  },
  {
    "label": "FStatsAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsAnalyzer"
  },
  {
    "label": "FThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadState"
  },
  {
    "label": "FStatsAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" # include \" Templates / SharedPointer . h \" namespace TraceServices { class IAnalysisSession ; class ICounter ; class ICounterProvider ; class IEditableCounter ; class IEditableCounterProvider ; class FStatsAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FStatsAnalyzer(IAnalysisSession& Session, IEditableCounterProvider& InEditableCounterProvider)"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "CreateFrameCounters()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateFrameCounters()"
  },
  {
    "label": "GetThreadState()",
    "kind": "Method",
    "detail": "Function (private : enum : uint16 { RouteId_Spec,RouteId_EventBatch,RouteId_EventBatch2,RouteId_BeginFrame,RouteId_EndFrame } ; struct FThreadState { uint64 LastCycle = 0 ; } ; TSharedRef<FThreadState>)",
    "insertText": "GetThreadState(uint32 ThreadId)"
  }
]