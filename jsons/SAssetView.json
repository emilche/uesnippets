[
  {
    "label": "FAssetContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetContextMenu"
  },
  {
    "label": "FAssetTextFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetTextFilter"
  },
  {
    "label": "FAssetThumbnail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnail"
  },
  {
    "label": "FAssetViewItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetViewItem"
  },
  {
    "label": "FAssetViewItemCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetViewItemCollection"
  },
  {
    "label": "FContentBrowserItemDataTemporaryContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserItemDataTemporaryContext"
  },
  {
    "label": "FContentBrowserItemDataUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBrowserItemDataUpdate"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FFilter_ShowRedirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilter_ShowRedirectors"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPathPermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathPermissionList"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SAssetColumnView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetColumnView"
  },
  {
    "label": "SAssetListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetListView"
  },
  {
    "label": "SAssetTileView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetTileView"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SContentBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SContentBrowser"
  },
  {
    "label": "SFilterList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterList"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FAssetViewInstanceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetViewInstanceConfig"
  },
  {
    "label": "FCharacterEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterEvent"
  },
  {
    "label": "FCollectionNameType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionNameType"
  },
  {
    "label": "FContentBrowserInstanceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserInstanceConfig"
  },
  {
    "label": "FFiltersAdditionalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFiltersAdditionalParams"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CONTENTBROWSER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CONTENTBROWSER_API"
  },
  {
    "label": "FAssetViewFrontendFilterHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetViewFrontendFilterHelper"
  },
  {
    "label": "FCreateDeferredItemData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateDeferredItemData"
  },
  {
    "label": "FQuickJumpData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuickJumpData"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / CurveSequence . h \" # include \" AssetRegistry / ARFilter . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetThumbnail . h \" # include \" AssetViewSortManager . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" ContentBrowserDataFilter . h \" # include \" ContentBrowserDataLegacyBridge . h \" # include \" ContentBrowserDelegates . h \" # include \" ContentBrowserItem . h \" # include \" ContentBrowserTelemetry . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Experimental / ContentBrowserViewExtender . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" HAL / Platform . h \" # include \" HistoryManager . h \" # include \" IContentBrowserSingleton . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / NamePermissionList . h \" # include \" Misc / Optional . h \" # include \" SourcesData . h \" # include \" Styling / SlateColor . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" class FAssetContextMenu ; class FAssetTextFilter ; class FAssetThumbnail ; class FAssetViewItem ; class FAssetViewItemCollection ; class FContentBrowserItemDataTemporaryContext ; class FContentBrowserItemDataUpdate ; class FDragDropEvent ; class FFilter_ShowRedirectors ; class FMenuBuilder ; class FPathPermissionList ; class FSlateRect ; class FWeakWidgetPath ; class FWidgetPath ; class ITableRow ; class SAssetColumnView ; class SAssetListView ; class SAssetTileView ; class SBox ; class SComboButton ; class SContentBrowser ; class SFilterList ; class STableViewBase ; class SWidget ; class UClass ; class UFactory ; class UToolMenu ; struct FAssetViewInstanceConfig ; struct FCharacterEvent ; struct FCollectionNameType ; struct FContentBrowserInstanceConfig ; struct FFiltersAdditionalParams ; struct FFocusEvent ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; struct FPropertyChangedEvent ; struct FToolMenuContext ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAssetViewNewItemRequested, const FContentBrowserItem&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnSearchOptionChanged)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnExtendAssetViewOptionsMenuContext, FToolMenuContext&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (enum class EAssetViewCopyType { ExportTextPath,ObjectPath,PackageName } ; class SAssetView : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAssetView ) : _InitialCategoryFilter(EContentBrowserItemCategoryFilter::IncludeAll) , _ThumbnailLabel( EThumbnailLabel::ClassName ) , _AllowThumbnailHintLabel(true) , _bShowPathViewFilters(false) , _InitialViewType(EAssetViewType::Tile) , _InitialThumbnailSize(EThumbnailSize::Medium) , _ShowBottomToolbar(true) , _ShowViewOptions(true) , _AllowThumbnailEditMode(false) , _CanShowClasses(true) , _CanShowFolders(false) , _CanShowReadOnlyFolders(true) , _FilterRecursivelyWithBackendFilter(true) , _CanShowRealTimeThumbnails(false) , _CanShowDevelopersFolder(false) , _CanShowFavorites(false) , _CanDockCollections(false) , _SelectionMode( ESelectionMode::Multi ) , _AllowDragging(true) , _AllowFocusOnSync(true) , _FillEmptySpaceInTileView(true) , _ShowPathInColumnView(false) , _ShowTypeInColumnView(true) , _SortByPathInColumnView(false) , _ShowTypeInTileView(true) , _ForceShowEngineContent(false) , _ForceShowPluginContent(false) , _ForceHideScrollbar(false) , _ShowDisallowedAssetClassAsUnsupportedItems(false) , _AllowCustomView(false)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnShouldFilterAsset, OnShouldFilterAsset ) SLATE_EVENT(FOnShouldFilterItem, OnShouldFilterItem) SLATE_EVENT( FOnAssetViewNewItemRequested, OnNewItemRequested ) SLATE_EVENT( FOnContentBrowserItemSelectionChanged, OnItemSelectionChanged ) SLATE_EVENT( FOnContentBrowserItemsActivated, OnItemsActivated ) SLATE_EVENT( FOnGetContentBrowserItemContextMenu, OnGetItemContextMenu ) SLATE_EVENT( FOnContentBrowserItemRenameCommitted, OnItemRenameCommitted ) SLATE_EVENT(FOnIsAssetValidForCustomToolTip, OnIsAssetValidForCustomToolTip) SLATE_EVENT( FOnGetCustomAssetToolTip, OnGetCustomAssetToolTip ) SLATE_EVENT( FOnVisualizeAssetToolTip, OnVisualizeAssetToolTip ) SLATE_EVENT(FOnAssetToolTipClosing, OnAssetToolTipClosing) SLATE_EVENT(FOnExtendAssetViewOptionsMenuContext, OnExtendAssetViewOptionsMenuContext) SLATE_ARGUMENT( EContentBrowserItemCategoryFilter, InitialCategoryFilter ) SLATE_ATTRIBUTE( FText, AssetShowWarningText ) SLATE_ATTRIBUTE( FText, HighlightedText ) SLATE_ARGUMENT( EThumbnailLabel::Type, ThumbnailLabel ) SLATE_ARGUMENT( bool, AllowThumbnailHintLabel ) SLATE_ARGUMENT( TSharedPtr<FAssetFilterCollectionType>, FrontendFilters ) SLATE_ARGUMENT(TSharedPtr<FAssetTextFilter>, TextFilter) SLATE_ATTRIBUTE(bool, ShowRedirectors)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, bShowPathViewFilters ) SLATE_ARGUMENT( FSourcesData, InitialSourcesData ) SLATE_ARGUMENT( FARFilter, InitialBackendFilter ) SLATE_ARGUMENT( FAssetData, InitialAssetSelection ) SLATE_ARGUMENT( EAssetViewType::Type, InitialViewType ) SLATE_ARGUMENT( EThumbnailSize, InitialThumbnailSize ) SLATE_ARGUMENT( bool, ShowBottomToolbar ) SLATE_ARGUMENT( bool, ShowViewOptions) SLATE_ARGUMENT( bool, AllowThumbnailEditMode ) SLATE_ARGUMENT( bool, CanShowClasses ) SLATE_ARGUMENT( bool, CanShowFolders ) SLATE_ARGUMENT( bool, CanShowReadOnlyFolders ) SLATE_ARGUMENT( bool, FilterRecursivelyWithBackendFilter ) SLATE_ARGUMENT( bool, CanShowRealTimeThumbnails ) SLATE_ARGUMENT( bool, CanShowDevelopersFolder ) SLATE_ARGUMENT(bool, CanShowFavorites) SLATE_ARGUMENT(bool, CanDockCollections) SLATE_ARGUMENT( ESelectionMode::Type, SelectionMode ) SLATE_ARGUMENT( bool, AllowDragging ) SLATE_ARGUMENT( bool, AllowFocusOnSync ) SLATE_ARGUMENT( bool, FillEmptySpaceInTileView ) SLATE_ARGUMENT(bool, ShowPathInColumnView) SLATE_ARGUMENT(bool, ShowTypeInColumnView) SLATE_ARGUMENT(bool, SortByPathInColumnView) SLATE_ARGUMENT(bool, ShowTypeInTileView) SLATE_ARGUMENT(bool, ForceShowEngineContent) SLATE_ARGUMENT(bool, ForceShowPluginContent) SLATE_ARGUMENT(bool, ForceHideScrollbar) SLATE_ARGUMENT(bool, ShowDisallowedAssetClassAsUnsupportedItems) SLATE_ARGUMENT(bool, AllowCustomView) SLATE_EVENT( FOnShouldDisplayAssetTag, OnAssetTagWantsToBeDisplayed ) SLATE_EVENT( FOnGetCustomSourceAssets, OnGetCustomSourceAssets ) SLATE_ARGUMENT( TArray<FString>, HiddenColumnNames ) SLATE_ARGUMENT( TArray<FAssetViewCustomColumn>, CustomColumns ) SLATE_EVENT( FOnSearchOptionChanged, OnSearchOptionsChanged) SLATE_ARGUMENT(TSharedPtr<SContentBrowser>, OwningContentBrowser) SLATE_ARGUMENT(TOptional<FName>, AssetViewOptionsProfile) SLATE_END_ARGS()"
  },
  {
    "label": "SAssetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAssetView()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetSourcesData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourcesData(const FSourcesData& InSourcesData)"
  },
  {
    "label": "GetSourcesData()",
    "kind": "Method",
    "detail": "Function (const FSourcesData&)",
    "insertText": "GetSourcesData()"
  },
  {
    "label": "IsAssetPathSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetPathSelected()"
  },
  {
    "label": "SetBackendFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackendFilter(const FARFilter& InBackendFilter, TArray<TSharedRef<const FPathPermissionList>>* InCustomPermissionLists = nullptr)"
  },
  {
    "label": "GetBackendFilter()",
    "kind": "Method",
    "detail": "Function (const FARFilter&)",
    "insertText": "GetBackendFilter()"
  },
  {
    "label": "NewFileItemRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewFileItemRequested(const FContentBrowserItemDataTemporaryContext& NewItemContext)"
  },
  {
    "label": "CreateNewAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewAsset(const FString& DefaultAssetName, const FString& PackagePath, UClass* AssetClass, UFactory* Factory)"
  },
  {
    "label": "RenameItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameItem(const FContentBrowserItem& ItemToRename)"
  },
  {
    "label": "SyncToItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToItems(TArrayView<const FContentBrowserItem> ItemsToSync, const bool bFocusOnSync = true)"
  },
  {
    "label": "SyncToVirtualPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToVirtualPaths(TArrayView<const FName> VirtualPathsToSync, const bool bFocusOnSync = true)"
  },
  {
    "label": "SyncToLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncToLegacy(TArrayView<const FAssetData> AssetDataList, TArrayView<const FString> FolderList, const bool bFocusOnSync = true)"
  },
  {
    "label": "InitDeferredPendingSyncItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDeferredPendingSyncItems()"
  },
  {
    "label": "ApplyHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHistoryData(const FHistoryData& History)"
  },
  {
    "label": "GetSelectedViewItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FAssetViewItem>>)",
    "insertText": "GetSelectedViewItems()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<FContentBrowserItem>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "GetSelectedFolderItems()",
    "kind": "Method",
    "detail": "Function (TArray<FContentBrowserItem>)",
    "insertText": "GetSelectedFolderItems()"
  },
  {
    "label": "GetSelectedFileItems()",
    "kind": "Method",
    "detail": "Function (TArray<FContentBrowserItem>)",
    "insertText": "GetSelectedFileItems()"
  },
  {
    "label": "GetSelectedAssets()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData>)",
    "insertText": "GetSelectedAssets()"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetSelectedFolders()"
  },
  {
    "label": "RequestSlowFullListRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSlowFullListRefresh()"
  },
  {
    "label": "RequestQuickFrontendListRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestQuickFrontendListRefresh()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "AdjustActiveSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustActiveSelection(int32 SelectionDelta)"
  },
  {
    "label": "IsRenamingAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenamingAsset()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry,const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnOpenAssetsOrFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenAssetsOrFolders()"
  },
  {
    "label": "OnPreviewAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewAssets()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection(bool bForceSilent = false)"
  },
  {
    "label": "IsThumbnailEditMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThumbnailEditMode()"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName PropertyName)"
  },
  {
    "label": "SetUserSearching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserSearching(bool bInSearching)"
  },
  {
    "label": "ForceShowPluginFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceShowPluginFolder(bool bEnginePlugin)"
  },
  {
    "label": "OverrideShowEngineContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideShowEngineContent()"
  },
  {
    "label": "OverrideShowDeveloperContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideShowDeveloperContent()"
  },
  {
    "label": "OverrideShowPluginContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideShowPluginContent()"
  },
  {
    "label": "OverrideShowLocalizedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideShowLocalizedContent()"
  },
  {
    "label": "IsIncludingClassNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncludingClassNames()"
  },
  {
    "label": "IsIncludingAssetPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncludingAssetPaths()"
  },
  {
    "label": "IsIncludingCollectionNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncludingCollectionNames()"
  },
  {
    "label": "GetViewButtonContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetViewButtonContent()"
  },
  {
    "label": "SetCurrentViewType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentViewType(EAssetViewType::Type NewType)"
  },
  {
    "label": "SetCurrentThumbnailSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThumbnailSize(EThumbnailSize NewThumbnailSize)"
  },
  {
    "label": "GetAssetCountText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetCountText()"
  },
  {
    "label": "ThumbnailSizeToDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ThumbnailSizeToDisplayName(EThumbnailSize InSize)"
  },
  {
    "label": "SetFilterBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterBar(TSharedPtr<SFilterList> InFilterBar)"
  },
  {
    "label": "SetShouldFilterItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldFilterItem(FOnShouldFilterItem InCallback)"
  },
  {
    "label": "SyncToSelection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SyncToSelection(const bool bFocusOnSync = true)"
  },
  {
    "label": "GetThumbnailScaleSettingPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetThumbnailScaleSettingPath(const FString& SettingsString)"
  },
  {
    "label": "GetCurrentViewTypeSettingPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentViewTypeSettingPath(const FString& SettingsString)"
  },
  {
    "label": "CalculateFillScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFillScale(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "CalculateThumbnailHintColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateThumbnailHintColorAndOpacity()"
  },
  {
    "label": "HasItemsPendingFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasItemsPendingFilter()"
  },
  {
    "label": "ProcessItemsPendingFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessItemsPendingFilter(const double TickStartTime)"
  },
  {
    "label": "CreateTileView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SAssetTileView>)",
    "insertText": "CreateTileView()"
  },
  {
    "label": "CreateListView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SAssetListView>)",
    "insertText": "CreateListView()"
  },
  {
    "label": "CreateColumnView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SAssetColumnView>)",
    "insertText": "CreateColumnView()"
  },
  {
    "label": "CreateCustomView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateCustomView()"
  },
  {
    "label": "GetRevisionControlColumnIconBadge()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetRevisionControlColumnIconBadge()"
  },
  {
    "label": "IsValidSearchToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSearchToken(const FString& Token)"
  },
  {
    "label": "RefreshSourceItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSourceItems()"
  },
  {
    "label": "RefreshFilteredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFilteredItems()"
  },
  {
    "label": "SetMajorityAssetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMajorityAssetType(FName NewMajorityAssetType)"
  },
  {
    "label": "OnAssetsAddedToCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetsAddedToCollection(const FCollectionNameType& Collection, TConstArrayView<FSoftObjectPath> ObjectPaths)"
  },
  {
    "label": "OnAssetsRemovedFromCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetsRemovedFromCollection(const FCollectionNameType& Collection, TConstArrayView<FSoftObjectPath> ObjectPaths)"
  },
  {
    "label": "OnCollectionRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollectionRenamed(const FCollectionNameType& OriginalCollection, const FCollectionNameType& NewCollection)"
  },
  {
    "label": "OnCollectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollectionUpdated(const FCollectionNameType& Collection)"
  },
  {
    "label": "OnFrontendFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrontendFiltersChanged()"
  },
  {
    "label": "IsFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrontendFilterActive()"
  },
  {
    "label": "PassesCurrentFrontendFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesCurrentFrontendFilter(const FContentBrowserItem& Item)"
  },
  {
    "label": "ShouldFilterRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterRecursively()"
  },
  {
    "label": "SortList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortList(bool bSyncToSelection = true)"
  },
  {
    "label": "GetThumbnailHintColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetThumbnailHintColorAndOpacity()"
  },
  {
    "label": "RegisterGetViewButtonMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGetViewButtonMenu()"
  },
  {
    "label": "PopulateViewButtonMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateViewButtonMenu(UToolMenu* Menu)"
  },
  {
    "label": "PopulateFilterAdditionalParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateFilterAdditionalParams(FFiltersAdditionalParams& OutParams)"
  },
  {
    "label": "ToggleShowFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowFolders()"
  },
  {
    "label": "IsToggleShowFoldersAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowFoldersAllowed()"
  },
  {
    "label": "IsShowingFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingFolders()"
  },
  {
    "label": "IsShowingReadOnlyFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingReadOnlyFolders()"
  },
  {
    "label": "ToggleShowEmptyFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowEmptyFolders()"
  },
  {
    "label": "IsToggleShowEmptyFoldersAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowEmptyFoldersAllowed()"
  },
  {
    "label": "IsShowingEmptyFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingEmptyFolders()"
  },
  {
    "label": "IsShowingRedirectors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingRedirectors()"
  },
  {
    "label": "ToggleShowLocalizedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowLocalizedContent()"
  },
  {
    "label": "IsToggleShowLocalizedContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowLocalizedContentAllowed()"
  },
  {
    "label": "IsShowingLocalizedContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingLocalizedContent()"
  },
  {
    "label": "ToggleRealTimeThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleRealTimeThumbnails()"
  },
  {
    "label": "CanShowRealTimeThumbnails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowRealTimeThumbnails()"
  },
  {
    "label": "IsShowingRealTimeThumbnails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingRealTimeThumbnails()"
  },
  {
    "label": "ToggleShowPluginContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowPluginContent()"
  },
  {
    "label": "IsShowingPluginContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingPluginContent()"
  },
  {
    "label": "ToggleShowEngineContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowEngineContent()"
  },
  {
    "label": "IsShowingEngineContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingEngineContent()"
  },
  {
    "label": "ToggleShowDevelopersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowDevelopersContent()"
  },
  {
    "label": "IsToggleShowDevelopersContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowDevelopersContentAllowed()"
  },
  {
    "label": "IsToggleShowEngineContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowEngineContentAllowed()"
  },
  {
    "label": "IsToggleShowPluginContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowPluginContentAllowed()"
  },
  {
    "label": "IsShowingDevelopersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingDevelopersContent()"
  },
  {
    "label": "ToggleShowFavorites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowFavorites()"
  },
  {
    "label": "IsToggleShowFavoritesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowFavoritesAllowed()"
  },
  {
    "label": "IsShowingFavorites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingFavorites()"
  },
  {
    "label": "ToggleDockCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDockCollections()"
  },
  {
    "label": "IsToggleDockCollectionsAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleDockCollectionsAllowed()"
  },
  {
    "label": "HasDockedCollections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDockedCollections()"
  },
  {
    "label": "IsToggleShowCppContentAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowCppContentAllowed()"
  },
  {
    "label": "IsShowingCppContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingCppContent()"
  },
  {
    "label": "ToggleIncludeClassNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIncludeClassNames()"
  },
  {
    "label": "IsToggleIncludeClassNamesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleIncludeClassNamesAllowed()"
  },
  {
    "label": "ToggleIncludeAssetPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIncludeAssetPaths()"
  },
  {
    "label": "IsToggleIncludeAssetPathsAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleIncludeAssetPathsAllowed()"
  },
  {
    "label": "ToggleIncludeCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIncludeCollectionNames()"
  },
  {
    "label": "IsToggleIncludeCollectionNamesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleIncludeCollectionNamesAllowed()"
  },
  {
    "label": "IsFilteringRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilteringRecursively()"
  },
  {
    "label": "IsToggleFilteringRecursivelyAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleFilteringRecursivelyAllowed()"
  },
  {
    "label": "ToggleFilteringRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilteringRecursively()"
  },
  {
    "label": "ToggleShowAllFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowAllFolder()"
  },
  {
    "label": "IsShowingAllFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingAllFolder()"
  },
  {
    "label": "ToggleOrganizeFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOrganizeFolders()"
  },
  {
    "label": "IsOrganizingFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOrganizingFolders()"
  },
  {
    "label": "SetCurrentViewTypeFromMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentViewTypeFromMenu(EAssetViewType::Type NewType)"
  },
  {
    "label": "CreateCurrentView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurrentView()"
  },
  {
    "label": "GetCurrentViewType()",
    "kind": "Method",
    "detail": "Function (EAssetViewType::Type)",
    "insertText": "GetCurrentViewType()"
  },
  {
    "label": "CreateShadowOverlay()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateShadowOverlay(TSharedRef<STableViewBase> Table)"
  },
  {
    "label": "IsCurrentViewType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentViewType(EAssetViewType::Type ViewType)"
  },
  {
    "label": "FocusList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusList()"
  },
  {
    "label": "RefreshList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshList()"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelection(const TSharedPtr<FAssetViewItem>& Item)"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemSelection(const TSharedPtr<FAssetViewItem>& Item, bool bSelected, const ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestScrollIntoView(const TSharedPtr<FAssetViewItem>& Item)"
  },
  {
    "label": "MakeListViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeListViewWidget(TSharedPtr<FAssetViewItem> AssetItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "MakeTileViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeTileViewWidget(TSharedPtr<FAssetViewItem> AssetItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "MakeColumnViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeColumnViewWidget(TSharedPtr<FAssetViewItem> AssetItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "AssetItemWidgetDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetItemWidgetDestroyed(const TSharedPtr<FAssetViewItem>& Item)"
  },
  {
    "label": "UpdateThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThumbnails()"
  },
  {
    "label": "AddItemToNewThumbnailRelevancyMap()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAssetThumbnail>)",
    "insertText": "AddItemToNewThumbnailRelevancyMap(const TSharedPtr<FAssetViewItem>& Item, TMap< TSharedPtr<FAssetViewItem>, TSharedPtr<FAssetThumbnail> >& NewRelevantThumbnails)"
  },
  {
    "label": "AssetSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetSelectionChanged(TSharedPtr<FAssetViewItem > AssetItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ItemScrolledIntoView(TSharedPtr<FAssetViewItem> AssetItem, const TSharedPtr<ITableRow>& Widget)"
  },
  {
    "label": "OnGetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContent()"
  },
  {
    "label": "CanOpenContextMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenContextMenu()"
  },
  {
    "label": "OnListMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListMouseButtonDoubleClick(TSharedPtr<FAssetViewItem> AssetItem)"
  },
  {
    "label": "OnDraggingAssetItem()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDraggingAssetItem(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AssetVerifyRenameCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetVerifyRenameCommit(const TSharedPtr<FAssetViewItem>& Item, const FText& NewName, const FSlateRect& MessageAnchor, FText& OutErrorMessage)"
  },
  {
    "label": "AssetRenameBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetRenameBegin(const TSharedPtr<FAssetViewItem>& Item, const FString& NewName, const FSlateRect& MessageAnchor)"
  },
  {
    "label": "AssetRenameCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetRenameCommit(const TSharedPtr<FAssetViewItem>& Item, const FString& NewName, const FSlateRect& MessageAnchor, const ETextCommit::Type CommitType)"
  },
  {
    "label": "GetAssetNameColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetAssetNameColorAndOpacity()"
  },
  {
    "label": "ShouldAllowToolTips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowToolTips()"
  },
  {
    "label": "IsThumbnailEditModeAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThumbnailEditModeAllowed()"
  },
  {
    "label": "EndThumbnailEditModeClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "EndThumbnailEditModeClicked()"
  },
  {
    "label": "GetEditModeLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditModeLabelVisibility()"
  },
  {
    "label": "GetListViewVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetListViewVisibility()"
  },
  {
    "label": "GetTileViewVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTileViewVisibility()"
  },
  {
    "label": "GetColumnViewVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetColumnViewVisibility()"
  },
  {
    "label": "ToggleThumbnailEditMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleThumbnailEditMode()"
  },
  {
    "label": "OnThumbnailSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThumbnailSizeChanged(EThumbnailSize NewThumbnailSize)"
  },
  {
    "label": "IsThumbnailSizeChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThumbnailSizeChecked(EThumbnailSize InThumbnailSize)"
  },
  {
    "label": "IsThumbnailScalingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThumbnailScalingAllowed()"
  },
  {
    "label": "GetThumbnailScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetThumbnailScale()"
  },
  {
    "label": "GetThumbnailSizeValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetThumbnailSizeValue()"
  },
  {
    "label": "UpdateThumbnailSizeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThumbnailSizeValue()"
  },
  {
    "label": "GetThumbnailSize()",
    "kind": "Method",
    "detail": "Function (EThumbnailSize)",
    "insertText": "GetThumbnailSize()"
  },
  {
    "label": "GetSourceControlIconHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSourceControlIconHeight()"
  },
  {
    "label": "GetListViewItemHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetListViewItemHeight()"
  },
  {
    "label": "GetTileViewItemHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTileViewItemHeight()"
  },
  {
    "label": "GetTileViewThumbnailDimension()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTileViewThumbnailDimension()"
  },
  {
    "label": "GetTileViewItemBaseHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTileViewItemBaseHeight()"
  },
  {
    "label": "GetTileViewItemWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTileViewItemWidth()"
  },
  {
    "label": "GetTileViewItemBaseWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTileViewItemBaseWidth()"
  },
  {
    "label": "GetColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetColumnSortMode(const FName ColumnId)"
  },
  {
    "label": "GetColumnSortPriority()",
    "kind": "Method",
    "detail": "Function (EColumnSortPriority::Type)",
    "insertText": "GetColumnSortPriority(const FName ColumnId)"
  },
  {
    "label": "OnSortColumnHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortColumnHeader(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type NewSortMode)"
  },
  {
    "label": "GetIsWorkingProgressBarState()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetIsWorkingProgressBarState()"
  },
  {
    "label": "IsAssetShowWarningTextVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsAssetShowWarningTextVisible()"
  },
  {
    "label": "GetAssetShowWarningText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetShowWarningText()"
  },
  {
    "label": "HasSingleCollectionSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSingleCollectionSource()"
  },
  {
    "label": "BeginCreateDeferredItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCreateDeferredItem()"
  },
  {
    "label": "EndCreateDeferredItem()",
    "kind": "Method",
    "detail": "Function (FContentBrowserItem)",
    "insertText": "EndCreateDeferredItem(const TSharedPtr<FAssetViewItem>& InItem, const FString& InName, const bool bFinalize, FText& OutErrorText)"
  },
  {
    "label": "GetQuickJumpTerm()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetQuickJumpTerm()"
  },
  {
    "label": "IsQuickJumpVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsQuickJumpVisible()"
  },
  {
    "label": "GetQuickJumpColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetQuickJumpColor()"
  },
  {
    "label": "ResetQuickJump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetQuickJump()"
  },
  {
    "label": "HandleQuickJumpKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleQuickJumpKeyDown(const TCHAR InCharacter, const bool bIsControlDown, const bool bIsAltDown, const bool bTestOnly)"
  },
  {
    "label": "PerformQuickJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformQuickJump(const bool bWasJumping)"
  },
  {
    "label": "ResetColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetColumns()"
  },
  {
    "label": "ExportColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportColumns()"
  },
  {
    "label": "OnHiddenColumnsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHiddenColumnsChanged()"
  },
  {
    "label": "GetMaxRowSizeForColumn()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetMaxRowSizeForColumn(const FName& ColumnId)"
  },
  {
    "label": "AppendBackendFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBackendFilter(FARFilter& FilterToAppendTo)"
  },
  {
    "label": "DetermineItemCategoryFilter()",
    "kind": "Method",
    "detail": "Function (EContentBrowserItemCategoryFilter)",
    "insertText": "DetermineItemCategoryFilter()"
  },
  {
    "label": "CreateBackendDataFilter()",
    "kind": "Method",
    "detail": "Function (FContentBrowserDataFilter)",
    "insertText": "CreateBackendDataFilter(bool bInvalidateCache)"
  },
  {
    "label": "HandleItemDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDataUpdated(TArrayView<const FContentBrowserItemDataUpdate> InUpdatedItems)"
  },
  {
    "label": "HandleItemDataDiscoveryComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDataDiscoveryComplete()"
  },
  {
    "label": "GetContentBrowserConfig()",
    "kind": "Method",
    "detail": "Function (FContentBrowserInstanceConfig*)",
    "insertText": "GetContentBrowserConfig()"
  },
  {
    "label": "GetAssetViewConfig()",
    "kind": "Method",
    "detail": "Function (FAssetViewInstanceConfig*)",
    "insertText": "GetAssetViewConfig()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "PopulateSelectedFilesAndFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateSelectedFilesAndFolders(TArray<FContentBrowserItem>& OutSelectedFolders, TArray<FContentBrowserItem>& OutSelectedFiles)"
  },
  {
    "label": "ExecuteCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCopy(EAssetViewCopyType InCopyType)"
  },
  {
    "label": "ExecuteCopyFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCopyFolders(const TArray<FContentBrowserItem>& InSelectedFolders, FString& OutClipboardText)"
  },
  {
    "label": "ExecutePaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePaste()"
  },
  {
    "label": "IsCustomViewSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomViewSet()"
  },
  {
    "label": "FQuickJumpData()",
    "kind": "Method",
    "detail": "Function (private : class FAssetViewFrontendFilterHelper ; TPimplPtr<FAssetViewItemCollection> Items ; TArray<TSharedPtr<FAssetViewItem>> FilteredAssetItems ; TMap<FName,int32> FilteredAssetItemTypeCounts ; EAssetViewType::Type CurrentViewType ; TSharedPtr<SAssetListView> ListView ; TSharedPtr<SAssetTileView> TileView ; TSharedPtr<SAssetColumnView> ColumnView ; TSharedPtr<SBox> ViewContainer ; TWeakPtr<SContentBrowser> OwningContentBrowser ; TWeakPtr<SFilterList> FilterBar ; FSourcesData SourcesData ; FARFilter BackendFilter ; TSharedPtr<FPathPermissionList> AssetClassPermissionList ; TSharedPtr<FPathPermissionList> FolderPermissionList ; TSharedPtr<FPathPermissionList> WritableFolderPermissionList ; TArray<TSharedRef<const FPathPermissionList>> BackendCustomPathFilters ; TSharedPtr<FAssetFilterCollectionType> FrontendFilters ; TSharedPtr<FAssetTextFilter> TextFilter ; float ZoomScale = 0 . 0 f ; int32 TileViewHeightPadding = 9 ; int32 TileViewWidthPadding = 8 ; TAttribute<bool> bShowRedirectors ; bool bLastShowRedirectors ; bool bShowPathViewFilters ; bool bSlowFullListRefreshRequested ; bool bQuickFrontendListRefreshRequested ; FSelectionData PendingSyncItems ; FSelectionData DeferredPendingSyncItems ; int32 DeferredSyncTimeoutFrames = 0 ; bool bPendingFocusOnSync ; bool bWereItemsRecursivelyFiltered ; FOnShouldFilterAsset OnShouldFilterAsset ; FOnShouldFilterItem OnShouldFilterItem ; FOnAssetViewNewItemRequested OnNewItemRequested ; FOnContentBrowserItemSelectionChanged OnItemSelectionChanged ; FOnContentBrowserItemsActivated OnItemsActivated ; FOnGetContentBrowserItemContextMenu OnGetItemContextMenu ; FOnContentBrowserItemRenameCommitted OnItemRenameCommitted ; FOnShouldDisplayAssetTag OnAssetTagWantsToBeDisplayed ; FOnIsAssetValidForCustomToolTip OnIsAssetValidForCustomToolTip ; FOnGetCustomAssetToolTip OnGetCustomAssetToolTip ; FOnVisualizeAssetToolTip OnVisualizeAssetToolTip ; FOnAssetToolTipClosing OnAssetToolTipClosing ; FOnGetCustomSourceAssets OnGetCustomSourceAssets ; FOnSearchOptionChanged OnSearchOptionsChanged ; FOnExtendAssetViewOptionsMenuContext OnExtendAssetViewOptionsMenuContext ; TOptional<FName> AssetViewOptionsProfile ; bool bPendingSortFilteredItems ; double CurrentTime ; double LastSortTime ; double SortDelaySeconds ; TWeakPtr<FAssetViewItem> AwaitingScrollIntoViewForRename ; TWeakPtr<FAssetViewItem> AwaitingRename ; TWeakPtr<FAssetViewItem> RenamingAsset ; TSharedPtr<FAssetThumbnailPool> AssetThumbnailPool ; TMap<TSharedPtr<FAssetViewItem>,TSharedPtr<FAssetThumbnail>> RelevantThumbnails ; TArray<TSharedPtr<FAssetViewItem>> VisibleItems ; int32 NumOffscreenThumbnails ; int32 CurrentThumbnailSize ; bool bPendingUpdateThumbnails ; int32 ListViewThumbnailResolution ; int32 ListViewThumbnailSize ; int32 ListViewThumbnailPadding ; int32 TileViewThumbnailResolution ; int32 TileViewThumbnailSize ; int32 TileViewThumbnailPadding ; int32 TileViewNameHeight ; float MinThumbnailScale ; float MaxThumbnailScale ; float MinThumbnailSize ; float MaxThumbnailSize ; float ThumbnailScaleRangeScalar ; EThumbnailSize ThumbnailSize ; float FillScale ; FName MajorityAssetType ; FAssetViewSortManager SortManager ; bool bFillEmptySpaceInTileView ; bool bBulkSelecting ; bool bAllowThumbnailEditMode : 1 ; bool bThumbnailEditMode : 1 ; bool bCanShowClasses : 1 ; bool bCanShowFolders : 1 ; bool bCanShowReadOnlyFolders : 1 ; bool bFilterRecursivelyWithBackendFilter : 1 ; bool bCanShowRealTimeThumbnails : 1 ; bool bCanShowDevelopersFolder : 1 ; bool bCanShowFavorites : 1 ; bool bCanDockCollections : 1 ; bool bShowPathInColumnView : 1 ; bool bShowTypeInColumnView : 1 ; bool bSortByPathInColumnView : 1 ; bool bShowTypeInTileView : 1 ; bool bForceShowEngineContent : 1 ; bool bForceShowPluginContent : 1 ; bool bForceHideScrollbar : 1 ; bool bAllowDragging : 1 ; bool bAllowFocusOnSync : 1 ; bool bUserSearching : 1 ; bool bShouldNotifyNextAssetSync : 1 ; ESelectionMode::Type SelectionMode ; float MaxSecondsPerFrame ; double AmortizeStartTime ; double TotalAmortizeTime ; int32 InitialNumAmortizedTasks ; TAttribute<FText> HighlightedText ; EThumbnailLabel::Type ThumbnailLabel ; bool AllowThumbnailHintLabel ; FCurveSequence ThumbnailHintFadeInSequence ; FLinearColor ThumbnailHintColorAndOpacity ; TAttribute<FText> AssetShowWarningText ; EContentBrowserItemCategoryFilter InitialCategoryFilter ; TSharedPtr<FUICommandList> Commands ; bool bShowDisallowedAssetClassAsUnsupportedItems = false ; struct FCreateDeferredItemData { FContentBrowserItemTemporaryContext ItemContext ; bool bWasAddedToView = false ; } ; TUniquePtr<FCreateDeferredItemData> DeferredItemToCreate ; struct FQuickJumpData {)",
    "insertText": "FQuickJumpData() : bIsJumping(false) , bHasChangedSinceLastTick(false) , bHasValidMatch(false) , LastJumpTime(0)"
  },
  {
    "label": "OnCompleteFiltering()",
    "kind": "Method",
    "detail": "Function (} bool bIsJumping ; bool bHasChangedSinceLastTick ; bool bHasValidMatch ; double LastJumpTime ; FString JumpTerm ; } ; FQuickJumpData QuickJumpData ; TArray<FString> DefaultHiddenColumnNames ; TArray<FString> HiddenColumnNames ; TArray<FAssetViewCustomColumn> CustomColumns ; FContentBrowserDataFilterCacheIDOwner FilterCacheID ; TSharedPtr<IContentBrowserViewExtender> ViewExtender ; TSharedPtr<SWidget> CustomView ; FGuid ViewCorrelationGuid ; FGuid FilterSessionCorrelationGuid ; UE::Telemetry::ContentBrowser::FFrontendFilterTelemetry CurrentFrontendFilterTelemetry ; void)",
    "insertText": "OnCompleteFiltering(double InAmortizeDuration)"
  },
  {
    "label": "OnInterruptFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInterruptFiltering()"
  },
  {
    "label": "OnInteractDuringFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInteractDuringFiltering()"
  },
  {
    "label": "ShouldColumnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldColumnGenerateWidget(const FString ColumnName)"
  }
]