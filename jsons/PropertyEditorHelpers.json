[
  {
    "label": "FNotifyHook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNotifyHook"
  },
  {
    "label": "FObjectPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPropertyNode"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SPropertyNameWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyNameWidget"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SPropertyValueWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyValueWidget"
  },
  {
    "label": "SEditConditionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditConditionWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SWidget . h \" # include \" IPropertyUtilities . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" PropertyNode . h \" # include \" Presentation / PropertyEditor / PropertyEditor . h \" # include \" SDetailSingleItemRow . h \" class FNotifyHook ; class FObjectPropertyNode ; class FDetailWidgetRow ; namespace EPropertyButton { enum Type { Add,Empty,Insert_Delete_Duplicate,Insert_Delete,Insert,Delete,Duplicate,Browse,PickAsset,PickActor,PickActorInteractive,Clear,Use,NewBlueprint,EditConfigHierarchy,Documentation,OptionalSet,OptionalClear,} ; } class SPropertyNameWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyNameWidget)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnClicked, OnDoubleClicked ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, TSharedPtr<FPropertyEditor> PropertyEditor)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class FPropertyEditor> PropertyEditor ; } ; class SPropertyValueWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyValueWidget ) : _ShowPropertyButtons( true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, ShowPropertyButtons ) SLATE_ARGUMENT(TOptional<FDetailWidgetRow*>, InWidgetRow) SLATE_END_ARGS() void Construct( const FArguments& InArgs, TSharedPtr<FPropertyEditor> InPropertyEditor, TSharedPtr<IPropertyUtilities> InPropertyUtilities)"
  },
  {
    "label": "GetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinDesiredWidth()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWidget> ValueEditorWidget ; float MinDesiredWidth ; float MaxDesiredWidth ; TOptional<FDetailWidgetRow*> WidgetRow ; } ; class SEditConditionWidget : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SEditConditionWidget)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, EditConditionValue ) SLATE_EVENT( FOnBooleanValueChanged, OnEditConditionValueChanged ) SLATE_END_ARGS() void Construct( const FArguments& Args)"
  },
  {
    "label": "OnEditConditionCheckChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnEditConditionCheckChanged(ECheckBoxState CheckState)"
  },
  {
    "label": "HasEditConditionToggle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEditConditionToggle()"
  },
  {
    "label": "OnGetEditConditionCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetEditConditionCheckState()"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "ShouldBeVisible()",
    "kind": "Method",
    "detail": "Function (private : TAttribute<bool> EditConditionValue ; FOnBooleanValueChanged OnEditConditionValueChanged ; } ; namespace PropertyEditorHelpers { bool)",
    "insertText": "ShouldBeVisible(const FPropertyNode& InParentNode, const FProperty* Property)"
  },
  {
    "label": "IsBuiltInStructProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuiltInStructProperty(const FProperty* Property)"
  },
  {
    "label": "IsChildOfArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOfArray(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsChildOfSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOfSet(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsChildOfMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOfMap(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsStaticArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStaticArray(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsDynamicArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicArray(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsOptionalProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOptionalProperty(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftObjectPath(const FProperty* Property)"
  },
  {
    "label": "IsSoftClassPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftClassPath(const FProperty* Property)"
  },
  {
    "label": "GetArrayParent()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "GetArrayParent(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "GetSetParent()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "GetSetParent(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "GetMapParent()",
    "kind": "Method",
    "detail": "Function (const FProperty*)",
    "insertText": "GetMapParent(const FPropertyNode& InPropertyNode)"
  },
  {
    "label": "IsEditInlineClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditInlineClassAllowed(UClass* CheckClass, bool bAllowAbstract)"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText(const FProperty* const Property)"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationLink(const FProperty* const Property)"
  },
  {
    "label": "GetEnumDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnumDocumentationLink(const FProperty* const Property)"
  },
  {
    "label": "GetDocumentationExcerptName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationExcerptName(const FProperty* const Property)"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle>)",
    "insertText": "GetPropertyHandle(TSharedRef<FPropertyNode> PropertyNode, FNotifyHook* NotifyHook, TSharedPtr<IPropertyUtilities> PropertyUtilities)"
  },
  {
    "label": "GetRequiredPropertyButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequiredPropertyButtons(TSharedRef<FPropertyNode> PropertyNode, TArray<EPropertyButton::Type>& OutRequiredButtons, bool bUsingAssetPicker = true)"
  },
  {
    "label": "MakeRequiredPropertyButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRequiredPropertyButtons(const TSharedRef<FPropertyNode>& PropertyNode, const TSharedRef<IPropertyUtilities>& PropertyUtilities, TArray< TSharedRef<SWidget> >& OutButtons, const TArray<EPropertyButton::Type>& ButtonsToIgnore = TArray<EPropertyButton::Type>(), bool bUsingAssetPicker = true)"
  },
  {
    "label": "MakeRequiredPropertyButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRequiredPropertyButtons(const TSharedRef< FPropertyEditor >& PropertyEditor, TArray< TSharedRef<SWidget> >& OutButtons, const TArray<EPropertyButton::Type>& ButtonsToIgnore = TArray<EPropertyButton::Type>(), bool bUsingAssetPicker = true)"
  },
  {
    "label": "MakePropertyButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePropertyButton(const EPropertyButton::Type ButtonType, const TSharedRef< FPropertyEditor >& PropertyEditor)"
  },
  {
    "label": "MakePropertyReorderHandle()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePropertyReorderHandle(TSharedPtr<SDetailSingleItemRow> InParentRow, TAttribute<bool> InEnabledAttr)"
  },
  {
    "label": "CollectObjectNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectObjectNodes(TSharedPtr<FPropertyNode> StartNode, TArray<FObjectPropertyNode*>& OutObjectNodes)"
  },
  {
    "label": "GetValidEnumsFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetValidEnumsFromPropertyOverride(const FProperty* Property, const UEnum* InEnum)"
  },
  {
    "label": "GetInvalidEnumsFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetInvalidEnumsFromPropertyOverride(const FProperty* Property, const UEnum* InEnum)"
  },
  {
    "label": "GetRestrictedEnumsFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetRestrictedEnumsFromPropertyOverride(TArrayView<UObject*> ObjectList, const FProperty* Property, const UEnum* InEnum)"
  },
  {
    "label": "GetEnumValueDisplayNamesFromPropertyOverride()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FText>)",
    "insertText": "GetEnumValueDisplayNamesFromPropertyOverride(const FProperty* Property, const UEnum* InEnum)"
  },
  {
    "label": "IsCategoryHiddenByClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryHiddenByClass(const TSharedPtr<FComplexPropertyNode>& InRootNode, FName CategoryName)"
  },
  {
    "label": "IsVisibleStandaloneProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleStandaloneProperty(const FPropertyNode& PropertyNode, const FPropertyNode& ParentNode)"
  },
  {
    "label": "OrderPropertiesFromMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OrderPropertiesFromMetadata(TArray<FProperty*>& Properties)"
  },
  {
    "label": "GetPropertyOptionsMetaDataKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPropertyOptionsMetaDataKey(const FProperty* Property)"
  }
]