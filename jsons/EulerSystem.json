[
  {
    "label": "_System",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_System"
  },
  {
    "label": "EulerAngles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerAngles"
  },
  {
    "label": "Abs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Abs"
  },
  {
    "label": "IsValidAxis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsValidAxis"
  },
  {
    "label": "eulerangles_assign_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eulerangles_assign_impl"
  },
  {
    "label": "EulerAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EulerAxis"
  },
  {
    "label": "EulerSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerSystem"
  },
  {
    "label": "Eigen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eigen"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "IsPositive()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_EULERSYSTEM_H # define EIGEN_EULERSYSTEM_H namespace Eigen { template<_Scalar,class _System> class EulerAngles ; namespace internal { template<int Num,bool)",
    "insertText": "IsPositive(Num > 0)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (enum { value = Num } ; } ; template<int Num> struct Abs<Num,false> { enum { value = - Num } ; } ; template<int Axis> struct IsValidAxis { enum { value = Axis ! = 0&& Abs<Axis>::value<= 3 } ; } ; template<System,Other,int OtherRows = Other::RowsAtCompileTime,int OtherCols = Other::ColsAtCompileTime> struct eulerangles_assign_impl ; } # define)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT(COND,MSG) typedef char static_assertion_##MSG[(COND)"
  },
  {
    "label": "IsAlphaOpposite()",
    "kind": "Method",
    "detail": "Function (EULER_X = 1,EULER_Y = 2,EULER_Z = 3 } ; template<int _AlphaAxis,int _BetaAxis,int _GammaAxis> class EulerSystem { public : const int AlphaAxis = _AlphaAxis ; const int BetaAxis = _BetaAxis ; const int GammaAxis = _GammaAxis ; enum { AlphaAxisAbs = internal::Abs<AlphaAxis>::value,BetaAxisAbs = internal::Abs<BetaAxis>::value,GammaAxisAbs = internal::Abs<GammaAxis>::value,)",
    "insertText": "IsAlphaOpposite(AlphaAxis < 0) ? 1 : 0, IsBetaOpposite = (BetaAxis < 0) ? 1 : 0, IsGammaOpposite = (GammaAxis < 0) ? 1 : 0, IsOdd = ((AlphaAxisAbs)%3 == (BetaAxisAbs - 1)%3) ? 0 : 1, IsEven = IsOdd ? 0 : 1, IsTaitBryan = ((unsigned)AlphaAxisAbs != (unsigned)GammaAxisAbs)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT(internal::IsValidAxis<AlphaAxis>::value, ALPHA_AXIS_IS_INVALID)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT(internal::IsValidAxis<BetaAxis>::value, BETA_AXIS_IS_INVALID)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT(internal::IsValidAxis<GammaAxis>::value, GAMMA_AXIS_IS_INVALID)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT((unsigned)AlphaAxisAbs != (unsigned)BetaAxisAbs, ALPHA_AXIS_CANT_BE_EQUAL_TO_BETA_AXIS)"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT((unsigned)BetaAxisAbs != (unsigned)GammaAxisAbs, BETA_AXIS_CANT_BE_EQUAL_TO_GAMMA_AXIS)"
  },
  {
    "label": "J_()",
    "kind": "Method",
    "detail": "Function (const int I_ = AlphaAxisAbs - 1,)",
    "insertText": "J_(AlphaAxisAbs - 1 + 1 + IsOdd)%3, K_ = (AlphaAxisAbs - 1 + 2 - IsOdd)"
  },
  {
    "label": "CalcEulerAngles_imp()",
    "kind": "Method",
    "detail": "Function (template<Derived> void)",
    "insertText": "CalcEulerAngles_imp(Matrix<typename MatrixBase<Derived>::Scalar, 3, 1>& res, const MatrixBase<Derived>& mat, internal::true_type)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (using std::atan2 ; using std::sqrt ; typedef Derived::Scalar Scalar ; const Scalar plusMinus = IsEven ? 1 : - 1 ; const Scalar minusPlus = IsOdd ? 1 : - 1 ; const Scalar Rsum =)",
    "insertText": "sqrt((mat(I_,I_) * mat(I_,I_) + mat(I_,J_) * mat(I_,J_) + mat(J_,K_) * mat(J_,K_) + mat(K_,K_) * mat(K_,K_))/2)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 1 ] =)",
    "insertText": "atan2(plusMinus * mat(I_,K_), Rsum)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 0 ] =)",
    "insertText": "atan2(minusPlus * mat(J_, K_), mat(K_, K_))"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 2 ] =)",
    "insertText": "atan2(minusPlus * mat(I_, J_), mat(I_, I_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(plusMinus * mat(I_, K_) > 0)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar spos =)",
    "insertText": "mat(J_, I_) + plusMinus * mat(K_, J_)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar cpos =)",
    "insertText": "mat(J_, J_) + minusPlus * mat(K_, I_)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (Scalar alphaPlusMinusGamma =)",
    "insertText": "atan2(spos, cpos)"
  },
  {
    "label": "plusMinus()",
    "kind": "Method",
    "detail": "Function (res [ 0 ] = alphaPlusMinusGamma ; res [ 2 ] = 0 ; } else { Scalar sneg =)",
    "insertText": "plusMinus(mat(K_, J_) + minusPlus * mat(J_, I_))"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar cneg =)",
    "insertText": "mat(J_, J_) + plusMinus * mat(K_, I_)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (Scalar alphaMinusPlusBeta =)",
    "insertText": "atan2(sneg, cneg)"
  },
  {
    "label": "CalcEulerAngles_imp()",
    "kind": "Method",
    "detail": "Function (res [ 0 ] = alphaMinusPlusBeta ; res [ 2 ] = 0 ; } } template<Derived> void)",
    "insertText": "CalcEulerAngles_imp(Matrix<typename MatrixBase<Derived>::Scalar,3,1>& res, const MatrixBase<Derived>& mat, internal::false_type)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (using std::atan2 ; using std::sqrt ; typedef Derived::Scalar Scalar ; const Scalar plusMinus = IsEven ? 1 : - 1 ; const Scalar minusPlus = IsOdd ? 1 : - 1 ; const Scalar Rsum =)",
    "insertText": "sqrt((mat(I_, J_) * mat(I_, J_) + mat(I_, K_) * mat(I_, K_) + mat(J_, I_) * mat(J_, I_) + mat(K_, I_) * mat(K_, I_)) / 2)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 1 ] =)",
    "insertText": "atan2(Rsum, mat(I_, I_))"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 0 ] =)",
    "insertText": "atan2(mat(J_, I_), minusPlus * mat(K_, I_))"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (res [ 2 ] =)",
    "insertText": "atan2(mat(I_, J_), plusMinus * mat(I_, K_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mat(I_, I_) > 0)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar spos = plusMinus*)",
    "insertText": "mat(K_, J_) + minusPlus * mat(J_, K_)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar cpos =)",
    "insertText": "mat(J_, J_) + mat(K_, K_)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (res [ 2 ] = 0 ; } else { Scalar sneg = plusMinus*)",
    "insertText": "mat(K_, J_) + plusMinus * mat(J_, K_)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar cneg =)",
    "insertText": "mat(J_, J_) - mat(K_, K_)"
  },
  {
    "label": "CalcEulerAngles()",
    "kind": "Method",
    "detail": "Function (res [ 2 ] = 0 ; } } template<Scalar> void)",
    "insertText": "CalcEulerAngles(EulerAngles<Scalar, EulerSystem>& res, const typename EulerAngles<Scalar, EulerSystem>::Matrix3& mat)"
  },
  {
    "label": "CalcEulerAngles_imp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcEulerAngles_imp(res.angles(), mat, typename internal::conditional<IsTaitBryan, internal::true_type, internal::false_type>::type())"
  },
  {
    "label": "EIGEN_EULER_SYSTEM_TYPEDEF()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,class _System> class Eigen::EulerAngles ; template<System,Other,int OtherRows,int OtherCols> struct internal::eulerangles_assign_impl ; } ; # define)",
    "insertText": "EIGEN_EULER_SYSTEM_TYPEDEF(A, B, C)"
  }
]