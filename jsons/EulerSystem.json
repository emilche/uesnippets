[
  {
    "label": "_System",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_System"
  },
  {
    "label": "EulerAngles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerAngles"
  },
  {
    "label": "Abs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Abs"
  },
  {
    "label": "Abs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Abs"
  },
  {
    "label": "IsValidAxis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsValidAxis"
  },
  {
    "label": "eulerangles_assign_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eulerangles_assign_impl"
  },
  {
    "label": "EulerAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EulerAxis"
  },
  {
    "label": "EulerSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerSystem"
  },
  {
    "label": "goal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "goal"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "store",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "store"
  },
  {
    "label": "EulerSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerSystem"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "converters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "converters"
  },
  {
    "label": "_System",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_System"
  },
  {
    "label": "Eigen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eigen"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "EIGEN_EULER_ANGLES_CLASS_STATIC_ASSERT(internal::IsValidAxis<AlphaAxis>::value,\n      ALPHA_AXIS_IS_INVALID)"
  }
]