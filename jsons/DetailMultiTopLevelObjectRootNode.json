[
  {
    "label": "SDetailMultiTopLevelObjectTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDetailMultiTopLevelObjectTableRow"
  },
  {
    "label": "FDetailMultiTopLevelObjectRootNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailMultiTopLevelObjectRootNode"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" IPropertyUtilities . h \" # include \" DetailTreeNode . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" SDetailsViewBase . h \" # include \" SDetailTableRowBase . h \" # include \" IDetailRootObjectCustomization . h \" # include \" PropertyCustomizationHelpers . h \" using EExpansionArrowUsage = IDetailRootObjectCustomization::EExpansionArrowUsage ; class SDetailMultiTopLevelObjectTableRow : public SDetailTableRowBase { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDetailMultiTopLevelObjectTableRow) : _DisplayName() , _ExpansionArrowUsage(EExpansionArrowUsage::None)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, DisplayName ) SLATE_ARGUMENT(IDetailRootObjectCustomization::EExpansionArrowUsage, ExpansionArrowUsage) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<FDetailTreeNode> InOwnerTreeNode, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "GetBackgroundImage()",
    "kind": "Method",
    "detail": "Function (private : const FSlateBrush*)",
    "insertText": "GetBackgroundImage()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "FDetailMultiTopLevelObjectRootNode()",
    "kind": "Method",
    "detail": "Function (private : EExpansionArrowUsage ExpansionArrowUsage ; SHorizontalBox::FSlot* ContentSlot = nullptr ; TWeakPtr<STableViewBase> OwnerTableViewWeak ; } ; class FDetailMultiTopLevelObjectRootNode : public FDetailTreeNode,public TSharedFromThis<FDetailMultiTopLevelObjectRootNode> { public :)",
    "insertText": "FDetailMultiTopLevelObjectRootNode(const TSharedPtr<IDetailRootObjectCustomization>& RootObjectCustomization, IDetailsViewPrivate* InDetailsView, const FObjectPropertyNode* RootNode)"
  },
  {
    "label": "SetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildren(const FDetailNodeList& InChildNodes)"
  },
  {
    "label": "GetNodeDetailsView()",
    "kind": "Method",
    "detail": "Function (private : IDetailsView*)",
    "insertText": "GetNodeDetailsView()"
  },
  {
    "label": "ShouldBeExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeExpanded()"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (ENodeVisibility)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "GenerateWidgetForTableView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateWidgetForTableView(const TSharedRef<STableViewBase>& OwnerTable, bool bAllowFavoriteSystem)"
  },
  {
    "label": "GenerateStandaloneWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStandaloneWidget(FDetailWidgetRow& OutRow)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren(FDetailNodeList& OutChildren, const bool& bInIgnoreVisibility)"
  },
  {
    "label": "FilterNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterNode(const FDetailFilter& InFilter)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ShouldShowOnlyChildren()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowOnlyChildren()"
  },
  {
    "label": "GetNodeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeName()"
  }
]