[
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "ULandscapeScratchRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeScratchRenderTarget"
  },
  {
    "label": "ULandscapeEditLayerRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerRenderer"
  },
  {
    "label": "ILandscapeEditLayerRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILandscapeEditLayerRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWeightmapPaintLayerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightmapPaintLayerInfo"
  },
  {
    "label": "FEditLayerTargetTypeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditLayerTargetTypeState"
  },
  {
    "label": "FEditLayerRendererState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditLayerRendererState"
  },
  {
    "label": "FMergeRenderParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeRenderParams"
  },
  {
    "label": "FMergeRenderStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeRenderStep"
  },
  {
    "label": "FMergeRenderBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeRenderBatch"
  },
  {
    "label": "FComponentMergeRenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentMergeRenderInfo"
  },
  {
    "label": "FMergeRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMergeRenderContext"
  },
  {
    "label": "FOnRenderBatchTargetGroupDoneParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnRenderBatchTargetGroupDoneParams"
  },
  {
    "label": "FOOBox2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOOBox2D"
  },
  {
    "label": "FInputWorldArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputWorldArea"
  },
  {
    "label": "FOutputWorldArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputWorldArea"
  },
  {
    "label": "FEditLayerRenderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditLayerRenderItem"
  },
  {
    "label": "IEditLayerRendererProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditLayerRendererProvider"
  },
  {
    "label": "FRenderParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderParams"
  },
  {
    "label": "ConvertTargetLayerNamesToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LandscapeEditTypes . h \" # include \" Engine / TextureRenderTarget2D . h \" # include \" RHIAccess . h \" # include \" EngineDefines . h \" # include \" LandscapeEditLayerRenderer . generated . h \" class ALandscape ; class ULandscapeComponent ; class ULandscapeInfo ; class ULandscapeLayerInfoObject ; class ULandscapeScratchRenderTarget ; class ULandscapeEditLayerRenderer ; class ILandscapeEditLayerRenderer ; namespace UE::Landscape::EditLayers { FString)",
    "insertText": "ConvertTargetLayerNamesToString(const TArrayView<const FName>& InTargetLayerNames)"
  },
  {
    "label": "IsVisibilityLayer()",
    "kind": "Method",
    "detail": "Function (enum class EWeightmapBlendMode : uint32 { Additive = 0,Subtractive,Num,} ; enum class EWeightmapPaintLayerFlags : uint32 {)",
    "insertText": "IsVisibilityLayer(1 << 0), IsWeightBlended = (1 << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EWeightmapPaintLayerFlags)"
  },
  {
    "label": "FEditLayerTargetTypeState()",
    "kind": "Method",
    "detail": "Function (struct FWeightmapPaintLayerInfo { EWeightmapPaintLayerFlags Flags = EWeightmapPaintLayerFlags::None ; } ; # if WITH_EDITOR class FEditLayerTargetTypeState { class ILandscapeEditLayerRenderer ; public : LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL)",
    "insertText": "FEditLayerTargetTypeState()"
  },
  {
    "label": "FEditLayerTargetTypeState()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL)",
    "insertText": "FEditLayerTargetTypeState(ELandscapeToolTargetTypeFlags InTargetTypeMask, const TArrayView<const FName>& InSupportedWeightmaps = TArrayView<const FName>())"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL bool)",
    "insertText": "IsActive(ELandscapeToolTargetType InTargetType, FName InWeightmapLayerName = NAME_None)"
  },
  {
    "label": "GetActiveWeightmaps()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL const TArray<FName>&)",
    "insertText": "GetActiveWeightmaps()"
  },
  {
    "label": "GetTargetTypeMask()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ELandscapeToolTargetTypeFlags)",
    "insertText": "GetTargetTypeMask()"
  },
  {
    "label": "AddTargetType()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "AddTargetType(ELandscapeToolTargetType InTargetType)"
  },
  {
    "label": "AddTargetTypeMask()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "AddTargetTypeMask(ELandscapeToolTargetTypeFlags InTargetTypeMask)"
  },
  {
    "label": "RemoveTargetType()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "RemoveTargetType(ELandscapeToolTargetType InTargetType)"
  },
  {
    "label": "RemoveTargetTypeMask()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "RemoveTargetTypeMask(ELandscapeToolTargetTypeFlags InTargetTypeMask)"
  },
  {
    "label": "AddWeightmap()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "AddWeightmap(FName InWeightmapLayerName)"
  },
  {
    "label": "RemoveWeightmap()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "RemoveWeightmap(FName InWeightmapLayerName)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (FEditLayerTargetTypeState)",
    "insertText": "Intersect(const FEditLayerTargetTypeState& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FEditLayerTargetTypeState& InOther)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FEditLayerRendererState()",
    "kind": "Method",
    "detail": "Function (private : ELandscapeToolTargetTypeFlags TargetTypeMask = ELandscapeToolTargetTypeFlags::None ; TArray<FName> Weightmaps ; } ; class FEditLayerRendererState { public : LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL)",
    "insertText": "FEditLayerRendererState()"
  },
  {
    "label": "FEditLayerRendererState()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL)",
    "insertText": "FEditLayerRendererState(ILandscapeEditLayerRenderer* InRenderer, const ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "GetRenderer()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ILandscapeEditLayerRenderer*)",
    "insertText": "GetRenderer()"
  },
  {
    "label": "GetSupportedTargetTypeState()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL const FEditLayerTargetTypeState&)",
    "insertText": "GetSupportedTargetTypeState()"
  },
  {
    "label": "EnableTargetType()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "EnableTargetType(ELandscapeToolTargetType InTargetType)"
  },
  {
    "label": "EnableTargetTypeMask()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "EnableTargetTypeMask(ELandscapeToolTargetTypeFlags InTargetTypeMask)"
  },
  {
    "label": "DisableTargetType()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "DisableTargetType(ELandscapeToolTargetType InTargetType)"
  },
  {
    "label": "DisableTargetTypeMask()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "DisableTargetTypeMask(ELandscapeToolTargetTypeFlags InTargetTypeMask)"
  },
  {
    "label": "IsTargetEnabled()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL bool)",
    "insertText": "IsTargetEnabled(ELandscapeToolTargetType InTargetType, FName InWeightmapLayerName = NAME_None)"
  },
  {
    "label": "EnableTarget()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL bool)",
    "insertText": "EnableTarget(ELandscapeToolTargetType InTargetType, FName InWeightmapLayerName = NAME_None)"
  },
  {
    "label": "DisableTarget()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "DisableTarget(FName InWeightmapLayerName)"
  },
  {
    "label": "GetEnabledTargetWeightmaps()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<FName>)",
    "insertText": "GetEnabledTargetWeightmaps()"
  },
  {
    "label": "GetWeightmapRenderGroups()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<TSet<FName>>)",
    "insertText": "GetWeightmapRenderGroups()"
  },
  {
    "label": "FMergeRenderStep()",
    "kind": "Method",
    "detail": "Function (bool bIsHeightmapMerge = true ; ALandscape* Landscape = nullptr ; TArray<ULandscapeComponent*> ComponentsToMerge ; TArray<FEditLayerRendererState> EditLayerRendererStates ; TSet<FName> WeightmapLayerNames ; } ; struct FMergeRenderStep { enum class EType { RenderLayer,SignalBatchMergeGroupDone,} ;)",
    "insertText": "FMergeRenderStep(EType InType, const FEditLayerRendererState& InRendererState, const TBitArray<>& InRenderGroupBitIndices, const TArrayView<ULandscapeComponent*>& InComponentsToRender) : Type(InType) , RendererState(InRendererState) , RenderGroupBitIndices(InRenderGroupBitIndices) , ComponentsToRender(InComponentsToRender)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EType Type = EType::RenderLayer ; FEditLayerRendererState RendererState ; TBitArray<> RenderGroupBitIndices ; TArray<ULandscapeComponent*> ComponentsToRender ; } ; struct FMergeRenderBatch { bool)",
    "insertText": "operator(const FMergeRenderBatch& InOther)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (ALandscape* Landscape = nullptr ; FIntRect SectionRect ; FIntPoint Resolution =)",
    "insertText": "FIntPoint(ForceInitToZero)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint MinComponentKey =)",
    "insertText": "FIntPoint(MAX_int32, MAX_int32)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint MaxComponentKey =)",
    "insertText": "FIntPoint(MIN_int32, MIN_int32)"
  },
  {
    "label": "GetRenderTargetResolution()",
    "kind": "Method",
    "detail": "Function (TArray<FMergeRenderStep> RenderSteps ; TSet<ULandscapeComponent*> ComponentsToRender ; TBitArray<> TargetLayerNameBitIndices ; TMap<ULandscapeComponent*,TBitArray<>> ComponentToTargetLayerBitIndices ; TArray<TSet<ULandscapeComponent*>> TargetLayersToComponents ; public : FIntPoint)",
    "insertText": "GetRenderTargetResolution(bool bInWithDuplicateBorders)"
  },
  {
    "label": "ComputeSubsectionRects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeSubsectionRects(ULandscapeComponent* InComponent, TArray<FIntRect, TInlineAllocator<4>>& OutSubsectionRects, TArray<FIntRect, TInlineAllocator<4>>& OutSubsectionRectsWithDuplicateBorders)"
  },
  {
    "label": "ComputeSectionRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "ComputeSectionRect(ULandscapeComponent* InComponent, bool bInWithDuplicateBorders)"
  },
  {
    "label": "ComputeAllSubsectionRects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllSubsectionRects(TArray<FIntRect>& OutSubsectionRects, TArray<FIntRect>& OutSubsectionRectsWithDuplicateBorders)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FComponentMergeRenderInfo& InOther)"
  },
  {
    "label": "FMergeRenderContext()",
    "kind": "Method",
    "detail": "Function (} ; class FMergeRenderContext { public : class::ALandscape ;)",
    "insertText": "FMergeRenderContext(ALandscape* InLandscape, bool bInIsHeightmapMerge)"
  },
  {
    "label": "FMergeRenderContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMergeRenderContext()"
  },
  {
    "label": "FMergeRenderContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMergeRenderContext(const FMergeRenderContext& Other)"
  },
  {
    "label": "FMergeRenderContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMergeRenderContext(FMergeRenderContext&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMergeRenderContext&)",
    "insertText": "operator(const FMergeRenderContext& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMergeRenderContext&)",
    "insertText": "operator(FMergeRenderContext&& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CycleBlendRenderTargets()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "CycleBlendRenderTargets(ERHIAccess InDesiredWriteAccess = ERHIAccess::None)"
  },
  {
    "label": "GetBlendRenderTargetWrite()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ULandscapeScratchRenderTarget*)",
    "insertText": "GetBlendRenderTargetWrite()"
  },
  {
    "label": "GetBlendRenderTargetRead()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ULandscapeScratchRenderTarget*)",
    "insertText": "GetBlendRenderTargetRead()"
  },
  {
    "label": "GetBlendRenderTargetReadPrevious()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ULandscapeScratchRenderTarget*)",
    "insertText": "GetBlendRenderTargetReadPrevious()"
  },
  {
    "label": "GetValidityRenderTarget()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ULandscapeScratchRenderTarget*)",
    "insertText": "GetValidityRenderTarget(const FName& InTargetLayerName)"
  },
  {
    "label": "FOnRenderBatchTargetGroupDoneParams()",
    "kind": "Method",
    "detail": "Function (struct FOnRenderBatchTargetGroupDoneParams {)",
    "insertText": "FOnRenderBatchTargetGroupDoneParams(FMergeRenderContext* InMergeRenderContext, const FMergeRenderBatch& InRenderBatch, const TArrayView<FName>& InRenderGroupTargetLayerNames, const TArrayView<ULandscapeLayerInfoObject*>& InRenderGroupTargetLayerInfos, const TArrayView<FComponentMergeRenderInfo>& InSortedComponentMergeRenderInfos) : MergeRenderContext(InMergeRenderContext) , RenderBatch(&InRenderBatch) , RenderGroupTargetLayerNames(InRenderGroupTargetLayerNames) , RenderGroupTargetLayerInfos(InRenderGroupTargetLayerInfos) , SortedComponentMergeRenderInfos(InSortedComponentMergeRenderInfos)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (} FMergeRenderContext* MergeRenderContext = nullptr ; const FMergeRenderBatch* RenderBatch = nullptr ; TArray<FName> RenderGroupTargetLayerNames ; TArray<ULandscapeLayerInfoObject*> RenderGroupTargetLayerInfos ; const TArray<FComponentMergeRenderInfo> SortedComponentMergeRenderInfos ; } ; void)",
    "insertText": "Render(TFunction<void(const FOnRenderBatchTargetGroupDoneParams&)> OnRenderBatchTargetGroupDone)"
  },
  {
    "label": "GetLandscape()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL ALandscape*)",
    "insertText": "GetLandscape()"
  },
  {
    "label": "ComputeVisualLogTransform()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL FTransform)",
    "insertText": "ComputeVisualLogTransform(const FTransform& InTransform)"
  },
  {
    "label": "IncrementVisualLogOffset()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "IncrementVisualLogOffset()"
  },
  {
    "label": "ResetVisualLogOffset()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "ResetVisualLogOffset()"
  },
  {
    "label": "GetVisualLogAlpha()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL int32)",
    "insertText": "GetVisualLogAlpha()"
  },
  {
    "label": "IsVisualLogEnabled()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL bool)",
    "insertText": "IsVisualLogEnabled()"
  },
  {
    "label": "RenderValidityRenderTargets()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RenderValidityRenderTargets(const FMergeRenderBatch& InRenderBatch)"
  },
  {
    "label": "RenderExpandedRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderExpandedRenderTarget(const FMergeRenderBatch& InRenderBatch)"
  },
  {
    "label": "GetAllTargetLayerNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetAllTargetLayerNames()"
  },
  {
    "label": "GetTargetLayerIndexForNameChecked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTargetLayerIndexForNameChecked(const FName& InName)"
  },
  {
    "label": "GetTargetLayerNameForIndex()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTargetLayerNameForIndex(int32 InIndex)"
  },
  {
    "label": "GetTargetLayerNameForIndexChecked()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTargetLayerNameForIndexChecked(int32 InIndex)"
  },
  {
    "label": "ConvertTargetLayerNamesToBitIndices()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "ConvertTargetLayerNamesToBitIndices(TConstArrayView<FName> InTargetLayerNames)"
  },
  {
    "label": "ConvertTargetLayerNamesToBitIndicesChecked()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "ConvertTargetLayerNamesToBitIndicesChecked(TConstArrayView<FName> InTargetLayerNames)"
  },
  {
    "label": "ConvertTargetLayerBitIndicesToNames()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<FName>)",
    "insertText": "ConvertTargetLayerBitIndicesToNames(const TBitArray<>& InTargetLayerBitIndices)"
  },
  {
    "label": "ConvertTargetLayerBitIndicesToNamesChecked()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<FName>)",
    "insertText": "ConvertTargetLayerBitIndicesToNamesChecked(const TBitArray<>& InTargetLayerBitIndices)"
  },
  {
    "label": "ConvertTargetLayerBitIndicesToLayerInfos()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<ULandscapeLayerInfoObject*>)",
    "insertText": "ConvertTargetLayerBitIndicesToLayerInfos(const TBitArray<>& InTargetLayerBitIndices)"
  },
  {
    "label": "ConvertTargetLayerBitIndicesToLayerInfosChecked()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<ULandscapeLayerInfoObject*>)",
    "insertText": "ConvertTargetLayerBitIndicesToLayerInfosChecked(const TBitArray<>& InTargetLayerBitIndices)"
  },
  {
    "label": "ForEachTargetLayer()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "ForEachTargetLayer(const TBitArray<>& InTargetLayerBitIndices, TFunctionRef<bool(int32 , FName )> Fn)"
  },
  {
    "label": "ForEachTargetLayerChecked()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "ForEachTargetLayerChecked(const TBitArray<>& InTargetLayerBitIndices, TFunctionRef<bool(int32 , FName )> Fn)"
  },
  {
    "label": "GetFinalTargetLayerBitIndices()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetFinalTargetLayerBitIndices()"
  },
  {
    "label": "FreeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResources()"
  },
  {
    "label": "AllocateBatchResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateBatchResources(const FMergeRenderBatch& InRenderBatch)"
  },
  {
    "label": "FreeBatchResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBatchResources(const FMergeRenderBatch& InRenderBatch)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (private : int32 NumBlendRenderTargets = 3 ; TStaticArray<ULandscapeScratchRenderTarget*,NumBlendRenderTargets> BlendRenderTargets ; int32 CurrentBlendRenderTargetWriteIndex = - 1 ; ALandscape* Landscape = nullptr ; bool bIsHeightmapMerge = false ; TArray<FName> AllTargetLayerNames ; TArray<ULandscapeLayerInfoObject*> WeightmapLayerInfos ; TBitArray<> ValidTargetLayerBitIndices ; TBitArray<> FinalTargetLayerBitIndices ; TMap<FName,ULandscapeScratchRenderTarget*> PerTargetLayerValidityRenderTargets ; FIntPoint MaxNeededResolution =)",
    "insertText": "FIntPoint(ForceInit)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (int32 MaxNeededNumSlices = 0 ; TArray<FMergeRenderBatch> RenderBatches ; int32 CurrentRenderBatchIndex = INDEX_NONE ; FVector CurrentVisualLogOffset =)",
    "insertText": "FVector(ForceInitToZero)"
  },
  {
    "label": "FOOBox2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOOBox2D(const FTransform& InTransform, const FVector2D& InExtents) : Transform(InTransform) , Extents(InExtents)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (} FTransform Transform ; FVector2D Extents =)",
    "insertText": "FVector2D(ForceInit)"
  },
  {
    "label": "CreateInfinite()",
    "kind": "Method",
    "detail": "Function (} ; class FInputWorldArea { public : enum class EType { LocalComponent,SpecificComponent,OOBox,Infinite,} ; FInputWorldArea)",
    "insertText": "CreateInfinite()"
  },
  {
    "label": "CreateLocalComponent()",
    "kind": "Method",
    "detail": "Function (} FInputWorldArea)",
    "insertText": "CreateLocalComponent(const FIntRect& InLocalArea = FIntRect())"
  },
  {
    "label": "CreateSpecificComponent()",
    "kind": "Method",
    "detail": "Function (} FInputWorldArea)",
    "insertText": "CreateSpecificComponent(const FIntPoint& InComponentKey, const FIntRect& InLocalArea = FIntRect())"
  },
  {
    "label": "CreateOOBox()",
    "kind": "Method",
    "detail": "Function (} FInputWorldArea)",
    "insertText": "CreateOOBox(const FOOBox2D& InOOBox)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetSpecificComponentKeys()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetSpecificComponentKeys()"
  },
  {
    "label": "GetOOBox()",
    "kind": "Method",
    "detail": "Function (const FOOBox2D&)",
    "insertText": "GetOOBox()"
  },
  {
    "label": "ComputeWorldAreaOOBB()",
    "kind": "Method",
    "detail": "Function (FOOBox2D)",
    "insertText": "ComputeWorldAreaOOBB(const FTransform& InLandscapeTransform, const FBox& InLandscapeLocalBounds, const FTransform& InComponentTransform, const FBox& InComponentLocalBounds)"
  },
  {
    "label": "FInputWorldArea()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FInputWorldArea(EType InType, const FIntPoint& InComponentKey = FIntPoint(ForceInit), const FIntRect& InLocalArea = FIntRect(), const FOOBox2D& InOOBox2D = FOOBox2D()) : Type(InType) , SpecificComponentKey(InComponentKey) , LocalArea(InLocalArea) , OOBox2D(InOOBox2D)"
  },
  {
    "label": "CreateLocalComponent()",
    "kind": "Method",
    "detail": "Function (FIntRect LocalArea ; FOOBox2D OOBox2D ; } ; class FOutputWorldArea { public : enum class EType { LocalComponent,SpecificComponent,OOBox,} ; FOutputWorldArea)",
    "insertText": "CreateLocalComponent()"
  },
  {
    "label": "CreateSpecificComponent()",
    "kind": "Method",
    "detail": "Function (} FOutputWorldArea)",
    "insertText": "CreateSpecificComponent(const FIntPoint& InComponentKey)"
  },
  {
    "label": "ComputeWorldAreaOOBB()",
    "kind": "Method",
    "detail": "Function (FOOBox2D)",
    "insertText": "ComputeWorldAreaOOBB(const FTransform& InComponentTransform, const FBox& InComponentLocalBounds)"
  },
  {
    "label": "FOutputWorldArea()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FOutputWorldArea(EType InType, const FIntPoint& InComponentKey = FIntPoint(ForceInit), const FOOBox2D& InOOBox = FOOBox2D()) : Type(InType) , SpecificComponentKey(InComponentKey) , OOBox2D(InOOBox)"
  },
  {
    "label": "FEditLayerRenderItem()",
    "kind": "Method",
    "detail": "Function (FOOBox2D OOBox2D ; } ; class FEditLayerRenderItem { public :)",
    "insertText": "FEditLayerRenderItem()"
  },
  {
    "label": "FEditLayerRenderItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditLayerRenderItem(const FEditLayerTargetTypeState& InTargetTypeState, const FInputWorldArea& InInputWorldArea, const FOutputWorldArea& InOutputWorldArea, bool bInModifyExistingWeightmapsOnly) : TargetTypeState(InTargetTypeState) , InputWorldArea(InInputWorldArea) , OutputWorldArea(InOutputWorldArea) , bModifyExistingWeightmapsOnly(bInModifyExistingWeightmapsOnly)"
  },
  {
    "label": "GetTargetTypeState()",
    "kind": "Method",
    "detail": "Function (} const FEditLayerTargetTypeState&)",
    "insertText": "GetTargetTypeState()"
  },
  {
    "label": "GetOutputWorldArea()",
    "kind": "Method",
    "detail": "Function (InputWorldArea = InInputWorldArea ; } const FOutputWorldArea&)",
    "insertText": "GetOutputWorldArea()"
  },
  {
    "label": "GetModifyExistingWeightmapsOnly()",
    "kind": "Method",
    "detail": "Function (OutputWorldArea = InOutputWorldArea ; } bool)",
    "insertText": "GetModifyExistingWeightmapsOnly()"
  },
  {
    "label": "GetEditLayerRendererStates()",
    "kind": "Method",
    "detail": "Function (} LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<FEditLayerRendererState>)",
    "insertText": "GetEditLayerRendererStates(const ULandscapeInfo* InLandscapeInfo, bool bInSkipBrush) PURE_VIRTUAL(IEditLayerRendererProvider::GetEditLayerRendererStates, return {};)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; # endif })",
    "insertText": "UINTERFACE()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FRenderParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderParams(UE::Landscape::EditLayers::FMergeRenderContext* InMergeRenderContext, const TArrayView<FName>& InRenderGroupTargetLayerNames, const TArrayView<ULandscapeLayerInfoObject*>& InRenderGroupTargetLayerInfos, const UE::Landscape::EditLayers::FEditLayerRendererState& InRendererState, const TArrayView<UE::Landscape::EditLayers::FComponentMergeRenderInfo>& InSortedComponentMergeRenderInfos, const FTransform& InRenderAreaWorldTransform, const FIntRect& InRenderAreaSectionRect) : MergeRenderContext(InMergeRenderContext) , RenderGroupTargetLayerNames(InRenderGroupTargetLayerNames) , RenderGroupTargetLayerInfos(InRenderGroupTargetLayerInfos) , RendererState(InRendererState) , SortedComponentMergeRenderInfos(InSortedComponentMergeRenderInfos) , RenderAreaWorldTransform(InRenderAreaWorldTransform) , RenderAreaSectionRect(InRenderAreaSectionRect)"
  },
  {
    "label": "GetRendererStateInfo()",
    "kind": "Method",
    "detail": "Function (} UE::Landscape::EditLayers::FMergeRenderContext* MergeRenderContext = nullptr ; TArray<FName> RenderGroupTargetLayerNames ; TArray<ULandscapeLayerInfoObject*> RenderGroupTargetLayerInfos ; UE::Landscape::EditLayers::FEditLayerRendererState RendererState ; TArray<UE::Landscape::EditLayers::FComponentMergeRenderInfo> SortedComponentMergeRenderInfos ; FTransform RenderAreaWorldTransform ; FIntRect RenderAreaSectionRect ; } ; LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL void)",
    "insertText": "GetRendererStateInfo(const ULandscapeInfo* InLandscapeInfo, UE::Landscape::EditLayers::FEditLayerTargetTypeState& OutSupportedTargetTypeState, UE::Landscape::EditLayers::FEditLayerTargetTypeState& OutEnabledTargetTypeState, TArray<TSet<FName>>& OutRenderGroups) const PURE_VIRTUAL(ILandscapeEditLayerRenderer::GetRendererStateInfo,)"
  },
  {
    "label": "GetEditLayerRendererDebugName()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL FString)",
    "insertText": "GetEditLayerRendererDebugName() const PURE_VIRTUAL(ILandscapeEditLayerRenderer::GetEditLayerRendererDebugName, return TEXT(\"\");)"
  },
  {
    "label": "GetRenderItems()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<UE::Landscape::EditLayers::FEditLayerRenderItem>)",
    "insertText": "GetRenderItems(const ULandscapeInfo* InLandscapeInfo) const PURE_VIRTUAL(ILandscapeEditLayerRenderer::GetRenderItems, return { };)"
  },
  {
    "label": "CanRender()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL bool)",
    "insertText": "CanRender()"
  }
]