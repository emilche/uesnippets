[
  {
    "label": "FRHIDiagnosticBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDiagnosticBuffer"
  },
  {
    "label": "FLane",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLane"
  },
  {
    "label": "FQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueue"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIBreadcrumbs . h \" class FRHIDiagnosticBuffer { public : struct FLane { uint32 Counter ; uint32 MessageID ; union { int32 AsInt [ 4 ] ; uint32 AsUint [ 4 ] ; float AsFloat [ 4 ] ; } Payload ; } ;)",
    "insertText": "static_assert(sizeof(FLane) == 6 * sizeof(uint32), \"Remember to change UEDiagnosticBuffer layout in the shaders when changing FLane\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (struct FQueue { uint32 MaxLanes = 6 4 ; FLane Lanes [ MaxLanes ] ; # if WITH_RHI_BREADCRUMBS uint32 MarkerIn ; uint32 MarkerOut ; # endif } ; uint32 SizeInBytes =)",
    "insertText": "sizeof(FQueue)"
  },
  {
    "label": "GetShaderDiagnosticMessages()",
    "kind": "Method",
    "detail": "Function (FQueue* Data = nullptr ; FString)",
    "insertText": "GetShaderDiagnosticMessages(uint32 DeviceIndex, uint32 QueueIndex, const TCHAR* QueueName)"
  }
]