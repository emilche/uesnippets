[
  {
    "label": "EP2PSessionError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EP2PSessionError"
  },
  {
    "label": "EP2PSend",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EP2PSend"
  },
  {
    "label": "P2PSessionState_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "P2PSessionState_t"
  },
  {
    "label": "ESNetSocketState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESNetSocketState"
  },
  {
    "label": "ESNetSocketConnectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESNetSocketConnectionType"
  },
  {
    "label": "ISteamNetworking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworking"
  },
  {
    "label": "P2PSessionRequest_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "P2PSessionRequest_t"
  },
  {
    "label": "P2PSessionConnectFail_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "P2PSessionConnectFail_t"
  },
  {
    "label": "SocketStatusCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SocketStatusCallback_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMNETWORKING # define ISTEAMNETWORKING # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" enum EP2PSessionError { k_EP2PSessionErrorNone = 0,k_EP2PSessionErrorNoRightsToApp = 2,k_EP2PSessionErrorTimeout = 4,k_EP2PSessionErrorNotRunningApp_DELETED = 1,k_EP2PSessionErrorDestinationNotLoggedIn_DELETED = 3,k_EP2PSessionErrorMax = 5 } ; enum EP2PSend { k_EP2PSendUnreliable = 0,k_EP2PSendUnreliableNoDelay = 1,k_EP2PSendReliable = 2,k_EP2PSendReliableWithBuffering = 3,} ; # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (uint8 m_bConnectionActive ; uint8 m_bConnecting ; uint8 m_eP2PSessionError ; uint8 m_bUsingRelay ; int32 m_nBytesQueuedForSend ; int32 m_nPacketsQueuedForSend ; uint32 m_nRemoteIP ; uint16 m_nRemotePort ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "SendP2PPacket()",
    "kind": "Method",
    "detail": "Function (typedef uint32 SNetListenSocket_t ; enum ESNetSocketState { k_ESNetSocketStateInvalid = 0,k_ESNetSocketStateConnected = 1,k_ESNetSocketStateInitiated = 1 0,k_ESNetSocketStateLocalCandidatesFound = 1 1,k_ESNetSocketStateReceivedRemoteCandidates = 1 2,k_ESNetSocketStateChallengeHandshake = 1 5,k_ESNetSocketStateDisconnecting = 2 1,k_ESNetSocketStateLocalDisconnect = 2 2,k_ESNetSocketStateTimeoutDuringConnect = 2 3,k_ESNetSocketStateRemoteEndDisconnected = 2 4,k_ESNetSocketStateConnectionBroken = 2 5,} ; enum ESNetSocketConnectionType { k_ESNetSocketConnectionTypeNotConnected = 0,k_ESNetSocketConnectionTypeUDP = 1,k_ESNetSocketConnectionTypeUDPRelay = 2,} ; class ISteamNetworking { public : bool)",
    "insertText": "SendP2PPacket(CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0)"
  },
  {
    "label": "IsP2PPacketAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel = 0)"
  },
  {
    "label": "ReadP2PPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0)"
  },
  {
    "label": "AcceptP2PSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptP2PSessionWithUser(CSteamID steamIDRemote)"
  },
  {
    "label": "CloseP2PSessionWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseP2PSessionWithUser(CSteamID steamIDRemote)"
  },
  {
    "label": "CloseP2PChannelWithUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)"
  },
  {
    "label": "GetP2PSessionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t *pConnectionState)"
  },
  {
    "label": "AllowP2PPacketRelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowP2PPacketRelay(bool bAllow)"
  },
  {
    "label": "CreateListenSocket()",
    "kind": "Method",
    "detail": "Function (SNetListenSocket_t)",
    "insertText": "CreateListenSocket(int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)"
  },
  {
    "label": "CreateP2PConnectionSocket()",
    "kind": "Method",
    "detail": "Function (SNetSocket_t)",
    "insertText": "CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)"
  },
  {
    "label": "CreateConnectionSocket()",
    "kind": "Method",
    "detail": "Function (SNetSocket_t)",
    "insertText": "CreateConnectionSocket(SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)"
  },
  {
    "label": "DestroySocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)"
  },
  {
    "label": "DestroyListenSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)"
  },
  {
    "label": "SendDataOnSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)"
  },
  {
    "label": "IsDataAvailableOnSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize)"
  },
  {
    "label": "RetrieveDataFromSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)"
  },
  {
    "label": "IsDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)"
  },
  {
    "label": "RetrieveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)"
  },
  {
    "label": "GetSocketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)"
  },
  {
    "label": "GetListenSocketInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListenSocketInfo(SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)"
  },
  {
    "label": "GetSocketConnectionType()",
    "kind": "Method",
    "detail": "Function (ESNetSocketConnectionType)",
    "insertText": "GetSocketConnectionType(SNetSocket_t hSocket)"
  },
  {
    "label": "GetMaxPacketSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxPacketSize(SNetSocket_t hSocket)"
  },
  {
    "label": "SteamNetworking()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMNETWORKING_INTERFACE_VERSION \" SteamNetworking006 \" ISteamNetworking*)",
    "insertText": "SteamNetworking()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamNetworking *, SteamNetworking, STEAMNETWORKING_INTERFACE_VERSION)"
  },
  {
    "label": "SteamGameServerNetworking()",
    "kind": "Method",
    "detail": "Function (ISteamNetworking*)",
    "insertText": "SteamGameServerNetworking()"
  },
  {
    "label": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR(ISteamNetworking *, SteamGameServerNetworking, STEAMNETWORKING_INTERFACE_VERSION)"
  }
]