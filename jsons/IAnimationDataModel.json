[
  {
    "label": "IAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataController"
  },
  {
    "label": "FEvaluationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationContext"
  },
  {
    "label": "IAnimationDataModels",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModels"
  },
  {
    "label": "FBoneAnimationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneAnimationTrack"
  },
  {
    "label": "FAnimationCurveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCurveData"
  },
  {
    "label": "FAnimatedBoneAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedBoneAttribute"
  },
  {
    "label": "FTrackToSkeletonMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackToSkeletonMap"
  },
  {
    "label": "FAnimationCurveIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCurveIdentifier"
  },
  {
    "label": "UAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationDataModel"
  },
  {
    "label": "IAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModel"
  },
  {
    "label": "FFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatCurve"
  },
  {
    "label": "FTransformCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformCurve"
  },
  {
    "label": "FEvaluationAndModificationLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationAndModificationLock"
  },
  {
    "label": "FModelNotifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModelNotifier"
  },
  {
    "label": "FEvaluationContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" AnimDataNotifications . h \" # include \" Animation / AnimationPoseData . h \" # include \" Animation / AttributeCurve . h \" # include \" Features / IModularFeature . h \" class IAnimationDataController ; # include \" IAnimationDataModel . generated . h \" namespace UE::Anim::DataModel { struct FEvaluationContext {)",
    "insertText": "FEvaluationContext()"
  },
  {
    "label": "FEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvaluationContext(double InTime, FFrameRate InSampleRate, FName InRetargetSource, const TArray<FTransform>& InRetargetTransforms, EAnimInterpolationType InInterpolationType = EAnimInterpolationType::Linear) : SampleFrameRate(InSampleRate), SampleTime(InSampleRate.AsFrameTime(InTime)), RetargetSource(InRetargetSource), RetargetTransforms(InRetargetTransforms), InterpolationType(InInterpolationType)"
  },
  {
    "label": "FEvaluationContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEvaluationContext(FFrameTime InTime, FFrameRate InSampleRate, FName InRetargetSource, const TArray<FTransform>& InRetargetTransforms, EAnimInterpolationType InInterpolationType = EAnimInterpolationType::Linear) : SampleFrameRate(InSampleRate), SampleTime(InTime), RetargetSource(InRetargetSource), RetargetTransforms(InRetargetTransforms), InterpolationType(InInterpolationType)"
  },
  {
    "label": "IAnimationDataModels()",
    "kind": "Method",
    "detail": "Function (} const FFrameRate SampleFrameRate ; const FFrameTime SampleTime ; const FName RetargetSource ; const TArray<FTransform>& RetargetTransforms ; const EAnimInterpolationType InterpolationType ; } ; class IAnimationDataModels : public IModularFeature { public : ~)",
    "insertText": "IAnimationDataModels()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName FeatureName =)",
    "insertText": "FName(TEXT(\"AnimationDataModels\"))"
  },
  {
    "label": "FindClassForAnimationAsset()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "FindClassForAnimationAsset(UAnimSequenceBase* AnimSequenceBase)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Model\")"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; struct FTrackToSkeletonMap ; struct FAnimationCurveIdentifier ;)",
    "insertText": "UINTERFACE(BlueprintType, meta=(CannotImplementInterfaceInBlueprint), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IAnimationDataModel { public :)",
    "insertText": "GENERATED_BODY() UFUNCTION(BlueprintCallable, Category=AnimationDataModel) virtual double GetPlayLength()"
  },
  {
    "label": "EvaluateBoneTrackTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "EvaluateBoneTrackTransform(FName TrackName, const FFrameTime& FrameTime, const EAnimInterpolationType& Interpolation)"
  },
  {
    "label": "GetBoneTrackTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetBoneTrackTransform(FName TrackName, const FFrameNumber& FrameNumber)"
  },
  {
    "label": "GetBoneTrackTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTrackTransforms(FName TrackName, const TArray<FFrameNumber>& FrameNumbers, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetBoneTrackTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTrackTransforms(FName TrackName, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetBoneTracksTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTracksTransform(const TArray<FName>& TrackNames, const FFrameNumber& FrameNumber, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetCurveData()",
    "kind": "Method",
    "detail": "Function (const FAnimationCurveData&)",
    "insertText": "GetCurveData()"
  },
  {
    "label": "GetFloatCurves()",
    "kind": "Method",
    "detail": "Function (const TArray<struct FFloatCurve>&)",
    "insertText": "GetFloatCurves()"
  },
  {
    "label": "GetTransformCurves()",
    "kind": "Method",
    "detail": "Function (const TArray<struct FTransformCurve>&)",
    "insertText": "GetTransformCurves()"
  },
  {
    "label": "FindCurve()",
    "kind": "Method",
    "detail": "Function (const FAnimCurveBase*)",
    "insertText": "FindCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "FindFloatCurve()",
    "kind": "Method",
    "detail": "Function (const FFloatCurve*)",
    "insertText": "FindFloatCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "FindTransformCurve()",
    "kind": "Method",
    "detail": "Function (const FTransformCurve*)",
    "insertText": "FindTransformCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "FindRichCurve()",
    "kind": "Method",
    "detail": "Function (const FRichCurve*)",
    "insertText": "FindRichCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (const FAnimCurveBase&)",
    "insertText": "GetCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "GetFloatCurve()",
    "kind": "Method",
    "detail": "Function (const FFloatCurve&)",
    "insertText": "GetFloatCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "GetTransformCurve()",
    "kind": "Method",
    "detail": "Function (const FTransformCurve&)",
    "insertText": "GetTransformCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "GetRichCurve()",
    "kind": "Method",
    "detail": "Function (const FRichCurve&)",
    "insertText": "GetRichCurve(const FAnimationCurveIdentifier& CurveIdentifier)"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FAnimatedBoneAttribute>)",
    "insertText": "GetAttributes()"
  },
  {
    "label": "GetNumberOfAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfAttributes()"
  },
  {
    "label": "GetNumberOfAttributesForBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfAttributesForBoneIndex(const int32 BoneIndex)"
  },
  {
    "label": "GetAttributesForBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAttributesForBone(const FName& BoneName, TArray<const FAnimatedBoneAttribute*>& OutBoneAttributes)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (const FAnimatedBoneAttribute&)",
    "insertText": "GetAttribute(const FAnimationAttributeIdentifier& AttributeIdentifier)"
  },
  {
    "label": "FindAttribute()",
    "kind": "Method",
    "detail": "Function (const FAnimatedBoneAttribute*)",
    "insertText": "FindAttribute(const FAnimationAttributeIdentifier& AttributeIdentifier)"
  },
  {
    "label": "GetModifiedEvent()",
    "kind": "Method",
    "detail": "Function (FAnimDataModelModifiedEvent&)",
    "insertText": "GetModifiedEvent()"
  },
  {
    "label": "GenerateGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GenerateGuid()"
  },
  {
    "label": "GetController()",
    "kind": "Method",
    "detail": "Function (TScriptInterface<IAnimationDataController>)",
    "insertText": "GetController()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "Evaluate(FAnimationPoseData& InOutPoseData, const UE::Anim::DataModel::FEvaluationContext& EvaluationContext)"
  },
  {
    "label": "HasBeenPopulated()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HasBeenPopulated()"
  },
  {
    "label": "IterateBoneKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateBoneKeys(const FName& BoneName, TFunction<bool(const FVector3f& Pos, const FQuat4f&, const FVector3f, const FFrameNumber&)> IterationFunction)"
  },
  {
    "label": "FEvaluationAndModificationLock()",
    "kind": "Method",
    "detail": "Function (struct FEvaluationAndModificationLock {)",
    "insertText": "FEvaluationAndModificationLock(IAnimationDataModel& InModel) : Model(InModel)"
  },
  {
    "label": "LockEvaluationAndModification()",
    "kind": "Method",
    "detail": "Function (InModel .)",
    "insertText": "LockEvaluationAndModification()"
  },
  {
    "label": "FEvaluationAndModificationLock()",
    "kind": "Method",
    "detail": "Function (bLocked = true ; })",
    "insertText": "FEvaluationAndModificationLock(IAnimationDataModel& InModel, const TFunction<bool()>& SpinFunc) : Model(InModel)"
  },
  {
    "label": "TryLockEvaluationAndModification()",
    "kind": "Method",
    "detail": "Function (bLocked = InModel .)",
    "insertText": "TryLockEvaluationAndModification()"
  },
  {
    "label": "FEvaluationAndModificationLock()",
    "kind": "Method",
    "detail": "Function (break ; } } } ~)",
    "insertText": "FEvaluationAndModificationLock()"
  },
  {
    "label": "UnlockEvaluationAndModification()",
    "kind": "Method",
    "detail": "Function (Model .)",
    "insertText": "UnlockEvaluationAndModification()"
  },
  {
    "label": "GetModifiedDynamicEvent()",
    "kind": "Method",
    "detail": "Function (} } private : IAnimationDataModel& Model ; bool bLocked = false ; } ; protected : FAnimDataModelModifiedDynamicEvent&)",
    "insertText": "GetModifiedDynamicEvent()"
  },
  {
    "label": "OnNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNotify(const EAnimDataModelNotifyType& NotifyType, const FAnimDataModelNotifPayload& Payload)"
  },
  {
    "label": "GetNotifier()",
    "kind": "Method",
    "detail": "Function (struct FModelNotifier ; IAnimationDataModel::FModelNotifier&)",
    "insertText": "GetNotifier()"
  },
  {
    "label": "FModelNotifier()",
    "kind": "Method",
    "detail": "Function (struct FModelNotifier { ~)",
    "insertText": "FModelNotifier()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Notify(EAnimDataModelNotifyType NotifyType, const T& PayloadData)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* TypeScriptStruct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "Payload()",
    "kind": "Method",
    "detail": "Function (const FAnimDataModelNotifPayload)",
    "insertText": "Payload((int8*)&PayloadData, TypeScriptStruct)"
  },
  {
    "label": "OnNotify()",
    "kind": "Method",
    "detail": "Function (DataModel ->)",
    "insertText": "OnNotify(NotifyType, Payload)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ModifiedEvent .)",
    "insertText": "Broadcast(NotifyType, DataModel.GetInterface(), Payload)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ModifiedEventDynamic .)",
    "insertText": "Broadcast(NotifyType, DataModel, Payload)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "if(NotifyType == EAnimDataModelNotifyType::BracketOpened)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + BracketCounter ; })",
    "insertText": "if(NotifyType == EAnimDataModelNotifyType::BracketClosed)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (- - BracketCounter ; })",
    "insertText": "check(BracketCounter >= 0)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Notify(EAnimDataModelNotifyType NotifyType)"
  },
  {
    "label": "FEmptyPayload()",
    "kind": "Method",
    "detail": "Function (const FEmptyPayload EmptyPayload ; Notify<)",
    "insertText": "FEmptyPayload(NotifyType, EmptyPayload)"
  },
  {
    "label": "FModelNotifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FModelNotifier(TScriptInterface<IAnimationDataModel> ModelInterface) : DataModel(ModelInterface), ModifiedEvent(ModelInterface->GetModifiedEvent()), ModifiedEventDynamic(ModelInterface->GetModifiedDynamicEvent())"
  },
  {
    "label": "GetBracketDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBracketDepth()"
  }
]