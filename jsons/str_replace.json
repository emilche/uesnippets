[
  {
    "label": "ViableSubstitution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ViableSubstitution"
  },
  {
    "label": "StrReplaceAll()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STR_REPLACE_H_ # define ABSL_STRINGS_STR_REPLACE_H_ # include<string> # include<utility> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN ABSL_MUST_USE_RESULT std::string)",
    "insertText": "StrReplaceAll(absl::string_view s, std::initializer_list<std::pair<absl::string_view, absl::string_view>> replacements)"
  },
  {
    "label": "StrReplaceAll()",
    "kind": "Method",
    "detail": "Function (template<StrToStrMapping> std::string)",
    "insertText": "StrReplaceAll(absl::string_view s, const StrToStrMapping& replacements)"
  },
  {
    "label": "StrReplaceAll()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StrReplaceAll(std::initializer_list<std::pair<absl::string_view, absl::string_view>> replacements, std::string* target)"
  },
  {
    "label": "StrReplaceAll()",
    "kind": "Method",
    "detail": "Function (template<StrToStrMapping> int)",
    "insertText": "StrReplaceAll(const StrToStrMapping& replacements, std::string* target)"
  },
  {
    "label": "ViableSubstitution()",
    "kind": "Method",
    "detail": "Function (namespace strings_internal { struct ViableSubstitution { absl::string_view old ; absl::string_view replacement ; size_t offset ;)",
    "insertText": "ViableSubstitution(absl::string_view old_str, absl::string_view replacement_str, size_t offset_val) : old(old_str), replacement(replacement_str), offset(offset_val)"
  },
  {
    "label": "OccursBefore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OccursBefore(const ViableSubstitution& y)"
  },
  {
    "label": "FindSubstitutions()",
    "kind": "Method",
    "detail": "Function (} } ; template<StrToStrMapping> std::vector<ViableSubstitution>)",
    "insertText": "FindSubstitutions(absl::string_view s, const StrToStrMapping& replacements)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<ViableSubstitution> subs ; subs .)",
    "insertText": "reserve(replacements.size())"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (using std::get ; absl::string_view)",
    "insertText": "old(get<0>(rep))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_t pos = s .)",
    "insertText": "find(old)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (subs .)",
    "insertText": "emplace_back(old, get<1>(rep), pos)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t index = subs .)",
    "insertText": "size()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(subs[index], subs[index - 1])"
  },
  {
    "label": "ApplySubstitutions()",
    "kind": "Method",
    "detail": "Function (} } return subs ; } int)",
    "insertText": "ApplySubstitutions(absl::string_view s, std::vector<ViableSubstitution>* subs_ptr, std::string* result_ptr)"
  },
  {
    "label": "FindSubstitutions()",
    "kind": "Method",
    "detail": "Function (auto subs =)",
    "insertText": "FindSubstitutions(s, replacements)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::string result ; result .)",
    "insertText": "reserve(s.size())"
  },
  {
    "label": "ApplySubstitutions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySubstitutions(s, &subs, &result)"
  },
  {
    "label": "FindSubstitutions()",
    "kind": "Method",
    "detail": "Function (auto subs =)",
    "insertText": "FindSubstitutions(*target, replacements)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::string result ; result .)",
    "insertText": "reserve(target->size())"
  },
  {
    "label": "ApplySubstitutions()",
    "kind": "Method",
    "detail": "Function (int substitutions =)",
    "insertText": "ApplySubstitutions(*target, &subs, &result)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (target ->)",
    "insertText": "swap(result)"
  }
]