[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FGameplayDebuggerCategory_EQS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory_EQS"
  },
  {
    "label": "FRepData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepData"
  },
  {
    "label": "FGameplayDebuggerCategory_EQS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_GAMEPLAY_DEBUGGER_MENU # include \" GameplayDebuggerCategory . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" EnvironmentQuery / EnvQueryDebugHelpers . h \" class APlayerController ; class UPrimitiveComponent ; class FGameplayDebuggerCategory_EQS : public FGameplayDebuggerCategory { public :)",
    "insertText": "FGameplayDebuggerCategory_EQS()"
  },
  {
    "label": "CollectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectData(APlayerController* OwnerPC, AActor* DebugActor)"
  },
  {
    "label": "OnDataPackReplicated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataPackReplicated(int32 DataPackId)"
  },
  {
    "label": "DrawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawData(APlayerController* OwnerPC, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "CreateDebugSceneProxy()",
    "kind": "Method",
    "detail": "Function (FDebugRenderSceneProxy*)",
    "insertText": "CreateDebugSceneProxy(const UPrimitiveComponent* InComponent, FDebugDrawDelegateHelper*& OutDelegateHelper)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGameplayDebuggerCategory>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (protected : # if USE_EQS_DEBUGGER struct FRepData { TArray<EQSDebug::FQueryData> QueryDebugData ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "DrawLookedAtItem()",
    "kind": "Method",
    "detail": "Function (} ; FRepData DataPack ; int32)",
    "insertText": "DrawLookedAtItem(const EQSDebug::FQueryData& QueryData, APlayerController* OwnerPC, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "DrawDetailedItemTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDetailedItemTable(const EQSDebug::FQueryData& QueryData, int32 LookedAtItemIndex, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "DrawDetailedItemRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDetailedItemRow(const EQSDebug::FItemData& ItemData, const TArray<uint8>& TestRelevancy, float MaxScore, FGameplayDebuggerCanvasContext& CanvasContext)"
  },
  {
    "label": "CycleShownQueries()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CycleShownQueries()"
  },
  {
    "label": "ToggleDetailView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDetailView()"
  }
]