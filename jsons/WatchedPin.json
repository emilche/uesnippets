[
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FBlueprintWatchedPin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintWatchedPin"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphPin . h \" # include \" HAL / Platform . h \" # include \" Misc / Guid . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPtr . h \" # include \" WatchedPin . generated . h \" class UEdGraphNode ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UNREALED_API FBlueprintWatchedPin()"
  },
  {
    "label": "FBlueprintWatchedPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlueprintWatchedPin(const UEdGraphPin* Pin)"
  },
  {
    "label": "FBlueprintWatchedPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlueprintWatchedPin(const UEdGraphPin* Pin, TArray<FName>&& InPathToProperty)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "Get()"
  },
  {
    "label": "GetPathToProperty()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetPathToProperty()"
  },
  {
    "label": "SetFromWatchedPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromWatchedPin(FBlueprintWatchedPin&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBlueprintWatchedPin& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinReference CachedPinRef ; } ; uint32)",
    "insertText": "GetTypeHash(const FBlueprintWatchedPin& WatchedPin)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 PathHash = 0 ;)",
    "insertText": "for(FName PathName : WatchedPin.PathToProperty)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (PathHash =)",
    "insertText": "HashCombine(PathHash, GetTypeHash(PathName))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "HashCombine(GetTypeHash(WatchedPin.PinId), PathHash)"
  }
]