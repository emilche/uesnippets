[
  {
    "label": "FModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModel"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSession"
  },
  {
    "label": "FShell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShell"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTopomakerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopomakerOptions"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # ifdef CADKERNEL_DEV # include \" Topo / TopomakerReport . h \" # endif namespace UE::CADKernel { class FModel ; class FSession ; class FShell ; class FTopologicalEdge ; class FTopologicalFace ; class FTopologicalVertex ; enum class ESewOption : uint8 { None = 0 x00u,ForceJoining = 0 x01u,RemoveThinFaces = 0 x02u,RemoveDuplicatedFaces = 0 x04u,All = 0 x07u } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESewOption)"
  },
  {
    "label": "GetFromOptions()",
    "kind": "Method",
    "detail": "Function (namespace SewOption { ESewOption)",
    "insertText": "GetFromOptions(bool bGStitchingForceSew, bool bGStitchingRemoveThinFaces, bool bGStitchingRemoveDuplicatedFaces)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ESewOption Option = ESewOption::None ;)",
    "insertText": "if(bGStitchingForceSew)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Option | = ESewOption::ForceJoining ; })",
    "insertText": "if(bGStitchingRemoveThinFaces)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Option | = ESewOption::RemoveThinFaces ; })",
    "insertText": "if(bGStitchingRemoveDuplicatedFaces)"
  },
  {
    "label": "MergeCoincidentVertices()",
    "kind": "Method",
    "detail": "Function (Option | = ESewOption::RemoveDuplicatedFaces ; } return Option ; } } namespace TopomakerTools { void)",
    "insertText": "MergeCoincidentVertices(TArray<FTopologicalVertex*>& VerticesToMerge, double Tolerance)"
  },
  {
    "label": "FTopomakerOptions()",
    "kind": "Method",
    "detail": "Function (} struct FTopomakerOptions { ESewOption SewOptions ; double Tolerance ; double ForceJoinFactor ;)",
    "insertText": "FTopomakerOptions(ESewOption InSewOptions, double InTolerance, double InForceJoinFactor) : SewOptions(InSewOptions) , Tolerance(InTolerance) , ForceJoinFactor(InForceJoinFactor)"
  },
  {
    "label": "FTopomaker()",
    "kind": "Method",
    "detail": "Function (} } ; class FTopomaker { protected : FSession& Session ; TArray<FShell*> Shells ; TArray<TSharedPtr<FTopologicalFace>> Faces ; # ifdef CADKERNEL_DEV FTopomakerReport Report ; # endif public :)",
    "insertText": "FTopomaker(FSession& InSession, const FTopomakerOptions& InOptions)"
  },
  {
    "label": "FTopomaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopomaker(FSession& InSession, const TArray<TSharedPtr<FShell>>& Shells, const FTopomakerOptions& InOptions)"
  },
  {
    "label": "FTopomaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopomaker(FSession& InSession, const TArray<TSharedPtr<FTopologicalFace>>& Faces, const FTopomakerOptions& InOptions)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTolerance(const FTopomakerOptions Options)"
  },
  {
    "label": "Sew()",
    "kind": "Method",
    "detail": "Function (SewOptions = Options . SewOptions ; Tolerance = Options . Tolerance ; ForceJoinFactor = Options . ForceJoinFactor ; SewTolerance = Tolerance* UE_DOUBLE_SQRT_2 ; EdgeLengthTolerance = SewTolerance* 2 . ; SewToleranceToForceJoin = Tolerance* ForceJoinFactor ; LargeEdgeLengthTolerance = SewToleranceToForceJoin* 2 . ; ThinFaceWidth = Tolerance* ForceJoinFactor* 0 . 5 ; } void)",
    "insertText": "Sew()"
  },
  {
    "label": "SplitIntoConnectedShells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitIntoConnectedShells()"
  },
  {
    "label": "OrientShells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OrientShells()"
  },
  {
    "label": "UnlinkNonManifoldVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkNonManifoldVertex()"
  },
  {
    "label": "UnlinkFromOther()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFromOther()"
  },
  {
    "label": "RemoveThinFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveThinFaces()"
  },
  {
    "label": "DeleteNonmanifoldLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNonmanifoldLink()"
  },
  {
    "label": "PrintSewReport()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV void)",
    "insertText": "PrintSewReport()"
  },
  {
    "label": "PrintRemoveThinFacesReport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintRemoveThinFacesReport()"
  },
  {
    "label": "InitFaces()",
    "kind": "Method",
    "detail": "Function (} # endif private : void)",
    "insertText": "InitFaces()"
  },
  {
    "label": "EmptyShells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyShells()"
  },
  {
    "label": "RemoveEmptyShells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEmptyShells()"
  },
  {
    "label": "RemoveDuplicatedFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicatedFaces()"
  },
  {
    "label": "GetVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertices(TArray<FTopologicalVertex*>& Vertices)"
  },
  {
    "label": "GetBorderVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBorderVertices(TArray<FTopologicalVertex*>& BorderVertices)"
  },
  {
    "label": "CheckSelfConnectedEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckSelfConnectedEdge(double MaxLengthOfDegeneratedEdge, TArray<FTopologicalVertex*>& OutBorderVertices)"
  },
  {
    "label": "RemoveIsolatedEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIsolatedEdges()"
  },
  {
    "label": "SetSelfConnectedEdgeDegenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelfConnectedEdgeDegenerated(TArray<FTopologicalVertex*>& Vertices)"
  },
  {
    "label": "MergeUnconnectedSuccessiveEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeUnconnectedSuccessiveEdges()"
  },
  {
    "label": "SetToProcessMarkerOfFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToProcessMarkerOfFaces()"
  },
  {
    "label": "ResetMarkersOfFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersOfFaces()"
  }
]