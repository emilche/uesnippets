[
  {
    "label": "FStaticShaderPlatformNames",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShaderPlatformNames"
  },
  {
    "label": "FPlatform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatform"
  },
  {
    "label": "FStaticNameMapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticNameMapEntry"
  },
  {
    "label": "FStaticShaderPlatformNames()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIShaderPlatform . h \" # include \" UObject / NameTypes . h \" class FStaticShaderPlatformNames { private : const uint32 NumPlatforms = DDPI_NUM_STATIC_SHADER_PLATFORMS ; struct FPlatform { FName Name ; FName ShaderPlatform ; FName ShaderFormat ; } Platforms [ NumPlatforms ] ;)",
    "insertText": "FStaticShaderPlatformNames()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifdef DDPI_SHADER_PLATFORM_NAME_MAP struct FStaticNameMapEntry { FName Name ; FName PlatformName ; int32 Index ; } NameMap [ ] = { DDPI_SHADER_PLATFORM_NAME_MAP } ;)",
    "insertText": "for(int32 MapIndex = 0; MapIndex < UE_ARRAY_COUNT(NameMap); ++MapIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FStaticNameMapEntry const& Entry = NameMap [ MapIndex ] ;)",
    "insertText": "check(IsStaticPlatform(EShaderPlatform(Entry.Index)))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 PlatformIndex = Entry . Index - SP_StaticPlatform_First ; FPlatform& Platform = Platforms [ PlatformIndex ] ;)",
    "insertText": "check(Platform.Name == NAME_None)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Platform . Name = Entry . PlatformName ; Platform . ShaderPlatform =)",
    "insertText": "FName(*FString::Printf(TEXT(\"SP_%s\"), *Entry.Name.ToString()), FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Platform . ShaderFormat =)",
    "insertText": "FName(*FString::Printf(TEXT(\"SF_%s\"), *Entry.Name.ToString()), FNAME_Add)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} # endif } public : FStaticShaderPlatformNames const&)",
    "insertText": "Get()"
  },
  {
    "label": "IsStaticPlatform()",
    "kind": "Method",
    "detail": "Function (FStaticShaderPlatformNames Names ; return Names ; } bool)",
    "insertText": "IsStaticPlatform(EShaderPlatform Platform)"
  },
  {
    "label": "GetShaderFormat()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetShaderFormat(EShaderPlatform Platform)"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetPlatformName(EShaderPlatform Platform)"
  },
  {
    "label": "GetStaticPlatformIndex()",
    "kind": "Method",
    "detail": "Function (} private : uint32)",
    "insertText": "GetStaticPlatformIndex(EShaderPlatform Platform)"
  }
]