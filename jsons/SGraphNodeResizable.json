[
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "EResizableWindowZone",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResizableWindowZone"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / SlateRect . h \" # include \" Math / Vector2D . h \" # include \" SGraphNode . h \" # include \" Templates / SharedPointer . h \" class FScopedTransaction ; struct FGeometry ; struct FPointerEvent ; class SGraphNodeResizable : public SGraphNode { public : enum EResizableWindowZone { CRWZ_NotInWindow = 0,CRWZ_InWindow = 1,CRWZ_RightBorder = 2,CRWZ_BottomBorder = 3,CRWZ_BottomRightBorder = 4,CRWZ_LeftBorder = 5,CRWZ_TopBorder = 6,CRWZ_TopLeftBorder = 7,CRWZ_TopRightBorder = 8,CRWZ_BottomLeftBorder = 9,CRWZ_TitleBar = 1 0,} ; FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "FindMouseZone()",
    "kind": "Method",
    "detail": "Function (protected : SGraphNodeResizable::EResizableWindowZone)",
    "insertText": "FindMouseZone(const FVector2D& LocalMouseCoordinates)"
  },
  {
    "label": "InSelectionArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InSelectionArea()"
  },
  {
    "label": "InSelectionArea()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InSelectionArea(EResizableWindowZone InZone)"
  },
  {
    "label": "InitNodeAnchorPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNodeAnchorPoint()"
  },
  {
    "label": "GetCorrectedNodePosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetCorrectedNodePosition()"
  },
  {
    "label": "GetTitleBarHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTitleBarHeight()"
  },
  {
    "label": "GetNodeMinimumSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeMinimumSize()"
  },
  {
    "label": "GetNodeMaximumSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetNodeMaximumSize()"
  },
  {
    "label": "GetHitTestingBorder()",
    "kind": "Method",
    "detail": "Function (/ FSlateRect)",
    "insertText": "GetHitTestingBorder()"
  }
]