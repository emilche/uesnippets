[
  {
    "label": "ScopedTypeRefTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedTypeRefTraits"
  },
  {
    "label": "ScopedTypeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTypeRef"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_SCOPED_TYPEREF_H_ # define BASE_MAC_SCOPED_TYPEREF_H_ # include \" base / check . h \" # include \" base / memory / scoped_policy . h \" namespace base { template<T> struct ScopedTypeRefTraits ; template<T,Traits = ScopedTypeRefTraits<T>> class ScopedTypeRef { public : using element_type = T ;)",
    "insertText": "ScopedTypeRef(element_type object = Traits::InvalidValue(), base::scoped_policy::OwnershipPolicy policy = base::scoped_policy::ASSUME) : object_(object)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTypeRef(const ScopedTypeRef<T, Traits>& that) : object_(that.object_)"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (} template<R,RTraits>)",
    "insertText": "ScopedTypeRef(const ScopedTypeRef<R, RTraits>& that_as_subclass) : object_(that_as_subclass.get())"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTypeRef(ScopedTypeRef<T, Traits>&& that) : object_(that.object_)"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (that . object_ =)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "ScopedTypeRef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedTypeRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ScopedTypeRef&)",
    "insertText": "operator(const ScopedTypeRef<T, Traits>& that)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(that.get(), base::scoped_policy::RETAIN)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!object_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(element_type object = Traits::InvalidValue(), base::scoped_policy::OwnershipPolicy policy = base::scoped_policy::ASSUME)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (object_ = object ; } bool)",
    "insertText": "operator(const ScopedTypeRef& that)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (element_type temp = that . object_ ; that . object_ = object_ ; object_ = temp ; } [ [ nodiscard ] ] element_type)",
    "insertText": "release()"
  }
]