[
  {
    "label": "FIOSTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSTargetPlatformControls"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FIOSTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformControlsBase . h \" # include \" IOS / IOSPlatformProperties . h \" # include \" Containers / Ticker . h \" # include \" IOSMessageProtocol . h \" # include \" IMessageContext . h \" # include \" IOSTargetDevice . h \" # include \" IOSDeviceHelper . h \" # include \" Misc / ConfigCacheIni . h \" # if WITH_ENGINE # include \" AudioCompressionSettings . h \" # endif class FIOSTargetPlatformControls : public TNonDesktopTargetPlatformControlsBase<FIOSPlatformProperties> { public :)",
    "insertText": "FIOSTargetPlatformControls(bool bInISTVOS, bool bInIsVisionOS, bool bInIsClientOnly, ITargetPlatformSettings* TargetPlatformSettings)"
  },
  {
    "label": "FIOSTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIOSTargetPlatformControls()"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDevices(TArray<ITargetDevicePtr>& OutDevices)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr)",
    "insertText": "GetDevice(const FTargetDeviceId& DeviceId)"
  },
  {
    "label": "CanSupportRemoteShaderCompile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSupportRemoteShaderCompile()"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutTutorialPath)"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CheckRequirements(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FString& OutTutorialPath, FString& OutDocumentationPath, FText& CustomizedLogMessage)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE void)",
    "insertText": "GetTextureFormats(const UTexture* Texture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "FinalizeVirtualTextureLayerFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FinalizeVirtualTextureLayerFormat(FName Format)"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (OutSection =)",
    "insertText": "TEXT(\"/Script/IOSRuntimeSettings.IOSRuntimeSettings\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bGeneratedSYMFile\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bGeneratedSYMBundle\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bGenerateXCArchive\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InStringKeys .)",
    "insertText": "Add(TEXT(\"MinimumTVOSVersion\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { InStringKeys .)",
    "insertText": "Add(TEXT(\"MinimumiOSVersion\"))"
  },
  {
    "label": "HandlePongMessage()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "HandlePongMessage(const FIOSLaunchDaemonPong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleDeviceConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeviceConnected(const FIOSLaunchDaemonPong& Message)"
  },
  {
    "label": "HandleDeviceDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeviceDisconnected(const FIOSLaunchDaemonPong& Message)"
  }
]