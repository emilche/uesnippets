[
  {
    "label": "Lex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Templates / ValueOrError . h \" namespace ExpressionParser { typedef TValueOrError<TArray<FExpressionToken>,FExpressionError> LexResultType ; typedef TValueOrError<TArray<FCompiledToken>,FExpressionError> CompileResultType ; LexResultType)",
    "insertText": "Lex(const TCHAR* InExpression, const FTokenDefinitions& TokenDefinitions)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (CompileResultType)",
    "insertText": "Compile(const TCHAR* InExpression, const FTokenDefinitions& TokenDefinitions, const FExpressionGrammar& InGrammar)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (CompileResultType)",
    "insertText": "Compile(TArray<FExpressionToken> InTokens, const FExpressionGrammar& InGrammar)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "Evaluate(const TCHAR* InExpression, const FTokenDefinitions& InTokenDefinitions, const FExpressionGrammar& InGrammar, const IOperatorEvaluationEnvironment& InEnvironment)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "Evaluate(const TArray<FCompiledToken>& CompiledTokens, const IOperatorEvaluationEnvironment& InEnvironment)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (template<ContextType> FExpressionResult)",
    "insertText": "Evaluate(const TCHAR* InExpression, const FTokenDefinitions& InTokenDefinitions, const FExpressionGrammar& InGrammar, const TOperatorJumpTable<ContextType>& InJumpTable, const ContextType* InContext = nullptr)"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (TOperatorEvaluationEnvironment<ContextType>)",
    "insertText": "Env(InJumpTable, InContext)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} template<ContextType> FExpressionResult)",
    "insertText": "Evaluate(const TArray<FCompiledToken>& CompiledTokens, const TOperatorJumpTable<ContextType>& InJumpTable, const ContextType* InContext = nullptr)"
  }
]