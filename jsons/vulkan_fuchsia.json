[
  {
    "label": "VkImagePipeSurfaceCreateInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImagePipeSurfaceCreateInfoFUCHSIA"
  },
  {
    "label": "VkImportMemoryZirconHandleInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportMemoryZirconHandleInfoFUCHSIA"
  },
  {
    "label": "VkMemoryZirconHandlePropertiesFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryZirconHandlePropertiesFUCHSIA"
  },
  {
    "label": "VkMemoryGetZirconHandleInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkMemoryGetZirconHandleInfoFUCHSIA"
  },
  {
    "label": "VkImportSemaphoreZirconHandleInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportSemaphoreZirconHandleInfoFUCHSIA"
  },
  {
    "label": "VkSemaphoreGetZirconHandleInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSemaphoreGetZirconHandleInfoFUCHSIA"
  },
  {
    "label": "VkImageConstraintsInfoFlagBitsFUCHSIA",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VkImageConstraintsInfoFlagBitsFUCHSIA"
  },
  {
    "label": "VkBufferCollectionCreateInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCollectionCreateInfoFUCHSIA"
  },
  {
    "label": "VkImportMemoryBufferCollectionFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImportMemoryBufferCollectionFUCHSIA"
  },
  {
    "label": "VkBufferCollectionImageCreateInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCollectionImageCreateInfoFUCHSIA"
  },
  {
    "label": "VkBufferCollectionConstraintsInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCollectionConstraintsInfoFUCHSIA"
  },
  {
    "label": "VkBufferConstraintsInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferConstraintsInfoFUCHSIA"
  },
  {
    "label": "VkBufferCollectionBufferCreateInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCollectionBufferCreateInfoFUCHSIA"
  },
  {
    "label": "VkSysmemColorSpaceFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSysmemColorSpaceFUCHSIA"
  },
  {
    "label": "VkBufferCollectionPropertiesFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkBufferCollectionPropertiesFUCHSIA"
  },
  {
    "label": "VkImageFormatConstraintsInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageFormatConstraintsInfoFUCHSIA"
  },
  {
    "label": "VkImageConstraintsInfoFUCHSIA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkImageConstraintsInfoFUCHSIA"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# ifndef VULKAN_FUCHSIA_H_ # define VULKAN_FUCHSIA_H_ 1 # ifdef __cplusplus \" C \" { # endif # define VK_FUCHSIA_imagepipe_surface 1 # define VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION 1 # define VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME \" VK_FUCHSIA_imagepipe_surface \" typedef VkFlags VkImagePipeSurfaceCreateFlagsFUCHSIA ; typedef struct VkImagePipeSurfaceCreateInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkImagePipeSurfaceCreateFlagsFUCHSIA flags ; zx_handle_t imagePipeHandle ; } VkImagePipeSurfaceCreateInfoFUCHSIA ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateImagePipeSurfaceFUCHSIA)(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "vkCreateImagePipeSurfaceFUCHSIA()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_FUCHSIA_external_memory 1 # define VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION 1 # define VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME \" VK_FUCHSIA_external_memory \" typedef struct VkImportMemoryZirconHandleInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkExternalMemoryHandleTypeFlagBits handleType ; zx_handle_t handle ; } VkImportMemoryZirconHandleInfoFUCHSIA ; typedef struct VkMemoryZirconHandlePropertiesFUCHSIA { VkStructureType sType ; void* pNext ; uint32_t memoryTypeBits ; } VkMemoryZirconHandlePropertiesFUCHSIA ; typedef struct VkMemoryGetZirconHandleInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkDeviceMemory memory ; VkExternalMemoryHandleTypeFlagBits handleType ; } VkMemoryGetZirconHandleInfoFUCHSIA ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryZirconHandleFUCHSIA)(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties)"
  },
  {
    "label": "vkGetMemoryZirconHandleFUCHSIA()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryZirconHandleFUCHSIA(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle)"
  },
  {
    "label": "vkGetMemoryZirconHandlePropertiesFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_FUCHSIA_external_semaphore 1 # define VK_FUCHSIA_EXTERNAL_SEMAPHORE_SPEC_VERSION 1 # define VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME \" VK_FUCHSIA_external_semaphore \" typedef struct VkImportSemaphoreZirconHandleInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; VkSemaphoreImportFlags flags ; VkExternalSemaphoreHandleTypeFlagBits handleType ; zx_handle_t zirconHandle ; } VkImportSemaphoreZirconHandleInfoFUCHSIA ; typedef struct VkSemaphoreGetZirconHandleInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkSemaphore semaphore ; VkExternalSemaphoreHandleTypeFlagBits handleType ; } VkSemaphoreGetZirconHandleInfoFUCHSIA ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkImportSemaphoreZirconHandleFUCHSIA)(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetSemaphoreZirconHandleFUCHSIA)(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle)"
  },
  {
    "label": "vkImportSemaphoreZirconHandleFUCHSIA()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo)"
  },
  {
    "label": "vkGetSemaphoreZirconHandleFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle)"
  },
  {
    "label": "VK_DEFINE_NON_DISPATCHABLE_HANDLE()",
    "kind": "Method",
    "detail": "Function (# endif # define VK_FUCHSIA_buffer_collection 1)",
    "insertText": "VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferCollectionFUCHSIA)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef enum VkImageConstraintsInfoFlagBitsFUCHSIA { VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 0 x00000001,VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 0 x00000002,VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 0 x00000004,VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 0 x00000008,VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 0 x00000010,VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA = 0 x7FFFFFFF } VkImageConstraintsInfoFlagBitsFUCHSIA ; typedef VkFlags VkImageConstraintsInfoFlagsFUCHSIA ; typedef struct VkBufferCollectionCreateInfoFUCHSIA { VkStructureType sType ; const void* pNext ; zx_handle_t collectionToken ; } VkBufferCollectionCreateInfoFUCHSIA ; typedef struct VkImportMemoryBufferCollectionFUCHSIA { VkStructureType sType ; const void* pNext ; VkBufferCollectionFUCHSIA collection ; uint32_t index ; } VkImportMemoryBufferCollectionFUCHSIA ; typedef struct VkBufferCollectionImageCreateInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkBufferCollectionFUCHSIA collection ; uint32_t index ; } VkBufferCollectionImageCreateInfoFUCHSIA ; typedef struct VkBufferCollectionConstraintsInfoFUCHSIA { VkStructureType sType ; const void* pNext ; uint32_t minBufferCount ; uint32_t maxBufferCount ; uint32_t minBufferCountForCamping ; uint32_t minBufferCountForDedicatedSlack ; uint32_t minBufferCountForSharedSlack ; } VkBufferCollectionConstraintsInfoFUCHSIA ; typedef struct VkBufferConstraintsInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkBufferCreateInfo createInfo ; VkFormatFeatureFlags requiredFormatFeatures ; VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints ; } VkBufferConstraintsInfoFUCHSIA ; typedef struct VkBufferCollectionBufferCreateInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkBufferCollectionFUCHSIA collection ; uint32_t index ; } VkBufferCollectionBufferCreateInfoFUCHSIA ; typedef struct VkSysmemColorSpaceFUCHSIA { VkStructureType sType ; const void* pNext ; uint32_t colorSpace ; } VkSysmemColorSpaceFUCHSIA ; typedef struct VkBufferCollectionPropertiesFUCHSIA { VkStructureType sType ; void* pNext ; uint32_t memoryTypeBits ; uint32_t bufferCount ; uint32_t createInfoIndex ; uint64_t sysmemPixelFormat ; VkFormatFeatureFlags formatFeatures ; VkSysmemColorSpaceFUCHSIA sysmemColorSpaceIndex ; VkComponentMapping samplerYcbcrConversionComponents ; VkSamplerYcbcrModelConversion suggestedYcbcrModel ; VkSamplerYcbcrRange suggestedYcbcrRange ; VkChromaLocation suggestedXChromaOffset ; VkChromaLocation suggestedYChromaOffset ; } VkBufferCollectionPropertiesFUCHSIA ; typedef struct VkImageFormatConstraintsInfoFUCHSIA { VkStructureType sType ; const void* pNext ; VkImageCreateInfo imageCreateInfo ; VkFormatFeatureFlags requiredFormatFeatures ; VkImageFormatConstraintsFlagsFUCHSIA flags ; uint64_t sysmemPixelFormat ; uint32_t colorSpaceCount ; const VkSysmemColorSpaceFUCHSIA* pColorSpaces ; } VkImageFormatConstraintsInfoFUCHSIA ; typedef struct VkImageConstraintsInfoFUCHSIA { VkStructureType sType ; const void* pNext ; uint32_t formatConstraintsCount ; const VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints ; VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints ; VkImageConstraintsInfoFlagsFUCHSIA flags ; } VkImageConstraintsInfoFUCHSIA ; typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkCreateBufferCollectionFUCHSIA)(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferCollectionFUCHSIA* pCollection)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VKAPI_PTR *PFN_vkDestroyBufferCollectionFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "VkResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "VkResult(VKAPI_PTR *PFN_vkGetBufferCollectionPropertiesFUCHSIA)(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA* pProperties)"
  },
  {
    "label": "vkCreateBufferCollectionFUCHSIA()",
    "kind": "Method",
    "detail": "Function (# ifndef VK_NO_PROTOTYPES VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkCreateBufferCollectionFUCHSIA(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferCollectionFUCHSIA* pCollection)"
  },
  {
    "label": "vkSetBufferCollectionImageConstraintsFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo)"
  },
  {
    "label": "vkSetBufferCollectionBufferConstraintsFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo)"
  },
  {
    "label": "vkDestroyBufferCollectionFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR void VKAPI_CALL)",
    "insertText": "vkDestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vkGetBufferCollectionPropertiesFUCHSIA()",
    "kind": "Method",
    "detail": "Function (VKAPI_ATTR VkResult VKAPI_CALL)",
    "insertText": "vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA* pProperties)"
  }
]