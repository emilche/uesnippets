[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "LanguageSelector()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_EMBEDDED_I18N_LANGUAGE_SELECTOR_H_ # define BASE_WIN_EMBEDDED_I18N_LANGUAGE_SELECTOR_H_ # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / strings / string_piece . h \" namespace base { namespace win { namespace i18n { class BASE_EXPORT LanguageSelector { public : using LangToOffset = std::pair<WStringPiece,size_t> ;)",
    "insertText": "LanguageSelector(WStringPiece preferred_language, span<const LangToOffset> languages_to_offset)"
  },
  {
    "label": "LanguageSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LanguageSelector(const std::vector<std::wstring>& candidates, span<const LangToOffset> languages_to_offset)"
  },
  {
    "label": "LanguageSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LanguageSelector(const LanguageSelector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LanguageSelector&)",
    "insertText": "operator(const LanguageSelector&)"
  },
  {
    "label": "LanguageSelector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LanguageSelector()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "offset()"
  }
]