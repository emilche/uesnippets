[
  {
    "label": "KFCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KFCurve"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "ETangentMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETangentMode"
  },
  {
    "label": "EInterpolationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInterpolationType"
  },
  {
    "label": "EWeightedMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWeightedMode"
  },
  {
    "label": "EConstantMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstantMode"
  },
  {
    "label": "EVelocityMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVelocityMode"
  },
  {
    "label": "ETangentVisibility",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETangentVisibility"
  },
  {
    "label": "EDataIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDataIndex"
  },
  {
    "label": "FbxScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxScene"
  },
  {
    "label": "FbxAnimCurveTangentInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_ANIMATION_CURVE_H_ # define _FBXSDK_SCENE_ANIMATION_CURVE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / scene / animation / fbxanimcurvebase . h> # include<fbxsdk / fbxsdk_nsbegin . h> class KFCurve ; class FBXSDK_DLL FbxAnimCurveDef { public : const float sDEFAULT_WEIGHT ; const float sMIN_WEIGHT ; const float sMAX_WEIGHT ; const float sDEFAULT_VELOCITY ; enum ETangentMode { eTangentAuto = 0 x00000100,eTangentTCB = 0 x00000200,eTangentUser = 0 x00000400,eTangentGenericBreak = 0 x00000800,eTangentBreak = eTangentGenericBreak | eTangentUser,eTangentAutoBreak = eTangentGenericBreak | eTangentAuto,eTangentGenericClamp = 0 x00001000,eTangentGenericTimeIndependent = 0 x00002000,eTangentGenericClampProgressive = 0 x00004000 | eTangentGenericTimeIndependent } ; enum EInterpolationType { eInterpolationConstant = 0 x00000002,eInterpolationLinear = 0 x00000004,eInterpolationCubic = 0 x00000008 } ; enum EWeightedMode { eWeightedNone = 0 x00000000,eWeightedRight = 0 x01000000,eWeightedNextLeft = 0 x02000000,eWeightedAll = eWeightedRight | eWeightedNextLeft } ; enum EConstantMode { eConstantStandard = 0 x00000000,eConstantNext = 0 x00000100 } ; enum EVelocityMode { eVelocityNone = 0 x00000000,eVelocityRight = 0 x10000000,eVelocityNextLeft = 0 x20000000,eVelocityAll = eVelocityRight | eVelocityNextLeft } ; enum ETangentVisibility { eTangentShowNone = 0 x00000000,eTangentShowLeft = 0 x00100000,eTangentShowRight = 0 x00200000,eTangentShowBoth = eTangentShowLeft | eTangentShowRight } ; enum EDataIndex { eRightSlope = 0,eNextLeftSlope = 1,eWeights = 2,eRightWeight = 2,eNextLeftWeight = 3,eVelocity = 4,eRightVelocity = 4,eNextLeftVelocity = 5,eTCBTension = 0,eTCBContinuity = 1,eTCBBias = 2 } ; } ; struct FBXSDK_DLL FbxAnimCurveTangentInfo {)",
    "insertText": "FbxAnimCurveTangentInfo()"
  },
  {
    "label": "FbxAnimCurveKey_Impl()",
    "kind": "Method",
    "detail": "Function (mDerivative = 0 ; mWeight = FbxAnimCurveDef::sDEFAULT_WEIGHT ; mWeighted = false ; mVelocity = FbxAnimCurveDef::sDEFAULT_VELOCITY ; mHasVelocity = false ; mAuto = 0 ; } float mDerivative ; float mWeight ; float mVelocity ; float mAuto ; bool mWeighted ; bool mHasVelocity ; } ; class FBXSDK_DLL FbxAnimCurveKey_Impl { public : ~)",
    "insertText": "FbxAnimCurveKey_Impl()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FbxAnimCurveKey_Impl&)",
    "insertText": "operator(const FbxAnimCurveKey_Impl& pFKey)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FbxTime pTime, float pValue)"
  },
  {
    "label": "SetTCB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTCB(FbxTime pTime, float pValue, float pData0 = 0.0f, float pData1 = 0.0f, float pData2 = 0.0f)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValue()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(float pValue)"
  },
  {
    "label": "GetInterpolation()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EInterpolationType)",
    "insertText": "GetInterpolation()"
  },
  {
    "label": "SetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolation(FbxAnimCurveDef::EInterpolationType pInterpolation)"
  },
  {
    "label": "GetTangentMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::ETangentMode)",
    "insertText": "GetTangentMode(bool pIncludeOverrides = false)"
  },
  {
    "label": "SetTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentMode(FbxAnimCurveDef::ETangentMode pTangentMode)"
  },
  {
    "label": "GetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EWeightedMode)",
    "insertText": "GetTangentWeightMode()"
  },
  {
    "label": "SetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentWeightMode(FbxAnimCurveDef::EWeightedMode pTangentWeightMode, FbxAnimCurveDef::EWeightedMode pMask = FbxAnimCurveDef::eWeightedAll)"
  },
  {
    "label": "SetTangentWeightAndAdjustTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentWeightAndAdjustTangent(FbxAnimCurveDef::EDataIndex pIndex, double pWeight)"
  },
  {
    "label": "GetTangentVelocityMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EVelocityMode)",
    "insertText": "GetTangentVelocityMode()"
  },
  {
    "label": "SetTangentVelocityMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentVelocityMode(FbxAnimCurveDef::EVelocityMode pTangentVelocityMode, FbxAnimCurveDef::EVelocityMode pMask = FbxAnimCurveDef::eVelocityAll)"
  },
  {
    "label": "GetConstantMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EConstantMode)",
    "insertText": "GetConstantMode()"
  },
  {
    "label": "SetConstantMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstantMode(FbxAnimCurveDef::EConstantMode pMode)"
  },
  {
    "label": "GetDataFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDataFloat(FbxAnimCurveDef::EDataIndex pIndex)"
  },
  {
    "label": "SetDataFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataFloat(FbxAnimCurveDef::EDataIndex pIndex, float pValue)"
  },
  {
    "label": "SetTangentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentVisibility(FbxAnimCurveDef::ETangentVisibility pVisibility)"
  },
  {
    "label": "GetTangentVisibility()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::ETangentVisibility)",
    "insertText": "GetTangentVisibility()"
  },
  {
    "label": "SetBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreak(bool pVal)"
  },
  {
    "label": "GetBreak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBreak()"
  },
  {
    "label": "FbxAnimCurveKey()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxAnimCurveKey : public FbxAnimCurveKeyBase { public :)",
    "insertText": "FbxAnimCurveKey() : FbxAnimCurveKeyBase()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mAllocatorFct != NULL)"
  },
  {
    "label": "mImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mImpl(*mAllocatorFct)()"
  },
  {
    "label": "FbxAnimCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxAnimCurveKey(FbxTime pTime) : FbxAnimCurveKeyBase()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(pTime)"
  },
  {
    "label": "FbxAnimCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxAnimCurveKey(FbxTime pTime, float pVal) : FbxAnimCurveKeyBase()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(pTime, pVal)"
  },
  {
    "label": "FbxAnimCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxAnimCurveKey(FbxAnimCurveKey const& pFKey) : FbxAnimCurveKeyBase()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mCopyAllocatorFct != NULL)"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(pFKey.GetTime())"
  },
  {
    "label": "mCopyAllocatorFct()",
    "kind": "Method",
    "detail": "Function (mImpl =)",
    "insertText": "mCopyAllocatorFct(pFKey.GetImpl())"
  },
  {
    "label": "FbxAnimCurveKey()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxAnimCurveKey()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mDeallocatorFct != NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxAnimCurveKey&)",
    "insertText": "operator(const FbxAnimCurveKey& pFKey)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mImpl)"
  },
  {
    "label": "mImpl()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "mImpl(pFKey.GetImpl())"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTime(const FbxTime& pTime)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "Set(pTime, pValue)"
  },
  {
    "label": "SetTCB()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTCB(pTime, pValue, pData0, pData1, pData2)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetValue(pValue)"
  },
  {
    "label": "SetInterpolation()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetInterpolation(pInterpolation)"
  },
  {
    "label": "SetTangentMode()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTangentMode(pTangentMode)"
  },
  {
    "label": "SetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTangentWeightMode(pTangentWeightMode, pMask)"
  },
  {
    "label": "SetTangentWeightAndAdjustTangent()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTangentWeightAndAdjustTangent(pIndex, pWeight)"
  },
  {
    "label": "SetTangentVelocityMode()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTangentVelocityMode(pTangentVelocityMode, pMask)"
  },
  {
    "label": "SetConstantMode()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetConstantMode(pMode)"
  },
  {
    "label": "SetDataFloat()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetDataFloat(pIndex, pValue)"
  },
  {
    "label": "SetTangentVisibility()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetTangentVisibility(pVisibility)"
  },
  {
    "label": "SetBreak()",
    "kind": "Method",
    "detail": "Function (mImpl ->)",
    "insertText": "SetBreak(pVal)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (} FbxAnimCurveKey_Impl*)",
    "insertText": "GetImpl()"
  },
  {
    "label": "SetCopyAllocatorFct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCopyAllocatorFct(FbxAnimCurveKey_Impl* (*pCopyAllocatorFct)(FbxAnimCurveKey_Impl*))"
  },
  {
    "label": "SetDeallocatorFct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeallocatorFct(void (*pDeallocatorFct)(FbxAnimCurveKey_Impl*))"
  },
  {
    "label": "FbxAnimCurveKey_Impl()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FbxAnimCurveKey_Impl(*mAllocatorFct)()"
  },
  {
    "label": "FbxAnimCurveKey_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxAnimCurveKey_Impl(*mCopyAllocatorFct)(FbxAnimCurveKey_Impl*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*mDeallocatorFct)(FbxAnimCurveKey_Impl*)"
  },
  {
    "label": "FBXSDK_ABSTRACT_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveKey_Impl* mImpl ; } ; class FbxScene ; class FBXSDK_DLL FbxAnimCurve : public FbxAnimCurveBase {)",
    "insertText": "FBXSDK_ABSTRACT_OBJECT_DECLARE(FbxAnimCurve, FbxAnimCurveBase)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : FbxAnimCurve*)",
    "insertText": "Create(FbxScene* pContainer, const char* pName)"
  },
  {
    "label": "ResizeKeyBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeKeyBuffer(int pKeyCount)"
  },
  {
    "label": "KeyModifyBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyModifyBegin()"
  },
  {
    "label": "KeyModifyEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyModifyEnd()"
  },
  {
    "label": "KeyClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyClear()"
  },
  {
    "label": "KeyGetCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KeyGetCount()"
  },
  {
    "label": "KeyAdd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KeyAdd(FbxTime pTime, FbxAnimCurveKeyBase& pKey, int* pLast = NULL)"
  },
  {
    "label": "KeyAdd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KeyAdd(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "KeySet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeySet(int pIndex, FbxAnimCurveKeyBase& pKey)"
  },
  {
    "label": "KeyRemove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyRemove(int pIndex)"
  },
  {
    "label": "KeyRemove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyRemove(int pStartIndex, int pEndIndex)"
  },
  {
    "label": "KeyInsert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KeyInsert(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "KeyFind()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "KeyFind(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "KeyScaleValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyScaleValue(float pMultValue)"
  },
  {
    "label": "KeyScaleValueAndTangent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyScaleValueAndTangent(float pMultValue)"
  },
  {
    "label": "KeySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySet(int pKeyIndex,FbxTime pTime, float pValue, FbxAnimCurveDef::EInterpolationType pInterpolation = FbxAnimCurveDef::eInterpolationCubic, FbxAnimCurveDef::ETangentMode pTangentMode = FbxAnimCurveDef::eTangentAuto, float pData0 = 0.0,float pData1 = 0.0,FbxAnimCurveDef::EWeightedMode pTangentWeightMode = FbxAnimCurveDef::eWeightedNone, float pWeight0 = FbxAnimCurveDef::sDEFAULT_WEIGHT,float pWeight1 = FbxAnimCurveDef::sDEFAULT_WEIGHT,float pVelocity0 = FbxAnimCurveDef::sDEFAULT_VELOCITY,float pVelocity1 = FbxAnimCurveDef::sDEFAULT_VELOCITY)"
  },
  {
    "label": "KeySetTCB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetTCB(int pKeyIndex,FbxTime pTime, float pValue, float pData0 = 0.0f, float pData1 = 0.0f, float pData2 = 0.0f)"
  },
  {
    "label": "KeyGetInterpolation()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EInterpolationType)",
    "insertText": "KeyGetInterpolation(int pKeyIndex)"
  },
  {
    "label": "KeySetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetInterpolation(int pKeyIndex, FbxAnimCurveDef::EInterpolationType pInterpolation)"
  },
  {
    "label": "KeyGetConstantMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::EConstantMode)",
    "insertText": "KeyGetConstantMode(int pKeyIndex)"
  },
  {
    "label": "KeyGetTangentMode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveDef::ETangentMode)",
    "insertText": "KeyGetTangentMode(int pKeyIndex, bool pIncludeOverrides = false)"
  },
  {
    "label": "KeySetConstantMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetConstantMode(int pKeyIndex, FbxAnimCurveDef::EConstantMode pMode)"
  },
  {
    "label": "KeySetTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetTangentMode(int pKeyIndex, FbxAnimCurveDef::ETangentMode pTangent)"
  },
  {
    "label": "KeyGet()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveKey)",
    "insertText": "KeyGet(int pIndex)"
  },
  {
    "label": "KeyGetValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetValue(int pKeyIndex)"
  },
  {
    "label": "KeySetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetValue(int pKeyIndex, float pValue)"
  },
  {
    "label": "KeyIncValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyIncValue(int pKeyIndex, float pValue)"
  },
  {
    "label": "KeyMultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyMultValue(int pKeyIndex, float pValue)"
  },
  {
    "label": "KeyMultTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyMultTangent(int pKeyIndex, float pValue)"
  },
  {
    "label": "KeyGetTime()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "KeyGetTime(int pKeyIndex)"
  },
  {
    "label": "KeySetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetTime(int pKeyIndex, FbxTime pTime)"
  },
  {
    "label": "KeySetBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetBreak(int pKeyIndex, bool pVal)"
  },
  {
    "label": "KeyGetBreak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyGetBreak(int pKeyIndex)"
  },
  {
    "label": "KeyGetLeftDerivative()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetLeftDerivative(int pIndex)"
  },
  {
    "label": "KeySetLeftDerivative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetLeftDerivative(int pIndex, float pValue)"
  },
  {
    "label": "KeyGetLeftAuto()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetLeftAuto(int pIndex, bool pApplyOvershootProtection = false)"
  },
  {
    "label": "KeyGetLeftDerivativeInfo()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveTangentInfo)",
    "insertText": "KeyGetLeftDerivativeInfo(int pIndex)"
  },
  {
    "label": "KeySetLeftDerivativeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetLeftDerivativeInfo(int pIndex, const FbxAnimCurveTangentInfo& pValue, bool pForceDerivative = false)"
  },
  {
    "label": "KeyGetRightDerivative()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetRightDerivative(int pIndex)"
  },
  {
    "label": "KeySetRightDerivative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetRightDerivative(int pIndex, float pValue)"
  },
  {
    "label": "KeyGetRightAuto()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetRightAuto(int pIndex, bool pApplyOvershootProtection = false)"
  },
  {
    "label": "KeyGetRightDerivativeInfo()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveTangentInfo)",
    "insertText": "KeyGetRightDerivativeInfo(int pIndex)"
  },
  {
    "label": "KeySetRightDerivativeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetRightDerivativeInfo(int pIndex, const FbxAnimCurveTangentInfo& pValue, bool pForceDerivative = false)"
  },
  {
    "label": "KeyIsLeftTangentWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyIsLeftTangentWeighted(int pIndex)"
  },
  {
    "label": "KeyIsRightTangentWeighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyIsRightTangentWeighted(int pIndex)"
  },
  {
    "label": "KeyGetLeftTangentWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetLeftTangentWeight(int pIndex)"
  },
  {
    "label": "KeyGetRightTangentWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetRightTangentWeight(int pIndex)"
  },
  {
    "label": "KeySetLeftTangentWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetLeftTangentWeight(int pIndex, float pWeight, bool pAdjustTan = false)"
  },
  {
    "label": "KeySetRightTangentWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeySetRightTangentWeight(int pIndex, float pWeight, bool pAdjustTan = false)"
  },
  {
    "label": "KeyGetLeftTangentVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetLeftTangentVelocity(int pIndex)"
  },
  {
    "label": "KeyGetRightTangentVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "KeyGetRightTangentVelocity(int pIndex)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Evaluate(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "EvaluateIndex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateIndex(double pIndex)"
  },
  {
    "label": "EvaluateLeftDerivative()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateLeftDerivative(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "EvaluateRightDerivative()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateRightDerivative(FbxTime pTime, int* pLast = NULL)"
  },
  {
    "label": "GetTimeInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTimeInterval(FbxTimeSpan& pTimeInterval)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(FbxAnimCurve& pSource, bool pWithKeys = true)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValue(int pCurveNodeIndex=0)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(float pValue, int pCurveNodeIndex=0)"
  },
  {
    "label": "GetKFCurve()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS KFCurve*)",
    "insertText": "GetKFCurve()"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Store(FbxIO* pFileObject, bool pLegacyVersion=false)"
  },
  {
    "label": "Retrieve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Retrieve(FbxIO* pFileObject)"
  },
  {
    "label": "ExtrapolationSyncCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtrapolationSyncCallback()"
  }
]