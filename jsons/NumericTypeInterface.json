[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "INumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INumericTypeInterface"
  },
  {
    "label": "TDefaultNumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultNumericTypeInterface"
  },
  {
    "label": "FNumericUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericUnit"
  },
  {
    "label": "TNumericUnitTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNumericUnitTypeInterface"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / Find . h \" # include \" Templates / IsIntegral . h \" # include \" Templates / ValueOrError . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Math / BasicMathExpressionEvaluator . h \" # include \" Internationalization / FastDecimalFormat . h \" # include \" Misc / Attribute . h \" enum class EUnit : uint8 ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSettingChanged)"
  },
  {
    "label": "INumericTypeInterface()",
    "kind": "Method",
    "detail": "Function (template<NumericType> struct INumericTypeInterface { ~)",
    "insertText": "INumericTypeInterface()"
  },
  {
    "label": "GetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMinFractionalDigits()"
  },
  {
    "label": "GetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxFractionalDigits()"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinFractionalDigits(const TAttribute<TOptional<int32>>& NewValue)"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxFractionalDigits(const TAttribute<TOptional<int32>>& NewValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const NumericType& Value)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType>)",
    "insertText": "FromString(const FString& InString, const NumericType& ExistingValue)"
  },
  {
    "label": "IsCharacterValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCharacterValid(TCHAR InChar)"
  },
  {
    "label": "GetOnSettingChanged()",
    "kind": "Method",
    "detail": "Function (FOnSettingChanged*)",
    "insertText": "GetOnSettingChanged()"
  },
  {
    "label": "MinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinFractionalDigits(NewValue.Get().IsSet()) ? FMath::Max(0, NewValue.Get().GetValue())"
  },
  {
    "label": "MaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxFractionalDigits(NewValue.Get().IsSet()) ? FMath::Max(0, NewValue.Get().GetValue())"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions NumberFormattingOptions =)",
    "insertText": "FNumberFormattingOptions() .SetUseGrouping(false) .SetMinimumFractionalDigits(TIsIntegral<NumericType>::Value ? 0 : MinFractionalDigits) .SetMaximumFractionalDigits(TIsIntegral<NumericType>::Value ? 0 : FMath::Max(MaxFractionalDigits, MinFractionalDigits))"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "FromString(const FString& InString, const NumericType& InExistingValue)"
  },
  {
    "label": "FNumberParsingOptions()",
    "kind": "Method",
    "detail": "Function (FNumberParsingOptions ParsingOption =)",
    "insertText": "FNumberParsingOptions().SetUseGrouping(false).SetUseClamping(true)"
  },
  {
    "label": "StringToNumber()",
    "kind": "Method",
    "detail": "Function ({ NumericType PrimaryValue { } ; int32 PrimaryParsedLen = 0 ; bool PrimaryResult =)",
    "insertText": "StringToNumber(*InString, InString.Len(), ExpressionParser::GetLocalizedNumberFormattingRules(), ParsingOption, PrimaryValue, &PrimaryParsedLen)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (} return TOptional<)",
    "insertText": "NumericType()"
  },
  {
    "label": "InChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InChar()"
  },
  {
    "label": "GetLocalizedNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules& NumberFormattingRules =)",
    "insertText": "GetLocalizedNumberFormattingRules()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; const FString ValidChars =)",
    "insertText": "TEXT(\"1234567890()-+=\\\\/.,*^%%\")"
  },
  {
    "label": "TNumericUnitTypeInterface()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EUnit : uint8 ; template<> struct FNumericUnit ; template<NumericType> struct TNumericUnitTypeInterface : TDefaultNumericTypeInterface<NumericType> { const EUnit UnderlyingUnits ; TOptional<EUnit> FixedDisplayUnits ; TOptional<EUnit> UserDisplayUnits ;)",
    "insertText": "TNumericUnitTypeInterface(EUnit InUnits)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType>)",
    "insertText": "FromString(const FString& ValueString, const NumericType& InExistingValue)"
  },
  {
    "label": "SetupFixedDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupFixedDisplay(const NumericType& InValue)"
  }
]