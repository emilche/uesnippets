[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SNumericTextBlockKeyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNumericTextBlockKeyEditor"
  },
  {
    "label": "FPerlinNoiseChannelSectionMenuExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerlinNoiseChannelSectionMenuExtension"
  },
  {
    "label": "FChannelNotifyHook",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelNotifyHook"
  },
  {
    "label": "TPerlinNoiseChannelInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPerlinNoiseChannelInterface"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CurveKeyEditors / SequencerKeyEditor . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" ISequencerChannelInterface . h \" # include \" Misc / NotifyHook . h \" # include \" MovieSceneSection . h \" # include \" TimeToPixel . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Text / STextBlock . h \" class FMenuBuilder ; template<ChannelType,NumericType> class SNumericTextBlockKeyEditor : public SCompoundWidget { using FKeyEditor = TSequencerKeyEditor<ChannelType,NumericType> ; FKeyEditor KeyEditor ; TSharedPtr<INumericTypeInterface<NumericType>> Interface ;)",
    "insertText": "SLATE_BEGIN_ARGS(SNumericTextBlockKeyEditor)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const FKeyEditor& InKeyEditor)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (KeyEditor = InKeyEditor ; Interface =)",
    "insertText": "MakeShareable(new TDefaultNumericTypeInterface<NumericType>)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(STextBlock) .Text(this, &SNumericTextBlockKeyEditor<ChannelType, NumericType>::GetValueAsText)"
  },
  {
    "label": "GetValueAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueAsText()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FString ValueString = Interface ->)",
    "insertText": "ToString(KeyEditor.GetCurrentValue())"
  },
  {
    "label": "FPerlinNoiseChannelSectionMenuExtension()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPerlinNoiseChannelSectionMenuExtension : TSharedFromThis<FPerlinNoiseChannelSectionMenuExtension>,ISidebarChannelExtension {)",
    "insertText": "FPerlinNoiseChannelSectionMenuExtension(TArrayView<const FMovieSceneChannelHandle> InChannelHandles, const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections)"
  },
  {
    "label": "FPerlinNoiseChannelSectionMenuExtension()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPerlinNoiseChannelSectionMenuExtension()"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISidebarChannelExtension>)",
    "insertText": "ExtendMenu(FMenuBuilder& MenuBuilder, const bool bInSubMenu)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "BuildChannelsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChannelsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildParametersMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildParametersMenu(FMenuBuilder& MenuBuilder, int32 ChannelHandleIndex)"
  },
  {
    "label": "FChannelNotifyHook()",
    "kind": "Method",
    "detail": "Function (private : struct FChannelNotifyHook : FNotifyHook { TWeakObjectPtr<UObject> WeakObjectToModify ;)",
    "insertText": "FChannelNotifyHook(UObject* InObjectToModify) : WeakObjectToModify(InObjectToModify)"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FProperty* PropertyThatChanged)"
  },
  {
    "label": "AddOrUpdateKey_Raw()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FMovieSceneChannelHandle> ChannelHandles ; TArray<int32> ChannelHandleSectionIndexes ; TArray<TWeakObjectPtr<UMovieSceneSection>> WeakSections ; TArray<FChannelNotifyHook> NotifyHooks ; } ; template<ChannelContainerType> struct TPerlinNoiseChannelInterface : ISequencerChannelInterface { using ChannelType = ChannelContainerType::ChannelType ; FKeyHandle)",
    "insertText": "AddOrUpdateKey_Raw(FMovieSceneChannel* Channel, UMovieSceneSection* SectionToKey, const void* ExtendedEditorData, FFrameNumber InTime, ISequencer& InSequencer, const FGuid& ObjectBindingID, FTrackInstancePropertyBindings* PropertyBindings)"
  },
  {
    "label": "CopyKeys_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyKeys_Raw(FMovieSceneChannel* Channel, const UMovieSceneSection* Section, FName KeyAreaName, FMovieSceneClipboardBuilder& ClipboardBuilder, TArrayView<const FKeyHandle> KeyMask)"
  },
  {
    "label": "PasteKeys_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PasteKeys_Raw(FMovieSceneChannel* Channel, UMovieSceneSection* Section, const FMovieSceneClipboardKeyTrack& KeyTrack, const FMovieSceneClipboardEnvironment& SrcEnvironment, const FSequencerPasteEnvironment& DstEnvironment, TArray<FKeyHandle>& OutPastedKeys)"
  },
  {
    "label": "GetKeyStruct_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FStructOnScope>)",
    "insertText": "GetKeyStruct_Raw(FMovieSceneChannelHandle Channel, FKeyHandle KeyHandle)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (const TMovieSceneExternalValue<ChannelType::CurveValueType>* ExternalValue = Channel . Cast<)",
    "insertText": "ChannelType().GetExtendedEditorData()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (using KeyEditorType = SNumericTextBlockKeyEditor<ChannelType,ChannelType::CurveValueType> ; return)",
    "insertText": "SNew(KeyEditorType, KeyEditor)"
  },
  {
    "label": "ExtendKeyMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendKeyMenu_Raw(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, TArrayView<const FExtendKeyMenuParams> Parameters, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "ExtendSectionMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendSectionMenu_Raw(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> InMenuExtender, TArrayView<const FMovieSceneChannelHandle> InChannels, const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "FPerlinNoiseChannelSectionMenuExtension()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPerlinNoiseChannelSectionMenuExtension> Extension = MakeShared<)",
    "insertText": "FPerlinNoiseChannelSectionMenuExtension(InChannels, InWeakSections)"
  },
  {
    "label": "AddMenuExtension()",
    "kind": "Method",
    "detail": "Function (InMenuExtender ->)",
    "insertText": "AddMenuExtension(TEXT(\"SequencerChannels\"), EExtensionHook::First, nullptr , FMenuExtensionDelegate::CreateLambda([Extension](FMenuBuilder& MenuBuilder) { Extension->ExtendMenu(MenuBuilder, true); }))"
  },
  {
    "label": "ExtendSidebarMenu_Raw()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISidebarChannelExtension>)",
    "insertText": "ExtendSidebarMenu_Raw(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> InMenuExtender, TArrayView<const FMovieSceneChannelHandle> InChannels, const TArray<TWeakObjectPtr<UMovieSceneSection>>& InWeakSections, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (Extension ->)",
    "insertText": "ExtendMenu(MenuBuilder, false)"
  },
  {
    "label": "ShouldShowCurve_Raw()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowCurve_Raw(const FMovieSceneChannel* Channel, UMovieSceneSection* InSection)"
  },
  {
    "label": "FillColor()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Sequencer ; FLinearColor)",
    "insertText": "FillColor(1, 1, 1, 0.334f)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (ChannelType* TypedChannel = static_cast<)",
    "insertText": "ChannelType(InChannel)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2D> CurvePoints ; CurvePoints .)",
    "insertText": "Reserve(PaintArgs.Geometry.Size.X / 2.0)"
  },
  {
    "label": "YScale()",
    "kind": "Method",
    "detail": "Function (const double Amplitude = TypedChannel -> PerlinNoiseParams . Amplitude ; const double YOffset = PaintArgs . Geometry . Size . Y / 2 . 0 ; const double)",
    "insertText": "YScale(Amplitude != 0) ? (PaintArgs.Geometry.Size.Y / Amplitude / 2.0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurvePoints .)",
    "insertText": "Add(FVector2D(X, YOffset - (Y * YScale)))"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MakeLines(PaintArgs.DrawElements, LayerId, PaintArgs.Geometry.ToPaintGeometry(), CurvePoints, ESlateDrawEffect::PreMultipliedAlpha, FillColor, true)"
  }
]