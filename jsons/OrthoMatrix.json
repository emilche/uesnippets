[
  {
    "label": "TOrthoMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOrthoMatrix"
  },
  {
    "label": "TReversedZOrthoMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReversedZOrthoMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TOrthoMatrix : public TMatrix<T> { public :)",
    "insertText": "TOrthoMatrix(T Width,T Height,T ZScale,T ZOffset)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TOrthoMatrix(const TOrthoMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "TReversedZOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TReversedZOrthoMatrix : public TMatrix<T> { public :)",
    "insertText": "TReversedZOrthoMatrix(T Width,T Height,T ZScale,T ZOffset)"
  },
  {
    "label": "TReversedZOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReversedZOrthoMatrix(T Left, T Right, T Bottom, T Top, T ZScale, T ZOffset)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TReversedZOrthoMatrix(const TReversedZOrthoMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "TOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> TOrthoMatrix<T)",
    "insertText": "TOrthoMatrix(T Width, T Height, T ZScale, T ZOffset) : TMatrix<T>( TPlane<T>((Width != 0.0f) ? (1.0f / Width) : 1.0f, 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, (Height != 0.0f) ? (1.0f / Height) : 1.f, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, ZScale, 0.0f), TPlane<T>(0.0f, 0.0f, ZOffset * ZScale, 1.0f))"
  },
  {
    "label": "TReversedZOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TReversedZOrthoMatrix<T)",
    "insertText": "TReversedZOrthoMatrix(T Width, T Height, T ZScale, T ZOffset) : TMatrix<T>( TPlane<T>((Width != 0.0f) ? (1.0f / Width) : 1.0f, 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, (Height != 0.0f) ? (1.0f / Height) : 1.f, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, -ZScale, 0.0f), TPlane<T>(0.0f, 0.0f, 1.0f - ZOffset * ZScale, 1.0f))"
  },
  {
    "label": "TReversedZOrthoMatrix()",
    "kind": "Method",
    "detail": "Function (} template<T> TReversedZOrthoMatrix<T)",
    "insertText": "TReversedZOrthoMatrix(T Left, T Right, T Bottom, T Top, T ZScale, T ZOffset) : TMatrix<T>( TPlane<T>(1.0f / (Right - Left), 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, 1.0f / (Top - Bottom), 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, -ZScale, 0.0f), TPlane<T>((Left + Right) / (Left - Right), (Top + Bottom) / (Bottom - Top), 1.0f - ZOffset * ZScale, 1.0f))"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(OrthoMatrix, 44)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_LWC_TYPE(ReversedZOrthoMatrix, 44)"
  }
]