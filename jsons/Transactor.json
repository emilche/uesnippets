[
  {
    "label": "FTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransaction"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "FObjectRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectRecord"
  },
  {
    "label": "FSerializedObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReader"
  },
  {
    "label": "FWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriter"
  },
  {
    "label": "FObjectRecords",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectRecords"
  },
  {
    "label": "FPackageRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageRecord"
  },
  {
    "label": "FChangedObjectValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangedObjectValue"
  },
  {
    "label": "UTransactor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransactor"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Package . h \" # include \" UObject / Object . h \" # include \" UObject / Package . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / ArchiveSerializedPropertyChain . h \" # include \" Misc / ITransaction . h \" # include \" Misc / TransactionObjectEvent . h \" # include \" TransactionCommon . h \" # include \" Algo / Find . h \" # include<type_traits> # include \" Transactor . generated . h \" class FTransaction : public ITransaction { class FTransactionObjectEvent ; protected : class FObjectRecord { public : struct FSerializedObject : public UE::Transaction::FSerializedObject { enum class EPendingKillChange : uint8 { None,DeadToAlive,AliveToDead } ; void)",
    "insertText": "SetObject(const UObject* InObject)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (ObjectId .)",
    "insertText": "SetObject(InObject)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (ObjectFlags = InObject ->)",
    "insertText": "GetFlags()"
  },
  {
    "label": "FindOrCreateTransactionAnnotation()",
    "kind": "Method",
    "detail": "Function (ObjectAnnotation = InObject ->)",
    "insertText": "FindOrCreateTransactionAnnotation()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (PendingKillChange = EPendingKillChange::None ; } void)",
    "insertText": "Swap(FSerializedObject& Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (UE::Transaction::)",
    "insertText": "Swap(Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (ObjectId .)",
    "insertText": "Swap(Other.ObjectId)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectFlags, Other.ObjectFlags)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectAnnotation, Other.ObjectAnnotation)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(PendingKillChange, Other.PendingKillChange)"
  },
  {
    "label": "FObjectRecord()",
    "kind": "Method",
    "detail": "Function (} FTransactionObjectId ObjectId ; EObjectFlags ObjectFlags = RF_NoFlags ; TSharedPtr<ITransactionObjectAnnotation> ObjectAnnotation ; EPendingKillChange PendingKillChange = EPendingKillChange::None ; } ; UE::Transaction::FPersistentObjectRef Object ; TUniquePtr<FChange> CustomChange ; FScriptArray* Array = nullptr ; int32 Index = 0 ; int32 Count = 0 ; int32 Oper = 0 ; int32 ElementSize = 0 ; uint32 ElementAlignment = 0 ; STRUCT_DC DefaultConstructor ; STRUCT_AR Serializer ; STRUCT_DTOR Destructor ; bool bRestored = false ; bool bFinalized = false ; bool bWantsBinarySerialization = true ; bool bHasSerializedObjectChanges = false ; FSerializedObject SerializedObject ; FSerializedObject SerializedObjectFlip ; TUniquePtr<UE::Transaction::FDiffableObject> DiffableObject ; TUniquePtr<UE::Transaction::FDiffableObject> DiffableObjectSnapshot ; TSharedPtr<ITransactionObjectAnnotation> ObjectAnnotationSnapshot ; TArray<const FProperty*> AllPropertiesSnapshot ; FTransactionObjectDeltaChange DeltaChange ;)",
    "insertText": "FObjectRecord()"
  },
  {
    "label": "FObjectRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectRecord(FTransaction* Owner, UObject* InObject, TUniquePtr<FChange> InCustomChange, FScriptArray* InArray, int32 InIndex, int32 InCount, int32 InOper, int32 InElementSize, uint32 InElementAlignment, STRUCT_DC InDefaultConstructor, STRUCT_AR InSerializer, STRUCT_DTOR InDestructor)"
  },
  {
    "label": "FObjectRecord()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FObjectRecord(const FObjectRecord&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectRecord&)",
    "insertText": "operator(const FObjectRecord&)"
  },
  {
    "label": "GetDiffableObject()",
    "kind": "Method",
    "detail": "Function (public : UE::Transaction::FDiffableObject)",
    "insertText": "GetDiffableObject(TArrayView<const FProperty*> PropertiesToSerialize = TArrayView<const FProperty*>(), UE::Transaction::DiffUtil::EGetDiffableObjectMode ObjectSerializationMode = UE::Transaction::DiffUtil::EGetDiffableObjectMode::SerializeObject)"
  },
  {
    "label": "SerializeContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeContents(FArchive& Ar, int32 InOper)"
  },
  {
    "label": "SerializeObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeObject(FArchive& Ar)"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore(FTransaction* Owner)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FTransaction* Owner)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Load(FTransaction* Owner)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize(FTransaction* Owner, UE::Transaction::DiffUtil::FDiffableObjectArchetypeCache& ArchetypeCache, TSharedPtr<ITransactionObjectAnnotation>& OutFinalizedObjectAnnotation)"
  },
  {
    "label": "Snapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Snapshot(FTransaction* Owner, UE::Transaction::DiffUtil::FDiffableObjectArchetypeCache& ArchetypeCache, TArrayView<const FProperty*> Properties)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "ContainsPieObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPieObject()"
  },
  {
    "label": "HasChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChanges()"
  },
  {
    "label": "HasExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExpired()"
  },
  {
    "label": "FReader()",
    "kind": "Method",
    "detail": "Function (class FReader : public UE::Transaction::FSerializedObjectDataReader { public :)",
    "insertText": "FReader(FTransaction* InOwner, const FSerializedObject& InSerializedObject, bool bWantBinarySerialization ) : UE::Transaction::FSerializedObjectDataReader(InSerializedObject) , Owner(InOwner)"
  },
  {
    "label": "SetWantBinaryPropertySerialization()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetWantBinaryPropertySerialization(bWantBinarySerialization)"
  },
  {
    "label": "SetIsTransacting()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsTransacting(true)"
  },
  {
    "label": "Preload()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Preload(UObject* InObject)"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (Record ->)",
    "insertText": "Restore(Owner)"
  },
  {
    "label": "FWriter()",
    "kind": "Method",
    "detail": "Function (} } } } } FTransaction* Owner ; } ; class FWriter : public UE::Transaction::FSerializedObjectDataWriter { public :)",
    "insertText": "FWriter(FSerializedObject& InSerializedObject, bool bWantBinarySerialization ) : UE::Transaction::FSerializedObjectDataWriter(InSerializedObject)"
  },
  {
    "label": "FObjectRecords()",
    "kind": "Method",
    "detail": "Function (} } ; } ; struct FObjectRecords {)",
    "insertText": "FObjectRecords()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FObjectRecords& ObjectRecords)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<ObjectRecords . SaveCount ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ObjectRecords . Records .)",
    "insertText": "Empty()"
  },
  {
    "label": "FPackageRecord()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } TArray<FObjectRecord*,TInlineAllocator<1>> Records ; int32 SaveCount = 0 ; } ; struct FPackageRecord {)",
    "insertText": "FPackageRecord()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackageRecord& PackageRecord)"
  },
  {
    "label": "FChangedObjectValue()",
    "kind": "Method",
    "detail": "Function (Ar<<PackageRecord . DirtyFenceCount ; Ar<<PackageRecord . bWasDirty ; return Ar ; } int32 DirtyFenceCount = 0 ; bool bWasDirty = false ; } ; TIndirectArray<FObjectRecord> Records ; TMap<UE::Transaction::FPersistentObjectRef,FObjectRecords> ObjectRecordsMap ; TMap<UE::Transaction::FPersistentObjectRef,FPackageRecord> PackageRecordMap ; FGuid Id ; FGuid OperationId ; FText Title ; FString Context ; UObject* PrimaryObject = nullptr ; bool bFlip = true ; int32 Inc = - 1 ; struct FChangedObjectValue {)",
    "insertText": "FChangedObjectValue()"
  },
  {
    "label": "FChangedObjectValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChangedObjectValue(const int32 InRecordIndex, const TSharedPtr<ITransactionObjectAnnotation>& InAnnotation, const TSharedPtr<ITransactionObjectAnnotation>& InAnnotationSnapshot = nullptr) : Annotation(InAnnotation) , AnnotationSnapshot(InAnnotationSnapshot) , RecordIndex(InRecordIndex)"
  },
  {
    "label": "FTransaction()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ITransactionObjectAnnotation> Annotation ; TSharedPtr<ITransactionObjectAnnotation> AnnotationSnapshot ; int32 RecordIndex = INDEX_NONE ; } ; TMap<UObject*,FChangedObjectValue> ChangedObjects ; public :)",
    "insertText": "FTransaction(const TCHAR* InContext=nullptr, const FText& InTitle=FText(), bool bInFlip=false ) : Id( FGuid::NewGuid() ) , Title( InTitle ) , Context( InContext ) , bFlip(bInFlip)"
  },
  {
    "label": "FTransaction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTransaction()"
  },
  {
    "label": "FTransaction()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FTransaction(const FTransaction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTransaction&)",
    "insertText": "operator(const FTransaction&)"
  },
  {
    "label": "SavePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePackage(UPackage* Package)"
  },
  {
    "label": "SaveObject()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SaveObject(UObject* Object)"
  },
  {
    "label": "SaveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveArray(UObject* Object, FScriptArray* Array, int32 Index, int32 Count, int32 Oper, int32 ElementSize, uint32 ElementAlignment, STRUCT_DC DefaultConstructor, STRUCT_AR Serializer, STRUCT_DTOR Destructor)"
  },
  {
    "label": "StoreUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreUndo(UObject* Object, TUniquePtr<FChange> UndoChange)"
  },
  {
    "label": "SetPrimaryObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryObject(UObject* InObject)"
  },
  {
    "label": "SnapshotObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapshotObject(UObject* InObject, TArrayView<const FProperty*> Properties)"
  },
  {
    "label": "ContainsObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsObject(const UObject* Object)"
  },
  {
    "label": "BeginOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginOperation()"
  },
  {
    "label": "EndOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOperation()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (FTransactionContext)",
    "insertText": "GetContext()"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTransient()"
  },
  {
    "label": "ContainsPieObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPieObjects()"
  },
  {
    "label": "GetTransactionType()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTransactionType()"
  },
  {
    "label": "DataSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "DataSize()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetId()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString ConcatenatedRecords ;)",
    "insertText": "for(const FObjectRecord& Record : Records)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ConcatenatedRecords + =)",
    "insertText": "TEXT(\"\\n\")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ConcatenatedRecords + = Record . CustomChange ->)",
    "insertText": "ToString()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } return ConcatenatedRecords .)",
    "insertText": "IsEmpty() ? GetTitle() : FText::FromString(ConcatenatedRecords)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FTransaction& T)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (FObjectRecords& ObjectRecords = T . ObjectRecordsMap .)",
    "insertText": "FindChecked(Record.Object)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectRecords . Records .)",
    "insertText": "Add(&Record)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, TSharedRef<FTransaction>& SharedT)"
  },
  {
    "label": "GetTransactionObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransactionObjects(TArray<UObject*>& Objects)"
  },
  {
    "label": "GetRecordCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRecordCount()"
  },
  {
    "label": "GetPrimaryObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetPrimaryObject()"
  },
  {
    "label": "DumpObjectMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpObjectMap(FOutputDevice& Ar)"
  },
  {
    "label": "GenerateDiff()",
    "kind": "Method",
    "detail": "Function (FTransactionDiff)",
    "insertText": "GenerateDiff()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FTransaction::FObjectRecord& R)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class FObjectRecord ; class FObjectRecord::FReader ; class FObjectRecord::FWriter ; } ;)",
    "insertText": "UCLASS(abstract, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UNREALED_API virtual int32 Begin( const TCHAR* SessionContext, const FText& Description ) PURE_VIRTUAL(UTransactor::Begin,return 0;)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "End() PURE_VIRTUAL(UTransactor::End,return 0;)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(int32 StartIndex = 0 ) PURE_VIRTUAL(UTransactor::Cancel,)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const FText& Reason ) PURE_VIRTUAL(UTransactor::Reset,)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive() PURE_VIRTUAL(UTransactor::IsActive,return false;)"
  },
  {
    "label": "CanUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUndo(FText* Text=nullptr ) PURE_VIRTUAL(UTransactor::CanUndo,return false;)"
  },
  {
    "label": "CanRedo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRedo(FText* Text=nullptr ) PURE_VIRTUAL(UTransactor::CanRedo,return false;)"
  },
  {
    "label": "GetQueueLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetQueueLength() const PURE_VIRTUAL(UTransactor::GetQueueLength,return 0;)"
  },
  {
    "label": "FindTransactionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindTransactionIndex(const FGuid& TransactionId ) const PURE_VIRTUAL(UTransactor::FindTransactionIndex, return INDEX_NONE;)"
  },
  {
    "label": "GetTransaction()",
    "kind": "Method",
    "detail": "Function (const FTransaction*)",
    "insertText": "GetTransaction(int32 QueueIndex ) const PURE_VIRTUAL(UTransactor::GetTransaction,return nullptr;)"
  },
  {
    "label": "GetUndoContext()",
    "kind": "Method",
    "detail": "Function (FTransactionContext)",
    "insertText": "GetUndoContext(bool bCheckWhetherUndoPossible = true ) PURE_VIRTUAL(UTransactor::GetUndoContext,return FTransactionContext();)"
  },
  {
    "label": "GetUndoSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetUndoSize() const PURE_VIRTUAL(UTransactor::GetUndoSize,return 0;)"
  },
  {
    "label": "GetUndoCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUndoCount() const PURE_VIRTUAL(UTransactor::GetUndoCount,return 0;)"
  },
  {
    "label": "GetRedoContext()",
    "kind": "Method",
    "detail": "Function (FTransactionContext)",
    "insertText": "GetRedoContext() PURE_VIRTUAL(UTransactor::GetRedoContext,return FTransactionContext();)"
  },
  {
    "label": "SetUndoBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUndoBarrier() PURE_VIRTUAL(UTransactor::SetUndoBarrier,)"
  },
  {
    "label": "RemoveUndoBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUndoBarrier() PURE_VIRTUAL(UTransactor::RemoveUndoBarrier,)"
  },
  {
    "label": "ClearUndoBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUndoBarriers() PURE_VIRTUAL(UTransactor::ClearUndoBarriers,)"
  },
  {
    "label": "GetCurrentUndoBarrier()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentUndoBarrier() const PURE_VIRTUAL(UTransactor::GetCurrentUndoBarrier(), { return INDEX_NONE; })"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Undo(bool bCanRedo = true) PURE_VIRTUAL(UTransactor::Undo,return false;)"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Redo() PURE_VIRTUAL(UTransactor::Redo,return false;)"
  },
  {
    "label": "EnableObjectSerialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableObjectSerialization()"
  },
  {
    "label": "IsObjectInTransactionBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInTransactionBuffer(const UObject* Object)"
  }
]