[
  {
    "label": "FAnimTimelineTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "UEditorAnimBaseObj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorAnimBaseObj"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FSnapType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapType"
  },
  {
    "label": "FSnapTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapTime"
  },
  {
    "label": "FAnimModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimatedRange . h \" # include \" Templates / SharedPointer . h \" # include \" ITimeSlider . h \" # include \" PersonaDelegates . h \" # include \" UObject / GCObject . h \" # include \" EditorObjectsTracker . h \" # include \" Containers / ArrayView . h \" class FAnimTimelineTrack ; enum class EViewRangeInterpolation ; class UAnimSequenceBase ; class IPersonaPreviewScene ; class IEditableSkeleton ; class FUICommandList ; class UEditorAnimBaseObj ; class FAnimModel : public TSharedFromThis<FAnimModel>,public FGCObject { public :)",
    "insertText": "FAnimModel(const TSharedRef<IPersonaPreviewScene>& InPreviewScene, const TSharedRef<IEditableSkeleton>& InEditableSkeleton, const TSharedRef<FUICommandList>& InCommandList)"
  },
  {
    "label": "FAnimModel()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FAnimModel()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetRootTracks()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return RootTracks ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } const TArray<TSharedRef<FAnimTimelineTrack>>&)",
    "insertText": "GetRootTracks()"
  },
  {
    "label": "GetAllRootTracks()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return RootTracks ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } const TArray<TSharedRef<FAnimTimelineTrack>>&)",
    "insertText": "GetAllRootTracks()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return RootTracks ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(TRange<double> InRange)"
  },
  {
    "label": "GetWorkingRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetWorkingRange()"
  },
  {
    "label": "GetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetPlaybackRange()"
  },
  {
    "label": "GetScrubPosition()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "GetScrubPosition()"
  },
  {
    "label": "GetScrubTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrubTime()"
  },
  {
    "label": "SetScrubPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubPosition(FFrameTime NewScrubPostion)"
  },
  {
    "label": "HandleViewRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewRangeChanged(TRange<double> InRange, EViewRangeInterpolation InInterpolation)"
  },
  {
    "label": "HandleWorkingRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWorkingRangeChanged(TRange<double> InRange)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FAnimModel, FOnTracksChanged) FOnTracksChanged& OnTracksChanged()"
  },
  {
    "label": "UpdateRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRange()"
  },
  {
    "label": "GetAnimSequenceBase()",
    "kind": "Method",
    "detail": "Function (UAnimSequenceBase*)",
    "insertText": "GetAnimSequenceBase()"
  },
  {
    "label": "GetAsset()",
    "kind": "Method",
    "detail": "Function (template<AssetType> AssetType*)",
    "insertText": "GetAsset()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "IsTrackSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTrackSelected(const TSharedRef<const FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "ClearTrackSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTrackSelection()"
  },
  {
    "label": "SetTrackSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackSelected(const TSharedRef<FAnimTimelineTrack>& InTrack, bool bIsSelected)"
  },
  {
    "label": "ShowInDetailsView()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ShowInDetailsView(UClass* EdClass)"
  },
  {
    "label": "SelectObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectObjects(const TArray<UObject*>& Objects)"
  },
  {
    "label": "ClearDetailsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDetailsView()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "RecalculateSequenceLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecalculateSequenceLength()"
  },
  {
    "label": "CalculateSequenceLengthOfEditorObject()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateSequenceLengthOfEditorObject()"
  },
  {
    "label": "InitDetailsViewEditorObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDetailsViewEditorObject(UEditorAnimBaseObj* EdObj)"
  },
  {
    "label": "GetEditableTimes()",
    "kind": "Method",
    "detail": "Function (} const TArray<double>&)",
    "insertText": "GetEditableTimes()"
  },
  {
    "label": "SetEditableTime()",
    "kind": "Method",
    "detail": "Function (EditableTimes = InTimes ; } void)",
    "insertText": "SetEditableTime(int32 TimeIndex, double Time, bool bIsDragging)"
  },
  {
    "label": "OnSetEditableTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetEditableTime(int32 TimeIndex, double Time, bool bIsDragging)"
  },
  {
    "label": "GetFrameRate()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "GetFrameRate()"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "Snap()",
    "kind": "Method",
    "detail": "Function (FOnObjectsSelected OnSelectObjects ; FOnInvokeTab OnInvokeTab ; bool)",
    "insertText": "Snap(float& InOutTime, float InSnapMargin, TArrayView<const FName> InSkippedSnapTypes)"
  },
  {
    "label": "Snap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Snap(double& InOutTime, double InSnapMargin, TArrayView<const FName> InSkippedSnapTypes)"
  },
  {
    "label": "ToggleSnap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSnap(FName InSnapName)"
  },
  {
    "label": "IsSnapChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnapChecked(FName InSnapName)"
  },
  {
    "label": "IsSnapAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnapAvailable(FName InSnapName)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "ForEachRootTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachRootTrack(TFunctionRef<void(FAnimTimelineTrack&)> InFunction)"
  },
  {
    "label": "AddRootTrack()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddRootTrack(TSharedRef<FAnimTimelineTrack> InTrack)"
  },
  {
    "label": "ClearRootTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRootTracks()"
  },
  {
    "label": "FSnapType()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<FAnimTimelineTrack>> SelectedTracks ; FAnimatedRange ViewRange ; FAnimatedRange WorkingRange ; FAnimatedRange PlaybackRange ; FOnTracksChanged OnTracksChangedDelegate ; FOnHandleObjectsSelected OnHandleObjectsSelectedDelegate ; TWeakPtr<IPersonaPreviewScene> WeakPreviewScene ; TWeakPtr<IEditableSkeleton> WeakEditableSkeleton ; TWeakPtr<FUICommandList> WeakCommandList ; FEditorObjectTracker EditorObjectTracker ; TArray<double> EditableTimes ; struct FSnapType {)",
    "insertText": "FSnapType(const FName& InType, const FText& InDisplayName, TFunction<double(const FAnimModel&, double)> InSnapFunction = nullptr) : Type(InType) , DisplayName(InDisplayName) , SnapFunction(InSnapFunction)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} FName Type ; FText DisplayName ; TFunction<)",
    "insertText": "double(const FAnimModel&, double)"
  },
  {
    "label": "FSnapTime()",
    "kind": "Method",
    "detail": "Function (const FSnapType Frames ; const FSnapType Notifies ; const FSnapType CompositeSegment ; const FSnapType MontageSection ; } ; struct FSnapTime {)",
    "insertText": "FSnapTime(const FName& InType, double InTime) : Type(InType) , Time(InTime)"
  }
]