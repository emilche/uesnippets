[
  {
    "label": "PSetIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PSetIterator"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "defusechain_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "defusechain_iterator"
  },
  {
    "label": "defusechain_instr_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "defusechain_instr_iterator"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEREGISTERINFO_H # define LLVM_CODEGEN_MACHINEREGISTERINFO_H # include \" llvm / ADT / BitVector . h \" # include \" llvm / ADT / IndexedMap . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / CodeGen / MachineInstrBundle . h \" # include \" llvm / Target / TargetRegisterInfo . h \" # include \" llvm / Target / TargetSubtargetInfo . h \" # include<vector> namespace llvm { class PSetIterator ; class MachineRegisterInfo { public : class Delegate { void)",
    "insertText": "anchor()"
  },
  {
    "label": "MRI_NoteNewVirtualRegister()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "MRI_NoteNewVirtualRegister(unsigned Reg)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Delegate()"
  },
  {
    "label": "getRegUseDefListHead()",
    "kind": "Method",
    "detail": "Function (} } ; private : const MachineFunction* MF ; Delegate* TheDelegate ; bool IsSSA ; bool TracksLiveness ; bool TracksSubRegLiveness ; IndexedMap<std::pair<const TargetRegisterClass*,MachineOperand*>,VirtReg2IndexFunctor> VRegInfo ; IndexedMap<std::pair<unsigned,unsigned>,VirtReg2IndexFunctor> RegAllocHints ; std::vector<MachineOperand*> PhysRegUseDefLists ; MachineOperand*&)",
    "insertText": "getRegUseDefListHead(unsigned RegNo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MO && MO->isReg() && \"This is not a register operand!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MachineRegisterInfo&)"
  },
  {
    "label": "MachineRegisterInfo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MachineRegisterInfo(const MachineFunction *MF)"
  },
  {
    "label": "getTargetRegisterInfo()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterInfo*)",
    "insertText": "getTargetRegisterInfo()"
  },
  {
    "label": "resetDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resetDelegate(Delegate *delegate)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TheDelegate == delegate && \"Only the current delegate can perform reset!\")"
  },
  {
    "label": "setDelegate()",
    "kind": "Method",
    "detail": "Function (TheDelegate = nullptr ; } void)",
    "insertText": "setDelegate(Delegate *delegate)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(delegate && !TheDelegate && \"Attempted to set delegate to null, or to change it without \" \"first resetting it!\")"
  },
  {
    "label": "isSSA()",
    "kind": "Method",
    "detail": "Function (TheDelegate = delegate ; } bool)",
    "insertText": "isSSA()"
  },
  {
    "label": "tracksLiveness()",
    "kind": "Method",
    "detail": "Function (IsSSA = false ; } bool)",
    "insertText": "tracksLiveness()"
  },
  {
    "label": "shouldTrackSubRegLiveness()",
    "kind": "Method",
    "detail": "Function (TracksLiveness = false ; } bool)",
    "insertText": "shouldTrackSubRegLiveness(const TargetRegisterClass &RC)"
  },
  {
    "label": "shouldTrackSubRegLiveness()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "shouldTrackSubRegLiveness(unsigned VReg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TargetRegisterInfo::isVirtualRegister(VReg) && \"Must pass a VReg\")"
  },
  {
    "label": "subRegLivenessEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "subRegLivenessEnabled()"
  },
  {
    "label": "addRegOperandToUseList()",
    "kind": "Method",
    "detail": "Function (TracksSubRegLiveness = Enable ; } void)",
    "insertText": "addRegOperandToUseList(MachineOperand *MO)"
  },
  {
    "label": "removeRegOperandFromUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeRegOperandFromUseList(MachineOperand *MO)"
  },
  {
    "label": "moveOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveOperands(MachineOperand *Dst, MachineOperand *Src, unsigned NumOps)"
  },
  {
    "label": "verifyUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyUseList(unsigned Reg)"
  },
  {
    "label": "verifyUseLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyUseLists()"
  },
  {
    "label": "reg_begin()",
    "kind": "Method",
    "detail": "Function (template<bool Uses,bool Defs,bool SkipDebug,bool ByOperand,bool ByInstr,bool ByBundle> class defusechain_iterator ; template<bool Uses,bool Defs,bool SkipDebug,bool ByOperand,bool ByInstr,bool ByBundle> class defusechain_instr_iterator ; template<bool,bool,bool,bool,bool,bool> class defusechain_iterator ; template<bool,bool,bool,bool,bool,bool> class defusechain_instr_iterator ; typedef defusechain_iterator<true,true,false,true,false,false> reg_iterator ; reg_iterator)",
    "insertText": "reg_begin(unsigned RegNo)"
  },
  {
    "label": "reg_end()",
    "kind": "Method",
    "detail": "Function (} reg_iterator)",
    "insertText": "reg_end()"
  },
  {
    "label": "reg_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_iterator>)",
    "insertText": "reg_operands(unsigned Reg)"
  },
  {
    "label": "reg_instr_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,true,false,false,true,false> reg_instr_iterator ; reg_instr_iterator)",
    "insertText": "reg_instr_begin(unsigned RegNo)"
  },
  {
    "label": "reg_instr_end()",
    "kind": "Method",
    "detail": "Function (} reg_instr_iterator)",
    "insertText": "reg_instr_end()"
  },
  {
    "label": "reg_instructions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_instr_iterator>)",
    "insertText": "reg_instructions(unsigned Reg)"
  },
  {
    "label": "reg_bundle_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,true,false,false,false,true> reg_bundle_iterator ; reg_bundle_iterator)",
    "insertText": "reg_bundle_begin(unsigned RegNo)"
  },
  {
    "label": "reg_bundle_end()",
    "kind": "Method",
    "detail": "Function (} reg_bundle_iterator)",
    "insertText": "reg_bundle_end()"
  },
  {
    "label": "reg_bundles()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_bundle_iterator>)",
    "insertText": "reg_bundles(unsigned Reg)"
  },
  {
    "label": "reg_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "reg_empty(unsigned RegNo)"
  },
  {
    "label": "reg_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_iterator<true,true,true,true,false,false> reg_nodbg_iterator ; reg_nodbg_iterator)",
    "insertText": "reg_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "reg_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} reg_nodbg_iterator)",
    "insertText": "reg_nodbg_end()"
  },
  {
    "label": "reg_nodbg_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_nodbg_iterator>)",
    "insertText": "reg_nodbg_operands(unsigned Reg)"
  },
  {
    "label": "reg_instr_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,true,true,false,true,false> reg_instr_nodbg_iterator ; reg_instr_nodbg_iterator)",
    "insertText": "reg_instr_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "reg_instr_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} reg_instr_nodbg_iterator)",
    "insertText": "reg_instr_nodbg_end()"
  },
  {
    "label": "reg_nodbg_instructions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_instr_nodbg_iterator>)",
    "insertText": "reg_nodbg_instructions(unsigned Reg)"
  },
  {
    "label": "reg_bundle_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,true,true,false,false,true> reg_bundle_nodbg_iterator ; reg_bundle_nodbg_iterator)",
    "insertText": "reg_bundle_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "reg_bundle_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} reg_bundle_nodbg_iterator)",
    "insertText": "reg_bundle_nodbg_end()"
  },
  {
    "label": "reg_nodbg_bundles()",
    "kind": "Method",
    "detail": "Function (} iterator_range<reg_bundle_nodbg_iterator>)",
    "insertText": "reg_nodbg_bundles(unsigned Reg)"
  },
  {
    "label": "reg_nodbg_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "reg_nodbg_empty(unsigned RegNo)"
  },
  {
    "label": "def_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_iterator<false,true,false,true,false,false> def_iterator ; def_iterator)",
    "insertText": "def_begin(unsigned RegNo)"
  },
  {
    "label": "def_end()",
    "kind": "Method",
    "detail": "Function (} def_iterator)",
    "insertText": "def_end()"
  },
  {
    "label": "def_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<def_iterator>)",
    "insertText": "def_operands(unsigned Reg)"
  },
  {
    "label": "def_instr_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<false,true,false,false,true,false> def_instr_iterator ; def_instr_iterator)",
    "insertText": "def_instr_begin(unsigned RegNo)"
  },
  {
    "label": "def_instr_end()",
    "kind": "Method",
    "detail": "Function (} def_instr_iterator)",
    "insertText": "def_instr_end()"
  },
  {
    "label": "def_instructions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<def_instr_iterator>)",
    "insertText": "def_instructions(unsigned Reg)"
  },
  {
    "label": "def_bundle_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<false,true,false,false,false,true> def_bundle_iterator ; def_bundle_iterator)",
    "insertText": "def_bundle_begin(unsigned RegNo)"
  },
  {
    "label": "def_bundle_end()",
    "kind": "Method",
    "detail": "Function (} def_bundle_iterator)",
    "insertText": "def_bundle_end()"
  },
  {
    "label": "def_bundles()",
    "kind": "Method",
    "detail": "Function (} iterator_range<def_bundle_iterator>)",
    "insertText": "def_bundles(unsigned Reg)"
  },
  {
    "label": "def_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "def_empty(unsigned RegNo)"
  },
  {
    "label": "hasOneDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOneDef(unsigned RegNo)"
  },
  {
    "label": "def_begin()",
    "kind": "Method",
    "detail": "Function (def_iterator DI =)",
    "insertText": "def_begin(RegNo)"
  },
  {
    "label": "use_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_iterator<true,false,false,true,false,false> use_iterator ; use_iterator)",
    "insertText": "use_begin(unsigned RegNo)"
  },
  {
    "label": "use_end()",
    "kind": "Method",
    "detail": "Function (} use_iterator)",
    "insertText": "use_end()"
  },
  {
    "label": "use_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_iterator>)",
    "insertText": "use_operands(unsigned Reg)"
  },
  {
    "label": "use_instr_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,false,false,false,true,false> use_instr_iterator ; use_instr_iterator)",
    "insertText": "use_instr_begin(unsigned RegNo)"
  },
  {
    "label": "use_instr_end()",
    "kind": "Method",
    "detail": "Function (} use_instr_iterator)",
    "insertText": "use_instr_end()"
  },
  {
    "label": "use_instructions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_instr_iterator>)",
    "insertText": "use_instructions(unsigned Reg)"
  },
  {
    "label": "use_bundle_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,false,false,false,false,true> use_bundle_iterator ; use_bundle_iterator)",
    "insertText": "use_bundle_begin(unsigned RegNo)"
  },
  {
    "label": "use_bundle_end()",
    "kind": "Method",
    "detail": "Function (} use_bundle_iterator)",
    "insertText": "use_bundle_end()"
  },
  {
    "label": "use_bundles()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_bundle_iterator>)",
    "insertText": "use_bundles(unsigned Reg)"
  },
  {
    "label": "use_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "use_empty(unsigned RegNo)"
  },
  {
    "label": "hasOneUse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOneUse(unsigned RegNo)"
  },
  {
    "label": "use_begin()",
    "kind": "Method",
    "detail": "Function (use_iterator UI =)",
    "insertText": "use_begin(RegNo)"
  },
  {
    "label": "use_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_iterator<true,false,true,true,false,false> use_nodbg_iterator ; use_nodbg_iterator)",
    "insertText": "use_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "use_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} use_nodbg_iterator)",
    "insertText": "use_nodbg_end()"
  },
  {
    "label": "use_nodbg_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_nodbg_iterator>)",
    "insertText": "use_nodbg_operands(unsigned Reg)"
  },
  {
    "label": "use_instr_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,false,true,false,true,false> use_instr_nodbg_iterator ; use_instr_nodbg_iterator)",
    "insertText": "use_instr_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "use_instr_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} use_instr_nodbg_iterator)",
    "insertText": "use_instr_nodbg_end()"
  },
  {
    "label": "use_nodbg_instructions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_instr_nodbg_iterator>)",
    "insertText": "use_nodbg_instructions(unsigned Reg)"
  },
  {
    "label": "use_bundle_nodbg_begin()",
    "kind": "Method",
    "detail": "Function (} typedef defusechain_instr_iterator<true,false,true,false,false,true> use_bundle_nodbg_iterator ; use_bundle_nodbg_iterator)",
    "insertText": "use_bundle_nodbg_begin(unsigned RegNo)"
  },
  {
    "label": "use_bundle_nodbg_end()",
    "kind": "Method",
    "detail": "Function (} use_bundle_nodbg_iterator)",
    "insertText": "use_bundle_nodbg_end()"
  },
  {
    "label": "use_nodbg_bundles()",
    "kind": "Method",
    "detail": "Function (} iterator_range<use_bundle_nodbg_iterator>)",
    "insertText": "use_nodbg_bundles(unsigned Reg)"
  },
  {
    "label": "use_nodbg_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "use_nodbg_empty(unsigned RegNo)"
  },
  {
    "label": "hasOneNonDBGUse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOneNonDBGUse(unsigned RegNo)"
  },
  {
    "label": "replaceRegWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceRegWith(unsigned FromReg, unsigned ToReg)"
  },
  {
    "label": "getVRegDef()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "getVRegDef(unsigned Reg)"
  },
  {
    "label": "getUniqueVRegDef()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "getUniqueVRegDef(unsigned Reg)"
  },
  {
    "label": "clearKillFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearKillFlags(unsigned Reg)"
  },
  {
    "label": "dumpUses()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG void)",
    "insertText": "dumpUses(unsigned RegNo)"
  },
  {
    "label": "isConstantPhysReg()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "isConstantPhysReg(unsigned PhysReg, const MachineFunction &MF)"
  },
  {
    "label": "getPressureSets()",
    "kind": "Method",
    "detail": "Function (PSetIterator)",
    "insertText": "getPressureSets(unsigned RegUnit)"
  },
  {
    "label": "getRegClass()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "getRegClass(unsigned Reg)"
  },
  {
    "label": "constrainRegClass()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "constrainRegClass(unsigned Reg, const TargetRegisterClass *RC, unsigned MinNumRegs = 0)"
  },
  {
    "label": "recomputeRegClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "recomputeRegClass(unsigned Reg)"
  },
  {
    "label": "createVirtualRegister()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "createVirtualRegister(const TargetRegisterClass *RegClass)"
  },
  {
    "label": "getNumVirtRegs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumVirtRegs()"
  },
  {
    "label": "clearVirtRegs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearVirtRegs()"
  },
  {
    "label": "setRegAllocationHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRegAllocationHint(unsigned VReg, unsigned Type, unsigned PrefReg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TargetRegisterInfo::isVirtualRegister(VReg))"
  },
  {
    "label": "getRegAllocationHint()",
    "kind": "Method",
    "detail": "Function (RegAllocHints [ VReg ] . first = Type ; RegAllocHints [ VReg ] . second = PrefReg ; } std::pair<unsigned,unsigned>)",
    "insertText": "getRegAllocationHint(unsigned VReg)"
  },
  {
    "label": "getRegAllocationHint()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,unsigned> Hint =)",
    "insertText": "getRegAllocationHint(VReg)"
  },
  {
    "label": "isPhysRegModified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPhysRegModified(unsigned PhysReg)"
  },
  {
    "label": "isPhysRegUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPhysRegUsed(unsigned Reg)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (UsedRegUnits .)",
    "insertText": "set(RegUnit)"
  },
  {
    "label": "setPhysRegUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPhysRegUsed(unsigned Reg)"
  },
  {
    "label": "addPhysRegsUsedFromRegMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addPhysRegsUsedFromRegMask(const uint32_t *RegMask)"
  },
  {
    "label": "setBitsNotInMask()",
    "kind": "Method",
    "detail": "Function (UsedPhysRegMask .)",
    "insertText": "setBitsNotInMask(RegMask)"
  },
  {
    "label": "setPhysRegUnused()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPhysRegUnused(unsigned Reg)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (UsedPhysRegMask .)",
    "insertText": "reset(Reg)"
  },
  {
    "label": "freezeReservedRegs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "freezeReservedRegs(const MachineFunction&)"
  },
  {
    "label": "reservedRegsFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "reservedRegsFrozen()"
  },
  {
    "label": "canReserveReg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canReserveReg(unsigned PhysReg)"
  },
  {
    "label": "getReservedRegs()",
    "kind": "Method",
    "detail": "Function (} const BitVector&)",
    "insertText": "getReservedRegs()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(reservedRegsFrozen() && \"Reserved registers haven't been frozen yet. \" \"Use TRI::getReservedRegs().\")"
  },
  {
    "label": "isAllocatable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAllocatable(unsigned PhysReg)"
  },
  {
    "label": "addLiveIn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addLiveIn(unsigned Reg, unsigned vreg = 0)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LiveIns .)",
    "insertText": "push_back(std::make_pair(Reg, vreg))"
  },
  {
    "label": "livein_begin()",
    "kind": "Method",
    "detail": "Function (} typedef std::vector<std::pair<unsigned,unsigned>>::const_iterator livein_iterator ; livein_iterator)",
    "insertText": "livein_begin()"
  },
  {
    "label": "livein_end()",
    "kind": "Method",
    "detail": "Function (} livein_iterator)",
    "insertText": "livein_end()"
  },
  {
    "label": "livein_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "livein_empty()"
  },
  {
    "label": "isLiveIn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiveIn(unsigned Reg)"
  },
  {
    "label": "getLiveInPhysReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getLiveInPhysReg(unsigned VReg)"
  },
  {
    "label": "getLiveInVirtReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getLiveInVirtReg(unsigned PReg)"
  },
  {
    "label": "EmitLiveInCopies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLiveInCopies(MachineBasicBlock *EntryMBB, const TargetRegisterInfo &TRI, const TargetInstrInfo &TII)"
  },
  {
    "label": "getMaxLaneMaskForVReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getMaxLaneMaskForVReg(unsigned Reg)"
  },
  {
    "label": "defusechain_iterator()",
    "kind": "Method",
    "detail": "Function (template<bool ReturnUses,bool ReturnDefs,bool SkipDebug,bool ByOperand,bool ByInstr,bool ByBundle> class defusechain_iterator { public : using iterator_category = std::forward_iterator_tag ; using value_type = MachineInstr ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; private : MachineOperand* Op ;)",
    "insertText": "defusechain_iterator(MachineOperand *op) : Op(op)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (} } class MachineRegisterInfo ; void)",
    "insertText": "advance()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Op && \"Cannot increment end iterator!\")"
  },
  {
    "label": "getNextOperandForReg()",
    "kind": "Method",
    "detail": "Function (Op =)",
    "insertText": "getNextOperandForReg(Op)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "while(Op && ((!ReturnDefs && Op->isDef()) || (SkipDebug && Op->isDebug()))) Op = getNextOperandForReg(Op)"
  },
  {
    "label": "defusechain_iterator()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "defusechain_iterator() : Op(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const defusechain_iterator &x)"
  },
  {
    "label": "atEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "atEnd()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (MachineInstr* P = Op ->)",
    "insertText": "getParent()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(Op && Op->getParent() == P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ByBundle)"
  },
  {
    "label": "getBundleStart()",
    "kind": "Method",
    "detail": "Function (MachineInstr* P =)",
    "insertText": "getBundleStart(Op->getParent())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(Op && getBundleStart(Op->getParent()) == P)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } defusechain_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "getOperandNo()",
    "kind": "Method",
    "detail": "Function (defusechain_iterator tmp =* this ; + +* this ; return tmp ; } unsigned)",
    "insertText": "getOperandNo()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Op && \"Cannot dereference end iterator!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MachineOperand&)",
    "insertText": "operator()"
  },
  {
    "label": "defusechain_instr_iterator()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "defusechain_instr_iterator() : Op(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const defusechain_instr_iterator &x)"
  },
  {
    "label": "PSetIterator()",
    "kind": "Method",
    "detail": "Function (} } ; } ; class PSetIterator { const int* PSet ; unsigned Weight ; public :)",
    "insertText": "PSetIterator(): PSet(nullptr), Weight(0)"
  },
  {
    "label": "PSetIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSetIterator(unsigned RegUnit, const MachineRegisterInfo *MRI)"
  },
  {
    "label": "getRegClass()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass* RC = MRI ->)",
    "insertText": "getRegClass(RegUnit)"
  },
  {
    "label": "getRegClassPressureSets()",
    "kind": "Method",
    "detail": "Function (PSet = TRI ->)",
    "insertText": "getRegClassPressureSets(RC)"
  },
  {
    "label": "getRegClassWeight()",
    "kind": "Method",
    "detail": "Function (Weight = TRI ->)",
    "insertText": "getRegClassWeight(RC)"
  },
  {
    "label": "getRegUnitPressureSets()",
    "kind": "Method",
    "detail": "Function (} else { PSet = TRI ->)",
    "insertText": "getRegUnitPressureSets(RegUnit)"
  },
  {
    "label": "getRegUnitWeight()",
    "kind": "Method",
    "detail": "Function (Weight = TRI ->)",
    "insertText": "getRegUnitWeight(RegUnit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(*PSet == -1)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValid() && \"Invalid PSetIterator.\")"
  }
]