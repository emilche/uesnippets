[
  {
    "label": "FZenaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenaphore"
  },
  {
    "label": "FZenaphoreWaiterNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenaphoreWaiterNode"
  },
  {
    "label": "FZenaphoreWaiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenaphoreWaiter"
  },
  {
    "label": "FZenaphoreWaiter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FZenaphore ; struct FZenaphoreWaiterNode { FZenaphoreWaiterNode* Next = nullptr ; bool bTriggered = false ; } ; class FZenaphoreWaiter { public :)",
    "insertText": "FZenaphoreWaiter(FZenaphore& Outer, const TCHAR* WaitCpuScopeName) : Outer(Outer)"
  },
  {
    "label": "FZenaphoreWaiter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FZenaphoreWaiter()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitInternal()",
    "kind": "Method",
    "detail": "Function (private : class FZenaphore ; void)",
    "insertText": "WaitInternal()"
  },
  {
    "label": "FZenaphore()",
    "kind": "Method",
    "detail": "Function (FZenaphore& Outer ; FZenaphoreWaiterNode WaiterNode ; int32 SpinCount = 0 ; } ; class FZenaphore { public :)",
    "insertText": "FZenaphore()"
  },
  {
    "label": "NotifyOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyOne()"
  },
  {
    "label": "NotifyAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAll()"
  },
  {
    "label": "NotifyInternal()",
    "kind": "Method",
    "detail": "Function (private : class FZenaphoreWaiter ; void)",
    "insertText": "NotifyInternal(FZenaphoreWaiterNode* Waiter)"
  }
]