[
  {
    "label": "AVREditorDockableWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorDockableWindow"
  },
  {
    "label": "AVREditorFloatingUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorFloatingUI"
  },
  {
    "label": "FProxyTabmanager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProxyTabmanager"
  },
  {
    "label": "FTabId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabId"
  },
  {
    "label": "SColorPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorPicker"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "FMultiBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBox"
  },
  {
    "label": "SMultiBoxWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiBoxWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UVREditorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorInteractor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "UVREditorWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorWidgetComponent"
  },
  {
    "label": "UWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetComponent"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVRButton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVRButton"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "AVREditorRadialFloatingUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorRadialFloatingUI"
  },
  {
    "label": "FVREditorFloatingUICreationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVREditorFloatingUICreationContext"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Widgets / SOverlay . h \" # include \" UI / VRRadialMenuHandler . h \" # include \" EditorWorldExtension . h \" # include \" VREditorUISystem . generated . h \" class AVREditorDockableWindow ; class AVREditorFloatingUI ; class FProxyTabmanager ; struct FTabId ; class SColorPicker ; class SBorder ; class SButton ; class FMultiBox ; class SMultiBoxWidget ; class SWidget ; class UViewportInteractor ; class UVREditorInteractor ; class FMenuBuilder ; class FUICommandList ; class UVREditorWidgetComponent ; class UWidgetComponent ; class FName ; typedef FName FEditorModeID ; typedef FName VREditorPanelID ; enum class EAssetEditorCloseReason : uint8 ; enum class EVREditorAnimationState : uint8 { None,Forward,Backward } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FVRButton()",
    "kind": "Method",
    "detail": "Function (EVREditorAnimationState AnimationDirection ; FVector OriginalRelativeScale ; float CurrentScale ; float MinScale ; float MaxScale ; float ScaleRate ;)",
    "insertText": "FVRButton() : ButtonWidget(nullptr), AnimationDirection(EVREditorAnimationState::None), OriginalRelativeScale(FVector::ZeroVector), CurrentScale(1.0f), MinScale(1.0f), MaxScale(1.10f), ScaleRate(2.0f)"
  },
  {
    "label": "FVRButton()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVRButton(class UVREditorWidgetComponent* InButtonWidget, FVector InOriginalScale, EVREditorAnimationState InAnimationDirection = EVREditorAnimationState::None, float InCurrentScale = 1.0f, float InMinScale = 1.0f, float InMaxScale = 1.25f, float InScaleRate = 2.0f) : ButtonWidget(InButtonWidget), AnimationDirection(InAnimationDirection), OriginalRelativeScale(InOriginalScale), CurrentScale(InCurrentScale), MinScale(InMinScale), MaxScale(InMaxScale), ScaleRate(InScaleRate)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UVREditorUISystem()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(class UVREditorMode* InVRMode)"
  },
  {
    "label": "UpdateInteractors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInteractors()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(class FEditorViewportClient* ViewportClient, const float DeltaTime)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const class FSceneView* SceneView, class FViewport* Viewport, class FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (class UVREditorMode&)",
    "insertText": "GetOwner()"
  },
  {
    "label": "ShowEditorUIPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowEditorUIPanel(const UWidgetComponent* WidgetComponent, UVREditorInteractor* Interactor, const bool bShouldShow, const bool bSpawnInFront = false, const bool bDragFromOpen = false, const bool bPlaySound = true)"
  },
  {
    "label": "ShowEditorUIPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowEditorUIPanel(const VREditorPanelID& InPanelID, UVREditorInteractor* Interactor, const bool bShouldShow, const bool bSpawnInFront = false, const bool bDragFromOpen = false, const bool bPlaySound = true)"
  },
  {
    "label": "ShowEditorUIPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowEditorUIPanel(AVREditorFloatingUI* Panel, UVREditorInteractor* Interactor, const bool bShouldShow, const bool bSpawnInFront = false, const bool bDragFromOpen = false, const bool bPlaySound = true)"
  },
  {
    "label": "IsShowingRadialMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingRadialMenu(const UVREditorInteractor* Interactor)"
  },
  {
    "label": "TryToSpawnRadialMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToSpawnRadialMenu(UVREditorInteractor* Interactor, const bool bForceRefresh, const bool bPlaySound = true)"
  },
  {
    "label": "HideRadialMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideRadialMenu(const bool bPlaySound = true, const bool bAllowFading = true)"
  },
  {
    "label": "StartDraggingDockUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDraggingDockUI(class AVREditorDockableWindow* InitDraggingDockUI, UVREditorInteractor* Interactor, const float DockSelectDistance, const bool bPlaySound = true)"
  },
  {
    "label": "MakeDockableUITransformOnLaser()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeDockableUITransformOnLaser(AVREditorDockableWindow* InitDraggingDockUI, UVREditorInteractor* Interactor, const float DockSelectDistance)"
  },
  {
    "label": "MakeDockableUITransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeDockableUITransform(AVREditorDockableWindow* InitDraggingDockUI, UVREditorInteractor* Interactor, const float DockSelectDistance)"
  },
  {
    "label": "GetDraggingDockUI()",
    "kind": "Method",
    "detail": "Function (class AVREditorDockableWindow*)",
    "insertText": "GetDraggingDockUI()"
  },
  {
    "label": "StopDraggingDockUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDraggingDockUI(UVREditorInteractor* VREditorInteractor, const bool bPlaySound = true)"
  },
  {
    "label": "IsDraggingDockUI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDraggingDockUI()"
  },
  {
    "label": "IsInteractorDraggingDockUI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractorDraggingDockUI(const UVREditorInteractor* Interactor)"
  },
  {
    "label": "IsDraggingPanelFromOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDraggingPanelFromOpen()"
  },
  {
    "label": "TogglePanelsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePanelsVisibility()"
  },
  {
    "label": "GetMaxDockWindowSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDockWindowSize()"
  },
  {
    "label": "GetMinDockWindowSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinDockWindowSize()"
  },
  {
    "label": "TogglePanelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePanelVisibility(const VREditorPanelID& InPanelID)"
  },
  {
    "label": "GetRadialMenuFloatingUI()",
    "kind": "Method",
    "detail": "Function (class AVREditorRadialFloatingUI*)",
    "insertText": "GetRadialMenuFloatingUI()"
  },
  {
    "label": "FindWidgetOfType()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SWidget>&)",
    "insertText": "FindWidgetOfType(const TSharedRef<SWidget>& Content, FName WidgetType)"
  },
  {
    "label": "FindAllWidgetsOfType()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "FindAllWidgetsOfType(TArray<TSharedRef<SWidget>>& FoundWidgets, const TSharedRef<SWidget>& Content, FName WidgetType)"
  },
  {
    "label": "UpdateSequencerUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSequencerUI()"
  },
  {
    "label": "UpdateActorPreviewUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorPreviewUI(TSharedRef<SWidget> InWidget, int32 Index, AActor *InActor)"
  },
  {
    "label": "UpdateDetachedActorPreviewUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDetachedActorPreviewUI(TSharedRef<SWidget> InWidget, int32 Index)"
  },
  {
    "label": "UpdateExternalUMGUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalUMGUI(const struct FVREditorFloatingUICreationContext& CreationContext)"
  },
  {
    "label": "UpdateExternalSlateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExternalSlateUI(TSharedRef<SWidget> InWidget, FName Name, FVector2D InSize)"
  },
  {
    "label": "TransitionWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionWorld(UWorld* NewWorld, EEditorWorldExtensionTransitionState TransitionState)"
  },
  {
    "label": "GetRadialMenuHandler()",
    "kind": "Method",
    "detail": "Function (UVRRadialMenuHandler*)",
    "insertText": "GetRadialMenuHandler()"
  },
  {
    "label": "OnHoverEndEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHoverEndEffect(UVREditorWidgetComponent* Button)"
  },
  {
    "label": "SequencerOpenendFromRadialMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequencerOpenendFromRadialMenu(const bool bInOpenedFromRadialMenu = true)"
  },
  {
    "label": "CanScalePanel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanScalePanel()"
  },
  {
    "label": "GetUIInteractor()",
    "kind": "Method",
    "detail": "Function (class UVREditorInteractor*)",
    "insertText": "GetUIInteractor()"
  },
  {
    "label": "GetPanel()",
    "kind": "Method",
    "detail": "Function (const VREditorPanelID ContentBrowserPanelID ; const VREditorPanelID WorldOutlinerPanelID ; const VREditorPanelID DetailsPanelID ; const VREditorPanelID ModesPanelID ; const VREditorPanelID TutorialPanelID ; const VREditorPanelID WorldSettingsPanelID ; const VREditorPanelID ColorPickerPanelID ; const VREditorPanelID SequencerPanelID ; const VREditorPanelID InfoDisplayPanelID ; const VREditorPanelID RadialMenuPanelID ; const VREditorPanelID TabManagerPanelID ; AVREditorFloatingUI*)",
    "insertText": "GetPanel(const VREditorPanelID& InPanelID)"
  },
  {
    "label": "OnPreviewInputAction()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPreviewInputAction(class FEditorViewportClient& ViewportClient, UViewportInteractor* Interactor, const struct FViewportActionKeyInput& Action, bool& bOutIsInputCaptured, bool& bWasHandled)"
  },
  {
    "label": "OnVRAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVRAction(class FEditorViewportClient& ViewportClient, UViewportInteractor* Interactor, const struct FViewportActionKeyInput& Action, bool& bOutIsInputCaptured, bool& bWasHandled)"
  },
  {
    "label": "OnVRHoverUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVRHoverUpdate(UViewportInteractor* Interactor, FVector& HoverImpactPoint, bool& bWasHandled)"
  },
  {
    "label": "CreateUIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUIs()"
  },
  {
    "label": "IsProxyTabSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsProxyTabSupported(FTabId TabId, bool& bOutIsTabSupported)"
  },
  {
    "label": "OnProxyTabLaunched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProxyTabLaunched(TSharedPtr<SDockTab> NewTab)"
  },
  {
    "label": "OnAttentionDrawnToTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttentionDrawnToTab(TSharedPtr<SDockTab> NewTab)"
  },
  {
    "label": "ShowAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAssetEditor()"
  },
  {
    "label": "OnAssetEditorOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetEditorOpened(UObject* Asset)"
  },
  {
    "label": "DockableAreaRestored()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DockableAreaRestored()"
  },
  {
    "label": "CreateVRColorPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVRColorPicker(const TSharedRef<SColorPicker>& ColorPicker)"
  },
  {
    "label": "DestroyVRColorPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVRColorPicker()"
  },
  {
    "label": "MakeUniformGridMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUniformGridMenu(const TSharedRef<FMultiBox>& MultiBox, const TSharedRef<SMultiBoxWidget>& MultiBoxWidget, int32 Columns)"
  },
  {
    "label": "MakeRadialBoxMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRadialBoxMenu(const TSharedRef<FMultiBox>& MultiBox, const TSharedRef<SMultiBoxWidget>& MultiBoxWidget, float RadiusRatioOverride, FName ButtonTypeOverride)"
  },
  {
    "label": "AddHoverableButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "AddHoverableButton(TSharedRef<SWidget>& BlockWidget, FName ButtonType, TSharedRef<SOverlay>& TestOverlay)"
  },
  {
    "label": "SetButtonFormatting()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "SetButtonFormatting(TSharedRef<SWidget>& BlockWidget, float WrapSize)"
  },
  {
    "label": "BuildRadialMenuWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRadialMenuWidget()"
  },
  {
    "label": "BuildNumPadWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNumPadWidget()"
  },
  {
    "label": "SwapRadialMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapRadialMenu()"
  },
  {
    "label": "HandleEditorModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEditorModeChanged(const FEditorModeID& EditorModeID, bool IsEnabled)"
  },
  {
    "label": "ResetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAll()"
  },
  {
    "label": "CheckForVRDragDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForVRDragDrop()"
  },
  {
    "label": "ShouldPreviewPanel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPreviewPanel()"
  },
  {
    "label": "ToggledDebugMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggledDebugMode(bool bDebugModeEnabled)"
  },
  {
    "label": "OnCloseAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseAssetEditor(UObject* Asset, EAssetEditorCloseReason CloseReason)"
  }
]