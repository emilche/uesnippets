[
  {
    "label": "AudioCodecPairId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioCodecPairId"
  },
  {
    "label": "AudioCodecPairId()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_AUDIO_CODEC_PAIR_ID_H_ # define API_AUDIO_CODECS_AUDIO_CODEC_PAIR_ID_H_ # include<stdint . h> # include<utility> namespace webrtc { class AudioCodecPairId final { public :)",
    "insertText": "AudioCodecPairId()"
  },
  {
    "label": "AudioCodecPairId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioCodecPairId(const AudioCodecPairId&)"
  },
  {
    "label": "AudioCodecPairId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioCodecPairId(AudioCodecPairId&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioCodecPairId&)",
    "insertText": "operator(const AudioCodecPairId&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioCodecPairId&)",
    "insertText": "operator(AudioCodecPairId&&)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(AudioCodecPairId& a, AudioCodecPairId& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(a.id_, b.id_)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} AudioCodecPairId)",
    "insertText": "Create()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(AudioCodecPairId a, AudioCodecPairId b)"
  }
]