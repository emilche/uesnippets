[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FMallocDebug",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocDebug"
  },
  {
    "label": "FMemDebug",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemDebug"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / AlignmentTemplates . h \" # include \" CoreGlobals . h \" class FOutputDevice ; class FMallocDebug : public FMalloc { enum { MEM_PreTag = 0 xf0ed1cee } ; enum { MEM_PostTag = 0 xdeadf00f } ; enum { MEM_Tag = 0 xfe } ; enum { MEM_WipeTag = 0 xcd } ; enum { ALLOCATION_ALIGNMENT = 1 6 } ; enum { MEM_SizeMax = 1 2 8 } ; enum { MEM_Recent = 5 0 0 0 } ; enum { MEM_AgeMax = 8 0 } ; enum { MEM_AgeSlice = 1 0 0 } ; private : struct FMemDebug { SIZE_T Size ; int32 RefCount ; int32* PreTag ; FMemDebug* Next ; FMemDebug** PrevLink ; } ; FMemDebug* GFirstDebug ; SIZE_T TotalAllocationSize ; SIZE_T TotalWasteSize ; uint32 AllocatorOverhead =)",
    "insertText": "sizeof(FMemDebug) + sizeof(FMemDebug*) + sizeof(int32) + ALLOCATION_ALIGNMENT + sizeof(int32)"
  },
  {
    "label": "FMallocDebug()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMallocDebug() : GFirstDebug( nullptr ) , TotalAllocationSize( 0 ) , TotalWasteSize( 0)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (FMemDebug*)",
    "insertText": "Ptr(FMemDebug*)malloc( AllocatorOverhead + Size)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uint8* AlignedPtr =)",
    "insertText": "Align((uint8*) Ptr + sizeof(FMemDebug) + sizeof(FMemDebug*) + sizeof(int32), ALLOCATION_ALIGNMENT)"
  },
  {
    "label": "PreTag()",
    "kind": "Method",
    "detail": "Function (Ptr -> RefCount = 1 ; Ptr -> Size = Size ; Ptr -> Next = GFirstDebug ; Ptr -> PrevLink =& GFirstDebug ; Ptr ->)",
    "insertText": "PreTag(int32*) (AlignedPtr - sizeof(int32))"
  },
  {
    "label": "MEM_PreTag()",
    "kind": "Method",
    "detail": "Function (* Ptr -> PreTag =)",
    "insertText": "MEM_PreTag((FMemDebug**)(AlignedPtr - sizeof(int32) - sizeof(FMemDebug*)))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(AlignedPtr, MEM_Tag, Size)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (GFirstDebug -> PrevLink =& Ptr -> Next ; } GFirstDebug = Ptr ; TotalAllocationSize + = Size ; TotalWasteSize + = AllocatorOverhead ;)",
    "insertText": "check(!(PTRINT(AlignedPtr) & ((PTRINT)0xf)))"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (FMemDebug*)",
    "insertText": "Ptr((FMemDebug**)((uint8*)InPtr - sizeof(int32) - sizeof(FMemDebug*)))"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Result =)",
    "insertText": "Malloc(NewSize, Alignment)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Result, InPtr, FMath::Min<SIZE_T>(Ptr->Size,NewSize))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(InPtr)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (TotalAllocationSize - = Ptr -> Size ; TotalWasteSize - = AllocatorOverhead ;)",
    "insertText": "Memset(InPtr, MEM_WipeTag, Ptr->Size)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Ptr -> Size = 0 ; Ptr -> RefCount = 0 ;)",
    "insertText": "check(GIsCriticalError||Ptr->PrevLink)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* Ptr -> PrevLink = Ptr -> Next ;)",
    "insertText": "if(Ptr->Next)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (Ptr -> Next -> PrevLink = Ptr -> PrevLink ; })",
    "insertText": "free(Ptr)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (SizeOut = 0 ; } else { const FMemDebug*)",
    "insertText": "Ptr((FMemDebug**)((uint8*)Original - sizeof(int32) - sizeof(FMemDebug*)))"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (SizeOut = Ptr -> Size ; } return true ; } void)",
    "insertText": "DumpAllocatorStats(FOutputDevice& Ar)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT( \"Total Allocation Size: %u\" ), TotalAllocationSize)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT( \"Total Waste Size: %u\" ), TotalWasteSize)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ; int32 Chunks = 0 ; Ar .)",
    "insertText": "Logf(TEXT( \"\" ))"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT( \"Unfreed memory:\" ))"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (Size)",
    "insertText": "Count(int32)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Chunks + + ; } Ar .)",
    "insertText": "Logf(TEXT( \"End of list: %i Bytes still allocated\" ), Count)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT( \" %i Chunks allocated\" ), Chunks)"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "_heapchk()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_WINDOWS int32 Result =)",
    "insertText": "_heapchk()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "return(true)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  }
]