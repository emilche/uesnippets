[
  {
    "label": "JITSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JITSymbol"
  },
  {
    "label": "TargetAddress()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_JITSYMBOL_H # define LLVM_EXECUTIONENGINE_ORC_JITSYMBOL_H # include \" llvm / ExecutionEngine / JITSymbolFlags . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<functional> namespace llvm { namespace orc { typedef uint64_t TargetAddress ; class JITSymbol : public JITSymbolBase { public : typedef std::function<)",
    "insertText": "TargetAddress()"
  },
  {
    "label": "JITSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JITSymbol(std::nullptr_t) : JITSymbolBase(JITSymbolFlags::None), CachedAddr(0)"
  },
  {
    "label": "JITSymbol()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "JITSymbol(TargetAddress Addr, JITSymbolFlags Flags) : JITSymbolBase(Flags), CachedAddr(Addr)"
  },
  {
    "label": "JITSymbol()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "JITSymbol(GetAddressFtor GetAddress, JITSymbolFlags Flags) : JITSymbolBase(Flags), GetAddress(std::move(GetAddress)), CachedAddr(0)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (CachedAddr =)",
    "insertText": "GetAddress()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CachedAddr && \"Symbol could not be materialized.\")"
  }
]