[
  {
    "label": "IDatasmithMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMaterialExpression"
  },
  {
    "label": "IDatasmithMaterialExpressionTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithMaterialExpressionTexture"
  },
  {
    "label": "IDatasmithUEPbrMaterialElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDatasmithUEPbrMaterialElement"
  },
  {
    "label": "DATASMITHCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DATASMITHCORE_API"
  },
  {
    "label": "FUVEditParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DatasmithDefinitions . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" class IDatasmithMaterialExpression ; class IDatasmithMaterialExpressionTexture ; class IDatasmithUEPbrMaterialElement ; namespace DatasmithMaterialsUtils { struct FUVEditParameters {)",
    "insertText": "FUVEditParameters() : UVOffset( FVector2D::ZeroVector ) , UVTiling( FVector2D::UnitVector ) , RotationPivot( 0.f, 1.f, 0.f ) , RotationAngle( 0.f ) , ChannelIndex( 0 ) , bIsUsingRealWorldScale( false ) , bMirrorU( false ) , bMirrorV( false)"
  },
  {
    "label": "CreateTextureExpression()",
    "kind": "Method",
    "detail": "Function (} FVector2D UVOffset ; FVector2D UVTiling ; FVector RotationPivot ; float RotationAngle ; uint8 ChannelIndex ; bool bIsUsingRealWorldScale ; bool bMirrorU ; bool bMirrorV ; } ; IDatasmithMaterialExpressionTexture*)",
    "insertText": "CreateTextureExpression(const TSharedRef< IDatasmithUEPbrMaterialElement >& MaterialElement, const TCHAR* ParameterName, const TCHAR* TextureMapPath, const FUVEditParameters& UVParameters)"
  },
  {
    "label": "CreateWeightedMaterialExpression()",
    "kind": "Method",
    "detail": "Function (IDatasmithMaterialExpression*)",
    "insertText": "CreateWeightedMaterialExpression(const TSharedRef< IDatasmithUEPbrMaterialElement >& MaterialElement, const TCHAR* ParameterName, TOptional< FLinearColor > Color, TOptional< float > Scalar, IDatasmithMaterialExpression* Expression, float Weight, EDatasmithTextureMode TextureMode = EDatasmithTextureMode::Diffuse)"
  },
  {
    "label": "TemperatureToColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "TemperatureToColor(float Kelvin)"
  }
]