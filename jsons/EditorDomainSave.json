[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "IPackageResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageResourceManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEditorDomainSaveServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainSaveServer"
  },
  {
    "label": "FClientConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClientConnection"
  },
  {
    "label": "FEditorDomainSaveClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainSaveClient"
  },
  {
    "label": "FEditorDomainSaveServer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<atomic> # include \" Containers / Array . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" EditorDomain / EditorDomain . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" Misc / DateTime . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class FJsonObject ; class FInternetAddr ; class FPackagePath ; class FRunnableThread ; class FSocket ; class IAssetRegistry ; class IPackageResourceManager ; namespace UE { namespace EditorDomainSave { enum class EMessageType : uint32 ; } } class FEditorDomainSaveServer { public :)",
    "insertText": "FEditorDomainSaveServer()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Run()"
  },
  {
    "label": "FClientConnection()",
    "kind": "Method",
    "detail": "Function (private : struct FClientConnection : public FRefCountedObject {)",
    "insertText": "FClientConnection(FSocket* InClientSocket)"
  },
  {
    "label": "FClientConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FClientConnection()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Poll(FEditorDomainSaveServer& Server, bool& bOutIsIdle, bool& bOutStillAlive)"
  },
  {
    "label": "TryInitialize()",
    "kind": "Method",
    "detail": "Function (FSocket* ClientSocket ; TArray<uint8> MessageBuffer ; int32 BufferOffset = 0 ; UE::EditorDomainSave::EMessageType MessageType ; } ; bool)",
    "insertText": "TryInitialize()"
  },
  {
    "label": "TryRefreshAuthority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRefreshAuthority(bool* bOutOwnsSettingsFile = nullptr, TSharedPtr<FJsonObject>* OutRootObject = nullptr, int32* OutListenPort = nullptr)"
  },
  {
    "label": "ShutdownSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownSocket()"
  },
  {
    "label": "TryAbdicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAbdicate()"
  },
  {
    "label": "IsAbdicated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAbdicated()"
  },
  {
    "label": "HasExpectedConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExpectedConnections()"
  },
  {
    "label": "PollShouldRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollShouldRun()"
  },
  {
    "label": "PollIncomingConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollIncomingConnections(bool& bInOutIsIdle)"
  },
  {
    "label": "PollConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollConnections(bool& bInOutIsIdle)"
  },
  {
    "label": "TickMaintenance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickMaintenance(bool bIsIdle)"
  },
  {
    "label": "SetIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdle(bool bIsIdle)"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMessage(FClientConnection& ClientConnection, UE::EditorDomainSave::EMessageType MessageType, const TArray<uint8>& MessageBuffer, bool& bOutStillAlive)"
  },
  {
    "label": "TickPendingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPendingPackages(bool& bInOutIsIdle)"
  },
  {
    "label": "TrySavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySavePackage(FStringView PackageName, FString& OutErrorMessage)"
  },
  {
    "label": "TrySavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySavePackage(const FPackagePath& PackagePath, FString& OutErrorMessage)"
  },
  {
    "label": "FEditorDomainSaveClient()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FClientConnection>> ClientConnections ; TRingBuffer<FString> PendingPackageNames ; FDateTime SettingsTimestamp ; FSocket* ListenSocket = nullptr ; IAssetRegistry* AssetRegistry ; FPlatformProcess::FSemaphore* ProcessLock = nullptr ; double IdleStartTime = 0 ; double LastGarbageTime = 0 ; int32 CreatorProcessId = 0 ; int32 ListenPort = 0 ; bool bIdle = false ; bool bHasEverConnected = false ; bool bAbdicated = false ; bool bHasInitializedAssetRegistry = false ; bool bIsResidentServer = false ; } ; class FEditorDomainSaveClient { public : ~)",
    "insertText": "FEditorDomainSaveClient()"
  },
  {
    "label": "RequestSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSave(const FPackagePath& PackagePath)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "KickCommunication()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "KickCommunication()"
  },
  {
    "label": "TrySendBatchRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySendBatchRequest()"
  },
  {
    "label": "TryInitializeCommunication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInitializeCommunication()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "RunCommunication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCommunication()"
  },
  {
    "label": "TickCommunication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCommunication()"
  },
  {
    "label": "TryConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConnect()"
  },
  {
    "label": "TickConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickConnect()"
  },
  {
    "label": "TryConnectProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConnectProcess()"
  },
  {
    "label": "TryReadConnectionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadConnectionData(uint32& OutLocalServerProcessId, uint32& OutLocalServerListenPort, FDateTime& OutServerSettingsTimestamp)"
  },
  {
    "label": "TryConnectSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConnectSocket()"
  },
  {
    "label": "PollKillServerProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollKillServerProcess()"
  },
  {
    "label": "KillDanglingProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillDanglingProcess()"
  },
  {
    "label": "TrySendRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySendRequests(TArray<FPackagePath>& LocalRequests)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "DisconnectProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectProcess()"
  },
  {
    "label": "DisconnectSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectSocket()"
  },
  {
    "label": "ConnectionWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectionWarning(FStringView Message, FStringView Consequence = FStringView(), bool bIgnoreCooldown=false)"
  },
  {
    "label": "PollServerMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollServerMessages()"
  }
]