[
  {
    "label": "FCastableTypeTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastableTypeTable"
  },
  {
    "label": "FDynamicExtensionContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicExtensionContainer"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FDynamicExtensionContainerIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicExtensionContainerIterator"
  },
  {
    "label": "TDynamicExtensionContainerIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDynamicExtensionContainerIterator"
  },
  {
    "label": "TDynamicExtensionContainerIteratorProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDynamicExtensionContainerIteratorProxy"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FDynamicExtensionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicExtensionInfo"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SortedMap . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / InlineValue . h \" namespace UE { namespace Sequencer { struct FCastableTypeTable ; class FDynamicExtensionContainer ; class FViewModel ; struct FDynamicExtensionContainerIterator ; template<T> struct TDynamicExtensionContainerIterator ; template<T> struct TDynamicExtensionContainerIteratorProxy ; class IDynamicExtension : public TSharedFromThis<IDynamicExtension> { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IDynamicExtension) virtual ~IDynamicExtension()"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCreated(TSharedRef<FViewModel> InWeakOwner)"
  },
  {
    "label": "OnPostInitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostInitialize()"
  },
  {
    "label": "OnReinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReinitialize()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FDynamicExtensionCallback, TSharedRef<FViewModel>)"
  },
  {
    "label": "FDynamicExtensionContainer()",
    "kind": "Method",
    "detail": "Function (class FDynamicExtensionContainer { public : ~)",
    "insertText": "FDynamicExtensionContainer()"
  },
  {
    "label": "FDynamicExtensionContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicExtensionContainer(const FDynamicExtensionContainer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDynamicExtensionContainer&)",
    "insertText": "operator(const FDynamicExtensionContainer&)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API(SEQUENCERCORE_API, FDynamicExtensionContainer) template<typename T> const T* CastDynamic()"
  },
  {
    "label": "CastDynamic()",
    "kind": "Method",
    "detail": "Function (const void* Result =)",
    "insertText": "CastDynamic(T::ID)"
  },
  {
    "label": "CastDynamicChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "CastDynamicChecked()"
  },
  {
    "label": "CastDynamicChecked()",
    "kind": "Method",
    "detail": "Function (const void* Result =)",
    "insertText": "CastDynamicChecked(T::ID)"
  },
  {
    "label": "CastDynamic()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "CastDynamic()"
  },
  {
    "label": "FilterDynamic()",
    "kind": "Method",
    "detail": "Function (} template<T> TDynamicExtensionContainerIteratorProxy<T>)",
    "insertText": "FilterDynamic()"
  },
  {
    "label": "CastDynamic()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "CastDynamic(FViewModelTypeID Type)"
  },
  {
    "label": "RemoveDynamicExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDynamicExtension(FViewModelTypeID Type)"
  },
  {
    "label": "CastDynamicChecked()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "CastDynamicChecked(FViewModelTypeID Type)"
  },
  {
    "label": "CastDynamic()",
    "kind": "Method",
    "detail": "Function (const void* Result =)",
    "insertText": "CastDynamic(Type)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Existing = CastDynamic<)",
    "insertText": "T()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<T> NewExtension = MakeShared<)",
    "insertText": "T(Forward<InArgTypes>(Args)...)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DynamicExtensions .)",
    "insertText": "Emplace(FDynamicExtensionInfo{ T::ID.GetTypeTable(), NewExtension })"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (NewExtension ->)",
    "insertText": "OnCreated(InOwner)"
  },
  {
    "label": "RemoveDynamicExtension()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "RemoveDynamicExtension()"
  },
  {
    "label": "RemoveDynamicExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDynamicExtension(T::ID)"
  },
  {
    "label": "PostInitializeExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostInitializeExtensions()"
  },
  {
    "label": "ReinitializeExtensions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReinitializeExtensions()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } private : struct FDynamicExtensionContainerIterator ; template<T> struct TDynamicExtensionContainerIteratorProxy ; struct FDynamicExtensionInfo { FCastableTypeTable* TypeTable ; TSharedRef<IDynamicExtension> Extension ; } ; TArray<FDynamicExtensionInfo> DynamicExtensions ; } ; struct FDynamicExtensionContainerIterator { operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDynamicExtensionContainerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDynamicExtensionContainerIterator& A, const FDynamicExtensionContainerIterator& B)"
  },
  {
    "label": "FDynamicExtensionContainerIterator()",
    "kind": "Method",
    "detail": "Function (protected : using IteratorType = TArray<FDynamicExtensionContainer::FDynamicExtensionInfo>::TConstIterator ; FDynamicExtensionContainer ;)",
    "insertText": "FDynamicExtensionContainerIterator(IteratorType&& InIterator, FViewModelTypeID InType)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (void* CurrentExtension = nullptr ; IteratorType Iterator ; FViewModelTypeID Type ; } ; template<T> struct TDynamicExtensionContainerIteratorProxy { TDynamicExtensionContainerIterator<T>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TDynamicExtensionContainerIterator<T>)",
    "insertText": "end()"
  },
  {
    "label": "TDynamicExtensionContainerIteratorProxy()",
    "kind": "Method",
    "detail": "Function (} private : FDynamicExtensionContainer ; using IteratorType = TArray<FDynamicExtensionContainer::FDynamicExtensionInfo>::TConstIterator ;)",
    "insertText": "TDynamicExtensionContainerIteratorProxy(FDynamicExtensionContainer* InContainer) : Container(InContainer)"
  },
  {
    "label": "TDynamicExtensionContainerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : TDynamicExtensionContainerIteratorProxy<T> ;)",
    "insertText": "TDynamicExtensionContainerIterator(FDynamicExtensionContainerIterator::IteratorType InIterator) : FDynamicExtensionContainerIterator(MoveTemp(InIterator), T::ID)"
  }
]