[
  {
    "label": "triangular_solve_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_matrix"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_SOLVER_MATRIX_H # define EIGEN_TRIANGULAR_SOLVER_MATRIX_H namespace Eigen { namespace internal { template<Scalar,Index,int Side,int Mode,bool Conjugate,int TriStorageOrder,int OtherInnerStride> struct triangular_solve_matrix<Scalar,Index,Side,Mode,Conjugate,TriStorageOrder,RowMajor,OtherInnerStride> { void)",
    "insertText": "run(Index size, Index cols, const Scalar* tri, Index triStride, Scalar* _other, Index otherIncr, Index otherStride, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "OnTheLeft()",
    "kind": "Method",
    "detail": "Function (triangular_solve_matrix<Scalar,Index,Side = = OnTheLeft ? OnTheRight :)",
    "insertText": "OnTheLeft(Mode&UnitDiag) | ((Mode&Upper) ? Lower : Upper), NumTraits<Scalar>::IsComplex && Conjugate, TriStorageOrder==RowMajor ? ColMajor : RowMajor, ColMajor, OtherInnerStride> ::run(size, cols, tri, triStride, _other, otherIncr, otherStride, blocking)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int Mode,bool Conjugate,int TriStorageOrder,int OtherInnerStride> struct triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor,OtherInnerStride> { EIGEN_DONT_INLINE void)",
    "insertText": "run(Index size, Index otherSize, const Scalar* _tri, Index triStride, Scalar* _other, Index otherIncr, Index otherStride, level3_blocking<Scalar,Scalar>& blocking)"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (Index cols = otherSize ; typedef const_blas_data_mapper<Scalar,Index,TriStorageOrder> TriMapper ; typedef blas_data_mapper<Scalar,Index,ColMajor,Unaligned,OtherInnerStride> OtherMapper ; TriMapper)",
    "insertText": "tri(_tri, triStride)"
  },
  {
    "label": "other()",
    "kind": "Method",
    "detail": "Function (OtherMapper)",
    "insertText": "other(_other, otherStride, otherIncr)"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MAX()",
    "kind": "Method",
    "detail": "Function (typedef gebp_traits<Scalar,Scalar> Traits ; enum { SmallPanelWidth =)",
    "insertText": "EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr), IsLower = (Mode&Lower)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(size,blocking.mc())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (std::size_t sizeA = kc* mc ; std::size_t sizeB = kc* cols ;)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockA, sizeA, blocking.blockA())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Scalar, blockB, sizeB, blocking.blockB())"
  },
  {
    "label": "manage_caching_sizes()",
    "kind": "Method",
    "detail": "Function (conj_if<Conjugate> conj ; gebp_kernel<Scalar,Scalar,Index,OtherMapper,Traits::mr,Traits::nr,Conjugate,false> gebp_kernel ; gemm_pack_lhs<Scalar,Index,TriMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,TriStorageOrder> pack_lhs ; gemm_pack_rhs<Scalar,Index,OtherMapper,Traits::nr,ColMajor,false,true> pack_rhs ; std::ptrdiff_t l1,l2,l3 ;)",
    "insertText": "manage_caching_sizes(GetAction, &l1, &l2, &l3)"
  },
  {
    "label": "l2()",
    "kind": "Method",
    "detail": "Function (Index subcols = cols> 0 ?)",
    "insertText": "l2(4 * sizeof(Scalar) * std::max<Index>(otherStride,size))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (subcols = std::max<)",
    "insertText": "Index((subcols/Traits::nr)*Traits::nr, Traits::nr)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(IsLower ? size-k2 : k2, kc)"
  },
  {
    "label": "actual_cols()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actual_cols(std::min)(cols-j2,subcols)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualPanelWidth = std::min<)",
    "insertText": "Index(actual_kc-k1, SmallPanelWidth)"
  },
  {
    "label": "RowMajor()",
    "kind": "Method",
    "detail": "Function (Index i = IsLower ? k2 + k1 + k : k2 - k1 - k - 1 ; Index rs = actualPanelWidth - k - 1 ; Index s = TriStorageOrder = =)",
    "insertText": "RowMajor(IsLower ? k2+k1 : i+1)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "a(Mode & UnitDiag) ? Scalar(1) : Scalar(1)/conj(tri(i,i))"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "b(0)"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (const Scalar* l =&)",
    "insertText": "tri(i,s)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (OtherMapper::LinearMapper r = other .)",
    "insertText": "getLinearMapper(s,j)"
  },
  {
    "label": "other()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "other(i,j) = (other(i,j) - b)"
  },
  {
    "label": "other()",
    "kind": "Method",
    "detail": "Function (} else { Scalar& otherij =)",
    "insertText": "other(i,j)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (TriMapper::LinearMapper l = tri .)",
    "insertText": "getLinearMapper(s,i)"
  },
  {
    "label": "pack_rhs()",
    "kind": "Method",
    "detail": "Function (} } } Index lengthTarget = actual_kc - k1 - actualPanelWidth ; Index startBlock = IsLower ? k2 + k1 : k2 - k1 - actualPanelWidth ; Index blockBOffset = IsLower ? k1 : lengthTarget ;)",
    "insertText": "pack_rhs(blockB+actual_kc*j2, other.getSubMapper(startBlock,j2), actualPanelWidth, actual_cols, actual_kc, blockBOffset)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (Index startTarget = IsLower ? k2 + k1 + actualPanelWidth : k2 - actual_kc ;)",
    "insertText": "pack_lhs(blockA, tri.getSubMapper(startTarget,startBlock), actualPanelWidth, lengthTarget)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(other.getSubMapper(startTarget,j2), blockA, blockB+actual_kc*j2, lengthTarget, actualPanelWidth, actual_cols, Scalar(-1), actualPanelWidth, actual_kc, 0, blockBOffset)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } { Index start = IsLower ? k2 + kc : 0 ; Index end = IsLower ? size : k2 - kc ;)",
    "insertText": "for(Index i2=start; i2<end; i2+=mc)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(mc,end-i2)"
  },
  {
    "label": "pack_lhs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pack_lhs(blockA, tri.getSubMapper(i2, IsLower ? k2 : k2-kc), actual_kc, actual_mc)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(other.getSubMapper(i2, 0), blockA, blockB, actual_mc, actual_kc, cols, Scalar(-1), -1, -1, 0, 0)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (Index rows = otherSize ; typedef NumTraits<Scalar>::Real RealScalar ; typedef blas_data_mapper<Scalar,Index,ColMajor,Unaligned,OtherInnerStride> LhsMapper ; typedef const_blas_data_mapper<Scalar,Index,TriStorageOrder> RhsMapper ; LhsMapper)",
    "insertText": "lhs(_other, otherStride, otherIncr)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(_tri, triStride)"
  },
  {
    "label": "mc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "mc(std::min)(rows,blocking.mc())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (conj_if<Conjugate> conj ; gebp_kernel<Scalar,Scalar,Index,LhsMapper,Traits::mr,Traits::nr,false,Conjugate> gebp_kernel ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder> pack_rhs ; gemm_pack_rhs<Scalar,Index,RhsMapper,Traits::nr,RhsStorageOrder,false,true> pack_rhs_panel ; gemm_pack_lhs<Scalar,Index,LhsMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,ColMajor,false,true> pack_lhs_panel ;)",
    "insertText": "for(Index k2=IsLower ? size : 0; IsLower ? k2>0 : k2<size; IsLower ? k2-=kc : k2+=kc)"
  },
  {
    "label": "actual_kc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_kc(std::min)(IsLower ? k2 : size-k2, kc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index actual_k2 = IsLower ? k2 - actual_kc : k2 ; Index startPanel = IsLower ? 0 : k2 + actual_kc ; Index rs = IsLower ? actual_k2 : size - actual_k2 - actual_kc ; Scalar* geb = blockB + actual_kc* actual_kc ;)",
    "insertText": "if(rs>0) pack_rhs(geb, rhs.getSubMapper(actual_k2,startPanel), actual_kc, rs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "for(Index j2=0; j2<actual_kc; j2+=SmallPanelWidth)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index actualPanelWidth = std::min<)",
    "insertText": "Index(actual_kc-j2, SmallPanelWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index actual_j2 = actual_k2 + j2 ; Index panelOffset = IsLower ? j2 + actualPanelWidth : 0 ; Index panelLength = IsLower ? actual_kc - j2 - actualPanelWidth : j2 ;)",
    "insertText": "if(panelLength>0) pack_rhs_panel(blockB+j2*actual_kc, rhs.getSubMapper(actual_k2+panelOffset, actual_j2), panelLength, actualPanelWidth, actual_kc, panelOffset)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(Index i2=0; i2<rows; i2+=mc)"
  },
  {
    "label": "actual_mc()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "actual_mc(std::min)(mc,rows-i2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "for(Index j2 = IsLower ? (actual_kc - ((actual_kc%SmallPanelWidth) ? Index(actual_kc%SmallPanelWidth) : Index(SmallPanelWidth))) : 0; IsLower ? j2>=0 : j2<actual_kc; IsLower ? j2-=SmallPanelWidth : j2+=SmallPanelWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index absolute_j2 = actual_k2 + j2 ; Index panelOffset = IsLower ? j2 + actualPanelWidth : 0 ; Index panelLength = IsLower ? actual_kc - j2 - actualPanelWidth : j2 ;)",
    "insertText": "if(panelLength>0)"
  },
  {
    "label": "gebp_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gebp_kernel(lhs.getSubMapper(i2,absolute_j2), blockA, blockB+j2*actual_kc, actual_mc, panelLength, actualPanelWidth, Scalar(-1), actual_kc, actual_kc, panelOffset, panelOffset)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index k=0; k<actualPanelWidth; ++k)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (Index j = IsLower ? absolute_j2 + actualPanelWidth - k - 1 : absolute_j2 + k ; LhsMapper::LinearMapper r = lhs .)",
    "insertText": "getLinearMapper(i2,j)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Scalar b =)",
    "insertText": "conj(rhs(IsLower ? j+1+k3 : absolute_j2+k3,j))"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (LhsMapper::LinearMapper a = lhs .)",
    "insertText": "getLinearMapper(i2,IsLower ? j+1+k3 : absolute_j2+k3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((Mode & UnitDiag)==0)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (Scalar inv_rjj =)",
    "insertText": "RealScalar(1)/conj(rhs(j,j))"
  },
  {
    "label": "pack_lhs_panel()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "pack_lhs_panel(blockA, lhs.getSubMapper(i2,absolute_j2), actualPanelWidth, actual_mc, actual_kc, j2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(rs>0) gebp_kernel(lhs.getSubMapper(i2, startPanel), blockA, geb, actual_mc, actual_kc, rs, Scalar(-1), -1, -1, 0, 0)"
  }
]