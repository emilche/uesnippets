[
  {
    "label": "FutexImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FutexImpl"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "Futex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Futex"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_H_ # define ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_H_ # include \" absl / base / config . h \" # ifdef _WIN32 # include<windows . h> # else # include<sys / time . h> # include<unistd . h> # endif # ifdef __linux__ # include<linux / futex . h> # include<sys / syscall . h> # endif # include<errno . h> # include<stdio . h> # include<time . h> # include<atomic> # include<cstdint> # include \" absl / base / optimization . h \" # include \" absl / synchronization / internal / kernel_timeout . h \" # ifdef ABSL_INTERNAL_HAVE_FUTEX # error ABSL_INTERNAL_HAVE_FUTEX may not be set on the command line # elif)",
    "insertText": "defined(__BIONIC__) #define ABSL_INTERNAL_HAVE_FUTEX #elif defined(__linux__) && defined(FUTEX_CLOCK_REALTIME)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace synchronization_internal { # ifdef __BIONIC__ # ifndef SYS_futex # define SYS_futex __NR_futex # endif # ifndef FUTEX_WAIT_BITSET # define FUTEX_WAIT_BITSET 9 # endif # ifndef FUTEX_PRIVATE_FLAG # define FUTEX_PRIVATE_FLAG 1 2 8 # endif # ifndef FUTEX_CLOCK_REALTIME # define FUTEX_CLOCK_REALTIME 2 5 6 # endif # ifndef FUTEX_BITSET_MATCH_ANY # define FUTEX_BITSET_MATCH_ANY 0 xFFFFFFFF # endif # endif # if)",
    "insertText": "defined(__NR_futex_time64) && !defined(SYS_futex_time64) #define SYS_futex_time64 __NR_futex_time64 #endif #if defined(SYS_futex_time64) && !defined(SYS_futex)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "WaitUntil(std::atomic<int32_t> *v, int32_t val, KernelTimeout t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (long err = 0 ;)",
    "insertText": "if(t.has_timeout())"
  },
  {
    "label": "MakeAbsTimespec()",
    "kind": "Method",
    "detail": "Function (struct timespec abs_timeout = t .)",
    "insertText": "MakeAbsTimespec()"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (err =)",
    "insertText": "syscall(SYS_futex, reinterpret_cast<int32_t *>(v), FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME, val, &abs_timeout, nullptr, FUTEX_BITSET_MATCH_ANY)"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (} else { err =)",
    "insertText": "syscall(SYS_futex, reinterpret_cast<int32_t *>(v), FUTEX_WAIT | FUTEX_PRIVATE_FLAG, val, nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ABSL_PREDICT_FALSE(err != 0))"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (long err =)",
    "insertText": "syscall(SYS_futex, reinterpret_cast<int32_t*>(v), FUTEX_WAIT_BITSET | FUTEX_PRIVATE_FLAG, val, abstime, nullptr, bits)"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (long err =)",
    "insertText": "syscall(SYS_futex, reinterpret_cast<int32_t*>(v), FUTEX_WAKE | FUTEX_PRIVATE_FLAG, count)"
  },
  {
    "label": "syscall()",
    "kind": "Method",
    "detail": "Function (long err =)",
    "insertText": "syscall(SYS_futex, reinterpret_cast<int32_t*>(v), FUTEX_WAKE_BITSET | FUTEX_PRIVATE_FLAG, count, nullptr, nullptr, bits)"
  }
]