[
  {
    "label": "load_b_values()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_QUANTIZE_SSE2_H_ # define VPX_VPX_DSP_X86_QUANTIZE_SSE2_H_ # include<emmintrin . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" void)",
    "insertText": "load_b_values(const int16_t *zbin_ptr, __m128i *zbin, const int16_t *round_ptr, __m128i *round, const int16_t *quant_ptr, __m128i *quant, const int16_t *dequant_ptr, __m128i *dequant, const int16_t *shift_ptr, __m128i *shift)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (* zbin =)",
    "insertText": "_mm_load_si128((const __m128i *)zbin_ptr)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (* round =)",
    "insertText": "_mm_load_si128((const __m128i *)round_ptr)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (* quant =)",
    "insertText": "_mm_load_si128((const __m128i *)quant_ptr)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (* zbin =)",
    "insertText": "_mm_sub_epi16(*zbin, _mm_set1_epi16(1))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (* dequant =)",
    "insertText": "_mm_load_si128((const __m128i *)dequant_ptr)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (* shift =)",
    "insertText": "_mm_load_si128((const __m128i *)shift_ptr)"
  },
  {
    "label": "load_fp_values()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_fp_values(const int16_t *round_ptr, __m128i *round, const int16_t *quant_ptr, __m128i *quant, const int16_t *dequant_ptr, __m128i *dequant)"
  },
  {
    "label": "invert_sign_sse2()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "invert_sign_sse2(__m128i a, __m128i sign)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "_mm_xor_si128(a, sign)"
  },
  {
    "label": "calculate_qcoeff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "calculate_qcoeff(__m128i *coeff, const __m128i round, const __m128i quant, const __m128i shift)"
  },
  {
    "label": "_mm_adds_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i tmp,qcoeff ; qcoeff =)",
    "insertText": "_mm_adds_epi16(*coeff, round)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (tmp =)",
    "insertText": "_mm_mulhi_epi16(qcoeff, quant)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (qcoeff =)",
    "insertText": "_mm_add_epi16(tmp, qcoeff)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (* coeff =)",
    "insertText": "_mm_mulhi_epi16(qcoeff, shift)"
  },
  {
    "label": "calculate_dqcoeff_and_store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "calculate_dqcoeff_and_store(__m128i qcoeff, __m128i dequant, tran_low_t *dqcoeff)"
  },
  {
    "label": "_mm_mullo_epi16()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const __m128i low =)",
    "insertText": "_mm_mullo_epi16(qcoeff, dequant)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i high =)",
    "insertText": "_mm_mulhi_epi16(qcoeff, dequant)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i dqcoeff32_0 =)",
    "insertText": "_mm_unpacklo_epi16(low, high)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i dqcoeff32_1 =)",
    "insertText": "_mm_unpackhi_epi16(low, high)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff), dqcoeff32_0)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff + 4), dqcoeff32_1)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff), dqcoeff16)"
  },
  {
    "label": "scan_for_eob()",
    "kind": "Method",
    "detail": "Function (# endif } __m128i)",
    "insertText": "scan_for_eob(__m128i *coeff0, __m128i *coeff1, const int16_t *scan, const int index, const __m128i zero)"
  },
  {
    "label": "_mm_cmpeq_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i zero_coeff0 =)",
    "insertText": "_mm_cmpeq_epi16(*coeff0, zero)"
  },
  {
    "label": "_mm_cmpeq_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i zero_coeff1 =)",
    "insertText": "_mm_cmpeq_epi16(*coeff1, zero)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i scan0 =)",
    "insertText": "_mm_load_si128((const __m128i *)(scan + index))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i scan1 =)",
    "insertText": "_mm_load_si128((const __m128i *)(scan + index + 8))"
  },
  {
    "label": "_mm_andnot_si128()",
    "kind": "Method",
    "detail": "Function (__m128i eob0,eob1 ; eob0 =)",
    "insertText": "_mm_andnot_si128(zero_coeff0, scan0)"
  },
  {
    "label": "_mm_andnot_si128()",
    "kind": "Method",
    "detail": "Function (eob1 =)",
    "insertText": "_mm_andnot_si128(zero_coeff1, scan1)"
  },
  {
    "label": "accumulate_eob()",
    "kind": "Method",
    "detail": "Function (} int16_t)",
    "insertText": "accumulate_eob(__m128i eob)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i eob_shuffled ; eob_shuffled =)",
    "insertText": "_mm_shuffle_epi32(eob, 0xe)"
  },
  {
    "label": "_mm_max_epi16()",
    "kind": "Method",
    "detail": "Function (eob =)",
    "insertText": "_mm_max_epi16(eob, eob_shuffled)"
  },
  {
    "label": "_mm_shufflelo_epi16()",
    "kind": "Method",
    "detail": "Function (eob_shuffled =)",
    "insertText": "_mm_shufflelo_epi16(eob, 0xe)"
  },
  {
    "label": "_mm_shufflelo_epi16()",
    "kind": "Method",
    "detail": "Function (eob_shuffled =)",
    "insertText": "_mm_shufflelo_epi16(eob, 0x1)"
  }
]