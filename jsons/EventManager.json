[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEventHandler"
  },
  {
    "label": "TEventContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventContainer"
  },
  {
    "label": "TRawEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawEventHandler"
  },
  {
    "label": "FEventContainerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventContainerBase"
  },
  {
    "label": "TEventContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventContainer"
  },
  {
    "label": "FEventManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventManager"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UnregisterEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEvent(const EEventType& EventType)"
  },
  {
    "label": "UnregisterHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterHandler(const EEventType& EventType, const void* InHandler)"
  },
  {
    "label": "FillProducerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillProducerData(const Chaos::FPBDRigidsSolver* Solver, bool bResetData = true)"
  },
  {
    "label": "FlipBuffersIfRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBuffersIfRequired()"
  },
  {
    "label": "DispatchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchEvents()"
  },
  {
    "label": "EncodeCollisionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EncodeCollisionIndex(int32 ActualCollisionIndex, bool bSwapOrder)"
  },
  {
    "label": "DecodeCollisionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecodeCollisionIndex(int32 EncodedCollisionIdx, bool& bSwapOrder)"
  },
  {
    "label": "InternalRegisterInjector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterInjector(const FEventID& EventID, const FEventContainerBasePtr& Container)"
  }
]