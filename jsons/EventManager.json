[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEventHandler"
  },
  {
    "label": "TEventContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventContainer"
  },
  {
    "label": "TRawEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawEventHandler"
  },
  {
    "label": "FEventContainerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventContainerBase"
  },
  {
    "label": "FEventManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventManager"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "IEventHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Framework / MultiBufferResource . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" Misc / ScopeLock . h \" # include \" Chaos / Defines . h \" namespace Chaos { enum class EEventType : int32 { Collision = 0,Breaking = 1,Trailing = 2,Sleeping = 3,Removal = 4,Crumbling = 5,} ; typedef int32 FEventID ; class IEventHandler { template<PayloadType> class TEventContainer ; public : ~)",
    "insertText": "IEventHandler()"
  },
  {
    "label": "HandleEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleEvent(const void* EventData)"
  },
  {
    "label": "GetInterestedProxyOwners()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInterestedProxyOwners(TArray<UObject*>& Output)"
  },
  {
    "label": "GetHandler()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetHandler()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; template<PayloadType,HandlerType> class TRawEventHandler : public IEventHandler { public : typedef)",
    "insertText": "void(HandlerType::*FHandlerFunction)(const PayloadType&)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (typedef TArray<)",
    "insertText": "UObject(HandlerType::*FInterestedProxyOwnerFunction)()"
  },
  {
    "label": "TRawEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRawEventHandler(HandlerType* InHandler, FHandlerFunction InFunction, FInterestedProxyOwnerFunction InFunctionProxyOwners = nullptr) : Handler(InHandler) , HandlerFunction(InFunction) , InterestedProxyOwnersFunction(InFunctionProxyOwners)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterHandler(const FEventHandlerPtr& Handler)"
  },
  {
    "label": "UnregisterHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterHandler(const void* Handler)"
  },
  {
    "label": "InjectProducerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectProducerData(const FPBDRigidsSolver* Solver, bool bResetData)"
  },
  {
    "label": "FlipBufferIfRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBufferIfRequired()"
  },
  {
    "label": "ResetConsumerBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetConsumerBuffer()"
  },
  {
    "label": "DispatchConsumerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchConsumerData()"
  },
  {
    "label": "TEventContainer()",
    "kind": "Method",
    "detail": "Function (} ; template<PayloadType> class TEventContainer : public FEventContainerBase { public :)",
    "insertText": "TEventContainer(const Chaos::EMultiBufferMode& BufferMode, TFunction<void(const FPBDRigidsSolver* Solver, PayloadType& EventDataInOut, bool bResetData)> InFunction) : InjectedFunction(InFunction) , EventBuffer(Chaos::FMultiBufferFactory<PayloadType>::CreateBuffer(BufferMode))"
  },
  {
    "label": "TEventContainer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEventContainer(TEventContainer<PayloadType>& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (InjectedFunction = Other . InjectedFunction ; EventBuffer =)",
    "insertText": "MoveTemp(Other.EventBuffer)"
  },
  {
    "label": "TEventContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TEventContainer()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (HandlerLock .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (delete Pair . Value ; Pair . Value = nullptr ; } HandlerLock .)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HandlerMap .)",
    "insertText": "Add(Handler->GetHandler(), Handler)"
  },
  {
    "label": "GetInterestedProxyOwners()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> ProxyOwners ; bool bValidProxyFilter = Handler ->)",
    "insertText": "GetInterestedProxyOwners(ProxyOwners)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProxyOwnerToHandlerMap .)",
    "insertText": "Add(ProxyOwner, Handler)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(GetProxyToIndexMap(EventBuffer.Get()->GetConsumerBuffer()) != nullptr)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (DeferredHandlers .)",
    "insertText": "AddUnique(Handler)"
  },
  {
    "label": "UnregisterHandler()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnregisterHandler(const void* InHandler)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<UObject*,FEventHandlerPtr>> KeysAndValuesToRemove ;)",
    "insertText": "for(TPair<UObject*, FEventHandlerPtr>& KeyValue : ProxyOwnerToHandlerMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FEventHandlerPtr Value = KeyValue . Value ;)",
    "insertText": "if(Value && Value->GetHandler() == InHandler)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeysAndValuesToRemove .)",
    "insertText": "Add(KeyValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(TPair<UObject*, FEventHandlerPtr>& KeyAndValue : KeysAndValuesToRemove)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ProxyOwnerToHandlerMap .)",
    "insertText": "Remove(KeyAndValue.Get<0>(), KeyAndValue.Get<1>())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} HandlersNotInProxyOwnerMap .)",
    "insertText": "Remove(InHandler)"
  },
  {
    "label": "DeleteHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteHandler(*HandlerPtr)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (DeferredUnregisterHandlers .)",
    "insertText": "AddUnique(InHandler)"
  },
  {
    "label": "InjectedFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectedFunction(Solver, *EventBuffer->AccessProducerBuffer(), bResetData)"
  },
  {
    "label": "DestroyStaleEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyStaleEvents(TFunction<void(PayloadType & EventDataInOut)> InFunction)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction(*EventBuffer->AccessProducerBuffer())"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEvent(TFunction<void(PayloadType& EventDataInOut)> InFunction)"
  },
  {
    "label": "FlipProducer()",
    "kind": "Method",
    "detail": "Function (EventBuffer ->)",
    "insertText": "FlipProducer()"
  },
  {
    "label": "GetConsumerBufferMutable()",
    "kind": "Method",
    "detail": "Function (EventBuffer ->)",
    "insertText": "GetConsumerBufferMutable()->Reset()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const PayloadType* Buffer = EventBuffer .)",
    "insertText": "Get()->GetConsumerBuffer()"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (HandlerLock .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "GetProxyToIndexMap()",
    "kind": "Method",
    "detail": "Function (const TMap<IPhysicsProxyBase*,TArray<int32>>* Map =)",
    "insertText": "GetProxyToIndexMap(Buffer)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSet<FEventHandlerPtr> UniqueHandlers ; UniqueHandlers .)",
    "insertText": "Reserve(Map->Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const IPhysicsProxyBase* Proxy = KeyValue .)",
    "insertText": "Get()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (const UObject* Owner = Proxy ->)",
    "insertText": "GetOwner()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UniqueHandlers .)",
    "insertText": "Add(It.Value())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const FEventHandlerPtr Handler : UniqueHandlers)"
  },
  {
    "label": "HandleEvent()",
    "kind": "Method",
    "detail": "Function (Handler ->)",
    "insertText": "HandleEvent(Buffer)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const TPair<void*, FEventHandlerPtr>& Pair : HandlersNotInProxyOwnerMap)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(const TPair<void*, FEventHandlerPtr>& Pair : HandlerMap)"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (} } HandlerLock .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "RegisterDeferedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDeferedHandler()"
  },
  {
    "label": "UnregisterDeferedHandler()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UnregisterDeferedHandler()"
  },
  {
    "label": "DeferredUnregisterHandlersCopy()",
    "kind": "Method",
    "detail": "Function (TArray<const void*>)",
    "insertText": "DeferredUnregisterHandlersCopy(MoveTemp(DeferredUnregisterHandlers))"
  },
  {
    "label": "UnregisterHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterHandler(HandlerPtr)"
  },
  {
    "label": "DeferredHandlersCopy()",
    "kind": "Method",
    "detail": "Function (TArray<FEventHandlerPtr>)",
    "insertText": "DeferredHandlersCopy(MoveTemp(DeferredHandlers))"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterHandler(HandlerPtr)"
  },
  {
    "label": "DeleteHandler()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DeleteHandler(FEventHandlerPtr& HandlerPtr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (delete HandlerPtr ; HandlerPtr = nullptr ; } TFunction<)",
    "insertText": "void(const FPBDRigidsSolver* Solver, PayloadType& EventData, bool bResetData)"
  },
  {
    "label": "FEventManager()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IBufferResource<PayloadType>> EventBuffer ; TMultiMap<UObject*,FEventHandlerPtr> ProxyOwnerToHandlerMap ; TMap<void*,FEventHandlerPtr> HandlersNotInProxyOwnerMap ; TMap<void*,FEventHandlerPtr> HandlerMap ; FRWLock HandlerLock ; TArray<FEventHandlerPtr> DeferredHandlers ; TArray<const void*> DeferredUnregisterHandlers ; FRWLock DeferredHandlerLock ; } ; using FEventContainerBasePtr = FEventContainerBase* ; class FEventManager { class FPBDRigidsSolver ; public :)",
    "insertText": "FEventManager(const Chaos::EMultiBufferMode& BufferModeIn) : BufferMode(BufferModeIn)"
  },
  {
    "label": "FEventManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEventManager()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetBufferMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferMode(const Chaos::EMultiBufferMode& BufferModeIn)"
  },
  {
    "label": "RegisterEvent()",
    "kind": "Method",
    "detail": "Function (BufferMode = BufferModeIn ; } template<PayloadType> void)",
    "insertText": "RegisterEvent(const EEventType& EventType, TFunction<void(const Chaos::FPBDRigidsSolver* Solver, PayloadType& EventData, bool bResetData)> InFunction)"
  },
  {
    "label": "InternalRegisterInjector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterInjector(FEventID(EventType), new TEventContainer<PayloadType>(BufferMode, InFunction))"
  },
  {
    "label": "ClearEvents()",
    "kind": "Method",
    "detail": "Function (} template<PayloadType> void)",
    "insertText": "ClearEvents(const EEventType& EventType, TFunction<void(PayloadType & EventData)> InFunction)"
  },
  {
    "label": "DestroyStaleEvents()",
    "kind": "Method",
    "detail": "Function (EventContainer ->)",
    "insertText": "DestroyStaleEvents(InFunction)"
  },
  {
    "label": "UnregisterEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterEvent(const EEventType& EventType)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (template<PayloadType,HandlerType> void)",
    "insertText": "RegisterHandler(const EEventType& EventType, HandlerType* Handler, typename TRawEventHandler<PayloadType, HandlerType>::FHandlerFunction HandlerFunction, typename TRawEventHandler<PayloadType, HandlerType>::FInterestedProxyOwnerFunction InterestedProxyOwnerFunction = nullptr)"
  },
  {
    "label": "FEventID()",
    "kind": "Method",
    "detail": "Function (const FEventID EventID =)",
    "insertText": "FEventID(EventType)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (EventContainers [ EventID ] ->)",
    "insertText": "RegisterHandler(new TRawEventHandler<PayloadType, HandlerType>(Handler, HandlerFunction, InterestedProxyOwnerFunction))"
  },
  {
    "label": "UnregisterHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterHandler(const EEventType& EventType, const void* InHandler)"
  },
  {
    "label": "FillProducerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillProducerData(const Chaos::FPBDRigidsSolver* Solver, bool bResetData = true)"
  },
  {
    "label": "FlipBuffersIfRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBuffersIfRequired()"
  },
  {
    "label": "DispatchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchEvents()"
  },
  {
    "label": "EncodeCollisionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EncodeCollisionIndex(int32 ActualCollisionIndex, bool bSwapOrder)"
  },
  {
    "label": "DecodeCollisionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecodeCollisionIndex(int32 EncodedCollisionIdx, bool& bSwapOrder)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (template<PayloadType> void)",
    "insertText": "AddEvent(const EEventType& EventType, TFunction<void(PayloadType& EventData)> InFunction)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (EventContainer ->)",
    "insertText": "AddEvent(InFunction)"
  },
  {
    "label": "InternalRegisterInjector()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "InternalRegisterInjector(const FEventID& EventID, const FEventContainerBasePtr& Container)"
  }
]