[
  {
    "label": "where",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "where"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "VmaAllocatorCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaAllocatorCreateFlagBits"
  },
  {
    "label": "VmaMemoryUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaMemoryUsage"
  },
  {
    "label": "VmaAllocationCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaAllocationCreateFlagBits"
  },
  {
    "label": "VmaPoolCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaPoolCreateFlagBits"
  },
  {
    "label": "VmaDefragmentationFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaDefragmentationFlagBits"
  },
  {
    "label": "VmaDefragmentationMoveOperation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaDefragmentationMoveOperation"
  },
  {
    "label": "VmaVirtualBlockCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaVirtualBlockCreateFlagBits"
  },
  {
    "label": "VmaVirtualAllocationCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaVirtualAllocationCreateFlagBits"
  },
  {
    "label": "VmaAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocator"
  },
  {
    "label": "VmaPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPool"
  },
  {
    "label": "VmaAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocation"
  },
  {
    "label": "VmaDefragmentationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationContext"
  },
  {
    "label": "VmaVirtualAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualAllocation"
  },
  {
    "label": "VmaVirtualBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualBlock"
  },
  {
    "label": "VmaDeviceMemoryCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDeviceMemoryCallbacks"
  },
  {
    "label": "VmaVulkanFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVulkanFunctions"
  },
  {
    "label": "VmaAllocatorCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocatorCreateInfo"
  },
  {
    "label": "VmaAllocatorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocatorInfo"
  },
  {
    "label": "VmaStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaStatistics"
  },
  {
    "label": "VmaDetailedStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDetailedStatistics"
  },
  {
    "label": "VmaTotalStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaTotalStatistics"
  },
  {
    "label": "VmaBudget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaBudget"
  },
  {
    "label": "VmaAllocationCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocationCreateInfo"
  },
  {
    "label": "VmaPoolCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPoolCreateInfo"
  },
  {
    "label": "VmaAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocationInfo"
  },
  {
    "label": "VmaAllocationInfo2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocationInfo2"
  },
  {
    "label": "VmaDefragmentationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationInfo"
  },
  {
    "label": "VmaDefragmentationMove",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationMove"
  },
  {
    "label": "VmaDefragmentationPassMoveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationPassMoveInfo"
  },
  {
    "label": "VmaDefragmentationStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationStats"
  },
  {
    "label": "VmaVirtualBlockCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualBlockCreateInfo"
  },
  {
    "label": "VmaVirtualAllocationCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualAllocationCreateInfo"
  },
  {
    "label": "VmaVirtualAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualAllocationInfo"
  },
  {
    "label": "VmaMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaMutex"
  },
  {
    "label": "VmaRWMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaRWMutex"
  },
  {
    "label": "VmaRWMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaRWMutex"
  },
  {
    "label": "VmaRWMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaRWMutex"
  },
  {
    "label": "VmaSuballocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaSuballocationType"
  },
  {
    "label": "VmaSuballocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VmaSuballocationType"
  },
  {
    "label": "VMA_CACHE_OPERATION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VMA_CACHE_OPERATION"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VmaMutexLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLock"
  },
  {
    "label": "VmaMutexLockRead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLockRead"
  },
  {
    "label": "VmaMutexLockWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLockWrite"
  },
  {
    "label": "AtomicTransactionalIncrement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AtomicTransactionalIncrement"
  },
  {
    "label": "VmaStlAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaStlAllocator"
  },
  {
    "label": "VmaVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaVector"
  },
  {
    "label": "VmaSmallVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaSmallVector"
  },
  {
    "label": "VmaPoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaPoolAllocator"
  },
  {
    "label": "VmaListItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaListItem"
  },
  {
    "label": "VmaRawList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaRawList"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "VmaIntrusiveLinkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaIntrusiveLinkedList"
  },
  {
    "label": "VmaStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaStringBuilder"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaDeviceMemoryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaDeviceMemoryBlock"
  },
  {
    "label": "VmaDedicatedAllocationListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDedicatedAllocationListItemTraits"
  },
  {
    "label": "VmaDedicatedAllocationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaDedicatedAllocationList"
  },
  {
    "label": "VmaSuballocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocation"
  },
  {
    "label": "VmaSuballocationOffsetLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationOffsetLess"
  },
  {
    "label": "VmaSuballocationOffsetGreater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationOffsetGreater"
  },
  {
    "label": "VmaSuballocationItemSizeLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationItemSizeLess"
  },
  {
    "label": "VmaAllocationRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocationRequest"
  },
  {
    "label": "VmaBlockMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata"
  },
  {
    "label": "VmaBlockMetadata_Linear",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata_Linear"
  },
  {
    "label": "VmaBlockMetadata_TLSF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata_TLSF"
  },
  {
    "label": "VmaBlockVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockVector"
  },
  {
    "label": "VmaPoolListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPoolListItemTraits"
  },
  {
    "label": "VmaCurrentBudgetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaCurrentBudgetData"
  },
  {
    "label": "VmaAllocationObjectAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaAllocationObjectAllocator"
  },
  {
    "label": "VmaBufferImageUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaBufferImageUsage"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "VmaMutexLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLock"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "VmaMutexLockRead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLockRead"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "VmaMutexLockWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaMutexLockWrite"
  },
  {
    "label": "AtomicTransactionalIncrement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AtomicTransactionalIncrement"
  },
  {
    "label": "VmaStlAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaStlAllocator"
  },
  {
    "label": "VmaVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaVector"
  },
  {
    "label": "VmaSmallVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaSmallVector"
  },
  {
    "label": "VmaPoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaPoolAllocator"
  },
  {
    "label": "ItemBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ItemBlock"
  },
  {
    "label": "VmaListItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaListItem"
  },
  {
    "label": "VmaRawList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaRawList"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reverse_iterator"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "const_reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_reverse_iterator"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reverse_iterator"
  },
  {
    "label": "const_reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_reverse_iterator"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "const_reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_reverse_iterator"
  },
  {
    "label": "VmaList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaList"
  },
  {
    "label": "MyItemTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyItemTypeTraits"
  },
  {
    "label": "VmaIntrusiveLinkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaIntrusiveLinkedList"
  },
  {
    "label": "VmaStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaStringBuilder"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "COLLECTION_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "COLLECTION_TYPE"
  },
  {
    "label": "StackItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StackItem"
  },
  {
    "label": "VmaMappingHysteresis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaMappingHysteresis"
  },
  {
    "label": "VmaDeviceMemoryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaDeviceMemoryBlock"
  },
  {
    "label": "VmaAllocation_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocation_T"
  },
  {
    "label": "VmaDedicatedAllocationListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDedicatedAllocationListItemTraits"
  },
  {
    "label": "FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FLAGS"
  },
  {
    "label": "ALLOCATION_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ALLOCATION_TYPE"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "BlockAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockAllocation"
  },
  {
    "label": "DedicatedAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DedicatedAllocation"
  },
  {
    "label": "FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FLAGS"
  },
  {
    "label": "VmaDedicatedAllocationListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDedicatedAllocationListItemTraits"
  },
  {
    "label": "VmaDedicatedAllocationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaDedicatedAllocationList"
  },
  {
    "label": "VmaSuballocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocation"
  },
  {
    "label": "VmaSuballocationOffsetLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationOffsetLess"
  },
  {
    "label": "VmaSuballocationOffsetGreater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationOffsetGreater"
  },
  {
    "label": "VmaSuballocationItemSizeLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaSuballocationItemSizeLess"
  },
  {
    "label": "VmaAllocationRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocationRequest"
  },
  {
    "label": "VmaBlockMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "remember",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "remember"
  },
  {
    "label": "VmaBlockBufferImageGranularity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockBufferImageGranularity"
  },
  {
    "label": "ValidationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidationContext"
  },
  {
    "label": "RegionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionInfo"
  },
  {
    "label": "VmaBlockMetadata_Linear",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata_Linear"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "SECOND_VECTOR_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SECOND_VECTOR_MODE"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaBlockMetadata_TLSF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockMetadata_TLSF"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaBlockVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaBlockVector"
  },
  {
    "label": "VmaDefragmentationContext_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationContext_T"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaDefragmentationContext_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaDefragmentationContext_T"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FragmentedBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FragmentedBlock"
  },
  {
    "label": "StateBalanced",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StateBalanced"
  },
  {
    "label": "StateExtensive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StateExtensive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MoveAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveAllocationData"
  },
  {
    "label": "VmaPool_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPool_T"
  },
  {
    "label": "VmaPoolListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPoolListItemTraits"
  },
  {
    "label": "VmaStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaStringBuilder"
  },
  {
    "label": "VmaPoolListItemTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaPoolListItemTraits"
  },
  {
    "label": "VmaCurrentBudgetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaCurrentBudgetData"
  },
  {
    "label": "VmaAllocationObjectAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaAllocationObjectAllocator"
  },
  {
    "label": "VmaVirtualBlock_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaVirtualBlock_T"
  },
  {
    "label": "VmaAllocator_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VmaAllocator_T"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "VmaJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VmaJsonWriter"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "ConstantBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstantBuffer"
  },
  {
    "label": "ConstantBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstantBuffer"
  },
  {
    "label": "CustomAllocData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CustomAllocData"
  },
  {
    "label": "vmaCreateAllocator()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateAllocator(\n    const VmaAllocatorCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocator VMA_NULLABLE* VMA_NOT_NULL pAllocator)"
  },
  {
    "label": "vmaDestroyAllocator()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaDestroyAllocator(\n    VmaAllocator VMA_NULLABLE allocator)"
  },
  {
    "label": "vmaGetAllocatorInfo()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetAllocatorInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocatorInfo* VMA_NOT_NULL pAllocatorInfo)"
  },
  {
    "label": "vmaGetPhysicalDeviceProperties()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetPhysicalDeviceProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkPhysicalDeviceProperties* VMA_NULLABLE* VMA_NOT_NULL ppPhysicalDeviceProperties)"
  },
  {
    "label": "vmaGetMemoryProperties()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetMemoryProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkPhysicalDeviceMemoryProperties* VMA_NULLABLE* VMA_NOT_NULL ppPhysicalDeviceMemoryProperties)"
  },
  {
    "label": "vmaGetMemoryTypeProperties()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetMemoryTypeProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t memoryTypeIndex,\n    VkMemoryPropertyFlags* VMA_NOT_NULL pFlags)"
  },
  {
    "label": "vmaSetCurrentFrameIndex()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaSetCurrentFrameIndex(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t frameIndex)"
  },
  {
    "label": "vmaCalculateStatistics()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCalculateStatistics(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaTotalStatistics* VMA_NOT_NULL pStats)"
  },
  {
    "label": "vmaFindMemoryTypeIndex()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFindMemoryTypeIndex(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t memoryTypeBits,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex)"
  },
  {
    "label": "vmaFindMemoryTypeIndexForBufferInfo()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFindMemoryTypeIndexForBufferInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex)"
  },
  {
    "label": "vmaFindMemoryTypeIndexForImageInfo()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFindMemoryTypeIndexForImageInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex)"
  },
  {
    "label": "vmaCreatePool()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreatePool(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaPoolCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaPool VMA_NULLABLE* VMA_NOT_NULL pPool)"
  },
  {
    "label": "vmaDestroyPool()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaDestroyPool(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NULLABLE pool)"
  },
  {
    "label": "vmaGetPoolStatistics()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetPoolStatistics(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    VmaStatistics* VMA_NOT_NULL pPoolStats)"
  },
  {
    "label": "vmaCalculatePoolStatistics()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCalculatePoolStatistics(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    VmaDetailedStatistics* VMA_NOT_NULL pPoolStats)"
  },
  {
    "label": "vmaCheckPoolCorruption()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCheckPoolCorruption(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool)"
  },
  {
    "label": "vmaGetPoolName()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetPoolName(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    const char* VMA_NULLABLE* VMA_NOT_NULL ppName)"
  },
  {
    "label": "vmaSetPoolName()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaSetPoolName(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    const char* VMA_NULLABLE pName)"
  },
  {
    "label": "vmaAllocateMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaAllocateMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkMemoryRequirements* VMA_NOT_NULL pVkMemoryRequirements,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaAllocateMemoryForBuffer()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaAllocateMemoryForBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkBuffer VMA_NOT_NULL_NON_DISPATCHABLE buffer,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaAllocateMemoryForImage()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaAllocateMemoryForImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkImage VMA_NOT_NULL_NON_DISPATCHABLE image,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaFreeMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFreeMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaAllocation VMA_NULLABLE allocation)"
  },
  {
    "label": "vmaGetAllocationInfo()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetAllocationInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VmaAllocationInfo* VMA_NOT_NULL pAllocationInfo)"
  },
  {
    "label": "vmaGetAllocationInfo2()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetAllocationInfo2(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VmaAllocationInfo2* VMA_NOT_NULL pAllocationInfo)"
  },
  {
    "label": "vmaSetAllocationUserData()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaSetAllocationUserData(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    void* VMA_NULLABLE pUserData)"
  },
  {
    "label": "vmaSetAllocationName()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaSetAllocationName(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    const char* VMA_NULLABLE pName)"
  },
  {
    "label": "vmaGetAllocationMemoryProperties()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetAllocationMemoryProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkMemoryPropertyFlags* VMA_NOT_NULL pFlags)"
  },
  {
    "label": "vmaMapMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaMapMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    void* VMA_NULLABLE* VMA_NOT_NULL ppData)"
  },
  {
    "label": "vmaUnmapMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaUnmapMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation)"
  },
  {
    "label": "vmaFlushAllocation()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFlushAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize offset,\n    VkDeviceSize size)"
  },
  {
    "label": "vmaInvalidateAllocation()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaInvalidateAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize offset,\n    VkDeviceSize size)"
  },
  {
    "label": "vmaCheckCorruption()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCheckCorruption(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t memoryTypeBits)"
  },
  {
    "label": "vmaBeginDefragmentation()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBeginDefragmentation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaDefragmentationInfo* VMA_NOT_NULL pInfo,\n    VmaDefragmentationContext VMA_NULLABLE* VMA_NOT_NULL pContext)"
  },
  {
    "label": "vmaEndDefragmentation()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaEndDefragmentation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NOT_NULL context,\n    VmaDefragmentationStats* VMA_NULLABLE pStats)"
  },
  {
    "label": "vmaBeginDefragmentationPass()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBeginDefragmentationPass(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NOT_NULL context,\n    VmaDefragmentationPassMoveInfo* VMA_NOT_NULL pPassInfo)"
  },
  {
    "label": "vmaEndDefragmentationPass()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaEndDefragmentationPass(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NOT_NULL context,\n    VmaDefragmentationPassMoveInfo* VMA_NOT_NULL pPassInfo)"
  },
  {
    "label": "vmaBindBufferMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBindBufferMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkBuffer VMA_NOT_NULL_NON_DISPATCHABLE buffer)"
  },
  {
    "label": "vmaBindImageMemory()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBindImageMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkImage VMA_NOT_NULL_NON_DISPATCHABLE image)"
  },
  {
    "label": "vmaCreateBuffer()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pBuffer,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaCreateBufferWithAlignment()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateBufferWithAlignment(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkDeviceSize minAlignment,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pBuffer,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaCreateAliasingBuffer()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateAliasingBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pBuffer)"
  },
  {
    "label": "vmaCreateAliasingBuffer2()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateAliasingBuffer2(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize allocationLocalOffset,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pBuffer)"
  },
  {
    "label": "vkDestroyBuffer()",
    "kind": "Method",
    "detail": "Function (code)",
    "insertText": "vkDestroyBuffer(device, buffer, allocationCallbacks)"
  },
  {
    "label": "vmaDestroyBuffer()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaDestroyBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE buffer,\n    VmaAllocation VMA_NULLABLE allocation)"
  },
  {
    "label": "vmaCreateImage()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pImage,\n    VmaAllocation VMA_NULLABLE* VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo)"
  },
  {
    "label": "vmaCreateAliasingImage()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateAliasingImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pImage)"
  },
  {
    "label": "vmaCreateAliasingImage2()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateAliasingImage2(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize allocationLocalOffset,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pImage)"
  },
  {
    "label": "vkDestroyImage()",
    "kind": "Method",
    "detail": "Function (code)",
    "insertText": "vkDestroyImage(device, image, allocationCallbacks)"
  },
  {
    "label": "vmaDestroyImage()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaDestroyImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE image,\n    VmaAllocation VMA_NULLABLE allocation)"
  },
  {
    "label": "vmaCreateVirtualBlock()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCreateVirtualBlock(\n    const VmaVirtualBlockCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaVirtualBlock VMA_NULLABLE* VMA_NOT_NULL pVirtualBlock)"
  },
  {
    "label": "vmaDestroyVirtualBlock()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaDestroyVirtualBlock(\n    VmaVirtualBlock VMA_NULLABLE virtualBlock)"
  },
  {
    "label": "vmaIsVirtualBlockEmpty()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaIsVirtualBlockEmpty(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock)"
  },
  {
    "label": "vmaGetVirtualAllocationInfo()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetVirtualAllocationInfo(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaVirtualAllocation VMA_NOT_NULL_NON_DISPATCHABLE allocation, VmaVirtualAllocationInfo* VMA_NOT_NULL pVirtualAllocInfo)"
  },
  {
    "label": "vmaVirtualAllocate()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaVirtualAllocate(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    const VmaVirtualAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaVirtualAllocation VMA_NULLABLE_NON_DISPATCHABLE* VMA_NOT_NULL pAllocation,\n    VkDeviceSize* VMA_NULLABLE pOffset)"
  },
  {
    "label": "vmaVirtualFree()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaVirtualFree(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaVirtualAllocation VMA_NULLABLE_NON_DISPATCHABLE allocation)"
  },
  {
    "label": "vmaClearVirtualBlock()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaClearVirtualBlock(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock)"
  },
  {
    "label": "vmaSetVirtualAllocationUserData()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaSetVirtualAllocationUserData(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaVirtualAllocation VMA_NOT_NULL_NON_DISPATCHABLE allocation,\n    void* VMA_NULLABLE pUserData)"
  },
  {
    "label": "vmaGetVirtualBlockStatistics()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaGetVirtualBlockStatistics(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaStatistics* VMA_NOT_NULL pStats)"
  },
  {
    "label": "vmaCalculateVirtualBlockStatistics()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaCalculateVirtualBlockStatistics(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaDetailedStatistics* VMA_NOT_NULL pStats)"
  },
  {
    "label": "vmaBuildVirtualBlockStatsString()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBuildVirtualBlockStatsString(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE* VMA_NOT_NULL ppStatsString,\n    VkBool32 detailedMap)"
  },
  {
    "label": "vmaFreeVirtualBlockStatsString()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFreeVirtualBlockStatsString(\n    VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE pStatsString)"
  },
  {
    "label": "vmaBuildStatsString()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaBuildStatsString(\n    VmaAllocator VMA_NOT_NULL allocator,\n    char* VMA_NULLABLE* VMA_NOT_NULL ppStatsString,\n    VkBool32 detailedMap)"
  },
  {
    "label": "vmaFreeStatsString()",
    "kind": "Method",
    "detail": "Function (VMA_CALL_POST)",
    "insertText": "vmaFreeStatsString(\n    VmaAllocator VMA_NOT_NULL allocator,\n    char* VMA_NULLABLE pStatsString)"
  },
  {
    "label": "memalign()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "memalign(alignment, size)"
  },
  {
    "label": "aligned_alloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "aligned_alloc(alignment, size)"
  },
  {
    "label": "_aligned_malloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_aligned_malloc(size, alignment)"
  },
  {
    "label": "aligned_alloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "aligned_alloc(alignment, size)"
  },
  {
    "label": "__popcnt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__popcnt(v)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VmaBufferImageUsage()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "VmaBufferImageUsage(const VkImageCreateInfo &createInfo)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "debugGlobalMutexLock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "debugGlobalMutexLock(gDebugGlobalMutex, true)"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cend()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(const T& src)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(size_t newCapacity, bool freeMemory = false)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t newCount)"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(size_t index, const T& src)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(size_t index)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "data()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(const T& src)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t newCount, bool freeMemory = false)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(bool freeMemory = false)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(size_t index, const T& src)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(size_t index)"
  },
  {
    "label": "VmaPoolAllocator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VmaPoolAllocator(const VkAllocationCallbacks* pAllocationCallbacks, uint32_t firstBlockCapacity)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(T* ptr)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront()"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBack()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(ItemType* pItem)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PushBack()"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PushFront()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(&m_RawList, VMA_NULL)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(&m_RawList, VMA_NULL)"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cend()"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "reverse_iterator(&m_RawList, VMA_NULL)"
  },
  {
    "label": "const_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_reverse_iterator(&m_RawList, VMA_NULL)"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "crend()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(ItemType* item)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFront(ItemType* item)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBefore(ItemType* existingItem, ItemType* newItem)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAfter(ItemType* existingItem, ItemType* newItem)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(ItemType* item)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "PushBack(newItem)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PushFront(newItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const char* pStr)"
  },
  {
    "label": "AddNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumber(uint32_t num)"
  },
  {
    "label": "AddNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumber(uint64_t num)"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPointer(const void* ptr)"
  },
  {
    "label": "BeginObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginObject(bool singleLine = false)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndObject()"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArray(bool singleLine = false)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndArray()"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const char* pStr)"
  },
  {
    "label": "BeginString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginString(const char* pStr = VMA_NULL)"
  },
  {
    "label": "ContinueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueString(const char* pStr)"
  },
  {
    "label": "ContinueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueString(uint32_t n)"
  },
  {
    "label": "ContinueString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueString(uint64_t n)"
  },
  {
    "label": "ContinueString_Pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueString_Pointer(const void* ptr)"
  },
  {
    "label": "EndString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndString(const char* pStr = VMA_NULL)"
  },
  {
    "label": "WriteNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNumber(uint32_t n)"
  },
  {
    "label": "WriteNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNumber(uint64_t n)"
  },
  {
    "label": "WriteBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBool(bool b)"
  },
  {
    "label": "WriteNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNull()"
  },
  {
    "label": "BeginValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginValue(bool isString)"
  },
  {
    "label": "WriteIndent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIndent(bool oneLess = false)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0 && \"Character not currently supported.\")"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(\n        VmaAllocator hAllocator,\n        VmaPool hParentPool,\n        uint32_t newMemoryTypeIndex,\n        VkDeviceMemory newMemory,\n        VkDeviceSize newSize,\n        uint32_t id,\n        uint32_t algorithm,\n        VkDeviceSize bufferImageGranularity)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(VmaAllocator allocator)"
  },
  {
    "label": "PostAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAlloc(VmaAllocator hAllocator)"
  },
  {
    "label": "PostFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFree(VmaAllocator hAllocator)"
  },
  {
    "label": "CheckCorruption()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CheckCorruption(VmaAllocator hAllocator)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Map(VmaAllocator hAllocator, uint32_t count, void** ppData)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unmap(VmaAllocator hAllocator, uint32_t count)"
  },
  {
    "label": "WriteMagicValueAfterAllocation()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "WriteMagicValueAfterAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize)"
  },
  {
    "label": "ValidateMagicValueAfterAllocation()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "ValidateMagicValueAfterAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize)"
  },
  {
    "label": "BindBufferMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindBufferMemory(\n        const VmaAllocator hAllocator,\n        const VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkBuffer hBuffer,\n        const void* pNext)"
  },
  {
    "label": "BindImageMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindImageMemory(\n        const VmaAllocator hAllocator,\n        const VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkImage hImage,\n        const void* pNext)"
  },
  {
    "label": "InitBlockAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBlockAllocation(\n        VmaDeviceMemoryBlock* block,\n        VmaAllocHandle allocHandle,\n        VkDeviceSize alignment,\n        VkDeviceSize size,\n        uint32_t memoryTypeIndex,\n        VmaSuballocationType suballocationType,\n        bool mapped)"
  },
  {
    "label": "InitDedicatedAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDedicatedAllocation(\n        VmaPool hParentPool,\n        uint32_t memoryTypeIndex,\n        VkDeviceMemory hMemory,\n        VmaSuballocationType suballocationType,\n        void* pMappedData,\n        VkDeviceSize size)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(VmaAllocator hAllocator, const char* pName)"
  },
  {
    "label": "FreeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeName(VmaAllocator hAllocator)"
  },
  {
    "label": "SwapBlockAllocation()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "SwapBlockAllocation(VmaAllocator hAllocator, VmaAllocation allocation)"
  },
  {
    "label": "BlockAllocMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockAllocMap()"
  },
  {
    "label": "BlockAllocUnmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockAllocUnmap()"
  },
  {
    "label": "DedicatedAllocMap()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "DedicatedAllocMap(VmaAllocator hAllocator, void** ppData)"
  },
  {
    "label": "DedicatedAllocUnmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DedicatedAllocUnmap(VmaAllocator hAllocator)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "AddDetailedStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDetailedStatistics(VmaDetailedStatistics& inoutStats)"
  },
  {
    "label": "AddStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStatistics(VmaStatistics& inoutStats)"
  },
  {
    "label": "BuildStatsString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStatsString(VmaJsonWriter& json)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(VmaAllocation alloc)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(VmaAllocation alloc)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_Mutex, m_UseMutex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const VkAllocationCallbacks* pAllocationCallbacks, VkDeviceSize size)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(const VkAllocationCallbacks* pAllocationCallbacks)"
  },
  {
    "label": "AllocPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocPages(uint8_t allocType, VkDeviceSize offset, VkDeviceSize size)"
  },
  {
    "label": "FreePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePages(VkDeviceSize offset, VkDeviceSize size)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "AllocPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocPage(RegionInfo& page, uint8_t allocType)"
  },
  {
    "label": "VmaBlockMetadata_Linear()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VmaBlockMetadata_Linear(const VkAllocationCallbacks* pAllocationCallbacks,\n        VkDeviceSize bufferImageGranularity, bool isVirtual)"
  },
  {
    "label": "CleanupAfterFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAfterFree()"
  },
  {
    "label": "CreateAllocationRequest_LowerAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAllocationRequest_LowerAddress(\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest)"
  },
  {
    "label": "CreateAllocationRequest_UpperAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAllocationRequest_UpperAddress(\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (algorithm)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (SECOND_VECTOR_DOUBLE_STACK:)",
    "insertText": "VMA_ASSERT(0 && \"CRITICAL ERROR: Trying to use linear allocator as ring buffer while it was already used as double stack.\")"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0 && \"CRITICAL INTERNAL ERROR.\")"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (algorithm)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (algorithm)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (algorithm)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VmaBlockMetadata_TLSF()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VmaBlockMetadata_TLSF(const VkAllocationCallbacks* pAllocationCallbacks,\n        VkDeviceSize bufferImageGranularity, bool isVirtual)"
  },
  {
    "label": "RemoveFreeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFreeBlock(Block* block)"
  },
  {
    "label": "InsertFreeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFreeBlock(Block* block)"
  },
  {
    "label": "MergeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeBlock(Block* block, Block* prev)"
  },
  {
    "label": "CheckBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckBlock(\n        Block& block,\n        uint32_t listIndex,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        VmaAllocationRequest* pAllocationRequest)"
  },
  {
    "label": "VmaAddDetailedStatisticsAllocation()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "VmaAddDetailedStatisticsAllocation(inoutStats, block->size)"
  },
  {
    "label": "CheckBlock()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CheckBlock(*m_NullBlock, m_ListsCount, allocSize, allocAlignment, allocType, pAllocationRequest)"
  },
  {
    "label": "VmaBlockVector()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VmaBlockVector(\n        VmaAllocator hAllocator,\n        VmaPool hParentPool,\n        uint32_t memoryTypeIndex,\n        VkDeviceSize preferredBlockSize,\n        size_t minBlockCount,\n        size_t maxBlockCount,\n        VkDeviceSize bufferImageGranularity,\n        bool explicitBlockSize,\n        uint32_t algorithm,\n        float priority,\n        VkDeviceSize minAllocationAlignment,\n        void* pMemoryAllocateNext)"
  },
  {
    "label": "CreateMinBlocks()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateMinBlocks()"
  },
  {
    "label": "AddStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStatistics(VmaStatistics& inoutStats)"
  },
  {
    "label": "AddDetailedStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDetailedStatistics(VmaDetailedStatistics& inoutStats)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Allocate(\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        size_t allocationCount,\n        VmaAllocation* pAllocations)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(const VmaAllocation hAllocation)"
  },
  {
    "label": "PrintDetailedMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDetailedMap(class VmaJsonWriter& json)"
  },
  {
    "label": "CheckCorruption()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CheckCorruption()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(VmaDeviceMemoryBlock* pBlock)"
  },
  {
    "label": "IncrementallySortBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementallySortBlocks()"
  },
  {
    "label": "SortByFreeSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortByFreeSize()"
  },
  {
    "label": "AllocatePage()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocatePage(\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        VmaAllocation* pAllocation)"
  },
  {
    "label": "AllocateFromBlock()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateFromBlock(\n        VmaDeviceMemoryBlock* pBlock,\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        VmaAllocationCreateFlags allocFlags,\n        void* pUserData,\n        VmaSuballocationType suballocType,\n        uint32_t strategy,\n        VmaAllocation* pAllocation)"
  },
  {
    "label": "CommitAllocationRequest()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CommitAllocationRequest(\n        VmaAllocationRequest& allocRequest,\n        VmaDeviceMemoryBlock* pBlock,\n        VkDeviceSize alignment,\n        VmaAllocationCreateFlags allocFlags,\n        void* pUserData,\n        VmaSuballocationType suballocType,\n        VmaAllocation* pAllocation)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateBlock(VkDeviceSize blockSize, size_t* pNewBlockIndex)"
  },
  {
    "label": "HasEmptyBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEmptyBlock()"
  },
  {
    "label": "VmaDefragmentationContext_T()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VmaDefragmentationContext_T(\n        VmaAllocator hAllocator,\n        const VmaDefragmentationInfo& info)"
  },
  {
    "label": "DefragmentPassBegin()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "DefragmentPassBegin(VmaDefragmentationPassMoveInfo& moveInfo)"
  },
  {
    "label": "DefragmentPassEnd()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "DefragmentPassEnd(VmaDefragmentationPassMoveInfo& moveInfo)"
  },
  {
    "label": "GetMoveData()",
    "kind": "Method",
    "detail": "Function (MoveAllocationData)",
    "insertText": "GetMoveData(VmaAllocHandle handle, VmaBlockMetadata* metadata)"
  },
  {
    "label": "CheckCounters()",
    "kind": "Method",
    "detail": "Function (CounterStatus)",
    "insertText": "CheckCounters(VkDeviceSize bytes)"
  },
  {
    "label": "IncrementCounters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncrementCounters(VkDeviceSize bytes)"
  },
  {
    "label": "ReallocWithinBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReallocWithinBlock(VmaBlockVector& vector, VmaDeviceMemoryBlock* block)"
  },
  {
    "label": "AllocInOtherBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocInOtherBlock(size_t start, size_t end, MoveAllocationData& data, VmaBlockVector& vector)"
  },
  {
    "label": "ComputeDefragmentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefragmentation(VmaBlockVector& vector, size_t index)"
  },
  {
    "label": "ComputeDefragmentation_Fast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefragmentation_Fast(VmaBlockVector& vector)"
  },
  {
    "label": "ComputeDefragmentation_Balanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefragmentation_Balanced(VmaBlockVector& vector, size_t index, bool update)"
  },
  {
    "label": "ComputeDefragmentation_Full()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefragmentation_Full(VmaBlockVector& vector)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefragmentation_Extensive(VmaBlockVector& vector, size_t index)"
  },
  {
    "label": "UpdateVectorStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVectorStatistics(VmaBlockVector& vector, StateBalanced& state)"
  },
  {
    "label": "MoveDataToFreeBlocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveDataToFreeBlocks(VmaSuballocationType currentType,\n        VmaBlockVector& vector, size_t firstFreeBlock,\n        bool& texturePresent, bool& bufferPresent, bool& otherPresent)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const char* pName)"
  },
  {
    "label": "PrintDetailedMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDetailedMap(class VmaStringBuilder& sb)"
  },
  {
    "label": "VmaCurrentBudgetData()",
    "kind": "Method",
    "detail": "Function (VMA_MEMORY_BUDGET)",
    "insertText": "VmaCurrentBudgetData()"
  },
  {
    "label": "AddAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocation(uint32_t heapIndex, VkDeviceSize allocationSize)"
  },
  {
    "label": "RemoveAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllocation(uint32_t heapIndex, VkDeviceSize allocationSize)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (VmaAllocation)",
    "insertText": "Allocate(Types&&... args)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(VmaAllocation hAlloc)"
  },
  {
    "label": "mutexLock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "mutexLock(m_Mutex)"
  },
  {
    "label": "mutexLock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "mutexLock(m_Mutex)"
  },
  {
    "label": "GetAllocationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocationInfo(VmaVirtualAllocation allocation, VmaVirtualAllocationInfo& outInfo)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Allocate(const VmaVirtualAllocationCreateInfo& createInfo, VmaVirtualAllocation& outAllocation,\n        VkDeviceSize* outOffset)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Init(const VmaAllocatorCreateInfo* pCreateInfo)"
  },
  {
    "label": "AllocateMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateMemory(\n        const VkMemoryRequirements& vkMemReq,\n        bool requiresDedicatedAllocation,\n        bool prefersDedicatedAllocation,\n        VkBuffer dedicatedBuffer,\n        VkImage dedicatedImage,\n        VmaBufferImageUsage dedicatedBufferImageUsage,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        size_t allocationCount,\n        VmaAllocation* pAllocations)"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMemory(\n        size_t allocationCount,\n        const VmaAllocation* pAllocations)"
  },
  {
    "label": "CalculateStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateStatistics(VmaTotalStatistics* pStats)"
  },
  {
    "label": "GetHeapBudgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeapBudgets(\n        VmaBudget* outBudgets, uint32_t firstHeap, uint32_t heapCount)"
  },
  {
    "label": "PrintDetailedMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDetailedMap(class VmaJsonWriter& json)"
  },
  {
    "label": "GetAllocationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocationInfo(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)"
  },
  {
    "label": "GetAllocationInfo2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocationInfo2(VmaAllocation hAllocation, VmaAllocationInfo2* pAllocationInfo)"
  },
  {
    "label": "CreatePool()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreatePool(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)"
  },
  {
    "label": "DestroyPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPool(VmaPool pool)"
  },
  {
    "label": "GetPoolStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoolStatistics(VmaPool pool, VmaStatistics* pPoolStats)"
  },
  {
    "label": "CalculatePoolStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePoolStatistics(VmaPool pool, VmaDetailedStatistics* pPoolStats)"
  },
  {
    "label": "SetCurrentFrameIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentFrameIndex(uint32_t frameIndex)"
  },
  {
    "label": "CheckPoolCorruption()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CheckPoolCorruption(VmaPool hPool)"
  },
  {
    "label": "CheckCorruption()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CheckCorruption(uint32_t memoryTypeBits)"
  },
  {
    "label": "AllocateVulkanMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)"
  },
  {
    "label": "FreeVulkanMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVulkanMemory(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)"
  },
  {
    "label": "BindVulkanBuffer()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindVulkanBuffer(\n        VkDeviceMemory memory,\n        VkDeviceSize memoryOffset,\n        VkBuffer buffer,\n        const void* pNext)"
  },
  {
    "label": "BindVulkanImage()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindVulkanImage(\n        VkDeviceMemory memory,\n        VkDeviceSize memoryOffset,\n        VkImage image,\n        const void* pNext)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Map(VmaAllocation hAllocation, void** ppData)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unmap(VmaAllocation hAllocation)"
  },
  {
    "label": "BindBufferMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindBufferMemory(\n        VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkBuffer hBuffer,\n        const void* pNext)"
  },
  {
    "label": "BindImageMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "BindImageMemory(\n        VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkImage hImage,\n        const void* pNext)"
  },
  {
    "label": "FlushOrInvalidateAllocation()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "FlushOrInvalidateAllocation(\n        VmaAllocation hAllocation,\n        VkDeviceSize offset, VkDeviceSize size,\n        VMA_CACHE_OPERATION op)"
  },
  {
    "label": "FlushOrInvalidateAllocations()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "FlushOrInvalidateAllocations(\n        uint32_t allocationCount,\n        const VmaAllocation* allocations,\n        const VkDeviceSize* offsets, const VkDeviceSize* sizes,\n        VMA_CACHE_OPERATION op)"
  },
  {
    "label": "CopyMemoryToAllocation()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CopyMemoryToAllocation(\n        const void* pSrcHostPointer,\n        VmaAllocation dstAllocation,\n        VkDeviceSize dstAllocationLocalOffset,\n        VkDeviceSize size)"
  },
  {
    "label": "CopyAllocationToMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CopyAllocationToMemory(\n        VmaAllocation srcAllocation,\n        VkDeviceSize srcAllocationLocalOffset,\n        void* pDstHostPointer,\n        VkDeviceSize size)"
  },
  {
    "label": "FillAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAllocation(const VmaAllocation hAllocation, uint8_t pattern)"
  },
  {
    "label": "GetGpuDefragmentationMemoryTypeBits()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetGpuDefragmentationMemoryTypeBits()"
  },
  {
    "label": "ImportVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions(const VmaVulkanFunctions* pVulkanFunctions)"
  },
  {
    "label": "ImportVulkanFunctions_Static()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions_Static()"
  },
  {
    "label": "ImportVulkanFunctions_Custom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions_Custom(const VmaVulkanFunctions* pVulkanFunctions)"
  },
  {
    "label": "ImportVulkanFunctions_Dynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions_Dynamic()"
  },
  {
    "label": "ValidateVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateVulkanFunctions()"
  },
  {
    "label": "CalcPreferredBlockSize()",
    "kind": "Method",
    "detail": "Function (VkDeviceSize)",
    "insertText": "CalcPreferredBlockSize(uint32_t memTypeIndex)"
  },
  {
    "label": "AllocateMemoryOfType()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateMemoryOfType(\n        VmaPool pool,\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        bool dedicatedPreferred,\n        VkBuffer dedicatedBuffer,\n        VkImage dedicatedImage,\n        VmaBufferImageUsage dedicatedBufferImageUsage,\n        const VmaAllocationCreateInfo& createInfo,\n        uint32_t memTypeIndex,\n        VmaSuballocationType suballocType,\n        VmaDedicatedAllocationList& dedicatedAllocations,\n        VmaBlockVector& blockVector,\n        size_t allocationCount,\n        VmaAllocation* pAllocations)"
  },
  {
    "label": "AllocateDedicatedMemoryPage()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateDedicatedMemoryPage(\n        VmaPool pool,\n        VkDeviceSize size,\n        VmaSuballocationType suballocType,\n        uint32_t memTypeIndex,\n        const VkMemoryAllocateInfo& allocInfo,\n        bool map,\n        bool isUserDataString,\n        bool isMappingAllowed,\n        void* pUserData,\n        VmaAllocation* pAllocation)"
  },
  {
    "label": "AllocateDedicatedMemory()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "AllocateDedicatedMemory(\n        VmaPool pool,\n        VkDeviceSize size,\n        VmaSuballocationType suballocType,\n        VmaDedicatedAllocationList& dedicatedAllocations,\n        uint32_t memTypeIndex,\n        bool map,\n        bool isUserDataString,\n        bool isMappingAllowed,\n        bool canAliasMemory,\n        void* pUserData,\n        float priority,\n        VkBuffer dedicatedBuffer,\n        VkImage dedicatedImage,\n        VmaBufferImageUsage dedicatedBufferImageUsage,\n        size_t allocationCount,\n        VmaAllocation* pAllocations,\n        const void* pNextChain = VMA_NULL)"
  },
  {
    "label": "FreeDedicatedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDedicatedMemory(const VmaAllocation allocation)"
  },
  {
    "label": "CalcMemTypeParams()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CalcMemTypeParams(\n        VmaAllocationCreateInfo& outCreateInfo,\n        uint32_t memTypeIndex,\n        VkDeviceSize size,\n        size_t allocationCount)"
  },
  {
    "label": "CalcAllocationParams()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CalcAllocationParams(\n        VmaAllocationCreateInfo& outCreateInfo,\n        bool dedicatedRequired,\n        bool dedicatedPreferred)"
  },
  {
    "label": "UpdateVulkanBudget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVulkanBudget()"
  },
  {
    "label": "VmaMalloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VmaMalloc(&hAllocator->m_AllocationCallbacks, size, alignment)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLock)",
    "insertText": "lock(m_MapAndBindMutex, hAllocator->m_UseMutex)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "CommitAllocationRequest()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CommitAllocationRequest(currRequest, pBlock, alignment, allocFlags, pUserData, suballocType, pAllocation)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_Mutex, m_hAllocator->m_UseMutex)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "blockAllocator()",
    "kind": "Method",
    "detail": "Function (VmaStlAllocator<FragmentedBlock>)",
    "insertText": "blockAllocator(m_MoveAllocator.m_pCallbacks)"
  },
  {
    "label": "immovableBlocks()",
    "kind": "Method",
    "detail": "Function (VmaStlAllocator<FragmentedBlock>>)",
    "insertText": "immovableBlocks(blockAllocator)"
  },
  {
    "label": "mappedBlocks()",
    "kind": "Method",
    "detail": "Function (VmaStlAllocator<FragmentedBlock>>)",
    "insertText": "mappedBlocks(blockAllocator)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Fast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Fast(vector)"
  },
  {
    "label": "ComputeDefragmentation_Balanced()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Balanced(vector, index, true)"
  },
  {
    "label": "ComputeDefragmentation_Full()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Full(vector)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Extensive(vector, index)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Balanced()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Balanced(vector, index, true)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Balanced()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Balanced(vector, index, false)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Full()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Full(vector)"
  },
  {
    "label": "ComputeDefragmentation_Fast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Fast(vector)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Fast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Fast(vector)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Extensive(vector, index)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Extensive(vector, index)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Extensive(vector, index)"
  },
  {
    "label": "ComputeDefragmentation_Extensive()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDefragmentation_Extensive(vector, index)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "ValidateVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "ValidateVulkanFunctions()"
  },
  {
    "label": "FreeDedicatedMemory()",
    "kind": "Method",
    "detail": "Function (VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:)",
    "insertText": "FreeDedicatedMemory(allocation)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_PoolsMutex, m_UseMutex)"
  },
  {
    "label": "lockRead()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lockRead(m_Budget.m_BudgetMutex, m_UseMutex)"
  },
  {
    "label": "GetHeapBudgets()",
    "kind": "Method",
    "detail": "Function (lock)",
    "insertText": "GetHeapBudgets(outBudgets, firstHeap, heapCount)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_PoolsMutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lock(m_PoolsMutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_PoolsMutex, m_UseMutex)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "VMA_ASSERT()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "VMA_ASSERT(0)"
  },
  {
    "label": "lockWrite()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockWrite)",
    "insertText": "lockWrite(m_Budget.m_BudgetMutex, m_UseMutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (VmaMutexLockRead)",
    "insertText": "lock(m_PoolsMutex, m_UseMutex)"
  },
  {
    "label": "VMA_DEBUG_LOG()",
    "kind": "Method",
    "detail": "Function (VMA_DEBUG_GLOBAL_MUTEX_LOCK)",
    "insertText": "VMA_DEBUG_LOG(\"vmaCheckPoolCorruption\")"
  },
  {
    "label": "vmaCreateAliasingBuffer2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vmaCreateAliasingBuffer2(allocator, allocation, 0, pBufferCreateInfo, pBuffer)"
  },
  {
    "label": "vmaCreateAliasingImage2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vmaCreateAliasingImage2(allocator, allocation, 0, pImageCreateInfo, pImage)"
  },
  {
    "label": "sb()",
    "kind": "Method",
    "detail": "Function (VmaStringBuilder)",
    "insertText": "sb(allocationCallbacks)"
  },
  {
    "label": "vmaDestroyAllocator()",
    "kind": "Method",
    "detail": "Function (to:)",
    "insertText": "vmaDestroyAllocator(allocator)"
  },
  {
    "label": "vmaDestroyBuffer()",
    "kind": "Method",
    "detail": "Function (code)",
    "insertText": "vmaDestroyBuffer(allocator, buffer, allocation)"
  },
  {
    "label": "vmaDestroyBuffer()",
    "kind": "Method",
    "detail": "Function (code)",
    "insertText": "vmaDestroyBuffer(allocator, buf, alloc)"
  },
  {
    "label": "vmaVirtualFree()",
    "kind": "Method",
    "detail": "Function (code)",
    "insertText": "vmaVirtualFree(block, alloc)"
  },
  {
    "label": "CustomAllocData()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "CustomAllocData()"
  },
  {
    "label": "vkCmdCopyBuffer()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "vkCmdCopyBuffer(cmdBuf, stagingBuf, buf, 1, &bufCopy)"
  }
]