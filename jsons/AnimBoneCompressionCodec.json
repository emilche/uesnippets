[
  {
    "label": "UAnimBoneCompressionCodec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionCodec"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedCurve"
  },
  {
    "label": "FBoneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneData"
  },
  {
    "label": "FAnimPoseDecompressionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPoseDecompressionData"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / AnimEnums . h \" # include \" Animation / AnimCompressionTypes . h \" # include \" AnimEncoding . h \" # include \" AnimBoneCompressionCodec . generated . h \" class UAnimBoneCompressionCodec ; class UAnimSequence ; struct FBlendedCurve ; class FBoneData ; namespace UE::Anim { struct FAnimPoseDecompressionData ; })",
    "insertText": "UCLASS(abstract, hidecategories = Object, EditInlineNew, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(Category = Compression, EditAnywhere)"
  },
  {
    "label": "IsCodecValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsCodecValid()"
  },
  {
    "label": "EstimateCompressionMemoryUsage()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "EstimateCompressionMemoryUsage(const UAnimSequence& AnimSequence)"
  },
  {
    "label": "PopulateDDCKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDDCKey(const UE::Anim::Compression::FAnimDDCKeyArgs& KeyArgs, FArchive& Ar)"
  },
  {
    "label": "GetCodec()",
    "kind": "Method",
    "detail": "Function (# endif UAnimBoneCompressionCodec*)",
    "insertText": "GetCodec(const FString& DDCHandle)"
  },
  {
    "label": "GetCodecDDCHandle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCodecDDCHandle()"
  },
  {
    "label": "AllocateAnimData()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ICompressedAnimData>)",
    "insertText": "AllocateAnimData() const PURE_VIRTUAL(UAnimCurveCompressionCodec::AllocateAnimData, return TUniquePtr<ICompressedAnimData>();)"
  },
  {
    "label": "ByteSwapIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapIn(ICompressedAnimData& AnimData, TArrayView<uint8> CompressedData, FMemoryReader& MemoryStream) const PURE_VIRTUAL(UAnimCurveCompressionCodec::ByteSwapIn,)"
  },
  {
    "label": "ByteSwapOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapOut(ICompressedAnimData& AnimData, TArrayView<uint8> CompressedData, FMemoryWriter& MemoryStream) const PURE_VIRTUAL(UAnimCurveCompressionCodec::ByteSwapOut,)"
  },
  {
    "label": "DecompressPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressPose(FAnimSequenceDecompressionContext& DecompContext, const BoneTrackArray& RotationPairs, const BoneTrackArray& TranslationPairs, const BoneTrackArray& ScalePairs, TArrayView<FTransform>& OutAtoms) const PURE_VIRTUAL(UAnimCurveCompressionCodec::DecompressPose,)"
  },
  {
    "label": "DecompressBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressBone(FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex, FTransform& OutAtom) const PURE_VIRTUAL(UAnimCurveCompressionCodec::DecompressBone,)"
  },
  {
    "label": "DecompressPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressPose(FAnimSequenceDecompressionContext& DecompContext, const UE::Anim::FAnimPoseDecompressionData& DecompressionData)"
  }
]