[
  {
    "label": "FMallocStomp2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocStomp2"
  },
  {
    "label": "FAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationData"
  },
  {
    "label": "FAddressSpaceStompDataBlockRangeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressSpaceStompDataBlockRangeEntry"
  },
  {
    "label": "FAddressSpaceStompDataBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressSpaceStompDataBlock"
  },
  {
    "label": "FScopeDisableMallocStomp2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeDisableMallocStomp2"
  },
  {
    "label": "GetAlignedSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformTLS . h \" # ifndef WITH_MALLOC_STOMP2 # define WITH_MALLOC_STOMP2 WITH_EDITOR&& PLATFORM_WINDOWS # endif # if WITH_MALLOC_STOMP2 # include<atomic> # if PLATFORM_MICROSOFT # include \" Microsoft / WindowsHWrapper . h \" # endif class FMallocStomp2 final : public FMalloc { private : SIZE_T)",
    "insertText": "GetAlignedSize(SIZE_T InSize, SIZE_T InAlignment)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_64BITS SIZE_T SentinelExpectedValue = 0 xdeadbeefdeadbeef ; # else SIZE_T SentinelExpectedValue = 0 xdeadbeef ; # endif const SIZE_T PageSize ; struct FAllocationData { void* FullAllocationPointer ; SIZE_T FullSize ; SIZE_T Size ; SIZE_T Sentinel ; } ; public : struct FAddressSpaceStompDataBlockRangeEntry { UPTRINT StartAddress ; UPTRINT EndAddress ; int StartIndex ; int EndIndex ; } ; struct FAddressSpaceStompDataBlock { SIZE_T VirtualAddressSpaceToReserve = 1 0 2 4 LL* 1 0 2 4 LL* 1 0 2 4 LL* 6 4 LL ; std::atomic<UPTRINT> CurrentAddress ; UPTRINT StartAddress ; UPTRINT EndAddress ; SIZE_T Size ; bool)",
    "insertText": "Init()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SIZE_T SizeToTryAndReserve = VirtualAddressSpaceToReserve ;)",
    "insertText": "while(SizeToTryAndReserve >= 1024LL * 1024LL * 1024LL)"
  },
  {
    "label": "StartAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAddress(UPTRINT) ::VirtualAlloc(nullptr, SizeToTryAndReserve, MEM_RESERVE, PAGE_READWRITE)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (EndAddress = StartAddress + SizeToTryAndReserve ; Size = SizeToTryAndReserve ; CurrentAddress = StartAddress ; return true ; } SizeToTryAndReserve / = 2 ; } return false ; } void*)",
    "insertText": "Malloc(SIZE_T InSizeToAllocate, SIZE_T InPageSize, bool InUnderrun = false)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (UPTRINT Ret = CurrentAddress .)",
    "insertText": "fetch_add(InSizeToAllocate)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ret(UPTRINT) ::VirtualAlloc((void*)Ret, InSizeToAllocate - InPageSize, MEM_COMMIT, PAGE_READWRITE)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Ret(UPTRINT) ::VirtualAlloc((void*)(Ret+InPageSize), InSizeToAllocate, MEM_COMMIT, PAGE_READWRITE)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(void*)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void* InPtr, SIZE_T InSize)"
  },
  {
    "label": "MSVC_PRAGMA()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS&& USING_CODE_ANALYSIS)",
    "insertText": "MSVC_PRAGMA(warning(push)) MSVC_PRAGMA(warning(disable : 6250)) #endif ::VirtualFree(InPtr, InSize, MEM_DECOMMIT)"
  },
  {
    "label": "MSVC_PRAGMA()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS&& USING_CODE_ANALYSIS)",
    "insertText": "MSVC_PRAGMA(warning(pop))"
  },
  {
    "label": "IsPartOf()",
    "kind": "Method",
    "detail": "Function (private : SIZE_T TargetAddressSpaceToReserve = 1 0 2 4 LL* 1 0 2 4 LL* 1 0 2 4 LL* 1 0 2 4 LL* 3 2 LL ; SIZE_T MaxAddressSpaceStompDataBlocks = 4 0 9 6 ; std::atomic<int64> CurrentAddressSpaceStompDataBlockIndex ; FAddressSpaceStompDataBlock AddressSpaceStompDataBlocks [ MaxAddressSpaceStompDataBlocks ] ; int NumberOfRangeEntries ; FAddressSpaceStompDataBlockRangeEntry AddressSpaceStompDataBlocksRangeEntries [ MaxAddressSpaceStompDataBlocks ] ; FMalloc* UsedMalloc ; int)",
    "insertText": "IsPartOf(void* InPtr)"
  },
  {
    "label": "FindAddressSpaceStompDataBlockIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindAddressSpaceStompDataBlockIndex(void* InPtr, int Index)"
  },
  {
    "label": "FMallocStomp2()",
    "kind": "Method",
    "detail": "Function (const bool bUseUnderrunMode ; public :)",
    "insertText": "FMallocStomp2(FMalloc* InMalloc, const bool InUseUnderrunMode = false)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "TryMalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryMalloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* InPtr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "TryRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryRealloc(void* InPtr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* InPtr)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(FOutputDevice& Ar)"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "FScopeDisableMallocStomp2()",
    "kind": "Method",
    "detail": "Function (uint32 DisableTlsSlot ; SIZE_T MinSize ; SIZE_T MaxSize ; } ; class FScopeDisableMallocStomp2 { public :)",
    "insertText": "FScopeDisableMallocStomp2()"
  },
  {
    "label": "DisableCounter()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "DisableCounter(uint64)FPlatformTLS::GetTlsValue(FMallocStomp2::DisableTlsSlot)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (+ + DisableCounter ;)",
    "insertText": "SetTlsValue(FMallocStomp2::DisableTlsSlot, (void*)DisableCounter)"
  }
]