[
  {
    "label": "GraphId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphId"
  },
  {
    "label": "GraphCycles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphCycles"
  },
  {
    "label": "Rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rep"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_INTERNAL_GRAPHCYCLES_H_ # define ABSL_SYNCHRONIZATION_INTERNAL_GRAPHCYCLES_H_ # include<cstdint> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace synchronization_internal { struct GraphId { uint64_t handle ; bool)",
    "insertText": "operator(const GraphId& x)"
  },
  {
    "label": "GraphCycles()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GraphCycles()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (GraphId)",
    "insertText": "GetId(void* ptr)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(void* ptr)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Ptr(GraphId id)"
  },
  {
    "label": "InsertEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertEdge(GraphId source_node, GraphId dest_node)"
  },
  {
    "label": "RemoveEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEdge(GraphId source_node, GraphId dest_node)"
  },
  {
    "label": "HasNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNode(GraphId node)"
  },
  {
    "label": "HasEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdge(GraphId source_node, GraphId dest_node)"
  },
  {
    "label": "IsReachable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReachable(GraphId source_node, GraphId dest_node)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindPath(GraphId source, GraphId dest, int max_path_len, GraphId path[])"
  },
  {
    "label": "UpdateStackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStackTrace(GraphId id, int priority, int (*get_stack_trace)(void**, int))"
  },
  {
    "label": "GetStackTrace()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStackTrace(GraphId id, void*** ptr)"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "GraphCycles()",
    "kind": "Method",
    "detail": "Function (struct Rep ; private : Rep* rep_ ;)",
    "insertText": "GraphCycles(const GraphCycles&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GraphCycles&)",
    "insertText": "operator(const GraphCycles&)"
  }
]