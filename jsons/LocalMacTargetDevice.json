[
  {
    "label": "FLocalMacTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalMacTargetDevice"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FLocalMacTargetDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / ITargetDevice . h \" # include \" Interfaces / ITargetPlatformControls . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformProcess . h \" class FLocalMacTargetDevice : public ITargetDevice { public :)",
    "insertText": "FLocalMacTargetDevice(const ITargetPlatformControls& InTargetPlatformControls) : TargetPlatformControls(InTargetPlatformControls)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Connect()"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (} ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC NSAppleScript* Script = [ [ NSAppleScript alloc ] initWithSource : @ \" tell application \\ \" System Events \\ \" to restart \" ] ; NSDictionary* ErrorDict = [ NSDictionary dictionary ] ; [ Script executeAndReturnError :& ErrorDict ] ; # endif return true ; } bool)",
    "insertText": "SupportsFeature(ETargetDeviceFeatures Feature)"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  }
]