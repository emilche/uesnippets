[
  {
    "label": "SimpleStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleStringBuilder"
  },
  {
    "label": "StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuilder"
  },
  {
    "label": "SimpleStringBuilder()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_STRINGS_STRING_BUILDER_H_ # define RTC_BASE_STRINGS_STRING_BUILDER_H_ # include<cstdio> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" rtc_base / string_encode . h \" namespace rtc { class SimpleStringBuilder { public :)",
    "insertText": "SimpleStringBuilder(rtc::ArrayView<char> buffer)"
  },
  {
    "label": "SimpleStringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleStringBuilder(const SimpleStringBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(const SimpleStringBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(char ch)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(absl::string_view str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(int i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(unsigned i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(long i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(long long i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(unsigned long i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(unsigned long long i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(float f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(double f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleStringBuilder&)",
    "insertText": "operator(long double f)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "str()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (} const rtc::ArrayView<char> buffer_ ; size_t size_ = 0 ; } ; class StringBuilder { public :)",
    "insertText": "StringBuilder()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringBuilder(absl::string_view s) : str_(s)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringBuilder(const StringBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "operator(const StringBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "operator(const absl::string_view str)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (str_ .)",
    "insertText": "append(str.data(), str.length())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (str_ + =)",
    "insertText": "ToString(i)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (str_ + =)",
    "insertText": "ToString(f)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (str_ .)",
    "insertText": "clear()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Release()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (std::string ret =)",
    "insertText": "move(str_)"
  }
]