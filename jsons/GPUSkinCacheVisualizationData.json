[
  {
    "label": "FGPUSkinCacheVisualizationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCacheVisualizationData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FModeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModeRecord"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Async / Mutex . h \" class FGPUSkinCacheVisualizationData { public : enum class FModeType : uint8 { Overview,Memory,RayTracingLODOffset,Num } ; struct FModeRecord { FString ModeString ; FName ModeName ; FText ModeText ; FText ModeDesc ; FModeType ModeType ; } ; typedef TMap<FName,FModeRecord> TModeMap ; public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(const FName& InViewMode)"
  },
  {
    "label": "GetModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetModeDisplayName(const FName& InModeName)"
  },
  {
    "label": "GetModeType()",
    "kind": "Method",
    "detail": "Function (FModeType)",
    "insertText": "GetModeType(const FName& InModeName)"
  },
  {
    "label": "GetModeMap()",
    "kind": "Method",
    "detail": "Function (const TModeMap&)",
    "insertText": "GetModeMap()"
  },
  {
    "label": "ConfigureConsoleCommand()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ConfigureConsoleCommand()"
  },
  {
    "label": "AddVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVisualizationMode(const TCHAR* ModeString, const FText& ModeText, const FText& ModeDesc, const FModeType ModeType)"
  },
  {
    "label": "SetActiveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveMode(FModeType ModeType, const FName& ModeName)"
  },
  {
    "label": "GetGPUSkinCacheVisualizationData()",
    "kind": "Method",
    "detail": "Function (private : UE::FMutex Mutex ; TModeMap ModeMap ; FModeType ActiveVisualizationModeType = FModeType::Num ; FName ActiveVisualizationModeName = NAME_None ; FString ConsoleDocumentationVisualizationMode ; std::atomic_bool bIsInitialized = { false } ; } ; FGPUSkinCacheVisualizationData&)",
    "insertText": "GetGPUSkinCacheVisualizationData()"
  }
]