[
  {
    "label": "Matrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matrix"
  },
  {
    "label": "NVMATH_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVMATH_CLASS"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_PLANE_H # define NV_MATH_PLANE_H # include<nvmath / nvmath . h> # include<nvmath / Vector . h> namespace nv { class Matrix ; class NVMATH_CLASS Plane { public : typedef Plane const& Arg ;)",
    "insertText": "Plane()"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plane(float x, float y, float z, float w)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plane(Vector4::Arg v)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plane(Vector3::Arg v, float d)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plane(Vector3::Arg normal, Vector3::Arg point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const Plane&)",
    "insertText": "operator(Plane::Arg v)"
  },
  {
    "label": "vector()",
    "kind": "Method",
    "detail": "Function (Vector3)",
    "insertText": "vector()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (scalar)",
    "insertText": "offset()"
  },
  {
    "label": "asVector()",
    "kind": "Method",
    "detail": "Function (const Vector4&)",
    "insertText": "asVector()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(scalar s)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Plane(float x, float y, float z, float w) : p(x, y, z, w)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Plane(Vector4::Arg v) : p(v)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Plane(Vector3::Arg v, float d) : p(v, d)"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Plane(Vector3::Arg normal, Vector3::Arg point) : p(normal, dot(normal, point))"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (const float len =)",
    "insertText": "length(plane.vector())"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(!isZero(len, epsilon))"
  },
  {
    "label": "Plane()",
    "kind": "Method",
    "detail": "Function (const float inv = 1 . 0 f / len ; return)",
    "insertText": "Plane(plane.asVector() * inv)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "distance(Plane::Arg plane, Vector3::Arg point)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scale(p, s)"
  },
  {
    "label": "transformPlane()",
    "kind": "Method",
    "detail": "Function (} Plane)",
    "insertText": "transformPlane(const Matrix&, Plane::Arg)"
  }
]