[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FCursorReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCursorReply"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FPopupMethodReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupMethodReply"
  },
  {
    "label": "FWindowActivateEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowActivateEvent"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputKeyEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyEventArgs"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FStatHitchesData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHitchesData"
  },
  {
    "label": "FStatUnitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatUnitData"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FCommonViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommonViewportClient"
  },
  {
    "label": "FViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / EngineBaseTypes . h \" # include \" GenericPlatform / ICursor . h \" # include \" InputCoreTypes . h \" # include \" Misc / DateTime . h \" class FCanvas ; class FCursorReply ; class FViewport ; class FPopupMethodReply ; class FWindowActivateEvent ; class SWidget ; enum class EFocusCause : uint8 ; enum class EGestureEvent : uint8 ; struct FInputKeyEventArgs ; struct FKey ; struct FStatHitchesData ; struct FStatUnitData ; class FViewportClient { public : ~)",
    "insertText": "FViewportClient()"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Precache()"
  },
  {
    "label": "RedrawRequested()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RedrawRequested(FViewport* Viewport)"
  },
  {
    "label": "RequestInvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInvalidateHitProxy(FViewport* Viewport)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport,FCanvas* Canvas)"
  },
  {
    "label": "ProcessScreenShots()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ProcessScreenShots(FViewport* Viewport)"
  },
  {
    "label": "WantsPollingMouseMovement()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "WantsPollingMouseMovement(void)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MouseLeave(FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MouseMove(FViewport* Viewport,int32 X,int32 Y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CapturedMouseMove(FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "ProcessAccumulatedPointerInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAccumulatedPointerInput(FViewport* InViewport)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (} ; EMouseCursor::Type)",
    "insertText": "GetCursor(FViewport* Viewport, int32 X,int32 Y)"
  },
  {
    "label": "QueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "QueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LostFocus(FViewport* Viewport)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedFocus(FViewport* Viewport)"
  },
  {
    "label": "IsFocused()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFocused(FViewport* Viewport)"
  },
  {
    "label": "Deactivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deactivated(FViewport* Viewport, const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "IsInPermanentCapture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInPermanentCapture()"
  },
  {
    "label": "WindowCloseRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WindowCloseRequested()"
  },
  {
    "label": "RequiresHitProxyStorage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresHitProxyStorage()"
  },
  {
    "label": "OverrideHighResScreenshotCaptureRegion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OverrideHighResScreenshotCaptureRegion(FIntRect& OutCaptureRegion)"
  },
  {
    "label": "IsStatEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStatEnabled(const FString& InName)"
  },
  {
    "label": "IgnoreInput()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IgnoreInput()"
  },
  {
    "label": "HandleNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNavigation(const uint32 InUserIndex, TSharedPtr<SWidget> InDestination)"
  },
  {
    "label": "FCommonViewportClient()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCommonViewportClient()"
  },
  {
    "label": "RequestUpdateDPIScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateDPIScale()"
  },
  {
    "label": "GetDPIDerivedResolutionFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIDerivedResolutionFraction()"
  },
  {
    "label": "GetDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScale()"
  },
  {
    "label": "DrawHighResScreenshotCaptureRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHighResScreenshotCaptureRegion(FCanvas& Canvas)"
  },
  {
    "label": "UpdateViewportClientWindowDPIScale()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "UpdateViewportClientWindowDPIScale()"
  }
]