[
  {
    "label": "TLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLiteral"
  },
  {
    "label": "TCharBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCharBase"
  },
  {
    "label": "TChar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TChar"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Traits / IntType . h \" # include<ctype . h> # include<wctype . h> # include<type_traits> template<T> struct TLiteral { const ANSICHAR)",
    "insertText": "Select(const ANSICHAR ansi, const WIDECHAR)"
  },
  {
    "label": "LineFeed()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "LineFeed(CharType)"
  },
  {
    "label": "VerticalTab()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "VerticalTab(CharType)"
  },
  {
    "label": "FormFeed()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "FormFeed(CharType)"
  },
  {
    "label": "CarriageReturn()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "CarriageReturn(CharType)"
  },
  {
    "label": "NextLine()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "NextLine(CharType)"
  },
  {
    "label": "LineSeparator()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "LineSeparator(CharType)"
  },
  {
    "label": "ParagraphSeparator()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "ParagraphSeparator(CharType)"
  },
  {
    "label": "IsLinebreak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinebreak(CharType Char)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; template<CharType> struct TChar : TCharBase<CharType,)",
    "insertText": "sizeof(CharType)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (CharType)",
    "insertText": "ToUpper(CharType Char)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (} CharType)",
    "insertText": "ToLower(CharType Char)"
  },
  {
    "label": "IsUpper()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUpper(CharType Char)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<CharType, WIDECHAR>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<CharType, UTF8CHAR>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(CharType) == 0, \"Not supported\")"
  },
  {
    "label": "ConvertCharDigitToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ConvertCharDigitToInt(CharType Char)"
  },
  {
    "label": "IsIdentifier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIdentifier(CharType Char)"
  },
  {
    "label": "IsUnderscore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnderscore(CharType Char)"
  },
  {
    "label": "ToUnsigned()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ToUnsigned(CharType Char)"
  }
]