[
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "UCurveLinearColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveLinearColor"
  },
  {
    "label": "UCurveLinearColorAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveLinearColorAtlas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "EMaterialParameterAssociation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialParameterAssociation"
  },
  {
    "label": "FMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterInfo"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageMaterialParameterInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FParameterChannelNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterChannelNames"
  },
  {
    "label": "FStaticComponentMaskValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticComponentMaskValue"
  },
  {
    "label": "FMaterialTextureValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialTextureValue"
  },
  {
    "label": "FMaterialParameterValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterValue"
  },
  {
    "label": "FMaterialParameterMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterMetadata"
  },
  {
    "label": "FSHA1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHA1"
  },
  {
    "label": "FSubstrateCompilationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateCompilationConfig"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Misc / EnumClassFlags . h \" # include \" Serialization / MemoryLayout . h \" # include \" UObject / SoftObjectPtr . h \" # include \" Shader / ShaderTypes . h \" # include \" MaterialTypes . generated . h \" class FShaderKeyGenerator ; class UTexture ; class UTextureCollection ; class UCurveLinearColor ; class UCurveLinearColorAtlas ; class UFont ; class URuntimeVirtualTexture ; class USparseVolumeTexture ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (LayerParameter,BlendParameter,GlobalParameter,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = ParameterInfo)"
  },
  {
    "label": "FMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialParameterInfo(const TCHAR* InName, EMaterialParameterAssociation InAssociation = EMaterialParameterAssociation::GlobalParameter, int32 InIndex = INDEX_NONE) : Name(InName) , Association(InAssociation) , Index(InIndex)"
  },
  {
    "label": "FMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterInfo(FName InName = FName(), EMaterialParameterAssociation InAssociation = EMaterialParameterAssociation::GlobalParameter, int32 InIndex = INDEX_NONE) : Name(InName) , Association(InAssociation) , Index(InIndex)"
  },
  {
    "label": "FMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterInfo(const struct FMemoryImageMaterialParameterInfo& Rhs)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FString& Out)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (FString Out ;)",
    "insertText": "AppendString(Out)"
  },
  {
    "label": "RemapLayerIndex()",
    "kind": "Method",
    "detail": "Function (Ar<<Ref . Name<<Ref . Association<<Ref . Index ; return Ar ; } bool)",
    "insertText": "RemapLayerIndex(TArrayView<const int32> IndexRemap, FMaterialParameterInfo& OutResult)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMaterialParameterInfo& Lhs, const FMaterialParameterInfo& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FMaterialParameterInfo& Value)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMemoryImageMaterialParameterInfo {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMemoryImageMaterialParameterInfo, NonVirtual)"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMemoryImageMaterialParameterInfo(const TCHAR* InName, EMaterialParameterAssociation InAssociation = EMaterialParameterAssociation::GlobalParameter, int32 InIndex = INDEX_NONE) : Name(NameToScriptName(FName(InName))) , Index(InIndex) , Association(InAssociation)"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryImageMaterialParameterInfo(const FName& InName, EMaterialParameterAssociation InAssociation = EMaterialParameterAssociation::GlobalParameter, int32 InIndex = INDEX_NONE) : Name(NameToScriptName(InName)) , Index(InIndex) , Association(InAssociation)"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryImageMaterialParameterInfo(const FScriptName& InName = FScriptName(), EMaterialParameterAssociation InAssociation = EMaterialParameterAssociation::GlobalParameter, int32 InIndex = INDEX_NONE) : Name(InName) , Index(InIndex) , Association(InAssociation)"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryImageMaterialParameterInfo(const FMaterialParameterInfo& Rhs) : Name(NameToScriptName(Rhs.Name)) , Index(Rhs.Index) , Association(Rhs.Association)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMemoryImageMaterialParameterInfo& Ref)"
  },
  {
    "label": "ScriptNameToName()",
    "kind": "Method",
    "detail": "Function (FName RefName =)",
    "insertText": "ScriptNameToName(Ref.Name)"
  },
  {
    "label": "NameToScriptName()",
    "kind": "Method",
    "detail": "Function (Ar<<RefName<<Ref . Association<<Ref . Index ; Ref . Name =)",
    "insertText": "NameToScriptName(RefName)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FScriptName, Name)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(int32, Index)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TEnumAsByte<EMaterialParameterAssociation>, Association)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMemoryImageMaterialParameterInfo& Lhs, const FMemoryImageMaterialParameterInfo& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMaterialParameterInfo& Lhs, const FMemoryImageMaterialParameterInfo& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMemoryImageMaterialParameterInfo& Lhs, const FMaterialParameterInfo& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FMemoryImageMaterialParameterInfo& Value)"
  },
  {
    "label": "FMaterialParameterInfo()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FMaterialParameterInfo(const struct FMemoryImageMaterialParameterInfo& Rhs) : Name(ScriptNameToName(Rhs.Name)) , Association(Rhs.Association) , Index(Rhs.Index)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} using FHashedMaterialParameterInfo = FMemoryImageMaterialParameterInfo ; enum class EMaterialParameterType : uint8 { Scalar = 0 u,Vector,DoubleVector,Texture,TextureCollection,Font,RuntimeVirtualTexture,SparseVolumeTexture,StaticSwitch,NumRuntime,StaticComponentMask = NumRuntime,Num,None = 0 xff,} ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(EMaterialParameterType)"
  },
  {
    "label": "NumMaterialParameterTypes()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumMaterialParameterTypes(int32)"
  },
  {
    "label": "NumMaterialRuntimeParameterTypes()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumMaterialRuntimeParameterTypes(int32)"
  },
  {
    "label": "IsNumericMaterialParameter()",
    "kind": "Method",
    "detail": "Function (const int32 NumMaterialEditorOnlyParameterTypes = NumMaterialParameterTypes - NumMaterialRuntimeParameterTypes ; bool)",
    "insertText": "IsNumericMaterialParameter(EMaterialParameterType InType)"
  },
  {
    "label": "CheckNonOverrides()",
    "kind": "Method",
    "detail": "Function (enum class EMaterialGetParameterValueFlags : uint32 { None = 0 u,)",
    "insertText": "CheckNonOverrides(1u << 0), CheckInstanceOverrides = (1u << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialGetParameterValueFlags)"
  },
  {
    "label": "SetCurveAtlas()",
    "kind": "Method",
    "detail": "Function (enum class EMaterialSetParameterValueFlags : uint32 { None = 0 u,)",
    "insertText": "SetCurveAtlas(1u << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialSetParameterValueFlags)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FParameterChannelNames()"
  },
  {
    "label": "FParameterChannelNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParameterChannelNames(const FText& InR, const FText& InG, const FText& InB, const FText& InA) : R(InR), G(InG), B(InB), A(InA)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FParameterChannelNames& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FStaticComponentMaskValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticComponentMaskValue() : R(false), G(false), B(false), A(false)"
  },
  {
    "label": "FStaticComponentMaskValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStaticComponentMaskValue(bool InR, bool InG, bool InB, bool InA) : R(InR), G(InG), B(InB), A(InA)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FStaticComponentMaskValue& Other)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (} UTexture* Texture = nullptr ; URuntimeVirtualTexture* RuntimeVirtualTexture = nullptr ; FGuid ExternalTextureGuid ; EMaterialSamplerType SamplerType = SAMPLERTYPE_Color ; FMaterialParameterInfo ParameterInfo ; } ; struct FMaterialParameterValue {)",
    "insertText": "FMaterialParameterValue() : Type(EMaterialParameterType::None)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(float InValue) : Type(EMaterialParameterType::Scalar)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Float [ 0 ] = InValue ; })",
    "insertText": "FMaterialParameterValue(const FLinearColor& InValue) : Type(EMaterialParameterType::Vector)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Float [ 0 ] = InValue . R ; Float [ 1 ] = InValue . G ; Float [ 2 ] = InValue . B ; Float [ 3 ] = InValue . A ; })",
    "insertText": "FMaterialParameterValue(const FVector3f& InValue) : Type(EMaterialParameterType::Vector)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Float [ 0 ] = InValue . X ; Float [ 1 ] = InValue . Y ; Float [ 2 ] = InValue . Z ; Float [ 3 ] = 0 . 0 f ; })",
    "insertText": "FMaterialParameterValue(const FVector4d& InValue) : Type(EMaterialParameterType::DoubleVector)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Texture = InValue ; })",
    "insertText": "FMaterialParameterValue(const TObjectPtr<UTexture>& InValue) : Type(EMaterialParameterType::Texture)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Texture = InValue ; })",
    "insertText": "FMaterialParameterValue(const TObjectPtr<UTextureCollection>& InValue) : Type(EMaterialParameterType::TextureCollection)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (TextureCollection = InValue ; })",
    "insertText": "FMaterialParameterValue(URuntimeVirtualTexture* InValue) : Type(EMaterialParameterType::RuntimeVirtualTexture)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (RuntimeVirtualTexture = InValue ; })",
    "insertText": "FMaterialParameterValue(const TObjectPtr<URuntimeVirtualTexture>& InValue) : Type(EMaterialParameterType::RuntimeVirtualTexture)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (RuntimeVirtualTexture = InValue ; })",
    "insertText": "FMaterialParameterValue(USparseVolumeTexture* InValue) : Type(EMaterialParameterType::SparseVolumeTexture)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (SparseVolumeTexture = InValue ; })",
    "insertText": "FMaterialParameterValue(const TObjectPtr<USparseVolumeTexture>& InValue) : Type(EMaterialParameterType::SparseVolumeTexture)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (SparseVolumeTexture = InValue ; })",
    "insertText": "FMaterialParameterValue(const UTexture* InValue) : Type(EMaterialParameterType::Texture)"
  },
  {
    "label": "UTexture()",
    "kind": "Method",
    "detail": "Function (Texture = const_cast<)",
    "insertText": "UTexture(InValue)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const TObjectPtr<const UTexture>& InValue) : Type(EMaterialParameterType::Texture)"
  },
  {
    "label": "UTexture()",
    "kind": "Method",
    "detail": "Function (Texture = const_cast<)",
    "insertText": "UTexture(InValue.Get())"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const UTextureCollection* InValue) : Type(EMaterialParameterType::TextureCollection)"
  },
  {
    "label": "UTextureCollection()",
    "kind": "Method",
    "detail": "Function (TextureCollection = const_cast<)",
    "insertText": "UTextureCollection(InValue)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const TObjectPtr<const UTextureCollection>& InValue) : Type(EMaterialParameterType::TextureCollection)"
  },
  {
    "label": "UTextureCollection()",
    "kind": "Method",
    "detail": "Function (TextureCollection = const_cast<)",
    "insertText": "UTextureCollection(InValue.Get())"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const URuntimeVirtualTexture* InValue) : Type(EMaterialParameterType::RuntimeVirtualTexture)"
  },
  {
    "label": "URuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (RuntimeVirtualTexture = const_cast<)",
    "insertText": "URuntimeVirtualTexture(InValue)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const TObjectPtr<const URuntimeVirtualTexture>& InValue) : Type(EMaterialParameterType::RuntimeVirtualTexture)"
  },
  {
    "label": "URuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (RuntimeVirtualTexture = const_cast<)",
    "insertText": "URuntimeVirtualTexture(InValue.Get())"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const USparseVolumeTexture* InValue) : Type(EMaterialParameterType::SparseVolumeTexture)"
  },
  {
    "label": "USparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (SparseVolumeTexture = const_cast<)",
    "insertText": "USparseVolumeTexture(InValue)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(const TObjectPtr<const USparseVolumeTexture>& InValue) : Type(EMaterialParameterType::SparseVolumeTexture)"
  },
  {
    "label": "USparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (SparseVolumeTexture = const_cast<)",
    "insertText": "USparseVolumeTexture(InValue.Get())"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterValue(UFont* InValue, int32 InPage) : Type(EMaterialParameterType::Font)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Font . Value = InValue ; Font . Page = InPage ; })",
    "insertText": "FMaterialParameterValue(bool InValue) : Type(EMaterialParameterType::StaticSwitch)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Bool [ 0 ] = InValue ; })",
    "insertText": "FMaterialParameterValue(const FStaticComponentMaskValue& InValue) : Type(EMaterialParameterType::StaticComponentMask)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Bool [ 0 ] = InValue . R ; Bool [ 1 ] = InValue . G ; Bool [ 2 ] = InValue . B ; Bool [ 3 ] = InValue . A ; })",
    "insertText": "FMaterialParameterValue(bool bMaskR, bool bMaskG, bool bMaskB, bool bMaskA) : Type(EMaterialParameterType::StaticComponentMask)"
  },
  {
    "label": "FMaterialParameterValue()",
    "kind": "Method",
    "detail": "Function (Bool [ 0 ] = bMaskR ; Bool [ 1 ] = bMaskG ; Bool [ 2 ] = bMaskB ; Bool [ 3 ] = bMaskA ; })",
    "insertText": "FMaterialParameterValue(EMaterialParameterType Type, const UE::Shader::FValue& InValue)"
  },
  {
    "label": "AsScalar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AsScalar()"
  },
  {
    "label": "AsVector4d()",
    "kind": "Method",
    "detail": "Function (} FVector4d)",
    "insertText": "AsVector4d()"
  },
  {
    "label": "AsStaticSwitch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AsStaticSwitch()"
  },
  {
    "label": "AsShaderValue()",
    "kind": "Method",
    "detail": "Function (} UE::Shader::FValue)",
    "insertText": "AsShaderValue()"
  },
  {
    "label": "AsTextureObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "AsTextureObject()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (union { double Double [ 4 ] ; float Float [ 4 ] ; bool Bool [ 4 ] ; UTexture* Texture ; UTextureCollection* TextureCollection ; URuntimeVirtualTexture* RuntimeVirtualTexture ; USparseVolumeTexture* SparseVolumeTexture ; struct { UFont* Value ; int32 Page ; } Font ; } ; EMaterialParameterType Type ; bool)",
    "insertText": "operator(const FMaterialParameterValue& Lhs, const FMaterialParameterValue& Rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const EMaterialParameterType ParameterType = Lhs . Type ;)",
    "insertText": "if(ParameterType != Rhs.Type)"
  },
  {
    "label": "FMaterialParameterMetadata()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMaterialParameterMetadata { FMaterialParameterValue Value ; int32 PrimitiveDataIndex = INDEX_NONE ;)",
    "insertText": "FMaterialParameterMetadata()"
  },
  {
    "label": "FMaterialParameterMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialParameterMetadata(const FMaterialParameterValue& InValue) : Value(InValue)"
  },
  {
    "label": "FMaterialParameterMetadata()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialParameterMetadata(EMaterialParameterType Type, const UE::Shader::FValue& InValue) : Value(Type, InValue)"
  },
  {
    "label": "GetShaderMapKeyString()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA FParameterChannelNames ChannelNames ; TSoftObjectPtr<class UCurveLinearColor> ScalarCurve ; TSoftObjectPtr<class UCurveLinearColorAtlas> ScalarAtlas ; FString Description ; FString AssetPath ; FName Group ; float ScalarMin = 0 . 0 f ; float ScalarMax = 0 . 0 f ; int32 SortPriority = 0 ; FGuid ExpressionGuid ; bool bUsedAsAtlasPosition = false ; bool bUsedAsChannelMask = false ; bool bOverride = false ; # endif bool bDynamicSwitchParameter = false ; } ; class FSHA1 ; struct FSubstrateCompilationConfig { bool bFullSimplify = false ; int16 BytesPerPixelOverride = - 1 ; int16 ClosuresPerPixelOverride = - 1 ; # if WITH_EDITOR FString)",
    "insertText": "GetShaderMapKeyString()"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHash(FSHA1& Hasher)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "operator(const FSubstrateCompilationConfig& Lhs, const FSubstrateCompilationConfig& Rhs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} private : # if WITH_EDITOR void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen, const FSubstrateCompilationConfig& Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Append(KeyGen)"
  }
]