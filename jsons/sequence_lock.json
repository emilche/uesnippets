[
  {
    "label": "SequenceLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceLock"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_INTERNAL_SEQUENCE_LOCK_H_ # define ABSL_FLAGS_INTERNAL_SEQUENCE_LOCK_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<cassert> # include<cstring> # include \" absl / base / optimization . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { size_t)",
    "insertText": "AlignUp(size_t x, size_t align)"
  },
  {
    "label": "SequenceLock()",
    "kind": "Method",
    "detail": "Function (} class SequenceLock { public :)",
    "insertText": "SequenceLock() : lock_(kUninitialized)"
  },
  {
    "label": "MarkInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkInitialized()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lock_.load(std::memory_order_relaxed) == kUninitialized)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "store(0, std::memory_order_release)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryRead(void* dst, const std::atomic<uint64_t>* src, size_t size)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (int64_t seq_before = lock_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "RelaxedCopyFromAtomic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelaxedCopyFromAtomic(dst, src, size)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_acquire)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (int64_t seq_after = lock_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(std::atomic<uint64_t>* dst, const void* src, size_t size)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((orig_seq & 1) == 0)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "store(orig_seq + 1, std::memory_order_relaxed)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_release)"
  },
  {
    "label": "RelaxedCopyToAtomic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelaxedCopyToAtomic(dst, src, size)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "store(orig_seq + 2, std::memory_order_release)"
  },
  {
    "label": "ModificationCount()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ModificationCount()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(val != kUninitialized && (val & 1) == 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(val != kUninitialized)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "store(val + 2, std::memory_order_relaxed)"
  },
  {
    "label": "RelaxedCopyFromAtomic()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RelaxedCopyFromAtomic(void* dst, const std::atomic<uint64_t>* src, size_t size)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* dst_byte = static_cast<)",
    "insertText": "char(dst)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst_byte, &word, sizeof(word))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (dst_byte + =)",
    "insertText": "sizeof(word)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(size > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst_byte, &word, size)"
  },
  {
    "label": "RelaxedCopyToAtomic()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RelaxedCopyToAtomic(std::atomic<uint64_t>* dst, const void* src, size_t size)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* src_byte = static_cast<const)",
    "insertText": "char(src)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (uint64_t word ;)",
    "insertText": "memcpy(&word, src_byte, sizeof(word))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (dst ->)",
    "insertText": "store(word, std::memory_order_relaxed)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (uint64_t word = 0 ;)",
    "insertText": "memcpy(&word, src_byte, size)"
  }
]