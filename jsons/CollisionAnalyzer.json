[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FCAQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCAQuery"
  },
  {
    "label": "FCollisionAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionAnalyzer"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionAnalyzerProxyArchive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionAnalyzerProxyArchive"
  },
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "FCAQuery()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CollisionDebugDrawingPublic . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" CollisionQueryParams . h \" # include \" ICollisionAnalyzer . h \" # include \" Serialization / NameAsStringProxyArchive . h \" class SWidget ; struct FCAQuery {)",
    "insertText": "FCAQuery()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector Start ; FVector End ; FQuat Rot ; ECAQueryType::Type Type ; ECAQueryShape::Type Shape ; ECAQueryMode::Type Mode ; FVector Dims ; ECollisionChannel Channel ; FCollisionQueryParams Params ; FCollisionResponseParams ResponseParams ; FCollisionObjectQueryParams ObjectParams ; TArray<FHitResult> Results ; TArray<FHitResult> TouchAllResults ; int32 FrameNum ; float CPUTime ; int32 ID ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCAQuery& Query)"
  },
  {
    "label": "CaptureQuery()",
    "kind": "Method",
    "detail": "Function (} ; class FCollisionAnalyzer : public ICollisionAnalyzer { public : void)",
    "insertText": "CaptureQuery(const FVector& Start, const FVector& End, const FQuat& Rot, ECAQueryType::Type QueryType, ECAQueryShape::Type QueryShape, ECAQueryMode::Type QueryMode, const FVector& Dims, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams, const TArray<FHitResult>& Results, const TArray<FHitResult>& TouchAllResults, double CPUTime)"
  },
  {
    "label": "SummonUI()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "SummonUI()"
  },
  {
    "label": "TickAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAnalyzer(UWorld* InWorld)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "SetIsRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecording(bool bNewRecording)"
  },
  {
    "label": "GetNumFramesOfRecording()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFramesOfRecording()"
  },
  {
    "label": "FCollisionAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollisionAnalyzer() : DrawBox(ForceInit) , CurrentFrameNum(0) , bIsRecording(false)"
  },
  {
    "label": "FCollisionAnalyzer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCollisionAnalyzer()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (} TArray<FCAQuery> Queries ; TArray<int32> DrawQueryIndices ; FBox DrawBox ;)",
    "insertText": "DECLARE_EVENT(FCollisionAnalyzer, FQueriesChangedEvent)"
  },
  {
    "label": "OnQueriesChanged()",
    "kind": "Method",
    "detail": "Function (FQueriesChangedEvent&)",
    "insertText": "OnQueriesChanged()"
  },
  {
    "label": "LoadCollisionProfileData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCollisionProfileData(FString ProfileFileName)"
  },
  {
    "label": "FCollisionAnalyzerProxyArchive()",
    "kind": "Method",
    "detail": "Function (private : int32 CurrentFrameNum ; bool bIsRecording ; FQueriesChangedEvent QueriesChangedEvent ; FQueriesChangedEvent QueryAddedEvent ; } ; struct FCollisionAnalyzerProxyArchive : public FNameAsStringProxyArchive {)",
    "insertText": "FCollisionAnalyzerProxyArchive(FArchive& InInnerArchive) : FNameAsStringProxyArchive(InInnerArchive)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using FNameAsStringProxyArchive::operator<<; FArchive&)",
    "insertText": "operator(struct FWeakObjectPtr& Value)"
  }
]