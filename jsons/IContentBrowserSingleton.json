[
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FContentBrowserSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserSelection"
  },
  {
    "label": "FContentBrowserConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBrowserConfig"
  },
  {
    "label": "FAssetPickerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetPickerConfig"
  },
  {
    "label": "FFrontendFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrontendFilter"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "FPathPickerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathPickerConfig"
  },
  {
    "label": "FCollectionPickerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionPickerConfig"
  },
  {
    "label": "FSharedAssetDialogConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedAssetDialogConfig"
  },
  {
    "label": "FOpenAssetDialogConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenAssetDialogConfig"
  },
  {
    "label": "FSaveAssetDialogConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSaveAssetDialogConfig"
  },
  {
    "label": "IContentBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IContentBrowserSingleton"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "IsLegacy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Misc / Attribute . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetTypeCategories . h \" # include \" AssetRegistry / ARFilter . h \" # include \" CollectionManagerTypes . h \" # include \" ContentBrowserItem . h \" # include \" ContentBrowserDelegates . h \" # include \" ContentBrowserDataSubsystem . h \" # include \" Misc / FilterCollection . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" AssetThumbnail . h \" # include \" ContentBrowserItemPath . h \" # include \" Misc / NamePermissionList . h \" class FViewport ; class IPlugin ; class SWidget ; class UFactory ; class UToolMenu ; typedef const FContentBrowserItem& FAssetFilterType ; typedef TFilterCollection<FAssetFilterType> FAssetFilterCollectionType ; typedef const TSharedRef<IPlugin>& FPluginFilterType ; typedef TFilterCollection<FPluginFilterType> FPluginFilterCollectionType ; namespace EAssetViewType { enum Type { List,Tile,Column,Custom,MAX } ; } struct FContentBrowserSelection { TArray<FContentBrowserItem> SelectedItems ; TArray<FAssetData> SelectedAssets ; TArray<FString> SelectedFolders ; bool)",
    "insertText": "IsLegacy()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "FContentBrowserConfig()",
    "kind": "Method",
    "detail": "Function (} } ; struct FContentBrowserConfig { EThumbnailLabel::Type ThumbnailLabel ; TAttribute<float> ThumbnailScale ; EAssetViewType::Type InitialAssetViewType ; FCollectionNameType SelectedCollectionName ; bool bShowBottomToolbar : 1 ; bool bCanShowClasses : 1 ; bool bUseSourcesView : 1 ; bool bExpandSourcesView : 1 ; bool bUsePathPicker : 1 ; bool bCanShowFilters : 1 ; bool bCanShowAssetSearch : 1 ; bool bCanShowFolders : 1 ; bool bCanShowRealTimeThumbnails : 1 ; bool bCanShowDevelopersFolder : 1 ; bool bCanShowLockButton : 1 ; bool bCanSetAsPrimaryBrowser : 1 ;)",
    "insertText": "FContentBrowserConfig() : ThumbnailLabel( EThumbnailLabel::ClassName ) , ThumbnailScale(0.1f) , InitialAssetViewType(EAssetViewType::Tile) , SelectedCollectionName( NAME_None, ECollectionShareType::CST_Local ) , bShowBottomToolbar(true) , bCanShowClasses(true) , bUseSourcesView(true) , bExpandSourcesView(true) , bUsePathPicker(true) , bCanShowFilters(true) , bCanShowAssetSearch(true) , bCanShowFolders(true) , bCanShowRealTimeThumbnails(true) , bCanShowDevelopersFolder(true) , bCanShowLockButton(true) , bCanSetAsPrimaryBrowser(true)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAssetPickerConfig { ESelectionMode::Type SelectionMode ; TArray<FGetCurrentSelectionDelegate*> GetCurrentSelectionDelegates ; TArray<FSyncToAssetsDelegate*> SyncToAssetsDelegates ; TArray<FSetARFilterDelegate*> SetFilterDelegates ; TArray<FRefreshAssetViewDelegate*> RefreshAssetViewDelegates ; FARFilter Filter ; TArray<TSharedRef<class FFrontendFilter>> ExtraFrontendFilters ; TArray<FString> HiddenColumnNames ; TArray<FAssetViewCustomColumn> CustomColumns ; EThumbnailLabel::Type ThumbnailLabel ; TAttribute<float> ThumbnailScale ; EThumbnailSize InitialThumbnailSize ; TArray<FCollectionNameType> Collections ; FAssetData InitialAssetSelection ; TSharedPtr<class IPropertyHandle> PropertyHandle ; TArray<FAssetData> AdditionalReferencingAssets ; FOnAssetSelected OnAssetSelected ; FOnPathSelected OnFolderEntered ; FOnAssetDoubleClicked OnAssetDoubleClicked ; FOnAssetEnterPressed OnAssetEnterPressed ; FOnAssetsActivated OnAssetsActivated ; FOnGetAssetContextMenu OnGetAssetContextMenu ; FOnGetFolderContextMenu OnGetFolderContextMenu ; FOnIsAssetValidForCustomToolTip OnIsAssetValidForCustomToolTip ; FOnGetCustomAssetToolTip OnGetCustomAssetToolTip ; FOnGetCustomSourceAssets OnGetCustomSourceAssets ; FOnVisualizeAssetToolTip OnVisualizeAssetToolTip ; FOnAssetToolTipClosing OnAssetToolTipClosing ; FOnShouldFilterAsset OnShouldFilterAsset ; FOnShouldDisplayAssetTag OnAssetTagWantsToBeDisplayed ; EAssetViewType::Type InitialAssetViewType ; TAttribute<FText> AssetShowWarningText ; FString SaveSettingsName ; bool bFocusSearchBoxWhenOpened ; bool bAllowNullSelection ; bool bShowBottomToolbar ; bool bAutohideSearchBar ; bool bAllowDragging ; bool bAllowRename ; bool bCanShowClasses ; bool bCanShowFolders ; bool bCanShowReadOnlyFolders ; bool bCanShowRealTimeThumbnails ; bool bCanShowDevelopersFolder ; bool bForceShowEngineContent ; bool bForceShowPluginContent ; bool bAddFilterUI ; bool bShowPathInColumnView ; bool bShowTypeInColumnView ; bool bSortByPathInColumnView ; TDelegate<)",
    "insertText": "void(UToolMenu*)"
  },
  {
    "label": "FAssetPickerConfig()",
    "kind": "Method",
    "detail": "Function (EAssetTypeCategories::Type DefaultFilterMenuExpansion ; bool bUseSectionsForCustomFilterCategories ; TOptional<FName> AssetViewOptionsProfile ;)",
    "insertText": "FAssetPickerConfig() : SelectionMode( ESelectionMode::Multi ) , ThumbnailLabel( EThumbnailLabel::ClassName ) , ThumbnailScale(0.1f) , InitialThumbnailSize(EThumbnailSize::Medium) , InitialAssetViewType(EAssetViewType::Tile) , bFocusSearchBoxWhenOpened(true) , bAllowNullSelection(false) , bShowBottomToolbar(true) , bAutohideSearchBar(false) , bAllowDragging(true) , bAllowRename(true) , bCanShowClasses(true) , bCanShowFolders(false) , bCanShowReadOnlyFolders(true) , bCanShowRealTimeThumbnails(false) , bCanShowDevelopersFolder(true) , bForceShowEngineContent(false) , bForceShowPluginContent(false) , bAddFilterUI(false) , bShowPathInColumnView(false) , bShowTypeInColumnView(true) , bSortByPathInColumnView(false) , DefaultFilterMenuExpansion(EAssetTypeCategories::Basic) , bUseSectionsForCustomFilterCategories(false)"
  },
  {
    "label": "FPathPickerConfig()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPathPickerConfig { FString DefaultPath ; TSharedPtr<FPathPermissionList> CustomFolderPermissionList ; FOnPathSelected OnPathSelected ; FContentBrowserMenuExtender_SelectedPaths OnGetPathContextMenuExtender ; FOnGetFolderContextMenu OnGetFolderContextMenu ; TArray<FSetPathPickerPathsDelegate*> SetPathsDelegates ; bool bFocusSearchBoxWhenOpened : 1 ; bool bAllowContextMenu : 1 ; bool bAllowClassesFolder : 1 ; bool bAllowReadOnlyFolders : 1 ; bool bAddDefaultPath : 1 ; bool bOnPathSelectedPassesVirtualPaths : 1 ; bool bShowFavorites : 1 ; bool bNotifyDefaultPathSelected : 1 ; bool bCanShowDevelopersFolder ; bool bForceShowEngineContent ; bool bForceShowPluginContent ; bool bShowViewOptions ;)",
    "insertText": "FPathPickerConfig() : bFocusSearchBoxWhenOpened(true) , bAllowContextMenu(true) , bAllowClassesFolder(false) , bAllowReadOnlyFolders(true) , bAddDefaultPath(false) , bOnPathSelectedPassesVirtualPaths(false) , bShowFavorites(true) , bNotifyDefaultPathSelected(false) , bCanShowDevelopersFolder(true) , bForceShowEngineContent(false) , bForceShowPluginContent(false) , bShowViewOptions(false)"
  },
  {
    "label": "FCollectionPickerConfig()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCollectionPickerConfig { bool AllowCollectionButtons ; bool AllowRightClickMenu ; FOnCollectionSelected OnCollectionSelected ;)",
    "insertText": "FCollectionPickerConfig() : AllowCollectionButtons(true) , AllowRightClickMenu(true) , OnCollectionSelected()"
  },
  {
    "label": "GetDialogType()",
    "kind": "Method",
    "detail": "Function (} } ; namespace EAssetDialogType { enum Type { Open,Save } ; } struct FSharedAssetDialogConfig { FText DialogTitleOverride ; FString DefaultPath ; TArray<FTopLevelAssetPath> AssetClassNames ; FVector2D WindowSizeOverride ; FOnPathSelected OnPathSelected ; TSharedPtr<SWindow> WindowOverride ; EAssetDialogType::Type)",
    "insertText": "GetDialogType()"
  },
  {
    "label": "FSharedAssetDialogConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedAssetDialogConfig() : WindowSizeOverride(ForceInitToZero)"
  },
  {
    "label": "FSharedAssetDialogConfig()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSharedAssetDialogConfig()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; class IContentBrowserSingleton { public : IContentBrowserSingleton&)",
    "insertText": "Get()"
  },
  {
    "label": "IContentBrowserSingleton()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IContentBrowserSingleton()"
  },
  {
    "label": "CreateContentBrowser()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "CreateContentBrowser(const FName InstanceName, TSharedPtr<SDockTab> ContainingTab, const FContentBrowserConfig* ContentBrowserConfig)"
  },
  {
    "label": "CreateAssetPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateAssetPicker(const FAssetPickerConfig& AssetPickerConfig)"
  },
  {
    "label": "GetAssetPickerSearchBox()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetAssetPickerSearchBox(const TSharedRef<SWidget>& AssetPickerWidget)"
  },
  {
    "label": "CreatePathPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreatePathPicker(const FPathPickerConfig& PathPickerConfig)"
  },
  {
    "label": "CreateCollectionPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateCollectionPicker(const FCollectionPickerConfig& CollectionPickerConfig)"
  },
  {
    "label": "CreateContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateContentBrowserDrawer(const FContentBrowserConfig& ContentBrowserConfig, TFunction<TSharedPtr<SDockTab>()> InOnGetTabForDrawer)"
  },
  {
    "label": "CreateOpenAssetDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOpenAssetDialog(const FOpenAssetDialogConfig& OpenAssetConfig, const FOnAssetsChosenForOpen& OnAssetsChosenForOpen, const FOnAssetDialogCancelled& OnAssetDialogCancelled)"
  },
  {
    "label": "CreateModalOpenAssetDialog()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData>)",
    "insertText": "CreateModalOpenAssetDialog(const FOpenAssetDialogConfig& InConfig)"
  },
  {
    "label": "CreateSaveAssetDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSaveAssetDialog(const FSaveAssetDialogConfig& SaveAssetConfig, const FOnObjectPathChosenForSave& OnAssetNameChosenForSave, const FOnAssetDialogCancelled& OnAssetDialogCancelled)"
  },
  {
    "label": "CreateModalSaveAssetDialog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateModalSaveAssetDialog(const FSaveAssetDialogConfig& SaveAssetConfig)"
  },
  {
    "label": "HasPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrimaryContentBrowser()"
  },
  {
    "label": "SetPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPrimaryContentBrowser(FName InstanceName)"
  },
  {
    "label": "FocusPrimaryContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusPrimaryContentBrowser(bool bFocusSearch)"
  },
  {
    "label": "FocusContentBrowserSearchField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusContentBrowserSearchField(TSharedPtr<SWidget> ContentBrowserWidget)"
  },
  {
    "label": "CreateNewAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewAsset(const FString& DefaultAssetName, const FString& PackagePath, UClass* AssetClass, UFactory* Factory)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<struct FAssetData>& AssetDataList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToAssets(const TArray<UObject*>& AssetList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToFolders(const TArray<FString>& FolderList, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserToItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToItems(const TArray<FContentBrowserItem>& ItemsToSync, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "SyncBrowserTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserTo(const FContentBrowserSelection& ItemSelection, bool bAllowLockedBrowsers = false, bool bFocusContentBrowser = true, const FName& InstanceName = FName(), bool bNewSpawnBrowser = false)"
  },
  {
    "label": "GetSelectedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedAssets(TArray<FAssetData>& SelectedAssets)"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedFolders(TArray<FString>& SelectedFolders)"
  },
  {
    "label": "GetSelectedPathViewFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedPathViewFolders(TArray<FString>& SelectedFolders)"
  },
  {
    "label": "GetCurrentPath()",
    "kind": "Method",
    "detail": "Function (FContentBrowserItemPath)",
    "insertText": "GetCurrentPath()"
  },
  {
    "label": "CaptureThumbnailFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThumbnailFromViewport(FViewport* InViewport, TArray<FAssetData>& SelectedAssets)"
  },
  {
    "label": "SetSelectedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPaths(const TArray<FString>& FolderPaths, bool bNeedsRefresh = false, bool bPathsAreVirtual = false)"
  },
  {
    "label": "ForceShowPluginContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceShowPluginContent(bool bEnginePlugin)"
  },
  {
    "label": "SaveContentBrowserSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveContentBrowserSettings(TSharedPtr<SWidget> ContentBrowserWidget)"
  },
  {
    "label": "ExecuteRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteRename(TSharedPtr<SWidget> PickerWidget)"
  },
  {
    "label": "ExecuteAddFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAddFolder(TSharedPtr<SWidget> PathPickerWidget)"
  },
  {
    "label": "RefreshPathView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPathView(TSharedPtr<SWidget> PathPickerWidget)"
  },
  {
    "label": "GetInitialPathToSaveAsset()",
    "kind": "Method",
    "detail": "Function (FContentBrowserItemPath)",
    "insertText": "GetInitialPathToSaveAsset(const FContentBrowserItemPath& InPath)"
  },
  {
    "label": "IsShowingPrivateContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingPrivateContent(const FStringView VirtualFolderPath)"
  },
  {
    "label": "IsFolderShowPrivateContentToggleable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFolderShowPrivateContentToggleable(const FStringView VirtualFolderPath)"
  },
  {
    "label": "GetShowPrivateContentPermissionList()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FPathPermissionList>&)",
    "insertText": "GetShowPrivateContentPermissionList()"
  },
  {
    "label": "SetPrivateContentPermissionListDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrivateContentPermissionListDirty()"
  },
  {
    "label": "RegisterIsFolderShowPrivateContentToggleableDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterIsFolderShowPrivateContentToggleableDelegate(FIsFolderShowPrivateContentToggleableDelegate InIsFolderShowPrivateContentToggleableDelegate)"
  },
  {
    "label": "UnregisterIsFolderShowPrivateContentToggleableDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterIsFolderShowPrivateContentToggleableDelegate()"
  },
  {
    "label": "RegisterOnFavoritesChangedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnFavoritesChangedHandler(FSimpleDelegate OnFavoritesChanged)"
  },
  {
    "label": "UnregisterOnFavoritesChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnFavoritesChangedDelegate(FDelegateHandle Handle)"
  },
  {
    "label": "GetAliasesForPath()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAliasesForPath(const FSoftObjectPath& InPath)"
  }
]