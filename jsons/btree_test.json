[
  {
    "label": "remove_pair_const",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "remove_pair_const"
  },
  {
    "label": "KeyOfValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KeyOfValue"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Generator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_BTREE_TEST_H_ # define ABSL_CONTAINER_BTREE_TEST_H_ # include<algorithm> # include<cassert> # include<random> # include<string> # include<utility> # include<vector> # include \" absl / container / btree_map . h \" # include \" absl / container / btree_set . h \" # include \" absl / container / flat_hash_set . h \" # include \" absl / strings / cord . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<T> struct remove_pair_const { using type = std::remove_const<T>::type ; } ; template<T,U> struct remove_pair_const<std::pair<T,U>> { using type = std::pair<remove_pair_const<T>::type,remove_pair_const<U>::type> ; } ; template<K,V> struct KeyOfValue { struct type { const K&)",
    "insertText": "operator()(const V& p)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(val <= maxval)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (unsigned kBase = 6 4 ; unsigned p = 1 5 ; buf [ p - - ] = 0 ;)",
    "insertText": "while(maxval > 0)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (buf [)",
    "insertText": "p(val % kBase)"
  },
  {
    "label": "Generator()",
    "kind": "Method",
    "detail": "Function (val / = kBase ; maxval / = kBase ; } return buf + p + 1 ; } template<K> struct Generator { int maxval ;)",
    "insertText": "Generator(int m) : maxval(m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} K)",
    "insertText": "operator()(int i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i <= maxval)"
  },
  {
    "label": "GenerateDigits()",
    "kind": "Method",
    "detail": "Function (char buf [ 1 6 ] ; return)",
    "insertText": "GenerateDigits(buf, i, maxval)"
  },
  {
    "label": "Cord()",
    "kind": "Method",
    "detail": "Function (char buf [ 1 6 ] ; return)",
    "insertText": "Cord(GenerateDigits(buf, i, maxval))"
  },
  {
    "label": "Generator()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct Generator<std::pair<T,U>> { Generator<remove_pair_const<T>::type> tgen ; Generator<remove_pair_const<U>::type> ugen ;)",
    "insertText": "Generator(int m) : tgen(m), ugen(m)"
  },
  {
    "label": "GenerateNumbersWithSeed()",
    "kind": "Method",
    "detail": "Function (} } ; std::vector<int>)",
    "insertText": "GenerateNumbersWithSeed(int n, int maxval, int seed)"
  },
  {
    "label": "rng()",
    "kind": "Method",
    "detail": "Function (std::minstd_rand0)",
    "insertText": "rng(seed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<int> values ; absl::flat_hash_set<int> unique_values ;)",
    "insertText": "if(values.size() < n)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int value ; do { value = static_cast<)",
    "insertText": "int(rng()) % (maxval + 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!unique_values.insert(value).second)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(value)"
  },
  {
    "label": "GenerateValuesWithSeed()",
    "kind": "Method",
    "detail": "Function (} } return values ; } template<V> std::vector<V>)",
    "insertText": "GenerateValuesWithSeed(int n, int maxval, int seed)"
  },
  {
    "label": "GenerateNumbersWithSeed()",
    "kind": "Method",
    "detail": "Function (const std::vector<int> nums =)",
    "insertText": "GenerateNumbersWithSeed(n, maxval, seed)"
  },
  {
    "label": "gen()",
    "kind": "Method",
    "detail": "Function (Generator<V>)",
    "insertText": "gen(maxval)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<V> vec ; vec .)",
    "insertText": "reserve(n)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vec .)",
    "insertText": "push_back(gen(nums[i]))"
  }
]