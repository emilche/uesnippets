[
  {
    "label": "DNX_CompressionID_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_CompressionID_t"
  },
  {
    "label": "DNX_ColorComponentOrder_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_ColorComponentOrder_t"
  },
  {
    "label": "DNX_SignalStandard_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_SignalStandard_t"
  },
  {
    "label": "DNX_ComponentType_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_ComponentType_t"
  },
  {
    "label": "DNX_RasterGeometryType_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_RasterGeometryType_t"
  },
  {
    "label": "DNX_DecodeResolution_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_DecodeResolution_t"
  },
  {
    "label": "DNX_BufferFieldOrder_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_BufferFieldOrder_t"
  },
  {
    "label": "DNX_ColorVolume_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_ColorVolume_t"
  },
  {
    "label": "DNX_ColorFormat_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_ColorFormat_t"
  },
  {
    "label": "DNX_SubSampling_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNX_SubSampling_t"
  },
  {
    "label": "DNX_CompressedParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNX_CompressedParams_t"
  },
  {
    "label": "DNX_UncompressedParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNX_UncompressedParams_t"
  },
  {
    "label": "DNX_EncodeOperationParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNX_EncodeOperationParams_t"
  },
  {
    "label": "DNX_DecodeOperationParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNX_DecodeOperationParams_t"
  },
  {
    "label": "_DNX_Encoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_DNX_Encoder"
  },
  {
    "label": "_DNX_Decoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_DNX_Decoder"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# ifndef DNXCODECSDK_H # define DNXCODECSDK_H # define DNX_VERSION_MAJOR 2 # define DNX_VERSION_MINOR 6 # define DNX_VERSION_PATCH 1 # ifdef BUILD_NUMBER # define DNX_VERSION_BUILD BUILD_NUMBER # endif # ifndef DNX_VERSION_BUILD # define DNX_VERSION_BUILD 0 # endif # define DNX_VERSION_RELEASE ' r ' # define DNX_VERSION_ALPHA ' a ' # define DNX_VERSION_BETA ' b ' # define DNX_VERSION_TYPE DNX_VERSION_RELEASE # define DNX_DEFAULT_SHORT_2_14_BLACK_POINT 4 0 9 6 # define DNX_DEFAULT_SHORT_2_14_WHITE_POINT 6 0 1 6 0 # define DNX_DEFAULT_CHROMA_SHORT_2_14_EXCURSION 2 8 6 7 2 # define DNX_NO_ERROR 0 # define DNX_EXCEPTION_ERROR - 1 0 0 0 # define DNX_INVALID_COMPRESSION_ID_ERROR - 1 0 0 1 # define DNX_INVALID_UNCOMPINFO_ERROR - 1 0 0 2 # define DNX_NEED_MORE_DATA_ERROR - 1 0 0 3 # define DNX_NOT_INITIALIZED_ERROR - 1 0 0 4 # define DNX_INVALID_VALUE_ERROR - 1 0 0 5 # define DNX_NOT_SUFFICIENT_INPUT_PRECISION - 1 0 0 6 # define DNX_WRONG_USER_DATA_LABEL - 1 0 0 7 # define DNX_USER_DATA_SIZE_IS_TOO_BIG - 1 0 0 8 # define DNX_INVALID_DATA - 1 0 0 9 # define DNX_INCOMPATIBLE_PARAM_VERSION - 1 0 1 0 # define DNX_INVALID_LOSSLESS_ALPHA_USAGE - 1 0 1 1 # define DNX_FORBIDDEN_WORKFLOW - 1 0 1 2 # define DNX_INVALID_ALPHA_USAGE - 1 0 1 3 # ifdef __cplusplus \" C \" { # endif typedef enum DNX_CompressionID_t { DNX_HQX_1080p_COMPRESSION_ID = 1 2 3 5,DNX_SQ_1080p_COMPRESSION_ID = 1 2 3 7,DNX_HQ_1080p_COMPRESSION_ID = 1 2 3 8,DNX_HQX_720p_COMPRESSION_ID = 1 2 5 0,DNX_HQ_720p_COMPRESSION_ID = 1 2 5 1,DNX_SQ_720p_COMPRESSION_ID = 1 2 5 2,DNX_HQX_1080i_COMPRESSION_ID = 1 2 4 1,DNX_SQ_1080i_COMPRESSION_ID = 1 2 4 2,DNX_HQ_1080i_COMPRESSION_ID = 1 2 4 3,DNX_HQ_TR_1080i_COMPRESSION_ID = 1 2 4 4,DNX_LB_1080p_COMPRESSION_ID = 1 2 5 3,DNX_444_1080p_COMPRESSION_ID = 1 2 5 6,DNX_SQ_TR_720p_COMPRESSION_ID = 1 2 5 8,DNX_SQ_TR_1080p_COMPRESSION_ID = 1 2 5 9,DNX_SQ_TR_1080i_COMPRESSION_ID = 1 2 6 0,DNX_444_COMPRESSION_ID = 1 2 7 0,DNX_HQX_COMPRESSION_ID = 1 2 7 1,DNX_HQ_COMPRESSION_ID = 1 2 7 2,DNX_SQ_COMPRESSION_ID = 1 2 7 3,DNX_LB_COMPRESSION_ID = 1 2 7 4 } DNX_CompressionID_t ; typedef enum DNX_ColorComponentOrder_t { DNX_CCO_INVALID = 0 x00000000,DNX_CCO_YCbYCr_NoA = 0 x00000001,DNX_CCO_CbYCrY_NoA = 0 x00000002,DNX_CCO_ARGB_Interleaved = 0 x00000004,DNX_CCO_BGRA_Interleaved = 0 x00000008,DNX_CCO_RGB_NoA = 0 x00000040,DNX_CCO_BGR_NoA = 0 x00000080,DNX_CCO_RGBA_Interleaved = 0 x00000800,DNX_CCO_ABGR_Interleaved = 0 x00001000,DNX_CCO_YCbCr_Interleaved = 0 x00002000,DNX_CCO_Ch1Ch2Ch3 = 0 x00004000,DNX_CCO_Ch1Ch2Ch1Ch3 = 0 x00008000,DNX_CCO_Ch2Ch1Ch3Ch1 = 0 x00010000,DNX_CCO_YCbCr_Planar = 0 x00020000,DNX_CCO_CbYACrYA_Interleaved = 0 x00040000,DNX_CCO_CbYCrA_Interleaved = 0 x00080000,DNX_CCO_YCbCrA_Planar = 0 x00100000,DNX_CCO_Ch1Ch2Ch3A = 0 x00200000,DNX_CCO_Ch3Ch2Ch1A = 0 x00400000,DNX_CCO_ACh1Ch2Ch3 = 0 x00800000,DNX_CCO_Ch2Ch1ACh3Ch1A = 0 x01000000,DNX_CCO_CbYCrY_A = 0 x02000000 } DNX_ColorComponentOrder_t ; typedef enum DNX_SignalStandard_t { DNX_SS_INVALID = 0 x000,DNX_SS_Interlaced = 0 x001,DNX_SS_Progressive = 0 x002 } DNX_SignalStandard_t ; typedef enum DNX_ComponentType_t { DNX_CT_INVALID = 0 x000,DNX_CT_UCHAR = 0 x001,DNX_CT_USHORT_10_6 = 0 x004,DNX_CT_SHORT_2_14 = 0 x008,DNX_CT_SHORT = 0 x010,DNX_CT_10Bit_2_8 = 0 x040,DNX_CT_V210 = 0 x400,DNX_CT_USHORT_12_4 = 0 x20000 } DNX_ComponentType_t ; typedef enum DNX_RasterGeometryType_t { DNX_RGT_INVALID = 0 x0,DNX_RGT_Display = 0 x1,DNX_RGT_NativeCompressed = 0 x4 } DNX_RasterGeometryType_t ; typedef enum DNX_DecodeResolution_t { DNX_DR_INVALID = 0 x0,DNX_DR_Full = 0 x1,DNX_DR_Half = 0 x2,DNX_DR_Quarter = 0 x4 } DNX_DecodeResolution_t ; typedef enum DNX_BufferFieldOrder_t { DNX_BFO_INVALID = 0 x000,DNX_BFO_Merged_F1_First = 0 x001,DNX_BFO_Split_F1_First = 0 x004,DNX_BFO_F1_Only = 0 x010,DNX_BFO_F2_Only = 0 x020,DNX_BFO_Progressive = 0 x040,DNX_BFO_Prog_Odd_Only = 0 x200,DNX_BFO_Prog_Even_Only = 0 x400 } DNX_BufferFieldOrder_t ; typedef enum DNX_ColorVolume_t { DNX_CV_INVALID = 0 x00,DNX_CV_709 = 0 x01,DNX_CV_2020 = 0 x02,DNX_CV_2020c = 0 x04,DNX_CV_OutOfBand = 0 x08 } DNX_ColorVolume_t ; typedef enum DNX_ColorFormat_t { DNX_CF_INVALID = 0 x00,DNX_CF_YCbCr = 0 x01,DNX_CF_RGB = 0 x02 } DNX_ColorFormat_t ; typedef enum DNX_SubSampling_t { DNX_SSC_INVALID = 0 x00,DNX_SSC_422 = 0 x01,DNX_SSC_444 = 0 x02,DNX_SSC_420 = 0 x04 } DNX_SubSampling_t ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (size_t structSize ; unsigned int width ; unsigned int height ; DNX_CompressionID_t compressionID ; DNX_ColorVolume_t colorVolume ; DNX_ColorFormat_t colorFormat ; DNX_SubSampling_t subSampling ; unsigned int depth ; unsigned int PARC ; unsigned int PARN ; unsigned int CRCpresence ; unsigned int VBR ; unsigned int alphaPresence ; unsigned int losslessAlpha ; unsigned int premultAlpha ; } DNX_CompressedParams_t ; typedef struct DNX_UncompressedParams_t { size_t structSize ; DNX_ComponentType_t compType ; DNX_ColorVolume_t colorVolume ; DNX_ColorFormat_t colorFormat ; DNX_ColorComponentOrder_t compOrder ; DNX_BufferFieldOrder_t fieldOrder ; DNX_RasterGeometryType_t rgt ; unsigned int interFieldGapBytes ; unsigned int rowBytes ; unsigned short blackPoint ; unsigned short whitePoint ; unsigned short chromaExcursion ; unsigned int rowBytes2 ; } DNX_UncompressedParams_t ; typedef struct DNX_EncodeOperationParams_t { size_t structSize ; unsigned int numThreads ; } DNX_EncodeOperationParams_t ; typedef struct DNX_DecodeOperationParams_t { size_t structSize ; unsigned int numThreads ; DNX_DecodeResolution_t decodeResolution ; unsigned int verifyCRC ; unsigned int decodeAlpha ; } DNX_DecodeOperationParams_t ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "DNX_GetVersion()",
    "kind": "Method",
    "detail": "Function (typedef struct _DNX_Decoder* DNX_Decoder ; void)",
    "insertText": "DNX_GetVersion(int* major, int* minor, int* patch, int* build, char* releaseType)"
  },
  {
    "label": "DNX_Initialize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_Initialize()"
  },
  {
    "label": "DNX_Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNX_Finalize()"
  },
  {
    "label": "DNX_GetInfoFromCompressedFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_GetInfoFromCompressedFrame(const void* cmpFrame, unsigned int availableSize, DNX_CompressedParams_t* compressedParams, DNX_SignalStandard_t* signalStandard)"
  },
  {
    "label": "DNX_SetUserData()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_SetUserData(void* cmpFrame, unsigned int cmpSize, unsigned int UDL, void* userData, unsigned int userDataSize)"
  },
  {
    "label": "DNX_GetUserData()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_GetUserData(void* cmpFrame, unsigned int cmpSize, unsigned int* UDL, void* userData, unsigned int userDataBufferSize)"
  },
  {
    "label": "DNX_GetCompressedBufferSize()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "DNX_GetCompressedBufferSize(const DNX_CompressedParams_t* compressedParams)"
  },
  {
    "label": "DNX_GetErrorString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNX_GetErrorString(int errorCode, char* errorStrPtr)"
  },
  {
    "label": "DNX_CreateEncoder()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_CreateEncoder(const DNX_CompressedParams_t* compressedParams, const DNX_UncompressedParams_t* uncompressedParams, const DNX_EncodeOperationParams_t* opParams, DNX_Encoder* encoder)"
  },
  {
    "label": "DNX_ConfigureEncoder()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_ConfigureEncoder(const DNX_CompressedParams_t* compressedParams, const DNX_UncompressedParams_t* uncompressedParams, const DNX_EncodeOperationParams_t* opParams, DNX_Encoder encoder)"
  },
  {
    "label": "DNX_CreateDecoder()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_CreateDecoder(const DNX_CompressedParams_t* compressedParams, const DNX_UncompressedParams_t* uncompressedParams, const DNX_DecodeOperationParams_t* opParams, DNX_Decoder* decoder)"
  },
  {
    "label": "DNX_ConfigureDecoder()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_ConfigureDecoder(const DNX_CompressedParams_t* compressedParams, const DNX_UncompressedParams_t* uncompressedParams, const DNX_DecodeOperationParams_t* opParams, DNX_Decoder decoder)"
  },
  {
    "label": "DNX_EncodeFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_EncodeFrame(DNX_Encoder encoder, const void* inBuf, void* outBuf, unsigned int inBufSize, unsigned int outBufSize, unsigned int* compressedFrameSize)"
  },
  {
    "label": "DNX_DecodeFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DNX_DecodeFrame(DNX_Decoder decoder, const void* inBuf, void* outBuf, unsigned int inBufSize, unsigned int outBufSize)"
  },
  {
    "label": "DNX_DeleteEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNX_DeleteEncoder(DNX_Encoder encoder)"
  },
  {
    "label": "DNX_DeleteDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNX_DeleteDecoder(DNX_Decoder decoder)"
  }
]