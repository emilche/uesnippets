[
  {
    "label": "UMovieSceneSpawnableDirectorBlueprintBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSpawnableDirectorBlueprintBinding"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Bindings / MovieSceneSpawnableBinding . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" MovieSceneSpawnRegister . h \" # include \" MovieSceneDynamicBinding . h \" # include \" MovieSceneSpawnableDirectorBlueprintBinding . generated . h \")",
    "insertText": "UCLASS(Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UClass* GetBoundObjectClass()"
  },
  {
    "label": "SpawnObjectInternal()",
    "kind": "Method",
    "detail": "Function (protected : UObject*)",
    "insertText": "SpawnObjectInternal(UWorld* WorldContext, FName SpawnName, const FGuid& BindingId, int32 BindingIndex, UMovieScene& MovieScene, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "DestroySpawnedObjectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySpawnedObjectInternal(UObject* Object)"
  },
  {
    "label": "GetSpawnName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSpawnName(const FGuid& BindingId, UMovieScene& MovieScene, FMovieSceneSequenceIDRef TemplateID, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "SupportsBindingCreationFromObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBindingCreationFromObject(const UObject* SourceObject)"
  },
  {
    "label": "CreateNewCustomBinding()",
    "kind": "Method",
    "detail": "Function (UMovieSceneCustomBinding*)",
    "insertText": "CreateNewCustomBinding(UObject* SourceObject, UMovieScene& OwnerMovieScene)"
  },
  {
    "label": "SupportsConversionFromBinding()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "SupportsConversionFromBinding(const FMovieSceneBindingReference& BindingReference, const UObject* SourceObject)"
  },
  {
    "label": "CreateCustomBindingFromBinding()",
    "kind": "Method",
    "detail": "Function (UMovieSceneCustomBinding*)",
    "insertText": "CreateCustomBindingFromBinding(const FMovieSceneBindingReference& BindingReference, UObject* SourceObject, UMovieScene& OwnerMovieScene)"
  },
  {
    "label": "GetBindingTypePrettyName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBindingTypePrettyName()"
  },
  {
    "label": "GetBindingTrackIconTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBindingTrackIconTooltip()"
  },
  {
    "label": "GetWorldContext()",
    "kind": "Method",
    "detail": "Function (# endif private : UWorld*)",
    "insertText": "GetWorldContext(TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  }
]