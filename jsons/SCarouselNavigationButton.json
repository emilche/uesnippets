[
  {
    "label": "SCarouselNavigationButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCarouselNavigationButton"
  },
  {
    "label": "SPeekBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPeekBorder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / StyleDefaults . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / SButton . h \" # include \" WidgetCarouselStyle . h \" # include \" HAL / PlatformProcess . h \" # include \" Widgets / Layout / SSpacer . h \" # include \" HAL / PlatformApplicationMisc . h \" # define LOCTEXT_NAMESPACE \" WidgetCarousel \" class SCarouselNavigationButton : public SCompoundWidget {)",
    "insertText": "DECLARE_DELEGATE(FOnBeginPeek) DECLARE_DELEGATE(FOnEndPeek)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPeekBorder) : _OnBeginPeek() , _OnEndPeek() , _HAlign(HAlign_Fill) , _VAlign(VAlign_Fill) , _Padding(FMargin(0))"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnBeginPeek, OnBeginPeek) SLATE_EVENT(FOnEndPeek, OnEndPeek) SLATE_ARGUMENT(EHorizontalAlignment, HAlign) SLATE_ARGUMENT(EVerticalAlignment, VAlign) SLATE_ATTRIBUTE(FMargin, Padding) SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (OnBeginPeek = InArgs . _OnBeginPeek ; OnEndPeek = InArgs . _OnEndPeek ;)",
    "insertText": "Construct(SBorder::FArguments() .HAlign(InArgs._HAlign) .VAlign(InArgs._VAlign) .Padding(InArgs._Padding) .BorderImage(FStyleDefaults::GetNoBrush()) [ InArgs._Content.Widget ])"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnBeginPeek .)",
    "insertText": "Execute()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "OnMouseEnter(MyGeometry, MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "OnMouseLeave(MouseEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : FOnBeginPeek OnBeginPeek ; FOnEndPeek OnEndPeek ; } ; public : enum class ENavigationButtonDirection { Left,Right } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SCarouselNavigationButton) : _Style()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FWidgetCarouselNavigationButtonStyle, Style) SLATE_EVENT(FOnClicked, OnClicked) SLATE_ARGUMENT(ENavigationButtonDirection, Direction) SLATE_EVENT(FOnBeginPeek, OnBeginPeek) SLATE_EVENT(FOnEndPeek, OnEndPeek) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ImageTransparency = 0 . f ; Style = InArgs . _Style ; ChildSlot [)",
    "insertText": "SNew(SBox) .WidthOverride(150.0f) [ SNew(SPeekBorder) .OnBeginPeek(InArgs._OnBeginPeek) .OnEndPeek(InArgs._OnEndPeek) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() [ SNew(SSpacer) .Visibility(InArgs._Direction == ENavigationButtonDirection::Left ? EVisibility::Collapsed : EVisibility::Visible) ] +SHorizontalBox::Slot() .HAlign(InArgs._Direction == ENavigationButtonDirection::Left ? HAlign_Left : HAlign_Right) .AutoWidth() [ SAssignNew(HiddenButton, SButton) .HAlign(HAlign_Center) .VAlign(VAlign_Center) .ToolTipText(InArgs._ToolTipText) .OnClicked(InArgs._OnClicked) .ButtonStyle(FCoreStyle::Get(), \"NoBorder\") .Cursor(EMouseCursor::Hand) [ SAssignNew(VisibleButton, SButton) .HAlign(HAlign_Center) .VAlign(VAlign_Center) .ToolTipText(InArgs._ToolTipText) .OnClicked(InArgs._OnClicked) .ButtonStyle(&Style->InnerButtonStyle) .ContentPadding(FMargin(15, 30)) .ButtonColorAndOpacity(this, &SCarouselNavigationButton::GetButtonColor) .Cursor(EMouseCursor::Hand) [ SNew(SBox) .HeightOverride(42.0f) .WidthOverride(25.0f) [ SNew(SImage) .Image(InArgs._Direction == ENavigationButtonDirection::Left ? &Style->NavigationButtonLeftImage : &Style->NavigationButtonRightImage) .ColorAndOpacity(this, &SCarouselNavigationButton::GetButtonImageColor) ] ] ] ] + SHorizontalBox::Slot() [ SNew(SSpacer) .Visibility(InArgs._Direction == ENavigationButtonDirection::Left ? EVisibility::Visible : EVisibility::Collapsed)"
  },
  {
    "label": "GetButtonColor()",
    "kind": "Method",
    "detail": "Function (} private : FSlateColor)",
    "insertText": "GetButtonColor()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor Color = FLinearColor::White ; Color . A = ImageTransparency ; return Color ; } else { return FLinearColor::White ; } } return)",
    "insertText": "FLinearColor(0.0f, 0.0f, 0.0f, ImageTransparency * 0.5f)"
  },
  {
    "label": "GetButtonImageColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetButtonImageColor()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FLinearColor(0.0f, 0.0f, 0.0f, ImageTransparency)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FLinearColor(1.0f, 1.0f, 1.0f, ImageTransparency)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float BlendSpeed = 2 . 0 f ; float DesiredBlendSpeed = BlendSpeed* InDeltaTime ;)",
    "insertText": "if(IsHovered())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (ImageTransparency = FMath::Min<)",
    "insertText": "float(ImageTransparency + DesiredBlendSpeed, 1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { ImageTransparency = 1 . f ; } } else {)",
    "insertText": "if(ImageTransparency != 0.f && FPlatformApplicationMisc::IsThisApplicationForeground())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (ImageTransparency = FMath::Max<)",
    "insertText": "float(ImageTransparency - DesiredBlendSpeed, 0.f)"
  }
]