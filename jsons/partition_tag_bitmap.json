[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TAG_BITMAP_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TAG_BITMAP_H_ # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" namespace partition_alloc::internal { # if)",
    "insertText": "defined(PA_ENABLE_MTE_CHECKED_PTR_SUPPORT_WITH_64_BITS_POINTERS)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (size_t kPartitionTagSizeShift = 0 ; size_t kPartitionTagSize = 1 U<<kPartitionTagSizeShift ; size_t kBytesPerPartitionTagShift = 4 ; size_t kBytesPerPartitionTag = 1 U<<kBytesPerPartitionTagShift ;)",
    "insertText": "static_assert(kMinBucketedOrder >= kBytesPerPartitionTagShift + 1, \"MTECheckedPtr requires kBytesPerPartitionTagShift-bytes alignment.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (size_t kBytesPerPartitionTagRatio = kBytesPerPartitionTag / kPartitionTagSize ;)",
    "insertText": "static_assert(kBytesPerPartitionTag > 0, \"kBytesPerPartitionTag should be larger than 0\")"
  },
  {
    "label": "CeilCountOfUnits()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CeilCountOfUnits(size_t size, size_t unit_size)"
  },
  {
    "label": "NumPartitionPagesPerTagBitmap()",
    "kind": "Method",
    "detail": "Function (} } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "NumPartitionPagesPerTagBitmap()"
  },
  {
    "label": "NumSystemPagesPerTagBitmap()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "NumSystemPagesPerTagBitmap()"
  },
  {
    "label": "ActualTagBitmapSize()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "ActualTagBitmapSize()"
  },
  {
    "label": "ReservedTagBitmapSize()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "ReservedTagBitmapSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # if PAGE_ALLOCATOR_CONSTANTS_ARE_CONSTEXPR)",
    "insertText": "static_assert(ActualTagBitmapSize() <= ReservedTagBitmapSize(), \"kActualTagBitmapSize should be smaller than or equal to \" \"kReservedTagBitmapSize.\")"
  },
  {
    "label": "SlotSpansSize()",
    "kind": "Method",
    "detail": "Function (PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "SlotSpansSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(ActualTagBitmapSize() * tag_bitmap::kBytesPerPartitionTagRatio >= SlotSpansSize(), \"bitmap is large enough to cover slot spans\")"
  }
]