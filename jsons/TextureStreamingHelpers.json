[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UStreamableRenderAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableRenderAsset"
  },
  {
    "label": "FRenderAssetStreamingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingSettings"
  },
  {
    "label": "ELowResHandlingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELowResHandlingMode"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FDynamicRenderAssetInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRenderAssetInstanceManager"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FRenderAssetStreamingMipCalcTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderAssetStreamingMipCalcTask"
  },
  {
    "label": "FStreamingRenderAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingRenderAsset"
  },
  {
    "label": "FStreamingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingContext"
  },
  {
    "label": "FStreamingHandlerTextureBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingHandlerTextureBase"
  },
  {
    "label": "FTexturePriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexturePriority"
  },
  {
    "label": "FRenderAssetStreamingStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingStats"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" HAL / IConsoleManager . h \" # include \" Misc / MemStack . h \" # include \" Engine / TextureDefines . h \" # ifndef STREAMING_RETRY_ON_DESERIALIZATION_ERROR # define STREAMING_RETRY_ON_DESERIALIZATION_ERROR UE_BUILD_SHIPPING # endif class AActor ; class UStreamableRenderAsset ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Renderable Asset Streaming Game Thread Update Time\"), STAT_RenderAssetStreaming_GameThreadUpdateTime,STATGROUP_Streaming,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"AddToWorld Time\"),STAT_AddToWorldTime,STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RemoveFromWorld Time\"),STAT_RemoveFromWorldTime,STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UpdateLevelStreaming Time\"),STAT_UpdateLevelStreamingTime,STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Manage LevelsToConsider\"), STAT_ManageLevelsToConsider, STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Volume Streaming Tick\"),STAT_VolumeStreamingTickTime,STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UpdateStreamingState Time\"), STAT_UpdateStreamingState, STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Streaming Volumes\"),STAT_VolumeStreamingChecks,STATGROUP_StreamingDetails,)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogContentStreaming, Log, All)"
  },
  {
    "label": "FRenderAssetStreamingSettings()",
    "kind": "Method",
    "detail": "Function (float GLightmapStreamingFactor ; float GShadowmapStreamingFactor ; bool GNeverStreamOutRenderAssets ; # define STREAMING_LOG_DYNAMIC 0 # define STREAMING_LOG_VIEWCHANGES 0 # define STREAMING_LOG_LEVELS 0 # define STREAMING_LOG_CANCELFORCED 0 # if PLATFORM_SUPPORTS_TEXTURE_STREAMING TAutoConsoleVariable<int32> CVarSetTextureStreaming ; # endif TAutoConsoleVariable<float> CVarStreamingBoost ; TAutoConsoleVariable<float> CVarStreamingMinBoost ; TAutoConsoleVariable<int32> CVarStreamingUseFixedPoolSize ; TAutoConsoleVariable<int32> CVarStreamingPoolSize ; TAutoConsoleVariable<int32> CVarStreamingCheckBuildStatus ; TAutoConsoleVariable<int32> CVarStreamingUseMaterialData ; TAutoConsoleVariable<int32> CVarStreamingNumStaticComponentsProcessedPerFrame ; TAutoConsoleVariable<int32> CVarStreamingDefragDynamicBounds ; TAutoConsoleVariable<float> CVarStreamingMaxTextureUVDensity ; TAutoConsoleVariable<int32> CVarStreamingLowResHandlingMode ; struct FRenderAssetStreamingSettings { enum ELowResHandlingMode { LRHM_DoNothing,LRHM_LoadBeforeRegular,LRHM_LoadBeforeAsyncPrecache,} ;)",
    "insertText": "FRenderAssetStreamingSettings()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(this, 0, sizeof(FRenderAssetStreamingSettings))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRenderAssetStreamingSettings& Rhs)"
  },
  {
    "label": "FRenderAssetStreamingStats()",
    "kind": "Method",
    "detail": "Function (} float MaxEffectiveScreenSize ; int32 MaxTempMemoryAllowed ; int32 DropMips ; int32 HLODStrategy ; float HiddenPrimitiveScale ; float PerTextureBiasViewBoostThreshold ; float MaxHiddenPrimitiveViewBoost ; int32 GlobalMipBias ; int32 PoolSize ; int32 MeshPoolSize ; bool bLimitPoolSizeToVRAM ; bool bUseNewMetrics ; bool bFullyLoadUsedTextures ; bool bFullyLoadMeshes ; bool bUseAllMips ; bool bUsePerTextureBias ; bool bUseMaterialData ; int32 MinMipForSplitRequest ; float MinLevelRenderAssetScreenSize ; float MaxTextureUVDensity ; int32 MaterialQualityLevel ; int32 FramesForFullUpdate ; ELowResHandlingMode LowResHandlingMode ; bool bMipCalculationEnablePerLevelList ; bool bPrioritizeMeshLODRetention ; int32 VRAMPercentageClamp ; bool bStressTest ; int32 ExtraIOLatency ; bool HighPriorityLoad_Texture [ TEXTUREGROUP_MAX ] ; protected : } ; typedef TArray<int32,TMemStackAllocator<>> FStreamingRequests ; typedef TArray<const UStreamableRenderAsset*,TInlineAllocator<1 2>> FRemovedRenderAssetArray ; # define NUM_BANDWIDTHSAMPLES 5 1 2 # define NUM_LATENCYSAMPLES 5 1 2 # define MAX_STREAMINGDISTANCE 1 0 0 0 0 . 0 f # define MAX_MIPDELTA 5 . 0 f # define MAX_LASTRENDERTIME 9 0 . 0 f class UPrimitiveComponent ; class FDynamicRenderAssetInstanceManager ; template<T> class FAsyncTask ; class FRenderAssetStreamingMipCalcTask ; struct FStreamingRenderAsset ; struct FStreamingContext ; struct FStreamingHandlerTextureBase ; struct FTexturePriority ; struct FRenderAssetStreamingStats {)",
    "insertText": "FRenderAssetStreamingStats()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FRenderAssetStreamingStats))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply()"
  },
  {
    "label": "OwnerLevelHasRegisteredStaticComponentsInStreamingManager()",
    "kind": "Method",
    "detail": "Function (int64 RenderAssetPool ; int64 UsedStreamingPool ; int64 SafetyPool ; int64 TemporaryPool ; int64 StreamingPool ; int64 NonStreamingMips ; int64 RequiredPool ; int64 VisibleMips ; int64 HiddenMips ; int64 ForcedMips ; int64 UnkownRefMips ; int64 CachedMips ; int64 WantedMips ; int64 NewRequests ; int64 PendingRequests ; int64 MipIOBandwidth ; int64 OverBudget ; double Timestamp ; volatile int32 CallbacksCycles ; int32 SetupAsyncTaskCycles ; int32 UpdateStreamingDataCycles ; int32 StreamRenderAssetsCycles ; int32 NumStreamedMeshes ; float AvgNumStreamedLODs ; float AvgNumResidentLODs ; float AvgNumEvictedLODs ; int64 StreamedMeshMem ; int64 ResidentMeshMem ; int64 EvictedMeshMem ; } ; bool)",
    "insertText": "OwnerLevelHasRegisteredStaticComponentsInStreamingManager(const class AActor* Owner)"
  }
]