[
  {
    "label": "FGenericWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericWindow"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGamepadKeyNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGamepadKeyNames"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindowSizeLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowSizeLimits"
  },
  {
    "label": "FInputDeviceScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputDeviceScope"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "SetMinWidth()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / Optional . h \" # include \" GenericPlatform / GenericPlatformInputDeviceMapper . h \" class FGenericWindow ; namespace EMouseButtons { enum Type { Left = 0,Middle,Right,Thumb01,Thumb02,Invalid,} ; } struct FGamepadKeyNames { typedef FName Type ; const FName Invalid ; const FName LeftAnalogX ; const FName LeftAnalogY ; const FName RightAnalogX ; const FName RightAnalogY ; const FName LeftTriggerAnalog ; const FName RightTriggerAnalog ; const FName LeftThumb ; const FName RightThumb ; const FName SpecialLeft ; const FName SpecialLeft_X ; const FName SpecialLeft_Y ; const FName SpecialRight ; const FName FaceButtonBottom ; const FName FaceButtonRight ; const FName FaceButtonLeft ; const FName FaceButtonTop ; const FName LeftShoulder ; const FName RightShoulder ; const FName LeftTriggerThreshold ; const FName RightTriggerThreshold ; const FName DPadUp ; const FName DPadDown ; const FName DPadRight ; const FName DPadLeft ; const FName LeftStickUp ; const FName LeftStickDown ; const FName LeftStickRight ; const FName LeftStickLeft ; const FName RightStickUp ; const FName RightStickDown ; const FName RightStickRight ; const FName RightStickLeft ; } ; enum class EWindowActivation : uint8 { Activate,ActivateByMouse,Deactivate } ; namespace EWindowZone { enum Type { NotInWindow = 0,TopLeftBorder = 1,TopBorder = 2,TopRightBorder = 3,LeftBorder = 4,ClientArea = 5,RightBorder = 6,BottomLeftBorder = 7,BottomBorder = 8,BottomRightBorder = 9,TitleBar = 1 0,MinimizeButton = 1 1,MaximizeButton = 1 2,CloseButton = 1 3,SysMenu = 1 4,Unspecified = 0,} ; } namespace EWindowAction { enum Type { ClickedNonClientArea = 1,Maximize = 2,Restore = 3,WindowMenu = 4,} ; } namespace EDropEffect { enum Type { None = 0,Copy = 1,Move = 2,Link = 3,} ; } enum class EGestureEvent : uint8 { None,Scroll,Magnify,Swipe,Rotate,LongPress,Count } ; struct FWindowSizeLimits { public : FWindowSizeLimits&)",
    "insertText": "SetMinWidth(TOptional<float> InValue)"
  },
  {
    "label": "GetMinWidth()",
    "kind": "Method",
    "detail": "Function (MinWidth = InValue ; return* this ; } const TOptional<float>&)",
    "insertText": "GetMinWidth()"
  },
  {
    "label": "GetMinHeight()",
    "kind": "Method",
    "detail": "Function (MinHeight = InValue ; return* this ; } const TOptional<float>&)",
    "insertText": "GetMinHeight()"
  },
  {
    "label": "GetMaxWidth()",
    "kind": "Method",
    "detail": "Function (MaxWidth = InValue ; return* this ; } const TOptional<float>&)",
    "insertText": "GetMaxWidth()"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (MaxHeight = InValue ; return* this ; } const TOptional<float>&)",
    "insertText": "GetMaxHeight()"
  },
  {
    "label": "FInputDeviceScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInputDeviceScope()"
  },
  {
    "label": "FInputDeviceScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputDeviceScope(const FInputDeviceScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInputDeviceScope&)",
    "insertText": "operator(const FInputDeviceScope&)"
  },
  {
    "label": "FInputDeviceScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputDeviceScope(FInputDeviceScope&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInputDeviceScope&)",
    "insertText": "operator(FInputDeviceScope&&)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (const FInputDeviceScope*)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "FGenericApplicationMessageHandler()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class FGenericApplicationMessageHandler { public : ~)",
    "insertText": "FGenericApplicationMessageHandler()"
  },
  {
    "label": "ShouldProcessUserInputMessages()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldProcessUserInputMessages(const TSharedPtr< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "OnMouseDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnMouseDown(const TSharedPtr< FGenericWindow >& Window, const EMouseButtons::Type Button)"
  },
  {
    "label": "OnControllerButtonPressed()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnControllerButtonPressed(FGamepadKeyNames::Type KeyName, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId, bool IsRepeat)"
  },
  {
    "label": "OnControllerButtonReleased()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnControllerButtonReleased(FGamepadKeyNames::Type KeyName, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId, bool IsRepeat)"
  },
  {
    "label": "OnBeginGesture()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "OnBeginGesture()"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnTouchGesture(EGestureEvent GestureType, const FVector2D& Delta, float WheelDelta, bool bIsDirectionInvertedFromDevice)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnTouchStarted(const TSharedPtr< FGenericWindow >& Window, const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceId)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchMoved(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchEnded(const FVector2D& Location, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchForceChanged(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchFirstMove(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "ShouldSimulateGesture()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ShouldSimulateGesture(EGestureEvent Gesture, bool bEnable)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnMotionDetected(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId)"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnSizeChanged(const TSharedRef< FGenericWindow >& Window, const int32 Width, const int32 Height, bool bWasMinimized = false)"
  },
  {
    "label": "GetSizeLimitsForWindow()",
    "kind": "Method",
    "detail": "Function (} FWindowSizeLimits)",
    "insertText": "GetSizeLimitsForWindow(const TSharedRef<FGenericWindow>& Window)"
  },
  {
    "label": "OnResizingWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResizingWindow(const TSharedRef< FGenericWindow >& Window)"
  },
  {
    "label": "BeginReshapingWindow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BeginReshapingWindow(const TSharedRef< FGenericWindow >& Window)"
  },
  {
    "label": "HandleDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDPIScaleChanged(const TSharedRef< FGenericWindow >& Window)"
  },
  {
    "label": "SignalSystemDPIChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SignalSystemDPIChanged(const TSharedRef< FGenericWindow >& Window)"
  },
  {
    "label": "OnMovedWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMovedWindow(const TSharedRef< FGenericWindow >& Window, const int32 X, const int32 Y)"
  },
  {
    "label": "OnWindowActivationChanged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnWindowActivationChanged(const TSharedRef< FGenericWindow >& Window, const EWindowActivation ActivationType)"
  },
  {
    "label": "OnDragEnterText()",
    "kind": "Method",
    "detail": "Function (} EDropEffect::Type)",
    "insertText": "OnDragEnterText(const TSharedRef< FGenericWindow >& Window, const FString& Text)"
  },
  {
    "label": "OnDragDrop()",
    "kind": "Method",
    "detail": "Function (} EDropEffect::Type)",
    "insertText": "OnDragDrop(const TSharedPtr< FGenericWindow >& Window)"
  },
  {
    "label": "GetPlatformUserForUserIndex()",
    "kind": "Method",
    "detail": "Function (FPlatformUserId UserId =)",
    "insertText": "GetPlatformUserForUserIndex(ControllerId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FInputDeviceId DeviceId = INPUTDEVICEID_NONE ;)",
    "insertText": "Get().RemapControllerIdToPlatformUserAndDevice(ControllerId, UserId, DeviceId)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchStarted(const TSharedPtr< FGenericWindow >& Window, const FVector2D& Location, float Force, int32 TouchIndex, int32 ControllerId)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchMoved(const FVector2D& Location, float Force, int32 TouchIndex, int32 ControllerId)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchEnded(const FVector2D& Location, int32 TouchIndex, int32 ControllerId)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchForceChanged(const FVector2D& Location, float Force, int32 TouchIndex, int32 ControllerId)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnTouchFirstMove(const FVector2D& Location, float Force, int32 TouchIndex, int32 ControllerId)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "OnMotionDetected(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration, int32 ControllerId)"
  }
]