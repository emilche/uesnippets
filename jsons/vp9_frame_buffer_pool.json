[
  {
    "label": "vpx_codec_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_ctx"
  },
  {
    "label": "vpx_codec_frame_buffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_frame_buffer"
  },
  {
    "label": "Vp9FrameBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vp9FrameBufferPool"
  },
  {
    "label": "Vp9FrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vp9FrameBuffer"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP9_VP9_FRAME_BUFFER_POOL_H_ # define MODULES_VIDEO_CODING_CODECS_VP9_VP9_FRAME_BUFFER_POOL_H_ # ifdef RTC_ENABLE_VP9 # include<vector> # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / synchronization / mutex . h \" struct vpx_codec_ctx ; struct vpx_codec_frame_buffer ; namespace webrtc { size_t kDefaultMaxNumBuffers = 6 8 ; class Vp9FrameBufferPool { public : class Vp9FrameBuffer final : public rtc::RefCountedNonVirtual<Vp9FrameBuffer> { public : uint8_t*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetDataSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetDataSize()"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSize(size_t size)"
  },
  {
    "label": "InitializeVpxUsePool()",
    "kind": "Method",
    "detail": "Function (using rtc::RefCountedNonVirtual<Vp9FrameBuffer>::HasOneRef ; private : rtc::Buffer data_ ; } ; bool)",
    "insertText": "InitializeVpxUsePool(vpx_codec_ctx* vpx_codec_context)"
  },
  {
    "label": "GetFrameBuffer()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<Vp9FrameBuffer>)",
    "insertText": "GetFrameBuffer(size_t min_size)"
  },
  {
    "label": "GetNumBuffersInUse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumBuffersInUse()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resize(size_t max_number_of_buffers)"
  },
  {
    "label": "ClearPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPool()"
  },
  {
    "label": "VpxGetFrameBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "VpxGetFrameBuffer(void* user_priv, size_t min_size, vpx_codec_frame_buffer* fb)"
  },
  {
    "label": "VpxReleaseFrameBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "VpxReleaseFrameBuffer(void* user_priv, vpx_codec_frame_buffer* fb)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex buffers_lock_ ; std::vector<rtc::scoped_refptr<Vp9FrameBuffer>> allocated_buffers_)",
    "insertText": "RTC_GUARDED_BY(buffers_lock_)"
  }
]