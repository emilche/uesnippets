[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FMaterialLayersFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialLayersFunctionsID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctionsID"
  },
  {
    "label": "FMaterialLayersFunctionsEditorOnlyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctionsEditorOnlyData"
  },
  {
    "label": "FMaterialLayersFunctionsTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctionsTree"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayload"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FMaterialLayersFunctionsRuntimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctionsRuntimeData"
  },
  {
    "label": "UMaterialFunctionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunctionInterface"
  },
  {
    "label": "FStaticParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticParameterSet"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MaterialTypes . h \" # include \" MaterialExpression . h \" # include \" MaterialLayersFunctions . generated . h \" # define LOCTEXT_NAMESPACE \" MaterialLayersFunctions \" class FArchive ; class FShaderKeyGenerator ; struct FMaterialLayersFunctions ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Uninitialized = 0 u,LinkedToParent,UnlinkedFromParent,NotFromParent,} ; struct FMaterialLayersFunctionsID { TArray<FGuid> LayerIDs ; TArray<FGuid> BlendIDs ; TArray<bool> LayerStates ; # if WITH_EDITOR bool)",
    "insertText": "operator(const FMaterialLayersFunctionsID& Reference)"
  },
  {
    "label": "SerializeForDDC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeForDDC(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialLayersFunctionsID&)",
    "insertText": "operator(FArchive& Ar, FMaterialLayersFunctionsID& Ref)"
  },
  {
    "label": "SerializeForDDC()",
    "kind": "Method",
    "detail": "Function (Ref .)",
    "insertText": "SerializeForDDC(Ar)"
  },
  {
    "label": "AppendKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyString(FString& KeyString)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = MaterialLayers)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "operator(const FMaterialLayersFunctionsEditorOnlyData& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_EDITOR void)",
    "insertText": "Empty()"
  },
  {
    "label": "LinkAllLayersToParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LinkAllLayersToParent()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FPayloadId = int32 ; const FNodeId InvalidId = - 1 ; struct FNode { FNodeId Parent = InvalidId ; FNodeId NextSibling = InvalidId ; FNodeId ChildrenHead = InvalidId ; FNodeId Spare = InvalidId ; bool)",
    "insertText": "operator(const FNode& Other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Parent = NextSibling = Spare = InvalidId ; } } ; struct FPayload { FPayloadId Layer = InvalidId ; FPayloadId Blend = InvalidId ; bool)",
    "insertText": "operator(const FPayload& Other)"
  },
  {
    "label": "FMaterialLayersFunctionsTree()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FNode> Nodes ; TArray<FPayload> Payloads ; FNodeId Root = - 1 ;)",
    "insertText": "FMaterialLayersFunctionsTree()"
  },
  {
    "label": "FMaterialLayersFunctionsTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialLayersFunctionsTree(const FMaterialLayersFunctionsTree& Rhs) : Nodes(Rhs.Nodes), Payloads(Rhs.Payloads), Root(Rhs.Root)"
  },
  {
    "label": "FMaterialLayersFunctionsTree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialLayersFunctionsTree(const FMaterialLayersFunctions& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialLayersFunctionsTree&)",
    "insertText": "operator(const FMaterialLayersFunctionsTree& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Nodes = Rhs . Nodes ; Payloads = Rhs . Payloads ; Root = Rhs . Root ; return* this ; } bool)",
    "insertText": "operator(const FMaterialLayersFunctionsTree& Other)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (Root = - 1 ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FNode& T)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} FNode*)",
    "insertText": "GetNode(FNodeId InNodeId)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (FPayload*)",
    "insertText": "GetPayload(FNodeId InNodeId)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FNode*)",
    "insertText": "GetParent(FNodeId InNodeId)"
  },
  {
    "label": "GetSiblingHeadId()",
    "kind": "Method",
    "detail": "Function (FNodeId)",
    "insertText": "GetSiblingHeadId(FNodeId InNodeId)"
  },
  {
    "label": "GetChildrenIds()",
    "kind": "Method",
    "detail": "Function (TArray<FNodeId>)",
    "insertText": "GetChildrenIds(FNodeId InNodeId)"
  },
  {
    "label": "GetDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDepth(FNodeId InNodeId)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (FNodeId)",
    "insertText": "AddNode(const FPayload& InPayload, FNodeId InParent, int32 InAtChildIndex = -1)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (TArray<FNodeId>)",
    "insertText": "RemoveNode(FNodeId RemovedNodeId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FNodeVisitor =)",
    "insertText": "void(*)(FNodeId InNodeId, int32 InDepth, int32 InSiblingNum, const FPayload& InPayload)"
  },
  {
    "label": "TraverseNode()",
    "kind": "Method",
    "detail": "Function (template<V> FNodeId)",
    "insertText": "TraverseNode(V InVisitor, FNodeId InNodeId, int32 InDepth, int32 InSiblingNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FNodeId NextChildId = Root ; FNodeId NextSiblingId = InvalidId ;)",
    "insertText": "if(InNodeId != InvalidId)"
  },
  {
    "label": "InVisitor()",
    "kind": "Method",
    "detail": "Function (const FNode& Node = Nodes [ InNodeId ] ; const FPayload& Payload = Payloads [ InNodeId ] ;)",
    "insertText": "InVisitor(InNodeId, InDepth, InSiblingNum, Payload)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (NextChildId = Node . ChildrenHead ; NextSiblingId = Node . NextSibling ; } { InDepth + + ; int32 SiblingNum = 0 ;)",
    "insertText": "while(IsValidId(NextChildId))"
  },
  {
    "label": "TraverseNode()",
    "kind": "Method",
    "detail": "Function (NextChildId =)",
    "insertText": "TraverseNode(InVisitor, NextChildId, InDepth, SiblingNum)"
  },
  {
    "label": "Traverse()",
    "kind": "Method",
    "detail": "Function (SiblingNum + + ; } InDepth - - ; } return NextSiblingId ; } template<V> void)",
    "insertText": "Traverse(V InVisitor, FNodeId InRootNodeId = InvalidId)"
  },
  {
    "label": "TraverseNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraverseNode(InVisitor, InRootNodeId, 0, 0)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "Log(FString InTab)"
  },
  {
    "label": "AllocNode()",
    "kind": "Method",
    "detail": "Function (private : FNodeId)",
    "insertText": "AllocNode(const FPayload& InPayload)"
  },
  {
    "label": "FMaterialLayersFunctionsRuntimeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialLayersFunctionsRuntimeData()"
  },
  {
    "label": "FMaterialLayersFunctionsRuntimeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialLayersFunctionsRuntimeData(const FMaterialLayersFunctionsRuntimeData& Rhs) : Layers(Rhs.Layers) , Blends(Rhs.Blends) #if ENABLE_MATERIAL_LAYER_PROTOTYPE , Tree(Rhs.Tree)"
  },
  {
    "label": "FMaterialLayersFunctionsRuntimeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialLayersFunctionsRuntimeData(const FMaterialLayersFunctions& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialLayersFunctionsRuntimeData&)",
    "insertText": "operator(const FMaterialLayersFunctionsRuntimeData& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Layers = Rhs . Layers ; Blends = Rhs . Blends ; # if ENABLE_MATERIAL_LAYER_PROTOTYPE Tree = Rhs . Tree ; # endif return* this ; } FMaterialLayersFunctionsRuntimeData&)",
    "insertText": "operator(const FMaterialLayersFunctions& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "operator(const FMaterialLayersFunctionsRuntimeData& Other)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FMaterialLayersFunctionsID)",
    "insertText": "GetID(const FMaterialLayersFunctionsEditorOnlyData& EditorOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FMaterialLayersFunctions()",
    "kind": "Method",
    "detail": "Function (# endif const FGuid BackgroundGuid ;)",
    "insertText": "FMaterialLayersFunctions()"
  },
  {
    "label": "FMaterialLayersFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialLayersFunctions(const FMaterialLayersFunctionsRuntimeData&)"
  },
  {
    "label": "GetRuntime()",
    "kind": "Method",
    "detail": "Function (FMaterialLayersFunctionsRuntimeData&)",
    "insertText": "GetRuntime()"
  },
  {
    "label": "AddDefaultBackgroundLayer()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "AddDefaultBackgroundLayer()"
  },
  {
    "label": "AppendBlendedLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendBlendedLayer()"
  },
  {
    "label": "AddLayerCopy()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLayerCopy(const FMaterialLayersFunctionsRuntimeData& Source, const FMaterialLayersFunctionsEditorOnlyData& SourceEditorOnly, int32 SourceLayerIndex, bool bVisible, EMaterialLayerLinkState LinkState)"
  },
  {
    "label": "AddLayerCopy()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLayerCopy(const FMaterialLayersFunctions& Source, int32 SourceLayerIndex, bool bVisible, EMaterialLayerLinkState LinkState)"
  },
  {
    "label": "InsertLayerCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertLayerCopy(const FMaterialLayersFunctionsRuntimeData& Source, const FMaterialLayersFunctionsEditorOnlyData& SourceEditorOnly, int32 SourceLayerIndex, EMaterialLayerLinkState LinkState, int32 LayerIndex)"
  },
  {
    "label": "InsertLayerCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertLayerCopy(const FMaterialLayersFunctions& Source, int32 SourceLayerIndex, EMaterialLayerLinkState LinkState, int32 LayerIndex)"
  },
  {
    "label": "RemoveBlendedLayerAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveBlendedLayerAt(int32 Index)"
  },
  {
    "label": "MoveBlendedLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveBlendedLayer(int32 SrcLayerIndex, int32 DstLayerIndex)"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (const ID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetStaticPermutationString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetStaticPermutationString()"
  },
  {
    "label": "AppendStaticPermutationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendStaticPermutationKey(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "UnlinkLayerFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkLayerFromParent(int32 Index)"
  },
  {
    "label": "IsLayerLinkedToParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerLinkedToParent(int32 Index)"
  },
  {
    "label": "RelinkLayersToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelinkLayersToParent()"
  },
  {
    "label": "HasAnyUnlinkedLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyUnlinkedLayers()"
  },
  {
    "label": "ToggleBlendedLayerVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleBlendedLayerVisibility(int32 Index)"
  },
  {
    "label": "SetBlendedLayerVisibility()",
    "kind": "Method",
    "detail": "Function (EditorOnly . LayerStates [ Index ] = ! EditorOnly . LayerStates [ Index ] ; } void)",
    "insertText": "SetBlendedLayerVisibility(int32 Index, bool InNewVisibility)"
  },
  {
    "label": "GetLayerVisibility()",
    "kind": "Method",
    "detail": "Function (EditorOnly . LayerStates [ Index ] = InNewVisibility ; } bool)",
    "insertText": "GetLayerVisibility(int32 Index)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText LayerName =)",
    "insertText": "Format(LOCTEXT(\"LayerPrefix\", \"Layer {0}\"), Counter)"
  },
  {
    "label": "MatchesParent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MatchesParent(const FMaterialLayersFunctionsRuntimeData& Runtime, const FMaterialLayersFunctionsEditorOnlyData& EditorOnly, const FMaterialLayersFunctionsRuntimeData& ParentRuntime, const FMaterialLayersFunctionsEditorOnlyData& ParentEditorOnly)"
  },
  {
    "label": "MatchesParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesParent(const FMaterialLayersFunctions& Parent)"
  },
  {
    "label": "ResolveParent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ResolveParent(const FMaterialLayersFunctionsRuntimeData& ParentRuntime, const FMaterialLayersFunctionsEditorOnlyData& ParentEditorOnly, FMaterialLayersFunctionsRuntimeData& Runtime, FMaterialLayersFunctionsEditorOnlyData& EditorOnly, TArray<int32>& OutRemapLayerIndices)"
  },
  {
    "label": "ResolveParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveParent(const FMaterialLayersFunctions& Parent, TArray<int32>& OutRemapLayerIndices)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Validate(const FMaterialLayersFunctionsRuntimeData& Runtime, const FMaterialLayersFunctionsEditorOnlyData& EditorOnly)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate(GetRuntime(), EditorOnly)"
  },
  {
    "label": "SerializeLegacy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeLegacy(FArchive& Ar)"
  },
  {
    "label": "CheckAndRepairPostSerializeEditorOnlyDataForRuntimeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndRepairPostSerializeEditorOnlyDataForRuntimeData(FMaterialLayersFunctionsRuntimeData& Runtime, FMaterialLayersFunctionsEditorOnlyData& EditorOnly)"
  },
  {
    "label": "GetNodeParent()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR using FLayerNodeId = FMaterialLayersFunctionsTree::FNodeId ; using FLayerNodeIdArray = TArray<FLayerNodeId> ; using FLayerNodePayload = FMaterialLayersFunctionsTree::FPayload ; FLayerNodeId)",
    "insertText": "GetNodeParent(FLayerNodeId InNode)"
  },
  {
    "label": "GetNodeChildren()",
    "kind": "Method",
    "detail": "Function (FLayerNodeIdArray)",
    "insertText": "GetNodeChildren(FLayerNodeId InNode)"
  },
  {
    "label": "GetNodePayload()",
    "kind": "Method",
    "detail": "Function (FLayerNodePayload)",
    "insertText": "GetNodePayload(FLayerNodeId InNodeId)"
  },
  {
    "label": "GetNodeDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNodeDepth(FLayerNodeId InNodeId)"
  },
  {
    "label": "GetLayerFuncIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerFuncIndex(FLayerNodeId InNodeId)"
  },
  {
    "label": "GetBlendFuncIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendFuncIndex(FLayerNodeId InNodeId)"
  },
  {
    "label": "CanAppendLayerNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAppendLayerNode(FLayerNodeId InParent)"
  },
  {
    "label": "AppendLayerNode()",
    "kind": "Method",
    "detail": "Function (FLayerNodeId)",
    "insertText": "AppendLayerNode(FLayerNodeId InParent, int32 InSiblingIndex = -1)"
  },
  {
    "label": "CanRemoveLayerNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveLayerNode(FLayerNodeId InNodeId)"
  },
  {
    "label": "RemoveLayerNodeAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLayerNodeAt(FLayerNodeId InNodeId)"
  },
  {
    "label": "MoveLayerNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveLayerNode(FLayerNodeId InNodeId, FLayerNodeId DstParentId, int32 InSiblingIndex = -1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMaterialLayersFunctions&, const FMaterialLayersFunctionsRuntimeData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMaterialLayersFunctionsRuntimeData&, const FMaterialLayersFunctions&)"
  }
]