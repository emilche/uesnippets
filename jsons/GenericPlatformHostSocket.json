[
  {
    "label": "IPlatformHostSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformHostSocket"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" class IPlatformHostSocket { public : enum class EResultNet : uint8 { Ok,ErrorUnknown,ErrorInvalidArgument,ErrorInvalidConnection,ErrorInterrupted,ErrorHostNotConnected } ; enum class EConnectionState : uint8 { Unknown,Created,Connected,Disconnected,Closed,} ; enum class EReceiveFlags : uint8 { DontWait,WaitAll,} ; public : EResultNet)",
    "insertText": "Send(const void* Buffer, uint64 BytesToSend)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (EResultNet)",
    "insertText": "Receive(void* Buffer, uint64 BytesToReceive)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (EResultNet)",
    "insertText": "Receive(void* Buffer, uint64 BytesToReceive, uint64& BytesReceived, EReceiveFlags ReadMode = EReceiveFlags::WaitAll)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EConnectionState)",
    "insertText": "GetState()"
  },
  {
    "label": "IPlatformHostSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IPlatformHostSocket()"
  }
]