[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" template<FuncType> class TFunctionRef ; namespace UE::String { enum class EParseTokensOptions : uint32 { None = 0,IgnoreCase = 1<<0,SkipEmpty = 1<<1,Trim = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EParseTokensOptions)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(FAnsiStringView View, ANSICHAR Delimiter, TFunctionRef<void (FAnsiStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(FWideStringView View, WIDECHAR Delimiter, TFunctionRef<void (FWideStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(FUtf8StringView View, UTF8CHAR Delimiter, TFunctionRef<void (FUtf8StringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (template<OutputType> void)",
    "insertText": "ParseTokens(const FAnsiStringView View, const ANSICHAR Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokens(const FWideStringView View, const WIDECHAR Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokens(const FUtf8StringView View, const UTF8CHAR Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseTokens(FAnsiStringView View, FAnsiStringView Delimiter, TFunctionRef<void (FAnsiStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(FWideStringView View, FWideStringView Delimiter, TFunctionRef<void (FWideStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(FUtf8StringView View, FUtf8StringView Delimiter, TFunctionRef<void (FUtf8StringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (template<OutputType> void)",
    "insertText": "ParseTokens(const FAnsiStringView View, const FAnsiStringView Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokens(const FWideStringView View, const FWideStringView Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokens(const FUtf8StringView View, const FUtf8StringView Delimiter, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseTokensMultiple(FAnsiStringView View, TConstArrayView<ANSICHAR> Delimiters, TFunctionRef<void (FAnsiStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(FWideStringView View, TConstArrayView<WIDECHAR> Delimiters, TFunctionRef<void (FWideStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(FUtf8StringView View, TConstArrayView<UTF8CHAR> Delimiters, TFunctionRef<void (FUtf8StringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FAnsiStringView View, const TConstArrayView<ANSICHAR> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(View, Delimiters, [&Output](FAnsiStringView Token) { Output.Add(Token); }, Options)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FWideStringView View, const TConstArrayView<WIDECHAR> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(View, Delimiters, [&Output](FWideStringView Token) { Output.Add(Token); }, Options)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FUtf8StringView View, const TConstArrayView<UTF8CHAR> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(View, Delimiters, [&Output](FUtf8StringView Token) { Output.Add(Token); }, Options)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseTokensMultiple(FAnsiStringView View, TConstArrayView<FAnsiStringView> Delimiters, TFunctionRef<void (FAnsiStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(FWideStringView View, TConstArrayView<FWideStringView> Delimiters, TFunctionRef<void (FWideStringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokensMultiple(FUtf8StringView View, TConstArrayView<FUtf8StringView> Delimiters, TFunctionRef<void (FUtf8StringView)> Visitor, EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FAnsiStringView View, const TConstArrayView<FAnsiStringView> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FWideStringView View, const TConstArrayView<FWideStringView> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  },
  {
    "label": "ParseTokensMultiple()",
    "kind": "Method",
    "detail": "Function (} template<OutputType> void)",
    "insertText": "ParseTokensMultiple(const FUtf8StringView View, const TConstArrayView<FUtf8StringView> Delimiters, OutputType& Output, const EParseTokensOptions Options = EParseTokensOptions::None)"
  }
]