[
  {
    "label": "TSphereSpecializeSamplingHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSphereSpecializeSamplingHelper"
  },
  {
    "label": "TSphere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSphere"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Box . h \" # include \" Chaos / GJKShape . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ImplicitObject . h \" # include \" ChaosArchive . h \" # include \" Math / VectorRegister . h \" # include \" UObject / ReleaseObjectVersion . h \" namespace Chaos { template<T,int d> struct TSphereSpecializeSamplingHelper { void)",
    "insertText": "ComputeSamplePoints(TArray<TVec3<T>>& Points, const class TSphere<T, 3>& Sphere, const int32 NumPoints)"
  },
  {
    "label": "TSphere()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,int d> class TSphere final : public FImplicitObject { public : using FImplicitObject::GetTypeName ;)",
    "insertText": "TSphere(const TVector<T, d>& InCenter, const T InRadius) : FImplicitObject(EImplicitObject::IsConvex | EImplicitObject::HasBoundingBox, ImplicitObjectType::Sphere) , Center(InCenter)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(InRadius)"
  },
  {
    "label": "TSphere()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSphere(const TSphere<T, d>& Other) : FImplicitObject(EImplicitObject::IsConvex | EImplicitObject::HasBoundingBox, ImplicitObjectType::Sphere) , Center(Other.Center)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(Other.GetRadius())"
  },
  {
    "label": "TSphere()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSphere(TSphere<T, d>&& Other) : FImplicitObject(EImplicitObject::IsConvex | EImplicitObject::HasBoundingBox, ImplicitObjectType::Sphere) , Center(MoveTemp(Other.Center))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSphere&)",
    "insertText": "operator(TSphere<T, d>&& InSteal)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> Type = InSteal . Type ; this -> bIsConvex = InSteal . bIsConvex ; this -> bDoCollide = InSteal . bDoCollide ; this -> bHasBoundingBox = InSteal . bHasBoundingBox ; Center =)",
    "insertText": "MoveTemp(InSteal.Center)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(InSteal.GetRadius())"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (OutNormal = InSamplePoint - Center ; return OutNormal .)",
    "insertText": "SafeNormalize() - GetRadius()"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Intersects(const TSphere<T, d>& Other)"
  },
  {
    "label": "DistSquared()",
    "kind": "Method",
    "detail": "Function (T CenterDistance =)",
    "insertText": "DistSquared(Other.GetCenter(), GetCenter())"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (T RadialSum = Other .)",
    "insertText": "GetRadius() + GetRadius()"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> Result =)",
    "insertText": "Center(StartPoint - Center).GetSafeNormal() * (GetRadius() + Thickness)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (OutFaceIndex = INDEX_NONE ; const T EffectiveRadius = Thickness +)",
    "insertText": "GetRadius()"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (const T EffectiveRadius2 = EffectiveRadius* EffectiveRadius ; const TVector<T,d> Offset = Center - StartPoint ; const T OffsetSize2 = Offset .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (OutTime = 0 ; return true ; } const T HalfB = - TVector<T,d)",
    "insertText": "DotProduct(Offset, Dir)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const T C = OffsetSize2 - EffectiveRadius2 ; const T QuarterUnderRoot = HalfB* HalfB - C ;)",
    "insertText": "if(QuarterUnderRoot < 0)"
  },
  {
    "label": "FinalNormal()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> FinalSpherePosition = StartPoint + FirstTime* Dir ; const TVector<T,d>)",
    "insertText": "FinalNormal(FinalSpherePosition - Center)"
  },
  {
    "label": "FindClosestIntersectionImp()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> IntersectionPosition = FinalSpherePosition - FinalNormal* Thickness ; OutTime = FirstTime ; OutPosition = IntersectionPosition ; OutNormal = FinalNormal ; return true ; } return false ; } Pair<TVector<T,d>,bool>)",
    "insertText": "FindClosestIntersectionImp(const TVector<T, d>& StartPoint, const TVector<T, d>& EndPoint, const T Thickness)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> Direction = EndPoint - StartPoint ; T Length = Direction .)",
    "insertText": "Size()"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (Direction = Direction .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> SphereToStart = StartPoint - Center ; T DistanceProjected = TVector<T,d)",
    "insertText": "DotProduct(Direction, SphereToStart)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UnderRoot == 0)"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MakePair(TVector<T, d>(-DistanceProjected * Direction + StartPoint), true)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} T Root1 = - DistanceProjected +)",
    "insertText": "sqrt(UnderRoot)"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MakePair(TVector<T, d>(Root2 * Direction + StartPoint), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Root2 < 0 || Root2 > Length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Root1 < Root2)"
  },
  {
    "label": "Support()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d>)",
    "insertText": "Support(const TVector<T, d>& Direction, const T Thickness, int32& VertexIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VertexIndex = 0 ;)",
    "insertText": "if(SizeSqr <= TNumericLimits<T>::Min())"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "SupportCore(const TVector<T, d>& Direction, const FReal InMargin, FReal* OutSupportDelta, int32& VertexIndex)"
  },
  {
    "label": "SupportCoreSimd()",
    "kind": "Method",
    "detail": "Function (VertexIndex = 0 ; return Center ; } VectorRegister4Float)",
    "insertText": "SupportCoreSimd(const VectorRegister4Float& Direction, const FReal InMargin)"
  },
  {
    "label": "SupportCoreScaled()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d>)",
    "insertText": "SupportCoreScaled(const TVector<T, d>& Direction, const FReal InMargin, const TVector<T, d>& Scale, FReal* OutSupportDelta, int32& VertexIndex)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (VertexIndex = 0 ; return Center* Scale ; } const TAABB<T,d>)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "CalculateTransformedBounds()",
    "kind": "Method",
    "detail": "Function (} FAABB3)",
    "insertText": "CalculateTransformedBounds(const FRigidTransform3& Transform)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (const FVec3 TransformedCenter = Transform .)",
    "insertText": "TransformPosition(Center)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 Extents =)",
    "insertText": "FVec3(GetRadius())"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetArea()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetArea(const T InRadius)"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (const T FourPI = UE_PI* 4 ; const T TwoPI = UE_PI* 2 ; return d = = 3 ? FourPI* InRadius* InRadius : TwoPI* InRadius ; } T)",
    "insertText": "GetVolume()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetVolume(const T InRadius)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (const T FourThirdsPI = 4 . / 3* UE_PI ; return FourThirdsPI* InRadius* InRadius* InRadius ; } const TVector<T,d>&)",
    "insertText": "GetCenter()"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeImp(FArchive& Ar)"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "ArRadius()",
    "kind": "Method",
    "detail": "Function (Ar<<Center ; FRealSingle)",
    "insertText": "ArRadius(FRealSingle)GetRadius()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (Ar<<ArRadius ;)",
    "insertText": "SetRadius(ArRadius)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, GetTypeName())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<TVector<T,d>>)",
    "insertText": "ComputeLocalSamplePoints(const int NumPoints)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<T,d>> Points ;)",
    "insertText": "if(GetRadius() <= UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Add(TVector<T, d>(0.0))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} else { Points .)",
    "insertText": "Reserve(NumPoints)"
  },
  {
    "label": "LocalSphere()",
    "kind": "Method",
    "detail": "Function (TSphere<T,d>)",
    "insertText": "LocalSphere(TVector<T, d>(0.0), GetRadius())"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TSphereSpecializeSamplingHelper<T,d)",
    "insertText": "ComputeSamplePoints(Points, LocalSphere, NumPoints)"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (} return Points ; } TArray<TVector<T,d>>)",
    "insertText": "ComputeLocalSamplePoints(const T PointsPerUnitArea, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<TVector<T,d>>)",
    "insertText": "ComputeSamplePoints(const int NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<T,d>> Points ; TSphereSpecializeSamplingHelper<T,d)",
    "insertText": "ComputeSamplePoints(Points, *this, NumPoints)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,d,d>)",
    "insertText": "GetInertiaTensor(const T InMass, const bool bInThinShell = false)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,d,d>)",
    "insertText": "GetInertiaTensor(const T InMass, const T InRadius, const bool bInThinShell = false)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T TwoThirds = static_cast<)",
    "insertText": "T(2.0 / 3.0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T TwoFifths = static_cast<)",
    "insertText": "T(2.0 / 5.0)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (const T Diagonal = bInThinShell ? TwoThirds* InMass* InRadius* InRadius : TwoFifths* InMass* InRadius* InRadius ; return PMatrix<T,d,)",
    "insertText": "d(Diagonal, Diagonal, Diagonal)"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} TRotation<T,d>)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 CenterHash = UE::)",
    "insertText": "GetTypeHash(Center)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 RadiusHash)",
    "insertText": "GetTypeHash(GetRadius())"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "CopyGeometryWithScale()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometryWithScale(const FVec3& Scale)"
  },
  {
    "label": "OffsetOfCenter()",
    "kind": "Method",
    "detail": "Function (} # if INTEL_ISPC struct FISPCDataVerifier { int32)",
    "insertText": "OffsetOfCenter()"
  },
  {
    "label": "SizeOfCenter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfCenter()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : void)",
    "insertText": "SetRadius(FReal InRadius)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(InRadius)"
  },
  {
    "label": "TSphere()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d> Center ; private : FImplicitObject ;)",
    "insertText": "TSphere() : FImplicitObject(EImplicitObject::IsConvex | EImplicitObject::HasBoundingBox, ImplicitObjectType::Sphere)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TSphereSpecializeSamplingHelper<T,2> { void)",
    "insertText": "ComputeSamplePoints(TArray<TVec2<T>>& Points, const TSphere<T, 2>& Sphere, const int32 NumPoints)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "AddUninitialized(1)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (Points [ Offset ] = Sphere .)",
    "insertText": "Center()"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<TVec2<T>>& Points, const TSphere<T, 2>& Sphere, const int32 NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Sphere.Center(), Sphere.GetRadius(), NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<TVec2<T>>& Points, const TVec2<T>& Center, const T Radius, const int32 NumPoints, const int32 SpiralSeed = 0)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "AddUninitialized(NumPoints)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Increment = static_cast<)",
    "insertText": "T(UE_PI * (1.0 + sqrt(5)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Z = static_cast<)",
    "insertText": "T(0.5 + i)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const T R =)",
    "insertText": "Sqrt(Z / static_cast<T>(NumPoints))"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (const T Theta =)",
    "insertText": "Increment(Z + static_cast<T>(SpiralSeed))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 Index = i + Offset ; Points [ Index ] = Center + TVec2<)",
    "insertText": "T(R * FMath::Cos(Theta), R * FMath::Sin(Theta))"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} } } ; template<T> struct TSphereSpecializeSamplingHelper<T,3> { void)",
    "insertText": "ComputeSamplePoints(TArray<TVec3<T>>& Points, const TSphere<T, 3>& Sphere, const int32 NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<TVec3<T>>& Points, const TSphere<T, 3>& Sphere, const int32 NumPoints, const bool FirstHalf = true, const bool SecondHalf = true, const int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Sphere.GetCenter(), Sphere.GetRadius(), NumPoints, FirstHalf, SecondHalf, SpiralSeed)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<TVec3<T>>& Points, const TVec3<T>& Center, const T Radius, const int32 NumPoints, const bool BottomHalf = true, const bool TopHalf = true, const int32 SpiralSeed = 0)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const T GRIncrement = static_cast<)",
    "insertText": "FReal(UE_PI * (1.0 + sqrt(5)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Index = Offset ;)",
    "insertText": "if(BottomHalf && !TopHalf)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T V = static_cast<)",
    "insertText": "T((2.0 * (0.5 + i) / (2.0 * NumPoints)) - 1.0)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (const T Phi =)",
    "insertText": "Acos(V)"
  },
  {
    "label": "GRIncrement()",
    "kind": "Method",
    "detail": "Function (const T Theta =)",
    "insertText": "GRIncrement(Sample + static_cast<T>(SpiralSeed))"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const T SinPhi =)",
    "insertText": "Sin(Phi)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TVec3<T>& Pt = Points [ Index + + ] ; Pt = Center + TVec3<)",
    "insertText": "T(Radius * FMath::Cos(Theta) * SinPhi, Radius * FMath::Sin(Theta) * SinPhi, Radius * FMath::Cos(Phi))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!BottomHalf && TopHalf)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T V = static_cast<)",
    "insertText": "T((2.0 * (0.5 + i) / (2.0 * NumPoints)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 i = 0; i < NumPoints; i++)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Phi = static_cast<)",
    "insertText": "T(FMath::Acos(1.0 - 2.0 * Sample / NumPoints))"
  },
  {
    "label": "ComputeBottomHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ComputeBottomHalfSemiSphere(TArray<TVec3<T>>& Points, const TSphere<T, 3>& Sphere, const int32 NumPoints, const int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Sphere, NumPoints, true, false, SpiralSeed)"
  },
  {
    "label": "ComputeTopHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeTopHalfSemiSphere(TArray<TVec3<T>>& Points, const TSphere<T, 3>& Sphere, const int32 NumPoints, const int32 SpiralSeed = 0)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Sphere, NumPoints, false, true, SpiralSeed)"
  }
]