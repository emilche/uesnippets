[
  {
    "label": "SProjectLauncherTaskListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherTaskListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherTask . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherTaskListRow \" class SProjectLauncherTaskListRow : public SMultiColumnTableRow<ILauncherTaskPtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherTaskListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<STableViewBase>, OwnerTableView) SLATE_ARGUMENT(ILauncherTaskPtr, Task) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Task = InArgs . _Task ; SMultiColumnTableRow<ILauncherTaskPtr)",
    "insertText": "Construct(FSuperRowType::FArguments(), InArgs._OwnerTableView.ToSharedRef())"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "HandleDurationText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "HandleDurationText()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (ILauncherTaskPtr TaskPtr = Task .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleIconColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleIconColorAndOpacity()"
  },
  {
    "label": "HandleIconImage()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "HandleIconImage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TaskPtr->GetStatus() == ELauncherTaskStatus::Completed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TaskPtr->GetStatus() == ELauncherTaskStatus::Failed)"
  },
  {
    "label": "HandleStatusText()",
    "kind": "Method",
    "detail": "Function (} } return NULL ; } FText)",
    "insertText": "HandleStatusText()"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (ELauncherTaskStatus::Type TaskStatus = TaskPtr ->)",
    "insertText": "GetStatus()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"StatusInProgressText\", \"Busy\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} case ELauncherTaskStatus::Canceled : return)",
    "insertText": "LOCTEXT(\"StatusCanceledText\", \"Canceled\")"
  },
  {
    "label": "HandleThrobberVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "HandleThrobberVisibility()"
  },
  {
    "label": "HandleErrorCounterText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleErrorCounterText()"
  }
]