[
  {
    "label": "NoDestructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoDestructor"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_NO_DESTRUCTOR_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_NO_DESTRUCTOR_H_ # include<new> # include<type_traits> # include<utility> namespace partition_alloc::internal::base { template<T> class NoDestructor { public :)",
    "insertText": "static_assert(!std::is_trivially_destructible_v<T>, \"T is trivially destructible; please use a function-local static \" \"of type T directly instead\")"
  },
  {
    "label": "NoDestructor()",
    "kind": "Method",
    "detail": "Function (template<. . . Args>)",
    "insertText": "NoDestructor(Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(storage_) T(std::forward<Args>(args)...)"
  },
  {
    "label": "NoDestructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NoDestructor(const T& x)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(storage_) T(x)"
  },
  {
    "label": "NoDestructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NoDestructor(T&& x)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(storage_) T(std::move(x))"
  },
  {
    "label": "NoDestructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NoDestructor(const NoDestructor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NoDestructor&)",
    "insertText": "operator(const NoDestructor&)"
  },
  {
    "label": "NoDestructor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NoDestructor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const T&)",
    "insertText": "operator()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "get()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "alignas(T) char storage_[sizeof(T)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(LEAK_SANITIZER) T* storage_ptr_ = reinterpret_cast<T*>(storage_)"
  }
]