[
  {
    "label": "NetEqDelayAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqDelayAnalyzer"
  },
  {
    "label": "TimingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingData"
  },
  {
    "label": "AfterInsertPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_DELAY_ANALYZER_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_DELAY_ANALYZER_H_ # include<map> # include<set> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" modules / audio_coding / neteq / tools / neteq_input . h \" # include \" modules / audio_coding / neteq / tools / neteq_test . h \" namespace webrtc { namespace test { class NetEqDelayAnalyzer : public test::NetEqPostInsertPacket,public test::NetEqGetAudioCallback { public : void)",
    "insertText": "AfterInsertPacket(const test::NetEqInput::PacketData& packet, NetEq* neteq)"
  },
  {
    "label": "BeforeGetAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeforeGetAudio(NetEq* neteq)"
  },
  {
    "label": "AfterGetAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterGetAudio(int64_t time_now_ms, const AudioFrame& audio_frame, bool muted, NetEq* neteq)"
  },
  {
    "label": "CreateGraphs()",
    "kind": "Method",
    "detail": "Function (using Delays = std::vector<std::pair<int64_t,float>> ; void)",
    "insertText": "CreateGraphs(Delays* arrival_delay_ms, Delays* corrected_arrival_delay_ms, Delays* playout_delay_ms, Delays* target_delay_ms)"
  },
  {
    "label": "CreateMatlabScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatlabScript(absl::string_view script_name)"
  },
  {
    "label": "CreatePythonScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePythonScript(absl::string_view script_name)"
  },
  {
    "label": "TimingData()",
    "kind": "Method",
    "detail": "Function (private : struct TimingData {)",
    "insertText": "TimingData(int64_t at) : arrival_time_ms(at)"
  }
]