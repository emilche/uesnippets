[
  {
    "label": "CopyOnWriteBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyOnWriteBuffer"
  },
  {
    "label": "PacketOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketOptions"
  },
  {
    "label": "RtpTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransportInternal"
  },
  {
    "label": "RtpTransportInternal()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTP_TRANSPORT_INTERNAL_H_ # define PC_RTP_TRANSPORT_INTERNAL_H_ # include<string> # include \" call / rtp_demuxer . h \" # include \" p2p / base / ice_transport_internal . h \" # include \" pc / session_description . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace rtc { class CopyOnWriteBuffer ; struct PacketOptions ; } namespace webrtc { class RtpTransportInternal : public sigslot::has_slots<> { public : ~)",
    "insertText": "RtpTransportInternal()"
  },
  {
    "label": "SetRtcpMuxEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpMuxEnabled(bool enable)"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "transport_name()"
  },
  {
    "label": "SetRtpOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetRtpOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "SetRtcpOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetRtcpOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "rtcp_mux_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rtcp_mux_enabled()"
  },
  {
    "label": "IsReadyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToSend()"
  },
  {
    "label": "IsWritable()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<bool> SignalReadyToSend ; sigslot::signal2<rtc::CopyOnWriteBuffer*,int64_t> SignalRtcpPacketReceived ; sigslot::signal1<absl::optional<rtc::NetworkRoute>> SignalNetworkRouteChanged ; sigslot::signal1<bool> SignalWritableState ; sigslot::signal1<const rtc::SentPacket&> SignalSentPacket ; bool)",
    "insertText": "IsWritable(bool rtcp)"
  },
  {
    "label": "SendRtpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "SendRtcpPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcpPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options, int flags)"
  },
  {
    "label": "UpdateRtpHeaderExtensionMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtpHeaderExtensionMap(const cricket::RtpHeaderExtensions& header_extensions)"
  },
  {
    "label": "IsSrtpActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSrtpActive()"
  },
  {
    "label": "RegisterRtpDemuxerSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRtpDemuxerSink(const RtpDemuxerCriteria& criteria, RtpPacketSinkInterface* sink)"
  },
  {
    "label": "UnregisterRtpDemuxerSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterRtpDemuxerSink(RtpPacketSinkInterface* sink)"
  }
]