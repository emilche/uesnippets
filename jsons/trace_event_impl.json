[
  {
    "label": "TraceEventHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceEventHandle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_EVENT_IMPL_H_ # define BASE_TRACE_EVENT_TRACE_EVENT_IMPL_H_ # include<stdint . h> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_util . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # include \" base / trace_event / common / trace_event_common . h \" # include \" base / trace_event / trace_arguments . h \" # include \" base / trace_event / trace_event_memory_overhead . h \" # include \" build / build_config . h \" namespace base { namespace trace_event { typedef base::RepeatingCallback<)",
    "insertText": "bool(const char* arg_name)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef base::RepeatingCallback<)",
    "insertText": "bool(const char* category_group_name, const char* event_name, ArgumentNameFilterPredicate*)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef base::RepeatingCallback<)",
    "insertText": "bool(const std::string& metadata_name)"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (struct TraceEventHandle { uint32_t chunk_seq ; unsigned chunk_index : 2 6 ; unsigned event_index : 6 ; } ; class BASE_EXPORT TraceEvent { public : using TraceValue = base::trace_event::TraceValue ;)",
    "insertText": "TraceEvent()"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceEvent(PlatformThreadId thread_id, TimeTicks timestamp, ThreadTicks thread_timestamp, char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, unsigned long long id, unsigned long long bind_id, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceEvent(const TraceEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TraceEvent&)",
    "insertText": "operator(const TraceEvent&)"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceEvent(TraceEvent&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TraceEvent&)",
    "insertText": "operator(TraceEvent&&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(PlatformThreadId thread_id, TimeTicks timestamp, ThreadTicks thread_timestamp, char phase, const unsigned char* category_group_enabled, const char* name, const char* scope, unsigned long long id, unsigned long long bind_id, TraceArguments* args, unsigned int flags)"
  },
  {
    "label": "UpdateDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDuration(const TimeTicks& now, const ThreadTicks& thread_now)"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "AppendAsJSON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAsJSON(std::string* out, const ArgumentFilterPredicate& argument_filter_predicate)"
  },
  {
    "label": "AppendPrettyPrinted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPrettyPrinted(std::ostringstream* out)"
  },
  {
    "label": "timestamp()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "timestamp()"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (} unsigned char)",
    "insertText": "arg_type(size_t index)"
  },
  {
    "label": "arg_name()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "arg_name(size_t index)"
  },
  {
    "label": "arg_value()",
    "kind": "Method",
    "detail": "Function (} const TraceValue&)",
    "insertText": "arg_value(size_t index)"
  },
  {
    "label": "arg_convertible_value()",
    "kind": "Method",
    "detail": "Function (} ConvertableToTraceFormat*)",
    "insertText": "arg_convertible_value(size_t index)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) void SendToATrace()"
  },
  {
    "label": "InitArgs()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "InitArgs(TraceArguments* args)"
  },
  {
    "label": "TimeTicks()",
    "kind": "Method",
    "detail": "Function (TimeTicks timestamp_ =)",
    "insertText": "TimeTicks()"
  },
  {
    "label": "ThreadTicks()",
    "kind": "Method",
    "detail": "Function (ThreadTicks thread_timestamp_ =)",
    "insertText": "ThreadTicks()"
  },
  {
    "label": "FromInternalValue()",
    "kind": "Method",
    "detail": "Function (TimeDelta duration_ =)",
    "insertText": "FromInternalValue(-1)"
  },
  {
    "label": "TimeDelta()",
    "kind": "Method",
    "detail": "Function (TimeDelta thread_duration_ =)",
    "insertText": "TimeDelta()"
  }
]