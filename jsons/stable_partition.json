[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Predicate"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Distance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Distance"
  },
  {
    "label": "_Pair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pair"
  },
  {
    "label": "_BidirectionalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator"
  },
  {
    "label": "_IterCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IterCategory"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_STABLE_PARTITION_H # define _LIBCPP___ALGORITHM_STABLE_PARTITION_H # include<__algorithm / iterator_operations . h> # include<__algorithm / rotate . h> # include<__config> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<memory> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Predicate, class _ForwardIterator, class _Distance, class _Pair> _ForwardIterator __stable_partition_impl(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pair __p, forward_iterator_tag __fit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ;)",
    "insertText": "if(__len == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __m = __first ;)",
    "insertText": "if(__pred(*++__m))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__first, __m)"
  },
  {
    "label": "__d()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type value_type ; __destruct_n)",
    "insertText": "__d(0)"
  },
  {
    "label": "__h()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__destruct_n&>)",
    "insertText": "__h(__p.first, __d)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (value_type* __t = __p . first)",
    "insertText": "new((void*)__t) value_type(_Ops::__iter_move(__first))"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (__d . template __incr<)",
    "insertText": "value_type()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + __t ; _ForwardIterator __i = __first ;)",
    "insertText": "while(++__i != __last)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (* __first =)",
    "insertText": "__iter_move(__i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } else)",
    "insertText": "new((void*)__t) value_type(_Ops::__iter_move(__i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + __t ; } } __i = __first ;)",
    "insertText": "for(value_type* __t2 = __p.first; __t2 < __t; ++__t2, (void) ++__i) *__i = _Ops::__iter_move(__t2)"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __first_false = std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(__first, __m, __pred, __len2, __p, __fit)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __m1 = __m ; _ForwardIterator __second_false = __last ; _Distance __len_half = __len - __len2 ;)",
    "insertText": "while(__pred(*__m1))"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (- - __len_half ; } __second_false = std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(__m1, __last, __pred, __len_half, __p, __fit)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (__second_half_done : return std::__rotate<)",
    "insertText": "_AlgPolicy(__first_false, __m, __second_false)"
  },
  {
    "label": "__stable_partition_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Predicate,class _ForwardIterator> _ForwardIterator)",
    "insertText": "__stable_partition_impl(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const unsigned __alloc_limit = 3 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } typedef iterator_traits<_ForwardIterator>::difference_type difference_type ; typedef iterator_traits<_ForwardIterator>::value_type value_type ; difference_type __len = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "__p()",
    "kind": "Method",
    "detail": "Function (pair<value_type*,ptrdiff_t>)",
    "insertText": "__p(0, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unique_ptr<value_type,__return_temporary_buffer> __h ;)",
    "insertText": "if(__len >= __alloc_limit)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_PUSH __p = _VSTD::get_temporary_buffer<)",
    "insertText": "value_type(__len)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP __h .)",
    "insertText": "reset(__p.first)"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (} return std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(std::move(__first), std::move(__last), __pred, __len, __p, forward_iterator_tag())"
  },
  {
    "label": "__stable_partition_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Predicate,class _BidirectionalIterator,class _Distance,class _Pair> _BidirectionalIterator)",
    "insertText": "__stable_partition_impl(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, _Distance __len, _Pair __p, bidirectional_iterator_tag __bit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ;)",
    "insertText": "if(__len == 2)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__first, __last)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__m, __last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __m1 = __m ; _BidirectionalIterator __first_false = __first ; _Distance __len_half = __len2 ;)",
    "insertText": "while(!__pred(*--__m1))"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (- - __len_half ; } __first_false = std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(__first, __m1, __pred, __len_half, __p, __bit)"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (- - __len_half ; } __second_false = std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(__m1, __last, __pred, __len_half, __p, __bit)"
  },
  {
    "label": "__stable_partition_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Predicate,class _BidirectionalIterator> _BidirectionalIterator)",
    "insertText": "__stable_partition_impl(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } do {)",
    "insertText": "if(__first == --__last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!__pred(*__last))"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (} return std::__stable_partition_impl<_AlgPolicy,)",
    "insertText": "_Predicate(std::move(__first), std::move(__last), __pred, __len, __p, bidirectional_iterator_tag())"
  },
  {
    "label": "__stable_partition()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Predicate,class _ForwardIterator,class _IterCategory> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate&& __pred, _IterCategory __iter_category)"
  },
  {
    "label": "stable_partition()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Predicate> _LIBCPP_INLINE_VISIBILITY _ForwardIterator)",
    "insertText": "stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
  },
  {
    "label": "_Predicate()",
    "kind": "Method",
    "detail": "Function (using _IterCategory = iterator_traits<_ForwardIterator>::iterator_category ; return std::__stable_partition<_ClassicAlgPolicy,)",
    "insertText": "_Predicate(std::move(__first), std::move(__last), __pred, _IterCategory())"
  }
]