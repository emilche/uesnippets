[
  {
    "label": "SColorGradingComponentSpinBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorGradingComponentSpinBox"
  },
  {
    "label": "ECommitMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECommitMethod"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Framework / ColorGrading / ColorGradingCommon . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" InputCoreTypes . h \" # include \" HAL / Platform . h \" # include \" Misc / Attribute . h \" # include \" Styling / AdvancedWidgetsStyle . h \" # include \" Styling / ColorGradingSpinBoxStyle . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / Input / SSpinBox . h \" # include \" Widgets / SCompoundWidget . h \" namespace UE::ColorGrading { class SColorGradingComponentSpinBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnValueChanged, float)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnDynamicSliderMinMaxValueChanged, float, TWeakPtr<SWidget>, bool, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SColorGradingComponentSpinBox) : _Style(&UE::AdvancedWidgets::FAdvancedWidgetsStyle::Get().GetWidgetStyle<FColorGradingSpinBoxStyle>(\"ColorGradingSpinBox\")) , _Value(0) , _Component(EColorGradingComponent::Red) , _ColorGradingMode(EColorGradingModes::Invalid) , _MinValue(0) , _MaxValue(2) , _Delta(0) , _ShiftMultiplier(10.f) , _CtrlMultiplier(0.1f) , _Sensitivity(1.0f) , _SupportDynamicSliderMaxValue(false) , _SupportDynamicSliderMinValue(false) , _SliderExponent(1.f) , _OnValueChanged() , _OnQueryCurrentColor() , _AllowSpin(true)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FColorGradingSpinBoxStyle, Style) SLATE_ATTRIBUTE(float, Value) SLATE_ATTRIBUTE(EColorGradingComponent, Component) SLATE_ATTRIBUTE(EColorGradingModes, ColorGradingMode) SLATE_ATTRIBUTE(TOptional<float>, MinValue) SLATE_ATTRIBUTE(TOptional<float>, MaxValue) SLATE_ATTRIBUTE(TOptional<float>, MinSliderValue) SLATE_ATTRIBUTE(TOptional<float>, MaxSliderValue) SLATE_ATTRIBUTE(bool, AlwaysUsesDeltaSnap) SLATE_ATTRIBUTE(float, Delta) SLATE_ATTRIBUTE(float, ShiftMultiplier) SLATE_ATTRIBUTE(float, CtrlMultiplier) SLATE_ATTRIBUTE(float, Sensitivity) SLATE_ATTRIBUTE(int32, LinearDeltaSensitivity) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMaxValue) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMinValue) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMaxValueChanged) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMinValueChanged) SLATE_ATTRIBUTE(float, SliderExponent) SLATE_ATTRIBUTE(float, SliderExponentNeutralValue) SLATE_ATTRIBUTE(TOptional<float>, WheelStep) SLATE_EVENT(FOnValueChanged, OnValueChanged) SLATE_EVENT(FSimpleDelegate, OnBeginSliderMovement) SLATE_EVENT(FOnValueChanged, OnEndSliderMovement) SLATE_EVENT(FOnGetCurrentVector4Value, OnQueryCurrentColor) SLATE_ARGUMENT(TSharedPtr<INumericTypeInterface<float>>, TypeInterface) SLATE_ARGUMENT(bool, AllowSpin) SLATE_END_ARGS() SColorGradingComponentSpinBox()"
  },
  {
    "label": "SColorGradingComponentSpinBox()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SColorGradingComponentSpinBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CommitWithMultiplier()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "CommitWithMultiplier(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ApplySliderMaxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMaxValueChanged(float SliderDeltaToAdd, bool UpdateOnlyIfHigher)"
  },
  {
    "label": "ApplySliderMinValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMinValueChanged(float SliderDeltaToAdd, bool UpdateOnlyIfLower)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "GetValueAttribute()",
    "kind": "Method",
    "detail": "Function (TAttribute<float>)",
    "insertText": "GetValueAttribute()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const TAttribute<float>& InValueAttribute)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ValueAttribute = InValueAttribute ; const float LocalValueAttribute = ValueAttribute .)",
    "insertText": "Get()"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(LocalValueAttribute, (double)LocalValueAttribute, ECommitMethod::CommittedViaCode, ETextCommit::Default)"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "SetMinValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinValue(const TAttribute<TOptional<float>>& InMinValue)"
  },
  {
    "label": "UpdateIsSpinRangeUnlimited()",
    "kind": "Method",
    "detail": "Function (MinValue = InMinValue ;)",
    "insertText": "UpdateIsSpinRangeUnlimited()"
  },
  {
    "label": "GetMaxValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaxValue()"
  },
  {
    "label": "SetMaxValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxValue(const TAttribute<TOptional<float>>& InMaxValue)"
  },
  {
    "label": "IsMinSliderValueBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMinSliderValueBound()"
  },
  {
    "label": "GetMinSliderValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinSliderValue()"
  },
  {
    "label": "SetMinSliderValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinSliderValue(const TAttribute<TOptional<float>>& InMinSliderValue)"
  },
  {
    "label": "MinSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinSliderValue(InMinSliderValue.Get().IsSet())"
  },
  {
    "label": "IsMaxSliderValueBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaxSliderValueBound()"
  },
  {
    "label": "GetMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaxSliderValue()"
  },
  {
    "label": "SetMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxSliderValue(const TAttribute<TOptional<float>>& InMaxSliderValue)"
  },
  {
    "label": "MaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxSliderValue(InMaxSliderValue.Get().IsSet())"
  },
  {
    "label": "GetAlwaysUsesDeltaSnap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAlwaysUsesDeltaSnap()"
  },
  {
    "label": "SetAlwaysUsesDeltaSnap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlwaysUsesDeltaSnap(bool bNewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (AlwaysUsesDeltaSnap .)",
    "insertText": "Set(bNewValue)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDelta()"
  },
  {
    "label": "SetDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDelta(float InDelta)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Delta .)",
    "insertText": "Set(InDelta)"
  },
  {
    "label": "GetSliderExponent()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSliderExponent()"
  },
  {
    "label": "SetSliderExponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSliderExponent(const TAttribute<float>& InSliderExponent)"
  },
  {
    "label": "GetWidgetStyle()",
    "kind": "Method",
    "detail": "Function (SliderExponent = InSliderExponent ; } const FColorGradingSpinBoxStyle*)",
    "insertText": "GetWidgetStyle()"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (Style = InStyle ; } void)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (} protected : enum ECommitMethod { CommittedViaSpin,CommittedViaCode,CommittedViaSpinMultiplier } ; void)",
    "insertText": "CommitValue(float NewValue, double NewSpinValue, ECommitMethod CommitMethod, ETextCommit::Type OriginalCommitInfo)"
  },
  {
    "label": "NotifyValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyValueCommitted(float CurrentValue)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Fraction(double InValue, double InMinValue, double InMaxValue)"
  },
  {
    "label": "GetHueGradientColors()",
    "kind": "Method",
    "detail": "Function (private : const TArray<FLinearColor>&)",
    "insertText": "GetHueGradientColors()"
  },
  {
    "label": "bUnlimitedSpinRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bUnlimitedSpinRange((MinValue.Get().IsSet() && MaxValue.Get().IsSet()) || (MinSliderValue.Get().IsSet() && MaxSliderValue.Get().IsSet()))"
  },
  {
    "label": "RoundIfIntegerValue()",
    "kind": "Method",
    "detail": "Function (} const FColorGradingSpinBoxStyle* Style ; const FSlateBrush* BorderHoveredBrush ; const FSlateBrush* BorderActiveBrush ; const FSlateBrush* BorderBrush ; const FSlateBrush* SelectorBrush ; const float* SelectorWidth ; bool bAllowSpin ; float DistanceDragged ; TAttribute<float> Delta ; TAttribute<float> ShiftMultiplier ; TAttribute<float> CtrlMultiplier ; TAttribute<float> Sensitivity ; TAttribute<int32> LinearDeltaSensitivity ; TAttribute<float> SliderExponent ; TAttribute<float> SliderExponentNeutralValue ; TAttribute<TOptional<float>> MinValue ; TAttribute<TOptional<float>> MaxValue ; TAttribute<TOptional<float>> MinSliderValue ; TAttribute<TOptional<float>> MaxSliderValue ; TAttribute<bool> AlwaysUsesDeltaSnap ; TAttribute<bool> SupportDynamicSliderMaxValue ; TAttribute<bool> SupportDynamicSliderMinValue ; FOnDynamicSliderMinMaxValueChanged OnDynamicSliderMaxValueChanged ; FOnDynamicSliderMinMaxValueChanged OnDynamicSliderMinValueChanged ; TAttribute<EColorGradingComponent> Component ; TAttribute<EColorGradingModes> ColorGradingMode ; float)",
    "insertText": "RoundIfIntegerValue(double ValueToRound)"
  },
  {
    "label": "CancelMouseCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelMouseCapture()"
  },
  {
    "label": "GetGradientColors()",
    "kind": "Method",
    "detail": "Function (TArray<FLinearColor>)",
    "insertText": "GetGradientColors()"
  },
  {
    "label": "GetCurrentRGBColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetCurrentRGBColor()"
  },
  {
    "label": "GetCurrentHSVColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetCurrentHSVColor()"
  }
]