[
  {
    "label": "FDynamicMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshSceneProxy"
  },
  {
    "label": "FDynamicMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / DynamicMeshComponent . h \" # include \" Components / BaseDynamicMeshSceneProxy . h \" # include \" DynamicMesh / MeshTangents . h \" # include \" Async / ParallelFor . h \" # include \" Materials / Material . h \" # include \" MaterialDomain . h \" # include \" MaterialShared . h \" # include \" SceneInterface . h \" class FDynamicMeshSceneProxy final : public FBaseDynamicMeshSceneProxy { using FIndex2i = UE::Geometry::FIndex2i ; using FIndex3i = UE::Geometry::FIndex3i ; private : FMaterialRelevance MaterialRelevance ; TArray<FMeshRenderBufferSet*> RenderBufferSets ; bool bIsSingleBuffer = false ; public : UDynamicMeshComponent* ParentComponent ;)",
    "insertText": "FDynamicMeshSceneProxy(UDynamicMeshComponent* Component) : FBaseDynamicMeshSceneProxy(Component) , MaterialRelevance(Component->GetMaterialRelevance(GetScene().GetFeatureLevel()))"
  },
  {
    "label": "GetActiveRenderBufferSets()",
    "kind": "Method",
    "detail": "Function (ParentComponent = Component ; } void)",
    "insertText": "GetActiveRenderBufferSets(TArray<FMeshRenderBufferSet*>& Buffers)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Buffers = RenderBufferSets ; } void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32 NumMaterials =)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets .)",
    "insertText": "SetNum(1)"
  },
  {
    "label": "AllocateNewRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets [ 0 ] =)",
    "insertText": "AllocateNewRenderBufferSet()"
  },
  {
    "label": "GetDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets [ 0 ] -> Material =)",
    "insertText": "GetDefaultMaterial(MD_Surface)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} else { RenderBufferSets .)",
    "insertText": "SetNum(NumMaterials)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets [ k ] -> Material =)",
    "insertText": "GetMaterial(k)"
  },
  {
    "label": "GetRenderMesh()",
    "kind": "Method",
    "detail": "Function (} } FDynamicMesh3* Mesh = ParentComponent ->)",
    "insertText": "GetRenderMesh()"
  },
  {
    "label": "InitializeByMaterial()",
    "kind": "Method",
    "detail": "Function (bIsSingleBuffer = false ;)",
    "insertText": "InitializeByMaterial(RenderBufferSets)"
  },
  {
    "label": "InitializeSingleBufferSet()",
    "kind": "Method",
    "detail": "Function (} else { bIsSingleBuffer = true ;)",
    "insertText": "InitializeSingleBufferSet(RenderBufferSets[0])"
  },
  {
    "label": "UpdateLumenCardsFromBounds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UpdateLumenCardsFromBounds()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TUniqueFunction<)",
    "insertText": "void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> MakeTangentsFunc(bool bSkipAutoCompute = false)"
  },
  {
    "label": "GetTangentsType()",
    "kind": "Method",
    "detail": "Function (EDynamicMeshComponentTangentsMode TangentsType = ParentComponent ->)",
    "insertText": "GetTangentsType()"
  },
  {
    "label": "Tangents()",
    "kind": "Method",
    "detail": "Function (UE::Geometry::FDynamicMeshTangents)",
    "insertText": "Tangents(RenderMesh)"
  },
  {
    "label": "GetTangentVectors()",
    "kind": "Method",
    "detail": "Function (Tangents .)",
    "insertText": "GetTangentVectors(TriangleID, TriVtxIdx, Normal, TangentX, TangentY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; } } else)",
    "insertText": "if(TangentsType == EDynamicMeshComponentTangentsMode::AutoCalculated && bSkipAutoCompute == false)"
  },
  {
    "label": "GetAutoCalculatedTangents()",
    "kind": "Method",
    "detail": "Function (const UE::Geometry::FMeshTangentsf* Tangents = ParentComponent ->)",
    "insertText": "GetAutoCalculatedTangents()"
  },
  {
    "label": "GetTriangleVertexTangentVectors()",
    "kind": "Method",
    "detail": "Function (Tangents ->)",
    "insertText": "GetTriangleVertexTangentVectors(TriangleID, TriVtxIdx, TangentX, TangentY)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "return(int VertexID, int TriangleID, int TriVtxIdx, const FVector3f& Normal, FVector3f& TangentX, FVector3f& TangentY)"
  },
  {
    "label": "MakePerpVectors()",
    "kind": "Method",
    "detail": "Function (UE::Geometry::)",
    "insertText": "MakePerpVectors(Normal, TangentX, TangentY)"
  },
  {
    "label": "InitializeFromDecomposition()",
    "kind": "Method",
    "detail": "Function (} ; } void)",
    "insertText": "InitializeFromDecomposition(TUniquePtr<FMeshRenderDecomposition>& Decomposition)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumSets = Decomposition ->)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets .)",
    "insertText": "SetNum(NumSets)"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (RenderBufferSets [ k ] -> Material = Decomposition ->)",
    "insertText": "GetGroup(k)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshUVOverlay* UVOverlay = Mesh ->)",
    "insertText": "Attributes()->PrimaryUV()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshNormalOverlay* NormalOverlay = Mesh ->)",
    "insertText": "Attributes()->PrimaryNormals()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshColorOverlay* ColorOverlay = Mesh ->)",
    "insertText": "Attributes()->PrimaryColors()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc = MakeTangentsFunc()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumSets, [&](int32 SetIndex) { const FMeshRenderDecomposition::FGroup& Group = Decomposition->GetGroup(SetIndex); const TArray<int32>& Triangles = Group.Triangles; if (Triangles.Num() > 0) { FMeshRenderBufferSet* RenderBuffers = RenderBufferSets[SetIndex]; RenderBuffers->Triangles = Triangles; InitializeBuffersFromOverlays(RenderBuffers, Mesh, Triangles.Num(), Triangles, UVOverlay, NormalOverlay, ColorOverlay, TangentsFunc); ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyInitializeFromDecomposition)( [RenderBuffers](FRHICommandListImmediate& RHICmdList) { RenderBuffers->Upload(); }); } })"
  },
  {
    "label": "InitializeSingleBufferSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeSingleBufferSet(FMeshRenderBufferSet* RenderBuffers)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<const FDynamicMeshUVOverlay*,TInlineAllocator<8>> UVOverlays ; const FDynamicMeshNormalOverlay* NormalOverlay = nullptr ; const FDynamicMeshColorOverlay* ColorOverlay = nullptr ;)",
    "insertText": "if(Mesh->HasAttributes())"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshAttributeSet* Attributes = Mesh ->)",
    "insertText": "Attributes()"
  },
  {
    "label": "PrimaryNormals()",
    "kind": "Method",
    "detail": "Function (NormalOverlay = Attributes ->)",
    "insertText": "PrimaryNormals()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (UVOverlays .)",
    "insertText": "SetNum(Attributes->NumUVLayers())"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (UVOverlays [ k ] = Attributes ->)",
    "insertText": "GetUVLayer(k)"
  },
  {
    "label": "PrimaryColors()",
    "kind": "Method",
    "detail": "Function (} ColorOverlay = Attributes ->)",
    "insertText": "PrimaryColors()"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBuffersFromOverlays(RenderBuffers, Mesh, Mesh->TriangleCount(), Mesh->TriangleIndicesItr(), UVOverlays, NormalOverlay, ColorOverlay, TangentsFunc)"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyInitializeSingle)( [RenderBuffers](FRHICommandListImmediate& RHICmdList) { RenderBuffers->Upload(); })"
  },
  {
    "label": "InitializeByMaterial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeByMaterial(TArray<FMeshRenderBufferSet*>& BufferSets)"
  },
  {
    "label": "GetMaterialID()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshMaterialAttribute* MaterialID = Attributes ->)",
    "insertText": "GetMaterialID()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Counts [ k ] .)",
    "insertText": "Reset()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ParallelFor(Mesh->MaxTriangleID(), [&](int tid) { if (!Mesh->IsTriangle(tid)) { return; } int MatIdx; MaterialID->GetValue(tid, &MatIdx); if (MatIdx >= 0 && MatIdx < NumMaterials) { Counts[MatIdx].Increment(); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MaxCount = 0 ;)",
    "insertText": "for(FThreadSafeCounter& Count : Counts)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxCount =)",
    "insertText": "Max(Count.GetValue(), MaxCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} TArray<int> Triangles ; Triangles .)",
    "insertText": "Reserve(MaxCount)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (int MatIdx ; MaterialID ->)",
    "insertText": "GetValue(tid, &MatIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Add(tid)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "InitializeBuffersFromOverlays(RenderBuffers, Mesh, Triangles.Num(), Triangles, UVOverlays, NormalOverlay, ColorOverlay, TangentsFunc)"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (RenderBuffers -> Triangles = Triangles ;)",
    "insertText": "ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyInitializeByMaterial)( [RenderBuffers](FRHICommandListImmediate& RHICmdList) { RenderBuffers->Upload(); })"
  },
  {
    "label": "RenderMeshLayoutMatchesRenderBuffers()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "RenderMeshLayoutMatchesRenderBuffers()"
  },
  {
    "label": "CheckBufferSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckBufferSet(const FDynamicMesh3* Mesh, const FMeshRenderBufferSet* BufferSet, int NumTriangles)"
  },
  {
    "label": "BuffersLock()",
    "kind": "Method",
    "detail": "Function (FMeshRenderBufferSet* BufferSet = RenderBufferSets [ 0 ] ; FScopeLock)",
    "insertText": "BuffersLock(&BufferSet->BuffersLock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshNormalOverlay* NormalOverlay = nullptr ;)",
    "insertText": "if(bNormals && ensure(Mesh->HasAttributes()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TArray<const FDynamicMeshUVOverlay*,TInlineAllocator<8>> UVOverlays ;)",
    "insertText": "if(bUVs && ensure(Mesh->HasAttributes()))"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (UVOverlays [ i ] = Attributes ->)",
    "insertText": "GetUVLayer(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } FDynamicMeshColorOverlay* ColorOverlay = nullptr ;)",
    "insertText": "if(bColors && ensure(Mesh->HasAttributes()))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TUniqueFunction<)",
    "insertText": "void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc = MakeTangentsFunc(true)"
  },
  {
    "label": "BuffersLock()",
    "kind": "Method",
    "detail": "Function (FMeshRenderBufferSet* Buffers = RenderBufferSets [ 0 ] ; FScopeLock)",
    "insertText": "BuffersLock(&Buffers->BuffersLock)"
  },
  {
    "label": "UpdateVertexBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertexBuffersFromOverlays(Buffers, Mesh, Mesh->TriangleCount(), Mesh->TriangleIndicesItr(), NormalOverlay, ColorOverlay, TangentsFunc, bPositions, bNormals, bColors)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bUVs)"
  },
  {
    "label": "UpdateVertexUVBufferFromOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertexUVBufferFromOverlays(Buffers, Mesh, Mesh->TriangleCount(), Mesh->TriangleIndicesItr(), UVOverlays)"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyFastUpdateVertices)( [Buffers, bPositions, bNormals, bColors, bUVs](FRHICommandListImmediate& RHICmdList) { Buffers->UploadVertexUpdate(bPositions, bNormals || bUVs, bColors); })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "ParallelFor(RenderBufferSets.Num(), [&](int i) { FMeshRenderBufferSet* Buffers = RenderBufferSets[i]; FScopeLock BuffersLock(&Buffers->BuffersLock); if (Buffers->TriangleCount == 0) { return; } if (ensure(Buffers->Triangles.IsSet())) { if (bPositions || bNormals || bColors) { UpdateVertexBuffersFromOverlays(Buffers, Mesh, Buffers->Triangles->Num(), Buffers->Triangles.GetValue(), NormalOverlay, ColorOverlay, TangentsFunc, bPositions, bNormals, bColors); } if (bUVs) { UpdateVertexUVBufferFromOverlays(Buffers, Mesh, Buffers->Triangles->Num(), Buffers->Triangles.GetValue(), UVOverlays); } ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyFastUpdateVertices)( [Buffers, bPositions, bNormals, bColors, bUVs](FRHICommandListImmediate& RHICmdList) { Buffers->UploadVertexUpdate(bPositions, bNormals || bUVs, bColors); }); } })"
  },
  {
    "label": "FastUpdateVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FastUpdateVertices(const TArray<int32>& WhichBuffers, bool bPositions, bool bNormals, bool bColors, bool bUVs)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(DynamicMeshProxy_FastUpdateVertices)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(WhichBuffers.Num(), [&](int idx) { int32 BufferIndex = WhichBuffers[idx]; if ( RenderBufferSets.IsValidIndex(BufferIndex) == false) { return; } FMeshRenderBufferSet* Buffers = RenderBufferSets[BufferIndex]; FScopeLock BuffersLock(&Buffers->BuffersLock); if (Buffers->TriangleCount == 0) { return; } if (ensure(Buffers->Triangles.IsSet())) { if (bPositions || bNormals || bColors) { UpdateVertexBuffersFromOverlays(Buffers, Mesh, Buffers->Triangles->Num(), Buffers->Triangles.GetValue(), NormalOverlay, ColorOverlay, TangentsFunc, bPositions, bNormals, bColors); } if (bUVs) { UpdateVertexUVBufferFromOverlays(Buffers, Mesh, Buffers->Triangles->Num(), Buffers->Triangles.GetValue(), UVOverlays); } ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyFastUpdateVerticesBufferList)( [Buffers, bPositions, bNormals, bColors, bUVs](FRHICommandListImmediate& RHICmdList) { Buffers->TransferVertexUpdateToGPU(RHICmdList, bPositions, bNormals, bUVs, bColors); }); } })"
  },
  {
    "label": "FastUpdateAllIndexBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FastUpdateAllIndexBuffers()"
  },
  {
    "label": "FlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderingCommands()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(RenderBufferSets.Num(), [this, &Mesh](int i) { FMeshRenderBufferSet* Buffers = RenderBufferSets[i]; FScopeLock BuffersLock(&Buffers->BuffersLock); if (Buffers->TriangleCount > 0) { RecomputeRenderBufferTriangleIndexSets(Buffers, Mesh); } ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyFastUpdateAllIndexBuffers)( [Buffers](FRHICommandListImmediate& RHICmdList) { Buffers->UploadIndexBufferUpdate(); }); })"
  },
  {
    "label": "FastUpdateIndexBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FastUpdateIndexBuffers(const TArray<int32>& WhichBuffers)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(WhichBuffers.Num(), [this, &WhichBuffers, &Mesh](int i) { int32 BufferIndex = WhichBuffers[i]; if (RenderBufferSets.IsValidIndex(BufferIndex) == false) { return; } FMeshRenderBufferSet* Buffers = RenderBufferSets[BufferIndex]; FScopeLock BuffersLock(&Buffers->BuffersLock); if (Buffers->TriangleCount > 0) { RecomputeRenderBufferTriangleIndexSets(Buffers, Mesh); } ENQUEUE_RENDER_COMMAND(FDynamicMeshSceneProxyFastUpdateSomeIndexBuffers)( [Buffers](FRHICommandListImmediate& RHICmdList) { Buffers->UploadIndexBufferUpdate(); }); })"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (} public : FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance Result ; Result . bDrawRelevance =)",
    "insertText": "IsShown(View)"
  },
  {
    "label": "IsShadowCast()",
    "kind": "Method",
    "detail": "Function (Result . bShadowRelevance =)",
    "insertText": "IsShadowCast(View)"
  },
  {
    "label": "AllowStaticDrawPath()",
    "kind": "Method",
    "detail": "Function (bool bUseStaticDrawPath = bPreferStaticDrawPath&&)",
    "insertText": "AllowStaticDrawPath(View)"
  },
  {
    "label": "IsEditingLevelInstanceChild()",
    "kind": "Method",
    "detail": "Function (Result . bDynamicRelevance = ! bUseStaticDrawPath ; Result . bStaticRelevance = bUseStaticDrawPath ; # if WITH_EDITOR Result . bEditorVisualizeLevelInstanceRelevance =)",
    "insertText": "IsEditingLevelInstanceChild()"
  },
  {
    "label": "bEditorStaticSelectionRelevance()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "bEditorStaticSelectionRelevance(IsSelected() || IsHovered())"
  },
  {
    "label": "ShouldRenderInMainPass()",
    "kind": "Method",
    "detail": "Function (# endif Result . bRenderInMainPass =)",
    "insertText": "ShouldRenderInMainPass()"
  },
  {
    "label": "GetLightingChannelMask()",
    "kind": "Method",
    "detail": "Function (Result . bUsesLightingChannels =)",
    "insertText": "GetLightingChannelMask() != GetDefaultLightingChannelMask()"
  },
  {
    "label": "ShouldRenderCustomDepth()",
    "kind": "Method",
    "detail": "Function (Result . bTranslucentSelfShadow = bCastVolumetricTranslucentShadow ; Result . bRenderCustomDepth =)",
    "insertText": "ShouldRenderCustomDepth()"
  },
  {
    "label": "SetPrimitiveViewRelevance()",
    "kind": "Method",
    "detail": "Function (MaterialRelevance .)",
    "insertText": "SetPrimitiveViewRelevance(Result)"
  },
  {
    "label": "DrawsVelocity()",
    "kind": "Method",
    "detail": "Function (Result . bVelocityRelevance =)",
    "insertText": "DrawsVelocity()"
  },
  {
    "label": "UpdatedReferencedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatedReferencedMaterials()"
  },
  {
    "label": "GetMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (MaterialRelevance = ParentComponent ->)",
    "insertText": "GetMaterialRelevance(GetScene().GetFeatureLevel())"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLightRelevance(const FLightSceneProxy* LightSceneProxy, bool& bDynamic, bool& bRelevant, bool& bLightMapped, bool& bShadowMapped)"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightRelevance(LightSceneProxy, bDynamic, bRelevant, bLightMapped, bShadowMapped)"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t UniquePointer ; return reinterpret_cast<)",
    "insertText": "size_t(&UniquePointer)"
  }
]