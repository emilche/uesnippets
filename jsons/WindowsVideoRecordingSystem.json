[
  {
    "label": "FHighlightRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHighlightRecorder"
  },
  {
    "label": "FWindowsVideoRecordingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsVideoRecordingSystem"
  },
  {
    "label": "FWindowsScreenRecording",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsScreenRecording"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VideoRecordingSystem . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" HAL / ThreadSafeBool . h \" # include \" CoreMinimal . h \" # include \" AudioMixerDevice . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" PipelineStateCache . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(WindowsVideoRecordingSystem, VeryVerbose, VeryVerbose)"
  },
  {
    "label": "FWindowsVideoRecordingSystem()",
    "kind": "Method",
    "detail": "Function (class FHighlightRecorder ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class FWindowsVideoRecordingSystem : public IVideoRecordingSystem PRAGMA_ENABLE_DEPRECATION_WARNINGS { public :)",
    "insertText": "FWindowsVideoRecordingSystem()"
  },
  {
    "label": "EnableRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRecording(const bool bEnableRecording)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "NewRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NewRecording(const TCHAR* DestinationFileName, FVideoRecordingParameters Parameters = FVideoRecordingParameters())"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording()"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording()"
  },
  {
    "label": "GetMinimumRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMinimumRecordingSeconds()"
  },
  {
    "label": "GetMaximumRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMaximumRecordingSeconds()"
  },
  {
    "label": "GetCurrentRecordingSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentRecordingSeconds()"
  },
  {
    "label": "FinalizeRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeRecording(const bool bSaveRecording, const FText& Title, const FText& Comment, const bool bStopAutoContinue = true)"
  },
  {
    "label": "GetRecordingState()",
    "kind": "Method",
    "detail": "Function (EVideoRecordingState)",
    "insertText": "GetRecordingState()"
  },
  {
    "label": "NextRecording()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "NextRecording()"
  },
  {
    "label": "FinalizeCallbackOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCallbackOnGameThread(bool bSaved, bool bAutoContinue, FString Path, bool bBroadcast)"
  }
]