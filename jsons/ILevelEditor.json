[
  {
    "label": "FDetailsViewObjectFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailsViewObjectFilter"
  },
  {
    "label": "IDetailRootObjectCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailRootObjectCustomization"
  },
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IWorldHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldHierarchy"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "FAssetThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnailPool"
  },
  {
    "label": "ISCSEditorUICustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISCSEditorUICustomization"
  },
  {
    "label": "GetElementSelectionSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Editor / UnrealEdTypes . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / EngineElementsLibrary . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Commands / UICommandList . h \" # include \" AssetThumbnail . h \" # include \" Toolkits / IToolkitHost . h \" class FDetailsViewObjectFilter ; class IDetailRootObjectCustomization ; class ISceneOutliner ; class IAssetViewport ; class SLevelViewport ; class UTypedElementSelectionSet ; namespace UE::WorldHierarchy { class IWorldHierarchy ; } class ILevelEditor : public SCompoundWidget,public IToolkitHost { public : const UTypedElementSelectionSet*)",
    "insertText": "GetElementSelectionSet()"
  },
  {
    "label": "GetMutableElementSelectionSet()",
    "kind": "Method",
    "detail": "Function (UTypedElementSelectionSet*)",
    "insertText": "GetMutableElementSelectionSet()"
  },
  {
    "label": "SummonLevelViewportContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonLevelViewportContextMenu(const FTypedElementHandle& HitProxyElement = FTypedElementHandle())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle HitProxyElement ;)",
    "insertText": "if(HitProxyActor)"
  },
  {
    "label": "AcquireEditorActorElementHandle()",
    "kind": "Method",
    "detail": "Function (HitProxyElement =)",
    "insertText": "AcquireEditorActorElementHandle(HitProxyActor)"
  },
  {
    "label": "SummonLevelViewportContextMenu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SummonLevelViewportContextMenu(HitProxyElement)"
  },
  {
    "label": "GetLevelViewportContextMenuTitle()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetLevelViewportContextMenuTitle()"
  },
  {
    "label": "SummonLevelViewportViewOptionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonLevelViewportViewOptionMenu(ELevelViewportType ViewOption)"
  },
  {
    "label": "GetHostedToolkits()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<IToolkit>>&)",
    "insertText": "GetHostedToolkits()"
  },
  {
    "label": "GetViewports()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<SLevelViewport>>)",
    "insertText": "GetViewports()"
  },
  {
    "label": "GetActiveViewportInterface()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SLevelViewport>)",
    "insertText": "GetActiveViewportInterface()"
  },
  {
    "label": "GetLevelEditorActions()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandList>&)",
    "insertText": "GetLevelEditorActions()"
  },
  {
    "label": "OnKeyDownInViewport()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDownInViewport(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "AppendCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCommands(const TSharedRef<FUICommandList>& InCommandsToAppend)"
  },
  {
    "label": "AddStandaloneLevelViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStandaloneLevelViewport(const TSharedRef<SLevelViewport>& LevelViewport)"
  },
  {
    "label": "CreateActorDetails()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateActorDetails(const FName TabIdentifier)"
  },
  {
    "label": "SetActorDetailsRootCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorDetailsRootCustomization(TSharedPtr<FDetailsViewObjectFilter> ActorDetailsObjectFilter, TSharedPtr<IDetailRootObjectCustomization> ActorDetailsRootCustomization)"
  },
  {
    "label": "AddActorDetailsSCSEditorUICustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorDetailsSCSEditorUICustomization(TSharedPtr<class ISCSEditorUICustomization> ActorDetailsSCSEditorUICustomization)"
  },
  {
    "label": "RemoveActorDetailsSCSEditorUICustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorDetailsSCSEditorUICustomization(TSharedPtr<class ISCSEditorUICustomization> ActorDetailsSCSEditorUICustomization)"
  },
  {
    "label": "GetAllSceneOutliners()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<ISceneOutliner>>)",
    "insertText": "GetAllSceneOutliners()"
  },
  {
    "label": "SetMostRecentlyUsedSceneOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMostRecentlyUsedSceneOutliner(FName OutlinerIdentifier)"
  },
  {
    "label": "GetMostRecentlyUsedSceneOutliner()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISceneOutliner>)",
    "insertText": "GetMostRecentlyUsedSceneOutliner()"
  },
  {
    "label": "GetWorldHierarchy()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<UE::WorldHierarchy::IWorldHierarchy>)",
    "insertText": "GetWorldHierarchy()"
  }
]