[
  {
    "label": "Double",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Double"
  },
  {
    "label": "Single",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Single"
  },
  {
    "label": "double_to_uint64()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_DOUBLE_H_ # define DOUBLE_CONVERSION_DOUBLE_H_ # include \" diy - fp . h \" namespace double_conversion { uint64_t)",
    "insertText": "double_to_uint64(double d)"
  },
  {
    "label": "uint64_to_double()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "uint64_to_double(uint64_t d64)"
  },
  {
    "label": "float_to_uint32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "float_to_uint32(float f)"
  },
  {
    "label": "uint32_to_float()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "uint32_to_float(uint32_t d32)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (} class Double { public : const uint64_t kSignMask =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x80000000, 00000000)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (const uint64_t kExponentMask =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x7FF00000, 00000000)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (const uint64_t kSignificandMask =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x000FFFFF, FFFFFFFF)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (const uint64_t kHiddenBit =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x00100000, 00000000)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (const uint64_t kQuietNanBit =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x00080000, 00000000)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (const int kPhysicalSignificandSize = 5 2 ; const int kSignificandSize = 5 3 ; const int kExponentBias = 0 x3FF + kPhysicalSignificandSize ; const int kMaxExponent = 0 x7FF - kExponentBias ;)",
    "insertText": "Double() : d64_(0)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Double(double d) : d64_(double_to_uint64(d))"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Double(uint64_t d64) : d64_(d64)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Double(DiyFp diy_fp) : d64_(DiyFpToUint64(diy_fp))"
  },
  {
    "label": "AsDiyFp()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "AsDiyFp()"
  },
  {
    "label": "AsNormalizedDiyFp()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "AsNormalizedDiyFp()"
  },
  {
    "label": "Significand()",
    "kind": "Method",
    "detail": "Function (uint64_t f =)",
    "insertText": "Significand()"
  },
  {
    "label": "Exponent()",
    "kind": "Method",
    "detail": "Function (int e =)",
    "insertText": "Exponent()"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (f<<= 1 ; e - - ; } f<<= DiyFp::kSignificandSize - kSignificandSize ; e - = DiyFp::kSignificandSize - kSignificandSize ; return)",
    "insertText": "DiyFp(f, e)"
  },
  {
    "label": "AsUint64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "AsUint64()"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Double(d64_ + 1).value()"
  },
  {
    "label": "PreviousDouble()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "PreviousDouble()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(Significand() == 0)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int biased_e = static_cast<)",
    "insertText": "int((d64 & kExponentMask) >> kPhysicalSignificandSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t significand = d64& kSignificandMask ;)",
    "insertText": "if(!IsDenormal())"
  },
  {
    "label": "IsSpecial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpecial()"
  },
  {
    "label": "IsNan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNan()"
  },
  {
    "label": "IsQuietNan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsQuietNan()"
  },
  {
    "label": "IsSignalingNan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSignalingNan()"
  },
  {
    "label": "IsInfinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInfinite()"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Sign()"
  },
  {
    "label": "UpperBoundary()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "UpperBoundary()"
  },
  {
    "label": "NormalizedBoundaries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NormalizedBoundaries(DiyFp* out_m_minus, DiyFp* out_m_plus)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (DiyFp m_plus =)",
    "insertText": "Normalize(DiyFp((v.f() << 1) + 1, v.e() - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DiyFp m_minus ;)",
    "insertText": "if(LowerBoundaryIsCloser())"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (m_minus =)",
    "insertText": "DiyFp((v.f() << 2) - 1, v.e() - 2)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (} else { m_minus =)",
    "insertText": "DiyFp((v.f() << 1) - 1, v.e() - 1)"
  },
  {
    "label": "set_f()",
    "kind": "Method",
    "detail": "Function (} m_minus .)",
    "insertText": "set_f(m_minus.f() << (m_minus.e() - m_plus.e()))"
  },
  {
    "label": "set_e()",
    "kind": "Method",
    "detail": "Function (m_minus .)",
    "insertText": "set_e(m_plus.e())"
  },
  {
    "label": "LowerBoundaryIsCloser()",
    "kind": "Method",
    "detail": "Function (* out_m_plus = m_plus ;* out_m_minus = m_minus ; } bool)",
    "insertText": "LowerBoundaryIsCloser()"
  },
  {
    "label": "physical_significand_is_zero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "physical_significand_is_zero((AsUint64() & kSignificandMask) == 0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "value()"
  },
  {
    "label": "SignificandSizeForOrderOfMagnitude()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SignificandSizeForOrderOfMagnitude(int order)"
  },
  {
    "label": "NaN()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "NaN()"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (const uint64_t kNaN =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x7FF80000, 00000000)"
  },
  {
    "label": "DiyFpToUint64()",
    "kind": "Method",
    "detail": "Function (const uint64_t d64_ ; uint64_t)",
    "insertText": "DiyFpToUint64(DiyFp diy_fp)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (uint64_t significand = diy_fp .)",
    "insertText": "f()"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (int exponent = diy_fp .)",
    "insertText": "e()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (significand>> = 1 ; exponent + + ; })",
    "insertText": "if(exponent >= kMaxExponent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (significand<<= 1 ; exponent - - ; } uint64_t biased_exponent ;)",
    "insertText": "if(exponent == kDenormalExponent && (significand & kHiddenBit) == 0)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (biased_exponent = 0 ; } else { biased_exponent = static_cast<)",
    "insertText": "uint64_t(exponent + kExponentBias)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(significand & kSignificandMask) | (biased_exponent << kPhysicalSignificandSize)"
  },
  {
    "label": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN(Double)"
  },
  {
    "label": "Single()",
    "kind": "Method",
    "detail": "Function (} ; class Single { public : const uint32_t kSignMask = 0 x80000000 ; const uint32_t kExponentMask = 0 x7F800000 ; const uint32_t kSignificandMask = 0 x007FFFFF ; const uint32_t kHiddenBit = 0 x00800000 ; const uint32_t kQuietNanBit = 0 x00400000 ; const int kPhysicalSignificandSize = 2 3 ; const int kSignificandSize = 2 4 ;)",
    "insertText": "Single() : d32_(0)"
  },
  {
    "label": "Single()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Single(float f) : d32_(float_to_uint32(f))"
  },
  {
    "label": "Single()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Single(uint32_t d32) : d32_(d32)"
  },
  {
    "label": "AsUint32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "AsUint32()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int biased_e = static_cast<)",
    "insertText": "int((d32 & kExponentMask) >> kPhysicalSignificandSize)"
  },
  {
    "label": "physical_significand_is_zero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "physical_significand_is_zero((AsUint32() & kSignificandMask) == 0)"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Infinity()"
  },
  {
    "label": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} private : const int kExponentBias = 0 x7F + kPhysicalSignificandSize ; const int kDenormalExponent = - kExponentBias + 1 ; const int kMaxExponent = 0 xFF - kExponentBias ; const uint32_t kInfinity = 0 x7F800000 ; const uint32_t kNaN = 0 x7FC00000 ; const uint32_t d32_ ;)",
    "insertText": "DOUBLE_CONVERSION_DISALLOW_COPY_AND_ASSIGN(Single)"
  }
]