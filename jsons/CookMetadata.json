[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPluginSizeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginSizeInfo"
  },
  {
    "label": "COOKMETADATA_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COOKMETADATA_API"
  },
  {
    "label": "FCustomFieldEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomFieldEntry"
  },
  {
    "label": "EPluginSizeTypesCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Memory / MemoryFwd . h \" # include \" Misc / TVariant . h \" # include \" UObject / NameTypes . h \" namespace UE::Cook { enum class ECookMetadataStateVersion : uint8 { InvalidVersion = 0,PluginHierarchy = 1,PostWritebackHash = 2,FixSerialization = 3,AddedCustomFields = 4,AddedShaderPseudoHierarchy = 5,AddedPluginEntryType = 6,ActualAddShaderPseudoHierarchy = 7,AdjustCustomFieldLayout = 8,VersionCount,LatestVersion = VersionCount - 1 } ; enum class EPluginSizeTypes : uint8 { Streaming,Installed,Optional,OptionalSegment,COUNT } ; uint8)",
    "insertText": "EPluginSizeTypesCount(uint8)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (struct FPluginSizeInfo { uint64 Sizes [ EPluginSizeTypesCount ] = { } ; void)",
    "insertText": "Zero()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(*this))"
  },
  {
    "label": "AddSizes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSizes(uint64 SizesPerType[EPluginSizeTypesCount])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sizes [ Type ] + = SizesPerType [ Type ] ; } } void)",
    "insertText": "Add(const FPluginSizeInfo& Other)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (Sizes [ Type ] + = Other . Sizes [ Type ] ; } } uint64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 Total = 0 ;)",
    "insertText": "for(uint8 Type = 0; Type < EPluginSizeTypesCount; Type++)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Total + = Sizes [ Type ] ; } return Total ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FPluginSizeInfo& SizeInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<SizeInfo . Sizes [ i ] ; } return Ar ; } uint64&)",
    "insertText": "operator(EPluginSizeTypes InType)"
  },
  {
    "label": "DependencyCount()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ECookMetadataSizesPresent { NotPresent,Compressed,Uncompressed,Count } ; enum class ECookMetadataPluginType { Unassigned,Normal,Root,EnginePseudo,GamePseudo,ShaderPseudo,Count } ; enum class ECookMetadataCustomFieldType : uint8 { Unknown,Bool,String } ; struct FCookMetadataPluginEntry { FString Name ; ECookMetadataPluginType Type = ECookMetadataPluginType::Unassigned ; typedef TVariant<bool,FString> CustomFieldVariantType ; TMap<uint8,CustomFieldVariantType> CustomFields ; uint32 DependencyIndexStart = 0 ; uint32 DependencyIndexEnd = 0 ; FPluginSizeInfo InclusiveSizes ; FPluginSizeInfo ExclusiveSizes ; uint32)",
    "insertText": "DependencyCount()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookMetadataPluginEntry& Entry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Entry . Name<<Entry . DependencyIndexStart<<Entry . DependencyIndexEnd ; Ar<<Entry . InclusiveSizes<<Entry . ExclusiveSizes ; Ar<<Entry . CustomFields<<Entry . Type ; return Ar ; } } ; struct FCookMetadataPluginHierarchy { TArray<FCookMetadataPluginEntry> PluginsEnabledAtCook ; TArray<uint16> PluginDependencies ; TArray<uint16> RootPlugins ; struct FCustomFieldEntry { FString Name ; ECookMetadataCustomFieldType Type ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCustomFieldEntry& Entry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Hierarchy . PluginsEnabledAtCook<<Hierarchy . PluginDependencies ; Ar<<Hierarchy . RootPlugins<<Hierarchy . CustomFieldEntries ; return Ar ; } } ; struct FCookMetadataShaderPseudoAsset { FString Name ; uint32 CompressedSize = 0 ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookMetadataShaderPseudoAsset& PseudoAsset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<PseudoAsset . Name<<PseudoAsset . CompressedSize ; return Ar ; } } ; struct FCookMetadataShaderPseudoHierarchy { TArray<FCookMetadataShaderPseudoAsset> ShaderAssets ; TArray<int32> DependencyList ; TMap<FName,TPair<int32,int32>> PackageShaderDependencyMap ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookMetadataShaderPseudoHierarchy& PseudoHierarchy)"
  },
  {
    "label": "FCookMetadataState()",
    "kind": "Method",
    "detail": "Function (Ar<<PseudoHierarchy . ShaderAssets<<PseudoHierarchy . DependencyList<<PseudoHierarchy . PackageShaderDependencyMap ; return Ar ; } } ; class FCookMetadataState { public :)",
    "insertText": "FCookMetadataState()"
  },
  {
    "label": "FCookMetadataState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookMetadataState(const FCookMetadataState&)"
  },
  {
    "label": "FCookMetadataState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCookMetadataState(FCookMetadataState&& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookMetadataState&)",
    "insertText": "operator(const FCookMetadataState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCookMetadataState&)",
    "insertText": "operator(FCookMetadataState&& O)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "ReadFromFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromFile(const FString& FilePath)"
  },
  {
    "label": "SaveToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToFile(const FString& FilePath)"
  },
  {
    "label": "SetPluginHierarchyInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPluginHierarchyInfo(FCookMetadataPluginHierarchy&& InPluginHierarchy)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PluginHierarchy =)",
    "insertText": "MoveTemp(InPluginHierarchy)"
  },
  {
    "label": "GetPluginHierarchy()",
    "kind": "Method",
    "detail": "Function (} const FCookMetadataPluginHierarchy&)",
    "insertText": "GetPluginHierarchy()"
  },
  {
    "label": "SetAssociatedDevelopmentAssetRegistryHashPostWriteback()",
    "kind": "Method",
    "detail": "Function (AssociatedDevelopmentAssetRegistryHash = InHash ; } void)",
    "insertText": "SetAssociatedDevelopmentAssetRegistryHashPostWriteback(uint64 InHash)"
  },
  {
    "label": "GetAssociatedDevelopmentAssetRegistryHash()",
    "kind": "Method",
    "detail": "Function (AssociatedDevelopmentAssetRegistryHashPostWriteback = InHash ; } uint64)",
    "insertText": "GetAssociatedDevelopmentAssetRegistryHash()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (Platform = InPlatform ; BuildVersion =)",
    "insertText": "FString(InBuildVersion)"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetPlatform()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (HordeJobId =)",
    "insertText": "MoveTemp(InHordeJobId)"
  },
  {
    "label": "GetHordeJobId()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetHordeJobId()"
  },
  {
    "label": "GetSizesPresentAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSizesPresentAsText()"
  },
  {
    "label": "GetSizesPresent()",
    "kind": "Method",
    "detail": "Function (ECookMetadataSizesPresent)",
    "insertText": "GetSizesPresent()"
  },
  {
    "label": "SetShaderPseudoHieararchy()",
    "kind": "Method",
    "detail": "Function (SizesPresent = InSizesPresent ; } void)",
    "insertText": "SetShaderPseudoHieararchy(FCookMetadataShaderPseudoHierarchy&& InHierarchy)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ShaderPseudoHierarchy =)",
    "insertText": "MoveTemp(InHierarchy)"
  },
  {
    "label": "GetShaderPseudoHierarchy()",
    "kind": "Method",
    "detail": "Function (} const FCookMetadataShaderPseudoHierarchy&)",
    "insertText": "GetShaderPseudoHierarchy()"
  }
]