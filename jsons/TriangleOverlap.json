[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBox"
  },
  {
    "label": "TImplicitObjectScaled",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitObjectScaled"
  },
  {
    "label": "FBoxSimd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoxSimd"
  },
  {
    "label": "FAABBSimd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAABBSimd"
  },
  {
    "label": "ComputeCapsuleTriangleOverlapSimd()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { template<class T,int d> class TBox ; template<TConcrete,bool bInstanced> class TImplicitObjectScaled ; bool)",
    "insertText": "ComputeCapsuleTriangleOverlapSimd(const VectorRegister4Float& A, const VectorRegister4Float& B, const VectorRegister4Float& C, const VectorRegister4Float& X1, const VectorRegister4Float& X2, FRealSingle Radius)"
  },
  {
    "label": "ComputeSphereTriangleOverlapSimd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSphereTriangleOverlapSimd(const VectorRegister4Float& A, const VectorRegister4Float& B, const VectorRegister4Float& C, const VectorRegister4Float& X, FRealSingle Radius)"
  },
  {
    "label": "FBoxSimd()",
    "kind": "Method",
    "detail": "Function (class FBoxSimd { public :)",
    "insertText": "FBoxSimd()"
  },
  {
    "label": "FBoxSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoxSimd(const FRigidTransform3& WorldScaleQueryTM, const TBox<FReal, 3>& InQueryGeom)"
  },
  {
    "label": "FBoxSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoxSimd(const FRigidTransform3& QueryTM, const TImplicitObjectScaled< TBox<FReal, 3>, true >& QueryGeom)"
  },
  {
    "label": "OverlapTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTriangle(const VectorRegister4Float& A, const VectorRegister4Float& B, const VectorRegister4Float& C)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize(const FRigidTransform3& Transform, const FVec3f& HalfExtentsIn)"
  },
  {
    "label": "ComputeEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeEdge(const VectorRegister4Float& PlaneNormal, const VectorRegister4Float& PlaneVertex, const VectorRegister4Float& Edge, const VectorRegister4Float& Centroid)"
  },
  {
    "label": "ComputeBoxPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBoxPlane(const VectorRegister4Float& DistCenter, const VectorRegister4Float& AxisHalfExtent)"
  },
  {
    "label": "FAABBSimd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Position ; VectorRegister4Float XAxis ; VectorRegister4Float YAxis ; VectorRegister4Float ZAxis ; VectorRegister4Float XHalfExtent ; VectorRegister4Float YHalfExtent ; VectorRegister4Float ZHalfExtent ; VectorRegister4Float XAxisHalfExtent ; VectorRegister4Float YAxisHalfExtent ; VectorRegister4Float ZAxisHalfExtent ; int32 EdgeNum = 3 ; VectorRegister4Float Edges [ EdgeNum ] ; } ; class FAABBSimd { public :)",
    "insertText": "FAABBSimd()"
  },
  {
    "label": "FAABBSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAABBSimd(const TBox<FReal, 3>& InQueryGeom)"
  },
  {
    "label": "FAABBSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAABBSimd(const TImplicitObjectScaled< TBox<FReal, 3>, true >& QueryGeom)"
  },
  {
    "label": "FAABBSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAABBSimd(const FVec3& Translation, const TBox<FReal, 3>& InQueryGeom)"
  },
  {
    "label": "FAABBSimd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAABBSimd(const FVec3& Translation, const TImplicitObjectScaled< TBox<FReal, 3>, true >& QueryGeom)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize(const FVec3& Translation, const FVec3f& HalfExtentsf)"
  },
  {
    "label": "ComputeEdgeOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeEdgeOverlap(const VectorRegister4Float& TriangleEdge, const VectorRegister4Float& TriangleVertex, const VectorRegister4Float& Centroid)"
  },
  {
    "label": "MakeVectorRegisterFloatConstant()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Position ; VectorRegister4Float HalfExtents ; const VectorRegister4Float SignBit ; const VectorRegister4Float SignX ; const VectorRegister4Float SignY ; const VectorRegister4Float SignZ ; int32 EdgeNum = 3 ; VectorRegister4Float Edges [ EdgeNum ] = {)",
    "insertText": "MakeVectorRegisterFloatConstant(1.f, 0.f, 0.f, 0.f), MakeVectorRegisterFloatConstant(0.f, 1.f, 0.f, 0.f), MakeVectorRegisterFloatConstant(0.f, 0.f, 1.f, 0.f)"
  }
]