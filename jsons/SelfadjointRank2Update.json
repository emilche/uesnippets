[
  {
    "label": "selfadjoint_rank2_update_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_rank2_update_selector"
  },
  {
    "label": "conj_expr_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conj_expr_if"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINTRANK2UPTADE_H # define EIGEN_SELFADJOINTRANK2UPTADE_H namespace Eigen { namespace internal { template<Scalar,Index,UType,VType,int UpLo> struct selfadjoint_rank2_update_selector ; template<Scalar,Index,UType,VType> struct selfadjoint_rank2_update_selector<Scalar,Index,UType,VType,Lower> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(Scalar* mat, Index stride, const UType& u, const VType& v, const Scalar& alpha)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index size = u .)",
    "insertText": "size()"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,)",
    "insertText": "Dynamic(mat+stride*i+i, size-i) += (numext::conj(alpha) * numext::conj(u.coeff(i))) * v.tail(size-i) + (alpha * numext::conj(v.coeff(i))) * u.tail(size-i)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool Cond,T> struct conj_expr_if : conditional<! Cond,const T&,CwiseUnaryOp<scalar_conjugate_op<traits<T>::Scalar>,T>> { } ; } template<MatrixType,unsigned int UpLo> template<DerivedU,DerivedV> EIGEN_DEVICE_FUNC SelfAdjointView<MatrixType,UpLo>& SelfAdjointView<MatrixType,UpLo)",
    "insertText": "rankUpdate(const MatrixBase<DerivedU>& u, const MatrixBase<DerivedV>& v, const Scalar& alpha)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef internal::blas_traits<DerivedU> UBlasTraits ; typedef UBlasTraits::DirectLinearAccessType ActualUType ; typedef internal::remove_all<ActualUType>::type _ActualUType ; internal::add_const_on_value_type<ActualUType>::type actualU =)",
    "insertText": "extract(u.derived())"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (typedef internal::blas_traits<DerivedV> VBlasTraits ; typedef VBlasTraits::DirectLinearAccessType ActualVType ; typedef internal::remove_all<ActualVType>::type _ActualVType ; internal::add_const_on_value_type<ActualVType>::type actualV =)",
    "insertText": "extract(v.derived())"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "IsRowMajor(internal::traits<MatrixType>::Flags&RowMajorBit)"
  },
  {
    "label": "extractScalarFactor()",
    "kind": "Method",
    "detail": "Function (Scalar actualAlpha = alpha*)",
    "insertText": "extractScalarFactor(u.derived()) * numext::conj(VBlasTraits::extractScalarFactor(v.derived()))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_all<internal::conj_expr_if<)",
    "insertText": "int(IsRowMajor) ^ int(UBlasTraits::NeedToConjugate)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_all<internal::conj_expr_if<)",
    "insertText": "int(IsRowMajor) ^ int(VBlasTraits::NeedToConjugate)"
  },
  {
    "label": "VType()",
    "kind": "Method",
    "detail": "Function (internal::selfadjoint_rank2_update_selector<Scalar,Index,UType,)",
    "insertText": "VType(IsRowMajor ? int(UpLo==Upper ? Lower : Upper) : UpLo)> ::run(_expression().const_cast_derived().data(),_expression().outerStride(),UType(actualU),VType(actualV),actualAlpha)"
  }
]