[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedSetTaskPriorityForCurrentThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SCOPED_SET_TASK_PRIORITY_FOR_CURRENT_THREAD_H_ # define BASE_TASK_SCOPED_SET_TASK_PRIORITY_FOR_CURRENT_THREAD_H_ # include \" base / base_export . h \" # include \" base / task / task_traits . h \" namespace base { namespace internal { class BASE_EXPORT ScopedSetTaskPriorityForCurrentThread { public :)",
    "insertText": "ScopedSetTaskPriorityForCurrentThread(TaskPriority priority)"
  },
  {
    "label": "ScopedSetTaskPriorityForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetTaskPriorityForCurrentThread(const ScopedSetTaskPriorityForCurrentThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSetTaskPriorityForCurrentThread&)",
    "insertText": "operator(const ScopedSetTaskPriorityForCurrentThread&)"
  },
  {
    "label": "ScopedSetTaskPriorityForCurrentThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetTaskPriorityForCurrentThread()"
  },
  {
    "label": "GetTaskPriorityForCurrentThread()",
    "kind": "Method",
    "detail": "Function (private : const TaskPriority priority_ ; } ; BASE_EXPORT TaskPriority)",
    "insertText": "GetTaskPriorityForCurrentThread()"
  }
]