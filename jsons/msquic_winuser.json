[
  {
    "label": "QUIC_ADDR_STR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_ADDR_STR"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef _MSQUIC_WINUSER_ # define _MSQUIC_WINUSER_ # ifndef WIN32_LEAN_AND_MEAN # define WIN32_LEAN_AND_MEAN # endif # pragma)",
    "insertText": "warning(push) #pragma warning(disable:6553) #include <windows.h> #pragma warning(pop) #include <winsock2.h> #include <ws2ipdef.h> #pragma warning(push) #pragma warning(disable:6385) #pragma warning(disable:6101) #include <ws2tcpip.h> #include <mstcpip.h> #pragma warning(pop) #include <stdint.h> #define SUCCESS_HRESULT_FROM_WIN32(x) \\ ((HRESULT)(((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16))) #ifndef ERROR_QUIC_HANDSHAKE_FAILURE #define ERROR_QUIC_HANDSHAKE_FAILURE _HRESULT_TYPEDEF_(0x80410000L) #endif #ifndef ERROR_QUIC_VER_NEG_FAILURE #define ERROR_QUIC_VER_NEG_FAILURE _HRESULT_TYPEDEF_(0x80410001L) #endif #ifndef ERROR_QUIC_USER_CANCELED #define ERROR_QUIC_USER_CANCELED _HRESULT_TYPEDEF_(0x80410002L) #endif #ifndef ERROR_QUIC_INTERNAL_ERROR #define ERROR_QUIC_INTERNAL_ERROR _HRESULT_TYPEDEF_(0x80410003L) #endif #ifndef ERROR_QUIC_PROTOCOL_VIOLATION #define ERROR_QUIC_PROTOCOL_VIOLATION _HRESULT_TYPEDEF_(0x80410004L) #endif #ifndef ERROR_QUIC_CONNECTION_IDLE #define ERROR_QUIC_CONNECTION_IDLE _HRESULT_TYPEDEF_(0x80410005L) #endif #ifndef ERROR_QUIC_CONNECTION_TIMEOUT #define ERROR_QUIC_CONNECTION_TIMEOUT _HRESULT_TYPEDEF_(0x80410006L) #endif #ifndef ERROR_QUIC_ALPN_NEG_FAILURE #define ERROR_QUIC_ALPN_NEG_FAILURE _HRESULT_TYPEDEF_(0x80410007L) #endif #ifndef ERROR_QUIC_STREAM_LIMIT_REACHED #define ERROR_QUIC_STREAM_LIMIT_REACHED _HRESULT_TYPEDEF_(0x80410008L) #endif #ifndef ERROR_QUIC_ALPN_IN_USE #define ERROR_QUIC_ALPN_IN_USE _HRESULT_TYPEDEF_(0x80410009L) #endif #ifndef QUIC_TLS_ALERT_HRESULT_PREFIX #define QUIC_TLS_ALERT_HRESULT_PREFIX _HRESULT_TYPEDEF_(0x80410100L) #endif #define QUIC_API __cdecl #define QUIC_MAIN_EXPORT __cdecl #define QUIC_STATUS HRESULT #define QUIC_FAILED(X) FAILED(X) #define QUIC_SUCCEEDED(X) SUCCEEDED(X) #define QUIC_STATUS_SUCCESS S_OK #define QUIC_STATUS_PENDING SUCCESS_HRESULT_FROM_WIN32(ERROR_IO_PENDING) #define QUIC_STATUS_CONTINUE SUCCESS_HRESULT_FROM_WIN32(ERROR_CONTINUE) #define QUIC_STATUS_OUT_OF_MEMORY E_OUTOFMEMORY #define QUIC_STATUS_INVALID_PARAMETER E_INVALIDARG #define QUIC_STATUS_INVALID_STATE E_NOT_VALID_STATE #define QUIC_STATUS_NOT_SUPPORTED E_NOINTERFACE #define QUIC_STATUS_NOT_FOUND HRESULT_FROM_WIN32(ERROR_NOT_FOUND) #define QUIC_STATUS_BUFFER_TOO_SMALL E_NOT_SUFFICIENT_BUFFER #define QUIC_STATUS_HANDSHAKE_FAILURE ERROR_QUIC_HANDSHAKE_FAILURE #define QUIC_STATUS_ABORTED E_ABORT #define QUIC_STATUS_ADDRESS_IN_USE HRESULT_FROM_WIN32(WSAEADDRINUSE) #define QUIC_STATUS_INVALID_ADDRESS HRESULT_FROM_WIN32(WSAEADDRNOTAVAIL) #define QUIC_STATUS_CONNECTION_TIMEOUT ERROR_QUIC_CONNECTION_TIMEOUT #define QUIC_STATUS_CONNECTION_IDLE ERROR_QUIC_CONNECTION_IDLE #define QUIC_STATUS_UNREACHABLE HRESULT_FROM_WIN32(ERROR_HOST_UNREACHABLE) #define QUIC_STATUS_INTERNAL_ERROR ERROR_QUIC_INTERNAL_ERROR #define QUIC_STATUS_CONNECTION_REFUSED HRESULT_FROM_WIN32(ERROR_CONNECTION_REFUSED) #define QUIC_STATUS_PROTOCOL_ERROR ERROR_QUIC_PROTOCOL_VIOLATION #define QUIC_STATUS_VER_NEG_ERROR ERROR_QUIC_VER_NEG_FAILURE #define QUIC_STATUS_TLS_ERROR HRESULT_FROM_WIN32(WSA_SECURE_HOST_NOT_FOUND) #define QUIC_STATUS_USER_CANCELED ERROR_QUIC_USER_CANCELED #define QUIC_STATUS_ALPN_NEG_FAILURE ERROR_QUIC_ALPN_NEG_FAILURE #define QUIC_STATUS_STREAM_LIMIT_REACHED ERROR_QUIC_STREAM_LIMIT_REACHED #define QUIC_STATUS_ALPN_IN_USE ERROR_QUIC_ALPN_IN_USE #define QUIC_STATUS_TLS_ALERT(Alert) (QUIC_TLS_ALERT_HRESULT_PREFIX | (0xff & Alert)) #define QUIC_STATUS_CLOSE_NOTIFY QUIC_STATUS_TLS_ALERT(0) #define QUIC_STATUS_BAD_CERTIFICATE QUIC_STATUS_TLS_ALERT(42) #define QUIC_STATUS_UNSUPPORTED_CERTIFICATE QUIC_STATUS_TLS_ALERT(43) #define QUIC_STATUS_REVOKED_CERTIFICATE QUIC_STATUS_TLS_ALERT(44) #define QUIC_STATUS_EXPIRED_CERTIFICATE QUIC_STATUS_TLS_ALERT(45) #define QUIC_STATUS_UNKNOWN_CERTIFICATE QUIC_STATUS_TLS_ALERT(46) #define QUIC_STATUS_REQUIRED_CERTIFICATE QUIC_STATUS_TLS_ALERT(116) #define QUIC_STATUS_CERT_EXPIRED CERT_E_EXPIRED #define QUIC_STATUS_CERT_UNTRUSTED_ROOT CERT_E_UNTRUSTEDROOT #define QUIC_STATUS_CERT_NO_CERT SEC_E_NO_CREDENTIALS #ifdef htons #define QuicNetByteSwapShort(x) htons(x) #else #define QuicNetByteSwapShort(x) ((uint16_t)((((x) & 0x00ff) << 8) | (((x) & 0xff00) >> 8)))"
  },
  {
    "label": "FIELD_OFFSET()",
    "kind": "Method",
    "detail": "Function (typedef SOCKADDR_INET QUIC_ADDR ; # define QUIC_ADDR_V4_PORT_OFFSET)",
    "insertText": "FIELD_OFFSET(SOCKADDR_IN, sin_port) #define QUIC_ADDR_V4_IP_OFFSET FIELD_OFFSET(SOCKADDR_IN, sin_addr) #define QUIC_ADDR_V6_PORT_OFFSET FIELD_OFFSET(SOCKADDR_IN6, sin6_port) #define QUIC_ADDR_V6_IP_OFFSET FIELD_OFFSET(SOCKADDR_IN6, sin6_addr) #define QUIC_ADDRESS_FAMILY_UNSPEC AF_UNSPEC #define QUIC_ADDRESS_FAMILY_INET AF_INET #define QUIC_ADDRESS_FAMILY_INET6 AF_INET6 inline BOOLEAN QuicAddrIsValid( _In_ const QUIC_ADDR* const Addr)"
  },
  {
    "label": "memcmp()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "memcmp(&Addr1->Ipv6.sin6_addr, &Addr2->Ipv6.sin6_addr, sizeof(IN6_ADDR))"
  },
  {
    "label": "QuicAddrCompare()",
    "kind": "Method",
    "detail": "Function (} } BOOLEAN)",
    "insertText": "QuicAddrCompare(_In_ const QUIC_ADDR* const Addr1, _In_ const QUIC_ADDR* const Addr2)"
  },
  {
    "label": "QuicAddrIsWildCard()",
    "kind": "Method",
    "detail": "Function (} BOOLEAN)",
    "insertText": "QuicAddrIsWildCard(_In_ const QUIC_ADDR* const Addr)"
  },
  {
    "label": "memcmp()",
    "kind": "Method",
    "detail": "Function (const IN_ADDR ZeroAddr = { 0 } ; return)",
    "insertText": "memcmp(&Addr->Ipv4.sin_addr, &ZeroAddr, sizeof(IN_ADDR))"
  },
  {
    "label": "memcmp()",
    "kind": "Method",
    "detail": "Function (} else { const IN6_ADDR ZeroAddr = { 0 } ; return)",
    "insertText": "memcmp(&Addr->Ipv6.sin6_addr, &ZeroAddr, sizeof(IN6_ADDR))"
  },
  {
    "label": "QuicAddrGetFamily()",
    "kind": "Method",
    "detail": "Function (} } QUIC_ADDRESS_FAMILY)",
    "insertText": "QuicAddrGetFamily(_In_ const QUIC_ADDR* const Addr)"
  },
  {
    "label": "QuicAddrSetFamily()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QuicAddrSetFamily(_Inout_ QUIC_ADDR* Addr, _In_ QUIC_ADDRESS_FAMILY Family)"
  },
  {
    "label": "si_family()",
    "kind": "Method",
    "detail": "Function (Addr ->)",
    "insertText": "si_family(ADDRESS_FAMILY)"
  },
  {
    "label": "QuicAddrGetPort()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "QuicAddrGetPort(_In_ const QUIC_ADDR* const Addr)"
  },
  {
    "label": "QuicAddrSetPort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QuicAddrSetPort(_Out_ QUIC_ADDR* Addr, _In_ uint16_t Port)"
  },
  {
    "label": "QuicNetByteSwapShort()",
    "kind": "Method",
    "detail": "Function (Addr -> Ipv4 . sin_port =)",
    "insertText": "QuicNetByteSwapShort(Port)"
  },
  {
    "label": "QuicAddrSetToLoopback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QuicAddrSetToLoopback(_Inout_ QUIC_ADDR* Addr)"
  },
  {
    "label": "QuicAddrIncrement()",
    "kind": "Method",
    "detail": "Function (Addr -> Ipv4 . sin_addr . S_un . S_un_b . s_b1 = 1 2 7 ; Addr -> Ipv4 . sin_addr . S_un . S_un_b . s_b4 = 1 ; } else { Addr -> Ipv6 . sin6_addr . u . Byte [ 1 5 ] = 1 ; } } void)",
    "insertText": "QuicAddrIncrement(_Inout_ QUIC_ADDR* Addr)"
  },
  {
    "label": "QuicAddrHash()",
    "kind": "Method",
    "detail": "Function (Addr -> Ipv4 . sin_addr . S_un . S_un_b . s_b4 + + ; } else { Addr -> Ipv6 . sin6_addr . u . Byte [ 1 5 ] + + ; } } uint32_t)",
    "insertText": "QuicAddrHash(_In_ const QUIC_ADDR* Addr)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (uint32_t Hash = 5 3 8 7 ; # define)",
    "insertText": "UPDATE_HASH(byte) Hash = ((Hash << 5) - Hash) + (byte) if (Addr->si_family == QUIC_ADDRESS_FAMILY_INET)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_HASH(Addr->Ipv4.sin_port & 0xFF)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_HASH(Addr->Ipv4.sin_port >> 8)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_HASH(((uint8_t*)&Addr->Ipv4.sin_addr)[i])"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UPDATE_HASH(Addr->Ipv6.sin6_port & 0xFF)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_HASH(Addr->Ipv6.sin6_port >> 8)"
  },
  {
    "label": "UPDATE_HASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_HASH(((uint8_t*)&Addr->Ipv6.sin6_addr)[i])"
  },
  {
    "label": "QUIC_LOCALHOST_FOR_AF()",
    "kind": "Method",
    "detail": "Function (} } return Hash ; } # define)",
    "insertText": "QUIC_LOCALHOST_FOR_AF(Af) \"localhost\" #if WINAPI_FAMILY != WINAPI_FAMILY_GAMES inline _Success_(return != FALSE) BOOLEAN QuicAddrFromString( _In_z_ const char* AddrStr, _In_ uint16_t Port, _Out_ QUIC_ADDR* Addr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Addr -> si_family = QUIC_ADDRESS_FAMILY_INET ; } else)",
    "insertText": "if(RtlIpv6StringToAddressExA(AddrStr, &Addr->Ipv6.sin6_addr, &Addr->Ipv6.sin6_scope_id, &Addr->Ipv6.sin6_port) == NO_ERROR)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Addr -> si_family = QUIC_ADDRESS_FAMILY_INET6 ; } else { return FALSE ; })",
    "insertText": "if(Addr->Ipv4.sin_port == 0)"
  },
  {
    "label": "_Success_()",
    "kind": "Method",
    "detail": "Function (} return TRUE ; } typedef struct QUIC_ADDR_STR { char Address [ 6 4 ] ; } QUIC_ADDR_STR ;)",
    "insertText": "_Success_(return != FALSE) BOOLEAN QuicAddrToString( _In_ const QUIC_ADDR* Addr, _Out_ QUIC_ADDR_STR* AddrStr)"
  },
  {
    "label": "ARRAYSIZE()",
    "kind": "Method",
    "detail": "Function (LONG Status ; ULONG AddrStrLen =)",
    "insertText": "ARRAYSIZE(AddrStr->Address)"
  },
  {
    "label": "RtlIpv4AddressToStringExA()",
    "kind": "Method",
    "detail": "Function (Status =)",
    "insertText": "RtlIpv4AddressToStringExA(&Addr->Ipv4.sin_addr, Addr->Ipv4.sin_port, AddrStr->Address, &AddrStrLen)"
  },
  {
    "label": "RtlIpv6AddressToStringExA()",
    "kind": "Method",
    "detail": "Function (} else { Status =)",
    "insertText": "RtlIpv6AddressToStringExA(&Addr->Ipv6.sin6_addr, 0, Addr->Ipv6.sin6_port, AddrStr->Address, &AddrStrLen)"
  }
]