[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FBuildAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildAction"
  },
  {
    "label": "IRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequestOwner"
  },
  {
    "label": "FBuildInputDataResolvedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInputDataResolvedParams"
  },
  {
    "label": "FBuildInputMetaResolvedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInputMetaResolvedParams"
  },
  {
    "label": "FBuildKeyResolvedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildKeyResolvedParams"
  },
  {
    "label": "FBuildInputMetaByKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInputMetaByKey"
  },
  {
    "label": "FBuildInputDataByKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInputDataByKey"
  },
  {
    "label": "IBuildInputResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInputResolver"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" DerivedDataBuildDefinition . h \" # include \" DerivedDataBuildKey . h \" # include \" DerivedDataRequestTypes . h \" # include \" IO / IoHash . h \" # include \" Templates / Function . h \" struct FGuid ; namespace UE::DerivedData { class FBuildAction ; } namespace UE::DerivedData { class IRequestOwner ; } namespace UE::DerivedData { struct FBuildInputDataResolvedParams ; } namespace UE::DerivedData { struct FBuildInputMetaResolvedParams ; } namespace UE::DerivedData { struct FBuildKeyResolvedParams ; } namespace UE::DerivedData { using FBuildInputFilter = TUniqueFunction<)",
    "insertText": "bool(FUtf8StringView Key)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FOnBuildInputDataResolved = TUniqueFunction<)",
    "insertText": "void(FBuildInputDataResolvedParams&& Params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FOnBuildInputMetaResolved = TUniqueFunction<)",
    "insertText": "void(FBuildInputMetaResolvedParams&& Params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FOnBuildKeyResolved = TUniqueFunction<)",
    "insertText": "void(FBuildKeyResolvedParams&& Params)"
  },
  {
    "label": "IBuildInputResolver()",
    "kind": "Method",
    "detail": "Function (struct FBuildInputMetaByKey { FUtf8StringView Key ; FIoHash RawHash ; uint64 RawSize = 0 ; } ; struct FBuildInputDataByKey { FUtf8StringView Key ; FCompressedBuffer Data ; } ; struct FBuildKeyResolvedParams { FBuildKey Key ; FOptionalBuildDefinition&& Definition ; EStatus Status = EStatus::Error ; } ; struct FBuildInputMetaResolvedParams { TConstArrayView<FBuildInputMetaByKey> Inputs ; EStatus Status = EStatus::Error ; } ; struct FBuildInputDataResolvedParams { TConstArrayView<FBuildInputDataByKey> Inputs ; EStatus Status = EStatus::Error ; } ; class IBuildInputResolver { public : ~)",
    "insertText": "IBuildInputResolver()"
  },
  {
    "label": "ResolveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveKey(const FBuildKey& Key, IRequestOwner& Owner, FOnBuildKeyResolved&& OnResolved)"
  },
  {
    "label": "OnResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolved({Key, {}, EStatus::Error})"
  },
  {
    "label": "ResolveInputMeta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveInputMeta(const FBuildDefinition& Definition, IRequestOwner& Owner, FOnBuildInputMetaResolved&& OnResolved)"
  },
  {
    "label": "OnResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolved({{}, EStatus::Error})"
  },
  {
    "label": "ResolveInputData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveInputData(const FBuildDefinition& Definition, IRequestOwner& Owner, FOnBuildInputDataResolved&& OnResolved, FBuildInputFilter&& Filter = FBuildInputFilter())"
  },
  {
    "label": "ResolveInputData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveInputData(const FBuildAction& Action, IRequestOwner& Owner, FOnBuildInputDataResolved&& OnResolved, FBuildInputFilter&& Filter = FBuildInputFilter())"
  }
]