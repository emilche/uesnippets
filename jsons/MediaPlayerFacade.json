[
  {
    "label": "FMediaSampleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSampleCache"
  },
  {
    "label": "IMediaModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaModule"
  },
  {
    "label": "IMediaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOptions"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaPlayerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayerFactory"
  },
  {
    "label": "IMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaSamples"
  },
  {
    "label": "IMediaMetadataItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaMetadataItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaAudioTrackFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaAudioTrackFormat"
  },
  {
    "label": "FMediaPlayerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaPlayerOptions"
  },
  {
    "label": "FMediaVideoTrackFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaVideoTrackFormat"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "allow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allow"
  },
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "FTrackSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackSelection"
  },
  {
    "label": "FMediaPlayerLifecycleManagerDelegateControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerLifecycleManagerDelegateControl"
  },
  {
    "label": "FBlockOnRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlockOnRange"
  },
  {
    "label": "FMediaPlayerFacade()",
    "kind": "Method",
    "detail": "Function (MEDIAUTILS_API)",
    "insertText": "FMediaPlayerFacade(TWeakObjectPtr<UMediaPlayer> InMediaPlayer)"
  },
  {
    "label": "AddAudioSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioSampleSink(const TSharedRef<FMediaAudioSampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddCaptionSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptionSampleSink(const TSharedRef<FMediaOverlaySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddMetadataSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataSampleSink(const TSharedRef<FMediaBinarySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddSubtitleSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubtitleSampleSink(const TSharedRef<FMediaOverlaySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddVideoSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoSampleSink(const TSharedRef<FMediaTextureSampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "CanPlayUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayUrl(const FString& Url, const IMediaOptions* Options)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const FString& Url, const IMediaOptions* Options, const FMediaPlayerOptions* PlayerOptions = nullptr)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seek(const FTimespan& Time)"
  },
  {
    "label": "SelectTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectTrack(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "SetBlockOnTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTime(const FTimespan& Time)"
  },
  {
    "label": "SetBlockOnTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTimeRange(const TRange<FTimespan>& TimeRange)"
  },
  {
    "label": "SetCacheWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheWindow(FTimespan Ahead, FTimespan Behind)"
  },
  {
    "label": "SetGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGuid(FGuid& Guid)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLooping(bool Looping)"
  },
  {
    "label": "SetMediaOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMediaOptions(const IMediaOptions* Options)"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRate(float Rate)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaybackTimeRange(const TRange<FTimespan>& InTimeRange)"
  },
  {
    "label": "SetNativeVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNativeVolume(float Volume)"
  },
  {
    "label": "SetTrackFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTrackFormat(EMediaTrackType TrackType, int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "SetVideoTrackFrameRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex, float FrameRate)"
  },
  {
    "label": "SetViewField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewField(float Horizontal, float Vertical, bool Absolute)"
  },
  {
    "label": "SetViewOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewOrientation(const FQuat& Orientation, bool Absolute)"
  },
  {
    "label": "SetLastAudioRenderedSampleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastAudioRenderedSampleTime(FTimespan SampleTime)"
  },
  {
    "label": "SetAreEventsSafeForAnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreEventsSafeForAnyThread(bool bInAreEventsSafeForAnyThread)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool bExcludePlayer = false, bool bOnSeek = false)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(EMediaEvent Event, bool bIsBroadcastAllowed)"
  },
  {
    "label": "ResetTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTracks()"
  },
  {
    "label": "UpdateTrackSelectionWithPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackSelectionWithPlayer()"
  },
  {
    "label": "SelectDefaultTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectDefaultTracks()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerOpen(IMediaPlayerLifecycleManagerDelegate::IControlRef& NewLifecycleManagerDelegateControl, const FString& InUrl, const IMediaOptions* Options, const FMediaPlayerOptions* InPlayerOptions, IMediaPlayerFactory* PlayerFactory, bool bWillCreatePlayer, uint32 WillUseNewResources, uint64 NewPlayerInstanceID)"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerCreated()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerCreateFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerCreateFailed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerClosed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerDestroyed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerResourcesReleased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerResourcesReleased(uint32 ResourceFlags)"
  },
  {
    "label": "ProcessAudioSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessVideoSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessVideoSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessCaptionSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCaptionSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSubtitleSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessMetadataSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMetadataSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessAudioSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessVideoSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessVideoSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessSubtitleSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSubtitleSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessCaptionSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCaptionSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessMetadataSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMetadataSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "MonitorAudioEnablement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorAudioEnablement()"
  },
  {
    "label": "UpdateSeekStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSeekStatus(const FMediaTimeStamp* pCheckTimeStamp = nullptr)"
  },
  {
    "label": "PreSampleProcessingTimeHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSampleProcessingTimeHandling()"
  },
  {
    "label": "PostSampleProcessingTimeHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSampleProcessingTimeHandling(FTimespan DeltaTime)"
  },
  {
    "label": "DestroyPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPlayer()"
  },
  {
    "label": "ContinueOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinueOpen(IMediaPlayerLifecycleManagerDelegate::IControlRef NewLifecycleManagerDelegateControl, const FString& Url, const IMediaOptions* Options, const FMediaPlayerOptions* PlayerOptions, IMediaPlayerFactory* PlayerFactory, TSharedPtr<IMediaPlayer, ESPMode::ThreadSafe> ReusedPlayer, bool bCreateNewPlayer, uint64 NewPlayerInstanceID)"
  },
  {
    "label": "SendSinkEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSinkEvent(EMediaSampleSinkEvent Event, const FMediaSampleSinkEventData& Data)"
  },
  {
    "label": "ReInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReInit()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRange(const TRange<FTimespan> & NewRange)"
  },
  {
    "label": "OnFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlush()"
  },
  {
    "label": "OnSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeek(int32 PrimaryIndex)"
  }
]