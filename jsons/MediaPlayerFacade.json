[
  {
    "label": "FMediaSampleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSampleCache"
  },
  {
    "label": "IMediaModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaModule"
  },
  {
    "label": "IMediaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOptions"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaPlayerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayerFactory"
  },
  {
    "label": "IMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaSamples"
  },
  {
    "label": "IMediaMetadataItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaMetadataItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaAudioTrackFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaAudioTrackFormat"
  },
  {
    "label": "FMediaPlayerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaPlayerOptions"
  },
  {
    "label": "FMediaVideoTrackFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaVideoTrackFormat"
  },
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "FTrackSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackSelection"
  },
  {
    "label": "FMediaPlayerLifecycleManagerDelegateControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerLifecycleManagerDelegateControl"
  },
  {
    "label": "FBlockOnRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlockOnRange"
  },
  {
    "label": "FMediaPlayerFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Queue . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" IMediaClockSink . h \" # include \" IMediaEventSink . h \" # include \" IMediaPlayerLifecycleManager . h \" # include \" IMediaTickable . h \" # include \" IMediaTimeSource . h \" # include \" IMediaTracks . h \" # include \" Internationalization / Text . h \" # include \" Math / MathFwd . h \" # include \" Math / Quat . h \" # include \" Math / Range . h \" # include \" Math / RangeSet . h \" # include \" Math / Rotator . h \" # include \" MediaPlayerOptions . h \" # include \" MediaSampleSink . h \" # include \" MediaSampleSinks . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Misc / Timespan . h \" # include \" Misc / Timecode . h \" # include \" Misc / Variant . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FMediaSampleCache ; class IMediaModule ; class IMediaOptions ; class IMediaPlayer ; class IMediaPlayerFactory ; class IMediaSamples ; class IMediaMetadataItem ; enum class EMediaEvent ; enum class EMediaCacheState ; enum class EMediaThreads ; enum class EMediaTrackType ; enum class EMediaTimeRangeType ; struct FMediaAudioTrackFormat ; struct FMediaPlayerOptions ; struct FMediaVideoTrackFormat ; class FMediaPlayerFacade : public IMediaClockSink,public IMediaTickable,protected IMediaEventSink,public TSharedFromThis<FMediaPlayerFacade,ESPMode::ThreadSafe> { public : FName DesiredPlayerName ; FTimespan TimeDelay ; TOptional<FMediaPlayerOptions> ActivePlayerOptions ; public :)",
    "insertText": "FMediaPlayerFacade(TWeakObjectPtr<UMediaPlayer> InMediaPlayer)"
  },
  {
    "label": "FMediaPlayerFacade()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaPlayerFacade()"
  },
  {
    "label": "AddAudioSampleSink()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddAudioSampleSink(const TSharedRef<FMediaAudioSampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddCaptionSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptionSampleSink(const TSharedRef<FMediaOverlaySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddMetadataSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadataSampleSink(const TSharedRef<FMediaBinarySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddSubtitleSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubtitleSampleSink(const TSharedRef<FMediaOverlaySampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "AddVideoSampleSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoSampleSink(const TSharedRef<FMediaTextureSampleSink, ESPMode::ThreadSafe>& SampleSink)"
  },
  {
    "label": "CanPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPause()"
  },
  {
    "label": "CanPlayUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayUrl(const FString& Url, const IMediaOptions* Options)"
  },
  {
    "label": "CanResume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResume()"
  },
  {
    "label": "CanScrub()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanScrub()"
  },
  {
    "label": "CanSeek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSeek()"
  },
  {
    "label": "SupportsPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPlaybackTimeRange()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetAudioTrackChannels()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAudioTrackChannels(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetAudioTrackSampleRate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAudioTrackSampleRate(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetAudioTrackType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAudioTrackType(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetMediaInfo()",
    "kind": "Method",
    "detail": "Function (FVariant)",
    "insertText": "GetMediaInfo(FName InfoName)"
  },
  {
    "label": "GetMediaName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMediaName()"
  },
  {
    "label": "GetMediaMetadata()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TMap<FString,TArray<TUniquePtr<IMediaMetadataItem>>>,ESPMode::ThreadSafe>)",
    "insertText": "GetMediaMetadata()"
  },
  {
    "label": "GetNumTracks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTracks(EMediaTrackType TrackType)"
  },
  {
    "label": "GetNumTrackFormats()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTrackFormats(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "GetPlayer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMediaPlayer,ESPMode::ThreadSafe>)",
    "insertText": "GetPlayer()"
  },
  {
    "label": "GetRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRate()"
  },
  {
    "label": "GetSelectedTrack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedTrack(EMediaTrackType TrackType)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetSupportedRates()",
    "kind": "Method",
    "detail": "Function (TRangeSet<float>)",
    "insertText": "GetSupportedRates(bool Unthinned = true)"
  },
  {
    "label": "GetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (TRange<FTimespan>)",
    "insertText": "GetPlaybackTimeRange(EMediaTimeRangeType InRangeToGet)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FMediaTimeStamp)",
    "insertText": "GetTimeStamp()"
  },
  {
    "label": "GetDisplayTimeStamp()",
    "kind": "Method",
    "detail": "Function (FMediaTimeStamp)",
    "insertText": "GetDisplayTimeStamp()"
  },
  {
    "label": "GetVideoTimecode()",
    "kind": "Method",
    "detail": "Function (TOptional<FTimecode>)",
    "insertText": "GetVideoTimecode()"
  },
  {
    "label": "GetTrackDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTrackDisplayName(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "GetTrackFormat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTrackFormat(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "GetTrackLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTrackLanguage(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "GetUrl()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetUrl()"
  },
  {
    "label": "GetVideoTrackDimensions()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetVideoTrackDimensions(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetVideoTrackFrameRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetVideoTrackFrameRates()",
    "kind": "Method",
    "detail": "Function (TRange<float>)",
    "insertText": "GetVideoTrackFrameRates(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetVideoTrackType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVideoTrackType(int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "GetViewField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewField(float& OutHorizontal, float& OutVertical)"
  },
  {
    "label": "GetViewOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewOrientation(FQuat& OutOrientation)"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasError()"
  },
  {
    "label": "IsBuffering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuffering()"
  },
  {
    "label": "IsConnecting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnecting()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "IsPreparing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreparing()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const FString& Url, const IMediaOptions* Options, const FMediaPlayerOptions* PlayerOptions = nullptr)"
  },
  {
    "label": "QueryCacheState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryCacheState(EMediaTrackType TrackType, EMediaCacheState State, TRangeSet<FTimespan>& OutTimeRanges)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seek(const FTimespan& Time)"
  },
  {
    "label": "SelectTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectTrack(EMediaTrackType TrackType, int32 TrackIndex)"
  },
  {
    "label": "SetBlockOnTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTime(const FTimespan& Time)"
  },
  {
    "label": "SetBlockOnTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTimeRange(const TRange<FTimespan>& TimeRange)"
  },
  {
    "label": "SetCacheWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheWindow(FTimespan Ahead, FTimespan Behind)"
  },
  {
    "label": "SetGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGuid(FGuid& Guid)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLooping(bool Looping)"
  },
  {
    "label": "SetMediaOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMediaOptions(const IMediaOptions* Options)"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRate(float Rate)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaybackTimeRange(const TRange<FTimespan>& InTimeRange)"
  },
  {
    "label": "SetNativeVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNativeVolume(float Volume)"
  },
  {
    "label": "SetTrackFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTrackFormat(EMediaTrackType TrackType, int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "SetVideoTrackFrameRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex, float FrameRate)"
  },
  {
    "label": "SetViewField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewField(float Horizontal, float Vertical, bool Absolute)"
  },
  {
    "label": "SetViewOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewOrientation(const FQuat& Orientation, bool Absolute)"
  },
  {
    "label": "SupportsRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRate(float Rate, bool Unthinned)"
  },
  {
    "label": "SetLastAudioRenderedSampleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastAudioRenderedSampleTime(FTimespan SampleTime)"
  },
  {
    "label": "GetLastAudioRenderedSampleTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetLastAudioRenderedSampleTime()"
  },
  {
    "label": "SetAreEventsSafeForAnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreEventsSafeForAnyThread(bool bInAreEventsSafeForAnyThread)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_OneParam(FMediaPlayerFacade, FOnMediaEvent, EMediaEvent ) FOnMediaEvent& OnMediaEvent()"
  },
  {
    "label": "TickInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickInput(FTimespan DeltaTime, FTimespan Timecode)"
  },
  {
    "label": "TickOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickOutput(FTimespan DeltaTime, FTimespan Timecode)"
  },
  {
    "label": "TickTickable()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickTickable()"
  },
  {
    "label": "BlockOnFetch()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "BlockOnFetch()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool bExcludePlayer = false, bool bOnSeek = false)"
  },
  {
    "label": "GetTimeStampInternal()",
    "kind": "Method",
    "detail": "Function (FMediaTimeStamp)",
    "insertText": "GetTimeStampInternal(bool bForDisplay)"
  },
  {
    "label": "GetAudioTrackFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAudioTrackFormat(int32 TrackIndex, int32 FormatIndex, FMediaAudioTrackFormat& OutFormat)"
  },
  {
    "label": "GetPlayerFactoryForUrl()",
    "kind": "Method",
    "detail": "Function (IMediaPlayerFactory*)",
    "insertText": "GetPlayerFactoryForUrl(const FString& Url, const IMediaOptions* Options)"
  },
  {
    "label": "GetVideoTrackFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVideoTrackFormat(int32 TrackIndex, int32 FormatIndex, FMediaVideoTrackFormat& OutFormat)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(EMediaEvent Event, bool bIsBroadcastAllowed)"
  },
  {
    "label": "UserSelection()",
    "kind": "Method",
    "detail": "Function (private : struct FTrackSelection { int32)",
    "insertText": "UserSelection(int32)"
  },
  {
    "label": "PlayerSelection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PlayerSelection(int32)"
  },
  {
    "label": "ResetTracks()",
    "kind": "Method",
    "detail": "Function (} TrackSelection ; void)",
    "insertText": "ResetTracks()"
  },
  {
    "label": "UpdateTrackSelectionWithPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackSelectionWithPlayer()"
  },
  {
    "label": "SelectDefaultTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectDefaultTracks()"
  },
  {
    "label": "HaveAudioPlayback()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "HaveAudioPlayback()"
  },
  {
    "label": "HaveVideoPlayback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveVideoPlayback()"
  },
  {
    "label": "GetUnpausedRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUnpausedRate()"
  },
  {
    "label": "ReceiveMediaEvent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ReceiveMediaEvent(EMediaEvent Event)"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerOpen()",
    "kind": "Method",
    "detail": "Function (private : class FMediaPlayerLifecycleManagerDelegateControl ; bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerOpen(IMediaPlayerLifecycleManagerDelegate::IControlRef& NewLifecycleManagerDelegateControl, const FString& InUrl, const IMediaOptions* Options, const FMediaPlayerOptions* InPlayerOptions, IMediaPlayerFactory* PlayerFactory, bool bWillCreatePlayer, uint32 WillUseNewResources, uint64 NewPlayerInstanceID)"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerCreated()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerCreateFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerCreateFailed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerClosed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerDestroyed()"
  },
  {
    "label": "NotifyLifetimeManagerDelegate_PlayerResourcesReleased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyLifetimeManagerDelegate_PlayerResourcesReleased(uint32 ResourceFlags)"
  },
  {
    "label": "ProcessAudioSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessVideoSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessVideoSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessCaptionSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCaptionSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSubtitleSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessMetadataSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMetadataSamples(IMediaSamples& Samples, const TRange<FMediaTimeStamp>& TimeRange)"
  },
  {
    "label": "ProcessAudioSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessVideoSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessVideoSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessSubtitleSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSubtitleSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessCaptionSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCaptionSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "ProcessMetadataSamplesV1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMetadataSamplesV1(IMediaSamples& Samples, TRange<FTimespan> TimeRange)"
  },
  {
    "label": "IsVideoSampleStillGood()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVideoSampleStillGood(const TRange<FMediaTimeStamp>& LastSampleTimeRange, const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "MonitorAudioEnablement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorAudioEnablement()"
  },
  {
    "label": "UpdateSeekStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSeekStatus(const FMediaTimeStamp* pCheckTimeStamp = nullptr)"
  },
  {
    "label": "PreSampleProcessingTimeHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSampleProcessingTimeHandling()"
  },
  {
    "label": "GetCurrentPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentPlaybackTimeRange(TRange<FMediaTimeStamp>& TimeRange, float Rate, FTimespan DeltaTime, bool bPurgeSampleRelated)"
  },
  {
    "label": "PostSampleProcessingTimeHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSampleProcessingTimeHandling(FTimespan DeltaTime)"
  },
  {
    "label": "DestroyPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPlayer()"
  },
  {
    "label": "ContinueOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinueOpen(IMediaPlayerLifecycleManagerDelegate::IControlRef NewLifecycleManagerDelegateControl, const FString& Url, const IMediaOptions* Options, const FMediaPlayerOptions* PlayerOptions, IMediaPlayerFactory* PlayerFactory, TSharedPtr<IMediaPlayer, ESPMode::ThreadSafe> ReusedPlayer, bool bCreateNewPlayer, uint64 NewPlayerInstanceID)"
  },
  {
    "label": "SendSinkEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSinkEvent(EMediaSampleSinkEvent Event, const FMediaSampleSinkEventData& Data)"
  },
  {
    "label": "GetAdjustedBlockOnRange()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FMediaAudioSampleSink,ESPMode::ThreadSafe> PrimaryAudioSink ; FMediaAudioSampleSinks AudioSampleSinks ; FMediaOverlaySampleSinks CaptionSampleSinks ; FMediaBinarySampleSinks MetadataSampleSinks ; FMediaOverlaySampleSinks SubtitleSampleSinks ; FMediaVideoSampleSinks VideoSampleSinks ; private : TRange<FMediaTimeStamp>)",
    "insertText": "GetAdjustedBlockOnRange()"
  },
  {
    "label": "GetActivePlaybackRange()",
    "kind": "Method",
    "detail": "Function (TRange<FTimespan>)",
    "insertText": "GetActivePlaybackRange()"
  },
  {
    "label": "ReInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReInit()"
  },
  {
    "label": "FBlockOnRange()",
    "kind": "Method",
    "detail": "Function (class FBlockOnRange { public :)",
    "insertText": "FBlockOnRange(FMediaPlayerFacade* InFacade) : Facade(InFacade)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRange(const TRange<FTimespan> & NewRange)"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (const TRange<FMediaTimeStamp>&)",
    "insertText": "GetRange()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "OnFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlush()"
  },
  {
    "label": "OnSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeek(int32 PrimaryIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BlockOnRange = TRange<FMediaTimeStamp)",
    "insertText": "Empty()"
  }
]