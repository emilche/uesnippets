[
  {
    "label": "TSampledScalarField2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSampledScalarField2"
  },
  {
    "label": "TSampledScalarField2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" DenseGrid2 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType,ValueType> class TSampledScalarField2 { public : TDenseGrid2<ValueType> GridValues ; TVector2<RealType> GridOrigin ; TVector2<RealType> CellDimensions ;)",
    "insertText": "TSampledScalarField2()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (GridValues .)",
    "insertText": "Resize(2, 2)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (GridOrigin = TVector2<RealType)",
    "insertText": "Zero()"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (CellDimensions = TVector2<RealType)",
    "insertText": "One()"
  },
  {
    "label": "CopyConfiguration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyConfiguration(const TSampledScalarField2<RealType,ValueType>& OtherField)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (GridValues .)",
    "insertText": "Resize(OtherField.GridValues.Width(), OtherField.GridValues.Height())"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (GridOrigin = OtherField . GridOrigin ; CellDimensions = OtherField . CellDimensions ; } void)",
    "insertText": "Resize(int64 Width, int64 Height, const ValueType& InitValue)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (GridValues .)",
    "insertText": "Resize(Width, Height)"
  },
  {
    "label": "AssignAll()",
    "kind": "Method",
    "detail": "Function (GridValues .)",
    "insertText": "AssignAll(InitValue)"
  },
  {
    "label": "Width()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Width()"
  },
  {
    "label": "Height()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Height()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Num()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosition(const TVector2<RealType>& Origin)"
  },
  {
    "label": "SetCellSize()",
    "kind": "Method",
    "detail": "Function (GridOrigin = Origin ; } void)",
    "insertText": "SetCellSize(RealType CellSize)"
  },
  {
    "label": "BilinearSampleClamped()",
    "kind": "Method",
    "detail": "Function (CellDimensions . X = CellDimensions . Y = CellSize ; } ValueType)",
    "insertText": "BilinearSampleClamped(const TVector2<RealType>& Position)"
  },
  {
    "label": "GridPoint()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "GridPoint(((Position.X - GridOrigin.X) / CellDimensions.X), ((Position.Y - GridOrigin.Y) / CellDimensions.Y))"
  },
  {
    "label": "x0()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "x0(int64)"
  },
  {
    "label": "y0()",
    "kind": "Method",
    "detail": "Function (int64 x1 = x0 + 1 ; int64)",
    "insertText": "y0(int64)"
  },
  {
    "label": "Width()",
    "kind": "Method",
    "detail": "Function (int64 y1 = y0 + 1 ; int64 Width = GridValues .)",
    "insertText": "Width(), Height = GridValues.Height()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (x0 =)",
    "insertText": "Clamp(x0, (int64)0, Width - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (x1 =)",
    "insertText": "Clamp(x1, (int64)0, Width - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (y0 =)",
    "insertText": "Clamp(y0, (int64)0, Height - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "Clamp(y1, (int64)0, Height - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (RealType fAx =)",
    "insertText": "Clamp(GridPoint.X - (RealType)x0, (RealType)0, (RealType)1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (RealType fAy =)",
    "insertText": "Clamp(GridPoint.Y - (RealType)y0, (RealType)0, (RealType)1)"
  },
  {
    "label": "OneMinusfAx()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "OneMinusfAx(RealType)"
  },
  {
    "label": "OneMinusfAy()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "OneMinusfAy(RealType)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const ValueType& fV00 = GridValues [ y0* Width + x0 ] ; const ValueType& fV10 = GridValues [ y0* Width + x1 ] ; const ValueType& fV01 = GridValues [ y1* Width + x0 ] ; const ValueType& fV11 = GridValues [ y1* Width + x1 ] ;)",
    "insertText": "return(OneMinusfAx * OneMinusfAy) * fV00 + (OneMinusfAx * fAy) * fV01 + (fAx * OneMinusfAy) * fV10 + (fAx * fAy)"
  },
  {
    "label": "BilinearSampleGradientClamped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BilinearSampleGradientClamped(const TVector2<RealType>& Position, ValueType& GradXOut, ValueType& GradYOut)"
  },
  {
    "label": "fV00()",
    "kind": "Method",
    "detail": "Function (const ValueType& fV00 = GridValues [ y0* Width + x0 ] ; const ValueType& fV10 = GridValues [ y0* Width + x1 ] ; const ValueType& fV01 = GridValues [ y1* Width + x0 ] ; const ValueType& fV11 = GridValues [ y1* Width + x1 ] ; GradXOut = -)",
    "insertText": "fV00(OneMinusfAy) + -fV01 * (fAy) + fV10 * (OneMinusfAy) + fV11 * (fAy)"
  },
  {
    "label": "fV00()",
    "kind": "Method",
    "detail": "Function (GradYOut = -)",
    "insertText": "fV00(OneMinusfAx) + fV01 * (OneMinusfAx) + -fV10 * (fAx) + fV11 * (fAx)"
  }
]