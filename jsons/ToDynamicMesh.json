[
  {
    "label": "TToDynamicMeshBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TToDynamicMeshBase"
  },
  {
    "label": "TVertexAttr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVertexAttr"
  },
  {
    "label": "TOverlayTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOverlayTraits"
  },
  {
    "label": "TAttrWelder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttrWelder"
  },
  {
    "label": "TToDynamicMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TToDynamicMesh"
  },
  {
    "label": "TToDynamicMeshBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshAttributeSet . h \" # include \" DynamicMesh / DynamicMeshOverlay . h \" # include \" DynamicMesh / DynamicVertexSkinWeightsAttribute . h \" # include \" DynamicMesh / DynamicBoneAttribute . h \" # include \" VectorTypes . h \" # include \" Async / Async . h \" namespace UE { namespace Geometry { template<SrcMeshType> class TToDynamicMeshBase { public : using SrcVertIDType = SrcMeshType::VertIDType ; using SrcTriIDType = SrcMeshType::TriIDType ;)",
    "insertText": "TToDynamicMeshBase()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} TArray<SrcVertIDType> ToSrcVertIDMap ; TArray<SrcTriIDType> ToSrcTriIDMap ; FDateTime Time_AfterVertices ; FDateTime Time_AfterTriangles ; void)",
    "insertText": "Convert(FDynamicMesh3& MeshOut, const SrcMeshType& MeshIn, TFunctionRef<int32(const SrcTriIDType& SrcTrID)> GroupIDFunction)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Clear()"
  },
  {
    "label": "DiscardAttributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "DiscardAttributes()"
  },
  {
    "label": "EnableTriangleGroups()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "EnableTriangleGroups(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ToSrcVertIDMap .)",
    "insertText": "Reset()"
  },
  {
    "label": "NumVerts()",
    "kind": "Method",
    "detail": "Function (const int32 NumSrcVerts = MeshIn .)",
    "insertText": "NumVerts()"
  },
  {
    "label": "NumTris()",
    "kind": "Method",
    "detail": "Function (const int32 NumSrcTris = MeshIn .)",
    "insertText": "NumTris()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (ToSrcTriIDMap .)",
    "insertText": "AddUninitialized(NumSrcTris)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MaxSrcVertID = - 1 ;)",
    "insertText": "for(const SrcVertIDType& SrcVertID : MeshIn.GetVertIDs())"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (const FVector3d Position = MeshIn .)",
    "insertText": "GetPosition(SrcVertID)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (const int32 DstVertID = MeshOut .)",
    "insertText": "AppendVertex(Position)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ToSrcVertIDMap [ DstVertID ] = SrcVertID ; MaxSrcVertID =)",
    "insertText": "Max((int32)SrcVertID, MaxSrcVertID)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} TArray<int32> FromSrcVertIDMap ; FromSrcVertIDMap .)",
    "insertText": "AddUninitialized(MaxSrcVertID+1)"
  },
  {
    "label": "SrcVertID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SrcVertID(int32)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (FromSrcVertIDMap [ SrcVertID ] = i ; } Time_AfterVertices =)",
    "insertText": "Now()"
  },
  {
    "label": "GroupIDFunction()",
    "kind": "Method",
    "detail": "Function (const int32 DstGroupID =)",
    "insertText": "GroupIDFunction(SrcTriID)"
  },
  {
    "label": "GetTri()",
    "kind": "Method",
    "detail": "Function (SrcVertIDType SrcTriVerts [ 3 ] ; MeshIn .)",
    "insertText": "GetTri(SrcTriID, SrcTriVerts[0], SrcTriVerts[1], SrcTriVerts[2])"
  },
  {
    "label": "DstTriVerts()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "DstTriVerts(FromSrcVertIDMap[SrcTriVerts[0]], FromSrcVertIDMap[SrcTriVerts[1]], FromSrcVertIDMap[SrcTriVerts[2]])"
  },
  {
    "label": "AppendTriangle()",
    "kind": "Method",
    "detail": "Function (int32 DstTriangleID = MeshOut .)",
    "insertText": "AppendTriangle(DstTriVerts, DstGroupID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(DstTriangleID == FDynamicMesh3::NonManifoldID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bDuplicate [ 3 ] = { false,false,false } ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "ii()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ii(i + 1)"
  },
  {
    "label": "FindEdge()",
    "kind": "Method",
    "detail": "Function (int EID = MeshOut .)",
    "insertText": "FindEdge(DstTriVerts[i], DstTriVerts[ii])"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVector3d Position = MeshOut .)",
    "insertText": "GetVertex(DstTriVerts[i])"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (DstTriVerts [ i ] = NewDstVertID ; ToSrcVertIDMap .)",
    "insertText": "SetNumUninitialized(NewDstVertID + 1)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} ToSrcTriIDMap [ DstTriangleID ] = SrcTriID ; } const int32 MaxDstTriID = MeshOut .)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ToSrcTriIDMap .)",
    "insertText": "SetNum(MaxDstTriID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<AttrType> struct TVertexAttr { int VID ; AttrType AttrValue ; bool)",
    "insertText": "operator(const TVertexAttr& o)"
  },
  {
    "label": "TAttrWelder()",
    "kind": "Method",
    "detail": "Function (} template<AttrType> struct TOverlayTraits { } ; template<> struct TOverlayTraits<FVector3f> { typedef FDynamicMeshNormalOverlay OverlayType ; } ; template<> struct TOverlayTraits<FVector2f> { typedef FDynamicMeshUVOverlay OverlayType ; } ; template<> struct TOverlayTraits<FVector4f> { typedef FDynamicMeshColorOverlay OverlayType ; } ; template<AttrType> class TAttrWelder { public : using OverlayType = TOverlayTraits<AttrType>::OverlayType ; using FVertexAttr = TVertexAttr<AttrType> ; TMap<FVertexAttr,int> UniqueVertexAttrs ; OverlayType* Overlay ;)",
    "insertText": "TAttrWelder() : Overlay(nullptr)"
  },
  {
    "label": "TAttrWelder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAttrWelder(OverlayType* OverlayIn)"
  },
  {
    "label": "FindOrAddUnique()",
    "kind": "Method",
    "detail": "Function (Overlay = OverlayIn ; } int)",
    "insertText": "FindOrAddUnique(const AttrType& AttrValue, int VertexID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FVertexAttr VertAttr = { VertexID,AttrValue } ; const int32* FoundIndex = UniqueVertexAttrs .)",
    "insertText": "Find(VertAttr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UniqueVertexAttrs .)",
    "insertText": "Add(VertAttr, NewIndex)"
  },
  {
    "label": "ConvertWOAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertWOAttributes(FDynamicMesh3& MeshOut, const SrcMeshType& MeshIn, TFunctionRef<int32(const SrcTriIDType& SrcTrID)> GroupIDFunction)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(MeshOut, MeshIn, GroupIDFunction)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Convert(FDynamicMesh3& MeshOut, const SrcMeshType& MeshIn, TFunctionRef<int32(const SrcTriIDType& SrcTrID)> GroupIDFunction, TFunctionRef<int32(const SrcTriIDType& SrcTrID)> MaterialIDFunction, bool bCopyTangents)"
  },
  {
    "label": "PopulateOverlays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateOverlays(MeshOut, MeshIn, MaterialIDFunction, bCopyTangents)"
  },
  {
    "label": "PopulateOverlays()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PopulateOverlays(FDynamicMesh3& MeshOut, const SrcMeshType& MeshIn, TFunctionRef<int32(const SrcTriIDType& SrcTrID)> MaterialIDFunction, bool bCopyTangents)"
  },
  {
    "label": "HasTangents()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshNormalOverlay* NormalOverlay = nullptr ; FDynamicMeshNormalOverlay* TangentOverlay = nullptr ; FDynamicMeshNormalOverlay* BiTangentOverlay = nullptr ; FDynamicMeshColorOverlay* ColorOverlay = nullptr ; FDynamicMeshMaterialAttribute* MaterialIDAttrib = nullptr ; bCopyTangents = bCopyTangents&& MeshIn .)",
    "insertText": "HasTangents() && MeshIn.HasBiTangents()"
  },
  {
    "label": "NumUVLayers()",
    "kind": "Method",
    "detail": "Function (const int32 NumUVLayers = MeshIn .)",
    "insertText": "NumUVLayers()"
  },
  {
    "label": "EnableAttributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "EnableAttributes()"
  },
  {
    "label": "NumRequiredNormalLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumRequiredNormalLayers(bCopyTangents)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->SetNumNormalLayers(NumRequiredNormalLayers)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < NumRequiredNormalLayers; ++i)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->GetNormalLayer(i)->InitializeTriangles(MeshOut.MaxTriangleID())"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (} NormalOverlay = MeshOut .)",
    "insertText": "Attributes()->PrimaryNormals()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (TangentOverlay = MeshOut .)",
    "insertText": "Attributes()->PrimaryTangents()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (BiTangentOverlay = MeshOut .)",
    "insertText": "Attributes()->PrimaryBiTangents()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (} MeshOut .)",
    "insertText": "Attributes()->SetNumUVLayers(FMath::Max(1, NumUVLayers))"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->GetUVLayer(i)->InitializeTriangles(MeshOut.MaxTriangleID())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MeshIn.HasColors())"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->EnablePrimaryColors()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (ColorOverlay = MeshOut .)",
    "insertText": "Attributes()->PrimaryColors()"
  },
  {
    "label": "InitializeTriangles()",
    "kind": "Method",
    "detail": "Function (ColorOverlay ->)",
    "insertText": "InitializeTriangles(MeshOut.MaxTriangleID())"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (} MeshOut .)",
    "insertText": "Attributes()->EnableMaterialID()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MaterialIDAttrib = MeshOut .)",
    "insertText": "Attributes()->GetMaterialID()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TFuture<void>> Pending ;)",
    "insertText": "for(int UVLayerIndex = 0; UVLayerIndex < NumUVLayers; UVLayerIndex++)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto UVFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&, UVLayerIndex]() { FDynamicMeshUVOverlay* Overlay = MeshOut.Attributes()->GetUVLayer(UVLayerIndex); PopulateOverlay<FVector2f, SrcUVIDType>( Overlay, MeshIn.GetUVIDs(UVLayerIndex), [&MeshIn, UVLayerIndex](const SrcUVIDType& UVID)->FVector2f { return MeshIn.GetUV(UVLayerIndex, UVID); }, [&MeshIn, UVLayerIndex](const SrcTriIDType& TriID, SrcUVIDType& UV0, SrcUVIDType& UV1, SrcUVIDType& UV2)->bool {return MeshIn.GetUVTri(UVLayerIndex, TriID, UV0, UV1, UV2); }, [&MeshIn, UVLayerIndex](const SrcWedgeIDType& WID)->FVector2f {return MeshIn.GetWedgeUV(UVLayerIndex, WID); }, [&MeshIn](const SrcTriIDType& TriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)->void { MeshIn.GetWedgeIDs(TriID, WID0, WID1, WID2); } ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(UVFuture))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NormalOverlay != nullptr)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto NormalFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&]() { PopulateOverlay<FVector3f, SrcNormalIDType>( NormalOverlay, MeshIn.GetNormalIDs(), [&MeshIn](const SrcNormalIDType& NID)->FVector3f { return MeshIn.GetNormal(NID); }, [&MeshIn](const SrcTriIDType& TriID, SrcNormalIDType& N0, SrcNormalIDType& N1, SrcNormalIDType& N2)->bool {return MeshIn.GetNormalTri(TriID, N0, N1, N2); }, [&MeshIn](const SrcWedgeIDType& WID)->FVector3f {return MeshIn.GetWedgeNormal(WID); }, [&MeshIn](const SrcTriIDType& TriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)->void { MeshIn.GetWedgeIDs(TriID, WID0, WID1, WID2); } ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(NormalFuture))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TangentOverlay != nullptr)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto TangentFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&]() { PopulateOverlay<FVector3f, SrcNormalIDType>( TangentOverlay, MeshIn.GetTangentIDs(), [&MeshIn](const SrcNormalIDType& NID)->FVector3f { return MeshIn.GetTangent(NID); }, [&MeshIn](const SrcTriIDType& TriID, SrcNormalIDType& N0, SrcNormalIDType& N1, SrcNormalIDType& N2)->bool {return MeshIn.GetTangentTri(TriID, N0, N1, N2); }, [&MeshIn](const SrcWedgeIDType& WID)->FVector3f {return MeshIn.GetWedgeTangent(WID); }, [&MeshIn](const SrcTriIDType& TriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)->void { MeshIn.GetWedgeIDs(TriID, WID0, WID1, WID2); } ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(TangentFuture))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BiTangentOverlay != nullptr)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto BiTangentFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&]() { PopulateOverlay<FVector3f, SrcNormalIDType>( BiTangentOverlay, MeshIn.GetBiTangentIDs(), [&MeshIn](const SrcNormalIDType& NID)->FVector3f { return MeshIn.GetBiTangent(NID); }, [&MeshIn](const SrcTriIDType& TriID, SrcNormalIDType& N0, SrcNormalIDType& N1, SrcNormalIDType& N2)->bool {return MeshIn.GetBiTangentTri(TriID, N0, N1, N2); }, [&MeshIn](const SrcWedgeIDType& WID)->FVector3f {return MeshIn.GetWedgeBiTangent(WID); }, [&MeshIn](const SrcTriIDType& TriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)->void { MeshIn.GetWedgeIDs(TriID, WID0, WID1, WID2); } ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(BiTangentFuture))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ColorOverlay != nullptr)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto ColorFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&]() { PopulateOverlay<FVector4f, SrcColorIDType>( ColorOverlay, MeshIn.GetColorIDs(), [&MeshIn](const SrcColorIDType& CID)->FVector4f { return MeshIn.GetColor(CID); }, [&MeshIn](const SrcTriIDType& TriID, SrcColorIDType& C0, SrcColorIDType& C1, SrcColorIDType& C2)->bool {return MeshIn.GetColorTri(TriID, C0, C1, C2); }, [&MeshIn](const SrcWedgeIDType& WID)->FVector4f {return MeshIn.GetWedgeColor(WID); }, [&MeshIn](const SrcTriIDType& TriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)->void { MeshIn.GetWedgeIDs(TriID, WID0, WID1, WID2); } ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(ColorFuture))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MaterialIDAttrib != nullptr)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto MaterialFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [&]() { for (int32 TriangleID : MeshOut.TriangleIndicesItr()) { SrcTriIDType SrcTriID = MyBase::ToSrcTriIDMap[TriangleID]; MaterialIDAttrib->SetValue(TriangleID, MaterialIDFunction(SrcTriID)); } })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(MaterialFuture))"
  },
  {
    "label": "NumWeightMapLayers()",
    "kind": "Method",
    "detail": "Function (} const int32 NumWeightMaps = MeshIn .)",
    "insertText": "NumWeightMapLayers()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->SetNumWeightLayers(NumWeightMaps)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto WeightMapFuture =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [this, &MeshIn, &MeshOut, WeightMapIndex]() { FDynamicMeshWeightAttribute* WeightMapAttrib = MeshOut.Attributes()->GetWeightLayer(WeightMapIndex); for (int32 VertexID : MeshOut.VertexIndicesItr()) { SrcVertIDType SrcVertID = MyBase::ToSrcVertIDMap[VertexID]; float Weight = MeshIn.GetVertexWeight(WeightMapIndex, SrcVertID); WeightMapAttrib->SetValue(VertexID, &Weight); } WeightMapAttrib->SetName( MeshIn.GetWeightMapName(WeightMapIndex) ); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(WeightMapFuture))"
  },
  {
    "label": "NumSkinWeightAttributes()",
    "kind": "Method",
    "detail": "Function (} const int32 NumSkinWeightAttributes = MeshIn .)",
    "insertText": "NumSkinWeightAttributes()"
  },
  {
    "label": "FDynamicMeshVertexSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (UE::Geometry::FDynamicMeshVertexSkinWeightsAttribute* Attribute = new UE::)",
    "insertText": "FDynamicMeshVertexSkinWeightsAttribute(&MeshOut)"
  },
  {
    "label": "GetSkinWeightAttributeName()",
    "kind": "Method",
    "detail": "Function (const FName AttribName = MeshIn .)",
    "insertText": "GetSkinWeightAttributeName(AttributeIndex)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (Attribute ->)",
    "insertText": "SetName(AttribName)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->AttachSkinWeightsAttribute(AttribName, Attribute)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int AttributeIndex = 0; AttributeIndex < NumSkinWeightAttributes; ++AttributeIndex)"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto SkinAttributeFeature =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [this, &MeshIn, &MeshOut, AttributeIndex]() { const FName AttribName = MeshIn.GetSkinWeightAttributeName(AttributeIndex); UE::Geometry::FDynamicMeshVertexSkinWeightsAttribute* OutAttribute = MeshOut.Attributes()->GetSkinWeightsAttribute(AttribName); checkSlow(OutAttribute != nullptr); if (OutAttribute) { for (int32 VertexID : MeshOut.VertexIndicesItr()) { SrcVertIDType SrcVertID = MyBase::ToSrcVertIDMap[VertexID]; UE::AnimationCore::FBoneWeights SkinWeight = MeshIn.GetVertexSkinWeight(AttributeIndex, SrcVertID); OutAttribute->SetValue(VertexID, SkinWeight); } } })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(SkinAttributeFeature))"
  },
  {
    "label": "GetNumBones()",
    "kind": "Method",
    "detail": "Function (} const int NumBones = MeshIn .)",
    "insertText": "GetNumBones()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (MeshOut .)",
    "insertText": "Attributes()->EnableBones(NumBones)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshBoneNameAttribute* BoneNameAttrib = MeshOut .)",
    "insertText": "Attributes()->GetBoneNames()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshBoneParentIndexAttribute* BoneParentIndices = MeshOut .)",
    "insertText": "Attributes()->GetBoneParentIndices()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshBonePoseAttribute* BonePoses = MeshOut .)",
    "insertText": "Attributes()->GetBonePoses()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshBoneColorAttribute* BoneColors = MeshOut .)",
    "insertText": "Attributes()->GetBoneColors()"
  },
  {
    "label": "Async()",
    "kind": "Method",
    "detail": "Function (auto BoneAttributeFeature =)",
    "insertText": "Async(EAsyncExecution::ThreadPool, [this, &MeshIn, &MeshOut, BoneNameAttrib, BoneParentIndices, BonePoses, BoneColors, NumBones]() { for (int32 BoneIdx = 0; BoneIdx < NumBones; ++BoneIdx) { BoneNameAttrib->SetValue(BoneIdx, MeshIn.GetBoneName(BoneIdx)); BoneParentIndices->SetValue(BoneIdx, MeshIn.GetBoneParentIndex(BoneIdx)); BonePoses->SetValue(BoneIdx, MeshIn.GetBonePose(BoneIdx)); BoneColors->SetValue(BoneIdx, MeshIn.GetBoneColor(BoneIdx)); } })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Pending .)",
    "insertText": "Add(MoveTemp(BoneAttributeFeature))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TFuture<void>& Future : Pending)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (Future .)",
    "insertText": "Wait()"
  },
  {
    "label": "PopulateOverlayFromWedgeAttr()",
    "kind": "Method",
    "detail": "Function (} } template<AttrType> void)",
    "insertText": "PopulateOverlayFromWedgeAttr(typename TOverlayTraits<AttrType>::OverlayType* Overlay, TFunctionRef<AttrType(const SrcWedgeIDType& WedgeID)> WedgeAttrs, TFunctionRef<void(const SrcTriIDType& SrcTriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)> TriToWedges, bool bWeldIdenticalAttrs = true)"
  },
  {
    "label": "GetParentMesh()",
    "kind": "Method",
    "detail": "Function (FDynamicMesh3& MeshOut =* Overlay ->)",
    "insertText": "GetParentMesh()"
  },
  {
    "label": "AttrWelder()",
    "kind": "Method",
    "detail": "Function (TAttrWelder<AttrType>)",
    "insertText": "AttrWelder(Overlay)"
  },
  {
    "label": "TriToWedges()",
    "kind": "Method",
    "detail": "Function (continue ; } const SrcTriIDType& SrcTriID = MyBase::ToSrcTriIDMap [ TriangleID ] ; SrcWedgeIDType WID [ 3 ] ;)",
    "insertText": "TriToWedges(SrcTriID, WID[0], WID[1], WID[2])"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = MeshOut .)",
    "insertText": "GetTriangle(TriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FIndex3i AttrTri ;)",
    "insertText": "for(int j = 0; j < 3; ++j)"
  },
  {
    "label": "WedgeAttrs()",
    "kind": "Method",
    "detail": "Function (const AttrType& AttrValue =)",
    "insertText": "WedgeAttrs(WID[j])"
  },
  {
    "label": "FindOrAddUnique()",
    "kind": "Method",
    "detail": "Function (AttrTri [ j ] = AttrWelder .)",
    "insertText": "FindOrAddUnique(AttrValue, Tri[j])"
  },
  {
    "label": "AppendElement()",
    "kind": "Method",
    "detail": "Function (} else { AttrTri [ j ] = Overlay ->)",
    "insertText": "AppendElement(AttrValue)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (} } Overlay ->)",
    "insertText": "SetTriangle(TriangleID, AttrTri)"
  },
  {
    "label": "PopulateOverlayFromSharedAttr()",
    "kind": "Method",
    "detail": "Function (} } template<AttrType,SrcAttrIDType> void)",
    "insertText": "PopulateOverlayFromSharedAttr(typename TOverlayTraits<AttrType>::OverlayType* Overlay, const TArray<SrcAttrIDType>& SrcAttrIDs, TFunctionRef<AttrType(const SrcAttrIDType& AttrID)> SharedAttrValues, TFunctionRef<bool(const SrcTriIDType& SrcTriID, SrcAttrIDType& AttrID0, SrcAttrIDType& AttrID1, SrcAttrIDType& AttrID2)> AttrTriIndices)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxSrcAttrID =)",
    "insertText": "Max(MaxSrcAttrID, (int32)SrcAttrID)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} TArray<int32> FromSrcAttrIDMap ; FromSrcAttrIDMap .)",
    "insertText": "Init(-1, MaxSrcAttrID+1)"
  },
  {
    "label": "SharedAttrValues()",
    "kind": "Method",
    "detail": "Function (const AttrType AttrValue =)",
    "insertText": "SharedAttrValues(SrcAttrID)"
  },
  {
    "label": "SrcAttrID32()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SrcAttrID32(int32)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FromSrcAttrIDMap [ SrcAttrID32 ] = NewIndex ; })",
    "insertText": "for(int32 TriID : MeshOut.TriangleIndicesItr())"
  },
  {
    "label": "AttrTriIndices()",
    "kind": "Method",
    "detail": "Function (const SrcTriIDType SrcTriID = MyBase::ToSrcTriIDMap [ TriID ] ; SrcAttrIDType SrcAttrTri [ 3 ] ; bool bHasValidAttrTri =)",
    "insertText": "AttrTriIndices(SrcTriID, SrcAttrTri[0], SrcAttrTri[1], SrcAttrTri[2])"
  },
  {
    "label": "AttrTri()",
    "kind": "Method",
    "detail": "Function (continue ; } FIndex3i)",
    "insertText": "AttrTri(FromSrcAttrIDMap[(int32)SrcAttrTri[0]], FromSrcAttrIDMap[(int32)SrcAttrTri[1]], FromSrcAttrIDMap[(int32)SrcAttrTri[2]])"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function ({ const FIndex3i ParentTriangle = MeshOut .)",
    "insertText": "GetTriangle(TriID)"
  },
  {
    "label": "GetParentVertex()",
    "kind": "Method",
    "detail": "Function (int32 ParentVID = Overlay ->)",
    "insertText": "GetParentVertex(AttrTri[i])"
  },
  {
    "label": "SharedAttrValues()",
    "kind": "Method",
    "detail": "Function (const AttrType AttrValue =)",
    "insertText": "SharedAttrValues(SrcAttrTri[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(AttrTri[0] == AttrTri[1] && AttrTri[0] == AttrTri[2])"
  },
  {
    "label": "SharedAttrValues()",
    "kind": "Method",
    "detail": "Function (const AttrType AttrValue =)",
    "insertText": "SharedAttrValues(SrcAttrTri[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(AttrTri[0] == AttrTri[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AttrTri[0] == AttrTri[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AttrTri[1] == AttrTri[2])"
  },
  {
    "label": "SharedAttrValues()",
    "kind": "Method",
    "detail": "Function (const AttrType AttrValue =)",
    "insertText": "SharedAttrValues(SrcAttrTri[1])"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (} } } Overlay ->)",
    "insertText": "SetTriangle(TriID, AttrTri)"
  },
  {
    "label": "PopulateOverlay()",
    "kind": "Method",
    "detail": "Function (} } template<AttrType,SrcAttrIDType> void)",
    "insertText": "PopulateOverlay(typename TOverlayTraits<AttrType>::OverlayType* Overlay, const TArray<SrcAttrIDType>& SrcAttrIDs, TFunctionRef<AttrType(const SrcAttrIDType& AttrID)> SharedAttrValues, TFunctionRef<bool(const SrcTriIDType& SrcTriID, SrcAttrIDType& AttrID0, SrcAttrIDType& AttrID1, SrcAttrIDType& AttrID2)> AttrTriIndices, TFunctionRef<AttrType(const SrcWedgeIDType& WegdeID)> WedgeAttrs, TFunctionRef<void(const SrcTriIDType& SrcTriID, SrcWedgeIDType& WID0, SrcWedgeIDType& WID1, SrcWedgeIDType& WID2)> TriToWedges)"
  },
  {
    "label": "PopulateOverlayFromSharedAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateOverlayFromSharedAttr(Overlay, SrcAttrIDs, SharedAttrValues, AttrTriIndices)"
  },
  {
    "label": "PopulateOverlayFromWedgeAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateOverlayFromWedgeAttr(Overlay, WedgeAttrs, TriToWedges)"
  }
]