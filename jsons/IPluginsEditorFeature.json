[
  {
    "label": "FSlateDynamicImageBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDynamicImageBrush"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "FPluginDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginDescriptor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FPluginTemplateDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginTemplateDescription"
  },
  {
    "label": "FPluginEditingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginEditingContext"
  },
  {
    "label": "FPluginEditorExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginEditorExtension"
  },
  {
    "label": "IPluginsEditorFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPluginsEditorFeature"
  },
  {
    "label": "CustomizeDescriptorBeforeCreation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" # include \" ModuleDescriptor . h \" struct FSlateDynamicImageBrush ; class IPlugin ; class IDetailLayoutBuilder ; struct FPluginDescriptor ; class SWidget ; struct FPluginTemplateDescription { FText Name ; FText Description ; FString OnDiskPath ; TSharedPtr<FSlateDynamicImageBrush> PluginIconDynamicImageBrush ; int32 SortPriority = 0 ; bool bCanContainContent = false ; bool bCanBePlacedInEngine = true ; EHostType::Type ModuleDescriptorType ; ELoadingPhase::Type LoadingPhase ; void)",
    "insertText": "CustomizeDescriptorBeforeCreation(FPluginDescriptor& Descriptor)"
  },
  {
    "label": "OnPluginCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPluginCreated(TSharedPtr<IPlugin> NewPlugin)"
  },
  {
    "label": "ValidatePathForPlugin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidatePathForPlugin(const FString& ProposedAbsolutePluginPath, FText& OutErrorMessage)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (OutErrorMessage =)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "UpdatePathWhenTemplateUnselected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePathWhenTemplateUnselected(FString& InOutPath)"
  },
  {
    "label": "UpdatePluginNameTextWhenTemplateSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePluginNameTextWhenTemplateSelected(FText& OutPluginNameText)"
  },
  {
    "label": "UpdatePluginNameTextWhenTemplateUnselected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePluginNameTextWhenTemplateUnselected(FText& OutPluginNameText)"
  },
  {
    "label": "FPluginTemplateDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPluginTemplateDescription(FText InName, FText InDescription, FString InOnDiskPath, bool InCanContainContent, EHostType::Type InModuleDescriptorType, ELoadingPhase::Type InLoadingPhase = ELoadingPhase::Default) : Name(InName) , Description(InDescription) , OnDiskPath(InOnDiskPath) , bCanContainContent(InCanContainContent) , ModuleDescriptorType(InModuleDescriptorType) , LoadingPhase(InLoadingPhase)"
  },
  {
    "label": "FPluginTemplateDescription()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPluginTemplateDescription()"
  },
  {
    "label": "FPluginEditorExtension()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPluginEditingContext { TSharedPtr<IPlugin> PluginBeingEdited ; } ; struct FPluginEditorExtension : public TSharedFromThis<FPluginEditorExtension> { ~)",
    "insertText": "FPluginEditorExtension()"
  },
  {
    "label": "CommitEdits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CommitEdits(FPluginDescriptor& Descriptor)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedPtr<FPluginEditorExtension>, FOnPluginBeingEdited, FPluginEditingContext& , IDetailLayoutBuilder&)"
  },
  {
    "label": "RegisterPluginTemplate()",
    "kind": "Method",
    "detail": "Function (using FPluginEditorExtensionHandle = int32 ; const FPluginEditorExtensionHandle PluginEditorExtensionInvalidHandle = 0 ; class IPluginsEditorFeature : public IModularFeature { public : void)",
    "insertText": "RegisterPluginTemplate(TSharedRef<FPluginTemplateDescription> Template)"
  },
  {
    "label": "UnregisterPluginTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPluginTemplate(TSharedRef<FPluginTemplateDescription> Template)"
  },
  {
    "label": "RegisterPluginEditorExtension()",
    "kind": "Method",
    "detail": "Function (FPluginEditorExtensionHandle)",
    "insertText": "RegisterPluginEditorExtension(FOnPluginBeingEdited Extension)"
  },
  {
    "label": "UnregisterPluginEditorExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPluginEditorExtension(FPluginEditorExtensionHandle ExtensionHandle)"
  },
  {
    "label": "GetAddedPluginTemplates()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<FPluginTemplateDescription>>&)",
    "insertText": "GetAddedPluginTemplates()"
  },
  {
    "label": "OpenPluginEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenPluginEditor(TSharedRef<IPlugin> PluginToEdit, TSharedPtr<SWidget> ParentWidget, FSimpleDelegate OnEditCommitted)"
  }
]