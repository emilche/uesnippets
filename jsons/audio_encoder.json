[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "ANAStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANAStats"
  },
  {
    "label": "AudioEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EncodedInfoLeaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncodedInfoLeaf"
  },
  {
    "label": "EncodedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncodedInfo"
  },
  {
    "label": "ANAStats()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_AUDIO_ENCODER_H_ # define API_AUDIO_CODECS_AUDIO_ENCODER_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / call / bitrate_allocation . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class RtcEventLog ; struct ANAStats {)",
    "insertText": "ANAStats()"
  },
  {
    "label": "ANAStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ANAStats(const ANAStats&)"
  },
  {
    "label": "EncodedInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t> bitrate_action_counter ; absl::optional<uint32_t> channel_action_counter ; absl::optional<uint32_t> dtx_action_counter ; absl::optional<uint32_t> fec_action_counter ; absl::optional<uint32_t> frame_length_increase_counter ; absl::optional<uint32_t> frame_length_decrease_counter ; absl::optional<float> uplink_packet_loss_fraction ; } ; class AudioEncoder { public : enum class CodecType { kOther = 0,kOpus = 1,kIsac = 2,kPcmA = 3,kPcmU = 4,kG722 = 5,kIlbc = 6,kMaxLoggedAudioCodecTypes } ; struct EncodedInfoLeaf { size_t encoded_bytes = 0 ; uint32_t encoded_timestamp = 0 ; int payload_type = 0 ; bool send_even_if_empty = false ; bool speech = true ; CodecType encoder_type = CodecType::kOther ; } ; struct EncodedInfo : public EncodedInfoLeaf {)",
    "insertText": "EncodedInfo()"
  },
  {
    "label": "EncodedInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodedInfo(const EncodedInfo&)"
  },
  {
    "label": "EncodedInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodedInfo(EncodedInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EncodedInfo&)",
    "insertText": "operator(const EncodedInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EncodedInfo&)",
    "insertText": "operator(EncodedInfo&&)"
  },
  {
    "label": "AudioEncoder()",
    "kind": "Method",
    "detail": "Function (std::vector<EncodedInfoLeaf> redundant ; } ; ~)",
    "insertText": "AudioEncoder()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "RtpTimestampRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RtpTimestampRateHz()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (EncodedInfo)",
    "insertText": "Encode(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFec(bool enable)"
  },
  {
    "label": "SetDtx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtx(bool enable)"
  },
  {
    "label": "GetDtx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtx()"
  },
  {
    "label": "SetApplication()",
    "kind": "Method",
    "detail": "Function (enum class Application { kSpeech,kAudio } ; bool)",
    "insertText": "SetApplication(Application application)"
  },
  {
    "label": "SetMaxPlaybackRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxPlaybackRate(int frequency_hz)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use OnReceivedTargetAudioBitrate instead\") virtual void SetTargetBitrate(int target_bps)"
  },
  {
    "label": "ReclaimContainedEncoders()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<std::unique_ptr<AudioEncoder>>)",
    "insertText": "ReclaimContainedEncoders()"
  },
  {
    "label": "EnableAudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableAudioNetworkAdaptor(const std::string& config_string, RtcEventLog* event_log)"
  },
  {
    "label": "DisableAudioNetworkAdaptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAudioNetworkAdaptor()"
  },
  {
    "label": "OnReceivedUplinkPacketLossFraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkPacketLossFraction(float uplink_packet_loss_fraction)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"\") virtual void OnReceivedUplinkRecoverablePacketLossFraction( float uplink_recoverable_packet_loss_fraction)"
  },
  {
    "label": "OnReceivedTargetAudioBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedTargetAudioBitrate(int target_bps)"
  },
  {
    "label": "OnReceivedUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkBandwidth(int target_audio_bitrate_bps, absl::optional<int64_t> bwe_period_ms)"
  },
  {
    "label": "OnReceivedUplinkAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkAllocation(BitrateAllocationUpdate update)"
  },
  {
    "label": "OnReceivedRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtt(int rtt_ms)"
  },
  {
    "label": "OnReceivedOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedOverhead(size_t overhead_bytes_per_packet)"
  },
  {
    "label": "SetReceiverFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiverFrameLengthRange(int min_frame_length_ms, int max_frame_length_ms)"
  },
  {
    "label": "GetANAStats()",
    "kind": "Method",
    "detail": "Function (ANAStats)",
    "insertText": "GetANAStats()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (int kMaxNumberOfChannels = 2 4 ; protected : EncodedInfo)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  }
]