[
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FLevelEditorToolBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorToolBar"
  },
  {
    "label": "RegisterLevelEditorToolBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLevelEditorToolBar( const TSharedRef<FUICommandList>& InCommandList, const TSharedRef<SLevelEditor> InLevelEditor )"
  },
  {
    "label": "RegisterLevelEditorSecondaryModeToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLevelEditorSecondaryModeToolbar()"
  },
  {
    "label": "GetSecondaryModeToolbarName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSecondaryModeToolbarName()"
  },
  {
    "label": "OnCinematicsActorPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCinematicsActorPicked( AActor* Actor )"
  },
  {
    "label": "OnOpenSubLevelBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenSubLevelBlueprint( ULevel* InLevel )"
  },
  {
    "label": "RegisterSourceControlMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSourceControlMenu()"
  },
  {
    "label": "RegisterCinematicsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCinematicsMenu()"
  },
  {
    "label": "RegisterQuickSettingsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterQuickSettingsMenu()"
  },
  {
    "label": "RegisterOpenBlueprintMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOpenBlueprintMenu()"
  },
  {
    "label": "RegisterAddMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAddMenu()"
  },
  {
    "label": "GetActiveModeName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActiveModeName(TWeakPtr<SLevelEditor> LevelEditorPtr)"
  }
]