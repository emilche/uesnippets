[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIsoInnerNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoInnerNode"
  },
  {
    "label": "FLoopNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopNode"
  },
  {
    "label": "FIsoNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoNode"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / SlopeUtils . h \" # include \" Mesh / MeshEnum . h \" # include \" Mesh / Structure / Grid . h \" namespace UE::CADKernel { class FGrid ; class FIsoSegment ; class FPoint ; class FPoint2D ; enum class EIsoLink : uint8 { IsoUNext = 0,IsoVNext = 1,IsoUPrevious = 2,IsoVPrevious = 3,} ; enum class EIsoNodeStates : uint16 { None = 0 x0000u,LinkedToPreviousU = 0 x0001u,LinkedToNextU = 0 x0002u,LinkedToPreviousV = 0 x0004u,LinkedToNextV = 0 x0008u,NodeComplete = 0 x000Fu,LinkedToLoop = 0 x0010u,InnerMeshLoop = 0 x0020u,ThinZoneNode = 0 x0040u,Delete = 0 x0080u,FirstQuarter = 0 x0100u,SecondQuarter = 0 x0200u,ThirdQuarter = 0 x0400u,FourthQuarter = 0 x0800u,NearlyIsoU = 0 x1000u,NearlyIsoV = 0 x2000u,HasMarker1 = 0 x4000u,HasMarker2 = 0 x8000u,All = 0 xFFFFu } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EIsoNodeStates)"
  },
  {
    "label": "FIsoNode()",
    "kind": "Method",
    "detail": "Function (class FIsoInnerNode ; class FLoopNode ; class FIsoNode { protected : TArray<FIsoSegment*> ConnectedSegments ; EIsoNodeStates States ; int32 LocalIndex ; int32 GlobalIndex ; int32 NodeId ; public :)",
    "insertText": "FIsoNode(int32 InNodeIndex, int32 InFaceIndex, int32 InNodeId) : ConnectedSegments() , States(EIsoNodeStates::None) , LocalIndex(InNodeIndex) , GlobalIndex(InFaceIndex) , NodeId(InNodeId)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ConnectedSegments .)",
    "insertText": "Reserve(5)"
  },
  {
    "label": "FIsoNode()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FIsoNode()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ConnectedSegments .)",
    "insertText": "Empty()"
  },
  {
    "label": "IsDelete()",
    "kind": "Method",
    "detail": "Function (GlobalIndex = - 1 ; States = EIsoNodeStates::Delete ; } bool)",
    "insertText": "IsDelete()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "ConnectSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectSegment(FIsoSegment& Segment)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConnectedSegments .)",
    "insertText": "Add(&Segment)"
  },
  {
    "label": "DisconnectSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisconnectSegment(FIsoSegment& Segment)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (ConnectedSegments .)",
    "insertText": "RemoveSingle(&Segment)"
  },
  {
    "label": "IsALoopNode()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsALoopNode()"
  },
  {
    "label": "SetThinZoneNodeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThinZoneNodeMarker()"
  },
  {
    "label": "IsThinZoneNode()",
    "kind": "Method",
    "detail": "Function (States | = EIsoNodeStates::ThinZoneNode ; } bool)",
    "insertText": "IsThinZoneNode()"
  },
  {
    "label": "IsDeleteOrThinNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDeleteOrThinNode()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EIsoNodeStates DeleteOrThinNode = EIsoNodeStates::ThinZoneNode | EIsoNodeStates::Delete ;)",
    "insertText": "return(States & DeleteOrThinNode)"
  },
  {
    "label": "SetLinkedToLoopMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinkedToLoopMarker()"
  },
  {
    "label": "SetLinkedToLoopInQuarter()",
    "kind": "Method",
    "detail": "Function (States | = EIsoNodeStates::LinkedToLoop ; } void)",
    "insertText": "SetLinkedToLoopInQuarter(int32 Quarter)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (Iso - = 4 ; })",
    "insertText": "switch((EIsoLink)Iso)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "return(States & EIsoNodeStates::LinkedToPreviousV)"
  },
  {
    "label": "SetLinkedToIso()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetLinkedToIso(EIsoLink Iso)"
  },
  {
    "label": "HasMarker2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMarker2()"
  },
  {
    "label": "IsDeleteOrHasMarker2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDeleteOrHasMarker2()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EIsoNodeStates HasMarkerDeleteOrMarker2 = EIsoNodeStates::Delete | EIsoNodeStates::HasMarker2 ;)",
    "insertText": "return((States & HasMarkerDeleteOrMarker2) != EIsoNodeStates::None)"
  },
  {
    "label": "HasMarker1NotMarker2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMarker1NotMarker2()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EIsoNodeStates HasMarker12 = EIsoNodeStates::HasMarker1 | EIsoNodeStates::HasMarker2 ;)",
    "insertText": "return((States & HasMarker12) == EIsoNodeStates::HasMarker1)"
  },
  {
    "label": "SetMarker1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMarker1()"
  },
  {
    "label": "SetMarker2()",
    "kind": "Method",
    "detail": "Function (States | = EIsoNodeStates::HasMarker1 ; } void)",
    "insertText": "SetMarker2()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (States | = EIsoNodeStates::HasMarker2 ; } void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetAllMarkers()",
    "kind": "Method",
    "detail": "Function (EIsoNodeStates)",
    "insertText": "ResetAllMarkers(EIsoNodeStates::HasMarker1 | EIsoNodeStates::HasMarker2)"
  },
  {
    "label": "Get2DPoint()",
    "kind": "Method",
    "detail": "Function (States& = ResetAllMarkers ; } const FPoint2D&)",
    "insertText": "Get2DPoint(EGridSpace Space, const FGrid& Grid)"
  },
  {
    "label": "Set2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set2DPoint(EGridSpace Space, FGrid& Grid, const FPoint2D& NewCoordinate)"
  },
  {
    "label": "Get3DPoint()",
    "kind": "Method",
    "detail": "Function (const FPoint&)",
    "insertText": "Get3DPoint(const FGrid& Grid)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (const FVector3f&)",
    "insertText": "GetNormal(const FGrid& Grid)"
  },
  {
    "label": "GetPoint()",
    "kind": "Method",
    "detail": "Function (const FPoint)",
    "insertText": "GetPoint(EGridSpace Space, const FGrid& Grid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FIsoNode& OtherNode)"
  },
  {
    "label": "IsEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqualTo(const FLoopNode& OtherNode)"
  },
  {
    "label": "IsEqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqualTo(const FIsoInnerNode& OtherNode)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FLoopNode()",
    "kind": "Method",
    "detail": "Function (} ; class FLoopNode : public FIsoNode { protected : int32 LoopIndex ; FLoopNode* ConnectedLoopNodes [ 2 ] ; public :)",
    "insertText": "FLoopNode(int32 InLoopIndex, int32 InNodeLoopIndex, int32 InNodeFaceIndex, int32 NodeId) : FIsoNode(InNodeLoopIndex, InNodeFaceIndex, NodeId) , LoopIndex(InLoopIndex)"
  },
  {
    "label": "SetPreviousConnectedNode()",
    "kind": "Method",
    "detail": "Function (ConnectedLoopNodes [ 1 ] = NextNode ; } void)",
    "insertText": "SetPreviousConnectedNode(FLoopNode* PreviousNode)"
  },
  {
    "label": "GetPreviousNode()",
    "kind": "Method",
    "detail": "Function (ConnectedLoopNodes [ 0 ] = PreviousNode ; } FLoopNode&)",
    "insertText": "GetPreviousNode()"
  },
  {
    "label": "GetNextSegment()",
    "kind": "Method",
    "detail": "Function (} FIsoSegment&)",
    "insertText": "GetNextSegment()"
  },
  {
    "label": "SetLoop2DPoint()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "SetLoop2DPoint(Space, LoopIndex, LocalIndex, NewCoordinate)"
  },
  {
    "label": "IsSegmentBeInsideFace()",
    "kind": "Method",
    "detail": "Function (} return FPoint::ZeroPoint ; } bool)",
    "insertText": "IsSegmentBeInsideFace(const FPoint2D& EndSegmentCoordinate, const FGrid& Grid, const double FlatAngle)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32)",
    "insertText": "GetTypeHash(const FIsoNode& Node)"
  },
  {
    "label": "FIsoInnerNode()",
    "kind": "Method",
    "detail": "Function (} class FIsoInnerNode : public FIsoNode { public :)",
    "insertText": "FIsoInnerNode(int32 NodeIndex, int32 FaceIndex, int32 NodeId) : FIsoNode(NodeIndex, FaceIndex, NodeId)"
  },
  {
    "label": "IsIsolated()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsIsolated()"
  },
  {
    "label": "IsLinkedToNextU()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedToNextU()"
  },
  {
    "label": "IsLinkedToPreviousV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedToPreviousV()"
  },
  {
    "label": "IsLinkedToNextV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedToNextV()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (; } bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "IsLinkedToBoundary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedToBoundary()"
  },
  {
    "label": "OffsetId()",
    "kind": "Method",
    "detail": "Function (} return FPoint::ZeroPoint ; } void)",
    "insertText": "OffsetId(int32 StartId)"
  }
]