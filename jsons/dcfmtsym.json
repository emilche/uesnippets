[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "ENumberFormatSymbol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENumberFormatSymbol"
  },
  {
    "label": "DecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (# ifndef DCFMTSYM_H # define DCFMTSYM_H # include \" unicode / utypes . h \" # include \" unicode / uchar . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / uobject . h \" # include \" unicode / locid . h \" # include \" unicode / numsys . h \" # include \" unicode / unum . h \" # include \" unicode / unistr . h \" U_NAMESPACE_BEGIN class U_I18N_API DecimalFormatSymbols : public UObject { public : enum ENumberFormatSymbol { kDecimalSeparatorSymbol,kGroupingSeparatorSymbol,kPatternSeparatorSymbol,kPercentSymbol,kZeroDigitSymbol,kDigitSymbol,kMinusSignSymbol,kPlusSignSymbol,kCurrencySymbol,kIntlCurrencySymbol,kMonetarySeparatorSymbol,kExponentialSymbol,kPerMillSymbol,kPadEscapeSymbol,kInfinitySymbol,kNaNSymbol,kSignificantDigitSymbol,kMonetaryGroupingSeparatorSymbol,kOneDigitSymbol,kTwoDigitSymbol,kThreeDigitSymbol,kFourDigitSymbol,kFiveDigitSymbol,kSixDigitSymbol,kSevenDigitSymbol,kEightDigitSymbol,kNineDigitSymbol,kExponentMultiplicationSymbol,kFormatSymbolCount = kNineDigitSymbol + 2 } ;)",
    "insertText": "DecimalFormatSymbols(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "DecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormatSymbols(const Locale& locale, const NumberingSystem& ns, UErrorCode& status)"
  },
  {
    "label": "DecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormatSymbols(UErrorCode& status)"
  },
  {
    "label": "createWithLastResortData()",
    "kind": "Method",
    "detail": "Function (DecimalFormatSymbols*)",
    "insertText": "createWithLastResortData(UErrorCode& status)"
  },
  {
    "label": "DecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormatSymbols(const DecimalFormatSymbols&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DecimalFormatSymbols&)",
    "insertText": "operator(const DecimalFormatSymbols&)"
  },
  {
    "label": "DecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DecimalFormatSymbols()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const DecimalFormatSymbols& other)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (} UnicodeString)",
    "insertText": "getSymbol(ENumberFormatSymbol symbol)"
  },
  {
    "label": "setSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSymbol(ENumberFormatSymbol symbol, const UnicodeString &value, const UBool propogateDigits)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale()"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale(ULocDataLocaleType type, UErrorCode& status)"
  },
  {
    "label": "getPatternForCurrencySpacing()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getPatternForCurrencySpacing(UCurrencySpacing type, UBool beforeCurrency, UErrorCode& status)"
  },
  {
    "label": "setPatternForCurrencySpacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPatternForCurrencySpacing(UCurrencySpacing type, UBool beforeCurrency, const UnicodeString& pattern)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Locale& locale, UErrorCode& success, UBool useLastResortData = FALSE, const NumberingSystem* ns = nullptr)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize()"
  },
  {
    "label": "setCurrencyForSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyForSymbols()"
  },
  {
    "label": "isCustomCurrencySymbol()",
    "kind": "Method",
    "detail": "Function (public : # ifndef UBool)",
    "insertText": "isCustomCurrencySymbol()"
  },
  {
    "label": "getConstDigitSymbol()",
    "kind": "Method",
    "detail": "Function (# ifndef const UnicodeString&)",
    "insertText": "getConstDigitSymbol(int32_t digit)"
  },
  {
    "label": "getCurrencyPattern()",
    "kind": "Method",
    "detail": "Function (const char16_t*)",
    "insertText": "getCurrencyPattern(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const UnicodeString* strPtr ;)",
    "insertText": "if(symbol < kFormatSymbolCount)"
  },
  {
    "label": "getConstSymbol()",
    "kind": "Method",
    "detail": "Function (strPtr =& fSymbols [ symbol ] ; } else { strPtr =& fNoSymbol ; } return* strPtr ; } const UnicodeString&)",
    "insertText": "getConstSymbol(ENumberFormatSymbol symbol)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (digit = 0 ; })",
    "insertText": "if(digit == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fIsCustomCurrencySymbol = TRUE ; } else)",
    "insertText": "if(symbol == kIntlCurrencySymbol)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fIsCustomIntlCurrencySymbol = TRUE ; })",
    "insertText": "if(symbol<kFormatSymbolCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fSymbols [ symbol ] = value ; })",
    "insertText": "if(symbol == kZeroDigitSymbol)"
  },
  {
    "label": "char32At()",
    "kind": "Method",
    "detail": "Function (UChar32 sym = value .)",
    "insertText": "char32At(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (fCodePointZero = sym ;)",
    "insertText": "for(int8_t i = 1 ; i<= 9 ; i++)"
  },
  {
    "label": "fSymbols()",
    "kind": "Method",
    "detail": "Function (sym + + ;)",
    "insertText": "fSymbols(int)kOneDigitSymbol+i-1] = UnicodeString(sym)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { fCodePointZero = - 1 ; } } else)",
    "insertText": "if(symbol >= kOneDigitSymbol && symbol <= kNineDigitSymbol)"
  }
]