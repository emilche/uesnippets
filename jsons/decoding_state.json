[
  {
    "label": "NaluInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NaluInfo"
  },
  {
    "label": "VCMFrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMFrameBuffer"
  },
  {
    "label": "VCMPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMPacket"
  },
  {
    "label": "VCMDecodingState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMDecodingState"
  },
  {
    "label": "VCMDecodingState()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_DECODING_STATE_H_ # define MODULES_VIDEO_CODING_DECODING_STATE_H_ # include<cstdint> # include<map> # include<set> # include<vector> namespace webrtc { struct NaluInfo ; class VCMFrameBuffer ; class VCMPacket ; class VCMDecodingState { public : const uint16_t kNumRefBits = 7 ; const uint16_t kFrameDecodedLength = 1<<kNumRefBits ;)",
    "insertText": "VCMDecodingState()"
  },
  {
    "label": "IsOldFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOldFrame(const VCMFrameBuffer* frame)"
  },
  {
    "label": "IsOldPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOldPacket(const VCMPacket* packet)"
  },
  {
    "label": "ContinuousFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinuousFrame(const VCMFrameBuffer* frame)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(const VCMFrameBuffer* frame)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const VCMDecodingState& state)"
  },
  {
    "label": "UpdateEmptyFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateEmptyFrame(const VCMFrameBuffer* frame)"
  },
  {
    "label": "UpdateOldPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOldPacket(const VCMPacket* packet)"
  },
  {
    "label": "SetSeqNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSeqNum(uint16_t new_seq_num)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "time_stamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "time_stamp()"
  },
  {
    "label": "sequence_num()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "sequence_num()"
  },
  {
    "label": "in_initial_state()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "in_initial_state()"
  },
  {
    "label": "full_sync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "full_sync()"
  },
  {
    "label": "UpdateSyncState()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSyncState(const VCMFrameBuffer* frame)"
  },
  {
    "label": "ContinuousPictureId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinuousPictureId(int picture_id)"
  },
  {
    "label": "ContinuousSeqNum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinuousSeqNum(uint16_t seq_num)"
  },
  {
    "label": "ContinuousLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinuousLayer(int temporal_id, int tl0_pic_id)"
  },
  {
    "label": "ContinuousFrameRefs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinuousFrameRefs(const VCMFrameBuffer* frame)"
  },
  {
    "label": "UsingPictureId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingPictureId(const VCMFrameBuffer* frame)"
  },
  {
    "label": "UsingFlexibleMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingFlexibleMode(const VCMFrameBuffer* frame)"
  },
  {
    "label": "AheadOfFramesDecodedClearedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AheadOfFramesDecodedClearedTo(uint16_t index)"
  },
  {
    "label": "HaveSpsAndPps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveSpsAndPps(const std::vector<NaluInfo>& nalus)"
  }
]