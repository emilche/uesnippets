[
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FRHIRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRenderQuery"
  },
  {
    "label": "FViewOcclusionQueries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewOcclusionQueries"
  },
  {
    "label": "FOcclusionQueryVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionQueryVS"
  },
  {
    "label": "FOcclusionQueryPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionQueryPS"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" ShadowRendering . h \" # include \" Engine / Engine . h \" class FProjectedShadowInfo ; class FPlanarReflectionSceneProxy ; class FRHIRenderQuery ;)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(HZB, TEXT(\"HZB\"))"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (struct FViewOcclusionQueries { using FProjectedShadowArray = TArray<FProjectedShadowInfo const*,SceneRenderingAllocator> ; using FPlanarReflectionArray = TArray<FPlanarReflectionSceneProxy const*,SceneRenderingAllocator> ; using FRenderQueryArray = TArray<FRHIRenderQuery*,SceneRenderingAllocator> ; FProjectedShadowArray LocalLightQueryInfos ; FProjectedShadowArray CSMQueryInfos ; FProjectedShadowArray ShadowQueryInfos ; FPlanarReflectionArray ReflectionQueryInfos ; FRenderQueryArray LocalLightQueries ; FRenderQueryArray CSMQueries ; FRenderQueryArray ShadowQueries ; FRenderQueryArray ReflectionQueries ; bool bFlushQueries = true ; } ; using FViewOcclusionQueriesPerView = TArray<FViewOcclusionQueries,TInlineAllocator<1,SceneRenderingAllocator>> ; class FOcclusionQueryVS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FOcclusionQueryVS,Global)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (auto* MobileUseHWsRGBEncodingCVAR =)",
    "insertText": "Get().FindTConsoleVariableDataInt(TEXT(\"r.Mobile.UseHWsRGBEncoding\"))"
  },
  {
    "label": "bMobileUseHWsRGBEncoding()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMobileUseHWsRGBEncoding(MobileUseHWsRGBEncodingCVAR && MobileUseHWsRGBEncodingCVAR->GetValueOnAnyThread() == 1)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"OUTPUT_GAMMA_SPACE\"), IsMobileHDR() == false && !bMobileUseHWsRGBEncoding)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"OUTPUT_MOBILE_HDR\"), IsMobileHDR() == true)"
  },
  {
    "label": "FOcclusionQueryVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOcclusionQueryVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (StencilingGeometryParameters .)",
    "insertText": "Bind(Initializer.ParameterMap)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ViewId .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ViewId\"))"
  },
  {
    "label": "FOcclusionQueryVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOcclusionQueryVS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FViewInfo& View, const FSphere& BoundingSphere)"
  },
  {
    "label": "CalcTransform()",
    "kind": "Method",
    "detail": "Function (FVector4f StencilingSpherePosAndScale ; StencilingGeometry::GStencilSphereVertexBuffer .)",
    "insertText": "CalcTransform(StencilingSpherePosAndScale, BoundingSphere, View.ViewMatrices.GetPreViewTranslation())"
  },
  {
    "label": "SetParametersInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParametersInternal(BatchedParameters, View, StencilingSpherePosAndScale)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FViewInfo& View)"
  },
  {
    "label": "SetParametersInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParametersInternal(BatchedParameters, View, FVector4f(0, 0, 0, 1))"
  },
  {
    "label": "SetParametersInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetParametersInternal(FRHIBatchedShaderParameters& BatchedParameters, const FViewInfo& View, const FVector4f& StencilingSpherePosAndScale)"
  },
  {
    "label": "FViewUniformShaderParameters()",
    "kind": "Method",
    "detail": "Function (FGlobalShader::SetParameters<)",
    "insertText": "FViewUniformShaderParameters(BatchedParameters, View.ViewUniformBuffer)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (StencilingGeometryParameters .)",
    "insertText": "Set(BatchedParameters, StencilingSpherePosAndScale)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ViewId, (View.StereoPass == EStereoscopicPass::eSSP_FULL) ? 0 : View.StereoViewIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "LAYOUT_FIELD(FStencilingGeometryShaderParameters, StencilingGeometryParameters) LAYOUT_FIELD(FShaderParameter, ViewId)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (class FOcclusionQueryPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FOcclusionQueryPS, Global)"
  },
  {
    "label": "FOcclusionQueryPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FOcclusionQueryPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "FOcclusionQueryPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOcclusionQueryPS()"
  },
  {
    "label": "UseDownsampledOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "UseDownsampledOcclusionQueries()"
  }
]