[
  {
    "label": "FFieldContextIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldContextIndex"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFieldExecutionDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldExecutionDatas"
  },
  {
    "label": "FFieldSystemMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaData"
  },
  {
    "label": "EMetaType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetaType"
  },
  {
    "label": "FFieldSystemMetaDataProcessingResolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaDataProcessingResolution"
  },
  {
    "label": "FFieldSystemMetaDataFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaDataFilter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FFieldSystemMetaDataResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaDataResults"
  },
  {
    "label": "FFieldSystemMetaDataIteration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaDataIteration"
  },
  {
    "label": "FFieldSystemMetaDataCulling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemMetaDataCulling"
  },
  {
    "label": "FFieldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldContext"
  },
  {
    "label": "FScopedFieldContextMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedFieldContextMetaData"
  },
  {
    "label": "FFieldNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldNodeBase"
  },
  {
    "label": "EFieldType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFieldType"
  },
  {
    "label": "ESerializationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESerializationType"
  },
  {
    "label": "FFieldNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldNode"
  },
  {
    "label": "FFieldSystemCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldSystemCommand"
  },
  {
    "label": "TMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMetaData"
  },
  {
    "label": "FFieldContextIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandleFwd . h \" # include \" CoreMinimal . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Queue . h \" # include \" Field / FieldSystemTypes . h \" # include \" Field / FieldArrayView . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Chaos / ParticleHandle . h \" # endif # include \" Math / Vector . h \" struct FFieldContextIndex {)",
    "insertText": "FFieldContextIndex(int32 InSample = INDEX_NONE, int32 InResult = INDEX_NONE) : Sample(InSample) , Result(InResult)"
  },
  {
    "label": "ContiguousIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ContiguousIndices(TArray<FFieldContextIndex>& Array, const int NumParticles, const bool bForce = true)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "SetNum(NumParticles)"
  },
  {
    "label": "ParticleHandles()",
    "kind": "Method",
    "detail": "Function (Array [ i ] . Result = i ; Array [ i ] . Sample = i ; } } } int32 Sample ; int32 Result ; } ; enum class EFieldCommandOutputType : uint8 { LinearForce = 0,LinearVelocity = 1,AngularTorque = 2,AngularVelocity = 3,NumOutputs = 4 } ; enum class EFieldCommandResultType : uint8 { FinalResult = 0,TransientResult = 1,NumResults = 2 } ; enum class EFieldCommandHandlesType : uint8 { FilteredHandles = 0,InsideHandles = 1,NumHandles = 2 } ; struct FFieldExecutionDatas { TArray<FVector> SamplePositions ; TArray<FFieldContextIndex> SampleIndices ; TArray<Chaos::FGeometryParticleHandle*>)",
    "insertText": "ParticleHandles(uint8)"
  },
  {
    "label": "FieldOutputs()",
    "kind": "Method",
    "detail": "Function (TArray<FVector>)",
    "insertText": "FieldOutputs(uint8)"
  },
  {
    "label": "VectorResults()",
    "kind": "Method",
    "detail": "Function (TArray<FVector>)",
    "insertText": "VectorResults(uint8)"
  },
  {
    "label": "ScalarResults()",
    "kind": "Method",
    "detail": "Function (TArray<float>)",
    "insertText": "ScalarResults(uint8)"
  },
  {
    "label": "IntegerResults()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "IntegerResults(uint8)"
  },
  {
    "label": "IndexResults()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldContextIndex>)",
    "insertText": "IndexResults(uint8)"
  },
  {
    "label": "ResetResultsArray()",
    "kind": "Method",
    "detail": "Function (} ; template<FieldType> void)",
    "insertText": "ResetResultsArray(const int32 FieldSize, TArray<FieldType>& FieldArray, const FieldType DefaultValue)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FieldArray .)",
    "insertText": "SetNum(FieldSize, EAllowShrinking::No)"
  },
  {
    "label": "ResetResultsArrays()",
    "kind": "Method",
    "detail": "Function (FieldArray [ i ] = DefaultValue ; } } template<FieldType> void)",
    "insertText": "ResetResultsArrays(const int32 FieldSize, const TArray<EFieldCommandOutputType>& FieldTargets, TArray<FieldType> FieldArray[(uint8)EFieldCommandOutputType::NumOutputs], const FieldType DefaultValue)"
  },
  {
    "label": "ResetResultsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetResultsArray(FieldSize, FieldArray[FieldTarget], DefaultValue)"
  },
  {
    "label": "EmptyResultsArray()",
    "kind": "Method",
    "detail": "Function (} } } template<FieldType> void)",
    "insertText": "EmptyResultsArray(TArray<FieldType>& FieldArray)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FieldArray .)",
    "insertText": "SetNum(0, EAllowShrinking::No)"
  },
  {
    "label": "EmptyResultsArrays()",
    "kind": "Method",
    "detail": "Function (} template<FieldType> void)",
    "insertText": "EmptyResultsArrays(const TArray<EFieldCommandOutputType>& FieldTargets, TArray<FieldType> FieldArray[(uint8)EFieldCommandOutputType::NumOutputs])"
  },
  {
    "label": "EmptyResultsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyResultsArray(FieldArray[(uint8)FieldTarget])"
  },
  {
    "label": "FFieldSystemMetaData()",
    "kind": "Method",
    "detail": "Function (} } } class FFieldSystemMetaData { public : enum EMetaType { ECommandData_None = 0,ECommandData_ProcessingResolution,ECommandData_Results,ECommandData_Iteration,ECommandData_Culling,ECommandData_Filter } ; ~)",
    "insertText": "FFieldSystemMetaData()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} ; EMetaType)",
    "insertText": "Type()"
  },
  {
    "label": "NewCopy()",
    "kind": "Method",
    "detail": "Function (FFieldSystemMetaData*)",
    "insertText": "NewCopy()"
  },
  {
    "label": "FFieldSystemMetaDataProcessingResolution()",
    "kind": "Method",
    "detail": "Function (} ; class FFieldSystemMetaDataProcessingResolution : public FFieldSystemMetaData { public :)",
    "insertText": "FFieldSystemMetaDataProcessingResolution(EFieldResolutionType ProcessingResolutionIn) : ProcessingResolution(ProcessingResolutionIn)"
  },
  {
    "label": "FFieldSystemMetaDataProcessingResolution()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FFieldSystemMetaDataProcessingResolution()"
  },
  {
    "label": "FFieldSystemMetaDataFilter()",
    "kind": "Method",
    "detail": "Function (} EFieldResolutionType ProcessingResolution ; } ; class FFieldSystemMetaDataFilter : public FFieldSystemMetaData { public :)",
    "insertText": "FFieldSystemMetaDataFilter(EFieldFilterType FilterTypeIn, EFieldObjectType ObjectTypeIn, EFieldPositionType PositionTypeIn) : FilterType(FilterTypeIn), ObjectType(ObjectTypeIn), PositionType(PositionTypeIn)"
  },
  {
    "label": "FFieldSystemMetaDataFilter()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FFieldSystemMetaDataFilter()"
  },
  {
    "label": "FFieldSystemMetaDataResults()",
    "kind": "Method",
    "detail": "Function (} EFieldFilterType FilterType ; EFieldObjectType ObjectType ; EFieldPositionType PositionType ; } ; template<class T> class FFieldSystemMetaDataResults : public FFieldSystemMetaData { public :)",
    "insertText": "FFieldSystemMetaDataResults(const TFieldArrayView<T>& ResultsIn) : Results(ResultsIn)"
  },
  {
    "label": "FFieldSystemMetaDataResults()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FFieldSystemMetaDataResults()"
  },
  {
    "label": "FFieldSystemMetaDataIteration()",
    "kind": "Method",
    "detail": "Function (} const TFieldArrayView<T>& Results ; } ; class FFieldSystemMetaDataIteration : public FFieldSystemMetaData { public :)",
    "insertText": "FFieldSystemMetaDataIteration(int32 IterationsIn) : Iterations(IterationsIn)"
  },
  {
    "label": "FFieldSystemMetaDataIteration()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FFieldSystemMetaDataIteration()"
  },
  {
    "label": "FFieldSystemMetaDataCulling()",
    "kind": "Method",
    "detail": "Function (} int32 Iterations ; } ; class FFieldSystemMetaDataCulling : public FFieldSystemMetaData { public :)",
    "insertText": "FFieldSystemMetaDataCulling(TArray<FFieldContextIndex>& CullingIndicesIn) : bCullingActive(false) , CullingIndices(CullingIndicesIn)"
  },
  {
    "label": "FFieldSystemMetaDataCulling()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FFieldSystemMetaDataCulling()"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (} bool bCullingActive ; TArray<FFieldContextIndex>& CullingIndices ; } ; struct FFieldContext { typedef TMap<FFieldSystemMetaData::EMetaType,TUniquePtr<FFieldSystemMetaData>> UniquePointerMap ; typedef TMap<FFieldSystemMetaData::EMetaType,FFieldSystemMetaData*> PointerMap ;)",
    "insertText": "FFieldContext()"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldContext(const FFieldContext&)"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldContext(FFieldContext&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFieldContext&)",
    "insertText": "operator(const FFieldContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFieldContext&)",
    "insertText": "operator(FFieldContext&&)"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldContext(const TFieldArrayView< FFieldContextIndex >& SampleIndicesIn, const TFieldArrayView<FVector>& SamplePositionsIn, const UniquePointerMap & MetaDataIn, const Chaos::FReal TimeSecondsIn, TArray<FVector>& VectorResultsIn, TArray<float>& ScalarResultsIn, TArray<int32>& IntegerResultsIn, TArray<FFieldContextIndex>& IndexResultsIn, TArray<FFieldContextIndex>& CullingResultsIn) : SampleIndices(SampleIndicesIn) , SamplePositions(SamplePositionsIn) , TimeSeconds(TimeSecondsIn) , VectorResults(VectorResultsIn) , ScalarResults(ScalarResultsIn) , IntegerResults(IntegerResultsIn) , IndexResults(IndexResultsIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(Meta.Key) = Meta.Value.Get()"
  },
  {
    "label": "FFieldSystemMetaDataCulling()",
    "kind": "Method",
    "detail": "Function (} CullingData = MakeUnique<)",
    "insertText": "FFieldSystemMetaDataCulling(CullingResultsIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(FFieldSystemMetaData::EMetaType::ECommandData_Culling, CullingData.Get())"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldContext(const TFieldArrayView< FFieldContextIndex >& SampleIndicesIn, const TFieldArrayView<FVector>& SamplePositionsIn, const PointerMap & MetaDataIn, const Chaos::FReal TimeSecondsIn, TArray<FVector>& VectorResultsIn, TArray<float>& ScalarResultsIn, TArray<int32>& IntegerResultsIn, TArray<FFieldContextIndex>& IndexResultsIn, TArray<FFieldContextIndex>& CullingResultsIn) : SampleIndices(SampleIndicesIn) , SamplePositions(SamplePositionsIn) , MetaData(MetaDataIn) , TimeSeconds(TimeSecondsIn) , VectorResults(VectorResultsIn) , ScalarResults(ScalarResultsIn) , IntegerResults(IntegerResultsIn) , IndexResults(IndexResultsIn)"
  },
  {
    "label": "FFieldContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldContext(FFieldExecutionDatas& ExecutionDatas, const UniquePointerMap& MetaDataIn, const Chaos::FReal TimeSecondsIn) : SampleIndices(ExecutionDatas.SampleIndices, 0, ExecutionDatas.SampleIndices.Num()) , SamplePositions(ExecutionDatas.SamplePositions, 0, ExecutionDatas.SamplePositions.Num()) , TimeSeconds(TimeSecondsIn) , VectorResults(ExecutionDatas.VectorResults[(uint8)EFieldCommandResultType::TransientResult]) , ScalarResults(ExecutionDatas.ScalarResults[(uint8)EFieldCommandResultType::TransientResult]) , IntegerResults(ExecutionDatas.IntegerResults[(uint8)EFieldCommandResultType::TransientResult]) , IndexResults(ExecutionDatas.IndexResults[(uint8)EFieldCommandResultType::TransientResult])"
  },
  {
    "label": "FFieldSystemMetaDataCulling()",
    "kind": "Method",
    "detail": "Function (} CullingData = MakeUnique<)",
    "insertText": "FFieldSystemMetaDataCulling(ExecutionDatas.IndexResults[(uint8)EFieldCommandResultType::FinalResult])"
  },
  {
    "label": "GetEvaluatedSamples()",
    "kind": "Method",
    "detail": "Function (} TFieldArrayView<FFieldContextIndex>)",
    "insertText": "GetEvaluatedSamples()"
  },
  {
    "label": "GetResultArray()",
    "kind": "Method",
    "detail": "Function (} TFieldArrayView<FFieldContextIndex> SampleIndices ; TFieldArrayView<FVector> SamplePositions ; PointerMap MetaData ; TUniquePtr<FFieldSystemMetaDataCulling> CullingData ; Chaos::FReal TimeSeconds ; TArray<FVector>& VectorResults ; TArray<float>& ScalarResults ; TArray<int32>& IntegerResults ; TArray<FFieldContextIndex>& IndexResults ; } ; template<ResultType> TArray<ResultType>&)",
    "insertText": "GetResultArray(FFieldContext& FieldContext)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (template<> TArray<FVector>& GetResultArray<)",
    "insertText": "FVector(FFieldContext& FieldContext)"
  },
  {
    "label": "FScopedFieldContextMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedFieldContextMetaData(const FScopedFieldContextMetaData&)"
  },
  {
    "label": "FScopedFieldContextMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedFieldContextMetaData(FScopedFieldContextMetaData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedFieldContextMetaData&)",
    "insertText": "operator(const FScopedFieldContextMetaData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedFieldContextMetaData&)",
    "insertText": "operator(FScopedFieldContextMetaData&&)"
  },
  {
    "label": "FScopedFieldContextMetaData()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FScopedFieldContextMetaData(FFieldContext& InContext, FFieldSystemMetaData* InMetaData) : TargetContext(InContext)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TargetContext . MetaData .)",
    "insertText": "Add(MetaType, InMetaData)"
  },
  {
    "label": "FScopedFieldContextMetaData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedFieldContextMetaData()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (TargetContext . MetaData .)",
    "insertText": "Remove(MetaType)"
  },
  {
    "label": "FFieldNodeBase()",
    "kind": "Method",
    "detail": "Function (} private : FFieldSystemMetaData::EMetaType MetaType ; FFieldContext& TargetContext ; } ; class FFieldNodeBase { public : enum EFieldType { EField_None = 0,EField_Results,EField_Int32,EField_Float,EField_FVector,} ; enum ESerializationType { FieldNode_Null = 0,FieldNode_FUniformInteger,FieldNode_FRadialIntMask,FieldNode_FUniformScalar,FieldNode_FRadialFalloff,FieldNode_FPlaneFalloff,FieldNode_FBoxFalloff,FieldNode_FNoiseField,FieldNode_FUniformVector,FieldNode_FRadialVector,FieldNode_FRandomVector,FieldNode_FSumScalar,FieldNode_FSumVector,FieldNode_FConversionField,FieldNode_FCullingField,FieldNode_FWaveScalar,FieldNode_FReturnResultsTerminal } ;)",
    "insertText": "FFieldNodeBase() : Name(\"\")"
  },
  {
    "label": "FFieldNodeBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFieldNodeBase()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Name ; } bool)",
    "insertText": "operator(const FFieldNodeBase& Node)"
  },
  {
    "label": "FillSetupCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillSetupCount(int32& NumOffsets, int32& NumParams)"
  },
  {
    "label": "FillSetupDatas()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillSetupDatas(TArray<int32>& NodesOffsets, TArray<float>& NodesParams, const float CommandTime)"
  },
  {
    "label": "EvalMaxMagnitude()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EvalMaxMagnitude()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (MinBounds =)",
    "insertText": "FVector(-FLT_MAX)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (MaxBounds =)",
    "insertText": "FVector(FLT_MAX)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (CenterPosition =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetName()"
  },
  {
    "label": "FFieldNode()",
    "kind": "Method",
    "detail": "Function (Name = NameIn ; } private : FName Name ; } ; template<class T> class FFieldNode : public FFieldNodeBase { public : ~)",
    "insertText": "FFieldNode()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(FFieldContext&, TFieldArrayView<T>& Results)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (EFieldType)",
    "insertText": "StaticType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesOffsets .)",
    "insertText": "Add(NodesParams.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(Type()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesParams .)",
    "insertText": "Add(static_cast<float>(SerializationType()))"
  },
  {
    "label": "FFieldSystemCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldSystemCommand(const FName& TargetAttributeIn, FFieldNodeBase * RootNodeIn) : TargetAttribute(TargetAttributeIn) , RootNode(RootNodeIn) , CommandName(\"\") , TimeCreation(0.0) , BoundingBox(FVector(-FLT_MAX), FVector(FLT_MAX)) , PhysicsType(GetFieldPhysicsType(TargetAttributeIn)) , MaxMagnitude(1.0) , CenterPosition(FVector::Zero())"
  },
  {
    "label": "FFieldSystemCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldSystemCommand(const EFieldPhysicsType PhsyicsTypeIn, FFieldNodeBase* RootNodeIn) : TargetAttribute(GetFieldPhysicsName(PhsyicsTypeIn)) , RootNode(RootNodeIn) , CommandName(\"\") , TimeCreation(0.0) , BoundingBox(FVector(-FLT_MAX), FVector(FLT_MAX)) , PhysicsType(PhsyicsTypeIn) , MaxMagnitude(1.0) , CenterPosition(FVector::Zero())"
  },
  {
    "label": "FFieldSystemCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldSystemCommand(const FFieldSystemCommand& Other) : TargetAttribute(Other.RootNode ? Other.TargetAttribute:\"\") , RootNode(Other.RootNode?Other.RootNode->NewCopy():nullptr) , CommandName(Other.CommandName) , TimeCreation(Other.TimeCreation) , BoundingBox(Other.BoundingBox) , PhysicsType(Other.RootNode ? Other.PhysicsType : EFieldPhysicsType::Field_None) , MaxMagnitude(Other.MaxMagnitude) , CenterPosition(Other.CenterPosition)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(Meta.Key).Reset(Meta.Value->NewCopy())"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasMetaData(const FFieldSystemMetaData::EMetaType Key)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (} const TUniquePtr<FFieldSystemMetaData>&)",
    "insertText": "GetMetaData(const FFieldSystemMetaData::EMetaType Key)"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMetaData(const FFieldSystemMetaData::EMetaType Key, TUniquePtr<FFieldSystemMetaData>&& Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(Key, MoveTemp(Value))"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMetaData(const FFieldSystemMetaData::EMetaType Key, FFieldSystemMetaData* Value)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MetaData [ Key ] .)",
    "insertText": "Reset(Value)"
  },
  {
    "label": "InitFieldNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFieldNodes(const double TimeSeconds, const FName& Name)"
  },
  {
    "label": "TimeCreation()",
    "kind": "Method",
    "detail": "Function (CommandName = Name ;)",
    "insertText": "TimeCreation(float)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFieldSystemCommand&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FFieldSystemCommand& Other)"
  },
  {
    "label": "FieldsEqual()",
    "kind": "Method",
    "detail": "Function (} FName TargetAttribute ; TUniquePtr<FFieldNodeBase> RootNode ; FName CommandName ; float TimeCreation ; FBox BoundingBox ; EFieldPhysicsType PhysicsType ; float MaxMagnitude ; FVector CenterPosition ; TMap<FFieldSystemMetaData::EMetaType,TUniquePtr<FFieldSystemMetaData>> MetaData ; } ; template<class T> bool)",
    "insertText": "FieldsEqual(const TUniquePtr<T>& NodeA, const TUniquePtr<T>& NodeB)"
  }
]