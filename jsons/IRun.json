[
  {
    "label": "ILayoutBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayoutBlock"
  },
  {
    "label": "IRunRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRunRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRunInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunInfo"
  },
  {
    "label": "FShapedTextContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapedTextContext"
  },
  {
    "label": "FRunTextContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunTextContext"
  },
  {
    "label": "FLayoutBlockTextContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLayoutBlockTextContext"
  },
  {
    "label": "IRun",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRun"
  },
  {
    "label": "FRunInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Text / ShapedTextCacheFwd . h \" # include \" Misc / EnumClassFlags . h \" class ILayoutBlock ; class IRunRenderer ; enum class ETextHitPoint : uint8 ; enum class ETextShapingMethod : uint8 ; struct FRunInfo {)",
    "insertText": "FRunInfo() : Name() , MetaData()"
  },
  {
    "label": "FRunInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRunInfo(FString InName ) : Name( MoveTemp(InName) ) , MetaData()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FString Name ; TMap<FString,FString> MetaData ; } ; enum class ERunAttributes : uint8 { None = 0,SupportsText = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERunAttributes)"
  },
  {
    "label": "FShapedTextContext()",
    "kind": "Method",
    "detail": "Function (struct FShapedTextContext {)",
    "insertText": "FShapedTextContext(const ETextShapingMethod InTextShapingMethod, const TextBiDi::ETextDirection InBaseDirection) : TextShapingMethod(InTextShapingMethod) , BaseDirection(InBaseDirection)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FShapedTextContext& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FShapedTextContext& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash = 0 ; KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.TextShapingMethod))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.BaseDirection))"
  },
  {
    "label": "FLayoutBlockTextContext()",
    "kind": "Method",
    "detail": "Function (} FShapedTextCacheRef ShapedTextCache ; } ; struct FLayoutBlockTextContext : public FRunTextContext {)",
    "insertText": "FLayoutBlockTextContext(const FRunTextContext& InRunTextContext, const TextBiDi::ETextDirection InTextDirection) : FRunTextContext(InRunTextContext) , TextDirection(InTextDirection)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLayoutBlockTextContext& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FLayoutBlockTextContext& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash =)",
    "insertText": "GetTypeHash(static_cast<const FRunTextContext&>(Key))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.TextDirection))"
  },
  {
    "label": "GetTextRange()",
    "kind": "Method",
    "detail": "Function (} FTextRange)",
    "insertText": "GetTextRange()"
  },
  {
    "label": "SetTextRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextRange(const FTextRange& Value)"
  },
  {
    "label": "GetBaseLine()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseLine(float Scale)"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetMaxHeight(float Scale)"
  },
  {
    "label": "Measure()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Measure(int32 StartIndex, int32 EndIndex, float Scale, const FRunTextContext& TextContext)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(int32 CurrentIndex, float Scale, const FRunTextContext& TextContext)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ILayoutBlock>)",
    "insertText": "CreateBlock(int32 StartIndex, int32 EndIndex, FVector2D Size, const FLayoutBlockTextContext& TextContext, const TSharedPtr< class IRunRenderer >& Renderer)"
  },
  {
    "label": "GetTextIndexAt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextIndexAt(const TSharedRef< ILayoutBlock >& Block, const FVector2D& Location, float Scale, ETextHitPoint* const OutHitPoint = nullptr)"
  },
  {
    "label": "GetLocationAt()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetLocationAt(const TSharedRef< ILayoutBlock >& Block, int32 Offset, float Scale)"
  },
  {
    "label": "BeginLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLayout()"
  },
  {
    "label": "EndLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLayout()"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(const TSharedRef<FString>& NewText, const FTextRange& NewRange)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IRun>)",
    "insertText": "Clone()"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& Text)"
  },
  {
    "label": "AppendTextTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTextTo(FString& Text, const FTextRange& Range)"
  },
  {
    "label": "GetRunInfo()",
    "kind": "Method",
    "detail": "Function (const FRunInfo&)",
    "insertText": "GetRunInfo()"
  },
  {
    "label": "GetRunAttributes()",
    "kind": "Method",
    "detail": "Function (ERunAttributes)",
    "insertText": "GetRunAttributes()"
  }
]