[
  {
    "label": "FDelaunay3Connectivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelaunay3Connectivity"
  },
  {
    "label": "FDelaunay3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelaunay3"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" IndexTypes . h \" # include \" Math / RandomStream . h \" # include \" Math / Vector . h \" # include \" MathUtil . h \" # include \" Templates / PimplPtr . h \" namespace UE { namespace Geometry { using namespace UE::Math ; struct FDelaunay3Connectivity ; class FDelaunay3 { public : FRandomStream RandomStream ; bool)",
    "insertText": "Triangulate(TArrayView<const TVector<double>> Vertices)"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Triangulate(TArrayView<const TVector<float>> Vertices)"
  },
  {
    "label": "GetTetrahedraAsFIndex4i()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex4i>)",
    "insertText": "GetTetrahedraAsFIndex4i(bool bReverseOrientation = false)"
  },
  {
    "label": "GetTetrahedra()",
    "kind": "Method",
    "detail": "Function (TArray<FIntVector4>)",
    "insertText": "GetTetrahedra(bool bReverseOrientation = false)"
  },
  {
    "label": "IsDelaunay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelaunay(TArrayView<const FVector3f> Vertices)"
  },
  {
    "label": "IsDelaunay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelaunay(TArrayView<const FVector3d> Vertices)"
  }
]