[
  {
    "label": "ARCHIVE_CTOR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARCHIVE_CTOR"
  },
  {
    "label": "CreateArchiveWithInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_ArchiveInfo_h # define Alembic_Abc_ArchiveInfo_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / IArchive . h> # include<Alembic / Abc / OArchive . h> # include<cfloat> # include<time . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { const char* kApplicationNameKey = \" _ai_Application \" ; const char* kDateWrittenKey = \" _ai_DateWritten \" ; const char* kUserDescriptionKey = \" _ai_Description \" ; const char* kDCCFPSKey = \" _ai_DCC_FPS \" ; template<class ARCHIVE_CTOR> OArchive)",
    "insertText": "CreateArchiveWithInfo(ARCHIVE_CTOR iCtor, const std::string &iFileName, const std::string & iApplicationWriter, const std::string & iUserDescription, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "CreateArchiveWithInfo()",
    "kind": "Method",
    "detail": "Function (template<class ARCHIVE_CTOR> OArchive)",
    "insertText": "CreateArchiveWithInfo(ARCHIVE_CTOR iCtor, const std::string &iFileName, double iDCCFPS, const std::string & iApplicationWriter, const std::string & iUserDescription, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "GetArchiveInfo()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT void)",
    "insertText": "GetArchiveInfo(IArchive & iArchive, std::string & oApplicationWriter, std::string & oAlembicVersion, Util::uint32_t & oAlembicApiVersion, std::string & oDateWritten, std::string & oUserDescription)"
  },
  {
    "label": "GetArchiveInfo()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT void)",
    "insertText": "GetArchiveInfo(IArchive & iArchive, std::string & oApplicationWriter, std::string & oAlembicVersion, Util::uint32_t & oAlembicApiVersion, std::string & oDateWritten, std::string & oUserDescription, double & oDCCFPS)"
  },
  {
    "label": "GetArchiveStartAndEndTime()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT void)",
    "insertText": "GetArchiveStartAndEndTime(IArchive & iArchive, double & oStartTime, double & oEndTime)"
  },
  {
    "label": "CreateArchiveWithInfo()",
    "kind": "Method",
    "detail": "Function (template<class ARCHIVE_CTOR> OArchive)",
    "insertText": "CreateArchiveWithInfo(ARCHIVE_CTOR iCtor, const std::string &iFileName, double iDCCFPS, const std::string &iApplicationWriter, const std::string &iUserDescription, const Argument &iArg0, const Argument &iArg1)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (AbcA::MetaData md =)",
    "insertText": "GetMetaData(iArg0, iArg1)"
  },
  {
    "label": "GetErrorHandlerPolicyFromArgs()",
    "kind": "Method",
    "detail": "Function (ErrorHandler::Policy policy =)",
    "insertText": "GetErrorHandlerPolicyFromArgs(iArg0, iArg1)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(kApplicationNameKey, iApplicationWriter)"
  },
  {
    "label": "time()",
    "kind": "Method",
    "detail": "Function (} time_t rawtimeNow ;)",
    "insertText": "time(&rawtimeNow)"
  },
  {
    "label": "ctime_s()",
    "kind": "Method",
    "detail": "Function (char dateBuf [ 1 2 8 ] ; # if defined _WIN32 | | defined _WIN64)",
    "insertText": "ctime_s(dateBuf, 128, &rawtimeNow)"
  },
  {
    "label": "ctime_r()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "ctime_r(&rawtimeNow, dateBuf)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (# endif std::size_t bufLen =)",
    "insertText": "strlen(dateBuf)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (dateBuf [ bufLen - 1 ] = ' \\ 0 ' ; } md .)",
    "insertText": "set(kDateWrittenKey, dateBuf)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(kUserDescriptionKey, iUserDescription)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iDCCFPS > 0.0)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(kDCCFPSKey, std::to_string( iDCCFPS ))"
  },
  {
    "label": "OArchive()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "OArchive(iCtor, iFileName, md, policy)"
  },
  {
    "label": "CreateArchiveWithInfo()",
    "kind": "Method",
    "detail": "Function (} template<class ARCHIVE_CTOR> OArchive)",
    "insertText": "CreateArchiveWithInfo(ARCHIVE_CTOR iCtor, const std::string &iFileName, const std::string &iApplicationWriter, const std::string &iUserDescription, const Argument &iArg0, const Argument &iArg1)"
  }
]