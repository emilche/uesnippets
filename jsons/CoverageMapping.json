[
  {
    "label": "IndexedInstrProfReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexedInstrProfReader"
  },
  {
    "label": "CoverageMappingReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoverageMappingReader"
  },
  {
    "label": "CoverageMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoverageMapping"
  },
  {
    "label": "CounterExpressions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CounterExpressions"
  },
  {
    "label": "CoverageMappingVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CoverageMappingVersion"
  },
  {
    "label": "Counter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Counter"
  },
  {
    "label": "CounterKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CounterKind"
  },
  {
    "label": "CounterExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CounterExpression"
  },
  {
    "label": "ExprKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExprKind"
  },
  {
    "label": "CounterExpressionBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CounterExpressionBuilder"
  },
  {
    "label": "CounterMappingRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CounterMappingRegion"
  },
  {
    "label": "RegionKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RegionKind"
  },
  {
    "label": "CountedRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CountedRegion"
  },
  {
    "label": "CounterMappingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CounterMappingContext"
  },
  {
    "label": "FunctionRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionRecord"
  },
  {
    "label": "FunctionRecordIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionRecordIterator"
  },
  {
    "label": "ExpansionRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpansionRecord"
  },
  {
    "label": "CoverageSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoverageSegment"
  },
  {
    "label": "CoverageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoverageData"
  },
  {
    "label": "CoverageMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoverageMapping"
  },
  {
    "label": "CoverageMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoverageMapping"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is_error_code_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_error_code_enum"
  },
  {
    "label": "Counter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Counter()"
  },
  {
    "label": "Counter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Counter(CounterValueReference, CounterId)"
  },
  {
    "label": "Counter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Counter(Expression, ExpressionId)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Counter)",
    "insertText": "get(const CounterExpression &E)"
  },
  {
    "label": "extractTerms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractTerms(Counter C, int Sign,\n                    SmallVectorImpl<std::pair<unsigned, int>> &Terms)"
  },
  {
    "label": "simplify()",
    "kind": "Method",
    "detail": "Function (Counter)",
    "insertText": "simplify(Counter ExpressionTree)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (Counter)",
    "insertText": "add(Counter LHS, Counter RHS)"
  },
  {
    "label": "subtract()",
    "kind": "Method",
    "detail": "Function (Counter)",
    "insertText": "subtract(Counter LHS, Counter RHS)"
  },
  {
    "label": "CounterMappingRegion()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CounterMappingRegion(Count, FileID, 0, LineStart, ColumnStart,\n                                LineEnd, ColumnEnd, CodeRegion)"
  },
  {
    "label": "skipOtherFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skipOtherFiles()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<CoverageMapping>>)",
    "insertText": "load(CoverageMappingReader &CoverageReader,\n       IndexedInstrProfReader &ProfileReader)"
  },
  {
    "label": "getCoverageForFile()",
    "kind": "Method",
    "detail": "Function (CoverageData)",
    "insertText": "getCoverageForFile(StringRef Filename)"
  },
  {
    "label": "getCoverageForFunction()",
    "kind": "Method",
    "detail": "Function (CoverageData)",
    "insertText": "getCoverageForFunction(const FunctionRecord &Function)"
  },
  {
    "label": "getCoverageForExpansion()",
    "kind": "Method",
    "detail": "Function (CoverageData)",
    "insertText": "getCoverageForExpansion(const ExpansionRecord &Expansion)"
  }
]