[
  {
    "label": "FTimeGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeGuard"
  },
  {
    "label": "FGuardInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuardInfo"
  },
  {
    "label": "DO_LIGHTWEIGHT_TIMEGUARD()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformTime . h \" # include \" Misc / Build . h \" # include \" Misc / DateTime . h \" # ifndef DO_TIMEGUARD # define DO_TIMEGUARD 0 # endif # ifndef DO_LIGHTWEIGHT_TIMEGUARD # define)",
    "insertText": "DO_LIGHTWEIGHT_TIMEGUARD(WITH_ENGINE && !UE_SERVER && !NO_LOGGING && !WITH_EDITOR ) #endif #if DO_TIMEGUARD DECLARE_DELEGATE_RetVal(const FString, FTimerNameDelegate)"
  },
  {
    "label": "FGuardInfo()",
    "kind": "Method",
    "detail": "Function (class FTimeGuard { public : struct FGuardInfo { int Count ; float Min ; float Max ; float Total ; FDateTime FirstTime ; FDateTime LastTime ;)",
    "insertText": "FGuardInfo() : Count(0) , Min(FLT_MAX) , Max(-FLT_MAX) , Total(0)"
  },
  {
    "label": "FTimeGuard()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "FTimeGuard(FTimerNameDelegate InNameDelegate, const float InTargetMS = 0.0) : Name(nullptr), ObjectName(NAME_None)"
  },
  {
    "label": "NameDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NameDelegate(bEnabled && IsInGameThread())"
  },
  {
    "label": "TargetTimeMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetTimeMS(InTargetMS > 0)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "FTimeGuard()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FTimeGuard(TCHAR const* InName, FName InObjectName = NAME_None, const float InTargetMS = 0.0) : Name(nullptr), ObjectName(NAME_None)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Name(bEnabled && IsInGameThread())"
  },
  {
    "label": "FTimeGuard()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FTimeGuard()"
  },
  {
    "label": "ReportHitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportHitch(*FString::Printf(TEXT(\"%s %s\"), Name, *ObjectName.ToString()), delta, true)"
  },
  {
    "label": "ReportHitch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ReportHitch(Name, delta, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(NameDelegate.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FString Temp = NameDelegate .)",
    "insertText": "Execute()"
  },
  {
    "label": "ReportHitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportHitch(*Temp, delta, true)"
  },
  {
    "label": "ClearData()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ClearData()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool InEnable)"
  },
  {
    "label": "SetFrameTimeThresholdMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameTimeThresholdMS(float InTimeMS)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetData(TMap<const TCHAR*, FGuardInfo, FDefaultSetAllocator, TStringPointerMapKeyFuncs_DEPRECATED<const TCHAR*, FGuardInfo>>& Dest)"
  },
  {
    "label": "ReportHitch()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ReportHitch(const TCHAR* InName, float TimeMS, bool VolatileName)"
  },
  {
    "label": "SCOPE_TIME_GUARD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD(name) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(name)"
  },
  {
    "label": "SCOPE_TIME_GUARD_MS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD_MS(name, timeMs) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(name, NAME_None, timeMs)"
  },
  {
    "label": "SCOPE_TIME_GUARD_NAMED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD_NAMED(name, fname) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(name, fname)"
  },
  {
    "label": "SCOPE_TIME_GUARD_NAMED_MS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD_NAMED_MS(name, fname, timems) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(name, fname, timems)"
  },
  {
    "label": "SCOPE_TIME_GUARD_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD_DELEGATE(inDelegate) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(inDelegate)"
  },
  {
    "label": "SCOPE_TIME_GUARD_DELEGATE_MS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_TIME_GUARD_DELEGATE_MS(inDelegate, timems) \\ FTimeGuard ANONYMOUS_VARIABLE(TimeGuard)(inDelegate, timems)"
  },
  {
    "label": "ENABLE_TIME_GUARDS()",
    "kind": "Method",
    "detail": "Function (# define CLEAR_TIME_GUARDS FTimeGuard::ClearData # define)",
    "insertText": "ENABLE_TIME_GUARDS(bEnabled) FTimeGuard::SetEnabled(bEnabled) #else #define SCOPE_TIME_GUARD(name) #define SCOPE_TIME_GUARD_MS(name, timeMs) #define SCOPE_TIME_GUARD_NAMED(name, fname) #define SCOPE_TIME_GUARD_NAMED_MS(name, fname, timeMs) #define CLEAR_TIME_GUARDS() #define ENABLE_TIME_GUARDS(bEnabled) #endif #if DO_LIGHTWEIGHT_TIMEGUARD #define LIGHTWEIGHT_TIME_GUARD_BEGIN( Name, ThresholdMS ) \\ float PREPROCESSOR_JOIN(__TimeGuard_ThresholdMS_, Name)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ uint64)",
    "insertText": "PREPROCESSOR_JOIN(__TimeGuard_StartCycles_, Name) = ( ThresholdMS > 0.0f ) ? FPlatformTime::Cycles64()"
  },
  {
    "label": "LIGHTWEIGHT_TIME_GUARD_END()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LIGHTWEIGHT_TIME_GUARD_END(Name, NameStringCode ) \\ if ( PREPROCESSOR_JOIN(__TimeGuard_ThresholdMS_, Name) > 0.0f)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ float)",
    "insertText": "PREPROCESSOR_JOIN(__TimeGuard_MSElapsed_,Name) = FPlatformTime::ToMilliseconds64( FPlatformTime::Cycles64() - PREPROCESSOR_JOIN(__TimeGuard_StartCycles_,Name))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(PREPROCESSOR_JOIN(__TimeGuard_MSElapsed_,Name) > PREPROCESSOR_JOIN(__TimeGuard_ThresholdMS_, Name))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\ FString ReportName = NameStringCode ; \\)",
    "insertText": "UE_LOG(LogCore, Warning, TEXT(\"LIGHTWEIGHT_TIME_GUARD: %s - %s took %.2fms!\"), TEXT(#Name), *ReportName, PREPROCESSOR_JOIN(__TimeGuard_MSElapsed_,Name))"
  }
]