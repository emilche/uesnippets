[
  {
    "label": "sockaddr_in",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr_in"
  },
  {
    "label": "sockaddr_storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr_storage"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SocketAddress()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SOCKET_ADDRESS_H_ # define RTC_BASE_SOCKET_ADDRESS_H_ # include<string> # include \" absl / strings / string_view . h \" # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include \" rtc_base / ip_address . h \" # include \" rtc_base / system / rtc_export . h \" # undef SetPort struct sockaddr_in ; struct sockaddr_storage ; namespace rtc { class RTC_EXPORT SocketAddress { public :)",
    "insertText": "SocketAddress()"
  },
  {
    "label": "SocketAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SocketAddress(absl::string_view hostname, int port)"
  },
  {
    "label": "SocketAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SocketAddress(uint32_t ip_as_host_order_integer, int port)"
  },
  {
    "label": "SocketAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SocketAddress(const IPAddress& ip, int port)"
  },
  {
    "label": "SocketAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SocketAddress(const SocketAddress& addr)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsNil()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNil()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SocketAddress&)",
    "insertText": "operator(const SocketAddress& addr)"
  },
  {
    "label": "SetIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIP(uint32_t ip_as_host_order_integer)"
  },
  {
    "label": "SetIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIP(const IPAddress& ip)"
  },
  {
    "label": "SetIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIP(absl::string_view hostname)"
  },
  {
    "label": "SetResolvedIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResolvedIP(uint32_t ip_as_host_order_integer)"
  },
  {
    "label": "SetResolvedIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResolvedIP(const IPAddress& ip)"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPort(int port)"
  },
  {
    "label": "hostname()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "hostname()"
  },
  {
    "label": "ipaddr()",
    "kind": "Method",
    "detail": "Function (const IPAddress&)",
    "insertText": "ipaddr()"
  },
  {
    "label": "family()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "family()"
  },
  {
    "label": "port()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "port()"
  },
  {
    "label": "scope_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "scope_id()"
  },
  {
    "label": "HostAsURIString()",
    "kind": "Method",
    "detail": "Function (scope_id_ = id ; } std::string)",
    "insertText": "HostAsURIString()"
  },
  {
    "label": "HostAsSensitiveURIString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "HostAsSensitiveURIString()"
  },
  {
    "label": "PortAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PortAsString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToSensitiveString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToSensitiveString()"
  },
  {
    "label": "ToResolvedSensitiveString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToResolvedSensitiveString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromString(absl::string_view str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& os)"
  },
  {
    "label": "IsAnyIP()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsAnyIP()"
  },
  {
    "label": "IsLoopbackIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoopbackIP()"
  },
  {
    "label": "IsPrivateIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrivateIP()"
  },
  {
    "label": "IsUnresolvedIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnresolvedIP()"
  },
  {
    "label": "EqualIPs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualIPs(const SocketAddress& addr)"
  },
  {
    "label": "EqualPorts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualPorts(const SocketAddress& addr)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Hash()"
  },
  {
    "label": "ToSockAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToSockAddr(sockaddr_in* saddr)"
  },
  {
    "label": "FromSockAddr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromSockAddr(const sockaddr_in& saddr)"
  },
  {
    "label": "ToDualStackSockAddrStorage()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ToDualStackSockAddrStorage(sockaddr_storage* saddr)"
  },
  {
    "label": "ToSockAddrStorage()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ToSockAddrStorage(sockaddr_storage* saddr)"
  },
  {
    "label": "SocketAddressFromSockAddrStorage()",
    "kind": "Method",
    "detail": "Function (private : std::string hostname_ ; IPAddress ip_ ; uint16_t port_ ; int scope_id_ ; bool literal_ ; } ; RTC_EXPORT bool)",
    "insertText": "SocketAddressFromSockAddrStorage(const sockaddr_storage& saddr, SocketAddress* out)"
  },
  {
    "label": "EmptySocketAddressWithFamily()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "EmptySocketAddressWithFamily(int family)"
  }
]