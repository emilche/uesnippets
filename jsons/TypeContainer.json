[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TTypeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypeContainer"
  },
  {
    "label": "IInstanceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstanceProvider"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TFunctionInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFunctionInstanceProvider"
  },
  {
    "label": "TSharedInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSharedInstanceProvider"
  },
  {
    "label": "FThreadInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadInstanceProvider"
  },
  {
    "label": "TThreadInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TThreadInstanceProvider"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D"
  },
  {
    "label": "FTypeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypeContainer"
  },
  {
    "label": "IInstanceProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / UnrealString . h \" # include \" Templates / Function . h \" # include \" Containers / Map . h \" # include \" Templates / SharedPointer . h \" # include \" HAL / TlsAutoCleanup . h \" # include \" Misc / ScopeLock . h \" enum class ETypeContainerScope { Instance,Process,Thread,} ; template<ESPMode Mode = ESPMode::ThreadSafe> class TTypeContainer { class IInstanceProvider { public : ~)",
    "insertText": "IInstanceProvider()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<void,Mode>)",
    "insertText": "GetInstance()"
  },
  {
    "label": "TFunctionInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct TFunctionInstanceProvider : public IInstanceProvider {)",
    "insertText": "TFunctionInstanceProvider(TFunction<TSharedPtr<void, Mode>()>&& InCreateFunc) : CreateFunc(MoveTemp(InCreateFunc))"
  },
  {
    "label": "TFunctionInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TFunctionInstanceProvider()"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (} TFunction<TSharedPtr<void,)",
    "insertText": "Mode()"
  },
  {
    "label": "TSharedInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct TSharedInstanceProvider : public IInstanceProvider {)",
    "insertText": "TSharedInstanceProvider(const TSharedRef<T, Mode>& InInstance) : Instance(InInstance)"
  },
  {
    "label": "TSharedInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSharedInstanceProvider()"
  },
  {
    "label": "FThreadInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FThreadInstanceProvider()"
  },
  {
    "label": "FreeTlsSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeTlsSlot(TlsSlot)"
  },
  {
    "label": "TThreadInstanceProvider()",
    "kind": "Method",
    "detail": "Function (uint32 TlsSlot ; } ; template<class T> struct TThreadInstanceProvider : public FThreadInstanceProvider { typedef TTlsAutoCleanupValue<TSharedPtr<T,Mode>> TlsValueType ;)",
    "insertText": "TThreadInstanceProvider(TFunction<TSharedPtr<void, Mode>()>&& InCreateFunc) : FThreadInstanceProvider(MoveTemp(InCreateFunc))"
  },
  {
    "label": "TThreadInstanceProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TThreadInstanceProvider()"
  },
  {
    "label": "TlsValue()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "TlsValue(TlsValueType*)FPlatformTLS::GetTlsValue(this->TlsSlot)"
  },
  {
    "label": "TlsValueType()",
    "kind": "Method",
    "detail": "Function (TlsValue = new)",
    "insertText": "TlsValueType(StaticCastSharedPtr<T>(this->CreateFunc()))"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (TlsValue ->)",
    "insertText": "Register()"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsValue(this->TlsSlot, TlsValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return TlsValue ->)",
    "insertText": "Get()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function ({ const TSharedPtr<IInstanceProvider>& Provider = Providers .)",
    "insertText": "FindRef(TNameOf<R>::GetName())"
  },
  {
    "label": "GetInstanceRef()",
    "kind": "Method",
    "detail": "Function (} } template<class R> TSharedRef<R,Mode>)",
    "insertText": "GetInstanceRef()"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (} template<class R> bool)",
    "insertText": "IsRegistered()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function ({ return Providers .)",
    "insertText": "Contains(TNameOf<R>::GetName())"
  },
  {
    "label": "RegisterClass()",
    "kind": "Method",
    "detail": "Function (} } template<class R,class T,. . . P> void)",
    "insertText": "RegisterClass(ETypeContainerScope Scope = ETypeContainerScope::Process)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IInstanceProvider> Provider ;)",
    "insertText": "switch(Scope)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (break ; case ETypeContainerScope::Thread : Provider =)",
    "insertText": "MakeShareable(new TThreadInstanceProvider<T>( [this]() -> TSharedPtr<void, Mode> { return MakeShareable(new T(GetInstance<P>()...)); } ))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (break ; default : Provider =)",
    "insertText": "MakeShareable(new TSharedInstanceProvider<T>( MakeShareable(new T(GetInstance<P>()...)) ))"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "AddProvider(TNameOf<R>::GetName(), Provider)"
  },
  {
    "label": "RegisterDelegate()",
    "kind": "Method",
    "detail": "Function (} template<class R,class D,. . . P> void)",
    "insertText": "RegisterDelegate(D Delegate)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IInstanceProvider> Provider =)",
    "insertText": "MakeShareable(new TFunctionInstanceProvider<R>( [this, Delegate]() -> TSharedPtr<void, Mode> { return Delegate.Execute(GetInstance<P>()...); } ))"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (} template<class R> void)",
    "insertText": "RegisterFactory(const TFunction<TSharedRef<R, Mode>()>& CreateFunc)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IInstanceProvider> Provider =)",
    "insertText": "MakeShareable(new TFunctionInstanceProvider<R>( [=, this]() -> TSharedPtr<void, Mode> { return CreateFunc(); } ))"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (} template<class R,P0,. . . P> void)",
    "insertText": "RegisterFactory(const TFunction<TSharedRef<R, Mode>(TSharedRef<P0, Mode>, TSharedRef<P, Mode>...)>& CreateFunc)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IInstanceProvider> Provider =)",
    "insertText": "MakeShareable(new TFunctionInstanceProvider<R>( [=, this]() -> TSharedPtr<void, Mode> { return CreateFunc(GetInstance<P0>(), GetInstance<P>()...); } ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(defined(_MSC_VER) && _MSC_VER >= 1900) || defined(__clang__) template<class R, typename... P> void RegisterFactory(TSharedRef<R, Mode> (*CreateFunc)(TSharedRef<P, Mode>...))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IInstanceProvider> Provider =)",
    "insertText": "MakeShareable(new TFunctionInstanceProvider<R>( [this, CreateFunc]() -> TSharedPtr<void, Mode> { return CreateFunc(GetInstance<P>()...); } ))"
  },
  {
    "label": "RegisterInstance()",
    "kind": "Method",
    "detail": "Function (} # endif template<class R,class T> void)",
    "insertText": "RegisterInstance(const TSharedRef<T, Mode>& Instance)"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProvider(TNameOf<R>::GetName(), MakeShareable(new TSharedInstanceProvider<R>(Instance)))"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (} template<class R> void)",
    "insertText": "Unregister()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function ({ Providers .)",
    "insertText": "Remove(TNameOf<R>::GetName())"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "AddProvider(const TCHAR* Name, const TSharedPtr<IInstanceProvider>& Provider)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function ({ Providers .)",
    "insertText": "Add(Name, Provider)"
  }
]