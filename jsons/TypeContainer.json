[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "factories",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "factories"
  },
  {
    "label": "constructors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructors"
  },
  {
    "label": "factory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "factory"
  },
  {
    "label": "TTypeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypeContainer"
  },
  {
    "label": "IInstanceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstanceProvider"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TFunctionInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFunctionInstanceProvider"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSharedInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSharedInstanceProvider"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FThreadInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadInstanceProvider"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TThreadInstanceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TThreadInstanceProvider"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "using",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "using"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "requires",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "requires"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "FTypeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypeContainer"
  },
  {
    "label": "CreateFunc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFunc()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "CreateFunc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFunc()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  }
]