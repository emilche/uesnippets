[
  {
    "label": "shaderc_compiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "shaderc_compiler"
  },
  {
    "label": "shaderc_compile_options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "shaderc_compile_options"
  },
  {
    "label": "shaderc_include_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "shaderc_include_result"
  },
  {
    "label": "shaderc_include_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "shaderc_include_type"
  },
  {
    "label": "shaderc_compilation_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "shaderc_compilation_result"
  },
  {
    "label": "shaderc_compiler_initialize()",
    "kind": "Method",
    "detail": "Function (# ifndef SHADERC_SHADERC_H_ # define SHADERC_SHADERC_H_ # ifdef __cplusplus \" C \" { # endif # include<stdbool . h> # include<stddef . h> # include<stdint . h> # include \" shaderc / env . h \" # include \" shaderc / status . h \" # include \" shaderc / visibility . h \" typedef enum { shaderc_source_language_glsl,shaderc_source_language_hlsl,} shaderc_source_language ; typedef enum { shaderc_vertex_shader,shaderc_fragment_shader,shaderc_compute_shader,shaderc_geometry_shader,shaderc_tess_control_shader,shaderc_tess_evaluation_shader,shaderc_glsl_vertex_shader = shaderc_vertex_shader,shaderc_glsl_fragment_shader = shaderc_fragment_shader,shaderc_glsl_compute_shader = shaderc_compute_shader,shaderc_glsl_geometry_shader = shaderc_geometry_shader,shaderc_glsl_tess_control_shader = shaderc_tess_control_shader,shaderc_glsl_tess_evaluation_shader = shaderc_tess_evaluation_shader,shaderc_glsl_infer_from_source,shaderc_glsl_default_vertex_shader,shaderc_glsl_default_fragment_shader,shaderc_glsl_default_compute_shader,shaderc_glsl_default_geometry_shader,shaderc_glsl_default_tess_control_shader,shaderc_glsl_default_tess_evaluation_shader,shaderc_spirv_assembly,shaderc_raygen_shader,shaderc_anyhit_shader,shaderc_closesthit_shader,shaderc_miss_shader,shaderc_intersection_shader,shaderc_callable_shader,shaderc_glsl_raygen_shader = shaderc_raygen_shader,shaderc_glsl_anyhit_shader = shaderc_anyhit_shader,shaderc_glsl_closesthit_shader = shaderc_closesthit_shader,shaderc_glsl_miss_shader = shaderc_miss_shader,shaderc_glsl_intersection_shader = shaderc_intersection_shader,shaderc_glsl_callable_shader = shaderc_callable_shader,shaderc_glsl_default_raygen_shader,shaderc_glsl_default_anyhit_shader,shaderc_glsl_default_closesthit_shader,shaderc_glsl_default_miss_shader,shaderc_glsl_default_intersection_shader,shaderc_glsl_default_callable_shader,shaderc_task_shader,shaderc_mesh_shader,shaderc_glsl_task_shader = shaderc_task_shader,shaderc_glsl_mesh_shader = shaderc_mesh_shader,shaderc_glsl_default_task_shader,shaderc_glsl_default_mesh_shader,} shaderc_shader_kind ; typedef enum { shaderc_profile_none,shaderc_profile_core,shaderc_profile_compatibility,shaderc_profile_es,} shaderc_profile ; typedef enum { shaderc_optimization_level_zero,shaderc_optimization_level_size,shaderc_optimization_level_performance,} shaderc_optimization_level ; typedef enum { shaderc_limit_max_lights,shaderc_limit_max_clip_planes,shaderc_limit_max_texture_units,shaderc_limit_max_texture_coords,shaderc_limit_max_vertex_attribs,shaderc_limit_max_vertex_uniform_components,shaderc_limit_max_varying_floats,shaderc_limit_max_vertex_texture_image_units,shaderc_limit_max_combined_texture_image_units,shaderc_limit_max_texture_image_units,shaderc_limit_max_fragment_uniform_components,shaderc_limit_max_draw_buffers,shaderc_limit_max_vertex_uniform_vectors,shaderc_limit_max_varying_vectors,shaderc_limit_max_fragment_uniform_vectors,shaderc_limit_max_vertex_output_vectors,shaderc_limit_max_fragment_input_vectors,shaderc_limit_min_program_texel_offset,shaderc_limit_max_program_texel_offset,shaderc_limit_max_clip_distances,shaderc_limit_max_compute_work_group_count_x,shaderc_limit_max_compute_work_group_count_y,shaderc_limit_max_compute_work_group_count_z,shaderc_limit_max_compute_work_group_size_x,shaderc_limit_max_compute_work_group_size_y,shaderc_limit_max_compute_work_group_size_z,shaderc_limit_max_compute_uniform_components,shaderc_limit_max_compute_texture_image_units,shaderc_limit_max_compute_image_uniforms,shaderc_limit_max_compute_atomic_counters,shaderc_limit_max_compute_atomic_counter_buffers,shaderc_limit_max_varying_components,shaderc_limit_max_vertex_output_components,shaderc_limit_max_geometry_input_components,shaderc_limit_max_geometry_output_components,shaderc_limit_max_fragment_input_components,shaderc_limit_max_image_units,shaderc_limit_max_combined_image_units_and_fragment_outputs,shaderc_limit_max_combined_shader_output_resources,shaderc_limit_max_image_samples,shaderc_limit_max_vertex_image_uniforms,shaderc_limit_max_tess_control_image_uniforms,shaderc_limit_max_tess_evaluation_image_uniforms,shaderc_limit_max_geometry_image_uniforms,shaderc_limit_max_fragment_image_uniforms,shaderc_limit_max_combined_image_uniforms,shaderc_limit_max_geometry_texture_image_units,shaderc_limit_max_geometry_output_vertices,shaderc_limit_max_geometry_total_output_components,shaderc_limit_max_geometry_uniform_components,shaderc_limit_max_geometry_varying_components,shaderc_limit_max_tess_control_input_components,shaderc_limit_max_tess_control_output_components,shaderc_limit_max_tess_control_texture_image_units,shaderc_limit_max_tess_control_uniform_components,shaderc_limit_max_tess_control_total_output_components,shaderc_limit_max_tess_evaluation_input_components,shaderc_limit_max_tess_evaluation_output_components,shaderc_limit_max_tess_evaluation_texture_image_units,shaderc_limit_max_tess_evaluation_uniform_components,shaderc_limit_max_tess_patch_components,shaderc_limit_max_patch_vertices,shaderc_limit_max_tess_gen_level,shaderc_limit_max_viewports,shaderc_limit_max_vertex_atomic_counters,shaderc_limit_max_tess_control_atomic_counters,shaderc_limit_max_tess_evaluation_atomic_counters,shaderc_limit_max_geometry_atomic_counters,shaderc_limit_max_fragment_atomic_counters,shaderc_limit_max_combined_atomic_counters,shaderc_limit_max_atomic_counter_bindings,shaderc_limit_max_vertex_atomic_counter_buffers,shaderc_limit_max_tess_control_atomic_counter_buffers,shaderc_limit_max_tess_evaluation_atomic_counter_buffers,shaderc_limit_max_geometry_atomic_counter_buffers,shaderc_limit_max_fragment_atomic_counter_buffers,shaderc_limit_max_combined_atomic_counter_buffers,shaderc_limit_max_atomic_counter_buffer_size,shaderc_limit_max_transform_feedback_buffers,shaderc_limit_max_transform_feedback_interleaved_components,shaderc_limit_max_cull_distances,shaderc_limit_max_combined_clip_and_cull_distances,shaderc_limit_max_samples,shaderc_limit_max_mesh_output_vertices_nv,shaderc_limit_max_mesh_output_primitives_nv,shaderc_limit_max_mesh_work_group_size_x_nv,shaderc_limit_max_mesh_work_group_size_y_nv,shaderc_limit_max_mesh_work_group_size_z_nv,shaderc_limit_max_task_work_group_size_x_nv,shaderc_limit_max_task_work_group_size_y_nv,shaderc_limit_max_task_work_group_size_z_nv,shaderc_limit_max_mesh_view_count_nv,shaderc_limit_max_mesh_output_vertices_ext,shaderc_limit_max_mesh_output_primitives_ext,shaderc_limit_max_mesh_work_group_size_x_ext,shaderc_limit_max_mesh_work_group_size_y_ext,shaderc_limit_max_mesh_work_group_size_z_ext,shaderc_limit_max_task_work_group_size_x_ext,shaderc_limit_max_task_work_group_size_y_ext,shaderc_limit_max_task_work_group_size_z_ext,shaderc_limit_max_mesh_view_count_ext,shaderc_limit_max_dual_source_draw_buffers_ext,} shaderc_limit ; typedef enum { shaderc_uniform_kind_image,shaderc_uniform_kind_sampler,shaderc_uniform_kind_texture,shaderc_uniform_kind_buffer,shaderc_uniform_kind_storage_buffer,shaderc_uniform_kind_unordered_access_view,} shaderc_uniform_kind ; typedef struct shaderc_compiler* shaderc_compiler_t ; SHADERC_EXPORT shaderc_compiler_t)",
    "insertText": "shaderc_compiler_initialize(void)"
  },
  {
    "label": "shaderc_compiler_release()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compiler_release(shaderc_compiler_t)"
  },
  {
    "label": "shaderc_compile_options_initialize()",
    "kind": "Method",
    "detail": "Function (typedef struct shaderc_compile_options* shaderc_compile_options_t ; SHADERC_EXPORT shaderc_compile_options_t)",
    "insertText": "shaderc_compile_options_initialize(void)"
  },
  {
    "label": "shaderc_compile_options_clone()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT shaderc_compile_options_t)",
    "insertText": "shaderc_compile_options_clone(const shaderc_compile_options_t options)"
  },
  {
    "label": "shaderc_compile_options_release()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_release(shaderc_compile_options_t options)"
  },
  {
    "label": "shaderc_compile_options_add_macro_definition()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_add_macro_definition(shaderc_compile_options_t options, const char* name, size_t name_length, const char* value, size_t value_length)"
  },
  {
    "label": "shaderc_compile_options_set_source_language()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_source_language(shaderc_compile_options_t options, shaderc_source_language lang)"
  },
  {
    "label": "shaderc_compile_options_set_generate_debug_info()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_generate_debug_info(shaderc_compile_options_t options)"
  },
  {
    "label": "shaderc_compile_options_set_optimization_level()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_optimization_level(shaderc_compile_options_t options, shaderc_optimization_level level)"
  },
  {
    "label": "shaderc_compile_options_set_forced_version_profile()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_forced_version_profile(shaderc_compile_options_t options, int version, shaderc_profile profile)"
  },
  {
    "label": "shaderc_include_result()",
    "kind": "Method",
    "detail": "Function (typedef struct shaderc_include_result { const char* source_name ; size_t source_name_length ; const char* content ; size_t content_length ; void* user_data ; } shaderc_include_result ; enum shaderc_include_type { shaderc_include_type_relative,shaderc_include_type_standard } ; typedef)",
    "insertText": "shaderc_include_result(*shaderc_include_resolve_fn)( void* user_data, const char* requested_source, int type, const char* requesting_source, size_t include_depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*shaderc_include_result_release_fn)( void* user_data, shaderc_include_result* include_result)"
  },
  {
    "label": "shaderc_compile_options_set_include_callbacks()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_include_callbacks(shaderc_compile_options_t options, shaderc_include_resolve_fn resolver, shaderc_include_result_release_fn result_releaser, void* user_data)"
  },
  {
    "label": "shaderc_compile_options_set_suppress_warnings()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_suppress_warnings(shaderc_compile_options_t options)"
  },
  {
    "label": "shaderc_compile_options_set_target_env()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_target_env(shaderc_compile_options_t options, shaderc_target_env target, uint32_t version)"
  },
  {
    "label": "shaderc_compile_options_set_target_spirv()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_target_spirv(shaderc_compile_options_t options, shaderc_spirv_version version)"
  },
  {
    "label": "shaderc_compile_options_set_warnings_as_errors()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_warnings_as_errors(shaderc_compile_options_t options)"
  },
  {
    "label": "shaderc_compile_options_set_limit()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_limit(shaderc_compile_options_t options, shaderc_limit limit, int value)"
  },
  {
    "label": "shaderc_compile_options_set_auto_bind_uniforms()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_auto_bind_uniforms(shaderc_compile_options_t options, bool auto_bind)"
  },
  {
    "label": "shaderc_compile_options_set_auto_combined_image_sampler()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_auto_combined_image_sampler(shaderc_compile_options_t options, bool upgrade)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_io_mapping()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_io_mapping(shaderc_compile_options_t options, bool hlsl_iomap)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_offsets()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_offsets(shaderc_compile_options_t options, bool hlsl_offsets)"
  },
  {
    "label": "shaderc_compile_options_set_binding_base()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_binding_base(shaderc_compile_options_t options, shaderc_uniform_kind kind, uint32_t base)"
  },
  {
    "label": "shaderc_compile_options_set_binding_base_for_stage()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_binding_base_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, shaderc_uniform_kind kind, uint32_t base)"
  },
  {
    "label": "shaderc_compile_options_set_preserve_bindings()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_preserve_bindings(shaderc_compile_options_t options, bool preserve_bindings)"
  },
  {
    "label": "shaderc_compile_options_set_auto_map_locations()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_auto_map_locations(shaderc_compile_options_t options, bool auto_map)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(shaderc_compile_options_t options, shaderc_shader_kind shader_kind, const char* reg, const char* set, const char* binding)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_register_set_and_binding()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_register_set_and_binding(shaderc_compile_options_t options, const char* reg, const char* set, const char* binding)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_functionality1()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_functionality1(shaderc_compile_options_t options, bool enable)"
  },
  {
    "label": "shaderc_compile_options_set_hlsl_16bit_types()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_hlsl_16bit_types(shaderc_compile_options_t options, bool enable)"
  },
  {
    "label": "shaderc_compile_options_set_vulkan_rules_relaxed()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_vulkan_rules_relaxed(shaderc_compile_options_t options, bool enable)"
  },
  {
    "label": "shaderc_compile_options_set_invert_y()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_invert_y(shaderc_compile_options_t options, bool enable)"
  },
  {
    "label": "shaderc_compile_options_set_nan_clamp()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_compile_options_set_nan_clamp(shaderc_compile_options_t options, bool enable)"
  },
  {
    "label": "shaderc_compile_into_spv()",
    "kind": "Method",
    "detail": "Function (typedef struct shaderc_compilation_result* shaderc_compilation_result_t ; SHADERC_EXPORT shaderc_compilation_result_t)",
    "insertText": "shaderc_compile_into_spv(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)"
  },
  {
    "label": "shaderc_compile_into_spv_assembly()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT shaderc_compilation_result_t)",
    "insertText": "shaderc_compile_into_spv_assembly(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)"
  },
  {
    "label": "shaderc_compile_into_preprocessed_text()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT shaderc_compilation_result_t)",
    "insertText": "shaderc_compile_into_preprocessed_text(const shaderc_compiler_t compiler, const char* source_text, size_t source_text_size, shaderc_shader_kind shader_kind, const char* input_file_name, const char* entry_point_name, const shaderc_compile_options_t additional_options)"
  },
  {
    "label": "shaderc_assemble_into_spv()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT shaderc_compilation_result_t)",
    "insertText": "shaderc_assemble_into_spv(const shaderc_compiler_t compiler, const char* source_assembly, size_t source_assembly_size, const shaderc_compile_options_t additional_options)"
  },
  {
    "label": "shaderc_result_release()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_result_release(shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_result_get_length()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT size_t)",
    "insertText": "shaderc_result_get_length(const shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_result_get_num_warnings()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT size_t)",
    "insertText": "shaderc_result_get_num_warnings(const shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_result_get_num_errors()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT size_t)",
    "insertText": "shaderc_result_get_num_errors(const shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_result_get_compilation_status()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT shaderc_compilation_status)",
    "insertText": "shaderc_result_get_compilation_status(const shaderc_compilation_result_t)"
  },
  {
    "label": "shaderc_result_get_bytes()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT const char*)",
    "insertText": "shaderc_result_get_bytes(const shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_result_get_error_message()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT const char*)",
    "insertText": "shaderc_result_get_error_message(const shaderc_compilation_result_t result)"
  },
  {
    "label": "shaderc_get_spv_version()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT void)",
    "insertText": "shaderc_get_spv_version(unsigned int* version, unsigned int* revision)"
  },
  {
    "label": "shaderc_parse_version_profile()",
    "kind": "Method",
    "detail": "Function (SHADERC_EXPORT bool)",
    "insertText": "shaderc_parse_version_profile(const char* str, int* version, shaderc_profile* profile)"
  }
]