[
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "BlockAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockAddress"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "MMIAddrLabelMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MMIAddrLabelMap"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "WinEHFuncInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WinEHFuncInfo"
  },
  {
    "label": "SEHHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEHHandler"
  },
  {
    "label": "LandingPadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LandingPadInfo"
  },
  {
    "label": "MachineModuleInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineModuleInfoImpl"
  },
  {
    "label": "MachineModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineModuleInfo"
  },
  {
    "label": "VariableDbgInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableDbgInfo"
  },
  {
    "label": "LandingPadInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEMODULEINFO_H # define LLVM_CODEGEN_MACHINEMODULEINFO_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Analysis / LibCallSemantics . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / IR / Metadata . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / MC / MCContext . h \" # include \" llvm / MC / MachineLocation . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / Dwarf . h \" namespace llvm { class Constant ; class GlobalVariable ; class BlockAddress ; class MDNode ; class MMIAddrLabelMap ; class MachineBasicBlock ; class MachineFunction ; class Module ; class PointerType ; class StructType ; struct WinEHFuncInfo ; struct SEHHandler { const Function* FilterOrFinally ; const BlockAddress* RecoverBA ; } ; struct LandingPadInfo { MachineBasicBlock* LandingPadBlock ; SmallVector<MCSymbol*,1> BeginLabels ; SmallVector<MCSymbol*,1> EndLabels ; SmallVector<SEHHandler,1> SEHHandlers ; MCSymbol* LandingPadLabel ; const Function* Personality ; std::vector<int> TypeIds ; int WinEHState ;)",
    "insertText": "LandingPadInfo(MachineBasicBlock *MBB) : LandingPadBlock(MBB), LandingPadLabel(nullptr), Personality(nullptr), WinEHState(-1)"
  },
  {
    "label": "MachineModuleInfoImpl()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineModuleInfoImpl { public : typedef PointerIntPair<MCSymbol*,1,bool> StubValueTy ; ~)",
    "insertText": "MachineModuleInfoImpl()"
  },
  {
    "label": "getSortedStubs()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<std::pair<MCSymbol*,StubValueTy>> SymbolListTy ; protected : SymbolListTy)",
    "insertText": "getSortedStubs(DenseMap<MCSymbol*, StubValueTy>&)"
  },
  {
    "label": "VariableDbgInfo()",
    "kind": "Method",
    "detail": "Function (} ; class MachineModuleInfo : public ImmutablePass { MCContext Context ; const Module* TheModule ; MachineModuleInfoImpl* ObjFileMMI ; std::vector<MCCFIInstruction> FrameInstructions ; std::vector<LandingPadInfo> LandingPads ; DenseMap<MCSymbol*,SmallVector<unsigned,4>> LPadToCallSiteMap ; DenseMap<MCSymbol*,unsigned> CallSiteMap ; unsigned CurCallSite ; std::vector<const GlobalValue*> TypeInfos ; std::vector<unsigned> FilterIds ; std::vector<unsigned> FilterEnds ; std::vector<const Function*> Personalities ; MMIAddrLabelMap* AddrLabelSymbols ; bool CallsEHReturn ; bool CallsUnwindInit ; bool DbgInfoAvailable ; bool UsesVAFloatArgument ; bool UsesMorestackAddr ; EHPersonality PersonalityTypeCache ; DenseMap<const Function*,std::unique_ptr<WinEHFuncInfo>> FuncInfoMap ; public : char ID ; struct VariableDbgInfo { const DILocalVariable* Var ; const DIExpression* Expr ; unsigned Slot ; const DILocation* Loc ;)",
    "insertText": "VariableDbgInfo(const DILocalVariable *Var, const DIExpression *Expr, unsigned Slot, const DILocation *Loc) : Var(Var), Expr(Expr), Slot(Slot), Loc(Loc)"
  },
  {
    "label": "MachineModuleInfo()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SmallVector<VariableDbgInfo,4> VariableDbgInfoMapTy ; VariableDbgInfoMapTy VariableDbgInfos ;)",
    "insertText": "MachineModuleInfo()"
  },
  {
    "label": "MachineModuleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachineModuleInfo(const MCAsmInfo &MAI, const MCRegisterInfo &MRI, const MCObjectFileInfo *MOFI)"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doInitialization(Module &)"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization(Module &)"
  },
  {
    "label": "EndFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFunction()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (const MCContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (TheModule = M ; } const Module*)",
    "insertText": "getModule()"
  },
  {
    "label": "getWinEHFuncInfo()",
    "kind": "Method",
    "detail": "Function (WinEHFuncInfo&)",
    "insertText": "getWinEHFuncInfo(const Function *F)"
  },
  {
    "label": "hasWinEHFuncInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasWinEHFuncInfo(const Function *F)"
  },
  {
    "label": "getObjFileInfo()",
    "kind": "Method",
    "detail": "Function (} template<Ty> Ty&)",
    "insertText": "getObjFileInfo()"
  },
  {
    "label": "hasDebugInfo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDebugInfo()"
  },
  {
    "label": "callsEHReturn()",
    "kind": "Method",
    "detail": "Function (DbgInfoAvailable = avail ; } bool)",
    "insertText": "callsEHReturn()"
  },
  {
    "label": "callsUnwindInit()",
    "kind": "Method",
    "detail": "Function (CallsEHReturn = b ; } bool)",
    "insertText": "callsUnwindInit()"
  },
  {
    "label": "usesVAFloatArgument()",
    "kind": "Method",
    "detail": "Function (CallsUnwindInit = b ; } bool)",
    "insertText": "usesVAFloatArgument()"
  },
  {
    "label": "usesMorestackAddr()",
    "kind": "Method",
    "detail": "Function (UsesVAFloatArgument = b ; } bool)",
    "insertText": "usesMorestackAddr()"
  },
  {
    "label": "getFrameInstructions()",
    "kind": "Method",
    "detail": "Function (UsesMorestackAddr = b ; } const std::vector<MCCFIInstruction>&)",
    "insertText": "getFrameInstructions()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (FrameInstructions .)",
    "insertText": "push_back(Inst)"
  },
  {
    "label": "getAddrLabelSymbol()",
    "kind": "Method",
    "detail": "Function (} MCSymbol*)",
    "insertText": "getAddrLabelSymbol(const BasicBlock *BB)"
  },
  {
    "label": "getAddrLabelSymbolToEmit()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<MCSymbol*>)",
    "insertText": "getAddrLabelSymbolToEmit(const BasicBlock *BB)"
  },
  {
    "label": "takeDeletedSymbolsForFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "takeDeletedSymbolsForFunction(const Function *F, std::vector<MCSymbol*> &Result)"
  },
  {
    "label": "getOrCreateLandingPadInfo()",
    "kind": "Method",
    "detail": "Function (LandingPadInfo&)",
    "insertText": "getOrCreateLandingPadInfo(MachineBasicBlock *LandingPad)"
  },
  {
    "label": "addInvoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInvoke(MachineBasicBlock *LandingPad, MCSymbol *BeginLabel, MCSymbol *EndLabel)"
  },
  {
    "label": "addLandingPad()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "addLandingPad(MachineBasicBlock *LandingPad)"
  },
  {
    "label": "addPersonality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPersonality(MachineBasicBlock *LandingPad, const Function *Personality)"
  },
  {
    "label": "addPersonality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPersonality(const Function *Personality)"
  },
  {
    "label": "addWinEHState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addWinEHState(MachineBasicBlock *LandingPad, int State)"
  },
  {
    "label": "getPersonalityIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPersonalityIndex()"
  },
  {
    "label": "getPersonalities()",
    "kind": "Method",
    "detail": "Function (const std::vector<const Function*>&)",
    "insertText": "getPersonalities()"
  },
  {
    "label": "addFilterTypeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addFilterTypeInfo(MachineBasicBlock *LandingPad, ArrayRef<const GlobalValue *> TyInfo)"
  },
  {
    "label": "addCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCleanup(MachineBasicBlock *LandingPad)"
  },
  {
    "label": "addSEHCatchHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSEHCatchHandler(MachineBasicBlock *LandingPad, const Function *Filter, const BlockAddress *RecoverLabel)"
  },
  {
    "label": "addSEHCleanupHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSEHCleanupHandler(MachineBasicBlock *LandingPad, const Function *Cleanup)"
  },
  {
    "label": "getTypeIDFor()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getTypeIDFor(const GlobalValue *TI)"
  },
  {
    "label": "getFilterIDFor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getFilterIDFor(std::vector<unsigned> &TyIds)"
  },
  {
    "label": "TidyLandingPads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TidyLandingPads(DenseMap<MCSymbol*, uintptr_t> *LPMap = nullptr)"
  },
  {
    "label": "getLandingPads()",
    "kind": "Method",
    "detail": "Function (const std::vector<LandingPadInfo>&)",
    "insertText": "getLandingPads()"
  },
  {
    "label": "getCallSiteLandingPad()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<unsigned>&)",
    "insertText": "getCallSiteLandingPad(MCSymbol *Sym)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(hasCallSiteLandingPad(Sym) && \"missing call site number for landing pad!\")"
  },
  {
    "label": "setCallSiteBeginLabel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCallSiteBeginLabel(MCSymbol *BeginLabel, unsigned Site)"
  },
  {
    "label": "getCallSiteBeginLabel()",
    "kind": "Method",
    "detail": "Function (CallSiteMap [ BeginLabel ] = Site ; } unsigned)",
    "insertText": "getCallSiteBeginLabel(MCSymbol *BeginLabel)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(hasCallSiteBeginLabel(BeginLabel) && \"Missing call site number for EH_LABEL!\")"
  },
  {
    "label": "getCurrentCallSite()",
    "kind": "Method",
    "detail": "Function (CurCallSite = Site ; } unsigned)",
    "insertText": "getCurrentCallSite()"
  },
  {
    "label": "getPersonalityType()",
    "kind": "Method",
    "detail": "Function (EHPersonality)",
    "insertText": "getPersonalityType()"
  },
  {
    "label": "setVariableDbgInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVariableDbgInfo(const DILocalVariable *Var, const DIExpression *Expr, unsigned Slot, const DILocation *Loc)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (VariableDbgInfos .)",
    "insertText": "emplace_back(Var, Expr, Slot, Loc)"
  },
  {
    "label": "getVariableDbgInfo()",
    "kind": "Method",
    "detail": "Function (} VariableDbgInfoMapTy&)",
    "insertText": "getVariableDbgInfo()"
  }
]