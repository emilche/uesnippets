[
  {
    "label": "RtcEventRtcpPacketOutgoing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventRtcpPacketOutgoing"
  },
  {
    "label": "RtcEventRtcpPacketOutgoing()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTCP_PACKET_OUTGOING_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTCP_PACKET_OUTGOING_H_ # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" logging / rtc_event_log / events / logged_rtp_rtcp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class RtcEventRtcpPacketOutgoing final : public RtcEvent { public : Type kType = Type::RtcpPacketOutgoing ;)",
    "insertText": "RtcEventRtcpPacketOutgoing(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "RtcEventRtcpPacketOutgoing()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventRtcpPacketOutgoing()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (const rtc::Buffer&)",
    "insertText": "packet()"
  },
  {
    "label": "RtcEventRtcpPacketOutgoing()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventRtcpPacketOutgoing(const RtcEventRtcpPacketOutgoing& other)"
  }
]