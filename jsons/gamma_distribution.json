[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_RT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_GAMMA_DISTRIBUTION_H # define _LIBCPP___RANDOM_GAMMA_DISTRIBUTION_H # include<__config> # include<__random / exponential_distribution . h> # include<__random / is_valid . h> # include<__random / uniform_real_distribution . h> # include<cmath> # include<iosfwd> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _RealType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { result_type __alpha_ ; result_type __beta_ ; public : typedef gamma_distribution distribution_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "param_type(result_type __alpha = 1, result_type __beta = 1) : __alpha_(__alpha), __beta_(__beta)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "alpha()"
  },
  {
    "label": "gamma_distribution()",
    "kind": "Method",
    "detail": "Function (} } ; private : param_type __p_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "gamma_distribution() : gamma_distribution(1)"
  },
  {
    "label": "gamma_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "gamma_distribution(result_type __alpha, result_type __beta = 1) : __p_(param_type(__alpha, __beta))"
  },
  {
    "label": "gamma_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "gamma_distribution(result_type __alpha = 1, result_type __beta = 1) : __p_(param_type(__alpha, __beta))"
  },
  {
    "label": "gamma_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "gamma_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "beta()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const gamma_distribution& __x, const gamma_distribution& __y)"
  },
  {
    "label": "__gen()",
    "kind": "Method",
    "detail": "Function (uniform_real_distribution<result_type>)",
    "insertText": "__gen(0, 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (exponential_distribution<result_type> __egen ; result_type __x ;)",
    "insertText": "if(__a == 1) __x = __egen(__g)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (const result_type __b = __a - 1 ; const result_type __c = 3* __a -)",
    "insertText": "result_type(0.75)"
  },
  {
    "label": "__gen()",
    "kind": "Method",
    "detail": "Function (const result_type __u =)",
    "insertText": "__gen(__g)"
  },
  {
    "label": "__u()",
    "kind": "Method",
    "detail": "Function (const result_type __w =)",
    "insertText": "__u(1 - __u)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const result_type __y =)",
    "insertText": "sqrt(__c / __w) * (__u - result_type(0.5))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__x = __b + __y ;)",
    "insertText": "if(__x >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const result_type __z = 6 4* __w* __w* __w* __v* __v ;)",
    "insertText": "if(__z <= 1 - 2 * __y * __y / __x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "while(true)"
  },
  {
    "label": "__egen()",
    "kind": "Method",
    "detail": "Function (const result_type __es =)",
    "insertText": "__egen(__g)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (__x =)",
    "insertText": "pow(__u, 1 / __a)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} else { const result_type __e = -)",
    "insertText": "log((1-__u)/__a)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (__x =)",
    "insertText": "pow(1 - __a + __a * __e, 1 / __a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _RT> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const gamma_distribution<_RT>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (__os<<__x .)",
    "insertText": "alpha() << __sp << __x.beta()"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef gamma_distribution<_RT> _Eng ; typedef _Eng::result_type result_type ; typedef _Eng::param_type param_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_type __alpha ; result_type __beta ; __is>> __alpha>> __beta ;)",
    "insertText": "if(!__is.fail()) __x.param(param_type(__alpha, __beta))"
  }
]