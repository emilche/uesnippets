[
  {
    "label": "MakePointer_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MakePointer_"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "MakePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakePointer"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "DimInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DimInitializer"
  },
  {
    "label": "are_inner_most_dims",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "are_inner_most_dims"
  },
  {
    "label": "preserve_inner_most_dims",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "preserve_inner_most_dims"
  },
  {
    "label": "GenericDimReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenericDimReducer"
  },
  {
    "label": "InnerMostDimReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerMostDimReducer"
  },
  {
    "label": "InnerMostDimPreserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerMostDimPreserver"
  },
  {
    "label": "FullReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullReducer"
  },
  {
    "label": "FullReducerShard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullReducerShard"
  },
  {
    "label": "InnerReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerReducer"
  },
  {
    "label": "OuterReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OuterReducer"
  },
  {
    "label": "GenericReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenericReducer"
  },
  {
    "label": "ReductionReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReductionReturnType"
  },
  {
    "label": "TensorReductionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorReductionOp"
  },
  {
    "label": "TensorReductionEvaluatorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorReductionEvaluatorBase"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "TensorSycl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorSycl"
  },
  {
    "label": "BlockIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockIteratorState"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_REDUCTION_H # define EIGEN_CXX11_TENSOR_TENSOR_REDUCTION_H # ifndef KERNEL_FRIEND # if)",
    "insertText": "defined(__clang__) && (defined(__CUDA__) || defined(__HIP__))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Op,Dims,XprType,template<class> class MakePointer_> struct traits<TensorReductionOp<Op,Dims,XprType,MakePointer_>> : traits<XprType> { typedef traits<XprType> XprTraits ; typedef XprTraits::Scalar Scalar ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; const int NumDimensions = XprTraits::NumDimensions - array_size<Dims>::value ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; template<class T> struct MakePointer { typedef MakePointer_<T> MakePointerT ; typedef MakePointerT::Type Type ; } ; } ; template<Op,Dims,XprType,template<class> class MakePointer_> struct eval<TensorReductionOp<Op,Dims,XprType,MakePointer_>,Eigen::Dense> { typedef const TensorReductionOp<Op,Dims,XprType,MakePointer_>& type ; } ; template<Op,Dims,XprType,template<class> class MakePointer_> struct nested<TensorReductionOp<Op,Dims,XprType,MakePointer_>,1,eval<TensorReductionOp<Op,Dims,XprType,MakePointer_>>::type> { typedef TensorReductionOp<Op,Dims,XprType,MakePointer_> type ; } ; template<OutputDims> struct DimInitializer { template<InputDims,ReducedDims> EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const InputDims& input_dims, const array<bool, internal::array_size<InputDims>::value>& reduced, OutputDims* output_dims, ReducedDims* reduced_dims)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int NumInputDims = internal::array_size<InputDims>::value ; int outputIndex = 0 ; int reduceIndex = 0 ;)",
    "insertText": "for(int i = 0; i < NumInputDims; ++i)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (+ + reduceIndex ; })",
    "insertText": "else(*output_dims)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (+ + outputIndex ; } } } } ; template<> struct DimInitializer<Sizes<>> { template<InputDims,Index,size_t Rank> EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const InputDims& input_dims, const array<bool, Rank>&, Sizes<>*, array<Index, Rank>* reduced_dims)"
  },
  {
    "label": "ReducedDims()",
    "kind": "Method",
    "detail": "Function (} } } ; template<ReducedDims,int NumTensorDims,int Layout> struct are_inner_most_dims { const bool value = false ; } ; template<ReducedDims,int NumTensorDims,int Layout> struct preserve_inner_most_dims { const bool value = false ; } ; # if EIGEN_HAS_CONSTEXPR&& EIGEN_HAS_VARIADIC_TEMPLATES template<ReducedDims,int NumTensorDims> struct are_inner_most_dims<ReducedDims,NumTensorDims,ColMajor> { const bool tmp1 = indices_statically_known_to_increase<)",
    "insertText": "ReducedDims()"
  },
  {
    "label": "ReducedDims()",
    "kind": "Method",
    "detail": "Function (const bool tmp2 = index_statically_eq<)",
    "insertText": "ReducedDims(0, 0)"
  },
  {
    "label": "ReducedDims()",
    "kind": "Method",
    "detail": "Function (const bool tmp3 = index_statically_eq<)",
    "insertText": "ReducedDims(array_size<ReducedDims>::value-1, array_size<ReducedDims>::value-1)"
  },
  {
    "label": "ReducedDims()",
    "kind": "Method",
    "detail": "Function (const bool tmp2 = index_statically_eq<)",
    "insertText": "ReducedDims(0, NumTensorDims - array_size<ReducedDims>::value)"
  },
  {
    "label": "ReducedDims()",
    "kind": "Method",
    "detail": "Function (const bool tmp3 = index_statically_eq<)",
    "insertText": "ReducedDims(array_size<ReducedDims>::value - 1, NumTensorDims - 1)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (const bool value = tmp1& tmp2 ; } ; # endif template<int DimIndex,Self,Op> struct GenericDimReducer { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(const Self& self, typename Self::Index firstIndex, Op& reducer, typename Self::CoeffReturnType* accum)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((DimIndex > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (const Self::Index input = firstIndex + j* self . m_reducedStrides [ DimIndex ] ; GenericDimReducer<DimIndex - 1,Self,Op)",
    "insertText": "reduce(self, input, reducer, accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (const Self::Index input = firstIndex + j* self . m_reducedStrides [ 0 ] ; reducer .)",
    "insertText": "reduce(self.m_impl.coeff(input), accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Self,Op> struct GenericDimReducer<- 1,Self,Op> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(const Self& self, typename Self::Index index, Op& reducer, typename Self::CoeffReturnType* accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(self.m_impl.coeff(index), accum)"
  },
  {
    "label": "Vectorizable()",
    "kind": "Method",
    "detail": "Function (} } ; template<Self,Op,bool)",
    "insertText": "Vectorizable(Self::InputPacketAccess && Self::ReducerTraits::PacketAccess), bool UseTreeReduction = (!Self::ReducerTraits::IsStateful && !Self::ReducerTraits::IsExactlyAssociative)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Self::CoeffReturnType)",
    "insertText": "reduce(const Self& self, typename Self::Index firstIndex, typename Self::Index numValuesToReduce, Op& reducer)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (Self::CoeffReturnType accum = reducer .)",
    "insertText": "initialize()"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(self.m_impl.coeff(firstIndex + j), &accum)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} return reducer .)",
    "insertText": "finalize(accum)"
  },
  {
    "label": "VectorizedSize()",
    "kind": "Method",
    "detail": "Function (const Self::Index packetSize = internal::unpacket_traits<Self::PacketReturnType>::size ; const Self::Index)",
    "insertText": "VectorizedSize(numValuesToReduce / packetSize)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (Self::PacketReturnType paccum = reducer . template initializePacket<)",
    "insertText": "PacketReturnType()"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(self.m_impl.template packet<Unaligned>(firstIndex + j), &paccum)"
  },
  {
    "label": "finalizeBoth()",
    "kind": "Method",
    "detail": "Function (} return reducer .)",
    "insertText": "finalizeBoth(accum, paccum)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if !)",
    "insertText": "defined(EIGEN_HIPCC)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (const Self::Index half = numValuesToReduce / 2 ; reducer .)",
    "insertText": "reduce(reduce(self, firstIndex, half, reducer), &accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(reduce(self, firstIndex + half, numValuesToReduce - half, reducer), &accum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(typename Self::Index j = 0; j < numValuesToReduce; ++j)"
  },
  {
    "label": "divup()",
    "kind": "Method",
    "detail": "Function (const Self::Index split = packetSize*)",
    "insertText": "divup(firstIndex + divup(numValuesToReduce, typename Self::Index(2)), packetSize)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Self::Index num_left =)",
    "insertText": "mini(split - firstIndex, numValuesToReduce)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(reduce(self, firstIndex, num_left, reducer), &accum)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(reduce(self, split, numValuesToReduce - num_left, reducer), &accum)"
  },
  {
    "label": "UnrollSize()",
    "kind": "Method",
    "detail": "Function (} else { const Self::Index)",
    "insertText": "UnrollSize(numValuesToReduce / (2*packetSize))"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(self.m_impl.template packet<Unaligned>(firstIndex + j + packetSize), &paccum2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(typename Self::Index j = UnrollSize; j < VectorizedSize; j+= packetSize)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reducePacket(self.m_impl.template packet<Unaligned>( firstIndex + j), &paccum)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (} reducer .)",
    "insertText": "reducePacket(paccum2, &paccum)"
  },
  {
    "label": "vectorizable()",
    "kind": "Method",
    "detail": "Function (} } } ; # endif template<int DimIndex,Self,Op,bool)",
    "insertText": "vectorizable(Self::InputPacketAccess && Self::ReducerTraits::PacketAccess)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(const Self&, typename Self::Index, Op&, typename Self::PacketReturnType*)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"should never be called\")"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} } ; template<int DimIndex,Self,Op> struct InnerMostDimPreserver<DimIndex,Self,Op,true> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "reduce(const Self& self, typename Self::Index firstIndex, Op& reducer, typename Self::PacketReturnType* accum)"
  },
  {
    "label": "reducePacket()",
    "kind": "Method",
    "detail": "Function (const Self::Index input = firstIndex + j* self . m_reducedStrides [ 0 ] ; reducer .)",
    "insertText": "reducePacket(self.m_impl.template packet<Unaligned>(input), accum)"
  },
  {
    "label": "Vectorizable()",
    "kind": "Method",
    "detail": "Function (} } ; template<Self,Op,Device,bool)",
    "insertText": "Vectorizable(Self::InputPacketAccess && Self::ReducerTraits::PacketAccess)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (const bool HasOptimizedImplementation = false ; EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Self& self, Op& reducer, const Device&, typename Self::EvaluatorPointerType output)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Self::Index num_coeffs =)",
    "insertText": "array_prod(self.m_impl.dimensions())"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (* output = InnerMostDimReducer<Self,Op,Vectorizable)",
    "insertText": "reduce(self, 0, num_coeffs, reducer)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(const Self& self, typename Self::Index firstIndex, typename Self::Index numValuesToReduce, Op& reducer, typename Self::CoeffReturnType* output)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (* output = InnerMostDimReducer<Self,Op,Vectorizable)",
    "insertText": "reduce(self, firstIndex, numValuesToReduce, reducer)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Self,Op,bool Vectorizable> struct FullReducer<Self,Op,ThreadPoolDevice,Vectorizable> { const bool HasOptimizedImplementation = ! Self::ReducerTraits::IsStateful ; const Index PacketSize = unpacket_traits<Self::PacketReturnType>::size ; void)",
    "insertText": "run(const Self& self, Op& reducer, const ThreadPoolDevice& device, typename Self::CoeffReturnType* output)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (* output = reducer .)",
    "insertText": "finalize(reducer.initialize())"
  },
  {
    "label": "numThreads()",
    "kind": "Method",
    "detail": "Function (const int num_threads = TensorCostModel<ThreadPoolDevice)",
    "insertText": "numThreads(num_coeffs, cost, device.numThreads())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index numblocks = blocksize> 0 ? num_coeffs / blocksize : 0 ;)",
    "insertText": "eigen_assert(num_coeffs >= numblocks * blocksize)"
  },
  {
    "label": "barrier()",
    "kind": "Method",
    "detail": "Function (Barrier)",
    "insertText": "barrier(internal::convert_index<unsigned int>(numblocks))"
  },
  {
    "label": "shards()",
    "kind": "Method",
    "detail": "Function (MaxSizeVector<Self::CoeffReturnType>)",
    "insertText": "shards(numblocks, reducer.initialize())"
  },
  {
    "label": "enqueue_with_barrier()",
    "kind": "Method",
    "detail": "Function (device .)",
    "insertText": "enqueue_with_barrier(&barrier, &FullReducerShard<Self, Op, Vectorizable>::run, self, i * blocksize, blocksize, reducer, &shards[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Self::CoeffReturnType finalShard ;)",
    "insertText": "if(numblocks * blocksize < num_coeffs)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (finalShard = InnerMostDimReducer<Self,Op,Vectorizable)",
    "insertText": "reduce(self, numblocks * blocksize, num_coeffs - numblocks * blocksize, reducer)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} barrier .)",
    "insertText": "Wait()"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (reducer .)",
    "insertText": "reduce(shards[i], &finalShard)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (}* output = reducer .)",
    "insertText": "finalize(finalShard)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<Self,Op,Device> struct InnerReducer { const bool HasOptimizedImplementation = false ; EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Self&, Op&, const Device&, typename Self::CoeffReturnType*, typename Self::Index, typename Self::Index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"Not implemented\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_GPU_FP16) template <typename S, typename R, typename I_> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void ReductionInitFullReduxKernelHalfFloat(R, const S, I_, internal::packet_traits<half>::type*)"
  },
  {
    "label": "FullReductionKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (template<int B,int N,S,R,I_> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "FullReductionKernelHalfFloat(R, const S, I_, half*, internal::packet_traits<half>::type*)"
  },
  {
    "label": "InnerReductionKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (template<int NPT,S,R,I_> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "InnerReductionKernelHalfFloat(R, const S, I_, I_, half*)"
  },
  {
    "label": "InnerReductionKernel()",
    "kind": "Method",
    "detail": "Function (# endif template<int NPT,S,R,I_> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "InnerReductionKernel(R, const S, I_, I_, typename S::CoeffReturnType*)"
  },
  {
    "label": "OuterReductionKernel()",
    "kind": "Method",
    "detail": "Function (template<int NPT,S,R,I_> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "OuterReductionKernel(R, const S, I_, I_, typename S::CoeffReturnType*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif template<Op,CoeffReturnType> struct ReductionReturnType { # if)",
    "insertText": "defined(EIGEN_USE_SYCL) typedef typename remove_const<decltype(std::declval<Op>().initialize())"
  },
  {
    "label": "TensorReductionOp()",
    "kind": "Method",
    "detail": "Function (# else typedef remove_const<CoeffReturnType>::type type ; # endif } ; } template<Op,Dims,XprType,template<class> class MakePointer_> class TensorReductionOp : public TensorBase<TensorReductionOp<Op,Dims,XprType,MakePointer_>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorReductionOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef internal::remove_const<XprType::CoeffReturnType>::type CoeffReturnType ; typedef Eigen::internal::nested<TensorReductionOp>::type Nested ; typedef Eigen::internal::traits<TensorReductionOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorReductionOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorReductionOp(const XprType& expr, const Dims& dims) : m_expr(expr), m_dims(dims)"
  },
  {
    "label": "TensorReductionOp()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorReductionOp(const XprType& expr, const Dims& dims, const Op& reducer) : m_expr(expr), m_dims(dims), m_reducer(reducer)"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const XprType&)",
    "insertText": "expression()"
  },
  {
    "label": "TensorReductionEvaluatorBase()",
    "kind": "Method",
    "detail": "Function (EIGEN_STRONG_INLINE)",
    "insertText": "TensorReductionEvaluatorBase(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_reducer(op.reducer()), m_result(NULL), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumInputDims >= NumReducedDims), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((!ReducingInnerMostDims | !PreservingInnerMostDims | (NumReducedDims == NumInputDims)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_reduced [ i ] = false ; })",
    "insertText": "for(int i = 0; i < NumReducedDims; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op.dims()[i] >= 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op.dims()[i] < NumInputDims)"
  },
  {
    "label": "dims()",
    "kind": "Method",
    "detail": "Function (m_reduced [ op .)",
    "insertText": "dims()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::DimInitializer<Dimensions)",
    "insertText": "run(input_dims, m_reduced, &m_dimensions, &m_reducedDims)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumOutputDims; ++i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; m_fastOutputStrides [ i ] = internal::TensorIntDivisor<)",
    "insertText": "Index(m_outputStrides[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { m_outputStrides [ NumOutputDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumOutputDims - 2; i >= 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(NumInputDims > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (array<Index,NumInputDims> input_strides ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (input_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumInputDims; ++i)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (input_strides [ i ] = input_strides [ i - 1 ]* input_dims [ i - 1 ] ; } } else { input_strides .)",
    "insertText": "back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_reducedStrides [ reduceIndex ] = input_strides [ i ] ; + + reduceIndex ; } else { m_preservedStrides [ outputIndex ] = input_strides [ i ] ; m_output_to_input_dim_map [ outputIndex ] = i ; + + outputIndex ; } } })",
    "insertText": "if(NumOutputDims == 0)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (m_preservedStrides [ 0 ] =)",
    "insertText": "array_prod(input_dims)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (} m_numValuesToReduce = NumOutputDims = = 0 ?)",
    "insertText": "array_prod(input_dims) : (static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool need_assign = false ;)",
    "insertText": "if(!data)"
  },
  {
    "label": "EvaluatorPointerType()",
    "kind": "Method",
    "detail": "Function (m_result = static_cast<)",
    "insertText": "EvaluatorPointerType(m_device.get((CoeffReturnType*)m_device.allocate_temp(sizeof(CoeffReturnType))))"
  },
  {
    "label": "reducer()",
    "kind": "Method",
    "detail": "Function (data = m_result ; need_assign = true ; } Op)",
    "insertText": "reducer(m_reducer)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::FullReducer<Self,Op,Device)",
    "insertText": "run(*this, reducer, m_device, data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (reducing_inner_dims& = m_reduced [ i ] ; } else { reducing_inner_dims& = m_reduced [ NumInputDims - 1 - i ] ; } })",
    "insertText": "if(internal::InnerReducer<Self, Op, Device>::HasOptimizedImplementation && (reducing_inner_dims || ReducingInnerMostDims))"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Index num_values_to_reduce =)",
    "insertText": "array_prod(m_reducedDims)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const Index num_coeffs_to_preserve =)",
    "insertText": "array_prod(m_dimensions)"
  },
  {
    "label": "EvaluatorPointerType()",
    "kind": "Method",
    "detail": "Function (data = static_cast<)",
    "insertText": "EvaluatorPointerType(m_device.get((CoeffReturnType*)m_device.allocate_temp(sizeof(CoeffReturnType) * num_coeffs_to_preserve)))"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate_temp(m_result)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (m_result = NULL ; } return true ; } else {)",
    "insertText": "return(m_result != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (preserving_inner_dims& = m_reduced [ NumInputDims - 1 - i ] ; } else { preserving_inner_dims& = m_reduced [ i ] ; } })",
    "insertText": "if(internal::OuterReducer<Self, Op, Device>::HasOptimizedImplementation && preserving_inner_dims)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if)",
    "insertText": "defined(EIGEN_USE_SYCL) if(RunningOnSycl)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::GenericReducer<Self,Op,Device)",
    "insertText": "run(*this, reducer, m_device, data, num_values_to_reduce, num_coeffs_to_preserve)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} # endif } return true ; } # ifdef EIGEN_USE_THREADS template<EvalSubExprsCallback> EIGEN_STRONG_INLINE void)",
    "insertText": "evalSubExprsIfNeededAsync(EvaluatorPointerType data, EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(NULL, [this, data, done](bool) { done(evalSubExprsIfNeededCommon(data)); })"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType data)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (m_result = NULL ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "num_values_to_reduce()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "num_values_to_reduce(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (internal::GenericDimReducer<NumReducedDims - 1,Self,Op)",
    "insertText": "reduce(*this, firstInput(index), reducer, &accum)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index + PacketSize - 1 < Index(internal::array_prod(dimensions())))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ;)",
    "insertText": "if(ReducingInnerMostDims)"
  },
  {
    "label": "firstInput()",
    "kind": "Method",
    "detail": "Function (const Index firstIndex =)",
    "insertText": "firstInput(index)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (values [ i ] = internal::InnerMostDimReducer<Self,Op)",
    "insertText": "reduce(*this, firstIndex + i * num_values_to_reduce, num_values_to_reduce, reducer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(PreservingInnerMostDims)"
  },
  {
    "label": "innermost_dim()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "innermost_dim(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (internal::InnerMostDimPreserver<NumReducedDims - 1,Self,Op)",
    "insertText": "reduce(*this, firstIndex, reducer, &accum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index + i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} } PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (const double compute_cost = num_values_to_reduce* internal::functor_traits<Op>::Cost ; return m_impl .)",
    "insertText": "costPerCoeff(vectorized) * num_values_to_reduce + TensorOpCost(0, 0, compute_cost, vectorized, PacketSize)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif private : template<int,,> struct internal::GenericDimReducer ; template<,,bool,bool> struct internal::InnerMostDimReducer ; template<int,,,bool> struct internal::InnerMostDimPreserver ; template<S,O,D,bool V> struct internal::FullReducer ; # ifdef EIGEN_USE_THREADS template<S,O,bool V> struct internal::FullReducerShard ; # endif # if)",
    "insertText": "defined(EIGEN_USE_GPU) && (defined(EIGEN_GPUCC)) template <int B, int N, typename S, typename R, typename I_> KERNEL_FRIEND void internal::FullReductionKernel(R, const S, I_, typename S::CoeffReturnType*, unsigned int*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_GPU_FP16) template <typename S, typename R, typename I_> KERNEL_FRIEND void internal::ReductionInitFullReduxKernelHalfFloat(R, const S, I_, internal::packet_traits<Eigen::half>::type*)"
  },
  {
    "label": "FullReductionKernelHalfFloat()",
    "kind": "Method",
    "detail": "Function (template<int B,int N,S,R,I_> KERNEL_FRIEND void)",
    "insertText": "FullReductionKernelHalfFloat(R, const S, I_, half*, internal::packet_traits<Eigen::half>::type*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(EIGEN_USE_SYCL)"
  },
  {
    "label": "firstInput()",
    "kind": "Method",
    "detail": "Function (template<,,> struct internal::GenericReducer ; # endif template<S,O,D> struct internal::InnerReducer ; struct BlockIteratorState { Index input_dim ; Index output_size ; Index output_count ; } ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "firstInput(Index index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_preservedStrides[0] == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (startInput + = index ; } else { startInput + = index* m_preservedStrides [ 0 ] ; } } else {)",
    "insertText": "for(int i = 0; i < NumOutputDims - 1; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_preservedStrides[NumPreservedStrides - 1] == 1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (startInput + = index ; } else { startInput + = index* m_preservedStrides [ NumPreservedStrides - 1 ] ; } } return startInput ; } array<bool,NumInputDims> m_reduced ; Dimensions m_dimensions ; array<Index,NumOutputDims> m_outputStrides ; array<internal::TensorIntDivisor<Index>,NumOutputDims> m_fastOutputStrides ; array<Index,NumPreservedStrides> m_preservedStrides ; array<Index,NumOutputDims> m_output_to_input_dim_map ; Index m_numValuesToReduce ; array<Index,NumReducedDims> m_reducedStrides ; array<Index,NumReducedDims> m_reducedDims ; TensorEvaluator<ArgType,Device> m_impl ; Op m_reducer ; # if)",
    "insertText": "defined(EIGEN_USE_GPU) && (defined(EIGEN_GPUCC))"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const bool RunningOnGPU = false ; # else const bool RunningOnGPU = false ; const bool RunningOnSycl = false ; # endif EvaluatorPointerType m_result ; const Device EIGEN_DEVICE_REF m_device ; } ; template<Op,Dims,ArgType,template<class> class MakePointer_,Device> struct TensorEvaluator<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Device> : public TensorReductionEvaluatorBase<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Device> { typedef TensorReductionEvaluatorBase<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Device> Base ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const typename Base::XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Op,Dims,ArgType,template<class> class MakePointer_> struct TensorEvaluator<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Eigen::SyclDevice> : public TensorReductionEvaluatorBase<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Eigen::SyclDevice> { typedef TensorReductionEvaluatorBase<const TensorReductionOp<Op,Dims,ArgType,MakePointer_>,Eigen::SyclDevice> Base ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const typename Base::XprType& op, const Eigen::SyclDevice& device) : Base(op, device)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Base::CoeffReturnType)",
    "insertText": "coeff(typename Base::Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Base::PacketReturnType)",
    "insertText": "packet(typename Base::Index index)"
  }
]