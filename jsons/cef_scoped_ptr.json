[
  {
    "label": "RefCountedBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedBase"
  },
  {
    "label": "RefCountedThreadSafeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafeBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DefaultDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultDeleter"
  },
  {
    "label": "FreeDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FreeDeleter"
  },
  {
    "label": "IsNotRefCounted",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsNotRefCounted"
  },
  {
    "label": "D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D"
  },
  {
    "label": "scoped_ptr_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_ptr_impl"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "scoped_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_ptr"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_MEMORY_SCOPED_PTR_H_ # define CEF_INCLUDE_BASE_CEF_MEMORY_SCOPED_PTR_H_ # pragma once # if)",
    "insertText": "defined(BASE_MEMORY_SCOPED_PTR_H_) #elif defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "DefaultDeleter()",
    "kind": "Method",
    "detail": "Function (namespace subtle { class RefCountedBase ; class RefCountedThreadSafeBase ; } template<class T> struct DefaultDeleter {)",
    "insertText": "DefaultDeleter()"
  },
  {
    "label": "DefaultDeleter()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "DefaultDeleter(const DefaultDeleter<U>& other)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum { T_must_be_complete =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum { U_must_be_complete =)",
    "insertText": "sizeof(U)"
  },
  {
    "label": "COMPILE_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COMPILE_ASSERT((base::is_convertible<U*, T*>::value), U_ptr_must_implicitly_convert_to_T_ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(T* ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] ptr ; } private : template<U> void)",
    "insertText": "operator()(U* array)"
  },
  {
    "label": "COMPILE_ASSERT()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,int n> struct DefaultDeleter<T [ n ]> {)",
    "insertText": "COMPILE_ASSERT(sizeof(T) == -1, do_not_use_array_with_size_as_type)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FreeDeleter { void)",
    "insertText": "operator()(void* ptr)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(ptr)"
  },
  {
    "label": "scoped_ptr_impl()",
    "kind": "Method",
    "detail": "Function (} } ; namespace cef_internal { template<T> struct IsNotRefCounted { enum { value = ! base::is_convertible<T*,base::subtle::RefCountedBase*>::value&& ! base::is_convertible<T*,base::subtle::RefCountedThreadSafeBase*>::value } ; } ; template<class T,class D> class scoped_ptr_impl { public :)",
    "insertText": "scoped_ptr_impl(T* p) : data_(p)"
  },
  {
    "label": "scoped_ptr_impl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_ptr_impl(T* p, const D& d) : data_(p, d)"
  },
  {
    "label": "scoped_ptr_impl()",
    "kind": "Method",
    "detail": "Function (} template<U,V>)",
    "insertText": "scoped_ptr_impl(scoped_ptr_impl<U, V>* other) : data_(other->release(), other->get_deleter())"
  },
  {
    "label": "TakeState()",
    "kind": "Method",
    "detail": "Function (} template<U,V> void)",
    "insertText": "TakeState(scoped_ptr_impl<U, V>* other)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(other->release())"
  },
  {
    "label": "get_deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_deleter() = other->get_deleter()"
  },
  {
    "label": "scoped_ptr_impl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_ptr_impl()"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "D(data_)(data_.ptr)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "reset(T* p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* old = data_ . ptr ; data_ . ptr = NULL ;)",
    "insertText": "if(old != NULL) static_cast<D&>(data_)(old)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (data_ . ptr = p ; } T*)",
    "insertText": "get()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(static_cast<D&>(data_), static_cast<D&>(p2.data_))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(data_.ptr, p2.data_.ptr)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "release()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (T* old_ptr = data_ . ptr ; data_ . ptr = NULL ; return old_ptr ; } private : template<U,V> class scoped_ptr_impl ; struct Data : public D {)",
    "insertText": "Data(T* ptr_in) : ptr(ptr_in)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(T* ptr_in, const D& other) : D(other), ptr(ptr_in)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} T* ptr ; } ; Data data_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(scoped_ptr_impl)"
  },
  {
    "label": "MOVE_ONLY_TYPE_FOR_CPP_03()",
    "kind": "Method",
    "detail": "Function (} ; } } template<class T,class D = base::DefaultDeleter<T>> class scoped_ptr {)",
    "insertText": "MOVE_ONLY_TYPE_FOR_CPP_03(scoped_ptr, RValue) COMPILE_ASSERT(base::cef_internal::IsNotRefCounted<T>::value, T_is_refcounted_type_and_needs_scoped_refptr)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (public : typedef T element_type ; typedef D deleter_type ;)",
    "insertText": "scoped_ptr() : impl_(NULL)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_ptr(element_type* p) : impl_(p)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_ptr(element_type* p, const D& d) : impl_(p, d)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (} template<U,V>)",
    "insertText": "scoped_ptr(scoped_ptr<U, V> other) : impl_(&other.impl_)"
  },
  {
    "label": "COMPILE_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COMPILE_ASSERT(!base::is_array<U>::value, U_cannot_be_an_array)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_ptr(RValue rvalue) : impl_(&rvalue.object->impl_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U,V> scoped_ptr&)",
    "insertText": "operator(scoped_ptr<U, V> rhs)"
  },
  {
    "label": "TakeState()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "TakeState(&rhs.impl_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "reset(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} element_type&)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(impl_.get() != NULL)"
  },
  {
    "label": "get_deleter()",
    "kind": "Method",
    "detail": "Function (} deleter_type&)",
    "insertText": "get_deleter()"
  },
  {
    "label": "Testable()",
    "kind": "Method",
    "detail": "Function (} private : typedef base::cef_internal::scoped_ptr_impl<element_type,deleter_type> scoped_ptr::* Testable ; public : operator)",
    "insertText": "Testable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const element_type* p)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(scoped_ptr& p2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "swap(p2.impl_)"
  },
  {
    "label": "PassAs()",
    "kind": "Method",
    "detail": "Function (} template<PassAsType> scoped_ptr<PassAsType>)",
    "insertText": "PassAs()"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (} private : template<U,V> class scoped_ptr ; base::cef_internal::scoped_ptr_impl<element_type,deleter_type> impl_ ;)",
    "insertText": "scoped_ptr(int disallow_construction_from_null)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class U> bool)",
    "insertText": "operator(scoped_ptr<U> const& p2)"
  },
  {
    "label": "MOVE_ONLY_TYPE_FOR_CPP_03()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,class D> class scoped_ptr<T [ ],D> {)",
    "insertText": "MOVE_ONLY_TYPE_FOR_CPP_03(scoped_ptr, RValue)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_ptr(element_type* array) : impl_(array)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} scoped_ptr&)",
    "insertText": "operator(RValue rhs)"
  },
  {
    "label": "TakeState()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "TakeState(&rhs.object->impl_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "reset(array)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} element_type&)",
    "insertText": "operator(size_t i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(element_type* array)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} private : enum { type_must_be_complete =)",
    "insertText": "sizeof(element_type)"
  },
  {
    "label": "scoped_ptr()",
    "kind": "Method",
    "detail": "Function (base::cef_internal::scoped_ptr_impl<element_type,deleter_type> impl_ ; template<U>)",
    "insertText": "scoped_ptr(U* array)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (template<U> void)",
    "insertText": "reset(U* array)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(int disallow_reset_from_null)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,class D> void)",
    "insertText": "swap(scoped_ptr<T, D>& p1, scoped_ptr<T, D>& p2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (p1 .)",
    "insertText": "swap(p2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class D> bool)",
    "insertText": "operator(T* p1, const scoped_ptr<T, D>& p2)"
  },
  {
    "label": "make_scoped_ptr()",
    "kind": "Method",
    "detail": "Function (} template<T> scoped_ptr<T>)",
    "insertText": "make_scoped_ptr(T* ptr)"
  }
]