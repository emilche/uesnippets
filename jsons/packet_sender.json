[
  {
    "label": "NetworkTesterPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTesterPacket"
  },
  {
    "label": "TestController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestController"
  },
  {
    "label": "PacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSender"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_NETWORK_TESTER_PACKET_SENDER_H_ # define RTC_TOOLS_NETWORK_TESTER_PACKET_SENDER_H_ # include<memory> # include<string> # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" rtc_base / ignore_wundef . h \" # include \" rtc_base / system / no_unique_address . h \" # ifdef WEBRTC_NETWORK_TESTER_PROTO)",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #include \"rtc_tools/network_tester/network_tester_packet.pb.h\" RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "PacketSender()",
    "kind": "Method",
    "detail": "Function (# else class NetworkTesterPacket ; # endif namespace webrtc { class TestController ; class PacketSender { public :)",
    "insertText": "PacketSender(TestController* test_controller, webrtc::TaskQueueBase* worker_queue, rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> task_safety_flag, const std::string& config_file_path)"
  },
  {
    "label": "PacketSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PacketSender()"
  },
  {
    "label": "PacketSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketSender(const PacketSender&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PacketSender&)",
    "insertText": "operator(const PacketSender&)"
  },
  {
    "label": "StartSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSending()"
  },
  {
    "label": "StopSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSending()"
  },
  {
    "label": "IsSending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSending()"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket()"
  },
  {
    "label": "GetSendIntervalMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetSendIntervalMs()"
  },
  {
    "label": "UpdateTestSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestSetting(size_t packet_size, int64_t send_interval_ms)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : RTC_NO_UNIQUE_ADDRESS SequenceChecker worker_queue_checker_ ; size_t packet_size_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_checker_)"
  }
]