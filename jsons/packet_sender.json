[
  {
    "label": "NetworkTesterPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTesterPacket"
  },
  {
    "label": "TestController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestController"
  },
  {
    "label": "PacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSender"
  },
  {
    "label": "PacketSender()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PacketSender(\n      TestController* test_controller,\n      webrtc::TaskQueueBase* worker_queue,\n      rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> task_safety_flag,\n      const std::string& config_file_path)"
  },
  {
    "label": "StartSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSending()"
  },
  {
    "label": "StopSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSending()"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket()"
  },
  {
    "label": "UpdateTestSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestSetting(size_t packet_size, int64_t send_interval_ms)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (packet_size_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_interval_ms_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sequence_number_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sending_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_checker_)"
  }
]