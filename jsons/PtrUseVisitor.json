[
  {
    "label": "PtrUseVisitorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrUseVisitorBase"
  },
  {
    "label": "PtrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrInfo"
  },
  {
    "label": "UseToVisit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UseToVisit"
  },
  {
    "label": "PtrUseVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrUseVisitor"
  },
  {
    "label": "InstVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstVisitor"
  },
  {
    "label": "PtrInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_PTRUSEVISITOR_H # define LLVM_ANALYSIS_PTRUSEVISITOR_H # include \" llvm / ADT / APInt . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / DataLayout . h \" # include \" llvm / IR / InstVisitor . h \" # include \" llvm / IR / IntrinsicInst . h \" # include \" llvm / Support / Compiler . h \" namespace llvm { namespace detail { class PtrUseVisitorBase { public : class PtrInfo { public :)",
    "insertText": "PtrInfo() : AbortedInfo(nullptr, false), EscapedInfo(nullptr, false)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (AbortedInfo .)",
    "insertText": "setPointer(nullptr)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (AbortedInfo .)",
    "insertText": "setInt(false)"
  },
  {
    "label": "isAborted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAborted()"
  },
  {
    "label": "isEscaped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEscaped()"
  },
  {
    "label": "getAbortingInst()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getAbortingInst()"
  },
  {
    "label": "getEscapingInst()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getEscapingInst()"
  },
  {
    "label": "setAborted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAborted(Instruction *I = nullptr)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (AbortedInfo .)",
    "insertText": "setInt(true)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (AbortedInfo .)",
    "insertText": "setPointer(I)"
  },
  {
    "label": "setEscaped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setEscaped(Instruction *I = nullptr)"
  },
  {
    "label": "setEscapedAndAborted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setEscapedAndAborted(Instruction *I = nullptr)"
  },
  {
    "label": "setEscaped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEscaped(I)"
  },
  {
    "label": "setAborted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAborted(I)"
  },
  {
    "label": "PtrUseVisitorBase()",
    "kind": "Method",
    "detail": "Function (} private : PointerIntPair<Instruction*,1,bool> AbortedInfo,EscapedInfo ; } ; protected : const DataLayout& DL ; PtrInfo PI ; struct UseToVisit { typedef PointerIntPair<Use*,1,bool> UseAndIsOffsetKnownPair ; UseAndIsOffsetKnownPair UseAndIsOffsetKnown ; APInt Offset ; } ; SmallVector<UseToVisit,8> Worklist ; SmallPtrSet<Use*,8> VisitedUses ; Use* U ; bool IsOffsetKnown ; APInt Offset ;)",
    "insertText": "PtrUseVisitorBase(const DataLayout &DL) : DL(DL)"
  },
  {
    "label": "enqueueUsers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enqueueUsers(Instruction &I)"
  },
  {
    "label": "adjustOffsetForGEP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "adjustOffsetForGEP(GetElementPtrInst &GEPI)"
  },
  {
    "label": "PtrUseVisitor()",
    "kind": "Method",
    "detail": "Function (} ; } template<DerivedT> class PtrUseVisitor : protected InstVisitor<DerivedT>,public detail::PtrUseVisitorBase { class InstVisitor<DerivedT> ; typedef InstVisitor<DerivedT> Base ; public :)",
    "insertText": "PtrUseVisitor(const DataLayout &DL) : PtrUseVisitorBase(DL)"
  },
  {
    "label": "visitPtr()",
    "kind": "Method",
    "detail": "Function (} PtrInfo)",
    "insertText": "visitPtr(Instruction &I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I.getType()->isPointerTy())"
  },
  {
    "label": "IntegerType()",
    "kind": "Method",
    "detail": "Function (IntegerType* IntPtrTy = cast<)",
    "insertText": "IntegerType(DL.getIntPtrType(I.getType()))"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (IsOffsetKnown = true ; Offset =)",
    "insertText": "APInt(IntPtrTy->getBitWidth(), 0)"
  },
  {
    "label": "enqueueUsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueueUsers(I)"
  },
  {
    "label": "pop_back_val()",
    "kind": "Method",
    "detail": "Function (UseToVisit ToVisit = Worklist .)",
    "insertText": "pop_back_val()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (U = ToVisit . UseAndIsOffsetKnown .)",
    "insertText": "getPointer()"
  },
  {
    "label": "getInt()",
    "kind": "Method",
    "detail": "Function (IsOffsetKnown = ToVisit . UseAndIsOffsetKnown .)",
    "insertText": "getInt()"
  },
  {
    "label": "Instruction()",
    "kind": "Method",
    "detail": "Function (Instruction* I = cast<)",
    "insertText": "Instruction(U->getUser())"
  },
  {
    "label": "DerivedT()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedT(this)->visit(I)"
  },
  {
    "label": "visitStoreInst()",
    "kind": "Method",
    "detail": "Function (} return PI ; } protected : void)",
    "insertText": "visitStoreInst(StoreInst &SI)"
  },
  {
    "label": "visitBitCastInst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitBitCastInst(BitCastInst &BC)"
  },
  {
    "label": "enqueueUsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueueUsers(BC)"
  },
  {
    "label": "visitPtrToIntInst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitPtrToIntInst(PtrToIntInst &I)"
  },
  {
    "label": "setEscaped()",
    "kind": "Method",
    "detail": "Function (PI .)",
    "insertText": "setEscaped(&I)"
  },
  {
    "label": "visitGetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitGetElementPtrInst(GetElementPtrInst &GEPI)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (IsOffsetKnown = false ; Offset =)",
    "insertText": "APInt()"
  },
  {
    "label": "enqueueUsers()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "enqueueUsers(GEPI)"
  },
  {
    "label": "visitDbgInfoIntrinsic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitDbgInfoIntrinsic(DbgInfoIntrinsic &I)"
  },
  {
    "label": "visitMemIntrinsic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitMemIntrinsic(MemIntrinsic &I)"
  },
  {
    "label": "visitIntrinsicInst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitIntrinsicInst(IntrinsicInst &II)"
  },
  {
    "label": "visitIntrinsicInst()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "visitIntrinsicInst(II)"
  },
  {
    "label": "setEscaped()",
    "kind": "Method",
    "detail": "Function (PI .)",
    "insertText": "setEscaped(CS.getInstruction())"
  },
  {
    "label": "visitCallSite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitCallSite(CS)"
  }
]