[
  {
    "label": "QualityRampUpExperimentListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityRampUpExperimentListener"
  },
  {
    "label": "QualityRampUpExperimentHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityRampUpExperimentHelper"
  },
  {
    "label": "QualityRampUpExperimentListener()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_QUALITY_RAMPUP_EXPERIMENT_HELPER_H_ # define VIDEO_ADAPTATION_QUALITY_RAMPUP_EXPERIMENT_HELPER_H_ # include<memory> # include \" api / scoped_refptr . h \" # include \" api / units / data_rate . h \" # include \" rtc_base / experiments / quality_rampup_experiment . h \" # include \" system_wrappers / include / clock . h \" # include \" video / adaptation / quality_scaler_resource . h \" namespace webrtc { class QualityRampUpExperimentListener { public : ~)",
    "insertText": "QualityRampUpExperimentListener()"
  },
  {
    "label": "OnQualityRampUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQualityRampUp()"
  },
  {
    "label": "CreateIfEnabled()",
    "kind": "Method",
    "detail": "Function (} ; class QualityRampUpExperimentHelper { public : std::unique_ptr<QualityRampUpExperimentHelper>)",
    "insertText": "CreateIfEnabled(QualityRampUpExperimentListener* experiment_listener, Clock* clock)"
  },
  {
    "label": "QualityRampUpExperimentHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QualityRampUpExperimentHelper(const QualityRampUpExperimentHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (QualityRampUpExperimentHelper&)",
    "insertText": "operator(const QualityRampUpExperimentHelper&)"
  },
  {
    "label": "cpu_adapted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cpu_adapted(bool cpu_adapted)"
  },
  {
    "label": "qp_resolution_adaptations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "qp_resolution_adaptations(int qp_adaptations)"
  },
  {
    "label": "ConfigureQualityRampupExperiment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureQualityRampupExperiment(bool reset, absl::optional<uint32_t> pixels, absl::optional<DataRate> max_bitrate)"
  },
  {
    "label": "PerformQualityRampupExperiment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformQualityRampupExperiment(rtc::scoped_refptr<QualityScalerResource> quality_scaler_resource, DataRate bandwidth, DataRate encoder_target_bitrate, absl::optional<DataRate> max_bitrate)"
  },
  {
    "label": "QualityRampUpExperimentHelper()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "QualityRampUpExperimentHelper(QualityRampUpExperimentListener* experiment_listener, Clock* clock, QualityRampupExperiment experiment)"
  }
]