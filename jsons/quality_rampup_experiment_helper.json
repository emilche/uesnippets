[
  {
    "label": "QualityRampUpExperimentListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityRampUpExperimentListener"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "QualityRampUpExperimentHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityRampUpExperimentHelper"
  },
  {
    "label": "CreateIfEnabled()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<QualityRampUpExperimentHelper>)",
    "insertText": "CreateIfEnabled(\n      QualityRampUpExperimentListener* experiment_listener,\n      Clock* clock)"
  },
  {
    "label": "cpu_adapted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cpu_adapted(bool cpu_adapted)"
  },
  {
    "label": "qp_resolution_adaptations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "qp_resolution_adaptations(int qp_adaptations)"
  },
  {
    "label": "ConfigureQualityRampupExperiment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureQualityRampupExperiment(bool reset,\n                                        absl::optional<uint32_t> pixels,\n                                        absl::optional<DataRate> max_bitrate)"
  },
  {
    "label": "PerformQualityRampupExperiment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformQualityRampupExperiment(\n      rtc::scoped_refptr<QualityScalerResource> quality_scaler_resource,\n      DataRate bandwidth,\n      DataRate encoder_target_bitrate,\n      absl::optional<DataRate> max_bitrate)"
  },
  {
    "label": "QualityRampUpExperimentHelper()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "QualityRampUpExperimentHelper(\n      QualityRampUpExperimentListener* experiment_listener,\n      Clock* clock,\n      QualityRampupExperiment experiment)"
  }
]