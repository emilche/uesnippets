[
  {
    "label": "TTiedTupleAdder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTiedTupleAdder"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreTypes . h \" # include \" Templates / Tuple . h \" namespace Algo { namespace Private { template<. . . OutputTypes> struct TTiedTupleAdder { template<TupleType> void)",
    "insertText": "Add(TupleType&& Values)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([](auto& Output, auto&& Value) { Output.Add(Forward<decltype(Value)>(Value)); }, Outputs, Forward<TupleType>(Values))"
  },
  {
    "label": "TieTupleAdd()",
    "kind": "Method",
    "detail": "Function (} TTuple<OutputTypes& . . .> Outputs ; } ; } template<. . . OutputTypes> Private::TTiedTupleAdder<OutputTypes . . .>)",
    "insertText": "TieTupleAdd(OutputTypes&... Outputs)"
  }
]