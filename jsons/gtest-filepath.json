[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_ # define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_ # include \" gtest / internal / gtest - string . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\)"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (namespace internal { class GTEST_API_ FilePath { public :)",
    "insertText": "FilePath() : pathname_(\"\")"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FilePath(const FilePath& rhs) : pathname_(rhs.pathname_)"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FilePath(const std::string& pathname) : pathname_(pathname)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FilePath&)",
    "insertText": "operator(const FilePath& rhs)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(rhs)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (pathname_ = rhs . pathname_ ; } const std::string&)",
    "insertText": "string()"
  },
  {
    "label": "GetCurrentDir()",
    "kind": "Method",
    "detail": "Function (} FilePath)",
    "insertText": "GetCurrentDir()"
  },
  {
    "label": "MakeFileName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "MakeFileName(const FilePath& directory, const FilePath& base_name, int number, const char* extension)"
  },
  {
    "label": "ConcatPaths()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConcatPaths(const FilePath& directory, const FilePath& relative_path)"
  },
  {
    "label": "GenerateUniqueFileName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GenerateUniqueFileName(const FilePath& directory, const FilePath& base_name, const char* extension)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "RemoveTrailingPathSeparator()",
    "kind": "Method",
    "detail": "Function (} FilePath)",
    "insertText": "RemoveTrailingPathSeparator()"
  },
  {
    "label": "RemoveDirectoryName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "RemoveDirectoryName()"
  },
  {
    "label": "RemoveFileName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "RemoveFileName()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "RemoveExtension(const char* extension)"
  },
  {
    "label": "CreateDirectoriesRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoriesRecursively()"
  },
  {
    "label": "CreateFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateFolder()"
  },
  {
    "label": "FileOrDirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileOrDirectoryExists()"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists()"
  },
  {
    "label": "IsDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectory()"
  },
  {
    "label": "IsRootDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootDirectory()"
  },
  {
    "label": "IsAbsolutePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAbsolutePath()"
  },
  {
    "label": "FindLastPathSeparator()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FindLastPathSeparator()"
  }
]