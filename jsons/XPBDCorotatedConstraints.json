[
  {
    "label": "FXPBDCorotatedConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDCorotatedConstraints"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Deformable / ChaosDeformableSolverTypes . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos XPBD Corotated Constraint\"), STAT_ChaosXPBDCorotated, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos XPBD Corotated Constraint Polar Compute\"), STAT_ChaosXPBDCorotatedPolar, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos XPBD Corotated Constraint Det Compute\"), STAT_ChaosXPBDCorotatedDet, STATGROUP_Chaos)"
  },
  {
    "label": "FXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { template<T,ParticleType> class FXPBDCorotatedConstraints { public :)",
    "insertText": "FXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const bool bRecordMetricIn = true, const T& EMesh = (T)10.0, const T& NuMesh = (T).3 ) : bRecordMetric(bRecordMetricIn), MeshConstraints(InMesh)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaArray .)",
    "insertText": "Init((T)0., 2 * MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DmInverse .)",
    "insertText": "Init((T)0., 9 * MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Measure .)",
    "insertText": "Init((T)0., MeshConstraints.Num())"
  },
  {
    "label": "NuMesh()",
    "kind": "Method",
    "detail": "Function (Lambda = EMesh*)",
    "insertText": "NuMesh(((T)1. + NuMesh) * ((T)1. - (T)2. * NuMesh))"
  },
  {
    "label": "EMesh()",
    "kind": "Method",
    "detail": "Function (Mu =)",
    "insertText": "EMesh((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Dm =)",
    "insertText": "DsInit(e, InParticles)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInv = Dm .)",
    "insertText": "Inverse()"
  },
  {
    "label": "DmInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DmInverse(3 * 3) * e + 3 * r + c] = DmInv.GetAt(r, c)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (} } Measure [ e ] = Dm .)",
    "insertText": "Determinant() / (T)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = - Measure [ e ] ; } } DmInverseSave = DmInverse ;)",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "FXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<T>& EMeshArray, const T& NuMesh = (T).3, const bool bRecordMetricIn = false ) : bRecordMetric(bRecordMetricIn), MeshConstraints(InMesh)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int e = 0; e < InMesh.Num(); e++)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (MuElementArray [ e ] = EMeshArray [)",
    "insertText": "e((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "FXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<T>& EMeshArray, const TArray<T>& NuMeshArray, TArray<T>&& AlphaJMeshArray, const FDeformableXPBDCorotatedParams& InParams, const T& NuMesh = (T).3, const bool bRecordMetricIn = false, const bool bDoColoring = true ) : CorotatedParams(InParams), AlphaJArray(MoveTemp(AlphaJMeshArray)), bRecordMetric(bRecordMetricIn), MeshConstraints(InMesh)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (AlphaJArray [)",
    "insertText": "e(T)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (LambdaElementArray [ e ] = EMeshArray [ e ]* NuMeshArray [)",
    "insertText": "e(((T)1. + NuMeshArray[e]) * ((T)1. - (T)2. * NuMeshArray[e]))"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (MuElementArray [ e ] = EMeshArray [)",
    "insertText": "e((T)2. * ((T)1. + NuMeshArray[e]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = - Measure [ e ] ; } } DmInverseSave = DmInverse ;)",
    "insertText": "if(bDoColoring)"
  },
  {
    "label": "FXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FXPBDCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const T GridN = (T).1, const T& EMesh = (T)10.0, const T& NuMesh = (T).3 ) : MeshConstraints(InMesh)"
  },
  {
    "label": "FXPBDCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = - Measure [ e ] ; } } DmInverseSave = DmInverse ; } ~)",
    "insertText": "FXPBDCorotatedConstraints()"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "DsInit(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.GetX(MeshConstraints[e][i + 1])[c] - InParticles.GetX(MeshConstraints[e][0])[c])"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "Ds(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.GetP(MeshConstraints[e][i+1])[c] - InParticles.GetP(MeshConstraints[e][0])[c])"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "F(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "ElementDmInv(const int e)"
  },
  {
    "label": "DmInv()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "DmInv((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (DmInv .)",
    "insertText": "SetAt(r, c, DmInverse[(3 * 3) * e + 3 * r + c])"
  },
  {
    "label": "ElementDmInvSave()",
    "kind": "Method",
    "detail": "Function (} } return DmInv ; } PMatrix<T,3,3>)",
    "insertText": "ElementDmInvSave(const int e)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (DmInv .)",
    "insertText": "SetAt(r, c, DmInverseSave[(3 * 3) * e + 3 * r + c])"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } return DmInv ; } void)",
    "insertText": "Init()"
  },
  {
    "label": "Lambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambdas(T)"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyInSerial(ParticleType& Particles, const T Dt, const int32 ElementIndex)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedApplySingle)"
  },
  {
    "label": "GetPolarDelta()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> PolarDelta =)",
    "insertText": "GetPolarDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "GetDeterminantDelta()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> DetDelta =)",
    "insertText": "GetDeterminantDelta(Particles, Dt, ElementIndex)"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyInSerial(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ChaosXPBDCorotated)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedApplySerial)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintColorNum = ConstraintsPerColorStartIndex .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 ColorStart = ConstraintsPerColorStartIndex [ ConstraintColorIndex ] ; const int32 ColorSize = ConstraintsPerColorStartIndex [ ConstraintColorIndex + 1 ] - ColorStart ;)",
    "insertText": "for(int32 Index = 0; Index < ColorSize; Index++)"
  },
  {
    "label": "ApplyInSerial()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintIndex = ColorStart + Index ;)",
    "insertText": "ApplyInSerial(Particles, Dt, ConstraintIndex)"
  },
  {
    "label": "ApplyInParallel()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ApplyInParallel(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (GError .)",
    "insertText": "Init((T)0., 3 * Particles.Size())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedApply)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 ColorStart = ConstraintsPerColorStartIndex [ ConstraintColorIndex ] ; const int32 ColorSize = ConstraintsPerColorStartIndex [ ConstraintColorIndex + 1 ] - ColorStart ; int32 NumBatch = ColorSize / CorotatedParams . XPBDCorotatedBatchSize ;)",
    "insertText": "if(ColorSize % CorotatedParams.XPBDCorotatedBatchSize != 0)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (NumBatch + = 1 ; })",
    "insertText": "PhysicsParallelFor(NumBatch, [&](const int32 BatchIndex) { for (int32 BatchSubIndex = 0; BatchSubIndex < CorotatedParams.XPBDCorotatedBatchSize; BatchSubIndex++) { int32 TaskIndex = CorotatedParams.XPBDCorotatedBatchSize * BatchIndex + BatchSubIndex; const int32 ConstraintIndex = ColorStart + TaskIndex; if (ConstraintIndex < ColorStart + ColorSize) { ApplyInSerial(Particles, Dt, ConstraintIndex); } } }, NumBatch < CorotatedParams.XPBDCorotatedBatchThreshold)"
  },
  {
    "label": "GetPolarGradient()",
    "kind": "Method",
    "detail": "Function (} } } } TVec4<TVector<T,3>>)",
    "insertText": "GetPolarGradient(const PMatrix<T, 3, 3>& Fe, const PMatrix<T, 3, 3>& Re, const PMatrix<T, 3, 3>& DmInvT, const T C1)"
  },
  {
    "label": "dC1()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>>)",
    "insertText": "dC1(TVector<T, 3>((T)0.))"
  },
  {
    "label": "DmInvT()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> A =)",
    "insertText": "DmInvT(Fe - Re)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dC1 [ 0 ] [ alpha ] - = A .)",
    "insertText": "GetAt(alpha, l)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int ie = 0; ie < 3; ie++)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dC1 [ ie + 1 ] [ alpha ] = A .)",
    "insertText": "GetAt(alpha, ie)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(C1 != 0)"
  },
  {
    "label": "GetDeterminantGradient()",
    "kind": "Method",
    "detail": "Function (dC1 [ i ] [ j ] / = C1 ; } } } return dC1 ; } TVec4<TVector<T,3>>)",
    "insertText": "GetDeterminantGradient(const PMatrix<T, 3, 3>& Fe, const PMatrix<T, 3, 3>& DmInvT)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedGetDetGradient)"
  },
  {
    "label": "dC2()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>>)",
    "insertText": "dC2(TVector<T, 3>((T)0.))"
  },
  {
    "label": "JFinvT()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "JFinvT((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 0, Fe.GetAt(1, 1) * Fe.GetAt(2, 2) - Fe.GetAt(2, 1) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 1, Fe.GetAt(2, 0) * Fe.GetAt(1, 2) - Fe.GetAt(1, 0) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 2, Fe.GetAt(1, 0) * Fe.GetAt(2, 1) - Fe.GetAt(2, 0) * Fe.GetAt(1, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 0, Fe.GetAt(2, 1) * Fe.GetAt(0, 2) - Fe.GetAt(0, 1) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 1, Fe.GetAt(0, 0) * Fe.GetAt(2, 2) - Fe.GetAt(2, 0) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 2, Fe.GetAt(2, 0) * Fe.GetAt(0, 1) - Fe.GetAt(0, 0) * Fe.GetAt(2, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 0, Fe.GetAt(0, 1) * Fe.GetAt(1, 2) - Fe.GetAt(1, 1) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 1, Fe.GetAt(1, 0) * Fe.GetAt(0, 2) - Fe.GetAt(0, 0) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 2, Fe.GetAt(0, 0) * Fe.GetAt(1, 1) - Fe.GetAt(1, 0) * Fe.GetAt(0, 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "ModifyDmInverseFromFiberLength()",
    "kind": "Method",
    "detail": "Function (} } return dC2 ; } void)",
    "insertText": "ModifyDmInverseFromFiberLength(const int32 e, const T L, const PMatrix<T, 3, 3>& MFiberDir, const T ContractionVolumeScale)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TEXT(\"STAT_ChaosXPBDCorotatedModifyDmInverseFromFiberLength\"))"
  },
  {
    "label": "ElementDmInvSave()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInv =)",
    "insertText": "ElementDmInvSave(e)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "D(1 / L, FMath::Pow(L, ContractionVolumeScale/T(2)), FMath::Pow(L, ContractionVolumeScale/T(2)))"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Factor = MFiberDir* D* MFiberDir .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DmInv = Factor* DmInv ; })",
    "insertText": "for(int r = 0; r < 3; r++)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "InitColor(const ParticleType& Particles)"
  },
  {
    "label": "ComputeGraphColoring()",
    "kind": "Method",
    "detail": "Function ({ const TArray<TArray<int32>> ConstraintsPerColor =)",
    "insertText": "ComputeGraphColoring(MeshConstraints, Particles)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<TVec4<int32>> ReorderedConstraints ; TArray<T> ReorderedMeasure ; TArray<T> ReorderedDmInverse ; TArray<int32> OrigToReorderedIndices ; ReorderedConstraints .)",
    "insertText": "SetNumUninitialized(MeshConstraints.Num())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ReorderedMeasure .)",
    "insertText": "SetNumUninitialized(Measure.Num())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ReorderedDmInverse .)",
    "insertText": "SetNumUninitialized(DmInverse.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Reset(ConstraintsPerColor.Num() + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ReorderedIndex = 0 ;)",
    "insertText": "for(const TArray<int32>& ConstraintsBatch : ConstraintsPerColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Add(ReorderedIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 OrigIndex = BatchConstraint ; ReorderedConstraints [ ReorderedIndex ] = MeshConstraints [ OrigIndex ] ; ReorderedMeasure [ ReorderedIndex ] = Measure [ OrigIndex ] ;)",
    "insertText": "for(int32 kk = 0; kk < 9; kk++)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MeshConstraints =)",
    "insertText": "MoveTemp(ReorderedConstraints)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Measure =)",
    "insertText": "MoveTemp(ReorderedMeasure)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (DmInverse =)",
    "insertText": "MoveTemp(ReorderedDmInverse)"
  },
  {
    "label": "GetDeterminantDelta()",
    "kind": "Method",
    "detail": "Function (} } TVec4<TVector<T,3>>)",
    "insertText": "GetDeterminantDelta(const ParticleType& Particles, const T Dt, const int32 ElementIndex, const T Tol = (T)1e-3)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedApplyDet)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const PMatrix<T,3,3> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInvT =)",
    "insertText": "ElementDmInv(ElementIndex).GetTransposed()"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (T J = Fe .)",
    "insertText": "Determinant()"
  },
  {
    "label": "GetDeterminantGradient()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>> dC2 =)",
    "insertText": "GetDeterminantGradient(Fe, DmInvT)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)2. / (Dt * Dt * LambdaElementArray[ElementIndex] * Measure[ElementIndex])"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlphaTilde(T)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bRecordMetric)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HError + = J - 1 + AlphaTilde* LambdaArray [ 2* ElementIndex + 1 ] ;)",
    "insertText": "for(int32 ie = 0; ie < 4; ie++)"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (GError [ MeshConstraints [ ElementIndex ] [ ie ]* 3 + Alpha ] - = dC2 [ ie ] [ Alpha ]* LambdaArray [ 2* ElementIndex + 1 ] ; } } HErrorArray [ 2* ElementIndex + 1 ] = J - 1 + AlphaTilde* LambdaArray [ 2* ElementIndex + 1 ] ; } T)",
    "insertText": "DLambda(AlphaJArray[ElementIndex] - J)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T Denom = AlphaTilde ;)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (Denom + = dC2 [ i ] [ j ]* Particles .)",
    "insertText": "InvM(MeshConstraints[ElementIndex][i])"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} } DLambda / = Denom ; LambdaArray [ 2* ElementIndex + 1 ] + = DLambda ; TVec4<TVector<T,3>>)",
    "insertText": "Delta(TVector<T, 3>((T)0.))"
  },
  {
    "label": "GetPolarDelta()",
    "kind": "Method",
    "detail": "Function (} } return Delta ; } TVec4<TVector<T,3>>)",
    "insertText": "GetPolarDelta(const ParticleType& Particles, const T Dt, const int32 ElementIndex, const T Tol = (T)1e-3)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDCorotatedApplyPolar)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ChaosXPBDCorotatedPolar)"
  },
  {
    "label": "Re()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Re((T)0.), Se((T)0.)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(Fe, Re, Se)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Re* =)",
    "insertText": "Pow(AlphaJArray[ElementIndex], (T)1. / (T)3.)"
  },
  {
    "label": "C1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C1(T)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (C1 + =)",
    "insertText": "Square((Fe - Re).GetAt(i, j))"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} } C1 =)",
    "insertText": "Sqrt(C1)"
  },
  {
    "label": "GetPolarGradient()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> dC1 =)",
    "insertText": "GetPolarGradient(Fe, Re, DmInvT, C1)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)1. / (Dt * Dt * MuElementArray[ElementIndex] * Measure[ElementIndex])"
  }
]