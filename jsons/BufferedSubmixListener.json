[
  {
    "label": "FBufferedSubmixListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferedSubmixListener"
  },
  {
    "label": "FBufferedSubmixListener()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BufferedListenerBase . h \" # include \" ISubmixBufferListener . h \" class FBufferedSubmixListener : public ISubmixBufferListener,public FBufferedListenerBase { public :)",
    "insertText": "FBufferedSubmixListener(int32 InDefaultCircularBufferSize, bool bInZeroInputBuffer, const FString* InName)"
  },
  {
    "label": "FBufferedSubmixListener()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBufferedSubmixListener()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(FAudioDevice* InDevice)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(FAudioDevice* InDevice)"
  },
  {
    "label": "RegisterWithAudioDevice()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterWithAudioDevice(FAudioDevice* InDevice)"
  },
  {
    "label": "UnregsiterWithAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregsiterWithAudioDevice(FAudioDevice* InDevice)"
  },
  {
    "label": "OnNewSubmixBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewSubmixBuffer(const USoundSubmix* OwningSubmix, float* AudioData, int32 InNumSamples, int32 InNumChannels, const int32 InSampleRate, double)"
  },
  {
    "label": "GetListenerName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetListenerName()"
  }
]