[
  {
    "label": "UCollator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UCollator"
  },
  {
    "label": "ucol_open()",
    "kind": "Method",
    "detail": "Function (# ifndef UCOL_H # define UCOL_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_COLLATION # include \" unicode / unorm . h \" # include \" unicode / localpointer . h \" # include \" unicode / parseerr . h \" # include \" unicode / uloc . h \" # include \" unicode / uset . h \" # include \" unicode / uscript . h \" struct UCollator ; typedef struct UCollator UCollator ; typedef enum { UCOL_EQUAL = 0,UCOL_GREATER = 1,UCOL_LESS = - 1 } UCollationResult ; typedef enum { UCOL_DEFAULT = - 1,UCOL_PRIMARY = 0,UCOL_SECONDARY = 1,UCOL_TERTIARY = 2,UCOL_DEFAULT_STRENGTH = UCOL_TERTIARY,UCOL_CE_STRENGTH_LIMIT,UCOL_QUATERNARY = 3,UCOL_IDENTICAL = 1 5,UCOL_STRENGTH_LIMIT,UCOL_OFF = 1 6,UCOL_ON = 1 7,UCOL_SHIFTED = 2 0,UCOL_NON_IGNORABLE = 2 1,UCOL_LOWER_FIRST = 2 4,UCOL_UPPER_FIRST = 2 5,# ifndef UCOL_ATTRIBUTE_VALUE_COUNT # endif } UColAttributeValue ; typedef enum { UCOL_REORDER_CODE_DEFAULT = - 1,UCOL_REORDER_CODE_NONE = USCRIPT_UNKNOWN,UCOL_REORDER_CODE_OTHERS = USCRIPT_UNKNOWN,UCOL_REORDER_CODE_SPACE = 0 x1000,UCOL_REORDER_CODE_FIRST = UCOL_REORDER_CODE_SPACE,UCOL_REORDER_CODE_PUNCTUATION = 0 x1001,UCOL_REORDER_CODE_SYMBOL = 0 x1002,UCOL_REORDER_CODE_CURRENCY = 0 x1003,UCOL_REORDER_CODE_DIGIT = 0 x1004,# ifndef UCOL_REORDER_CODE_LIMIT = 0 x1005 # endif } UColReorderCode ; typedef UColAttributeValue UCollationStrength ; typedef enum { UCOL_FRENCH_COLLATION,UCOL_ALTERNATE_HANDLING,UCOL_CASE_FIRST,UCOL_CASE_LEVEL,UCOL_NORMALIZATION_MODE,UCOL_DECOMPOSITION_MODE = UCOL_NORMALIZATION_MODE,UCOL_STRENGTH,# ifndef UCOL_HIRAGANA_QUATERNARY_MODE = UCOL_STRENGTH + 1,# endif UCOL_NUMERIC_COLLATION = UCOL_STRENGTH + 2,UCOL_ATTRIBUTE_COUNT } UColAttribute ; typedef enum { UCOL_TAILORING_ONLY,UCOL_FULL_RULES } UColRuleOption ; U_STABLE UCollator* U_EXPORT2)",
    "insertText": "ucol_open(const char *loc, UErrorCode *status)"
  },
  {
    "label": "ucol_openRules()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCollator* U_EXPORT2)",
    "insertText": "ucol_openRules(const UChar *rules, int32_t rulesLength, UColAttributeValue normalizationMode, UCollationStrength strength, UParseError *parseError, UErrorCode *status)"
  },
  {
    "label": "ucol_openFromShortString()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED UCollator* U_EXPORT2)",
    "insertText": "ucol_openFromShortString(const char *definition, UBool forceDefaults, UParseError *parseError, UErrorCode *status)"
  },
  {
    "label": "ucol_getContractions()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "ucol_getContractions(const UCollator *coll, USet *conts, UErrorCode *status)"
  },
  {
    "label": "ucol_getContractionsAndExpansions()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE void U_EXPORT2)",
    "insertText": "ucol_getContractionsAndExpansions(const UCollator *coll, USet *contractions, USet *expansions, UBool addPrefixes, UErrorCode *status)"
  },
  {
    "label": "ucol_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_close(UCollator *coll)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUCollatorPointer, UCollator, ucol_close)"
  },
  {
    "label": "ucol_strcoll()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE UCollationResult U_EXPORT2)",
    "insertText": "ucol_strcoll(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)"
  },
  {
    "label": "ucol_strcollUTF8()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCollationResult U_EXPORT2)",
    "insertText": "ucol_strcollUTF8(const UCollator *coll, const char *source, int32_t sourceLength, const char *target, int32_t targetLength, UErrorCode *status)"
  },
  {
    "label": "ucol_greater()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucol_greater(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)"
  },
  {
    "label": "ucol_greaterOrEqual()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucol_greaterOrEqual(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)"
  },
  {
    "label": "ucol_equal()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucol_equal(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)"
  },
  {
    "label": "ucol_strcollIter()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCollationResult U_EXPORT2)",
    "insertText": "ucol_strcollIter(const UCollator *coll, UCharIterator *sIter, UCharIterator *tIter, UErrorCode *status)"
  },
  {
    "label": "ucol_getStrength()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCollationStrength U_EXPORT2)",
    "insertText": "ucol_getStrength(const UCollator *coll)"
  },
  {
    "label": "ucol_setStrength()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_setStrength(UCollator *coll, UCollationStrength strength)"
  },
  {
    "label": "ucol_getReorderCodes()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getReorderCodes(const UCollator* coll, int32_t* dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucol_setReorderCodes()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_setReorderCodes(UCollator* coll, const int32_t* reorderCodes, int32_t reorderCodesLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucol_getEquivalentReorderCodes()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getEquivalentReorderCodes(int32_t reorderCode, int32_t* dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucol_getDisplayName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getDisplayName(const char *objLoc, const char *dispLoc, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "ucol_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucol_getAvailable(int32_t localeIndex)"
  },
  {
    "label": "ucol_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_countAvailable(void)"
  },
  {
    "label": "ucol_openAvailableLocales()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_SERVICE U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucol_openAvailableLocales(UErrorCode *status)"
  },
  {
    "label": "ucol_getKeywords()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucol_getKeywords(UErrorCode *status)"
  },
  {
    "label": "ucol_getKeywordValues()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucol_getKeywordValues(const char *keyword, UErrorCode *status)"
  },
  {
    "label": "ucol_getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucol_getKeywordValuesForLocale(const char* key, const char* locale, UBool commonlyUsed, UErrorCode* status)"
  },
  {
    "label": "ucol_getFunctionalEquivalent()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getFunctionalEquivalent(char* result, int32_t resultCapacity, const char* keyword, const char* locale, UBool* isAvailable, UErrorCode* status)"
  },
  {
    "label": "ucol_getRules()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "ucol_getRules(const UCollator *coll, int32_t *length)"
  },
  {
    "label": "ucol_getShortDefinitionString()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "ucol_getShortDefinitionString(const UCollator *coll, const char *locale, char *buffer, int32_t capacity, UErrorCode *status)"
  },
  {
    "label": "ucol_normalizeShortDefinitionString()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "ucol_normalizeShortDefinitionString(const char *source, char *destination, int32_t capacity, UParseError *parseError, UErrorCode *status)"
  },
  {
    "label": "ucol_getSortKey()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getSortKey(const UCollator *coll, const UChar *source, int32_t sourceLength, uint8_t *result, int32_t resultLength)"
  },
  {
    "label": "ucol_nextSortKeyPart()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_nextSortKeyPart(const UCollator *coll, UCharIterator *iter, uint32_t state[2], uint8_t *dest, int32_t count, UErrorCode *status)"
  },
  {
    "label": "ucol_getBound()",
    "kind": "Method",
    "detail": "Function (typedef enum { UCOL_BOUND_LOWER = 0,UCOL_BOUND_UPPER = 1,UCOL_BOUND_UPPER_LONG = 2,# ifndef UCOL_BOUND_VALUE_COUNT # endif } UColBoundMode ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getBound(const uint8_t *source, int32_t sourceLength, UColBoundMode boundType, uint32_t noOfLevels, uint8_t *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "ucol_getVersion()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_getVersion(const UCollator* coll, UVersionInfo info)"
  },
  {
    "label": "ucol_getUCAVersion()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_getUCAVersion(const UCollator* coll, UVersionInfo info)"
  },
  {
    "label": "ucol_mergeSortkeys()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_mergeSortkeys(const uint8_t *src1, int32_t src1Length, const uint8_t *src2, int32_t src2Length, uint8_t *dest, int32_t destCapacity)"
  },
  {
    "label": "ucol_setAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_setAttribute(UCollator *coll, UColAttribute attr, UColAttributeValue value, UErrorCode *status)"
  },
  {
    "label": "ucol_getAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE UColAttributeValue U_EXPORT2)",
    "insertText": "ucol_getAttribute(const UCollator *coll, UColAttribute attr, UErrorCode *status)"
  },
  {
    "label": "ucol_setMaxVariable()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucol_setMaxVariable(UCollator *coll, UColReorderCode group, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucol_getMaxVariable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UColReorderCode U_EXPORT2)",
    "insertText": "ucol_getMaxVariable(const UCollator *coll)"
  },
  {
    "label": "ucol_setVariableTop()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED uint32_t U_EXPORT2)",
    "insertText": "ucol_setVariableTop(UCollator *coll, const UChar *varTop, int32_t len, UErrorCode *status)"
  },
  {
    "label": "ucol_getVariableTop()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE uint32_t U_EXPORT2)",
    "insertText": "ucol_getVariableTop(const UCollator *coll, UErrorCode *status)"
  },
  {
    "label": "ucol_restoreVariableTop()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED void U_EXPORT2)",
    "insertText": "ucol_restoreVariableTop(UCollator *coll, const uint32_t varTop, UErrorCode *status)"
  },
  {
    "label": "ucol_safeClone()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UCollator* U_EXPORT2)",
    "insertText": "ucol_safeClone(const UCollator *coll, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)"
  },
  {
    "label": "ucol_getRulesEx()",
    "kind": "Method",
    "detail": "Function (# ifndef # define U_COL_SAFECLONE_BUFFERSIZE 1 # endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_getRulesEx(const UCollator *coll, UColRuleOption delta, UChar *buffer, int32_t bufferLen)"
  },
  {
    "label": "ucol_getLocale()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED const char* U_EXPORT2)",
    "insertText": "ucol_getLocale(const UCollator *coll, ULocDataLocaleType type, UErrorCode *status)"
  },
  {
    "label": "ucol_getLocaleByType()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE const char* U_EXPORT2)",
    "insertText": "ucol_getLocaleByType(const UCollator *coll, ULocDataLocaleType type, UErrorCode *status)"
  },
  {
    "label": "ucol_getTailoredSet()",
    "kind": "Method",
    "detail": "Function (U_STABLE USet* U_EXPORT2)",
    "insertText": "ucol_getTailoredSet(const UCollator *coll, UErrorCode *status)"
  },
  {
    "label": "ucol_getUnsafeSet()",
    "kind": "Method",
    "detail": "Function (# ifndef U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "ucol_getUnsafeSet(const UCollator *coll, USet *unsafe, UErrorCode *status)"
  },
  {
    "label": "ucol_prepareShortStringOpen()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL void U_EXPORT2)",
    "insertText": "ucol_prepareShortStringOpen(const char *definition, UBool forceDefaults, UParseError *parseError, UErrorCode *status)"
  },
  {
    "label": "ucol_cloneBinary()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucol_cloneBinary(const UCollator *coll, uint8_t *buffer, int32_t capacity, UErrorCode *status)"
  },
  {
    "label": "ucol_openBinary()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCollator* U_EXPORT2)",
    "insertText": "ucol_openBinary(const uint8_t *bin, int32_t length, const UCollator *base, UErrorCode *status)"
  }
]