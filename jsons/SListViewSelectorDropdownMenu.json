[
  {
    "label": "SListViewSelectorDropdownMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListViewSelectorDropdownMenu"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Input / SSearchBox . h \" template<ListType> class SListViewSelectorDropdownMenu : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SListViewSelectorDropdownMenu)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, TSharedPtr<SSearchBox> InDefaultFocusWidget, TSharedPtr< SListView< ListType > > InTargetListView)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetListView = InTargetListView ; DefaultFocusWidget = InDefaultFocusWidget ;)",
    "insertText": "if(DefaultFocusWidget.IsValid())"
  },
  {
    "label": "SetOnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (InDefaultFocusWidget ->)",
    "insertText": "SetOnKeyDownHandler(FOnKeyDown::CreateSP(this, &SListViewSelectorDropdownMenu<ListType>::OnKeyDown))"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} this -> ChildSlot [ InArgs . _Content . Widget ] ; } FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SListView<ListType>> TargetListViewPtr = TargetListView .)",
    "insertText": "Pin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(KeyEvent.GetKey() == EKeys::Enter)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (TargetListViewPtr ->)",
    "insertText": "SetSelection(TargetListViewPtr->GetSelectedItems()[0])"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply Reply = DefaultFocusWidgetPtr ->)",
    "insertText": "OnKeyDown(FindChildGeometry(MyGeometry, TargetListViewPtr.ToSharedRef()), KeyEvent)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetUserFocus(DefaultFocusWidgetPtr.ToSharedRef(), EFocusCause::OtherWidgetLostFocus)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } return)",
    "insertText": "Unhandled()"
  }
]