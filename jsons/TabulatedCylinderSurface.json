[
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FTabulatedCylinderSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / Surface . h \" # include \" Math / Point . h \" namespace UE::CADKernel { class FCurve ; class FTabulatedCylinderSurface : public FSurface { FEntity ; protected : TSharedPtr<FCurve> GuideCurve ; FPoint DirectorVector ;)",
    "insertText": "FTabulatedCylinderSurface(const double InToleranceGeometric, TSharedPtr<FCurve> InGuideCurve, const FPoint& InDirectorVector, double InVMin = 0., double InVMax = 1.) : FSurface(InToleranceGeometric, 0.0, 1.0, InVMin, InVMax) , GuideCurve(InGuideCurve) , DirectorVector(InDirectorVector)"
  },
  {
    "label": "ComputeDefaultMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDefaultMinToleranceIso()"
  },
  {
    "label": "FTabulatedCylinderSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTabulatedCylinderSurface()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, GuideCurve)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (Ar<<DirectorVector ; } void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& Coordinates, FSurfacicSampling& OutPoints, bool bComputeNormals = false)"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinesNotDerivables(const FSurfacicBoundary& Bounds, int32 InDerivativeOrder, FCoordinateGrid& OutNotDerivables)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  }
]