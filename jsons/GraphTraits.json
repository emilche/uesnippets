[
  {
    "label": "GraphType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphType"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "Inverse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Inverse"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_GRAPHTRAITS_H # define LLVM_ADT_GRAPHTRAITS_H namespace llvm { template<class GraphType> struct GraphTraits { typedef GraphType::UnknownGraphTypeError NodeType ; } ; template<class GraphType> struct Inverse { const GraphType& Graph ;)",
    "insertText": "Inverse(const GraphType &G) : Graph(G)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct GraphTraits<Inverse<Inverse<T>>> { typedef GraphTraits<T>::NodeType NodeType ; typedef GraphTraits<T>::ChildIteratorType ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(Inverse<Inverse<T> > *G)"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_begin(NodeType* N)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType* N)"
  }
]