[
  {
    "label": "ISteamUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamUser"
  },
  {
    "label": "SteamServersConnected_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamServersConnected_t"
  },
  {
    "label": "SteamServerConnectFailure_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamServerConnectFailure_t"
  },
  {
    "label": "SteamServersDisconnected_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamServersDisconnected_t"
  },
  {
    "label": "ClientGameServerDeny_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClientGameServerDeny_t"
  },
  {
    "label": "IPCFailure_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPCFailure_t"
  },
  {
    "label": "EFailureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFailureType"
  },
  {
    "label": "LicensesUpdated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LicensesUpdated_t"
  },
  {
    "label": "ValidateAuthTicketResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidateAuthTicketResponse_t"
  },
  {
    "label": "MicroTxnAuthorizationResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MicroTxnAuthorizationResponse_t"
  },
  {
    "label": "EncryptedAppTicketResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncryptedAppTicketResponse_t"
  },
  {
    "label": "GetAuthSessionTicketResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetAuthSessionTicketResponse_t"
  },
  {
    "label": "GameWebCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameWebCallback_t"
  },
  {
    "label": "StoreAuthURLResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StoreAuthURLResponse_t"
  },
  {
    "label": "MarketEligibilityResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MarketEligibilityResponse_t"
  },
  {
    "label": "DurationControl_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DurationControl_t"
  },
  {
    "label": "GetTicketForWebApiResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetTicketForWebApiResponse_t"
  },
  {
    "label": "GetHSteamUser()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMUSER_H # define ISTEAMUSER_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" class ISteamUser { public : HSteamUser)",
    "insertText": "GetHSteamUser()"
  },
  {
    "label": "BLoggedOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BLoggedOn()"
  },
  {
    "label": "GetSteamID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetSteamID()"
  },
  {
    "label": "InitiateGameConnection_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitiateGameConnection_DEPRECATED(void *pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)"
  },
  {
    "label": "TerminateGameConnection_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateGameConnection_DEPRECATED(uint32 unIPServer, uint16 usPortServer)"
  },
  {
    "label": "TrackAppUsageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, const char *pchExtraInfo = \"\")"
  },
  {
    "label": "GetUserDataFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserDataFolder(char *pchBuffer, int cubBuffer)"
  },
  {
    "label": "StartVoiceRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartVoiceRecording()"
  },
  {
    "label": "StopVoiceRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopVoiceRecording()"
  },
  {
    "label": "GetAvailableVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated = 0, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated = 0)"
  },
  {
    "label": "GetVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated = false, void *pUncompressedDestBuffer_Deprecated = 0, uint32 cbUncompressedDestBufferSize_Deprecated = 0, uint32 *nUncompressBytesWritten_Deprecated = 0, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated = 0)"
  },
  {
    "label": "DecompressVoice()",
    "kind": "Method",
    "detail": "Function (EVoiceResult)",
    "insertText": "DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)"
  },
  {
    "label": "GetVoiceOptimalSampleRate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetVoiceOptimalSampleRate()"
  },
  {
    "label": "GetAuthSessionTicket()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)"
  },
  {
    "label": "GetAuthTicketForWebApi()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "GetAuthTicketForWebApi(const char *pchIdentity)"
  },
  {
    "label": "BeginAuthSession()",
    "kind": "Method",
    "detail": "Function (EBeginAuthSessionResult)",
    "insertText": "BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID)"
  },
  {
    "label": "EndAuthSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAuthSession(CSteamID steamID)"
  },
  {
    "label": "CancelAuthTicket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAuthTicket(HAuthTicket hAuthTicket)"
  },
  {
    "label": "UserHasLicenseForApp()",
    "kind": "Method",
    "detail": "Function (EUserHasLicenseForAppResult)",
    "insertText": "UserHasLicenseForApp(CSteamID steamID, AppId_t appID)"
  },
  {
    "label": "BIsBehindNAT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsBehindNAT()"
  },
  {
    "label": "AdvertiseGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvertiseGame(CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(EncryptedAppTicketResponse_t ) virtual SteamAPICall_t RequestEncryptedAppTicket( void *pDataToInclude, int cbDataToInclude)"
  },
  {
    "label": "GetEncryptedAppTicket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket)"
  },
  {
    "label": "GetGameBadgeLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetGameBadgeLevel(int nSeries, bool bFoil)"
  },
  {
    "label": "GetPlayerSteamLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPlayerSteamLevel()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(StoreAuthURLResponse_t ) virtual SteamAPICall_t RequestStoreAuthURL( const char *pchRedirectURL)"
  },
  {
    "label": "BIsPhoneVerified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsPhoneVerified()"
  },
  {
    "label": "BIsTwoFactorEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsTwoFactorEnabled()"
  },
  {
    "label": "BIsPhoneIdentifying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsPhoneIdentifying()"
  },
  {
    "label": "BIsPhoneRequiringVerification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BIsPhoneRequiringVerification()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(MarketEligibilityResponse_t ) virtual SteamAPICall_t GetMarketEligibility()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(DurationControl_t ) virtual SteamAPICall_t GetDurationControl()"
  },
  {
    "label": "BSetDurationControlOnlineState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BSetDurationControlOnlineState(EDurationControlOnlineState eNewState)"
  },
  {
    "label": "SteamUser()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMUSER_INTERFACE_VERSION \" SteamUser023 \" ISteamUser*)",
    "insertText": "SteamUser()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamUser *, SteamUser, STEAMUSER_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]