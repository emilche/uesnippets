[
  {
    "label": "fgt_internal_input_alias_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fgt_internal_input_alias_helper"
  },
  {
    "label": "fgt_internal_output_alias_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fgt_internal_output_alias_helper"
  },
  {
    "label": "fgt_internal_input_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fgt_internal_input_helper"
  },
  {
    "label": "fgt_internal_output_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fgt_internal_output_helper"
  },
  {
    "label": "fgt_alias_port()",
    "kind": "Method",
    "detail": "Function (# ifndef _FGT_GRAPH_TRACE_IMPL_H # define _FGT_GRAPH_TRACE_IMPL_H # include \" . . / tbb_profiling . h \" namespace tbb { namespace internal { # if TBB_USE_THREADING_TOOLS void)",
    "insertText": "fgt_alias_port(void *node, void *p, bool visible)"
  },
  {
    "label": "fgt_composite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_composite(void *node, void *graph)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, node, FLOW_NODE, graph, FLOW_GRAPH, FLOW_COMPOSITE_NODE)"
  },
  {
    "label": "fgt_internal_alias_input_port()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_internal_alias_input_port(void *node, void *p, string_index name_index)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, p, FLOW_INPUT_PORT, node, FLOW_NODE, name_index)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add(ITT_DOMAIN_FLOW, node, FLOW_NODE, __itt_relation_is_parent_of, p, FLOW_INPUT_PORT)"
  },
  {
    "label": "fgt_internal_alias_output_port()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_internal_alias_output_port(void *node, void *p, string_index name_index)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, p, FLOW_OUTPUT_PORT, node, FLOW_NODE, name_index)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add(ITT_DOMAIN_FLOW, node, FLOW_NODE, __itt_relation_is_parent_of, p, FLOW_OUTPUT_PORT)"
  },
  {
    "label": "alias_input_port()",
    "kind": "Method",
    "detail": "Function (} template<InputType> void)",
    "insertText": "alias_input_port(void *node, tbb::flow::receiver<InputType>* port, string_index name_index)"
  },
  {
    "label": "fgt_internal_alias_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_alias_input_port(node, port, name_index)"
  },
  {
    "label": "alias_port()",
    "kind": "Method",
    "detail": "Function (} template<PortsTuple,int N> struct fgt_internal_input_alias_helper { void)",
    "insertText": "alias_port(void *node, PortsTuple &ports)"
  },
  {
    "label": "alias_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alias_input_port(node, &(tbb::flow::get<N-1>(ports)), static_cast<tbb::internal::string_index>(FLOW_INPUT_PORT_0 + N - 1))"
  },
  {
    "label": "alias_port()",
    "kind": "Method",
    "detail": "Function (fgt_internal_input_alias_helper<PortsTuple,N - 1)",
    "insertText": "alias_port(node, ports)"
  },
  {
    "label": "alias_port()",
    "kind": "Method",
    "detail": "Function (} } ; template<PortsTuple> struct fgt_internal_input_alias_helper<PortsTuple,0> { void)",
    "insertText": "alias_port(void * , PortsTuple &)"
  },
  {
    "label": "alias_output_port()",
    "kind": "Method",
    "detail": "Function (} } ; template<OutputType> void)",
    "insertText": "alias_output_port(void *node, tbb::flow::sender<OutputType>* port, string_index name_index)"
  },
  {
    "label": "fgt_internal_alias_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_alias_output_port(node, static_cast<void *>(port), name_index)"
  },
  {
    "label": "alias_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alias_output_port(node, &(tbb::flow::get<N-1>(ports)), static_cast<tbb::internal::string_index>(FLOW_OUTPUT_PORT_0 + N - 1))"
  },
  {
    "label": "fgt_internal_create_input_port()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "fgt_internal_create_input_port(void *node, void *p, string_index name_index)"
  },
  {
    "label": "fgt_internal_create_output_port()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_internal_create_output_port(void *node, void *p, string_index name_index)"
  },
  {
    "label": "register_input_port()",
    "kind": "Method",
    "detail": "Function (} template<InputType> void)",
    "insertText": "register_input_port(void *node, tbb::flow::receiver<InputType>* port, string_index name_index)"
  },
  {
    "label": "fgt_internal_create_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_input_port(node, static_cast<void*>(port), name_index)"
  },
  {
    "label": "register_port()",
    "kind": "Method",
    "detail": "Function (} template<PortsTuple,int N> struct fgt_internal_input_helper { void)",
    "insertText": "register_port(void *node, PortsTuple &ports)"
  },
  {
    "label": "register_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "register_input_port(node, &(tbb::flow::get<N-1>(ports)), static_cast<tbb::internal::string_index>(FLOW_INPUT_PORT_0 + N - 1))"
  },
  {
    "label": "register_port()",
    "kind": "Method",
    "detail": "Function (fgt_internal_input_helper<PortsTuple,N - 1)",
    "insertText": "register_port(node, ports)"
  },
  {
    "label": "register_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "register_input_port(node, &(tbb::flow::get<0>(ports)), FLOW_INPUT_PORT_0)"
  },
  {
    "label": "register_output_port()",
    "kind": "Method",
    "detail": "Function (} } ; template<OutputType> void)",
    "insertText": "register_output_port(void *node, tbb::flow::sender<OutputType>* port, string_index name_index)"
  },
  {
    "label": "fgt_internal_create_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_output_port(node, static_cast<void *>(port), name_index)"
  },
  {
    "label": "register_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "register_output_port(node, &(tbb::flow::get<N-1>(ports)), static_cast<tbb::internal::string_index>(FLOW_OUTPUT_PORT_0 + N - 1))"
  },
  {
    "label": "register_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "register_output_port(node, &(tbb::flow::get<0>(ports)), FLOW_OUTPUT_PORT_0)"
  },
  {
    "label": "fgt_multioutput_node_desc()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeType> void)",
    "insertText": "fgt_multioutput_node_desc(const NodeType *node, const char *desc)"
  },
  {
    "label": "addr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "addr(void *)( static_cast< tbb::flow::receiver< typename NodeType::input_type > * >(const_cast< NodeType *>(node)))"
  },
  {
    "label": "itt_metadata_str_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_metadata_str_add(ITT_DOMAIN_FLOW, addr, FLOW_NODE, FLOW_OBJECT_NAME, desc)"
  },
  {
    "label": "fgt_multiinput_multioutput_node_desc()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "fgt_multiinput_multioutput_node_desc(const NodeType *node, const char *desc)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (void* addr = const_cast<)",
    "insertText": "NodeType(node)"
  },
  {
    "label": "fgt_node_desc()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "fgt_node_desc(const NodeType *node, const char *desc)"
  },
  {
    "label": "addr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "addr(void *)( static_cast< tbb::flow::sender< typename NodeType::output_type > * >(const_cast< NodeType *>(node)))"
  },
  {
    "label": "fgt_graph_desc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_graph_desc(void *g, const char *desc)"
  },
  {
    "label": "itt_metadata_str_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_metadata_str_add(ITT_DOMAIN_FLOW, g, FLOW_GRAPH, FLOW_OBJECT_NAME, desc)"
  },
  {
    "label": "fgt_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_body(void *node, void *body)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add(ITT_DOMAIN_FLOW, body, FLOW_BODY, __itt_relation_is_child_of, node, FLOW_NODE)"
  },
  {
    "label": "fgt_multioutput_node()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multioutput_node(string_index t, void *g, void *input_port, PortsTuple &ports)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, input_port, FLOW_NODE, g, FLOW_GRAPH, t)"
  },
  {
    "label": "fgt_internal_create_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_input_port(input_port, input_port, FLOW_INPUT_PORT_0)"
  },
  {
    "label": "register_port()",
    "kind": "Method",
    "detail": "Function (fgt_internal_output_helper<PortsTuple,N)",
    "insertText": "register_port(input_port, ports)"
  },
  {
    "label": "fgt_multioutput_node_with_body()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multioutput_node_with_body(string_index t, void *g, void *input_port, PortsTuple &ports, void *body)"
  },
  {
    "label": "fgt_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_body(input_port, body)"
  },
  {
    "label": "fgt_multiinput_node()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multiinput_node(string_index t, void *g, PortsTuple &ports, void *output_port)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, output_port, FLOW_NODE, g, FLOW_GRAPH, t)"
  },
  {
    "label": "fgt_internal_create_output_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_output_port(output_port, output_port, FLOW_OUTPUT_PORT_0)"
  },
  {
    "label": "register_port()",
    "kind": "Method",
    "detail": "Function (fgt_internal_input_helper<PortsTuple,N)",
    "insertText": "register_port(output_port, ports)"
  },
  {
    "label": "fgt_multiinput_multioutput_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_multiinput_multioutput_node(string_index t, void *n, void *g)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, n, FLOW_NODE, g, FLOW_GRAPH, t)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index t, void *g, void *output_port)"
  },
  {
    "label": "fgt_node_with_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node_with_body(string_index t, void *g, void *output_port, void *body)"
  },
  {
    "label": "fgt_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_body(output_port, body)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index t, void *g, void *input_port, void *output_port)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_node(t, g, output_port)"
  },
  {
    "label": "fgt_internal_create_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_input_port(output_port, input_port, FLOW_INPUT_PORT_0)"
  },
  {
    "label": "fgt_node_with_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node_with_body(string_index t, void *g, void *input_port, void *output_port, void *body)"
  },
  {
    "label": "fgt_node_with_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_node_with_body(t, g, output_port, body)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index t, void *g, void *input_port, void *decrement_port, void *output_port)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_node(t, g, input_port, output_port)"
  },
  {
    "label": "fgt_internal_create_input_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_internal_create_input_port(output_port, decrement_port, FLOW_INPUT_PORT_1)"
  },
  {
    "label": "fgt_make_edge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_make_edge(void *output_port, void *input_port)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add(ITT_DOMAIN_FLOW, output_port, FLOW_OUTPUT_PORT, __itt_relation_is_predecessor_to, input_port, FLOW_INPUT_PORT)"
  },
  {
    "label": "fgt_remove_edge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_remove_edge(void *output_port, void *input_port)"
  },
  {
    "label": "itt_relation_add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_relation_add(ITT_DOMAIN_FLOW, output_port, FLOW_OUTPUT_PORT, __itt_relation_is_sibling_of, input_port, FLOW_INPUT_PORT)"
  },
  {
    "label": "fgt_graph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_graph(void *g)"
  },
  {
    "label": "itt_make_task_group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_make_task_group(ITT_DOMAIN_FLOW, g, FLOW_GRAPH, NULL, FLOW_NULL, FLOW_GRAPH)"
  },
  {
    "label": "fgt_begin_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_begin_body(void *body)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_begin(ITT_DOMAIN_FLOW, body, FLOW_BODY, NULL, FLOW_NULL, FLOW_BODY)"
  },
  {
    "label": "fgt_end_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_end_body(void *)"
  },
  {
    "label": "itt_task_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_end(ITT_DOMAIN_FLOW)"
  },
  {
    "label": "fgt_async_try_put_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_try_put_begin(void *node, void *port)"
  },
  {
    "label": "itt_task_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_task_begin(ITT_DOMAIN_FLOW, port, FLOW_OUTPUT_PORT, node, FLOW_NODE, FLOW_OUTPUT_PORT)"
  },
  {
    "label": "fgt_async_try_put_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_try_put_end(void *, void *)"
  },
  {
    "label": "fgt_async_reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_reserve(void *node, void *graph)"
  },
  {
    "label": "itt_region_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_begin(ITT_DOMAIN_FLOW, node, FLOW_NODE, graph, FLOW_GRAPH, FLOW_NULL)"
  },
  {
    "label": "fgt_async_commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_commit(void *node, void *)"
  },
  {
    "label": "itt_region_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_end(ITT_DOMAIN_FLOW, node, FLOW_NODE)"
  },
  {
    "label": "fgt_reserve_wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_reserve_wait(void *graph)"
  },
  {
    "label": "itt_region_begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_begin(ITT_DOMAIN_FLOW, graph, FLOW_GRAPH, NULL, FLOW_NULL, FLOW_NULL)"
  },
  {
    "label": "fgt_release_wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_release_wait(void *graph)"
  },
  {
    "label": "itt_region_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_region_end(ITT_DOMAIN_FLOW, graph, FLOW_GRAPH)"
  },
  {
    "label": "fgt_alias_port()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "fgt_alias_port(void * , void * , bool)"
  },
  {
    "label": "fgt_composite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_composite(void * , void *)"
  },
  {
    "label": "fgt_graph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_graph(void *)"
  },
  {
    "label": "fgt_multioutput_node_desc()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "fgt_multioutput_node_desc(const NodeType * , const char *)"
  },
  {
    "label": "fgt_node_desc()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "fgt_node_desc(const NodeType * , const char *)"
  },
  {
    "label": "fgt_graph_desc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_graph_desc(void * , const char *)"
  },
  {
    "label": "fgt_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_body(void * , void *)"
  },
  {
    "label": "fgt_multioutput_node()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multioutput_node(string_index , void * , void * , PortsTuple &)"
  },
  {
    "label": "fgt_multioutput_node_with_body()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multioutput_node_with_body(string_index , void * , void * , PortsTuple & , void *)"
  },
  {
    "label": "fgt_multiinput_node()",
    "kind": "Method",
    "detail": "Function (} template<int N,PortsTuple> void)",
    "insertText": "fgt_multiinput_node(string_index , void * , PortsTuple & , void *)"
  },
  {
    "label": "fgt_multiinput_multioutput_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_multiinput_multioutput_node(string_index , void * , void *)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index , void * , void *)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index , void * , void * , void *)"
  },
  {
    "label": "fgt_node()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node(string_index , void * , void * , void * , void *)"
  },
  {
    "label": "fgt_node_with_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node_with_body(string_index , void * , void * , void *)"
  },
  {
    "label": "fgt_node_with_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_node_with_body(string_index , void * , void * , void * , void *)"
  },
  {
    "label": "fgt_make_edge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_make_edge(void * , void *)"
  },
  {
    "label": "fgt_remove_edge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_remove_edge(void * , void *)"
  },
  {
    "label": "fgt_begin_body()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_begin_body(void *)"
  },
  {
    "label": "fgt_async_try_put_begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_try_put_begin(void * , void *)"
  },
  {
    "label": "fgt_async_try_put_end()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_try_put_end(void * , void *)"
  },
  {
    "label": "fgt_async_reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_reserve(void * , void *)"
  },
  {
    "label": "fgt_async_commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_async_commit(void * , void *)"
  },
  {
    "label": "fgt_reserve_wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_reserve_wait(void *)"
  },
  {
    "label": "fgt_release_wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fgt_release_wait(void *)"
  },
  {
    "label": "fgt_multiinput_multioutput_node_desc()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "fgt_multiinput_multioutput_node_desc(const NodeType * , const char *)"
  }
]