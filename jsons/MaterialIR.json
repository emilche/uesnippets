[
  {
    "label": "EValueKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EValueKind"
  },
  {
    "label": "EValueFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EValueFlags"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "TValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TValue"
  },
  {
    "label": "FConstant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstant"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FExternalInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalInput"
  },
  {
    "label": "FMaterialParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameter"
  },
  {
    "label": "FBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlock"
  },
  {
    "label": "FInstruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstruction"
  },
  {
    "label": "TInstruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInstruction"
  },
  {
    "label": "FDimensional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDimensional"
  },
  {
    "label": "TDimensional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDimensional"
  },
  {
    "label": "FSetMaterialOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetMaterialOutput"
  },
  {
    "label": "EBinaryOperator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBinaryOperator"
  },
  {
    "label": "FBinaryOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinaryOperator"
  },
  {
    "label": "FBranch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranch"
  },
  {
    "label": "FSubscript",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubscript"
  },
  {
    "label": "FCast",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCast"
  },
  {
    "label": "FTextureSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSample"
  },
  {
    "label": "ValueKindToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / MaterialIRCommon . h \" # include \" MaterialTypes . h \" # if WITH_EDITOR namespace UE::MIR { enum EValueKind { VK_Constant,VK_ExternalInput,VK_MaterialParameter,VK_InstructionBegin,VK_Dimensional,VK_SetMaterialOutput,VK_BinaryOperator,VK_Branch,VK_Subscript,VK_Cast,VK_TextureSample,VK_InstructionEnd,} ; const TCHAR*)",
    "insertText": "ValueKindToString(EValueKind Kind)"
  },
  {
    "label": "GetSizeInBytes()",
    "kind": "Method",
    "detail": "Function (enum EValueFlags { VF_None = 0,VF_ValueAnalyzed = 1,VF_InstructionAnalyzed = 2,} ; struct FValue { EValueKind Kind : 8 { } ; EValueFlags Flags : 8 { } ; FTypePtr Type { } ; uint32)",
    "insertText": "GetSizeInBytes()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(EValueFlags InFlags)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(EValueFlags)(Flags | InFlags)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(EValueKind InKind)"
  },
  {
    "label": "AsInstruction()",
    "kind": "Method",
    "detail": "Function (const FInstruction*)",
    "insertText": "AsInstruction()"
  },
  {
    "label": "GetUses()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FValue*>)",
    "insertText": "GetUses()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FValue* Other)"
  },
  {
    "label": "IsScalar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScalar()"
  },
  {
    "label": "IsVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVector()"
  },
  {
    "label": "IsTrue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrue()"
  },
  {
    "label": "IsFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFalse()"
  },
  {
    "label": "IsExactlyZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExactlyZero()"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNearlyZero()"
  },
  {
    "label": "IsExactlyOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExactlyOne()"
  },
  {
    "label": "IsNearlyOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNearlyOne()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (UTexture*)",
    "insertText": "GetTexture()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "As()"
  },
  {
    "label": "IsBool()",
    "kind": "Method",
    "detail": "Function (} } ; template<EValueKind TTypeKind> struct TValue : FValue { EValueKind TypeKind = TTypeKind ; } ; using TInteger = int64_t ; using TFloat = double ; struct FConstant : TValue<VK_Constant> { union { bool Boolean ; TInteger Integer ; TFloat Float ; } ; bool)",
    "insertText": "IsBool()"
  },
  {
    "label": "IsInteger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteger()"
  },
  {
    "label": "IsFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloat()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "Get()"
  },
  {
    "label": "ExternalInputToString()",
    "kind": "Method",
    "detail": "Function (} } } ; enum class EExternalInput { None,TexCoord0,TexCoord1,TexCoord2,TexCoord3,TexCoord4,TexCoord5,TexCoord6,TexCoord7,TexCoord0_Ddx,TexCoord1_Ddx,TexCoord2_Ddx,TexCoord3_Ddx,TexCoord4_Ddx,TexCoord5_Ddx,TexCoord6_Ddx,TexCoord7_Ddx,TexCoord0_Ddy,TexCoord1_Ddy,TexCoord2_Ddy,TexCoord3_Ddy,TexCoord4_Ddy,TexCoord5_Ddy,TexCoord6_Ddy,TexCoord7_Ddy,Count,} ; int TexCoordMaxNum = 8 ; const TCHAR*)",
    "insertText": "ExternalInputToString(EExternalInput Input)"
  },
  {
    "label": "TexCoordIndexToExternalInput()",
    "kind": "Method",
    "detail": "Function (MIR::EExternalInput)",
    "insertText": "TexCoordIndexToExternalInput(int TexCoordIndex)"
  },
  {
    "label": "GetExternalInputType()",
    "kind": "Method",
    "detail": "Function (FTypePtr)",
    "insertText": "GetExternalInputType(EExternalInput Id)"
  },
  {
    "label": "IsExternalInputTexCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalInputTexCoord(EExternalInput Id)"
  },
  {
    "label": "IsExternalInputTexCoordDdx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalInputTexCoordDdx(EExternalInput Id)"
  },
  {
    "label": "IsExternalInputTexCoordDdy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalInputTexCoordDdy(EExternalInput Id)"
  },
  {
    "label": "FindCommonParentWith()",
    "kind": "Method",
    "detail": "Function (struct FExternalInput : TValue<VK_ExternalInput> { EExternalInput Id ; } ; struct FMaterialParameter : TValue<VK_MaterialParameter> { FMaterialParameterInfo Info ; FMaterialParameterMetadata Metadata ; } ; struct FBlock { FBlock* Parent { } ; FInstruction* Instructions { } ; int32 Level { } ; FBlock*)",
    "insertText": "FindCommonParentWith(MIR::FBlock* Other)"
  },
  {
    "label": "GetDesiredBlockForUse()",
    "kind": "Method",
    "detail": "Function (} ; struct FInstruction : FValue { FInstruction* Next { } ; FBlock* Block { } ; uint32 NumUsers { } ; uint32 NumProcessedUsers { } ; FBlock*)",
    "insertText": "GetDesiredBlockForUse(int32 UseIndex)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (} ; template<EValueKind TTypeKind> struct TInstruction : FInstruction { EValueKind TypeKind = TTypeKind ; } ; struct FDimensional : TInstruction<VK_Dimensional> { int MaxNumComponents = 1 6 ; TArrayView<FValue* const>)",
    "insertText": "GetComponents()"
  },
  {
    "label": "AreComponentsConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreComponentsConstant()"
  },
  {
    "label": "IsArithmeticOperator()",
    "kind": "Method",
    "detail": "Function (} ; template<int TDimension> struct TDimensional : FDimensional { FValue* Components [ TDimension ] ; } ; struct FSetMaterialOutput : TInstruction<VK_SetMaterialOutput> { EMaterialProperty Property ; FValue* Arg ; } ; enum EBinaryOperator { BO_Invalid,BO_Add,BO_Subtract,BO_Multiply,BO_Divide,BO_GreaterThan,BO_GreaterThanOrEquals,BO_LowerThan,BO_LowerThanOrEquals,BO_Equals,BO_NotEquals,} ; bool)",
    "insertText": "IsArithmeticOperator(EBinaryOperator Op)"
  },
  {
    "label": "IsComparisonOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComparisonOperator(EBinaryOperator Op)"
  },
  {
    "label": "BinaryOperatorToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "BinaryOperatorToString(EBinaryOperator Op)"
  },
  {
    "label": "GetTextureFromValue()",
    "kind": "Method",
    "detail": "Function (struct FBinaryOperator : TInstruction<VK_BinaryOperator> { EBinaryOperator Operator = BO_Invalid ; FValue* LhsArg { } ; FValue* RhsArg { } ; } ; struct FBranch : TInstruction<VK_Branch> { FValue* ConditionArg { } ; FValue* TrueArg { } ; FValue* FalseArg { } ; FBlock TrueBlock { } ; FBlock FalseBlock { } ; } ; struct FSubscript : TInstruction<VK_Subscript> { FValue* Arg ; int Index ; } ; struct FCast : TInstruction<VK_Cast> { FValue* Arg { } ; } ; struct FTextureSample : TInstruction<VK_TextureSample> { FValue* TexCoordArg ; FValue* MipValueArg ; FValue* AutomaticMipBiasArg ; UTexture* Texture ; ESamplerSourceMode SamplerSourceMode ; ETextureMipValueMode MipValueMode ; EMaterialSamplerType SamplerType ; int TextureParameterIndex ; } ; UTexture*)",
    "insertText": "GetTextureFromValue(FValue* TextureValue)"
  }
]