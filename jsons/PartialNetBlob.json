[
  {
    "label": "FPartialNetBlob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPartialNetBlob"
  },
  {
    "label": "FSplitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPayloadSplitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayloadSplitParams"
  },
  {
    "label": "SplitNetBlob()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / NetBlob / NetBlob . h \" # include \" Iris / ReplicationSystem / NetBlob / RawDataNetBlob . h \" # include \" Iris / Core / NetObjectReference . h \" # include \" Net / Core / Trace / NetDebugName . h \" namespace UE::Net { class FPartialNetBlob final : public FNetBlob { public : struct FSplitParams { uint32 MaxPartBitCount ; uint32 MaxPartCount ; FNetObjectReference NetObjectReference ; FNetDebugName DebugName ; bool bSerializeWithObject ; } ; bool)",
    "insertText": "SplitNetBlob(FNetSerializationContext& Context, const FNetBlobCreationInfo& CreationInfo, const FSplitParams& SplitParams, const TRefCountPtr<FNetBlob>& Blob, TArray<TRefCountPtr<FNetBlob>>& OutPartialBlobs)"
  },
  {
    "label": "SplitNetBlob()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitNetBlob(const FNetBlobCreationInfo& CreationInfo, const FSplitParams& SplitParams, const TRefCountPtr<FRawDataNetBlob>& Blob, TArray<TRefCountPtr<FNetBlob>>& OutPartialBlobs)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (public : enum class ESequenceFlags : uint32 { None = 0,IsFirstPart = 1 U,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(ESequenceFlags)"
  },
  {
    "label": "FPartialNetBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPartialNetBlob(const FNetBlobCreationInfo& CreationInfo)"
  },
  {
    "label": "GetPartCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPartCount()"
  },
  {
    "label": "IsFirstPart()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFirstPart()"
  },
  {
    "label": "GetSequenceNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSequenceNumber()"
  },
  {
    "label": "GetOriginalCreationInfo()",
    "kind": "Method",
    "detail": "Function (} const FNetBlobCreationInfo&)",
    "insertText": "GetOriginalCreationInfo()"
  },
  {
    "label": "GetNetObjectReferenceExports()",
    "kind": "Method",
    "detail": "Function (DebugName = InDebugName ; } private : TArrayView<const FNetObjectReference>)",
    "insertText": "GetNetObjectReferenceExports()"
  },
  {
    "label": "GetNetTokenExports()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNetToken>)",
    "insertText": "GetNetTokenExports()"
  },
  {
    "label": "SerializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "DeserializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FNetSerializationContext& Context)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "InternalSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSerialize(FNetSerializationContext& Context)"
  },
  {
    "label": "InternalDeserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDeserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "InternalSerializeBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSerializeBlob(FNetSerializationContext& Context)"
  },
  {
    "label": "InternalDeserializeBlob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDeserializeBlob(FNetSerializationContext& Context)"
  },
  {
    "label": "SplitPayload()",
    "kind": "Method",
    "detail": "Function (struct FPayloadSplitParams { FNetDebugName DebugName ; FNetBlobCreationInfo CreationInfo ; FNetBlobCreationInfo OriginalCreationInfo ; FNetBlob* OriginalBlob ; TArrayView<const FNetToken> NetTokensPendingExport ; const uint32* Payload ; uint32 PayloadBitCount ; uint32 PartBitCount ; } ; void)",
    "insertText": "SplitPayload(const FPayloadSplitParams& SplitParams, TArray<TRefCountPtr<FNetBlob>>& OutPartialBlobs)"
  }
]