[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "ISceneOutlinerTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISceneOutlinerTreeItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneOutlinerDragDropPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerDragDropPayload"
  },
  {
    "label": "FSceneOutlinerDragValidationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerDragValidationInfo"
  },
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "FSceneOutlinerDragDropPayload()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" DragAndDrop / CompositeDragDropOp . h \" # include \" HAL / Platform . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" Input / DragAndDrop . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" SceneOutlinerFwd . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" class SWidget ; struct FSlateBrush ; struct ISceneOutlinerTreeItem ; enum class ESceneOutlinerDropCompatibility : uint8 { Compatible,Incompatible,MultipleSelection_Incompatible,CompatibleAttach,IncompatibleGeneric,CompatibleGeneric,CompatibleMultipleAttach,IncompatibleMultipleAttach,CompatibleDetach,CompatibleMultipleDetach,} ; struct FSceneOutlinerDragDropPayload {)",
    "insertText": "FSceneOutlinerDragDropPayload(const FDragDropOperation& InOperation = FDragDropOperation()) : SourceOperation(InOperation)"
  },
  {
    "label": "FSceneOutlinerDragDropPayload()",
    "kind": "Method",
    "detail": "Function (} template<TreeType>)",
    "insertText": "FSceneOutlinerDragDropPayload(const TArray<TreeType>& InDraggedItems, const FDragDropOperation& InOperation = FDragDropOperation()) : SourceOperation(InOperation)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DraggedItems .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "Has()",
    "kind": "Method",
    "detail": "Function (} } template<TreeType> bool)",
    "insertText": "Has()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TreeType*> Result ;)",
    "insertText": "for(const TWeakPtr<ISceneOutlinerTreeItem>& Item : DraggedItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(CastedItem)"
  },
  {
    "label": "ForEachItem()",
    "kind": "Method",
    "detail": "Function (} } } return Result ; } template<TreeType> void)",
    "insertText": "ForEachItem(TFunctionRef<void(TreeType&)> Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(*CastedItem)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} } } } template<DataType> TArray<DataType>)",
    "insertText": "GetData(TFunctionRef<bool(TWeakPtr<ISceneOutlinerTreeItem>, DataType&)> Selector)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<DataType> Result ;)",
    "insertText": "for(TWeakPtr<ISceneOutlinerTreeItem>& Item : DraggedItems)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DataType Data ;)",
    "insertText": "if(Selector(Item, Data))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Data)"
  },
  {
    "label": "FSceneOutlinerDragValidationInfo()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TArray<TWeakPtr<ISceneOutlinerTreeItem>> DraggedItems ; const FDragDropOperation& SourceOperation ; } ; struct FSceneOutlinerDragValidationInfo { ESceneOutlinerDropCompatibility CompatibilityType ; FText ValidationText ;)",
    "insertText": "FSceneOutlinerDragValidationInfo(const ESceneOutlinerDropCompatibility InCompatibilityType, const FText InValidationText) : CompatibilityType(InCompatibilityType) , ValidationText(InValidationText)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FSceneOutlinerDragValidationInfo)",
    "insertText": "Invalid()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FSceneOutlinerDragDropOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneOutlinerDragDropOp()"
  },
  {
    "label": "ResetTooltip()",
    "kind": "Method",
    "detail": "Function (using FDragDropOperation::Construct ; void)",
    "insertText": "ResetTooltip()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (OverrideText =)",
    "insertText": "FText()"
  },
  {
    "label": "SetTooltip()",
    "kind": "Method",
    "detail": "Function (OverrideIcon = nullptr ; } void)",
    "insertText": "SetTooltip(FText InOverrideText, const FSlateBrush* InOverrideIcon)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (OverrideText = InOverrideText ; OverrideIcon = InOverrideIcon ; } TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "GetOverrideVisibility()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "GetOverrideVisibility()"
  },
  {
    "label": "GetDefaultVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDefaultVisibility()"
  },
  {
    "label": "GetOverrideText()",
    "kind": "Method",
    "detail": "Function (FText OverrideText ; FText)",
    "insertText": "GetOverrideText()"
  }
]