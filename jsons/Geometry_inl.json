[
  {
    "label": "SVerticalBillboards()",
    "kind": "Method",
    "detail": "Function (ST_INLINE)",
    "insertText": "SVerticalBillboards() : m_nNumBillboards(0), m_pTexCoords(NULL), m_pRotated(NULL), m_nNumCutoutVertices(0), m_pCutoutVertices(NULL), m_nNumCutoutIndices(0), m_pCutoutIndices(NULL)"
  },
  {
    "label": "SVerticalBillboards()",
    "kind": "Method",
    "detail": "Function (m_fWidth = m_fTopPos = m_fBottomPos = - 1 . 0 f ; } ST_INLINE SVerticalBillboards::~)",
    "insertText": "SVerticalBillboards()"
  },
  {
    "label": "SHorizontalBillboard()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG m_pRotated = NULL ; m_pTexCoords = NULL ; m_fWidth = m_fTopPos = m_fBottomPos = - 1 . 0 f ; m_nNumBillboards = 0 ; # endif } ST_INLINE)",
    "insertText": "SHorizontalBillboard() : m_bPresent(false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_int16 i = 0 ;)",
    "insertText": "for(i = 0; i < 4; ++i) m_avPositions[i].Set(-1.0f, -1.0f, -1.0f)"
  },
  {
    "label": "SHorizontalBillboard()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SHorizontalBillboard::~)",
    "insertText": "SHorizontalBillboard()"
  },
  {
    "label": "SCollisionObject()",
    "kind": "Method",
    "detail": "Function (# endif } ST_INLINE)",
    "insertText": "SCollisionObject() : m_pUserString(NULL), m_fRadius(-1.0f)"
  },
  {
    "label": "SCollisionObject()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SCollisionObject::~)",
    "insertText": "SCollisionObject()"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG m_vCenter1 =)",
    "insertText": "Vec3()"
  },
  {
    "label": "SDrawCall()",
    "kind": "Method",
    "detail": "Function (m_fRadius = - 1 . 0 f ; # endif } ST_INLINE)",
    "insertText": "SDrawCall() : m_pRenderState(NULL), m_nRenderStateIndex(-1), m_nNumVertices(0), m_pVertexData(NULL), m_nNumIndices(0), m_b32BitIndices(false), m_pIndexData(NULL)"
  },
  {
    "label": "SDrawCall()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SDrawCall::~)",
    "insertText": "SDrawCall()"
  },
  {
    "label": "SBone()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "SBone() : m_nID(-1), m_nParentID(-1), m_fRadius(0.0f), m_fMass(0.0f), m_fMassWithChildren(0.0f), m_bBreakable(false)"
  },
  {
    "label": "SLod()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "SLod() : m_nNumDrawCalls(0), m_pDrawCalls(NULL), m_nNumBones(0), m_pBones(NULL)"
  },
  {
    "label": "SLod()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SLod::~)",
    "insertText": "SLod()"
  },
  {
    "label": "SGeometry()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "SGeometry() : m_nNum3dRenderStates(0), m_bShadowCastIncluded(false), m_nNumLods(0), m_pLods(NULL)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_p3dRenderStates, 0, sizeof(m_p3dRenderStates))"
  },
  {
    "label": "SGeometry()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SGeometry::~)",
    "insertText": "SGeometry()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_float32 afValues[4])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (st_bool bSuccess = false ;)",
    "insertText": "assert(static_cast<const st_byte*>(m_pVertexData))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(static_cast<const SRenderState*>(m_pRenderState))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_pRenderState->m_sVertexDecl.m_uiVertexSize > 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(nVertex > -1 && nVertex < m_nNumVertices)"
  },
  {
    "label": "NumComponents()",
    "kind": "Method",
    "detail": "Function (const SVertexDecl::SProperty& sProperty = m_pRenderState -> m_sVertexDecl . m_asProperties [ eProperty ] ; const st_int32 c_nNumComponents = sProperty .)",
    "insertText": "NumComponents()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ;)",
    "insertText": "if(sProperty.m_eFormat == VERTEX_FORMAT_FULL_FLOAT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(sProperty.m_eFormat == VERTEX_FORMAT_HALF_FLOAT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(sProperty.m_eFormat == VERTEX_FORMAT_BYTE)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} else bSuccess = false ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_float16 ahfValues[4])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(c_nNumComponents <= VERTEX_COMPONENT_COUNT)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} else bSuccess = false ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "GetProperty(EVertexProperty eProperty, st_int32 nVertex, st_byte abValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_float32 afValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_float16 ahfValues[4])"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "SetProperty(EVertexProperty eProperty, st_int32 nVertex, const st_byte abValues[4])"
  }
]