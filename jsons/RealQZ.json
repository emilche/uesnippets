[
  {
    "label": "RealQZ",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RealQZ"
  },
  {
    "label": "RealQZ()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_REAL_QZ_H # define EIGEN_REAL_QZ_H namespace Eigen { template<_MatrixType> class RealQZ { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef std::complex<NumTraits<Scalar>::Real> ComplexScalar ; typedef Eigen::Index Index ; typedef Matrix<ComplexScalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> EigenvalueType ; typedef Matrix<Scalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> ColumnVectorType ;)",
    "insertText": "RealQZ(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime) : m_S(size, size), m_T(size, size), m_Q(size, size), m_Z(size, size), m_workspace(size*2), m_maxIters(400), m_isInitialized(false), m_computeQZ(true)"
  },
  {
    "label": "RealQZ()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RealQZ(const MatrixType& A, const MatrixType& B, bool computeQZ = true) : m_S(A.rows(),A.cols()), m_T(A.rows(),A.cols()), m_Q(A.rows(),A.cols()), m_Z(A.rows(),A.cols()), m_workspace(A.rows()*2), m_maxIters(400), m_isInitialized(false), m_computeQZ(true)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(A, B, computeQZ)"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (} const MatrixType&)",
    "insertText": "matrixQ()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"RealQZ is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_computeQZ && \"The matrices Q and Z have not been computed during the QZ decomposition.\")"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "hessenbergTriangular()",
    "kind": "Method",
    "detail": "Function (m_maxIters = maxIters ; return* this ; } private : MatrixType m_S,m_T,m_Q,m_Z ; Matrix<Scalar,Dynamic,1> m_workspace ; ComputationInfo m_info ; Index m_maxIters ; bool m_isInitialized ; bool m_computeQZ ; Scalar m_normOfT,m_normOfS ; Index m_global_iter ; typedef Matrix<Scalar,3,1> Vector3s ; typedef Matrix<Scalar,2,1> Vector2s ; typedef Matrix<Scalar,2,2> Matrix2s ; typedef JacobiRotation<Scalar> JRs ; void)",
    "insertText": "hessenbergTriangular()"
  },
  {
    "label": "computeNorms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeNorms()"
  },
  {
    "label": "findSmallSubdiagEntry()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findSmallSubdiagEntry(Index iu)"
  },
  {
    "label": "findSmallDiagEntry()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findSmallDiagEntry(Index f, Index l)"
  },
  {
    "label": "splitOffTwoRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitOffTwoRows(Index i)"
  },
  {
    "label": "pushDownZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pushDownZero(Index z, Index f, Index l)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "step(Index f, Index l, Index iter)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index dim = m_S .)",
    "insertText": "cols()"
  },
  {
    "label": "qrT()",
    "kind": "Method",
    "detail": "Function (HouseholderQR<MatrixType>)",
    "insertText": "qrT(m_T)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (m_T = qrT .)",
    "insertText": "matrixQR()"
  },
  {
    "label": "StrictlyLower()",
    "kind": "Method",
    "detail": "Function (m_T . template triangularView<)",
    "insertText": "StrictlyLower().setZero()"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (m_Q = qrT .)",
    "insertText": "householderQ()"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheLeft(m_Q.adjoint())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (JRs G ;)",
    "insertText": "if(m_S.coeff(i,j) != 0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_S.coeff(i-1,j), m_S.coeff(i,j), &m_S.coeffRef(i-1, j))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "coeffRef(i,j) = Scalar(0.0)"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "rightCols(dim-j-1).applyOnTheLeft(i-1,i,G.adjoint())"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "rightCols(dim-i+1).applyOnTheLeft(i-1,i,G.adjoint())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_T.coeff(i,i-1)!=Scalar(0))"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_T.coeff(i,i), m_T.coeff(i,i-1), &m_T.coeffRef(i,i))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(i,i-1) = Scalar(0.0)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheRight(i,i-1,G)"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "topRows(i).applyOnTheRight(i,i-1,G)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (m_normOfS =)",
    "insertText": "Scalar(0.0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_normOfS + = m_S .)",
    "insertText": "col(j).segment(0, (std::min)(size,j+2)).cwiseAbs().sum()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (m_normOfT + = m_T .)",
    "insertText": "row(j).segment(j, size - j).cwiseAbs().sum()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using std::abs ; Index res = iu ;)",
    "insertText": "while(res > 0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (Scalar s =)",
    "insertText": "abs(m_S.coeff(res-1,res-1)) + abs(m_S.coeff(res,res))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using std::abs ; Index res = l ;)",
    "insertText": "while(res >= f)"
  },
  {
    "label": "findSmallDiagEntry()",
    "kind": "Method",
    "detail": "Function (Index j =)",
    "insertText": "findSmallDiagEntry(i,i+1)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Matrix2s STi = m_T . template)",
    "insertText": "block(i,i).template triangularView<Upper>(). template solve<OnTheRight>(m_S.template block<2,2>(i,i))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar p =)",
    "insertText": "Scalar(0.5)*(STi(0,0)-STi(1,1))"
  },
  {
    "label": "STi()",
    "kind": "Method",
    "detail": "Function (Scalar q = p* p +)",
    "insertText": "STi(1,0)*STi(0,1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (Scalar z =)",
    "insertText": "sqrt(q)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (JRs G ;)",
    "insertText": "if(p>=0) G.makeGivens(p + z, STi(1,0))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "rightCols(dim-i).applyOnTheLeft(i,i+1,G.adjoint())"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_T.coeff(i+1,i+1), m_T.coeff(i+1,i))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "topRows(i+2).applyOnTheRight(i+1,i,G)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "coeffRef(i+1,i) = Scalar(0.0)"
  },
  {
    "label": "pushDownZero()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "pushDownZero(j,i,i+1)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Index firstColS = zz>)",
    "insertText": "f(zz-1)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_T.coeff(zz, zz+1), m_T.coeff(zz+1, zz+1))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "rightCols(dim-firstColS).applyOnTheLeft(zz,zz+1,G.adjoint())"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "rightCols(dim-zz).applyOnTheLeft(zz,zz+1,G.adjoint())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(zz+1,zz+1) = Scalar(0.0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_S.coeff(zz+1, zz), m_S.coeff(zz+1,zz-1))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "topRows(zz+2).applyOnTheRight(zz, zz-1,G)"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "topRows(zz+1).applyOnTheRight(zz, zz-1,G)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "coeffRef(zz+1,zz-1) = Scalar(0.0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (} } G .)",
    "insertText": "makeGivens(m_S.coeff(l,l), m_S.coeff(l,l-1))"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheRight(l,l-1,G)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "coeffRef(l,l-1)=Scalar(0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar x,y,z ;)",
    "insertText": "if(iter==10)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar a11 = m_S .)",
    "insertText": "coeff(f+0,f+0), a12=m_S.coeff(f+0,f+1), a21=m_S.coeff(f+1,f+0), a22=m_S.coeff(f+1,f+1), a32=m_S.coeff(f+2,f+1), b12=m_T.coeff(f+0,f+1), b11i=Scalar(1.0)/m_T.coeff(f+0,f+0), b22i=Scalar(1.0)/m_T.coeff(f+1,f+1), a87=m_S.coeff(l-1,l-2), a98=m_S.coeff(l-0,l-1), b77i=Scalar(1.0)/m_T.coeff(l-2,l-2), b88i=Scalar(1.0)/m_T.coeff(l-1,l-1)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (Scalar ss =)",
    "insertText": "abs(a87*b77i) + abs(a98*b88i), lpl = Scalar(1.5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = ll + a11* a11* b11i* b11i - lpl* a11* b11i + a12* a21* b11i* b22i - a11* a21* b12* b11i* b11i* b22i ; y = a11* a21* b11i* b11i - lpl* a21* b11i + a21* a22* b11i* b22i - a21* a21* b12* b11i* b11i* b22i ; z = a21* a32* b11i* b22i ; } else)",
    "insertText": "if(iter==16)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (x = m_S .)",
    "insertText": "coeff(f,f)/m_T.coeff(f,f)-m_S.coeff(l,l)/m_T.coeff(l,l) + m_S.coeff(l,l-1)*m_T.coeff(l-1,l) / (m_T.coeff(l-1,l-1)*m_T.coeff(l,l))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (y = m_S .)",
    "insertText": "coeff(f+1,f)/m_T.coeff(f,f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z = 0 ; } else)",
    "insertText": "if(iter>23 && !(iter%8))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (x = internal::random<)",
    "insertText": "Scalar(-1.0,1.0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { const Scalar a11 = m_S .)",
    "insertText": "coeff(f,f), a12 = m_S.coeff(f,f+1), a21 = m_S.coeff(f+1,f), a22 = m_S.coeff(f+1,f+1), a32 = m_S.coeff(f+2,f+1), a88 = m_S.coeff(l-1,l-1), a89 = m_S.coeff(l-1,l), a98 = m_S.coeff(l,l-1), a99 = m_S.coeff(l,l), b11 = m_T.coeff(f,f), b12 = m_T.coeff(f,f+1), b22 = m_T.coeff(f+1,f+1), b88 = m_T.coeff(l-1,l-1), b89 = m_T.coeff(l-1,l), b99 = m_T.coeff(l,l)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x((a88/b88 - a11/b11)*(a99/b99 - a11/b11) - (a89/b99)*(a98/b88) + (a98/b88)*(b89/b99)*(a11/b11) ) * (b11/a21) + a12/b22 - (a11/b11)*(b12/b22)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "y(a22/b22-a11/b11) - (a21/b11)*(b12/b22) - (a88/b88-a11/b11) - (a99/b99-a11/b11) + (a98/b88)*(b89/b99)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (z = a32 / b22 ; } JRs G ;)",
    "insertText": "for(Index k=f; k<=l-2; k++)"
  },
  {
    "label": "hr()",
    "kind": "Method",
    "detail": "Function (Vector2s essential2 ; Scalar tau,beta ; Vector3s)",
    "insertText": "hr(x,y,z)"
  },
  {
    "label": "makeHouseholderInPlace()",
    "kind": "Method",
    "detail": "Function (hr .)",
    "insertText": "makeHouseholderInPlace(tau, beta)"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (essential2 = hr . template)",
    "insertText": "bottomRows()"
  },
  {
    "label": "fc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "fc(std::max)(k-1,Index(0))"
  },
  {
    "label": "middleRows()",
    "kind": "Method",
    "detail": "Function (m_S . template)",
    "insertText": "middleRows(k).rightCols(dim-fc).applyHouseholderOnTheLeft(essential2, tau, m_workspace.data())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (hr<<m_T .)",
    "insertText": "coeff(k+2,k+2),m_T.coeff(k+2,k),m_T.coeff(k+2,k+1)"
  },
  {
    "label": "lr()",
    "kind": "Method",
    "detail": "Function ({ Index)",
    "insertText": "lr(std::min)(k+4,dim)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,Dynamic,1>>)",
    "insertText": "tmp(m_workspace.data(),lr)"
  },
  {
    "label": "middleCols()",
    "kind": "Method",
    "detail": "Function (tmp = m_S . template)",
    "insertText": "middleCols(k).topRows(lr)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tmp + = m_S .)",
    "insertText": "col(k+2).head(lr)"
  },
  {
    "label": "middleCols()",
    "kind": "Method",
    "detail": "Function (m_S . template)",
    "insertText": "middleCols(k).topRows(lr) -= (tau*tmp) * essential2.adjoint()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_computeQZ)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,1,Dynamic>>)",
    "insertText": "tmp(m_workspace.data(),dim)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (tmp = essential2 .)",
    "insertText": "adjoint()*(m_Z.template middleRows<2>(k))"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (tmp + = m_Z .)",
    "insertText": "row(k+2)"
  },
  {
    "label": "middleRows()",
    "kind": "Method",
    "detail": "Function (m_Z . template)",
    "insertText": "middleRows(k) -= essential2 * (tau*tmp)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} m_T .)",
    "insertText": "coeffRef(k+2,k) = m_T.coeffRef(k+2,k+1) = Scalar(0.0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_T.coeff(k+1,k+1), m_T.coeff(k+1,k))"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheRight(k+1,k,G)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(k+1,k) = Scalar(0.0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (x = m_S .)",
    "insertText": "coeff(k+1,k)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (y = m_S .)",
    "insertText": "coeff(k+2,k)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (} G .)",
    "insertText": "makeGivens(x,y)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheLeft(l-1,l,G.adjoint())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "coeffRef(l,l-2) = Scalar(0.0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "makeGivens(m_T.coeff(l,l),m_T.coeff(l,l-1))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(l,l-1) = Scalar(0.0)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> RealQZ<MatrixType>& RealQZ<MatrixType)",
    "insertText": "compute(const MatrixType& A_in, const MatrixType& B_in, bool computeQZ)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(A_in.rows()==dim && A_in.cols()==dim && B_in.rows()==dim && B_in.cols()==dim && \"Need square matrices of the same dimension\")"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_computeQZ = computeQZ ; m_S = A_in ; m_T = B_in ; m_workspace .)",
    "insertText": "resize(dim*2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index l = dim - 1,f,local_iter = 0 ;)",
    "insertText": "while(l>0 && local_iter<m_maxIters)"
  },
  {
    "label": "findSmallSubdiagEntry()",
    "kind": "Method",
    "detail": "Function (f =)",
    "insertText": "findSmallSubdiagEntry(l)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (l - - ; local_iter = 0 ; } else)",
    "insertText": "if(f == l-1)"
  },
  {
    "label": "splitOffTwoRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitOffTwoRows(f)"
  },
  {
    "label": "findSmallDiagEntry()",
    "kind": "Method",
    "detail": "Function (l - = 2 ; local_iter = 0 ; } else { Index z =)",
    "insertText": "findSmallDiagEntry(f,l)"
  },
  {
    "label": "pushDownZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pushDownZero(z,f,l)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "step(f,l, local_iter)"
  },
  {
    "label": "m_info()",
    "kind": "Method",
    "detail": "Function (local_iter + + ; m_global_iter + + ; } } })",
    "insertText": "m_info(local_iter<m_maxIters)"
  },
  {
    "label": "real_2x2_jacobi_svd()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<Scalar> j_left,j_right ;)",
    "insertText": "real_2x2_jacobi_svd(m_T, i, i+1, &j_left, &j_right)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheLeft(i,i+1,j_left)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_S .)",
    "insertText": "applyOnTheRight(i,i+1,j_right)"
  },
  {
    "label": "m_T()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_T(i+1,i) = m_T(i,i+1) = Scalar(0)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_Q .)",
    "insertText": "applyOnTheRight(i,i+1,j_left.transpose())"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_Z .)",
    "insertText": "applyOnTheLeft(i,i+1,j_right.transpose())"
  }
]