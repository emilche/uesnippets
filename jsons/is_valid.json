[
  {
    "label": "__libcpp_random_is_valid_inttype",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_random_is_valid_inttype"
  },
  {
    "label": "__libcpp_random_is_valid_urng",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_random_is_valid_urng"
  },
  {
    "label": "_Gp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Gp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_IS_VALID_H # define _LIBCPP___RANDOM_IS_VALID_H # include<__config> # include<cstdint> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct __libcpp_random_is_valid_inttype<int8_t> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<short> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<int> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<long> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<long long> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<uint8_t> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<unsigned short> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<unsigned int> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<unsigned long> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<unsigned long long> : true_type { } ; # ifndef _LIBCPP_HAS_NO_INT128 template<> struct __libcpp_random_is_valid_inttype<__int128_t> : true_type { } ; template<> struct __libcpp_random_is_valid_inttype<__uint128_t> : true_type { } ; # endif template<class,class = void> struct __libcpp_random_is_valid_urng : false_type { } ; template<class _Gp> struct __libcpp_random_is_valid_urng<_Gp,__enable_if_t<is_unsigned<_Gp::result_type>::value&& _IsSame<)",
    "insertText": "decltype(declval<_Gp&>()())"
  }
]