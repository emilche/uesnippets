[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "ModulationParamMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModulationParamMode"
  },
  {
    "label": "FModulatorContinuousParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulatorContinuousParams"
  },
  {
    "label": "USoundNodeModulatorContinuous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNodeModulatorContinuous"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Sound / SoundNode . h \" # include \" SoundNodeModulatorContinuous . generated . h \" class FAudioDevice ; struct FActiveSound ; struct FSoundParseParameters ; struct FWaveInstance ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MPM_Normal)",
    "insertText": "UMETA(DisplayName = \"Normal\" , Tooltip = \"Clamps input value to the range (MinInput, MaxInput) then maps to the range (MinOutput, MaxOutput)\"), MPM_Abs UMETA(DisplayName = \"Absolute\" , Tooltip = \"Same as Normal except that the input value is treated as an absolute value\"), MPM_Direct UMETA(DisplayName = \"Direct\" , Tooltip = \"Use the input value directly without scaling or reference to Min or Max input or output values\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FModulatorContinuousParams() : Default(1.f) , MinInput(0.f) , MaxInput(1.f) , MinOutput(0.f) , MaxOutput(1.f) , ParamMode(MPM_Normal)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValue(const FActiveSound& ActiveSound)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(hidecategories=Object, editinlinenew, MinimalAPI, meta=( DisplayName=\"Continuous Modulator\" ))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=ContinuousModulator)"
  },
  {
    "label": "ParseNodes()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ParseNodes(FAudioDevice* AudioDevice, const UPTRINT NodeWaveInstanceHash, FActiveSound& ActiveSound, const FSoundParseParameters& ParseParams, TArray<FWaveInstance*>& WaveInstances)"
  }
]