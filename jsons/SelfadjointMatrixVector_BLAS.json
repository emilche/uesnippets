[
  {
    "label": "selfadjoint_matrix_vector_product_symv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_matrix_vector_product_symv"
  },
  {
    "label": "selfadjoint_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "selfadjoint_matrix_vector_product"
  },
  {
    "label": "EIGEN_BLAS_SYMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINT_MATRIX_VECTOR_BLAS_H # define EIGEN_SELFADJOINT_MATRIX_VECTOR_BLAS_H namespace Eigen { namespace internal { template<Scalar,Index,int StorageOrder,int UpLo,bool ConjugateLhs,bool ConjugateRhs> struct selfadjoint_matrix_vector_product_symv : selfadjoint_matrix_vector_product<Scalar,Index,StorageOrder,UpLo,ConjugateLhs,ConjugateRhs,BuiltIn> { } ; # define)",
    "insertText": "EIGEN_BLAS_SYMV_SPECIALIZE(Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(\\ Index size, const Scalar* lhs, Index lhsStride, \\ const Scalar* _rhs, Scalar* res, Scalar alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\ IsColMajor = StorageOrder = = ColMajor \\ } ; \\)",
    "insertText": "if(IsColMajor == ConjugateLhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ selfadjoint_matrix_vector_product<Scalar,Index,StorageOrder,UpLo,ConjugateLhs,ConjugateRhs,BuiltIn)",
    "insertText": "run(\\ size, lhs, lhsStride, _rhs, res, alpha)"
  },
  {
    "label": "EIGEN_BLAS_SYMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } ; \\)",
    "insertText": "EIGEN_BLAS_SYMV_SPECIALIZE(double) EIGEN_BLAS_SYMV_SPECIALIZE(float) EIGEN_BLAS_SYMV_SPECIALIZE(dcomplex) EIGEN_BLAS_SYMV_SPECIALIZE(scomplex) #define EIGEN_BLAS_SYMV_SPECIALIZATION(EIGTYPE,BLASTYPE,BLASFUNC)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ typedef Matrix<EIGTYPE,Dynamic,1,ColMajor> SYMVVector ; \\ \\ void)",
    "insertText": "run(\\ Index size, const EIGTYPE* lhs, Index lhsStride, \\ const EIGTYPE* _rhs, EIGTYPE* res, EIGTYPE alpha)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\ IsRowMajor = StorageOrder = = RowMajor ? 1 : 0,\\ IsLower = UpLo = = Lower ? 1 : 0 \\ } ; \\ BlasIndex n = convert_index<)",
    "insertText": "BlasIndex(size), lda=convert_index<BlasIndex>(lhsStride)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "uplo()",
    "kind": "Method",
    "detail": "Function (\\ const EIGTYPE* x_ptr ; \\ char)",
    "insertText": "uplo(IsRowMajor) ? (IsLower ? 'U' : 'L') : (IsLower ? 'L' : 'U')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ SYMVVector x_tmp ; \\)",
    "insertText": "if(ConjugateRhs)"
  },
  {
    "label": "map_x()",
    "kind": "Method",
    "detail": "Function (\\ Map<const SYMVVector,0>)",
    "insertText": "map_x(_rhs,size,1)"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ x_tmp = map_x .)",
    "insertText": "conjugate()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ x_ptr = x_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ } else x_ptr = _rhs ; \\)",
    "insertText": "BLASFUNC(&uplo, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)lhs, &lda, (const BLASTYPE*)x_ptr, &incx, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)res, &incy)"
  }
]