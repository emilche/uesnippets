[
  {
    "label": "FFlatTriangulationMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFlatTriangulationMeshGenerator"
  },
  {
    "label": "FFlatTriangulationMeshGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" IndexTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" MeshShapeGenerator . h \" namespace UE { namespace Geometry { class FFlatTriangulationMeshGenerator : public FMeshShapeGenerator { public : TArray<FVector2d> Vertices2D ; TArray<FIndex3i> Triangles2D ; TArray<int> Triangles2DPolygroups ; FVector3f Normal ; FIndex2i IndicesMap ; public :)",
    "insertText": "FFlatTriangulationMeshGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "MakeVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "MakeVertex(double x, double y)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "v(0, 0, 0)"
  }
]