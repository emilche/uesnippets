[
  {
    "label": "FMultiResConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiResConstraints"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / TriangleMesh . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FMultiResConstraints final { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "FMultiResConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMultiResConstraints(const FSolverParticlesRange& FineParticles, const int32 InCoarseSoftBodyId, const FTriangleMesh& InCoarseMesh, TArray<TVec4<FSolverReal>>&& InCoarseToFinePositionBaryCoordsAndDist, TArray<TVec3<int32>>&& InCoarseToFineSourceMeshVertIndices, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : NumParticles(FineParticles.Size()) , CoarseSoftBodyId(InCoarseSoftBodyId) , CoarseMesh(InCoarseMesh) , CoarseToFinePositionBaryCoordsAndDist(MoveTemp(InCoarseToFinePositionBaryCoordsAndDist)) , CoarseToFineSourceMeshVertIndices(MoveTemp(InCoarseToFineSourceMeshVertIndices)) , bUseXPBD(GetMultiResUseXPBD(PropertyCollection, false)) , Stiffness( FSolverVec2(GetWeightedFloatMultiResStiffness(PropertyCollection, 1.f)), WeightMaps.FindRef(GetMultiResStiffnessString(PropertyCollection, MultiResStiffnessName.ToString())), NumParticles, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, bUseXPBD ? MaxStiffness : (FSolverReal)1.f) , VelocityTargetStiffness( FSolverVec2(GetWeightedFloatMultiResVelocityTargetStiffness(PropertyCollection, 1.f)), WeightMaps.FindRef(GetMultiResVelocityTargetStiffnessString(PropertyCollection, MultiResVelocityTargetStiffnessName.ToString())), NumParticles, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, bUseXPBD ? MaxStiffness : (FSolverReal)1.f) , MultiResUseXPBDIndex(PropertyCollection) , MultiResStiffnessIndex(PropertyCollection) , MultiResVelocityTargetStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "FMultiResConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMultiResConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "SetNumZeroed(NumParticles)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyXPBDValues(MaxStiffness)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (} else { Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "UpdateFineTargets()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateFineTargets(const FSolverParticlesRange& CoarseParticles)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FSolverParticlesRange& FineParticles, const FSolverReal Dt)"
  },
  {
    "label": "GetFineTargetPositions()",
    "kind": "Method",
    "detail": "Function (const TArray<FSolverVec3>&)",
    "insertText": "GetFineTargetPositions()"
  },
  {
    "label": "HasWeightMap()",
    "kind": "Method",
    "detail": "Function (const FSolverReal StiffnessValue = Stiffness .)",
    "insertText": "HasWeightMap() ? Stiffness[ParticleIndex] : (FSolverReal)"
  },
  {
    "label": "HasWeightMap()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VelocityStiffnessValue = VelocityTargetStiffness .)",
    "insertText": "HasWeightMap() ? VelocityTargetStiffness[ParticleIndex] : (FSolverReal)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (const int32 NumParticles ; const int32 CoarseSoftBodyId ; const FTriangleMesh& CoarseMesh ; const TArray<TVec4<FSolverReal>> CoarseToFinePositionBaryCoordsAndDist ; const TArray<TVec3<int32>> CoarseToFineSourceMeshVertIndices ; bool bUseXPBD ; FPBDStiffness Stiffness ; FPBDStiffness VelocityTargetStiffness ; TArray<FSolverReal> Lambdas ; TArray<FSolverVec3> FineTargetPositions ; TArray<FSolverVec3> FineTargetVelocities ; TArray<FSolverReal> CoarseBarycentricMass ; int32 NonZeroStiffnessMin = INDEX_NONE ; int32 NonZeroStiffnessMax = INDEX_NONE ; bool bStiffnessEntriesInitialized = false ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(MultiResUseXPBD, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(MultiResStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(MultiResVelocityTargetStiffness, float)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_MULTIRES_ISPC_ENABLED_DEFAULT)"
  }
]