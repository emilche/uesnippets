[
  {
    "label": "FBehaviorTreeDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorTreeDebugger"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBTAuxiliaryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTAuxiliaryNode"
  },
  {
    "label": "UBTCompositeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTCompositeNode"
  },
  {
    "label": "UBTDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTDecorator"
  },
  {
    "label": "UBTNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTNode"
  },
  {
    "label": "UBTTask_RunBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTask_RunBehavior"
  },
  {
    "label": "UBTTask_RunBehaviorDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTask_RunBehaviorDynamic"
  },
  {
    "label": "UBTTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTaskNode"
  },
  {
    "label": "FBTNodeExecutionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTNodeExecutionInfo"
  },
  {
    "label": "FBTPendingExecutionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTPendingExecutionInfo"
  },
  {
    "label": "FBTTreeStartInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTTreeStartInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBehaviorTreeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FBranchActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranchActionInfo"
  },
  {
    "label": "FBTSuspendBranchActionsScoped",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTSuspendBranchActionsScoped"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "UBehaviorTreeComponent()",
    "kind": "Method",
    "detail": "Function (AIMODULE_API)",
    "insertText": "UBehaviorTreeComponent(FVTableHelper& Helper)"
  },
  {
    "label": "StartTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTree(UBehaviorTree& Asset, EBTExecutionMode::Type ExecuteMode = EBTExecutionMode::Looped)"
  },
  {
    "label": "StopTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTree(EBTStopMode::Type StopMode = EBTStopMode::Safe)"
  },
  {
    "label": "RestartTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartTree(EBTRestartMode RestartMode = EBTRestartMode::ForceReevaluateRootNode)"
  },
  {
    "label": "RequestExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestExecution(const UBTCompositeNode* RequestedOn, const int32 InstanceIdx, \n\t\tconst UBTNode* RequestedBy, const int32 RequestedByChildIndex,\n\t\tconst EBTNodeResult::Type ContinueWithResult, bool bStoreForDebugger = true)"
  },
  {
    "label": "RequestUnregisterAuxNodesInBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUnregisterAuxNodesInBranch(const UBTCompositeNode* Node)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(EBTNodeResult::Type ContinueWithResult)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "RequestBranchActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchActivation(const UBTDecorator& RequestedBy, const bool bRequestEvenIfExecuting)"
  },
  {
    "label": "RequestBranchDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchDeactivation(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "OnTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskFinished(const UBTTaskNode* TaskNode, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "RegisterMessageObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMessageObserver(const UBTTaskNode* TaskNode, FName MessageType)"
  },
  {
    "label": "RegisterMessageObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMessageObserver(const UBTTaskNode* TaskNode, FName MessageType, FAIRequestID MessageID)"
  },
  {
    "label": "UnregisterMessageObserversFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMessageObserversFrom(const UBTTaskNode* TaskNode)"
  },
  {
    "label": "UnregisterMessageObserversFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMessageObserversFrom(const FBTNodeIndex& TaskIdx)"
  },
  {
    "label": "RegisterParallelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParallelTask(const UBTTaskNode* TaskNode)"
  },
  {
    "label": "UnregisterParallelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParallelTask(const UBTTaskNode* TaskNode, uint16 InstanceIdx)"
  },
  {
    "label": "UnregisterAuxNodesUpTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesUpTo(const FBTNodeIndex& Index)"
  },
  {
    "label": "UnregisterAuxNodesInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesInRange(const FBTNodeIndex& FromIndex, const FBTNodeIndex& ToIndex)"
  },
  {
    "label": "UnregisterAuxNodesInBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesInBranch(const UBTCompositeNode* Node, bool bApplyImmediately = true)"
  },
  {
    "label": "ScheduleNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNextTick(float NextDeltaTime)"
  },
  {
    "label": "ProcessExecutionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExecutionRequest()"
  },
  {
    "label": "ScheduleExecutionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleExecutionUpdate()"
  },
  {
    "label": "AddCooldownTagDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCooldownTagDuration(FGameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration)"
  },
  {
    "label": "SetDynamicSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicSubtree(FGameplayTag InjectTag, UBehaviorTree* BehaviorAsset)"
  },
  {
    "label": "SetDynamicSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicSubtree(FGameplayTag InjectTag, UBehaviorTree* BehaviorAsset, UBTCompositeNode* OptionalStartingNode)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "PushInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushInstance(UBehaviorTree& TreeAsset)"
  },
  {
    "label": "UpdateInstanceId()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "UpdateInstanceId(UBehaviorTree* TreeAsset, const UBTNode* OriginNode, int32 OriginInstanceIdx)"
  },
  {
    "label": "RemoveAllInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllInstances()"
  },
  {
    "label": "CopyInstanceMemoryToPersistent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstanceMemoryToPersistent()"
  },
  {
    "label": "CopyInstanceMemoryFromPersistent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstanceMemoryFromPersistent()"
  },
  {
    "label": "OnTreeFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeFinished()"
  },
  {
    "label": "ApplySearchData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchData(UBTNode* NewActiveNode)"
  },
  {
    "label": "ApplyDiscardedSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDiscardedSearch()"
  },
  {
    "label": "ApplySearchUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchUpdates(const TArray<FBehaviorTreeSearchUpdate>& UpdateList, int32 NewNodeExecutionIndex, bool bPostUpdate = false)"
  },
  {
    "label": "ApplyAllSearchUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAllSearchUpdates(const TArray<FBehaviorTreeSearchUpdate>& UpdateList, int32 NewNodeExecutionIndex, bool bDoPostUpdate = true, bool bAllowTaskUpdates = true)"
  },
  {
    "label": "AbortCurrentTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortCurrentTask()"
  },
  {
    "label": "ExecuteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTask(UBTTaskNode* TaskNode)"
  },
  {
    "label": "DeactivateUpTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeactivateUpTo(const UBTCompositeNode* Node, uint16 NodeInstanceIdx, EBTNodeResult::Type& NodeResult, int32& OutLastDeactivatedChildIndex)"
  },
  {
    "label": "TrackPendingLatentAborts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackPendingLatentAborts()"
  },
  {
    "label": "TrackNewLatentAborts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackNewLatentAborts()"
  },
  {
    "label": "ProcessPendingExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingExecution()"
  },
  {
    "label": "ProcessPendingInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingInitialize()"
  },
  {
    "label": "RollbackSearchChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollbackSearchChanges()"
  },
  {
    "label": "StoreDebuggerExecutionStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerExecutionStep(EBTExecutionSnap::Type SnapType)"
  },
  {
    "label": "StoreDebuggerRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerRestart(const UBTNode* Node, uint16 InstanceIdx, bool bAllowed)"
  },
  {
    "label": "IsDebuggerActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggerActive()"
  },
  {
    "label": "EvaluateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBranch(EBTNodeResult::Type LastResult)"
  },
  {
    "label": "EvaluateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBranch(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "ActivateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateBranch(const UBTDecorator& RequestedBy, bool bRequestEvenIfNotExecuting)"
  },
  {
    "label": "DeactivateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateBranch(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "SuspendBranchActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendBranchActions(EBTBranchAction BranchActions = EBTBranchAction::All)"
  },
  {
    "label": "ResumeBranchActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeBranchActions()"
  },
  {
    "label": "TickNewlyAddedAuxNodesHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickNewlyAddedAuxNodesHelper()"
  },
  {
    "label": "ApplySearchUpdatesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchUpdatesImpl(const TArray<FBehaviorTreeSearchUpdate>& UpdateList, int32 NewNodeExecutionIndex, bool bPostUpdate, bool bAllowTaskUpdates)"
  }
]