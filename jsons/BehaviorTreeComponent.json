[
  {
    "label": "FBehaviorTreeDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorTreeDebugger"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBTAuxiliaryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTAuxiliaryNode"
  },
  {
    "label": "UBTCompositeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTCompositeNode"
  },
  {
    "label": "UBTDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTDecorator"
  },
  {
    "label": "UBTNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTNode"
  },
  {
    "label": "UBTTask_RunBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTask_RunBehavior"
  },
  {
    "label": "UBTTask_RunBehaviorDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTask_RunBehaviorDynamic"
  },
  {
    "label": "UBTTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTaskNode"
  },
  {
    "label": "FBTNodeExecutionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTNodeExecutionInfo"
  },
  {
    "label": "FBTPendingExecutionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTPendingExecutionInfo"
  },
  {
    "label": "FBTTreeStartInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTTreeStartInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBehaviorTreeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FBranchActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranchActionInfo"
  },
  {
    "label": "FBTSuspendBranchActionsScoped",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTSuspendBranchActionsScoped"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FBTNodeExecutionInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" EngineDefines . h \" # include \" BehaviorTree / BehaviorTreeTypes . h \" # include \" GameplayTagContainer . h \" # include \" AITypes . h \" # include \" BrainComponent . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" BehaviorTreeComponent . generated . h \" class FBehaviorTreeDebugger ; class UBehaviorTree ; class UBTAuxiliaryNode ; class UBTCompositeNode ; class UBTDecorator ; class UBTNode ; class UBTTask_RunBehavior ; class UBTTask_RunBehaviorDynamic ; class UBTTaskNode ; struct FBTNodeExecutionInfo { FBTNodeIndex SearchStart ; FBTNodeIndex SearchEnd ; const UBTCompositeNode* ExecuteNode ; uint16 ExecuteInstanceIdx ; TEnumAsByte<EBTNodeResult::Type> ContinueWithResult ; uint8 bTryNextChild : 1 ; uint8 bIsRestart : 1 ;)",
    "insertText": "FBTNodeExecutionInfo() : ExecuteNode(NULL), bTryNextChild(false), bIsRestart(false)"
  },
  {
    "label": "FBTPendingExecutionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBTPendingExecutionInfo { UBTTaskNode* NextTask ; uint32 bOutOfNodes : 1 ; uint32 bLocked : 1 ;)",
    "insertText": "FBTPendingExecutionInfo() : NextTask(NULL), bOutOfNodes(false), bLocked(false)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (bLocked = true ; } void)",
    "insertText": "Unlock()"
  },
  {
    "label": "FBTTreeStartInfo()",
    "kind": "Method",
    "detail": "Function (bLocked = false ; } } ; struct FBTTreeStartInfo { UBehaviorTree* Asset ; EBTExecutionMode::Type ExecuteMode ; uint8 bPendingInitialize : 1 ;)",
    "insertText": "FBTTreeStartInfo() : Asset(nullptr), ExecuteMode(EBTExecutionMode::Looped), bPendingInitialize(0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EBTBranchAction : uint16 { None = 0 x0,DecoratorEvaluate = 0 x1,DecoratorActivate_IfNotExecuting = 0 x2,DecoratorActivate_EvenIfExecuting = 0 x4,DecoratorActivate = DecoratorActivate_IfNotExecuting | DecoratorActivate_EvenIfExecuting,DecoratorDeactivate = 0 x8,UnregisterAuxNodes = 0 x10,StopTree_Safe = 0 x20,StopTree_Forced = 0 x40,ActiveNodeEvaluate = 0 x80,SubTreeEvaluate = 0 x100,ProcessPendingInitialize = 0 x200,Cleanup = 0 x400,UninitializeComponent = 0 x800,StopTree = StopTree_Safe | StopTree_Forced,Changing_Topology_Actions = UnregisterAuxNodes | StopTree | ProcessPendingInitialize | Cleanup | UninitializeComponent,All = DecoratorEvaluate | DecoratorActivate_IfNotExecuting | DecoratorActivate_EvenIfExecuting | DecoratorDeactivate | Changing_Topology_Actions | ActiveNodeEvaluate | SubTreeEvaluate,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EBTBranchAction)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup = AI, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual void RegisterComponentTickFunctions(bool bRegister)"
  },
  {
    "label": "SetComponentTickEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentTickEnabled(bool bEnabled)"
  },
  {
    "label": "StartLogic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLogic()"
  },
  {
    "label": "RestartLogic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartLogic()"
  },
  {
    "label": "StopLogic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogic(const FString& Reason)"
  },
  {
    "label": "PauseLogic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseLogic(const FString& Reason)"
  },
  {
    "label": "ResumeLogic()",
    "kind": "Method",
    "detail": "Function (EAILogicResuming::Type)",
    "insertText": "ResumeLogic(const FString& Reason)"
  },
  {
    "label": "TreeHasBeenStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TreeHasBeenStarted()"
  },
  {
    "label": "UBehaviorTreeComponent()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UBehaviorTreeComponent(FVTableHelper& Helper)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const FAIMessage& Message)"
  },
  {
    "label": "UninitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeComponent()"
  },
  {
    "label": "StartTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTree(UBehaviorTree& Asset, EBTExecutionMode::Type ExecuteMode = EBTExecutionMode::Looped)"
  },
  {
    "label": "StopTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTree(EBTStopMode::Type StopMode = EBTStopMode::Safe)"
  },
  {
    "label": "RestartTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartTree(EBTRestartMode RestartMode = EBTRestartMode::ForceReevaluateRootNode)"
  },
  {
    "label": "RequestExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestExecution(const UBTCompositeNode* RequestedOn, const int32 InstanceIdx, const UBTNode* RequestedBy, const int32 RequestedByChildIndex, const EBTNodeResult::Type ContinueWithResult, bool bStoreForDebugger = true)"
  },
  {
    "label": "RequestExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestExecution(const UBTDecorator* RequestedBy)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(*RequestedBy)"
  },
  {
    "label": "RequestExecution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestExecution(EBTNodeResult::Type ContinueWithResult)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(ContinueWithResult)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(EBTNodeResult::Type ContinueWithResult)"
  },
  {
    "label": "RequestBranchEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchEvaluation(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "RequestBranchActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchActivation(const UBTDecorator& RequestedBy, const bool bRequestEvenIfExecuting)"
  },
  {
    "label": "RequestBranchDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBranchDeactivation(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "OnTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskFinished(const UBTTaskNode* TaskNode, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "RegisterMessageObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMessageObserver(const UBTTaskNode* TaskNode, FName MessageType)"
  },
  {
    "label": "RegisterMessageObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMessageObserver(const UBTTaskNode* TaskNode, FName MessageType, FAIRequestID MessageID)"
  },
  {
    "label": "UnregisterMessageObserversFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMessageObserversFrom(const UBTTaskNode* TaskNode)"
  },
  {
    "label": "UnregisterMessageObserversFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMessageObserversFrom(const FBTNodeIndex& TaskIdx)"
  },
  {
    "label": "RegisterParallelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParallelTask(const UBTTaskNode* TaskNode)"
  },
  {
    "label": "UnregisterParallelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParallelTask(const UBTTaskNode* TaskNode, uint16 InstanceIdx)"
  },
  {
    "label": "UnregisterAuxNodesUpTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesUpTo(const FBTNodeIndex& Index)"
  },
  {
    "label": "UnregisterAuxNodesInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesInRange(const FBTNodeIndex& FromIndex, const FBTNodeIndex& ToIndex)"
  },
  {
    "label": "UnregisterAuxNodesInBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAuxNodesInBranch(const UBTCompositeNode* Node, bool bApplyImmediately = true)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "ScheduleNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNextTick(float NextDeltaTime)"
  },
  {
    "label": "ProcessExecutionRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExecutionRequest()"
  },
  {
    "label": "ScheduleExecutionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleExecutionUpdate()"
  },
  {
    "label": "FindInstanceContainingNode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindInstanceContainingNode(const UBTNode* Node)"
  },
  {
    "label": "FindTemplateNode()",
    "kind": "Method",
    "detail": "Function (UBTNode*)",
    "insertText": "FindTemplateNode(const UBTNode* Node)"
  },
  {
    "label": "GetCurrentTree()",
    "kind": "Method",
    "detail": "Function (UBehaviorTree*)",
    "insertText": "GetCurrentTree()"
  },
  {
    "label": "GetRootTree()",
    "kind": "Method",
    "detail": "Function (UBehaviorTree*)",
    "insertText": "GetRootTree()"
  },
  {
    "label": "GetActiveNode()",
    "kind": "Method",
    "detail": "Function (const UBTNode*)",
    "insertText": "GetActiveNode()"
  },
  {
    "label": "GetActiveInstanceIdx()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetActiveInstanceIdx()"
  },
  {
    "label": "GetNodeMemory()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetNodeMemory(const UBTNode* Node, int32 InstanceIdx)"
  },
  {
    "label": "IsRestartPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRestartPending()"
  },
  {
    "label": "IsAbortPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAbortPending()"
  },
  {
    "label": "IsExecutingBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExecutingBranch(const UBTNode* Node, int32 ChildIndex = -1)"
  },
  {
    "label": "IsAuxNodeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuxNodeActive(const UBTAuxiliaryNode* AuxNode)"
  },
  {
    "label": "IsAuxNodeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuxNodeActive(const UBTAuxiliaryNode* AuxNodeTemplate, int32 InstanceIdx)"
  },
  {
    "label": "IsInstanceStackEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceStackEmpty()"
  },
  {
    "label": "GetAccumulatedTickDeltaTime()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAccumulatedTickDeltaTime()"
  },
  {
    "label": "GetDebugInfoString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugInfoString()"
  },
  {
    "label": "DescribeActiveTasks()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeActiveTasks()"
  },
  {
    "label": "DescribeActiveTrees()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeActiveTrees()"
  },
  {
    "label": "SetDynamicSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicSubtree(FGameplayTag InjectTag, UBehaviorTree* BehaviorAsset, UBTCompositeNode* OptionalStartingNode)"
  },
  {
    "label": "ForEachChildTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachChildTask(TFunctionRef<void (UBTTaskNode&, const FBehaviorTreeInstance&, int32 InstanceIndex)> Functor)"
  },
  {
    "label": "ForEachChildTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachChildTask(UBTCompositeNode& StartNode, int32 InstanceIndex, TFunctionRef<void(UBTTaskNode&, const FBehaviorTreeInstance&, int32 InstanceIndex)> Functor)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# endif # if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "SetCSVTickStatName()",
    "kind": "Method",
    "detail": "Function (# endif # if CSV_PROFILER_STATS void)",
    "insertText": "SetCSVTickStatName(const char* InCSVTickStatName)"
  },
  {
    "label": "FBranchActionInfo()",
    "kind": "Method",
    "detail": "Function (FBehaviorTreeSearchData SearchData ; FBTNodeExecutionInfo ExecutionRequest ; FBTPendingExecutionInfo PendingExecution ; struct FBranchActionInfo {)",
    "insertText": "FBranchActionInfo(const EBTBranchAction InAction) : Action(InAction)"
  },
  {
    "label": "FBranchActionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBranchActionInfo(const UBTNode* InNode, const EBTBranchAction InAction) : Node(InNode) , Action(InAction)"
  },
  {
    "label": "FBranchActionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBranchActionInfo(const UBTNode* InNode, EBTNodeResult::Type InContinueWithResult, const EBTBranchAction InAction) : Node(InNode) , ContinueWithResult(InContinueWithResult) , Action(InAction)"
  },
  {
    "label": "PushInstance()",
    "kind": "Method",
    "detail": "Function (} const UBTNode* Node = nullptr ; EBTNodeResult::Type ContinueWithResult = EBTNodeResult::Succeeded ; EBTBranchAction Action ; } ; EBTBranchAction SuspendedBranchActions ; TArray<FBranchActionInfo> PendingBranchActionRequests ; FBTTreeStartInfo TreeStartInfo ; TMultiMap<FBTNodeIndex,FAIMessageObserverHandle> TaskMessageObservers ; TMap<FGameplayTag,double> CooldownTagsMap ; # if USE_BEHAVIORTREE_DEBUGGER TArray<TArray<FBehaviorTreeDebuggerInstance::FNodeFlowData>> CurrentSearchFlow ; TArray<TArray<FBehaviorTreeDebuggerInstance::FNodeFlowData>> CurrentRestarts ; TMap<FName,FString> SearchStartBlackboard ; TArray<FBehaviorTreeDebuggerInstance> RemovedInstances ; TArray<FBehaviorTreeExecutionStep> DebuggerSteps ; int32 ActiveDebuggerCounter ; # endif # if ! UE_BUILD_SHIPPING bool bAddedEndFrameCallback ; double FrameSearchTime ; int32 NumSearchTimeCalls ; # endif uint16 ActiveInstanceIdx ; uint8 bLoopExecution : 1 ; uint8 bWaitingForLatentAborts : 1 ; uint8 bRequestedFlowUpdate : 1 ; uint8 bRequestedStop : 1 ; uint8 bIsRunning : 1 ; uint8 bIsPaused : 1 ; bool)",
    "insertText": "PushInstance(UBehaviorTree& TreeAsset)"
  },
  {
    "label": "UpdateInstanceId()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "UpdateInstanceId(UBehaviorTree* TreeAsset, const UBTNode* OriginNode, int32 OriginInstanceIdx)"
  },
  {
    "label": "RemoveAllInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllInstances()"
  },
  {
    "label": "CopyInstanceMemoryToPersistent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstanceMemoryToPersistent()"
  },
  {
    "label": "CopyInstanceMemoryFromPersistent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstanceMemoryFromPersistent()"
  },
  {
    "label": "OnTreeFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeFinished()"
  },
  {
    "label": "ApplySearchData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchData(UBTNode* NewActiveNode)"
  },
  {
    "label": "ApplyDiscardedSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDiscardedSearch()"
  },
  {
    "label": "ApplyAllSearchUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAllSearchUpdates(const TArray<FBehaviorTreeSearchUpdate>& UpdateList, int32 NewNodeExecutionIndex, bool bDoPostUpdate = true, bool bAllowTaskUpdates = true)"
  },
  {
    "label": "AbortCurrentTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortCurrentTask()"
  },
  {
    "label": "ExecuteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTask(UBTTaskNode* TaskNode)"
  },
  {
    "label": "DeactivateUpTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeactivateUpTo(const UBTCompositeNode* Node, uint16 NodeInstanceIdx, EBTNodeResult::Type& NodeResult, int32& OutLastDeactivatedChildIndex)"
  },
  {
    "label": "TrackPendingLatentAborts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackPendingLatentAborts()"
  },
  {
    "label": "TrackNewLatentAborts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackNewLatentAborts()"
  },
  {
    "label": "HasActiveLatentAborts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveLatentAborts()"
  },
  {
    "label": "ProcessPendingExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingExecution()"
  },
  {
    "label": "ProcessPendingInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingInitialize()"
  },
  {
    "label": "RollbackSearchChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollbackSearchChanges()"
  },
  {
    "label": "StoreDebuggerExecutionStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerExecutionStep(EBTExecutionSnap::Type SnapType)"
  },
  {
    "label": "StoreDebuggerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerInstance(FBehaviorTreeDebuggerInstance& InstanceInfo, uint16 InstanceIdx, EBTExecutionSnap::Type SnapType)"
  },
  {
    "label": "StoreDebuggerRemovedInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerRemovedInstance(uint16 InstanceIdx)"
  },
  {
    "label": "StoreDebuggerSearchStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerSearchStep(const UBTNode* Node, uint16 InstanceIdx, EBTNodeResult::Type NodeResult)"
  },
  {
    "label": "StoreDebuggerSearchStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerSearchStep(const UBTNode* Node, uint16 InstanceIdx, bool bPassed)"
  },
  {
    "label": "StoreDebuggerRestart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerRestart(const UBTNode* Node, uint16 InstanceIdx, bool bAllowed)"
  },
  {
    "label": "StoreDebuggerBlackboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerBlackboard(TMap<FName, FString>& BlackboardValueDesc)"
  },
  {
    "label": "StoreDebuggerRuntimeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreDebuggerRuntimeValues(TArray<FString>& RuntimeDescriptions, UBTNode* RootNode, uint16 InstanceIdx)"
  },
  {
    "label": "UpdateDebuggerAfterExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebuggerAfterExecution(const UBTTaskNode* TaskNode, uint16 InstanceIdx)"
  },
  {
    "label": "IsDebuggerActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggerActive()"
  },
  {
    "label": "CalculateRelativePriority()",
    "kind": "Method",
    "detail": "Function (EBTNodeRelativePriority)",
    "insertText": "CalculateRelativePriority(const UBTNode* NodeA, const UBTNode* NodeB)"
  },
  {
    "label": "EvaluateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBranch(EBTNodeResult::Type LastResult)"
  },
  {
    "label": "EvaluateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBranch(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "ActivateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateBranch(const UBTDecorator& RequestedBy, bool bRequestEvenIfNotExecuting)"
  },
  {
    "label": "DeactivateBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateBranch(const UBTDecorator& RequestedBy)"
  },
  {
    "label": "SuspendBranchActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendBranchActions(EBTBranchAction BranchActions = EBTBranchAction::All)"
  },
  {
    "label": "ResumeBranchActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeBranchActions()"
  },
  {
    "label": "SuspendBranchActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendBranchActions()"
  },
  {
    "label": "FBTSuspendBranchActionsScoped()",
    "kind": "Method",
    "detail": "Function (} struct FBTSuspendBranchActionsScoped {)",
    "insertText": "FBTSuspendBranchActionsScoped(UBehaviorTreeComponent& InBTComp, EBTBranchAction BranchActions = EBTBranchAction::All) : BTComp(InBTComp)"
  },
  {
    "label": "SuspendBranchActions()",
    "kind": "Method",
    "detail": "Function (BTComp .)",
    "insertText": "SuspendBranchActions(BranchActions)"
  },
  {
    "label": "FBTSuspendBranchActionsScoped()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBTSuspendBranchActionsScoped()"
  },
  {
    "label": "TickNewlyAddedAuxNodesHelper()",
    "kind": "Method",
    "detail": "Function (} UBehaviorTreeComponent& BTComp ; } ; void)",
    "insertText": "TickNewlyAddedAuxNodesHelper()"
  },
  {
    "label": "ApplySearchUpdatesImpl()",
    "kind": "Method",
    "detail": "Function (UBTNode ; UBTCompositeNode ; UBTTaskNode ; UBTTask_RunBehavior ; UBTTask_RunBehaviorDynamic ; FBehaviorTreeDebugger ; FBehaviorTreeInstance ; private : void)",
    "insertText": "ApplySearchUpdatesImpl(const TArray<FBehaviorTreeSearchUpdate>& UpdateList, int32 NewNodeExecutionIndex, bool bPostUpdate, bool bAllowTaskUpdates)"
  }
]