[
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CPUFreqMonitorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPUFreqMonitorTest"
  },
  {
    "label": "CPUFreqMonitorDelegate()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CPUFreqMonitorDelegate()"
  },
  {
    "label": "RecordFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFrequency(unsigned int cpu_id, unsigned int freq)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateTaskRunner()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "IsEnabledForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForTesting()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(std::vector<std::pair<unsigned int, base::ScopedFD>> fds)"
  }
]