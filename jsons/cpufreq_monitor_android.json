[
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CPUFreqMonitorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPUFreqMonitorTest"
  },
  {
    "label": "CPUFreqMonitorDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_CPUFREQ_MONITOR_ANDROID_H_ # define BASE_TRACE_EVENT_CPUFREQ_MONITOR_ANDROID_H_ # include<atomic> # include \" base / base_export . h \" # include \" base / files / scoped_file . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / trace_event / trace_log . h \" namespace base { class SingleThreadTaskRunner ; namespace trace_event { class BASE_EXPORT CPUFreqMonitorDelegate { public :)",
    "insertText": "CPUFreqMonitorDelegate()"
  },
  {
    "label": "CPUFreqMonitorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CPUFreqMonitorDelegate(const CPUFreqMonitorDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CPUFreqMonitorDelegate&)",
    "insertText": "operator(const CPUFreqMonitorDelegate&)"
  },
  {
    "label": "GetCPUIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCPUIds(std::vector<unsigned int>* ids)"
  },
  {
    "label": "GetKernelMaxCPUs()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetKernelMaxCPUs()"
  },
  {
    "label": "RecordFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFrequency(unsigned int cpu_id, unsigned int freq)"
  },
  {
    "label": "IsTraceCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTraceCategoryEnabled()"
  },
  {
    "label": "GetScalingCurFreqPathString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetScalingCurFreqPathString(unsigned int cpu_id)"
  },
  {
    "label": "GetRelatedCPUsPathString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetRelatedCPUsPathString(unsigned int cpu_id)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateTaskRunner()"
  },
  {
    "label": "CPUFreqMonitor()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT CPUFreqMonitor : public TraceLog::EnabledStateObserver { public : const size_t kDefaultCPUFreqSampleIntervalMs = 5 0 ;)",
    "insertText": "CPUFreqMonitor()"
  },
  {
    "label": "CPUFreqMonitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CPUFreqMonitor(const CPUFreqMonitor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CPUFreqMonitor&)",
    "insertText": "operator(const CPUFreqMonitor&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (CPUFreqMonitor*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "OnTraceLogEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceLogEnabled()"
  },
  {
    "label": "OnTraceLogDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceLogDisabled()"
  },
  {
    "label": "IsEnabledForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForTesting()"
  },
  {
    "label": "CPUFreqMonitor()",
    "kind": "Method",
    "detail": "Function (private : class CPUFreqMonitorTest ;)",
    "insertText": "CPUFreqMonitor(std::unique_ptr<CPUFreqMonitorDelegate> delegate)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(std::vector<std::pair<unsigned int, base::ScopedFD>> fds)"
  },
  {
    "label": "GetOrCreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (const scoped_refptr<SingleThreadTaskRunner>&)",
    "insertText": "GetOrCreateTaskRunner()"
  }
]