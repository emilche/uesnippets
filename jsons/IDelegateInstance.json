[
  {
    "label": "FDelegateHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelegateHandle"
  },
  {
    "label": "EGenerateNewHandleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGenerateNewHandleType"
  },
  {
    "label": "IDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDelegateInstance"
  },
  {
    "label": "FDelegateHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" Delegates / DelegateSettings . h \" class FDelegateHandle { public : enum EGenerateNewHandleType { GenerateNewHandle } ;)",
    "insertText": "FDelegateHandle() : ID(0)"
  },
  {
    "label": "FDelegateHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDelegateHandle(EGenerateNewHandleType) : ID(GenerateNewID())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ID = 0 ; } bool)",
    "insertText": "operator(const FDelegateHandle& Rhs)"
  },
  {
    "label": "GenerateNewID()",
    "kind": "Method",
    "detail": "Function (} private : uint64)",
    "insertText": "GenerateNewID()"
  },
  {
    "label": "IDelegateInstance()",
    "kind": "Method",
    "detail": "Function (uint64 ID ; } ; class IDelegateInstance { public : ~)",
    "insertText": "IDelegateInstance()"
  },
  {
    "label": "TryGetBoundFunctionName()",
    "kind": "Method",
    "detail": "Function (# if USE_DELEGATE_TRYGETBOUNDFUNCTIONNAME FName)",
    "insertText": "TryGetBoundFunctionName()"
  },
  {
    "label": "GetUObject()",
    "kind": "Method",
    "detail": "Function (# endif UObject*)",
    "insertText": "GetUObject()"
  },
  {
    "label": "GetObjectForTimerManager()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetObjectForTimerManager()"
  },
  {
    "label": "GetBoundProgramCounterForTimerManager()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetBoundProgramCounterForTimerManager()"
  },
  {
    "label": "HasSameObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSameObject(const void* InUserObject)"
  },
  {
    "label": "IsCompactable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompactable()"
  },
  {
    "label": "IsSafeToExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSafeToExecute()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "GetHandle()"
  }
]