[
  {
    "label": "ITargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetDevice"
  },
  {
    "label": "ITargetDeviceOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetDeviceOutput"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTargetDeviceThreadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceThreadInfo"
  },
  {
    "label": "FTargetDeviceProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceProcessInfo"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Interfaces / TargetDeviceId . h \" # include \" Interfaces / ITargetDeviceSocket . h \" class ITargetDevice ; class ITargetDeviceOutput ; class ITargetPlatform ; enum class ETargetDeviceFeatures { MultiLaunch,PowerOff,PowerOn,ProcessSnapshot,Reboot } ; enum class ETargetDeviceTypes { Indeterminate,Browser,Console,Desktop,Phone,Tablet,HMD } ; enum class ETargetDeviceConnectionTypes { Unknown,USB,Wifi,Ethernet,Simulator,Proprietary } ; namespace TargetDeviceTypes { FString)",
    "insertText": "ToString(ETargetDeviceTypes DeviceType)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "FString(\"Indeterminate\")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } } namespace TargetDeviceConnectionTypes { FString)",
    "insertText": "ToString(ETargetDeviceConnectionTypes DeviceConnectionType)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "FString(\"Unknown\")"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (} } } enum class ETargetDeviceThreadStates { Unknown,CanRun,Inactive,Inhibited,RunQueue,Running } ; enum class ETargetDeviceThreadWaitStates { Unknown,Locked,Sleeping,Suspended,Swapped,Waiting } ; struct FTargetDeviceThreadInfo { uint64 ExitCode ; uint32 Id ; FString Name ; uint64 StackSize ; ETargetDeviceThreadStates State ; ETargetDeviceThreadWaitStates WaitState ; } ; struct FTargetDeviceProcessInfo { int64 Id ; FString Name ; uint64 ParentId ; TArray<FTargetDeviceThreadInfo> Threads ; FString UserName ; } ; typedef TSharedPtr<class ITargetDevice,ESPMode::ThreadSafe> ITargetDevicePtr ; typedef TSharedRef<class ITargetDevice,ESPMode::ThreadSafe> ITargetDeviceRef ; typedef TWeakPtr<class ITargetDevice,ESPMode::ThreadSafe> ITargetDeviceWeakPtr ; typedef TSharedPtr<class ITargetDeviceOutput,ESPMode::ThreadSafe> ITargetDeviceOutputPtr ; class ITargetDevice { public : bool)",
    "insertText": "Connect()"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetModelId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetModelId()"
  },
  {
    "label": "GetOSVersion()",
    "kind": "Method",
    "detail": "Function (} ; FString)",
    "insertText": "GetOSVersion()"
  },
  {
    "label": "GetDeviceConnectionType()",
    "kind": "Method",
    "detail": "Function (} ; ETargetDeviceConnectionTypes)",
    "insertText": "GetDeviceConnectionType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "GetProcessSnapshotAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcessSnapshotAsync(TFunction<void(const TArray<FTargetDeviceProcessInfo>&)> CompleteHandler)"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (TArray<FTargetDeviceProcessInfo> InProcessInfos ;)",
    "insertText": "GetProcessSnapshot(InProcessInfos)"
  },
  {
    "label": "CompleteHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteHandler(InProcessInfos)"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unimplemented()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (ITargetPlatform* DummyReference = nullptr ; return* DummyReference ; } ; public : const class ITargetPlatformSettings&)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "IsAuthorized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuthorized()"
  },
  {
    "label": "PowerOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PowerOn()"
  },
  {
    "label": "Reboot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reboot(bool bReconnect = false)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFeature(ETargetDeviceFeatures Feature)"
  },
  {
    "label": "TerminateProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TerminateProcess(const int64 ProcessId)"
  },
  {
    "label": "SetUserCredentials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserCredentials(const FString& UserName, const FString& UserPassword)"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "ExecuteConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteConsoleCommand(const FString& ExecCommand)"
  },
  {
    "label": "CreateDeviceOutputRouter()",
    "kind": "Method",
    "detail": "Function (} ; ITargetDeviceOutputPtr)",
    "insertText": "CreateDeviceOutputRouter(FOutputDevice* Output)"
  },
  {
    "label": "OpenConnection()",
    "kind": "Method",
    "detail": "Function (} ITargetDeviceSocketPtr)",
    "insertText": "OpenConnection(uint32 ProtocolIndex)"
  },
  {
    "label": "IsProtocolAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProtocolAvailable(uint32 ProtocolIndex)"
  },
  {
    "label": "GetAllDevicesDefaultVariant()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetAllDevicesDefaultVariant()"
  },
  {
    "label": "ITargetDevice()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "ITargetDevice()"
  }
]