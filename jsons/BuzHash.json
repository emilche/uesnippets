[
  {
    "label": "FBuzHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuzHash"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Memory / MemoryView . h \" struct FBuzHash { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "FBuzHash()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FBuzHash()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Get()"
  },
  {
    "label": "Rol32()",
    "kind": "Method",
    "detail": "Function (State =)",
    "insertText": "Rol32(State, 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Count + + ; } void)",
    "insertText": "Add(FMemoryView View)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add((const uint8*)View.GetData(), View.GetSize())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const uint8* Data, uint64 Size)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Data[Idx])"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Sub(uint8 X)"
  },
  {
    "label": "Rol32()",
    "kind": "Method",
    "detail": "Function (State = State ^)",
    "insertText": "Rol32(Table[X], uint32(Count - 1))"
  },
  {
    "label": "Rol32()",
    "kind": "Method",
    "detail": "Function (Count - - ; } private : const uint32 Table [ 2 5 6 ] ; uint64 Count = 0 ; uint32 State = 0 ; uint32)",
    "insertText": "Rol32(uint32 V, uint32 N)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (N& = 3 1 ;)",
    "insertText": "return((V) << (N)) | ((V) >> (32 - N))"
  }
]