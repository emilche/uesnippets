[
  {
    "label": "FTaskID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskID"
  },
  {
    "label": "FTaskParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskParams"
  },
  {
    "label": "ITaskContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITaskContext"
  },
  {
    "label": "TAnonTaskWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAnonTaskWrapper"
  },
  {
    "label": "TMemberFunctionTaskWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemberFunctionTaskWrapper"
  },
  {
    "label": "IEntitySystemScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEntitySystemScheduler"
  },
  {
    "label": "FEntitySystemScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntitySystemScheduler"
  },
  {
    "label": "FTaskID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Stats / Stats2 . h \" # include \" Misc / TVariant . h \" # include \" EntitySystem / RelativePtr . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / EntityAllocationIterator . h \" namespace UE::MovieScene { using FPreLockedDataPtr = TRelativePtr<void,uint32> ; struct FTaskID { int32 Index ;)",
    "insertText": "FTaskID() : Index(INDEX_NONE)"
  },
  {
    "label": "FTaskID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaskID(int32 InIndex) : Index(InIndex)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (} FTaskID)",
    "insertText": "None()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "FTaskParams()",
    "kind": "Method",
    "detail": "Function (bForceGameThread = false ; bSerialTasks = false ; bForcePropagateDownstream = false ; bForceConsumeUpstream = false ; })",
    "insertText": "FTaskParams(const TCHAR* InDebugName, const TStatId& InStatId = TStatId()) : #if !(UE_BUILD_SHIPPING || UE_BUILD_TEST) DebugName(InDebugName), #endif StatId(InStatId)"
  },
  {
    "label": "Stat()",
    "kind": "Method",
    "detail": "Function (bForceGameThread = false ; bSerialTasks = false ; bForcePropagateDownstream = false ; bForceConsumeUpstream = false ; } FTaskParams&)",
    "insertText": "Stat(const TStatId& InStatId)"
  },
  {
    "label": "ForceGameThread()",
    "kind": "Method",
    "detail": "Function (StatId = InStatId ; return* this ; } FTaskParams&)",
    "insertText": "ForceGameThread()"
  },
  {
    "label": "ForcePrePostTask()",
    "kind": "Method",
    "detail": "Function (bForceGameThread = true ; return* this ; } FTaskParams&)",
    "insertText": "ForcePrePostTask()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bForcePrePostTask = true ; return* this ; } #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "ITaskContext()",
    "kind": "Method",
    "detail": "Function (# endif TStatId StatId ; uint8 bForceGameThread : 1 ; uint8 bSerialTasks : 1 ; uint8 bForcePrePostTask : 1 ; uint8 bForcePropagateDownstream : 1 ; uint8 bForceConsumeUpstream : 1 ; } ; struct ITaskContext { ~)",
    "insertText": "ITaskContext()"
  },
  {
    "label": "TAnonTaskWrapper()",
    "kind": "Method",
    "detail": "Function (} } ; template<TaskType> struct TAnonTaskWrapper : ITaskContext { TaskType Task ; template<. . . ArgTypes>)",
    "insertText": "TAnonTaskWrapper(ArgTypes&&... InArgs)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(const ITaskContext* Context, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (static_cast<const TAnonTaskWrapper<)",
    "insertText": "TaskType(Context)->Task.Run(WriteContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; template<ClassType> struct TMemberFunctionTaskWrapper : ITaskContext { using MemberFunctionPtr =)",
    "insertText": "void(ClassType::*)()"
  },
  {
    "label": "TMemberFunctionTaskWrapper()",
    "kind": "Method",
    "detail": "Function (ClassType* ClassPtr ; MemberFunctionPtr FunctionPtr ;)",
    "insertText": "TMemberFunctionTaskWrapper(ClassType* InClassPtr, MemberFunctionPtr InFunctionPtr) : ClassPtr(InClassPtr) , FunctionPtr(InFunctionPtr)"
  },
  {
    "label": "ClassType()",
    "kind": "Method",
    "detail": "Function (const TMemberFunctionTaskWrapper<ClassType>* This = static_cast<const TMemberFunctionTaskWrapper<)",
    "insertText": "ClassType(Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; using UnboundTaskFunctionPtr =)",
    "insertText": "void(*)(const ITaskContext* TaskContext, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AllocationFunctionPtr =)",
    "insertText": "void(*)(const FEntityAllocation* Allocation, const ITaskContext* TaskContext, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AllocationItemFunctionPtr =)",
    "insertText": "void(*)(FEntityAllocationIteratorItem Item, const ITaskContext* TaskContext, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using PreLockedAllocationItemFunctionPtr =)",
    "insertText": "void(*)(FEntityAllocationIteratorItem Item, TArrayView<const FPreLockedDataPtr> PreLockedData, const ITaskContext* TaskContext, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (using TaskFunctionPtr = TVariant<UnboundTaskFunctionPtr,AllocationFunctionPtr,AllocationItemFunctionPtr,PreLockedAllocationItemFunctionPtr> ; class IEntitySystemScheduler { public : template<TaskType,. . . TaskArgTypes> FTaskID)",
    "insertText": "AddTask(const FTaskParams& InParams, TaskArgTypes&&... Args)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (TaskFunctionPtr)",
    "insertText": "Function(TInPlaceType<UnboundTaskFunctionPtr>(), TAnonTaskWrapper<TaskType>::Execute)"
  },
  {
    "label": "AddMemberFunctionTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType> FTaskID)",
    "insertText": "AddMemberFunctionTask(const FTaskParams& InParams, TaskType* Instance, typename TMemberFunctionTaskWrapper<TaskType>::MemberFunctionPtr FunctionPtr)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (TaskFunctionPtr)",
    "insertText": "Function(TInPlaceType<UnboundTaskFunctionPtr>(), TMemberFunctionTaskWrapper<TaskType>::Execute)"
  },
  {
    "label": "AddNullTask()",
    "kind": "Method",
    "detail": "Function (} FTaskID)",
    "insertText": "AddNullTask()"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (FTaskID)",
    "insertText": "AddTask(const FTaskParams& InParams, TSharedPtr<ITaskContext> InTaskContext, TaskFunctionPtr InTaskFunction)"
  },
  {
    "label": "CreateForkedAllocationTask()",
    "kind": "Method",
    "detail": "Function (FTaskID)",
    "insertText": "CreateForkedAllocationTask(const FTaskParams& InParams, TSharedPtr<ITaskContext> InTaskContext, TaskFunctionPtr InTaskFunction, TFunctionRef<void(FEntityAllocationIteratorItem,TArray<FPreLockedDataPtr>&)> InPreLockFunc, const FEntityComponentFilter& Filter, const FComponentMask& ReadDeps, const FComponentMask& WriteDeps)"
  },
  {
    "label": "AddPrerequisite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrerequisite(FTaskID Prerequisite, FTaskID Subsequent)"
  },
  {
    "label": "AddChildBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildBack(FTaskID Parent, FTaskID Child)"
  },
  {
    "label": "AddChildFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildFront(FTaskID Parent, FTaskID Child)"
  },
  {
    "label": "IEntitySystemScheduler()",
    "kind": "Method",
    "detail": "Function (private : class FEntitySystemScheduler ;)",
    "insertText": "IEntitySystemScheduler()"
  }
]