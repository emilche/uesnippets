[
  {
    "label": "DilateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DilateOp"
  },
  {
    "label": "ErodeOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErodeOp"
  },
  {
    "label": "OffsetAndMinComp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetAndMinComp"
  },
  {
    "label": "OffsetAndMinComp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetAndMinComp"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth = 3, int closingSteps = 1, int dilation = 0,\n    int smoothingSteps = 0)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth = 3, int closingSteps = 1, int dilation = 0,\n    int smoothingSteps = 0, InterrupterT* interrupt = nullptr)"
  },
  {
    "label": "rhsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "rhsAcc(*mRhsTree)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (InterrupterType>)",
    "insertText": "filter(grid, interrupt)"
  },
  {
    "label": "filterGrid()",
    "kind": "Method",
    "detail": "Function (GridType)",
    "insertText": "filterGrid(grid)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (InterrupterType>)",
    "insertText": "filter(filterGrid, interrupt)"
  },
  {
    "label": "normalizeLevelSet()",
    "kind": "Method",
    "detail": "Function (operation)",
    "insertText": "normalizeLevelSet(grid, halfBandWidthInVoxels, interrupt)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "topologyToLevelSet(grid, halfWidth, closingSteps, dilation, smoothingSteps, &interrupt)"
  }
]