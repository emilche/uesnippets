[
  {
    "label": "DilateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DilateOp"
  },
  {
    "label": "ErodeOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErodeOp"
  },
  {
    "label": "OffsetAndMinComp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetAndMinComp"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_TOPOLOGY_TO_LEVELSET_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_TOPOLOGY_TO_LEVELSET_HAS_BEEN_INCLUDED # include \" LevelSetFilter . h \" # include \" Morphology . h \" # include \" SignedFloodFill . h \" # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / math / FiniteDifference . h> # include<openvdb / util / NullInterrupter . h> # include<tbb / task_group . h> # include<algorithm> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT> GridT::template ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth = 3, int closingSteps = 1, int dilation = 0, int smoothingSteps = 0)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (template<GridT,InterrupterT> GridT::template ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth = 3, int closingSteps = 1, int dilation = 0, int smoothingSteps = 0, InterrupterT* interrupt = nullptr)"
  },
  {
    "label": "DilateOp()",
    "kind": "Method",
    "detail": "Function (namespace ttls_internal { template<TreeT> struct DilateOp {)",
    "insertText": "DilateOp(TreeT& t, int n) : tree(&t), size(n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()()"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(*tree, size, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "ErodeOp()",
    "kind": "Method",
    "detail": "Function (} TreeT* tree ; const int size ; } ; template<TreeT> struct ErodeOp {)",
    "insertText": "ErodeOp(TreeT& t, int n) : tree(&t), size(n)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeActiveValues(*tree, size, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneInactive(*tree)"
  },
  {
    "label": "OffsetAndMinComp()",
    "kind": "Method",
    "detail": "Function (} TreeT* tree ; const int size ; } ; template<TreeType> struct OffsetAndMinComp { using LeafNodeType = TreeType::LeafNodeType ; using ValueType = TreeType::ValueType ;)",
    "insertText": "OffsetAndMinComp(std::vector<LeafNodeType*>& lhsNodes, const TreeType& rhsTree, ValueType offset) : mLhsNodes(lhsNodes.empty() ? nullptr : &lhsNodes[0]), mRhsTree(&rhsTree), mOffset(offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "rhsAcc()",
    "kind": "Method",
    "detail": "Function (using Iterator = LeafNodeType::ValueOnIter ; tree::ValueAccessor<const TreeType>)",
    "insertText": "rhsAcc(*mRhsTree)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const ValueType offset = mOffset ;)",
    "insertText": "for(size_t n = range.begin(), N = range.end(); n < N; ++n)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (LeafNodeType& lhsNode =* mLhsNodes [ n ] ; const LeafNodeType* rhsNodePt = rhsAcc .)",
    "insertText": "probeConstLeaf(lhsNode.origin())"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType& val = const_cast<)",
    "insertText": "ValueType(it.getValue())"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (val =)",
    "insertText": "min(val, offset + rhsNodePt->getValue(it.pos()))"
  },
  {
    "label": "normalizeLevelSet()",
    "kind": "Method",
    "detail": "Function (} } } private : LeafNodeType** const mLhsNodes ; TreeType const* const mRhsTree ; ValueType const mOffset ; } ; template<GridType,InterrupterType> void)",
    "insertText": "normalizeLevelSet(GridType& grid, const int halfWidthInVoxels, InterrupterType* interrupt = nullptr)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (LevelSetFilter<GridType,GridType,InterrupterType>)",
    "insertText": "filter(grid, interrupt)"
  },
  {
    "label": "setSpatialScheme()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "setSpatialScheme(math::FIRST_BIAS)"
  },
  {
    "label": "setNormCount()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "setNormCount(halfWidthInVoxels)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "normalize()"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "prune()"
  },
  {
    "label": "smoothLevelSet()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterrupterType> void)",
    "insertText": "smoothLevelSet(GridType& grid, int iterations, int halfBandWidthInVoxels, InterrupterType* interrupt = nullptr)"
  },
  {
    "label": "filterGrid()",
    "kind": "Method",
    "detail": "Function (using ValueType = GridType::ValueType ; using TreeType = GridType::TreeType ; using LeafNodeType = TreeType::LeafNodeType ; GridType)",
    "insertText": "filterGrid(grid)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (LevelSetFilter<GridType,GridType,InterrupterType>)",
    "insertText": "filter(filterGrid, interrupt)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "mean(1)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (} std::vector<LeafNodeType*> nodes ; grid .)",
    "insertText": "tree().getNodes(nodes)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType offset =)",
    "insertText": "ValueType(double(0.5) * grid.transform().voxelSize()[0])"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, nodes.size()), OffsetAndMinComp<TreeType>(nodes, filterGrid.tree(), -offset))"
  },
  {
    "label": "normalizeLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalizeLevelSet(grid, halfBandWidthInVoxels, interrupt)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (} } template<GridT,InterrupterT> GridT::template ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth, int closingSteps, int dilation, int smoothingSteps, InterrupterT* interrupt)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (using MaskTreeT = GridT::TreeType::template ValueConverter<ValueMask>::Type ; using FloatTreeT = GridT::TreeType::template ValueConverter<float>::Type ; using FloatGridT = Grid<FloatTreeT> ; halfWidth =)",
    "insertText": "max(halfWidth, 1)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (closingSteps =)",
    "insertText": "max(closingSteps, 0)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (dilation =)",
    "insertText": "max(dilation, 0)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"Non-uniform voxels are not supported!\")"
  },
  {
    "label": "maskTree()",
    "kind": "Method",
    "detail": "Function (} MaskTreeT)",
    "insertText": "maskTree(grid.tree(), false , openvdb::TopologyCopy())"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(maskTree, closingSteps + dilation, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeActiveValues(maskTree, closingSteps, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneInactive(maskTree)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float background =)",
    "insertText": "float(grid.voxelSize()[0]) * float(halfWidth)"
  },
  {
    "label": "lsTree()",
    "kind": "Method",
    "detail": "Function (FloatTreeT::Ptr)",
    "insertText": "lsTree(new FloatTreeT( maskTree, background, -background, openvdb::TopologyCopy() ))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (tbb::task_group pool ; pool .)",
    "insertText": "run(ttls_internal::ErodeOp< MaskTreeT >( maskTree, halfWidth ))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (pool .)",
    "insertText": "run(ttls_internal::DilateOp<FloatTreeT>( *lsTree , halfWidth ))"
  },
  {
    "label": "wait()",
    "kind": "Method",
    "detail": "Function (pool .)",
    "insertText": "wait()"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (lsTree ->)",
    "insertText": "topologyDifference(maskTree)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(*lsTree, true)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (FloatGridT::Ptr lsGrid =)",
    "insertText": "create(lsTree)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (lsGrid ->)",
    "insertText": "setTransform(grid.transform().copy())"
  },
  {
    "label": "setGridClass()",
    "kind": "Method",
    "detail": "Function (lsGrid ->)",
    "insertText": "setGridClass(openvdb::GRID_LEVEL_SET)"
  },
  {
    "label": "normalizeLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalizeLevelSet(*lsGrid, 3*halfWidth, interrupt)"
  },
  {
    "label": "smoothLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smoothLevelSet(*lsGrid, smoothingSteps, halfWidth, interrupt)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (} return lsGrid ; } template<GridT> GridT::template ValueConverter<float>::Type::Ptr)",
    "insertText": "topologyToLevelSet(const GridT& grid, int halfWidth, int closingSteps, int dilation, int smoothingSteps)"
  },
  {
    "label": "topologyToLevelSet()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter interrupt ; return)",
    "insertText": "topologyToLevelSet(grid, halfWidth, closingSteps, dilation, smoothingSteps, &interrupt)"
  }
]