[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "SEQUENCERWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERWIDGETS_API"
  },
  {
    "label": "FPendingWidgetFocus()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" Templates / Function . h \" # include \" Delegates / IDelegateInstance . h \" class SWidget ; struct FKeyEvent ; struct FPointerEvent ; class FPendingWidgetFocus : public TSharedFromThis<FPendingWidgetFocus> { public :)",
    "insertText": "FPendingWidgetFocus()"
  },
  {
    "label": "FPendingWidgetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingWidgetFocus(const TArray<FName>& InTypesKeepingFocus)"
  },
  {
    "label": "MakeNoTextEdit()",
    "kind": "Method",
    "detail": "Function (FPendingWidgetFocus)",
    "insertText": "MakeNoTextEdit()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(const bool InEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetPendingFocusIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingFocusIfNeeded(const TWeakPtr<SWidget>& InWidget)"
  },
  {
    "label": "ResetPendingFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPendingFocus()"
  },
  {
    "label": "OnPreInputKeyDown()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPreInputKeyDown(const FKeyEvent&)"
  },
  {
    "label": "OnPreInputButtonDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreInputButtonDown(const FPointerEvent&)"
  },
  {
    "label": "CanFocusBeStolen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFocusBeStolen()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()"
  }
]