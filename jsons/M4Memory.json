[
  {
    "label": "M4MemHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4MemHandler"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" M4Global . h \" # include \" M4MemOps . h \" namespace vdecmpeg4 { # define M4_MEMORY_HANDLER \\ public : \\ void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "M4CHECK(false && \"new not allowed\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(void*)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void operator)",
    "insertText": "delete(void*)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "M4CHECK(false && \"delete[] not allowed\")"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "M4CHECK(false && \"new[] not allowed\")"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (\\ } class M4MemHandler { public : void)",
    "insertText": "init(VIDAllocator cbMem, VIDDeallocator cbFree)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (mAllocCB = cbMem ; mFreeCB = cbFree ; } void*)",
    "insertText": "malloc(size_t size, size_t alignment = 32)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(mAllocCB)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ptr(*mAllocCB)((uint32)size, (uint32)alignment)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(mFreeCB)"
  }
]