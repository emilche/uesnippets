[
  {
    "label": "FLinearAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearAllocator"
  },
  {
    "label": "FPersistentLinearAllocatorExtends",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentLinearAllocatorExtends"
  },
  {
    "label": "FLinearAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / UnrealMemory . h \" # ifndef UE_ENABLE_LINEAR_VIRTUAL_ALLOCATOR # define UE_ENABLE_LINEAR_VIRTUAL_ALLOCATOR PLATFORM_HAS_FPlatformVirtualMemoryBlock # endif # if UE_ENABLE_LINEAR_VIRTUAL_ALLOCATOR # include<atomic> # include \" HAL / CriticalSection . h \" struct FLinearAllocator {)",
    "insertText": "FLinearAllocator(SIZE_T ReserveMemorySize)"
  },
  {
    "label": "FreeVirtual()",
    "kind": "Method",
    "detail": "Function (VirtualMemory .)",
    "insertText": "FreeVirtual()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate(SIZE_T Size, uint32 Alignment = 8)"
  },
  {
    "label": "PreAllocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreAllocate(SIZE_T Size, uint32 Alignment = 8)"
  },
  {
    "label": "TryDeallocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryDeallocate(void* Ptr, SIZE_T Size)"
  },
  {
    "label": "GetExceedingSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetExceedingSize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "CanFit()",
    "kind": "Method",
    "detail": "Function (} private : FCriticalSection Lock ; FPlatformMemory::FPlatformVirtualMemoryBlock VirtualMemory ; SIZE_T Reserved ; SIZE_T Committed = 0 ; SIZE_T CurrentOffset = 0 ; std::atomic<SIZE_T> ExceedsReservation = 0 ; bool)",
    "insertText": "CanFit(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "GetPersistentLinearAllocator()",
    "kind": "Method",
    "detail": "Function (} ; FLinearAllocator&)",
    "insertText": "GetPersistentLinearAllocator()"
  },
  {
    "label": "FLinearAllocator()",
    "kind": "Method",
    "detail": "Function (# else struct FLinearAllocator {)",
    "insertText": "FLinearAllocator(SIZE_T)"
  },
  {
    "label": "PreAllocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreAllocate(SIZE_T, uint32)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  }
]