[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLog"
  },
  {
    "label": "IAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzer"
  },
  {
    "label": "ILinearAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILinearAllocator"
  },
  {
    "label": "IAnalysisCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisCache"
  },
  {
    "label": "IProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProvider"
  },
  {
    "label": "IEditableProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableProvider"
  },
  {
    "label": "FTraceSessionMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceSessionMetadata"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnalysisMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalysisMessage"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FAnalysisSessionReadScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalysisSessionReadScope"
  },
  {
    "label": "FAnalysisSessionEditScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalysisSessionEditScope"
  },
  {
    "label": "IProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" Logging / TokenizedMessage . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / SharedPointer . h \" class FName ; class FMessageLog ; namespace UE { namespace Trace { class IAnalyzer ; } } namespace TraceServices { class ILinearAllocator ; class IAnalysisCache ; class IProvider { public : ~)",
    "insertText": "IProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unimplemented()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndRead()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "IEditableProvider()",
    "kind": "Method",
    "detail": "Function (} } ; class IEditableProvider { public : ~)",
    "insertText": "IEditableProvider()"
  },
  {
    "label": "BeginEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEdit()"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "EditAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EditAccessCheck()"
  },
  {
    "label": "IAnalysisSession()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTraceSessionMetadata { enum class EType { Int64,Double,String } ; FName Name ; EType Type ; union { int64 Int64Value ; double DoubleValue ; } ; FString StringValue ; } ; struct FAnalysisMessage { EMessageSeverity::Type Severity ; FString Message ; } ; class IAnalysisSession { public : ~)",
    "insertText": "IAnalysisSession()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(bool bAndWait=false)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetTraceId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTraceId()"
  },
  {
    "label": "IsAnalysisComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalysisComplete()"
  },
  {
    "label": "GetDurationSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetDurationSeconds()"
  },
  {
    "label": "UpdateDurationSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDurationSeconds(double Duration)"
  },
  {
    "label": "GetMetadataCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMetadataCount()"
  },
  {
    "label": "EnumerateMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateMetadata(TFunctionRef<void(const FTraceSessionMetadata& Metadata)> Callback)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, int64 InValue)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, double InValue)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InName, FString InValue)"
  },
  {
    "label": "GetNumPendingMessages()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumPendingMessages()"
  },
  {
    "label": "DrainPendingMessages()",
    "kind": "Method",
    "detail": "Function (TArray<FAnalysisMessage>)",
    "insertText": "DrainPendingMessages()"
  },
  {
    "label": "WriteAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAccessCheck()"
  },
  {
    "label": "GetLinearAllocator()",
    "kind": "Method",
    "detail": "Function (ILinearAllocator&)",
    "insertText": "GetLinearAllocator()"
  },
  {
    "label": "StoreString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "StoreString(const TCHAR* String)"
  },
  {
    "label": "StoreString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "StoreString(const FStringView& String)"
  },
  {
    "label": "GetCache()",
    "kind": "Method",
    "detail": "Function (IAnalysisCache&)",
    "insertText": "GetCache()"
  },
  {
    "label": "AddAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnalyzer(UE::Trace::IAnalyzer* Analyzer)"
  },
  {
    "label": "AddProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProvider(const FName& Name, TSharedPtr<IProvider> Provider, TSharedPtr<IEditableProvider> EditableProvider = nullptr)"
  },
  {
    "label": "ReadProvider()",
    "kind": "Method",
    "detail": "Function (template<ProviderType> const ProviderType*)",
    "insertText": "ReadProvider(const FName& Name)"
  },
  {
    "label": "EditProvider()",
    "kind": "Method",
    "detail": "Function (} template<ProviderType> ProviderType*)",
    "insertText": "EditProvider(const FName& Name)"
  },
  {
    "label": "ReadProviderPrivate()",
    "kind": "Method",
    "detail": "Function (} private : const IProvider*)",
    "insertText": "ReadProviderPrivate(const FName& Name)"
  },
  {
    "label": "EditProviderPrivate()",
    "kind": "Method",
    "detail": "Function (IEditableProvider*)",
    "insertText": "EditProviderPrivate(const FName& Name)"
  },
  {
    "label": "FAnalysisSessionReadScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FAnalysisSessionReadScope {)",
    "insertText": "FAnalysisSessionReadScope(const IAnalysisSession& InAnalysisSession) : AnalysisSession(InAnalysisSession)"
  },
  {
    "label": "FAnalysisSessionReadScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnalysisSessionReadScope()"
  },
  {
    "label": "FAnalysisSessionEditScope()",
    "kind": "Method",
    "detail": "Function (} private : const IAnalysisSession& AnalysisSession ; } ; struct FAnalysisSessionEditScope {)",
    "insertText": "FAnalysisSessionEditScope(IAnalysisSession& InAnalysisSession) : AnalysisSession(InAnalysisSession)"
  },
  {
    "label": "FAnalysisSessionEditScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnalysisSessionEditScope()"
  }
]