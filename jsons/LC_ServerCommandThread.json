[
  {
    "label": "MainFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainFrame"
  },
  {
    "label": "DirectoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectoryCache"
  },
  {
    "label": "LiveModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveModule"
  },
  {
    "label": "LiveModuleOrbis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveModuleOrbis"
  },
  {
    "label": "LiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveProcess"
  },
  {
    "label": "ServerCommandThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ServerCommandThread"
  },
  {
    "label": "CommandThreadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CommandThreadContext"
  },
  {
    "label": "actions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "actions"
  },
  {
    "label": "_name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_name"
  },
  {
    "label": "ServerCommandThread()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LC_ThreadTypes . h \" # include \" LC_ProcessTypes . h \" # include \" LC_Commands . h \" # include \" LC_Telemetry . h \" # include \" LC_DuplexPipeServer . h \" # include \" LC_CriticalSection . h \" # include \" LC_Event . h \" # include \" LC_Scheduler . h \" # include \" LC_Executable . h \" # include \" LC_RunMode . h \" # include \" LC_LiveModule . h \" # include \" LC_Types . h \" # include \" VisualStudioDTE . h \" # include<atomic> class MainFrame ; class DirectoryCache ; class LiveModule ; class LiveModuleOrbis ; class LiveProcess ; class ServerCommandThread { public :)",
    "insertText": "ServerCommandThread(MainFrame* mainFrame, const wchar_t* const processGroupName, RunMode::Enum runMode)"
  },
  {
    "label": "ServerCommandThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ServerCommandThread(void)"
  },
  {
    "label": "RestartTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartTargets(void)"
  },
  {
    "label": "CompileChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileChanges(void)"
  },
  {
    "label": "GetProcessImagePath()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "GetProcessImagePath(void)"
  },
  {
    "label": "HasReinstancingProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReinstancingProcess()"
  },
  {
    "label": "ShowCompileFinishNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowCompileFinishNotification()"
  },
  {
    "label": "LoadModule()",
    "kind": "Method",
    "detail": "Function (private : scheduler::Task<LiveModule*>*)",
    "insertText": "LoadModule(Process::Id processId, void* moduleBase, const wchar_t* modulePath, scheduler::TaskBase* taskRoot)"
  },
  {
    "label": "UnloadModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnloadModule(Process::Id processId, const wchar_t* modulePath)"
  },
  {
    "label": "PrewarmCompilerEnvironmentCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrewarmCompilerEnvironmentCache(void)"
  },
  {
    "label": "ServerThread()",
    "kind": "Method",
    "detail": "Function (Thread::ReturnValue)",
    "insertText": "ServerThread(void)"
  },
  {
    "label": "CompileThread()",
    "kind": "Method",
    "detail": "Function (Thread::ReturnValue)",
    "insertText": "CompileThread(void)"
  },
  {
    "label": "CallPrecompileHooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPrecompileHooks(bool didAllProcessesMakeProgress)"
  },
  {
    "label": "CallPostcompileHooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPostcompileHooks(bool didAllProcessesMakeProgress, commands::PostCompileResult postCompileResult)"
  },
  {
    "label": "CommandThread()",
    "kind": "Method",
    "detail": "Function (struct CommandThreadContext { DuplexPipeServer pipe ; Event* readyEvent ; Thread::Handle commandThread ; DuplexPipeServer exceptionPipe ; Thread::Handle exceptionCommandThread ; } ; Thread::ReturnValue)",
    "insertText": "CommandThread(DuplexPipeServer* pipe, Event* readyEvent)"
  },
  {
    "label": "ExceptionCommandThread()",
    "kind": "Method",
    "detail": "Function (Thread::ReturnValue)",
    "insertText": "ExceptionCommandThread(DuplexPipeServer* exceptionPipe)"
  },
  {
    "label": "RemoveCommandThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCommandThread(const DuplexPipe* pipe)"
  },
  {
    "label": "FindProcessById()",
    "kind": "Method",
    "detail": "Function (LiveProcess*)",
    "insertText": "FindProcessById(Process::Id processId)"
  },
  {
    "label": "CompileChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileChanges(bool didAllProcessesMakeProgress, commands::PostCompileResult& postCompileResult)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (struct actions { # define)",
    "insertText": "DECLARE_ACTION(_name)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (\\ typedef::commands::_name CommandType ; \\ bool)",
    "insertText": "Execute(const CommandType* command, const DuplexPipe* pipe, void* context, const void* payload, size_t payloadSize)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "DECLARE_ACTION(TriggerRecompile)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(TriggerRestart)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(LogMessage)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(BuildPatch)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(HandleException)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(ReadyForCompilation)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(DisconnectClient)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(RegisterProcess)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(EnableModules)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(DisableModules)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(ApplySettingBool)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(ApplySettingInt)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(ApplySettingString)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(ShowConsole)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(SetVisible)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(SetActive)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(SetBuildArguments)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(EnableLazyLoadedModule)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(FinishedLazyLoadingModules)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(SetReinstancingFlow)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(DisableCompileFinishNotification)"
  },
  {
    "label": "DECLARE_ACTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ACTION(EnableModulesEx)"
  },
  {
    "label": "EnableRequiredModules()",
    "kind": "Method",
    "detail": "Function (# undef DECLARE_ACTION } ; std::wstring m_processGroupName ; RunMode::Enum m_runMode ; MainFrame* m_mainFrame ; Thread::Handle m_serverThread ; Thread::Handle m_compileThread ; types::vector<LiveModule*> m_liveModules ; types::vector<LiveProcess*> m_liveProcesses ; types::unordered_map<executable::Header,LiveModule*> m_imageHeaderToLiveModule ; CriticalSection m_actionCS ; CriticalSection m_exceptionCS ; Event m_inExceptionHandlerEvent ; Event m_handleCommandsEvent ; DirectoryCache* m_directoryCache ; CriticalSection m_connectionCS ; types::vector<CommandThreadContext*> m_commandThreads ; std::atomic<unsigned int> m_reinstancingProcessCount = 0 ; std::atomic<unsigned int> m_disableCompileFinishNotificationProcessCount = 0 ; std::vector<std::pair<std::wstring,std::wstring>> m_restoreFiles ; bool m_active = true ; bool)",
    "insertText": "EnableRequiredModules(const TArray<FString>& RequiredModules)"
  }
]