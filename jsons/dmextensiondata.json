[
  {
    "label": "ExtensionData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtensionData"
  },
  {
    "label": "ExtensionData()",
    "kind": "Method",
    "detail": "Function (# ifdef HAS_EXTENSIONS # include<map> # include<string> # include<vector> # include<p4_optional . h> # include<functional> # include<unordered_map> # include<unordered_set> # include<p4script . h> class ExtensionData { public :)",
    "insertText": "ExtensionData(const StrBuf& archiveFile, p4_std_optional::optional< StrBuf > unzipPath, Error* e)"
  },
  {
    "label": "ExtensionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtensionData(const StrBuf& depotFile, const int& depotRev, const StrBuf& srvExtsDir, const p4_std_optional::optional< StrBuf > archiveFile, Error* e)"
  },
  {
    "label": "ExtensionData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExtensionData()"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKey(const char* key)"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevision(const int rev)"
  },
  {
    "label": "SetSrvExtDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSrvExtDir(const StrBuf& dir)"
  },
  {
    "label": "SetProduct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProduct(const char* p)"
  },
  {
    "label": "checkProductCompat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkProductCompat(Error* e)"
  },
  {
    "label": "Install()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Install(Error* e)"
  },
  {
    "label": "LoadMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadMetadata(Error* e)"
  },
  {
    "label": "LoadManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadManifest(Error* e)"
  },
  {
    "label": "LoadTranslations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadTranslations(Error* e)"
  },
  {
    "label": "GetDepotPath()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetDepotPath(const StrPtr& extsDepot)"
  },
  {
    "label": "GetExtNameFromDepotPath()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetExtNameFromDepotPath(const StrPtr& depotFile)"
  },
  {
    "label": "GetUUIDFromDepotFile()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetUUIDFromDepotFile(const StrBuf& depotFile)"
  },
  {
    "label": "ParseFullname()",
    "kind": "Method",
    "detail": "Function (std::tuple<StrBuf,StrBuf,StrBuf>)",
    "insertText": "ParseFullname(const StrPtr& fullname, Error *e)"
  },
  {
    "label": "MakeFullname()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "MakeFullname(const std::string& namespc, const std::string& extname, const std::string& extrev)"
  },
  {
    "label": "GetAPIVersion()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAPIVersion()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetNamespc()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetNamespc()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetRevisionStr()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetRevisionStr()"
  },
  {
    "label": "GetUUID()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetUUID()"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetVersion()"
  },
  {
    "label": "GetScriptMainPath()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetScriptMainPath()"
  },
  {
    "label": "GetArchDir()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetArchDir()"
  },
  {
    "label": "GetDeveloper()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetDeveloper()"
  },
  {
    "label": "GetDefaultLocale()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetDefaultLocale()"
  },
  {
    "label": "GetLicense()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetLicense()"
  },
  {
    "label": "GetDeveloperUrl()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetDeveloperUrl()"
  },
  {
    "label": "GetHomepageUrl()",
    "kind": "Method",
    "detail": "Function (StrPtr*)",
    "insertText": "GetHomepageUrl()"
  },
  {
    "label": "SerializeCompatProds()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "SerializeCompatProds()"
  },
  {
    "label": "GetTranslationMap()",
    "kind": "Method",
    "detail": "Function (std::unordered_map<std::string,std::unordered_map<std::string,std::string>>)",
    "insertText": "GetTranslationMap()"
  },
  {
    "label": "GetRevision()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRevision()"
  },
  {
    "label": "GetScrVersion()",
    "kind": "Method",
    "detail": "Function (SCR_VERSION)",
    "insertText": "GetScrVersion()"
  },
  {
    "label": "GetExtSrvExtDir()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetExtSrvExtDir()"
  },
  {
    "label": "GetExtSrvExtDataDir()",
    "kind": "Method",
    "detail": "Function (StrBuf)",
    "insertText": "GetExtSrvExtDataDir()"
  },
  {
    "label": "ValidateManifest()",
    "kind": "Method",
    "detail": "Function (const std::string nameDelimiter ; const std::string revDelimiter ; protected : bool)",
    "insertText": "ValidateManifest(Error* e)"
  },
  {
    "label": "SplitSpecUUID()",
    "kind": "Method",
    "detail": "Function (std::pair<StrBuf,StrBuf>)",
    "insertText": "SplitSpecUUID(const StrBuf& SpecAndUUID)"
  },
  {
    "label": "Unzip()",
    "kind": "Method",
    "detail": "Function (FileSysUPtr)",
    "insertText": "Unzip(const StrBuf &zipFileName, p4_std_optional::optional< StrBuf > unzipPath, p4_std_optional::optional< StrBuf > oneFile, Error *e)"
  },
  {
    "label": "ExtensionData()",
    "kind": "Method",
    "detail": "Function (StrBuf srvExtsDir ; FileSysUPtr archiveDir ; StrBuf Spec ; int revision { } ; StrBuf revisionStr ; std::string prod ; int manifestVersion { },apiVersion { } ; std::vector<std::string> supportedLocales ; std::unordered_map<std::string,std::unordered_map<std::string,std::string>> translationMap ; std::unordered_set<std::string> compatProds ; StrBuf name,namespc,version,versionName,description,license,licenseBody,defaultLocale,homepageUrl,key,developerName,developerUrl,runtimeLanguage,runtimeVersion ; } ; # else class ExtensionData { public :)",
    "insertText": "ExtensionData(const StrBuf& archiveFile, Error* e)"
  },
  {
    "label": "ExtensionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExtensionData(const StrBuf& depotFile, const int& depotRev, const StrBuf& srvExtsDir, StrBuf archiveFile, Error* e)"
  }
]