[
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "CurrencyPluralInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencyPluralInfo"
  },
  {
    "label": "CompactDecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactDecimalFormat"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "DecimalFormatFields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecimalFormatFields"
  },
  {
    "label": "NumberParserImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberParserImpl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "EPadPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPadPosition"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "have",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "have"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "IDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDs"
  },
  {
    "label": "defined",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "defined"
  },
  {
    "label": "CompactDecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactDecimalFormat"
  },
  {
    "label": "CompactDecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactDecimalFormat"
  },
  {
    "label": "MeasureFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeasureFormat"
  },
  {
    "label": "Locale()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Locale(\"en\", \"US\")"
  },
  {
    "label": "setParseAllInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseAllInput(UNumberFormatAttributeValue value)"
  },
  {
    "label": "adoptDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDecimalFormatSymbols(DecimalFormatSymbols* symbolsToAdopt)"
  },
  {
    "label": "setDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalFormatSymbols(const DecimalFormatSymbols& symbols)"
  },
  {
    "label": "adoptCurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptCurrencyPluralInfo(CurrencyPluralInfo* toAdopt)"
  },
  {
    "label": "setCurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyPluralInfo(const CurrencyPluralInfo& info)"
  },
  {
    "label": "setPositivePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPositivePrefix(const UnicodeString& newValue)"
  },
  {
    "label": "setNegativePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNegativePrefix(const UnicodeString& newValue)"
  },
  {
    "label": "setPositiveSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPositiveSuffix(const UnicodeString& newValue)"
  },
  {
    "label": "setNegativeSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNegativeSuffix(const UnicodeString& newValue)"
  },
  {
    "label": "setSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSignAlwaysShown(UBool value)"
  },
  {
    "label": "setMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMultiplier(int32_t newValue)"
  },
  {
    "label": "setMultiplierScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMultiplierScale(int32_t newValue)"
  },
  {
    "label": "setRoundingIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingIncrement(double newValue)"
  },
  {
    "label": "setFormatWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormatWidth(int32_t width)"
  },
  {
    "label": "setPadCharacter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPadCharacter(const UnicodeString& padChar)"
  },
  {
    "label": "setPadPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPadPosition(EPadPosition padPos)"
  },
  {
    "label": "setScientificNotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setScientificNotation(UBool useScientific)"
  },
  {
    "label": "setMinimumExponentDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumExponentDigits(int8_t minExpDig)"
  },
  {
    "label": "setExponentSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExponentSignAlwaysShown(UBool expSignAlways)"
  },
  {
    "label": "setGroupingSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroupingSize(int32_t newValue)"
  },
  {
    "label": "setSecondaryGroupingSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSecondaryGroupingSize(int32_t newValue)"
  },
  {
    "label": "setMinimumGroupingDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumGroupingDigits(int32_t newValue)"
  },
  {
    "label": "setDecimalSeparatorAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalSeparatorAlwaysShown(UBool newValue)"
  },
  {
    "label": "setDecimalPatternMatchRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalPatternMatchRequired(UBool newValue)"
  },
  {
    "label": "setParseNoExponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseNoExponent(UBool value)"
  },
  {
    "label": "parsing()",
    "kind": "Method",
    "detail": "Function (sensitive)",
    "insertText": "parsing(the default)"
  },
  {
    "label": "setParseCaseSensitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseCaseSensitive(UBool value)"
  },
  {
    "label": "setFormatFailIfMoreThanMaxDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormatFailIfMoreThanMaxDigits(UBool value)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "applyLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyLocalizedPattern(const UnicodeString& pattern, UParseError& parseError,\n                                       UErrorCode& status)"
  },
  {
    "label": "applyLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyLocalizedPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "setMinimumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumSignificantDigits(int32_t min)"
  },
  {
    "label": "setMaximumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumSignificantDigits(int32_t max)"
  },
  {
    "label": "setSignificantDigitsUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSignificantDigitsUsed(UBool useSignificantDigits)"
  },
  {
    "label": "setCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrency(const char16_t* theCurrency)"
  },
  {
    "label": "setCurrencyUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyUsage(UCurrencyUsage newUsage, UErrorCode* ec)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "touch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "touch(UErrorCode& status)"
  },
  {
    "label": "touchNoError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "touchNoError()"
  },
  {
    "label": "setPropertiesFromPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPropertiesFromPattern(const UnicodeString& pattern, int32_t ignoreRounding,\n                                  UErrorCode& status)"
  },
  {
    "label": "fieldPositionHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fieldPositionHelper(const number::FormattedNumber& formatted, FieldPosition& fieldPosition,\n                                    int32_t offset, UErrorCode& status)"
  },
  {
    "label": "fieldPositionIteratorHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fieldPositionIteratorHelper(const number::FormattedNumber& formatted,\n                                            FieldPositionIterator* fpi, int32_t offset, UErrorCode& status)"
  },
  {
    "label": "setupFastFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setupFastFormat()"
  }
]