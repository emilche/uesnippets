[
  {
    "label": "CurrencyPluralInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencyPluralInfo"
  },
  {
    "label": "CompactDecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompactDecimalFormat"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "DecimalFormatFields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecimalFormatFields"
  },
  {
    "label": "NumberParserImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberParserImpl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "EPadPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPadPosition"
  },
  {
    "label": "MeasureFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeasureFormat"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef DECIMFMT_H # define DECIMFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / dcfmtsym . h \" # include \" unicode / numfmt . h \" # include \" unicode / locid . h \" # include \" unicode / fpositer . h \" # include \" unicode / stringpiece . h \" # include \" unicode / curramt . h \" # include \" unicode / enumset . h \" U_NAMESPACE_BEGIN class CurrencyPluralInfo ; class CompactDecimalFormat ; namespace number { class LocalizedNumberFormatter ; class FormattedNumber ; namespace impl { class DecimalQuantity ; struct DecimalFormatFields ; } } namespace numparse { namespace impl { class NumberParserImpl ; } } class U_I18N_API DecimalFormat : public NumberFormat { public : enum EPadPosition { kPadBeforePrefix,kPadAfterPrefix,kPadBeforeSuffix,kPadAfterSuffix } ;)",
    "insertText": "DecimalFormat(UErrorCode& status)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormat(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormat(const UnicodeString& pattern, DecimalFormatSymbols* symbolsToAdopt, UErrorCode& status)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "DecimalFormat(const UnicodeString& pattern, DecimalFormatSymbols* symbolsToAdopt, UNumberFormatStyle style, UErrorCode& status)"
  },
  {
    "label": "setParseAllInput()",
    "kind": "Method",
    "detail": "Function (# if UCONFIG_HAVE_PARSEALLINPUT void)",
    "insertText": "setParseAllInput(UNumberFormatAttributeValue value)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (# endif # endif private :)",
    "insertText": "DecimalFormat(const DecimalFormatSymbols* symbolsToAdopt, UErrorCode& status)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (public : DecimalFormat&)",
    "insertText": "setAttribute(UNumberFormatAttribute attr, int32_t newValue, UErrorCode& status)"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getAttribute(UNumberFormatAttribute attr, UErrorCode& status)"
  },
  {
    "label": "setGroupingUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroupingUsed(UBool newValue)"
  },
  {
    "label": "setParseIntegerOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseIntegerOnly(UBool value)"
  },
  {
    "label": "setLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLenient(UBool enable)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormat(const UnicodeString& pattern, DecimalFormatSymbols* symbolsToAdopt, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormat(const UnicodeString& pattern, const DecimalFormatSymbols& symbols, UErrorCode& status)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecimalFormat(const DecimalFormat& source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DecimalFormat&)",
    "insertText": "operator(const DecimalFormat& rhs)"
  },
  {
    "label": "DecimalFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DecimalFormat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using NumberFormat::format ; UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(StringPiece number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity& number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity& number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (# endif using NumberFormat::parse ; void)",
    "insertText": "parse(const UnicodeString& text, Formattable& result, ParsePosition& parsePosition)"
  },
  {
    "label": "parseCurrency()",
    "kind": "Method",
    "detail": "Function (CurrencyAmount*)",
    "insertText": "parseCurrency(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "getDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (const DecimalFormatSymbols*)",
    "insertText": "getDecimalFormatSymbols(void)"
  },
  {
    "label": "adoptDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDecimalFormatSymbols(DecimalFormatSymbols* symbolsToAdopt)"
  },
  {
    "label": "setDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalFormatSymbols(const DecimalFormatSymbols& symbols)"
  },
  {
    "label": "getCurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (const CurrencyPluralInfo*)",
    "insertText": "getCurrencyPluralInfo(void)"
  },
  {
    "label": "adoptCurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptCurrencyPluralInfo(CurrencyPluralInfo* toAdopt)"
  },
  {
    "label": "setCurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyPluralInfo(const CurrencyPluralInfo& info)"
  },
  {
    "label": "getPositivePrefix()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getPositivePrefix(UnicodeString& result)"
  },
  {
    "label": "setPositivePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPositivePrefix(const UnicodeString& newValue)"
  },
  {
    "label": "getNegativePrefix()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getNegativePrefix(UnicodeString& result)"
  },
  {
    "label": "setNegativePrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNegativePrefix(const UnicodeString& newValue)"
  },
  {
    "label": "getPositiveSuffix()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getPositiveSuffix(UnicodeString& result)"
  },
  {
    "label": "setPositiveSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPositiveSuffix(const UnicodeString& newValue)"
  },
  {
    "label": "getNegativeSuffix()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getNegativeSuffix(UnicodeString& result)"
  },
  {
    "label": "setNegativeSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNegativeSuffix(const UnicodeString& newValue)"
  },
  {
    "label": "isSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (# ifndef UBool)",
    "insertText": "isSignAlwaysShown()"
  },
  {
    "label": "setSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSignAlwaysShown(UBool value)"
  },
  {
    "label": "getMultiplier()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "getMultiplier(void)"
  },
  {
    "label": "setMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMultiplier(int32_t newValue)"
  },
  {
    "label": "getMultiplierScale()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getMultiplierScale(void)"
  },
  {
    "label": "setMultiplierScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMultiplierScale(int32_t newValue)"
  },
  {
    "label": "getRoundingIncrement()",
    "kind": "Method",
    "detail": "Function (# endif double)",
    "insertText": "getRoundingIncrement(void)"
  },
  {
    "label": "setRoundingIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingIncrement(double newValue)"
  },
  {
    "label": "getRoundingMode()",
    "kind": "Method",
    "detail": "Function (ERoundingMode)",
    "insertText": "getRoundingMode(void)"
  },
  {
    "label": "setRoundingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingMode(ERoundingMode roundingMode)"
  },
  {
    "label": "getFormatWidth()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getFormatWidth(void)"
  },
  {
    "label": "setFormatWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormatWidth(int32_t width)"
  },
  {
    "label": "getPadCharacterString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getPadCharacterString()"
  },
  {
    "label": "setPadCharacter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPadCharacter(const UnicodeString& padChar)"
  },
  {
    "label": "getPadPosition()",
    "kind": "Method",
    "detail": "Function (EPadPosition)",
    "insertText": "getPadPosition(void)"
  },
  {
    "label": "setPadPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPadPosition(EPadPosition padPos)"
  },
  {
    "label": "isScientificNotation()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isScientificNotation(void)"
  },
  {
    "label": "setScientificNotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setScientificNotation(UBool useScientific)"
  },
  {
    "label": "getMinimumExponentDigits()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "getMinimumExponentDigits(void)"
  },
  {
    "label": "setMinimumExponentDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumExponentDigits(int8_t minExpDig)"
  },
  {
    "label": "isExponentSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isExponentSignAlwaysShown(void)"
  },
  {
    "label": "setExponentSignAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExponentSignAlwaysShown(UBool expSignAlways)"
  },
  {
    "label": "getGroupingSize()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getGroupingSize(void)"
  },
  {
    "label": "setGroupingSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroupingSize(int32_t newValue)"
  },
  {
    "label": "getSecondaryGroupingSize()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getSecondaryGroupingSize(void)"
  },
  {
    "label": "setSecondaryGroupingSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSecondaryGroupingSize(int32_t newValue)"
  },
  {
    "label": "getMinimumGroupingDigits()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getMinimumGroupingDigits()"
  },
  {
    "label": "setMinimumGroupingDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumGroupingDigits(int32_t newValue)"
  },
  {
    "label": "isDecimalSeparatorAlwaysShown()",
    "kind": "Method",
    "detail": "Function (# endif UBool)",
    "insertText": "isDecimalSeparatorAlwaysShown(void)"
  },
  {
    "label": "setDecimalSeparatorAlwaysShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalSeparatorAlwaysShown(UBool newValue)"
  },
  {
    "label": "isDecimalPatternMatchRequired()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isDecimalPatternMatchRequired(void)"
  },
  {
    "label": "setDecimalPatternMatchRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalPatternMatchRequired(UBool newValue)"
  },
  {
    "label": "isParseNoExponent()",
    "kind": "Method",
    "detail": "Function (# ifndef UBool)",
    "insertText": "isParseNoExponent()"
  },
  {
    "label": "setParseNoExponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseNoExponent(UBool value)"
  },
  {
    "label": "isParseCaseSensitive()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isParseCaseSensitive()"
  },
  {
    "label": "setParseCaseSensitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseCaseSensitive(UBool value)"
  },
  {
    "label": "isFormatFailIfMoreThanMaxDigits()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isFormatFailIfMoreThanMaxDigits()"
  },
  {
    "label": "setFormatFailIfMoreThanMaxDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormatFailIfMoreThanMaxDigits(UBool value)"
  },
  {
    "label": "toPattern()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "toPattern(UnicodeString& result)"
  },
  {
    "label": "toLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toLocalizedPattern(UnicodeString& result)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "applyLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyLocalizedPattern(const UnicodeString& pattern, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "applyLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyLocalizedPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "setMaximumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumIntegerDigits(int32_t newValue)"
  },
  {
    "label": "setMinimumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumIntegerDigits(int32_t newValue)"
  },
  {
    "label": "setMaximumFractionDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumFractionDigits(int32_t newValue)"
  },
  {
    "label": "setMinimumFractionDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumFractionDigits(int32_t newValue)"
  },
  {
    "label": "getMinimumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMinimumSignificantDigits()"
  },
  {
    "label": "getMaximumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMaximumSignificantDigits()"
  },
  {
    "label": "setMinimumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumSignificantDigits(int32_t min)"
  },
  {
    "label": "setMaximumSignificantDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumSignificantDigits(int32_t max)"
  },
  {
    "label": "areSignificantDigitsUsed()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "areSignificantDigitsUsed()"
  },
  {
    "label": "setSignificantDigitsUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSignificantDigitsUsed(UBool useSignificantDigits)"
  },
  {
    "label": "setCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrency(const char16_t* theCurrency, UErrorCode& ec)"
  },
  {
    "label": "setCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrency(const char16_t* theCurrency)"
  },
  {
    "label": "setCurrencyUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyUsage(UCurrencyUsage newUsage, UErrorCode* ec)"
  },
  {
    "label": "getCurrencyUsage()",
    "kind": "Method",
    "detail": "Function (UCurrencyUsage)",
    "insertText": "getCurrencyUsage()"
  },
  {
    "label": "formatToDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "formatToDecimalQuantity(double number, number::impl::DecimalQuantity& output, UErrorCode& status)"
  },
  {
    "label": "formatToDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "formatToDecimalQuantity(const Formattable& number, number::impl::DecimalQuantity& output, UErrorCode& status)"
  },
  {
    "label": "toNumberFormatter()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef const number::LocalizedNumberFormatter*)",
    "insertText": "toNumberFormatter(UErrorCode& status)"
  },
  {
    "label": "toNumberFormatter()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef const number::LocalizedNumberFormatter&)",
    "insertText": "toNumberFormatter()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (# endif UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "touch()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "touch(UErrorCode& status)"
  },
  {
    "label": "touchNoError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "touchNoError()"
  },
  {
    "label": "setPropertiesFromPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPropertiesFromPattern(const UnicodeString& pattern, int32_t ignoreRounding, UErrorCode& status)"
  },
  {
    "label": "getParser()",
    "kind": "Method",
    "detail": "Function (const numparse::impl::NumberParserImpl*)",
    "insertText": "getParser(UErrorCode& status)"
  },
  {
    "label": "getCurrencyParser()",
    "kind": "Method",
    "detail": "Function (const numparse::impl::NumberParserImpl*)",
    "insertText": "getCurrencyParser(UErrorCode& status)"
  },
  {
    "label": "fieldPositionHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fieldPositionHelper(const number::FormattedNumber& formatted, FieldPosition& fieldPosition, int32_t offset, UErrorCode& status)"
  },
  {
    "label": "fieldPositionIteratorHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fieldPositionIteratorHelper(const number::FormattedNumber& formatted, FieldPositionIterator* fpi, int32_t offset, UErrorCode& status)"
  },
  {
    "label": "setupFastFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setupFastFormat()"
  },
  {
    "label": "fastFormatDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastFormatDouble(double input, UnicodeString& output)"
  },
  {
    "label": "fastFormatInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastFormatInt64(int64_t input, UnicodeString& output)"
  },
  {
    "label": "doFastFormatInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doFastFormatInt32(int32_t input, bool isNegative, UnicodeString& output)"
  }
]