[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "TArrayStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayStorage"
  },
  {
    "label": "FRangedForIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangedForIterator"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TCanBeConvertedToFromAll_V()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ReverseIterate . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Delegates / IntegerSequence . h \" # include \" Templates / TypeHash . h \" namespace UE::Core::Private { template<InElementType,. . . ArgTypes> bool)",
    "insertText": "TCanBeConvertedToFromAll_V(std::is_convertible_v<ArgTypes, InElementType> && ...)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (} template<InElementType,uint32 NumElements,uint32 Alignment =)",
    "insertText": "alignof(InElementType)> class alignas(Alignment)"
  },
  {
    "label": "TStaticArray()",
    "kind": "Method",
    "detail": "Function (public : using ElementType = InElementType ;)",
    "insertText": "TStaticArray()"
  },
  {
    "label": "TStaticArray()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes>)",
    "insertText": "TStaticArray(EInPlace, ArgTypes&&... Args) : Storage(InPlace, TMakeIntegerSequence<uint32, NumElements>(), Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes)",
    "insertText": "UE_REQUIRES((sizeof...(ArgTypes) > 0 && sizeof...(ArgTypes) <= NumElements) && UE::Core::Private::TCanBeConvertedToFromAll_V<InElementType, ArgTypes...>) > TStaticArray(ArgTypes&&... Args) : Storage(PerElement, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TStaticArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStaticArray(TStaticArray&& Other)"
  },
  {
    "label": "TStaticArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStaticArray(const TStaticArray& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStaticArray&)",
    "insertText": "operator(TStaticArray&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStaticArray&)",
    "insertText": "operator(const TStaticArray& Other)"
  },
  {
    "label": "TArrayStorageElementAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayStorageElementAligned()"
  },
  {
    "label": "TArrayStorageElementAligned()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes>)",
    "insertText": "TArrayStorageElementAligned(EInPlace, uint32 , ArgTypes&&... Args) : Element(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TArrayStorage()",
    "kind": "Method",
    "detail": "Function (} InElementType Element ; } ; struct TArrayStorage {)",
    "insertText": "TArrayStorage()"
  },
  {
    "label": "TArrayStorage()",
    "kind": "Method",
    "detail": "Function (template<uint32 . . . Indices,. . . ArgTypes>)",
    "insertText": "TArrayStorage(EInPlace, TIntegerSequence<uint32, Indices...>, ArgTypes&&... Args)"
  },
  {
    "label": "TArrayStorageElementAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayStorageElementAligned(InPlace, Indices, Args...)"
  },
  {
    "label": "TArrayStorage()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "TArrayStorage(EPerElement, ArgTypes&&... Args)"
  },
  {
    "label": "TArrayStorageElementAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayStorageElementAligned(InPlace, 0 , Forward<ArgTypes>(Args))"
  },
  {
    "label": "FRangedForIterator()",
    "kind": "Method",
    "detail": "Function (} TArrayStorageElementAligned Elements [ NumElements ] ; } ; TArrayStorage Storage ; public : template<StorageElementType,bool bReverse = false> struct FRangedForIterator {)",
    "insertText": "FRangedForIterator(StorageElementType* InPtr) : Ptr(InPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} auto&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - Ptr ; } else { + + Ptr ; } return* this ; } bool)",
    "insertText": "operator(const FRangedForIterator& B)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} RangedForReverseIteratorType)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} RangedForReverseIteratorType)",
    "insertText": "rend()"
  },
  {
    "label": "MakeUniformStaticArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<InElementType,uint32 NumElements> TStaticArray<InElementType,NumElements>)",
    "insertText": "MakeUniformStaticArray(typename TCallTraits<InElementType>::ParamType InValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TStaticArray<InElementType,NumElements> Result ;)",
    "insertText": "for(uint32 ElementIndex = 0;ElementIndex < NumElements;++ElementIndex)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Result [ ElementIndex ] = InValue ; } return Result ; } template<ElementType,uint32 NumElements,uint32 Alignment> struct TIsContiguousContainer<TStaticArray<ElementType,NumElements,Alignment>> { enum {)",
    "insertText": "Value(alignof(ElementType) % Alignment)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<ElementType,uint32 NumElements,uint32 Alignment> FArchive&)",
    "insertText": "operator(FArchive& Ar,TStaticArray<ElementType, NumElements, Alignment>& StaticArray)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<StaticArray [ Index ] ; } return Ar ; } template<ElementType,uint32 NumElements,uint32 Alignment> uint32)",
    "insertText": "GetTypeHash(const TStaticArray<ElementType, NumElements, Alignment>& Array)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ;)",
    "insertText": "for(const ElementType& Element : Array)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Element))"
  }
]