[
  {
    "label": "silk_warped_autocorrelation_FIX_c()",
    "kind": "Method",
    "detail": "Function (# ifndef __WARPED_AUTOCORRELATION_FIX_MIPSR1_H__ # define __WARPED_AUTOCORRELATION_FIX_MIPSR1_H__ # ifdef HAVE_CONFIG_H # include \" config . h \" # endif # include \" main_FIX . h \" # undef QC # define QC 1 0 # undef QS # define QS 1 4 # define OVERRIDE_silk_warped_autocorrelation_FIX_c void)",
    "insertText": "silk_warped_autocorrelation_FIX_c(opus_int32 *corr, opus_int *scale, const opus_int16 *input, const opus_int warping_Q16, const opus_int length, const opus_int order)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (opus_int n,i,lsh ; opus_int32 tmp1_QS = 0,tmp2_QS = 0,tmp3_QS = 0,tmp4_QS = 0,tmp5_QS = 0,tmp6_QS = 0,tmp7_QS = 0,tmp8_QS = 0,start_1 = 0,start_2 = 0,start_3 = 0 ; opus_int32 state_QS [ MAX_SHAPE_LPC_ORDER + 1 ] = { 0 } ; opus_int64 corr_QC [ MAX_SHAPE_LPC_ORDER + 1 ] = { 0 } ; opus_int64 temp64 ; opus_int32 val ; val = 2* QS - QC ;)",
    "insertText": "silk_assert(( order & 1 ) == 0)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(2 * QS - QC >= 0)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (tmp1_QS =)",
    "insertText": "silk_LSHIFT32((opus_int32)input[ n ], QS)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (start_1 = tmp1_QS ; tmp3_QS =)",
    "insertText": "silk_LSHIFT32((opus_int32)input[ n+1], QS)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (start_2 = tmp3_QS ; tmp5_QS =)",
    "insertText": "silk_LSHIFT32((opus_int32)input[ n+2], QS)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (start_3 = tmp5_QS ; tmp7_QS =)",
    "insertText": "silk_LSHIFT32((opus_int32)input[ n+3], QS)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp2_QS =)",
    "insertText": "silk_SMLAWB(state_QS[ i ], state_QS[ i + 1 ] - tmp1_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i ], tmp1_QS, start_1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp4_QS =)",
    "insertText": "silk_SMLAWB(tmp1_QS, tmp2_QS - tmp3_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i ], tmp3_QS, start_2)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp6_QS =)",
    "insertText": "silk_SMLAWB(tmp3_QS, tmp4_QS - tmp5_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i ], tmp5_QS, start_3)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp8_QS =)",
    "insertText": "silk_SMLAWB(tmp5_QS, tmp6_QS - tmp7_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (state_QS [ i ] = tmp7_QS ; corr_QC [ i ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i ], tmp7_QS, state_QS[0])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1_QS =)",
    "insertText": "silk_SMLAWB(state_QS[ i + 1 ], state_QS[ i + 2 ] - tmp2_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i + 1 ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i+1 ], tmp2_QS, start_1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp3_QS =)",
    "insertText": "silk_SMLAWB(tmp2_QS, tmp1_QS - tmp4_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i + 1 ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i+1 ], tmp4_QS, start_2)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp5_QS =)",
    "insertText": "silk_SMLAWB(tmp4_QS, tmp3_QS - tmp6_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ i + 1 ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i+1 ], tmp6_QS, start_3)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp7_QS =)",
    "insertText": "silk_SMLAWB(tmp6_QS, tmp5_QS - tmp8_QS, warping_Q16)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (state_QS [ i + 1 ] = tmp8_QS ; corr_QC [ i + 1 ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i+1 ], tmp8_QS, state_QS[ 0 ])"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (} state_QS [ order ] = tmp7_QS ; corr_QC [ order ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ order ], tmp1_QS, start_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ order ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ order ], tmp3_QS, start_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ order ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ order ], tmp5_QS, start_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (corr_QC [ order ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ order ], tmp7_QS, state_QS[ 0 ])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;n< length; n++)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (state_QS [ i ] = tmp1_QS ; corr_QC [ i ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i ], tmp1_QS, state_QS[ 0 ])"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (state_QS [ i + 1 ] = tmp2_QS ; corr_QC [ i + 1 ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ i+1 ], tmp2_QS, state_QS[ 0 ])"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (} state_QS [ order ] = tmp1_QS ; corr_QC [ order ] =)",
    "insertText": "__builtin_mips_madd(corr_QC[ order ], tmp1_QS, state_QS[ 0 ])"
  },
  {
    "label": "__builtin_mips_shilo()",
    "kind": "Method",
    "detail": "Function (} temp64 = corr_QC [ 0 ] ; temp64 =)",
    "insertText": "__builtin_mips_shilo(temp64, val)"
  },
  {
    "label": "silk_CLZ64()",
    "kind": "Method",
    "detail": "Function (lsh =)",
    "insertText": "silk_CLZ64(temp64)"
  },
  {
    "label": "silk_LIMIT()",
    "kind": "Method",
    "detail": "Function (lsh =)",
    "insertText": "silk_LIMIT(lsh, -12 - QC, 30 - QC)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "scale(QC + lsh)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(*scale >= -30 && *scale <= 12)"
  },
  {
    "label": "temp64()",
    "kind": "Method",
    "detail": "Function (temp64 = corr_QC [ i ] ;)",
    "insertText": "temp64(val >= 0) ? (temp64 >> val) : (temp64 << -val)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (corr [)",
    "insertText": "i(opus_int32)silk_CHECK_FIT32( __builtin_mips_shilo( temp64, -lsh ))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(i = 0; i < order + 1; i++)"
  },
  {
    "label": "__builtin_mips_shilo()",
    "kind": "Method",
    "detail": "Function (} } corr_QC [ 0 ] =)",
    "insertText": "__builtin_mips_shilo(corr_QC[ 0 ], val)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(corr_QC[ 0 ] >= 0)"
  }
]