[
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "RtpPacketizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizer"
  },
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "RetransmissionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RetransmissionMode"
  },
  {
    "label": "RTPSenderVideo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideo"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "TemporalLayerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TemporalLayerStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_SENDER_VIDEO_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_SENDER_VIDEO_H_ # include<map> # include<memory> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / frame_transformer_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / transport / rtp / dependency_descriptor . h \" # include \" api / video / video_codec_type . h \" # include \" api / video / video_frame_type . h \" # include \" api / video / video_layers_allocation . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / absolute_capture_time_sender . h \" # include \" modules / rtp_rtcp / source / active_decode_targets_helper . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_config . h \" # include \" modules / rtp_rtcp / source / rtp_sender . h \" # include \" modules / rtp_rtcp / source / rtp_sender_video_frame_transformer_delegate . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" modules / rtp_rtcp / source / video_fec_generator . h \" # include \" rtc_base / one_time_event . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class FrameEncryptorInterface ; class RtpPacketizer ; class RtpPacketToSend ; enum RetransmissionMode : uint8_t { kRetransmitOff = 0 x0,kRetransmitBaseLayer = 0 x2,kRetransmitHigherLayers = 0 x4,kRetransmitAllLayers = 0 x6,kConditionallyRetransmitHigherLayers = 0 x8 } ; class RTPSenderVideo { public : int64_t kTLRateWindowSizeMs = 2 5 0 0 ; struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(Config&&)"
  },
  {
    "label": "RTPSenderVideo()",
    "kind": "Method",
    "detail": "Function (Clock* clock = nullptr ; RTPSender* rtp_sender = nullptr ; absl::optional<VideoFecGenerator::FecType> fec_type ; size_t fec_overhead_bytes = 0 ; FrameEncryptorInterface* frame_encryptor = nullptr ; bool require_frame_encryption = false ; bool enable_retransmit_all_layers = false ; absl::optional<int> red_payload_type ; const FieldTrialsView* field_trials = nullptr ; rtc::scoped_refptr<FrameTransformerInterface> frame_transformer ; TaskQueueFactory* task_queue_factory = nullptr ; } ;)",
    "insertText": "RTPSenderVideo(const Config& config)"
  },
  {
    "label": "RTPSenderVideo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RTPSenderVideo()"
  },
  {
    "label": "SendVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendVideo(int payload_type, absl::optional<VideoCodecType> codec_type, uint32_t rtp_timestamp, int64_t capture_time_ms, rtc::ArrayView<const uint8_t> payload, RTPVideoHeader video_header, absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "SendEncodedImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendEncodedImage(int payload_type, absl::optional<VideoCodecType> codec_type, uint32_t rtp_timestamp, const EncodedImage& encoded_image, RTPVideoHeader video_header, absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "SetVideoStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructure(const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoStructureAfterTransformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructureAfterTransformation(const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocation(VideoLayersAllocation allocation)"
  },
  {
    "label": "SetVideoLayersAllocationAfterTransformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationAfterTransformation(VideoLayersAllocation allocation)"
  },
  {
    "label": "PacketizationOverheadBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "PacketizationOverheadBps()"
  },
  {
    "label": "GetTemporalId()",
    "kind": "Method",
    "detail": "Function (protected : uint8_t)",
    "insertText": "GetTemporalId(const RTPVideoHeader& header)"
  },
  {
    "label": "AllowRetransmission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowRetransmission(uint8_t temporal_id, int32_t retransmission_settings, int64_t expected_retransmission_time_ms)"
  },
  {
    "label": "TemporalLayerStats()",
    "kind": "Method",
    "detail": "Function (private : struct TemporalLayerStats {)",
    "insertText": "TemporalLayerStats() : frame_rate_fp1000s(kTLRateWindowSizeMs, 1000 * 1000), last_frame_time_ms(0)"
  },
  {
    "label": "SetVideoStructureInternal()",
    "kind": "Method",
    "detail": "Function (} RateStatistics frame_rate_fp1000s ; int64_t last_frame_time_ms ; } ; enum class SendVideoLayersAllocation { kSendWithResolution,kSendWithoutResolution,kDontSend } ; void)",
    "insertText": "SetVideoStructureInternal(const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationInternal(VideoLayersAllocation allocation)"
  },
  {
    "label": "AddRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRtpHeaderExtensions(const RTPVideoHeader& video_header, bool first_packet, bool last_packet, RtpPacketToSend* packet) const RTC_EXCLUSIVE_LOCKS_REQUIRED(send_checker_)"
  },
  {
    "label": "FecPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FecPacketOverhead() const RTC_EXCLUSIVE_LOCKS_REQUIRED(send_checker_)"
  },
  {
    "label": "LogAndSendToNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAndSendToNetwork(std::vector<std::unique_ptr<RtpPacketToSend>> packets, size_t unpacketized_payload_size)"
  },
  {
    "label": "red_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "red_enabled()"
  },
  {
    "label": "UpdateConditionalRetransmit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateConditionalRetransmit(uint8_t temporal_id, int64_t expected_retransmission_time_ms) RTC_EXCLUSIVE_LOCKS_REQUIRED(stats_mutex_)"
  },
  {
    "label": "MaybeUpdateCurrentPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateCurrentPlayoutDelay(const RTPVideoHeader& header) RTC_EXCLUSIVE_LOCKS_REQUIRED(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTPSender* const rtp_sender_ ; Clock* const clock_ ; const int32_t retransmission_settings_ ; rtc::RaceChecker send_checker_ ; VideoRotation last_rotation_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool playout_delay_pending_ ; const absl::optional<VideoPlayoutDelay> forced_playout_delay_ ; Mutex mutex_ ; const absl::optional<int> red_payload_type_ ; absl::optional<VideoFecGenerator::FecType> fec_type_ ; const size_t fec_overhead_bytes_ ; Mutex stats_mutex_ ; RateStatistics packetization_overhead_bitrate_)",
    "insertText": "RTC_GUARDED_BY(stats_mutex_)"
  }
]