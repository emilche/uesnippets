[
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "RtpPacketizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizer"
  },
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "RetransmissionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RetransmissionMode"
  },
  {
    "label": "RTPSenderVideo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideo"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "TemporalLayerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TemporalLayerStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTPSenderVideo()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RTPSenderVideo(const Config& config)"
  },
  {
    "label": "SendVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendVideo(int payload_type,\n                 absl::optional<VideoCodecType> codec_type,\n                 uint32_t rtp_timestamp,\n                 int64_t capture_time_ms,\n                 rtc::ArrayView<const uint8_t> payload,\n                 RTPVideoHeader video_header,\n                 absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "SendEncodedImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendEncodedImage(\n      int payload_type,\n      absl::optional<VideoCodecType> codec_type,\n      uint32_t rtp_timestamp,\n      const EncodedImage& encoded_image,\n      RTPVideoHeader video_header,\n      absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "SetVideoStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructure(const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoStructureAfterTransformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructureAfterTransformation(\n      const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocation(VideoLayersAllocation allocation)"
  },
  {
    "label": "SetVideoLayersAllocationAfterTransformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationAfterTransformation(\n      VideoLayersAllocation allocation)"
  },
  {
    "label": "GetTemporalId()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetTemporalId(const RTPVideoHeader& header)"
  },
  {
    "label": "AllowRetransmission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowRetransmission(uint8_t temporal_id,\n                           int32_t retransmission_settings,\n                           int64_t expected_retransmission_time_ms)"
  },
  {
    "label": "SetVideoStructureInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructureInternal(\n      const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationInternal(VideoLayersAllocation allocation)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(send_checker_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(send_checker_)"
  },
  {
    "label": "LogAndSendToNetwork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAndSendToNetwork(\n      std::vector<std::unique_ptr<RtpPacketToSend>> packets,\n      size_t unpacketized_payload_size)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_rotation_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_color_space_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (transmit_color_space_next_frame_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (video_structure_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (allocation_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_allocation_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_full_sent_allocation_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_playout_delay_)",
    "insertText": "RTC_GUARDED_BY(send_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (packetization_overhead_bitrate_)",
    "insertText": "RTC_GUARDED_BY(stats_mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (frame_stats_by_temporal_layer_)",
    "insertText": "RTC_GUARDED_BY(stats_mutex_)"
  }
]