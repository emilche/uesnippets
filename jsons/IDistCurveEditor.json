[
  {
    "label": "UInterpCurveEdSetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterpCurveEdSetup"
  },
  {
    "label": "DISTCURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DISTCURVEEDITOR_API"
  },
  {
    "label": "FCurveEdOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEdOptions"
  },
  {
    "label": "PreEditCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SCompoundWidget . h \" class UInterpCurveEdSetup ; class FCurveEdNotifyInterface { public : void)",
    "insertText": "PreEditCurve(TArray<UObject*> CurvesAboutToChange)"
  },
  {
    "label": "PostEditCurve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEditCurve()"
  },
  {
    "label": "MovedKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MovedKey()"
  },
  {
    "label": "DesireUndo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DesireUndo()"
  },
  {
    "label": "DesireRedo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DesireRedo()"
  },
  {
    "label": "OnCurveLabelClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCurveLabelClicked(UObject* CurveObject)"
  },
  {
    "label": "RefreshViewport()",
    "kind": "Method",
    "detail": "Function (} } ; class IDistributionCurveEditor : public SCompoundWidget { public : void)",
    "insertText": "RefreshViewport()"
  },
  {
    "label": "CurveChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveChanged()"
  },
  {
    "label": "SetCurveVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveVisible(const UObject* InCurve, bool bShow)"
  },
  {
    "label": "ClearAllVisibleCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllVisibleCurves()"
  },
  {
    "label": "SetCurveSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveSelected(const UObject* InCurve, bool bSelected)"
  },
  {
    "label": "ClearAllSelectedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllSelectedCurves()"
  },
  {
    "label": "ScrollToFirstSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToFirstSelected()"
  },
  {
    "label": "SetActiveTabToFirstSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTabToFirstSelected()"
  },
  {
    "label": "GetEdSetup()",
    "kind": "Method",
    "detail": "Function (UInterpCurveEdSetup*)",
    "insertText": "GetEdSetup()"
  },
  {
    "label": "GetStartIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStartIn()"
  },
  {
    "label": "GetEndIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEndIn()"
  },
  {
    "label": "SetPositionMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionMarker(bool bEnabled, float InPosition, const FColor& InMarkerColor)"
  },
  {
    "label": "SetEndMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndMarker(bool bEnabled, float InEndPosition)"
  },
  {
    "label": "SetRegionMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRegionMarker(bool bEnabled, float InRegionStart, float InRegionEnd, const FColor& InRegionFillColor)"
  },
  {
    "label": "SetInSnap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInSnap(bool bEnabled, float SnapAmount, bool bInSnapToFrames)"
  },
  {
    "label": "SetViewInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewInterval(float StartIn, float EndIn)"
  },
  {
    "label": "FitViewHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FitViewHorizontally()"
  },
  {
    "label": "FitViewVertically()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FitViewVertically()"
  },
  {
    "label": "FCurveEdOptions()",
    "kind": "Method",
    "detail": "Function (struct FCurveEdOptions { bool bAlwaysShowScrollbar ;)",
    "insertText": "FCurveEdOptions() :bAlwaysShowScrollbar(false)"
  }
]