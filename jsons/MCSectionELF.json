[
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCSectionELF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSectionELF"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCSectionELF()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSECTIONELF_H # define LLVM_MC_MCSECTIONELF_H # include \" llvm / ADT / Twine . h \" # include \" llvm / MC / MCSection . h \" # include \" llvm / MC / MCSymbolELF . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / ELF . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { class MCSymbol ; class MCSectionELF : public MCSection { StringRef SectionName ; unsigned Type ; unsigned Flags ; unsigned UniqueID ; unsigned EntrySize ; const MCSymbolELF* Group ; const MCSectionELF* Associated ; private : class MCContext ;)",
    "insertText": "MCSectionELF(StringRef Section, unsigned type, unsigned flags, SectionKind K, unsigned entrySize, const MCSymbolELF *group, unsigned UniqueID, MCSymbol *Begin, const MCSectionELF *Associated) : MCSection(SV_ELF, K, Begin), SectionName(Section), Type(type), Flags(flags), UniqueID(UniqueID), EntrySize(entrySize), Group(group), Associated(Associated)"
  },
  {
    "label": "MCSectionELF()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCSectionELF()"
  },
  {
    "label": "setSectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSectionName(StringRef Name)"
  },
  {
    "label": "ShouldOmitSectionDirective()",
    "kind": "Method",
    "detail": "Function (SectionName = Name ; } public : bool)",
    "insertText": "ShouldOmitSectionDirective(StringRef Name, const MCAsmInfo &MAI)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getSectionName()"
  },
  {
    "label": "UseCodeAlign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCodeAlign()"
  },
  {
    "label": "isVirtualSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVirtualSection()"
  },
  {
    "label": "isUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUnique()"
  }
]