[
  {
    "label": "StackTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackTrace"
  },
  {
    "label": "LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LOCKABLE"
  },
  {
    "label": "EnableStackLogging()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_CHECKER_IMPL_H_ # define BASE_THREADING_THREAD_CHECKER_IMPL_H_ # include<memory> # include \" base / base_export . h \" # include \" base / sequence_token . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" # include \" base / threading / platform_thread_ref . h \" namespace base { namespace debug { class StackTrace ; } class LOCKABLE BASE_EXPORT ThreadCheckerImpl { public : void)",
    "insertText": "EnableStackLogging()"
  },
  {
    "label": "ThreadCheckerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCheckerImpl()"
  },
  {
    "label": "ThreadCheckerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCheckerImpl(ThreadCheckerImpl&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadCheckerImpl&)",
    "insertText": "operator(ThreadCheckerImpl&& other)"
  },
  {
    "label": "CalledOnValidThread()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CalledOnValidThread(std::unique_ptr<debug::StackTrace>* out_bound_at = nullptr)"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "GetBoundAt()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<debug::StackTrace>)",
    "insertText": "GetBoundAt()"
  },
  {
    "label": "EnsureAssignedLockRequired()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnsureAssignedLockRequired() const EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (base::Lock lock_ ; std::unique_ptr<debug::StackTrace> bound_at_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]