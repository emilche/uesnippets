[
  {
    "label": "XMA2WAVEFORMATEX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMA2WAVEFORMATEX"
  },
  {
    "label": "XMASTREAMFORMAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMASTREAMFORMAT"
  },
  {
    "label": "XMAWAVEFORMAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMAWAVEFORMAT"
  },
  {
    "label": "XMA2STREAMFORMAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMA2STREAMFORMAT"
  },
  {
    "label": "XMA2WAVEFORMAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMA2WAVEFORMAT"
  },
  {
    "label": "XMA2PACKET",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XMA2PACKET"
  },
  {
    "label": "XMA_OUTPUT_SAMPLE_BITS()",
    "kind": "Method",
    "detail": "Function (# ifndef __XMA2DEFS_INCLUDED__ # define __XMA2DEFS_INCLUDED__ # include<sal . h> # include<winerror . h> # include<audiodefs . h> # define XMA_OUTPUT_SAMPLE_BYTES 2 u # define)",
    "insertText": "XMA_OUTPUT_SAMPLE_BITS(XMA_OUTPUT_SAMPLE_BYTES * 8u) #define XMA_BYTES_PER_PACKET 2048u #define XMA_BITS_PER_PACKET (XMA_BYTES_PER_PACKET * 8u) #define XMA_PACKET_HEADER_BYTES 4u #define XMA_PACKET_HEADER_BITS (XMA_PACKET_HEADER_BYTES * 8u) #define XMA_SAMPLES_PER_FRAME 512u #define XMA_SAMPLES_PER_SUBFRAME 128u #define XMA_READBUFFER_MAX_PACKETS 4095u #define XMA_READBUFFER_MAX_BYTES (XMA_READBUFFER_MAX_PACKETS * XMA_BYTES_PER_PACKET) #define XMA_WRITEBUFFER_MAX_BYTES (31u * 256u)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (WAVEFORMATEX wfx ; WORD NumStreams ; DWORD ChannelMask ; DWORD SamplesEncoded ; DWORD BytesPerBlock ; DWORD PlayBegin ; DWORD PlayLength ; DWORD LoopBegin ; DWORD LoopLength ; BYTE LoopCount ; BYTE EncoderVersion ; WORD BlockCount ; } XMA2WAVEFORMATEX,* PXMA2WAVEFORMATEX ; # ifndef WAVE_FORMAT_XMA # define WAVE_FORMAT_XMA 0 x0165 # ifndef XMA_SPEAKER_LEFT # define XMA_SPEAKER_LEFT 0 x01 # define XMA_SPEAKER_RIGHT 0 x02 # define XMA_SPEAKER_CENTER 0 x04 # define XMA_SPEAKER_LFE 0 x08 # define XMA_SPEAKER_LEFT_SURROUND 0 x10 # define XMA_SPEAKER_RIGHT_SURROUND 0 x20 # define XMA_SPEAKER_LEFT_BACK 0 x40 # define XMA_SPEAKER_RIGHT_BACK 0 x80 # endif typedef struct XMASTREAMFORMAT { DWORD PsuedoBytesPerSec ; DWORD SampleRate ; DWORD LoopStart ; DWORD LoopEnd ; BYTE SubframeData ; BYTE Channels ; WORD ChannelMask ; } XMASTREAMFORMAT ; typedef struct XMAWAVEFORMAT { WORD FormatTag ; WORD BitsPerSample ; WORD EncodeOptions ; WORD LargestSkip ; WORD NumStreams ; BYTE LoopCount ; BYTE Version ; XMASTREAMFORMAT XmaStreams [ 1 ] ; } XMAWAVEFORMAT ; typedef struct XMA2STREAMFORMAT { BYTE Channels ; BYTE RESERVED ; WORD ChannelMask ; } XMA2STREAMFORMAT ; typedef struct XMA2WAVEFORMAT { BYTE Version ; BYTE NumStreams ; BYTE RESERVED ; BYTE LoopCount ; DWORD LoopBegin ; DWORD LoopEnd ; DWORD SampleRate ; DWORD EncodeOptions ; DWORD PsuedoBytesPerSec ; DWORD BlockSizeInBytes ; DWORD SamplesEncoded ; DWORD SamplesInSource ; DWORD BlockCount ; XMA2STREAMFORMAT Streams [ 1 ] ; } XMA2WAVEFORMAT ; # endif typedef struct XMA2PACKET { int FrameCount : 6 ; int FrameOffsetInBits : 1 5 ; int PacketMetaData : 3 ; int PacketSkipCount : 8 ; BYTE XmaData [ XMA_BYTES_PER_PACKET -)",
    "insertText": "sizeof(DWORD)"
  },
  {
    "label": "GetXmaPacketFrameCount()",
    "kind": "Method",
    "detail": "Function (} XMA2PACKET ; __inline DWORD)",
    "insertText": "GetXmaPacketFrameCount(__in_bcount(1) const BYTE* pPacket)"
  },
  {
    "label": "GetXmaPacketFirstFrameOffsetInBits()",
    "kind": "Method",
    "detail": "Function (} __inline DWORD)",
    "insertText": "GetXmaPacketFirstFrameOffsetInBits(__in_bcount(3) const BYTE* pPacket)"
  },
  {
    "label": "GetXmaPacketMetadata()",
    "kind": "Method",
    "detail": "Function (} __inline DWORD)",
    "insertText": "GetXmaPacketMetadata(__in_bcount(3) const BYTE* pPacket)"
  },
  {
    "label": "GetXmaPacketSkipCount()",
    "kind": "Method",
    "detail": "Function (} __inline DWORD)",
    "insertText": "GetXmaPacketSkipCount(__in_bcount(4) const BYTE* pPacket)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (} # define XMA_BITS_IN_FRAME_LENGTH_FIELD 1 5 # define XMA_FINAL_FRAME_MARKER 0 x7FFF # ifndef XMA2DEFS_ASSERT # ifdef ASSERT # define XMA2DEFS_ASSERT ASSERT # else # define)",
    "insertText": "XMA2DEFS_ASSERT(a) #endif #endif __inline HRESULT GetXmaBlockContainingSample ( DWORD nBlockCount, __in_ecount(nBlockCount) const DWORD* pSeekTable, DWORD nDesiredSample, __out DWORD* pnBlockContainingSample, __out DWORD* pnSampleOffsetWithinBlock)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (DWORD nPreviousTotalSamples = 0 ; DWORD nBlock ; DWORD nTotalSamplesSoFar ;)",
    "insertText": "XMA2DEFS_ASSERT(pSeekTable)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(pnBlockContainingSample)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(pnSampleOffsetWithinBlock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nTotalSamplesSoFar = pSeekTable [ nBlock ] ;)",
    "insertText": "if(nTotalSamplesSoFar > nDesiredSample)"
  },
  {
    "label": "GetXmaFrameLengthInBits()",
    "kind": "Method",
    "detail": "Function (* pnBlockContainingSample = nBlock ;* pnSampleOffsetWithinBlock = nDesiredSample - nPreviousTotalSamples ; return S_OK ; } nPreviousTotalSamples = nTotalSamplesSoFar ; } return E_FAIL ; } __inline DWORD)",
    "insertText": "GetXmaFrameLengthInBits(__in_bcount(nBitPosition / 8 + 3) __in const BYTE* pPacket, DWORD nBitPosition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD nRegion ; DWORD nBytePosition = nBitPosition / 8 ; DWORD nBitOffset = nBitPosition % 8 ;)",
    "insertText": "if(nBitOffset < 2)"
  },
  {
    "label": "nRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nRegion(DWORD)(pPacket[nBytePosition+0]) << 8 | (DWORD)(pPacket[nBytePosition+1])"
  },
  {
    "label": "nRegion()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "nRegion(DWORD)(pPacket[nBytePosition+0]) << 16 | (DWORD)(pPacket[nBytePosition+1]) << 8 | (DWORD)(pPacket[nBytePosition+2])"
  },
  {
    "label": "GetXmaFrameBitPosition()",
    "kind": "Method",
    "detail": "Function (} } __inline DWORD)",
    "insertText": "GetXmaFrameBitPosition(__in_bcount(nXmaDataBytes) const BYTE* pXmaData, DWORD nXmaDataBytes, DWORD nStreamIndex, DWORD nDesiredFrame)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (const BYTE* pCurrentPacket ; DWORD nPacketsExamined = 0 ; DWORD nFrameCountSoFar = 0 ; DWORD nFramesToSkip ; DWORD nFrameBitOffset ;)",
    "insertText": "XMA2DEFS_ASSERT(pXmaData)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(nXmaDataBytes % XMA_BYTES_PER_PACKET == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pCurrentPacket = pXmaData + nStreamIndex* XMA_BYTES_PER_PACKET ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(nDesiredFrame >= nFrameCountSoFar)"
  },
  {
    "label": "GetXmaPacketFirstFrameOffsetInBits()",
    "kind": "Method",
    "detail": "Function (nFramesToSkip = nDesiredFrame - nFrameCountSoFar ; nFrameBitOffset = XMA_PACKET_HEADER_BITS +)",
    "insertText": "GetXmaPacketFirstFrameOffsetInBits(pCurrentPacket)"
  },
  {
    "label": "GetXmaFrameLengthInBits()",
    "kind": "Method",
    "detail": "Function (nFrameBitOffset + =)",
    "insertText": "GetXmaFrameLengthInBits(pCurrentPacket, nFrameBitOffset)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(DWORD)(pCurrentPacket - pXmaData)"
  },
  {
    "label": "GetXmaPacketFrameCount()",
    "kind": "Method",
    "detail": "Function (} + + nPacketsExamined ; nFrameCountSoFar + =)",
    "insertText": "GetXmaPacketFrameCount(pCurrentPacket)"
  },
  {
    "label": "XMA_BYTES_PER_PACKET()",
    "kind": "Method",
    "detail": "Function (pCurrentPacket + =)",
    "insertText": "XMA_BYTES_PER_PACKET(GetXmaPacketSkipCount(pCurrentPacket) + 1)"
  },
  {
    "label": "GetLastXmaFrameBitPosition()",
    "kind": "Method",
    "detail": "Function (} } __inline DWORD)",
    "insertText": "GetLastXmaFrameBitPosition(__in_bcount(nXmaDataBytes) const BYTE* pXmaData, DWORD nXmaDataBytes, DWORD nStreamIndex)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(nXmaDataBytes >= XMA_BYTES_PER_PACKET * (nStreamIndex + 1))"
  },
  {
    "label": "XMA_BYTES_PER_PACKET()",
    "kind": "Method",
    "detail": "Function (nBytesToNextPacket =)",
    "insertText": "XMA_BYTES_PER_PACKET(GetXmaPacketSkipCount(pLastPacket) + 1)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(nBytesToNextPacket)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } pLastPacket + = nBytesToNextPacket ; })",
    "insertText": "if(GetXmaPacketFrameCount(pLastPacket) == 0)"
  },
  {
    "label": "GetXmaPacketFirstFrameOffsetInBits()",
    "kind": "Method",
    "detail": "Function (pLastPacket - = nBytesToNextPacket ; } nFrameBitOffset = XMA_PACKET_HEADER_BITS +)",
    "insertText": "GetXmaPacketFirstFrameOffsetInBits(pLastPacket)"
  },
  {
    "label": "GetXmaPacketFrameCount()",
    "kind": "Method",
    "detail": "Function (nFramesInLastPacket =)",
    "insertText": "GetXmaPacketFrameCount(pLastPacket)"
  },
  {
    "label": "GetXmaFrameLengthInBits()",
    "kind": "Method",
    "detail": "Function (nFrameBitOffset + =)",
    "insertText": "GetXmaFrameLengthInBits(pLastPacket, nFrameBitOffset)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(DWORD)(pLastPacket - pXmaData)"
  },
  {
    "label": "GetXmaDecodePositionForSample()",
    "kind": "Method",
    "detail": "Function (} __inline HRESULT)",
    "insertText": "GetXmaDecodePositionForSample(__in_bcount(nXmaDataBytes) const BYTE* pXmaData, DWORD nXmaDataBytes, DWORD nStreamIndex, DWORD nDesiredSample, __out DWORD* pnBitOffset, __out DWORD* pnSubFrame)"
  },
  {
    "label": "nSubFrame()",
    "kind": "Method",
    "detail": "Function (DWORD nDesiredFrame = nDesiredSample / XMA_SAMPLES_PER_FRAME ; DWORD)",
    "insertText": "nSubFrame(nDesiredSample % XMA_SAMPLES_PER_FRAME)"
  },
  {
    "label": "GetXmaFrameBitPosition()",
    "kind": "Method",
    "detail": "Function (DWORD nBitOffset =)",
    "insertText": "GetXmaFrameBitPosition(pXmaData, nXmaDataBytes, nStreamIndex, nDesiredFrame)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(pnBitOffset)"
  },
  {
    "label": "XMA2DEFS_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XMA2DEFS_ASSERT(pnSubFrame)"
  },
  {
    "label": "GetXmaSampleRate()",
    "kind": "Method",
    "detail": "Function (* pnBitOffset = nBitOffset ;* pnSubFrame = nSubFrame ; return S_OK ; } else { return E_FAIL ; } } __inline DWORD)",
    "insertText": "GetXmaSampleRate(DWORD dwGeneralRate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD dwXmaRate = 4 8 0 0 0 ;)",
    "insertText": "if(dwGeneralRate <= 24000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD dwStandardMask = 0 ;)",
    "insertText": "if(bXmaMask & XMA_SPEAKER_LEFT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BYTE bXmaMask = 0 ;)",
    "insertText": "if(dwStandardMask & SPEAKER_FRONT_LEFT)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "XMASWAP2BYTES(n) ((WORD)(((n) >> 8) | (((n) & 0xff) << 8))) #define XMASWAP4BYTES(n) ((DWORD)((n) >> 24 | (n) << 24 | ((n) & 0xff00) << 8 | ((n) & 0xff0000) >> 8)) if (pXma2Format->wfx.wFormatTag == WAVE_FORMAT_XMA2)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . wFormatTag =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->wfx.wFormatTag)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . nChannels =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->wfx.nChannels)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . nSamplesPerSec =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->wfx.nSamplesPerSec)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . nAvgBytesPerSec =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->wfx.nAvgBytesPerSec)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . nBlockAlign =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->wfx.nBlockAlign)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . wBitsPerSample =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->wfx.wBitsPerSample)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> wfx . cbSize =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->wfx.cbSize)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> NumStreams =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->NumStreams)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> ChannelMask =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->ChannelMask)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> SamplesEncoded =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->SamplesEncoded)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> BytesPerBlock =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->BytesPerBlock)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> PlayBegin =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->PlayBegin)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> PlayLength =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->PlayLength)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> LoopBegin =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->LoopBegin)"
  },
  {
    "label": "XMASWAP4BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> LoopLength =)",
    "insertText": "XMASWAP4BYTES(pXma2Format->LoopLength)"
  },
  {
    "label": "XMASWAP2BYTES()",
    "kind": "Method",
    "detail": "Function (pXma2Format -> BlockCount =)",
    "insertText": "XMASWAP2BYTES(pXma2Format->BlockCount)"
  }
]