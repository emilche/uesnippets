[
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FBlueprintBreakpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintBreakpoint"
  },
  {
    "label": "FBlueprintWatchedPin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintWatchedPin"
  },
  {
    "label": "TSimpleRingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpleRingBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKismetTraceSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKismetTraceSample"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "FPropertyInstanceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInstanceInfo"
  },
  {
    "label": "FPropertyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInstance"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FObjectsBeingDebuggedIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectsBeingDebuggedIterator"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FBlueprintObjectsBeingDebuggedIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintObjectsBeingDebuggedIterator"
  },
  {
    "label": "FKismetDebugUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetDebugUtilities"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "UK2Node_MacroInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_MacroInstance"
  },
  {
    "label": "variables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "variables"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "variables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "variables"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "EWatchTextResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWatchTextResult"
  },
  {
    "label": "FPerBlueprintSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBlueprintSettings"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyInstanceInfo>)",
    "insertText": "Make(FPropertyInstance PropertyInstance, const TSharedPtr<FPropertyInstanceInfo>& Parent)"
  },
  {
    "label": "PopulateChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateChildren(FPropertyInstance PropertyInstance)"
  },
  {
    "label": "ResolvePathToProperty()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyInstanceInfo>)",
    "insertText": "ResolvePathToProperty(const TArray<FName>& InPathToProperty)"
  },
  {
    "label": "FObjectsBeingDebuggedIterator()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FObjectsBeingDebuggedIterator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValid()"
  },
  {
    "label": "FindNextLevelScriptActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextLevelScriptActor()"
  },
  {
    "label": "FBlueprintObjectsBeingDebuggedIterator()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FBlueprintObjectsBeingDebuggedIterator(UBlueprint* InBlueprint)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValid()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (watchlist)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWatchedPinsListChanged, class UBlueprint*)"
  },
  {
    "label": "OnScriptException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptException(const UObject* ActiveObject, const FFrame& StackFrame, const FBlueprintExceptionInfo& Info)"
  },
  {
    "label": "RequestAbortingExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAbortingExecution()"
  },
  {
    "label": "RequestSingleStepIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSingleStepIn()"
  },
  {
    "label": "RequestStepOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStepOver()"
  },
  {
    "label": "RequestStepOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStepOut()"
  },
  {
    "label": "EndOfScriptExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOfScriptExecution(const FBlueprintContextTracker& BlueprintContext)"
  },
  {
    "label": "NotifyDebuggerOfStartOfGameFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDebuggerOfStartOfGameFrame(UWorld* CurrentWorld)"
  },
  {
    "label": "NotifyDebuggerOfEndOfGameFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDebuggerOfEndOfGameFrame(UWorld* CurrentWorld)"
  },
  {
    "label": "IsSingleStepping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleStepping()"
  },
  {
    "label": "IsBreakpointValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBreakpointValid(const FBlueprintBreakpoint& Breakpoint)"
  },
  {
    "label": "SetBreakpointLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointLocation(FBlueprintBreakpoint& Breakpoint, UEdGraphNode* NewNode)"
  },
  {
    "label": "SetBreakpointEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabled(FBlueprintBreakpoint& Breakpoint, bool bIsEnabled)"
  },
  {
    "label": "SetBreakpointEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabled(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint, bool bIsEnabled)"
  },
  {
    "label": "SetBreakpointEnabledForSingleStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabledForSingleStep(FBlueprintBreakpoint& Breakpoint, bool bDeleteAfterStep)"
  },
  {
    "label": "ReapplyBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReapplyBreakpoint(FBlueprintBreakpoint& Breakpoint)"
  },
  {
    "label": "RemoveBreakpointFromNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBreakpointFromNode(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "UpdateBreakpointStateWhenHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreakpointStateWhenHit(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "site()",
    "kind": "Method",
    "detail": "Function (installation)",
    "insertText": "site(s)"
  },
  {
    "label": "GetBreakpointInstallationSites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBreakpointInstallationSites(const FBlueprintBreakpoint& Breakpoint, TArray<uint8*>& InstallSites)"
  },
  {
    "label": "SetBreakpointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointInternal(FBlueprintBreakpoint& Breakpoint, bool bShouldBeEnabled)"
  },
  {
    "label": "GetValidBreakpointLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidBreakpointLocations(const class UK2Node_MacroInstance* MacroInstanceNode, TArray<const UEdGraphNode*>& BreakpointLocations)"
  },
  {
    "label": "CreateBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBreakpoint(const UBlueprint* Blueprint, UEdGraphNode* Node, bool bIsEnabled = true)"
  },
  {
    "label": "BlueprintHasBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintHasBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "RestoreBreakpointsOnLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreBreakpointsOnLoad(const UBlueprint* Blueprint)"
  },
  {
    "label": "PostDuplicateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicateBlueprint(UBlueprint* SrcBlueprint, UBlueprint* DupBlueprint, const TArray<UEdGraphNode*>& DupNodes)"
  },
  {
    "label": "HasDebuggingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDebuggingData(const UBlueprint* Blueprint)"
  },
  {
    "label": "CanInspectPinValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInspectPinValue(const UEdGraphPin* Pin)"
  },
  {
    "label": "ClearBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "ClearBreakpointsForPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakpointsForPath(const FString &BlueprintPath)"
  },
  {
    "label": "DoesPinHaveWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPinHaveWatches(const UBlueprint* Blueprint, const UEdGraphPin* Pin)"
  },
  {
    "label": "TogglePinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePinWatch(const UBlueprint* Blueprint, const UEdGraphPin* Pin)"
  },
  {
    "label": "AddPinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPinWatch(const UBlueprint* Blueprint, FBlueprintWatchedPin&& WatchedPin)"
  },
  {
    "label": "ClearPinWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPinWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "BlueprintHasPinWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintHasPinWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "GetWatchText()",
    "kind": "Method",
    "detail": "Function (EWatchTextResult)",
    "insertText": "GetWatchText(FString& OutWatchText, UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin)"
  },
  {
    "label": "GetDebugInfo()",
    "kind": "Method",
    "detail": "Function (EWatchTextResult)",
    "insertText": "GetDebugInfo(TSharedPtr<FPropertyInstanceInfo> &OutDebugInfo, UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin)"
  },
  {
    "label": "GetDebugInfoInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugInfoInternal(TSharedPtr<FPropertyInstanceInfo> &DebugInfo, const FProperty* Property, const void* PropertyValue)"
  },
  {
    "label": "GetAndClearLastExceptionMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAndClearLastExceptionMessage()"
  },
  {
    "label": "CheckBreakConditions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckBreakConditions(UEdGraphNode* NodeStoppedAt, bool bHitBreakpoint, int32 BreakpointOffset, bool& InOutBreakExecution)"
  },
  {
    "label": "AttemptToBreakExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptToBreakExecution(UBlueprint* BlueprintObj, const UObject* ActiveObject, const FFrame& StackFrame, const FBlueprintExceptionInfo& Info, UEdGraphNode* NodeStoppedAt, int32 DebugOpcodeOffset)"
  },
  {
    "label": "GetDebugInfo_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugInfo_InContainer(int32 Index, TSharedPtr<FPropertyInstanceInfo> &DebugInfo, const FProperty* Property, const void* Data)"
  },
  {
    "label": "FindDebuggingData()",
    "kind": "Method",
    "detail": "Function (EWatchTextResult)",
    "insertText": "FindDebuggingData(UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin, const FProperty*& OutProperty, const void*& OutData, const void*& OutDelta, UObject*& OutParent, TArray<UObject*>& SeenObjects, bool* bOutIsDirectPtr = nullptr)"
  },
  {
    "label": "SaveBlueprintEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveBlueprintEditorSettings()"
  },
  {
    "label": "CleanupBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "CleanupWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "RemoveEmptySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEmptySettings(const FString& BlueprintPath)"
  },
  {
    "label": "TracepointBreakAllowedOnOwningWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TracepointBreakAllowedOnOwningWorld(const UObject* ObjOuter)"
  }
]