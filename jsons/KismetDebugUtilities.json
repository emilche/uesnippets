[
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FBlueprintBreakpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintBreakpoint"
  },
  {
    "label": "FBlueprintWatchedPin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintWatchedPin"
  },
  {
    "label": "TSimpleRingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpleRingBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKismetTraceSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKismetTraceSample"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "FPropertyInstanceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInstanceInfo"
  },
  {
    "label": "FPropertyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInstance"
  },
  {
    "label": "FObjectsBeingDebuggedIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectsBeingDebuggedIterator"
  },
  {
    "label": "FBlueprintObjectsBeingDebuggedIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintObjectsBeingDebuggedIterator"
  },
  {
    "label": "FKismetDebugUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetDebugUtilities"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UK2Node_MacroInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_MacroInstance"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "EWatchTextResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWatchTextResult"
  },
  {
    "label": "FPerBlueprintSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBlueprintSettings"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Engine / Selection . h \" # include \" KismetDebugUtilities . generated . h \")",
    "insertText": "static_assert(DO_BLUEPRINT_GUARD, \"KismetDebugUtilities assumes BP exception tracking is enabled\")"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (class UBlueprint ; class UEdGraphPin ; struct FBlueprintBreakpoint ; struct FBlueprintWatchedPin ; template<ElementType> class TSimpleRingBuffer ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBlueprintDebug, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "FPropertyInstanceInfo()",
    "kind": "Method",
    "detail": "Function (RestoreAll,RestoreAllAndDisable,DiscardAll } ; struct FKismetTraceSample { TWeakObjectPtr<class UObject> Context ; TWeakObjectPtr<class UFunction> Function ; int32 Offset ; double ObservationTime ; } ; struct FPropertyInstanceInfo : TSharedFromThis<FPropertyInstanceInfo> { struct FPropertyInstance { const FProperty* Property ; const void* Value ; } ;)",
    "insertText": "FPropertyInstanceInfo(FPropertyInstance PropertyInstance, const TSharedPtr<FPropertyInstanceInfo>& Parent = nullptr)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyInstanceInfo>)",
    "insertText": "Make(FPropertyInstance PropertyInstance, const TSharedPtr<FPropertyInstanceInfo>& Parent)"
  },
  {
    "label": "PopulateChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateChildren(FPropertyInstance PropertyInstance)"
  },
  {
    "label": "ResolvePathToProperty()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyInstanceInfo>)",
    "insertText": "ResolvePathToProperty(const TArray<FName>& InPathToProperty)"
  },
  {
    "label": "GetWatchText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWatchText()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FPropertyInstanceInfo>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetPropertyInstance()",
    "kind": "Method",
    "detail": "Function (FText Name ; FText DisplayName ; FText Value ; FText Type ; TWeakObjectPtr<UObject> Object = nullptr ; TFieldPath<const FProperty> Property ; bool bIsInContainer = false ; int32 ContainerIndex = INDEX_NONE ; private : const void* ValueAddress ; FPropertyInstance)",
    "insertText": "GetPropertyInstance()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FPropertyInstanceInfo> Parent ; TArray<TSharedPtr<FPropertyInstanceInfo>> Children ; } ; uint32)",
    "insertText": "GetTypeHash(const FPropertyInstanceInfo::FPropertyInstance& PropertyInstance)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPropertyInstanceInfo::FPropertyInstance& A, const FPropertyInstanceInfo::FPropertyInstance& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "operator()"
  },
  {
    "label": "FindNextLevelScriptActor()",
    "kind": "Method",
    "detail": "Function (} private : FSelectionIterator SelectedActorsIter ; int32 LevelScriptActorIndex ; private : void)",
    "insertText": "FindNextLevelScriptActor()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FBlueprintObjectsBeingDebuggedIterator()",
    "kind": "Method",
    "detail": "Function (} ; struct FBlueprintObjectsBeingDebuggedIterator { public :)",
    "insertText": "FBlueprintObjectsBeingDebuggedIterator(UBlueprint* InBlueprint)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class FKismetDebugUtilities { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWatchedPinsListChanged, class UBlueprint*)"
  },
  {
    "label": "OnScriptException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScriptException(const UObject* ActiveObject, const FFrame& StackFrame, const FBlueprintExceptionInfo& Info)"
  },
  {
    "label": "GetCurrentInstruction()",
    "kind": "Method",
    "detail": "Function (class UEdGraphNode*)",
    "insertText": "GetCurrentInstruction()"
  },
  {
    "label": "GetMostRecentBreakpointHit()",
    "kind": "Method",
    "detail": "Function (class UEdGraphNode*)",
    "insertText": "GetMostRecentBreakpointHit()"
  },
  {
    "label": "GetCurrentDebuggingWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetCurrentDebuggingWorld()"
  },
  {
    "label": "RequestAbortingExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAbortingExecution()"
  },
  {
    "label": "RequestSingleStepIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSingleStepIn()"
  },
  {
    "label": "RequestStepOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStepOver()"
  },
  {
    "label": "RequestStepOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStepOut()"
  },
  {
    "label": "EndOfScriptExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOfScriptExecution(const FBlueprintContextTracker& BlueprintContext)"
  },
  {
    "label": "GetTraceStack()",
    "kind": "Method",
    "detail": "Function (enum { MAX_TRACE_STACK_SAMPLES = 1 0 2 4 } ; const TSimpleRingBuffer<FKismetTraceSample>&)",
    "insertText": "GetTraceStack()"
  },
  {
    "label": "FindSourceNodeForCodeLocation()",
    "kind": "Method",
    "detail": "Function (class UEdGraphNode*)",
    "insertText": "FindSourceNodeForCodeLocation(const UObject* Object, UFunction* Function, int32 DebugOpcodeOffset, bool bAllowImpreciseHit = false)"
  },
  {
    "label": "FindClassForNode()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "FindClassForNode(const UObject* Object, UFunction* Function)"
  },
  {
    "label": "NotifyDebuggerOfStartOfGameFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDebuggerOfStartOfGameFrame(UWorld* CurrentWorld)"
  },
  {
    "label": "NotifyDebuggerOfEndOfGameFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDebuggerOfEndOfGameFrame(UWorld* CurrentWorld)"
  },
  {
    "label": "IsSingleStepping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleStepping()"
  },
  {
    "label": "IsBreakpointValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBreakpointValid(const FBlueprintBreakpoint& Breakpoint)"
  },
  {
    "label": "SetBreakpointLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointLocation(FBlueprintBreakpoint& Breakpoint, UEdGraphNode* NewNode)"
  },
  {
    "label": "SetBreakpointEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabled(FBlueprintBreakpoint& Breakpoint, bool bIsEnabled)"
  },
  {
    "label": "SetBreakpointEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabled(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint, bool bIsEnabled)"
  },
  {
    "label": "SetBreakpointEnabledForSingleStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointEnabledForSingleStep(FBlueprintBreakpoint& Breakpoint, bool bDeleteAfterStep)"
  },
  {
    "label": "ReapplyBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReapplyBreakpoint(FBlueprintBreakpoint& Breakpoint)"
  },
  {
    "label": "RemoveBreakpointFromNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBreakpointFromNode(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "UpdateBreakpointStateWhenHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBreakpointStateWhenHit(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "GetBreakpointInstallationSites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBreakpointInstallationSites(const FBlueprintBreakpoint& Breakpoint, TArray<uint8*>& InstallSites)"
  },
  {
    "label": "SetBreakpointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointInternal(FBlueprintBreakpoint& Breakpoint, bool bShouldBeEnabled)"
  },
  {
    "label": "GetValidBreakpointLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidBreakpointLocations(const class UK2Node_MacroInstance* MacroInstanceNode, TArray<const UEdGraphNode*>& BreakpointLocations)"
  },
  {
    "label": "CreateBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBreakpoint(const UBlueprint* Blueprint, UEdGraphNode* Node, bool bIsEnabled = true)"
  },
  {
    "label": "ForeachBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForeachBreakpoint(const UBlueprint* Blueprint, TFunctionRef<void(FBlueprintBreakpoint &)> Task)"
  },
  {
    "label": "RemoveBreakpointsByPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBreakpointsByPredicate(const UBlueprint* Blueprint, const TFunctionRef<bool(const FBlueprintBreakpoint&)> Predicate)"
  },
  {
    "label": "FindBreakpointByPredicate()",
    "kind": "Method",
    "detail": "Function (FBlueprintBreakpoint*)",
    "insertText": "FindBreakpointByPredicate(const UBlueprint* Blueprint, const TFunctionRef<bool(const FBlueprintBreakpoint&)> Predicate)"
  },
  {
    "label": "BlueprintHasBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintHasBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "RestoreBreakpointsOnLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreBreakpointsOnLoad(const UBlueprint* Blueprint)"
  },
  {
    "label": "PostDuplicateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicateBlueprint(UBlueprint* SrcBlueprint, UBlueprint* DupBlueprint, const TArray<UEdGraphNode*>& DupNodes)"
  },
  {
    "label": "FindClassPropertyForPin()",
    "kind": "Method",
    "detail": "Function (class FProperty*)",
    "insertText": "FindClassPropertyForPin(UBlueprint* Blueprint, const UEdGraphPin* Pin)"
  },
  {
    "label": "FindClassPropertyForNode()",
    "kind": "Method",
    "detail": "Function (class FProperty*)",
    "insertText": "FindClassPropertyForNode(UBlueprint* Blueprint, const UEdGraphNode* Node)"
  },
  {
    "label": "HasDebuggingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDebuggingData(const UBlueprint* Blueprint)"
  },
  {
    "label": "CanInspectPinValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInspectPinValue(const UEdGraphPin* Pin)"
  },
  {
    "label": "FindBreakpointForNode()",
    "kind": "Method",
    "detail": "Function (FBlueprintBreakpoint*)",
    "insertText": "FindBreakpointForNode(const UEdGraphNode* OwnerNode, const UBlueprint* OwnerBlueprint, bool bCheckSubLocations = false)"
  },
  {
    "label": "ClearBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "ClearBreakpointsForPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBreakpointsForPath(const FString &BlueprintPath)"
  },
  {
    "label": "CanWatchPin()",
    "kind": "Method",
    "detail": "Function (FOnWatchedPinsListChanged WatchedPinsListChangedEvent ; bool)",
    "insertText": "CanWatchPin(const UBlueprint* Blueprint, const UEdGraphPin* Pin, const TArray<FName>& InPathToProperty = TArray<FName>())"
  },
  {
    "label": "IsPinBeingWatched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPinBeingWatched(const UBlueprint* Blueprint, const UEdGraphPin* Pin, const TArray<FName>& InPathToProperty = TArray<FName>())"
  },
  {
    "label": "DoesPinHaveWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPinHaveWatches(const UBlueprint* Blueprint, const UEdGraphPin* Pin)"
  },
  {
    "label": "TogglePinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePinWatch(const UBlueprint* Blueprint, const UEdGraphPin* Pin)"
  },
  {
    "label": "RemovePinWatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePinWatch(const UBlueprint* Blueprint, const UEdGraphPin* Pin, const TArray<FName>& InPathToProperty = TArray<FName>())"
  },
  {
    "label": "AddPinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPinWatch(const UBlueprint* Blueprint, FBlueprintWatchedPin&& WatchedPin)"
  },
  {
    "label": "ClearPinWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPinWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "BlueprintHasPinWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintHasPinWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "ForeachPinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForeachPinWatch(const UBlueprint* Blueprint, TFunctionRef<void(UEdGraphPin*)> Task)"
  },
  {
    "label": "ForeachPinPropertyWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForeachPinPropertyWatch(const UBlueprint* Blueprint, TFunctionRef<void(FBlueprintWatchedPin&)> Task)"
  },
  {
    "label": "RemovePinWatchesByPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePinWatchesByPredicate(const UBlueprint* Blueprint, const TFunctionRef<bool(const UEdGraphPin*)> Predicate)"
  },
  {
    "label": "RemovePinPropertyWatchesByPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePinPropertyWatchesByPredicate(const UBlueprint* Blueprint, const TFunctionRef<bool(const FBlueprintWatchedPin&)> Predicate)"
  },
  {
    "label": "FindPinWatchByPredicate()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindPinWatchByPredicate(const UBlueprint* Blueprint, const TFunctionRef<bool(const UEdGraphPin*)> Predicate)"
  },
  {
    "label": "GetWatchText()",
    "kind": "Method",
    "detail": "Function (enum EWatchTextResult { EWTR_Valid,EWTR_NotInScope,EWTR_NoDebugObject,EWTR_NoProperty } ; EWatchTextResult)",
    "insertText": "GetWatchText(FString& OutWatchText, UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin)"
  },
  {
    "label": "GetDebugInfo()",
    "kind": "Method",
    "detail": "Function (EWatchTextResult)",
    "insertText": "GetDebugInfo(TSharedPtr<FPropertyInstanceInfo> &OutDebugInfo, UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin)"
  },
  {
    "label": "GetDebugInfoInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugInfoInternal(TSharedPtr<FPropertyInstanceInfo> &DebugInfo, const FProperty* Property, const void* PropertyValue)"
  },
  {
    "label": "GetAndClearLastExceptionMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAndClearLastExceptionMessage()"
  },
  {
    "label": "CheckBreakConditions()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CheckBreakConditions(UEdGraphNode* NodeStoppedAt, bool bHitBreakpoint, int32 BreakpointOffset, bool& InOutBreakExecution)"
  },
  {
    "label": "AttemptToBreakExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptToBreakExecution(UBlueprint* BlueprintObj, const UObject* ActiveObject, const FFrame& StackFrame, const FBlueprintExceptionInfo& Info, UEdGraphNode* NodeStoppedAt, int32 DebugOpcodeOffset)"
  },
  {
    "label": "GetDebugInfo_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugInfo_InContainer(int32 Index, TSharedPtr<FPropertyInstanceInfo> &DebugInfo, const FProperty* Property, const void* Data)"
  },
  {
    "label": "FindDebuggingData()",
    "kind": "Method",
    "detail": "Function (EWatchTextResult)",
    "insertText": "FindDebuggingData(UBlueprint* Blueprint, UObject* ActiveObject, const UEdGraphPin* WatchPin, const FProperty*& OutProperty, const void*& OutData, const void*& OutDelta, UObject*& OutParent, TArray<UObject*>& SeenObjects, bool* bOutIsDirectPtr = nullptr)"
  },
  {
    "label": "GetPerBlueprintSettings()",
    "kind": "Method",
    "detail": "Function (struct FPerBlueprintSettings*)",
    "insertText": "GetPerBlueprintSettings(const UBlueprint* Blueprint)"
  },
  {
    "label": "GetBreakpoints()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintBreakpoint>*)",
    "insertText": "GetBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "GetWatchedPins()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintWatchedPin>*)",
    "insertText": "GetWatchedPins(const UBlueprint* Blueprint)"
  },
  {
    "label": "SaveBlueprintEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveBlueprintEditorSettings()"
  },
  {
    "label": "CleanupBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupBreakpoints(const UBlueprint* Blueprint)"
  },
  {
    "label": "CleanupWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWatches(const UBlueprint* Blueprint)"
  },
  {
    "label": "RemoveEmptySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEmptySettings(const FString& BlueprintPath)"
  },
  {
    "label": "TracepointBreakAllowedOnOwningWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TracepointBreakAllowedOnOwningWorld(const UObject* ObjOuter)"
  },
  {
    "label": "FKismetDebugUtilities()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FKismetDebugUtilities()"
  }
]