[
  {
    "label": "SPackageDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackageDesc"
  },
  {
    "label": "CSourceFileSnippet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceFileSnippet"
  },
  {
    "label": "CSourceFileModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceFileModule"
  },
  {
    "label": "CSourceFilePackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceFilePackage"
  },
  {
    "label": "CSourceFileProject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceFileProject"
  },
  {
    "label": "CSourceFileSnippet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / SourceProject / SourceProject . h \" # include \" uLang / SourceProject / IFileSystem . h \" namespace uLang { struct SPackageDesc ; class CSourceFileSnippet : public ISourceSnippet { public :)",
    "insertText": "CSourceFileSnippet(CUTF8String&& FilePath, const TSRef<IFileSystem>& FileSystem) : _FilePath(Move(FilePath)) , _FileSystem(FileSystem)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (} char _InvalidSnippetCharacters [ ] = \" \\ \\ :* ? \\ \"<> | ',& ! ~ \\ n \\ r \\ t @ # \" ; CUTF8String)",
    "insertText": "GetPath()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (_FilePath = Path ; } TOptional<CUTF8String>)",
    "insertText": "GetText()"
  },
  {
    "label": "GetVst()",
    "kind": "Method",
    "detail": "Function (TOptional<uLang::TSRef<Verse::Vst::Snippet>>)",
    "insertText": "GetVst()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (_Vst = Snippet ; } ; const CUTF8StringView&)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "GetModifiedText()",
    "kind": "Method",
    "detail": "Function (} const CUTF8StringView&)",
    "insertText": "GetModifiedText()"
  },
  {
    "label": "UnsetModifiedText()",
    "kind": "Method",
    "detail": "Function (_ModifiedText = Text ; } void)",
    "insertText": "UnsetModifiedText()"
  },
  {
    "label": "CUTF8String()",
    "kind": "Method",
    "detail": "Function (_ModifiedText = EResult::Unspecified ; } operator const)",
    "insertText": "CUTF8String()"
  },
  {
    "label": "CSourceFileModule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CSourceFileModule(const CUTF8StringView& ModuleName, CUTF8String&& ModuleFilePath) : CSourceModule(ModuleName), _FilePath(Move(ModuleFilePath))"
  },
  {
    "label": "FindSubmodule()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<CSourceFileModule>>)",
    "insertText": "FindSubmodule(const CUTF8StringView& ModuleName)"
  },
  {
    "label": "FindOrAddSubmodule()",
    "kind": "Method",
    "detail": "Function (TSRef<CSourceFileModule>)",
    "insertText": "FindOrAddSubmodule(const CUTF8StringView& ModuleName, const CUTF8StringView& DirPath)"
  },
  {
    "label": "FindSnippetByFilePath()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<CSourceFileSnippet>>)",
    "insertText": "FindSnippetByFilePath(const CUTF8StringView& FilePath, bool bRecursive)"
  },
  {
    "label": "AddSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSnippet(const uLang::TSRef<ISourceSnippet>& Snippet)"
  },
  {
    "label": "AddSnippet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSnippet(Snippet)"
  },
  {
    "label": "RemoveSnippet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveSnippet(const uLang::TSRef<ISourceSnippet>& Snippet, bool bRecursive)"
  },
  {
    "label": "CSourceFilePackage()",
    "kind": "Method",
    "detail": "Function (} private : class CSourceFilePackage ; CUTF8String _FilePath ; } ; class CSourceFilePackage : public CSourcePackage { public :)",
    "insertText": "CSourceFilePackage(const CUTF8String& PackageFilePath, const TSRef<IFileSystem>& FileSystem, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "CSourceFilePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSourceFilePackage(const SPackageDesc& PackageDesc, const TSRef<IFileSystem>& FileSystem, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "GetDirPath()",
    "kind": "Method",
    "detail": "Function (const CUTF8String&)",
    "insertText": "GetDirPath()"
  },
  {
    "label": "FindSnippetByFilePath()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<CSourceFileSnippet>>)",
    "insertText": "FindSnippetByFilePath(const CUTF8StringView& FilePath)"
  },
  {
    "label": "AddSnippet()",
    "kind": "Method",
    "detail": "Function (TOptional<TSRef<CSourceFileSnippet>>)",
    "insertText": "AddSnippet(const CUTF8StringView& FilePath)"
  },
  {
    "label": "RemoveSnippet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSnippet(const CUTF8StringView& FilePath)"
  },
  {
    "label": "ReadPackageFile()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReadPackageFile(const CUTF8String& PackageFilePath, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "ResolveModuleForRelativeVersePath()",
    "kind": "Method",
    "detail": "Function (TSRef<CSourceFileModule>)",
    "insertText": "ResolveModuleForRelativeVersePath(const CUTF8String& RelativeVersePath, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "GatherPackageSourceFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherPackageSourceFiles(const CUTF8String& PackageFilePath, const TSRef<IFileSystem>& FileSystem, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "CSourceFileProject()",
    "kind": "Method",
    "detail": "Function (CUTF8String _PackageFilePath ; CUTF8String _DirPath ; TOptional<TArray<CUTF8String>> _FilePaths ; const TSRef<IFileSystem> _FileSystem ; } ; class CSourceFileProject : public CSourceProject { public :)",
    "insertText": "CSourceFileProject(const CUTF8String& ProjectFilePath, const TSRef<IFileSystem>& FileSystem, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "CSourceFileProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSourceFileProject(const CUTF8String& Name, const TSRef<IFileSystem>& FileSystem, const TArray<SPackageDesc>& Packages, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "WriteVSCodeWorkspaceFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteVSCodeWorkspaceFile(const CUTF8String& WorkspaceFilePath, const CUTF8String& ProjectFilePath, const TSRef<CDiagnostics>& Diagnostics)"
  },
  {
    "label": "IsSnippetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnippetFile(const CUTF8StringView& FilePath)"
  },
  {
    "label": "IsModuleFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModuleFile(const CUTF8StringView& FilePath)"
  },
  {
    "label": "IsPackageFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageFile(const CUTF8StringView& FilePath)"
  },
  {
    "label": "IsProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProjectFile(const CUTF8StringView& FilePath)"
  },
  {
    "label": "IsValidModuleName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidModuleName(const CUTF8StringView& ModuleName)"
  },
  {
    "label": "IsValidSnippetFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSnippetFileName(const CUTF8StringView& FileName)"
  }
]