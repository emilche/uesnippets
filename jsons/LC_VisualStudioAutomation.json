[
  {
    "label": "Startup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Startup(void)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(void)"
  },
  {
    "label": "FindDebuggerAttachedToProcess()",
    "kind": "Method",
    "detail": "Function (EnvDTE::DebuggerPtr)",
    "insertText": "FindDebuggerAttachedToProcess(Process::Id processId)"
  },
  {
    "label": "FindDebuggerForProcess()",
    "kind": "Method",
    "detail": "Function (EnvDTE::DebuggerPtr)",
    "insertText": "FindDebuggerForProcess(Process::Id processId)"
  },
  {
    "label": "AttachToProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachToProcess(const EnvDTE::DebuggerPtr& debugger, Process::Id processId)"
  },
  {
    "label": "EnumerateThreads()",
    "kind": "Method",
    "detail": "Function (types::vector<EnvDTE::ThreadPtr>)",
    "insertText": "EnumerateThreads(const EnvDTE::DebuggerPtr& debugger)"
  },
  {
    "label": "FreezeThreads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FreezeThreads(const EnvDTE::DebuggerPtr& debugger, const types::vector<EnvDTE::ThreadPtr>& threads)"
  },
  {
    "label": "FreezeThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FreezeThread(const EnvDTE::DebuggerPtr& debugger, const types::vector<EnvDTE::ThreadPtr>& threads, Thread::Id threadId)"
  },
  {
    "label": "ThawThreads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ThawThreads(const EnvDTE::DebuggerPtr& debugger, const types::vector<EnvDTE::ThreadPtr>& threads)"
  },
  {
    "label": "ThawThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ThawThread(const EnvDTE::DebuggerPtr& debugger, const types::vector<EnvDTE::ThreadPtr>& threads, Thread::Id threadId)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resume(const EnvDTE::DebuggerPtr& debugger)"
  },
  {
    "label": "Break()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Break(const EnvDTE::DebuggerPtr& debugger)"
  }
]