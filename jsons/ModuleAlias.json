[
  {
    "label": "CModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CModule"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CModuleAlias()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / Expression . h \" namespace uLang { class CModule ; class CModuleAlias : public CDefinition { public : const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::ModuleAlias ;)",
    "insertText": "CModuleAlias(const CSymbol& Name, CScope& EnclosingScope) : CDefinition(StaticDefinitionKind, EnclosingScope, Name)"
  },
  {
    "label": "Module()",
    "kind": "Method",
    "detail": "Function (} const CModule*)",
    "insertText": "Module()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (_Module = Module ; } void)",
    "insertText": "SetAstNode(CExprImport* AstNode)"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (} CExprImport*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIrNode(CExprImport* AstNode)"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (} CExprImport*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  }
]