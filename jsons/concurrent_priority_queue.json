[
  {
    "label": "use_element_copy_constructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "use_element_copy_constructor"
  },
  {
    "label": "concurrent_priority_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_priority_queue"
  },
  {
    "label": "operation_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "operation_type"
  },
  {
    "label": "operation_status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "operation_status"
  },
  {
    "label": "cpq_operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cpq_operation"
  },
  {
    "label": "my_functor_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "my_functor_t"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_priority_queue_H # define __TBB_concurrent_priority_queue_H # include \" atomic . h \" # include \" cache_aligned_allocator . h \" # include \" tbb_exception . h \" # include \" tbb_stddef . h \" # include \" tbb_profiling . h \" # include \" internal / _aggregator_impl . h \" # include \" internal / _template_helpers . h \" # include \" internal / _allocator_traits . h \" # include<vector> # include<iterator> # include<functional> # include __TBB_STD_SWAP_HEADER # if __TBB_INITIALIZER_LISTS_PRESENT # include<initializer_list> # endif # if __TBB_CPP11_IS_COPY_CONSTRUCTIBLE_PRESENT # include<type_traits> # endif namespace tbb { namespace interface5 { namespace internal { # if __TBB_CPP11_IS_COPY_CONSTRUCTIBLE_PRESENT template<T,bool C = std::is_copy_constructible<T>::value> struct use_element_copy_constructor { typedef tbb::internal::true_type type ; } ; template<T> struct use_element_copy_constructor<T,false> { typedef tbb::internal::false_type type ; } ; # else template<> struct use_element_copy_constructor { typedef tbb::internal::true_type type ; } ; # endif } using namespace tbb::internal ; template<T,Compare = std::less<T>,A = cache_aligned_allocator<T>> class concurrent_priority_queue { public : typedef T value_type ; typedef T& reference ; typedef const T& const_reference ; typedef size_t size_type ; typedef ptrdiff_t difference_type ; typedef A allocator_type ;)",
    "insertText": "concurrent_priority_queue(const allocator_type& a = allocator_type()) : mark(0), my_size(0), compare(), data(a)"
  },
  {
    "label": "initialize_handler()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "initialize_handler(my_functor_t(this))"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(const Compare& c, const allocator_type& a = allocator_type()) : mark(0), my_size(0), compare(c), data(a)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(size_type init_capacity, const allocator_type& a = allocator_type()) : mark(0), my_size(0), compare(), data(a)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "reserve(init_capacity)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(size_type init_capacity, const Compare& c, const allocator_type& a = allocator_type()) : mark(0), my_size(0), compare(c), data(a)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator>)",
    "insertText": "concurrent_priority_queue(InputIterator begin, InputIterator end, const allocator_type& a = allocator_type()) : mark(0), compare(), data(begin, end, a)"
  },
  {
    "label": "heapify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "heapify()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (my_size = data .)",
    "insertText": "size()"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator>)",
    "insertText": "concurrent_priority_queue(InputIterator begin, InputIterator end, const Compare& c, const allocator_type& a = allocator_type()) : mark(0), compare(c), data(begin, end, a)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT)",
    "insertText": "concurrent_priority_queue(std::initializer_list<T> init_list, const allocator_type &a = allocator_type()) : mark(0), compare(), data(init_list.begin(), init_list.end(), a)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(std::initializer_list<T> init_list, const Compare& c, const allocator_type &a = allocator_type()) : mark(0), compare(c), data(init_list.begin(), init_list.end(), a)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "concurrent_priority_queue(const concurrent_priority_queue& src) : mark(src.mark), my_size(src.my_size), data(src.data.begin(), src.data.end(), src.data.get_allocator())"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(const concurrent_priority_queue& src, const allocator_type& a) : mark(src.mark), my_size(src.my_size), data(src.data.begin(), src.data.end(), a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_priority_queue&)",
    "insertText": "operator(const concurrent_priority_queue& src)"
  },
  {
    "label": "vector_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vector_t(src.data.begin(), src.data.end(), src.data.get_allocator()).swap(data)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (mark = src . mark ; my_size = src . my_size ; } return* this ; } # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_priority_queue(concurrent_priority_queue&& src) : mark(src.mark), my_size(src.my_size), data(std::move(src.data))"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_priority_queue(concurrent_priority_queue&& src, const allocator_type& a) : mark(src.mark), my_size(src.my_size), #if __TBB_ALLOCATOR_TRAITS_PRESENT data(std::move(src.data), a) #else data(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ! __TBB_ALLOCATOR_TRAITS_PRESENT)",
    "insertText": "if(a != src.data.get_allocator())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "reserve(src.data.size())"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "assign(std::make_move_iterator(src.data.begin()), std::make_move_iterator(src.data.end()))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} else { data =)",
    "insertText": "move(src.data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } concurrent_priority_queue&)",
    "insertText": "operator(concurrent_priority_queue&& src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mark = src . mark ; my_size = src . my_size ; # if ! __TBB_ALLOCATOR_TRAITS_PRESENT)",
    "insertText": "if(data.get_allocator() != src.data.get_allocator())"
  },
  {
    "label": "vector_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vector_t(std::make_move_iterator(src.data.begin()), std::make_move_iterator(src.data.end()), data.get_allocator()).swap(data)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } # endif template<InputIterator> void)",
    "insertText": "assign(InputIterator begin, InputIterator end)"
  },
  {
    "label": "vector_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vector_t(begin, end, data.get_allocator()).swap(data)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT void)",
    "insertText": "assign(std::initializer_list<T> il)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "assign(il.begin(), il.end())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_priority_queue&)",
    "insertText": "operator(std::initializer_list<T> il)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push(const_reference elem)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if __TBB_CPP11_IS_COPY_CONSTRUCTIBLE_PRESENT)",
    "insertText": "__TBB_STATIC_ASSERT(std::is_copy_constructible<value_type>::value, \"The type is not copy constructible. Copying push operation is impossible.\")"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (# endif cpq_operation)",
    "insertText": "op_data(elem, PUSH_OP)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "execute(&op_data)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "push(value_type &&elem)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (cpq_operation)",
    "insertText": "op_data(elem, PUSH_RVALUE_OP)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . . Args> void)",
    "insertText": "emplace(Args&&... args)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(value_type(std::forward<Args>(args)...))"
  },
  {
    "label": "try_pop()",
    "kind": "Method",
    "detail": "Function (} # endif # endif bool)",
    "insertText": "try_pop(reference elem)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (cpq_operation)",
    "insertText": "op_data(POP_OP)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "clear()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mark = 0 ; my_size = 0 ; } void)",
    "insertText": "swap(concurrent_priority_queue& q)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ; data .)",
    "insertText": "swap(q.data)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(mark, q.mark)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(my_size, q.my_size)"
  },
  {
    "label": "get_allocator()",
    "kind": "Method",
    "detail": "Function (} allocator_type)",
    "insertText": "get_allocator()"
  },
  {
    "label": "cpq_operation()",
    "kind": "Method",
    "detail": "Function (} private : enum operation_type { INVALID_OP,PUSH_OP,POP_OP,PUSH_RVALUE_OP } ; enum operation_status { WAIT = 0,SUCCEEDED,FAILED } ; class cpq_operation : public aggregated_operation<cpq_operation> { public : operation_type type ; union { value_type* elem ; size_type sz ; } ;)",
    "insertText": "cpq_operation(const_reference e, operation_type t) : type(t), elem(const_cast<value_type*>(&e))"
  },
  {
    "label": "cpq_operation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "cpq_operation(operation_type t) : type(t)"
  },
  {
    "label": "my_functor_t()",
    "kind": "Method",
    "detail": "Function (} } ; class my_functor_t { concurrent_priority_queue<T,Compare,A>* cpq ; public :)",
    "insertText": "my_functor_t()"
  },
  {
    "label": "my_functor_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "my_functor_t(concurrent_priority_queue<T, Compare, A> *cpq_) : cpq(cpq_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(cpq_operation* op_list)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (cpq ->)",
    "insertText": "handle_operations(op_list)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; typedef tbb::internal::aggregator<my_functor_t,cpq_operation> aggregator_t ; aggregator_t my_aggregator ; char padding1 [ NFS_MaxLineSize -)",
    "insertText": "sizeof(aggregator_t)"
  },
  {
    "label": "NFS_MaxLineSize()",
    "kind": "Method",
    "detail": "Function (size_type mark ; __TBB_atomic size_type my_size ; Compare compare ; char padding2 [)",
    "insertText": "NFS_MaxLineSize(2*sizeof(size_type)) - sizeof(Compare)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<value_type,allocator_type> vector_t ; vector_t data ; void)",
    "insertText": "handle_operations(cpq_operation *op_list)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (cpq_operation* tmp,* pop_list = NULL ;)",
    "insertText": "__TBB_ASSERT(mark == data.size(), NULL)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &(op_list->status))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(op_list->type != INVALID_OP, NULL)"
  },
  {
    "label": "itt_hide_load_word()",
    "kind": "Method",
    "detail": "Function (tmp = op_list ; op_list =)",
    "insertText": "itt_hide_load_word(op_list->next)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(my_size, my_size-1)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(tmp->status, uintptr_t(SUCCEEDED))"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "pop_back()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(mark<=data.size(), NULL)"
  },
  {
    "label": "itt_hide_store_word()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "itt_hide_store_word(tmp->next, pop_list)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (pop_list = tmp ; } } else {)",
    "insertText": "__TBB_ASSERT(tmp->type == PUSH_OP || tmp->type == PUSH_RVALUE_OP, \"Unknown operation\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__TBB_TRY {)",
    "insertText": "if(tmp->type == PUSH_OP)"
  },
  {
    "label": "push_back_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back_helper(*(tmp->elem), typename internal::use_element_copy_constructor<value_type>::type())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} else { data .)",
    "insertText": "push_back(tbb::internal::move(*(tmp->elem)))"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__TBB_store_with_release(my_size, my_size + 1)"
  },
  {
    "label": "__TBB_CATCH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__TBB_CATCH(...)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(tmp->status, uintptr_t(FAILED))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "while(pop_list)"
  },
  {
    "label": "itt_hide_load_word()",
    "kind": "Method",
    "detail": "Function (tmp = pop_list ; pop_list =)",
    "insertText": "itt_hide_load_word(pop_list->next)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(tmp->type == POP_OP, NULL)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(tmp->elem) = tbb::internal::move(data[0])"
  },
  {
    "label": "reheap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reheap()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(mark<data.size()) heapify()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (size_type cur_pos = mark ; value_type to_place = tbb::)",
    "insertText": "move(data[mark])"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (data [ cur_pos ] = tbb::)",
    "insertText": "move(data[parent])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (cur_pos = parent ; })",
    "insertText": "while(cur_pos)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (data [ cur_pos ] = tbb::)",
    "insertText": "move(to_place)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_type cur_pos = 0,child = 1 ;)",
    "insertText": "while(child < mark)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_type target = child ;)",
    "insertText": "if(child+1 < mark && compare(data[child], data[child+1]))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (data [ cur_pos ] = tbb::)",
    "insertText": "move(data[target])"
  },
  {
    "label": "child()",
    "kind": "Method",
    "detail": "Function (cur_pos = target ;)",
    "insertText": "child(cur_pos<<1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(cur_pos != data.size()-1) data[cur_pos] = tbb::internal::move(data[data.size()-1])"
  },
  {
    "label": "push_back_helper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back_helper(const T& t, tbb::internal::true_type)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "push_back(t)"
  },
  {
    "label": "push_back_helper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back_helper(const T&, tbb::internal::false_type)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(false, \"The type is not copy constructible. Copying push operation is impossible.\")"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_CPP17_DEDUCTION_GUIDES_PRESENT namespace internal { template<T,. . . Args> using priority_queue_t = concurrent_priority_queue<T,)",
    "insertText": "conditional_t(sizeof...(Args)>0) && !is_allocator_v< pack_element_t<0, Args...> >, pack_element_t<0, Args...>, std::less<T> >, std::conditional_t< (sizeof...(Args)>0) && is_allocator_v< pack_element_t<sizeof...(Args)-1, Args...> >, pack_element_t<sizeof...(Args)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (internal::priority_queue_t<T, Args...>)",
    "insertText": "concurrent_priority_queue(InputIterator, InputIterator, Args...)"
  },
  {
    "label": "concurrent_priority_queue()",
    "kind": "Method",
    "detail": "Function (internal::priority_queue_t<T, CompareOrAllocalor>)",
    "insertText": "concurrent_priority_queue(std::initializer_list<T> init_list, CompareOrAllocalor)"
  }
]