[
  {
    "label": "DiyFp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiyFp"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_DIY_FP_H_ # define DOUBLE_CONVERSION_DIY_FP_H_ # include \" utils . h \" namespace double_conversion { class DiyFp { public : const int kSignificandSize = 6 4 ;)",
    "insertText": "DiyFp() : f_(0), e_(0)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiyFp(const uint64_t significand, const int32_t exponent) : f_(significand), e_(exponent)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Subtract(const DiyFp& other)"
  },
  {
    "label": "Minus()",
    "kind": "Method",
    "detail": "Function (f_ - = other . f_ ; } DiyFp)",
    "insertText": "Minus(const DiyFp& a, const DiyFp& b)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (DiyFp result = a ; result .)",
    "insertText": "Subtract(b)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (const uint64_t kM32 = 0 xFFFFFFFFU ; const uint64_t a = f_>> 3 2 ; const uint64_t b = f_& kM32 ; const uint64_t c = other . f_>> 3 2 ; const uint64_t d = other . f_& kM32 ; const uint64_t ac = a* c ; const uint64_t bc = b* c ; const uint64_t ad = a* d ; const uint64_t bd = b* d ; const uint64_t)",
    "insertText": "tmp(bd >> 32) + (ad & kM32) + (bc & kM32) + (1U << 31)"
  },
  {
    "label": "ac()",
    "kind": "Method",
    "detail": "Function (e_ + = other . e_ + 6 4 ; f_ =)",
    "insertText": "ac(ad >> 32) + (bc >> 32) + (tmp >> 32)"
  },
  {
    "label": "Times()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "Times(const DiyFp& a, const DiyFp& b)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (DiyFp result = a ; result .)",
    "insertText": "Multiply(b)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (uint64_t significand = f_ ; int32_t exponent = e_ ; const uint64_t k10MSBits =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0xFFC00000, 00000000)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (significand<<= 1 0 ; exponent - = 1 0 ; })",
    "insertText": "while((significand & kUint64MSB) == 0)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (significand<<= 1 ; exponent - - ; } f_ = significand ; e_ = exponent ; } DiyFp)",
    "insertText": "Normalize(const DiyFp& a)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (DiyFp result = a ; result .)",
    "insertText": "Normalize()"
  },
  {
    "label": "set_e()",
    "kind": "Method",
    "detail": "Function (f_ = new_value ; } void)",
    "insertText": "set_e(int32_t new_value)"
  },
  {
    "label": "DOUBLE_CONVERSION_UINT64_2PART_C()",
    "kind": "Method",
    "detail": "Function (e_ = new_value ; } private : const uint64_t kUint64MSB =)",
    "insertText": "DOUBLE_CONVERSION_UINT64_2PART_C(0x80000000, 00000000)"
  }
]