[
  {
    "label": "TSimdSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimdSelector"
  },
  {
    "label": "TSimdValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimdValue"
  },
  {
    "label": "TSimdInt32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimdInt32"
  },
  {
    "label": "TSimdRealf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimdRealf"
  },
  {
    "label": "TSimdVec3f",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimdVec3f"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / VectorUtility . h \" # include \" Math / VectorRegister . h \" namespace Chaos { namespace Private { const int SimdAlignment = 1 6 ; template<int TNumLanes> struct TSimdSelector {)",
    "insertText": "alignas(SimdAlignment)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "uint32(V)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const int LaneIndex)"
  },
  {
    "label": "True()",
    "kind": "Method",
    "detail": "Function (} TSimdSelector<TNumLanes>)",
    "insertText": "True()"
  },
  {
    "label": "False()",
    "kind": "Method",
    "detail": "Function (TSimdSelector<TNumLanes>)",
    "insertText": "False()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (V [ LaneIndex ] = F ; } ValueType)",
    "insertText": "GetValue(const int32 LaneIndex)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(LaneIndex, F)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const int32 LaneIndex, const int32 I)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Make(I)"
  },
  {
    "label": "GetMaxValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MaxValue = V [ 0 ] ;)",
    "insertText": "for(int32 LaneIndex = 1; LaneIndex < TNumLanes; ++LaneIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxValue =)",
    "insertText": "Max(MaxValue, V[LaneIndex])"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} return MaxValue ; } TSimdInt32<TNumLanes>)",
    "insertText": "Make(const int32 I)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (TSimdInt32<TNumLanes>)",
    "insertText": "Zero()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const int32 LaneIndex, const float F)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Make(F)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TSimdRealf)",
    "insertText": "Make(const float F)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (TSimdRealf)",
    "insertText": "One()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<int TNumLanes> struct TSimdVec3f {)",
    "insertText": "static_assert(TNumLanes == 4, \"Other sizes not yet supported\")"
  },
  {
    "label": "TSimdVec3f()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSimdVec3f(const FVec3f& V)"
  },
  {
    "label": "SetValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValues(V)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const int32 LaneIndex, const FVec3f& V)"
  },
  {
    "label": "SetValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValues(const FVec3f& V)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Make(V)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TSimdVec3f)",
    "insertText": "Make(const FVec3f& V)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSimdVec3f Out ;)",
    "insertText": "for(int32 LaneIndex = 0; LaneIndex < TNumLanes; ++LaneIndex)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "SetValue(LaneIndex, V)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} return Out ; } TSimdVec3f)",
    "insertText": "Make(const FVec3f& V0, const FVec3f& V1, const FVec3f& V2, const FVec3f& V3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSimdVec3f Out ;)",
    "insertText": "if(TNumLanes == 4)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "SetValue(0, V0)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "SetValue(1, V1)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "SetValue(2, V2)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "SetValue(3, V3)"
  }
]