[
  {
    "label": "ForEachIf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / Invoke . h \" namespace Algo { template<InT,PredicateT,CallableT> void)",
    "insertText": "ForEachIf(InT& Input, PredicateT Predicate, CallableT Callable)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(Callable, Value)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (} } } template<InT,CallableT> void)",
    "insertText": "ForEach(InT& Input, CallableT Callable)"
  }
]