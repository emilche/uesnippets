[
  {
    "label": "AutoDiffJacobian",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoDiffJacobian"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_AUTODIFF_JACOBIAN_H # define EIGEN_AUTODIFF_JACOBIAN_H namespace Eigen { template<Functor> class AutoDiffJacobian : public Functor { public :)",
    "insertText": "AutoDiffJacobian() : Functor()"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffJacobian(const Functor& f) : Functor(f)"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . T>)",
    "insertText": "AutoDiffJacobian(const T& ...Values) : Functor(Values...)"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (} # else template<T0>)",
    "insertText": "AutoDiffJacobian(const T0& a0) : Functor(a0)"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (} template<T0,T1>)",
    "insertText": "AutoDiffJacobian(const T0& a0, const T1& a1) : Functor(a0, a1)"
  },
  {
    "label": "AutoDiffJacobian()",
    "kind": "Method",
    "detail": "Function (} template<T0,T1,T2>)",
    "insertText": "AutoDiffJacobian(const T0& a0, const T1& a1, const T2& a2) : Functor(a0, a1, a2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif typedef Functor::InputType InputType ; typedef Functor::ValueType ValueType ; typedef ValueType::Scalar Scalar ; enum { InputsAtCompileTime = InputType::RowsAtCompileTime,ValuesAtCompileTime = ValueType::RowsAtCompileTime } ; typedef Matrix<Scalar,ValuesAtCompileTime,InputsAtCompileTime> JacobianType ; typedef JacobianType::Index Index ; typedef Matrix<Scalar,InputsAtCompileTime,1> DerivativeType ; typedef AutoDiffScalar<DerivativeType> ActiveScalar ; typedef Matrix<ActiveScalar,InputsAtCompileTime,1> ActiveInput ; typedef Matrix<ActiveScalar,ValuesAtCompileTime,1> ActiveValue ; # if EIGEN_HAS_VARIADIC_TEMPLATES EIGEN_STRONG_INLINE void)",
    "insertText": "operator() (const InputType& x, ValueType* v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator()(x, v, 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . ParamsType> void)",
    "insertText": "operator() (const InputType& x, ValueType* v, JacobianType* _jac, const ParamsType&... Params) const #else void operator() (const InputType& x, ValueType* v, JacobianType* _jac=0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(v!=0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_HAS_VARIADIC_TEMPLATES)",
    "insertText": "operator()(x, v, Params...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "operator()(x, v)"
  },
  {
    "label": "ActiveScalar()",
    "kind": "Method",
    "detail": "Function (# endif return ; } JacobianType& jac =* _jac ; ActiveInput ax = x . template cast<)",
    "insertText": "ActiveScalar()"
  },
  {
    "label": "av()",
    "kind": "Method",
    "detail": "Function (ActiveValue)",
    "insertText": "av(jac.rows())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_HAS_VARIADIC_TEMPLATES)",
    "insertText": "operator()(ax, &av, Params...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "operator()(ax, &av)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(Index i=0; i<jac.rows(); i++)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (jac .)",
    "insertText": "row(i) = av[i].derivatives()"
  }
]