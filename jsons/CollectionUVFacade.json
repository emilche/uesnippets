[
  {
    "label": "TArrayOfAttributesAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayOfAttributesAccessor"
  },
  {
    "label": "FCollectionUVFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionUVFacade"
  },
  {
    "label": "HasValidUVs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" namespace GeometryCollectionUV { enum { MAX_NUM_UV_CHANNELS = 8,} ; } namespace GeometryCollection::UV { const FName UVLayerNames [ GeometryCollectionUV::MAX_NUM_UV_CHANNELS ] ; const FName VerticesGroupName ; bool)",
    "insertText": "HasValidUVs(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNumUVLayers(FManagedArrayCollection& Collection, int32 NumUVs)"
  },
  {
    "label": "GetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUVLayers(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "DefineUVSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineUVSchema(FManagedArrayCollection& Collection)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<FVector2f>*)",
    "insertText": "FindUVLayer(const FManagedArrayCollection& Collection, int32 UVLayer)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<FVector2f>*)",
    "insertText": "FindUVLayer(FManagedArrayCollection& Collection, int32 UVLayer)"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<FVector2f>&)",
    "insertText": "GetUVLayer(const FManagedArrayCollection& Collection, int32 UVLayer)"
  },
  {
    "label": "ModifyUVLayer()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<FVector2f>&)",
    "insertText": "ModifyUVLayer(FManagedArrayCollection& Collection, int32 UVLayer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ManagedArrayType,int32 MaxArraySize> struct TArrayOfAttributesAccessor { TArray<ManagedArrayType*,TFixedAllocator<MaxArraySize>> Attributes ; ManagedArrayType&)",
    "insertText": "operator(int32 Idx)"
  },
  {
    "label": "FindActiveUVLayers()",
    "kind": "Method",
    "detail": "Function (} } ; using FUVLayers = TArrayOfAttributesAccessor<TManagedArray<FVector2f>,8> ; using FConstUVLayers = TArrayOfAttributesAccessor<const TManagedArray<FVector2f>,8> ; FUVLayers)",
    "insertText": "FindActiveUVLayers(FManagedArrayCollection& Collection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FUVLayers Layers ;)",
    "insertText": "for(int32 LayerIdx = 0; LayerIdx < GeometryCollectionUV::MAX_NUM_UV_CHANNELS; ++LayerIdx)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FVector2f>* Layer = Collection . FindAttributeTyped<)",
    "insertText": "FVector2f(UVLayerNames[LayerIdx], VerticesGroupName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (break ; } Layers . Attributes .)",
    "insertText": "Add(Layer)"
  },
  {
    "label": "FindActiveUVLayers()",
    "kind": "Method",
    "detail": "Function (} return Layers ; } FConstUVLayers)",
    "insertText": "FindActiveUVLayers(const FManagedArrayCollection& Collection)"
  },
  {
    "label": "SetUVs()",
    "kind": "Method",
    "detail": "Function (} return Layers ; } void)",
    "insertText": "SetUVs(FManagedArrayCollection& Collection, int32 VertexIdx, TArrayView<const FVector2f> UVs)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FVector2f>* Layer =)",
    "insertText": "FindUVLayer(Collection, LayerIdx)"
  },
  {
    "label": "break()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "break(*Layer)"
  },
  {
    "label": "MatchUVLayerCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MatchUVLayerCount(FManagedArrayCollection& ToCollection, const FManagedArrayCollection& FromCollection)"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumUVLayers(ToCollection, GetNumUVLayers(FromCollection))"
  },
  {
    "label": "FCollectionUVFacade()",
    "kind": "Method",
    "detail": "Function (} } namespace GeometryCollection::Facades { class FCollectionUVFacade { public :)",
    "insertText": "FCollectionUVFacade(FManagedArrayCollection& InCollection) : Collection(&InCollection), ConstCollection(&InCollection)"
  },
  {
    "label": "FCollectionUVFacade()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollectionUVFacade(const FManagedArrayCollection& InCollection) : Collection(nullptr), ConstCollection(&InCollection)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "DefineUVSchema()",
    "kind": "Method",
    "detail": "Function (GeometryCollection::)",
    "insertText": "DefineUVSchema(*Collection)"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetNumUVLayers(int32 UVLayers)"
  },
  {
    "label": "GetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumUVLayers()"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<FVector2f>&)",
    "insertText": "GetUVLayer(int32 UVLayer)"
  },
  {
    "label": "ModifyUVLayer()",
    "kind": "Method",
    "detail": "Function (} TManagedArray<FVector2f>&)",
    "insertText": "ModifyUVLayer(int32 UVLayer)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<FVector2f>*)",
    "insertText": "FindUVLayer(int32 UVLayer)"
  },
  {
    "label": "ModifyUV()",
    "kind": "Method",
    "detail": "Function (} FVector2f&)",
    "insertText": "ModifyUV(int32 VertexIdx, int32 LayerIdx)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} const FVector2f&)",
    "insertText": "GetUV(int32 VertexIdx, int32 LayerIdx)"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUV(int32 VertexIdx, int32 LayerIdx, const FVector2f& UV)"
  },
  {
    "label": "ModifyUVLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyUVLayer(LayerIdx)"
  },
  {
    "label": "FindActiveUVLayers()",
    "kind": "Method",
    "detail": "Function (} GeometryCollection::UV::FUVLayers)",
    "insertText": "FindActiveUVLayers()"
  },
  {
    "label": "SetUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUVs(int32 VertexIdx, TArrayView<const FVector2f> UVs)"
  },
  {
    "label": "SetUVs()",
    "kind": "Method",
    "detail": "Function (GeometryCollection::)",
    "insertText": "SetUVs(*Collection, VertexIdx, UVs)"
  }
]