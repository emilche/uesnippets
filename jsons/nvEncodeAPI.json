[
  {
    "label": "_GUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_GUID"
  },
  {
    "label": "_NVENC_RECT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NVENC_RECT"
  },
  {
    "label": "_NV_ENC_PARAMS_FRAME_FIELD_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_PARAMS_FRAME_FIELD_MODE"
  },
  {
    "label": "_NV_ENC_PARAMS_RC_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_PARAMS_RC_MODE"
  },
  {
    "label": "_NV_ENC_MULTI_PASS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_MULTI_PASS"
  },
  {
    "label": "_NV_ENC_STATE_RESTORE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_STATE_RESTORE_TYPE"
  },
  {
    "label": "_NV_ENC_OUTPUT_STATS_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_OUTPUT_STATS_LEVEL"
  },
  {
    "label": "_NV_ENC_EMPHASIS_MAP_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_EMPHASIS_MAP_LEVEL"
  },
  {
    "label": "_NV_ENC_QP_MAP_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_QP_MAP_MODE"
  },
  {
    "label": "_NV_ENC_PIC_STRUCT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_PIC_STRUCT"
  },
  {
    "label": "_NV_ENC_DISPLAY_PIC_STRUCT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_DISPLAY_PIC_STRUCT"
  },
  {
    "label": "_NV_ENC_PIC_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_PIC_TYPE"
  },
  {
    "label": "_NV_ENC_MV_PRECISION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_MV_PRECISION"
  },
  {
    "label": "_NV_ENC_BUFFER_FORMAT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_BUFFER_FORMAT"
  },
  {
    "label": "_NV_ENC_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_LEVEL"
  },
  {
    "label": "_NVENCSTATUS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NVENCSTATUS"
  },
  {
    "label": "_NV_ENC_PIC_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_PIC_FLAGS"
  },
  {
    "label": "_NV_ENC_MEMORY_HEAP",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_MEMORY_HEAP"
  },
  {
    "label": "_NV_ENC_BFRAME_REF_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_BFRAME_REF_MODE"
  },
  {
    "label": "_NV_ENC_H264_ENTROPY_CODING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_H264_ENTROPY_CODING_MODE"
  },
  {
    "label": "_NV_ENC_H264_BDIRECT_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_H264_BDIRECT_MODE"
  },
  {
    "label": "_NV_ENC_H264_FMO_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_H264_FMO_MODE"
  },
  {
    "label": "_NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE"
  },
  {
    "label": "_NV_ENC_STEREO_PACKING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_STEREO_PACKING_MODE"
  },
  {
    "label": "_NV_ENC_INPUT_RESOURCE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_INPUT_RESOURCE_TYPE"
  },
  {
    "label": "_NV_ENC_BUFFER_USAGE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_BUFFER_USAGE"
  },
  {
    "label": "_NV_ENC_DEVICE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_DEVICE_TYPE"
  },
  {
    "label": "_NV_ENC_NUM_REF_FRAMES",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_NUM_REF_FRAMES"
  },
  {
    "label": "_NV_ENC_CAPS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_CAPS"
  },
  {
    "label": "_NV_ENC_HEVC_CUSIZE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_HEVC_CUSIZE"
  },
  {
    "label": "_NV_ENC_AV1_PART_SIZE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_AV1_PART_SIZE"
  },
  {
    "label": "_NV_ENC_VUI_VIDEO_FORMAT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_VUI_VIDEO_FORMAT"
  },
  {
    "label": "_NV_ENC_VUI_COLOR_PRIMARIES",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_VUI_COLOR_PRIMARIES"
  },
  {
    "label": "_NV_ENC_VUI_TRANSFER_CHARACTERISTIC",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_VUI_TRANSFER_CHARACTERISTIC"
  },
  {
    "label": "_NV_ENC_VUI_MATRIX_COEFFS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_VUI_MATRIX_COEFFS"
  },
  {
    "label": "_NV_ENC_CAPS_PARAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CAPS_PARAM"
  },
  {
    "label": "_NV_ENC_RESTORE_ENCODER_STATE_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_RESTORE_ENCODER_STATE_PARAMS"
  },
  {
    "label": "_NV_ENC_OUTPUT_STATS_BLOCK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_OUTPUT_STATS_BLOCK"
  },
  {
    "label": "_NV_ENC_OUTPUT_STATS_ROW",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_OUTPUT_STATS_ROW"
  },
  {
    "label": "_NV_ENC_ENCODE_OUT_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_ENCODE_OUT_PARAMS"
  },
  {
    "label": "_NV_ENC_LOOKAHEAD_PIC_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_LOOKAHEAD_PIC_PARAMS"
  },
  {
    "label": "_NV_ENC_CREATE_INPUT_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CREATE_INPUT_BUFFER"
  },
  {
    "label": "_NV_ENC_CREATE_BITSTREAM_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CREATE_BITSTREAM_BUFFER"
  },
  {
    "label": "_NV_ENC_MVECTOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_MVECTOR"
  },
  {
    "label": "_NV_ENC_H264_MV_DATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_H264_MV_DATA"
  },
  {
    "label": "_NV_ENC_HEVC_MV_DATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_HEVC_MV_DATA"
  },
  {
    "label": "_NV_ENC_CREATE_MV_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CREATE_MV_BUFFER"
  },
  {
    "label": "_NV_ENC_QP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_QP"
  },
  {
    "label": "_NV_ENC_RC_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_RC_PARAMS"
  },
  {
    "label": "_NV_ENC_CLOCK_TIMESTAMP_SET",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CLOCK_TIMESTAMP_SET"
  },
  {
    "label": "_NV_ENC_TIME_CODE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_TIME_CODE"
  },
  {
    "label": "_NV_ENC_CONFIG_H264_VUI_PARAMETERS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_H264_VUI_PARAMETERS"
  },
  {
    "label": "_NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE"
  },
  {
    "label": "_NVENC_EXTERNAL_ME_HINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NVENC_EXTERNAL_ME_HINT"
  },
  {
    "label": "_NVENC_EXTERNAL_ME_SB_HINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NVENC_EXTERNAL_ME_SB_HINT"
  },
  {
    "label": "_NV_ENC_CONFIG_H264",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_H264"
  },
  {
    "label": "_NV_ENC_CONFIG_HEVC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_HEVC"
  },
  {
    "label": "_NV_ENC_FILM_GRAIN_PARAMS_AV1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_FILM_GRAIN_PARAMS_AV1"
  },
  {
    "label": "_NV_ENC_CONFIG_AV1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_AV1"
  },
  {
    "label": "_NV_ENC_CONFIG_H264_MEONLY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_H264_MEONLY"
  },
  {
    "label": "_NV_ENC_CONFIG_HEVC_MEONLY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG_HEVC_MEONLY"
  },
  {
    "label": "_NV_ENC_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_CONFIG"
  },
  {
    "label": "NV_ENC_TUNING_INFO",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NV_ENC_TUNING_INFO"
  },
  {
    "label": "_NV_ENC_SPLIT_ENCODE_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NV_ENC_SPLIT_ENCODE_MODE"
  },
  {
    "label": "_NV_ENC_INITIALIZE_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_INITIALIZE_PARAMS"
  },
  {
    "label": "_NV_ENC_RECONFIGURE_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_RECONFIGURE_PARAMS"
  },
  {
    "label": "_NV_ENC_PRESET_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PRESET_CONFIG"
  },
  {
    "label": "_NV_ENC_PIC_PARAMS_MVC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PIC_PARAMS_MVC"
  },
  {
    "label": "_NV_ENC_SEI_PAYLOAD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_SEI_PAYLOAD"
  },
  {
    "label": "_NV_ENC_PIC_PARAMS_H264",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PIC_PARAMS_H264"
  },
  {
    "label": "_NV_ENC_PIC_PARAMS_HEVC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PIC_PARAMS_HEVC"
  },
  {
    "label": "_NV_ENC_PIC_PARAMS_AV1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PIC_PARAMS_AV1"
  },
  {
    "label": "_NV_ENC_PIC_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_PIC_PARAMS"
  },
  {
    "label": "_NV_ENC_MEONLY_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_MEONLY_PARAMS"
  },
  {
    "label": "_NV_ENC_LOCK_BITSTREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_LOCK_BITSTREAM"
  },
  {
    "label": "_NV_ENC_LOCK_INPUT_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_LOCK_INPUT_BUFFER"
  },
  {
    "label": "_NV_ENC_MAP_INPUT_RESOURCE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_MAP_INPUT_RESOURCE"
  },
  {
    "label": "_NV_ENC_INPUT_RESOURCE_OPENGL_TEX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_INPUT_RESOURCE_OPENGL_TEX"
  },
  {
    "label": "_NV_ENC_FENCE_POINT_D3D12",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_FENCE_POINT_D3D12"
  },
  {
    "label": "_NV_ENC_INPUT_RESOURCE_D3D12",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_INPUT_RESOURCE_D3D12"
  },
  {
    "label": "_NV_ENC_OUTPUT_RESOURCE_D3D12",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_OUTPUT_RESOURCE_D3D12"
  },
  {
    "label": "_NV_ENC_REGISTER_RESOURCE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_REGISTER_RESOURCE"
  },
  {
    "label": "_NV_ENC_STAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_STAT"
  },
  {
    "label": "_NV_ENC_SEQUENCE_PARAM_PAYLOAD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_SEQUENCE_PARAM_PAYLOAD"
  },
  {
    "label": "_NV_ENC_EVENT_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_EVENT_PARAMS"
  },
  {
    "label": "_NV_ENC_OPEN_ENCODE_SESSIONEX_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENC_OPEN_ENCODE_SESSIONEX_PARAMS"
  },
  {
    "label": "_NV_ENCODE_API_FUNCTION_LIST",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_ENCODE_API_FUNCTION_LIST"
  },
  {
    "label": "NVENCAPI_VERSION()",
    "kind": "Method",
    "detail": "Function (# ifndef _NV_ENCODEAPI_H_ # define _NV_ENCODEAPI_H_ # include<stdlib . h> # ifdef _WIN32 # include<windows . h> # endif # ifdef _MSC_VER # ifndef _STDINT typedef __int32 int32_t ; typedef unsigned __int32 uint32_t ; typedef __int64 int64_t ; typedef unsigned __int64 uint64_t ; typedef signed char int8_t ; typedef unsigned char uint8_t ; typedef short int16_t ; typedef unsigned short uint16_t ; # endif # else # include<stdint . h> # endif # ifdef __cplusplus \" C \" { # endif # ifdef _WIN32 # define NVENCAPI __stdcall typedef RECT NVENC_RECT ; # else # define NVENCAPI # ifndef GUID_DEFINED # define GUID_DEFINED typedef struct _GUID { uint32_t Data1 ; uint16_t Data2 ; uint16_t Data3 ; uint8_t Data4 [ 8 ] ; } GUID,* LPGUID ; # endif typedef struct _NVENC_RECT { uint32_t left ; uint32_t top ; uint32_t right ; uint32_t bottom ; } NVENC_RECT ; # endif typedef void* NV_ENC_INPUT_PTR ; typedef void* NV_ENC_OUTPUT_PTR ; typedef void* NV_ENC_REGISTERED_PTR ; typedef void* NV_ENC_CUSTREAM_PTR ; # define NVENCAPI_MAJOR_VERSION 1 2 # define NVENCAPI_MINOR_VERSION 1 # define)",
    "insertText": "NVENCAPI_VERSION(NVENCAPI_MAJOR_VERSION | (NVENCAPI_MINOR_VERSION << 24)) #define NVENCAPI_STRUCT_VERSION(ver) ((uint32_t)NVENCAPI_VERSION | ((ver)<<16) | (0x7 << 28)) #define NVENC_INFINITE_GOPLENGTH 0xffffffff #define NV_MAX_SEQ_HDR_LEN (512) #ifdef __GNUC__ #define NV_ENC_DEPRECATED __attribute__ ((deprecated(\"WILL BE REMOVED IN A FUTURE VIDEO CODEC SDK VERSION\"))) #elif defined(_MSC_VER) #define NV_ENC_DEPRECATED __declspec(deprecated(\"WILL BE REMOVED IN A FUTURE VIDEO CODEC SDK VERSION\"))"
  },
  {
    "label": "NVENCAPI_STRUCT_VERSION()",
    "kind": "Method",
    "detail": "Function (0 x6bc82762,0 x4e63,0 x4ca4,{ 0 xaa,0 x85,0 x1e,0 x50,0 xf3,0 x21,0 xf6,0 xbf } } ; const GUID NV_ENC_CODEC_HEVC_GUID = { 0 x790cdc88,0 x4522,0 x4d7b,{ 0 x94,0 x25,0 xbd,0 xa9,0 x97,0 x5f,0 x76,0 x3 } } ; const GUID NV_ENC_CODEC_AV1_GUID = { 0 x0a352289,0 x0aa7,0 x4759,{ 0 x86,0 x2d,0 x5d,0 x15,0 xcd,0 x16,0 xd2,0 x54 } } ; const GUID NV_ENC_CODEC_PROFILE_AUTOSELECT_GUID = { 0 xbfd6f8e7,0 x233c,0 x4341,{ 0 x8b,0 x3e,0 x48,0 x18,0 x52,0 x38,0 x3,0 xf4 } } ; const GUID NV_ENC_H264_PROFILE_BASELINE_GUID = { 0 x727bcaa,0 x78c4,0 x4c83,{ 0 x8c,0 x2f,0 xef,0 x3d,0 xff,0 x26,0 x7c,0 x6a } } ; const GUID NV_ENC_H264_PROFILE_MAIN_GUID = { 0 x60b5c1d4,0 x67fe,0 x4790,{ 0 x94,0 xd5,0 xc4,0 x72,0 x6d,0 x7b,0 x6e,0 x6d } } ; const GUID NV_ENC_H264_PROFILE_HIGH_GUID = { 0 xe7cbc309,0 x4f7a,0 x4b89,{ 0 xaf,0 x2a,0 xd5,0 x37,0 xc9,0 x2b,0 xe3,0 x10 } } ; const GUID NV_ENC_H264_PROFILE_HIGH_444_GUID = { 0 x7ac663cb,0 xa598,0 x4960,{ 0 xb8,0 x44,0 x33,0 x9b,0 x26,0 x1a,0 x7d,0 x52 } } ; const GUID NV_ENC_H264_PROFILE_STEREO_GUID = { 0 x40847bf5,0 x33f7,0 x4601,{ 0 x90,0 x84,0 xe8,0 xfe,0 x3c,0 x1d,0 xb8,0 xb7 } } ; const GUID NV_ENC_H264_PROFILE_PROGRESSIVE_HIGH_GUID = { 0 xb405afac,0 xf32b,0 x417b,{ 0 x89,0 xc4,0 x9a,0 xbe,0 xed,0 x3e,0 x59,0 x78 } } ; const GUID NV_ENC_H264_PROFILE_CONSTRAINED_HIGH_GUID = { 0 xaec1bd87,0 xe85b,0 x48f2,{ 0 x84,0 xc3,0 x98,0 xbc,0 xa6,0 x28,0 x50,0 x72 } } ; const GUID NV_ENC_HEVC_PROFILE_MAIN_GUID = { 0 xb514c39a,0 xb55b,0 x40fa,{ 0 x87,0 x8f,0 xf1,0 x25,0 x3b,0 x4d,0 xfd,0 xec } } ; const GUID NV_ENC_HEVC_PROFILE_MAIN10_GUID = { 0 xfa4d2b6c,0 x3a5b,0 x411a,{ 0 x80,0 x18,0 x0a,0 x3f,0 x5e,0 x3c,0 x9b,0 xe5 } } ; const GUID NV_ENC_HEVC_PROFILE_FREXT_GUID = { 0 x51ec32b5,0 x1b4c,0 x453c,{ 0 x9c,0 xbd,0 xb6,0 x16,0 xbd,0 x62,0 x13,0 x41 } } ; const GUID NV_ENC_AV1_PROFILE_MAIN_GUID = { 0 x5f2a39f5,0 xf14e,0 x4f95,{ 0 x9a,0 x9e,0 xb7,0 x6d,0 x56,0 x8f,0 xcf,0 x97 } } ; const GUID NV_ENC_PRESET_P1_GUID = { 0 xfc0a8d3e,0 x45f8,0 x4cf8,{ 0 x80,0 xc7,0 x29,0 x88,0 x71,0 x59,0 xe,0 xbf } } ; const GUID NV_ENC_PRESET_P2_GUID = { 0 xf581cfb8,0 x88d6,0 x4381,{ 0 x93,0 xf0,0 xdf,0 x13,0 xf9,0 xc2,0 x7d,0 xab } } ; const GUID NV_ENC_PRESET_P3_GUID = { 0 x36850110,0 x3a07,0 x441f,{ 0 x94,0 xd5,0 x36,0 x70,0 x63,0 x1f,0 x91,0 xf6 } } ; const GUID NV_ENC_PRESET_P4_GUID = { 0 x90a7b826,0 xdf06,0 x4862,{ 0 xb9,0 xd2,0 xcd,0 x6d,0 x73,0 xa0,0 x86,0 x81 } } ; const GUID NV_ENC_PRESET_P5_GUID = { 0 x21c6e6b4,0 x297a,0 x4cba,{ 0 x99,0 x8f,0 xb6,0 xcb,0 xde,0 x72,0 xad,0 xe3 } } ; const GUID NV_ENC_PRESET_P6_GUID = { 0 x8e75c279,0 x6299,0 x4ab6,{ 0 x83,0 x2,0 xb,0 x21,0 x5a,0 x33,0 x5c,0 xf5 } } ; const GUID NV_ENC_PRESET_P7_GUID = { 0 x84848c12,0 x6f71,0 x4c13,{ 0 x93,0 x1b,0 x53,0 xe2,0 x83,0 xf5,0 x79,0 x74 } } ; typedef enum _NV_ENC_PARAMS_FRAME_FIELD_MODE { NV_ENC_PARAMS_FRAME_FIELD_MODE_FRAME = 0 x01,NV_ENC_PARAMS_FRAME_FIELD_MODE_FIELD = 0 x02,NV_ENC_PARAMS_FRAME_FIELD_MODE_MBAFF = 0 x03 } NV_ENC_PARAMS_FRAME_FIELD_MODE ; typedef enum _NV_ENC_PARAMS_RC_MODE { NV_ENC_PARAMS_RC_CONSTQP = 0 x0,NV_ENC_PARAMS_RC_VBR = 0 x1,NV_ENC_PARAMS_RC_CBR = 0 x2,} NV_ENC_PARAMS_RC_MODE ; typedef enum _NV_ENC_MULTI_PASS { NV_ENC_MULTI_PASS_DISABLED = 0 x0,NV_ENC_TWO_PASS_QUARTER_RESOLUTION = 0 x1,NV_ENC_TWO_PASS_FULL_RESOLUTION = 0 x2,} NV_ENC_MULTI_PASS ; typedef enum _NV_ENC_STATE_RESTORE_TYPE { NV_ENC_STATE_RESTORE_FULL = 0 x01,NV_ENC_STATE_RESTORE_RATE_CONTROL = 0 x02,NV_ENC_STATE_RESTORE_ENCODE = 0 x03,} NV_ENC_STATE_RESTORE_TYPE ; typedef enum _NV_ENC_OUTPUT_STATS_LEVEL { NV_ENC_OUTPUT_STATS_NONE = 0,NV_ENC_OUTPUT_STATS_BLOCK_LEVEL = 1,NV_ENC_OUTPUT_STATS_ROW_LEVEL = 2,} NV_ENC_OUTPUT_STATS_LEVEL ; typedef enum _NV_ENC_EMPHASIS_MAP_LEVEL { NV_ENC_EMPHASIS_MAP_LEVEL_0 = 0 x0,NV_ENC_EMPHASIS_MAP_LEVEL_1 = 0 x1,NV_ENC_EMPHASIS_MAP_LEVEL_2 = 0 x2,NV_ENC_EMPHASIS_MAP_LEVEL_3 = 0 x3,NV_ENC_EMPHASIS_MAP_LEVEL_4 = 0 x4,NV_ENC_EMPHASIS_MAP_LEVEL_5 = 0 x5 } NV_ENC_EMPHASIS_MAP_LEVEL ; typedef enum _NV_ENC_QP_MAP_MODE { NV_ENC_QP_MAP_DISABLED = 0 x0,NV_ENC_QP_MAP_EMPHASIS = 0 x1,NV_ENC_QP_MAP_DELTA = 0 x2,NV_ENC_QP_MAP = 0 x3,} NV_ENC_QP_MAP_MODE ; typedef enum _NV_ENC_PIC_STRUCT { NV_ENC_PIC_STRUCT_FRAME = 0 x01,NV_ENC_PIC_STRUCT_FIELD_TOP_BOTTOM = 0 x02,NV_ENC_PIC_STRUCT_FIELD_BOTTOM_TOP = 0 x03 } NV_ENC_PIC_STRUCT ; typedef enum _NV_ENC_DISPLAY_PIC_STRUCT { NV_ENC_PIC_STRUCT_DISPLAY_FRAME = 0 x00,NV_ENC_PIC_STRUCT_DISPLAY_FIELD_TOP_BOTTOM = 0 x01,NV_ENC_PIC_STRUCT_DISPLAY_FIELD_BOTTOM_TOP = 0 x02,NV_ENC_PIC_STRUCT_DISPLAY_FRAME_DOUBLING = 0 x03,NV_ENC_PIC_STRUCT_DISPLAY_FRAME_TRIPLING = 0 x04 } NV_ENC_DISPLAY_PIC_STRUCT ; typedef enum _NV_ENC_PIC_TYPE { NV_ENC_PIC_TYPE_P = 0 x0,NV_ENC_PIC_TYPE_B = 0 x01,NV_ENC_PIC_TYPE_I = 0 x02,NV_ENC_PIC_TYPE_IDR = 0 x03,NV_ENC_PIC_TYPE_BI = 0 x04,NV_ENC_PIC_TYPE_SKIPPED = 0 x05,NV_ENC_PIC_TYPE_INTRA_REFRESH = 0 x06,NV_ENC_PIC_TYPE_NONREF_P = 0 x07,NV_ENC_PIC_TYPE_UNKNOWN = 0 xFF } NV_ENC_PIC_TYPE ; typedef enum _NV_ENC_MV_PRECISION { NV_ENC_MV_PRECISION_DEFAULT = 0 x0,NV_ENC_MV_PRECISION_FULL_PEL = 0 x01,NV_ENC_MV_PRECISION_HALF_PEL = 0 x02,NV_ENC_MV_PRECISION_QUARTER_PEL = 0 x03 } NV_ENC_MV_PRECISION ; typedef enum _NV_ENC_BUFFER_FORMAT { NV_ENC_BUFFER_FORMAT_UNDEFINED = 0 x00000000,NV_ENC_BUFFER_FORMAT_NV12 = 0 x00000001,NV_ENC_BUFFER_FORMAT_YV12 = 0 x00000010,NV_ENC_BUFFER_FORMAT_IYUV = 0 x00000100,NV_ENC_BUFFER_FORMAT_YUV444 = 0 x00001000,NV_ENC_BUFFER_FORMAT_YUV420_10BIT = 0 x00010000,NV_ENC_BUFFER_FORMAT_YUV444_10BIT = 0 x00100000,NV_ENC_BUFFER_FORMAT_ARGB = 0 x01000000,NV_ENC_BUFFER_FORMAT_ARGB10 = 0 x02000000,NV_ENC_BUFFER_FORMAT_AYUV = 0 x04000000,NV_ENC_BUFFER_FORMAT_ABGR = 0 x10000000,NV_ENC_BUFFER_FORMAT_ABGR10 = 0 x20000000,NV_ENC_BUFFER_FORMAT_U8 = 0 x40000000,} NV_ENC_BUFFER_FORMAT ; # define NV_ENC_BUFFER_FORMAT_NV12_PL NV_ENC_BUFFER_FORMAT_NV12 # define NV_ENC_BUFFER_FORMAT_YV12_PL NV_ENC_BUFFER_FORMAT_YV12 # define NV_ENC_BUFFER_FORMAT_IYUV_PL NV_ENC_BUFFER_FORMAT_IYUV # define NV_ENC_BUFFER_FORMAT_YUV444_PL NV_ENC_BUFFER_FORMAT_YUV444 typedef enum _NV_ENC_LEVEL { NV_ENC_LEVEL_AUTOSELECT = 0,NV_ENC_LEVEL_H264_1 = 1 0,NV_ENC_LEVEL_H264_1b = 9,NV_ENC_LEVEL_H264_11 = 1 1,NV_ENC_LEVEL_H264_12 = 1 2,NV_ENC_LEVEL_H264_13 = 1 3,NV_ENC_LEVEL_H264_2 = 2 0,NV_ENC_LEVEL_H264_21 = 2 1,NV_ENC_LEVEL_H264_22 = 2 2,NV_ENC_LEVEL_H264_3 = 3 0,NV_ENC_LEVEL_H264_31 = 3 1,NV_ENC_LEVEL_H264_32 = 3 2,NV_ENC_LEVEL_H264_4 = 4 0,NV_ENC_LEVEL_H264_41 = 4 1,NV_ENC_LEVEL_H264_42 = 4 2,NV_ENC_LEVEL_H264_5 = 5 0,NV_ENC_LEVEL_H264_51 = 5 1,NV_ENC_LEVEL_H264_52 = 5 2,NV_ENC_LEVEL_H264_60 = 6 0,NV_ENC_LEVEL_H264_61 = 6 1,NV_ENC_LEVEL_H264_62 = 6 2,NV_ENC_LEVEL_HEVC_1 = 3 0,NV_ENC_LEVEL_HEVC_2 = 6 0,NV_ENC_LEVEL_HEVC_21 = 6 3,NV_ENC_LEVEL_HEVC_3 = 9 0,NV_ENC_LEVEL_HEVC_31 = 9 3,NV_ENC_LEVEL_HEVC_4 = 1 2 0,NV_ENC_LEVEL_HEVC_41 = 1 2 3,NV_ENC_LEVEL_HEVC_5 = 1 5 0,NV_ENC_LEVEL_HEVC_51 = 1 5 3,NV_ENC_LEVEL_HEVC_52 = 1 5 6,NV_ENC_LEVEL_HEVC_6 = 1 8 0,NV_ENC_LEVEL_HEVC_61 = 1 8 3,NV_ENC_LEVEL_HEVC_62 = 1 8 6,NV_ENC_TIER_HEVC_MAIN = 0,NV_ENC_TIER_HEVC_HIGH = 1,NV_ENC_LEVEL_AV1_2 = 0,NV_ENC_LEVEL_AV1_21 = 1,NV_ENC_LEVEL_AV1_22 = 2,NV_ENC_LEVEL_AV1_23 = 3,NV_ENC_LEVEL_AV1_3 = 4,NV_ENC_LEVEL_AV1_31 = 5,NV_ENC_LEVEL_AV1_32 = 6,NV_ENC_LEVEL_AV1_33 = 7,NV_ENC_LEVEL_AV1_4 = 8,NV_ENC_LEVEL_AV1_41 = 9,NV_ENC_LEVEL_AV1_42 = 1 0,NV_ENC_LEVEL_AV1_43 = 1 1,NV_ENC_LEVEL_AV1_5 = 1 2,NV_ENC_LEVEL_AV1_51 = 1 3,NV_ENC_LEVEL_AV1_52 = 1 4,NV_ENC_LEVEL_AV1_53 = 1 5,NV_ENC_LEVEL_AV1_6 = 1 6,NV_ENC_LEVEL_AV1_61 = 1 7,NV_ENC_LEVEL_AV1_62 = 1 8,NV_ENC_LEVEL_AV1_63 = 1 9,NV_ENC_LEVEL_AV1_7 = 2 0,NV_ENC_LEVEL_AV1_71 = 2 1,NV_ENC_LEVEL_AV1_72 = 2 2,NV_ENC_LEVEL_AV1_73 = 2 3,NV_ENC_LEVEL_AV1_AUTOSELECT,NV_ENC_TIER_AV1_0 = 0,NV_ENC_TIER_AV1_1 = 1 } NV_ENC_LEVEL ; typedef enum _NVENCSTATUS { NV_ENC_SUCCESS,NV_ENC_ERR_NO_ENCODE_DEVICE,NV_ENC_ERR_UNSUPPORTED_DEVICE,NV_ENC_ERR_INVALID_ENCODERDEVICE,NV_ENC_ERR_INVALID_DEVICE,NV_ENC_ERR_DEVICE_NOT_EXIST,NV_ENC_ERR_INVALID_PTR,NV_ENC_ERR_INVALID_EVENT,NV_ENC_ERR_INVALID_PARAM,NV_ENC_ERR_INVALID_CALL,NV_ENC_ERR_OUT_OF_MEMORY,NV_ENC_ERR_ENCODER_NOT_INITIALIZED,NV_ENC_ERR_UNSUPPORTED_PARAM,NV_ENC_ERR_LOCK_BUSY,NV_ENC_ERR_NOT_ENOUGH_BUFFER,NV_ENC_ERR_INVALID_VERSION,NV_ENC_ERR_MAP_FAILED,NV_ENC_ERR_NEED_MORE_INPUT,NV_ENC_ERR_ENCODER_BUSY,NV_ENC_ERR_EVENT_NOT_REGISTERD,NV_ENC_ERR_GENERIC,NV_ENC_ERR_INCOMPATIBLE_CLIENT_KEY,NV_ENC_ERR_UNIMPLEMENTED,NV_ENC_ERR_RESOURCE_REGISTER_FAILED,NV_ENC_ERR_RESOURCE_NOT_REGISTERED,NV_ENC_ERR_RESOURCE_NOT_MAPPED,NV_ENC_ERR_NEED_MORE_OUTPUT,} NVENCSTATUS ; typedef enum _NV_ENC_PIC_FLAGS { NV_ENC_PIC_FLAG_FORCEINTRA = 0 x1,NV_ENC_PIC_FLAG_FORCEIDR = 0 x2,NV_ENC_PIC_FLAG_OUTPUT_SPSPPS = 0 x4,NV_ENC_PIC_FLAG_EOS = 0 x8,NV_ENC_PIC_FLAG_DISABLE_ENC_STATE_ADVANCE = 0 x10,NV_ENC_PIC_FLAG_OUTPUT_RECON_FRAME = 0 x20,} NV_ENC_PIC_FLAGS ; typedef enum _NV_ENC_MEMORY_HEAP { NV_ENC_MEMORY_HEAP_AUTOSELECT = 0,NV_ENC_MEMORY_HEAP_VID = 1,NV_ENC_MEMORY_HEAP_SYSMEM_CACHED = 2,NV_ENC_MEMORY_HEAP_SYSMEM_UNCACHED = 3 } NV_ENC_MEMORY_HEAP ; typedef enum _NV_ENC_BFRAME_REF_MODE { NV_ENC_BFRAME_REF_MODE_DISABLED = 0 x0,NV_ENC_BFRAME_REF_MODE_EACH = 0 x1,NV_ENC_BFRAME_REF_MODE_MIDDLE = 0 x2,} NV_ENC_BFRAME_REF_MODE ; typedef enum _NV_ENC_H264_ENTROPY_CODING_MODE { NV_ENC_H264_ENTROPY_CODING_MODE_AUTOSELECT = 0 x0,NV_ENC_H264_ENTROPY_CODING_MODE_CABAC = 0 x1,NV_ENC_H264_ENTROPY_CODING_MODE_CAVLC = 0 x2 } NV_ENC_H264_ENTROPY_CODING_MODE ; typedef enum _NV_ENC_H264_BDIRECT_MODE { NV_ENC_H264_BDIRECT_MODE_AUTOSELECT = 0 x0,NV_ENC_H264_BDIRECT_MODE_DISABLE = 0 x1,NV_ENC_H264_BDIRECT_MODE_TEMPORAL = 0 x2,NV_ENC_H264_BDIRECT_MODE_SPATIAL = 0 x3 } NV_ENC_H264_BDIRECT_MODE ; typedef enum _NV_ENC_H264_FMO_MODE { NV_ENC_H264_FMO_AUTOSELECT = 0 x0,NV_ENC_H264_FMO_ENABLE = 0 x1,NV_ENC_H264_FMO_DISABLE = 0 x2,} NV_ENC_H264_FMO_MODE ; typedef enum _NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE { NV_ENC_H264_ADAPTIVE_TRANSFORM_AUTOSELECT = 0 x0,NV_ENC_H264_ADAPTIVE_TRANSFORM_DISABLE = 0 x1,NV_ENC_H264_ADAPTIVE_TRANSFORM_ENABLE = 0 x2,} NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE ; typedef enum _NV_ENC_STEREO_PACKING_MODE { NV_ENC_STEREO_PACKING_MODE_NONE = 0 x0,NV_ENC_STEREO_PACKING_MODE_CHECKERBOARD = 0 x1,NV_ENC_STEREO_PACKING_MODE_COLINTERLEAVE = 0 x2,NV_ENC_STEREO_PACKING_MODE_ROWINTERLEAVE = 0 x3,NV_ENC_STEREO_PACKING_MODE_SIDEBYSIDE = 0 x4,NV_ENC_STEREO_PACKING_MODE_TOPBOTTOM = 0 x5,NV_ENC_STEREO_PACKING_MODE_FRAMESEQ = 0 x6 } NV_ENC_STEREO_PACKING_MODE ; typedef enum _NV_ENC_INPUT_RESOURCE_TYPE { NV_ENC_INPUT_RESOURCE_TYPE_DIRECTX = 0 x0,NV_ENC_INPUT_RESOURCE_TYPE_CUDADEVICEPTR = 0 x1,NV_ENC_INPUT_RESOURCE_TYPE_CUDAARRAY = 0 x2,NV_ENC_INPUT_RESOURCE_TYPE_OPENGL_TEX = 0 x3 } NV_ENC_INPUT_RESOURCE_TYPE ; typedef enum _NV_ENC_BUFFER_USAGE { NV_ENC_INPUT_IMAGE = 0 x0,NV_ENC_OUTPUT_MOTION_VECTOR = 0 x1,NV_ENC_OUTPUT_BITSTREAM = 0 x2,NV_ENC_OUTPUT_RECON = 0 x4,} NV_ENC_BUFFER_USAGE ; typedef enum _NV_ENC_DEVICE_TYPE { NV_ENC_DEVICE_TYPE_DIRECTX = 0 x0,NV_ENC_DEVICE_TYPE_CUDA = 0 x1,NV_ENC_DEVICE_TYPE_OPENGL = 0 x2 } NV_ENC_DEVICE_TYPE ; typedef enum _NV_ENC_NUM_REF_FRAMES { NV_ENC_NUM_REF_FRAMES_AUTOSELECT = 0 x0,NV_ENC_NUM_REF_FRAMES_1 = 0 x1,NV_ENC_NUM_REF_FRAMES_2 = 0 x2,NV_ENC_NUM_REF_FRAMES_3 = 0 x3,NV_ENC_NUM_REF_FRAMES_4 = 0 x4,NV_ENC_NUM_REF_FRAMES_5 = 0 x5,NV_ENC_NUM_REF_FRAMES_6 = 0 x6,NV_ENC_NUM_REF_FRAMES_7 = 0 x7 } NV_ENC_NUM_REF_FRAMES ; typedef enum _NV_ENC_CAPS { NV_ENC_CAPS_NUM_MAX_BFRAMES,NV_ENC_CAPS_SUPPORTED_RATECONTROL_MODES,NV_ENC_CAPS_SUPPORT_FIELD_ENCODING,NV_ENC_CAPS_SUPPORT_MONOCHROME,NV_ENC_CAPS_SUPPORT_FMO,NV_ENC_CAPS_SUPPORT_QPELMV,NV_ENC_CAPS_SUPPORT_BDIRECT_MODE,NV_ENC_CAPS_SUPPORT_CABAC,NV_ENC_CAPS_SUPPORT_ADAPTIVE_TRANSFORM,NV_ENC_CAPS_SUPPORT_STEREO_MVC,NV_ENC_CAPS_NUM_MAX_TEMPORAL_LAYERS,NV_ENC_CAPS_SUPPORT_HIERARCHICAL_PFRAMES,NV_ENC_CAPS_SUPPORT_HIERARCHICAL_BFRAMES,NV_ENC_CAPS_LEVEL_MAX,NV_ENC_CAPS_LEVEL_MIN,NV_ENC_CAPS_SEPARATE_COLOUR_PLANE,NV_ENC_CAPS_WIDTH_MAX,NV_ENC_CAPS_HEIGHT_MAX,NV_ENC_CAPS_SUPPORT_TEMPORAL_SVC,NV_ENC_CAPS_SUPPORT_DYN_RES_CHANGE,NV_ENC_CAPS_SUPPORT_DYN_BITRATE_CHANGE,NV_ENC_CAPS_SUPPORT_DYN_FORCE_CONSTQP,NV_ENC_CAPS_SUPPORT_DYN_RCMODE_CHANGE,NV_ENC_CAPS_SUPPORT_SUBFRAME_READBACK,NV_ENC_CAPS_SUPPORT_CONSTRAINED_ENCODING,NV_ENC_CAPS_SUPPORT_INTRA_REFRESH,NV_ENC_CAPS_SUPPORT_CUSTOM_VBV_BUF_SIZE,NV_ENC_CAPS_SUPPORT_DYNAMIC_SLICE_MODE,NV_ENC_CAPS_SUPPORT_REF_PIC_INVALIDATION,NV_ENC_CAPS_PREPROC_SUPPORT,NV_ENC_CAPS_ASYNC_ENCODE_SUPPORT,NV_ENC_CAPS_MB_NUM_MAX,NV_ENC_CAPS_MB_PER_SEC_MAX,NV_ENC_CAPS_SUPPORT_YUV444_ENCODE,NV_ENC_CAPS_SUPPORT_LOSSLESS_ENCODE,NV_ENC_CAPS_SUPPORT_SAO,NV_ENC_CAPS_SUPPORT_MEONLY_MODE,NV_ENC_CAPS_SUPPORT_LOOKAHEAD,NV_ENC_CAPS_SUPPORT_TEMPORAL_AQ,NV_ENC_CAPS_SUPPORT_10BIT_ENCODE,NV_ENC_CAPS_NUM_MAX_LTR_FRAMES,NV_ENC_CAPS_SUPPORT_WEIGHTED_PREDICTION,NV_ENC_CAPS_DYNAMIC_QUERY_ENCODER_CAPACITY,NV_ENC_CAPS_SUPPORT_BFRAME_REF_MODE,NV_ENC_CAPS_SUPPORT_EMPHASIS_LEVEL_MAP,NV_ENC_CAPS_WIDTH_MIN,NV_ENC_CAPS_HEIGHT_MIN,NV_ENC_CAPS_SUPPORT_MULTIPLE_REF_FRAMES,NV_ENC_CAPS_SUPPORT_ALPHA_LAYER_ENCODING,NV_ENC_CAPS_NUM_ENCODER_ENGINES,NV_ENC_CAPS_SINGLE_SLICE_INTRA_REFRESH,NV_ENC_CAPS_DISABLE_ENC_STATE_ADVANCE,NV_ENC_CAPS_OUTPUT_RECON_SURFACE,NV_ENC_CAPS_OUTPUT_BLOCK_STATS,NV_ENC_CAPS_OUTPUT_ROW_STATS,NV_ENC_CAPS_EXPOSED_COUNT } NV_ENC_CAPS ; typedef enum _NV_ENC_HEVC_CUSIZE { NV_ENC_HEVC_CUSIZE_AUTOSELECT = 0,NV_ENC_HEVC_CUSIZE_8x8 = 1,NV_ENC_HEVC_CUSIZE_16x16 = 2,NV_ENC_HEVC_CUSIZE_32x32 = 3,NV_ENC_HEVC_CUSIZE_64x64 = 4,} NV_ENC_HEVC_CUSIZE ; typedef enum _NV_ENC_AV1_PART_SIZE { NV_ENC_AV1_PART_SIZE_AUTOSELECT = 0,NV_ENC_AV1_PART_SIZE_4x4 = 1,NV_ENC_AV1_PART_SIZE_8x8 = 2,NV_ENC_AV1_PART_SIZE_16x16 = 3,NV_ENC_AV1_PART_SIZE_32x32 = 4,NV_ENC_AV1_PART_SIZE_64x64 = 5,} NV_ENC_AV1_PART_SIZE ; typedef enum _NV_ENC_VUI_VIDEO_FORMAT { NV_ENC_VUI_VIDEO_FORMAT_COMPONENT = 0,NV_ENC_VUI_VIDEO_FORMAT_PAL = 1,NV_ENC_VUI_VIDEO_FORMAT_NTSC = 2,NV_ENC_VUI_VIDEO_FORMAT_SECAM = 3,NV_ENC_VUI_VIDEO_FORMAT_MAC = 4,NV_ENC_VUI_VIDEO_FORMAT_UNSPECIFIED = 5,} NV_ENC_VUI_VIDEO_FORMAT ; typedef enum _NV_ENC_VUI_COLOR_PRIMARIES { NV_ENC_VUI_COLOR_PRIMARIES_UNDEFINED = 0,NV_ENC_VUI_COLOR_PRIMARIES_BT709 = 1,NV_ENC_VUI_COLOR_PRIMARIES_UNSPECIFIED = 2,NV_ENC_VUI_COLOR_PRIMARIES_RESERVED = 3,NV_ENC_VUI_COLOR_PRIMARIES_BT470M = 4,NV_ENC_VUI_COLOR_PRIMARIES_BT470BG = 5,NV_ENC_VUI_COLOR_PRIMARIES_SMPTE170M = 6,NV_ENC_VUI_COLOR_PRIMARIES_SMPTE240M = 7,NV_ENC_VUI_COLOR_PRIMARIES_FILM = 8,NV_ENC_VUI_COLOR_PRIMARIES_BT2020 = 9,NV_ENC_VUI_COLOR_PRIMARIES_SMPTE428 = 1 0,NV_ENC_VUI_COLOR_PRIMARIES_SMPTE431 = 1 1,NV_ENC_VUI_COLOR_PRIMARIES_SMPTE432 = 1 2,NV_ENC_VUI_COLOR_PRIMARIES_JEDEC_P22 = 2 2,} NV_ENC_VUI_COLOR_PRIMARIES ; typedef enum _NV_ENC_VUI_TRANSFER_CHARACTERISTIC { NV_ENC_VUI_TRANSFER_CHARACTERISTIC_UNDEFINED = 0,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT709 = 1,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_UNSPECIFIED = 2,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_RESERVED = 3,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT470M = 4,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT470BG = 5,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_SMPTE170M = 6,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_SMPTE240M = 7,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_LINEAR = 8,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_LOG = 9,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_LOG_SQRT = 1 0,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_IEC61966_2_4 = 1 1,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT1361_ECG = 1 2,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_SRGB = 1 3,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT2020_10 = 1 4,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_BT2020_12 = 1 5,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_SMPTE2084 = 1 6,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_SMPTE428 = 1 7,NV_ENC_VUI_TRANSFER_CHARACTERISTIC_ARIB_STD_B67 = 1 8,} NV_ENC_VUI_TRANSFER_CHARACTERISTIC ; typedef enum _NV_ENC_VUI_MATRIX_COEFFS { NV_ENC_VUI_MATRIX_COEFFS_RGB = 0,NV_ENC_VUI_MATRIX_COEFFS_BT709 = 1,NV_ENC_VUI_MATRIX_COEFFS_UNSPECIFIED = 2,NV_ENC_VUI_MATRIX_COEFFS_RESERVED = 3,NV_ENC_VUI_MATRIX_COEFFS_FCC = 4,NV_ENC_VUI_MATRIX_COEFFS_BT470BG = 5,NV_ENC_VUI_MATRIX_COEFFS_SMPTE170M = 6,NV_ENC_VUI_MATRIX_COEFFS_SMPTE240M = 7,NV_ENC_VUI_MATRIX_COEFFS_YCGCO = 8,NV_ENC_VUI_MATRIX_COEFFS_BT2020_NCL = 9,NV_ENC_VUI_MATRIX_COEFFS_BT2020_CL = 1 0,NV_ENC_VUI_MATRIX_COEFFS_SMPTE2085 = 1 1,} NV_ENC_VUI_MATRIX_COEFFS ; typedef struct _NV_ENC_CAPS_PARAM { uint32_t version ; NV_ENC_CAPS capsToQuery ; uint32_t reserved [ 6 2 ] ; } NV_ENC_CAPS_PARAM ; # define NV_ENC_CAPS_PARAM_VER)",
    "insertText": "NVENCAPI_STRUCT_VERSION(1)"
  },
  {
    "label": "NV_ENC_CONFIG_VER()",
    "kind": "Method",
    "detail": "Function (uint32_t countingType : 1 ; uint32_t discontinuityFlag : 1 ; uint32_t cntDroppedFrames : 1 ; uint32_t nFrames : 8 ; uint32_t secondsValue : 6 ; uint32_t minutesValue : 6 ; uint32_t hoursValue : 5 ; uint32_t reserved2 : 4 ; uint32_t timeOffset ; } NV_ENC_CLOCK_TIMESTAMP_SET ; typedef struct _NV_ENC_TIME_CODE { NV_ENC_DISPLAY_PIC_STRUCT displayPicStruct ; NV_ENC_CLOCK_TIMESTAMP_SET clockTimestamp [ MAX_NUM_CLOCK_TS ] ; } NV_ENC_TIME_CODE ; typedef struct _NV_ENC_CONFIG_H264_VUI_PARAMETERS { uint32_t overscanInfoPresentFlag ; uint32_t overscanInfo ; uint32_t videoSignalTypePresentFlag ; NV_ENC_VUI_VIDEO_FORMAT videoFormat ; uint32_t videoFullRangeFlag ; uint32_t colourDescriptionPresentFlag ; NV_ENC_VUI_COLOR_PRIMARIES colourPrimaries ; NV_ENC_VUI_TRANSFER_CHARACTERISTIC transferCharacteristics ; NV_ENC_VUI_MATRIX_COEFFS colourMatrix ; uint32_t chromaSampleLocationFlag ; uint32_t chromaSampleLocationTop ; uint32_t chromaSampleLocationBot ; uint32_t bitstreamRestrictionFlag ; uint32_t timingInfoPresentFlag ; uint32_t numUnitInTicks ; uint32_t timeScale ; uint32_t reserved [ 1 2 ] ; } NV_ENC_CONFIG_H264_VUI_PARAMETERS ; typedef NV_ENC_CONFIG_H264_VUI_PARAMETERS NV_ENC_CONFIG_HEVC_VUI_PARAMETERS ; typedef struct _NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE { uint32_t numCandsPerBlk16x16 : 4 ; uint32_t numCandsPerBlk16x8 : 4 ; uint32_t numCandsPerBlk8x16 : 4 ; uint32_t numCandsPerBlk8x8 : 4 ; uint32_t numCandsPerSb : 8 ; uint32_t reserved : 8 ; uint32_t reserved1 [ 3 ] ; } NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE ; typedef struct _NVENC_EXTERNAL_ME_HINT { int32_t mvx : 1 2 ; int32_t mvy : 1 0 ; int32_t refidx : 5 ; int32_t dir : 1 ; int32_t partType : 2 ; int32_t lastofPart : 1 ; int32_t lastOfMB : 1 ; } NVENC_EXTERNAL_ME_HINT ; typedef struct _NVENC_EXTERNAL_ME_SB_HINT { int16_t refidx : 5 ; int16_t direction : 1 ; int16_t bi : 1 ; int16_t partition_type : 3 ; int16_t x8 : 3 ; int16_t last_of_cu : 1 ; int16_t last_of_sb : 1 ; int16_t reserved0 : 1 ; int16_t mvx : 1 4 ; int16_t cu_size : 2 ; int16_t mvy : 1 2 ; int16_t y8 : 3 ; int16_t reserved1 : 1 ; } NVENC_EXTERNAL_ME_SB_HINT ; typedef struct _NV_ENC_CONFIG_H264 { uint32_t enableTemporalSVC : 1 ; uint32_t enableStereoMVC : 1 ; uint32_t hierarchicalPFrames : 1 ; uint32_t hierarchicalBFrames : 1 ; uint32_t outputBufferingPeriodSEI : 1 ; uint32_t outputPictureTimingSEI : 1 ; uint32_t outputAUD : 1 ; uint32_t disableSPSPPS : 1 ; uint32_t outputFramePackingSEI : 1 ; uint32_t outputRecoveryPointSEI : 1 ; uint32_t enableIntraRefresh : 1 ; uint32_t enableConstrainedEncoding : 1 ; uint32_t repeatSPSPPS : 1 ; uint32_t enableVFR : 1 ; uint32_t enableLTR : 1 ; uint32_t qpPrimeYZeroTransformBypassFlag : 1 ; uint32_t useConstrainedIntraPred : 1 ; uint32_t enableFillerDataInsertion : 1 ; uint32_t disableSVCPrefixNalu : 1 ; uint32_t enableScalabilityInfoSEI : 1 ; uint32_t singleSliceIntraRefresh : 1 ; uint32_t enableTimeCode : 1 ; uint32_t reservedBitFields : 1 0 ; uint32_t level ; uint32_t idrPeriod ; uint32_t separateColourPlaneFlag ; uint32_t disableDeblockingFilterIDC ; uint32_t numTemporalLayers ; uint32_t spsId ; uint32_t ppsId ; NV_ENC_H264_ADAPTIVE_TRANSFORM_MODE adaptiveTransformMode ; NV_ENC_H264_FMO_MODE fmoMode ; NV_ENC_H264_BDIRECT_MODE bdirectMode ; NV_ENC_H264_ENTROPY_CODING_MODE entropyCodingMode ; NV_ENC_STEREO_PACKING_MODE stereoMode ; uint32_t intraRefreshPeriod ; uint32_t intraRefreshCnt ; uint32_t maxNumRefFrames ; uint32_t sliceMode ; uint32_t sliceModeData ; NV_ENC_CONFIG_H264_VUI_PARAMETERS h264VUIParameters ; uint32_t ltrNumFrames ; uint32_t ltrTrustMode ; uint32_t chromaFormatIDC ; uint32_t maxTemporalLayers ; NV_ENC_BFRAME_REF_MODE useBFramesAsRef ; NV_ENC_NUM_REF_FRAMES numRefL0 ; NV_ENC_NUM_REF_FRAMES numRefL1 ; uint32_t reserved1 [ 2 6 7 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_CONFIG_H264 ; typedef struct _NV_ENC_CONFIG_HEVC { uint32_t level ; uint32_t tier ; NV_ENC_HEVC_CUSIZE minCUSize ; NV_ENC_HEVC_CUSIZE maxCUSize ; uint32_t useConstrainedIntraPred : 1 ; uint32_t disableDeblockAcrossSliceBoundary : 1 ; uint32_t outputBufferingPeriodSEI : 1 ; uint32_t outputPictureTimingSEI : 1 ; uint32_t outputAUD : 1 ; uint32_t enableLTR : 1 ; uint32_t disableSPSPPS : 1 ; uint32_t repeatSPSPPS : 1 ; uint32_t enableIntraRefresh : 1 ; uint32_t chromaFormatIDC : 2 ; uint32_t pixelBitDepthMinus8 : 3 ; uint32_t enableFillerDataInsertion : 1 ; uint32_t enableConstrainedEncoding : 1 ; uint32_t enableAlphaLayerEncoding : 1 ; uint32_t singleSliceIntraRefresh : 1 ; uint32_t outputRecoveryPointSEI : 1 ; uint32_t outputTimeCodeSEI : 1 ; uint32_t reserved : 1 2 ; uint32_t idrPeriod ; uint32_t intraRefreshPeriod ; uint32_t intraRefreshCnt ; uint32_t maxNumRefFramesInDPB ; uint32_t ltrNumFrames ; uint32_t vpsId ; uint32_t spsId ; uint32_t ppsId ; uint32_t sliceMode ; uint32_t sliceModeData ; uint32_t maxTemporalLayersMinus1 ; NV_ENC_CONFIG_HEVC_VUI_PARAMETERS hevcVUIParameters ; uint32_t ltrTrustMode ; NV_ENC_BFRAME_REF_MODE useBFramesAsRef ; NV_ENC_NUM_REF_FRAMES numRefL0 ; NV_ENC_NUM_REF_FRAMES numRefL1 ; uint32_t reserved1 [ 2 1 4 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_CONFIG_HEVC ; # define NV_MAX_TILE_COLS_AV1 6 4 # define NV_MAX_TILE_ROWS_AV1 6 4 typedef struct _NV_ENC_FILM_GRAIN_PARAMS_AV1 { uint32_t applyGrain : 1 ; uint32_t chromaScalingFromLuma : 1 ; uint32_t overlapFlag : 1 ; uint32_t clipToRestrictedRange : 1 ; uint32_t grainScalingMinus8 : 2 ; uint32_t arCoeffLag : 2 ; uint32_t numYPoints : 4 ; uint32_t numCbPoints : 4 ; uint32_t numCrPoints : 4 ; uint32_t arCoeffShiftMinus6 : 2 ; uint32_t grainScaleShift : 2 ; uint32_t reserved1 : 8 ; uint8_t pointYValue [ 1 4 ] ; uint8_t pointYScaling [ 1 4 ] ; uint8_t pointCbValue [ 1 0 ] ; uint8_t pointCbScaling [ 1 0 ] ; uint8_t pointCrValue [ 1 0 ] ; uint8_t pointCrScaling [ 1 0 ] ; uint8_t arCoeffsYPlus128 [ 2 4 ] ; uint8_t arCoeffsCbPlus128 [ 2 5 ] ; uint8_t arCoeffsCrPlus128 [ 2 5 ] ; uint8_t reserved2 [ 2 ] ; uint8_t cbMult ; uint8_t cbLumaMult ; uint16_t cbOffset ; uint8_t crMult ; uint8_t crLumaMult ; uint16_t crOffset ; } NV_ENC_FILM_GRAIN_PARAMS_AV1 ; typedef struct _NV_ENC_CONFIG_AV1 { uint32_t level ; uint32_t tier ; NV_ENC_AV1_PART_SIZE minPartSize ; NV_ENC_AV1_PART_SIZE maxPartSize ; uint32_t outputAnnexBFormat : 1 ; uint32_t enableTimingInfo : 1 ; uint32_t enableDecoderModelInfo : 1 ; uint32_t enableFrameIdNumbers : 1 ; uint32_t disableSeqHdr : 1 ; uint32_t repeatSeqHdr : 1 ; uint32_t enableIntraRefresh : 1 ; uint32_t chromaFormatIDC : 2 ; uint32_t enableBitstreamPadding : 1 ; uint32_t enableCustomTileConfig : 1 ; uint32_t enableFilmGrainParams : 1 ; uint32_t inputPixelBitDepthMinus8 : 3 ; uint32_t pixelBitDepthMinus8 : 3 ; uint32_t reserved : 1 4 ; uint32_t idrPeriod ; uint32_t intraRefreshPeriod ; uint32_t intraRefreshCnt ; uint32_t maxNumRefFramesInDPB ; uint32_t numTileColumns ; uint32_t numTileRows ; uint32_t* tileWidths ; uint32_t* tileHeights ; uint32_t maxTemporalLayersMinus1 ; NV_ENC_VUI_COLOR_PRIMARIES colorPrimaries ; NV_ENC_VUI_TRANSFER_CHARACTERISTIC transferCharacteristics ; NV_ENC_VUI_MATRIX_COEFFS matrixCoefficients ; uint32_t colorRange ; uint32_t chromaSamplePosition ; NV_ENC_BFRAME_REF_MODE useBFramesAsRef ; NV_ENC_FILM_GRAIN_PARAMS_AV1* filmGrainParams ; NV_ENC_NUM_REF_FRAMES numFwdRefs ; NV_ENC_NUM_REF_FRAMES numBwdRefs ; uint32_t reserved1 [ 2 3 5 ] ; void* reserved2 [ 6 2 ] ; } NV_ENC_CONFIG_AV1 ; typedef struct _NV_ENC_CONFIG_H264_MEONLY { uint32_t disablePartition16x16 : 1 ; uint32_t disablePartition8x16 : 1 ; uint32_t disablePartition16x8 : 1 ; uint32_t disablePartition8x8 : 1 ; uint32_t disableIntraSearch : 1 ; uint32_t bStereoEnable : 1 ; uint32_t reserved : 2 6 ; uint32_t reserved1 [ 2 5 5 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_CONFIG_H264_MEONLY ; typedef struct _NV_ENC_CONFIG_HEVC_MEONLY { uint32_t reserved [ 2 5 6 ] ; void* reserved1 [ 6 4 ] ; } NV_ENC_CONFIG_HEVC_MEONLY ; typedef union _NV_ENC_CODEC_CONFIG { NV_ENC_CONFIG_H264 h264Config ; NV_ENC_CONFIG_HEVC hevcConfig ; NV_ENC_CONFIG_AV1 av1Config ; NV_ENC_CONFIG_H264_MEONLY h264MeOnlyConfig ; NV_ENC_CONFIG_HEVC_MEONLY hevcMeOnlyConfig ; uint32_t reserved [ 3 2 0 ] ; } NV_ENC_CODEC_CONFIG ; typedef struct _NV_ENC_CONFIG { uint32_t version ; GUID profileGUID ; uint32_t gopLength ; int32_t frameIntervalP ; uint32_t monoChromeEncoding ; NV_ENC_PARAMS_FRAME_FIELD_MODE frameFieldMode ; NV_ENC_MV_PRECISION mvPrecision ; NV_ENC_RC_PARAMS rcParams ; NV_ENC_CODEC_CONFIG encodeCodecConfig ; uint32_t reserved [ 2 7 8 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_CONFIG ; # define)",
    "insertText": "NV_ENC_CONFIG_VER(NVENCAPI_STRUCT_VERSION(8) | ( 1<<31 ))"
  },
  {
    "label": "NV_ENC_INITIALIZE_PARAMS_VER()",
    "kind": "Method",
    "detail": "Function (NV_ENC_TUNING_INFO_UNDEFINED = 0,NV_ENC_TUNING_INFO_HIGH_QUALITY = 1,NV_ENC_TUNING_INFO_LOW_LATENCY = 2,NV_ENC_TUNING_INFO_ULTRA_LOW_LATENCY = 3,NV_ENC_TUNING_INFO_LOSSLESS = 4,NV_ENC_TUNING_INFO_COUNT } NV_ENC_TUNING_INFO ; typedef enum _NV_ENC_SPLIT_ENCODE_MODE { NV_ENC_SPLIT_AUTO_MODE = 0,NV_ENC_SPLIT_AUTO_FORCED_MODE = 1,NV_ENC_SPLIT_TWO_FORCED_MODE = 2,NV_ENC_SPLIT_THREE_FORCED_MODE = 3,NV_ENC_SPLIT_DISABLE_MODE = 1 5,} NV_ENC_SPLIT_ENCODE_MODE ; typedef struct _NV_ENC_INITIALIZE_PARAMS { uint32_t version ; GUID encodeGUID ; GUID presetGUID ; uint32_t encodeWidth ; uint32_t encodeHeight ; uint32_t darWidth ; uint32_t darHeight ; uint32_t frameRateNum ; uint32_t frameRateDen ; uint32_t enableEncodeAsync ; uint32_t enablePTD ; uint32_t reportSliceOffsets : 1 ; uint32_t enableSubFrameWrite : 1 ; uint32_t enableExternalMEHints : 1 ; uint32_t enableMEOnlyMode : 1 ; uint32_t enableWeightedPrediction : 1 ; uint32_t splitEncodeMode : 4 ; uint32_t enableOutputInVidmem : 1 ; uint32_t enableReconFrameOutput : 1 ; uint32_t enableOutputStats : 1 ; uint32_t reservedBitFields : 2 0 ; uint32_t privDataSize ; void* privData ; NV_ENC_CONFIG* encodeConfig ; uint32_t maxEncodeWidth ; uint32_t maxEncodeHeight ; NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE maxMEHintCountsPerBlock [ 2 ] ; NV_ENC_TUNING_INFO tuningInfo ; NV_ENC_BUFFER_FORMAT bufferFormat ; uint32_t numStateBuffers ; NV_ENC_OUTPUT_STATS_LEVEL outputStatsLevel ; uint32_t reserved [ 2 8 5 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_INITIALIZE_PARAMS ; # define)",
    "insertText": "NV_ENC_INITIALIZE_PARAMS_VER(NVENCAPI_STRUCT_VERSION(6) | ( 1<<31 ))"
  },
  {
    "label": "NV_ENC_RECONFIGURE_PARAMS_VER()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; NV_ENC_INITIALIZE_PARAMS reInitEncodeParams ; uint32_t resetEncoder : 1 ; uint32_t forceIDR : 1 ; uint32_t reserved : 3 0 ; } NV_ENC_RECONFIGURE_PARAMS ; # define)",
    "insertText": "NV_ENC_RECONFIGURE_PARAMS_VER(NVENCAPI_STRUCT_VERSION(1) | ( 1<<31 ))"
  },
  {
    "label": "NV_ENC_PRESET_CONFIG_VER()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; NV_ENC_CONFIG presetCfg ; uint32_t reserved1 [ 2 5 5 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_PRESET_CONFIG ; # define)",
    "insertText": "NV_ENC_PRESET_CONFIG_VER(NVENCAPI_STRUCT_VERSION(4) | ( 1<<31 ))"
  },
  {
    "label": "NV_ENC_PIC_PARAMS_VER()",
    "kind": "Method",
    "detail": "Function (NV_ENC_PIC_PARAMS_MVC mvcPicParams ; uint32_t reserved1 [ 3 2 ] ; } NV_ENC_PIC_PARAMS_H264_EXT ; typedef struct _NV_ENC_SEI_PAYLOAD { uint32_t payloadSize ; uint32_t payloadType ; uint8_t* payload ; } NV_ENC_SEI_PAYLOAD ; # define NV_ENC_H264_SEI_PAYLOAD NV_ENC_SEI_PAYLOAD typedef struct _NV_ENC_PIC_PARAMS_H264 { uint32_t displayPOCSyntax ; uint32_t reserved3 ; uint32_t refPicFlag ; uint32_t colourPlaneId ; uint32_t forceIntraRefreshWithFrameCnt ; uint32_t constrainedFrame : 1 ; uint32_t sliceModeDataUpdate : 1 ; uint32_t ltrMarkFrame : 1 ; uint32_t ltrUseFrames : 1 ; uint32_t reservedBitFields : 2 8 ; uint8_t* sliceTypeData ; uint32_t sliceTypeArrayCnt ; uint32_t seiPayloadArrayCnt ; NV_ENC_SEI_PAYLOAD* seiPayloadArray ; uint32_t sliceMode ; uint32_t sliceModeData ; uint32_t ltrMarkFrameIdx ; uint32_t ltrUseFrameBitmap ; uint32_t ltrUsageMode ; uint32_t forceIntraSliceCount ; uint32_t* forceIntraSliceIdx ; NV_ENC_PIC_PARAMS_H264_EXT h264ExtPicParams ; NV_ENC_TIME_CODE timeCode ; uint32_t reserved [ 2 0 3 ] ; void* reserved2 [ 6 1 ] ; } NV_ENC_PIC_PARAMS_H264 ; typedef struct _NV_ENC_PIC_PARAMS_HEVC { uint32_t displayPOCSyntax ; uint32_t refPicFlag ; uint32_t temporalId ; uint32_t forceIntraRefreshWithFrameCnt ; uint32_t constrainedFrame : 1 ; uint32_t sliceModeDataUpdate : 1 ; uint32_t ltrMarkFrame : 1 ; uint32_t ltrUseFrames : 1 ; uint32_t reservedBitFields : 2 8 ; uint8_t* sliceTypeData ; uint32_t sliceTypeArrayCnt ; uint32_t sliceMode ; uint32_t sliceModeData ; uint32_t ltrMarkFrameIdx ; uint32_t ltrUseFrameBitmap ; uint32_t ltrUsageMode ; uint32_t seiPayloadArrayCnt ; uint32_t reserved ; NV_ENC_SEI_PAYLOAD* seiPayloadArray ; NV_ENC_TIME_CODE timeCode ; uint32_t reserved2 [ 2 3 7 ] ; void* reserved3 [ 6 1 ] ; } NV_ENC_PIC_PARAMS_HEVC ; # define NV_ENC_AV1_OBU_PAYLOAD NV_ENC_SEI_PAYLOAD typedef struct _NV_ENC_PIC_PARAMS_AV1 { uint32_t displayPOCSyntax ; uint32_t refPicFlag ; uint32_t temporalId ; uint32_t forceIntraRefreshWithFrameCnt ; uint32_t goldenFrameFlag : 1 ; uint32_t arfFrameFlag : 1 ; uint32_t arf2FrameFlag : 1 ; uint32_t bwdFrameFlag : 1 ; uint32_t overlayFrameFlag : 1 ; uint32_t showExistingFrameFlag : 1 ; uint32_t errorResilientModeFlag : 1 ; uint32_t tileConfigUpdate : 1 ; uint32_t enableCustomTileConfig : 1 ; uint32_t filmGrainParamsUpdate : 1 ; uint32_t reservedBitFields : 2 2 ; uint32_t numTileColumns ; uint32_t numTileRows ; uint32_t* tileWidths ; uint32_t* tileHeights ; uint32_t obuPayloadArrayCnt ; uint32_t reserved ; NV_ENC_AV1_OBU_PAYLOAD* obuPayloadArray ; NV_ENC_FILM_GRAIN_PARAMS_AV1* filmGrainParams ; uint32_t reserved2 [ 2 4 7 ] ; void* reserved3 [ 6 1 ] ; } NV_ENC_PIC_PARAMS_AV1 ; typedef union _NV_ENC_CODEC_PIC_PARAMS { NV_ENC_PIC_PARAMS_H264 h264PicParams ; NV_ENC_PIC_PARAMS_HEVC hevcPicParams ; NV_ENC_PIC_PARAMS_AV1 av1PicParams ; uint32_t reserved [ 2 5 6 ] ; } NV_ENC_CODEC_PIC_PARAMS ; typedef struct _NV_ENC_PIC_PARAMS { uint32_t version ; uint32_t inputWidth ; uint32_t inputHeight ; uint32_t inputPitch ; uint32_t encodePicFlags ; uint32_t frameIdx ; uint64_t inputTimeStamp ; uint64_t inputDuration ; NV_ENC_INPUT_PTR inputBuffer ; NV_ENC_OUTPUT_PTR outputBitstream ; void* completionEvent ; NV_ENC_BUFFER_FORMAT bufferFmt ; NV_ENC_PIC_STRUCT pictureStruct ; NV_ENC_PIC_TYPE pictureType ; NV_ENC_CODEC_PIC_PARAMS codecPicParams ; NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE meHintCountsPerBlock [ 2 ] ; NVENC_EXTERNAL_ME_HINT* meExternalHints ; uint32_t reserved1 [ 6 ] ; void* reserved2 [ 2 ] ; int8_t* qpDeltaMap ; uint32_t qpDeltaMapSize ; uint32_t reservedBitFields ; uint16_t meHintRefPicDist [ 2 ] ; NV_ENC_INPUT_PTR alphaBuffer ; NVENC_EXTERNAL_ME_SB_HINT* meExternalSbHints ; uint32_t meSbHintsCount ; uint32_t stateBufferIdx ; NV_ENC_OUTPUT_PTR outputReconBuffer ; uint32_t reserved3 [ 2 8 4 ] ; void* reserved4 [ 5 7 ] ; } NV_ENC_PIC_PARAMS ; # define)",
    "insertText": "NV_ENC_PIC_PARAMS_VER(NVENCAPI_STRUCT_VERSION(6) | ( 1<<31 ))"
  },
  {
    "label": "NVENCAPI_STRUCT_VERSION()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; uint32_t inputWidth ; uint32_t inputHeight ; NV_ENC_INPUT_PTR inputBuffer ; NV_ENC_INPUT_PTR referenceFrame ; NV_ENC_OUTPUT_PTR mvBuffer ; NV_ENC_BUFFER_FORMAT bufferFmt ; void* completionEvent ; uint32_t viewID ; NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE meHintCountsPerBlock [ 2 ] ; NVENC_EXTERNAL_ME_HINT* meExternalHints ; uint32_t reserved1 [ 2 4 3 ] ; void* reserved2 [ 5 9 ] ; } NV_ENC_MEONLY_PARAMS ; # define NV_ENC_MEONLY_PARAMS_VER)",
    "insertText": "NVENCAPI_STRUCT_VERSION(3)"
  },
  {
    "label": "NV_ENC_LOCK_BITSTREAM_VER()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; uint32_t doNotWait : 1 ; uint32_t ltrFrame : 1 ; uint32_t getRCStats : 1 ; uint32_t reservedBitFields : 2 9 ; void* outputBitstream ; uint32_t* sliceOffsets ; uint32_t frameIdx ; uint32_t hwEncodeStatus ; uint32_t numSlices ; uint32_t bitstreamSizeInBytes ; uint64_t outputTimeStamp ; uint64_t outputDuration ; void* bitstreamBufferPtr ; NV_ENC_PIC_TYPE pictureType ; NV_ENC_PIC_STRUCT pictureStruct ; uint32_t frameAvgQP ; uint32_t frameSatd ; uint32_t ltrFrameIdx ; uint32_t ltrFrameBitmap ; uint32_t temporalId ; uint32_t intraMBCount ; uint32_t interMBCount ; int32_t averageMVX ; int32_t averageMVY ; uint32_t alphaLayerSizeInBytes ; uint32_t outputStatsPtrSize ; void* outputStatsPtr ; uint32_t frameIdxDisplay ; uint32_t reserved1 [ 2 2 0 ] ; void* reserved2 [ 6 3 ] ; uint32_t reservedInternal [ 8 ] ; } NV_ENC_LOCK_BITSTREAM ; # define)",
    "insertText": "NV_ENC_LOCK_BITSTREAM_VER(NVENCAPI_STRUCT_VERSION(1) | ( 1<<31 ))"
  },
  {
    "label": "NVENCAPI_STRUCT_VERSION()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; uint32_t subResourceIndex ; void* inputResource ; NV_ENC_REGISTERED_PTR registeredResource ; NV_ENC_INPUT_PTR mappedResource ; NV_ENC_BUFFER_FORMAT mappedBufferFmt ; uint32_t reserved1 [ 2 5 1 ] ; void* reserved2 [ 6 3 ] ; } NV_ENC_MAP_INPUT_RESOURCE ; # define NV_ENC_MAP_INPUT_RESOURCE_VER)",
    "insertText": "NVENCAPI_STRUCT_VERSION(4)"
  },
  {
    "label": "NVENCAPI_STRUCT_VERSION()",
    "kind": "Method",
    "detail": "Function (uint32_t version ; NV_ENC_DEVICE_TYPE deviceType ; void* device ; void* reserved ; uint32_t apiVersion ; uint32_t reserved1 [ 2 5 3 ] ; void* reserved2 [ 6 4 ] ; } NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS ; # define NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS_VER)",
    "insertText": "NVENCAPI_STRUCT_VERSION(1) NVENCSTATUS NVENCAPI NvEncOpenEncodeSession (void* device, uint32_t deviceType, void** encoder)"
  },
  {
    "label": "NvEncGetEncodeGUIDCount()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeGUIDCount(void* encoder, uint32_t* encodeGUIDCount)"
  },
  {
    "label": "NvEncGetEncodeGUIDs()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeGUIDs(void* encoder, GUID* GUIDs, uint32_t guidArraySize, uint32_t* GUIDCount)"
  },
  {
    "label": "NvEncGetEncodeProfileGUIDCount()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeProfileGUIDCount(void* encoder, GUID encodeGUID, uint32_t* encodeProfileGUIDCount)"
  },
  {
    "label": "NvEncGetEncodeProfileGUIDs()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeProfileGUIDs(void* encoder, GUID encodeGUID, GUID* profileGUIDs, uint32_t guidArraySize, uint32_t* GUIDCount)"
  },
  {
    "label": "NvEncGetInputFormatCount()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetInputFormatCount(void* encoder, GUID encodeGUID, uint32_t* inputFmtCount)"
  },
  {
    "label": "NvEncGetInputFormats()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetInputFormats(void* encoder, GUID encodeGUID, NV_ENC_BUFFER_FORMAT* inputFmts, uint32_t inputFmtArraySize, uint32_t* inputFmtCount)"
  },
  {
    "label": "NvEncGetEncodeCaps()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeCaps(void* encoder, GUID encodeGUID, NV_ENC_CAPS_PARAM* capsParam, int* capsVal)"
  },
  {
    "label": "NvEncGetEncodePresetCount()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodePresetCount(void* encoder, GUID encodeGUID, uint32_t* encodePresetGUIDCount)"
  },
  {
    "label": "NvEncGetEncodePresetGUIDs()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodePresetGUIDs(void* encoder, GUID encodeGUID, GUID* presetGUIDs, uint32_t guidArraySize, uint32_t* encodePresetGUIDCount)"
  },
  {
    "label": "NvEncGetEncodePresetConfig()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodePresetConfig(void* encoder, GUID encodeGUID, GUID presetGUID, NV_ENC_PRESET_CONFIG* presetConfig)"
  },
  {
    "label": "NvEncGetEncodePresetConfigEx()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodePresetConfigEx(void* encoder, GUID encodeGUID, GUID presetGUID, NV_ENC_TUNING_INFO tuningInfo, NV_ENC_PRESET_CONFIG* presetConfig)"
  },
  {
    "label": "NvEncInitializeEncoder()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncInitializeEncoder(void* encoder, NV_ENC_INITIALIZE_PARAMS* createEncodeParams)"
  },
  {
    "label": "NvEncCreateInputBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncCreateInputBuffer(void* encoder, NV_ENC_CREATE_INPUT_BUFFER* createInputBufferParams)"
  },
  {
    "label": "NvEncDestroyInputBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncDestroyInputBuffer(void* encoder, NV_ENC_INPUT_PTR inputBuffer)"
  },
  {
    "label": "NvEncSetIOCudaStreams()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncSetIOCudaStreams(void* encoder, NV_ENC_CUSTREAM_PTR inputStream, NV_ENC_CUSTREAM_PTR outputStream)"
  },
  {
    "label": "NvEncCreateBitstreamBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncCreateBitstreamBuffer(void* encoder, NV_ENC_CREATE_BITSTREAM_BUFFER* createBitstreamBufferParams)"
  },
  {
    "label": "NvEncDestroyBitstreamBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncDestroyBitstreamBuffer(void* encoder, NV_ENC_OUTPUT_PTR bitstreamBuffer)"
  },
  {
    "label": "NvEncEncodePicture()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncEncodePicture(void* encoder, NV_ENC_PIC_PARAMS* encodePicParams)"
  },
  {
    "label": "NvEncLockBitstream()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncLockBitstream(void* encoder, NV_ENC_LOCK_BITSTREAM* lockBitstreamBufferParams)"
  },
  {
    "label": "NvEncUnlockBitstream()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncUnlockBitstream(void* encoder, NV_ENC_OUTPUT_PTR bitstreamBuffer)"
  },
  {
    "label": "NvEncRestoreEncoderState()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncRestoreEncoderState(void* encoder, NV_ENC_RESTORE_ENCODER_STATE_PARAMS* restoreState)"
  },
  {
    "label": "NvEncLockInputBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncLockInputBuffer(void* encoder, NV_ENC_LOCK_INPUT_BUFFER* lockInputBufferParams)"
  },
  {
    "label": "NvEncUnlockInputBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncUnlockInputBuffer(void* encoder, NV_ENC_INPUT_PTR inputBuffer)"
  },
  {
    "label": "NvEncGetEncodeStats()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetEncodeStats(void* encoder, NV_ENC_STAT* encodeStats)"
  },
  {
    "label": "NvEncGetSequenceParams()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetSequenceParams(void* encoder, NV_ENC_SEQUENCE_PARAM_PAYLOAD* sequenceParamPayload)"
  },
  {
    "label": "NvEncGetSequenceParamEx()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncGetSequenceParamEx(void* encoder, NV_ENC_INITIALIZE_PARAMS* encInitParams, NV_ENC_SEQUENCE_PARAM_PAYLOAD* sequenceParamPayload)"
  },
  {
    "label": "NvEncRegisterAsyncEvent()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncRegisterAsyncEvent(void* encoder, NV_ENC_EVENT_PARAMS* eventParams)"
  },
  {
    "label": "NvEncUnregisterAsyncEvent()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncUnregisterAsyncEvent(void* encoder, NV_ENC_EVENT_PARAMS* eventParams)"
  },
  {
    "label": "NvEncMapInputResource()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncMapInputResource(void* encoder, NV_ENC_MAP_INPUT_RESOURCE* mapInputResParams)"
  },
  {
    "label": "NvEncUnmapInputResource()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncUnmapInputResource(void* encoder, NV_ENC_INPUT_PTR mappedInputBuffer)"
  },
  {
    "label": "NvEncDestroyEncoder()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncDestroyEncoder(void* encoder)"
  },
  {
    "label": "NvEncInvalidateRefFrames()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncInvalidateRefFrames(void* encoder, uint64_t invalidRefFrameTimeStamp)"
  },
  {
    "label": "NvEncOpenEncodeSessionEx()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncOpenEncodeSessionEx(NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS *openSessionExParams, void** encoder)"
  },
  {
    "label": "NvEncRegisterResource()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncRegisterResource(void* encoder, NV_ENC_REGISTER_RESOURCE* registerResParams)"
  },
  {
    "label": "NvEncUnregisterResource()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncUnregisterResource(void* encoder, NV_ENC_REGISTERED_PTR registeredResource)"
  },
  {
    "label": "NvEncReconfigureEncoder()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncReconfigureEncoder(void *encoder, NV_ENC_RECONFIGURE_PARAMS* reInitEncodeParams)"
  },
  {
    "label": "NvEncCreateMVBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncCreateMVBuffer(void* encoder, NV_ENC_CREATE_MV_BUFFER* createMVBufferParams)"
  },
  {
    "label": "NvEncDestroyMVBuffer()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncDestroyMVBuffer(void* encoder, NV_ENC_OUTPUT_PTR mvBuffer)"
  },
  {
    "label": "NvEncRunMotionEstimationOnly()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncRunMotionEstimationOnly(void* encoder, NV_ENC_MEONLY_PARAMS* meOnlyParams)"
  },
  {
    "label": "NvEncodeAPIGetMaxSupportedVersion()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncodeAPIGetMaxSupportedVersion(uint32_t* version)"
  },
  {
    "label": "NvEncGetLastErrorString()",
    "kind": "Method",
    "detail": "Function (const char* NVENCAPI)",
    "insertText": "NvEncGetLastErrorString(void* encoder)"
  },
  {
    "label": "NvEncLookaheadPicture()",
    "kind": "Method",
    "detail": "Function (NVENCSTATUS NVENCAPI)",
    "insertText": "NvEncLookaheadPicture(void* encoder, NV_ENC_LOOKAHEAD_PIC_PARAMS *lookaheadParamas)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCOPENENCODESESSION) (void* device, uint32_t deviceType, void** encoder)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEGUIDCOUNT) (void* encoder, uint32_t* encodeGUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEGUIDS) (void* encoder, GUID* GUIDs, uint32_t guidArraySize, uint32_t* GUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPROFILEGUIDCOUNT) (void* encoder, GUID encodeGUID, uint32_t* encodeProfileGUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPROFILEGUIDS) (void* encoder, GUID encodeGUID, GUID* profileGUIDs, uint32_t guidArraySize, uint32_t* GUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETINPUTFORMATCOUNT) (void* encoder, GUID encodeGUID, uint32_t* inputFmtCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETINPUTFORMATS) (void* encoder, GUID encodeGUID, NV_ENC_BUFFER_FORMAT* inputFmts, uint32_t inputFmtArraySize, uint32_t* inputFmtCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODECAPS) (void* encoder, GUID encodeGUID, NV_ENC_CAPS_PARAM* capsParam, int* capsVal)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPRESETCOUNT) (void* encoder, GUID encodeGUID, uint32_t* encodePresetGUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPRESETGUIDS) (void* encoder, GUID encodeGUID, GUID* presetGUIDs, uint32_t guidArraySize, uint32_t* encodePresetGUIDCount)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPRESETCONFIG) (void* encoder, GUID encodeGUID, GUID presetGUID, NV_ENC_PRESET_CONFIG* presetConfig)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODEPRESETCONFIGEX) (void* encoder, GUID encodeGUID, GUID presetGUID, NV_ENC_TUNING_INFO tuningInfo, NV_ENC_PRESET_CONFIG* presetConfig)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCINITIALIZEENCODER) (void* encoder, NV_ENC_INITIALIZE_PARAMS* createEncodeParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCCREATEINPUTBUFFER) (void* encoder, NV_ENC_CREATE_INPUT_BUFFER* createInputBufferParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCDESTROYINPUTBUFFER) (void* encoder, NV_ENC_INPUT_PTR inputBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCCREATEBITSTREAMBUFFER) (void* encoder, NV_ENC_CREATE_BITSTREAM_BUFFER* createBitstreamBufferParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCDESTROYBITSTREAMBUFFER) (void* encoder, NV_ENC_OUTPUT_PTR bitstreamBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCENCODEPICTURE) (void* encoder, NV_ENC_PIC_PARAMS* encodePicParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCLOCKBITSTREAM) (void* encoder, NV_ENC_LOCK_BITSTREAM* lockBitstreamBufferParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCUNLOCKBITSTREAM) (void* encoder, NV_ENC_OUTPUT_PTR bitstreamBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCLOCKINPUTBUFFER) (void* encoder, NV_ENC_LOCK_INPUT_BUFFER* lockInputBufferParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCUNLOCKINPUTBUFFER) (void* encoder, NV_ENC_INPUT_PTR inputBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETENCODESTATS) (void* encoder, NV_ENC_STAT* encodeStats)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETSEQUENCEPARAMS) (void* encoder, NV_ENC_SEQUENCE_PARAM_PAYLOAD* sequenceParamPayload)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCREGISTERASYNCEVENT) (void* encoder, NV_ENC_EVENT_PARAMS* eventParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCUNREGISTERASYNCEVENT) (void* encoder, NV_ENC_EVENT_PARAMS* eventParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCMAPINPUTRESOURCE) (void* encoder, NV_ENC_MAP_INPUT_RESOURCE* mapInputResParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCUNMAPINPUTRESOURCE) (void* encoder, NV_ENC_INPUT_PTR mappedInputBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCDESTROYENCODER) (void* encoder)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCINVALIDATEREFFRAMES) (void* encoder, uint64_t invalidRefFrameTimeStamp)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCOPENENCODESESSIONEX) (NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS *openSessionExParams, void** encoder)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCREGISTERRESOURCE) (void* encoder, NV_ENC_REGISTER_RESOURCE* registerResParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCUNREGISTERRESOURCE) (void* encoder, NV_ENC_REGISTERED_PTR registeredRes)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCRECONFIGUREENCODER) (void* encoder, NV_ENC_RECONFIGURE_PARAMS* reInitEncodeParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCCREATEMVBUFFER) (void* encoder, NV_ENC_CREATE_MV_BUFFER* createMVBufferParams)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCDESTROYMVBUFFER) (void* encoder, NV_ENC_OUTPUT_PTR mvBuffer)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCRUNMOTIONESTIMATIONONLY) (void* encoder, NV_ENC_MEONLY_PARAMS* meOnlyParams)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "char(NVENCAPI* PNVENCGETLASTERROR) (void* encoder)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCSETIOCUDASTREAMS) (void* encoder, NV_ENC_CUSTREAM_PTR inputStream, NV_ENC_CUSTREAM_PTR outputStream)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCGETSEQUENCEPARAMEX) (void* encoder, NV_ENC_INITIALIZE_PARAMS* encInitParams, NV_ENC_SEQUENCE_PARAM_PAYLOAD* sequenceParamPayload)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCRESTOREENCODERSTATE) (void* encoder, NV_ENC_RESTORE_ENCODER_STATE_PARAMS* restoreState)"
  },
  {
    "label": "NVENCSTATUS()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "NVENCSTATUS(NVENCAPI* PNVENCLOOKAHEADPICTURE) (void* encoder, NV_ENC_LOOKAHEAD_PIC_PARAMS* lookaheadParams)"
  },
  {
    "label": "NVENCAPI_STRUCT_VERSION()",
    "kind": "Method",
    "detail": "Function (typedef struct _NV_ENCODE_API_FUNCTION_LIST { uint32_t version ; uint32_t reserved ; PNVENCOPENENCODESESSION nvEncOpenEncodeSession ; PNVENCGETENCODEGUIDCOUNT nvEncGetEncodeGUIDCount ; PNVENCGETENCODEPRESETCOUNT nvEncGetEncodeProfileGUIDCount ; PNVENCGETENCODEPRESETGUIDS nvEncGetEncodeProfileGUIDs ; PNVENCGETENCODEGUIDS nvEncGetEncodeGUIDs ; PNVENCGETINPUTFORMATCOUNT nvEncGetInputFormatCount ; PNVENCGETINPUTFORMATS nvEncGetInputFormats ; PNVENCGETENCODECAPS nvEncGetEncodeCaps ; PNVENCGETENCODEPRESETCOUNT nvEncGetEncodePresetCount ; PNVENCGETENCODEPRESETGUIDS nvEncGetEncodePresetGUIDs ; PNVENCGETENCODEPRESETCONFIG nvEncGetEncodePresetConfig ; PNVENCINITIALIZEENCODER nvEncInitializeEncoder ; PNVENCCREATEINPUTBUFFER nvEncCreateInputBuffer ; PNVENCDESTROYINPUTBUFFER nvEncDestroyInputBuffer ; PNVENCCREATEBITSTREAMBUFFER nvEncCreateBitstreamBuffer ; PNVENCDESTROYBITSTREAMBUFFER nvEncDestroyBitstreamBuffer ; PNVENCENCODEPICTURE nvEncEncodePicture ; PNVENCLOCKBITSTREAM nvEncLockBitstream ; PNVENCUNLOCKBITSTREAM nvEncUnlockBitstream ; PNVENCLOCKINPUTBUFFER nvEncLockInputBuffer ; PNVENCUNLOCKINPUTBUFFER nvEncUnlockInputBuffer ; PNVENCGETENCODESTATS nvEncGetEncodeStats ; PNVENCGETSEQUENCEPARAMS nvEncGetSequenceParams ; PNVENCREGISTERASYNCEVENT nvEncRegisterAsyncEvent ; PNVENCUNREGISTERASYNCEVENT nvEncUnregisterAsyncEvent ; PNVENCMAPINPUTRESOURCE nvEncMapInputResource ; PNVENCUNMAPINPUTRESOURCE nvEncUnmapInputResource ; PNVENCDESTROYENCODER nvEncDestroyEncoder ; PNVENCINVALIDATEREFFRAMES nvEncInvalidateRefFrames ; PNVENCOPENENCODESESSIONEX nvEncOpenEncodeSessionEx ; PNVENCREGISTERRESOURCE nvEncRegisterResource ; PNVENCUNREGISTERRESOURCE nvEncUnregisterResource ; PNVENCRECONFIGUREENCODER nvEncReconfigureEncoder ; void* reserved1 ; PNVENCCREATEMVBUFFER nvEncCreateMVBuffer ; PNVENCDESTROYMVBUFFER nvEncDestroyMVBuffer ; PNVENCRUNMOTIONESTIMATIONONLY nvEncRunMotionEstimationOnly ; PNVENCGETLASTERROR nvEncGetLastErrorString ; PNVENCSETIOCUDASTREAMS nvEncSetIOCudaStreams ; PNVENCGETENCODEPRESETCONFIGEX nvEncGetEncodePresetConfigEx ; PNVENCGETSEQUENCEPARAMEX nvEncGetSequenceParamEx ; PNVENCRESTOREENCODERSTATE nvEncRestoreEncoderState ; PNVENCLOOKAHEADPICTURE nvEncLookaheadPicture ; void* reserved2 [ 2 7 5 ] ; } NV_ENCODE_API_FUNCTION_LIST ; # define NV_ENCODE_API_FUNCTION_LIST_VER)",
    "insertText": "NVENCAPI_STRUCT_VERSION(2) NVENCSTATUS NVENCAPI NvEncodeAPICreateInstance(NV_ENCODE_API_FUNCTION_LIST *functionList)"
  }
]