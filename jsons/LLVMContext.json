[
  {
    "label": "LLVMContextImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContextImpl"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "SMDiagnostic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMDiagnostic"
  },
  {
    "label": "DiagnosticInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfo"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "DebugLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugLoc"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "LLVMContext()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_LLVMCONTEXT_H # define LLVM_IR_LLVMCONTEXT_H # include \" llvm - c / Core . h \" # include \" llvm / Support / CBindingWrapping . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / Options . h \" namespace llvm { class LLVMContextImpl ; class StringRef ; class Twine ; class Instruction ; class Module ; class SMDiagnostic ; class DiagnosticInfo ; template<T> class SmallVectorImpl ; class Function ; class DebugLoc ; class LLVMContext { public : LLVMContextImpl* const pImpl ;)",
    "insertText": "LLVMContext()"
  },
  {
    "label": "getMDKindID()",
    "kind": "Method",
    "detail": "Function (enum { MD_dbg = 0,MD_tbaa = 1,MD_prof = 2,MD_fpmath = 3,MD_range = 4,MD_tbaa_struct = 5,MD_invariant_load = 6,MD_alias_scope = 7,MD_noalias = 8,MD_nontemporal = 9,MD_mem_parallel_loop_access = 1 0,MD_nonnull = 1 1,MD_dereferenceable = 1 2,MD_dereferenceable_or_null = 1 3 } ; unsigned)",
    "insertText": "getMDKindID(StringRef Name)"
  },
  {
    "label": "findMDKindID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "findMDKindID(StringRef Name, unsigned *ID)"
  },
  {
    "label": "getMDKindNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMDKindNames(SmallVectorImpl<StringRef> &Result)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*InlineAsmDiagHandlerTy)(const SMDiagnostic&, void *Context, unsigned LocCookie)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*DiagnosticHandlerTy)(const DiagnosticInfo &DI, void *Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*YieldCallbackTy)(LLVMContext *Context, void *OpaqueHandle)"
  },
  {
    "label": "setInlineAsmDiagnosticHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInlineAsmDiagnosticHandler(InlineAsmDiagHandlerTy DiagHandler, void *DiagContext = nullptr)"
  },
  {
    "label": "getInlineAsmDiagnosticHandler()",
    "kind": "Method",
    "detail": "Function (InlineAsmDiagHandlerTy)",
    "insertText": "getInlineAsmDiagnosticHandler()"
  },
  {
    "label": "getInlineAsmDiagnosticContext()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "getInlineAsmDiagnosticContext()"
  },
  {
    "label": "setDiagnosticHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDiagnosticHandler(DiagnosticHandlerTy DiagHandler, void *DiagContext = nullptr, bool RespectFilters = false)"
  },
  {
    "label": "getDiagnosticHandler()",
    "kind": "Method",
    "detail": "Function (DiagnosticHandlerTy)",
    "insertText": "getDiagnosticHandler()"
  },
  {
    "label": "getDiagnosticContext()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "getDiagnosticContext()"
  },
  {
    "label": "diagnose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "diagnose(const DiagnosticInfo &DI)"
  },
  {
    "label": "setYieldCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setYieldCallback(YieldCallbackTy Callback, void *OpaqueHandle)"
  },
  {
    "label": "yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "yield()"
  },
  {
    "label": "emitError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitError(unsigned LocCookie, const Twine &ErrorStr)"
  },
  {
    "label": "emitError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitError(const Instruction *I, const Twine &ErrorStr)"
  },
  {
    "label": "emitError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitError(const Twine &ErrorStr)"
  },
  {
    "label": "emitWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitWarning(const Twine &WarningStr)"
  },
  {
    "label": "ValT()",
    "kind": "Method",
    "detail": "Function (template<ValT,Base,)",
    "insertText": "ValT(Base::*Mem)> ValT getOption()"
  },
  {
    "label": "LLVMContext()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LLVMContext(LLVMContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(LLVMContext&)"
  },
  {
    "label": "addModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addModule(Module*)"
  },
  {
    "label": "removeModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeModule(Module*)"
  },
  {
    "label": "getGlobalContext()",
    "kind": "Method",
    "detail": "Function (class Module ; } ; LLVMContext&)",
    "insertText": "getGlobalContext()"
  },
  {
    "label": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_SIMPLE_CONVERSION_FUNCTIONS(LLVMContext, LLVMContextRef) inline LLVMContext **unwrap(LLVMContextRef* Tys)"
  },
  {
    "label": "wrap()",
    "kind": "Method",
    "detail": "Function (} LLVMContextRef*)",
    "insertText": "wrap(const LLVMContext **Tys)"
  }
]