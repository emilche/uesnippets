[
  {
    "label": "EncodeNetEqInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodeNetEqInput"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Generator"
  },
  {
    "label": "Generator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_ENCODE_NETEQ_INPUT_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_ENCODE_NETEQ_INPUT_H_ # include<memory> # include \" api / audio_codecs / audio_encoder . h \" # include \" modules / audio_coding / neteq / tools / neteq_input . h \" namespace webrtc { namespace test { class EncodeNetEqInput : public NetEqInput { public : class Generator { public : ~)",
    "insertText": "Generator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const int16_t>)",
    "insertText": "Generate(size_t num_samples)"
  },
  {
    "label": "EncodeNetEqInput()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "EncodeNetEqInput(std::unique_ptr<Generator> generator, std::unique_ptr<AudioEncoder> encoder, int64_t input_duration_ms)"
  },
  {
    "label": "EncodeNetEqInput()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EncodeNetEqInput()"
  },
  {
    "label": "NextPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextPacketTime()"
  },
  {
    "label": "NextOutputEventTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "NextOutputEventTime()"
  },
  {
    "label": "PopPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PacketData>)",
    "insertText": "PopPacket()"
  },
  {
    "label": "AdvanceOutputEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOutputEvent()"
  },
  {
    "label": "ended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ended()"
  },
  {
    "label": "NextHeader()",
    "kind": "Method",
    "detail": "Function (absl::optional<RTPHeader>)",
    "insertText": "NextHeader()"
  },
  {
    "label": "CreatePacket()",
    "kind": "Method",
    "detail": "Function (private : int64_t kOutputPeriodMs = 1 0 ; void)",
    "insertText": "CreatePacket()"
  }
]