[
  {
    "label": "VkShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VkShaderGenerator"
  },
  {
    "label": "MX_GENGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENGLSL_API"
  },
  {
    "label": "VkShaderGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_VKSHADERGENERATOR_H # define MATERIALX_VKSHADERGENERATOR_H # include<MaterialXGenGlsl / GlslShaderGenerator . h> # include<MaterialXGenGlsl / VkResourceBindingContext . h> MATERIALX_NAMESPACE_BEGIN using VkShaderGeneratorPtr = shared_ptr<class VkShaderGenerator> ; class VkShaderGenerator : public GlslShaderGenerator { public :)",
    "insertText": "VkShaderGenerator()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderGeneratorPtr)",
    "insertText": "create()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "emitDirectives()",
    "kind": "Method",
    "detail": "Function (const string TARGET ; const string VERSION ; void)",
    "insertText": "emitDirectives(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitInputs(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitOutputs(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "getResourceBindingContext()",
    "kind": "Method",
    "detail": "Function (protected : HwResourceBindingContextPtr)",
    "insertText": "getResourceBindingContext(GenContext&)"
  }
]