[
  {
    "label": "OsrAccessibilityHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsrAccessibilityHelper"
  },
  {
    "label": "OsrImeHandlerWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsrImeHandlerWin"
  },
  {
    "label": "OsrWindowWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsrWindowWin"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "CefDeleteOnThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDeleteOnThread"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_OSR_WINDOW_WIN_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_OSR_WINDOW_WIN_H_ # pragma once # include \" include / base / cef_bind . h \" # include \" include / base / cef_ref_counted . h \" # include \" include / wrapper / cef_closure_task . h \" # include \" include / wrapper / cef_helpers . h \" # include \" tests / cefclient / browser / client_handler_osr . h \" # include \" tests / cefclient / browser / osr_accessibility_node . h \" # include \" tests / cefclient / browser / osr_dragdrop_win . h \" # include \" tests / cefclient / browser / osr_render_handler_win . h \" # include \" tests / cefclient / browser / osr_renderer_settings . h \" namespace client { class OsrAccessibilityHelper ; class OsrImeHandlerWin ; class OsrWindowWin : public base::RefCountedThreadSafe<OsrWindowWin,CefDeleteOnUIThread>,public ClientHandlerOsr::OsrDelegate # if)",
    "insertText": "defined(CEF_USE_ATL)"
  },
  {
    "label": "OnOsrNativeWindowCreated()",
    "kind": "Method",
    "detail": "Function (public : class Delegate { public : void)",
    "insertText": "OnOsrNativeWindowCreated(HWND hwnd)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "OsrWindowWin()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "OsrWindowWin(Delegate* delegate, const OsrRendererSettings& settings)"
  },
  {
    "label": "CreateBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBrowser(HWND parent_hwnd, const RECT& rect, CefRefPtr<CefClient> handler, const CefBrowserSettings& settings, CefRefPtr<CefDictionaryValue> extra_info, CefRefPtr<CefRequestContext> request_context, const std::string& startup_url)"
  },
  {
    "label": "ShowPopup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPopup(HWND parent_hwnd, int x, int y, size_t width, size_t height)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(int x, int y, size_t width, size_t height)"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocus()"
  },
  {
    "label": "SetDeviceScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceScaleFactor(float device_scale_factor)"
  },
  {
    "label": "settings()",
    "kind": "Method",
    "detail": "Function (const OsrRendererSettings&)",
    "insertText": "settings()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(HWND parent_hwnd, const RECT& rect)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "NotifyNativeWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNativeWindowCreated(HWND hwnd)"
  },
  {
    "label": "RegisterOsrClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOsrClass(HINSTANCE hInstance, HBRUSH background_brush)"
  },
  {
    "label": "OsrWndProc()",
    "kind": "Method",
    "detail": "Function (LRESULT CALLBACK)",
    "insertText": "OsrWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnMouseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEvent(UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSize()"
  },
  {
    "label": "OnFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocus(bool setFocus)"
  },
  {
    "label": "OnCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCaptureLost()"
  },
  {
    "label": "OnKeyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeyEvent(UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPaint()"
  },
  {
    "label": "OnEraseBkgnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEraseBkgnd()"
  },
  {
    "label": "OnTouchEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchEvent(UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnIMESetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIMESetContext(UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnIMEStartComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIMEStartComposition()"
  },
  {
    "label": "OnIMEComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIMEComposition(UINT message, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "OnIMECancelCompositionEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIMECancelCompositionEvent()"
  },
  {
    "label": "IsOverPopupWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverPopupWidget(int x, int y)"
  },
  {
    "label": "GetPopupXOffset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPopupXOffset()"
  },
  {
    "label": "GetPopupYOffset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPopupYOffset()"
  },
  {
    "label": "ApplyPopupOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPopupOffset(int& x, int& y)"
  },
  {
    "label": "OnAfterCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBeforeClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeClose(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "GetRootScreenRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRootScreenRect(CefRefPtr<CefBrowser> browser, CefRect& rect)"
  },
  {
    "label": "GetViewRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewRect(CefRefPtr<CefBrowser> browser, CefRect& rect)"
  },
  {
    "label": "GetScreenPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScreenPoint(CefRefPtr<CefBrowser> browser, int viewX, int viewY, int& screenX, int& screenY)"
  },
  {
    "label": "GetScreenInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScreenInfo(CefRefPtr<CefBrowser> browser, CefScreenInfo& screen_info)"
  },
  {
    "label": "OnPopupShow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPopupShow(CefRefPtr<CefBrowser> browser, bool show)"
  },
  {
    "label": "OnPopupSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPopupSize(CefRefPtr<CefBrowser> browser, const CefRect& rect)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPaint(CefRefPtr<CefBrowser> browser, CefRenderHandler::PaintElementType type, const CefRenderHandler::RectList& dirtyRects, const void* buffer, int width, int height)"
  },
  {
    "label": "OnAcceleratedPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceleratedPaint(CefRefPtr<CefBrowser> browser, CefRenderHandler::PaintElementType type, const CefRenderHandler::RectList& dirtyRects, void* share_handle)"
  },
  {
    "label": "OnCursorChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCursorChange(CefRefPtr<CefBrowser> browser, CefCursorHandle cursor, cef_cursor_type_t type, const CefCursorInfo& custom_cursor_info)"
  },
  {
    "label": "StartDragging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartDragging(CefRefPtr<CefBrowser> browser, CefRefPtr<CefDragData> drag_data, CefRenderHandler::DragOperationsMask allowed_ops, int x, int y)"
  },
  {
    "label": "UpdateDragCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDragCursor(CefRefPtr<CefBrowser> browser, CefRenderHandler::DragOperation operation)"
  },
  {
    "label": "OnImeCompositionRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImeCompositionRangeChanged(CefRefPtr<CefBrowser> browser, const CefRange& selection_range, const CefRenderHandler::RectList& character_bounds)"
  },
  {
    "label": "UpdateAccessibilityTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAccessibilityTree(CefRefPtr<CefValue> value)"
  },
  {
    "label": "UpdateAccessibilityLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAccessibilityLocation(CefRefPtr<CefValue> value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(CEF_USE_ATL) CefBrowserHost::DragOperationsMask OnDragEnter( CefRefPtr<CefDragData> drag_data, CefMouseEvent ev, CefBrowserHost::DragOperationsMask effect)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (CefBrowserHost::DragOperationsMask)",
    "insertText": "OnDragOver(CefMouseEvent ev, CefBrowserHost::DragOperationsMask effect)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave()"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (CefBrowserHost::DragOperationsMask)",
    "insertText": "OnDrop(CefMouseEvent ev, CefBrowserHost::DragOperationsMask effect)"
  },
  {
    "label": "EnsureRenderHandler()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "EnsureRenderHandler()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (CefRenderHandler::DragOperation current_drag_op_ ; scoped_ptr<OsrAccessibilityHelper> accessibility_handler_ ; IAccessible* accessibility_root_ ; # endif bool hidden_ ; POINT last_mouse_pos_ ; POINT current_mouse_pos_ ; bool mouse_rotation_ ; bool mouse_tracking_ ; int last_click_x_ ; int last_click_y_ ; CefBrowserHost::MouseButtonType last_click_button_ ; int last_click_count_ ; double last_click_time_ ; bool last_mouse_down_on_view_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(OsrWindowWin)"
  }
]