[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FBehaviorTreeEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorTreeEditor"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBehaviorTreeGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeGraphNode"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FBehaviorTreeDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorTreeDebugger"
  },
  {
    "label": "UBehaviorTreeGraphNode_Root",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeGraphNode_Root"
  },
  {
    "label": "UBehaviorTreeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeComponent"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FBehaviorTreeDebuggerInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeDebuggerInstance"
  },
  {
    "label": "UBTNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTNode"
  },
  {
    "label": "UBehaviorTreeGraphNode_CompositeDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeGraphNode_CompositeDecorator"
  },
  {
    "label": "FBehaviorTreeDebugger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BehaviorTree / BehaviorTreeComponent . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include \" Tickable . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class AActor ; class APawn ; class FBehaviorTreeEditor ; class UBehaviorTree ; class UBehaviorTreeGraphNode ; class UBlackboardData ; class UObject ; class FBehaviorTreeDebugger : public FTickableGameObject { public :)",
    "insertText": "FBehaviorTreeDebugger()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Refresh()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(UBehaviorTree* InTreeAsset, TSharedRef<class FBehaviorTreeEditor> InEditorOwner)"
  },
  {
    "label": "CacheRootNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRootNode()"
  },
  {
    "label": "IsDebuggerReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggerReady()"
  },
  {
    "label": "IsDebuggerRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggerRunning()"
  },
  {
    "label": "IsShowingCurrentState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingCurrentState()"
  },
  {
    "label": "GetShownStateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShownStateIndex()"
  },
  {
    "label": "IsBehaviorExecutionPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBehaviorExecutionPaused()"
  },
  {
    "label": "OnObjectSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSelected(UObject* Object)"
  },
  {
    "label": "OnAIDebugSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAIDebugSelected(const APawn* Pawn)"
  },
  {
    "label": "OnTreeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeStarted(const UBehaviorTreeComponent& OwnerComp, const UBehaviorTree& InTreeAsset)"
  },
  {
    "label": "OnBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnPausePIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPausePIE(const bool bIsSimulating)"
  },
  {
    "label": "OnBreakpointAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBreakpointAdded(UBehaviorTreeGraphNode* Node)"
  },
  {
    "label": "OnBreakpointRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBreakpointRemoved(UBehaviorTreeGraphNode* Node)"
  },
  {
    "label": "StepBackInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackInto()"
  },
  {
    "label": "StepBackOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackOver()"
  },
  {
    "label": "StepForwardInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForwardInto()"
  },
  {
    "label": "StepForwardOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForwardOver()"
  },
  {
    "label": "StepOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepOut()"
  },
  {
    "label": "CanStepBackInto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepBackInto()"
  },
  {
    "label": "CanStepBackOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepBackOver()"
  },
  {
    "label": "CanStepForwardInto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepForwardInto()"
  },
  {
    "label": "CanStepForwardOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepForwardOver()"
  },
  {
    "label": "CanStepOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepOut()"
  },
  {
    "label": "StopPlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlaySession()"
  },
  {
    "label": "PausePlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PausePlaySession()"
  },
  {
    "label": "ResumePlaySession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumePlaySession()"
  },
  {
    "label": "IsPlaySessionPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaySessionPaused()"
  },
  {
    "label": "IsPlaySessionRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaySessionRunning()"
  },
  {
    "label": "IsPIESimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPIESimulating()"
  },
  {
    "label": "IsPIENotSimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPIENotSimulating()"
  },
  {
    "label": "GetDebuggedInstanceDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebuggedInstanceDesc()"
  },
  {
    "label": "DescribeInstance()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeInstance(UBehaviorTreeComponent& InstanceToDescribe)"
  },
  {
    "label": "OnInstanceSelectedInDropdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInstanceSelectedInDropdown(UBehaviorTreeComponent* SelectedInstance)"
  },
  {
    "label": "GetMatchingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMatchingInstances(TArray<UBehaviorTreeComponent*>& MatchingInstances)"
  },
  {
    "label": "InitializeFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromParent(class FBehaviorTreeDebugger* ParentDebugger)"
  },
  {
    "label": "HasContinuousNextStep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContinuousNextStep()"
  },
  {
    "label": "HasContinuousPrevStep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContinuousPrevStep()"
  },
  {
    "label": "GetDynamicSubtreeTaskBehaviorTree()",
    "kind": "Method",
    "detail": "Function (UBehaviorTree*)",
    "insertText": "GetDynamicSubtreeTaskBehaviorTree(const UBTTask_RunBehaviorDynamic* Node)"
  },
  {
    "label": "FindValueForKey()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FindValueForKey(const FName& InKeyName, bool bUseCurrentState)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FBehaviorTreeDebugger, FOnDebuggedBlackboardChanged, UBlackboardData*)"
  },
  {
    "label": "OnDebuggedBlackboardChanged()",
    "kind": "Method",
    "detail": "Function (FOnDebuggedBlackboardChanged&)",
    "insertText": "OnDebuggedBlackboardChanged()"
  },
  {
    "label": "ClearDebuggerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDebuggerState(bool bKeepSubtree = false)"
  },
  {
    "label": "OnActiveNodeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveNodeChanged(const TArray<uint16>& ActivePath, const TArray<uint16>& PrevStepPath)"
  },
  {
    "label": "FindMatchingTreeInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindMatchingTreeInstance()"
  },
  {
    "label": "FindMatchingDebuggerStack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMatchingDebuggerStack(UBehaviorTreeComponent& TestInstance)"
  },
  {
    "label": "FindInstanceInActor()",
    "kind": "Method",
    "detail": "Function (UBehaviorTreeComponent*)",
    "insertText": "FindInstanceInActor(AActor* TestActor)"
  },
  {
    "label": "FindLockedDebugActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLockedDebugActor(class UWorld* World)"
  },
  {
    "label": "CollectBreakpointsFromAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectBreakpointsFromAsset(class UBehaviorTreeGraphNode* Node)"
  },
  {
    "label": "UpdateAssetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetFlags(const struct FBehaviorTreeDebuggerInstance& Data, class UBehaviorTreeGraphNode* Node, int32 StepIdx)"
  },
  {
    "label": "SetNodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeFlags(const struct FBehaviorTreeDebuggerInstance& Data, class UBehaviorTreeGraphNode* Node, class UBTNode* NodeInstance)"
  },
  {
    "label": "SetCompositeDecoratorFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositeDecoratorFlags(const struct FBehaviorTreeDebuggerInstance& Data, class UBehaviorTreeGraphNode_CompositeDecorator* Node)"
  },
  {
    "label": "UpdateAssetRuntimeDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetRuntimeDescription(const TArray<FString>& RuntimeDescriptions, class UBehaviorTreeGraphNode* Node)"
  },
  {
    "label": "SetNodeRuntimeDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeRuntimeDescription(const TArray<FString>& RuntimeDescriptions, class UBehaviorTreeGraphNode* Node, class UBTNode* NodeInstance)"
  },
  {
    "label": "SetCompositeDecoratorRuntimeDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositeDecoratorRuntimeDescription(const TArray<FString>& RuntimeDescriptions, class UBehaviorTreeGraphNode_CompositeDecorator* Node)"
  },
  {
    "label": "UpdateDebuggerViewOnInstanceChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebuggerViewOnInstanceChange()"
  },
  {
    "label": "UpdateDebuggerViewOnStepChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebuggerViewOnStepChange()"
  },
  {
    "label": "UpdateDebuggerViewOnTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDebuggerViewOnTick()"
  },
  {
    "label": "FindActiveInstanceIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindActiveInstanceIdx(int32 StepIdx)"
  },
  {
    "label": "UpdateCurrentSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSubtree()"
  },
  {
    "label": "UpdateCurrentStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentStep(int32 PrevStepIdx, int32 NewStepIdx)"
  },
  {
    "label": "UpdateAvailableActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAvailableActions()"
  }
]