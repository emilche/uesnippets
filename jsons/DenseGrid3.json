[
  {
    "label": "TDenseGrid3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDenseGrid3"
  },
  {
    "label": "TDenseGrid3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoxTypes . h \" # include \" IntBoxTypes . h \" # include \" HAL / PlatformAtomics . h \" namespace UE { namespace Geometry { template<ElemType> class TDenseGrid3 { protected : TArray<ElemType> Buffer ; FVector3i Dimensions ; public :)",
    "insertText": "TDenseGrid3() : Dimensions(0,0,0)"
  },
  {
    "label": "TDenseGrid3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDenseGrid3(int DimX, int DimY, int DimZ, ElemType InitialValue)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(DimX, DimY, DimZ)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(InitialValue)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Size()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "SetNumUninitialized(DimX * DimY * DimZ, AllowShrinking)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (Dimensions =)",
    "insertText": "FVector3i(DimX, DimY, DimZ)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Resize\") FORCEINLINE void Resize(int DimX, int DimY, int DimZ, bool bAllowShrinking)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(DimX, DimY, DimZ, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Assign(ElemType Value)"
  },
  {
    "label": "SetMin()",
    "kind": "Method",
    "detail": "Function (Buffer [ i ] = Value ; } } void)",
    "insertText": "SetMin(const FVector3i& IJK, ElemType F)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (int Idx = IJK . X + Dimensions .)",
    "insertText": "X(IJK.Y + Dimensions.Y * IJK.Z)"
  },
  {
    "label": "SetMax()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] = F ; } } void)",
    "insertText": "SetMax(const FVector3i& IJK, ElemType F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] = F ; } } ElemType&)",
    "insertText": "operator(int Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ElemType&)",
    "insertText": "operator(FVector3i Idx)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} ElemType&)",
    "insertText": "At(int I, int J, int K)"
  },
  {
    "label": "GridValues()",
    "kind": "Method",
    "detail": "Function (} TArray<ElemType>&)",
    "insertText": "GridValues()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetValue(const FVector3i& CellCoords)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(int32 X, int32 Y, int32 Z, ElemType NewValue)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Buffer [ X + Dimensions .)",
    "insertText": "X(Y + Dimensions.Y * Z)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const FVector3i& CellCoords, ElemType NewValue)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Buffer [ CellCoords . X + Dimensions .)",
    "insertText": "X(CellCoords.Y + Dimensions.Y * CellCoords.Z)"
  },
  {
    "label": "ProcessValue()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValue(int32 X, int32 Y, int32 Z, ProcessFunc Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (ElemType& CurValue = Buffer [ Index ] ;)",
    "insertText": "Func(CurValue)"
  },
  {
    "label": "ProcessValue()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValue(const FVector3i& CellCoords, ProcessFunc Func)"
  },
  {
    "label": "GetXPair()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetXPair(int X0, int Y, int Z, ElemType& AOut, ElemType& BOut)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (AOut = Buffer [ Offset + X0 ] ; BOut = Buffer [ Offset + X0 + 1 ] ; } void)",
    "insertText": "Apply(TFunctionRef<ElemType(ElemType)> F)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] =)",
    "insertText": "F(Buffer[Idx])"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (} } FAxisAlignedBox3i)",
    "insertText": "Bounds()"
  },
  {
    "label": "BoundsInclusive()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3i)",
    "insertText": "BoundsInclusive()"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "ToIndex(int Idx)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (int x = Idx % Dimensions . X ; int)",
    "insertText": "y(Idx / Dimensions.X)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (int z =)",
    "insertText": "Idx(Dimensions.X * Dimensions.Y)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ToLinear(int X, int Y, int Z)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ToLinear(const FVector3i& IJK)"
  },
  {
    "label": "AtomicIncrement()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TDenseGrid3<float> FDenseGrid3f ; typedef TDenseGrid3<double> FDenseGrid3d ; typedef TDenseGrid3<int> FDenseGrid3i ; namespace DenseGrid { void)",
    "insertText": "AtomicIncrement(FDenseGrid3i& Grid, int i, int j, int k)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&Grid.At(i,j,k))"
  },
  {
    "label": "AtomicDecrement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicDecrement(FDenseGrid3i& Grid, int i, int j, int k)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedDecrement(&Grid.At(i, j, k))"
  },
  {
    "label": "AtomicIncDec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicIncDec(FDenseGrid3i& Grid, int i, int j, int k, bool bDecrement = false)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InterlockedIncrement(&Grid.At(i, j, k))"
  }
]