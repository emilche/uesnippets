[
  {
    "label": "UPendingNetGame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPendingNetGame"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNetworkNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkNotify"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChannel"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEncryptionKeyResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionKeyResponse"
  },
  {
    "label": "FNetSyncLoadReport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetSyncLoadReport"
  },
  {
    "label": "FNetDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetDelegates"
  },
  {
    "label": "FUniqueNetId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueNetId"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" # include \" UObject / CoreNet . h \" class UPendingNetGame ; class UNetDriver ; namespace EAcceptConnection { enum Type { Reject,Accept,Ignore } ; const TCHAR*)",
    "insertText": "ToString(EAcceptConnection::Type EnumVal)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Accept : { return)",
    "insertText": "TEXT(\"Accept\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Ignore : { return)",
    "insertText": "TEXT(\"Ignore\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "NotifyAcceptingConnection()",
    "kind": "Method",
    "detail": "Function (} } ; class FNetworkNotify { public : EAcceptConnection::Type)",
    "insertText": "NotifyAcceptingConnection() PURE_VIRTUAL(FNetworkNotify::NotifyAcceptedConnection, return EAcceptConnection::Ignore;)"
  },
  {
    "label": "NotifyAcceptedConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAcceptedConnection(class UNetConnection* Connection) PURE_VIRTUAL(FNetworkNotify::NotifyAcceptedConnection,)"
  },
  {
    "label": "NotifyAcceptingChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyAcceptingChannel(class UChannel* Channel) PURE_VIRTUAL(FNetworkNotify::NotifyAcceptingChannel, return false;)"
  },
  {
    "label": "NotifyControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyControlMessage(UNetConnection* Connection, uint8 MessageType, class FInBunch& Bunch) PURE_VIRTUAL(FNetworkNotify::NotifyReceivedText,)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; enum class EEncryptionResponse : uint8 { Failure,Success,InvalidToken,NoKey,SessionIdMismatch,InvalidParams } ; const TCHAR* const)",
    "insertText": "LexToString(const EEncryptionResponse Response)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (default : break ; })",
    "insertText": "checkf(false, TEXT(\"Missing EncryptionResponse Type: %d\"), static_cast<const int32>(Response))"
  },
  {
    "label": "FEncryptionKeyResponse()",
    "kind": "Method",
    "detail": "Function (} struct FEncryptionKeyResponse { EEncryptionResponse Response ; FString ErrorMsg ; FEncryptionData EncryptionData ;)",
    "insertText": "FEncryptionKeyResponse() : Response(EEncryptionResponse::Failure)"
  },
  {
    "label": "FEncryptionKeyResponse()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEncryptionKeyResponse(EEncryptionResponse InResponse, const FString& InErrorMsg) : Response(InResponse) , ErrorMsg(InErrorMsg)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EEncryptionFailureAction : uint8 { Default,RejectConnection,AllowConnection } ; enum class ECheatPunishType : uint8 { Unknown,KickClient,KickMatch,PunishInfo } ; const TCHAR* const)",
    "insertText": "LexToString(const ECheatPunishType Response)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (default : break ; })",
    "insertText": "checkf(false, TEXT(\"Missing ECheatPunishType Type: %d\"), static_cast<const int32>(Response))"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnEncryptionKeyResponse, const FEncryptionKeyResponse&)"
  },
  {
    "label": "FNetSyncLoadReport()",
    "kind": "Method",
    "detail": "Function (enum class ENetSyncLoadType : int32 { Unknown,PropertyReference,ActorSpawn } ; struct FNetSyncLoadReport {)",
    "insertText": "FNetSyncLoadReport() : Type(ENetSyncLoadType::Unknown) , NetDriver(nullptr) , OwningObject(nullptr) , Property(nullptr) , LoadedObject(nullptr)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ENetSyncLoadType Type ; const UNetDriver* NetDriver ; const UObject* OwningObject ; const FProperty* Property ; const UObject* LoadedObject ; } ; class FNetDelegates { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FReceivedNetworkEncryptionToken, const FString& , const FOnEncryptionKeyResponse&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FReceivedNetworkEncryptionToken OnReceivedNetworkEncryptionToken ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FReceivedNetworkEncryptionAck, const FOnEncryptionKeyResponse&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (FReceivedNetworkEncryptionAck OnReceivedNetworkEncryptionAck ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(EEncryptionFailureAction, FReceivedNetworkEncryptionFailure, UNetConnection*)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (FReceivedNetworkEncryptionFailure OnReceivedNetworkEncryptionFailure ;)",
    "insertText": "DECLARE_DELEGATE_FourParams(FNetworkCheatDetected, const class FUniqueNetId& , ECheatPunishType , const FString& , const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FNetworkCheatDetected OnNetworkCheatDetected ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPendingNetGameConnectionCreated, UPendingNetGame*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPendingNetGameConnectionCreated OnPendingNetGameConnectionCreated ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSyncLoadDetected, const FNetSyncLoadReport&)"
  }
]