[
  {
    "label": "RTCDeviceTy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTCDeviceTy"
  },
  {
    "label": "RTCDeviceProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTCDeviceProperty"
  },
  {
    "label": "RTCError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RTCError"
  },
  {
    "label": "rtcNewDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" rtcore_common . h \" RTC_NAMESPACE_BEGIN typedef struct RTCDeviceTy* RTCDevice ; RTCDevice)",
    "insertText": "rtcNewDevice(const char* config)"
  },
  {
    "label": "rtcRetainDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtcRetainDevice(RTCDevice device)"
  },
  {
    "label": "rtcReleaseDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtcReleaseDevice(RTCDevice device)"
  },
  {
    "label": "rtcGetDeviceProperty()",
    "kind": "Method",
    "detail": "Function (enum RTCDeviceProperty { RTC_DEVICE_PROPERTY_VERSION = 0,RTC_DEVICE_PROPERTY_VERSION_MAJOR = 1,RTC_DEVICE_PROPERTY_VERSION_MINOR = 2,RTC_DEVICE_PROPERTY_VERSION_PATCH = 3,RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED = 3 2,RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED = 3 3,RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED = 3 4,RTC_DEVICE_PROPERTY_RAY_STREAM_SUPPORTED = 3 5,RTC_DEVICE_PROPERTY_BACKFACE_CULLING_CURVES_ENABLED = 6 3,RTC_DEVICE_PROPERTY_RAY_MASK_SUPPORTED = 6 4,RTC_DEVICE_PROPERTY_BACKFACE_CULLING_ENABLED = 6 5,RTC_DEVICE_PROPERTY_FILTER_FUNCTION_SUPPORTED = 6 6,RTC_DEVICE_PROPERTY_IGNORE_INVALID_RAYS_ENABLED = 6 7,RTC_DEVICE_PROPERTY_COMPACT_POLYS_ENABLED = 6 8,RTC_DEVICE_PROPERTY_TRIANGLE_GEOMETRY_SUPPORTED = 9 6,RTC_DEVICE_PROPERTY_QUAD_GEOMETRY_SUPPORTED = 9 7,RTC_DEVICE_PROPERTY_SUBDIVISION_GEOMETRY_SUPPORTED = 9 8,RTC_DEVICE_PROPERTY_CURVE_GEOMETRY_SUPPORTED = 9 9,RTC_DEVICE_PROPERTY_USER_GEOMETRY_SUPPORTED = 1 0 0,RTC_DEVICE_PROPERTY_POINT_GEOMETRY_SUPPORTED = 1 0 1,RTC_DEVICE_PROPERTY_TASKING_SYSTEM = 1 2 8,RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED = 1 2 9,RTC_DEVICE_PROPERTY_PARALLEL_COMMIT_SUPPORTED = 1 3 0 } ; ssize_t)",
    "insertText": "rtcGetDeviceProperty(RTCDevice device, enum RTCDeviceProperty prop)"
  },
  {
    "label": "rtcSetDeviceProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtcSetDeviceProperty(RTCDevice device, const enum RTCDeviceProperty prop, ssize_t value)"
  },
  {
    "label": "rtcGetDeviceError()",
    "kind": "Method",
    "detail": "Function (enum RTCError { RTC_ERROR_NONE = 0,RTC_ERROR_UNKNOWN = 1,RTC_ERROR_INVALID_ARGUMENT = 2,RTC_ERROR_INVALID_OPERATION = 3,RTC_ERROR_OUT_OF_MEMORY = 4,RTC_ERROR_UNSUPPORTED_CPU = 5,RTC_ERROR_CANCELLED = 6 } ; enum RTCError)",
    "insertText": "rtcGetDeviceError(RTCDevice device)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*RTCErrorFunction)(void* userPtr, enum RTCError code, const char* str)"
  },
  {
    "label": "rtcSetDeviceErrorFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtcSetDeviceErrorFunction(RTCDevice device, RTCErrorFunction error, void* userPtr)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "bool(*RTCMemoryMonitorFunction)(void* ptr, ssize_t bytes, bool post)"
  },
  {
    "label": "rtcSetDeviceMemoryMonitorFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtcSetDeviceMemoryMonitorFunction(RTCDevice device, RTCMemoryMonitorFunction memoryMonitor, void* userPtr)"
  }
]