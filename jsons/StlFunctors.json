[
  {
    "label": "equal_to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equal_to"
  },
  {
    "label": "not_equal_to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "not_equal_to"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_STL_FUNCTORS_H # define EIGEN_STL_FUNCTORS_H namespace Eigen { namespace numext { template<T = void> struct equal_to { typedef bool result_type ; EIGEN_DEVICE_FUNC bool)",
    "insertText": "operator()(const T& lhs, const T& rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (enum { Cost = functor_traits<T>::Cost,PacketAccess = false } ; } ; template<T> struct functor_traits<std::binder1st<T>> { enum { Cost = functor_traits<T>::Cost,PacketAccess = false } ; } ; # endif #)",
    "insertText": "if(EIGEN_COMP_CXXVER < 17)"
  }
]