[
  {
    "label": "TMeshElementArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshElementArrayBase"
  },
  {
    "label": "TMeshElementArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshElementArray"
  },
  {
    "label": "TElementIDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TElementIDs"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshTypes . h \" template<ElementType> class TMeshElementArrayBase { public : FArchive&)",
    "insertText": "operator(FArchive& Ar, TMeshElementArrayBase& Array)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Array . Container .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TBitArray<> AllocatedIndices ; Ar<<AllocatedIndices ; Array . Container .)",
    "insertText": "Empty(AllocatedIndices.Num())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Array . Container .)",
    "insertText": "Insert(It.GetIndex(), ElementType())"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (Ar<<Array . Container [ It .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetMaxIndex()",
    "kind": "Method",
    "detail": "Function (} } else { const int32 MaxIndex = Array . Container .)",
    "insertText": "GetMaxIndex()"
  },
  {
    "label": "AllocatedIndices()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "AllocatedIndices(false, MaxIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MaxAllocatedIndex = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < MaxIndex; ++Index)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (AllocatedIndices [ Index ] = true ; MaxAllocatedIndex = Index ; } } AllocatedIndices .)",
    "insertText": "SetNumUninitialized(MaxAllocatedIndex + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<AllocatedIndices ;)",
    "insertText": "for(auto It = Array.Container.CreateIterator(); It; ++It)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (Ar<<* It ; } } return Ar ; } void)",
    "insertText": "Compact(TSparseArray<int32>& OutIndexRemap)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remap(const TSparseArray<int32>& IndexRemap)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (protected : TSparseArray<ElementType> Container ; } ; template<ElementType,ElementIDType> class TMeshElementArray final : public TMeshElementArrayBase<ElementType> {)",
    "insertText": "static_assert(TIsDerivedFrom<ElementIDType, FElementID>::IsDerived, \"ElementIDType must be derived from FElementID\")"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (using TMeshElementArrayBase<ElementType>::Container ; public : void)",
    "insertText": "Reset(const int32 Elements = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Reserve(Elements)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(const int32 Elements)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ElementIDType)",
    "insertText": "Add()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ElementIDType)",
    "insertText": "Add(typename TTypeTraits<ElementType>::ConstInitType Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ElementIDType)",
    "insertText": "Add(ElementType&& Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "Insert(const ElementIDType ID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Insert(ID.GetValue(), ElementType())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "Insert(const ElementIDType ID, typename TTypeTraits<ElementType>::ConstInitType Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Insert(ID.GetValue(), Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "Insert(const ElementIDType ID, ElementType&& Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Insert(ID.GetValue(), Forward<ElementType>( Element ))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const ElementIDType ID)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "RemoveAt(ID.GetValue())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(const ElementIDType ID)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetArraySize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetArraySize()"
  },
  {
    "label": "GetFirstValidID()",
    "kind": "Method",
    "detail": "Function (} ElementIDType)",
    "insertText": "GetFirstValidID()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(const ElementIDType ID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TMeshElementArray& Array)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (Ar<<static_cast<TMeshElementArrayBase<)",
    "insertText": "ElementType(Array)"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (} class TConstIterator { public :)",
    "insertText": "TConstIterator(typename TSparseArray<ElementType>::TConstIterator&& It ) : Iterator( MoveTemp( It ))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TConstIterator& Lhs, const TConstIterator& Rhs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : TConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "GetElementIDs()",
    "kind": "Method",
    "detail": "Function (} private : const TSparseArray<ElementType>& Array ; } ; TElementIDs)",
    "insertText": "GetElementIDs()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSparseArray<ElementType> NewContainer ; NewContainer .)",
    "insertText": "Reserve(Container.Num())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutIndexRemap .)",
    "insertText": "Empty(Container.GetMaxIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 NewElementIndex = NewContainer .)",
    "insertText": "Add(ElementType())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NewContainer [ NewElementIndex ] =)",
    "insertText": "MoveTemp(*It)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (OutIndexRemap .)",
    "insertText": "Insert(OldElementIndex, NewElementIndex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} Container =)",
    "insertText": "MoveTemp(NewContainer)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSparseArray<ElementType> NewContainer ; NewContainer .)",
    "insertText": "Reserve(IndexRemap.GetMaxIndex())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (const int32 NewElementIndex = IndexRemap [ OldElementIndex ] ; NewContainer .)",
    "insertText": "Insert(NewElementIndex, ElementType())"
  }
]