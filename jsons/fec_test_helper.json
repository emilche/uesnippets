[
  {
    "label": "AugmentedPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AugmentedPacket"
  },
  {
    "label": "MediaPacketGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaPacketGenerator"
  },
  {
    "label": "AugmentedPacketGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AugmentedPacketGenerator"
  },
  {
    "label": "FlexfecPacketGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlexfecPacketGenerator"
  },
  {
    "label": "UlpfecPacketGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecPacketGenerator"
  },
  {
    "label": "MediaPacketGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_FEC_TEST_HELPER_H_ # define MODULES_RTP_RTCP_SOURCE_FEC_TEST_HELPER_H_ # include<memory> # include \" modules / rtp_rtcp / source / forward_error_correction . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" rtc_base / random . h \" namespace webrtc { namespace test { namespace fec { struct AugmentedPacket : public ForwardErrorCorrection::Packet { RTPHeader header ; } ; class MediaPacketGenerator { public :)",
    "insertText": "MediaPacketGenerator(uint32_t min_packet_size, uint32_t max_packet_size, uint32_t ssrc, Random* random)"
  },
  {
    "label": "MediaPacketGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MediaPacketGenerator()"
  },
  {
    "label": "GetNextSeqNum()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetNextSeqNum()"
  },
  {
    "label": "AugmentedPacketGenerator()",
    "kind": "Method",
    "detail": "Function (private : uint32_t min_packet_size_ ; uint32_t max_packet_size_ ; uint32_t ssrc_ ; Random* random_ ; ForwardErrorCorrection::PacketList media_packets_ ; uint16_t next_seq_num_ ; } ; class AugmentedPacketGenerator { public :)",
    "insertText": "AugmentedPacketGenerator(uint32_t ssrc)"
  },
  {
    "label": "NewFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewFrame(size_t num_packets)"
  },
  {
    "label": "NextPacketSeqNum()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "NextPacketSeqNum()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AugmentedPacket>)",
    "insertText": "NextPacket(size_t offset, size_t length)"
  },
  {
    "label": "WriteRtpHeader()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "WriteRtpHeader(const RTPHeader& header, uint8_t* data)"
  },
  {
    "label": "FlexfecPacketGenerator()",
    "kind": "Method",
    "detail": "Function (size_t num_packets_ ; private : uint32_t ssrc_ ; uint16_t seq_num_ ; uint32_t timestamp_ ; } ; class FlexfecPacketGenerator : public AugmentedPacketGenerator { public :)",
    "insertText": "FlexfecPacketGenerator(uint32_t media_ssrc, uint32_t flexfec_ssrc)"
  },
  {
    "label": "BuildFlexfecPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AugmentedPacket>)",
    "insertText": "BuildFlexfecPacket(const ForwardErrorCorrection::Packet& packet)"
  },
  {
    "label": "UlpfecPacketGenerator()",
    "kind": "Method",
    "detail": "Function (private : uint32_t flexfec_ssrc_ ; uint16_t flexfec_seq_num_ ; uint32_t flexfec_timestamp_ ; } ; class UlpfecPacketGenerator : public AugmentedPacketGenerator { public :)",
    "insertText": "UlpfecPacketGenerator(uint32_t ssrc)"
  },
  {
    "label": "BuildMediaRedPacket()",
    "kind": "Method",
    "detail": "Function (RtpPacketReceived)",
    "insertText": "BuildMediaRedPacket(const AugmentedPacket& packet, bool is_recovered)"
  },
  {
    "label": "BuildUlpfecRedPacket()",
    "kind": "Method",
    "detail": "Function (RtpPacketReceived)",
    "insertText": "BuildUlpfecRedPacket(const ForwardErrorCorrection::Packet& packet)"
  }
]