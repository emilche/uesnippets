[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FMergeCoincidentMeshEdges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMergeCoincidentMeshEdges"
  },
  {
    "label": "FMergeCoincidentMeshEdges()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMathSSE . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" SplitAttributeWelder . h \" namespace UE { namespace Geometry { class FDynamicMesh3 ; class FMergeCoincidentMeshEdges { public : const double DEFAULT_TOLERANCE ; FDynamicMesh3* Mesh ; double MergeVertexTolerance = DEFAULT_TOLERANCE ; bool OnlyUniquePairs = false ; double MergeSearchTolerance = 0 ; int32 InitialNumBoundaryEdges = 0 ; int32 FinalNumBoundaryEdges = 0 ; bool bWeldAttrsOnMergedEdges = false ; FSplitAttributeWelder SplitAttributeWelder ; TSet<int32>* EdgesToMerge = nullptr ; public :)",
    "insertText": "FMergeCoincidentMeshEdges(FDynamicMesh3* mesh) : Mesh(mesh)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply()"
  },
  {
    "label": "IsSameEdge()",
    "kind": "Method",
    "detail": "Function (protected : double MergeVtxDistSqr ; bool)",
    "insertText": "IsSameEdge(const FVector3d& a, const FVector3d& b, const FVector3d& c, const FVector3d& d)"
  }
]