[
  {
    "label": "AndroidThunkCpp_IsOculusMobileApplication()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / IConsoleManager . h \" # include \" Misc / CommandLine . h \" # include \" RHI . h \" # if PLATFORM_ANDROID # include \" Android / AndroidPlatformMisc . h \" # if USE_ANDROID_JNI bool)",
    "insertText": "AndroidThunkCpp_IsOculusMobileApplication()"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# endif # endif)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogAndroidWindowUtils, Log, All)"
  },
  {
    "label": "SanitizeAndroidScreenSize()",
    "kind": "Method",
    "detail": "Function (FIntVector2)",
    "insertText": "SanitizeAndroidScreenSize(const FIntVector2&& MaxScreenDims, const FIntVector2&& RequestedScreenDims)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FIntVector2 SanitizedDims ; SanitizedDims .)",
    "insertText": "X(RequestedScreenDims.X / 8)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (SanitizedDims .)",
    "insertText": "Y(RequestedScreenDims.Y / 8)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SanitizedDims . X =)",
    "insertText": "Min(SanitizedDims.X, MaxScreenDims.X)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SanitizedDims . Y =)",
    "insertText": "Min(SanitizedDims.Y, MaxScreenDims.Y)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable* CVarScale =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"r.MobileContentScaleFactor\"))"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float RequestedContentScaleFactor = CVarScale ->)",
    "insertText": "GetFloat()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable* CVarResX =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"r.Mobile.DesiredResX\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable* CVarResY =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"r.Mobile.DesiredResY\"))"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int32 RequestedResX = CVarResX ->)",
    "insertText": "GetInt()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString CmdLineCSF ;)",
    "insertText": "if(FParse::Value(FCommandLine::Get(), TEXT(\"mcsf=\"), CmdLineCSF, false))"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (RequestedContentScaleFactor =)",
    "insertText": "Atof(*CmdLineCSF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FString CmdLineMDRes ;)",
    "insertText": "if(FParse::Value(FCommandLine::Get(), TEXT(\"mobileresx=\"), CmdLineMDRes, false))"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (RequestedResX =)",
    "insertText": "Atoi(*CmdLineMDRes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FParse::Value(FCommandLine::Get(), TEXT(\"mobileresy=\"), CmdLineMDRes, false))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RequestedContentScaleFactor == 0.0f && RequestedResX <= 0 && RequestedResY <= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { int32 Width = InOutScreenWidth ; int32 Height = InOutScreenHeight ;)",
    "insertText": "if(RequestedResX > 0)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (Height = RequestedResX ; Width =)",
    "insertText": "TruncToInt32((float)Height * ((float)InOutScreenWidth / (float)InOutScreenHeight) + 0.5f)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} else { Width = RequestedResX ; Height =)",
    "insertText": "TruncToInt32((float)Width * ((float)InOutScreenHeight / (float)InOutScreenWidth) + 0.5f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(RequestedResY > 0)"
  },
  {
    "label": "AspectRatio()",
    "kind": "Method",
    "detail": "Function (} } else { const float)",
    "insertText": "AspectRatio(float)InOutScreenWidth / (float)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (Height =)",
    "insertText": "TruncToInt32(1280.f * RequestedContentScaleFactor)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} else { Height =)",
    "insertText": "TruncToInt32(720.f * RequestedContentScaleFactor)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} Width =)",
    "insertText": "TruncToInt32((float)Height * AspectRatio + 0.5f)"
  },
  {
    "label": "SanitizeAndroidScreenSize()",
    "kind": "Method",
    "detail": "Function (} const FIntVector2 Sanitized =)",
    "insertText": "SanitizeAndroidScreenSize(FIntVector2(InOutScreenWidth, InOutScreenHeight), FIntVector2(Width, Height))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (InOutScreenWidth = Sanitized . X ; InOutScreenHeight = Sanitized . Y ;)",
    "insertText": "UE_LOG(LogAndroidWindowUtils, Log, TEXT(\"Setting Width=%d and Height=%d (requested scale = %f)\"), InOutScreenWidth, InOutScreenHeight, RequestedContentScaleFactor)"
  }
]