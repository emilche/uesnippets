[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_GENERATE_CANONICAL_H # define _LIBCPP___RANDOM_GENERATE_CANONICAL_H # include<__config> # include<__random / log2 . h> # include<cstdint> # include<initializer_list> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD template<class _RealType, size_t __bits, class _URNG> _RealType generate_canonical(_URNG& __g)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (const size_t _Dt = numeric_limits<_RealType>::digits ; const size_t __b = _Dt<__bits ? _Dt : __bits ; # ifdef _LIBCPP_CXX03_LANG const size_t __logR = __log2<uint64_t,_URNG::_Max - _URNG::_Min +)",
    "insertText": "uint64_t(1)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# else const size_t __logR = __log2<uint64_t,)",
    "insertText": "max() - _URNG::min() + uint64_t(1)"
  },
  {
    "label": "__logR()",
    "kind": "Method",
    "detail": "Function (# endif const size_t __k = __b /)",
    "insertText": "__logR(__b % __logR != 0) + (__b == 0)"
  },
  {
    "label": "_RealType()",
    "kind": "Method",
    "detail": "Function (const _RealType _Rp = static_cast<)",
    "insertText": "_RealType(_URNG::max() - _URNG::min()) + _RealType(1)"
  },
  {
    "label": "__g()",
    "kind": "Method",
    "detail": "Function (_RealType __base = _Rp ; _RealType _Sp =)",
    "insertText": "__g() - _URNG::min()"
  }
]