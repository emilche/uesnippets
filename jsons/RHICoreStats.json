[
  {
    "label": "UpdateGlobalTextureStats()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / PlatformAtomics . h \" # include \" RHIGlobals . h \" # include \" RHIResources . h \" # include \" RHIStats . h \" namespace UE::RHICore { void)",
    "insertText": "UpdateGlobalTextureStats(ETextureCreateFlags TextureFlags, ETextureDimension Dimension, uint64 TextureSizeInBytes, bool bOnlyStreamableTexturesInTexturePool, bool bAllocating)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags AllRenderTargetFlags = ETextureCreateFlags::RenderTargetable | ETextureCreateFlags::ResolveTargetable | ETextureCreateFlags::DepthStencilTargetable ; # if STATS const int64 TextureSizeDeltaInBytes = bAllocating ? static_cast<)",
    "insertText": "int64(TextureSizeInBytes) : -static_cast<int64>(TextureSizeInBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_ReservedUncommittedTextureMemory, TextureSizeDeltaInBytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(TextureFlags, AllRenderTargetFlags))"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case ETextureDimension::Texture2D : [ [ fallthrough ] ] ; case ETextureDimension::Texture2DArray :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_RenderTargetMemory2D, TextureSizeDeltaInBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (break ; case ETextureDimension::Texture3D :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_RenderTargetMemory3D, TextureSizeDeltaInBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (break ; case ETextureDimension::TextureCube : [ [ fallthrough ] ] ; case ETextureDimension::TextureCubeArray :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_RenderTargetMemoryCube, TextureSizeDeltaInBytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } ; } else)",
    "insertText": "if(EnumHasAnyFlags(TextureFlags, ETextureCreateFlags::UAV))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_UAVTextureMemory, TextureSizeDeltaInBytes)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "switch(Dimension)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case ETextureDimension::Texture2D : [ [ fallthrough ] ] ; case ETextureDimension::Texture2DArray :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_TextureMemory2D, TextureSizeDeltaInBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (break ; case ETextureDimension::Texture3D :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_TextureMemory3D, TextureSizeDeltaInBytes)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (break ; case ETextureDimension::TextureCube : [ [ fallthrough ] ] ; case ETextureDimension::TextureCubeArray :)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_TextureMemoryCube, TextureSizeDeltaInBytes)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (break ; } ; } # endif const int64 AlignedTextureSizeInKB = static_cast<)",
    "insertText": "int64(Align(TextureSizeInBytes, 1024) / 1024)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (const int64 TextureSizeDeltaInKB = bAllocating ? AlignedTextureSizeInKB : - AlignedTextureSizeInKB ; const bool bAlwaysExcludedFromStreamingSize =)",
    "insertText": "EnumHasAnyFlags(TextureFlags, AllRenderTargetFlags | ETextureCreateFlags::UAV | ETextureCreateFlags::ForceIntoNonStreamingMemoryTracking)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (const bool bStreamable =)",
    "insertText": "EnumHasAnyFlags(TextureFlags, ETextureCreateFlags::Streamable)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd((volatile int64*)&GRHIGlobals.StreamingTextureMemorySizeInKB, TextureSizeDeltaInKB)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InterlockedAdd((volatile int64*)&GRHIGlobals.NonStreamingTextureMemorySizeInKB, TextureSizeDeltaInKB)"
  },
  {
    "label": "UpdateGlobalTextureStats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateGlobalTextureStats(const FRHITextureDesc& TextureDesc, uint64 TextureSizeInBytes, bool bOnlyStreamableTexturesInTexturePool, bool bAllocating)"
  },
  {
    "label": "FillBaselineTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillBaselineTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "UpdateGlobalBufferStats()",
    "kind": "Method",
    "detail": "Function (OutStats . StreamingMemorySize = GRHIGlobals . StreamingTextureMemorySizeInKB* 1 0 2 4 ; OutStats . NonStreamingMemorySize = GRHIGlobals . NonStreamingTextureMemorySizeInKB* 1 0 2 4 ; OutStats . TexturePoolSize = GRHIGlobals . TexturePoolSize ; } void)",
    "insertText": "UpdateGlobalBufferStats(const FRHIBufferDesc& BufferDesc, int64 BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::ReservedResource))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_ReservedUncommittedBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::VertexBuffer))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_VertexBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::IndexBuffer))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_IndexBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::AccelerationStructure))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_RTAccelerationStructureMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::ByteAddressBuffer))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_ByteAddressBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::DrawIndirect))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_DrawIndirectBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EnumHasAnyFlags(BufferDesc.Usage, EBufferUsageFlags::StructuredBuffer))"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_StructuredBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_MiscBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "InterlockedAdd((volatile int64*)&GRHIGlobals.BufferMemorySize, BufferSizeDelta)"
  },
  {
    "label": "UpdateGlobalBufferStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateGlobalBufferStats(const FRHIBufferDesc& BufferDesc, uint64 BufferSize, bool bAllocating)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 BufferSizeDelta = bAllocating ? static_cast<)",
    "insertText": "int64(BufferSize) : -static_cast<int64>(BufferSize)"
  },
  {
    "label": "UpdateGlobalBufferStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalBufferStats(BufferDesc, BufferSizeDelta)"
  },
  {
    "label": "UpdateGlobalUniformBufferStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateGlobalUniformBufferStats(int64 BufferSize, bool bAllocating)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_UniformBufferMemory, BufferSizeDelta)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd((volatile int64*)&GRHIGlobals.UniformBufferMemorySize, BufferSizeDelta)"
  },
  {
    "label": "UpdateReservedResourceStatsOnCommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateReservedResourceStatsOnCommit(int64 CommitDelta, bool bBuffer, bool bCommitting)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (# if STATS const int64 CommittedDelta = bCommitting ? static_cast<)",
    "insertText": "int64(CommitDelta) : -static_cast<int64>(CommitDelta)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_ReservedCommittedBufferMemory, CommittedDelta)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_ReservedUncommittedBufferMemory, CommittedDelta)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_ReservedCommittedTextureMemory, CommittedDelta)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_ReservedUncommittedTextureMemory, CommittedDelta)"
  }
]