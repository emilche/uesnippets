[
  {
    "label": "BandwidthQualityScalerUsageHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandwidthQualityScalerUsageHandlerInterface"
  },
  {
    "label": "BandwidthQualityScaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandwidthQualityScaler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BandwidthQualityScalerUsageHandlerInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_UTILITY_BANDWIDTH_QUALITY_SCALER_H_ # define MODULES_VIDEO_CODING_UTILITY_BANDWIDTH_QUALITY_SCALER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / video_codecs / video_encoder . h \" # include \" rtc_base / experiments / encoder_info_settings . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / numerics / exp_filter . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / weak_ptr . h \" namespace webrtc { class BandwidthQualityScalerUsageHandlerInterface { public : ~)",
    "insertText": "BandwidthQualityScalerUsageHandlerInterface()"
  },
  {
    "label": "OnReportUsageBandwidthHigh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportUsageBandwidthHigh()"
  },
  {
    "label": "OnReportUsageBandwidthLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportUsageBandwidthLow()"
  },
  {
    "label": "BandwidthQualityScaler()",
    "kind": "Method",
    "detail": "Function (} ; class BandwidthQualityScaler { public :)",
    "insertText": "BandwidthQualityScaler(BandwidthQualityScalerUsageHandlerInterface* handler)"
  },
  {
    "label": "BandwidthQualityScaler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BandwidthQualityScaler()"
  },
  {
    "label": "ReportEncodeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEncodeInfo(int frame_size_bytes, int64_t time_sent_in_ms, uint32_t encoded_width, uint32_t encoded_height)"
  },
  {
    "label": "SetResolutionBitrateLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResolutionBitrateLimits(const std::vector<VideoEncoder::ResolutionBitrateLimits>& resolution_bitrate_limits)"
  },
  {
    "label": "StartCheckForBitrate()",
    "kind": "Method",
    "detail": "Function (const TimeDelta kBitrateStateUpdateInterval ; private : enum class CheckBitrateResult { kInsufficientSamples,kNormalBitrate,kHighBitRate,kLowBitRate,} ; void)",
    "insertText": "StartCheckForBitrate()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker task_checker_ ; BandwidthQualityScalerUsageHandlerInterface* const handler_)",
    "insertText": "RTC_GUARDED_BY(&task_checker_)"
  }
]