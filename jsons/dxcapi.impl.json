[
  {
    "label": "raw_stream_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_stream_ostream"
  },
  {
    "label": "DxcOutputType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DxcOutputType"
  },
  {
    "label": "DxcOutputObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxcOutputObject"
  },
  {
    "label": "DxcExtraOutputObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxcExtraOutputObject"
  },
  {
    "label": "DxcExtraOutputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcExtraOutputs"
  },
  {
    "label": "DxcResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcResult"
  },
  {
    "label": "write_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef __DXCAPI_IMPL__ # define __DXCAPI_IMPL__ # include \" dxc / Support / microcom . h \" # include \" dxc / dxcapi . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Support / raw_ostream . h \" class raw_stream_ostream : public llvm::raw_ostream { private : CComPtr<hlsl::AbstractMemoryStream> m_pStream ; void)",
    "insertText": "write_impl(const char *Ptr, size_t Size)"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (ULONG cbWritten ;)",
    "insertText": "IFT(m_pStream->Write(Ptr, Size, &cbWritten))"
  },
  {
    "label": "current_pos()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "current_pos()"
  },
  {
    "label": "raw_stream_ostream()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "raw_stream_ostream(hlsl::AbstractMemoryStream *pStream) : m_pStream(pStream)"
  },
  {
    "label": "raw_stream_ostream()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "raw_stream_ostream()"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "TranslateUtf8StringForOutput()",
    "kind": "Method",
    "detail": "Function (} } ; namespace { HRESULT)",
    "insertText": "TranslateUtf8StringForOutput(LPCSTR pStr, SIZE_T size, UINT32 codePage, IDxcBlobEncoding **ppBlobEncoding)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(hlsl::DxcCreateBlobWithEncodingOnHeapCopy(pStr, size, DXC_CP_UTF8, &pBlobEncoding))"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobWide> pBlobWide ;)",
    "insertText": "IFT(hlsl::DxcGetBlobAsWide(pBlobEncoding, nullptr, &pBlobWide))"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (}* ppBlobEncoding = pBlobEncoding .)",
    "insertText": "Detach()"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(hlsl::DxcCreateBlobWithEncodingOnHeapCopy(pStr, size, DXC_CP_WIDE, &pBlobEncoding))"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobUtf8> pBlobUtf8 ;)",
    "insertText": "IFT(hlsl::DxcGetBlobAsUtf8(pBlobEncoding, nullptr, &pBlobUtf8))"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pEncoding ;)",
    "insertText": "IFR(pBlob->QueryInterface(&pEncoding))"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (BOOL known ; UINT32 inputCP ;)",
    "insertText": "IFR(pEncoding->GetEncoding(&known, &inputCP))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(inputCP == DXC_CP_WIDE)"
  },
  {
    "label": "DxcGetOutputType()",
    "kind": "Method",
    "detail": "Function (} return E_INVALIDARG ; } } typedef enum DxcOutputType { DxcOutputType_None = 0,DxcOutputType_Blob = 1,DxcOutputType_Text = 2,DxcOutputTypeForceDword = 0 xFFFFFFFF } DxcOutputType ; DxcOutputType)",
    "insertText": "DxcGetOutputType(DXC_OUT_KIND kind)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (const LPCWSTR DxcOutNoName = nullptr ; struct DxcOutputObject { CComPtr<IUnknown> object ; CComPtr<IDxcBlobWide> name ; DXC_OUT_KIND kind = DXC_OUT_NONE ; HRESULT)",
    "insertText": "SetObject(IUnknown *pUnknown, UINT32 codePage = DXC_CP_UTF8)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(!object)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlob> pBlob ;)",
    "insertText": "IFR(pUnknown->QueryInterface(&pBlob))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pEncoding ;)",
    "insertText": "if(FAILED(TranslateStringBlobForOutput(pBlob, codePage, &pEncoding))) IFR(TranslateUtf8StringForOutput((LPCSTR)pBlob->GetBufferPointer(), pBlob->GetBufferSize(), codePage, &pEncoding))"
  },
  {
    "label": "SetObjectData()",
    "kind": "Method",
    "detail": "Function (object = pEncoding ; } else { object = pUnknown ; } return S_OK ; } HRESULT)",
    "insertText": "SetObjectData(LPCVOID pData, SIZE_T size)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (IDxcBlob* pBlob ;)",
    "insertText": "IFR(hlsl::DxcCreateBlobOnHeapCopy(pData, size, &pBlob))"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (object = pBlob ; return S_OK ; } HRESULT)",
    "insertText": "SetString(UINT32 codePage, LPCWSTR pText, SIZE_T size = kAutoSize)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(TranslateWideStringForOutput(pText, size, codePage, &pBlobEncoding))"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (object = pBlobEncoding ; return S_OK ; } HRESULT)",
    "insertText": "SetString(UINT32 codePage, LPCSTR pText, SIZE_T size = kAutoSize)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(TranslateUtf8StringForOutput(pText, size, codePage, &pBlobEncoding))"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (object = pBlobEncoding ; return S_OK ; } HRESULT)",
    "insertText": "SetName(IDxcBlobWide *pName)"
  },
  {
    "label": "DXASSERT_NOMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DXASSERT_NOMSG(!name)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (name = pName ; return S_OK ; } HRESULT)",
    "insertText": "SetName(LPCWSTR pName)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(hlsl::DxcCreateBlobWithEncodingOnHeapCopy( pName, (wcslen(pName) + 1) * sizeof(wchar_t), DXC_CP_WIDE, &pBlobEncoding))"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "SetName(LPCSTR pName)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(TranslateUtf8StringForOutput(pName, strlen(pName) + 1, DXC_CP_WIDE, &pBlobEncoding))"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "SetName(llvm::StringRef Name)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcBlobEncoding> pBlobEncoding ;)",
    "insertText": "IFR(TranslateUtf8StringForOutput(Name.data(), Name.size(), DXC_CP_WIDE, &pBlobEncoding))"
  },
  {
    "label": "StringOutput()",
    "kind": "Method",
    "detail": "Function (} template<DataTy,NameTy> DxcOutputObject)",
    "insertText": "StringOutput(DXC_OUT_KIND kind, UINT32 codePage, DataTy pText, SIZE_T size, NameTy pName)"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject output ; output . kind = kind ;)",
    "insertText": "IFT(output.SetString(codePage, pText, size))"
  },
  {
    "label": "DataOutput()",
    "kind": "Method",
    "detail": "Function (} template<NameTy> DxcOutputObject)",
    "insertText": "DataOutput(DXC_OUT_KIND kind, LPCVOID pData, SIZE_T size, NameTy pName)"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject output ; output . kind = kind ;)",
    "insertText": "IFT(output.SetObjectData(pData, size))"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject output ; output . kind = kind ;)",
    "insertText": "IFT(output.SetObject(pBlob))"
  },
  {
    "label": "DataOutput()",
    "kind": "Method",
    "detail": "Function (} template<NameTy> DxcOutputObject)",
    "insertText": "DataOutput(DXC_OUT_KIND kind, UINT32 codePage, IDxcBlob *pBlob, NameTy pName)"
  },
  {
    "label": "IFT()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject output ; output . kind = kind ;)",
    "insertText": "IFT(output.SetObject(pBlob, codePage))"
  },
  {
    "label": "DataOutput()",
    "kind": "Method",
    "detail": "Function (} DxcOutputObject)",
    "insertText": "DataOutput(DXC_OUT_KIND kind, UINT32 codePage, IUnknown *pBlob)"
  },
  {
    "label": "ErrorOutput()",
    "kind": "Method",
    "detail": "Function (} template<DataTy> DxcOutputObject)",
    "insertText": "ErrorOutput(UINT32 codePage, DataTy pText)"
  },
  {
    "label": "ObjectOutput()",
    "kind": "Method",
    "detail": "Function (} template<NameTy> DxcOutputObject)",
    "insertText": "ObjectOutput(LPCVOID pData, SIZE_T size, NameTy pName)"
  },
  {
    "label": "ObjectOutput()",
    "kind": "Method",
    "detail": "Function (} DxcOutputObject)",
    "insertText": "ObjectOutput(LPCVOID pData, SIZE_T size)"
  },
  {
    "label": "DXC_MICROCOM_TM_REF_FIELDS()",
    "kind": "Method",
    "detail": "Function (} } ; struct DxcExtraOutputObject { CComPtr<IDxcBlobWide> pType ; CComPtr<IDxcBlobWide> pName ; CComPtr<IUnknown> pObject ; } ; class DxcExtraOutputs : public IDxcExtraOutputs {)",
    "insertText": "DXC_MICROCOM_TM_REF_FIELDS()"
  },
  {
    "label": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL()",
    "kind": "Method",
    "detail": "Function (UINT32 m_uCount = 0 ; public :)",
    "insertText": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL() DXC_MICROCOM_TM_CTOR(DxcExtraOutputs) ~DxcExtraOutputs()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "QueryInterface(REFIID iid, void **ppvObject)"
  },
  {
    "label": "GetOutputCount()",
    "kind": "Method",
    "detail": "Function (} UINT32 STDMETHODCALLTYPE)",
    "insertText": "GetOutputCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DxcExtraOutputObject* pObject =& m_Objects [ uIndex ] ;)",
    "insertText": "if(ppOutputType)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (* ppOutputType = nullptr ;)",
    "insertText": "IFR(pObject->pType.CopyTo(ppOutputType))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ppOutputName)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (* ppOutputName = nullptr ;)",
    "insertText": "IFR(pObject->pName.CopyTo(ppOutputName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ppvObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* ppvObject = nullptr ;)",
    "insertText": "if(pObject->pObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_uCount = 0 ;)",
    "insertText": "if(m_Objects)"
  },
  {
    "label": "SetOutputs()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_Objects ; m_Objects = nullptr ; } } void)",
    "insertText": "SetOutputs(const llvm::ArrayRef<DxcExtraOutputObject> outputs)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (m_uCount = outputs .)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_Objects = new DxcExtraOutputObject [ m_uCount ] ;)",
    "insertText": "for(UINT32 i = 0; i < outputs.size(); i++)"
  },
  {
    "label": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject m_outputs [ kNumDxcOutputTypes ] ; DXC_OUT_KIND m_resultType = DXC_OUT_NONE ; UINT32 m_textEncoding = DXC_CP_UTF8 ; public :)",
    "insertText": "DXC_MICROCOM_TM_ADDREF_RELEASE_IMPL() DXC_MICROCOM_TM_CTOR(DxcResult) HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void **ppvObject)"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "GetStatus(HRESULT *pStatus)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (* pStatus = m_status ; return S_OK ; } HRESULT STDMETHODCALLTYPE)",
    "insertText": "GetResult(IDxcBlob **ppResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* ppResult = nullptr ;)",
    "insertText": "if(m_resultType == DXC_OUT_NONE)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject* pObject =)",
    "insertText": "Output(m_resultType)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (* ppErrors = nullptr ; DxcOutputObject* pObject =)",
    "insertText": "Output(DXC_OUT_ERRORS)"
  },
  {
    "label": "GetOutput()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "GetOutput(DXC_OUT_KIND dxcOutKind, REFIID iid, void **ppvObject, IDxcBlobWide **ppOutputName)"
  },
  {
    "label": "m_outputs()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject& object =)",
    "insertText": "m_outputs(unsigned)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (object . name .)",
    "insertText": "CopyTo(ppOutputName)"
  },
  {
    "label": "GetNumOutputs()",
    "kind": "Method",
    "detail": "Function (} return S_OK ; } UINT32)",
    "insertText": "GetNumOutputs()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UINT32 numOutputs = 0 ;)",
    "insertText": "for(unsigned i = 0; i < kNumDxcOutputTypes; ++i)"
  },
  {
    "label": "GetOutputByIndex()",
    "kind": "Method",
    "detail": "Function (} return numOutputs ; } DXC_OUT_KIND)",
    "insertText": "GetOutputByIndex(UINT32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UINT32 numOutputs = 0 ; unsigned i = 0 ;)",
    "insertText": "for(; i < kNumDxcOutputTypes; ++i)"
  },
  {
    "label": "PrimaryOutput()",
    "kind": "Method",
    "detail": "Function (} return DXC_OUT_NONE ; } DXC_OUT_KIND)",
    "insertText": "PrimaryOutput()"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (m_textEncoding = textEncoding ; return S_OK ; } DxcOutputObject*)",
    "insertText": "Output(DXC_OUT_KIND kind)"
  },
  {
    "label": "ClearOutput()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "ClearOutput(DXC_OUT_KIND kind)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (output . kind = DXC_OUT_NONE ; output . object .)",
    "insertText": "Release()"
  },
  {
    "label": "SetStatusAndPrimaryResult()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "SetStatusAndPrimaryResult(HRESULT status, DXC_OUT_KIND resultType = DXC_OUT_NONE)"
  },
  {
    "label": "SetOutput()",
    "kind": "Method",
    "detail": "Function (m_status = status ; m_resultType = resultType ; return S_OK ; } HRESULT)",
    "insertText": "SetOutput(const DxcOutputObject &output)"
  },
  {
    "label": "SetOutputObject()",
    "kind": "Method",
    "detail": "Function (internalOutput = output ; return S_OK ; } HRESULT)",
    "insertText": "SetOutputObject(DXC_OUT_KIND kind, IUnknown *pObject)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (output . kind = kind ; output .)",
    "insertText": "SetObject(pObject, m_textEncoding)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (output . kind = kind ; output .)",
    "insertText": "SetString(m_textEncoding, pString, size)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Output(kind)->SetName(Name)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const DxcOutputObject& output = outputs .)",
    "insertText": "data()"
  },
  {
    "label": "CopyOutputsFromResult()",
    "kind": "Method",
    "detail": "Function (} return S_OK ; } HRESULT)",
    "insertText": "CopyOutputsFromResult(IDxcResult *pResult)"
  },
  {
    "label": "kind()",
    "kind": "Method",
    "detail": "Function (DxcOutputObject& output = m_outputs [ i ] ; DXC_OUT_KIND)",
    "insertText": "kind(DXC_OUT_KIND)(i + 1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (output . kind = kind ; } } return S_OK ; } HRESULT)",
    "insertText": "Init(HRESULT status, DXC_OUT_KIND resultType, const llvm::ArrayRef<DxcOutputObject> outputs)"
  },
  {
    "label": "SetOutputs()",
    "kind": "Method",
    "detail": "Function (m_status = status ; m_resultType = resultType ; return)",
    "insertText": "SetOutputs(outputs)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "Create(HRESULT status, DXC_OUT_KIND resultType, const DxcOutputObject *pOutputs, unsigned numOutputs, IDxcResult **ppResult)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (* ppResult = nullptr ; CComPtr<DxcResult> result =)",
    "insertText": "Alloc(DxcGetThreadMallocNoRef())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "Create(HRESULT status, DXC_OUT_KIND resultType, const llvm::ArrayRef<DxcOutputObject> outputs, IDxcOperationResult **ppResult)"
  },
  {
    "label": "IFR()",
    "kind": "Method",
    "detail": "Function (IDxcResult* pResult ;)",
    "insertText": "IFR(Create(status, resultType, outputs.data(), outputs.size(), &pResult))"
  }
]