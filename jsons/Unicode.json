[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "__code_point_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__code_point_view"
  },
  {
    "label": "__extended_grapheme_cluster_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__extended_grapheme_cluster_view"
  },
  {
    "label": "__cluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__cluster"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_UNICODE_H # define _LIBCPP___FORMAT_UNICODE_H # include<__assert> # include<__config> # include<__format / extended_grapheme_cluster_table . h> # include<__utility / unreachable . h> # include<bit> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__is_continuation()",
    "kind": "Method",
    "detail": "Function (char32_t __replacement_character = U ' \\ ufffd ' ; _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__is_continuation(const char* __char, int __count)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (- - __count ; + + __char ; })",
    "insertText": "while(__count)"
  },
  {
    "label": "__at_end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__at_end()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__first_ != __last_, \"can't move beyond the end of input\")"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__value<<= 6 ; __value | = static_cast<unsigned)",
    "insertText": "char(*__first_++)"
  },
  {
    "label": "__position()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI const wchar_t*)",
    "insertText": "__position()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char32_t __result =* __first_ + + ;)",
    "insertText": "if(__result >= 0xd800 && __result <= 0xDfff)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (__result - = 0 xd800 ; __result<<= 1 0 ; __result + =* __first_ + + - 0 xdc00 ; __result + = 0 x10000 ; } return __result ; } else if)",
    "insertText": "constexpr(sizeof(wchar_t) == 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char32_t __result =* __first_ + + ;)",
    "insertText": "if(__result > 0x10FFFF)"
  },
  {
    "label": "__libcpp_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__libcpp_unreachable()"
  },
  {
    "label": "__at_extended_grapheme_cluster_break()",
    "kind": "Method",
    "detail": "Function (} } private : const wchar_t* __first_ ; const wchar_t* __last_ ; } ; # endif _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__at_extended_grapheme_cluster_break(bool& __ri_break_allowed, bool __has_extened_pictographic, __extended_grapheme_custer_property_boundary::__property __prev, __extended_grapheme_custer_property_boundary::__property __next)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (using __extended_grapheme_custer_property_boundary::__property ; __has_extened_pictographic | = __prev = = __property::__Extended_Pictographic ;)",
    "insertText": "_LIBCPP_ASSERT(__prev != __property::__sot, \"should be handled in the constructor\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__prev != __property::__eot, \"should be handled by our caller\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__ri_break_allowed = ! __ri_break_allowed ;)",
    "insertText": "if(__ri_break_allowed)"
  },
  {
    "label": "__consume()",
    "kind": "Method",
    "detail": "Function (} struct __cluster { char32_t __code_point_ ; const _CharT* __last_ ; } ; _LIBCPP_HIDE_FROM_ABI __cluster)",
    "insertText": "__consume()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__next_prop_ != __extended_grapheme_custer_property_boundary::__property::__eot, \"can't move beyond the end of input\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char32_t __code_point = __next_code_point_ ;)",
    "insertText": "if(!__code_point_view_.__at_end())"
  },
  {
    "label": "__get_break()",
    "kind": "Method",
    "detail": "Function (__code_point,)",
    "insertText": "__get_break()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool __ri_break_allowed = true ; bool __has_extened_pictographic = false ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__extended_grapheme_custer_property_boundary::__property __prev = __next_prop_ ;)",
    "insertText": "if(__code_point_view_.__at_end())"
  },
  {
    "label": "__get_property()",
    "kind": "Method",
    "detail": "Function (__next_prop_ =)",
    "insertText": "__get_property(__next_code_point_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__has_extened_pictographic | = __prev = = __extended_grapheme_custer_property_boundary::__property::__Extended_Pictographic ;)",
    "insertText": "if(__at_extended_grapheme_cluster_break(__ri_break_allowed, __has_extened_pictographic, __prev, __next_prop_))"
  }
]