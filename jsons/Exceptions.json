[
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_EXCEPTIONS_HAS_BEEN_INCLUDED # define OPENVDB_EXCEPTIONS_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<exception> # include<sstream> # include<string> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { class Exception : public std::exception { public :)",
    "insertText": "Exception(const Exception&)"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exception(Exception&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Exception&)",
    "insertText": "operator(const Exception&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Exception&)",
    "insertText": "operator(Exception&&)"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Exception()"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "what()"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (try { return mMessage .)",
    "insertText": "c_str()"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Exception(const char* eType, const std::string* const msg = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (try {)",
    "insertText": "if(eType)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (} } private : std::string mMessage ; } ; # define)",
    "insertText": "OPENVDB_EXCEPTION(_classname)"
  },
  {
    "label": "_classname()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "_classname() noexcept: Exception( #_classname)"
  },
  {
    "label": "_classname()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "_classname(const std::string& msg) noexcept: Exception( #_classname , &msg)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (} \\ })",
    "insertText": "OPENVDB_EXCEPTION(ArithmeticError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(IndexError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(IoError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(KeyError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(LookupError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(NotImplementedError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(ReferenceError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(RuntimeError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(TypeError)"
  },
  {
    "label": "OPENVDB_EXCEPTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_EXCEPTION(ValueError)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (# undef OPENVDB_EXCEPTION } } # define)",
    "insertText": "OPENVDB_THROW(exception, message)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (\\ std::string _openvdb_throw_msg ; \\ try { \\ std::ostringstream _openvdb_throw_os ; \\ _openvdb_throw_os<<message ; \\ _openvdb_throw_msg = _openvdb_throw_os .)",
    "insertText": "str()"
  },
  {
    "label": "exception()",
    "kind": "Method",
    "detail": "Function (} \\ throw)",
    "insertText": "exception(_openvdb_throw_msg)"
  }
]