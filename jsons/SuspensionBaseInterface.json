[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "TraceDir()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosEngineInterface . h \" # include \" SimModule / SimulationModuleBase . h \" namespace Chaos { struct FSpringTrace { FVector Start ; FVector End ; FVector)",
    "insertText": "TraceDir()"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Dir(End - Start)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Length()"
  },
  {
    "label": "FSuspensionTargetPoint()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSuspensionTargetPoint {)",
    "insertText": "FSuspensionTargetPoint()"
  },
  {
    "label": "FSuspensionTargetPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSuspensionTargetPoint(const FVector& InTargetPosition, const FVector& InImpactNormal, const float InHitDistance, const bool bInWheelInContact, const TEnumAsByte<EPhysicalSurface> InSurfaceType) : TargetPosition(InTargetPosition) , ImpactNormal(InImpactNormal) , HitDistance(InHitDistance) , bWheelInContact(bInWheelInContact) , SurfaceType(InSurfaceType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (Ar<<TargetPosition ; Ar<<ImpactNormal ; Ar<<HitDistance ; Ar<<bWheelInContact ; Ar<<SurfaceType ; } FVector TargetPosition = FVector::ZeroVector ; FVector ImpactNormal = FVector::ZeroVector ; float HitDistance = 0 . 0 f ; bool bWheelInContact = false ; TEnumAsByte<EPhysicalSurface> SurfaceType = EPhysicalSurface::SurfaceType_Default ; } ; class FSuspensionBaseInterface : public ISimulationModuleBase,public TSimulationModuleTypeable<FSuspensionBaseInterface> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FSuspensionBaseInterface)"
  },
  {
    "label": "FSuspensionBaseInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSuspensionBaseInterface()"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "GetMaxSpringLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxSpringLength()"
  },
  {
    "label": "GetSpringLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSpringLength()"
  },
  {
    "label": "SetSpringLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpringLength(float InLength, float WheelRadius)"
  },
  {
    "label": "GetWorldRaycastLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorldRaycastLocation(const FTransform& BodyTransform, float WheelRadius, FSpringTrace& OutTrace)"
  },
  {
    "label": "SetTargetPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetPoint(const FSuspensionTargetPoint& InTargetPoint)"
  },
  {
    "label": "GetTargetPoint()",
    "kind": "Method",
    "detail": "Function (const FSuspensionTargetPoint&)",
    "insertText": "GetTargetPoint()"
  },
  {
    "label": "GetWheelSimTreeIndex()",
    "kind": "Method",
    "detail": "Function (WheelSimTreeIndex = WheelTreeIndexIn ; } int)",
    "insertText": "GetWheelSimTreeIndex()"
  },
  {
    "label": "GetImpactNormal()",
    "kind": "Method",
    "detail": "Function (TargetPoint . ImpactNormal = NewValue ; } const FVector&)",
    "insertText": "GetImpactNormal()"
  },
  {
    "label": "GetHitDistance()",
    "kind": "Method",
    "detail": "Function (TargetPoint . HitDistance = NewValue ; } float)",
    "insertText": "GetHitDistance()"
  },
  {
    "label": "GetTargetPosition()",
    "kind": "Method",
    "detail": "Function (TargetPoint . TargetPosition = NewValue ; } const FVector&)",
    "insertText": "GetTargetPosition()"
  }
]