[
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_ThreadTypes . h \" # include \" Windows / WindowsHWrapper . h \" namespace Thread { namespace Current { void)",
    "insertText": "SetName(const char* name)"
  },
  {
    "label": "SleepSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepSeconds(unsigned int seconds)"
  },
  {
    "label": "SleepMilliSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepMilliSeconds(unsigned int milliSeconds)"
  },
  {
    "label": "Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Yield(void)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "GetId(void)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} Handle)",
    "insertText": "Create(unsigned int stackSize, Function function, void* context)"
  },
  {
    "label": "CreateFromFunction()",
    "kind": "Method",
    "detail": "Function (template<F,. . . Args> Handle)",
    "insertText": "CreateFromFunction(const char* threadName, unsigned int stackSize, F ptrToFunction, Args&&... args)"
  },
  {
    "label": "CreateFromMemberFunction()",
    "kind": "Method",
    "detail": "Function (template<class C,F,. . . Args> Handle)",
    "insertText": "CreateFromMemberFunction(const char* threadName, unsigned int stackSize, C* instance, F ptrToMemberFunction, Args&&... args)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join(Handle handle)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate(Handle handle)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "Open(Id threadId)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(Handle& handle)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend(Handle handle)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume(Handle handle)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPriority(Handle handle, int priority)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPriority(Handle handle)"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContext(Handle handle, const Context* context)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (Context)",
    "insertText": "GetContext(Handle handle)"
  },
  {
    "label": "ReadInstructionPointer()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "ReadInstructionPointer(const Context* context)"
  },
  {
    "label": "WriteInstructionPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInstructionPointer(Context* context, const void* ip)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "GetId(Handle handle)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (Thread::ReturnValue)",
    "insertText": "args()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (Thread::)",
    "insertText": "SetName(threadName)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; typedef)",
    "insertText": "decltype(captureLambda)"
  },
  {
    "label": "CaptureLambdaType()",
    "kind": "Method",
    "detail": "Function (CaptureLambdaType* lambdaOnHeap = new)",
    "insertText": "CaptureLambdaType(captureLambda)"
  },
  {
    "label": "capturelessLambda()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "capturelessLambda(void* lambdaContext)"
  },
  {
    "label": "CaptureLambdaType()",
    "kind": "Method",
    "detail": "Function (CaptureLambdaType* lambdaOnHeap = static_cast<)",
    "insertText": "CaptureLambdaType(lambdaContext)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (const Thread::ReturnValue)",
    "insertText": "result(*lambdaOnHeap)()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (delete lambdaOnHeap ; return + result ; } ; Thread::Function threadFunction = capturelessLambda ; Thread::Handle handle =)",
    "insertText": "Create(stackSize, threadFunction, lambdaOnHeap)"
  }
]