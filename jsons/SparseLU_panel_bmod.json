[
  {
    "label": "panel_bmod()",
    "kind": "Method",
    "detail": "Function (# ifndef SPARSELU_PANEL_BMOD_H # define SPARSELU_PANEL_BMOD_H namespace Eigen { namespace internal { template<Scalar,StorageIndex> void SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "panel_bmod(const Index m, const Index w, const Index jcol, const Index nseg, ScalarVector& dense, ScalarVector& tempv, IndexVector& segrep, IndexVector& repfnz, GlobalLU_t& glu)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index ksub,jj,nextl_col ; Index fsupc,nsupc,nsupr,nrow ; Index krep,kfnz ; Index lptr ; Index luptr ; Index segsize,no_zeros ; Index k = nseg - 1 ; const Index PacketSize = internal::packet_traits<Scalar>::size ;)",
    "insertText": "for(ksub = 0; ksub < nseg; ksub++)"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (krep =)",
    "insertText": "segrep(k)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (k - - ; fsupc = glu .)",
    "insertText": "xsup(glu.supno(krep))"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (nsupc = krep - fsupc + 1 ; nsupr = glu .)",
    "insertText": "xlsub(fsupc+1) - glu.xlsub(fsupc)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (nrow = nsupr - nsupc ; lptr = glu .)",
    "insertText": "xlsub(fsupc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index u_rows = 0 ; Index u_cols = 0 ;)",
    "insertText": "for(jj = jcol; jj < jcol + w; jj++)"
  },
  {
    "label": "nextl_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nextl_col(jj-jcol)"
  },
  {
    "label": "repfnz_col()",
    "kind": "Method",
    "detail": "Function (VectorBlock<IndexVector>)",
    "insertText": "repfnz_col(repfnz, nextl_col, m)"
  },
  {
    "label": "repfnz_col()",
    "kind": "Method",
    "detail": "Function (kfnz =)",
    "insertText": "repfnz_col(krep)"
  },
  {
    "label": "u_rows()",
    "kind": "Method",
    "detail": "Function (segsize = krep - kfnz + 1 ; u_cols + + ;)",
    "insertText": "u_rows(std::max)(segsize,u_rows)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(nsupc >= 2)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index ldu = internal::first_multiple<)",
    "insertText": "Index(u_rows, PacketSize)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (Map<ScalarMatrix,Aligned,OuterStride<>>)",
    "insertText": "U(tempv.data(), u_rows, u_cols, OuterStride<>(ldu))"
  },
  {
    "label": "dense_col()",
    "kind": "Method",
    "detail": "Function (VectorBlock<ScalarVector>)",
    "insertText": "dense_col(dense, nextl_col, m)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (segsize = krep - kfnz + 1 ; luptr = glu .)",
    "insertText": "xlusup(fsupc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (no_zeros = kfnz - fsupc ; Index isub = lptr + no_zeros ; Index off = u_rows - segsize ;)",
    "insertText": "for(Index i = 0; i < off; i++) U(i,u_col)"
  },
  {
    "label": "lsub()",
    "kind": "Method",
    "detail": "Function (Index irow = glu .)",
    "insertText": "lsub(isub)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "U(i+off,u_col) = dense_col(irow)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (Index lda = glu .)",
    "insertText": "xlusup(fsupc+1) - glu.xlusup(fsupc)"
  },
  {
    "label": "no_zeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "no_zeros(krep - u_rows + 1)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (luptr + = lda* no_zeros + no_zeros ; MappedMatrixBlock)",
    "insertText": "A(glu.lusup.data()+luptr, u_rows, u_rows, OuterStride<>(lda))"
  },
  {
    "label": "UnitLower()",
    "kind": "Method",
    "detail": "Function (U = A . template triangularView<)",
    "insertText": "UnitLower().solve(U)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (luptr + = u_rows ; MappedMatrixBlock)",
    "insertText": "B(glu.lusup.data()+luptr, nrow, u_rows, OuterStride<>(lda))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(tempv.size()>w*ldu + nrow*w + 1)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index ldl = internal::first_multiple<)",
    "insertText": "Index(nrow, PacketSize)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "offset(PacketSize-internal::first_default_aligned(B.data(), PacketSize))"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (MappedMatrixBlock)",
    "insertText": "L(tempv.data()+w*ldu+offset, nrow, u_cols, OuterStride<>(ldl))"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (L .)",
    "insertText": "setZero()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (internal::sparselu_gemm<)",
    "insertText": "Scalar(L.rows(), L.cols(), B.cols(), B.data(), B.outerStride(), U.data(), U.outerStride(), L.data(), L.outerStride())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (segsize = krep - kfnz + 1 ; no_zeros = kfnz - fsupc ; Index isub = lptr + no_zeros ; Index off = u_rows - segsize ;)",
    "insertText": "for(Index i = 0; i < segsize; i++)"
  },
  {
    "label": "lsub()",
    "kind": "Method",
    "detail": "Function (Index irow = glu .)",
    "insertText": "lsub(isub++)"
  },
  {
    "label": "dense_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dense_col(irow) = U.coeff(i+off,u_col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (U .)",
    "insertText": "coeffRef(i+off,u_col)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = 0; i < nrow; i++)"
  },
  {
    "label": "dense_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dense_col(irow) -= L.coeff(i,u_col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (L .)",
    "insertText": "coeffRef(i,u_col)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (Index lda = glu .)",
    "insertText": "xlusup(fsupc+1)-glu.xlusup(fsupc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (no_zeros = kfnz - fsupc ;)",
    "insertText": "if(segsize==1) LU_kernel_bmod<1>::run(segsize, dense_col, tempv, glu.lusup, luptr, lda, nrow, glu.lsub, lptr, no_zeros)"
  }
]