[
  {
    "label": "DispatchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatchData"
  },
  {
    "label": "DispatchList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatchList"
  },
  {
    "label": "bend_min()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace Bend { struct DispatchData { int WaveCount [ 3 ] ; int WaveOffset_Shader [ 2 ] ; } ; struct DispatchList { float LightCoordinate_Shader [ 4 ] ; DispatchData Dispatch [ 8 ] ; int DispatchCount ; } ; int)",
    "insertText": "bend_min(const int a, const int b)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (DispatchList result = { } ; float xy_light_w = inLightProjection [ 3 ] ; float FP_limit = 0 . 0 0 0 0 0 2)",
    "insertText": "f(float)"
  },
  {
    "label": "LightCoordinate_Shader()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "LightCoordinate_Shader((inLightProjection[0] / xy_light_w) * +0.5f + 0.5f) * (float)"
  },
  {
    "label": "LightCoordinate_Shader()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "LightCoordinate_Shader((inLightProjection[1] / xy_light_w) * -0.5f + 0.5f) * (float)"
  },
  {
    "label": "inLightProjection()",
    "kind": "Method",
    "detail": "Function (result . LightCoordinate_Shader [ 2 ] =)",
    "insertText": "inLightProjection(inLightProjection[2] / inLightProjection[3])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result . LightCoordinate_Shader [ 3 ] = inLightProjection [ 3 ]> 0 ? 1 : - 1 ;)",
    "insertText": "if(inExpandedZRange)"
  },
  {
    "label": "light_xy()",
    "kind": "Method",
    "detail": "Function (result . LightCoordinate_Shader [ 2 ] = result . LightCoordinate_Shader [ 2 ]* 0 . 5 f + 0 . 5 f ; } int)",
    "insertText": "light_xy(int)(result.LightCoordinate_Shader[0] + 0.5f), (int)(result.LightCoordinate_Shader[1] + 0.5f)"
  },
  {
    "label": "light_xy()",
    "kind": "Method",
    "detail": "Function (const int biased_bounds [ 4 ] = { inMinRenderBounds [ 0 ] -)",
    "insertText": "light_xy(inMaxRenderBounds[1] - light_xy[1]), inMaxRenderBounds[0] - light_xy[0], -(inMinRenderBounds[1] - light_xy[1])"
  },
  {
    "label": "bend_max()",
    "kind": "Method",
    "detail": "Function (bool vertical = q = = 0 | | q = = 3 ; const int bounds [ 4 ] = {)",
    "insertText": "bend_max(0, ((q & 1) ? biased_bounds[0] : -biased_bounds[2])) / inWaveSize, bend_max(0, ((q & 2) ? biased_bounds[1] : -biased_bounds[3])) / inWaveSize, bend_max(0, (((q & 1) ? biased_bounds[2] : -biased_bounds[0]) + inWaveSize * (vertical ? 1 : 2) - 1)) / inWaveSize, bend_max(0, (((q & 2) ? biased_bounds[3] : -biased_bounds[1]) + inWaveSize * (vertical ? 2 : 1) - 1))"
  },
  {
    "label": "bias_x()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bias_x(q == 2 || q == 3)"
  },
  {
    "label": "bias_y()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bias_y(q == 1 || q == 3)"
  },
  {
    "label": "WaveOffset_Shader()",
    "kind": "Method",
    "detail": "Function (DispatchData& disp = result . Dispatch [ result . DispatchCount + + ] ; disp . WaveCount [ 0 ] = inWaveSize ; disp . WaveCount [ 1 ] = bounds [ 2 ] - bounds [ 0 ] ; disp . WaveCount [ 2 ] = bounds [ 3 ] - bounds [ 1 ] ; disp .)",
    "insertText": "WaveOffset_Shader((q & 1) ? bounds[0] : -bounds[2])"
  },
  {
    "label": "WaveOffset_Shader()",
    "kind": "Method",
    "detail": "Function (disp .)",
    "insertText": "WaveOffset_Shader((q & 2) ? -bounds[3] : bounds[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int axis_delta = + biased_bounds [ 0 ] - biased_bounds [ 1 ] ;)",
    "insertText": "if(q == 1)"
  },
  {
    "label": "axis_delta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "axis_delta(axis_delta + inWaveSize - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DispatchData& disp2 = result . Dispatch [ result . DispatchCount + + ] ; disp2 = disp ;)",
    "insertText": "if(q == 0)"
  },
  {
    "label": "bend_min()",
    "kind": "Method",
    "detail": "Function (disp2 . WaveCount [ 2 ] =)",
    "insertText": "bend_min(disp.WaveCount[2], axis_delta)"
  },
  {
    "label": "bend_min()",
    "kind": "Method",
    "detail": "Function (disp2 . WaveCount [ 1 ] =)",
    "insertText": "bend_min(disp.WaveCount[1], axis_delta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (disp . WaveCount [ 1 ] - = disp2 . WaveCount [ 1 ] ; disp2 . WaveOffset_Shader [ 0 ] = disp . WaveOffset_Shader [ 0 ] + disp . WaveCount [ 1 ] ; disp2 . WaveCount [ 2 ] + + ; })",
    "insertText": "if(q == 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (disp . WaveCount [ 1 ] - = disp2 . WaveCount [ 1 ] ; disp . WaveOffset_Shader [ 0 ] + = disp2 . WaveCount [ 1 ] ; disp2 . WaveCount [ 2 ] + + ; disp2 . WaveOffset_Shader [ 1 ] - - ; })",
    "insertText": "if(q == 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (disp . WaveCount [ 2 ] - = disp2 . WaveCount [ 2 ] ; disp . WaveOffset_Shader [ 1 ] + = disp2 . WaveCount [ 2 ] ; disp2 . WaveCount [ 1 ] + + ; })",
    "insertText": "if(disp2.WaveCount[1] <= 0 || disp2.WaveCount[2] <= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (disp2 = result . Dispatch [ - - result . DispatchCount ] ; })",
    "insertText": "if(disp.WaveCount[1] <= 0 || disp.WaveCount[2] <= 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (disp = result . Dispatch [ - - result . DispatchCount ] ; } } } })",
    "insertText": "for(int i = 0; i < result.DispatchCount; i++)"
  }
]