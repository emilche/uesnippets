[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FVertexFactoryShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexFactoryShaderPermutationParameters"
  },
  {
    "label": "FVertexInputStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexInputStream"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVertexFactoryShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryShaderParameters"
  },
  {
    "label": "FShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterMap"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FMeshMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShader"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "FMeshBatchElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElement"
  },
  {
    "label": "TVertexFactoryParameterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVertexFactoryParameterTraits"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FVertexFactoryTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryTypeDependency"
  },
  {
    "label": "FCompareVertexFactoryTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompareVertexFactoryTypes"
  },
  {
    "label": "FVertexStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexStream"
  },
  {
    "label": "FPrimitiveIdDummyBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveIdDummyBuffer"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / List . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / SecureHash . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" RenderResource . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryImage . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderCore . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" VertexStreamComponent . h \" # include<atomic> class FCbFieldView ; class FCbWriter ; class FMaterial ; class FMeshDrawSingleShaderBindings ; class FPrimitiveSceneProxy ; struct FVertexFactoryShaderPermutationParameters ; # if PLATFORM_SUPPORTS_PRAGMA_PACK # pragma)",
    "insertText": "pack(push,4)"
  },
  {
    "label": "SetOnRHICommandList()",
    "kind": "Method",
    "detail": "Function (uint32 StreamIndex : 4 ; uint32 Offset : 2 7 ; uint32 bStreamSourceSlot : 1 ; union { FRHIBuffer* VertexBuffer ; FRHIStreamSourceSlot* StreamSourceSlot ; void* Pointer ; } ; void)",
    "insertText": "SetOnRHICommandList(FRHICommandList& RHICmdList)"
  },
  {
    "label": "FVertexInputStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexInputStream() : StreamIndex(0), Offset(0), bStreamSourceSlot(0), VertexBuffer(nullptr)"
  },
  {
    "label": "FVertexInputStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexInputStream(uint32 InStreamIndex, uint32 InOffset, nullptr_t) : StreamIndex(InStreamIndex), Offset(InOffset), bStreamSourceSlot(0), VertexBuffer(nullptr)"
  },
  {
    "label": "FVertexInputStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexInputStream(uint32 InStreamIndex, uint32 InOffset, FRHIStreamSourceSlot* InStreamSourceSlot) : StreamIndex(InStreamIndex), Offset(InOffset), bStreamSourceSlot(1), StreamSourceSlot(InStreamSourceSlot)"
  },
  {
    "label": "FVertexInputStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexInputStream(uint32 InStreamIndex, uint32 InOffset, FRHIBuffer* InVertexBuffer) : StreamIndex(InStreamIndex), Offset(InOffset), bStreamSourceSlot(0), VertexBuffer(InVertexBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVertexInputStream& rhs)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} } ; # if PLATFORM_SUPPORTS_PRAGMA_PACK # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EVertexStreamUsage)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EVertexInputStreamType : uint8 { Default = 0,PositionOnly,PositionAndNormalOnly,Count } ; enum class EVertexFactoryFlags : uint32 { None = 0 u,UsedWithMaterials = 1 u<<1,SupportsStaticLighting = 1 u<<2,SupportsDynamicLighting = 1 u<<3,SupportsPrecisePrevWorldPos = 1 u<<4,SupportsPositionOnly = 1 u<<5,SupportsCachingMeshDrawCommands = 1 u<<6,SupportsPrimitiveIdStream = 1 u<<7,SupportsNaniteRendering = 1 u<<8,SupportsRayTracing = 1 u<<9,SupportsRayTracingDynamicGeometry = 1 u<<1 0,SupportsRayTracingProceduralPrimitive = 1 u<<1 1,SupportsLightmapBaking = 1 u<<1 2,SupportsPSOPrecaching = 1 u<<1 3,SupportsManualVertexFetch = 1 u<<1 4,DoesNotSupportNullPixelShader = 1 u<<1 5,SupportsGPUSkinPassThrough = 1 u<<1 6,SupportsComputeShading = 1 u<<1 7,SupportsLumenMeshCards = 1 u<<1 8,SupportsLandscape = 1 u<<1 9,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EVertexFactoryFlags)"
  },
  {
    "label": "STRUCTMEMBER_VERTEXSTREAMCOMPONENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STRUCTMEMBER_VERTEXSTREAMCOMPONENT(VertexBuffer,VertexType,Member,MemberType) \\ FVertexStreamComponent(VertexBuffer,STRUCT_OFFSET(VertexType,Member),sizeof(VertexType),MemberType)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FVertexFactoryShaderParameters, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const class FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetElementShaderBindings(const class FSceneInterface* Scene, const class FSceneView* View, const class FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const class FVertexFactory* VertexFactory, const struct FMeshBatchElement& BatchElement, class FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(uint32, Size_DEPRECATED, 0u)"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (} ; template<EShaderFrequency ShaderFrequency,VertexFactoryType> struct TVertexFactoryParameterTraits { const FTypeLayoutDesc*)",
    "insertText": "GetLayout()"
  },
  {
    "label": "IMPLEMENT_VERTEX_FACTORY_PARAMETER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "IMPLEMENT_VERTEX_FACTORY_PARAMETER_TYPE(FactoryClass, ShaderFrequency, ParameterClass)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} \\ FVertexFactoryShaderParameters*)",
    "insertText": "Create(const class FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "ParameterClass()",
    "kind": "Method",
    "detail": "Function (ParameterClass* Result = new)",
    "insertText": "ParameterClass()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Result ->)",
    "insertText": "Bind(ParameterMap)"
  },
  {
    "label": "ParameterClass()",
    "kind": "Method",
    "detail": "Function (\\ static_cast<const)",
    "insertText": "ParameterClass(Parameters)->GetElementShaderBindings(Scene, View, Shader, InputStreamType, FeatureLevel, VertexFactory, BatchElement, ShaderBindings, VertexStreams)"
  },
  {
    "label": "GetVertexFactoryParametersLayout()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } template<VertexFactoryType> const FTypeLayoutDesc*)",
    "insertText": "GetVertexFactoryParametersLayout(EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Mesh : TVertexFactoryParameterTraits<SF_Mesh,VertexFactoryType)",
    "insertText": "GetElementShaderBindings(Parameters, Scene, View, Shader, InputStreamType, FeatureLevel, VertexFactory, BatchElement, ShaderBindings, VertexStreams)"
  },
  {
    "label": "FVertexFactoryShaderParameters()",
    "kind": "Method",
    "detail": "Function (break ; } } class FVertexFactoryType { public : typedef)",
    "insertText": "FVertexFactoryShaderParameters(*ConstructParametersType)(EShaderFrequency ShaderFrequency, const class FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "FTypeLayoutDesc()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "FTypeLayoutDesc(*GetParameterTypeLayoutType)(EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*GetParameterTypeElementShaderBindingsType)(EShaderFrequency ShaderFrequency, const FVertexFactoryShaderParameters* Parameters, const class FSceneInterface* Scene, const class FSceneView* View, const class FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const class FVertexFactory* VertexFactory, const struct FMeshBatchElement& BatchElement, class FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*GetPSOPrecacheVertexFetchElementsType)(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "bool(*ShouldCacheType)(const FVertexFactoryShaderPermutationParameters&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR typedef)",
    "insertText": "void(*ModifyCompilationEnvironmentType)(const FVertexFactoryShaderPermutationParameters&, FShaderCompilerEnvironment&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ValidateCompiledResultType)(const FVertexFactoryType*, EShaderPlatform, const FShaderParameterMap& ParameterMap, TArray<FString>& OutErrors)"
  },
  {
    "label": "GetNumVertexFactoryTypes()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumVertexFactoryTypes()"
  },
  {
    "label": "GetSortedMaterialTypes()",
    "kind": "Method",
    "detail": "Function (const TArray<FVertexFactoryType*>&)",
    "insertText": "GetSortedMaterialTypes()"
  },
  {
    "label": "GetVFByName()",
    "kind": "Method",
    "detail": "Function (FVertexFactoryType*)",
    "insertText": "GetVFByName(const FHashedName& VFName)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TMap<FString, TArray<const TCHAR*> >& ShaderFileToUniformBufferVariables)"
  },
  {
    "label": "FVertexFactoryType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexFactoryType(const TCHAR* InName, const TCHAR* InShaderFilename, EVertexFactoryFlags InFlags, ConstructParametersType InConstructParameters, GetParameterTypeLayoutType InGetParameterTypeLayout, GetParameterTypeElementShaderBindingsType InGetParameterTypeElementShaderBindings, GetPSOPrecacheVertexFetchElementsType InGetPSOPrecacheVertexFetchElements, ShouldCacheType InShouldCache #if WITH_EDITOR , ModifyCompilationEnvironmentType InModifyCompilationEnvironment , ValidateCompiledResultType InValidateCompiledResult #endif)"
  },
  {
    "label": "FVertexFactoryType()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVertexFactoryType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetShaderParameterLayout()",
    "kind": "Method",
    "detail": "Function (} const FTypeLayoutDesc*)",
    "insertText": "GetShaderParameterLayout(EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "GetShaderParameterElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderParameterElementShaderBindings(EShaderFrequency ShaderFrequency, const FVertexFactoryShaderParameters* Parameters, const class FSceneInterface* Scene, const class FSceneView* View, const class FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const class FVertexFactory* VertexFactory, const struct FMeshBatchElement& BatchElement, class FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "GetShaderPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} EVertexFactoryFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "IsUsedWithMaterials()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsedWithMaterials()"
  },
  {
    "label": "SupportsStaticLighting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsStaticLighting()"
  },
  {
    "label": "SupportsDynamicLighting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsDynamicLighting()"
  },
  {
    "label": "SupportsPrecisePrevWorldPos()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPrecisePrevWorldPos()"
  },
  {
    "label": "SupportsPositionOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPositionOnly()"
  },
  {
    "label": "SupportsCachingMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsCachingMeshDrawCommands()"
  },
  {
    "label": "SupportsPrimitiveIdStream()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPrimitiveIdStream()"
  },
  {
    "label": "SupportsNaniteRendering()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsNaniteRendering()"
  },
  {
    "label": "SupportsRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsRayTracing()"
  },
  {
    "label": "SupportsRayTracingDynamicGeometry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsRayTracingDynamicGeometry()"
  },
  {
    "label": "SupportsRayTracingProceduralPrimitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsRayTracingProceduralPrimitive()"
  },
  {
    "label": "SupportsLightmapBaking()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsLightmapBaking()"
  },
  {
    "label": "SupportsPSOPrecaching()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPSOPrecaching()"
  },
  {
    "label": "SupportsNullPixelShader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsNullPixelShader()"
  },
  {
    "label": "SupportsGPUSkinPassThrough()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsGPUSkinPassThrough()"
  },
  {
    "label": "SupportsComputeShading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsComputeShading()"
  },
  {
    "label": "SupportsLumenMeshCards()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsLumenMeshCards()"
  },
  {
    "label": "SupportsLandscape()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsLandscape()"
  },
  {
    "label": "SupportsManualVertexFetch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsManualVertexFetch(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "CheckManualVertexFetchSupport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckManualVertexFetchSupport(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FVertexFactoryType* Type)"
  },
  {
    "label": "GetSourceHash()",
    "kind": "Method",
    "detail": "Function (} const FSHAHash&)",
    "insertText": "GetSourceHash(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ShouldCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCache(const FVertexFactoryShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString VertexFactoryIncludeString =)",
    "insertText": "Printf(TEXT(\"#include \\\"%s\\\"\"), GetShaderFilename())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . IncludeVirtualPathToContentsMap .)",
    "insertText": "Add(TEXT(\"/Engine/Generated/VertexFactory.ush\"), VertexFactoryIncludeString)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HAS_PRIMITIVE_UNIFORM_BUFFER\"), 1)"
  },
  {
    "label": "ValidateCompiledResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateCompiledResult(EShaderPlatform Platform, const FShaderParameterMap& ParameterMap, TArray<FString>& OutErrors)"
  },
  {
    "label": "AddUniformBufferIncludesToEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUniformBufferIncludesToEnvironment(FShaderCompilerEnvironment& OutEnvironment, EShaderPlatform Platform)"
  },
  {
    "label": "GetReferencedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (TSet<const TCHAR*,TStringPointerSetKeyFuncs_DEPRECATED<const TCHAR*>> EmptySet ; return EmptySet ; } ; const TSet<const FShaderParametersMetadata*>&)",
    "insertText": "GetReferencedUniformBuffers()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif private : uint32 NumVertexFactories ; bool bInitializedSerializationHistory ; const TCHAR* Name ; const TCHAR* ShaderFilename ; FName ; FHashedName HashedName ; EVertexFactoryFlags Flags ; ConstructParametersType ConstructParameters ; GetParameterTypeLayoutType GetParameterTypeLayout ; GetParameterTypeElementShaderBindingsType GetParameterTypeElementShaderBindings ; GetPSOPrecacheVertexFetchElementsType GetPSOPrecacheVertexFetchElements ; ShouldCacheType ShouldCacheRef ; # if WITH_EDITOR ModifyCompilationEnvironmentType ModifyCompilationEnvironmentRef ; ValidateCompiledResultType ValidateCompiledResultRef ; # endif TLinkedList<FVertexFactoryType*> GlobalListLink ; # if WITH_EDITOR TSet<const FShaderParametersMetadata*> ReferencedUniformBuffers ; # endif } ; FArchive&)",
    "insertText": "operator(FArchive& Ar,FVertexFactoryType*& TypeRef)"
  },
  {
    "label": "FindVertexFactoryType()",
    "kind": "Method",
    "detail": "Function (FVertexFactoryType*)",
    "insertText": "FindVertexFactoryType(const FHashedName& TypeName)"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE(FactoryClass)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (\\ FVertexFactoryType*)",
    "insertText": "GetType()"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE_API()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE_API(FactoryClass, ModuleApi)"
  },
  {
    "label": "IMPLEMENT_VERTEX_FACTORY_EDITOR_VTABLE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR # define)",
    "insertText": "IMPLEMENT_VERTEX_FACTORY_EDITOR_VTABLE(FactoryClass) \\ , FactoryClass::ModifyCompilationEnvironment \\ , FactoryClass::ValidateCompiledResult #else #define IMPLEMENT_VERTEX_FACTORY_EDITOR_VTABLE(FactoryClass) #endif #define IMPLEMENT_VERTEX_FACTORY_VTABLE(FactoryClass) \\ &ConstructVertexFactoryParameters<FactoryClass>, \\ &GetVertexFactoryParametersLayout<FactoryClass>, \\ &GetVertexFactoryParametersElementShaderBindings<FactoryClass>, \\ FactoryClass::GetPSOPrecacheVertexFetchElements, \\ FactoryClass::ShouldCompilePermutation \\ IMPLEMENT_VERTEX_FACTORY_EDITOR_VTABLE(FactoryClass) #define IMPLEMENT_VERTEX_FACTORY_TYPE(FactoryClass, ShaderFilename, Flags) \\ FVertexFactoryType FactoryClass::StaticType( \\ TEXT(#FactoryClass), \\ TEXT(ShaderFilename), \\ Flags, \\ IMPLEMENT_VERTEX_FACTORY_VTABLE(FactoryClass) \\)"
  },
  {
    "label": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_REMOVE_OPTIONAL_PARENS(TemplatePrefix) FVertexFactoryType* FactoryClass::GetType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FHashedName VertexFactoryTypeName ; FSHAHash VFSourceHash ; FArchive&)",
    "insertText": "operator(FArchive& Ar,class FVertexFactoryTypeDependency& Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Ref . VertexFactoryTypeName<<Ref . VFSourceHash ; return Ar ; } bool)",
    "insertText": "operator(const FVertexFactoryTypeDependency& Reference)"
  },
  {
    "label": "RefreshCachedSourceHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshCachedSourceHash(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FCbFieldView Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FVertexFactoryTypeDependency& Value)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Save(Writer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FCompareVertexFactoryTypes { public : bool)",
    "insertText": "operator()(const FVertexFactoryType& A, const FVertexFactoryType& B)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 AL =)",
    "insertText": "Strlen(A.GetName())"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 BL =)",
    "insertText": "Strlen(B.GetName())"
  },
  {
    "label": "FVertexFactory()",
    "kind": "Method",
    "detail": "Function (} return AL> BL ; } } ; class FVertexFactory : public FRenderResource { public :)",
    "insertText": "FVertexFactory(ERHIFeatureLevel::Type InFeatureLevel) : FRenderResource(InFeatureLevel)"
  },
  {
    "label": "OffsetInstanceStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetInstanceStreams(uint32 InstanceOffset, EVertexInputStreamType VertexStreamType, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "ValidateCompiledResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateCompiledResult(const FVertexFactoryType* Type, EShaderPlatform Platform, const FShaderParameterMap& ParameterMap, TArray<FString>& OutErrors)"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef&)",
    "insertText": "GetDeclaration()"
  },
  {
    "label": "GetDeclaration()",
    "kind": "Method",
    "detail": "Function (Declaration = NewDeclaration ; } const FVertexDeclarationRHIRef&)",
    "insertText": "GetDeclaration(EVertexInputStreamType InputStreamType)"
  },
  {
    "label": "SupportsPositionAndNormalOnlyStream()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPositionAndNormalOnlyStream()"
  },
  {
    "label": "IsCoarseProxyMesh()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsCoarseProxyMesh()"
  },
  {
    "label": "GetPrimitiveIdStreamIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPrimitiveIdStreamIndex(const FStaticFeatureLevel InFeatureLevel, EVertexInputStreamType InputStreamType)"
  },
  {
    "label": "SupportsGPUScene()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsGPUScene(const FStaticFeatureLevel InFeatureLevel)"
  },
  {
    "label": "SetPrimitiveIdStreamIndex()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetPrimitiveIdStreamIndex(const FStaticFeatureLevel InFeatureLevel, EVertexInputStreamType InputStreamType, int32 StreamIndex)"
  },
  {
    "label": "TranslatePrimitiveIdStreamIndex()",
    "kind": "Method",
    "detail": "Function (PrimitiveIdStreamIndex [)",
    "insertText": "TranslatePrimitiveIdStreamIndex(InFeatureLevel, InputStreamType)] = static_cast<int8>(StreamIndex)"
  },
  {
    "label": "AddPrimitiveIdStreamElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddPrimitiveIdStreamElement(EVertexInputStreamType InputStreamType, FVertexDeclarationElementList& Elements, uint8 AttributeIndex, uint8 AttributeIndex_Mobile)"
  },
  {
    "label": "AccessStreamComponent()",
    "kind": "Method",
    "detail": "Function (FVertexElement)",
    "insertText": "AccessStreamComponent(const FVertexStreamComponent& Component, uint8 AttributeIndex)"
  },
  {
    "label": "AccessStreamComponent()",
    "kind": "Method",
    "detail": "Function (} FVertexElement)",
    "insertText": "AccessStreamComponent(const FVertexStreamComponent& Component, uint8 AttributeIndex, EVertexInputStreamType InputStreamType)"
  },
  {
    "label": "AccessStreamComponent()",
    "kind": "Method",
    "detail": "Function (template<VertexStreamListType> FVertexElement)",
    "insertText": "AccessStreamComponent(const FVertexStreamComponent& Component, uint8 AttributeIndex, VertexStreamListType& InOutStreams)"
  },
  {
    "label": "FVertexElement()",
    "kind": "Method",
    "detail": "Function (FVertexStream VertexStream ; VertexStream . VertexBuffer = Component . VertexBuffer ; VertexStream . Stride = Component . Stride ; VertexStream . Offset = Component . StreamOffset ; VertexStream . VertexStreamUsage = Component . VertexStreamUsage ; return)",
    "insertText": "FVertexElement((uint8)InOutStreams.AddUnique(VertexStream), Component.Offset, Component.Type, AttributeIndex, VertexStream.Stride, EnumHasAnyFlags(EVertexStreamUsage::Instancing, VertexStream.VertexStreamUsage))"
  },
  {
    "label": "InitDeclaration()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDeclaration(const FVertexDeclarationElementList& Elements, EVertexInputStreamType StreamType = EVertexInputStreamType::Default)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FVertexStream { const FVertexBuffer* VertexBuffer = nullptr ; uint32 Offset = 0 ; uint16 Stride = 0 ; EVertexStreamUsage VertexStreamUsage = EVertexStreamUsage::Default ; uint8 Padding = 0 ; bool)",
    "insertText": "operator(const FVertexStream& A,const FVertexStream& B)"
  },
  {
    "label": "PrimitiveIdStreamIndex()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TArray<FVertexStream,TInlineAllocator<8>> FVertexStreamList ; FVertexStreamList Streams ; private : TArray<FVertexStream,TInlineAllocator<2>> PositionStream ; TArray<FVertexStream,TInlineAllocator<3>> PositionAndNormalStream ; FVertexDeclarationRHIRef Declaration ; FVertexDeclarationRHIRef PositionDeclaration ; FVertexDeclarationRHIRef PositionAndNormalDeclaration ; # if WITH_EDITOR int8)",
    "insertText": "PrimitiveIdStreamIndex(int32)"
  },
  {
    "label": "TranslatePrimitiveIdStreamIndex()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool bNeedsDeclaration = true ; private : int32)",
    "insertText": "TranslatePrimitiveIdStreamIndex(const FStaticFeatureLevel InFeatureLevel, EVertexInputStreamType InputStreamType)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return static_cast<)",
    "insertText": "int32(InputStreamType) + (InFeatureLevel <= ERHIFeatureLevel::ES3_1 ? static_cast<int32>(EVertexInputStreamType::Count) : 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "int32(InputStreamType)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (# endif } } ; class FPrimitiveIdDummyBuffer : public FVertexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (VertexBufferSRV .)",
    "insertText": "SafeRelease()"
  }
]