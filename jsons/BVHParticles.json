[
  {
    "label": "OBJECT_ARRAY",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OBJECT_ARRAY"
  },
  {
    "label": "LEAF_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEAF_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBoundingVolumeHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBoundingVolumeHierarchy"
  },
  {
    "label": "TAABB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAABB"
  },
  {
    "label": "FBVHParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBVHParticles"
  },
  {
    "label": "FBVHParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Particles . h \" # include \" ChaosArchive . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { int32 CollisionParticlesBVHDepth ; template<class OBJECT_ARRAY,class LEAF_TYPE,class T,int d> class TBoundingVolumeHierarchy ; template<class OBJECT_ARRAY,class LEAF_TYPE,class T,int d> class TBoundingVolumeHierarchy ; template<class T,int d> class TAABB ; class FBVHParticles final : public FParticles { public : using TArrayCollection::Size ; using FParticles::X ; using FParticles::AddParticles ;)",
    "insertText": "FBVHParticles()"
  },
  {
    "label": "FBVHParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBVHParticles(FBVHParticles&& Other)"
  },
  {
    "label": "FBVHParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBVHParticles(FParticles&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBVHParticles&)",
    "insertText": "operator(const FBVHParticles& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBVHParticles&)",
    "insertText": "operator(FBVHParticles&& Other)"
  },
  {
    "label": "NewCopy()",
    "kind": "Method",
    "detail": "Function (FBVHParticles*)",
    "insertText": "NewCopy()"
  },
  {
    "label": "UpdateAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateAccelerationStructures()"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>)",
    "insertText": "FindAllIntersections(const FAABB3& Object)"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (FBVHParticles*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, FBVHParticles* BVHParticles)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FBVHParticles()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FBVHParticles(const FBVHParticles& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBoundingVolumeHierarchy<FParticles,TArray<int32>,FReal,3>* MBVH ; } ; FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, FBVHParticles& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  }
]