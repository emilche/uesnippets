[
  {
    "label": "VpxScaleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VpxScaleBase"
  },
  {
    "label": "VpxScaleBase()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_VPX_SCALE_TEST_H_ # define VPX_TEST_VPX_SCALE_TEST_H_ # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" . / vpx_config . h \" # include \" . / vpx_scale_rtcd . h \" # include \" test / acm_random . h \" # include \" test / clear_system_state . h \" # include \" test / register_state_check . h \" # include \" vpx_mem / vpx_mem . h \" # include \" vpx_scale / yv12config . h \" using libvpx_test::ACMRandom ; namespace libvpx_test { class VpxScaleBase { public : ~)",
    "insertText": "VpxScaleBase()"
  },
  {
    "label": "ClearSystemState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSystemState()"
  },
  {
    "label": "ResetImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetImage(YV12_BUFFER_CONFIG *const img, const int width, const int height)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(img, 0, sizeof(*img))"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(0, vp8_yv12_alloc_frame_buffer(img, width, height, VP8BORDERINPIXELS))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(img->buffer_alloc, kBufFiller, img->frame_size)"
  },
  {
    "label": "ResetImages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetImages(const int width, const int height)"
  },
  {
    "label": "ResetImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImage(&img_, width, height)"
  },
  {
    "label": "ResetImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImage(&ref_img_, width, height)"
  },
  {
    "label": "ResetImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImage(&dst_img_, width, height)"
  },
  {
    "label": "FillPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlane(img_.y_buffer, img_.y_crop_width, img_.y_crop_height, img_.y_stride)"
  },
  {
    "label": "FillPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlane(img_.u_buffer, img_.uv_crop_width, img_.uv_crop_height, img_.uv_stride)"
  },
  {
    "label": "FillPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlane(img_.v_buffer, img_.uv_crop_width, img_.uv_crop_height, img_.uv_stride)"
  },
  {
    "label": "ResetScaleImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetScaleImage(YV12_BUFFER_CONFIG *const img, const int width, const int height)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH)",
    "insertText": "ASSERT_EQ(0, vpx_alloc_frame_buffer(img, width, height, 1, 1, 0, VP9_ENC_BORDER_IN_PIXELS, 0))"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "ASSERT_EQ(0, vpx_alloc_frame_buffer(img, width, height, 1, 1, VP9_ENC_BORDER_IN_PIXELS, 0))"
  },
  {
    "label": "ResetScaleImages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetScaleImages(const int src_width, const int src_height, const int dst_width, const int dst_height)"
  },
  {
    "label": "ResetScaleImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetScaleImage(&img_, src_width, src_height)"
  },
  {
    "label": "ResetScaleImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetScaleImage(&ref_img_, dst_width, dst_height)"
  },
  {
    "label": "ResetScaleImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetScaleImage(&dst_img_, dst_width, dst_height)"
  },
  {
    "label": "FillPlaneExtreme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlaneExtreme(img_.y_buffer, img_.y_crop_width, img_.y_crop_height, img_.y_stride)"
  },
  {
    "label": "FillPlaneExtreme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlaneExtreme(img_.u_buffer, img_.uv_crop_width, img_.uv_crop_height, img_.uv_stride)"
  },
  {
    "label": "FillPlaneExtreme()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillPlaneExtreme(img_.v_buffer, img_.uv_crop_width, img_.uv_crop_height, img_.uv_stride)"
  },
  {
    "label": "DeallocImages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeallocImages()"
  },
  {
    "label": "vp8_yv12_de_alloc_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_yv12_de_alloc_frame_buffer(&img_)"
  },
  {
    "label": "vp8_yv12_de_alloc_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_yv12_de_alloc_frame_buffer(&ref_img_)"
  },
  {
    "label": "vp8_yv12_de_alloc_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_yv12_de_alloc_frame_buffer(&dst_img_)"
  },
  {
    "label": "DeallocScaleImages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeallocScaleImages()"
  },
  {
    "label": "vpx_free_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free_frame_buffer(&img_)"
  },
  {
    "label": "vpx_free_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free_frame_buffer(&ref_img_)"
  },
  {
    "label": "vpx_free_frame_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free_frame_buffer(&dst_img_)"
  },
  {
    "label": "FillPlane()",
    "kind": "Method",
    "detail": "Function (} protected : const int kBufFiller = 1 2 3 ; const int kBufMax = kBufFiller - 1 ; void)",
    "insertText": "FillPlane(uint8_t *const buf, const int width, const int height, const int stride)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (buf [)",
    "insertText": "x(y * stride)] = (x + (width * y))"
  },
  {
    "label": "FillPlaneExtreme()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "FillPlaneExtreme(uint8_t *const buf, const int width, const int height, const int stride)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ACMRandom rnd ;)",
    "insertText": "for(int y = 0; y < height; ++y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (buf [)",
    "insertText": "x(y * stride)] = rnd.Rand8()"
  },
  {
    "label": "ExtendPlane()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ExtendPlane(uint8_t *buf, int crop_width, int crop_height, int width, int height, int stride, int padding)"
  },
  {
    "label": "padding()",
    "kind": "Method",
    "detail": "Function (uint8_t* left = buf - padding ; uint8_t* right = buf + crop_width ; const int right_extend =)",
    "insertText": "padding(width - crop_width)"
  },
  {
    "label": "padding()",
    "kind": "Method",
    "detail": "Function (const int bottom_extend =)",
    "insertText": "padding(height - crop_height)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(left, left[padding], padding)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(right, right[-1], right_extend)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (left + = stride ; right + = stride ; } left = buf - padding ; uint8_t* top =)",
    "insertText": "left(stride * padding)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int extend_width = padding + crop_width + right_extend ;)",
    "insertText": "for(int y = 0; y < padding; ++y)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(top, left, extend_width)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (top + = stride ; } uint8_t* bottom =)",
    "insertText": "left(crop_height * stride)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(bottom, left + (crop_height - 1) * stride, extend_width)"
  },
  {
    "label": "ReferenceExtendBorder()",
    "kind": "Method",
    "detail": "Function (bottom + = stride ; } } void)",
    "insertText": "ReferenceExtendBorder()"
  },
  {
    "label": "ExtendPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendPlane(ref_img_.y_buffer, ref_img_.y_crop_width, ref_img_.y_crop_height, ref_img_.y_width, ref_img_.y_height, ref_img_.y_stride, ref_img_.border)"
  },
  {
    "label": "ExtendPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendPlane(ref_img_.u_buffer, ref_img_.uv_crop_width, ref_img_.uv_crop_height, ref_img_.uv_width, ref_img_.uv_height, ref_img_.uv_stride, ref_img_.border / 2)"
  },
  {
    "label": "ExtendPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendPlane(ref_img_.v_buffer, ref_img_.uv_crop_width, ref_img_.uv_crop_height, ref_img_.uv_width, ref_img_.uv_height, ref_img_.uv_stride, ref_img_.border / 2)"
  },
  {
    "label": "ReferenceCopyFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReferenceCopyFrame()"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(ref_img_.frame_size, img_.frame_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ref_img_ . y_buffer [ x + y* ref_img_ . y_stride ] = img_ . y_buffer [ x + y* img_ . y_stride ] ; } })",
    "insertText": "for(int y = 0; y < img_.uv_crop_height; ++y)"
  },
  {
    "label": "CompareImages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompareImages(const YV12_BUFFER_CONFIG actual)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(ref_img_.frame_size, actual.frame_size)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(0, memcmp(ref_img_.buffer_alloc, actual.buffer_alloc, ref_img_.frame_size))"
  }
]