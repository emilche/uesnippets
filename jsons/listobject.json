[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_CPYTHON_LISTOBJECT_H # error \" this header file must not be included directly \" # endif typedef struct { PyObject_VAR_HEAD PyObject** ob_item ; Py_ssize_t allocated ; } PyListObject ;)",
    "insertText": "PyAPI_FUNC(PyObject *) _PyList_Extend(PyListObject *, PyObject *)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyList_DebugMallocStats(FILE *out)"
  },
  {
    "label": "_PyList_CAST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_PyList_CAST(op) \\ (assert(PyList_Check(op)), _Py_CAST(PyListObject*, (op))) static inline Py_ssize_t PyList_GET_SIZE(PyObject *op)"
  },
  {
    "label": "_PyList_CAST()",
    "kind": "Method",
    "detail": "Function (PyListObject* list =)",
    "insertText": "_PyList_CAST(op)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000 # define PyList_GET_SIZE(op) PyList_GET_SIZE(_PyObject_CAST(op)) #endif #define PyList_GET_ITEM(op, index) (_PyList_CAST(op)->ob_item[index]) static inline void PyList_SET_ITEM(PyObject *op, Py_ssize_t index, PyObject *value)"
  }
]