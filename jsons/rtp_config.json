[
  {
    "label": "RtpPayloadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpPayloadState"
  },
  {
    "label": "LntfConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LntfConfig"
  },
  {
    "label": "NackConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NackConfig"
  },
  {
    "label": "UlpfecConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UlpfecConfig"
  },
  {
    "label": "RtpConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpConfig"
  },
  {
    "label": "Flexfec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Flexfec"
  },
  {
    "label": "Rtx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rtx"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RTP_CONFIG_H_ # define CALL_RTP_CONFIG_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / rtp_headers . h \" # include \" api / rtp_parameters . h \" namespace webrtc { struct RtpPayloadState { int16_t picture_id = - 1 ; uint8_t tl0_pic_idx = 0 ; int64_t shared_frame_id = 0 ; } ; struct LntfConfig { std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "NackConfig()",
    "kind": "Method",
    "detail": "Function (bool enabled { false } ; } ; struct NackConfig {)",
    "insertText": "NackConfig() : rtp_history_ms(0)"
  },
  {
    "label": "UlpfecConfig()",
    "kind": "Method",
    "detail": "Function (int rtp_history_ms ; } ; struct UlpfecConfig {)",
    "insertText": "UlpfecConfig() : ulpfec_payload_type(-1), red_payload_type(-1), red_rtx_payload_type(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const UlpfecConfig& other)"
  },
  {
    "label": "RtpConfig()",
    "kind": "Method",
    "detail": "Function (int ulpfec_payload_type ; int red_payload_type ; int red_rtx_payload_type ; } ; const size_t kDefaultMaxPacketSize = 1 5 0 0 - 4 0 ; struct RtpConfig {)",
    "insertText": "RtpConfig()"
  },
  {
    "label": "RtpConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpConfig(const RtpConfig&)"
  },
  {
    "label": "Flexfec()",
    "kind": "Method",
    "detail": "Function (std::vector<uint32_t> ssrcs ; std::vector<std::string> rids ; std::string mid ; RtcpMode rtcp_mode = RtcpMode::kCompound ; size_t max_packet_size = kDefaultMaxPacketSize ; bool extmap_allow_mixed = false ; std::vector<RtpExtension> extensions ; std::string payload_name ; int payload_type = - 1 ; bool raw_payload = false ; LntfConfig lntf ; NackConfig nack ; UlpfecConfig ulpfec ; struct Flexfec {)",
    "insertText": "Flexfec()"
  },
  {
    "label": "Flexfec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flexfec(const Flexfec&)"
  },
  {
    "label": "Rtx()",
    "kind": "Method",
    "detail": "Function (int payload_type = - 1 ; uint32_t ssrc = 0 ; std::vector<uint32_t> protected_media_ssrcs ; } flexfec ; struct Rtx {)",
    "insertText": "Rtx()"
  },
  {
    "label": "Rtx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rtx(const Rtx&)"
  },
  {
    "label": "IsMediaSsrc()",
    "kind": "Method",
    "detail": "Function (std::vector<uint32_t> ssrcs ; int payload_type = - 1 ; } rtx ; std::string c_name ; bool)",
    "insertText": "IsMediaSsrc(uint32_t ssrc)"
  },
  {
    "label": "IsRtxSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRtxSsrc(uint32_t ssrc)"
  },
  {
    "label": "IsFlexfecSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlexfecSsrc(uint32_t ssrc)"
  },
  {
    "label": "GetRtxSsrcAssociatedWithMediaSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetRtxSsrcAssociatedWithMediaSsrc(uint32_t media_ssrc)"
  },
  {
    "label": "GetMediaSsrcAssociatedWithRtxSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetMediaSsrcAssociatedWithRtxSsrc(uint32_t rtx_ssrc)"
  },
  {
    "label": "GetMediaSsrcAssociatedWithFlexfecSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetMediaSsrcAssociatedWithFlexfecSsrc(uint32_t flexfec_ssrc)"
  },
  {
    "label": "GetRidForSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetRidForSsrc(uint32_t ssrc)"
  }
]