[
  {
    "label": "FBlake3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlake3"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UPropertyWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPropertyWrapper"
  },
  {
    "label": "ELifetimeCondition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELifetimeCondition"
  },
  {
    "label": "CGetTypeHashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CGetTypeHashable"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FNumericProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNumericProperty"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FPropertyTypeName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTypeName"
  },
  {
    "label": "FPropertyTypeNameBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTypeNameBuilder"
  },
  {
    "label": "FPropertyStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyStack"
  },
  {
    "label": "FSchemaBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchemaBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPropertyVisitorPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyVisitorPath"
  },
  {
    "label": "EPropertyExportCPPFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPropertyExportCPPFlags"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FProperty_DoNotUse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty_DoNotUse"
  },
  {
    "label": "FDefinedProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefinedProperty"
  },
  {
    "label": "FMapProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMapProperty"
  },
  {
    "label": "UEProperty_Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEProperty_Private"
  },
  {
    "label": "FObjectInstancingGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectInstancingGraph"
  },
  {
    "label": "FPropertyHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyHelpers"
  },
  {
    "label": "FDefaultConstructedPropertyElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultConstructedPropertyElement"
  },
  {
    "label": "TPropertyTypeFundamentals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPropertyTypeFundamentals"
  },
  {
    "label": "TInPropertyBaseClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInPropertyBaseClass"
  },
  {
    "label": "TProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TProperty"
  },
  {
    "label": "TProperty_WithEqualityAndSerializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TProperty_WithEqualityAndSerializer"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "TProperty_Numeric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TProperty_Numeric"
  },
  {
    "label": "TConvertAndSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConvertAndSet"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FScriptArrayHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptArrayHelper"
  },
  {
    "label": "EInternal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInternal"
  },
  {
    "label": "FScriptArrayHelper_InContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptArrayHelper_InContainer"
  },
  {
    "label": "TScriptContainerIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScriptContainerIterator"
  },
  {
    "label": "FScriptMapHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptMapHelper"
  },
  {
    "label": "FScriptMapHelper_InContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptMapHelper_InContainer"
  },
  {
    "label": "FScriptSetHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptSetHelper"
  },
  {
    "label": "FSetProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSetProperty"
  },
  {
    "label": "FScriptSetHelper_InContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptSetHelper_InContainer"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "InTCppType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InTCppType"
  },
  {
    "label": "FCustomPropertyListNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyListNode"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FPropertyChangedChainEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedChainEvent"
  },
  {
    "label": "TPropertyLinkedListBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyLinkedListBuilder"
  },
  {
    "label": "SuperClassFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SuperClassFlags"
  },
  {
    "label": "DeprecatedPropertyFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DeprecatedPropertyFlags"
  },
  {
    "label": "InterfaceClassFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterfaceClassFlags"
  },
  {
    "label": "FieldType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TFieldIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFieldIterator"
  },
  {
    "label": "TFieldRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFieldRange"
  },
  {
    "label": "FPropertyValueIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyValueIterator"
  },
  {
    "label": "FPropertyValueStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyValueStackEntry"
  },
  {
    "label": "TPropertyValueIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPropertyValueIterator"
  },
  {
    "label": "TPropertyValueRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyValueRange"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / GetTypeHashable . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / List . h \" # include \" Containers / Map . h \" # include \" Containers / ScriptArray . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / UnrealMemory . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryImage . h \" # include \" Serialization / SerializedPropertyScope . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / Casts . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Greater . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / IsIntegral . h \" # include \" Templates / IsPODType . h \" # include \" Templates / IsSigned . h \" # include \" Templates / IsUEnumClass . h \" # include \" Templates / MemoryOps . h \" # include \" Templates / Models . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" UObject / LazyObjectPtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / PersistentObjectPtr . h \" # include \" UObject / PropertyPortFlags . h \" # include \" UObject / PropertyTag . h \" # include \" UObject / ScriptDelegates . h \" # include \" UObject / ScriptInterface . h \" # include \" UObject / SoftObjectPtr . h \" # include \" UObject / SparseDelegate . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtr . h \" # include<type_traits> class FBlake3 ; class FOutputDevice ; class UPackageMap ; class UPropertyWrapper ; enum ELifetimeCondition : int ; struct CGetTypeHashable ; struct FUObjectSerializeContext ; class FProperty ; class FNumericProperty ; template<FuncType> class TFunctionRef ; namespace UE { class FPropertyTypeName ; } namespace UE { class FPropertyTypeNameBuilder ; } namespace UE::GC { class FPropertyStack ; class FSchemaBuilder ; } enum class EPropertyVisitorControlFlow : uint8 ; struct FPropertyVisitorPath ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogType, Log, All)"
  },
  {
    "label": "GetNonNullableBehavior()",
    "kind": "Method",
    "detail": "Function (namespace UE::CoreUObject::Private { enum class ENonNullableBehavior { LogWarning = 0,LogError = 1,CreateDefaultObjectIfPossible = 2 } ; ENonNullableBehavior)",
    "insertText": "GetNonNullableBehavior()"
  },
  {
    "label": "ImportEnumFromBuffer()",
    "kind": "Method",
    "detail": "Function (Local,Member,Parameter,MacroParameter,} ; } enum class EConvertFromTypeResult { UseSerializeItem,Serialized,CannotConvert,Converted,} ; enum class EPropertyMemoryAccess : uint8 { Direct,InContainer } ; namespace UEProperty_Private { class FProperty_DoNotUse ; } enum class EPropertyPointerType { Direct = 0,Container = 1,} ; namespace UE::CoreUObject::Private { const TCHAR*)",
    "insertText": "ImportEnumFromBuffer(UEnum* Enum, const FProperty* PropertyToSet, const FNumericProperty* UnderlyingProp, const TCHAR* PropertyClassName, const TCHAR* Buffer, void* ContainerOrPropertyPtr, EPropertyPointerType PropertyPointerType, FOutputDevice* ErrorText)"
  },
  {
    "label": "ExportEnumToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportEnumToBuffer(const UEnum* Enum, const FProperty* Prop, const FNumericProperty* NumericProp, FString& ValueStr, const void* PropertyValueOrContainer, EPropertyPointerType PropertyPointerType, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "DECLARE_FIELD_API()",
    "kind": "Method",
    "detail": "Function (} class FProperty : public FField {)",
    "insertText": "DECLARE_FIELD_API(FProperty, FField, CASTCLASS_FProperty, COREUOBJECT_API)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (public : EPropertyFlags PropertyFlags ; uint16 RepIndex ; private : TEnumAsByte<ELifetimeCondition> BlueprintReplicationCondition ; # if WITH_EDITORONLY_DATA int32 IndexInOwner = 0 ; # endif int32 Offset_Internal ; public : FProperty* PropertyLinkNext ; FProperty* NextRef ; FProperty* DestructorLinkNext ; FProperty* PostConstructLinkNext ; FName RepNotifyFunc ; public :)",
    "insertText": "FProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProperty(FFieldVariant InOwner, const UECodeGen_Private::FPropertyParamsBaseWithOffset& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProperty(FFieldVariant InOwner, const UECodeGen_Private::FPropertyParamsBaseWithoutOffset& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FProperty(UField* InField)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetElementSize(int32 NewSize)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetElementSize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return ElementSize ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(const FField& InField)"
  },
  {
    "label": "ImportSingleProperty()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportSingleProperty(const TCHAR* Str, void* DestData, const UStruct* ObjectStruct, UObject* SubobjectOuter, int32 PortFlags, FOutputDevice* Warn, TArray<struct FDefinedProperty>& DefinedProperties)"
  },
  {
    "label": "FindRedirectedPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindRedirectedPropertyName(const UStruct* ObjectStruct, FName OldName)"
  },
  {
    "label": "GetNameCPP()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNameCPP()"
  },
  {
    "label": "GetCPPMacroType()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FString)",
    "insertText": "GetCPPMacroType(FString& ExtendedTypeText)"
  },
  {
    "label": "GetCPPType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPPType(FString* ExtendedTypeText=NULL, uint32 CPPExportFlags=0 ) const PURE_VIRTUAL(FProperty::GetCPPType,return TEXT(\"\");)"
  },
  {
    "label": "GetUPropertyWrapper()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA UPropertyWrapper*)",
    "insertText": "GetUPropertyWrapper()"
  },
  {
    "label": "HasSetter()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HasSetter()"
  },
  {
    "label": "CallGetter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CallGetter(const void* Container, void* OutValue)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} EPropertyVisitorControlFlow)",
    "insertText": "Visit(const FPropertyVisitorData& Data, const TFunctionRef<EPropertyVisitorControlFlow(const FPropertyVisitorPath& , const FPropertyVisitorData& )> InFunc)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (EPropertyVisitorControlFlow)",
    "insertText": "Visit(FPropertyVisitorPath& Path, const FPropertyVisitorData& Data, const TFunctionRef<EPropertyVisitorControlFlow(const FPropertyVisitorPath& , const FPropertyVisitorData& )> InFunc)"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ResolveVisitedPathInfo(void* Data, const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "SetupOffset()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "SetupOffset()"
  },
  {
    "label": "SetOffset_Internal()",
    "kind": "Method",
    "detail": "Function (protected : class FMapProperty ; class UEProperty_Private::FProperty_DoNotUse ; void)",
    "insertText": "SetOffset_Internal(int32 NewOffset)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetIndexInOwner()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITORONLY_DATA UE_INTERNAL int32)",
    "insertText": "GetIndexInOwner()"
  },
  {
    "label": "LinkInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkInternal(Ar)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Link(FArchive& Ar)"
  },
  {
    "label": "LinkInternal()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "LinkInternal(FArchive& Ar)"
  },
  {
    "label": "ConvertFromType()",
    "kind": "Method",
    "detail": "Function (public : EConvertFromTypeResult)",
    "insertText": "ConvertFromType(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot, uint8* Data, UStruct* DefaultsStruct, const uint8* Defaults)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const void* A, const void* B, uint32 PortFlags=0 ) const PURE_VIRTUAL(FProperty::Identical,return false;)"
  },
  {
    "label": "Identical_InContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical_InContainer(const void* A, const void* B, int32 ArrayIndex = 0, uint32 PortFlags=0)"
  },
  {
    "label": "SerializeBinProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeBinProperty(FStructuredArchive::FSlot Slot, void* Data, int32 ArrayIdx = -1)"
  },
  {
    "label": "EnterStream()",
    "kind": "Method",
    "detail": "Function (FStructuredArchive::FStream Stream = Slot .)",
    "insertText": "EnterStream()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 LoopMin = ArrayIdx<0 ? 0 : ArrayIdx ; const int32 LoopMax = ArrayIdx<0 ? ArrayDim : ArrayIdx + 1 ;)",
    "insertText": "for(int32 Idx = LoopMin; Idx < LoopMax; Idx++)"
  },
  {
    "label": "SerializedProperty()",
    "kind": "Method",
    "detail": "Function (FSerializedPropertyScope)",
    "insertText": "SerializedProperty(Slot.GetUnderlyingArchive(), this)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeItem(Stream.EnterElement(), ContainerPtrToValuePtr<void>(Data, Idx))"
  },
  {
    "label": "SerializeNonMatchingBinProperty()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SerializeNonMatchingBinProperty(FStructuredArchive::FSlot Slot, void* Data, void const* DefaultData, UStruct* DefaultStruct)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive& UnderlyingArchive = Slot .)",
    "insertText": "GetUnderlyingArchive()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* Target = ContainerPtrToValuePtr<)",
    "insertText": "void(Data, Idx)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void const* Default = ContainerPtrToValuePtrForDefaults<)",
    "insertText": "void(DefaultStruct, DefaultData, Idx)"
  },
  {
    "label": "SerializedProperty()",
    "kind": "Method",
    "detail": "Function (FSerializedPropertyScope)",
    "insertText": "SerializedProperty(UnderlyingArchive, this)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeItem(Stream.EnterElement(), Target, Default)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "SerializeItem(FStructuredArchive::FSlot Slot, void* Value, void const* Defaults = NULL) const PURE_VIRTUAL(FProperty::SerializeItem,)"
  },
  {
    "label": "NetSerializeItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerializeItem(FArchive& Ar, UPackageMap* Map, void* Data, TArray<uint8> * MetaData = NULL)"
  },
  {
    "label": "SupportsNetSharedSerialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsNetSharedSerialization()"
  },
  {
    "label": "ExportTextItem_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportTextItem_Direct(FString& ValueStr, const void* PropertyValue, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope = nullptr)"
  },
  {
    "label": "ExportText_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportText_Internal(ValueStr, PropertyValue, EPropertyPointerType::Direct, DefaultValue, Parent, PortFlags, ExportRootScope)"
  },
  {
    "label": "ExportTextItem_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExportTextItem_InContainer(FString& ValueStr, const void* Container, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope = nullptr)"
  },
  {
    "label": "ExportText_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportText_Internal(ValueStr, Container, EPropertyPointerType::Container, DefaultValue, Parent, PortFlags, ExportRootScope)"
  },
  {
    "label": "ImportText_InContainer()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "ImportText_InContainer(const TCHAR* Buffer, void* Container, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText = (FOutputDevice*)GWarn)"
  },
  {
    "label": "ImportText_Direct()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "ImportText_Direct(const TCHAR* Buffer, void* PropertyPtr, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText = (FOutputDevice*)GWarn)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue_InContainer(void* OutContainer, const void* InValue)"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValue(ContainerVoidPtrToValuePtrInternal(OutContainer, 0), InValue)"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CallSetter(OutContainer, InValue)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetValue_InContainer(void const* InContainer, void* OutValue)"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValue(OutValue, ContainerVoidPtrToValuePtrInternal((void*)InContainer, 0))"
  },
  {
    "label": "CallGetter()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CallGetter(InContainer, OutValue)"
  },
  {
    "label": "SetSingleValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetSingleValue_InContainer(void* OutContainer, const void* InValue, int32 ArrayIndex)"
  },
  {
    "label": "GetSingleValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSingleValue_InContainer(const void* InContainer, void* OutValue, int32 ArrayIndex)"
  },
  {
    "label": "AllocateAndInitializeValue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocateAndInitializeValue()"
  },
  {
    "label": "DestroyAndFreeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAndFreeValue(void* InMemory)"
  },
  {
    "label": "PerformOperationWithSetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformOperationWithSetter(void* OutContainer, void* DirectPropertyAddress, TFunctionRef<void(void*)> DirectValueAccessFunc)"
  },
  {
    "label": "PerformOperationWithGetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformOperationWithGetter(void* OutContainer, const void* DirectPropertyAddress, TFunctionRef<void(const void*)> DirectValueAccessFunc)"
  },
  {
    "label": "GetValueAddressAtIndex_Direct()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetValueAddressAtIndex_Direct(const FProperty* Inner, void* InValueAddress, int32 Index)"
  },
  {
    "label": "AppendSchemaHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "AppendSchemaHash(FBlake3& Builder, bool bSkipEditorOnly)"
  },
  {
    "label": "ExportText_Internal()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "ExportText_Internal(FString& ValueStr, const void* PropertyValueOrContainer, EPropertyPointerType PointerType, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope = nullptr) const PURE_VIRTUAL(FProperty::ExportText,)"
  },
  {
    "label": "ImportText_Internal()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText_Internal(const TCHAR* Buffer, void* ContainerOrPropertyPtr, EPropertyPointerType PointerType, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText) const PURE_VIRTUAL(FProperty::ImportText, return nullptr;)"
  },
  {
    "label": "ExportText_Direct()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ExportText_Direct(FString& ValueStr, const void* Data, const void* Delta, UObject* Parent, int32 PortFlags, UObject* ExportRootScope = nullptr)"
  },
  {
    "label": "ContainerVoidPtrToValuePtrInternal()",
    "kind": "Method",
    "detail": "Function (} private : void*)",
    "insertText": "ContainerVoidPtrToValuePtrInternal(void* ContainerPtr, int32 ArrayIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(uint8*)ContainerPtr + Offset_Internal + static_cast<size_t>(GetElementSize())"
  },
  {
    "label": "ContainerUObjectPtrToValuePtrInternal()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "ContainerUObjectPtrToValuePtrInternal(UObject* ContainerPtr, int32 ArrayIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(void*)"
  },
  {
    "label": "ContainerPtrToValuePtr()",
    "kind": "Method",
    "detail": "Function (} } public : template<ValueType> ValueType*)",
    "insertText": "ContainerPtrToValuePtr(UObject* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtr()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType*)",
    "insertText": "ContainerPtrToValuePtr(void* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtr()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType const*)",
    "insertText": "ContainerPtrToValuePtr(UObject const* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtr()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType const*)",
    "insertText": "ContainerPtrToValuePtr(void const* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtrForDefaults()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType*)",
    "insertText": "ContainerPtrToValuePtrForDefaults(UStruct* ContainerClass, UObject* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtrForDefaults()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<ValueType> ValueType*)",
    "insertText": "ContainerPtrToValuePtrForDefaults(UStruct* ContainerClass, void* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtrForDefaults()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<ValueType> ValueType const*)",
    "insertText": "ContainerPtrToValuePtrForDefaults(UStruct* ContainerClass, UObject const* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "ContainerPtrToValuePtrForDefaults()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<ValueType> ValueType const*)",
    "insertText": "ContainerPtrToValuePtrForDefaults(UStruct* ContainerClass, void const* ContainerPtr, int32 ArrayIndex = 0)"
  },
  {
    "label": "IsInContainer()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } bool)",
    "insertText": "IsInContainer(int32 ContainerSize)"
  },
  {
    "label": "IsInContainer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInContainer(const UStruct* ContainerClass)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopySingleValue(void* Dest, void const* Src)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dest, Src, GetElementSize())"
  },
  {
    "label": "CopyValuesInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CopyValuesInternal(Dest, Src, 1)"
  },
  {
    "label": "GetValueTypeHash()",
    "kind": "Method",
    "detail": "Function (} } } uint32)",
    "insertText": "GetValueTypeHash(const void* Src)"
  },
  {
    "label": "CopyValuesInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CopyValuesInternal(void* Dest, void const* Src, int32 Count)"
  },
  {
    "label": "GetValueTypeHashInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetValueTypeHashInternal(const void* Src)"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CopyCompleteValue(void* Dest, void const* Src)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dest, Src, static_cast<size_t>(GetElementSize()) * ArrayDim)"
  },
  {
    "label": "CopyValuesInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CopyValuesInternal(Dest, Src, ArrayDim)"
  },
  {
    "label": "CopyCompleteValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CopyCompleteValue_InContainer(void* Dest, void const* Src)"
  },
  {
    "label": "CopySingleValueToScriptVM()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopySingleValueToScriptVM(void* Dest, void const* Src)"
  },
  {
    "label": "CopyCompleteValueToScriptVM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValueToScriptVM(void* Dest, void const* Src)"
  },
  {
    "label": "CopyCompleteValueToScriptVM_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValueToScriptVM_InContainer(void* OutValue, void const* InContainer)"
  },
  {
    "label": "CopyCompleteValueFromScriptVM_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValueFromScriptVM_InContainer(void* OutContainer, void const* InValue)"
  },
  {
    "label": "CopySingleValueFromScriptVM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySingleValueFromScriptVM(void* Dest, void const* Src)"
  },
  {
    "label": "CopyCompleteValueFromScriptVM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCompleteValueFromScriptVM(void* Dest, void const* Src)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Data, GetElementSize())"
  },
  {
    "label": "ClearValueInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ClearValueInternal((uint8*)Data)"
  },
  {
    "label": "ClearValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearValue_InContainer(void* Data, int32 ArrayIndex = 0)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ContainerPtrToValuePtr<void>(Data, ArrayIndex), GetElementSize())"
  },
  {
    "label": "ClearValueInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ClearValueInternal(ContainerPtrToValuePtr<uint8>(Data, ArrayIndex))"
  },
  {
    "label": "ClearValueInternal()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "ClearValueInternal(void* Data)"
  },
  {
    "label": "DestroyValue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DestroyValue(void* Dest)"
  },
  {
    "label": "DestroyValueInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyValueInternal(Dest)"
  },
  {
    "label": "DestroyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DestroyValue_InContainer(void* Dest)"
  },
  {
    "label": "DestroyValueInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyValueInternal(ContainerPtrToValuePtr<void>(Dest))"
  },
  {
    "label": "DestroyValueInternal()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "DestroyValueInternal(void* Dest)"
  },
  {
    "label": "ContainsFinishDestroy()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ContainsFinishDestroy(TArray<const FStructProperty*>& EncounteredStructProps)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishDestroy(void* Data)"
  },
  {
    "label": "FinishDestroy_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishDestroy_InContainer(void* Data)"
  },
  {
    "label": "ContainsClearOnFinishDestroyInternal()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "ContainsClearOnFinishDestroyInternal(TArray<const FStructProperty*>& EncounteredStructProps)"
  },
  {
    "label": "FinishDestroyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroyInternal(void* Data)"
  },
  {
    "label": "InitializeValue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeValue(void* Dest)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Dest, static_cast<size_t>(GetElementSize()) * ArrayDim)"
  },
  {
    "label": "InitializeValueInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InitializeValueInternal(Dest)"
  },
  {
    "label": "InitializeValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitializeValue_InContainer(void* Dest)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ContainerPtrToValuePtr<void>(Dest), static_cast<size_t>(GetElementSize()) * ArrayDim)"
  },
  {
    "label": "InitializeValueInternal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InitializeValueInternal(ContainerPtrToValuePtr<void>(Dest))"
  },
  {
    "label": "InitializeValueInternal()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "InitializeValueInternal(void* Dest)"
  },
  {
    "label": "ValidateImportFlags()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ValidateImportFlags(uint32 PortFlags, FOutputDevice* ErrorText = NULL)"
  },
  {
    "label": "ShouldPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPort(uint32 PortFlags=0)"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetID()"
  },
  {
    "label": "InstanceSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstanceSubobjects(void* Data, void const* DefaultData, UObject* Owner, struct FObjectInstancingGraph* InstanceGraph)"
  },
  {
    "label": "GetMinAlignment()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinAlignment()"
  },
  {
    "label": "ContainsObjectReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsObjectReference(TArray<const FStructProperty*>& EncounteredStructProps, EPropertyObjectReferenceType InReferenceType = EPropertyObjectReferenceType::Strong)"
  },
  {
    "label": "ContainsWeakObjectReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsWeakObjectReference()"
  },
  {
    "label": "ContainsObjectReference()",
    "kind": "Method",
    "detail": "Function (TArray<const FStructProperty*> EncounteredStructProps ; return)",
    "insertText": "ContainsObjectReference(EncounteredStructProps, EPropertyObjectReferenceType::Weak)"
  },
  {
    "label": "ContainsInstancedObjectProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsInstancedObjectProperty()"
  },
  {
    "label": "EmitReferenceInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitReferenceInfo(UE::GC::FSchemaBuilder& Schema, int32 BaseOffset, TArray<const FStructProperty*>& EncounteredStructProps, UE::GC::FPropertyStack& DebugPath)"
  },
  {
    "label": "ShouldSerializeValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSerializeValue(FArchive& Ar)"
  },
  {
    "label": "UseBinaryOrNativeSerialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseBinaryOrNativeSerialization(const FArchive& Ar)"
  },
  {
    "label": "ShouldDuplicateValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDuplicateValue()"
  },
  {
    "label": "LoadTypeName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadTypeName(UE::FPropertyTypeName Type, const FPropertyTag* Tag = nullptr)"
  },
  {
    "label": "SaveTypeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTypeName(UE::FPropertyTypeNameBuilder& Type)"
  },
  {
    "label": "CanSerializeFromTypeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSerializeFromTypeName(UE::FPropertyTypeName Type)"
  },
  {
    "label": "GetOwnerProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetOwnerProperty()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FProperty* Result = this ;)",
    "insertText": "for(FProperty* PropBase = GetOwner<FProperty>(); PropBase; PropBase = PropBase->GetOwner<FProperty>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FProperty* Result = this ;)",
    "insertText": "for(const FProperty* PropBase = GetOwner<FProperty>(); PropBase; PropBase = PropBase->GetOwner<FProperty>())"
  },
  {
    "label": "GetPropertyFlags()",
    "kind": "Method",
    "detail": "Function (Result = PropBase ; } return Result ; } EPropertyFlags)",
    "insertText": "GetPropertyFlags()"
  },
  {
    "label": "ClearPropertyFlags()",
    "kind": "Method",
    "detail": "Function (PropertyFlags | = NewFlags ; } void)",
    "insertText": "ClearPropertyFlags(EPropertyFlags NewFlags)"
  },
  {
    "label": "HasAnyPropertyFlags()",
    "kind": "Method",
    "detail": "Function (PropertyFlags& = ~ NewFlags ; } bool)",
    "insertText": "HasAnyPropertyFlags(uint64 FlagsToCheck)"
  },
  {
    "label": "HasAllPropertyFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllPropertyFlags(uint64 FlagsToCheck)"
  },
  {
    "label": "GetRepOwner()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "GetRepOwner()"
  },
  {
    "label": "IsEditorOnlyProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEditorOnlyProperty()"
  },
  {
    "label": "SameType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SameType(const FProperty* Other)"
  },
  {
    "label": "GetBlueprintReplicationCondition()",
    "kind": "Method",
    "detail": "Function (ELifetimeCondition)",
    "insertText": "GetBlueprintReplicationCondition()"
  },
  {
    "label": "HasIntrusiveUnsetOptionalState()",
    "kind": "Method",
    "detail": "Function (BlueprintReplicationCondition = InBlueprintReplicationCondition ; } bool)",
    "insertText": "HasIntrusiveUnsetOptionalState() const PURE_VIRTUAL(FProperty::HasIntrusiveUnsetOptionalState, return false;) COREUOBJECT_API virtual void InitializeIntrusiveUnsetOptionalValue(void* Data)"
  },
  {
    "label": "IsIntrusiveOptionalValueSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntrusiveOptionalValueSet(const void* Data)"
  },
  {
    "label": "ClearIntrusiveOptionalValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIntrusiveOptionalValue(void* Data)"
  },
  {
    "label": "EmitIntrusiveOptionalReferenceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitIntrusiveOptionalReferenceInfo(UE::GC::FSchemaBuilder& Schema, int32 BaseOffset, TArray<const FStructProperty*>& EncounteredStructProps, UE::GC::FPropertyStack& DebugPath)"
  },
  {
    "label": "ReadToken()",
    "kind": "Method",
    "detail": "Function (} ; class FPropertyHelpers { public : const TCHAR*)",
    "insertText": "ReadToken(const TCHAR* Buffer, FString& Out, bool DottedNames = false)"
  },
  {
    "label": "ReadToken()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ReadToken(const TCHAR* Buffer, FStringBuilderBase& Out, bool DottedNames = false)"
  },
  {
    "label": "Unsafe_AlterOffset()",
    "kind": "Method",
    "detail": "Function (} ; namespace UEProperty_Private { class FProperty_DoNotUse { public : void)",
    "insertText": "Unsafe_AlterOffset(FProperty& Property, const int32 OffsetOverride)"
  },
  {
    "label": "SetOffset_Internal()",
    "kind": "Method",
    "detail": "Function (Property .)",
    "insertText": "SetOffset_Internal(OffsetOverride)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } struct FDefinedProperty { FProperty* Property ; int32 Index ; bool)",
    "insertText": "operator(const FDefinedProperty& Other)"
  },
  {
    "label": "FDefaultConstructedPropertyElement()",
    "kind": "Method",
    "detail": "Function (} } ; class FDefaultConstructedPropertyElement { public :)",
    "insertText": "FDefaultConstructedPropertyElement()"
  },
  {
    "label": "FDefaultConstructedPropertyElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDefaultConstructedPropertyElement(const FProperty* InProp) : Obj(FMemory::Malloc(InProp->GetSize(), InProp->GetMinAlignment()), [InProp](void* Object) { InProp->DestroyValue(Object); FMemory::Free(Object); })"
  },
  {
    "label": "InitializeValue()",
    "kind": "Method",
    "detail": "Function (InProp ->)",
    "insertText": "InitializeValue(Obj.Get())"
  },
  {
    "label": "GetObjAddress()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetObjAddress()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} private : TSharedPtr<void> Obj ; } ; template<InTCppType> class TPropertyTypeFundamentals { public : typedef InTCppType TCppType ; enum { CPPSize =)",
    "insertText": "sizeof(TCppType), CPPAlignment = alignof(TCppType)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (TCHAR const*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (} TCppType const*)",
    "insertText": "GetPropertyValuePtr(void const* A)"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (} TCppType*)",
    "insertText": "GetPropertyValuePtr(void* A)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} TCppType const&)",
    "insertText": "GetPropertyValue(void const* A)"
  },
  {
    "label": "GetDefaultPropertyValue()",
    "kind": "Method",
    "detail": "Function (} TCppType)",
    "insertText": "GetDefaultPropertyValue()"
  },
  {
    "label": "GetOptionalPropertyValue()",
    "kind": "Method",
    "detail": "Function (} TCppType)",
    "insertText": "GetOptionalPropertyValue(void const* B)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertyValue(void* A, TCppType const& Value)"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "GetPropertyValuePtr(A)"
  },
  {
    "label": "InitializePropertyValue()",
    "kind": "Method",
    "detail": "Function (} TCppType*)",
    "insertText": "InitializePropertyValue(void* A)"
  },
  {
    "label": "DestroyPropertyValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyPropertyValue(void* A)"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPropertyValuePtr(A)->~TCppType()"
  },
  {
    "label": "HasIntrusiveUnsetOptionalState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasIntrusiveUnsetOptionalState()"
  },
  {
    "label": "InitializeIntrusiveUnsetOptionalValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeIntrusiveUnsetOptionalValue(void* Data)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) TOptional<TCppType>()"
  },
  {
    "label": "IsIntrusiveOptionalValueSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIntrusiveOptionalValueSet(const void* A)"
  },
  {
    "label": "ClearIntrusiveOptionalValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearIntrusiveOptionalValue(void* A)"
  },
  {
    "label": "TCppType()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<TOptional<)",
    "insertText": "TCppType(A)->Reset()"
  },
  {
    "label": "GetComputedFlagsPropertyFlags()",
    "kind": "Method",
    "detail": "Function (} protected : EPropertyFlags)",
    "insertText": "GetComputedFlagsPropertyFlags()"
  },
  {
    "label": "TProperty()",
    "kind": "Method",
    "detail": "Function (} } ; template<InTCppType,class TInPropertyBaseClass> class TProperty : public TInPropertyBaseClass,public TPropertyTypeFundamentals<InTCppType> { public : typedef InTCppType TCppType ; typedef TInPropertyBaseClass Super ; typedef TPropertyTypeFundamentals<InTCppType> TTypeFundamentals ;)",
    "insertText": "TProperty(EInternal InInernal, FFieldClass* InClass) : Super(EC_InternalUseOnlyConstructor, InClass)"
  },
  {
    "label": "TProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : Super(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "SetElementSize()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetElementSize(TTypeFundamentals::CPPSize)"
  },
  {
    "label": "TProperty()",
    "kind": "Method",
    "detail": "Function (} template<PropertyParamsType>)",
    "insertText": "TProperty(FFieldVariant InOwner, PropertyParamsType& Prop) : Super(InOwner, Prop, TTypeFundamentals::GetComputedFlagsPropertyFlags())"
  },
  {
    "label": "TProperty()",
    "kind": "Method",
    "detail": "Function (} public : # if WITH_EDITORONLY_DATA)",
    "insertText": "TProperty(UField* InField) : Super(InField)"
  },
  {
    "label": "GetCPPType()",
    "kind": "Method",
    "detail": "Function (} # endif FString)",
    "insertText": "GetCPPType(FString* ExtendedTypeText=NULL, uint32 CPPExportFlags=0)"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPropertyValuePtr(Dest)[Index] = TTypeFundamentals::GetPropertyValuePtr(Src)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyValue(Data, TTypeFundamentals::GetDefaultPropertyValue())"
  },
  {
    "label": "InitializePropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePropertyValue((uint8*)Dest + i * static_cast<size_t>(this->GetElementSize()))"
  },
  {
    "label": "DestroyPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPropertyValue((uint8*)Dest + i * static_cast<size_t>(this->GetElementSize()))"
  },
  {
    "label": "GetPropertyValuePtr_InContainer()",
    "kind": "Method",
    "detail": "Function (} } TCppType const*)",
    "insertText": "GetPropertyValuePtr_InContainer(void const* A, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetPropertyValuePtr_InContainer()",
    "kind": "Method",
    "detail": "Function (} TCppType*)",
    "insertText": "GetPropertyValuePtr_InContainer(void* A, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} TCppType const&)",
    "insertText": "GetPropertyValue_InContainer(void const* A, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetOptionalPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} TCppType)",
    "insertText": "GetOptionalPropertyValue_InContainer(void const* B, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertyValue_InContainer(void* A, TCppType const& Value, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetPropertyValuePtr_InContainer()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "GetPropertyValuePtr_InContainer(A, ArrayIndex)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue_InContainer(void* OutContainer, const TCppType& InValue)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue_InContainer(OutContainer, &InValue)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValue_InContainer(void const* InContainer, TCppType* OutValue)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_InContainer(InContainer, OutValue)"
  },
  {
    "label": "InitializeIntrusiveUnsetOptionalValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeIntrusiveUnsetOptionalValue(Data)"
  },
  {
    "label": "ClearIntrusiveOptionalValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIntrusiveOptionalValue(Data)"
  },
  {
    "label": "TProperty_WithEqualityAndSerializer()",
    "kind": "Method",
    "detail": "Function (} } ; template<InTCppType,class TInPropertyBaseClass> class TProperty_WithEqualityAndSerializer : public TProperty<InTCppType,TInPropertyBaseClass> { public : typedef TProperty<InTCppType,TInPropertyBaseClass> Super ; typedef InTCppType TCppType ; typedef Super::TTypeFundamentals TTypeFundamentals ;)",
    "insertText": "TProperty_WithEqualityAndSerializer(EInternal InInernal, FFieldClass* InClass) : Super(EC_InternalUseOnlyConstructor, InClass)"
  },
  {
    "label": "TProperty_WithEqualityAndSerializer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty_WithEqualityAndSerializer(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : Super(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "TProperty_WithEqualityAndSerializer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty_WithEqualityAndSerializer(FFieldVariant InOwner, const UECodeGen_Private::FPropertyParamsBaseWithOffset& Prop) : Super(InOwner, Prop)"
  },
  {
    "label": "TProperty_WithEqualityAndSerializer()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA)",
    "insertText": "TProperty_WithEqualityAndSerializer(UField* InField) : Super(InField)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "Identical(const void* A, const void* B, uint32 PortFlags=0)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeItem(FStructuredArchive::FSlot Slot, void* Value, void const* Defaults)"
  },
  {
    "label": "GetPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (Slot<<*)",
    "insertText": "GetPropertyValuePtr(Value)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} } ; class FNumericProperty : public FProperty {)",
    "insertText": "DECLARE_FIELD(FNumericProperty, FProperty, CASTCLASS_FNumericProperty) FNumericProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FNumericProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNumericProperty(FFieldVariant InOwner, const UECodeGen_Private::FPropertyParamsBaseWithOffset& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FNumericProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FNumericProperty(UField* InField)"
  },
  {
    "label": "ImportText_Internal()",
    "kind": "Method",
    "detail": "Function (# endif const TCHAR*)",
    "insertText": "ImportText_Internal(const TCHAR* Buffer, void* ContainerOrPropertyPtr, EPropertyPointerType PropertyPointerType, UObject* Parent, int32 PortFlags, FOutputDevice* ErrorText)"
  },
  {
    "label": "ExportText_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportText_Internal(FString& ValueStr, const void* PropertyValueOrContainer, EPropertyPointerType PropertyPointerType, const void* DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "IsFloatingPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloatingPoint()"
  },
  {
    "label": "IsInteger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteger()"
  },
  {
    "label": "CanHoldValue()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "CanHoldValue(T Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TIsSigned<T>::Value)"
  },
  {
    "label": "CanHoldUnsignedValueInternal()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CanHoldUnsignedValueInternal(Value)"
  },
  {
    "label": "IsEnum()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsEnum()"
  },
  {
    "label": "GetIntPropertyEnum()",
    "kind": "Method",
    "detail": "Function (} UEnum*)",
    "insertText": "GetIntPropertyEnum()"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntPropertyValue(void* Data, uint64 Value)"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntPropertyValue(void* Data, int64 Value)"
  },
  {
    "label": "SetFloatingPointPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloatingPointPropertyValue(void* Data, double Value)"
  },
  {
    "label": "SetNumericPropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumericPropertyValueFromString(void* Data, TCHAR const* Value)"
  },
  {
    "label": "SetNumericPropertyValueFromString_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumericPropertyValueFromString_InContainer(void* Container, TCHAR const* Value)"
  },
  {
    "label": "GetSignedIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetSignedIntPropertyValue(void const* Data)"
  },
  {
    "label": "GetSignedIntPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetSignedIntPropertyValue_InContainer(void const* Container)"
  },
  {
    "label": "GetUnsignedIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUnsignedIntPropertyValue(void const* Data)"
  },
  {
    "label": "GetUnsignedIntPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUnsignedIntPropertyValue_InContainer(void const* Container)"
  },
  {
    "label": "GetFloatingPointPropertyValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFloatingPointPropertyValue(void const* Data)"
  },
  {
    "label": "GetNumericPropertyValueToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNumericPropertyValueToString(void const* Data)"
  },
  {
    "label": "GetNumericPropertyValueToString_InContainer()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNumericPropertyValueToString_InContainer(void const* Container)"
  },
  {
    "label": "ReadEnumAsInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ReadEnumAsInt64(FStructuredArchive::FSlot Slot, UStruct* DefaultsStruct, const FPropertyTag& Tag)"
  },
  {
    "label": "CanHoldDoubleValueInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanHoldDoubleValueInternal(double Value) const PURE_VIRTUAL(FNumericProperty::CanHoldDoubleValueInternal, return false;)"
  },
  {
    "label": "CanHoldSignedValueInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHoldSignedValueInternal(int64 Value) const PURE_VIRTUAL(FNumericProperty::CanHoldSignedValueInternal, return false;)"
  },
  {
    "label": "CanHoldUnsignedValueInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHoldUnsignedValueInternal(uint64 Value) const PURE_VIRTUAL(FNumericProperty::CanHoldUnsignedValueInternal, return false;)"
  },
  {
    "label": "TProperty_Numeric()",
    "kind": "Method",
    "detail": "Function (} ; template<InTCppType> class TProperty_Numeric : public TProperty_WithEqualityAndSerializer<InTCppType,FNumericProperty> { public : typedef TProperty_WithEqualityAndSerializer<InTCppType,FNumericProperty> Super ; typedef InTCppType TCppType ; typedef Super::TTypeFundamentals TTypeFundamentals ;)",
    "insertText": "TProperty_Numeric(EInternal InInernal, FFieldClass* InClass) : Super(EC_InternalUseOnlyConstructor, InClass)"
  },
  {
    "label": "TProperty_Numeric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty_Numeric(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : Super(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "TProperty_Numeric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty_Numeric(FFieldVariant InOwner, const UECodeGen_Private::FPropertyParamsBaseWithOffset& Prop) : Super(InOwner, Prop)"
  },
  {
    "label": "TProperty_Numeric()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA)",
    "insertText": "TProperty_Numeric(UField* InField) : Super(InField)"
  },
  {
    "label": "ConvertFromArithmeticValue()",
    "kind": "Method",
    "detail": "Function (} protected : template<OldNumericType> void)",
    "insertText": "ConvertFromArithmeticValue(FStructuredArchive::FSlot Slot, void* Obj, const FPropertyTag& Tag)"
  },
  {
    "label": "TCppType()",
    "kind": "Method",
    "detail": "Function (TConvertAndSet<OldNumericType,)",
    "insertText": "TCppType(*this, Slot, Obj, Tag)"
  },
  {
    "label": "TConvertAndSet()",
    "kind": "Method",
    "detail": "Function (} private : template<FromType,ToType> struct TConvertAndSet {)",
    "insertText": "TConvertAndSet(const TProperty_Numeric& Property, FStructuredArchive::FSlot Slot, void* Obj, const FPropertyTag& Tag)"
  },
  {
    "label": "NewValue()",
    "kind": "Method",
    "detail": "Function (FromType OldValue ; Slot<<OldValue ; ToType)",
    "insertText": "NewValue(ToType)"
  },
  {
    "label": "SetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (Property .)",
    "insertText": "SetPropertyValue_InContainer(Obj, NewValue, Tag.ArrayIndex)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(((TIsSigned<FromType>::Value || TIsFloatingPoint<FromType>::Value) && (!TIsSigned<ToType>::Value && !TIsFloatingPoint<ToType>::Value) && OldValue < 0) || ((FromType)NewValue != OldValue), LogClass, Warning, TEXT(\"Potential data loss during conversion of integer property %s of %s - was (%s) now (%s) - for package: %s\"), *Property.GetName(), *Slot.GetUnderlyingArchive().GetArchiveName(), *LexToString(OldValue), *LexToString(NewValue), *Slot.GetUnderlyingArchive().GetArchiveName())"
  },
  {
    "label": "SetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (SameType Value ; Slot<<Value ; Property .)",
    "insertText": "SetPropertyValue_InContainer(Obj, Value, Tag.ArrayIndex)"
  },
  {
    "label": "ReadEnumAsInt64()",
    "kind": "Method",
    "detail": "Function (int64 PreviousValue = this ->)",
    "insertText": "ReadEnumAsInt64(Slot, DefaultsStruct, Tag)"
  },
  {
    "label": "SetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetPropertyValue_InContainer(Data, (TCppType)PreviousValue, Tag.ArrayIndex)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyValue(Data, (TCppType)Value)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(*TTypeFundamentals::GetPropertyValuePtr(Data), Value)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (TCppType LocalValue { } ;)",
    "insertText": "LexFromString(LocalValue, Value)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue_InContainer(Container, &LocalValue)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (TCppType LocalValue { } ;)",
    "insertText": "GetValue_InContainer(Container, &LocalValue)"
  },
  {
    "label": "CanHoldDoubleValueInternal()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "CanHoldDoubleValueInternal(double Value)"
  },
  {
    "label": "CanHoldSignedValueInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanHoldSignedValueInternal(int64 Value)"
  },
  {
    "label": "CanHoldUnsignedValueInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanHoldUnsignedValueInternal(uint64 Value)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} } ; class FByteProperty : public TProperty_Numeric<uint8> {)",
    "insertText": "DECLARE_FIELD(FByteProperty, TProperty_Numeric<uint8>, CASTCLASS_FByteProperty)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FByteProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FByteProperty(FFieldVariant InOwner, const UECodeGen_Private::FBytePropertyParams& Prop)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FByteProperty(UField* InField)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "GetMaxNetSerializeBits()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMaxNetSerializeBits()"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FInt8Property : public TProperty_Numeric<int8> {)",
    "insertText": "DECLARE_FIELD(FInt8Property, TProperty_Numeric<int8>, CASTCLASS_FInt8Property) FInt8Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FInt8Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInt8Property(FFieldVariant InOwner, const UECodeGen_Private::FInt8PropertyParams& Prop)"
  },
  {
    "label": "FInt8Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FInt8Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FInt16Property : public TProperty_Numeric<int16> {)",
    "insertText": "DECLARE_FIELD(FInt16Property, TProperty_Numeric<int16>, CASTCLASS_FInt16Property) FInt16Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FInt16Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInt16Property(FFieldVariant InOwner, const UECodeGen_Private::FInt16PropertyParams& Prop)"
  },
  {
    "label": "FInt16Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FInt16Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FIntProperty : public TProperty_Numeric<int32> {)",
    "insertText": "DECLARE_FIELD(FIntProperty, TProperty_Numeric<int32>, CASTCLASS_FIntProperty) FIntProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FIntProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIntProperty(FFieldVariant InOwner, const UECodeGen_Private::FIntPropertyParams& Prop)"
  },
  {
    "label": "FIntProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FIntProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FInt64Property : public TProperty_Numeric<int64> {)",
    "insertText": "DECLARE_FIELD(FInt64Property, TProperty_Numeric<int64>, CASTCLASS_FInt64Property) FInt64Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FInt64Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInt64Property(FFieldVariant InOwner, const UECodeGen_Private::FInt64PropertyParams& Prop)"
  },
  {
    "label": "FInt64Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FInt64Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FUInt16Property : public TProperty_Numeric<uint16> {)",
    "insertText": "DECLARE_FIELD(FUInt16Property, TProperty_Numeric<uint16>, CASTCLASS_FUInt16Property) FUInt16Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FUInt16Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUInt16Property(FFieldVariant InOwner, const UECodeGen_Private::FUInt16PropertyParams& Prop)"
  },
  {
    "label": "FUInt16Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FUInt16Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FUInt32Property : public TProperty_Numeric<uint32> {)",
    "insertText": "DECLARE_FIELD(FUInt32Property, TProperty_Numeric<uint32>, CASTCLASS_FUInt32Property) FUInt32Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FUInt32Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUInt32Property(FFieldVariant InOwner, const UECodeGen_Private::FUInt32PropertyParams& Prop)"
  },
  {
    "label": "FUInt32Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FUInt32Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FUInt64Property : public TProperty_Numeric<uint64> {)",
    "insertText": "DECLARE_FIELD(FUInt64Property, TProperty_Numeric<uint64>, CASTCLASS_FUInt64Property) FUInt64Property(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FUInt64Property()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUInt64Property(FFieldVariant InOwner, const UECodeGen_Private::FUInt64PropertyParams& Prop)"
  },
  {
    "label": "FUInt64Property()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FUInt64Property(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FFloatProperty : public TProperty_Numeric<float> {)",
    "insertText": "DECLARE_FIELD(FFloatProperty, TProperty_Numeric<float>, CASTCLASS_FFloatProperty) FFloatProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FFloatProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFloatProperty(FFieldVariant InOwner, const UECodeGen_Private::FFloatPropertyParams& Prop)"
  },
  {
    "label": "FFloatProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FFloatProperty(UField* InField)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Identical(const void* A, const void* B, uint32 PortFlags)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FDoubleProperty : public TProperty_Numeric<double> {)",
    "insertText": "DECLARE_FIELD(FDoubleProperty, TProperty_Numeric<double>, CASTCLASS_FDoubleProperty) FDoubleProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FDoubleProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDoubleProperty(FFieldVariant InOwner, const UECodeGen_Private::FDoublePropertyParams& Prop)"
  },
  {
    "label": "FDoubleProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FDoubleProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FLargeWorldCoordinatesRealProperty : public TProperty_Numeric<double> {)",
    "insertText": "DECLARE_FIELD(FLargeWorldCoordinatesRealProperty, TProperty_Numeric<double>, CASTCLASS_FLargeWorldCoordinatesRealProperty) FLargeWorldCoordinatesRealProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : TProperty_Numeric(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} } ; class FBoolProperty : public FProperty {)",
    "insertText": "DECLARE_FIELD(FBoolProperty, FProperty, CASTCLASS_FBoolProperty)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (uint8 ByteOffset ; uint8 ByteMask ; uint8 FieldMask ; public :)",
    "insertText": "FBoolProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoolProperty(FFieldVariant InOwner, const UECodeGen_Private::FBoolPropertyParams& Prop)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FBoolProperty(UField* InField)"
  },
  {
    "label": "GetCPPType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPPType(FString* ExtendedTypeText, uint32 CPPExportFlags)"
  },
  {
    "label": "ByteValue()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "ByteValue(uint8*)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertyValue(void* A, bool Value)"
  },
  {
    "label": "ByteValue()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "ByteValue((*ByteValue) & ~FieldMask) | (Value ? ByteMask : 0)"
  },
  {
    "label": "SetPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertyValue_InContainer(void* A, bool Value, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyValue(ContainerPtrToValuePtr<void>(A, ArrayIndex), Value)"
  },
  {
    "label": "SetBoolSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoolSize(const uint32 InSize, const bool bIsNativeBool = false, const uint32 InBitMask = 0)"
  },
  {
    "label": "FObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPropertyBase(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPropertyBase(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParams& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectPropertyBase(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParamsWithoutClass& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FObjectPropertyBase(UField* InField)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "ImportText_Internal()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText_Internal(const TCHAR* Buffer, void* ContainerOrPropertyPtr, EPropertyPointerType PropertyPointerType, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText)"
  },
  {
    "label": "GetCPPTypeCustom()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetCPPTypeCustom(FString* ExtendedTypeText, uint32 CPPExportFlags, const FString& InnerNativeTypeName) const PURE_VIRTUAL(FObjectPropertyBase::GetCPPTypeCustom, return TEXT(\"\");)"
  },
  {
    "label": "ParseObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseObjectPropertyValue(const FProperty* Property, UObject* OwnerObject, UClass* RequiredMetaClass, uint32 PortFlags, const TCHAR*& Buffer, TObjectPtr<UObject>& out_ResolvedValue, FUObjectSerializeContext* InSerializeContext = nullptr, bool bAllowAnyPackage = true)"
  },
  {
    "label": "FindImportedObject()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UObject>)",
    "insertText": "FindImportedObject(const FProperty* Property, UObject* OwnerObject, UClass* ObjectClass, UClass* RequiredMetaClass, const TCHAR* Text, uint32 PortFlags = 0, FUObjectSerializeContext* InSerializeContext = nullptr, bool bAllowAnyPackage = true)"
  },
  {
    "label": "GetExportPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExportPath(const TObjectPtr<const UObject>& Object, const UObject* Parent = nullptr, const UObject* ExportRootScope = nullptr, const uint32 PortFlags = PPF_None)"
  },
  {
    "label": "GetExportPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExportPath(FTopLevelAssetPath ClassPathName, const FString& ObjectPathName)"
  },
  {
    "label": "StaticIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticIdentical(UObject* A, UObject* B, uint32 PortFlags)"
  },
  {
    "label": "LoadObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "LoadObjectPropertyValue(const void* PropertyValueAddress)"
  },
  {
    "label": "LoadObjectPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "LoadObjectPropertyValue_InContainer(const void* PropertyValueAddress, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetObjectPropertyValueUnchecked()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetObjectPropertyValueUnchecked(void* PropertyValueAddress, UObject* Value)"
  },
  {
    "label": "SetObjectPtrPropertyValueUnchecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPtrPropertyValueUnchecked(void* PropertyValueAddress, TObjectPtr<UObject> Ptr)"
  },
  {
    "label": "SetObjectPropertyValueUnchecked_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValueUnchecked_InContainer(void* ContainerAddress, UObject* Value, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetObjectPtrPropertyValueUnchecked_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPtrPropertyValueUnchecked_InContainer(void* ContainerAddress, TObjectPtr<UObject> Ptr, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (public : UObject*)",
    "insertText": "GetObjectPropertyValue(const void* PropertyValueAddress)"
  },
  {
    "label": "GetObjectPtrPropertyValue()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UObject>)",
    "insertText": "GetObjectPtrPropertyValue(const void* PropertyValueAddress)"
  },
  {
    "label": "GetObjectPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectPropertyValue_InContainer(const void* ContainerAddress, int32 ArrayIndex = 0)"
  },
  {
    "label": "GetObjectPtrPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UObject>)",
    "insertText": "GetObjectPtrPropertyValue_InContainer(const void* ContainerAddress, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(void* PropertyValueAddress, UObject* Value)"
  },
  {
    "label": "SetObjectPtrPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPtrPropertyValue(void* PropertyValueAddress, TObjectPtr<UObject> Ptr)"
  },
  {
    "label": "SetObjectPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue_InContainer(void* ContainerAddress, UObject* Value, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetObjectPtrPropertyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPtrPropertyValue_InContainer(void* ContainerAddress, TObjectPtr<UObject> Ptr, int32 ArrayIndex = 0)"
  },
  {
    "label": "SetPropertyClass()",
    "kind": "Method",
    "detail": "Function (# if USE_CIRCULAR_DEPENDENCY_LOAD_DEFERRING void)",
    "insertText": "SetPropertyClass(UClass* NewPropertyClass)"
  },
  {
    "label": "CheckValidObject()",
    "kind": "Method",
    "detail": "Function (PropertyClass = NewPropertyClass ; } # endif void)",
    "insertText": "CheckValidObject(void* ValueAddress, TObjectPtr<UObject> OldValue)"
  },
  {
    "label": "AllowObjectTypeReinterpretationTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowObjectTypeReinterpretationTo(const FObjectPropertyBase* Other)"
  },
  {
    "label": "AllowCrossLevel()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AllowCrossLevel()"
  },
  {
    "label": "ConstructDefaultObjectValueIfNecessary()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ConstructDefaultObjectValueIfNecessary(UObject* ExistingValue)"
  },
  {
    "label": "GetWrappedUObjectPtrValues()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_BUFFER_OVERRUN_WARNING template<T,OutType> void)",
    "insertText": "GetWrappedUObjectPtrValues(OutType* OutObjects, const void* SrcAddress, EPropertyMemoryAccess SrcAccess, int32 ArrayIndex, int32 ArrayCount)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (T Value ;)",
    "insertText": "GetValue_InContainer(SrcAddress, &Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (* OutObjects = Value .)",
    "insertText": "Get()"
  },
  {
    "label": "ValueArray()",
    "kind": "Method",
    "detail": "Function (} else { T*)",
    "insertText": "ValueArray(T*)AllocateAndInitializeValue()"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_InContainer(SrcAddress, ValueArray)"
  },
  {
    "label": "DestroyAndFreeValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DestroyAndFreeValue(ValueArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} return ; } SrcAddress = ContainerPtrToValuePtr<)",
    "insertText": "void(SrcAddress, ArrayIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ArrayCount == 1)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (* OutObjects =)",
    "insertText": "GetObjectPropertyValue(SrcAddress)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (OutObjects [ OutIndex ] =)",
    "insertText": "GetObjectPropertyValue((const uint8*)SrcAddress + OutIndex * LocalElementSize)"
  },
  {
    "label": "SetWrappedUObjectPtrValues()",
    "kind": "Method",
    "detail": "Function (} } } PRAGMA_ENABLE_BUFFER_OVERRUN_WARNING template<T,ValueType> void)",
    "insertText": "SetWrappedUObjectPtrValues(void* DestAddress, EPropertyMemoryAccess DestAccess, ValueType* InValues, int32 ArrayIndex, int32 ArrayCount)"
  },
  {
    "label": "WrappedValue()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "WrappedValue(*InValues)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue_InContainer(DestAddress, &WrappedValue)"
  },
  {
    "label": "GetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_InContainer(DestAddress, ValueArray)"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (ValueArray [ ArrayIndex + OutIndex ] = InValues [ OutIndex ] ; })",
    "insertText": "SetValue_InContainer(DestAddress, ValueArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} return ; } DestAddress = ContainerPtrToValuePtr<)",
    "insertText": "void(DestAddress, ArrayIndex)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue(DestAddress, *InValues)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyValue((uint8*)DestAddress + OutIndex * LocalElementSize, InValues[OutIndex])"
  },
  {
    "label": "TFObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (} } } } ; template<InTCppType> class TFObjectPropertyBase : public TProperty<InTCppType,FObjectPropertyBase> { public : typedef TProperty<InTCppType,FObjectPropertyBase> Super ; typedef InTCppType TCppType ; typedef Super::TTypeFundamentals TTypeFundamentals ;)",
    "insertText": "TFObjectPropertyBase(EInternal InInernal, FFieldClass* InClass) : Super(EC_InternalUseOnlyConstructor, InClass)"
  },
  {
    "label": "TFObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFObjectPropertyBase(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : Super(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "TFObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (this -> PropertyClass = nullptr ; })",
    "insertText": "TFObjectPropertyBase(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParams& Prop) : Super(InOwner, Prop)"
  },
  {
    "label": "ClassFunc()",
    "kind": "Method",
    "detail": "Function (this -> PropertyClass = Prop . ClassFunc ? Prop .)",
    "insertText": "ClassFunc()"
  },
  {
    "label": "TFObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFObjectPropertyBase(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParamsWithoutClass& Prop, UClass* InClass) : Super(InOwner, Prop)"
  },
  {
    "label": "TFObjectPropertyBase()",
    "kind": "Method",
    "detail": "Function (this -> PropertyClass = InClass ; } # if WITH_EDITORONLY_DATA)",
    "insertText": "TFObjectPropertyBase(UField* InField) : Super(InField)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EObjectPropertyOptions { None = 0,AllowNullValuesOnNonNullableProperty = 1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EObjectPropertyOptions)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (class FObjectProperty : public TFObjectPropertyBase<TObjectPtr<UObject>> {)",
    "insertText": "DECLARE_FIELD(FObjectProperty, TFObjectPropertyBase<TObjectPtr<UObject>>, CASTCLASS_FObjectProperty) FObjectProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FObjectProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectProperty(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParams& Prop)"
  },
  {
    "label": "FObjectProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FObjectProperty(UField* InField)"
  },
  {
    "label": "GetCPPTypeCustom()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetCPPTypeCustom(FString* ExtendedTypeText, uint32 CPPExportFlags, const FString& InnerNativeTypeName)"
  },
  {
    "label": "PostSerializeObjectItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerializeObjectItem(FArchive& SerializingArchive, void* Value, UObject* CurrentValue, UObject* ObjectValue, EObjectPropertyOptions Options = EObjectPropertyOptions::None)"
  },
  {
    "label": "GetObjectPtrPropertyValuePtr()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UObject>*)",
    "insertText": "GetObjectPtrPropertyValuePtr(const void* PropertyValueAddress)"
  },
  {
    "label": "GetObjectPtrPropertyValueRef()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UObject>&)",
    "insertText": "GetObjectPtrPropertyValueRef(const void* PropertyValueAddress)"
  },
  {
    "label": "ClearValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearValue(Data)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (class FWeakObjectProperty : public TFObjectPropertyBase<FWeakObjectPtr> {)",
    "insertText": "DECLARE_FIELD(FWeakObjectProperty, TFObjectPropertyBase<FWeakObjectPtr>, CASTCLASS_FWeakObjectProperty) FWeakObjectProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FWeakObjectProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWeakObjectProperty(FFieldVariant InOwner, const UECodeGen_Private::FWeakObjectPropertyParams& Prop)"
  },
  {
    "label": "FWeakObjectProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FWeakObjectProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (public : } ; class FLazyObjectProperty : public TFObjectPropertyBase<FLazyObjectPtr> {)",
    "insertText": "DECLARE_FIELD(FLazyObjectProperty, TFObjectPropertyBase<FLazyObjectPtr>, CASTCLASS_FLazyObjectProperty) FLazyObjectProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FLazyObjectProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLazyObjectProperty(FFieldVariant InOwner, const UECodeGen_Private::FLazyObjectPropertyParams& Prop)"
  },
  {
    "label": "FLazyObjectProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FLazyObjectProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (public : } ; class FSoftObjectProperty : public TFObjectPropertyBase<FSoftObjectPtr> {)",
    "insertText": "DECLARE_FIELD(FSoftObjectProperty, TFObjectPropertyBase<FSoftObjectPtr>, CASTCLASS_FSoftObjectProperty) FSoftObjectProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FSoftObjectProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftObjectProperty(FFieldVariant InOwner, const UECodeGen_Private::FSoftObjectPropertyParams& Prop)"
  },
  {
    "label": "FSoftObjectProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftObjectProperty(FFieldVariant InOwner, const UECodeGen_Private::FObjectPropertyParamsWithoutClass& Prop, UClass* InClass)"
  },
  {
    "label": "FSoftObjectProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FSoftObjectProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (public : } ; class FClassProperty : public FObjectProperty {)",
    "insertText": "DECLARE_FIELD(FClassProperty, FObjectProperty, CASTCLASS_FClassProperty)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FClassProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClassProperty(FFieldVariant InOwner, const UECodeGen_Private::FClassPropertyParams& Prop)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FClassProperty(UField* InField)"
  },
  {
    "label": "SetMetaClass()",
    "kind": "Method",
    "detail": "Function (# if USE_CIRCULAR_DEPENDENCY_LOAD_DEFERRING void)",
    "insertText": "SetMetaClass(UClass* NewMetaClass)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (class FSoftClassProperty : public FSoftObjectProperty {)",
    "insertText": "DECLARE_FIELD(FSoftClassProperty, FSoftObjectProperty, CASTCLASS_FSoftClassProperty)"
  },
  {
    "label": "FSoftClassProperty()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSoftClassProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FSoftClassProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftClassProperty(FFieldVariant InOwner, const UECodeGen_Private::FSoftClassPropertyParams& Prop)"
  },
  {
    "label": "FSoftClassProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FSoftClassProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (MetaClass = NewMetaClass ; } # endif } ; class FInterfaceProperty : public TProperty<FScriptInterface,FProperty> {)",
    "insertText": "DECLARE_FIELD(FInterfaceProperty, (TProperty<FScriptInterface, FProperty>), CASTCLASS_FInterfaceProperty)"
  },
  {
    "label": "FInterfaceProperty()",
    "kind": "Method",
    "detail": "Function (public : typedef Super::TTypeFundamentals TTypeFundamentals ; typedef TTypeFundamentals::TCppType TCppType ;)",
    "insertText": "FInterfaceProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FInterfaceProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInterfaceProperty(FFieldVariant InOwner, const UECodeGen_Private::FInterfacePropertyParams& Prop)"
  },
  {
    "label": "FInterfaceProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FInterfaceProperty(UField* InField)"
  },
  {
    "label": "SetInterfaceClass()",
    "kind": "Method",
    "detail": "Function (# if USE_CIRCULAR_DEPENDENCY_LOAD_DEFERRING void)",
    "insertText": "SetInterfaceClass(UClass* NewInterfaceClass)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (InterfaceClass = NewInterfaceClass ; } # endif } ; class FNameProperty : public TProperty_WithEqualityAndSerializer<FName,FProperty> {)",
    "insertText": "DECLARE_FIELD(FNameProperty, (TProperty_WithEqualityAndSerializer<FName, FProperty>), CASTCLASS_FNameProperty)"
  },
  {
    "label": "FNameProperty()",
    "kind": "Method",
    "detail": "Function (typedef TTypeFundamentals::TCppType TCppType ;)",
    "insertText": "FNameProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FNameProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameProperty(FFieldVariant InOwner, const UECodeGen_Private::FNamePropertyParams& Prop)"
  },
  {
    "label": "FNameProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FNameProperty(UField* InField)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; using FFreezableScriptArray = TScriptArray<TMemoryImageAllocator<DEFAULT_ALIGNMENT>> ; # if ! PLATFORM_ANDROID | | ! PLATFORM_32BITS)",
    "insertText": "static_assert(sizeof(FScriptArray) == sizeof(FFreezableScriptArray) && alignof(FScriptArray) == alignof(FFreezableScriptArray), \"FScriptArray and FFreezableScriptArray are expected to be layout-compatible\")"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif class FScriptArrayHelper ; class FArrayProperty : public TProperty<FScriptArray,FProperty> {)",
    "insertText": "DECLARE_FIELD(FArrayProperty, (TProperty<FScriptArray, FProperty>), CASTCLASS_FArrayProperty)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (FProperty* Inner ; public : enum { CPPSize =)",
    "insertText": "sizeof(FScriptArray), CPPAlignment = alignof(FScriptArray)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (using TTypeFundamentals = Super::TTypeFundamentals ; using TCppType = TTypeFundamentals::TCppType ;)",
    "insertText": "FArrayProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags, EArrayPropertyFlags InArrayPropertyFlags=EArrayPropertyFlags::None)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FArrayProperty(FFieldVariant InOwner, const UECodeGen_Private::FArrayPropertyParams& Prop)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FArrayProperty()"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FArrayProperty(UField* InField)"
  },
  {
    "label": "AddCppProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCppProperty(FProperty* Property)"
  },
  {
    "label": "GetInnerFieldByName()",
    "kind": "Method",
    "detail": "Function (FField*)",
    "insertText": "GetInnerFieldByName(const FName& InName)"
  },
  {
    "label": "GetInnerFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInnerFields(TArray<FField*>& OutFields)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((uint8*)Dest + i * static_cast<size_t>(this->GetElementSize()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 i = 0; i < this->ArrayDim; ++i)"
  },
  {
    "label": "GetCPPTypeCustom()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPPTypeCustom(FString* ExtendedTypeText, uint32 CPPExportFlags, const FString& InnerTypeText, const FString& InInnerExtendedTypeText)"
  },
  {
    "label": "ExportTextInnerItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportTextInnerItem(FString& ValueStr, const FProperty* Inner, const void* PropertyValue, int32 PropertySize, const void* DefaultValue, int32 DefaultSize, UObject* Parent = nullptr, int32 PortFlags = 0, UObject* ExportRootScope = nullptr)"
  },
  {
    "label": "ImportTextInnerItem()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportTextInnerItem(const TCHAR* Buffer, const FProperty* Inner, void* Data, int32 PortFlags, UObject* OwnerObject, FScriptArrayHelper* ArrayHelper = nullptr, FOutputDevice* ErrorText = (FOutputDevice*)GWarn)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; using FFreezableScriptMap = TScriptMap<FMemoryImageSetAllocator> ; class FMapProperty : public TProperty<FScriptMap,FProperty> {)",
    "insertText": "DECLARE_FIELD(FMapProperty, (TProperty<FScriptMap, FProperty>), CASTCLASS_FMapProperty)"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (FProperty* ValueProp ; FScriptMapLayout MapLayout ; EMapPropertyFlags MapFlags ; template<CallableType> auto)",
    "insertText": "WithScriptMap(void* InMap, CallableType&& Callable)"
  },
  {
    "label": "Callable()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Callable((FScriptMap*)InMap)"
  },
  {
    "label": "FMapProperty()",
    "kind": "Method",
    "detail": "Function (} } public : using TTypeFundamentals = Super::TTypeFundamentals ; using TCppType = TTypeFundamentals::TCppType ;)",
    "insertText": "FMapProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags, EMapPropertyFlags InMapFlags=EMapPropertyFlags::None)"
  },
  {
    "label": "FMapProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMapProperty(FFieldVariant InOwner, const UECodeGen_Private::FMapPropertyParams& Prop)"
  },
  {
    "label": "FMapProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FMapProperty(UField* InField)"
  },
  {
    "label": "FMapProperty()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "FMapProperty()"
  },
  {
    "label": "GetValueAddressAtIndex_Direct()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetValueAddressAtIndex_Direct(const FProperty* Inner, void* InValueAddress, int32 LogicalIndex)"
  },
  {
    "label": "GetCPPTypeCustom()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPPTypeCustom(FString* ExtendedTypeText, uint32 CPPExportFlags, const FString& KeyTypeText, const FString& InKeyExtendedTypeText, const FString& ValueTypeText, const FString& InValueExtendedTypeText)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNum(void* InMap)"
  },
  {
    "label": "GetPairStride()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPairStride()"
  },
  {
    "label": "GetPairPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetPairPtr(void* InMap, int32 InternalIndex)"
  },
  {
    "label": "GetKeyProperty()",
    "kind": "Method",
    "detail": "Function (} const FProperty*)",
    "insertText": "GetKeyProperty()"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FSetProperty : public TProperty<FScriptSet,FProperty> {)",
    "insertText": "DECLARE_FIELD(FSetProperty, (TProperty<FScriptSet, FProperty>), CASTCLASS_FSetProperty)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (FScriptSetLayout SetLayout ; public : using TTypeFundamentals = Super::TTypeFundamentals ; using TCppType = TTypeFundamentals::TCppType ;)",
    "insertText": "FSetProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSetProperty(FFieldVariant InOwner, const UECodeGen_Private::FSetPropertyParams& Prop)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FSetProperty(UField* InField)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "FSetProperty()"
  },
  {
    "label": "GetCPPTypeCustom()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPPTypeCustom(FString* ExtendedTypeText, uint32 CPPExportFlags, const FString& ElementTypeText, const FString& InElementExtendedTypeText)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNum(void* InSet)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FScriptSet*)",
    "insertText": "Set(FScriptSet*)"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStride()"
  },
  {
    "label": "GetElementPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetElementPtr(void* InSet, int32 InternalIndex)"
  },
  {
    "label": "GetElementProperty()",
    "kind": "Method",
    "detail": "Function (} const FProperty*)",
    "insertText": "GetElementProperty()"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (} ; class FScriptArrayHelper { enum EInternal { Internal } ; template<CallableType> auto)",
    "insertText": "WithScriptArray(CallableType&& Callable)"
  },
  {
    "label": "Callable()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Callable(HeapArray)"
  },
  {
    "label": "FScriptArrayHelper()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "FScriptArrayHelper(const FArrayProperty* InProperty, const void* InArray) : FScriptArrayHelper(Internal, InProperty->Inner, InArray, InProperty->Inner->GetElementSize(), InProperty->Inner->GetMinAlignment(), InProperty->ArrayFlags)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "WithScriptArray([](auto* Array) { return Array->Num(); })"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "WithScriptArray([](auto* Array) { return Array->NumUnchecked(); })"
  },
  {
    "label": "GetElementPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetElementPtr(int32 Index = 0)"
  },
  {
    "label": "EmptyAndAddValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyAndAddValues(int32 Count)"
  },
  {
    "label": "EmptyValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyValues(Count)"
  },
  {
    "label": "AddValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValues(Count)"
  },
  {
    "label": "EmptyAndAddUninitializedValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyAndAddUninitializedValues(int32 Count)"
  },
  {
    "label": "AddUninitializedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUninitializedValues(Count)"
  },
  {
    "label": "ExpandForIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExpandForIndex(int32 Index)"
  },
  {
    "label": "AddValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValues(Index - Num() + 1)"
  },
  {
    "label": "OnInvalidArrayNum()",
    "kind": "Method",
    "detail": "Function (UE::Core::)",
    "insertText": "OnInvalidArrayNum(Count)"
  },
  {
    "label": "AddValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValues(Count - OldNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Count < OldNum)"
  },
  {
    "label": "RemoveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveValues(Count, OldNum - Count)"
  },
  {
    "label": "AddValues()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "AddValues(int32 Count)"
  },
  {
    "label": "ConstructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructItems(OldNum, Count)"
  },
  {
    "label": "AddUninitializedValues()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddUninitializedValues(int32 Count)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (const int32 OldNum =)",
    "insertText": "WithScriptArray([this, Count](auto* Array) { return Array->Add(Count, ElementSize, ElementAlignment); })"
  },
  {
    "label": "InsertValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertValues(int32 Index, int32 Count = 1)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, Index, Count](auto* Array) { Array->Insert(Index, Count, ElementSize, ElementAlignment); })"
  },
  {
    "label": "ConstructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructItems(Index, Count)"
  },
  {
    "label": "EmptyValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyValues(int32 Slack = 0)"
  },
  {
    "label": "NumUnchecked()",
    "kind": "Method",
    "detail": "Function (const int32 OldNum =)",
    "insertText": "NumUnchecked()"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItems(0, OldNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OldNum || Slack)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, Slack](auto* Array) { Array->Empty(Slack, ElementSize, ElementAlignment); })"
  },
  {
    "label": "RemoveValues()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveValues(int32 Index, int32 Count = 1)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItems(Index, Count)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, Index, Count](auto* Array) { Array->Remove(Index, Count, ElementSize, ElementAlignment); })"
  },
  {
    "label": "ClearValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearValues(int32 Index, int32 Count = 1)"
  },
  {
    "label": "ClearItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearItems(Index, Count)"
  },
  {
    "label": "SwapValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapValues(int32 A, int32 B)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, A, B](auto* Array) { Array->SwapMemory(A, B, ElementSize); })"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveAssign(void* InOtherArray)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItems(0, Num())"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, InOtherArray](auto* Array) { Array->MoveAssign(*static_cast<decltype(Array)>(InOtherArray), ElementSize, ElementAlignment); })"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([this, &Ar](auto* Array) { Array->CountBytes(Ar, ElementSize); })"
  },
  {
    "label": "DestroyContainer_Unsafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyContainer_Unsafe()"
  },
  {
    "label": "WithScriptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithScriptArray([](auto* Array) { DestructItem(Array); })"
  },
  {
    "label": "CreateHelperFormInnerProperty()",
    "kind": "Method",
    "detail": "Function (} FScriptArrayHelper)",
    "insertText": "CreateHelperFormInnerProperty(const FProperty* InInnerProperty, const void *InArray, EArrayPropertyFlags InArrayFlags = EArrayPropertyFlags::None)"
  },
  {
    "label": "FScriptArrayHelper()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FScriptArrayHelper(EInternal, const FProperty* InInnerProperty, const void* InArray, int32 InElementSize, uint32 InElementAlignment, EArrayPropertyFlags InArrayFlags) : InnerProperty(InInnerProperty) , ElementSize(InElementSize) , ElementAlignment(InElementAlignment) , ArrayFlags(InArrayFlags)"
  },
  {
    "label": "FreezableArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreezableArray(FFreezableScriptArray*)"
  },
  {
    "label": "HeapArray()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "HeapArray(FScriptArray*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(ElementSize > 0)"
  },
  {
    "label": "ConstructItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructItems(int32 Index, int32 Count)"
  },
  {
    "label": "GetRawPtr()",
    "kind": "Method",
    "detail": "Function (uint8* Dest =)",
    "insertText": "GetRawPtr(Index)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Dest, Count * static_cast<size_t>(ElementSize))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 LoopIndex = 0; LoopIndex < Count; LoopIndex++, Dest += ElementSize)"
  },
  {
    "label": "InitializeValue()",
    "kind": "Method",
    "detail": "Function (InnerProperty ->)",
    "insertText": "InitializeValue(Dest)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "DestructItems(int32 Index, int32 Count)"
  },
  {
    "label": "DestroyValue()",
    "kind": "Method",
    "detail": "Function (InnerProperty ->)",
    "insertText": "DestroyValue(Dest)"
  },
  {
    "label": "ClearItems()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ClearItems(int32 Index, int32 Count)"
  },
  {
    "label": "ClearValue()",
    "kind": "Method",
    "detail": "Function (InnerProperty ->)",
    "insertText": "ClearValue(Dest)"
  },
  {
    "label": "FScriptArrayHelper_InContainer()",
    "kind": "Method",
    "detail": "Function (} } } } const FProperty* InnerProperty ; union { FScriptArray* HeapArray ; FFreezableScriptArray* FreezableArray ; } ; int32 ElementSize ; uint32 ElementAlignment ; EArrayPropertyFlags ArrayFlags ; } ; class FScriptArrayHelper_InContainer : public FScriptArrayHelper { public :)",
    "insertText": "FScriptArrayHelper_InContainer(const FArrayProperty* InProperty, const void* InContainer, int32 FixedArrayIndex=0) :FScriptArrayHelper(InProperty, InProperty->ContainerPtrToValuePtr<void>(InContainer, FixedArrayIndex))"
  },
  {
    "label": "FScriptArrayHelper_InContainer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptArrayHelper_InContainer(const FArrayProperty* InProperty, const UObject* InContainer, int32 FixedArrayIndex=0) :FScriptArrayHelper(InProperty, InProperty->ContainerPtrToValuePtr<void>(InContainer, FixedArrayIndex))"
  },
  {
    "label": "TScriptContainerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<ContainerType> struct TScriptContainerIterator {)",
    "insertText": "TScriptContainerIterator(const ContainerType& InContainer) : Container(InContainer)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance()"
  },
  {
    "label": "TScriptContainerIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScriptContainerIterator(const ContainerType& InContainer, const int32 InLogicalIndex) : Container(InContainer)"
  },
  {
    "label": "GetMaxIndex()",
    "kind": "Method",
    "detail": "Function (const int32 MaxIndex = Container .)",
    "insertText": "GetMaxIndex()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(LogicalIndex < InLogicalIndex && InternalIndex < MaxIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TScriptContainerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (const TScriptContainerIterator)",
    "insertText": "Temp(*this)"
  },
  {
    "label": "GetInternalIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetInternalIndex()"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (+ + InternalIndex ; } + + LogicalIndex ; } } ; class FScriptMapHelper { enum EInternal { Internal } ; class FMapProperty ; template<CallableType> auto)",
    "insertText": "WithScriptMap(CallableType&& Callable)"
  },
  {
    "label": "Callable()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Callable(HeapMap)"
  },
  {
    "label": "FScriptMapHelper()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "FScriptMapHelper(const FMapProperty* InProperty, const void* InMap) : FScriptMapHelper(Internal, InProperty->KeyProp, InProperty->ValueProp, InMap, InProperty->MapLayout, InProperty->MapFlags)"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} using FIterator = TScriptContainerIterator<FScriptMapHelper> ; FIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "CreateIterator(const int32 InLogicalIndex)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 InternalIndex)"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "WithScriptMap([](auto* Map) { return Map->Num(); })"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "WithScriptMap([](auto* Map) { return Map->NumUnchecked(); })"
  },
  {
    "label": "GetPairPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetPairPtr(int32 InternalIndex)"
  },
  {
    "label": "GetPairPtr()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetPairPtr(const int32 InternalIndex)"
  },
  {
    "label": "GetKeyPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetKeyPtr(int32 InternalIndex)"
  },
  {
    "label": "GetValuePtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetValuePtr(int32 InternalIndex)"
  },
  {
    "label": "GetPairPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetPairPtr(const FIterator Iterator)"
  },
  {
    "label": "GetKeyPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetKeyPtr(const FIterator Iterator)"
  },
  {
    "label": "GetValuePtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetValuePtr(const FIterator Iterator)"
  },
  {
    "label": "FindNthPairPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindNthPairPtr(int32 N)"
  },
  {
    "label": "FindInternalIndex()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "FindInternalIndex(N)"
  },
  {
    "label": "FindNthKeyPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindNthKeyPtr(int32 N)"
  },
  {
    "label": "FindNthValuePtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindNthValuePtr(int32 N)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveAssign(void* InOtherMap)"
  },
  {
    "label": "AddUninitializedValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddUninitializedValue()"
  },
  {
    "label": "AddDefaultValue_Invalid_NeedsRehash()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "AddDefaultValue_Invalid_NeedsRehash()"
  },
  {
    "label": "Rehash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Rehash()"
  },
  {
    "label": "FindInternalIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindInternalIndex(int32 LogicalIdx)"
  },
  {
    "label": "FindLogicalIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindLogicalIndex(int32 InternalIdx)"
  },
  {
    "label": "FindMapIndexWithKey()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindMapIndexWithKey(const void* PairWithKeyToFind, int32 IndexHint = 0)"
  },
  {
    "label": "FindMapPairPtrWithKey()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindMapPairPtrWithKey(const void* PairWithKeyToFind, int32 IndexHint = 0)"
  },
  {
    "label": "FindMapIndexWithKey()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "FindMapIndexWithKey(PairWithKeyToFind, IndexHint)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Result(InternalIndex >= 0) ? GetPairPtrWithoutCheck(InternalIndex)"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "WithScriptMap([this, KeyPtr, LocalKeyPropForCapture = this->KeyProp](auto* Map) { return Map->FindPairIndex( KeyPtr, MapLayout, [LocalKeyPropForCapture](const void* ElementKey) { return LocalKeyPropForCapture->GetValueTypeHash(ElementKey); }, [LocalKeyPropForCapture](const void* A, const void* B) { return LocalKeyPropForCapture->Identical(A, B); } ); })"
  },
  {
    "label": "FindMapPairIndexFromHash()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "FindMapPairIndexFromHash(KeyPtr)"
  },
  {
    "label": "AddPair()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPair(const void* KeyPtr, const void* ValuePtr)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "FindOrAdd(const void* KeyPtr)"
  },
  {
    "label": "RemovePair()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemovePair(const void* KeyPtr)"
  },
  {
    "label": "CreateHelperFormInnerProperties()",
    "kind": "Method",
    "detail": "Function (} FScriptMapHelper)",
    "insertText": "CreateHelperFormInnerProperties(FProperty* InKeyProperty, FProperty* InValProperty, const void *InMap, EMapPropertyFlags InMapFlags = EMapPropertyFlags::None)"
  },
  {
    "label": "FScriptMapHelper()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FScriptMapHelper(EInternal, FProperty* InKeyProp, FProperty* InValueProp, const void* InMap, const FScriptMapLayout& InMapLayout, EMapPropertyFlags InMapFlags) : KeyProp (InKeyProp) , ValueProp(InValueProp) , MapLayout(InMapLayout) , MapFlags (InMapFlags)"
  },
  {
    "label": "FreezableMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreezableMap(FFreezableScriptMap*)"
  },
  {
    "label": "HeapMap()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "HeapMap(FScriptMap*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(KeyProp && ValueProp)"
  },
  {
    "label": "ConstructItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructItem(int32 InternalIndex)"
  },
  {
    "label": "bZeroKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bZeroKey(KeyProp ->PropertyFlags & CPF_ZeroConstructor)"
  },
  {
    "label": "bZeroValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bZeroValue(ValueProp->PropertyFlags & CPF_ZeroConstructor)"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (void* Dest =)",
    "insertText": "WithScriptMap([this, InternalIndex](auto* Map) { return Map->GetData(InternalIndex, MapLayout); })"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Dest, MapLayout.SetLayout.Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bZeroKey)"
  },
  {
    "label": "InitializeValue_InContainer()",
    "kind": "Method",
    "detail": "Function (KeyProp ->)",
    "insertText": "InitializeValue_InContainer(Dest)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bZeroValue)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DestructItems(int32 InternalIndex, int32 Count)"
  },
  {
    "label": "bDestroyValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bDestroyValues(ValueProp->PropertyFlags & (CPF_IsPlainOldData | CPF_NoDestructor))"
  },
  {
    "label": "WithScriptMap()",
    "kind": "Method",
    "detail": "Function (uint32 Stride = MapLayout . SetLayout . Size ; uint8* PairPtr =)",
    "insertText": "WithScriptMap([this, InternalIndex](auto* Map) { return (uint8*)Map->GetData(InternalIndex, MapLayout); })"
  },
  {
    "label": "DestroyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (KeyProp ->)",
    "insertText": "DestroyValue_InContainer(PairPtr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - Count ; } PairPtr + = Stride ; } } else {)",
    "insertText": "for(; Count; ++InternalIndex)"
  },
  {
    "label": "GetPairPtrWithoutCheck()",
    "kind": "Method",
    "detail": "Function (- - Count ; } PairPtr + = Stride ; } } } } uint8*)",
    "insertText": "GetPairPtrWithoutCheck(int32 InternalIndex)"
  },
  {
    "label": "GetKeyPtrWithoutCheck()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetKeyPtrWithoutCheck(int32 InternalIndex)"
  },
  {
    "label": "GetValuePtrWithoutCheck()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetValuePtrWithoutCheck(int32 InternalIndex)"
  },
  {
    "label": "FScriptMapHelper_InContainer()",
    "kind": "Method",
    "detail": "Function (} public : FProperty* KeyProp ; FProperty* ValueProp ; union { FScriptMap* HeapMap ; FFreezableScriptMap* FreezableMap ; } ; FScriptMapLayout MapLayout ; EMapPropertyFlags MapFlags ; } ; class FScriptMapHelper_InContainer : public FScriptMapHelper { public :)",
    "insertText": "FScriptMapHelper_InContainer(const FMapProperty* InProperty, const void* InArray, int32 FixedArrayIndex=0) :FScriptMapHelper(InProperty, InProperty->ContainerPtrToValuePtr<void>(InArray, FixedArrayIndex))"
  },
  {
    "label": "FScriptSetHelper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptSetHelper(const FSetProperty* InProperty, const void* InSet) : ElementProp(InProperty->ElementProp) , Set((FScriptSet*)InSet) , SetLayout(InProperty->SetLayout)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "Result((const FScriptSet*)Target)->Num()"
  },
  {
    "label": "GetElementPtr()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetElementPtr(int32 InternalIndex)"
  },
  {
    "label": "GetElementPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetElementPtr(const FIterator Iterator)"
  },
  {
    "label": "FindNthElementPtr()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindNthElementPtr(int32 N)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveAssign(void* InOtherSet)"
  },
  {
    "label": "OtherSet()",
    "kind": "Method",
    "detail": "Function (FScriptSet*)",
    "insertText": "OtherSet(FScriptSet*)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (Set ->)",
    "insertText": "MoveAssign(*OtherSet, SetLayout)"
  },
  {
    "label": "EmptyElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyElements(int32 Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Set ->)",
    "insertText": "Empty(Slack, SetLayout)"
  },
  {
    "label": "ConstructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructItem(Result)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItems(InternalIndex, Count)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Set ->)",
    "insertText": "RemoveAt(InternalIndex, SetLayout)"
  },
  {
    "label": "FindElementIndex()",
    "kind": "Method",
    "detail": "Function (LogicalIndex - - ; } } return LogicalIndex ; } int32)",
    "insertText": "FindElementIndex(const void* ElementToFind, int32 IndexHint = 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (IndexHint = 0 ; })",
    "insertText": "check(IndexHint >= 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FProperty* LocalKeyProp = this -> ElementProp ; int32 InternalIndex = IndexHint ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "GetElementPtrWithoutCheck()",
    "kind": "Method",
    "detail": "Function (const void* ElementToCheck =)",
    "insertText": "GetElementPtrWithoutCheck(InternalIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InternalIndex = 0 ; })",
    "insertText": "if(InternalIndex == IndexHint)"
  },
  {
    "label": "FindElementIndex()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "FindElementIndex(ElementToFind, IndexHint)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Result(InternalIndex >= 0 ? GetElementPtrWithoutCheck(InternalIndex) : nullptr)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (FProperty* LocalElementPropForCapture = ElementProp ; return Set ->)",
    "insertText": "FindIndex(ElementToFind, SetLayout, [LocalElementPropForCapture](const void* Element) { return LocalElementPropForCapture->GetValueTypeHash(Element); }, [LocalElementPropForCapture](const void* A, const void* B) { return LocalElementPropForCapture->Identical(A, B); })"
  },
  {
    "label": "FindElementPtrFromHash()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "FindElementPtrFromHash(const void* ElementToFind)"
  },
  {
    "label": "FindElementIndexFromHash()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex =)",
    "insertText": "FindElementIndexFromHash(ElementToFind)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FProperty* LocalElementPropForCapture = ElementProp ; FScriptSetLayout& LocalSetLayoutForCapture = SetLayout ; Set ->)",
    "insertText": "Add(ElementToAdd, SetLayout, [LocalElementPropForCapture](const void* Element) { return LocalElementPropForCapture->GetValueTypeHash(Element); }, [LocalElementPropForCapture](const void* A, const void* B) { return LocalElementPropForCapture->Identical(A, B); }, [LocalElementPropForCapture, ElementToAdd, LocalSetLayoutForCapture](void* NewElement) { if (LocalElementPropForCapture->PropertyFlags & CPF_ZeroConstructor) { FMemory::Memzero(NewElement, LocalElementPropForCapture->GetSize()); } else { LocalElementPropForCapture->InitializeValue(NewElement); } LocalElementPropForCapture->CopySingleValueToScriptVM(NewElement, ElementToAdd); }, [LocalElementPropForCapture](void* Element) { if (!(LocalElementPropForCapture->PropertyFlags & (CPF_IsPlainOldData | CPF_NoDestructor))) { LocalElementPropForCapture->DestroyValue(Element); } })"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveElement(const void* ElementToRemove)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (FProperty* LocalElementPropForCapture = ElementProp ; int32 FoundIndex = Set ->)",
    "insertText": "FindIndex(ElementToRemove, SetLayout, [LocalElementPropForCapture](const void* Element) { return LocalElementPropForCapture->GetValueTypeHash(Element); }, [LocalElementPropForCapture](const void* A, const void* B) { return LocalElementPropForCapture->Identical(A, B); })"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(FoundIndex)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (const int32 ElementPropSize = InElementProperty ->)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetScriptLayout()",
    "kind": "Method",
    "detail": "Function (ScriptSetHelper . SetLayout =)",
    "insertText": "GetScriptLayout(ElementPropSize, ElementPropAlignment)"
  },
  {
    "label": "bZeroElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bZeroElement(ElementProp->PropertyFlags & CPF_ZeroConstructor)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Dest, SetLayout.Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bZeroElement)"
  },
  {
    "label": "DestroyValue_InContainer()",
    "kind": "Method",
    "detail": "Function (ElementProp ->)",
    "insertText": "DestroyValue_InContainer(ElementPtr)"
  },
  {
    "label": "GetElementPtrWithoutCheck()",
    "kind": "Method",
    "detail": "Function (- - Count ; } ElementPtr + = Stride ; } } } uint8*)",
    "insertText": "GetElementPtrWithoutCheck(int32 InternalIndex)"
  },
  {
    "label": "FScriptSetHelper_InContainer()",
    "kind": "Method",
    "detail": "Function (} public : FProperty* ElementProp ; FScriptSet* Set ; FScriptSetLayout SetLayout ; } ; class FScriptSetHelper_InContainer : public FScriptSetHelper { public :)",
    "insertText": "FScriptSetHelper_InContainer(const FSetProperty* InProperty, const void* InArray, int32 FixedArrayIndex=0) :FScriptSetHelper(InProperty, InProperty->ContainerPtrToValuePtr<void>(InArray, FixedArrayIndex))"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} } ; class FStructProperty : public FProperty {)",
    "insertText": "DECLARE_FIELD(FStructProperty, FProperty, CASTCLASS_FStructProperty)"
  },
  {
    "label": "FStructProperty()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStructProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FStructProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructProperty(FFieldVariant InOwner, const UECodeGen_Private::FStructPropertyParams& Prop)"
  },
  {
    "label": "FStructProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FStructProperty(UField* InField)"
  },
  {
    "label": "FindInnerPropertyInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindInnerPropertyInstance(FName PropertyName, const void* Data, const FProperty*& OutProp, const void*& OutData)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FDelegateProperty : public TProperty<FScriptDelegate,FProperty> {)",
    "insertText": "DECLARE_FIELD(FDelegateProperty, (TProperty<FScriptDelegate, FProperty>), CASTCLASS_FDelegateProperty)"
  },
  {
    "label": "FDelegateProperty()",
    "kind": "Method",
    "detail": "Function (public : using TTypeFundamentals = Super::TTypeFundamentals ; using TCppType = TTypeFundamentals::TCppType ;)",
    "insertText": "FDelegateProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FDelegateProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDelegateProperty(FFieldVariant InOwner, const UECodeGen_Private::FDelegatePropertyParams& Prop)"
  },
  {
    "label": "FDelegateProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FDelegateProperty(UField* InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FMulticastDelegateProperty : public FProperty {)",
    "insertText": "DECLARE_FIELD(FMulticastDelegateProperty, FProperty, CASTCLASS_FMulticastDelegateProperty)"
  },
  {
    "label": "FMulticastDelegateProperty()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMulticastDelegateProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags)"
  },
  {
    "label": "FMulticastDelegateProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMulticastDelegateProperty(FFieldVariant InOwner, const UECodeGen_Private::FMulticastDelegatePropertyParams& Prop, EPropertyFlags AdditionalPropertyFlags = CPF_None)"
  },
  {
    "label": "FMulticastDelegateProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FMulticastDelegateProperty(UField* InField)"
  },
  {
    "label": "GetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (const FMulticastScriptDelegate*)",
    "insertText": "GetMulticastDelegate(const void* PropertyValue) const PURE_VIRTUAL(FMulticastDelegateProperty::GetMulticastDelegate, return nullptr;)"
  },
  {
    "label": "SetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMulticastDelegate(void* PropertyValue, FMulticastScriptDelegate ScriptDelegate) const PURE_VIRTUAL(FMulticastDelegateProperty::SetMulticastDelegate,)"
  },
  {
    "label": "AddDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDelegate(FScriptDelegate ScriptDelegate, UObject* Parent = nullptr, void* PropertyValue = nullptr) const PURE_VIRTUAL(FMulticastDelegateProperty::AddDelegate,)"
  },
  {
    "label": "RemoveDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDelegate(const FScriptDelegate& ScriptDelegate, UObject* Parent = nullptr, void* PropertyValue = nullptr) const PURE_VIRTUAL(FMulticastDelegateProperty::RemoveDelegate,)"
  },
  {
    "label": "ClearDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDelegate(UObject* Parent = nullptr, void* PropertyValue = nullptr) const PURE_VIRTUAL(FMulticastDelegateProperty::ClearDelegate,)"
  },
  {
    "label": "GetMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (protected : class FProperty ; FMulticastScriptDelegate EmptyDelegate ; FMulticastScriptDelegate&)",
    "insertText": "GetMulticastScriptDelegate(const void* PropertyValue, int32 Index) const PURE_VIRTUAL(FMulticastDelegateProperty::GetMulticastScriptDelegate, return EmptyDelegate;)"
  },
  {
    "label": "ImportText_Add()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText_Add(const TCHAR* Buffer, void* PropertyValue, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "ImportText_Remove()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText_Remove(const TCHAR* Buffer, void* PropertyValue, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "ImportDelegateFromText()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportDelegateFromText(FMulticastScriptDelegate& MulticastDelegate, const TCHAR* Buffer, UObject* OwnerObject, FOutputDevice* ErrorText)"
  },
  {
    "label": "TProperty_MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (} ; template<class InTCppType> class TProperty_MulticastDelegate : public TProperty<InTCppType,FMulticastDelegateProperty> { public : typedef TProperty<InTCppType,FMulticastDelegateProperty> Super ; typedef InTCppType TCppType ; typedef Super::TTypeFundamentals TTypeFundamentals ;)",
    "insertText": "TProperty_MulticastDelegate(FFieldVariant InOwner, const FName& InName, UFunction* InSignatureFunction = nullptr) : Super(InOwner, InName)"
  },
  {
    "label": "TProperty_MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (this -> SignatureFunction = InSignatureFunction ; })",
    "insertText": "TProperty_MulticastDelegate(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : Super(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "TProperty_MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (this -> SignatureFunction = nullptr ; })",
    "insertText": "TProperty_MulticastDelegate(EInternal InInernal, FFieldClass* InClass) : Super(EC_InternalUseOnlyConstructor, InClass)"
  },
  {
    "label": "TProperty_MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProperty_MulticastDelegate(FFieldVariant InOwner, const UECodeGen_Private::FMulticastDelegatePropertyParams& Prop) : Super(InOwner, Prop)"
  },
  {
    "label": "SignatureFunctionFunc()",
    "kind": "Method",
    "detail": "Function (this -> SignatureFunction = Prop . SignatureFunctionFunc ? Prop .)",
    "insertText": "SignatureFunctionFunc()"
  },
  {
    "label": "TProperty_MulticastDelegate()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA)",
    "insertText": "TProperty_MulticastDelegate(UField* InField) : Super(InField)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} } ; class FMulticastInlineDelegateProperty : public TProperty_MulticastDelegate<FMulticastScriptDelegate> {)",
    "insertText": "DECLARE_FIELD(FMulticastInlineDelegateProperty, TProperty_MulticastDelegate<FMulticastScriptDelegate>, CASTCLASS_FMulticastInlineDelegateProperty) public: FMulticastInlineDelegateProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : TProperty_MulticastDelegate(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "FMulticastInlineDelegateProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMulticastInlineDelegateProperty(FFieldVariant InOwner, const UECodeGen_Private::FMulticastDelegatePropertyParams& Prop)"
  },
  {
    "label": "FMulticastInlineDelegateProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FMulticastInlineDelegateProperty(UField* InField) : TProperty_MulticastDelegate(InField)"
  },
  {
    "label": "GetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (const FMulticastScriptDelegate*)",
    "insertText": "GetMulticastDelegate(const void* PropertyValue)"
  },
  {
    "label": "SetMulticastDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMulticastDelegate(void* PropertyValue, FMulticastScriptDelegate ScriptDelegate)"
  },
  {
    "label": "AddDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDelegate(FScriptDelegate ScriptDelegate, UObject* Parent = nullptr, void* PropertyValue = nullptr)"
  },
  {
    "label": "RemoveDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDelegate(const FScriptDelegate& ScriptDelegate, UObject* Parent = nullptr, void* PropertyValue = nullptr)"
  },
  {
    "label": "ClearDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDelegate(UObject* Parent = nullptr, void* PropertyValue = nullptr)"
  },
  {
    "label": "GetMulticastScriptDelegate()",
    "kind": "Method",
    "detail": "Function (protected : FMulticastScriptDelegate&)",
    "insertText": "GetMulticastScriptDelegate(const void* PropertyValue, int32 Index)"
  },
  {
    "label": "DECLARE_FIELD()",
    "kind": "Method",
    "detail": "Function (} ; class FMulticastSparseDelegateProperty : public TProperty_MulticastDelegate<FSparseDelegate> {)",
    "insertText": "DECLARE_FIELD(FMulticastSparseDelegateProperty, TProperty_MulticastDelegate<FSparseDelegate>, CASTCLASS_FMulticastSparseDelegateProperty) public: FMulticastSparseDelegateProperty(FFieldVariant InOwner, const FName& InName, EObjectFlags InObjectFlags) : TProperty_MulticastDelegate(InOwner, InName, InObjectFlags)"
  },
  {
    "label": "FMulticastSparseDelegateProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMulticastSparseDelegateProperty(FFieldVariant InOwner, const UECodeGen_Private::FMulticastDelegatePropertyParams& Prop)"
  },
  {
    "label": "FMulticastSparseDelegateProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FMulticastSparseDelegateProperty(UField* InField) : TProperty_MulticastDelegate(InField)"
  },
  {
    "label": "SerializeItemInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeItemInternal(FArchive& Ar, void* Value, void const* Defaults)"
  },
  {
    "label": "FCustomPropertyListNode()",
    "kind": "Method",
    "detail": "Function (} ; struct FCustomPropertyListNode { FProperty* Property ; int32 ArrayIndex ; struct FCustomPropertyListNode* SubPropertyList ; struct FCustomPropertyListNode* PropertyListNext ;)",
    "insertText": "FCustomPropertyListNode(FProperty* InProperty = nullptr, int32 InArrayIndex = 0) :Property(InProperty) , ArrayIndex(InArrayIndex) , SubPropertyList(nullptr) , PropertyListNext(nullptr)"
  },
  {
    "label": "GetNextPropertyAndAdvance()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "GetNextPropertyAndAdvance(const FCustomPropertyListNode*& Node)"
  },
  {
    "label": "FEditPropertyChain()",
    "kind": "Method",
    "detail": "Function (Node = Node -> PropertyListNext ; } return Node ? Node -> Property : nullptr ; } } ; class FEditPropertyChain : public TDoubleLinkedList<FProperty*> { public :)",
    "insertText": "FEditPropertyChain() : ActivePropertyNode(NULL), ActiveMemberPropertyNode(NULL), bFilterAffectedInstances(false)"
  },
  {
    "label": "SetActivePropertyNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetActivePropertyNode(FProperty* NewActiveProperty)"
  },
  {
    "label": "SetActiveMemberPropertyNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActiveMemberPropertyNode(FProperty* NewActiveMemberProperty)"
  },
  {
    "label": "SetAffectedArchetypeInstances()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SetAffectedArchetypeInstances(T&& InAffectedInstances)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bFilterAffectedInstances = true ; AffectedInstances = Forward<)",
    "insertText": "T(InAffectedInstances)"
  },
  {
    "label": "IsArchetypeInstanceAffected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsArchetypeInstanceAffected(UObject* InInstance)"
  },
  {
    "label": "GetActiveNode()",
    "kind": "Method",
    "detail": "Function (TDoubleLinkedListNode*)",
    "insertText": "GetActiveNode()"
  },
  {
    "label": "GetActiveMemberNode()",
    "kind": "Method",
    "detail": "Function (TDoubleLinkedListNode*)",
    "insertText": "GetActiveMemberNode()"
  },
  {
    "label": "SetListSize()",
    "kind": "Method",
    "detail": "Function (protected : TDoubleLinkedListNode* ActivePropertyNode ; TDoubleLinkedListNode* ActiveMemberPropertyNode ; TSet<UObject*> AffectedInstances ; bool bFilterAffectedInstances ; void)",
    "insertText": "SetListSize(int32 NewListSize)"
  },
  {
    "label": "FPropertyChangedEvent()",
    "kind": "Method",
    "detail": "Function (} ; namespace EPropertyChangeType { typedef uint32 Type ; const Type Unspecified = 1<<0 ; const Type ArrayAdd = 1<<1 ; const Type ArrayRemove = 1<<2 ; const Type ArrayClear = 1<<3 ; const Type ValueSet = 1<<4 ; const Type Duplicate = 1<<5 ; const Type Interactive = 1<<6 ; const Type Redirected = 1<<7 ; const Type ArrayMove = 1<<8 ; const Type ToggleEditable = 1<<9 ; } ; struct FPropertyChangedEvent {)",
    "insertText": "FPropertyChangedEvent(FProperty* InProperty, EPropertyChangeType::Type InChangeType = EPropertyChangeType::Unspecified, TArrayView<const UObject* const> InTopLevelObjects = TArrayView<const UObject* const>()) : Property(InProperty) , MemberProperty(InProperty) , ChangeType(InChangeType) , ObjectIteratorIndex(INDEX_NONE) , bFilterChangedInstances(false) , TopLevelObjects(InTopLevelObjects)"
  },
  {
    "label": "SetActiveMemberProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActiveMemberProperty(FProperty* InActiveMemberProperty)"
  },
  {
    "label": "SetArrayIndexPerObject()",
    "kind": "Method",
    "detail": "Function (MemberProperty = InActiveMemberProperty ; } void)",
    "insertText": "SetArrayIndexPerObject(TArrayView<const TMap<FString, int32>> InArrayIndices)"
  },
  {
    "label": "SetInstancesChanged()",
    "kind": "Method",
    "detail": "Function (ArrayIndicesPerObject = InArrayIndices ; } template<T> void)",
    "insertText": "SetInstancesChanged(T&& InInstancesChanged)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bFilterChangedInstances = true ; InstancesChanged = Forward<)",
    "insertText": "T(InInstancesChanged)"
  },
  {
    "label": "GetArrayIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetArrayIndex(const FString& InName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Retval = - 1 ;)",
    "insertText": "if(ArrayIndicesPerObject.IsValidIndex(ObjectIteratorIndex))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* ValuePtr = ArrayIndicesPerObject [ ObjectIteratorIndex ] .)",
    "insertText": "Find(InName)"
  },
  {
    "label": "HasArchetypeInstanceChanged()",
    "kind": "Method",
    "detail": "Function (Retval =* ValuePtr ; } } return Retval ; } bool)",
    "insertText": "HasArchetypeInstanceChanged(UObject* InInstance)"
  },
  {
    "label": "GetNumObjectsBeingEdited()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumObjectsBeingEdited()"
  },
  {
    "label": "GetObjectBeingEdited()",
    "kind": "Method",
    "detail": "Function (} const UObject*)",
    "insertText": "GetObjectBeingEdited(int32 Index)"
  },
  {
    "label": "GetMemberPropertyName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetMemberPropertyName()"
  },
  {
    "label": "FPropertyChangedChainEvent()",
    "kind": "Method",
    "detail": "Function (} FProperty* Property ; FProperty* MemberProperty ; EPropertyChangeType::Type ChangeType ; int32 ObjectIteratorIndex ; private : TArrayView<const TMap<FString,int32>> ArrayIndicesPerObject ; TSet<UObject*> InstancesChanged ; bool bFilterChangedInstances ; TArrayView<const UObject* const> TopLevelObjects ; } ; struct FPropertyChangedChainEvent : public FPropertyChangedEvent {)",
    "insertText": "FPropertyChangedChainEvent(FEditPropertyChain& InPropertyChain, FPropertyChangedEvent& SrcChangeEvent) : FPropertyChangedEvent(SrcChangeEvent), PropertyChain(InPropertyChain)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} FEditPropertyChain& PropertyChain ; } ; namespace UEProperty_Private { template<FProperty* FProperty::* NextName> struct TPropertyLinkedListBuilder { public :)",
    "insertText": "UE_NONCOPYABLE(TPropertyLinkedListBuilder)"
  },
  {
    "label": "TPropertyLinkedListBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPropertyLinkedListBuilder(FProperty** ListStartPtr) : StartPtr(ListStartPtr), EndPtr(ListStartPtr)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(FProperty& Prop)"
  },
  {
    "label": "EndPtr()",
    "kind": "Method",
    "detail": "Function (* EndPtr =& Prop ;)",
    "insertText": "EndPtr(Prop.*NextName)"
  },
  {
    "label": "AppendNoTerminate()",
    "kind": "Method",
    "detail": "Function (Prop .* NextName = nullptr ; } void)",
    "insertText": "AppendNoTerminate(FProperty& Prop)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(FProperty& Prop)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FProperty** PrevIt = StartPtr ;)",
    "insertText": "for(FProperty* It = *StartPtr; It; It = GetNext(*It))"
  },
  {
    "label": "NullTerminate()",
    "kind": "Method",
    "detail": "Function (* PrevIt = Prop .* NextName ; Prop .* NextName = nullptr ; break ; } PrevIt =& It ; } } void)",
    "insertText": "NullTerminate()"
  },
  {
    "label": "MoveToEnd()",
    "kind": "Method",
    "detail": "Function (* EndPtr = nullptr ; } void)",
    "insertText": "MoveToEnd()"
  },
  {
    "label": "EndPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPtr(It->*NextName)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (} } FProperty*)",
    "insertText": "GetNext(FProperty& Prop)"
  },
  {
    "label": "ExcludeSuper()",
    "kind": "Method",
    "detail": "Function (namespace EFieldIteratorFlags { enum SuperClassFlags {)",
    "insertText": "ExcludeSuper(uint8)EFieldIterationFlags::None, IncludeSuper = (uint8)"
  },
  {
    "label": "ExcludeDeprecated()",
    "kind": "Method",
    "detail": "Function (enum DeprecatedPropertyFlags {)",
    "insertText": "ExcludeDeprecated(uint8)EFieldIterationFlags::None, IncludeDeprecated = (uint8)"
  },
  {
    "label": "ExcludeInterfaces()",
    "kind": "Method",
    "detail": "Function (enum InterfaceClassFlags {)",
    "insertText": "ExcludeInterfaces(uint8)EFieldIterationFlags::None, IncludeInterfaces = (uint8)"
  },
  {
    "label": "GetChildFieldsFromStruct()",
    "kind": "Method",
    "detail": "Function (} template<class FieldType> FieldType*)",
    "insertText": "GetChildFieldsFromStruct(const UStruct* Owner)"
  },
  {
    "label": "IterateToNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateToNext()"
  },
  {
    "label": "TFieldIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFieldIterator(const UStruct* InStruct, EFieldIteratorFlags::SuperClassFlags InSuperClassFlags, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedFieldFlags = EFieldIteratorFlags::IncludeDeprecated, EFieldIteratorFlags::InterfaceClassFlags InInterfaceFieldFlags = EFieldIteratorFlags::ExcludeInterfaces) : TFieldIterator(InStruct, (EFieldIterationFlags)(InSuperClassFlags | InDeprecatedFieldFlags | InInterfaceFieldFlags))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TFieldIterator<T>& Rhs)"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} const UStruct*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (T::BaseFieldClass* CurrentField = Field ; const UStruct* CurrentStruct = Struct ;)",
    "insertText": "while(CurrentStruct)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (T::FieldTypeClass* FieldClass = CurrentField ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Struct = CurrentStruct ; Field = CurrentField ; return ; } CurrentField = CurrentField -> Next ; })",
    "insertText": "if(bIncludeInterface)"
  },
  {
    "label": "CurrentClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "CurrentClass(UClass*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + InterfaceIndex ;)",
    "insertText": "if(InterfaceIndex < CurrentClass->Interfaces.Num())"
  },
  {
    "label": "BaseFieldClass()",
    "kind": "Method",
    "detail": "Function (FImplementedInterface& Interface = CurrentClass -> Interfaces [ InterfaceIndex ] ; CurrentField = Interface . Class ? GetChildFieldsFromStruct<)",
    "insertText": "BaseFieldClass(Interface.Class)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "if(bIncludeSuper)"
  },
  {
    "label": "GetInheritanceSuper()",
    "kind": "Method",
    "detail": "Function (CurrentStruct = CurrentStruct ->)",
    "insertText": "GetInheritanceSuper()"
  },
  {
    "label": "BaseFieldClass()",
    "kind": "Method",
    "detail": "Function (CurrentField = GetChildFieldsFromStruct<)",
    "insertText": "BaseFieldClass(CurrentStruct)"
  },
  {
    "label": "TFieldRange()",
    "kind": "Method",
    "detail": "Function (InterfaceIndex = - 1 ; continue ; } } break ; } Struct = CurrentStruct ; Field = CurrentField ; } } ; template<T> struct TFieldRange {)",
    "insertText": "TFieldRange(const UStruct* InStruct, EFieldIterationFlags InIterationFlags = EFieldIterationFlags::Default) : Begin(InStruct, InIterationFlags)"
  },
  {
    "label": "TFieldRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFieldRange(const UStruct* InStruct, EFieldIteratorFlags::SuperClassFlags InSuperClassFlags, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedFieldFlags = EFieldIteratorFlags::IncludeDeprecated, EFieldIteratorFlags::InterfaceClassFlags InInterfaceFieldFlags = EFieldIteratorFlags::ExcludeInterfaces) : TFieldRange(InStruct, (EFieldIterationFlags)(InSuperClassFlags | InDeprecatedFieldFlags | InInterfaceFieldFlags))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TFieldIterator<T>)",
    "insertText": "begin(const TFieldRange& Range)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} TFieldIterator<T> Begin ; } ; template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<UField, T>) > T* FindUField(const UStruct* Owner, FName FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Name(FieldName, FNAME_Find)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<FField, T>) > T* FindFProperty(const UStruct* Owner, FName FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "FindUFieldOrFProperty()",
    "kind": "Method",
    "detail": "Function (} FFieldVariant)",
    "insertText": "FindUFieldOrFProperty(const UStruct* Owner, FName FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (FFieldVariant Result = FindFProperty<)",
    "insertText": "FProperty(Owner, FieldName, IterationFlags)"
  },
  {
    "label": "UField()",
    "kind": "Method",
    "detail": "Function (Result = FindUField<)",
    "insertText": "UField(Owner, FieldName, IterationFlags)"
  },
  {
    "label": "FindUFieldOrFProperty()",
    "kind": "Method",
    "detail": "Function (} return Result ; } FFieldVariant)",
    "insertText": "FindUFieldOrFProperty(const UStruct* Owner, const TCHAR* FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<UField, T>) > T* FindUFieldOrFProperty(const UStruct* Owner, FName FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<UField, T>) > T* FindUFieldOrFProperty(const UStruct* Owner, const TCHAR* FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<FField, T>) > T* FindUFieldOrFProperty(const UStruct* Owner, FName FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<T)",
    "insertText": "UE_REQUIRES(std::is_base_of_v<FField, T>) > T* FindUFieldOrFProperty(const UStruct* Owner, const TCHAR* FieldName, EFieldIterationFlags IterationFlags = EFieldIterationFlags::Default)"
  },
  {
    "label": "FindFieldChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "FindFieldChecked(const UStruct* Scope, FName FieldName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const UStruct* InitialScope = Scope ;)",
    "insertText": "for(; Scope != NULL; Scope = dynamic_cast<const UStruct*>(Scope->GetOuter()))"
  },
  {
    "label": "FPropertyValueIterator()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } enum class EPropertyValueIteratorFlags : uint8 { NoRecursion = 0,FullRecursion = 1,} ; class FPropertyValueIterator { public : using BasePairType = TPair<const FProperty*,const void*> ;)",
    "insertText": "FPropertyValueIterator(FFieldClass* InPropertyClass, const UStruct* InStruct, const void* InStructValue, EPropertyValueIteratorFlags InRecursionFlags = EPropertyValueIteratorFlags::FullRecursion, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedPropertyFlags = EFieldIteratorFlags::IncludeDeprecated)"
  },
  {
    "label": "FPropertyValueIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyValueIterator() : PropertyClass(nullptr) , RecursionFlags(EPropertyValueIteratorFlags::FullRecursion) , DeprecatedPropertyFlags(EFieldIteratorFlags::IncludeDeprecated) , bSkipRecursionOnce(false)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FPropertyValueStackEntry& Entry = PropertyIteratorStack .)",
    "insertText": "Last()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} const FProperty*)",
    "insertText": "Key()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "Value()"
  },
  {
    "label": "SkipRecursiveProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SkipRecursiveProperty()"
  },
  {
    "label": "GetPropertyChain()",
    "kind": "Method",
    "detail": "Function (bSkipRecursionOnce = true ; } void)",
    "insertText": "GetPropertyChain(TArray<const FProperty*>& PropertyChain)"
  },
  {
    "label": "GetPropertyPathDebugString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyPathDebugString()"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : enum class EPropertyValueFlags : uint8 { None = 0 x0,IsMatch = 0 x01,IsOptional = 0 x08,IsArray = 0 x10,IsMap = 0 x20,IsSet = 0 x40,IsStruct = 0 x80,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EPropertyValueFlags)"
  },
  {
    "label": "FPropertyValueStackEntry()",
    "kind": "Method",
    "detail": "Function (const void* Owner = nullptr ; typedef TPair<BasePairType,EPropertyValueFlags> BasePairAndFlags ; typedef TArray<BasePairAndFlags,TInlineAllocator<8>> FValueArrayType ; FValueArrayType ValueArray ; int32 ValueIndex = - 1 ; int32 NextValueIndex = 0 ;)",
    "insertText": "FPropertyValueStackEntry(const void* InValue) : Owner(InValue)"
  },
  {
    "label": "FPropertyValueStackEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyValueStackEntry(const UStruct* InStruct, const void* InValue, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedPropertyFlags) : Owner(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPropertyValueStackEntry& Rhs)"
  },
  {
    "label": "FillStructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillStructProperties(const UStruct* Struct, FPropertyValueStackEntry& Entry)"
  },
  {
    "label": "NextValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextValue(EPropertyValueIteratorFlags RecursionFlags)"
  },
  {
    "label": "TPropertyValueIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class TPropertyValueIterator : public FPropertyValueIterator { public : using PairType = TPair<const T*,const void*> ;)",
    "insertText": "TPropertyValueIterator(const UStruct* InStruct, const void* InStructValue, EPropertyValueIteratorFlags InRecursionFlags = EPropertyValueIteratorFlags::FullRecursion, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedPropertyFlags = EFieldIteratorFlags::IncludeDeprecated) : FPropertyValueIterator(T::StaticClass(), InStruct, InStructValue, InRecursionFlags, InDeprecatedPropertyFlags)"
  },
  {
    "label": "TPropertyValueIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPropertyValueIterator()"
  },
  {
    "label": "TPropertyValueRange()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TPropertyValueRange {)",
    "insertText": "TPropertyValueRange(const UStruct* InStruct, const void* InStructValue, EPropertyValueIteratorFlags InRecursionFlags = EPropertyValueIteratorFlags::FullRecursion, EFieldIteratorFlags::DeprecatedPropertyFlags InDeprecatedPropertyFlags = EFieldIteratorFlags::IncludeDeprecated) : Begin(InStruct, InStructValue, InRecursionFlags, InDeprecatedPropertyFlags)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TPropertyValueIterator<T>)",
    "insertText": "begin(const TPropertyValueRange& Range)"
  },
  {
    "label": "IsBasedOnArchetype()",
    "kind": "Method",
    "detail": "Function (} TPropertyValueIterator<T> Begin ; } ; bool)",
    "insertText": "IsBasedOnArchetype(const UObject* const SomeObject)"
  },
  {
    "label": "CPP_ARRAY_DIM()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CPP_ARRAY_DIM(ArrayName, ClassName) \\ (sizeof(((ClassName*)0)->ArrayName) / sizeof(((ClassName*)0)->ArrayName[0]))"
  },
  {
    "label": "DECLARE_CLASS_INTRINSIC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CLASS_INTRINSIC(UPropertyWrapper, UObject, CLASS_Transient, TEXT(\"/Script/CoreUObject\"))"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (protected : FProperty* DestProperty ; public : void)",
    "insertText": "SetProperty(FProperty* InProperty)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (DestProperty = InProperty ; } FProperty*)",
    "insertText": "GetProperty()"
  },
  {
    "label": "DECLARE_CLASS_INTRINSIC()",
    "kind": "Method",
    "detail": "Function (} ; class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper {)",
    "insertText": "DECLARE_CLASS_INTRINSIC(UMulticastInlineDelegatePropertyWrapper, UMulticastDelegatePropertyWrapper, CLASS_Transient, TEXT(\"/Script/CoreUObject\"))"
  }
]