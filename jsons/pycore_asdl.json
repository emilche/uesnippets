[
  {
    "label": "_Py_asdl_generic_seq_new()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_ASDL_H # define Py_INTERNAL_ASDL_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" pycore_pyarena . h \" typedef PyObject* identifier ; typedef PyObject* string ; typedef PyObject* object ; typedef PyObject* constant ; # define _ASDL_SEQ_HEAD \\ Py_ssize_t size ; \\ void** elements ; typedef struct { _ASDL_SEQ_HEAD } asdl_seq ; typedef struct { _ASDL_SEQ_HEAD void* typed_elements [ 1 ] ; } asdl_generic_seq ; typedef struct { _ASDL_SEQ_HEAD PyObject* typed_elements [ 1 ] ; } asdl_identifier_seq ; typedef struct { _ASDL_SEQ_HEAD int typed_elements [ 1 ] ; } asdl_int_seq ; asdl_generic_seq*)",
    "insertText": "_Py_asdl_generic_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_identifier_seq_new()",
    "kind": "Method",
    "detail": "Function (asdl_identifier_seq*)",
    "insertText": "_Py_asdl_identifier_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "_Py_asdl_int_seq_new()",
    "kind": "Method",
    "detail": "Function (asdl_int_seq*)",
    "insertText": "_Py_asdl_int_seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "GENERATE_ASDL_SEQ_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "GENERATE_ASDL_SEQ_CONSTRUCTOR(NAME, TYPE) \\ asdl_ ## NAME ## _seq *_Py_asdl_ ## NAME ## _seq_new(Py_ssize_t size, PyArena *arena)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ asdl_ # # NAME # # _seq* seq = NULL ; \\ size_t n ; \\ \\)",
    "insertText": "if(size < 0 || \\ (size && (((size_t)size - 1) > (SIZE_MAX / sizeof(void *)))))"
  },
  {
    "label": "PyErr_NoMemory()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PyErr_NoMemory()"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (\\ return NULL ; \\ } \\)",
    "insertText": "n(size ? (sizeof(TYPE *) * (size - 1)) : 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(n > SIZE_MAX - sizeof(asdl_ ## NAME ## _seq))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ return NULL ; \\ } \\ n + =)",
    "insertText": "sizeof(asdl_ ## NAME ## _seq)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "seq(asdl_ ## NAME ## _seq *)_PyArena_Malloc(arena, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!seq)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (\\ return NULL ; \\ } \\)",
    "insertText": "memset(seq, 0, n)"
  },
  {
    "label": "elements()",
    "kind": "Method",
    "detail": "Function (typed_elements)",
    "insertText": "elements(void**)"
  },
  {
    "label": "asdl_seq_GET_UNTYPED()",
    "kind": "Method",
    "detail": "Function (\\ return seq ; \\ } # define)",
    "insertText": "asdl_seq_GET_UNTYPED(S, I) _Py_RVALUE((S)->elements[(I)]) #define asdl_seq_GET(S, I) _Py_RVALUE((S)->typed_elements[(I)]) #define asdl_seq_LEN(S) _Py_RVALUE(((S) == NULL ? 0 : (S)->size)) #ifdef Py_DEBUG # define asdl_seq_SET(S, I, V)"
  },
  {
    "label": "_asdl_i()",
    "kind": "Method",
    "detail": "Function (\\ Py_ssize_t)",
    "insertText": "_asdl_i(I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert((S) != NULL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(0 <= _asdl_i && _asdl_i < (S)->size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else # define asdl_seq_SET(S, I, V) _Py_RVALUE((S)->typed_elements[I] = (V)) #endif #ifdef Py_DEBUG # define asdl_seq_SET_UNTYPED(S, I, V)"
  }
]