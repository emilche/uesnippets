[
  {
    "label": "LazyNow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyNow"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "WorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueue"
  },
  {
    "label": "WorkQueueSets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueSets"
  },
  {
    "label": "WakeUpQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WakeUpQueue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DeferredNonNestableTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredNonNestableTask"
  },
  {
    "label": "WorkQueueTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueTest"
  },
  {
    "label": "DelayedTaskHandleDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedTaskHandleDelegate"
  },
  {
    "label": "GuardedTaskPoster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GuardedTaskPoster"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "TaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskRunner"
  },
  {
    "label": "OnTaskPostedCallbackHandleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnTaskPostedCallbackHandleImpl"
  },
  {
    "label": "DelayedIncomingQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelayedIncomingQueue"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Compare"
  },
  {
    "label": "MainThreadOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MainThreadOnly"
  },
  {
    "label": "AnyThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyThread"
  },
  {
    "label": "TracingOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TracingOnly"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TASK_QUEUE_IMPL_H_ # define BASE_TASK_SEQUENCE_MANAGER_TASK_QUEUE_IMPL_H_ # include<stddef . h> # include<functional> # include<memory> # include<queue> # include<set> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / containers / flat_map . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / observer_list . h \" # include \" base / pending_task . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / common / operations_controller . h \" # include \" base / task / sequence_manager / associated_thread_id . h \" # include \" base / task / sequence_manager / atomic_flag_set . h \" # include \" base / task / sequence_manager / enqueue_order . h \" # include \" base / task / sequence_manager / fence . h \" # include \" base / task / sequence_manager / lazily_deallocated_deque . h \" # include \" base / task / sequence_manager / sequenced_task_source . h \" # include \" base / task / sequence_manager / task_queue . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time_override . h \" # include \" base / trace_event / base_tracing_forward . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class LazyNow ; namespace sequence_manager::internal { class SequenceManagerImpl ; class WorkQueue ; class WorkQueueSets ; class WakeUpQueue ; class BASE_EXPORT TaskQueueImpl { public : void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "ApplyRemoveCanceledTasksInTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRemoveCanceledTasksInTaskQueue()"
  },
  {
    "label": "ResetRemoveCanceledTasksInTaskQueueForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRemoveCanceledTasksInTaskQueueForTesting()"
  },
  {
    "label": "TaskQueueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskQueueImpl(SequenceManagerImpl* sequence_manager, WakeUpQueue* wake_up_queue, const TaskQueue::Spec& spec)"
  },
  {
    "label": "TaskQueueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskQueueImpl(const TaskQueueImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskQueueImpl&)",
    "insertText": "operator(const TaskQueueImpl&)"
  },
  {
    "label": "TaskQueueImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueueImpl()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum class WorkQueueType { kImmediate,kDelayed } ; enum class CurrentThread { kMainThread,kNotMainThread } ; struct DeferredNonNestableTask { Task task ; RAW_PTR_EXCLUSION internal::TaskQueueImpl* task_queue ; WorkQueueType work_queue_type ; } ; using OnNextWakeUpChangedCallback = RepeatingCallback<)",
    "insertText": "void(TimeTicks)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnTaskStartedHandler = RepeatingCallback<)",
    "insertText": "void(const Task&, const TaskQueue::TaskTiming&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnTaskCompletedHandler = RepeatingCallback<)",
    "insertText": "void(const Task&, TaskQueue::TaskTiming*, LazyNow*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnTaskPostedHandler = RepeatingCallback<)",
    "insertText": "void(const Task&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using TaskExecutionTraceLogger = RepeatingCallback<)",
    "insertText": "void(perfetto::EventContext&, const Task&)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateTaskRunner(TaskType task_type)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetProtoName()",
    "kind": "Method",
    "detail": "Function (QueueName)",
    "insertText": "GetProtoName()"
  },
  {
    "label": "IsQueueEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQueueEnabled()"
  },
  {
    "label": "SetQueueEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueEnabled(bool enabled)"
  },
  {
    "label": "SetShouldReportPostedTasksWhenDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldReportPostedTasksWhenDisabled(bool should_report)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetNumberOfPendingTasks()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumberOfPendingTasks()"
  },
  {
    "label": "HasTaskToRunImmediatelyOrReadyDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTaskToRunImmediatelyOrReadyDelayedTask()"
  },
  {
    "label": "GetNextDesiredWakeUp()",
    "kind": "Method",
    "detail": "Function (absl::optional<WakeUp>)",
    "insertText": "GetNextDesiredWakeUp()"
  },
  {
    "label": "SetQueuePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueuePriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "GetQueuePriority()",
    "kind": "Method",
    "detail": "Function (TaskQueue::QueuePriority)",
    "insertText": "GetQueuePriority()"
  },
  {
    "label": "AddTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "RemoveTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence(TaskQueue::InsertFencePosition position)"
  },
  {
    "label": "InsertFenceAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFenceAt(TimeTicks time)"
  },
  {
    "label": "RemoveFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFence()"
  },
  {
    "label": "HasActiveFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveFence()"
  },
  {
    "label": "BlockedByFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlockedByFence()"
  },
  {
    "label": "SetThrottler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThrottler(TaskQueue::Throttler* throttler)"
  },
  {
    "label": "ResetThrottler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetThrottler()"
  },
  {
    "label": "UnregisterTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTaskQueue()"
  },
  {
    "label": "CouldTaskRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CouldTaskRun(EnqueueOrder enqueue_order)"
  },
  {
    "label": "WasBlockedOrLowPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasBlockedOrLowPriority(EnqueueOrder enqueue_order)"
  },
  {
    "label": "ReloadEmptyImmediateWorkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadEmptyImmediateWorkQueue()"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "AsValue(TimeTicks now, bool force_verbose)"
  },
  {
    "label": "GetQuiescenceMonitored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQuiescenceMonitored()"
  },
  {
    "label": "NotifyDidProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDidProcessTask(const Task& task)"
  },
  {
    "label": "HasTaskToRunImmediately()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTaskToRunImmediately()"
  },
  {
    "label": "HasTaskToRunImmediatelyLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTaskToRunImmediatelyLocked() const EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "has_pending_high_resolution_tasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_pending_high_resolution_tasks()"
  },
  {
    "label": "delayed_work_queue()",
    "kind": "Method",
    "detail": "Function (} WorkQueue*)",
    "insertText": "delayed_work_queue()"
  },
  {
    "label": "immediate_work_queue()",
    "kind": "Method",
    "detail": "Function (} WorkQueue*)",
    "insertText": "immediate_work_queue()"
  },
  {
    "label": "task_execution_trace_logger()",
    "kind": "Method",
    "detail": "Function (} TaskExecutionTraceLogger)",
    "insertText": "task_execution_trace_logger()"
  },
  {
    "label": "RemoveAllCanceledDelayedTasksFromFront()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveAllCanceledDelayedTasksFromFront(LazyNow* lazy_now)"
  },
  {
    "label": "MoveReadyDelayedTasksToWorkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveReadyDelayedTasksToWorkQueue(LazyNow* lazy_now, EnqueueOrder enqueue_order)"
  },
  {
    "label": "OnWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWakeUp(LazyNow* lazy_now, EnqueueOrder enqueue_order)"
  },
  {
    "label": "wake_up_queue()",
    "kind": "Method",
    "detail": "Function (const WakeUpQueue*)",
    "insertText": "wake_up_queue()"
  },
  {
    "label": "heap_handle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "heap_handle()"
  },
  {
    "label": "set_heap_handle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_heap_handle(HeapHandle heap_handle)"
  },
  {
    "label": "main_thread_only()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "main_thread_only()"
  },
  {
    "label": "RequeueDeferredNonNestableTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequeueDeferredNonNestableTask(DeferredNonNestableTask task)"
  },
  {
    "label": "PushImmediateIncomingTaskForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushImmediateIncomingTaskForTest(Task task)"
  },
  {
    "label": "ReclaimMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReclaimMemory(TimeTicks now)"
  },
  {
    "label": "SetOnTaskStartedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTaskStartedHandler(OnTaskStartedHandler handler)"
  },
  {
    "label": "OnTaskStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskStarted(const Task& task, const TaskQueue::TaskTiming& task_timing)"
  },
  {
    "label": "SetOnTaskCompletedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTaskCompletedHandler(OnTaskCompletedHandler handler)"
  },
  {
    "label": "OnTaskCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskCompleted(const Task& task, TaskQueue::TaskTiming* task_timing, LazyNow* lazy_now)"
  },
  {
    "label": "RequiresTaskTiming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTaskTiming()"
  },
  {
    "label": "AddOnTaskPostedHandler()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] std::unique_ptr<TaskQueue::OnTaskPostedCallbackHandle>)",
    "insertText": "AddOnTaskPostedHandler(OnTaskPostedHandler handler)"
  },
  {
    "label": "SetTaskExecutionTraceLogger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskExecutionTraceLogger(TaskExecutionTraceLogger logger)"
  },
  {
    "label": "GetSequenceManagerWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<SequenceManagerImpl>)",
    "insertText": "GetSequenceManagerWeakPtr()"
  },
  {
    "label": "sequence_manager()",
    "kind": "Method",
    "detail": "Function (SequenceManagerImpl*)",
    "insertText": "sequence_manager()"
  },
  {
    "label": "UpdateWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWakeUp(LazyNow* lazy_now)"
  },
  {
    "label": "SetNextWakeUp()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetNextWakeUp(LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "GuardedTaskPoster()",
    "kind": "Method",
    "detail": "Function (private : class WorkQueue ; class WorkQueueTest ; class DelayedTaskHandleDelegate ; class GuardedTaskPoster : public RefCountedThreadSafe<GuardedTaskPoster> { public :)",
    "insertText": "GuardedTaskPoster(TaskQueueImpl* outer)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTask(PostedTask task)"
  },
  {
    "label": "PostCancelableTask()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle)",
    "insertText": "PostCancelableTask(PostedTask task)"
  },
  {
    "label": "StartAcceptingOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAcceptingOperations()"
  },
  {
    "label": "ShutdownAndWaitForZeroOperations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShutdownAndWaitForZeroOperations()"
  },
  {
    "label": "GuardedTaskPoster()",
    "kind": "Method",
    "detail": "Function (outer_ = nullptr ; } private : class RefCountedThreadSafe<GuardedTaskPoster> ; ~)",
    "insertText": "GuardedTaskPoster()"
  },
  {
    "label": "TaskRunner()",
    "kind": "Method",
    "detail": "Function (base::internal::OperationsController operations_controller_ ; raw_ptr<TaskQueueImpl> outer_ ; } ; class TaskRunner final : public SingleThreadTaskRunner { public :)",
    "insertText": "TaskRunner(scoped_refptr<GuardedTaskPoster> task_poster, scoped_refptr<const AssociatedThreadId> associated_thread, TaskType task_type)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& location, OnceClosure callback, TimeDelta delay)"
  },
  {
    "label": "PostDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& location, OnceClosure callback, TimeTicks delayed_run_time, base::subtle::DelayPolicy delay_policy)"
  },
  {
    "label": "PostCancelableDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle)",
    "insertText": "PostCancelableDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& location, OnceClosure callback, TimeTicks delayed_run_time, base::subtle::DelayPolicy delay_policy)"
  },
  {
    "label": "PostCancelableDelayedTask()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle)",
    "insertText": "PostCancelableDelayedTask(subtle::PostDelayedTaskPassKey, const Location& location, OnceClosure callback, TimeDelta delay)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& location, OnceClosure callback, TimeDelta delay)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "TaskRunner()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "TaskRunner()"
  },
  {
    "label": "OnTaskPostedCallbackHandleImpl()",
    "kind": "Method",
    "detail": "Function (const scoped_refptr<GuardedTaskPoster> task_poster_ ; const scoped_refptr<const AssociatedThreadId> associated_thread_ ; const TaskType task_type_ ; } ; class OnTaskPostedCallbackHandleImpl : public TaskQueue::OnTaskPostedCallbackHandle { public :)",
    "insertText": "OnTaskPostedCallbackHandleImpl(TaskQueueImpl* task_queue_impl, scoped_refptr<const AssociatedThreadId> associated_thread_)"
  },
  {
    "label": "OnTaskPostedCallbackHandleImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OnTaskPostedCallbackHandleImpl()"
  },
  {
    "label": "DelayedIncomingQueue()",
    "kind": "Method",
    "detail": "Function (task_queue_impl_ = nullptr ; } private : raw_ptr<TaskQueueImpl> task_queue_impl_ ; const scoped_refptr<const AssociatedThreadId> associated_thread_ ; } ; struct DelayedIncomingQueue { public :)",
    "insertText": "DelayedIncomingQueue()"
  },
  {
    "label": "DelayedIncomingQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedIncomingQueue(const DelayedIncomingQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedIncomingQueue&)",
    "insertText": "operator(const DelayedIncomingQueue&)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(Task task)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(HeapHandle heap_handle)"
  },
  {
    "label": "take_top()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "take_top()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "top()",
    "kind": "Method",
    "detail": "Function (} const Task&)",
    "insertText": "top()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(DelayedIncomingQueue* other)"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::List)",
    "insertText": "AsValue(TimeTicks now)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct Compare { bool)",
    "insertText": "operator()(const Task& lhs, const Task& rhs)"
  },
  {
    "label": "MainThreadOnly()",
    "kind": "Method",
    "detail": "Function (} ; IntrusiveHeap<Task,Compare> queue_ ; int pending_high_res_tasks_ = 0 ; } ; struct MainThreadOnly {)",
    "insertText": "MainThreadOnly(TaskQueueImpl* task_queue, WakeUpQueue* wake_up_queue)"
  },
  {
    "label": "MainThreadOnly()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MainThreadOnly()"
  },
  {
    "label": "RemoveCancelableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCancelableTask(HeapHandle heap_handle)"
  },
  {
    "label": "PostImmediateTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostImmediateTaskImpl(PostedTask task, CurrentThread current_thread)"
  },
  {
    "label": "PostDelayedTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTaskImpl(PostedTask task, CurrentThread current_thread)"
  },
  {
    "label": "PushOntoDelayedIncomingQueueFromMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOntoDelayedIncomingQueueFromMainThread(Task pending_task, LazyNow* lazy_now, bool notify_task_annotator)"
  },
  {
    "label": "PushOntoDelayedIncomingQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOntoDelayedIncomingQueue(Task pending_task)"
  },
  {
    "label": "ScheduleDelayedWorkTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWorkTask(Task pending_task)"
  },
  {
    "label": "MoveReadyImmediateTasksToImmediateWorkQueueLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveReadyImmediateTasksToImmediateWorkQueueLocked() EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "RecordQueuingDelayedTaskMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordQueuingDelayedTaskMetrics(const Task& pending_task, LazyNow* lazy_now)"
  },
  {
    "label": "TakeImmediateIncomingQueueTasks()",
    "kind": "Method",
    "detail": "Function (using TaskDeque = LazilyDeallocatedDeque<Task,subtle::TimeTicksNowIgnoringOverride> ; void)",
    "insertText": "TakeImmediateIncomingQueueTasks(TaskDeque* queue)"
  },
  {
    "label": "TraceQueueSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceQueueSize()"
  },
  {
    "label": "QueueAsValue()",
    "kind": "Method",
    "detail": "Function (Value::List)",
    "insertText": "QueueAsValue(const TaskDeque& queue, TimeTicks now)"
  },
  {
    "label": "TaskAsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "TaskAsValue(const Task& task, TimeTicks now)"
  },
  {
    "label": "MakeDelayedTask()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "MakeDelayedTask(PostedTask delayed_task, LazyNow* lazy_now)"
  },
  {
    "label": "ActivateDelayedFenceIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateDelayedFenceIfNeeded(const Task& task)"
  },
  {
    "label": "UpdateCrossThreadQueueStateLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCrossThreadQueueStateLocked() EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "GetTaskDelayAdjustment()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetTaskDelayAdjustment(CurrentThread current_thread)"
  },
  {
    "label": "MaybeReportIpcTaskQueuedFromMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReportIpcTaskQueuedFromMainThread(const Task& pending_task)"
  },
  {
    "label": "ShouldReportIpcTaskQueuedFromAnyThreadLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReportIpcTaskQueuedFromAnyThreadLocked(base::TimeDelta* time_since_disabled) EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "MaybeReportIpcTaskQueuedFromAnyThreadLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReportIpcTaskQueuedFromAnyThreadLocked(const Task& pending_task) EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "MaybeReportIpcTaskQueuedFromAnyThreadUnlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReportIpcTaskQueuedFromAnyThreadUnlocked(const Task& pending_task)"
  },
  {
    "label": "ReportIpcTaskQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportIpcTaskQueued(const Task& pending_task, const base::TimeDelta& time_since_disabled)"
  },
  {
    "label": "OnQueueUnblocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueueUnblocked()"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence(Fence fence)"
  },
  {
    "label": "RemoveOnTaskPostedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnTaskPostedHandler(OnTaskPostedCallbackHandleImpl* on_task_posted_callback_handle)"
  },
  {
    "label": "TracingOnly()",
    "kind": "Method",
    "detail": "Function (QueueName name_ ; const raw_ptr<SequenceManagerImpl> sequence_manager_ ; const scoped_refptr<const AssociatedThreadId> associated_thread_ ; const scoped_refptr<GuardedTaskPoster> task_poster_ ; base::internal::CheckedLock any_thread_lock_ ; struct AnyThread { struct TracingOnly {)",
    "insertText": "TracingOnly()"
  },
  {
    "label": "AnyThread()",
    "kind": "Method",
    "detail": "Function (bool is_enabled = true ; absl::optional<TimeTicks> disabled_time ; bool should_report_posted_tasks_when_disabled = false ; } ;)",
    "insertText": "AnyThread()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (TaskDeque immediate_incoming_queue ; bool immediate_work_queue_empty = true ; bool post_immediate_task_should_schedule_work = true ; bool unregistered = false ; base::flat_map<raw_ptr<OnTaskPostedCallbackHandleImpl>,OnTaskPostedHandler> on_task_posted_handlers ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (# endif TracingOnly tracing_only ; } ; AnyThread any_thread_)",
    "insertText": "GUARDED_BY(any_thread_lock_)"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_THREAD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_CALLED_ON_VALID_THREAD(associated_thread_->thread_checker)"
  }
]