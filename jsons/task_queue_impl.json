[
  {
    "label": "LazyNow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyNow"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "WorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueue"
  },
  {
    "label": "WorkQueueSets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueSets"
  },
  {
    "label": "WakeUpQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WakeUpQueue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DeferredNonNestableTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredNonNestableTask"
  },
  {
    "label": "WorkQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueue"
  },
  {
    "label": "WorkQueueTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkQueueTest"
  },
  {
    "label": "DelayedTaskHandleDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedTaskHandleDelegate"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "GuardedTaskPoster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GuardedTaskPoster"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "TaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskRunner"
  },
  {
    "label": "OnTaskPostedCallbackHandleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnTaskPostedCallbackHandleImpl"
  },
  {
    "label": "DelayedIncomingQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelayedIncomingQueue"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Compare"
  },
  {
    "label": "MainThreadOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MainThreadOnly"
  },
  {
    "label": "AnyThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnyThread"
  },
  {
    "label": "TracingOnly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TracingOnly"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "ApplyRemoveCanceledTasksInTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRemoveCanceledTasksInTaskQueue()"
  },
  {
    "label": "ResetRemoveCanceledTasksInTaskQueueForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRemoveCanceledTasksInTaskQueueForTesting()"
  },
  {
    "label": "SetQueueEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueEnabled(bool enabled)"
  },
  {
    "label": "SetShouldReportPostedTasksWhenDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldReportPostedTasksWhenDisabled(bool should_report)"
  },
  {
    "label": "GetNextDesiredWakeUp()",
    "kind": "Method",
    "detail": "Function (absl::optional<WakeUp>)",
    "insertText": "GetNextDesiredWakeUp()"
  },
  {
    "label": "SetQueuePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueuePriority(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "AddTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "RemoveTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence(TaskQueue::InsertFencePosition position)"
  },
  {
    "label": "InsertFenceAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFenceAt(TimeTicks time)"
  },
  {
    "label": "RemoveFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFence()"
  },
  {
    "label": "HasActiveFence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveFence()"
  },
  {
    "label": "SetThrottler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThrottler(TaskQueue::Throttler* throttler)"
  },
  {
    "label": "ResetThrottler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetThrottler()"
  },
  {
    "label": "UnregisterTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTaskQueue()"
  },
  {
    "label": "ReloadEmptyImmediateWorkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadEmptyImmediateWorkQueue()"
  },
  {
    "label": "NotifyWillProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWillProcessTask(const Task& task,\n                             bool was_blocked_or_low_priority)"
  },
  {
    "label": "NotifyDidProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDidProcessTask(const Task& task)"
  },
  {
    "label": "EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "EXCLUSIVE_LOCKS_REQUIRED(any_thread_lock_)"
  },
  {
    "label": "RemoveAllCanceledDelayedTasksFromFront()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllCanceledDelayedTasksFromFront(LazyNow* lazy_now)"
  },
  {
    "label": "MoveReadyDelayedTasksToWorkQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveReadyDelayedTasksToWorkQueue(LazyNow* lazy_now,\n                                        EnqueueOrder enqueue_order)"
  },
  {
    "label": "OnWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWakeUp(LazyNow* lazy_now, EnqueueOrder enqueue_order)"
  },
  {
    "label": "RequeueDeferredNonNestableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequeueDeferredNonNestableTask(DeferredNonNestableTask task)"
  },
  {
    "label": "PushImmediateIncomingTaskForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushImmediateIncomingTaskForTest(Task task)"
  },
  {
    "label": "ReclaimMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReclaimMemory(TimeTicks now)"
  },
  {
    "label": "SetOnTaskStartedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTaskStartedHandler(OnTaskStartedHandler handler)"
  },
  {
    "label": "OnTaskStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskStarted(const Task& task,\n                     const TaskQueue::TaskTiming& task_timing)"
  },
  {
    "label": "SetOnTaskCompletedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTaskCompletedHandler(OnTaskCompletedHandler handler)"
  },
  {
    "label": "OnTaskCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskCompleted(const Task& task,\n                       TaskQueue::TaskTiming* task_timing,\n                       LazyNow* lazy_now)"
  },
  {
    "label": "AddOnTaskPostedHandler()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueue::OnTaskPostedCallbackHandle>)",
    "insertText": "AddOnTaskPostedHandler(OnTaskPostedHandler handler)"
  },
  {
    "label": "SetTaskExecutionTraceLogger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskExecutionTraceLogger(TaskExecutionTraceLogger logger)"
  },
  {
    "label": "GetSequenceManagerWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<SequenceManagerImpl>)",
    "insertText": "GetSequenceManagerWeakPtr()"
  },
  {
    "label": "UpdateWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWakeUp(LazyNow* lazy_now)"
  },
  {
    "label": "SetNextWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextWakeUp(LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "GuardedTaskPoster()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "GuardedTaskPoster(TaskQueueImpl* outer)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTask(PostedTask task)"
  },
  {
    "label": "PostCancelableTask()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle)",
    "insertText": "PostCancelableTask(PostedTask task)"
  },
  {
    "label": "TaskRunner()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TaskRunner(\n        scoped_refptr<GuardedTaskPoster> task_poster,\n        scoped_refptr<const AssociatedThreadId> associated_thread,\n        TaskType task_type)"
  },
  {
    "label": "OnTaskPostedCallbackHandleImpl()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "OnTaskPostedCallbackHandleImpl(\n        TaskQueueImpl* task_queue_impl,\n        scoped_refptr<const AssociatedThreadId> associated_thread_)"
  },
  {
    "label": "DelayedIncomingQueue()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DelayedIncomingQueue()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(Task task)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(HeapHandle heap_handle)"
  },
  {
    "label": "take_top()",
    "kind": "Method",
    "detail": "Function (Task)",
    "insertText": "take_top()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(DelayedIncomingQueue* other)"
  },
  {
    "label": "SweepCancelledTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SweepCancelledTasks(SequenceManagerImpl* sequence_manager)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(PostedTask task)"
  },
  {
    "label": "RemoveCancelableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCancelableTask(HeapHandle heap_handle)"
  },
  {
    "label": "PostImmediateTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostImmediateTaskImpl(PostedTask task, CurrentThread current_thread)"
  },
  {
    "label": "PostDelayedTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTaskImpl(PostedTask task, CurrentThread current_thread)"
  },
  {
    "label": "PushOntoDelayedIncomingQueueFromMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOntoDelayedIncomingQueueFromMainThread(Task pending_task,\n                                                  LazyNow* lazy_now,\n                                                  bool notify_task_annotator)"
  },
  {
    "label": "PushOntoDelayedIncomingQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOntoDelayedIncomingQueue(Task pending_task)"
  },
  {
    "label": "ScheduleDelayedWorkTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWorkTask(Task pending_task)"
  },
  {
    "label": "RecordQueuingDelayedTaskMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordQueuingDelayedTaskMetrics(const Task& pending_task,\n                                       LazyNow* lazy_now)"
  },
  {
    "label": "TakeImmediateIncomingQueueTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeImmediateIncomingQueueTasks(TaskDeque* queue)"
  },
  {
    "label": "QueueAsValue()",
    "kind": "Method",
    "detail": "Function (Value::List)",
    "insertText": "QueueAsValue(const TaskDeque& queue, TimeTicks now)"
  },
  {
    "label": "TaskAsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "TaskAsValue(const Task& task, TimeTicks now)"
  },
  {
    "label": "ActivateDelayedFenceIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateDelayedFenceIfNeeded(const Task& task)"
  },
  {
    "label": "GetTaskDelayAdjustment()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetTaskDelayAdjustment(CurrentThread current_thread)"
  },
  {
    "label": "MaybeReportIpcTaskQueuedFromMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReportIpcTaskQueuedFromMainThread(const Task& pending_task)"
  },
  {
    "label": "MaybeReportIpcTaskQueuedFromAnyThreadUnlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReportIpcTaskQueuedFromAnyThreadUnlocked(const Task& pending_task)"
  },
  {
    "label": "ReportIpcTaskQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportIpcTaskQueued(const Task& pending_task,\n                           const base::TimeDelta& time_since_disabled)"
  },
  {
    "label": "OnQueueUnblocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueueUnblocked()"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence(Fence fence)"
  },
  {
    "label": "RemoveOnTaskPostedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnTaskPostedHandler(\n      OnTaskPostedCallbackHandleImpl* on_task_posted_callback_handle)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (any_thread_)",
    "insertText": "GUARDED_BY(any_thread_lock_)"
  }
]