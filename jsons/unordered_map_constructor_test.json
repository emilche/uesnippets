[
  {
    "label": "UnordMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnordMap"
  },
  {
    "label": "ConstructorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstructorTest"
  },
  {
    "label": "is_std_unordered_map",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_std_unordered_map"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_UNORDERED_MAP_CONSTRUCTOR_TEST_H_ # define ABSL_CONTAINER_INTERNAL_UNORDERED_MAP_CONSTRUCTOR_TEST_H_ # include<algorithm> # include<unordered_map> # include<vector> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / container / internal / hash_generator_testing . h \" # include \" absl / container / internal / hash_policy_testing . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class UnordMap> class ConstructorTest : public::testing::Test { } ;)",
    "insertText": "TYPED_TEST_SUITE_P(ConstructorTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(ConstructorTest, NoArgs)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (TypeParam m ;)",
    "insertText": "EXPECT_TRUE(m.empty())"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(m, ::testing::UnorderedElementsAre())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCount)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(123)"
  },
  {
    "label": "EXPECT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GE(m.bucket_count(), 123)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCountHash)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (using H = TypeParam::hasher ; H hasher ; TypeParam)",
    "insertText": "m(123, hasher)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.hash_function(), hasher)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCountHashEqual)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (using H = TypeParam::hasher ; using E = TypeParam::key_equal ; H hasher ; E equal ; TypeParam)",
    "insertText": "m(123, hasher, equal)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.key_eq(), equal)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCountHashEqualAlloc)"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (using H = TypeParam::hasher ; using E = TypeParam::key_equal ; using A = TypeParam::allocator_type ; H hasher ; E equal ; A)",
    "insertText": "alloc(0)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(123, hasher, equal, alloc)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.get_allocator(), alloc)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<T> struct is_std_unordered_map : std::false_type { } ; template<. . . T> struct is_std_unordered_map<std::unordered_map<T . . .>> : std::true_type { } ; # if)",
    "insertText": "defined(UNORDERED_MAP_CXX14) || defined(UNORDERED_MAP_CXX17)"
  },
  {
    "label": "BucketCountAllocTest()",
    "kind": "Method",
    "detail": "Function (# else using has_cxx14_std_apis = std::false_type ; # endif template<T> using expect_cxx14_apis = absl::disjunction<absl::negation<is_std_unordered_map<T>>,has_cxx14_std_apis> ; template<TypeParam> void)",
    "insertText": "BucketCountAllocTest(std::false_type)"
  },
  {
    "label": "BucketCountAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "BucketCountAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(123, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCountAlloc)"
  },
  {
    "label": "TypeParam()",
    "kind": "Method",
    "detail": "Function (BucketCountAllocTest<)",
    "insertText": "TypeParam(expect_cxx14_apis<TypeParam>())"
  },
  {
    "label": "BucketCountHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "BucketCountHashAllocTest(std::false_type)"
  },
  {
    "label": "BucketCountHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "BucketCountHashAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(123, hasher, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, BucketCountHashAlloc)"
  },
  {
    "label": "AllocTest()",
    "kind": "Method",
    "detail": "Function (} # if ABSL_UNORDERED_SUPPORTS_ALLOC_CTORS using has_alloc_std_constructors = std::true_type ; # else using has_alloc_std_constructors = std::false_type ; # endif template<T> using expect_alloc_constructors = absl::disjunction<absl::negation<is_std_unordered_map<T>>,has_alloc_std_constructors> ; template<TypeParam> void)",
    "insertText": "AllocTest(std::false_type)"
  },
  {
    "label": "AllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "AllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, Alloc)"
  },
  {
    "label": "TypeParam()",
    "kind": "Method",
    "detail": "Function (AllocTest<)",
    "insertText": "TypeParam(expect_alloc_constructors<TypeParam>())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InputIteratorBucketHashEqualAlloc)"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (std::vector<T> values ;)",
    "insertText": "generate_n(std::back_inserter(values), 10, hash_internal::UniqueGenerator<T>())"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values.begin(), values.end(), 123, hasher, equal, alloc)"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(items(m), ::testing::UnorderedElementsAreArray(values))"
  },
  {
    "label": "InputIteratorBucketAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InputIteratorBucketAllocTest(std::false_type)"
  },
  {
    "label": "InputIteratorBucketAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InputIteratorBucketAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values.begin(), values.end(), 123, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InputIteratorBucketAlloc)"
  },
  {
    "label": "InputIteratorBucketHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InputIteratorBucketHashAllocTest(std::false_type)"
  },
  {
    "label": "InputIteratorBucketHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InputIteratorBucketHashAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values.begin(), values.end(), 123, hasher, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InputIteratorBucketHashAlloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, CopyConstructor)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "n(m)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.hash_function(), n.hash_function())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.key_eq(), n.key_eq())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.get_allocator(), n.get_allocator())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m, n)"
  },
  {
    "label": "CopyConstructorAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "CopyConstructorAllocTest(std::false_type)"
  },
  {
    "label": "CopyConstructorAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "CopyConstructorAllocTest(std::true_type)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "n(m, A(11))"
  },
  {
    "label": "EXPECT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_NE(m.get_allocator(), n.get_allocator())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, CopyConstructorAlloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, MoveConstructor)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "t(m)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "n(std::move(t))"
  },
  {
    "label": "MoveConstructorAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "MoveConstructorAllocTest(std::false_type)"
  },
  {
    "label": "MoveConstructorAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "MoveConstructorAllocTest(std::true_type)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "n(std::move(t), A(1))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, MoveConstructorAlloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InitializerListBucketHashEqualAlloc)"
  },
  {
    "label": "gen()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; hash_internal::UniqueGenerator<T> gen ; std::initializer_list<T> values = {)",
    "insertText": "gen(), gen(), gen(), gen(), gen()"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values, 123, hasher, equal, alloc)"
  },
  {
    "label": "InitializerListBucketAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InitializerListBucketAllocTest(std::false_type)"
  },
  {
    "label": "InitializerListBucketAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InitializerListBucketAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values, 123, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InitializerListBucketAlloc)"
  },
  {
    "label": "InitializerListBucketHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InitializerListBucketHashAllocTest(std::false_type)"
  },
  {
    "label": "InitializerListBucketHashAllocTest()",
    "kind": "Method",
    "detail": "Function (} template<TypeParam> void)",
    "insertText": "InitializerListBucketHashAllocTest(std::true_type)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values, 123, hasher, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, InitializerListBucketHashAlloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, Assignment)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (hash_internal::UniqueGenerator<T> gen ; TypeParam)",
    "insertText": "m({gen(), gen(), gen()}, 123, hasher, equal, alloc)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, MoveAssignment)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (TypeParam n ; n =)",
    "insertText": "move(t)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, AssignmentFromInitializerList)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, AssignmentOverwritesExisting)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; hash_internal::UniqueGenerator<T> gen ; TypeParam)",
    "insertText": "m({gen(), gen(), gen()})"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "n({gen()})"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, MoveAssignmentOverwritesExisting)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, AssignmentFromInitializerListOverwritesExisting)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ConstructorTest, AssignmentOnSelf)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values)"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(ConstructorTest, NoArgs, BucketCount, BucketCountHash, BucketCountHashEqual, BucketCountHashEqualAlloc, BucketCountAlloc, BucketCountHashAlloc, Alloc, InputIteratorBucketHashEqualAlloc, InputIteratorBucketAlloc, InputIteratorBucketHashAlloc, CopyConstructor, CopyConstructorAlloc, MoveConstructor, MoveConstructorAlloc, InitializerListBucketHashEqualAlloc, InitializerListBucketAlloc, InitializerListBucketHashAlloc, Assignment, MoveAssignment, AssignmentFromInitializerList, AssignmentOverwritesExisting, MoveAssignmentOverwritesExisting, AssignmentFromInitializerListOverwritesExisting, AssignmentOnSelf)"
  }
]