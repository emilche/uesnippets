[
  {
    "label": "FChaosArchiveSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosArchiveSection"
  },
  {
    "label": "FChaosArchiveSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosArchiveSectionData"
  },
  {
    "label": "FChaosArchiveMemoryTrackingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchiveMemoryTrackingContext"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FChaosArchiveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchiveContext"
  },
  {
    "label": "FSharedPtrHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedPtrHolder"
  },
  {
    "label": "TSharedPtrHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedPtrHolder"
  },
  {
    "label": "FRefCountPtrHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountPtrHolder"
  },
  {
    "label": "TRefCountPtrHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRefCountPtrHolder"
  },
  {
    "label": "FChaosArchiveScopedMemory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchiveScopedMemory"
  },
  {
    "label": "CSerializablePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CSerializablePtr"
  },
  {
    "label": "FChaosArchiveSectionData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Real . h \" # include \" CoreMinimal . h \" # include \" Serializable . h \" # include \" ShapeInstanceFwd . h \" # include \" Serialization / ArchiveProxy . h \" # include \" UObject / DestructionObjectVersion . h \" # include \" Templates / Models . h \" namespace Chaos { # if CHAOS_MEMORY_TRACKING struct FChaosArchiveSection { FName Name ; int64 MemoryLocation ; int64 ChildMemory ; bool bAbsorbChildren ; } ; struct FChaosArchiveSectionData {)",
    "insertText": "FChaosArchiveSectionData() : Count(0), SizeInclusive(0), SizeExclusive(0)"
  },
  {
    "label": "FChaosArchiveMemoryTrackingContext()",
    "kind": "Method",
    "detail": "Function (} int32 Count ; int64 SizeInclusive ; int64 SizeExclusive ; } ; class FChaosArchiveMemoryTrackingContext { public :)",
    "insertText": "FChaosArchiveMemoryTrackingContext() : ChildAbsorbers(0) , UntrackedSerializations(0)"
  },
  {
    "label": "FChaosArchiveMemoryTrackingContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosArchiveMemoryTrackingContext()"
  },
  {
    "label": "PushSection()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FChaosArchiveSectionData> SectionMap ; TArray<FChaosArchiveSection> SectionStack ; void)",
    "insertText": "PushSection(const FName& SectionName, const int64 MemoryLocation, const bool bAbsorbChildren)"
  },
  {
    "label": "PopSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSection(const int64 MemoryLocation)"
  },
  {
    "label": "BeginSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSerialize(const int64 MemoryLocation)"
  },
  {
    "label": "EndSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSerialize(const int64 MemoryLocation)"
  },
  {
    "label": "FChaosArchiveContext()",
    "kind": "Method",
    "detail": "Function (private : const FName UntrackedName ; int32 ChildAbsorbers ; int32 UntrackedSerializations ; } ; class FChaosArchive ; # endif class FChaosArchiveContext # if CHAOS_MEMORY_TRACKING : public FChaosArchiveMemoryTrackingContext # endif { public : TArray<void*> TagToObject ; TMap<void*,int32> ObjToTag ; TSet<void*> PendingAdds ; int32 TagCount ;)",
    "insertText": "FChaosArchiveContext()"
  },
  {
    "label": "ToSharedPointerHelper()",
    "kind": "Method",
    "detail": "Function (template<T,ESPMode Mode> TSharedPtr<T,Mode>&)",
    "insertText": "ToSharedPointerHelper(TSerializablePtr<T>& Obj)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* RawPtr = const_cast<)",
    "insertText": "T(Obj.Get())"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (auto ConcreteHolder = static_cast<TSharedPtrHolder<T,)",
    "insertText": "Mode(BaseHolder)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<T,Mode>& NewSP = NewHolder -> SP ; ObjToSharedPtrHolder .)",
    "insertText": "Add((void*)RawPtr, NewHolder)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto ConcreteHolder = static_cast<TRefCountPtrHolder<)",
    "insertText": "T(BaseHolder)"
  },
  {
    "label": "FSharedPtrHolder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSharedPtrHolder()"
  },
  {
    "label": "TSharedPtrHolder()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,ESPMode Mode> class TSharedPtrHolder : public FSharedPtrHolder { public :)",
    "insertText": "TSharedPtrHolder(T* Obj) : SP(Obj)"
  },
  {
    "label": "FRefCountPtrHolder()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<T,Mode> SP ; } ; class FRefCountPtrHolder { public :)",
    "insertText": "FRefCountPtrHolder()"
  },
  {
    "label": "TRefCountPtrHolder()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class TRefCountPtrHolder : public FRefCountPtrHolder { public :)",
    "insertText": "TRefCountPtrHolder(T* Obj) : RCP(Obj)"
  },
  {
    "label": "FChaosArchive()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<T> RCP ; } ; TMap<void*,FSharedPtrHolder*> ObjToSharedPtrHolder ; TMap<void*,FRefCountPtrHolder*> ObjToRefCountPtrHolder ; } ; class FChaosArchive : public FArchiveProxy { public :)",
    "insertText": "FChaosArchive(FArchive& ArIn) : FArchiveProxy(ArIn) , Context(MakeUnique<FChaosArchiveContext>())"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SerializePtr(TSerializablePtr<T>& Obj)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool bExists = Obj .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InnerArchive<<bExists ;)",
    "insertText": "if(!bExists)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Obj .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Tag ; InnerArchive<<Tag ;)",
    "insertText": "if(Tag < 0)"
  },
  {
    "label": "SetCriticalError()",
    "kind": "Method",
    "detail": "Function (InnerArchive .)",
    "insertText": "SetCriticalError()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Context -> TagToObject .)",
    "insertText": "AddZeroed(SlotsNeeded)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Context->TagToObject.IsValidIndex(Tag))"
  },
  {
    "label": "SetFromRawLowLevel()",
    "kind": "Method",
    "detail": "Function (Obj .)",
    "insertText": "SetFromRawLowLevel((const T*)(Context->TagToObject[Tag]))"
  },
  {
    "label": "StaticSerialize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "StaticSerialize(Obj)"
  },
  {
    "label": "Tag()",
    "kind": "Method",
    "detail": "Function (Context -> TagToObject [)",
    "insertText": "Tag(void*)Obj.Get()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Context -> ObjToTag .)",
    "insertText": "Add((void*)Obj.Get(), Tag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(InnerArchive.IsSaving() || InnerArchive.IsCountingMemory())"
  },
  {
    "label": "ObjRaw()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ObjRaw(void*)Obj.Get()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InnerArchive<<Context -> ObjToTag [ ObjRaw ] ; } else { Context -> PendingAdds .)",
    "insertText": "Add(ObjRaw)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 Tag = Context -> TagCount + + ; Context -> ObjToTag .)",
    "insertText": "Add(ObjRaw, Tag)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Context -> PendingAdds .)",
    "insertText": "Remove(ObjRaw)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "SerializePtr(TUniquePtr<T>& Obj)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (InnerArchive .)",
    "insertText": "UsingCustomVersion(FDestructionObjectVersion::GUID)"
  },
  {
    "label": "SerializeLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeLegacy(Obj)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} else { TSerializablePtr<T>)",
    "insertText": "Copy(Obj)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializePtr(Copy)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Obj .)",
    "insertText": "Reset(const_cast<T*>(Copy.Get()))"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "SerializePtr(TRefCountPtr<T>& Obj)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (TSerializablePtr<T> Copy =)",
    "insertText": "MakeSerializable(Obj)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Obj = Context -> ToRefCountPointerHelper<)",
    "insertText": "T(Copy)"
  },
  {
    "label": "SerializeConstPtr()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "SerializeConstPtr(TRefCountPtr<const T>& Obj)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} } template<T,ESPMode Mode> void)",
    "insertText": "SerializePtr(TSharedPtr<T, Mode>& Obj)"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (Obj = Context -> ToSharedPointerHelper<T,)",
    "insertText": "Mode(Copy)"
  },
  {
    "label": "SerializeConstPtr()",
    "kind": "Method",
    "detail": "Function (} } template<T,ESPMode Mode> void)",
    "insertText": "SerializeConstPtr(TSharedPtr<const T, Mode>& Obj)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } # if CHAOS_MEMORY_TRACKING void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "BeginSerialize()",
    "kind": "Method",
    "detail": "Function (Context ->)",
    "insertText": "BeginSerialize(Tell())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Serialize(V, Length)"
  },
  {
    "label": "EndSerialize()",
    "kind": "Method",
    "detail": "Function (Context ->)",
    "insertText": "EndSerialize(Tell())"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "SetContext(TUniquePtr<FChaosArchiveContext>&& InContext)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Context =)",
    "insertText": "MoveTemp(InContext)"
  },
  {
    "label": "StealContext()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FChaosArchiveContext>)",
    "insertText": "StealContext()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FChaosArchiveContext> Ret =)",
    "insertText": "MoveTemp(Context)"
  },
  {
    "label": "SerializeLegacy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeLegacy(TUniquePtr<FImplicitObject>& Obj)"
  },
  {
    "label": "StaticSerialize()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "StaticSerialize(TSerializablePtr<T>& Serializable)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* RawPtr = const_cast<)",
    "insertText": "T(Serializable.Get())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FChaosArchive& Ar =* this ;)",
    "insertText": "if(auto CreatedObj = T::SerializationFactory(Ar, RawPtr))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (RawPtr = static_cast<)",
    "insertText": "T(CreatedObj)"
  },
  {
    "label": "SetFromRawLowLevel()",
    "kind": "Method",
    "detail": "Function (Serializable .)",
    "insertText": "SetFromRawLowLevel(RawPtr)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(!Ar.IsLoading()) } RawPtr->Serialize(Ar)"
  },
  {
    "label": "FChaosArchiveScopedMemory()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FChaosArchiveContext> Context ; # if CHAOS_MEMORY_TRACKING class FChaosArchiveScopedMemory ; # endif } ; class FChaosArchiveScopedMemory { public :)",
    "insertText": "FChaosArchiveScopedMemory(FChaosArchive& ArIn, const FName& SectionName, const bool bAbsorbChildren = true) #if CHAOS_MEMORY_TRACKING : Ar(ArIn)"
  },
  {
    "label": "PushSection()",
    "kind": "Method",
    "detail": "Function (Ar . Context ->)",
    "insertText": "PushSection(SectionName, Ar.Tell(), bAbsorbChildren)"
  },
  {
    "label": "FChaosArchiveScopedMemory()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FChaosArchiveScopedMemory()"
  },
  {
    "label": "PopSection()",
    "kind": "Method",
    "detail": "Function (Ar . Context ->)",
    "insertText": "PopSection(Ar.Tell())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } private : FChaosArchive& Ar ; # else { } # endif } ; template<T,TAllocator> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TArray<T, TAllocator>& Array)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ArrayNum = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Ar<<ArrayNum ; Array .)",
    "insertText": "Reserve(ArrayNum)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "SetNum(ArrayNum)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, Chaos::FReal& Real)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator((FArchive&)Ar, Real)"
  },
  {
    "label": "RealSingle()",
    "kind": "Method",
    "detail": "Function (} else { FRealSingle)",
    "insertText": "RealSingle(FRealSingle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator((FArchive&)Ar, RealSingle)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Real(FReal)"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} } return Ar ; } struct CSerializablePtr { template<T> auto)",
    "insertText": "Requires(T* InType, FChaosArchive& InAr) -> decltype(T::SerializationFactory(InAr, (T*)nullptr))"
  },
  {
    "label": "IsSerializablePtr()",
    "kind": "Method",
    "detail": "Function (} ; template<T> TEnableIf<TModels_V<CSerializablePtr,T>,bool>::Type)",
    "insertText": "IsSerializablePtr()"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializePtr(Obj)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializePtr(Serializable)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializePtr(AsAlwaysSerializable(Obj))"
  },
  {
    "label": "AsAlwaysSerializableArray()",
    "kind": "Method",
    "detail": "Function (Ar<<)",
    "insertText": "AsAlwaysSerializableArray(Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator,TAllocator2> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TArray<TRefCountPtr<T>, TAllocator>,TAllocator2>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TUniquePtr<T>, TAllocator>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator,TAllocator2> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TArray<TUniquePtr<T>, TAllocator>,TAllocator2>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator,ESPMode Mode> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TSharedPtr<T, Mode>, TAllocator>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator,TAllocator2,ESPMode Mode> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TArray<TSharedPtr<T, Mode>, TAllocator>, TAllocator2>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TSerializablePtr<T>, TAllocator>& Array)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ Idx ] ; } return Ar ; } template<T,TAllocator,TAllocator2> TEnableIf<IsSerializablePtr<)",
    "insertText": "T(), FChaosArchive& > ::Type operator<<(FChaosArchive& Ar, TArray<TArray<TSerializablePtr<T>, TAllocator>, TAllocator2>& Array)"
  }
]