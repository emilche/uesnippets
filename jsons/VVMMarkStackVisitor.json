[
  {
    "label": "FMarkStackVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStackVisitor"
  },
  {
    "label": "ConsumeElementName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConsumeElementName"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (struct FMarkStackVisitor {)",
    "insertText": "UE_NONCOPYABLE(FMarkStackVisitor)"
  },
  {
    "label": "ConsumeElementName()",
    "kind": "Method",
    "detail": "Function (bool bIsAbstractVisitor = false ; struct ConsumeElementName {)",
    "insertText": "ConsumeElementName(const TCHAR*)"
  },
  {
    "label": "FMarkStackVisitor()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FMarkStackVisitor(FMarkStack& InMarkStack) : MarkStack(InMarkStack)"
  },
  {
    "label": "IsMarked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMarked(const VCell* InCell, ConsumeElementName ElementName)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitNonNull(const VCell* InCell, ConsumeElementName ElementName)"
  },
  {
    "label": "MarkNonNull()",
    "kind": "Method",
    "detail": "Function (MarkStack .)",
    "insertText": "MarkNonNull(InCell)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitNonNull(const UObject* InObject, ConsumeElementName ElementName)"
  },
  {
    "label": "MarkNonNull()",
    "kind": "Method",
    "detail": "Function (MarkStack .)",
    "insertText": "MarkNonNull(InObject)"
  },
  {
    "label": "VisitAuxNonNull()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitAuxNonNull(const void* InAux, ConsumeElementName ElementName)"
  },
  {
    "label": "MarkAuxNonNull()",
    "kind": "Method",
    "detail": "Function (MarkStack .)",
    "insertText": "MarkAuxNonNull(InAux)"
  },
  {
    "label": "VisitEmergentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitEmergentType(const VCell* InEmergentType)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(InEmergentType, TEXT(\"EmergentType\"))"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(const VCell* InCell, ConsumeElementName ElementName)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(InCell, ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Visit(const UObject* InObject, ConsumeElementName ElementName)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(InObject, ElementName)"
  },
  {
    "label": "VisitAux()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "VisitAux(const void* Aux, ConsumeElementName ElementName)"
  },
  {
    "label": "VisitAuxNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAuxNonNull(Aux, ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Visit(VFloat, ConsumeElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(VValue Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Cell, ElementName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Value.IsUObject())"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Value.AsUObject(), ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Visit(const VRestValue& Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Visit(*this, TEXT(\"\"))"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(bool bValue, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(const FAnsiStringView Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(const FWideStringView Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(const FUtf8StringView Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Visit(const TWriteBarrier<T>& Value, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Value.Get(), ElementName)"
  },
  {
    "label": "VisitClass()",
    "kind": "Method",
    "detail": "Function (} template<TVisitBody> void)",
    "insertText": "VisitClass(FUtf8StringView, TVisitBody VisitBody)"
  },
  {
    "label": "VisitBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitBody()"
  },
  {
    "label": "VisitFunction()",
    "kind": "Method",
    "detail": "Function (} template<TVisitBody> void)",
    "insertText": "VisitFunction(FUtf8StringView, TVisitBody VisitBody)"
  },
  {
    "label": "VisitConstrainedInt()",
    "kind": "Method",
    "detail": "Function (} template<TVisitBody> void)",
    "insertText": "VisitConstrainedInt(TVisitBody VisitBody)"
  },
  {
    "label": "VisitConstrainedFloat()",
    "kind": "Method",
    "detail": "Function (} template<TVisitBody> void)",
    "insertText": "VisitConstrainedFloat(TVisitBody VisitBody)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Visit(T Begin, T End)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<ElementType,AllocatorType> void)",
    "insertText": "Visit(const TArray<ElementType, AllocatorType>& Values, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<ElementType,KeyFuncs,Allocator> void)",
    "insertText": "Visit(const TSet<ElementType, KeyFuncs, Allocator>& Values, ConsumeElementName ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<KeyType,ValueType,SetAllocator,KeyFuncs> void)",
    "insertText": "Visit(const TMap<KeyType, ValueType, SetAllocator, KeyFuncs>& Values, ConsumeElementName ElementName)"
  },
  {
    "label": "ReportNativeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportNativeBytes(size_t Bytes)"
  },
  {
    "label": "ReportNativeBytes()",
    "kind": "Method",
    "detail": "Function (MarkStack .)",
    "insertText": "ReportNativeBytes(Bytes)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} private : FMarkStack& MarkStack ; } ; template<ValueType> void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor, const ValueType& Value, FMarkStackVisitor::ConsumeElementName ElementName)"
  }
]