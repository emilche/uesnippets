[
  {
    "label": "TIntrSegment2Triangle2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrSegment2Triangle2"
  },
  {
    "label": "IsSimpleIntersection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include \" SegmentTypes . h \" # include \" TriangleTypes . h \" # include \" VectorUtil . h \" # include \" Intersection / IntrLine2Triangle2 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrSegment2Triangle2 { protected : TSegment2<Real> Segment ; TTriangle2<Real> Triangle ; public : int Quantity = 0 ; EIntersectionResult Result = EIntersectionResult::NotComputed ; EIntersectionType Type = EIntersectionType::Empty ; bool)",
    "insertText": "IsSimpleIntersection()"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Segment = SegmentIn ; } void)",
    "insertText": "SetTriangle(const TTriangle2<Real>& TriangleIn)"
  },
  {
    "label": "TIntrSegment2Triangle2()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle = TriangleIn ; })",
    "insertText": "TIntrSegment2Triangle2()"
  },
  {
    "label": "TIntrSegment2Triangle2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrSegment2Triangle2(TSegment2<Real> Seg, TTriangle2<Real> Tri) : Segment(Seg), Triangle(Tri)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} TIntrSegment2Triangle2*)",
    "insertText": "Compute(Real Tolerance = TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find(Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Segment.Extent == (Real)0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int pos = 0,neg = 0 ;)",
    "insertText": "for(int TriPrev = 2, TriIdx = 0; TriIdx < 3; TriPrev = TriIdx++)"
  },
  {
    "label": "PerpCW()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> ToPt = Segment . Center - Triangle . V [ TriIdx ] ; TVector2<Real> EdgePerp =)",
    "insertText": "PerpCW(Triangle.V[TriIdx] - Triangle.V[TriPrev])"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Real EdgeLen =)",
    "insertText": "Normalize(EdgePerp)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> OtherV = Triangle .)",
    "insertText": "V(TriIdx + 1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (pos = neg = 0 ; } else { pos = neg = 1 ; } break ; } else { TVector2<Real> ToPtFromOther = Segment . Center - OtherV ; TVector2<Real> BackwardsEdgePerp = - EdgePerp ; Real OtherSideSign = BackwardsEdgePerp .)",
    "insertText": "Dot(ToPtFromOther)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (neg + + ; } else)",
    "insertText": "if(OtherSideSign > Tolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (pos + + ; } } } Real SideSign = EdgePerp .)",
    "insertText": "Dot(ToPt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (neg + + ; } else)",
    "insertText": "if(SideSign > Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos + + ; } })",
    "insertText": "if(pos == 0 || neg == 0)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Segment ; Result = EIntersectionResult::Intersects ; Quantity = 2 ; Point0 = Segment . Center ; Param0 = 0 ; Point1 = Segment . Center ; Param1 = 0 ; return true ; } else { Type = EIntersectionType::Empty ; Result = EIntersectionResult::NoIntersection ; return false ; } })",
    "insertText": "checkSlow(IsNormalized(Segment.Direction))"
  },
  {
    "label": "TriangleLineRelations()",
    "kind": "Method",
    "detail": "Function (TVector<Real> dist ; FVector3i sign ; int positive = 0,negative = 0,zero = 0 ; TIntrLine2Triangle2<Real)",
    "insertText": "TriangleLineRelations(Segment.Center, Segment.Direction, Triangle, dist, sign, positive, negative, zero, Tolerance)"
  },
  {
    "label": "GetInterval()",
    "kind": "Method",
    "detail": "Function (Quantity = 0 ; Type = EIntersectionType::Empty ; } else { TVector2<Real> param ; TIntrLine2Triangle2<Real)",
    "insertText": "GetInterval(Segment.Center, Segment.Direction, Triangle, dist, sign, param)"
  },
  {
    "label": "intr()",
    "kind": "Method",
    "detail": "Function (TIntersector1<Real>)",
    "insertText": "intr(param[0], param[1], -Segment.Extent, +Segment.Extent)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (intr .)",
    "insertText": "Find()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quantity = intr . NumIntersections ;)",
    "insertText": "if(Quantity == 2)"
  },
  {
    "label": "GetIntersection()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Segment ; Param0 = intr .)",
    "insertText": "GetIntersection(0)"
  },
  {
    "label": "GetIntersection()",
    "kind": "Method",
    "detail": "Function (Point0 = Segment . Center + Param0* Segment . Direction ; Param1 = intr .)",
    "insertText": "GetIntersection(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Point1 = Segment . Center + Param1* Segment . Direction ; } else)",
    "insertText": "if(Quantity == 1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Point0 = Segment . Center + Param0* Segment . Direction ; } else { Type = EIntersectionType::Empty ; } })",
    "insertText": "Result(Type != EIntersectionType::Empty)"
  }
]