[
  {
    "label": "FooTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooTest"
  },
  {
    "label": "BaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseTest"
  },
  {
    "label": "DerivedTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DerivedTest"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_TEST_CLASS_NAME_"
  },
  {
    "label": "TEST_P()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_ # if 0 class FooTest : public::testing::TestWithParam<const char*> { } ;)",
    "insertText": "TEST_P(FooTest, DoesBlah)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(foo.Blah(GetParam()))"
  },
  {
    "label": "TEST_P()",
    "kind": "Method",
    "detail": "Function (. . . })",
    "insertText": "TEST_P(FooTest, HasBlahBlah)"
  },
  {
    "label": "INSTANTIATE_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (. . . })",
    "insertText": "INSTANTIATE_TEST_SUITE_P(InstantiationName, FooTest, Values(\"meeny\", \"miny\", \"moe\"))"
  },
  {
    "label": "INSTANTIATE_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (const char* pets [ ] = { \" cat \",\" dog \" } ;)",
    "insertText": "INSTANTIATE_TEST_SUITE_P(AnotherInstantiationName, FooTest, ValuesIn(pets))"
  },
  {
    "label": "TEST_F()",
    "kind": "Method",
    "detail": "Function (class BaseTest : public::testing::Test { } ; class DerivedTest : public BaseTest,public::testing::WithParamInterface<int> { } ;)",
    "insertText": "TEST_F(BaseTest, HasFoo)"
  },
  {
    "label": "TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEST_P(DerivedTest, DoesBlah)"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (} # endif # include<iterator> # include<utility> # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - param - util . h \" # include \" gtest / internal / gtest - port . h \" namespace testing { template<T,IncrementT> internal::ParamGenerator<T>)",
    "insertText": "Range(T start, T end, IncrementT step)"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (} template<T> internal::ParamGenerator<T>)",
    "insertText": "Range(T start, T end)"
  },
  {
    "label": "ValuesIn()",
    "kind": "Method",
    "detail": "Function (} template<ForwardIterator> internal::ParamGenerator<std::iterator_traits<ForwardIterator>::value_type>)",
    "insertText": "ValuesIn(ForwardIterator begin, ForwardIterator end)"
  },
  {
    "label": "ParamType()",
    "kind": "Method",
    "detail": "Function (typedef std::iterator_traits<ForwardIterator>::value_type ParamType ; return internal::ParamGenerator<)",
    "insertText": "ParamType(new internal::ValuesInIteratorRangeGenerator<ParamType>(begin, end))"
  },
  {
    "label": "ValuesIn()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> internal::ParamGenerator<T>)",
    "insertText": "ValuesIn(const T (&array)[N])"
  },
  {
    "label": "ValuesIn()",
    "kind": "Method",
    "detail": "Function (} template<class Container> internal::ParamGenerator<Container::value_type>)",
    "insertText": "ValuesIn(const Container& container)"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> internal::ValueArray<T . . .>)",
    "insertText": "Values(T... v)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} internal::ParamGenerator<bool>)",
    "insertText": "Bool()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (} template<. . . Generator> internal::CartesianProductHolder<Generator . . .>)",
    "insertText": "Combine(const Generator&... g)"
  },
  {
    "label": "TEST_P()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "TEST_P(test_suite_name, test_name) \\ class GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)()"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "TestBody()"
  },
  {
    "label": "AddToRegistry()",
    "kind": "Method",
    "detail": "Function (\\ \\ private : \\ int)",
    "insertText": "AddToRegistry()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\::testing::)",
    "insertText": "GetInstance() \\ ->parameterized_test_registry() \\ .GetTestSuitePatternHolder<test_suite_name>( \\ GTEST_STRINGIFY_(test_suite_name), \\ ::testing::internal::CodeLocation(__FILE__, __LINE__)) \\ ->AddTestPattern( \\ GTEST_STRINGIFY_(test_suite_name), GTEST_STRINGIFY_(test_name), \\ new ::testing::internal::TestMetaFactory<GTEST_TEST_CLASS_NAME_( \\ test_suite_name, test_name)>(), \\ ::testing::internal::CodeLocation(__FILE__, __LINE__))"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ return 0 ; \\ } \\ int gtest_registering_dummy_ GTEST_ATTRIBUTE_UNUSED_ ; \\)",
    "insertText": "GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) \\ (const GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) &)"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) & operator=( \\ const GTEST_TEST_CLASS_NAME_(test_suite_name, \\ test_name) &)"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ int)",
    "insertText": "GTEST_TEST_CLASS_NAME_(test_suite_name, \\ test_name)::gtest_registering_dummy_ = \\ GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)::AddToRegistry()"
  },
  {
    "label": "GTEST_TEST_CLASS_NAME_()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)::TestBody() #define GTEST_EXPAND_(arg) arg #define GTEST_GET_FIRST_(first, ...) first #define GTEST_GET_SECOND_(first, second, ...) second #define INSTANTIATE_TEST_SUITE_P(prefix, test_suite_name, ...) \\ static ::testing::internal::ParamGenerator<test_suite_name::ParamType> \\ gtest_##prefix##test_suite_name##_EvalGenerator_()"
  },
  {
    "label": "GTEST_EXPAND_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GTEST_EXPAND_(GTEST_GET_FIRST_(__VA_ARGS__, DUMMY_PARAM_))"
  },
  {
    "label": "_EvalGenerateName_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::std::string gtest_ # # prefix # # test_suite_name # #)",
    "insertText": "_EvalGenerateName_(\\ const ::testing::TestParamInfo<test_suite_name::ParamType>& info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(::testing::internal::AlwaysFalse())"
  },
  {
    "label": "TestNotEmpty()",
    "kind": "Method",
    "detail": "Function (\\::testing::)",
    "insertText": "TestNotEmpty(GTEST_EXPAND_(GTEST_GET_SECOND_( \\ __VA_ARGS__, \\ ::testing::internal::DefaultParamName<test_suite_name::ParamType>, \\ DUMMY_PARAM_)))"
  },
  {
    "label": "make_tuple()",
    "kind": "Method",
    "detail": "Function (\\ auto t =)",
    "insertText": "make_tuple(__VA_ARGS__)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::tuple_size<decltype(t)>::value <= 2, \\ \"Too Many Args!\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "return((GTEST_EXPAND_(GTEST_GET_SECOND_( \\ __VA_ARGS__, \\ ::testing::internal::DefaultParamName<test_suite_name::ParamType>, \\ DUMMY_PARAM_))))(info)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ } \\ int gtest_ # # prefix # # test_suite_name # # _dummy_ \\ GTEST_ATTRIBUTE_UNUSED_ = \\::testing::)",
    "insertText": "GetInstance() \\ ->parameterized_test_registry() \\ .GetTestSuitePatternHolder<test_suite_name>( \\ GTEST_STRINGIFY_(test_suite_name), \\ ::testing::internal::CodeLocation(__FILE__, __LINE__)) \\ ->AddTestSuiteInstantiation( \\ GTEST_STRINGIFY_(prefix), \\ &gtest_##prefix##test_suite_name##_EvalGenerator_, \\ &gtest_##prefix##test_suite_name##_EvalGenerateName_, \\ __FILE__, __LINE__) #define GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} \\ const::testing::internal::MarkAsIgnored gtest_allow_ignore_ # #)",
    "insertText": "T(\\ GTEST_STRINGIFY_(T)) #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ #define INSTANTIATE_TEST_CASE_P \\ static_assert(::testing::internal::InstantiateTestCase_P_IsDeprecated(), \\ \"\")"
  }
]