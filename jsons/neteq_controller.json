[
  {
    "label": "NetEqController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqController"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "PacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketInfo"
  },
  {
    "label": "PacketBufferInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketBufferInfo"
  },
  {
    "label": "NetEqStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetEqStatus"
  },
  {
    "label": "PacketArrivedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketArrivedInfo"
  },
  {
    "label": "NetEqController()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NETEQ_NETEQ_CONTROLLER_H_ # define API_NETEQ_NETEQ_CONTROLLER_H_ # include<cstddef> # include<cstdint> # include<functional> # include<memory> # include \" absl / types / optional . h \" # include \" api / neteq / neteq . h \" # include \" api / neteq / tick_timer . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class NetEqController { public : struct Config { bool allow_time_stretching ; bool enable_rtx_handling ; int max_packets_in_buffer ; int base_min_delay_ms ; TickTimer* tick_timer ; webrtc::Clock* clock = nullptr ; } ; struct PacketInfo { uint32_t timestamp ; bool is_dtx ; bool is_cng ; } ; struct PacketBufferInfo { bool dtx_or_cng ; size_t num_samples ; size_t span_samples ; size_t span_samples_no_dtx ; size_t num_packets ; } ; struct NetEqStatus { uint32_t target_timestamp ; int16_t expand_mutefactor ; size_t last_packet_samples ; absl::optional<PacketInfo> next_packet ; NetEq::Mode last_mode ; bool play_dtmf ; size_t generated_noise_samples ; PacketBufferInfo packet_buffer_info ; size_t sync_buffer_samples ; } ; struct PacketArrivedInfo { size_t packet_length_samples ; uint32_t main_timestamp ; uint16_t main_sequence_number ; bool is_cng_or_dtmf ; bool is_dtx ; bool buffer_flush ; } ; ~)",
    "insertText": "NetEqController()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SoftReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SoftReset()"
  },
  {
    "label": "GetDecision()",
    "kind": "Method",
    "detail": "Function (NetEq::Operation)",
    "insertText": "GetDecision(const NetEqStatus& status, bool* reset_decoder)"
  },
  {
    "label": "RegisterEmptyPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEmptyPacket()"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(int fs_hz, size_t output_size_samples)"
  },
  {
    "label": "SetMaximumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaximumDelay(int delay_ms)"
  },
  {
    "label": "SetMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumDelay(int delay_ms)"
  },
  {
    "label": "SetBaseMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumDelay(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumDelay()"
  },
  {
    "label": "CngRfc3389On()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CngRfc3389On()"
  },
  {
    "label": "CngOff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CngOff()"
  },
  {
    "label": "SetCngOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCngOff()"
  },
  {
    "label": "ExpandDecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandDecision(NetEq::Operation operation)"
  },
  {
    "label": "AddSampleMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSampleMemory(int32_t value)"
  },
  {
    "label": "TargetLevelMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TargetLevelMs()"
  },
  {
    "label": "UnlimitedTargetLevelMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UnlimitedTargetLevelMs()"
  },
  {
    "label": "NotifyMutedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMutedState()"
  },
  {
    "label": "PeakFound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PeakFound()"
  },
  {
    "label": "GetFilteredBufferLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFilteredBufferLevel()"
  },
  {
    "label": "set_sample_memory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_sample_memory(int32_t value)"
  },
  {
    "label": "noise_fast_forward()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "noise_fast_forward()"
  },
  {
    "label": "packet_length_samples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "packet_length_samples()"
  },
  {
    "label": "set_packet_length_samples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_packet_length_samples(size_t value)"
  },
  {
    "label": "set_prev_time_scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_prev_time_scale(bool value)"
  }
]