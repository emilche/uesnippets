[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateColor"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "FEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewModel"
  },
  {
    "label": "FOutlinerViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutlinerViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FCreateOutlinerViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateOutlinerViewParams"
  },
  {
    "label": "FCreateOutlinerContextMenuWidgetParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateOutlinerContextMenuWidgetParams"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / BitArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / Views / TreeViewTraits . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" class FDragDropEvent ; class FText ; class ISequencer ; class SWidget ; struct FSlateBrush ; struct FSlateColor ; struct FSlateFontInfo ; namespace UE { namespace Sequencer { class FEditorViewModel ; class FOutlinerViewModel ; class FViewModel ; class IOutlinerExtension ; enum class EOutlinerSelectionState { None = 0,SelectedDirectly = 1<<0,HasSelectedKeys = 1<<1,HasSelectedTrackAreaItems = 1<<2,DescendentHasSelectedKeys = 1<<3,DescendentHasSelectedTrackAreaItems = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EOutlinerSelectionState)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EOutlinerSizingFlags { None = 0,DynamicSizing = 1<<0,IncludeSeparator = 1<<1,CustomHeight = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EOutlinerSizingFlags)"
  },
  {
    "label": "FOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (struct FOutlinerSizing {)",
    "insertText": "FOutlinerSizing()"
  },
  {
    "label": "FOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOutlinerSizing(float InHeight) : Height(InHeight)"
  },
  {
    "label": "FOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOutlinerSizing(float InHeight, float UniformPadding) : Height(InHeight) , PaddingTop(UniformPadding) , PaddingBottom(UniformPadding)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FOutlinerSizing& A, const FOutlinerSizing& B)"
  },
  {
    "label": "GetSeparatorHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSeparatorHeight()"
  },
  {
    "label": "GetTotalHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTotalHeight()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Accumulate(const FOutlinerSizing& Other)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Height =)",
    "insertText": "Max(Height + ThisSeparatorHeight, Other.Height + OtherSeparatorHeight)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (PaddingTop =)",
    "insertText": "Max(PaddingTop, Other.PaddingTop)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (PaddingBottom =)",
    "insertText": "Max(PaddingBottom, Other.PaddingBottom)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (} float Height = 0 . f ; float PaddingTop = 0 . f ; float PaddingBottom = 0 . f ; EOutlinerSizingFlags Flags = EOutlinerSizingFlags::IncludeSeparator ; } ; class ISequencerTreeViewRow : public STableRow<TWeakViewModelPtr<IOutlinerExtension>> { public : bool)",
    "insertText": "IsColumnVisible(const FName& InColumnName)"
  },
  {
    "label": "FCreateOutlinerViewParams()",
    "kind": "Method",
    "detail": "Function (} ; struct FCreateOutlinerViewParams {)",
    "insertText": "FCreateOutlinerViewParams(const TSharedRef<ISequencerTreeViewRow>& InTreeViewRow, const TSharedPtr<FEditorViewModel>& InEditor) : TreeViewRow(InTreeViewRow), Editor(InEditor)"
  },
  {
    "label": "FCreateOutlinerContextMenuWidgetParams()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<ISequencerTreeViewRow> TreeViewRow ; const TSharedPtr<FEditorViewModel> Editor ; } ; struct FCreateOutlinerContextMenuWidgetParams {)",
    "insertText": "FCreateOutlinerContextMenuWidgetParams(const TSharedPtr<FEditorViewModel> InEditor) : Editor(InEditor)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<FEditorViewModel> Editor ; } ; class IOutlinerExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IOutlinerExtension) virtual ~IOutlinerExtension()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "GetOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (FOutlinerSizing)",
    "insertText": "GetOutlinerSizing()"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansion(bool bIsExpanded)"
  },
  {
    "label": "IsFilteredOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilteredOut()"
  },
  {
    "label": "SetFilteredOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilteredOut(bool bIsFilteredOut)"
  },
  {
    "label": "ShouldAnchorToTop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAnchorToTop()"
  },
  {
    "label": "GetSelectionState()",
    "kind": "Method",
    "detail": "Function (EOutlinerSelectionState)",
    "insertText": "GetSelectionState()"
  },
  {
    "label": "SetSelectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionState(EOutlinerSelectionState InState)"
  },
  {
    "label": "ToggleSelectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectionState(EOutlinerSelectionState InState, bool bInValue)"
  },
  {
    "label": "CreateOutlinerView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateOutlinerView(const FCreateOutlinerViewParams& InParams)"
  },
  {
    "label": "CreateOutlinerViewForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateOutlinerViewForColumn(const FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "CreateContextMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenuWidget(const FCreateOutlinerContextMenuWidgetParams& InParams)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetLabelFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetLabelFont()"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "GetIconTint()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetIconTint()"
  },
  {
    "label": "GetIconOverlayBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconOverlayBrush()"
  },
  {
    "label": "GetIconToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIconToolTipText()"
  },
  {
    "label": "HasBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBackground()"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName(const FViewModel& Item)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName(const TSharedPtr<FViewModel> Item)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName(const TSharedPtr<const FViewModel> Item)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName(const TWeakPtr<const FViewModel> Item)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPathName(const FViewModel& Item, FStringBuilderBase& OutString)"
  },
  {
    "label": "CanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (} TOptional<EItemDropZone>)",
    "insertText": "CanAcceptDrop(const FViewModelPtr& TargetModel, const FDragDropEvent& DragDropEvent, EItemDropZone InItemDropZone)"
  },
  {
    "label": "PerformDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformDrop(const FViewModelPtr& TargetModel, const FDragDropEvent& DragDropEvent, EItemDropZone InItemDropZone)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} ; class ICompoundOutlinerExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ICompoundOutlinerExtension) virtual ~ICompoundOutlinerExtension()"
  },
  {
    "label": "RecomputeSizing()",
    "kind": "Method",
    "detail": "Function (} FOutlinerSizing)",
    "insertText": "RecomputeSizing()"
  }
]