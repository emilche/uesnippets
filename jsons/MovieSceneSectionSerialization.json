[
  {
    "label": "TMovieSceneSerializedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneSerializedFrame"
  },
  {
    "label": "FMovieSceneSerializedFrameHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSerializedFrameHeader"
  },
  {
    "label": "FMovieSceneArchiveFileReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneArchiveFileReader"
  },
  {
    "label": "FMovieSceneArchiveFileWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneArchiveFileWriter"
  },
  {
    "label": "FMovieSceneSessionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSessionInfo"
  },
  {
    "label": "FMovieSceneSerializerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneSerializerContext"
  },
  {
    "label": "FTempCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTempCustomVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FContextAndCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextAndCommands"
  },
  {
    "label": "FMovieSceneSerializerRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneSerializerRunnable"
  },
  {
    "label": "TMovieSceneSerializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMovieSceneSerializer"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Async / Async . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / LockFreeList . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / FileManager . h \" # include \" HAL / FileManagerGeneric . h \" # include \" HAL / PlatformFileManager . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / PlatformProperties . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / App . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Guid . h \" # include \" Misc / NetworkVersion . h \" # include \" Misc / Paths . h \" # include \" Misc / ScopeLock . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArchiveProxy . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / NameAsStringProxyArchive . h \" # include \" Templates / Function . h \" # include \" Templates / Less . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Detail / Channel . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(MovieSceneSerialization, Verbose, All)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace MovieSceneSerializationNamespace { const int64 InvalidOffset ; const float SerializerSleepTime ; bool bAutoSerialize ; } ; template<FrameData> struct TMovieSceneSerializedFrame { uint64 FrameId ; FrameData Frame ; FArchive&)",
    "insertText": "operator(FArchive& Ar, TMovieSceneSerializedFrame& InFrame)"
  },
  {
    "label": "FMovieSceneSerializedFrameHeader()",
    "kind": "Method",
    "detail": "Function (Ar<<InFrame . FrameId ; Ar<<InFrame . Frame ; return Ar ; } } ; struct FMovieSceneSerializedFrameHeader {)",
    "insertText": "FMovieSceneSerializedFrameHeader() : NextFrameOffset(MovieSceneSerializationNamespace::InvalidOffset) , PrevFrameOffset(MovieSceneSerializationNamespace::InvalidOffset) , FrameId(0)"
  },
  {
    "label": "FMovieSceneSerializedFrameHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSerializedFrameHeader(int64 InNextFrameOffset, int64 InPrevFrameOffset, uint64 InFrameId) : NextFrameOffset(InNextFrameOffset) , PrevFrameOffset(InPrevFrameOffset) , FrameId(InFrameId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int64 NextFrameOffset ; int64 PrevFrameOffset ; uint64 FrameId ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneSerializedFrameHeader& Header)"
  },
  {
    "label": "FMovieSceneArchiveFileReader()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . NextFrameOffset ; Ar<<Header . PrevFrameOffset ; Ar<<Header . FrameId ; return Ar ; } } ; class FMovieSceneArchiveFileReader : public FArchiveFileReaderGeneric { public :)",
    "insertText": "FMovieSceneArchiveFileReader(IFileHandle* InHandle, const TCHAR* InFilename) : FArchiveFileReaderGeneric(InHandle, InFilename, InHandle->Size())"
  },
  {
    "label": "BeginArchiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginArchiving()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Size = Handle ->)",
    "insertText": "Size()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (Pos = Handle ->)",
    "insertText": "Tell()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BufferBase = 0 ; BufferArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "CloseLowLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CloseLowLevel()"
  },
  {
    "label": "FMovieSceneArchiveFileWriter()",
    "kind": "Method",
    "detail": "Function (} } ; class FMovieSceneArchiveFileWriter : public FArchiveFileWriterGeneric { public :)",
    "insertText": "FMovieSceneArchiveFileWriter(IFileHandle* InHandle, const TCHAR* InFilename) : FArchiveFileWriterGeneric(InHandle, InFilename, InHandle->Tell())"
  },
  {
    "label": "FMovieSceneSessionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSessionInfo(const FGuid& InInstanceId, FDateTime InTimeStamp, int32 InBuildVersion, const FString& InDeviceName, const FString& InPlatformName, const FString& InInstanceName, const FString& InBuildDate) : InstanceId(InInstanceId) , TimeStamp(InTimeStamp) , BuildVersion(InBuildVersion) , DeviceName(InDeviceName) , PlatformName(InPlatformName) , InstanceName(InInstanceName) , BuildDate(InBuildDate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FGuid InstanceId ; FDateTime TimeStamp ; int32 BuildVersion ; FString DeviceName ; FString PlatformName ; FString InstanceName ; FString BuildDate ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneSessionInfo& InOutSessionInfo)"
  },
  {
    "label": "FMovieSceneSerializerContext()",
    "kind": "Method",
    "detail": "Function (Ar<<InOutSessionInfo . InstanceId ; Ar<<InOutSessionInfo . TimeStamp ; Ar<<InOutSessionInfo . BuildVersion ; Ar<<InOutSessionInfo . DeviceName ; Ar<<InOutSessionInfo . PlatformName ; Ar<<InOutSessionInfo . InstanceName ; Ar<<InOutSessionInfo . BuildDate ; return Ar ; } } ; class FMovieSceneSerializerContext { public :)",
    "insertText": "FMovieSceneSerializerContext(IFileHandle* InHandle, const FString& InFilename) : Filename(InFilename) , Handle(InHandle) , ArReaderInner(InHandle, *Filename) , ArWriterInner(InHandle, *Filename) , ArReader(ArReaderInner) , ArWriter(ArWriterInner) , LastFrameWritePos(MovieSceneSerializationNamespace::InvalidOffset) , MinFrameId(0xffffffffffffffff) , MaxFrameId(0)"
  },
  {
    "label": "FMovieSceneSerializerContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMovieSceneSerializerContext()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (delete Handle ; Handle = nullptr ; } public : FString Filename ; IFileHandle* Handle ; FMovieSceneArchiveFileReader ArReaderInner ; FMovieSceneArchiveFileWriter ArWriterInner ; FNameAsStringProxyArchive ArReader ; FNameAsStringProxyArchive ArWriter ; int64 LastFrameWritePos ; TArray<TPair<uint64,int64>> FrameIdToFrameOffset ; uint64 MinFrameId ; uint64 MaxFrameId ; } ; typedef TFunction<)",
    "insertText": "void(FMovieSceneSerializerContext&)"
  },
  {
    "label": "FTempCustomVersion()",
    "kind": "Method",
    "detail": "Function (struct FTempCustomVersion { enum Type { FirstVersion = 0,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; const FGuid GUID ; private :)",
    "insertText": "FTempCustomVersion()"
  },
  {
    "label": "FContextAndCommands()",
    "kind": "Method",
    "detail": "Function (} } ; template<HeaderData,FrameData> struct FContextAndCommands {)",
    "insertText": "FContextAndCommands(IFileHandle* InHandle, const FString& InFilename) : Context(InHandle, InFilename)"
  },
  {
    "label": "FContextAndCommands()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FContextAndCommands()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (delete Command ; })",
    "insertText": "while(FSerializerCommand* Command = WriteCommands.Pop())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (delete Command ; })",
    "insertText": "while(FSerializerCommand* Command = FreeCommands.Pop())"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run()"
  },
  {
    "label": "PopAll()",
    "kind": "Method",
    "detail": "Function (TArray<FSerializerCommand*> LocalReadCommands ; ReadCommands .)",
    "insertText": "PopAll(LocalReadCommands)"
  },
  {
    "label": "PopAll()",
    "kind": "Method",
    "detail": "Function (TArray<FSerializerCommand*> LocalWriteCommands ; WriteCommands .)",
    "insertText": "PopAll(LocalWriteCommands)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (FreeCommands .)",
    "insertText": "Push(Command)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} } Context . ArReader .)",
    "insertText": "Flush()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LocalWriteCommands.Num() > 0)"
  },
  {
    "label": "CheckHeader()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CheckHeader(bool bInFileExisted, TArray<FMovieSceneSessionInfo>& SessionInfos, HeaderData& InOutHeader, int64& ReadHeaderPos, FText& OutFailReason)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Context . ArReader .)",
    "insertText": "UsingCustomVersion(FTempCustomVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ArchiveVer = INT_MAX ; Context . ArReader<<ArchiveVer ;)",
    "insertText": "if(ArchiveVer > FTempCustomVersion::LatestVersion)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (OutFailReason =)",
    "insertText": "Format(NSLOCTEXT(\"MovieSceneSerializer\", \"FileOpenFailedIncorrectVersion\", \"Cannot open file.\\nFile version: {0}.\\nMax supported version: {1}.\"), FText::AsNumber(ArchiveVer), FText::AsNumber((int32)FTempCustomVersion::LatestVersion))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Context . ArReader<<NumSessions ;)",
    "insertText": "if(Context.ArReader.IsLoading())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (SessionInfos .)",
    "insertText": "SetNum(NumSessions)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 SessionIndex = 0; SessionIndex < NumSessions; ++SessionIndex)"
  },
  {
    "label": "CustomVer()",
    "kind": "Method",
    "detail": "Function (} else { int32 ArchiveVer = Context . ArWriter .)",
    "insertText": "CustomVer(FTempCustomVersion::GUID)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Context . ArWriter<<ArchiveVer ; int32 NumSessions = SessionInfos .)",
    "insertText": "Num()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FSerializerCommand* Command = FreeCommands .)",
    "insertText": "Pop()"
  },
  {
    "label": "FSerializerCommand()",
    "kind": "Method",
    "detail": "Function (Command = new)",
    "insertText": "FSerializerCommand(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "AddReadCommand()",
    "kind": "Method",
    "detail": "Function (} return Command ; } template<. . . ArgsType> void)",
    "insertText": "AddReadCommand(ArgsType&&... Args)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ReadCommands .)",
    "insertText": "Push(GetFreeCommand(Forward<ArgsType>(Args)...))"
  },
  {
    "label": "AddWriteCommand()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "AddWriteCommand(ArgsType&&... Args)"
  },
  {
    "label": "FMovieSceneSerializerRunnable()",
    "kind": "Method",
    "detail": "Function (} } ; template<HeaderData,FrameData> class FMovieSceneSerializerRunnable : public FRunnable { public :)",
    "insertText": "FMovieSceneSerializerRunnable() : bRunning(true), bStopping(false)"
  },
  {
    "label": "FMovieSceneSerializerRunnable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMovieSceneSerializerRunnable()"
  },
  {
    "label": "AddContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddContext(const FGuid& InGuid, IFileHandle* InHandle, const FString& InFileName)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&ContextMapCriticalSection)"
  },
  {
    "label": "FrameData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContextAndCommands<HeaderData,FrameData>> Context = MakeShared<FContextAndCommands<HeaderData,)",
    "insertText": "FrameData(InHandle, InFileName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ContextMap .)",
    "insertText": "Add(InGuid, Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bStopping)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (bRunning = false ; })",
    "insertText": "Sleep(MovieSceneSerializationNamespace::SerializerSleepTime)"
  },
  {
    "label": "CloseContexts()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CloseContexts()"
  },
  {
    "label": "CheckHeader()",
    "kind": "Method",
    "detail": "Function (bStopping = true ; } bool)",
    "insertText": "CheckHeader(const FGuid& InGuid, bool bInFileExisted, TArray<FMovieSceneSessionInfo>& SessionInfos, HeaderData& InOutHeader, int64& ReadHeaderPos, FText& OutFailReason)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContextAndCommands<HeaderData,FrameData>>* Context = ContextMap .)",
    "insertText": "Find(InGuid)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (} return false ; } FContextAndCommands<HeaderData,FrameData>&)",
    "insertText": "GetContext(const FGuid& InGuid)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close(const FGuid& InGuid)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ContextMap .)",
    "insertText": "Remove(InGuid)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ContextMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "TMovieSceneSerializer()",
    "kind": "Method",
    "detail": "Function (} TMap<FGuid,TSharedPtr<FContextAndCommands<HeaderData,FrameData>>> ContextMap ; FThreadSafeBool bRunning ; FThreadSafeBool bStopping ; FThreadSafeBool bOpenForRead ; FThreadSafeBool bOpenForWrite ; FCriticalSection ContextMapCriticalSection ; } ; template<HeaderData,FrameData> class TMovieSceneSerializer { public :)",
    "insertText": "TMovieSceneSerializer()"
  },
  {
    "label": "DoesFileExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesFileExist(const FString& InFileName)"
  },
  {
    "label": "GetLocalCaptureDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalCaptureDir()"
  },
  {
    "label": "SetLocalCaptureDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalCaptureDir(const FString& PathIn)"
  },
  {
    "label": "OpenForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenForWrite(const FString& InFilename, HeaderData& Header, FText& OutFailReason)"
  },
  {
    "label": "OpenForRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenForRead(const FString& InFileName, HeaderData& OutHeader, FText& OutFailReason)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "WriteFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFrameData(uint64 InFrameId, const FrameData &InFrame)"
  },
  {
    "label": "WriteFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFrameData(uint64 InFrameId, const TArray<FrameData> &InFrames)"
  },
  {
    "label": "ReadFramesAtFrameRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFramesAtFrameRange(uint64 InStartFrameId, uint64 InEndFrameId, TFunction<void()> InCompletionCallback)"
  },
  {
    "label": "GetDataRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDataRanges(TFunction<void(uint64 , uint64 )> InCompletionCallback)"
  },
  {
    "label": "GetNumSessions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSessions()"
  },
  {
    "label": "GetSessionId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetSessionId(int32 InSessionIndex)"
  },
  {
    "label": "DoesFileExist()",
    "kind": "Method",
    "detail": "Function (LocalCaptureDir = PathIn ; } template<HeaderData,FrameData> bool TMovieSceneSerializer<HeaderData,FrameData)",
    "insertText": "DoesFileExist(const FString& AbsoluteFilePath)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString AbsoluteFilePath = SaveDirectory + \" / \" + InFilename ; FramesWritten = 0 ; IFileHandle* Handle =)",
    "insertText": "Get().GetPlatformFile().OpenWrite(*AbsoluteFilePath, false, true)"
  },
  {
    "label": "FrameData()",
    "kind": "Method",
    "detail": "Function (Runnable = new FMovieSceneSerializerRunnable<HeaderData,)",
    "insertText": "FrameData()"
  },
  {
    "label": "AddContext()",
    "kind": "Method",
    "detail": "Function (} Runnable ->)",
    "insertText": "AddContext(Guid, Handle, AbsoluteFilePath)"
  },
  {
    "label": "SessionInfo()",
    "kind": "Method",
    "detail": "Function (Runnable -> bOpenForRead = true ; Runnable -> bOpenForWrite = true ; FMovieSceneSessionInfo)",
    "insertText": "SessionInfo(FApp::GetInstanceId(), FDateTime::UtcNow(), FNetworkVersion::GetNetworkCompatibleChangelist(), FPlatformProcess::ComputerName(), FPlatformProperties::PlatformName(), FApp::GetInstanceName(), FApp::GetBuildDate())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SessionInfos .)",
    "insertText": "Emplace(SessionInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 ReadHeaderPos ;)",
    "insertText": "if(Runnable->CheckHeader(Guid, false, SessionInfos, Header, ReadHeaderPos, OutFailReason))"
  },
  {
    "label": "ThreadName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ThreadName(Header.SerializedType.ToString())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(Runnable, *ThreadName)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} return true ; } else { Runnable ->)",
    "insertText": "Close(Guid)"
  },
  {
    "label": "OpenForRead()",
    "kind": "Method",
    "detail": "Function (Runnable -> bOpenForWrite = false ; } return true ; } } template<HeaderData,FrameData> bool TMovieSceneSerializer<HeaderData,FrameData)",
    "insertText": "OpenForRead(const FString& AbsoluteFilePath, HeaderData& OutHeader, FText& OutFailReason)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const bool bFileExists =)",
    "insertText": "Get().FileExists(*AbsoluteFilePath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Runnable -> bOpenForRead = true ; Runnable -> bOpenForWrite = false ; int64 ReadHeaderPos ;)",
    "insertText": "if(Runnable->CheckHeader(Guid,bFileExists, SessionInfos, OutHeader, ReadHeaderPos,OutFailReason))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HeaderData Header = OutHeader ;)",
    "insertText": "if(!Thread)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (} FContextAndCommands<HeaderData,FrameData>& Context = Runnable ->)",
    "insertText": "GetContext(Guid)"
  },
  {
    "label": "AddReadCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddReadCommand([ReadHeaderPos](FMovieSceneSerializerContext& InContext) { InContext.FrameIdToFrameOffset.Reset(); InContext.MinFrameId = 0xffffffffffffffff; InContext.MaxFrameId = 0; InContext.ArReader.Seek(ReadHeaderPos); while (true) { int64 FrameHeaderPos = InContext.ArReader.Tell(); FMovieSceneSerializedFrameHeader Header; InContext.ArReader << Header; InContext.FrameIdToFrameOffset.Emplace(Header.FrameId, FrameHeaderPos); InContext.MinFrameId = FMath::Min(InContext.MinFrameId, Header.FrameId); InContext.MaxFrameId = FMath::Max(InContext.MaxFrameId, Header.FrameId); if (Header.NextFrameOffset != MovieSceneSerializationNamespace::InvalidOffset && Header.NextFrameOffset < InContext.ArReader.TotalSize()) { InContext.ArReader.Seek(Header.NextFrameOffset); } else { break; } } InContext.ArReader.Seek(ReadHeaderPos); })"
  },
  {
    "label": "AddReadCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddReadCommand([InCompletionCallback](FMovieSceneSerializerContext& InContext) { uint64 MinFrameId = 0, MaxFrameId = 0; MinFrameId = InContext.MinFrameId; MaxFrameId = InContext.MaxFrameId; AsyncTask(ENamedThreads::GameThread, [MinFrameId, MaxFrameId, InCompletionCallback]() mutable { InCompletionCallback(MinFrameId, MaxFrameId); }); })"
  },
  {
    "label": "AddReadCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddReadCommand([this,InStartFrameId, InEndFrameId, InCompletionCallback](FMovieSceneSerializerContext& InContext) { int32 FoundFirstFramePos = Algo::LowerBoundBy(InContext.FrameIdToFrameOffset, InStartFrameId, [](const TPair<uint64, int64>& InItem) { return InItem.Key; }, TLess<>()); if (InContext.FrameIdToFrameOffset.IsValidIndex(FoundFirstFramePos)) { int64 ReturnPos = InContext.ArReader.Tell(); TArray<TMovieSceneSerializedFrame<FrameData>> TempFrames; InContext.ArReader.Seek(InContext.FrameIdToFrameOffset[FoundFirstFramePos].Value); while (true) { FMovieSceneSerializedFrameHeader Header; InContext.ArReader << Header; TMovieSceneSerializedFrame<FrameData>& TempFrame = TempFrames.Emplace_GetRef(); InContext.ArReader << TempFrame; if (Header.NextFrameOffset != MovieSceneSerializationNamespace::InvalidOffset && Header.NextFrameOffset < InContext.ArReader.TotalSize() && Header.FrameId <= InEndFrameId) { InContext.ArReader.Seek(Header.NextFrameOffset); } else { break; } } InContext.ArReader.Seek(ReturnPos); AsyncTask(ENamedThreads::GameThread, [this, InCompletionCallback, TempFrames = MoveTemp(TempFrames)]() mutable { ResultData = MoveTemp(TempFrames); InCompletionCallback(); }); } else { AsyncTask(ENamedThreads::GameThread, [this,InCompletionCallback]() { TArray<TMovieSceneSerializedFrame<FrameData>> DummyFrames; ResultData = MoveTemp(DummyFrames); InCompletionCallback(); }); } })"
  },
  {
    "label": "AddWriteCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddWriteCommand([InFrameId, InFrame](FMovieSceneSerializerContext& InContext) { FrameData CurrentBufferedWriteFrame = InFrame; InContext.ArWriter.Seek(InContext.ArWriter.TotalSize()); int64 ThisFramePos = InContext.ArWriter.Tell(); FMovieSceneSerializedFrameHeader Header(MovieSceneSerializationNamespace::InvalidOffset, InContext.LastFrameWritePos, InFrameId); InContext.ArWriter << Header; int64 FrameId = InFrameId; InContext.ArWriter << FrameId; InContext.ArWriter << CurrentBufferedWriteFrame; InContext.FrameIdToFrameOffset.Emplace(InFrameId, ThisFramePos); InContext.MinFrameId = FMath::Min(InContext.MinFrameId, InFrameId); InContext.MaxFrameId = FMath::Max(InContext.MaxFrameId, InFrameId); if (InContext.LastFrameWritePos != MovieSceneSerializationNamespace::InvalidOffset) { int64 ReturnPos = InContext.ArWriter.Tell(); InContext.ArWriter.Seek(InContext.LastFrameWritePos + STRUCT_OFFSET(FMovieSceneSerializedFrameHeader, NextFrameOffset)); InContext.ArWriter << ThisFramePos; InContext.ArWriter.Seek(ReturnPos); } InContext.LastFrameWritePos = ThisFramePos; })"
  },
  {
    "label": "AddWriteCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "AddWriteCommand([InFrameId, InFrames](FMovieSceneSerializerContext& InContext) { uint64 FrameId = InFrameId; for (const FrameData& InFrame : InFrames) { FrameData CurrentBufferedWriteFrame = InFrame; InContext.ArWriter.Seek(InContext.ArWriter.TotalSize()); int64 ThisFramePos = InContext.ArWriter.Tell(); FMovieSceneSerializedFrameHeader Header(MovieSceneSerializationNamespace::InvalidOffset, InContext.LastFrameWritePos, FrameId); InContext.ArWriter << Header; InContext.ArWriter << FrameId; InContext.ArWriter << CurrentBufferedWriteFrame; InContext.FrameIdToFrameOffset.Emplace(FrameId, ThisFramePos); InContext.MinFrameId = FMath::Min(InContext.MinFrameId, FrameId); InContext.MaxFrameId = FMath::Max(InContext.MaxFrameId, FrameId); if (InContext.LastFrameWritePos != MovieSceneSerializationNamespace::InvalidOffset) { int64 ReturnPos = InContext.ArWriter.Tell(); InContext.ArWriter.Seek(InContext.LastFrameWritePos + STRUCT_OFFSET(FMovieSceneSerializedFrameHeader, NextFrameOffset)); InContext.ArWriter << ThisFramePos; InContext.ArWriter.Seek(ReturnPos); } ++FrameId; InContext.LastFrameWritePos = ThisFramePos; } })"
  }
]