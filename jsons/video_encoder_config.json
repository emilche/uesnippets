[
  {
    "label": "VideoStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoStream"
  },
  {
    "label": "VideoEncoderConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEncoderConfig"
  },
  {
    "label": "EncoderSpecificSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderSpecificSettings"
  },
  {
    "label": "Vp8EncoderSpecificSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vp8EncoderSpecificSettings"
  },
  {
    "label": "Vp9EncoderSpecificSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vp9EncoderSpecificSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VideoStreamFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamFactoryInterface"
  },
  {
    "label": "VideoStream()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_CONFIG_VIDEO_ENCODER_CONFIG_H_ # define VIDEO_CONFIG_VIDEO_ENCODER_CONFIG_H_ # include<stddef . h> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / video / resolution . h \" # include \" api / video_codecs / scalability_mode . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_codec . h \" # include \" rtc_base / ref_count . h \" namespace webrtc { struct VideoStream {)",
    "insertText": "VideoStream()"
  },
  {
    "label": "VideoStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoStream(const VideoStream& other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "FillEncoderSpecificSettings()",
    "kind": "Method",
    "detail": "Function (size_t width ; size_t height ; int max_framerate ; int min_bitrate_bps ; int target_bitrate_bps ; int max_bitrate_bps ; double scale_resolution_down_by ; int max_qp ; absl::optional<size_t> num_temporal_layers ; absl::optional<double> bitrate_priority ; absl::optional<ScalabilityMode> scalability_mode ; bool active ; absl::optional<Resolution> requested_resolution ; } ; class VideoEncoderConfig { public : class EncoderSpecificSettings : public rtc::RefCountInterface { public : void)",
    "insertText": "FillEncoderSpecificSettings(VideoCodec* codec_struct)"
  },
  {
    "label": "FillVideoCodecVp8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillVideoCodecVp8(VideoCodecVP8* vp8_settings)"
  },
  {
    "label": "FillVideoCodecVp9()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillVideoCodecVp9(VideoCodecVP9* vp9_settings)"
  },
  {
    "label": "EncoderSpecificSettings()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "EncoderSpecificSettings()"
  },
  {
    "label": "Vp8EncoderSpecificSettings()",
    "kind": "Method",
    "detail": "Function (} class VideoEncoderConfig ; } ; class Vp8EncoderSpecificSettings : public EncoderSpecificSettings { public :)",
    "insertText": "Vp8EncoderSpecificSettings(const VideoCodecVP8& specifics)"
  },
  {
    "label": "Vp9EncoderSpecificSettings()",
    "kind": "Method",
    "detail": "Function (private : VideoCodecVP8 specifics_ ; } ; class Vp9EncoderSpecificSettings : public EncoderSpecificSettings { public :)",
    "insertText": "Vp9EncoderSpecificSettings(const VideoCodecVP9& specifics)"
  },
  {
    "label": "CreateEncoderStreams()",
    "kind": "Method",
    "detail": "Function (private : VideoCodecVP9 specifics_ ; } ; enum class ContentType { kRealtimeVideo,kScreen,} ; class VideoStreamFactoryInterface : public rtc::RefCountInterface { public : std::vector<VideoStream>)",
    "insertText": "CreateEncoderStreams(int frame_width, int frame_height, const VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "VideoStreamFactoryInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "VideoStreamFactoryInterface()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; VideoEncoderConfig&)",
    "insertText": "operator(VideoEncoderConfig&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoEncoderConfig&)",
    "insertText": "operator(const VideoEncoderConfig&)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (VideoEncoderConfig)",
    "insertText": "Copy()"
  },
  {
    "label": "VideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VideoEncoderConfig()"
  },
  {
    "label": "VideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoEncoderConfig(VideoEncoderConfig&&)"
  },
  {
    "label": "VideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (VideoCodecType codec_type ; SdpVideoFormat video_format ; rtc::scoped_refptr<VideoStreamFactoryInterface> video_stream_factory ; std::vector<SpatialLayer> spatial_layers ; ContentType content_type ; bool frame_drop_enabled ; rtc::scoped_refptr<const EncoderSpecificSettings> encoder_specific_settings ; int min_transmit_bitrate_bps ; int max_bitrate_bps ; double bitrate_priority ; std::vector<VideoStream> simulcast_layers ; size_t number_of_streams ; bool legacy_conference_mode ; bool is_quality_scaling_allowed ; int max_qp ; private :)",
    "insertText": "VideoEncoderConfig(const VideoEncoderConfig&)"
  }
]