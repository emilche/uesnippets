[
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "_Sp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_MIN_ELEMENT_H # define _LIBCPP___ALGORITHM_RANGES_MIN_ELEMENT_H # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / forward . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__min_element_impl()",
    "kind": "Method",
    "detail": "Function (template<class _Ip,class _Sp,class _Proj,class _Comp> _LIBCPP_HIDE_FROM_ABI _Ip)",
    "insertText": "__min_element_impl(_Ip __first, _Sp __last, _Comp& __comp, _Proj& __proj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_Ip __i = __first ;)",
    "insertText": "while(++__i != __last) if (std::invoke(__comp, std::invoke(__proj, *__i), std::invoke(__proj, *__first)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Rp,class _Proj = identity,indirect_strict_weak_order<projected<iterator_t<_Rp>,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Rp>)",
    "insertText": "operator()(_Rp&& __r, _Comp __comp = {}, _Proj __proj = {})"
  }
]