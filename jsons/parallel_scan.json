[
  {
    "label": "pre_scan_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pre_scan_tag"
  },
  {
    "label": "final_scan_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "final_scan_tag"
  },
  {
    "label": "final_sum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "final_sum"
  },
  {
    "label": "sum_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sum_node"
  },
  {
    "label": "start_scan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_scan"
  },
  {
    "label": "finish_scan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_scan"
  },
  {
    "label": "lambda_scan_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "lambda_scan_body"
  },
  {
    "label": "is_final_scan()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_scan_H # define __TBB_parallel_scan_H # include \" task . h \" # include \" aligned_space . h \" # include<new> # include \" partitioner . h \" namespace tbb { struct pre_scan_tag { bool)",
    "insertText": "is_final_scan()"
  },
  {
    "label": "final_sum()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<Range,Body> class final_sum : public task { public : Body my_body ; private : aligned_space<Range> my_range ; Body* my_stuff_last ; public :)",
    "insertText": "final_sum(Body& body_ ) : my_body(body_,split())"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "poison_pointer(my_stuff_last)"
  },
  {
    "label": "final_sum()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "final_sum()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (my_range .)",
    "insertText": "begin()->~Range()"
  },
  {
    "label": "finish_construction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "finish_construction(const Range& range_, Body* stuff_last_)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(my_range.begin() ) Range(range_)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_stuff_last = stuff_last_ ; } private : task*)",
    "insertText": "execute()"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body(*my_range.begin(), final_scan_tag())"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "poison_pointer(my_body)"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "poison_pointer(my_incoming)"
  },
  {
    "label": "create_child()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "create_child(const Range& range_, final_sum_type& f, sum_node* n, final_sum_type* incoming_, Body* stuff_last_)"
  },
  {
    "label": "recycle_as_child_of()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "recycle_as_child_of(*this)"
  },
  {
    "label": "finish_construction()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "finish_construction(range_, stuff_last_)"
  },
  {
    "label": "recycle_as_continuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recycle_as_continuation()"
  },
  {
    "label": "create_child()",
    "kind": "Method",
    "detail": "Function (sum_node& c =* this ; task* b = c .)",
    "insertText": "create_child(Range(my_range,split()),*my_left_sum,my_right,my_left_sum,my_stuff_last)"
  },
  {
    "label": "create_child()",
    "kind": "Method",
    "detail": "Function (task* a = my_left_is_final ? NULL : c .)",
    "insertText": "create_child(my_range,*my_body,my_left,my_incoming,NULL)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ref_count((a!=NULL)+(b!=NULL))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (my_body = NULL ;)",
    "insertText": "if(a ) spawn(*b)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_result.ref_count()==(my_result.my_left!=NULL)+(my_result.my_right!=NULL), NULL)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!my_return_slot, NULL)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (my_return_slot =& my_result ; } else {)",
    "insertText": "destroy(my_result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(my_right_zombie && !my_sum && !my_result.my_right)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(*my_right_zombie)"
  },
  {
    "label": "finish_scan()",
    "kind": "Method",
    "detail": "Function (my_right_zombie = NULL ; } return NULL ; })",
    "insertText": "finish_scan(sum_node_type*& return_slot_, final_sum_type** sum_, sum_node_type& result_ ) : my_sum(sum_), my_return_slot(return_slot_), my_right_zombie(NULL), my_result(result_)"
  },
  {
    "label": "start_scan()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "start_scan(sum_node_type*& return_slot_, start_scan& parent_, sum_node_type* parent_sum_ ) : my_body(parent_.my_body), my_sum(parent_.my_sum), my_return_slot(&return_slot_), my_parent_sum(parent_sum_), my_is_final(parent_.my_is_final), my_is_right_child(false), my_range(parent_.my_range,split()), my_partition(parent_.my_partition,split())"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!*my_return_slot, NULL)"
  },
  {
    "label": "start_scan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "start_scan(sum_node_type*& return_slot_, const Range& range_, final_sum_type& body_, const Partitioner& partitioner_) : my_body(&body_), my_sum(NULL), my_return_slot(&return_slot_), my_parent_sum(NULL), my_is_final(true), my_is_right_child(false), my_range(range_), my_partition(partitioner_)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(const Range& range_, Body& body_, const Partitioner& partitioner_)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (typedef internal::start_scan<Range,Body,Partitioner> start_pass1_type ; internal::sum_node<Range,Body>* root = NULL ; final_sum_type* temp_body =)",
    "insertText": "new(task::allocate_root()) final_sum_type( body_)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (start_pass1_type& pass1 =*)",
    "insertText": "new(task::allocate_root()) start_pass1_type( root, range_, *temp_body, partitioner_)"
  },
  {
    "label": "reverse_join()",
    "kind": "Method",
    "detail": "Function (temp_body -> my_body .)",
    "insertText": "reverse_join(body_)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_root_and_wait(pass1)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (root -> my_body = temp_body ; root -> my_incoming = NULL ; root -> my_stuff_last =& body_ ;)",
    "insertText": "spawn_root_and_wait(*root)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} else { body_ .)",
    "insertText": "assign(temp_body->my_body)"
  },
  {
    "label": "finish_construction()",
    "kind": "Method",
    "detail": "Function (temp_body ->)",
    "insertText": "finish_construction(range_, NULL)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (temp_body ->)",
    "insertText": "destroy(*temp_body)"
  },
  {
    "label": "finish_pass1_type()",
    "kind": "Method",
    "detail": "Function (typedef internal::finish_scan<Range,Body> finish_pass1_type ; finish_pass1_type* p = my_parent_sum ? static_cast<)",
    "insertText": "finish_pass1_type(parent())"
  },
  {
    "label": "my_is_right_child()",
    "kind": "Method",
    "detail": "Function (bool treat_as_stolen =)",
    "insertText": "my_is_right_child(is_stolen_task() || my_body!=p->my_result.my_left_sum)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (p -> my_right_zombie = my_body =)",
    "insertText": "new(allocate_root() ) final_sum_type(my_body->my_body)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (my_is_final = false ; } task* next_task = NULL ;)",
    "insertText": "if((my_is_right_child && !treat_as_stolen) || !my_range.is_divisible() || my_partition.should_execute_range(*this))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { sum_node_type* result ;)",
    "insertText": "if(my_parent_sum ) result = new(allocate_additional_child_of(*my_parent_sum)) sum_node_type(my_range, my_is_final)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (finish_pass1_type& c =*)",
    "insertText": "new(allocate_continuation()) finish_pass1_type(*my_return_slot,my_sum,*result)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (start_scan& b =*)",
    "insertText": "new(c.allocate_child() ) start_scan( result->my_right, *this, result)"
  },
  {
    "label": "recycle_as_child_of()",
    "kind": "Method",
    "detail": "Function (b . my_is_right_child = true ;)",
    "insertText": "recycle_as_child_of(c)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "set_ref_count(2)"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "spawn(b)"
  },
  {
    "label": "lambda_scan_body()",
    "kind": "Method",
    "detail": "Function (} return next_task ; } template<Range,Value,Scan,ReverseJoin> class lambda_scan_body : no_assign { Value my_sum ; const Value& identity_element ; const Scan& my_scan ; const ReverseJoin& my_reverse_join ; public :)",
    "insertText": "lambda_scan_body(const Value& identity, const Scan& scan, const ReverseJoin& rev_join) : my_sum(identity) , identity_element(identity) , my_scan(scan) , my_reverse_join(rev_join)"
  },
  {
    "label": "lambda_scan_body()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "lambda_scan_body(lambda_scan_body& b, split ) : my_sum(b.identity_element) , identity_element(b.identity_element) , my_scan(b.my_scan) , my_reverse_join(b.my_reverse_join)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Tag> void)",
    "insertText": "operator()( const Range& r, Tag tag)"
  },
  {
    "label": "my_scan()",
    "kind": "Method",
    "detail": "Function (my_sum =)",
    "insertText": "my_scan(r, my_sum, tag)"
  },
  {
    "label": "reverse_join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reverse_join(lambda_scan_body& a)"
  },
  {
    "label": "my_reverse_join()",
    "kind": "Method",
    "detail": "Function (my_sum =)",
    "insertText": "my_reverse_join(a.my_sum, my_sum)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(lambda_scan_body& b)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (my_sum = b . my_sum ; } Value)",
    "insertText": "result()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_scan<Range,Body,__TBB_DEFAULT_PARTITIONER)",
    "insertText": "run(range,body,__TBB_DEFAULT_PARTITIONER())"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_scan(const Range& range, Body& body, const simple_partitioner& partitioner)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_scan<Range,Body,simple_partitioner)",
    "insertText": "run(range,body,partitioner)"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_scan(const Range& range, Body& body, const auto_partitioner& partitioner)"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,Scan,ReverseJoin> Value)",
    "insertText": "parallel_scan(const Range& range, const Value& identity, const Scan& scan, const ReverseJoin& reverse_join)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (internal::lambda_scan_body<Range,Value,Scan,ReverseJoin>)",
    "insertText": "body(identity, scan, reverse_join)"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_scan(range,body,__TBB_DEFAULT_PARTITIONER())"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,Scan,ReverseJoin> Value)",
    "insertText": "parallel_scan(const Range& range, const Value& identity, const Scan& scan, const ReverseJoin& reverse_join, const simple_partitioner& partitioner)"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_scan(range,body,partitioner)"
  },
  {
    "label": "parallel_scan()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,Scan,ReverseJoin> Value)",
    "insertText": "parallel_scan(const Range& range, const Value& identity, const Scan& scan, const ReverseJoin& reverse_join, const auto_partitioner& partitioner)"
  }
]