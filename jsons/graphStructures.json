[
  {
    "label": "baseGraphStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "baseGraphStructure"
  },
  {
    "label": "gp_IsArc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" appconst . h \" # include \" listcoll . h \" # include \" stack . h \" # include \" graphFunctionTable . h \" # include \" graphExtensions . private . h \" # define NONEMBEDDABLE - 1 # define DEFAULT_EDGE_LIMIT 3 typedef struct { int link [ 2 ] ; int neighbor ; } edgeRec ; typedef edgeRec* edgeRecP ; # if NIL = = 0 # define)",
    "insertText": "gp_IsArc(e) (e) #define gp_IsNotArc(e) (!(e)) #define gp_GetFirstEdge(theGraph) (2) #elif NIL == -1 #define gp_IsArc(e) ((e) != NIL) #define gp_IsNotArc(e) ((e) == NIL) #define gp_GetFirstEdge(theGraph) (0) #else #error NIL must be 0 or -1 #endif #define gp_EdgeInUse(theGraph, e) (gp_IsVertex(gp_GetNeighbor(theGraph, e))) #define gp_EdgeNotInUse(theGraph, e) (gp_IsNotVertex(gp_GetNeighbor(theGraph, e))) #define gp_EdgeIndexBound(theGraph) (gp_GetFirstEdge(theGraph) + (theGraph)->arcCapacity) #define gp_EdgeInUseIndexBound(theGraph) (gp_GetFirstEdge(theGraph) + (((theGraph)->M + sp_GetCurrentSize((theGraph)->edgeHoles)) << 1)) #define gp_GetTwinArc(theGraph, Arc) ((Arc) ^ 1) #define gp_GetNextArc(theGraph, e) (theGraph->E[e].link[0]) #define gp_GetPrevArc(theGraph, e) (theGraph->E[e].link[1]) #define gp_GetAdjacentArc(theGraph, e, theLink) (theGraph->E[e].link[theLink]) #define gp_SetNextArc(theGraph, e, newNextArc) (theGraph->E[e].link[0] = newNextArc) #define gp_SetPrevArc(theGraph, e, newPrevArc) (theGraph->E[e].link[1] = newPrevArc) #define gp_SetAdjacentArc(theGraph, e, theLink, newArc) (theGraph->E[e].link[theLink] = newArc) #define gp_GetNeighbor(theGraph, e) (theGraph->E[e].neighbor) #define gp_SetNeighbor(theGraph, e, v) (theGraph->E[e].neighbor = v) #define gp_CopyEdgeRec(dstGraph, edst, srcGraph, esrc) (dstGraph->E[edst] = srcGraph->E[esrc])"
  },
  {
    "label": "gp_GetFirstArc()",
    "kind": "Method",
    "detail": "Function (int link [ 2 ] ; int index ; unsigned flags ; } vertexRec ; typedef vertexRec* vertexRecP ; # define)",
    "insertText": "gp_GetFirstArc(theGraph, v) (theGraph->V[v].link[0]) #define gp_GetLastArc(theGraph, v) (theGraph->V[v].link[1]) #define gp_GetArc(theGraph, v, theLink) (theGraph->V[v].link[theLink]) #define gp_SetFirstArc(theGraph, v, newFirstArc) (theGraph->V[v].link[0] = newFirstArc) #define gp_SetLastArc(theGraph, v, newLastArc) (theGraph->V[v].link[1] = newLastArc) #define gp_SetArc(theGraph, v, theLink, newArc) (theGraph->V[v].link[theLink] = newArc) #if NIL == 0 #define gp_IsVertex(v) (v) #define gp_IsNotVertex(v) (!(v)) #define gp_GetFirstVertex(theGraph) (1) #define gp_GetLastVertex(theGraph) ((theGraph)->N) #define gp_VertexInRange(theGraph, v) ((v) <= (theGraph)->N) #define gp_VertexInRangeDescending(theGraph, v) (v) #define gp_PrimaryVertexIndexBound(theGraph) (gp_GetFirstVertex(theGraph) + (theGraph)->N) #define gp_VertexIndexBound(theGraph) (gp_PrimaryVertexIndexBound(theGraph) + (theGraph)->N) #define gp_GetFirstVirtualVertex(theGraph) (theGraph->N + 1) #define gp_VirtualVertexInRange(theGraph, v) ((v) <= theGraph->N + theGraph->NV) #elif NIL == -1 #define gp_IsVertex(v) ((v) != NIL) #define gp_IsNotVertex(v) ((v) == NIL) #define gp_GetFirstVertex(theGraph) (0) #define gp_GetLastVertex(theGraph) ((theGraph)->N - 1) #define gp_VertexInRange(theGraph, v) ((v) < (theGraph)->N) #define gp_VertexInRangeDescending(theGraph, v) ((v) >= 0) #define gp_PrimaryVertexIndexBound(theGraph) (gp_GetFirstVertex(theGraph) + (theGraph)->N) #define gp_VertexIndexBound(theGraph) (gp_PrimaryVertexIndexBound(theGraph) + (theGraph)->N) #define gp_GetFirstVirtualVertex(theGraph) (theGraph->N) #define gp_VirtualVertexInRange(theGraph, v) ((v) < theGraph->N + theGraph->NV) #else #error NIL must be 0 or -1 #endif #define gp_GetVertexIndex(theGraph, v) (theGraph->V[v].index) #define gp_SetVertexIndex(theGraph, v, theIndex) (theGraph->V[v].index = theIndex) #define gp_InitVertexFlags(theGraph, v) (theGraph->V[v].flags = 0) #define VERTEX_VISITED_MASK 1 #define gp_GetVertexVisited(theGraph, v) (theGraph->V[v].flags&VERTEX_VISITED_MASK) #define gp_ClearVertexVisited(theGraph, v) (theGraph->V[v].flags &= ~VERTEX_VISITED_MASK) #define gp_SetVertexVisited(theGraph, v) (theGraph->V[v].flags |= VERTEX_VISITED_MASK) #define gp_CopyVertexRec(dstGraph, vdst, srcGraph, vsrc) (dstGraph->V[vdst] = srcGraph->V[vsrc]) #define gp_SwapVertexRec(dstGraph, vdst, srcGraph, vsrc)"
  },
  {
    "label": "gp_AttachArc()",
    "kind": "Method",
    "detail": "Function (\\ vertexRec tempV = dstGraph -> V [ vdst ] ; \\ dstGraph -> V [ vdst ] = srcGraph -> V [ vsrc ] ; \\ srcGraph -> V [ vsrc ] = tempV ; \\ } struct baseGraphStructure { vertexRecP V ; int N,NV ; edgeRecP E ; int M,arcCapacity ; stackP edgeHoles ; stackP theStack ; graphExtensionP extensions ; graphFunctionTable functions ; } ; typedef baseGraphStructure* graphP ; void)",
    "insertText": "gp_AttachArc(graphP theGraph, int v, int e, int link, int newArc)"
  },
  {
    "label": "gp_DetachArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gp_DetachArc(graphP theGraph, int arc)"
  }
]