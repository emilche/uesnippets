[
  {
    "label": "FSplineMeshParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshParams"
  },
  {
    "label": "FStaticLightingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingSettings"
  },
  {
    "label": "FStaticLightingSceneConstants",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingSceneConstants"
  },
  {
    "label": "EViewMaterialAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewMaterialAttribute"
  },
  {
    "label": "FSceneMaterialSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneMaterialSettings"
  },
  {
    "label": "FMeshAreaLightSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshAreaLightSettings"
  },
  {
    "label": "FAmbientOcclusionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAmbientOcclusionSettings"
  },
  {
    "label": "FDynamicObjectSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicObjectSettings"
  },
  {
    "label": "FVolumetricLightmapSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapSettings"
  },
  {
    "label": "FPrecomputedVisibilitySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVisibilitySettings"
  },
  {
    "label": "FVolumeDistanceFieldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeDistanceFieldSettings"
  },
  {
    "label": "FStaticShadowSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShadowSettings"
  },
  {
    "label": "FImportanceTracingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportanceTracingSettings"
  },
  {
    "label": "FPhotonMappingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhotonMappingSettings"
  },
  {
    "label": "FIrradianceCachingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIrradianceCachingSettings"
  },
  {
    "label": "FDebugLightingInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingInputData"
  },
  {
    "label": "FSceneFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneFileHeader"
  },
  {
    "label": "EDawnLightFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDawnLightFlags"
  },
  {
    "label": "FLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightData"
  },
  {
    "label": "FDirectionalLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectionalLightData"
  },
  {
    "label": "FPointLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointLightData"
  },
  {
    "label": "FSpotLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpotLightData"
  },
  {
    "label": "FSkyLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyLightData"
  },
  {
    "label": "FRectLightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRectLightData"
  },
  {
    "label": "FMaterialElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialElementData"
  },
  {
    "label": "EMeshInstanceLightingFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMeshInstanceLightingFlags"
  },
  {
    "label": "FStaticLightingMeshInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingMeshInstanceData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FStaticMeshStaticLightingMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshStaticLightingMeshData"
  },
  {
    "label": "FMinimalStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalStaticLightingVertex"
  },
  {
    "label": "FStaticLightingVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingVertexData"
  },
  {
    "label": "FBSPSurfaceStaticLightingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBSPSurfaceStaticLightingData"
  },
  {
    "label": "FStaticLightingMappingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingMappingData"
  },
  {
    "label": "FStaticLightingTextureMappingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingTextureMappingData"
  },
  {
    "label": "FStaticLightingVertexMappingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingVertexMappingData"
  },
  {
    "label": "FFluidSurfaceStaticLightingMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFluidSurfaceStaticLightingMeshData"
  },
  {
    "label": "FLandscapeStaticLightingMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeStaticLightingMeshData"
  },
  {
    "label": "FVolumetricLightmapDensityVolumeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightmapDensityVolumeData"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Containers / EnumAsByte . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Math / Box . h \" # include \" Math / Matrix . h \" # include \" Math / SHMath . h \" # include \" Misc / Guid . h \" # include \" MeshExport . h \" # ifdef UE_LIGHTMASS # include \" Misc / LMHelpers . h \" # endif struct FSplineMeshParams ; namespace Lightmass { # if ! PLATFORM_MAC&& ! PLATFORM_LINUX # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "FSceneFileHeader()",
    "kind": "Method",
    "detail": "Function (class FStaticLightingSettings { public : bool bAllowMultiThreadedStaticLighting ; int32 NumUnusedLocalCores ; int32 NumIndirectLightingBounces ; int32 NumSkyLightingBounces ; bool bUseEmbree ; bool bVerifyEmbree ; bool bUseEmbreePacketTracing ; bool bUseFastVoxelization ; bool bUseEmbreeInstancing ; int32 MappingSurfaceCacheDownsampleFactor ; float IndirectLightingSmoothness ; float IndirectLightingQuality ; int32 ViewSingleBounceNumber ; bool bUseConservativeTexelRasterization ; bool bAccountForTexelSize ; bool bUseMaxWeight ; int32 MaxTriangleLightingSamples ; int32 MaxTriangleIrradiancePhotonCacheSamples ; bool bUseErrorColoring ; FLinearColor UnmappedTexelColor ; } ; class FStaticLightingSceneConstants { public : float StaticLightingLevelScale ; float VisibilityRayOffsetDistance ; float VisibilityNormalOffsetDistance ; float VisibilityNormalOffsetSampleRadiusScale ; float VisibilityTangentOffsetSampleRadiusScale ; float SmallestTexelRadius ; int32 LightGridSize ; } ; enum EViewMaterialAttribute { VMA_None,VMA_Emissive,VMA_Diffuse,VMA_Transmission,VMA_Normal } ; struct FSceneMaterialSettings { bool bUseDebugMaterial ; EViewMaterialAttribute ViewMaterialAttribute ; int32 EmissiveSize ; int32 DiffuseSize ; int32 TransmissionSize ; int32 NormalSize ; bool bUseNormalMapsForLighting ; FLinearColor DebugDiffuse ; FLinearColor EnvironmentColor ; } ; struct FMeshAreaLightSettings { bool bVisualizeMeshAreaLightPrimitives ; float EmissiveIntensityThreshold ; int32 MeshAreaLightGridSize ; float MeshAreaLightSimplifyNormalCosAngleThreshold ; float MeshAreaLightSimplifyCornerDistanceThreshold ; float MeshAreaLightSimplifyMeshBoundingRadiusFractionThreshold ; float MeshAreaLightGeneratedDynamicLightSurfaceOffset ; } ; class FAmbientOcclusionSettings { public : bool bUseAmbientOcclusion ; bool bGenerateAmbientOcclusionMaterialMask ; bool bVisualizeAmbientOcclusion ; float DirectIlluminationOcclusionFraction ; float IndirectIlluminationOcclusionFraction ; float OcclusionExponent ; float FullyOccludedSamplesFraction ; float MaxOcclusionDistance ; } ; class FDynamicObjectSettings { public : bool bVisualizeVolumeLightSamples ; bool bVisualizeVolumeLightInterpolation ; float NumHemisphereSamplesScale ; float SurfaceLightSampleSpacing ; float FirstSurfaceSampleLayerHeight ; float SurfaceSampleLayerHeightSpacing ; int32 NumSurfaceSampleLayers ; float DetailVolumeSampleSpacing ; float VolumeLightSampleSpacing ; int32 MaxVolumeSamples ; bool bUseMaxSurfaceSampleNum ; int32 MaxSurfaceLightSamples ; } ; class FVolumetricLightmapSettings { public : FIntVector TopLevelGridSize ; FVector3f VolumeMin ; FVector3f VolumeSize ; int32 BrickSize ; int32 MaxRefinementLevels ; float VoxelizationCellExpansionForSurfaceGeometry ; float VoxelizationCellExpansionForVolumeGeometry ; float VoxelizationCellExpansionForLights ; float MinBrickError ; float SurfaceLightmapMinTexelsPerVoxelAxis ; bool bCullBricksBelowLandscape ; float LightBrightnessSubdivideThreshold ; float WindowingTargetLaplacian ; } ; class FPrecomputedVisibilitySettings { public : bool bVisualizePrecomputedVisibility ; bool bPlaceCellsOnOpaqueOnly ; bool bPlaceCellsOnlyAlongCameraTracks ; float CellSize ; int32 NumCellDistributionBuckets ; float PlayAreaHeight ; float MeshBoundsScale ; int32 MinMeshSamples ; int32 MaxMeshSamples ; int32 NumCellSamples ; int32 NumImportanceSamples ; } ; class FVolumeDistanceFieldSettings { public : float VoxelSize ; float VolumeMaxDistance ; int32 NumVoxelDistanceSamples ; int32 MaxVoxels ; } ; class FStaticShadowSettings { public : bool bUseZeroAreaLightmapSpaceFilteredLights ; int32 NumShadowRays ; int32 NumPenumbraShadowRays ; int32 NumBounceShadowRays ; bool bFilterShadowFactor ; float ShadowFactorGradientTolerance ; bool bAllowSignedDistanceFieldShadows ; float MaxTransitionDistanceWorldSpace ; int32 ApproximateHighResTexelsPerMaxTransitionDistance ; int32 MinDistanceFieldUpsampleFactor ; float StaticShadowDepthMapTransitionSampleDistanceX ; float StaticShadowDepthMapTransitionSampleDistanceY ; int32 StaticShadowDepthMapSuperSampleFactor ; int32 StaticShadowDepthMapMaxSamples ; float MinUnoccludedFraction ; } ; class FImportanceTracingSettings { public : bool bUseStratifiedSampling ; int32 NumHemisphereSamples ; int32 NumAdaptiveRefinementLevels ; float MaxHemisphereRayAngle ; float AdaptiveBrightnessThreshold ; float AdaptiveFirstBouncePhotonConeAngle ; float AdaptiveSkyVarianceThreshold ; bool bUseRadiositySolverForSkylightMultibounce ; bool bCacheFinalGatherHitPointsForRadiosity ; bool bUseRadiositySolverForLightMultibounce ; } ; class FPhotonMappingSettings { public : bool bUsePhotonMapping ; bool bUseFinalGathering ; bool bUsePhotonDirectLightingInFinalGather ; bool bVisualizeCachedApproximateDirectLighting ; bool bUseIrradiancePhotons ; bool bCacheIrradiancePhotonsOnSurfaces ; bool bVisualizePhotonPaths ; bool bVisualizePhotonGathers ; bool bVisualizePhotonImportanceSamples ; bool bVisualizeIrradiancePhotonCalculation ; bool bEmitPhotonsOutsideImportanceVolume ; float ConeFilterConstant ; int32 NumIrradianceCalculationPhotons ; float FinalGatherImportanceSampleFraction ; float FinalGatherImportanceSampleCosConeAngle ; float IndirectPhotonEmitDiskRadius ; float IndirectPhotonEmitConeAngle ; float MaxImportancePhotonSearchDistance ; float MinImportancePhotonSearchDistance ; int32 NumImportanceSearchPhotons ; float OutsideImportanceVolumeDensityScale ; float DirectPhotonDensity ; float DirectIrradiancePhotonDensity ; float DirectPhotonSearchDistance ; float IndirectPhotonPathDensity ; float IndirectPhotonDensity ; float IndirectIrradiancePhotonDensity ; float IndirectPhotonSearchDistance ; float PhotonSearchAngleThreshold ; float MinCosIrradiancePhotonSearchCone ; bool bUsePhotonSegmentsForVolumeLighting ; float PhotonSegmentMaxLength ; float GeneratePhotonSegmentChance ; } ; class FIrradianceCachingSettings { public : bool bAllowIrradianceCaching ; bool bUseIrradianceGradients ; bool bShowGradientsOnly ; bool bVisualizeIrradianceSamples ; float RecordRadiusScale ; float InterpolationMaxAngle ; float PointBehindRecordMaxAngle ; float DistanceSmoothFactor ; float AngleSmoothFactor ; float SkyOcclusionSmoothnessReduction ; float MaxRecordRadius ; int32 CacheTaskSize ; int32 InterpolateTaskSize ; } ; struct FDebugLightingInputData { bool bRelaySolverStats ; FGuid MappingGuid ; int32 NodeIndex ; FVector4f Position ; int32 LocalX ; int32 LocalY ; int32 MappingSizeX ; int32 MappingSizeY ; FVector4f CameraPosition ; int32 DebugVisibilityId ; } ; struct FSceneFileHeader { uint32 Cookie ; FGuid FormatVersion ; FGuid Guid ; FStaticLightingSettings GeneralSettings ; FStaticLightingSceneConstants SceneConstants ; FSceneMaterialSettings MaterialSettings ; FMeshAreaLightSettings MeshAreaLightSettings ; FAmbientOcclusionSettings AmbientOcclusionSettings ; FDynamicObjectSettings DynamicObjectSettings ; FVolumetricLightmapSettings VolumetricLightmapSettings ; FPrecomputedVisibilitySettings PrecomputedVisibilitySettings ; FVolumeDistanceFieldSettings VolumeDistanceFieldSettings ; FStaticShadowSettings ShadowSettings ; FImportanceTracingSettings ImportanceTracingSettings ; FPhotonMappingSettings PhotonMappingSettings ; FIrradianceCachingSettings IrradianceCachingSettings ; FDebugLightingInputData DebugInput ;)",
    "insertText": "FSceneFileHeader()"
  },
  {
    "label": "FSceneFileHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneFileHeader(const FSceneFileHeader& Other)"
  },
  {
    "label": "ComputeLightProfileMultiplier()",
    "kind": "Method",
    "detail": "Function (uint32 bPadMappings : 1 ; uint32 bDebugPadding : 1 ; uint32 bOnlyCalcDebugTexelMappings : 1 ; uint32 bColorByExecutionTime : 1 ; uint32 bUseRandomColors : 1 ; uint32 bColorBordersGreen : 1 ; float ExecutionTimeDivisor ; int32 NumImportanceVolumes ; int32 NumCharacterIndirectDetailVolumes ; int32 NumVolumetricLightmapDensityVolumes ; int32 NumPortals ; int32 NumDirectionalLights ; int32 NumPointLights ; int32 NumSpotLights ; int32 NumRectLights ; int32 NumSkyLights ; int32 NumStaticMeshes ; int32 NumStaticMeshInstances ; int32 NumFluidSurfaceInstances ; int32 NumLandscapeInstances ; int32 NumBSPMappings ; int32 NumStaticMeshTextureMappings ; int32 NumFluidSurfaceTextureMappings ; int32 NumLandscapeTextureMappings ; int32 NumSpeedTreeMappings ; int32 NumVolumeMappings ; int32 NumLandscapeVolumeMappings ; int32 NumPrecomputedVisibilityBuckets ; int32 NumVolumetricLightmapTasks ; } ; enum EDawnLightFlags { GI_LIGHT_CASTSHADOWS = 0 x00000001,GI_LIGHT_HASSTATICLIGHTING = 0 x00000002,GI_LIGHT_HASSTATICSHADOWING = 0 x00000008,GI_LIGHT_CASTSTATICSHADOWS = 0 x00000010,GI_LIGHT_STORE_SEPARATE_SHADOW_FACTOR = 0 x00000020,GI_LIGHT_INVERSE_SQUARED = 0 x00000080,GI_LIGHT_USE_LIGHTPROFILE = 0 x00000100,GI_LIGHT_USE_AREA_SHADOWS_FOR_SEPARATE_SHADOW_FACTOR = 0 x00000200 } ; struct FLightData { const int32 LightProfileTextureDataSize = 2 5 6* 2 5 6 ; FGuid Guid ; uint32 LightFlags ; FVector4f Position ; FVector4f Direction ; FLinearColor Color ; float Brightness ; float LightSourceRadius ; float LightSourceLength ; float IndirectLightingScale ; float IndirectLightingSaturation ; float ShadowExponent ; float ShadowResolutionScale ; float)",
    "insertText": "ComputeLightProfileMultiplier(const TArray< uint8 >& LightProfileTextureData, FVector3f WorldPosition, FVector3f LightPosition, FVector3f LightDirection, FVector3f LightTangent)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (FVector3f LightBitangent =)",
    "insertText": "CrossProduct(LightTangent, LightDirection ).GetSafeNormal()"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (FMatrix44f LightTransform =)",
    "insertText": "FMatrix44f(LightDirection, LightBitangent, LightTangent, FVector4f(0.f, 0.f, 0.f, 1.f))"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (FMatrix44f InvLightTransform = LightTransform .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "ToLight()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ToLight(LightPosition - WorldPosition).GetSafeNormal()"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (FVector3f LocalToLight = InvLightTransform .)",
    "insertText": "TransformVector(ToLight)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (float DotProd =)",
    "insertText": "DotProduct(ToLight, LightDirection)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (float Angle =)",
    "insertText": "Asin(DotProd)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (float NormAngle = Angle / PI + 0 . 5 f ; float TangentAngle =)",
    "insertText": "Atan2(-LocalToLight.Z, -LocalToLight.Y)"
  },
  {
    "label": "TangentAngle()",
    "kind": "Method",
    "detail": "Function (float NormTangentAngle =)",
    "insertText": "TangentAngle(PI * 2.f)"
  },
  {
    "label": "FilterLightProfile()",
    "kind": "Method",
    "detail": "Function (} return 1 . 0 f ; } private : float)",
    "insertText": "FilterLightProfile(const TArray< uint8 >& LightProfileTextureData, const float X, const float Y)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const uint32 SizeX =)",
    "insertText": "Sqrt(static_cast<float>(LightProfileTextureDataSize))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const uint32 SizeY = LightProfileTextureDataSize / SizeX ; float UnNormalizedX =)",
    "insertText": "Clamp(X * SizeX, 0.0f, (float)(SizeX - 1))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float UnNormalizedY =)",
    "insertText": "Clamp(Y * SizeY, 0.0f, (float)(SizeY - 1))"
  },
  {
    "label": "X0()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "X0(uint32)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint32 X1 =)",
    "insertText": "Min(X0 + 1, SizeX - 1)"
  },
  {
    "label": "Y0()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Y0(uint32)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint32 Y1 =)",
    "insertText": "Min(Y0 + 1, SizeY - 1)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (float XFraction = UnNormalizedX - X0 ; float YFraction = UnNormalizedY - Y0 ; float V00 = LightProfileTextureData [ Y0* SizeX + X0 ] / 2 5 5 . 0 f ; float V10 = LightProfileTextureData [ Y1* SizeX + X0 ] / 2 5 5 . 0 f ; float V01 = LightProfileTextureData [ Y0* SizeX + X1 ] / 2 5 5 . 0 f ; float V11 = LightProfileTextureData [ Y1* SizeX + X1 ] / 2 5 5 . 0 f ; float V0 =)",
    "insertText": "Lerp(V00, V10, YFraction)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (float V1 =)",
    "insertText": "Lerp(V01, V11, YFraction)"
  },
  {
    "label": "FMaterialElementData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDirectionalLightData { float LightSourceAngle ; } ; struct FPointLightData { float Radius ; float FalloffExponent ; FVector3f LightTangent ; } ; struct FSpotLightData { float InnerConeAngle ; float OuterConeAngle ; } ; struct FSkyLightData { bool bUseFilteredCubemap ; int32 RadianceEnvironmentMapDataSize ; FSHVectorRGB3 IrradianceEnvironmentMap ; } ; struct FRectLightData { uint32 SourceTextureSizeX ; uint32 SourceTextureSizeY ; FLinearColor SourceTextureAvgColor ; } ; struct FMaterialElementData { FSHAHash MaterialHash ; uint32 bUseTwoSidedLighting : 1 ; uint32 bShadowIndirectOnly : 1 ; uint32 bUseEmissiveForStaticLighting : 1 ; uint32 bUseVertexNormalForHemisphereGather : 1 ; float EmissiveLightFalloffExponent ; float EmissiveLightExplicitInfluenceRadius ; float EmissiveBoost ; float DiffuseBoost ; float FullyOccludedSamplesFraction ;)",
    "insertText": "FMaterialElementData() : bUseTwoSidedLighting(false) , bShadowIndirectOnly(false) , bUseEmissiveForStaticLighting(true) , bUseVertexNormalForHemisphereGather(false) , EmissiveLightFalloffExponent(2.0f) , EmissiveLightExplicitInfluenceRadius(0.0f) , EmissiveBoost(1.0f) , DiffuseBoost(1.0f) , FullyOccludedSamplesFraction(1.0f)"
  }
]