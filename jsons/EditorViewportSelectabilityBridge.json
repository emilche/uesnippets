[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" class FEditorViewportClient ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FOnIsViewportSelectionLimited)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnIsObjectSelectableInViewport, UObject*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(FText, FOnGetViewportSelectionLimitedText)"
  },
  {
    "label": "FEditorViewportSelectabilityBridge()",
    "kind": "Method",
    "detail": "Function (class FEditorViewportSelectabilityBridge { public :)",
    "insertText": "FEditorViewportSelectabilityBridge()"
  },
  {
    "label": "FEditorViewportSelectabilityBridge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorViewportSelectabilityBridge(const TWeakPtr<FEditorViewportClient>& InEditorViewportClientWeak)"
  },
  {
    "label": "OnIsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (FOnIsViewportSelectionLimited&)",
    "insertText": "OnIsViewportSelectionLimited()"
  },
  {
    "label": "IsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportSelectionLimited()"
  },
  {
    "label": "OnGetIsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (FOnIsObjectSelectableInViewport&)",
    "insertText": "OnGetIsObjectSelectableInViewport()"
  },
  {
    "label": "IsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectSelectableInViewport(UObject* const InObject)"
  },
  {
    "label": "OnGetViewportSelectionLimitedText()",
    "kind": "Method",
    "detail": "Function (FOnGetViewportSelectionLimitedText&)",
    "insertText": "OnGetViewportSelectionLimitedText()"
  },
  {
    "label": "GetViewportSelectionLimitedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetViewportSelectionLimitedText()"
  }
]