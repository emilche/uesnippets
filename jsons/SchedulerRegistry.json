[
  {
    "label": "SelectionDAGISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAGISel"
  },
  {
    "label": "ScheduleDAGSDNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGSDNodes"
  },
  {
    "label": "SelectionDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAG"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "RegisterScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterScheduler"
  },
  {
    "label": "ScheduleDAGSDNodes()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SCHEDULERREGISTRY_H # define LLVM_CODEGEN_SCHEDULERREGISTRY_H # include \" llvm / CodeGen / MachinePassRegistry . h \" # include \" llvm / Target / TargetMachine . h \" namespace llvm { class SelectionDAGISel ; class ScheduleDAGSDNodes ; class SelectionDAG ; class MachineBasicBlock ; class RegisterScheduler : public MachinePassRegistryNode { public : typedef)",
    "insertText": "ScheduleDAGSDNodes(*FunctionPassCtor)(SelectionDAGISel*, CodeGenOpt::Level)"
  },
  {
    "label": "RegisterScheduler()",
    "kind": "Method",
    "detail": "Function (MachinePassRegistry Registry ;)",
    "insertText": "RegisterScheduler(const char *N, const char *D, FunctionPassCtor C) : MachinePassRegistryNode(N, D, (MachinePassCtor)C)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Registry .)",
    "insertText": "Add(this)"
  },
  {
    "label": "RegisterScheduler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RegisterScheduler()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Registry .)",
    "insertText": "Remove(this)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} RegisterScheduler*)",
    "insertText": "getNext()"
  },
  {
    "label": "getList()",
    "kind": "Method",
    "detail": "Function (} RegisterScheduler*)",
    "insertText": "getList()"
  },
  {
    "label": "getDefault()",
    "kind": "Method",
    "detail": "Function (} FunctionPassCtor)",
    "insertText": "getDefault()"
  },
  {
    "label": "setDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDefault(FunctionPassCtor C)"
  },
  {
    "label": "setDefault()",
    "kind": "Method",
    "detail": "Function (Registry .)",
    "insertText": "setDefault((MachinePassCtor)C)"
  },
  {
    "label": "setListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setListener(MachinePassRegistryListener *L)"
  },
  {
    "label": "setListener()",
    "kind": "Method",
    "detail": "Function (Registry .)",
    "insertText": "setListener(L)"
  },
  {
    "label": "createBURRListDAGScheduler()",
    "kind": "Method",
    "detail": "Function (} } ; ScheduleDAGSDNodes*)",
    "insertText": "createBURRListDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "createSourceListDAGScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createSourceListDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "createHybridListDAGScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createHybridListDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level)"
  },
  {
    "label": "createILPListDAGScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createILPListDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level)"
  },
  {
    "label": "createFastDAGScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createFastDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "createVLIWDAGScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createVLIWDAGScheduler(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "createDefaultScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createDefaultScheduler(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  },
  {
    "label": "createDAGLinearizer()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGSDNodes*)",
    "insertText": "createDAGLinearizer(SelectionDAGISel *IS, CodeGenOpt::Level OptLevel)"
  }
]