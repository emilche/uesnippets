[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_IterOps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_IterOps"
  },
  {
    "label": "_RangeAlgPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_RangeAlgPolicy"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_ClassicAlgPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ClassicAlgPolicy"
  },
  {
    "label": "_Distance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Distance"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_ITERATOR_OPERATIONS_H # define _LIBCPP___ALGORITHM_ITERATOR_OPERATIONS_H # include<__algorithm / iter_swap . h> # include<__algorithm / ranges_iterator_concept . h> # include<__config> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__iterator / prev . h> # include<__iterator / readable_traits . h> # include<__utility / declval . h> # include<__utility / forward . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7&& !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct _IterOps<_RangeAlgPolicy> { template<class _Iter> using __value_type = iter_value_t<_Iter> ; template<class _Iter> using __iterator_category = ranges::__iterator_concept<_Iter> ; template<class _Iter> using __difference_type = iter_difference_t<_Iter> ; auto advance = ranges::advance ; auto distance = ranges::distance ; auto __iter_move = ranges::iter_move ; auto iter_swap = ranges::iter_swap ; auto next = ranges::next ; auto prev = ranges::prev ; auto __advance_to = ranges::advance ; } ; # endif struct _ClassicAlgPolicy { } ; template<> struct _IterOps<_ClassicAlgPolicy> { template<class _Iter> using __value_type = iterator_traits<_Iter>::value_type ; template<class _Iter> using __iterator_category = iterator_traits<_Iter>::iterator_category ; template<class _Iter> using __difference_type = iterator_traits<_Iter>::difference_type ; template<class _Iter,class _Distance> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "advance(_Iter& __iter, _Distance __count)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__iter, __count)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 iterator_traits<_Iter>::difference_type)",
    "insertText": "distance(_Iter __first, _Iter __last)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> using __deref_t =)",
    "insertText": "decltype(*std::declval<_Iter&>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _Iter> using __move_t =)",
    "insertText": "decltype(std::move(*std::declval<_Iter&>()))"
  },
  {
    "label": "__validate_iter_reference()",
    "kind": "Method",
    "detail": "Function (template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "__validate_iter_reference()"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __enable_if_t<is_reference<__deref_t<_Iter>>::value,__move_t<_Iter>>)",
    "insertText": "__iter_move(_Iter&& __i)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (__validate_iter_reference<)",
    "insertText": "_Iter()"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "iter_swap(_Iter1&& __a, _Iter2&& __b)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(std::forward<_Iter1>(__a), std::forward<_Iter2>(__b))"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} template<class _Iterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _Iterator)",
    "insertText": "next(_Iterator, _Iterator __last)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __uncvref_t<_Iter>)",
    "insertText": "prev(_Iter&& __iter, typename iterator_traits<__uncvref_t<_Iter> >::difference_type __n = 1)"
  },
  {
    "label": "__advance_to()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "__advance_to(_Iter& __first, _Iter __last)"
  }
]