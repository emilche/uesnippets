[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "IDraggableTrackAreaExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDraggableTrackAreaExtension"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "FTrackModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackModel"
  },
  {
    "label": "FVirtualTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTrackArea"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEditToolDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditToolDragOperation"
  },
  {
    "label": "FResizeSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResizeSection"
  },
  {
    "label": "FPreDragChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreDragChannelData"
  },
  {
    "label": "FPreDragSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreDragSectionData"
  },
  {
    "label": "FMoveKeysAndSections",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoveKeysAndSections"
  },
  {
    "label": "FInitialRowIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialRowIndex"
  },
  {
    "label": "FDuplicateKeysAndSections",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDuplicateKeysAndSections"
  },
  {
    "label": "FManipulateSectionEasing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManipulateSectionEasing"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Curves / KeyHandle . h \" # include \" SequencerSelectedKey . h \" # include \" ISequencerEditTool . h \" # include \" SequencerHotspots . h \" # include \" ScopedTransaction . h \" # include \" Tools / SequencerSnapField . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" MVVM / Extensions / IDraggableTrackAreaExtension . h \" class FSequencer ; class FSlateWindowElementList ; class USequencerSettings ; namespace UE { namespace Sequencer { class IDraggableTrackAreaExtension ; class FSectionModel ; class FTrackModel ; class FVirtualTrackArea ; } } enum class ESequencerMoveOperationType { MoveKeys = 1<<0,MoveSections = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESequencerMoveOperationType)"
  },
  {
    "label": "FEditToolDragOperation()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FEditToolDragOperation(FSequencer& InSequencer)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (public : FCursorReply)",
    "insertText": "GetCursor()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginTransaction(TSet<UMovieSceneSection*>& Sections, const FText& TransactionDesc)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "GetSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSections(TArray<UMovieSceneSection*>& OutSections)"
  },
  {
    "label": "GetSectionBoundaries()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetSectionBoundaries(const UMovieSceneSection* Section)"
  },
  {
    "label": "FResizeSection()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<FScopedTransaction> Transaction ; const USequencerSettings* Settings ; FSequencer& Sequencer ; } ; class FResizeSection : public FEditToolDragOperation { public :)",
    "insertText": "FResizeSection(FSequencer& InSequencer, bool bInDraggingByEnd, bool bIsSlipping)"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnBeginDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const UE::Sequencer::FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const UE::Sequencer::FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(const FPointerEvent& MouseEvent, FVector2D LocalMousePos, const UE::Sequencer::FVirtualTrackArea& VirtualTrackArea)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (OutSections = Sections .)",
    "insertText": "Array()"
  },
  {
    "label": "FMoveKeysAndSections()",
    "kind": "Method",
    "detail": "Function (} } ; class FMoveKeysAndSections : public FEditToolDragOperation,public UE::Sequencer::IDragOperation { public :)",
    "insertText": "FMoveKeysAndSections(FSequencer& InSequencer, ESequencerMoveOperationType InMoveType)"
  },
  {
    "label": "AddSnapTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSnapTime(FFrameNumber SnapTime)"
  },
  {
    "label": "AddModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModel(TSharedPtr<UE::Sequencer::FViewModel> Model)"
  },
  {
    "label": "GetMovementDeltaX()",
    "kind": "Method",
    "detail": "Function (protected : TOptional<FFrameNumber>)",
    "insertText": "GetMovementDeltaX(FFrameTime MouseTime)"
  },
  {
    "label": "HandleSectionMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSectionMovement(FFrameTime MouseTime, FVector2D VirtualMousePos, FVector2D LocalMousePos, TOptional<FFrameNumber> MaxDeltaX, FFrameNumber DesiredDeltaX)"
  },
  {
    "label": "HandleKeyMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyMovement(TOptional<FFrameNumber> MaxDeltaX, FFrameNumber DesiredDeltaX)"
  },
  {
    "label": "HandleMarkedFrameMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMarkedFrameMovement(TOptional<FFrameNumber> MaxDeltaX, FFrameNumber DesiredDeltaX)"
  },
  {
    "label": "OnSequencerNodeTreeUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequencerNodeTreeUpdated()"
  },
  {
    "label": "ModifyNonSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyNonSelectedSections()"
  },
  {
    "label": "FDuplicateKeysAndSections()",
    "kind": "Method",
    "detail": "Function (} } ; class FDuplicateKeysAndSections : public FMoveKeysAndSections { public :)",
    "insertText": "FDuplicateKeysAndSections(FSequencer& InSequencer, ESequencerMoveOperationType Type) : FMoveKeysAndSections(InSequencer, Type)"
  },
  {
    "label": "FManipulateSectionEasing()",
    "kind": "Method",
    "detail": "Function (} ; class FManipulateSectionEasing : public FEditToolDragOperation { public :)",
    "insertText": "FManipulateSectionEasing(FSequencer& InSequencer, TWeakObjectPtr<UMovieSceneSection> InSection, bool bEaseIn)"
  }
]