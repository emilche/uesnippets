[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialCachedExpressionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCachedExpressionData"
  },
  {
    "label": "FMaterialLayersFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctions"
  },
  {
    "label": "FEmitShaderExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitShaderExpression"
  },
  {
    "label": "FExternalInputDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalInputDescription"
  },
  {
    "label": "FExpressionExternalInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionExternalInput"
  },
  {
    "label": "FExpressionShadingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionShadingModel"
  },
  {
    "label": "FExpressionParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionParameter"
  },
  {
    "label": "FExpressionCollectionParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionCollectionParameter"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "FExpressionDynamicParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDynamicParameter"
  },
  {
    "label": "FExpressionSkyLightEnvMapSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyLightEnvMapSample"
  },
  {
    "label": "FExpressionSpeedTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSpeedTree"
  },
  {
    "label": "FExpressionDecalMipmapLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDecalMipmapLevel"
  },
  {
    "label": "FExpressionDBufferTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDBufferTexture"
  },
  {
    "label": "FPathTracingBufferTextureFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathTracingBufferTextureFunction"
  },
  {
    "label": "FExpressionSphericalParticleOpacityFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSphericalParticleOpacityFunction"
  },
  {
    "label": "FExpressionSobolFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSobolFunction"
  },
  {
    "label": "FExpressionCustomPrimitiveDataFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionCustomPrimitiveDataFunction"
  },
  {
    "label": "FExpressionAOMaskFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionAOMaskFunction"
  },
  {
    "label": "FExpressionDepthOfFieldFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDepthOfFieldFunction"
  },
  {
    "label": "FExpressionPostVolumeUserFlagTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionPostVolumeUserFlagTest"
  },
  {
    "label": "DataDrivenShaderPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataDrivenShaderPlatformData"
  },
  {
    "label": "FExpressionDataDrivenShaderPlatformInfoSwitch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDataDrivenShaderPlatformInfoSwitch"
  },
  {
    "label": "FExpressionFinalShadingModelSwitch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionFinalShadingModelSwitch"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FExpressionNaniteReplaceFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionNaniteReplaceFunction"
  },
  {
    "label": "FExpressionAtmosphericFogColorFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionAtmosphericFogColorFunction"
  },
  {
    "label": "FExpressionTextureObjectFromCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionTextureObjectFromCollection"
  },
  {
    "label": "FExpressionAntiAliasedTextureMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionAntiAliasedTextureMask"
  },
  {
    "label": "FExpressionStaticTerrainLayerWeight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionStaticTerrainLayerWeight"
  },
  {
    "label": "FExpressionTextureProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionTextureProperty"
  },
  {
    "label": "FExpressionRuntimeVirtualTextureUniform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionRuntimeVirtualTextureUniform"
  },
  {
    "label": "FExpressionRuntimeVirtualTextureOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionRuntimeVirtualTextureOutput"
  },
  {
    "label": "FExpressionVirtualTextureUnpack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionVirtualTextureUnpack"
  },
  {
    "label": "FExpressionFunctionCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionFunctionCall"
  },
  {
    "label": "FExpressionMaterialLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionMaterialLayers"
  },
  {
    "label": "FExpressionSceneTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSceneTexture"
  },
  {
    "label": "FExpressionUserSceneTextureSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionUserSceneTextureSize"
  },
  {
    "label": "FExpressionScreenAlignedUV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionScreenAlignedUV"
  },
  {
    "label": "FExpressionSceneDepth",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSceneDepth"
  },
  {
    "label": "FExpressionSceneDepthWithoutWater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSceneDepthWithoutWater"
  },
  {
    "label": "FExpressionSceneColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSceneColor"
  },
  {
    "label": "FNoiseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNoiseParameters"
  },
  {
    "label": "FExpressionNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionNoise"
  },
  {
    "label": "FVectorNoiseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorNoiseParameters"
  },
  {
    "label": "FExpressionVectorNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionVectorNoise"
  },
  {
    "label": "FExpressionVertexInterpolator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionVertexInterpolator"
  },
  {
    "label": "FExpressionSkyAtmosphereLightDirection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyAtmosphereLightDirection"
  },
  {
    "label": "FExpressionSkyAtmosphereLightDiskLuminance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyAtmosphereLightDiskLuminance"
  },
  {
    "label": "FExpressionSkyAtmosphereAerialPerspective",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyAtmosphereAerialPerspective"
  },
  {
    "label": "FExpressionSkyAtmosphereLightIlluminance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyAtmosphereLightIlluminance"
  },
  {
    "label": "FExpressionSkyAtmosphereLightIlluminanceOnGround",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSkyAtmosphereLightIlluminanceOnGround"
  },
  {
    "label": "FExpressionDistanceToNearestSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDistanceToNearestSurface"
  },
  {
    "label": "FExpressionDistanceFieldGradient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDistanceFieldGradient"
  },
  {
    "label": "FExpressionPerInstanceCustomData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionPerInstanceCustomData"
  },
  {
    "label": "FExpressionSamplePhysicsField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionSamplePhysicsField"
  },
  {
    "label": "FExpressionDistanceFieldApproxAO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDistanceFieldApproxAO"
  },
  {
    "label": "FExpressionHairColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionHairColor"
  },
  {
    "label": "FExpressionNeuralNetworkOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionNeuralNetworkOutput"
  },
  {
    "label": "FExpressionLightVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionLightVector"
  },
  {
    "label": "FExpressionBlackBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionBlackBody"
  },
  {
    "label": "FExpressionDefaultShadingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDefaultShadingModel"
  },
  {
    "label": "FExpressionDefaultSubsurfaceColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionDefaultSubsurfaceColor"
  },
  {
    "label": "FExpressionPeriodicWorldOrigin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionPeriodicWorldOrigin"
  },
  {
    "label": "FVertexInterpolator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexInterpolator"
  },
  {
    "label": "FVTStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVTStackEntry"
  },
  {
    "label": "FEmitData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitData"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" HLSLTree / HLSLTreeCommon . h \" # include \" MaterialTypes . h \" # include \" Materials / MaterialLayersFunctions . h \" # include \" RHIDefinitions . h \" # include \" Engine / Texture . h \" # include \" VT / RuntimeVirtualTextureEnum . h \" # include \" Field / FieldSystemTypes . h \" # include \" MaterialCompiler . h \" # include \" ParameterCollection . h \" class UTexture ; enum class EMaterialParameterType : uint8 ; enum class ETextureCollectionMemberType : uint8 ; struct FMaterialCachedExpressionData ; struct FMaterialLayersFunctions ; namespace UE::HLSLTree { class FEmitShaderExpression ; void)",
    "insertText": "AppendHash(FHasher& Hasher, const FMaterialParameterInfo& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Name)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Index)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Value.Association)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendHash(FHasher& Hasher, const FMaterialParameterValue& Value)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::Vector :)",
    "insertText": "AppendHash(Hasher, Value.Float)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::DoubleVector :)",
    "insertText": "AppendHash(Hasher, Value.Double)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::Texture :)",
    "insertText": "AppendHash(Hasher, Value.Texture)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::TextureCollection :)",
    "insertText": "AppendHash(Hasher, Value.TextureCollection)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::Font :)",
    "insertText": "AppendHash(Hasher, Value.Font)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::RuntimeVirtualTexture :)",
    "insertText": "AppendHash(Hasher, Value.RuntimeVirtualTexture)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::SparseVolumeTexture :)",
    "insertText": "AppendHash(Hasher, Value.SparseVolumeTexture)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::StaticSwitch :)",
    "insertText": "AppendHash(Hasher, Value.Bool[0])"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; case EMaterialParameterType::StaticComponentMask :)",
    "insertText": "AppendHash(Hasher, Value.Bool)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (break ; } } void)",
    "insertText": "AppendHash(FHasher& Hasher, const FMaterialParameterMetadata& Meta)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(Hasher, Meta.Value)"
  },
  {
    "label": "FExternalInputDescription()",
    "kind": "Method",
    "detail": "Function (} } namespace UE::HLSLTree::Material { enum class EExternalInput : uint8 { None,TexCoord0,TexCoord1,TexCoord2,TexCoord3,TexCoord4,TexCoord5,TexCoord6,TexCoord7,TexCoord0_Ddx,TexCoord1_Ddx,TexCoord2_Ddx,TexCoord3_Ddx,TexCoord4_Ddx,TexCoord5_Ddx,TexCoord6_Ddx,TexCoord7_Ddx,TexCoord0_Ddy,TexCoord1_Ddy,TexCoord2_Ddy,TexCoord3_Ddy,TexCoord4_Ddy,TexCoord5_Ddy,TexCoord6_Ddy,TexCoord7_Ddy,LightmapTexCoord,LightmapTexCoord_Ddx,LightmapTexCoord_Ddy,TwoSidedSign,VertexColor,VertexColor_Ddx,VertexColor_Ddy,PositionInstanceSpace,PositionInstanceSpace_NoOffsets,PositionPrimitiveSpace,PositionPrimitiveSpace_NoOffsets,PrevPositionInstanceSpace,PrevPositionInstanceSpace_NoOffsets,PrevPositionPrimitiveSpace,PrevPositionPrimitiveSpace_NoOffsets,WorldPosition,WorldPosition_NoOffsets,TranslatedWorldPosition,TranslatedWorldPosition_NoOffsets,ActorWorldPosition,PrevWorldPosition,PrevWorldPosition_NoOffsets,PrevTranslatedWorldPosition,PrevTranslatedWorldPosition_NoOffsets,WorldPosition_Ddx,WorldPosition_Ddy,WorldVertexNormal,WorldVertexTangent,WorldNormal,WorldReflection,PreSkinnedPosition,PreSkinnedNormal,PreSkinnedLocalBoundsMin,PreSkinnedLocalBoundsMax,ViewportUV,PixelPosition,ViewSize,RcpViewSize,FieldOfView,TanHalfFieldOfView,CotanHalfFieldOfView,TemporalSampleCount,TemporalSampleIndex,TemporalSampleOffset,PreExposure,RcpPreExposure,EyeAdaptation,RuntimeVirtualTextureOutputLevel,RuntimeVirtualTextureOutputDerivative,RuntimeVirtualTextureMaxLevel,ResolutionFraction,RcpResolutionFraction,PostVolumeUserFlags,CameraVector,LightVector,CameraWorldPosition,ViewWorldPosition,PreViewTranslation,TangentToWorld,LocalToWorld,WorldToLocal,TranslatedWorldToCameraView,TranslatedWorldToView,CameraViewToTranslatedWorld,ViewToTranslatedWorld,WorldToParticle,WorldToInstance,ParticleToWorld,InstanceToWorld,PrevFieldOfView,PrevTanHalfFieldOfView,PrevCotanHalfFieldOfView,PrevCameraWorldPosition,PrevViewWorldPosition,PrevPreViewTranslation,PrevLocalToWorld,PrevWorldToLocal,PrevTranslatedWorldToCameraView,PrevTranslatedWorldToView,PrevCameraViewToTranslatedWorld,PrevViewToTranslatedWorld,PixelDepth,PixelDepth_Ddx,PixelDepth_Ddy,GameTime,RealTime,DeltaTime,PrevGameTime,PrevRealTime,ParticleColor,ParticleTranslatedWorldPosition,ParticleRadius,ParticleDirection,ParticleSpeed,ParticleRelativeTime,ParticleRandom,ParticleSize,ParticleSubUVCoords0,ParticleSubUVCoords1,ParticleSubUVLerp,ParticleMotionBlurFade,PerInstanceFadeAmount,PerInstanceRandom,SkyAtmosphereViewLuminance,SkyAtmosphereDistantLightScatteredLuminance,DistanceCullFade,IsOrthographic,AOMask,Num,} ; int32 MaxNumTexCoords = 8 ; struct FExternalInputDescription {)",
    "insertText": "FExternalInputDescription(const TCHAR* InName, Shader::EValueType InType, EExternalInput InDdx = EExternalInput::None, EExternalInput InDdy = EExternalInput::None, EExternalInput InPreviousFrame = EExternalInput::None) : Name(InName), Type(InType), Ddx(InDdx), Ddy(InDdy), PreviousFrame(InPreviousFrame)"
  },
  {
    "label": "GetExternalInputDescription()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* Name ; Shader::EValueType Type ; EExternalInput Ddx ; EExternalInput Ddy ; EExternalInput PreviousFrame ; } ; FExternalInputDescription)",
    "insertText": "GetExternalInputDescription(EExternalInput Input)"
  },
  {
    "label": "IsTexCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTexCoord(EExternalInput Type)"
  },
  {
    "label": "IsTexCoord_Ddx()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTexCoord_Ddx(EExternalInput Type)"
  },
  {
    "label": "IsTexCoord_Ddy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTexCoord_Ddy(EExternalInput Type)"
  },
  {
    "label": "MakeInputTexCoord()",
    "kind": "Method",
    "detail": "Function (} EExternalInput)",
    "insertText": "MakeInputTexCoord(int32 Index)"
  },
  {
    "label": "FExpressionExternalInput()",
    "kind": "Method",
    "detail": "Function (} class FExpressionExternalInput : public FExpression { public :)",
    "insertText": "FExpressionExternalInput(EExternalInput InInputType) : InputType(InInputType)"
  },
  {
    "label": "ComputeAnalyticDerivatives()",
    "kind": "Method",
    "detail": "Function (} EExternalInput InputType ; void)",
    "insertText": "ComputeAnalyticDerivatives(FTree& Tree, FExpressionDerivatives& OutResult)"
  },
  {
    "label": "ComputePreviousFrame()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "ComputePreviousFrame(FTree& Tree, const FRequestedType& RequestedType)"
  },
  {
    "label": "PrepareValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareValue(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FPrepareValueResult& OutResult)"
  },
  {
    "label": "EmitValueShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueShader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValueShaderResult& OutResult)"
  },
  {
    "label": "GetResolvedInputType()",
    "kind": "Method",
    "detail": "Function (private : EExternalInput)",
    "insertText": "GetResolvedInputType(EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "FExpressionShadingModel()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionShadingModel : public FExpression { public :)",
    "insertText": "FExpressionShadingModel(EMaterialShadingModel InShadingModel) : ShadingModel(InShadingModel)"
  },
  {
    "label": "EmitValuePreshader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValuePreshader(FEmitContext& Context, FEmitScope& Scope, const FRequestedType& RequestedType, FEmitValuePreshaderResult& OutResult)"
  },
  {
    "label": "FExpressionParameter()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionParameter : public FExpression { public :)",
    "insertText": "FExpressionParameter(const FMaterialParameterInfo& InParameterInfo, const FMaterialParameterMetadata& InParameterMeta, EMaterialSamplerType InSamplerType = SAMPLERTYPE_Color, const FGuid& InExternalTextureGuid = FGuid()) : ParameterInfo(InParameterInfo), ParameterMeta(InParameterMeta), ExternalTextureGuid(InExternalTextureGuid), TextureSamplerType(InSamplerType)"
  },
  {
    "label": "GetPreviewExpression()",
    "kind": "Method",
    "detail": "Function (const FExpression*)",
    "insertText": "GetPreviewExpression(FTree& Tree)"
  },
  {
    "label": "EmitValueObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitValueObject(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, void* OutObjectBase)"
  },
  {
    "label": "EmitCustomHLSLParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitCustomHLSLParameter(FEmitContext& Context, FEmitScope& Scope, const FName& ObjectTypeName, const TCHAR* ParameterName, FEmitCustomHLSLParameterResult& OutResult)"
  },
  {
    "label": "FExpressionCollectionParameter()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionCollectionParameter : public FExpression { public : const class UMaterialParameterCollection* ParameterCollection ; int32 ParameterIndex ;)",
    "insertText": "FExpressionCollectionParameter(const class UMaterialParameterCollection* InParameterCollection, int32 InParameterIndex) : ParameterCollection(InParameterCollection) , ParameterIndex(InParameterIndex)"
  },
  {
    "label": "FExpressionDynamicParameter()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDynamicParameter : public FExpression { public : const FExpression* DefaultValueExpression ; int32 ParameterIndex ;)",
    "insertText": "FExpressionDynamicParameter(const FExpression* InDefaultValueExpression, int32 InParameterIndex) : DefaultValueExpression(InDefaultValueExpression) , ParameterIndex(InParameterIndex)"
  },
  {
    "label": "FExpressionSkyLightEnvMapSample()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyLightEnvMapSample : public FExpression { public : const FExpression* DirectionExpression ; const FExpression* RoughnessExpression ;)",
    "insertText": "FExpressionSkyLightEnvMapSample(const FExpression* InDirectionExpression, const FExpression* InRoughnessExpression) : DirectionExpression(InDirectionExpression) , RoughnessExpression(InRoughnessExpression)"
  },
  {
    "label": "FExpressionSpeedTree()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSpeedTree : public FExpression { public : const FExpression* GeometryExpression ; const FExpression* WindExpression ; const FExpression* LODExpression ; const FExpression* ExtraBendExpression ; const float BillboardThreshold ; const bool bExtraBend ; const bool bAccurateWind ; const bool bPreviousFrame ;)",
    "insertText": "FExpressionSpeedTree(const FExpression* InGeometryExpression, const FExpression* InWindExpression, const FExpression* InLODExpression, const FExpression* InExtraBendExpression, bool bInExtraBend, bool bInAccurateWind, float InBillboardThreshold, bool bInPreviousFrame) : GeometryExpression(InGeometryExpression) , WindExpression(InWindExpression) , LODExpression(InLODExpression) , ExtraBendExpression(InExtraBendExpression) , BillboardThreshold(InBillboardThreshold) , bExtraBend(bInExtraBend) , bAccurateWind(bInAccurateWind) , bPreviousFrame(bInPreviousFrame)"
  },
  {
    "label": "FExpressionDecalMipmapLevel()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDecalMipmapLevel : public FExpression { public : const FExpression* TextureSizeExpression ;)",
    "insertText": "FExpressionDecalMipmapLevel(const FExpression* InTextureSizeExpression) : TextureSizeExpression(InTextureSizeExpression)"
  },
  {
    "label": "FExpressionDBufferTexture()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDBufferTexture : public FExpression { public : const FExpression* UVExpression ; const uint8 DBufferTextureID ;)",
    "insertText": "FExpressionDBufferTexture(const FExpression* InUVExpression, uint8 InDBufferTextureID) : UVExpression(InUVExpression) , DBufferTextureID(InDBufferTextureID)"
  },
  {
    "label": "FPathTracingBufferTextureFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FPathTracingBufferTextureFunction : public FExpression { public : const FExpression* UVExpression ; const uint8 PathTracingBufferTextureID ;)",
    "insertText": "FPathTracingBufferTextureFunction(const FExpression* InUVExpression, uint8 InPathTracingBufferTextureID) : UVExpression(InUVExpression) , PathTracingBufferTextureID(InPathTracingBufferTextureID)"
  },
  {
    "label": "FExpressionSphericalParticleOpacityFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSphericalParticleOpacityFunction : public FExpression { public : const FExpression* DensityExpression ;)",
    "insertText": "FExpressionSphericalParticleOpacityFunction(const FExpression* InDensityExpression) : DensityExpression(InDensityExpression)"
  },
  {
    "label": "FExpressionSobolFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSobolFunction : public FExpression { public : const FExpression* CellExpression ; const FExpression* IndexExpression ; const FExpression* SeedExpression ; bool bTemporal ;)",
    "insertText": "FExpressionSobolFunction(const FExpression* InCellExpression, const FExpression* InIndexExpression, const FExpression* InSeedExpression, bool bInTemporal) : CellExpression(InCellExpression) , IndexExpression(InIndexExpression) , SeedExpression(InSeedExpression) , bTemporal(bInTemporal)"
  },
  {
    "label": "FExpressionCustomPrimitiveDataFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionCustomPrimitiveDataFunction : public FExpression { public : const uint8 Index ;)",
    "insertText": "FExpressionCustomPrimitiveDataFunction(uint8 InIndex) : Index(InIndex)"
  },
  {
    "label": "FExpressionAOMaskFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionAOMaskFunction : public FExpressionForward { public :)",
    "insertText": "FExpressionAOMaskFunction(const FExpression* InExpression) : FExpressionForward(InExpression)"
  },
  {
    "label": "FExpressionDepthOfFieldFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDepthOfFieldFunction : public FExpression { public : const FExpression* DepthExpression ; int FunctionValue ;)",
    "insertText": "FExpressionDepthOfFieldFunction(const FExpression* InDepthExpression, int InFunctionValue) : DepthExpression(InDepthExpression) , FunctionValue(InFunctionValue)"
  },
  {
    "label": "FExpressionPostVolumeUserFlagTest()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionPostVolumeUserFlagTest : public FExpression { public : const FExpression* InputExpression ;)",
    "insertText": "FExpressionPostVolumeUserFlagTest(const FExpression* InInputExpression) : InputExpression(InInputExpression)"
  },
  {
    "label": "FExpressionDataDrivenShaderPlatformInfoSwitch()",
    "kind": "Method",
    "detail": "Function (} ; struct DataDrivenShaderPlatformData { FName PlatformName ; int32 Condition ; } ; class FExpressionDataDrivenShaderPlatformInfoSwitch : public FExpression { public : const FExpression* TrueExpression ; const FExpression* FalseExpression ; TArray<DataDrivenShaderPlatformData> DataTable ;)",
    "insertText": "FExpressionDataDrivenShaderPlatformInfoSwitch(const FExpression* InTrueExpression, const FExpression* InFalseExpression, TArray<DataDrivenShaderPlatformData>& InDataTable) : TrueExpression(InTrueExpression) , FalseExpression(InFalseExpression) , DataTable(InDataTable)"
  },
  {
    "label": "CheckDataTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckDataTable(FEmitContext& Context, bool& bFalse, bool& bTrue)"
  },
  {
    "label": "FExpressionFinalShadingModelSwitch()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionFinalShadingModelSwitch : public FExpressionSwitchBase { public :)",
    "insertText": "FExpressionFinalShadingModelSwitch(TConstArrayView<const FExpression*> InInputs) : FExpressionSwitchBase(InInputs)"
  },
  {
    "label": "NewSwitch()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSwitch(FTree& Tree, TConstArrayView<const FExpression*> InInputs)"
  },
  {
    "label": "IsInputActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInputActive(const FEmitContext& Context, int32 Index)"
  },
  {
    "label": "FExpressionLandscapeLayerSwitch()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionLandscapeLayerSwitch : public FExpressionSwitchBase { public : FName ParameterName ; bool bPreviewUsed ;)",
    "insertText": "FExpressionLandscapeLayerSwitch(TConstArrayView<const FExpression*> InInputs, FName InParameterName, bool bInPreviewUsed) : FExpressionSwitchBase(InInputs) , ParameterName(InParameterName) , bPreviewUsed(bInPreviewUsed)"
  },
  {
    "label": "NewSwitch()",
    "kind": "Method",
    "detail": "Function (} const FExpression*)",
    "insertText": "NewSwitch(UE::HLSLTree::FTree& Tree, TConstArrayView<const FExpression*> InInputs)"
  },
  {
    "label": "FExpressionNaniteReplaceFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionNaniteReplaceFunction : public FExpression { public : const FExpression* DefaultExpression ; const FExpression* NaniteExpression ;)",
    "insertText": "FExpressionNaniteReplaceFunction(const FExpression* InDefaultExpression, const FExpression* InNaniteExpression) : DefaultExpression(InDefaultExpression) , NaniteExpression(InNaniteExpression)"
  },
  {
    "label": "FExpressionAtmosphericFogColorFunction()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionAtmosphericFogColorFunction : public FExpression { public : const FExpression* PositionExpression ;)",
    "insertText": "FExpressionAtmosphericFogColorFunction(const FExpression* InPositionExpression) : PositionExpression(InPositionExpression)"
  },
  {
    "label": "FExpressionTextureSample()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionTextureSample : public FExpression { public :)",
    "insertText": "FExpressionTextureSample(const FExpression* InTextureExpression, const FExpression* InTexCoordExpression, const FExpression* InMipValueExpression, const FExpression* InAutomaticMipBiasExpression, const FExpressionDerivatives& InTexCoordDerivatives, ESamplerSourceMode InSamplerSource, ETextureMipValueMode InMipValueMode, int16 InTextureLayerIndex = INDEX_NONE, int16 InPageTableLayerIndex = INDEX_NONE, bool bInAdaptive = false, bool bInEnableFeedback = true) : TextureExpression(InTextureExpression) , TexCoordExpression(InTexCoordExpression) , MipValueExpression(InMipValueExpression) , AutomaticMipBiasExpression(InAutomaticMipBiasExpression) , TexCoordDerivatives(InTexCoordDerivatives) , SamplerSource(InSamplerSource) , MipValueMode(InMipValueMode) , TextureLayerIndex(InTextureLayerIndex) , PageTableLayerIndex(InPageTableLayerIndex) , bAdaptive(bInAdaptive) , bEnableFeedback(bInEnableFeedback)"
  },
  {
    "label": "FExpressionTextureObjectFromCollection()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionTextureObjectFromCollection : public FExpression { public :)",
    "insertText": "FExpressionTextureObjectFromCollection(const FExpression* InTextureCollectionExpression, const FExpression* InCollectionIndexExpression, ETextureCollectionMemberType InTextureType) : TextureCollectionExpression(InTextureCollectionExpression) , CollectionIndexExpression(InCollectionIndexExpression) , TextureType(InTextureType)"
  },
  {
    "label": "FExpressionAntiAliasedTextureMask()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionAntiAliasedTextureMask : public FExpression { public : const FExpression* TextureExpression ; const FExpression* TexCoordExpression ; float Threshold ; uint8 Channel ;)",
    "insertText": "FExpressionAntiAliasedTextureMask(const FExpression* InTextureExpression, const FExpression* InTexCoordExpression, float InThreshold, uint8 InChannel) : TextureExpression(InTextureExpression) , TexCoordExpression(InTexCoordExpression) , Threshold(InThreshold) , Channel(InChannel)"
  },
  {
    "label": "FExpressionStaticTerrainLayerWeight()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionStaticTerrainLayerWeight : public FExpression { public :)",
    "insertText": "FExpressionStaticTerrainLayerWeight(const FMaterialParameterInfo& InBaseParameterInfo, const FExpression* InTexCoordExpression, float InDefaultWeight, bool bInTextureArray) : BaseParameterInfo(InBaseParameterInfo) , TexCoordExpression(InTexCoordExpression) , DefaultWeight(InDefaultWeight) , bTextureArray(bInTextureArray)"
  },
  {
    "label": "UseTextureArraySample()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UseTextureArraySample(const FEmitContext& Context)"
  },
  {
    "label": "BuildWeightmapName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "BuildWeightmapName(const TCHAR* Weightmap, int32 Index, bool bUseIndex)"
  },
  {
    "label": "FExpressionTextureProperty()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionTextureProperty : public FExpression { public :)",
    "insertText": "FExpressionTextureProperty(const FExpression* InTextureExpression, EMaterialExposedTextureProperty InTextureProperty) : TextureExpression(InTextureExpression) , TextureProperty(InTextureProperty)"
  },
  {
    "label": "FExpressionRuntimeVirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionRuntimeVirtualTextureUniform : public FExpression { public :)",
    "insertText": "FExpressionRuntimeVirtualTextureUniform(const FMaterialParameterInfo& InParameterInfo, const FExpression* InTextureExpression, ERuntimeVirtualTextureShaderUniform InUniformType) : ParameterInfo(InParameterInfo) , TextureExpression(InTextureExpression) , UniformType(InUniformType)"
  },
  {
    "label": "FExpressionRuntimeVirtualTextureOutput()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionRuntimeVirtualTextureOutput : public FExpressionForward { public :)",
    "insertText": "FExpressionRuntimeVirtualTextureOutput(uint8 InOutputAttributeMask, const FExpression* OutputExpression) : FExpressionForward(OutputExpression) , OutputAttributeMask(InOutputAttributeMask)"
  },
  {
    "label": "FExpressionVirtualTextureUnpack()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionVirtualTextureUnpack : public FExpression { public :)",
    "insertText": "FExpressionVirtualTextureUnpack(const FExpression* InSampleLayer0Expression, const FExpression* InSampleLayer1Expression, const FExpression* InSampleLayer2Expression, const FExpression* InWorldHeightUnpackUniformExpression, EVirtualTextureUnpackType InUnpackType) : SampleLayer0Expression(InSampleLayer0Expression) , SampleLayer1Expression(InSampleLayer1Expression) , SampleLayer2Expression(InSampleLayer2Expression) , WorldHeightUnpackUniformExpression(InWorldHeightUnpackUniformExpression) , UnpackType(InUnpackType)"
  },
  {
    "label": "FExpressionFunctionCall()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionFunctionCall : public FExpressionForward { public :)",
    "insertText": "FExpressionFunctionCall(const FExpression* InExpression, UMaterialFunctionInterface* InMaterialFunction) : FExpressionForward(InExpression) , MaterialFunction(InMaterialFunction)"
  },
  {
    "label": "FExpressionMaterialLayers()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionMaterialLayers : public FExpressionForward { public :)",
    "insertText": "FExpressionMaterialLayers(const FExpression* InExpression, const FMaterialLayersFunctions& InMaterialLayers) : FExpressionForward(InExpression) , MaterialLayers(InMaterialLayers)"
  },
  {
    "label": "FExpressionSceneTexture()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSceneTexture : public FExpression { public :)",
    "insertText": "FExpressionSceneTexture(const FExpression* InTexCoordExpression, uint32 InSceneTextureId, bool bInFiltered, bool bInClamped = false, FName InUserSceneTexture = NAME_None) : TexCoordExpression(InTexCoordExpression) , SceneTextureId(InSceneTextureId) , bFiltered(bInFiltered) , bClamped(bInClamped) , UserSceneTexture(InUserSceneTexture)"
  },
  {
    "label": "FExpressionUserSceneTextureSize()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionUserSceneTextureSize : public FExpression { public :)",
    "insertText": "FExpressionUserSceneTextureSize(FName InUserSceneTexture, bool bInReciprocal) : UserSceneTexture(InUserSceneTexture) , bReciprocal(bInReciprocal)"
  },
  {
    "label": "FExpressionScreenAlignedUV()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionScreenAlignedUV : public FExpression { public :)",
    "insertText": "FExpressionScreenAlignedUV(const FExpression* InOffsetExpression, const FExpression* InViewportUVExpression) : OffsetExpression(InOffsetExpression) , ViewportUVExpression(InViewportUVExpression)"
  },
  {
    "label": "FExpressionSceneDepth()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSceneDepth : public FExpression { public :)",
    "insertText": "FExpressionSceneDepth(const FExpression* InScreenUVExpression) : ScreenUVExpression(InScreenUVExpression)"
  },
  {
    "label": "FExpressionSceneDepthWithoutWater()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSceneDepthWithoutWater : public FExpression { public :)",
    "insertText": "FExpressionSceneDepthWithoutWater(const FExpression* InScreenUVExpression, float InFallbackDepth) : ScreenUVExpression(InScreenUVExpression) , FallbackDepth(InFallbackDepth)"
  },
  {
    "label": "FExpressionSceneColor()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSceneColor : public FExpression { public :)",
    "insertText": "FExpressionSceneColor(const FExpression* InScreenUVExpression) : ScreenUVExpression(InScreenUVExpression)"
  },
  {
    "label": "FNoiseParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FNoiseParameters {)",
    "insertText": "FNoiseParameters()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "FExpressionNoise()",
    "kind": "Method",
    "detail": "Function (} int32 Quality ; int32 Levels ; float Scale ; uint32 RepeatSize ; float OutputMin ; float OutputMax ; float LevelScale ; uint8 NoiseFunction ; bool bTiling ; bool bTurbulence ; } ; class FExpressionNoise : public FExpression { public :)",
    "insertText": "FExpressionNoise(const FNoiseParameters& InParams, const FExpression* InPositionExpression, const FExpression* InFilterWidthExpression) : PositionExpression(InPositionExpression) , FilterWidthExpression(InFilterWidthExpression) , Parameters(InParams)"
  },
  {
    "label": "FVectorNoiseParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FVectorNoiseParameters {)",
    "insertText": "FVectorNoiseParameters()"
  },
  {
    "label": "FExpressionVectorNoise()",
    "kind": "Method",
    "detail": "Function (} int32 Quality ; uint32 TileSize ; uint8 Function ; bool bTiling ; } ; class FExpressionVectorNoise : public FExpression { public :)",
    "insertText": "FExpressionVectorNoise(const FVectorNoiseParameters& InParams, const FExpression* InPositionExpression) : PositionExpression(InPositionExpression) , Parameters(InParams)"
  },
  {
    "label": "FExpressionVertexInterpolator()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionVertexInterpolator : public FExpression { public :)",
    "insertText": "FExpressionVertexInterpolator(const FExpression* InVertexExpression) : VertexExpression(InVertexExpression)"
  },
  {
    "label": "FExpressionSkyAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyAtmosphereLightDirection : public FExpression { public : int32 LightIndex ;)",
    "insertText": "FExpressionSkyAtmosphereLightDirection(int32 InLightIndex) : LightIndex(InLightIndex)"
  },
  {
    "label": "FExpressionSkyAtmosphereLightDiskLuminance()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyAtmosphereLightDiskLuminance : public FExpression { public : const FExpression* CosHalfDiskRadiusExpression ; int32 LightIndex ;)",
    "insertText": "FExpressionSkyAtmosphereLightDiskLuminance(const FExpression* InCosHalfDiskRaidusExpression, int32 InLightIndex) : CosHalfDiskRadiusExpression(InCosHalfDiskRaidusExpression) , LightIndex(InLightIndex)"
  },
  {
    "label": "FExpressionSkyAtmosphereAerialPerspective()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyAtmosphereAerialPerspective : public FExpression { public : const FExpression* WorldPositionExpression ;)",
    "insertText": "FExpressionSkyAtmosphereAerialPerspective(const FExpression* InWorldPositionExpression) : WorldPositionExpression(InWorldPositionExpression)"
  },
  {
    "label": "FExpressionSkyAtmosphereLightIlluminance()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyAtmosphereLightIlluminance : public FExpression { public : const FExpression* WorldPositionExpression ; int32 LightIndex ;)",
    "insertText": "FExpressionSkyAtmosphereLightIlluminance(const FExpression* InWorldPositionExpression, int32 InLightIndex) : WorldPositionExpression(InWorldPositionExpression) , LightIndex(InLightIndex)"
  },
  {
    "label": "FExpressionSkyAtmosphereLightIlluminanceOnGround()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSkyAtmosphereLightIlluminanceOnGround : public FExpression { public : int32 LightIndex ;)",
    "insertText": "FExpressionSkyAtmosphereLightIlluminanceOnGround(int32 InLightIndex) : LightIndex(InLightIndex)"
  },
  {
    "label": "FExpressionDistanceToNearestSurface()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDistanceToNearestSurface : public FExpression { public : const FExpression* PositionExpression ;)",
    "insertText": "FExpressionDistanceToNearestSurface(const FExpression* InPositionExpression) : PositionExpression(InPositionExpression)"
  },
  {
    "label": "FExpressionDistanceFieldGradient()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDistanceFieldGradient : public FExpression { public : const FExpression* PositionExpression ;)",
    "insertText": "FExpressionDistanceFieldGradient(const FExpression* InPositionExpression) : PositionExpression(InPositionExpression)"
  },
  {
    "label": "FExpressionPerInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionPerInstanceCustomData : public FExpression { public : const FExpression* DefaultValueExpression ; int32 DataIndex ; bool b3Vector ;)",
    "insertText": "FExpressionPerInstanceCustomData(const FExpression* InDefaultValueExpression, int32 InDataIndex, bool bIn3Vector) : DefaultValueExpression(InDefaultValueExpression) , DataIndex(InDataIndex) , b3Vector(bIn3Vector)"
  },
  {
    "label": "GetCustomDataType()",
    "kind": "Method",
    "detail": "Function (private : Shader::EValueType)",
    "insertText": "GetCustomDataType()"
  },
  {
    "label": "FExpressionSamplePhysicsField()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionSamplePhysicsField : public FExpression { public : const FExpression* PositionExpression ; EFieldOutputType FieldOutputType ; int32 TargetIndex ;)",
    "insertText": "FExpressionSamplePhysicsField(const FExpression* InPositionExpression, EFieldOutputType InFieldOutputType, int32 InTargetIndex) : PositionExpression(InPositionExpression) , FieldOutputType(InFieldOutputType) , TargetIndex(InTargetIndex)"
  },
  {
    "label": "GetOutputType()",
    "kind": "Method",
    "detail": "Function (private : Shader::EValueType)",
    "insertText": "GetOutputType()"
  },
  {
    "label": "GetEmitExpressionFormat()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetEmitExpressionFormat()"
  },
  {
    "label": "FExpressionDistanceFieldApproxAO()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDistanceFieldApproxAO : public FExpression { public : const FExpression* PositionExpression ; const FExpression* NormalExpression ; const FExpression* StepDistanceExpression ; const FExpression* DistanceBiasExpression ; const FExpression* MaxDistanceExpression ; int32 NumSteps ; float StepScale ;)",
    "insertText": "FExpressionDistanceFieldApproxAO(const FExpression* InPositionExpression, const FExpression* InNormalExpression, const FExpression* InStepDistanceExpression, const FExpression* InDistanceBiasExpression, const FExpression* InMaxDistanceExpression, int32 InNumSteps, float InStepScale) : PositionExpression(InPositionExpression) , NormalExpression(InNormalExpression) , StepDistanceExpression(InStepDistanceExpression) , DistanceBiasExpression(InDistanceBiasExpression) , MaxDistanceExpression(InMaxDistanceExpression) , NumSteps(InNumSteps) , StepScale(InStepScale)"
  },
  {
    "label": "FExpressionHairColor()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionHairColor : public FExpression { public : const FExpression* MelaninExpression ; const FExpression* RednessExpression ; const FExpression* DyeColorExpression ;)",
    "insertText": "FExpressionHairColor(const FExpression* InMelaninExpression, const FExpression* InRednessExpression, const FExpression* InDyeColorExpression) : MelaninExpression(InMelaninExpression) , RednessExpression(InRednessExpression) , DyeColorExpression(InDyeColorExpression)"
  },
  {
    "label": "FExpressionNeuralNetworkOutput()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionNeuralNetworkOutput : public FExpression { public : const FExpression* CoordinatesExpression ; int32 NeuralIndexType ;)",
    "insertText": "FExpressionNeuralNetworkOutput(const FExpression* InCoordinateExpression, int32 InNeuralIndexType) : CoordinatesExpression(InCoordinateExpression), NeuralIndexType(InNeuralIndexType)"
  },
  {
    "label": "FExpressionLightVector()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionLightVector : public FExpressionForward { public :)",
    "insertText": "FExpressionLightVector(const FExpression* InExpression) : FExpressionForward(InExpression)"
  },
  {
    "label": "FExpressionBlackBody()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionBlackBody : public FExpression { public :)",
    "insertText": "FExpressionBlackBody(const FExpression* InTempExpression) : TempExpression(InTempExpression)"
  },
  {
    "label": "FExpressionDefaultShadingModel()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDefaultShadingModel : public FExpression { public :)",
    "insertText": "FExpressionDefaultShadingModel()"
  },
  {
    "label": "FExpressionDefaultSubsurfaceColor()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionDefaultSubsurfaceColor : public FExpression { public :)",
    "insertText": "FExpressionDefaultSubsurfaceColor()"
  },
  {
    "label": "FExpressionPeriodicWorldOrigin()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionPeriodicWorldOrigin : public FExpression { public :)",
    "insertText": "FExpressionPeriodicWorldOrigin(const FExpression* InScale = nullptr) : Scale(InScale)"
  },
  {
    "label": "FVertexInterpolator()",
    "kind": "Method",
    "detail": "Function (} ; struct FVertexInterpolator {)",
    "insertText": "FVertexInterpolator()"
  },
  {
    "label": "FVertexInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexInterpolator(const FExpression* InExpression) : Expression(InExpression)"
  },
  {
    "label": "FEmitData()",
    "kind": "Method",
    "detail": "Function (} const FExpression* Expression = nullptr ; FRequestedType RequestedType ; FPreparedType PreparedType ; } ; struct FVTStackEntry { FEmitShaderExpression* EmitTexCoordValue ; FEmitShaderExpression* EmitTexCoordValueDdx ; FEmitShaderExpression* EmitTexCoordValueDdy ; FEmitShaderExpression* EmitMipValue ; FEmitShaderExpression* EmitResult ; ETextureMipValueMode MipValueMode ; TextureAddress AddressU ; TextureAddress AddressV ; int32 DebugCoordinateIndex ; int32 DebugMipValue0Index ; int32 DebugMipValue1Index ; int32 PreallocatedStackTextureIndex ; bool bAdaptive ; bool bGenerateFeedback ; float AspectRatio ; } ; class FEmitData { public :)",
    "insertText": "FEmitData()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ExternalInputMask [ Index ] .)",
    "insertText": "Init(false, (int32)EExternalInput::Num)"
  },
  {
    "label": "IsExternalInputUsed()",
    "kind": "Method",
    "detail": "Function (} } Shader::FType VTPageTableResultType ; const FStaticParameterSet* StaticParameters = nullptr ; FMaterialCachedExpressionData* CachedExpressionData = nullptr ; TMap<Shader::FValue,uint32> DefaultUniformValues ; TArray<FVertexInterpolator,TInlineAllocator<8>> VertexInterpolators ; TArray<FVTStackEntry,TInlineAllocator<8>> VTStacks ; TArray<const class UMaterialParameterCollection*,TInlineAllocator<MaxNumParameterCollectionsPerMaterial>> ParameterCollections ; FHashTable VTStackHash ; TBitArray<> ExternalInputMask [ SF_NumFrequencies ] ; FMaterialShadingModelField ShadingModelsFromCompilation ; int32 NumInterpolatorComponents = 0 ; bool)",
    "insertText": "IsExternalInputUsed(EShaderFrequency Frequency, EExternalInput Input)"
  },
  {
    "label": "IsExternalInputUsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExternalInputUsed(EExternalInput Input)"
  },
  {
    "label": "FindInterpolatorIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindInterpolatorIndex(const FExpression* Expression)"
  },
  {
    "label": "AddInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInterpolator(const FExpression* Expression, const FRequestedType& RequestedType, const FPreparedType& PreparedType)"
  },
  {
    "label": "PrepareInterpolators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareInterpolators(FEmitContext& Context, FEmitScope& Scope)"
  },
  {
    "label": "EmitInterpolatorStatements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInterpolatorStatements(FEmitContext& Context, FEmitScope& Scope)"
  },
  {
    "label": "EmitInterpolatorShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInterpolatorShader(FEmitContext& Context, FStringBuilderBase& OutCode)"
  },
  {
    "label": "FindOrAddParameterCollection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddParameterCollection(const class UMaterialParameterCollection* ParameterCollection)"
  },
  {
    "label": "GatherStaticTerrainLayerParamIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherStaticTerrainLayerParamIndices(FName LayerName, TArray<int32>& WeightIndices)"
  }
]