[
  {
    "label": "CleanCollisionParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDRigidClustering . h \" namespace Chaos { TArray<FVec3>)",
    "insertText": "CleanCollisionParticles(const TArray<FVec3>& Vertices, FAABB3 BBox, const FReal SnapDistance=(FReal)0.01)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumPoints = Vertices .)",
    "insertText": "Num()"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (FReal MaxBBoxDim = BBox .)",
    "insertText": "Extents().Max()"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (BBox .)",
    "insertText": "Thicken(FMath::Max(SnapDistance/10, (FReal)(UE_KINDA_SMALL_NUMBER*10)))"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (const FVec3 PointsCenter = BBox .)",
    "insertText": "Center()"
  },
  {
    "label": "Points()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "Points(Vertices)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSet<int64> OccupiedCells ; OccupiedCells .)",
    "insertText": "Reserve(NumPoints)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (int32 NumCoincident = 0 ; const int64 Resolution = static_cast<)",
    "insertText": "int64(floor(MaxBBoxDim / FMath::Max(SnapDistance,(FReal)UE_KINDA_SMALL_NUMBER)))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal CellSize = static_cast<)",
    "insertText": "FReal(static_cast<double>(MaxBBoxDim) / static_cast<double>(Resolution))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Redundant .)",
    "insertText": "Reset()"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 GridCenter =)",
    "insertText": "FVec3(0) - FVec3(static_cast<FReal>(i) * CellSize / 2)"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (const FVec3 Pos = Points [ j ] - PointsCenter ; const TVec3<int64>)",
    "insertText": "Coord(static_cast<int64>(FMath::Floor((Pos[0] - GridCenter[0]) / CellSize + static_cast<double>(Resolution) / 2)), static_cast<int64>(FMath::Floor((Pos[1] - GridCenter[1]) / CellSize + static_cast<double>(Resolution) / 2)), static_cast<int64>(FMath::Floor((Pos[2] - GridCenter[2]) / CellSize + static_cast<double>(Resolution) / 2)))"
  },
  {
    "label": "FlatIdx()",
    "kind": "Method",
    "detail": "Function (const int64)",
    "insertText": "FlatIdx((Coord[0] * Resolution + Coord[1]) * Resolution)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool AlreadyInSet = false ; OccupiedCells .)",
    "insertText": "Add(FlatIdx, &AlreadyInSet)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 j = Redundant.Num(); j--;)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "RemoveAt(Redundant[j])"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } Points .)",
    "insertText": "SetNum(Points.Num(), EAllowShrinking::Yes)"
  },
  {
    "label": "BBox()",
    "kind": "Method",
    "detail": "Function (} FAABB3)",
    "insertText": "BBox(FAABB3::EmptyAABB())"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (BBox .)",
    "insertText": "GrowToInclude(Pt)"
  },
  {
    "label": "CleanCollisionParticles()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CleanCollisionParticles(Vertices, BBox, SnapDistance)"
  },
  {
    "label": "CleanCollisionParticles()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "CleanCollisionParticles(FTriangleMesh &TriMesh, const TArrayView<const FVec3>& Vertices, const FReal Fraction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> CollisionVertices ;)",
    "insertText": "if(Fraction <= 0.0)"
  },
  {
    "label": "GetBoundaryPoints()",
    "kind": "Method",
    "detail": "Function (TSet<int32> BoundaryPoints = TriMesh .)",
    "insertText": "GetBoundaryPoints()"
  },
  {
    "label": "FindCoincidentVertexRemappings()",
    "kind": "Method",
    "detail": "Function (TMap<int32,int32> Remapping = TriMesh .)",
    "insertText": "FindCoincidentVertexRemappings(BoundaryPoints.Array(), Vertices)"
  },
  {
    "label": "RemapVertices()",
    "kind": "Method",
    "detail": "Function (TriMesh .)",
    "insertText": "RemapVertices(Remapping)"
  },
  {
    "label": "GetVertexImportanceOrdering()",
    "kind": "Method",
    "detail": "Function (} TArray<int32> CoincidentVertices ; const TArray<int32> Ordering = TriMesh .)",
    "insertText": "GetVertexImportanceOrdering(Vertices, &CoincidentVertices, true)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumGoodPoints = Ordering .)",
    "insertText": "Num() - CoincidentVertices.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if DO_GUARD_SLOW)",
    "insertText": "for(int i = NumGoodPoints; i < Ordering.Num(); ++i)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} # endif CollisionVertices .)",
    "insertText": "AddUninitialized(FMath::Min(NumGoodPoints, static_cast<int32>(ceil(static_cast<FReal>(NumGoodPoints) * Fraction))))"
  },
  {
    "label": "CleanCollisionParticles()",
    "kind": "Method",
    "detail": "Function (CollisionVertices [ i ] = Vertices [ Ordering [ i ] ] ; } return CollisionVertices ; } void)",
    "insertText": "CleanCollisionParticles(FTriangleMesh &TriMesh, const TArrayView<const FVec3>& Vertices, const FReal Fraction, TSet<int32>& ResultingIndices)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (NumGoodPoints =)",
    "insertText": "Min(NumGoodPoints, static_cast<int32>(ceil(static_cast<FReal>(NumGoodPoints) * Fraction)))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ResultingIndices .)",
    "insertText": "Reserve(NumGoodPoints)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResultingIndices .)",
    "insertText": "Add(Ordering[i])"
  }
]