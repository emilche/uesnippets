[
  {
    "label": "FPackageWriterRecords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageWriterRecords"
  },
  {
    "label": "FPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackage"
  },
  {
    "label": "FWritePackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWritePackage"
  },
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FAdditionalFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalFile"
  },
  {
    "label": "FLinkerAdditionalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkerAdditionalData"
  },
  {
    "label": "FPackageTrailer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTrailer"
  },
  {
    "label": "TPackageWriterToSharedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPackageWriterToSharedBuffer"
  },
  {
    "label": "FPackageWriterToRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageWriterToRecord"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" HAL / CriticalSection . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / UniquePtr . h \" class FPackageWriterRecords { public : struct FPackage ; void)",
    "insertText": "BeginPackage(FPackage* Record, const IPackageWriter::FBeginPackageInfo& Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(const IPackageWriter::FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBulkData(const IPackageWriter::FBulkDataInfo& Info, const FIoBuffer& BulkData, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAdditionalFile(const IPackageWriter::FAdditionalFileInfo& Info, const FIoBuffer& FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLinkerAdditionalData(const IPackageWriter::FLinkerAdditionalDataInfo& Info, const FIoBuffer& Data, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageTrailer(const IPackageWriter::FPackageTrailerInfo& Info, const FIoBuffer& Data)"
  },
  {
    "label": "FPackage()",
    "kind": "Method",
    "detail": "Function (struct FWritePackage { IPackageWriter::FPackageInfo Info ; FSharedBuffer Buffer ; TArray<FFileRegion> Regions ; } ; struct FBulkData { IPackageWriter::FBulkDataInfo Info ; FSharedBuffer Buffer ; TArray<FFileRegion> Regions ; } ; struct FAdditionalFile { IPackageWriter::FAdditionalFileInfo Info ; FSharedBuffer Buffer ; } ; struct FLinkerAdditionalData { IPackageWriter::FLinkerAdditionalDataInfo Info ; FSharedBuffer Buffer ; TArray<FFileRegion> Regions ; } ; struct FPackageTrailer { IPackageWriter::FPackageTrailerInfo Info ; FSharedBuffer Buffer ; } ; struct FPackage { ~)",
    "insertText": "FPackage()"
  },
  {
    "label": "FindRecordChecked()",
    "kind": "Method",
    "detail": "Function (} IPackageWriter::FBeginPackageInfo Begin ; TArray<FWritePackage> Packages ; TArray<FBulkData> BulkDatas ; TArray<FAdditionalFile> AdditionalFiles ; TArray<FLinkerAdditionalData> LinkerAdditionalDatas ; TArray<FPackageTrailer> PackageTrailers ; } ; FPackage&)",
    "insertText": "FindRecordChecked(FName InPackageName)"
  },
  {
    "label": "FindAndRemoveRecordChecked()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FPackage>)",
    "insertText": "FindAndRemoveRecordChecked(FName InPackageName)"
  },
  {
    "label": "ValidateCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCommit(FPackage& Record, const IPackageWriter::FCommitPackageInfo& Info)"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (private : FRWLock MapLock ; TMap<FName,TUniquePtr<FPackage>> Map ; } ; template<BaseInterface> class TPackageWriterToSharedBuffer : public BaseInterface { public : using FWritePackageRecord = FPackageWriterRecords::FWritePackage ; using FBulkDataRecord = FPackageWriterRecords::FBulkData ; using FAdditionalFileRecord = FPackageWriterRecords::FAdditionalFile ; using FLinkerAdditionalDataRecord = FPackageWriterRecords::FLinkerAdditionalData ; using FPackageTrailerRecord = FPackageWriterRecords::FPackageTrailer ; using FPackageRecord = FPackageWriterRecords::FPackage ; void)",
    "insertText": "BeginPackage(const IPackageWriter::FBeginPackageInfo& Info)"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "BeginPackage(ConstructRecord(), Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "WritePackageData(Info, ExportsArchive, FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "WriteBulkData(Info, BulkData, FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "WriteAdditionalFile(Info, FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "WriteLinkerAdditionalData(Info, Data, FileRegions)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "WritePackageTrailer(Info, Data)"
  },
  {
    "label": "CommitPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CommitPackage(IPackageWriter::FCommitPackageInfo&& Info)"
  },
  {
    "label": "FindAndRemoveRecordChecked()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FPackageRecord> Record = Records .)",
    "insertText": "FindAndRemoveRecordChecked(Info.PackageName)"
  },
  {
    "label": "ValidateCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCommit(*Record, Info)"
  },
  {
    "label": "CommitPackageInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackageInternal(MoveTemp(*Record), Info)"
  },
  {
    "label": "CommitPackageInternal()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CommitPackageInternal(FPackageRecord&& Record, const IPackageWriter::FCommitPackageInfo& Info)"
  },
  {
    "label": "ConstructRecord()",
    "kind": "Method",
    "detail": "Function (protected : FPackageWriterRecords::FPackage*)",
    "insertText": "ConstructRecord()"
  },
  {
    "label": "ValidateCommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateCommit(FPackageRecord& Record, const IPackageWriter::FCommitPackageInfo& Info)"
  },
  {
    "label": "ValidateCommit()",
    "kind": "Method",
    "detail": "Function (Records .)",
    "insertText": "ValidateCommit(Record, Info)"
  },
  {
    "label": "CommitPackageInternal()",
    "kind": "Method",
    "detail": "Function (} FPackageWriterRecords Records ; } ; class FPackageWriterToRecord : public TPackageWriterToSharedBuffer<IPackageWriter> { public : FPackageWriterRecords::FPackage SavedRecord ; protected : void)",
    "insertText": "CommitPackageInternal(FPackageWriterRecords::FPackage&& Record, const FCommitPackageInfo& Info)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SavedRecord =)",
    "insertText": "MoveTemp(Record)"
  }
]