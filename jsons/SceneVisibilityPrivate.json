[
  {
    "label": "FInstanceCullingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingManager"
  },
  {
    "label": "FComputeAndMarkRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeAndMarkRelevance"
  },
  {
    "label": "FGPUOcclusion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusion"
  },
  {
    "label": "FGPUOcclusionSerial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionSerial"
  },
  {
    "label": "FGPUOcclusionParallel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionParallel"
  },
  {
    "label": "FGPUOcclusionParallelPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionParallelPacket"
  },
  {
    "label": "FRelevancePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRelevancePacket"
  },
  {
    "label": "FVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskData"
  },
  {
    "label": "FVirtualTextureUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureUpdater"
  },
  {
    "label": "TCommandPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCommandPipe"
  },
  {
    "label": "FPrimitiveRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveRange"
  },
  {
    "label": "FDynamicPrimitive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicPrimitive"
  },
  {
    "label": "FDynamicPrimitiveIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicPrimitiveIndex"
  },
  {
    "label": "FDynamicPrimitiveIndexList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicPrimitiveIndexList"
  },
  {
    "label": "FDynamicPrimitiveIndexQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveIndexQueue"
  },
  {
    "label": "FDynamicPrimitiveViewMasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicPrimitiveViewMasks"
  },
  {
    "label": "FDynamicMeshElementContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshElementContext"
  },
  {
    "label": "FViewFamilyGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewFamilyGroup"
  },
  {
    "label": "FViewMeshArrays",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMeshArrays"
  },
  {
    "label": "FDynamicMeshElementContextContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshElementContextContainer"
  },
  {
    "label": "FDynamicMeshElementContextContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshElementContextContainer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVisibilityTaskConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskConfig"
  },
  {
    "label": "FAlwaysVisible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlwaysVisible"
  },
  {
    "label": "FFrustumCull",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrustumCull"
  },
  {
    "label": "FOcclusionCull",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionCull"
  },
  {
    "label": "FView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FView"
  },
  {
    "label": "FRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelevance"
  },
  {
    "label": "FVisibilityViewPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityViewPacket"
  },
  {
    "label": "FOcclusionCull",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionCull"
  },
  {
    "label": "FRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelevance"
  },
  {
    "label": "FTasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTasks"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "FVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskData"
  },
  {
    "label": "FDynamicMeshElements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshElements"
  },
  {
    "label": "FTasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTasks"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FRelevancePrimSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelevancePrimSet"
  },
  {
    "label": "TARRAY",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TARRAY"
  },
  {
    "label": "FFilterStaticMeshesForViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterStaticMeshesForViewData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FDrawCommandRelevancePacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawCommandRelevancePacket"
  },
  {
    "label": "FRelevancePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRelevancePacket"
  },
  {
    "label": "FPrimitiveLODMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveLODMask"
  },
  {
    "label": "FComputeAndMarkRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeAndMarkRelevance"
  },
  {
    "label": "FOcclusionBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionBounds"
  },
  {
    "label": "FThrottledOcclusionQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThrottledOcclusionQuery"
  },
  {
    "label": "FOcclusionQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionQuery"
  },
  {
    "label": "FOcclusionFeedbackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionFeedbackEntry"
  },
  {
    "label": "FHZBBound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHZBBound"
  },
  {
    "label": "FGPUOcclusionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUOcclusionState"
  },
  {
    "label": "FOcclusionCullResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionCullResult"
  },
  {
    "label": "FGPUOcclusionPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionPacket"
  },
  {
    "label": "FRecordVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordVisitor"
  },
  {
    "label": "FProcessVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessVisitor"
  },
  {
    "label": "FGPUOcclusion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusion"
  },
  {
    "label": "FGPUOcclusionParallelPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionParallelPacket"
  },
  {
    "label": "FGPUOcclusionParallel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionParallel"
  },
  {
    "label": "FGPUOcclusionSerial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUOcclusionSerial"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FOptionalTaskTagScope)",
    "insertText": "Scope(ETaskTag::EParallelRenderingThread)"
  },
  {
    "label": "FDynamicMeshElementContext()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FDynamicMeshElementContext(FSceneRenderer& SceneRenderer)"
  },
  {
    "label": "LaunchRenderThreadTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "LaunchRenderThreadTask(FDynamicPrimitiveIndexList&& PrimitiveIndexList)"
  },
  {
    "label": "LaunchAsyncTask()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "LaunchAsyncTask(FDynamicPrimitiveIndexQueue* PrimitiveIndexQueue, UE::Tasks::ETaskPriority TaskPriority)"
  },
  {
    "label": "GatherDynamicMeshElementsForPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDynamicMeshElementsForPrimitive(FPrimitiveSceneInfo* Primitive, uint8 ViewMask)"
  },
  {
    "label": "GatherDynamicMeshElementsForEditorPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDynamicMeshElementsForEditorPrimitive(FPrimitiveSceneInfo* Primitive, uint8 ViewMask)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  },
  {
    "label": "LaunchRenderThreadTask()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "LaunchRenderThreadTask(FDynamicPrimitiveIndexList&& PrimitiveIndexList)"
  },
  {
    "label": "LaunchAsyncTask()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "LaunchAsyncTask(FDynamicPrimitiveIndexQueue* PrimitiveIndexQueue, int32 Index, UE::Tasks::ETaskPriority TaskPriority)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FSceneRenderer& InSceneRenderer, int32 NumAsyncContexts)"
  },
  {
    "label": "MergeContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeContexts(TArray<FDynamicPrimitive, SceneRenderingAllocator>& OutDynamicPrimitives)"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Submit(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "FVisibilityTaskConfig()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVisibilityTaskConfig(const FScene& Scene, TConstArrayView<FViewInfo*> Views)"
  },
  {
    "label": "FVisibilityViewPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVisibilityViewPacket(FVisibilityTaskData& TaskData, FScene& InScene, FViewInfo& InView, int32 ViewIndex)"
  },
  {
    "label": "BeginInitVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInitVisibility()"
  },
  {
    "label": "FVisibilityTaskData()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVisibilityTaskData(FRHICommandListImmediate& RHICmdList, FSceneRenderer& SceneRenderer)"
  },
  {
    "label": "LaunchVisibilityTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchVisibilityTasks(const UE::Tasks::FTask& BeginInitVisibilityPrerequisites)"
  },
  {
    "label": "MergeSecondaryViewVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeSecondaryViewVisibility()"
  },
  {
    "label": "GatherDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDynamicMeshElements(FDynamicPrimitiveIndexList&& Primitives)"
  },
  {
    "label": "GatherDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDynamicMeshElements(const FDynamicPrimitiveViewMasks& Primitives)"
  },
  {
    "label": "SetupMeshPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMeshPasses(FExclusiveDepthStencil::Type BasePassDepthStencilAccess, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "AddCommandsForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommandsForMesh(\n\t\tint32 PrimitiveIndex,\n\t\tconst FPrimitiveSceneInfo* InPrimitiveSceneInfo,\n\t\tconst FStaticMeshBatchRelevance& RESTRICT StaticMeshRelevance,\n\t\tconst FStaticMeshBatch& RESTRICT StaticMesh,\n\t\tEMeshDrawCommandCullingPayloadFlags CullingPayloadFlags,\n\t\tconst FScene& Scene,\n\t\tbool bCanCache,\n\t\tEMeshPass::Type PassType)"
  },
  {
    "label": "FRelevancePacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FRelevancePacket(\n\t\tFVisibilityTaskData& InTaskData,\n\t\tconst FViewInfo& InView,\n\t\tint32 InViewIndex,\n\t\tconst FFilterStaticMeshesForViewData& InViewData,\n\t\tuint8* InMarkMasks,\n\t\tconst UE::Tasks::FTask& PrerequisitesTask)"
  },
  {
    "label": "LaunchComputeRelevanceTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchComputeRelevanceTask()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "ComputeRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeRelevance(FDynamicPrimitiveIndexList& DynamicPrimitiveIndexList)"
  },
  {
    "label": "FComputeAndMarkRelevance()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FComputeAndMarkRelevance(FVisibilityTaskData& InTaskData, FScene& InScene, FViewInfo& InView, uint8 InViewIndex, const UE::Tasks::FTask& PreprequisitesTask)"
  },
  {
    "label": "AddPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitives(FPrimitiveIndexList&& PrimitiveIndexList)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitive(int32 Index)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish(UE::Tasks::FTaskEvent& ComputeRelevanceTaskEvent)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "FGPUOcclusionPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FGPUOcclusionPacket(FVisibilityViewPacket& InViewPacket, const FGPUOcclusionState& InOcclusionState)"
  },
  {
    "label": "OcclusionCullPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OcclusionCullPrimitive(VisitorType& Visitor, FOcclusionCullResult& Result, int32 Index)"
  },
  {
    "label": "AddOcclusionQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOcclusionQuery(const FOcclusionQuery& Query)"
  },
  {
    "label": "SubmitThrottledOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitThrottledOcclusionQueries()"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Map(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unmap(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "WaitForLastOcclusionQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForLastOcclusionQuery()"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPrimitive(int32 PrimitiveIndex)"
  },
  {
    "label": "LaunchOcclusionCullTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchOcclusionCullTask()"
  },
  {
    "label": "OcclusionCullTask()",
    "kind": "Method",
    "detail": "Function (FOcclusionCullResult)",
    "insertText": "OcclusionCullTask(FPrimitiveIndexList& PrimitiveIndexList)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish(UE::Tasks::FTaskEvent& OcclusionCullTasks)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  }
]