[
  {
    "label": "FRecastGraphPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastGraphPolicy"
  },
  {
    "label": "ARecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARecastNavMesh"
  },
  {
    "label": "FRecastGraphWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastGraphWrapper"
  },
  {
    "label": "FRecastGraphAStarFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastGraphAStarFilter"
  },
  {
    "label": "FRecastAStarSearchNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastAStarSearchNode"
  },
  {
    "label": "FRecastAStar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastAStar"
  },
  {
    "label": "dtPoly",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtPoly"
  },
  {
    "label": "dtMeshTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtMeshTile"
  },
  {
    "label": "dtLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtLink"
  },
  {
    "label": "dtNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMesh"
  },
  {
    "label": "AIMODULE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AIMODULE_API"
  },
  {
    "label": "FRecastAStarResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastAStarResult"
  },
  {
    "label": "dtPolyRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" GraphAStar . h \" # include \" NavMesh / RecastQueryFilter . h \" # include \" RecastGraphAStar . generated . h \" struct FRecastGraphPolicy { const int32 NodePoolSize = 2 0 4 8 ; const int32 OpenSetSize = 2 0 4 8 ; const int32 FatalPathLength = 1 0 0 0 0 ; const bool bReuseNodePoolInSubsequentSearches = false ; } ; class ARecastNavMesh ; struct FRecastGraphWrapper ; struct FRecastGraphAStarFilter ; struct FRecastAStarSearchNode ; struct FRecastAStar ; typedef uint64 dtPolyRef ; typedef unsigned int dtStatus ; struct dtPoly ; struct dtMeshTile ; struct dtLink ; class dtNavMesh ; # if WITH_RECAST struct FRecastNeighbour { FRecastGraphWrapper ; FRecastGraphAStarFilter ; operator)",
    "insertText": "dtPolyRef()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InNodeRef },Side { InSide } { } public : dtPolyRef NodeRef ; unsigned char Side ; } ; struct FRecastAStarResult : public dtQueryResult { void)",
    "insertText": "Reset(const int32 PathLength)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "resize(0)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddZeroed(const int32 PathLength)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "resize(PathLength)"
  },
  {
    "label": "SetPathInfo()",
    "kind": "Method",
    "detail": "Function (} dtPolyRef)",
    "insertText": "SetPathInfo(const int32 Index, const FRecastAStarSearchNode& SearchNode)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FRecastGraphWrapper()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} # if WITH_RECAST void)",
    "insertText": "Initialize(const ARecastNavMesh* InRecastNavMeshActor)"
  },
  {
    "label": "ConvertToRecastStatus()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "ConvertToRecastStatus(const FRecastAStar& Algo, const FRecastGraphAStarFilter& Filter, const EGraphAStarResult AStarResult)"
  },
  {
    "label": "IsValidRef()",
    "kind": "Method",
    "detail": "Function (typedef dtPolyRef FNodeRef ; bool)",
    "insertText": "IsValidRef(const dtPolyRef& NodeRef)"
  },
  {
    "label": "FRecastAStarSearchNode()",
    "kind": "Method",
    "detail": "Function (# if WITH_RECAST const dtNavMesh* DetourNavMesh = nullptr ; dtNavMeshQuery RecastQuery ; unsigned int CachedNextLink = DT_NULL_LINK ; # endif } ; # if WITH_RECAST struct FRecastAStarSearchNode : public FGraphAStarDefaultNode<FRecastGraphWrapper> { typedef FGraphAStarDefaultNode<FRecastGraphWrapper> Super ;)",
    "insertText": "FRecastAStarSearchNode(const dtPolyRef InNodeRef = INVALID_NAVNODEREF, FVector InPosition = FVector(TNumericLimits<FVector::FReal>::Max(), TNumericLimits<FVector::FReal>::Max(), TNumericLimits<FVector::FReal>::Max()) ) : Super(InNodeRef)"
  },
  {
    "label": "FRecastAStarSearchNode()",
    "kind": "Method",
    "detail": "Function (nullptr },Poly { nullptr },Position { InPosition [ 0 ],InPosition [ 1 ],InPosition [ 2 ] } { })",
    "insertText": "FRecastAStarSearchNode(const FRecastAStarSearchNode& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraphAStarDefaultNode&)",
    "insertText": "operator(const FGraphAStarDefaultNode& Other)"
  },
  {
    "label": "GetDetourNavMesh()",
    "kind": "Method",
    "detail": "Function (RecastGraphWrapper .)",
    "insertText": "GetDetourNavMesh()->getTileAndPolyByRefUnsafe(NodeRef, &Tile, &Poly)"
  },
  {
    "label": "HasValidCacheInfo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidCacheInfo()"
  },
  {
    "label": "CacheInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheInfo(const FRecastGraphWrapper& RecastGraphWrapper, const FRecastAStarSearchNode& FromNode)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RecastGraphWrapper)"
  },
  {
    "label": "GetRecastQuery()",
    "kind": "Method",
    "detail": "Function (RecastGraphWrapper .)",
    "insertText": "GetRecastQuery().getEdgeMidPoint(FromNode.NodeRef, FromNode.Poly, FromNode.Tile, NodeRef, Poly, Tile, Position)"
  },
  {
    "label": "FRecastAStar()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FRecastAStar : public FGraphAStar<FRecastGraphWrapper,FRecastGraphPolicy,FRecastAStarSearchNode> { typedef FGraphAStar<FRecastGraphWrapper,FRecastGraphPolicy,FRecastAStarSearchNode> Super ;)",
    "insertText": "FRecastAStar(const FRecastGraphWrapper& Graph) : Super(Graph)"
  },
  {
    "label": "FRecastGraphAStarFilter()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRecastGraphAStarFilter {)",
    "insertText": "FRecastGraphAStarFilter(FRecastGraphWrapper& InRecastGraphWrapper, const FRecastQueryFilter& InFilter, uint32 InMaxSearchNodes, const FVector::FReal InCostLimit, const UObject* Owner)"
  },
  {
    "label": "GetHeuristicCost()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetHeuristicCost(const FRecastAStarSearchNode& StartNode, const FRecastAStarSearchNode& EndNode)"
  },
  {
    "label": "dtVdist()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Cost =)",
    "insertText": "dtVdist(StartNode.Position, EndNode.Position)"
  },
  {
    "label": "CacheInfo()",
    "kind": "Method",
    "detail": "Function (EndNode .)",
    "insertText": "CacheInfo(RecastGraphWrapper, StartNode)"
  },
  {
    "label": "getCost()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal Cost = Filter .)",
    "insertText": "getCost(StartNode.Position, EndNode.Position, INVALID_NAVNODEREF, nullptr, nullptr, StartNode.NodeRef, StartNode.Tile, StartNode.Poly, EndNode.NodeRef, EndNode.Tile, EndNode.Poly)"
  },
  {
    "label": "ShouldIgnoreClosedNodes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldIgnoreClosedNodes()"
  },
  {
    "label": "ShouldIncludeStartNodeInPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldIncludeStartNodeInPath()"
  }
]