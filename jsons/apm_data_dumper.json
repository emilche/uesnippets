[
  {
    "label": "RawFileCloseFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawFileCloseFunctor"
  },
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_LOGGING_APM_DATA_DUMPER_H_ # define MODULES_AUDIO_PROCESSING_LOGGING_APM_DATA_DUMPER_H_ # include<stdint . h> # include<stdio . h> # if WEBRTC_APM_DEBUG_DUMP = = 1 # include<memory> # include<string> # include<unordered_map> # endif # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # if WEBRTC_APM_DEBUG_DUMP = = 1 # include \" common_audio / wav_file . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / string_utils . h \" # endif # if !)",
    "insertText": "defined(WEBRTC_APM_DEBUG_DUMP) || \\ (WEBRTC_APM_DEBUG_DUMP != 0 && WEBRTC_APM_DEBUG_DUMP != 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1 struct RawFileCloseFunctor { void)",
    "insertText": "operator()(FILE* f)"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fclose(f)"
  },
  {
    "label": "ApmDataDumper()",
    "kind": "Method",
    "detail": "Function (} } ; # endif class ApmDataDumper { public :)",
    "insertText": "ApmDataDumper(int instance_index)"
  },
  {
    "label": "ApmDataDumper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApmDataDumper()"
  },
  {
    "label": "ApmDataDumper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApmDataDumper(const ApmDataDumper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ApmDataDumper&)",
    "insertText": "operator(const ApmDataDumper&)"
  },
  {
    "label": "SetActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivated(bool activated)"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1 recording_activated_ = activated ; # endif } bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "SetDumpSetToUse()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1 return true ; # else return false ; # endif } size_t kDefaultDumpSet = 0 ; void)",
    "insertText": "SetDumpSetToUse(int dump_set_to_use)"
  },
  {
    "label": "SetOutputDirectory()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1 dump_set_to_use_ = dump_set_to_use ; # endif } void)",
    "insertText": "SetOutputDirectory(absl::string_view output_dir)"
  },
  {
    "label": "RTC_CHECK_LT()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1)",
    "insertText": "RTC_CHECK_LT(output_dir.size(), kOutputDirMaxLength)"
  },
  {
    "label": "strcpyn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strcpyn(output_dir_, output_dir.size(), output_dir)"
  },
  {
    "label": "InitiateNewSetOfRecordings()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "InitiateNewSetOfRecordings()"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1 + + recording_set_index_ ; # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, double v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WEBRTC_APM_DEBUG_DUMP = = 1)",
    "insertText": "if(dump_set_to_use_ && *dump_set_to_use_ != dump_set)"
  },
  {
    "label": "GetRawFile()",
    "kind": "Method",
    "detail": "Function (FILE* file =)",
    "insertText": "GetRawFile(name)"
  },
  {
    "label": "fwrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fwrite(&v, sizeof(v), 1, file)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const double* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "fwrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fwrite(v, sizeof(v[0]), v_length, file)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const double> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpRaw(name, v.size(), v.data())"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, float v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const float* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const float> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, bool v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpRaw(name, static_cast<int16_t>(v))"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const bool* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "int16_t()",
    "kind": "Method",
    "detail": "Function (int16_t value = static_cast<)",
    "insertText": "int16_t(v[k])"
  },
  {
    "label": "fwrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fwrite(&value, sizeof(value), 1, file)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} } # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const bool> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, int16_t v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const int16_t* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const int16_t> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, int32_t v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const int32_t* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, size_t v_length, const size_t* v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const int32_t> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpRaw(absl::string_view name, rtc::ArrayView<const size_t> v, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpWav()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "DumpWav(absl::string_view name, size_t v_length, const float* v, int sample_rate_hz, int num_channels, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "GetWavFile()",
    "kind": "Method",
    "detail": "Function (WavWriter* file =)",
    "insertText": "GetWavFile(name, sample_rate_hz, num_channels, WavFile::SampleFormat::kFloat)"
  },
  {
    "label": "WriteSamples()",
    "kind": "Method",
    "detail": "Function (file ->)",
    "insertText": "WriteSamples(v, v_length)"
  },
  {
    "label": "DumpWav()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "DumpWav(absl::string_view name, rtc::ArrayView<const float> v, int sample_rate_hz, int num_channels, int dump_set = kDefaultDumpSet)"
  },
  {
    "label": "DumpWav()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpWav(name, v.size(), v.data(), sample_rate_hz, num_channels)"
  },
  {
    "label": "GetRawFile()",
    "kind": "Method",
    "detail": "Function (} # endif } private : # if WEBRTC_APM_DEBUG_DUMP = = 1 bool recording_activated_ ; absl::optional<int> dump_set_to_use_ ; size_t kOutputDirMaxLength = 1 0 2 4 ; char output_dir_ [ kOutputDirMaxLength ] ; const int instance_index_ ; int recording_set_index_ = 0 ; std::unordered_map<std::string,std::unique_ptr<FILE,RawFileCloseFunctor>> raw_files_ ; std::unordered_map<std::string,std::unique_ptr<WavWriter>> wav_files_ ; FILE*)",
    "insertText": "GetRawFile(absl::string_view name)"
  },
  {
    "label": "GetWavFile()",
    "kind": "Method",
    "detail": "Function (WavWriter*)",
    "insertText": "GetWavFile(absl::string_view name, int sample_rate_hz, int num_channels, WavFile::SampleFormat format)"
  }
]