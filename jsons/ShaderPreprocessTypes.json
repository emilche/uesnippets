[
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "FShaderDiagnosticRemapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDiagnosticRemapper"
  },
  {
    "label": "FShaderPreprocessOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPreprocessOutput"
  },
  {
    "label": "FRemapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemapData"
  },
  {
    "label": "FSourceBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceBlock"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "FInternalShaderCompilerFunctions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternalShaderCompilerFunctions"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "GetShaderSourceDebugHashPrefix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / AnsiString . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderCore . h \" # include \" ShaderSource . h \" struct FShaderCompilerEnvironment ; struct FShaderCompilerError ; struct FShaderCompilerInput ; FShaderSource::FViewType)",
    "insertText": "GetShaderSourceDebugHashPrefix()"
  },
  {
    "label": "GetShaderSourceDebugHashPrefixWide()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetShaderSourceDebugHashPrefixWide()"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (struct FShaderDiagnosticRemapper { private : void)",
    "insertText": "Remap(FShaderCompilerError& Diagnostic)"
  },
  {
    "label": "AddSourceBlock()",
    "kind": "Method",
    "detail": "Function (class FShaderPreprocessOutput ; void)",
    "insertText": "AddSourceBlock(int32 OriginalLineNum, int32 StrippedLineNum)"
  },
  {
    "label": "AddSourceBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSourceBlock(OriginalLineNum, StrippedLineNum, FString())"
  },
  {
    "label": "AddSourceBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSourceBlock(int32 OriginalLineNum, int32 StrippedLineNum, FString&& OriginalPath)"
  },
  {
    "label": "AddStrippedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStrippedLine(int32 StrippedLineNum, int32 Offset)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FRemapData { const FString& Filename ; int32 LineNumber = INDEX_NONE ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FShaderPreprocessOutput()",
    "kind": "Method",
    "detail": "Function (struct FSourceBlock { int32 StrippedLineNum ; int32 OriginalLineNum ; FString OriginalPath ; } ; TArray<FSourceBlock> Blocks ; TArray<int32> StrippedLineOffsets ; } ; struct FShaderCompilerOutput ; class FShaderPreprocessOutput { public :)",
    "insertText": "FShaderPreprocessOutput()"
  },
  {
    "label": "GetSourceView()",
    "kind": "Method",
    "detail": "Function (FString Empty ; return Empty ; } FShaderSource::FViewType)",
    "insertText": "GetSourceView()"
  },
  {
    "label": "GetSourceViewAnsi()",
    "kind": "Method",
    "detail": "Function (} FAnsiStringView)",
    "insertText": "GetSourceViewAnsi()"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (# if SHADER_SOURCE_ANSI return PreprocessedSource .)",
    "insertText": "GetView()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(AnsiSource.IsEmpty())"
  },
  {
    "label": "FAnsiString()",
    "kind": "Method",
    "detail": "Function (AnsiSource =)",
    "insertText": "FAnsiString(PreprocessedSource.GetView())"
  },
  {
    "label": "FAnsiStringView()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FAnsiStringView(AnsiSource)"
  },
  {
    "label": "GetSourceViewWide()",
    "kind": "Method",
    "detail": "Function (# endif } FStringView)",
    "insertText": "GetSourceViewWide()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if SHADER_SOURCE_ANSI)",
    "insertText": "if(WideSource.IsEmpty())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (WideSource =)",
    "insertText": "FString(PreprocessedSource.GetView())"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FStringView(WideSource)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "GetSource()"
  },
  {
    "label": "GetUnstrippedSourceView()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } FStringView)",
    "insertText": "GetUnstrippedSourceView()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if SHADER_SOURCE_ANSI)",
    "insertText": "if(OriginalPreprocessedSource.IsEmpty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(WideSourceUnstripped.IsEmpty())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (WideSourceUnstripped =)",
    "insertText": "FString(OriginalPreprocessedSource.GetView())"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FStringView(WideSourceUnstripped)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} # else return OriginalPreprocessedSource .)",
    "insertText": "IsEmpty() ? PreprocessedSource.GetView() : OriginalPreprocessedSource.GetView()"
  },
  {
    "label": "EditSource()",
    "kind": "Method",
    "detail": "Function (# endif } FShaderSource&)",
    "insertText": "EditSource()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = 0,LineIndex = 0,StartIndex = 0 ;)",
    "insertText": "while(StartIndex < Source.Len())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (EndIndex = Source .)",
    "insertText": "Find(ANSITEXTVIEW(\"\\n\"), StartIndex)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (EndIndex = Source .)",
    "insertText": "Len()"
  },
  {
    "label": "Line()",
    "kind": "Method",
    "detail": "Function (} FAnsiStringView)",
    "insertText": "Line(Source.GetData() + StartIndex, EndIndex - StartIndex)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (StartIndex = EndIndex + 1 ;)",
    "insertText": "Callback(Line, LineIndex++)"
  },
  {
    "label": "HasDirective()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasDirective(const FString& Directive)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfDirectives = PragmaDirectives .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FString& CurrentDirective = PragmaDirectives [ i ] ;)",
    "insertText": "if(CurrentDirective.Equals(Directive))"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (const FString& CurrentDirective = PragmaDirectives [ i ] ;)",
    "insertText": "Action(&CurrentDirective)"
  },
  {
    "label": "VisitDirectivesWithPrefix()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "VisitDirectivesWithPrefix(const TCHAR* Prefix, TFunction<void(const FString*)> Action)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FString& CurrentDirective = PragmaDirectives [ i ] ;)",
    "insertText": "if(CurrentDirective.StartsWith(Prefix))"
  },
  {
    "label": "AddDirective()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "AddDirective(FString&& Directive)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PragmaDirectives .)",
    "insertText": "Add(Directive)"
  },
  {
    "label": "MoveDirectives()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveDirectives(TArray<FString>& OutDirectives)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDirectives .)",
    "insertText": "Add(MoveTemp(Directive))"
  },
  {
    "label": "IsSecondary()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsSecondary()"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerError& CompilerError = Errors .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "LogError()",
    "kind": "Method",
    "detail": "Function (; CompilerError . StrippedErrorMessage = Message ; } void)",
    "insertText": "LogError(FString&& FilePath, FString&& Message, FString&& LineNumberStr)"
  },
  {
    "label": "LogError()",
    "kind": "Method",
    "detail": "Function (CompilerError . ErrorVirtualFilePath = FilePath ; CompilerError . ErrorLineString = LineNumberStr ; CompilerError . StrippedErrorMessage = Message ; } void)",
    "insertText": "LogError(FString&& FilePath, FString&& Message, int32 LineNumber)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString LineNumberStr =)",
    "insertText": "LexToString(LineNumber)"
  },
  {
    "label": "LogError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogError(MoveTemp(FilePath), MoveTemp(Message), MoveTemp(LineNumberStr))"
  },
  {
    "label": "EditErrors()",
    "kind": "Method",
    "detail": "Function (} TArray<FShaderCompilerError>&)",
    "insertText": "EditErrors()"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "StripCode()",
    "kind": "Method",
    "detail": "Function (private : class FInternalShaderCompilerFunctions ; class FShaderCompileJob ; void)",
    "insertText": "StripCode(bool bCopyOriginalPreprocessdSource)"
  },
  {
    "label": "CompressCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressCode()"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (PreprocessedSource .)",
    "insertText": "Compress()"
  },
  {
    "label": "DecompressCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecompressCode()"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function (PreprocessedSource .)",
    "insertText": "Decompress()"
  },
  {
    "label": "RemapErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemapErrors(FShaderCompilerOutput& Output)"
  }
]