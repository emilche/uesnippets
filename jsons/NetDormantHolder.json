[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FObjectReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReplicator"
  },
  {
    "label": "FNetworkObjectList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkObjectList"
  },
  {
    "label": "FDormantObjectReplicator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDormantObjectReplicator"
  },
  {
    "label": "FActorDormantReplicators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorDormantReplicators"
  },
  {
    "label": "FDormantObjectReplicatorKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDormantObjectReplicatorKeyFuncs"
  },
  {
    "label": "FDormantReplicatorHolder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDormantReplicatorHolder"
  },
  {
    "label": "FActorDormantReplicatorsKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorDormantReplicatorsKeyFuncs"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectKey . h \" # include \" Templates / SharedPointer . h \" # include \" Serialization / Archive . h \" # include \" Misc / NetworkGuid . h \" class AActor ; class FObjectReplicator ; class FNetworkObjectList ; namespace UE::Net { typedef TFunctionRef<)",
    "insertText": "void(FObjectKey OwnerActorKey, FObjectKey ObjectKey, const TSharedRef<FObjectReplicator>& ReplicatorRef)"
  },
  {
    "label": "FDormantObjectReplicator()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FNetworkGUID,TWeakObjectPtr<UObject>> FDormantObjectMap ; } namespace UE::Net::Private { struct FDormantObjectReplicator {)",
    "insertText": "FDormantObjectReplicator(FObjectKey InObjectKey)"
  },
  {
    "label": "FDormantObjectReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDormantObjectReplicator(FObjectKey InObjectKey, const TSharedRef<FObjectReplicator>& ExistingReplicator)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDormantObjectReplicator& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FActorDormantReplicators& rhs)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} struct FDormantObjectReplicatorKeyFuncs : BaseKeyFuncs<FDormantObjectReplicator,FObjectKey,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "DoesReplicatorExist()",
    "kind": "Method",
    "detail": "Function (} } ; FObjectKey OwnerActorKey ; typedef TSet<FDormantObjectReplicator,FDormantObjectReplicatorKeyFuncs> FObjectReplicatorSet ; FObjectReplicatorSet DormantReplicators ; } ; struct FDormantReplicatorHolder { bool)",
    "insertText": "DoesReplicatorExist(AActor* DormantActor, UObject* ReplicatedObject)"
  },
  {
    "label": "FindReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectReplicator>)",
    "insertText": "FindReplicator(AActor* DormantActor, UObject* ReplicatedObject)"
  },
  {
    "label": "FindAndRemoveReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectReplicator>)",
    "insertText": "FindAndRemoveReplicator(AActor* DormantActor, UObject* ReplicatedObject)"
  },
  {
    "label": "CreateAndStoreReplicator()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FObjectReplicator>&)",
    "insertText": "CreateAndStoreReplicator(AActor* DormantActor, UObject* ReplicatedObject, bool& bOverwroteExistingReplicator)"
  },
  {
    "label": "StoreReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreReplicator(AActor* DormantActor, UObject* ReplicatedObject, const TSharedRef<FObjectReplicator>& ObjectReplicator)"
  },
  {
    "label": "RemoveStoredReplicator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveStoredReplicator(AActor* DormantActor, FObjectKey ReplicatedObjectKey)"
  },
  {
    "label": "CleanupAllReplicatorsOfActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAllReplicatorsOfActor(AActor* DormantActor)"
  },
  {
    "label": "CleanupStaleObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupStaleObjects(FNetworkObjectList& NetworkObjectList, UObject* ReferenceOwner)"
  },
  {
    "label": "ForEachDormantReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachDormantReplicator(UE::Net::FExecuteForEachDormantReplicator Function)"
  },
  {
    "label": "ForEachDormantReplicatorOfActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachDormantReplicatorOfActor(AActor* DormantActor, UE::Net::FExecuteForEachDormantReplicator Function)"
  },
  {
    "label": "EmptySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySet()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "FindFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSet<FActorDormantReplicators,FActorDormantReplicatorsKeyFuncs> FActorReplicatorSet ; FActorReplicatorSet ActorReplicatorSet ; UE::Net::FDormantObjectMap*)",
    "insertText": "FindFlushedObjectsForActor(AActor* Actor)"
  },
  {
    "label": "FindOrAddFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (UE::Net::FDormantObjectMap&)",
    "insertText": "FindOrAddFlushedObjectsForActor(AActor* Actor)"
  },
  {
    "label": "ClearFlushedObjectsForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFlushedObjectsForActor(AActor* Actor)"
  }
]