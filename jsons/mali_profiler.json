[
  {
    "label": "MaliProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaliProfiler"
  },
  {
    "label": "MaliProfiler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" gpu_profiler . h \" # include \" hwc . hpp \" # include<functional> # include<vector> namespace hwcpipe { class MaliProfiler : public GpuProfiler { public :)",
    "insertText": "MaliProfiler(const GpuCounterSet &enabled_counters)"
  },
  {
    "label": "MaliProfiler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MaliProfiler()"
  },
  {
    "label": "enabled_counters()",
    "kind": "Method",
    "detail": "Function (const GpuCounterSet&)",
    "insertText": "enabled_counters()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (enabled_counters_ = counters ; } ; void)",
    "insertText": "run()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const GpuMeasurements&)",
    "insertText": "sample()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (private : GpuCounterSet enabled_counters_ { } ; const GpuCounterSet supported_counters_ { GpuCounter::GpuCycles,GpuCounter::VertexComputeCycles,GpuCounter::FragmentCycles,GpuCounter::TilerCycles,GpuCounter::VertexComputeJobs,GpuCounter::Tiles,GpuCounter::TransactionEliminations,GpuCounter::FragmentJobs,GpuCounter::Pixels,GpuCounter::EarlyZTests,GpuCounter::EarlyZKilled,GpuCounter::LateZTests,GpuCounter::LateZKilled,GpuCounter::Instructions,GpuCounter::DivergedInstructions,GpuCounter::ShaderCycles,GpuCounter::ShaderArithmeticCycles,GpuCounter::ShaderLoadStoreCycles,GpuCounter::ShaderTextureCycles,GpuCounter::CacheReadLookups,GpuCounter::CacheWriteLookups,GpuCounter::ExternalMemoryReadAccesses,GpuCounter::ExternalMemoryWriteAccesses,GpuCounter::ExternalMemoryReadStalls,GpuCounter::ExternalMemoryWriteStalls,GpuCounter::ExternalMemoryReadBytes,GpuCounter::ExternalMemoryWriteBytes,} ; typedef std::function<)",
    "insertText": "double(void)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (std::unordered_map<GpuCounter,MaliValueGetter,GpuCounterHash> mappings_ { } ; const char* const device_ { \" / dev / mali0 \" } ; int num_cores_ { 0 } ; int num_l2_slices_ { 0 } ; int gpu_id_ { 0 } ; uint32_t hw_ver_ { 0 } ; int buffer_count_ { 1 6 } ; size_t buffer_size_ { 0 } ; uint8_t* sample_data_ { nullptr } ; uint64_t timestamp_ { 0 } ; const char* const* names_lut_ { nullptr } ; std::vector<uint32_t> raw_counter_buffer_ { } ; std::vector<unsigned int> core_index_remap_ { } ; int fd_ { - 1 } ; int hwc_fd_ { - 1 } ; GpuMeasurements measurements_ { } ; void)",
    "insertText": "init()"
  },
  {
    "label": "sample_counters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sample_counters()"
  },
  {
    "label": "wait_next_event()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wait_next_event()"
  },
  {
    "label": "get_counters()",
    "kind": "Method",
    "detail": "Function (const uint32_t*)",
    "insertText": "get_counters(mali_userspace::MaliCounterBlockName block, int index = 0)"
  },
  {
    "label": "get_counter_value()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "get_counter_value(mali_userspace::MaliCounterBlockName block, const char *name)"
  },
  {
    "label": "find_counter_index_by_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "find_counter_index_by_name(mali_userspace::MaliCounterBlockName block, const char *name)"
  }
]