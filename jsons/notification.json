[
  {
    "label": "Notification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Notification"
  },
  {
    "label": "Notification()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_NOTIFICATION_H_ # define ABSL_SYNCHRONIZATION_NOTIFICATION_H_ # include<atomic> # include \" absl / base / attributes . h \" # include \" absl / synchronization / mutex . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN class Notification { public :)",
    "insertText": "Notification() : notified_yet_(false)"
  },
  {
    "label": "Notification()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Notification(bool prenotify) : notified_yet_(prenotify)"
  },
  {
    "label": "Notification()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Notification(const Notification&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Notification&)",
    "insertText": "operator(const Notification&)"
  },
  {
    "label": "Notification()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Notification()"
  },
  {
    "label": "HasBeenNotified()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "HasBeenNotified()"
  },
  {
    "label": "WaitForNotification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForNotification()"
  },
  {
    "label": "WaitForNotificationWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForNotificationWithTimeout(absl::Duration timeout)"
  },
  {
    "label": "WaitForNotificationWithDeadline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForNotificationWithDeadline(absl::Time deadline)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify()"
  },
  {
    "label": "HasBeenNotifiedInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasBeenNotifiedInternal(const std::atomic<bool>* notified_yet)"
  }
]