[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REMOVE_H # define _LIBCPP___ALGORITHM_RANGES_REMOVE_H # include<__config> # include<__algorithm / ranges_remove_if . h> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / permutable . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / subrange . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __remove { struct __fn { template<permutable _Iter,sentinel_for<_Iter> _Sent,class _Type,class _Proj = identity> requires indirect_binary_predicate<ranges::equal_to,projected<_Iter,_Proj>,const _Type*> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "operator()(_Iter __first, _Sent __last, const _Type& __value, _Proj __proj = {})"
  },
  {
    "label": "__pred()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__pred(auto&& __other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Range,class _Type,class _Proj = identity> requires permutable<iterator_t<_Range>>&& indirect_binary_predicate<ranges::equal_to,projected<iterator_t<_Range>,_Proj>,const _Type*> _LIBCPP_HIDE_FROM_ABI borrowed_subrange_t<_Range>)",
    "insertText": "operator()(_Range&& __range, const _Type& __value, _Proj __proj = {})"
  }
]