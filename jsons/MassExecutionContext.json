[
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "TFragmentView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFragmentView"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "doesn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "doesn"
  },
  {
    "label": "CHECK_IF_VALID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassEntityTypes . h \" # include \" MassExternalSubsystemTraits . h \" # include \" MassEntityQuery . h \" # include \" MassSubsystemAccess . h \" # define)",
    "insertText": "CHECK_IF_VALID(View, Type) \\ checkf(View \\ , TEXT(\"Requested fragment type not bound, type %s. Make sure it has been listed as required.\"), *GetNameSafe(Type)) #define CHECK_IF_READWRITE(View) \\ checkf(View == nullptr || View->Requirement.AccessMode == EMassFragmentAccess::ReadWrite \\ , TEXT(\"Requested fragment type not bound for writing, type %s. Make sure it has been listed as required in ReadWrite mode.\") \\ , View ? *GetNameSafe(View->Requirement.StructType) : TEXT(\"[Not found]\"))"
  },
  {
    "label": "TFragmentView()",
    "kind": "Method",
    "detail": "Function (private : template<ViewType> struct TFragmentView { FMassFragmentRequirementDescription Requirement ; ViewType FragmentView ;)",
    "insertText": "TFragmentView()"
  },
  {
    "label": "TFragmentView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFragmentView(const FMassFragmentRequirementDescription& InRequirement) : Requirement(InRequirement)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const UScriptStruct* FragmentType)"
  },
  {
    "label": "GetSubsystemRequirementBits()",
    "kind": "Method",
    "detail": "Function (SubsystemAccess .)",
    "insertText": "GetSubsystemRequirementBits(OutConstSubsystemsBitSet, OutMutableSubsystemsBitSet)"
  },
  {
    "label": "SetSubsystemRequirementBits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubsystemRequirementBits(const FMassExternalSubsystemBitSet& InConstSubsystemsBitSet, const FMassExternalSubsystemBitSet& InMutableSubsystemsBitSet)"
  },
  {
    "label": "SetSubsystemRequirementBits()",
    "kind": "Method",
    "detail": "Function (SubsystemAccess .)",
    "insertText": "SetSubsystemRequirementBits(InConstSubsystemsBitSet, InMutableSubsystemsBitSet)"
  },
  {
    "label": "FMassExecutionContext()",
    "kind": "Method",
    "detail": "Function (} EMassExecutionContextType ExecutionType = EMassExecutionContextType::Local ; FMassArchetypeData ; FMassEntityQuery ; public :)",
    "insertText": "FMassExecutionContext(FMassEntityManager& InEntityManager, const float InDeltaTimeSeconds = 0.f, const bool bInFlushDeferredCommands = true)"
  },
  {
    "label": "GetEntityManagerChecked()",
    "kind": "Method",
    "detail": "Function (FMassEntityManager&)",
    "insertText": "GetEntityManagerChecked()"
  },
  {
    "label": "DebugGetExecutionDesc()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MASSENTITY_DEBUG const FString&)",
    "insertText": "DebugGetExecutionDesc()"
  },
  {
    "label": "SetFlushDeferredCommands()",
    "kind": "Method",
    "detail": "Function (DebugExecutionDescription = Description ; } # endif void)",
    "insertText": "SetFlushDeferredCommands(const bool bNewFlushDeferredCommands)"
  },
  {
    "label": "SetDeferredCommandBuffer()",
    "kind": "Method",
    "detail": "Function (bFlushDeferredCommands = bNewFlushDeferredCommands ; } void)",
    "insertText": "SetDeferredCommandBuffer(const TSharedPtr<FMassCommandBuffer>& InDeferredCommandBuffer)"
  },
  {
    "label": "SetEntityCollection()",
    "kind": "Method",
    "detail": "Function (DeferredCommandBuffer = InDeferredCommandBuffer ; } void)",
    "insertText": "SetEntityCollection(const FMassArchetypeEntityCollection& InEntityCollection)"
  },
  {
    "label": "SetEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntityCollection(FMassArchetypeEntityCollection&& InEntityCollection)"
  },
  {
    "label": "ClearEntityCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEntityCollection()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (EntityCollection .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetAuxData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAuxData(const FInstancedStruct& InAuxData)"
  },
  {
    "label": "SetExecutionType()",
    "kind": "Method",
    "detail": "Function (AuxData = InAuxData ; } void)",
    "insertText": "SetExecutionType(EMassExecutionContextType InExecutionType)"
  },
  {
    "label": "GetDeltaTimeSeconds()",
    "kind": "Method",
    "detail": "Function (ExecutionType = InExecutionType ; } float)",
    "insertText": "GetDeltaTimeSeconds()"
  },
  {
    "label": "GetSharedDeferredCommandBuffer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMassCommandBuffer>)",
    "insertText": "GetSharedDeferredCommandBuffer()"
  },
  {
    "label": "GetEntities()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FMassEntityHandle>)",
    "insertText": "GetEntities()"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (} FMassEntityHandle)",
    "insertText": "GetEntity(const int32 Index)"
  },
  {
    "label": "DoesArchetypeHaveFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "DoesArchetypeHaveFragment()"
  },
  {
    "label": "DoesArchetypeHaveTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesArchetypeHaveTag(const UScriptStruct& TagType)"
  },
  {
    "label": "DoesArchetypeHaveTag()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "DoesArchetypeHaveTag()"
  },
  {
    "label": "SetCurrentChunkSerialModificationNumber()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurrentChunkSerialModificationNumber(const int32 SerialModificationNumber)"
  },
  {
    "label": "GetChunkSerialModificationNumber()",
    "kind": "Method",
    "detail": "Function (ChunkSerialModificationNumber = SerialModificationNumber ; } int32)",
    "insertText": "GetChunkSerialModificationNumber()"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* Type =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (FChunkFragmentView* FoundChunkFragmentData = ChunkFragmentViews .)",
    "insertText": "FindByPredicate([Type](const FChunkFragmentView& Element) { return Element.Requirement.StructType == Type; })"
  },
  {
    "label": "GetMutableChunkFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetMutableChunkFragment()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* ChunkFragment = GetMutableChunkFragmentPtr<)",
    "insertText": "T()"
  },
  {
    "label": "GetChunkFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> const T&)",
    "insertText": "GetChunkFragment()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FConstSharedFragmentView* FoundSharedFragmentData = ConstSharedFragmentViews .)",
    "insertText": "FindByPredicate([&SharedFragmentType](const FConstSharedFragmentView& Element) { return Element.Requirement.StructType == &SharedFragmentType; })"
  },
  {
    "label": "GetConstSharedFragmentPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetConstSharedFragmentPtr()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FConstSharedFragmentView* FoundSharedFragmentData = ConstSharedFragmentViews .)",
    "insertText": "FindByPredicate([](const FConstSharedFragmentView& Element) { return Element.Requirement.StructType == T::StaticStruct(); })"
  },
  {
    "label": "GetConstSharedFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> const T&)",
    "insertText": "GetConstSharedFragment()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (FSharedFragmentView* FoundSharedFragmentData = SharedFragmentViews .)",
    "insertText": "FindByPredicate([](const FSharedFragmentView& Element) { return Element.Requirement.StructType == T::StaticStruct(); })"
  },
  {
    "label": "GetSharedFragmentPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetSharedFragmentPtr()"
  },
  {
    "label": "GetMutableSharedFragment()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetMutableSharedFragment()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FFragmentView* View = FragmentViews .)",
    "insertText": "FindByPredicate([FragmentType](const FFragmentView& Element) { return Element.Requirement.StructType == FragmentType; })"
  },
  {
    "label": "GetFragmentView()",
    "kind": "Method",
    "detail": "Function (} template<TFragment> TConstArrayView<TFragment>)",
    "insertText": "GetFragmentView()"
  },
  {
    "label": "GetFragmentView()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FMassFragment>)",
    "insertText": "GetFragmentView(const UScriptStruct* FragmentType)"
  },
  {
    "label": "GetMutableFragmentView()",
    "kind": "Method",
    "detail": "Function (; } TArrayView<FMassFragment>)",
    "insertText": "GetMutableFragmentView(const UScriptStruct* FragmentType)"
  },
  {
    "label": "GetMutableSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T&)",
    "insertText": "GetMutableSubsystemChecked()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T*)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "GetSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T&)",
    "insertText": "GetSubsystemChecked()"
  },
  {
    "label": "GetMutableSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T*)",
    "insertText": "GetMutableSubsystem(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "GetMutableSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T&)",
    "insertText": "GetMutableSubsystemChecked(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T*)",
    "insertText": "GetSubsystem(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T&)",
    "insertText": "GetSubsystemChecked(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "GetEntityCollection()",
    "kind": "Method",
    "detail": "Function (} const FMassArchetypeEntityCollection&)",
    "insertText": "GetEntityCollection()"
  },
  {
    "label": "GetAuxData()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* FragmentType =)",
    "insertText": "GetAuxData().GetScriptStruct()"
  },
  {
    "label": "FlushDeferred()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushDeferred()"
  },
  {
    "label": "ClearExecutionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExecutionData()"
  },
  {
    "label": "SetCurrentArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentArchetypeCompositionDescriptor(const FMassArchetypeCompositionDescriptor& Descriptor)"
  },
  {
    "label": "CacheSubsystemRequirements()",
    "kind": "Method",
    "detail": "Function (CurrentArchetypeCompositionDescriptor = Descriptor ; } bool)",
    "insertText": "CacheSubsystemRequirements(const FMassSubsystemRequirements& SubsystemRequirements)"
  },
  {
    "label": "SetSubsystemRequirements()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetSubsystemRequirements(const FMassSubsystemRequirements& SubsystemRequirements)"
  },
  {
    "label": "SetSubsystemRequirements()",
    "kind": "Method",
    "detail": "Function (SubsystemAccess .)",
    "insertText": "SetSubsystemRequirements(SubsystemRequirements)"
  },
  {
    "label": "SetFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFragmentRequirements(const FMassFragmentRequirements& FragmentRequirements)"
  },
  {
    "label": "ClearFragmentViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFragmentViews()"
  },
  {
    "label": "FMassFragment()",
    "kind": "Method",
    "detail": "Function (View . FragmentView = TArrayView<)",
    "insertText": "FMassFragment()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FChunkFragmentView& View : ChunkFragmentViews)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FConstSharedFragmentView& View : ConstSharedFragmentViews)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FSharedFragmentView& View : SharedFragmentViews)"
  }
]