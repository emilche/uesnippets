[
  {
    "label": "FCompactMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactMaps"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "FMeshShapeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshShapeGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "assumes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "assumes"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "FCollapseEdgeOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollapseEdgeOptions"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "FMergeVerticesOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeVerticesOptions"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "FSameAsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSameAsOptions"
  },
  {
    "label": "FMeshDifferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDifferenceInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "may"
  },
  {
    "label": "FValidityOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValidityOptions"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "may"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FDynamicMesh3(const FDynamicMesh3& CopyMesh)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FDynamicMesh3(FDynamicMesh3&& MoveMesh)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FDynamicMesh3(bool bWantNormals, bool bWantColors, bool bWantUVs, bool bWantTriGroups)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FDynamicMesh3(const FMeshShapeGenerator* Generator)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FDynamicMesh3& CopyMesh, bool bNormals = true, bool bColors = true, bool bUVs = true,\n\t          bool bAttributes = true)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Copy(const FMeshShapeGenerator* Generator)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactCopy(const FDynamicMesh3& CopyMesh, bool bNormals = true, bool bColors = true, bool bUVs = true,\n\t                 bool bAttributes = true, FCompactMaps* CompactInfo = nullptr)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "EnableMatchingAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingAttributes(const FDynamicMesh3& ToMatch, bool bClearExisting = true, bool bDiscardExtraAttributes = false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetOtherEdgeVertex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetOtherEdgeVertex(eid, VertexID)"
  },
  {
    "label": "GetOrderedOneRingEdgeTris()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetOrderedOneRingEdgeTris(VertexID, EdgeID)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendVertex(const FVertexInfo& VertInfo)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendVertex(const FDynamicMesh3& SourceMesh, int SourceVertexID)"
  },
  {
    "label": "AppendTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendTriangle(const FIndex3i& TriVertices, int GroupID = 0)"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "InsertVertex(int VertexID, const FVertexInfo& VertInfo, bool bUnsafe = false)"
  },
  {
    "label": "InsertTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "InsertTriangle(int TriangleID, const FIndex3i& TriVertices, int GroupID = 0, bool bUnsafe = false)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FMeshTriEdgeID(TriIndex, 0)"
  },
  {
    "label": "TriEdgeFunc()",
    "kind": "Method",
    "detail": "Function (only)",
    "insertText": "TriEdgeFunc(FirstTriEdgeID)"
  },
  {
    "label": "EnableMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMeshComponents(int MeshComponentsFlags)"
  },
  {
    "label": "EnableVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVertexNormals(const FVector3f& InitialNormal)"
  },
  {
    "label": "DiscardVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexNormals()"
  },
  {
    "label": "EnableVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVertexColors(const FVector3f& InitialColor)"
  },
  {
    "label": "DiscardVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexColors()"
  },
  {
    "label": "EnableVertexUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVertexUVs(const FVector2f& InitialUV)"
  },
  {
    "label": "DiscardVertexUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexUVs()"
  },
  {
    "label": "EnableTriangleGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTriangleGroups(int InitialGroupID = 0)"
  },
  {
    "label": "DiscardTriangleGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardTriangleGroups()"
  },
  {
    "label": "EnableAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAttributes()"
  },
  {
    "label": "DiscardAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardAttributes()"
  },
  {
    "label": "triangle()",
    "kind": "Method",
    "detail": "Function (of)",
    "insertText": "triangle(where i is 0,1,2)"
  },
  {
    "label": "CompactInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInPlace(FCompactMaps* CompactInfo = nullptr)"
  },
  {
    "label": "RemoveUnusedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedVertices()"
  },
  {
    "label": "ReverseOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseOrientation(bool bFlipNormals = true)"
  },
  {
    "label": "ReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "ReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "RemoveVertex()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "RemoveVertex(int VertexID, bool bPreserveManifold = false)"
  },
  {
    "label": "RemoveTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "RemoveTriangle(int TriangleID, bool bRemoveIsolatedVertices = true, bool bPreserveManifold = false)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SetTriangle(int TriangleID, const FIndex3i& NewVertices, bool bRemoveIsolatedVertices = true)"
  },
  {
    "label": "SplitEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitEdge(int EdgeAB, FEdgeSplitInfo& SplitInfo, double SplitParameterT = 0.5)"
  },
  {
    "label": "SplitEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitEdge(int EdgeVertA, int EdgeVertB, FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "FlipEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "FlipEdge(int EdgeAB, FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "FlipEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "FlipEdge(int EdgeVertA, int EdgeVertB, FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "SplitVertex()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitVertex(int VertexID, const TArrayView<const int>& TrianglesToUpdate,\n\t                                FVertexSplitInfo& SplitInfo)"
  },
  {
    "label": "SplitVertexWouldLeaveIsolated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitVertexWouldLeaveIsolated(int VertexID, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, double EdgeParameterT, \n\t\tconst FCollapseEdgeOptions& Options, FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CollapseEdge(KeepVertID, RemoveVertID, 0, Options, CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, double EdgeParameterT,\n\t                                 FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CollapseEdge(KeepVertID, RemoveVertID, 0, CollapseInfo)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "MergeEdges(int KeepEdgeID, int DiscardEdgeID, double InterpolationT, FMergeEdgesInfo& MergeInfo, bool bCheckValidOrientation = true)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "MergeEdges(int KeepEdgeID, int DiscardEdgeID, FMergeEdgesInfo& MergeInfo, bool bCheckValidOrientation=true)"
  },
  {
    "label": "MergeVertices()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "MergeVertices(int KeepVid, int DiscardVid, double InterpolationT, \n\t\tconst FMergeVerticesOptions& Options, FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "PokeTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "PokeTriangle(int TriangleID, const FVector3d& BaryCoordinates, FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "AddTriangleInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddTriangleInternal(int a, int b, int c, int e0, int e1, int e2)"
  },
  {
    "label": "ReplaceEdgeVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceEdgeVertex(int EdgeID, int vOld, int vNew)"
  },
  {
    "label": "ReplaceEdgeTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceEdgeTriangle(int EdgeID, int tOld, int tNew)"
  },
  {
    "label": "ReplaceTriangleEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceTriangleEdge(int EdgeID, int eOld, int eNew)"
  },
  {
    "label": "ReverseTriOrientationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseTriOrientationInternal(int TriangleID)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeInternal(FArchive& Ar, void* Ptr)"
  },
  {
    "label": "StashDebugMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StashDebugMesh(const FDynamicMesh3& Mesh, FString DebugMeshName)"
  },
  {
    "label": "FetchDebugMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchDebugMesh(FString DebugMeshName, FDynamicMesh3& MeshOut, bool bClear)"
  },
  {
    "label": "ClearAllDebugMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllDebugMeshes()"
  }
]