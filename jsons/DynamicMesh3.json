[
  {
    "label": "FCompactMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactMaps"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "FMeshShapeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshShapeGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge"
  },
  {
    "label": "FCollapseEdgeOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollapseEdgeOptions"
  },
  {
    "label": "FMergeVerticesOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeVerticesOptions"
  },
  {
    "label": "FSameAsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSameAsOptions"
  },
  {
    "label": "FMeshDifferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDifferenceInfo"
  },
  {
    "label": "FValidityOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValidityOptions"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" FrameTypes . h \" # include \" GeometryTypes . h \" # include \" HAL / Platform . h \" # include \" IndexTypes . h \" # include \" InfoTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" MathUtil . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" Quaternion . h \" # include \" Serialization / Archive . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Util / CompactMaps . h \" # include \" Util / DynamicVector . h \" # include \" Util / IndexUtil . h \" # include \" Util / IteratorUtil . h \" # include \" Util / RefCountVector . h \" # include \" Util / SmallListSet . h \" # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include<atomic> # include<initializer_list> namespace UE { namespace Geometry { class FCompactMaps ; class FDynamicMeshAttributeSet ; class FMeshShapeGenerator ; enum class EMeshComponents : uint8 { None = 0,VertexNormals = 1,VertexColors = 2,VertexUVs = 4,FaceGroups = 8,All = 1 5 } ; class FDynamicMesh3 { public : using FEdgeFlipInfo = DynamicMeshInfo::FEdgeFlipInfo ; using FEdgeSplitInfo = DynamicMeshInfo::FEdgeSplitInfo ; using FEdgeCollapseInfo = DynamicMeshInfo::FEdgeCollapseInfo ; using FMergeEdgesInfo = DynamicMeshInfo::FMergeEdgesInfo ; using FMergeVerticesInfo = DynamicMeshInfo::FMergeVerticesInfo ; using FPokeTriangleInfo = DynamicMeshInfo::FPokeTriangleInfo ; using FVertexSplitInfo = DynamicMeshInfo::FVertexSplitInfo ; struct FEdge { FIndex2i Vert ; FIndex2i Tri ; bool)",
    "insertText": "operator(const FEdge& e0, const FEdge& e1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FEdge& E)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (E .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (Ar<<Vert ; Ar<<Tri ; } } ; int InvalidID = IndexConstants::InvalidID ; int NonManifoldID = - 2 ; int DuplicateTriangleID = - 3 ; const FVector3d InvalidVertex ; FIndex3i InvalidTriangle { InvalidID,InvalidID,InvalidID } ; FIndex2i InvalidEdge { InvalidID,InvalidID } ; protected : TDynamicVector<FVector3d> Vertices { } ; FRefCountVector VertexRefCounts { } ; TOptional<TDynamicVector<FVector3f>> VertexNormals { } ; TOptional<TDynamicVector<FVector3f>> VertexColors { } ; TOptional<TDynamicVector<FVector2f>> VertexUVs { } ; FSmallListSet VertexEdgeLists ; TDynamicVector<FIndex3i> Triangles ; FRefCountVector TriangleRefCounts ; TDynamicVector<FIndex3i> TriangleEdges ; TOptional<TDynamicVector<int>> TriangleGroups { } ; int GroupIDCounter = 0 ; TDynamicVector<FEdge> Edges ; FRefCountVector EdgeRefCounts ; TUniquePtr<FDynamicMeshAttributeSet> AttributeSet { } ; bool bEnableShapeChangeStamp = false ; std::atomic<uint32> ShapeChangeStamp = 1 ; std::atomic<uint32> TopologyChangeStamp = 1 ; public :)",
    "insertText": "FDynamicMesh3() : FDynamicMesh3(false, false, false, false)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicMesh3(const FDynamicMesh3& CopyMesh)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMesh3(FDynamicMesh3&& MoveMesh)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FDynamicMesh3&)",
    "insertText": "operator(const FDynamicMesh3& CopyMesh)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FDynamicMesh3&)",
    "insertText": "operator(FDynamicMesh3&& MoveMesh)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMesh3()"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMesh3(bool bWantNormals, bool bWantColors, bool bWantUVs, bool bWantTriGroups)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMesh3(EMeshComponents flags) : FDynamicMesh3(((int)flags & (int)EMeshComponents::VertexNormals) != 0, ((int)flags & (int)EMeshComponents::VertexColors) != 0, ((int)flags & (int)EMeshComponents::VertexUVs) != 0, ((int)flags & (int)EMeshComponents::FaceGroups) != 0)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicMesh3(const FMeshShapeGenerator* Generator)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FDynamicMesh3& CopyMesh, bool bNormals = true, bool bColors = true, bool bUVs = true, bool bAttributes = true)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Copy(const FMeshShapeGenerator* Generator)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactCopy(const FDynamicMesh3& CopyMesh, bool bNormals = true, bool bColors = true, bool bUVs = true, bool bAttributes = true, FCompactMaps* CompactInfo = nullptr)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "EnableMatchingAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingAttributes(const FDynamicMesh3& ToMatch, bool bClearExisting = true, bool bDiscardExtraAttributes = false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FDynamicMesh3& Mesh)"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "VertexCount()"
  },
  {
    "label": "TriangleCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "TriangleCount()"
  },
  {
    "label": "EdgeCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "EdgeCount()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "MaxEdgeID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MaxEdgeID()"
  },
  {
    "label": "MaxGroupID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MaxGroupID()"
  },
  {
    "label": "HasVertexColors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVertexColors()"
  },
  {
    "label": "HasVertexUVs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVertexUVs()"
  },
  {
    "label": "HasTriangleGroups()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTriangleGroups()"
  },
  {
    "label": "HasAttributes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttributes()"
  },
  {
    "label": "GetComponentsFlags()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetComponentsFlags()"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVertex(int VertexID)"
  },
  {
    "label": "IsReferencedVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencedVertex(int VertexID)"
  },
  {
    "label": "IsTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTriangle(int TriangleID)"
  },
  {
    "label": "IsEdge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdge(int EdgeID)"
  },
  {
    "label": "SetShapeChangeStampEnabled()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetShapeChangeStampEnabled(bool bEnabled)"
  },
  {
    "label": "HasShapeChangeStampEnabled()",
    "kind": "Method",
    "detail": "Function (bEnableShapeChangeStamp = bEnabled ; } bool)",
    "insertText": "HasShapeChangeStampEnabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ShapeChangeStamp + + ; })",
    "insertText": "if(bTopologyChange)"
  },
  {
    "label": "GetShapeChangeStamp()",
    "kind": "Method",
    "detail": "Function (TopologyChangeStamp + + ; } } uint32)",
    "insertText": "GetShapeChangeStamp()"
  },
  {
    "label": "TriangleIndicesItr()",
    "kind": "Method",
    "detail": "Function (} triangle_iterator)",
    "insertText": "TriangleIndicesItr()"
  },
  {
    "label": "EdgeIndicesItr()",
    "kind": "Method",
    "detail": "Function (} edge_iterator)",
    "insertText": "EdgeIndicesItr()"
  },
  {
    "label": "BoundaryEdgeIndicesItr()",
    "kind": "Method",
    "detail": "Function (} FRefCountVector::FilteredEnumerable)",
    "insertText": "BoundaryEdgeIndicesItr()"
  },
  {
    "label": "VerticesItr()",
    "kind": "Method",
    "detail": "Function (} value_iteration<FVector3d>)",
    "insertText": "VerticesItr()"
  },
  {
    "label": "TrianglesItr()",
    "kind": "Method",
    "detail": "Function (} value_iteration<FIndex3i>)",
    "insertText": "TrianglesItr()"
  },
  {
    "label": "EdgesItr()",
    "kind": "Method",
    "detail": "Function (} value_iteration<FEdge>)",
    "insertText": "EdgesItr()"
  },
  {
    "label": "VtxVerticesItr()",
    "kind": "Method",
    "detail": "Function (} FSmallListSet::MappedValueEnumerable)",
    "insertText": "VtxVerticesItr(int VertexID)"
  },
  {
    "label": "EnumerateVertexVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateVertexVertices(int32 VertexID, TFunctionRef<void(int32)> VertexFunc)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (VertexEdgeLists .)",
    "insertText": "Enumerate(VertexID, [this, &VertexFunc, VertexID](int32 eid) { VertexFunc(GetOtherEdgeVertex(eid, VertexID)); })"
  },
  {
    "label": "VtxEdgesItr()",
    "kind": "Method",
    "detail": "Function (} FSmallListSet::ValueEnumerable)",
    "insertText": "VtxEdgesItr(int VertexID)"
  },
  {
    "label": "EnumerateVertexEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateVertexEdges(int32 VertexID, TFunctionRef<void(int32)> EdgeFunc)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (VertexEdgeLists .)",
    "insertText": "Enumerate(VertexID, EdgeFunc)"
  },
  {
    "label": "VtxTrianglesItr()",
    "kind": "Method",
    "detail": "Function (} vtx_triangles_enumerable)",
    "insertText": "VtxTrianglesItr(int VertexID)"
  },
  {
    "label": "EnumerateVertexTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateVertexTriangles(int32 VertexID, TFunctionRef<void(int32)> ApplyFunc)"
  },
  {
    "label": "EnumerateEdgeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEdgeTriangles(int32 EdgeID, TFunctionRef<void(int32)> ApplyFunc)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "AppendVertex(const FVertexInfo& VertInfo)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendVertex(const FVector3d& Position)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AppendVertex(const FDynamicMesh3& SourceMesh, int SourceVertexID)"
  },
  {
    "label": "AppendTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendTriangle(const FIndex3i& TriVertices, int GroupID = 0)"
  },
  {
    "label": "AppendTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendTriangle(int Vertex0, int Vertex1, int Vertex2, int GroupID = 0)"
  },
  {
    "label": "BeginUnsafeVerticesInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginUnsafeVerticesInsert()"
  },
  {
    "label": "EndUnsafeVerticesInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUnsafeVerticesInsert()"
  },
  {
    "label": "RebuildFreeList()",
    "kind": "Method",
    "detail": "Function (VertexRefCounts .)",
    "insertText": "RebuildFreeList()"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "InsertVertex(int VertexID, const FVertexInfo& VertInfo, bool bUnsafe = false)"
  },
  {
    "label": "BeginUnsafeTrianglesInsert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUnsafeTrianglesInsert()"
  },
  {
    "label": "EndUnsafeTrianglesInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUnsafeTrianglesInsert()"
  },
  {
    "label": "InsertTriangle()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "InsertTriangle(int TriangleID, const FIndex3i& TriVertices, int GroupID = 0, bool bUnsafe = false)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (public : FVector3d)",
    "insertText": "GetVertex(int VertexID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertexID ] = vNewPos ;)",
    "insertText": "if(bTrackChange)"
  },
  {
    "label": "UpdateChangeStamps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChangeStamps(true, false)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "GetVertex(int VertexID, FVertexInfo& VertInfo, bool bWantNormals, bool bWantColors, bool bWantUVs)"
  },
  {
    "label": "GetVertexInfo()",
    "kind": "Method",
    "detail": "Function (FVertexInfo)",
    "insertText": "GetVertexInfo(int VertexID)"
  },
  {
    "label": "GetVtxEdgeCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVtxEdgeCount(int VertexID)"
  },
  {
    "label": "GetMaxVtxEdgeCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetMaxVtxEdgeCount()"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "GetTriangle(int TriangleID)"
  },
  {
    "label": "GetTriEdges()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriEdges =)",
    "insertText": "GetTriEdges(TriID)"
  },
  {
    "label": "EnumerateTriEdgeIDsFromEdgeID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTriEdgeIDsFromEdgeID(TriEdges[TriEdgesIndex], TriEdgeFunc)"
  },
  {
    "label": "GetTriNeighbourTris()",
    "kind": "Method",
    "detail": "Function (} } FIndex3i)",
    "insertText": "GetTriNeighbourTris(int TriangleID)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (template<VecType> void)",
    "insertText": "GetTriVertices(int TriangleID, VecType& v0, VecType& v1, VecType& v2)"
  },
  {
    "label": "GetTriVertex()",
    "kind": "Method",
    "detail": "Function (const FIndex3i& Triangle = Triangles [ TriangleID ] ; v0 = Vertices [ Triangle [ 0 ] ] ; v1 = Vertices [ Triangle [ 1 ] ] ; v2 = Vertices [ Triangle [ 2 ] ] ; } FVector3d)",
    "insertText": "GetTriVertex(int TriangleID, int j)"
  },
  {
    "label": "GetEdgeT()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Verts = Edges [ EdgeID ] . Vert ; a = Vertices [ Verts [ 0 ] ] ; b = Vertices [ Verts [ 1 ] ] ; return true ; } FIndex2i)",
    "insertText": "GetEdgeT(int EdgeID)"
  },
  {
    "label": "GetTriEdgeIDFromEdgeID()",
    "kind": "Method",
    "detail": "Function (FMeshTriEdgeID)",
    "insertText": "GetTriEdgeIDFromEdgeID(int EdgeID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TriIndex = Edges [ EdgeID ] . Tri . A ; FIndex3i TriEdges = TriangleEdges [ TriIndex ] ;)",
    "insertText": "if(TriEdges.A == EdgeID)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (} { return)",
    "insertText": "FMeshTriEdgeID(TriIndex, ( TriEdges.B == EdgeID ) ? 1 : 2)"
  },
  {
    "label": "EnumerateTriEdgeIDsFromEdgeID()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EnumerateTriEdgeIDsFromEdgeID(const int32 EdgeID, const TFunctionRef<void(FMeshTriEdgeID TriEdgeID)>& TriEdgeFunc)"
  },
  {
    "label": "GetTriEdgeIDFromEdgeID()",
    "kind": "Method",
    "detail": "Function (const FMeshTriEdgeID FirstTriEdgeID =)",
    "insertText": "GetTriEdgeIDFromEdgeID(EdgeID)"
  },
  {
    "label": "TriEdgeFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriEdgeFunc(FirstTriEdgeID)"
  },
  {
    "label": "GetEdgeT()",
    "kind": "Method",
    "detail": "Function (const int OtherTriID =)",
    "insertText": "GetEdgeT(EdgeID)"
  },
  {
    "label": "GetTriEdges()",
    "kind": "Method",
    "detail": "Function (FMeshTriEdgeID SecondTriEdgeID ; const FIndex3i SecondTriEdges =)",
    "insertText": "GetTriEdges(OtherTriID)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (SecondTriEdgeID =)",
    "insertText": "FMeshTriEdgeID(OtherTriID, 0)"
  },
  {
    "label": "FMeshTriEdgeID()",
    "kind": "Method",
    "detail": "Function (} else { SecondTriEdgeID =)",
    "insertText": "FMeshTriEdgeID(OtherTriID, ( SecondTriEdges.B == EdgeID ) ? 1 : 2)"
  },
  {
    "label": "TriEdgeFunc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TriEdgeFunc(SecondTriEdgeID)"
  },
  {
    "label": "EnableMeshComponents()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "EnableMeshComponents(int MeshComponentsFlags)"
  },
  {
    "label": "EnableVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableVertexNormals(const FVector3f& InitialNormal)"
  },
  {
    "label": "DiscardVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexNormals()"
  },
  {
    "label": "GetVertexNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetVertexNormal(int vID)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkSlow(IsVertex(vID))"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const TDynamicVector<FVector3f>& Normals = VertexNormals .)",
    "insertText": "GetValue()"
  },
  {
    "label": "EnableVertexColors()",
    "kind": "Method",
    "detail": "Function (Normals [ vID ] = vNewNormal ; } } void)",
    "insertText": "EnableVertexColors(const FVector3f& InitialColor)"
  },
  {
    "label": "DiscardVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexColors()"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetVertexColor(int vID)"
  },
  {
    "label": "EnableVertexUVs()",
    "kind": "Method",
    "detail": "Function (Colors [ vID ] = vNewColor ; } } void)",
    "insertText": "EnableVertexUVs(const FVector2f& InitialUV)"
  },
  {
    "label": "DiscardVertexUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardVertexUVs()"
  },
  {
    "label": "GetVertexUV()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetVertexUV(int vID)"
  },
  {
    "label": "EnableTriangleGroups()",
    "kind": "Method",
    "detail": "Function (UVs [ vID ] = vNewUV ; } } void)",
    "insertText": "EnableTriangleGroups(int InitialGroupID = 0)"
  },
  {
    "label": "DiscardTriangleGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardTriangleGroups()"
  },
  {
    "label": "AllocateTriangleGroup()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AllocateTriangleGroup()"
  },
  {
    "label": "SetTriangleGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleGroup(int tid, int group_id)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (GroupIDCounter =)",
    "insertText": "Max(GroupIDCounter, group_id + 1)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (} } FDynamicMeshAttributeSet*)",
    "insertText": "Attributes()"
  },
  {
    "label": "EnableAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableAttributes()"
  },
  {
    "label": "DiscardAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardAttributes()"
  },
  {
    "label": "IsBoundaryEdge()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsBoundaryEdge(int EdgeID)"
  },
  {
    "label": "IsBoundaryTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundaryTriangle(int TriangleID)"
  },
  {
    "label": "FindEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindEdge(int VertexA, int VertexB)"
  },
  {
    "label": "FindEdgeFromTri()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindEdgeFromTri(int VertexA, int VertexB, int TriangleID)"
  },
  {
    "label": "FindEdgeFromTriPair()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindEdgeFromTriPair(int TriangleA, int TriangleB)"
  },
  {
    "label": "FindTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindTriangle(int A, int B, int C)"
  },
  {
    "label": "GetEdgeOpposingV()",
    "kind": "Method",
    "detail": "Function (FIndex2i)",
    "insertText": "GetEdgeOpposingV(int EdgeID)"
  },
  {
    "label": "GetVtxNbrhood()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVtxNbrhood(int EdgeID, int VertexID, int& OtherVertOut, int& OppVert1Out, int& OppVert2Out, int& Tri1Out, int& Tri2Out)"
  },
  {
    "label": "GetVtxBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVtxBoundaryEdges(int VertexID, int& Edge0Out, int& Edge1Out)"
  },
  {
    "label": "GetAllVtxBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAllVtxBoundaryEdges(int VertexID, TArray<int>& EdgeListOut)"
  },
  {
    "label": "GetVtxTriangleCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVtxTriangleCount(int VertexID)"
  },
  {
    "label": "GetVtxTriangles()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "GetVtxTriangles(int VertexID, TArray<int>& TrianglesOut)"
  },
  {
    "label": "GetVtxSingleTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVtxSingleTriangle(int VertexID)"
  },
  {
    "label": "GetVtxContiguousTriangles()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "GetVtxContiguousTriangles(int VertexID, TArray<int>& TrianglesOut, TArray<int>& ContiguousGroupLengths, TArray<bool>& GroupIsLoop)"
  },
  {
    "label": "IsGroupBoundaryEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroupBoundaryEdge(int EdgeID)"
  },
  {
    "label": "IsGroupBoundaryVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroupBoundaryVertex(int VertexID)"
  },
  {
    "label": "IsGroupJunctionVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroupJunctionVertex(int VertexID)"
  },
  {
    "label": "GetVertexGroups()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVertexGroups(int VertexID, FIndex4i& GroupsOut)"
  },
  {
    "label": "GetAllVertexGroups()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllVertexGroups(int VertexID, TArray<int>& GroupsOut)"
  },
  {
    "label": "IsBowtieVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBowtieVertex(int VertexID)"
  },
  {
    "label": "IsCompact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompact()"
  },
  {
    "label": "IsCompactV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompactV()"
  },
  {
    "label": "IsCompactT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompactT()"
  },
  {
    "label": "CompactMetric()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "CompactMetric()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (public : FAxisAlignedBox3d)",
    "insertText": "GetBounds(bool bParallel = false)"
  },
  {
    "label": "GetVertexFrame()",
    "kind": "Method",
    "detail": "Function (FFrame3d)",
    "insertText": "GetVertexFrame(int VertexID, bool bFrameNormalY = false, FVector3d* UseNormal = nullptr)"
  },
  {
    "label": "GetTriNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetTriNormal(int TriangleID)"
  },
  {
    "label": "GetTriArea()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTriArea(int TriangleID)"
  },
  {
    "label": "GetTriInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriInfo(int TriangleID, FVector3d& Normal, double& Area, FVector3d& Centroid)"
  },
  {
    "label": "GetTriCentroid()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetTriCentroid(int TriangleID)"
  },
  {
    "label": "GetTriBaryPoint()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetTriBaryPoint(int TriangleID, double Bary0, double Bary1, double Bary2)"
  },
  {
    "label": "GetTriBaryNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetTriBaryNormal(int TriangleID, double Bary0, double Bary1, double Bary2)"
  },
  {
    "label": "GetTriBaryPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriBaryPoint(int TriangleID, double Bary0, double Bary1, double Bary2, FVertexInfo& VertInfo)"
  },
  {
    "label": "GetTriBounds()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d)",
    "insertText": "GetTriBounds(int TriangleID)"
  },
  {
    "label": "GetTriFrame()",
    "kind": "Method",
    "detail": "Function (FFrame3d)",
    "insertText": "GetTriFrame(int TriangleID, int Edge = 0)"
  },
  {
    "label": "GetTriSolidAngle()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTriSolidAngle(int TriangleID, const FVector3d& p)"
  },
  {
    "label": "GetTriInternalAngleR()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTriInternalAngleR(int TriangleID, int i)"
  },
  {
    "label": "GetTriInternalAnglesR()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetTriInternalAnglesR(int TriangleID)"
  },
  {
    "label": "GetEdgeNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetEdgeNormal(int EdgeID)"
  },
  {
    "label": "GetEdgePoint()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetEdgePoint(int EdgeID, double ParameterT)"
  },
  {
    "label": "GetVtxOneRingCentroid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVtxOneRingCentroid(int VertexID, FVector3d& CentroidOut)"
  },
  {
    "label": "CalculateWindingNumber()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CalculateWindingNumber(const FVector3d& QueryPoint)"
  },
  {
    "label": "GetVerticesBuffer()",
    "kind": "Method",
    "detail": "Function (public : const TDynamicVector<FVector3d>&)",
    "insertText": "GetVerticesBuffer()"
  },
  {
    "label": "GetColorsBuffer()",
    "kind": "Method",
    "detail": "Function (} const TDynamicVector<FVector3f>*)",
    "insertText": "GetColorsBuffer()"
  },
  {
    "label": "GetUVBuffer()",
    "kind": "Method",
    "detail": "Function (} const TDynamicVector<FVector2f>*)",
    "insertText": "GetUVBuffer()"
  },
  {
    "label": "GetTrianglesBuffer()",
    "kind": "Method",
    "detail": "Function (} const TDynamicVector<FIndex3i>&)",
    "insertText": "GetTrianglesBuffer()"
  },
  {
    "label": "GetEdgesBuffer()",
    "kind": "Method",
    "detail": "Function (} const TDynamicVector<FEdge>&)",
    "insertText": "GetEdgesBuffer()"
  },
  {
    "label": "RemoveUnusedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedVertices()"
  },
  {
    "label": "HasUnusedVertices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUnusedVertices()"
  },
  {
    "label": "ReverseOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseOrientation(bool bFlipNormals = true)"
  },
  {
    "label": "ReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "ReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "RemoveVertex()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "RemoveVertex(int VertexID, bool bPreserveManifold = false)"
  },
  {
    "label": "RemoveTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "RemoveTriangle(int TriangleID, bool bRemoveIsolatedVertices = true, bool bPreserveManifold = false)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SetTriangle(int TriangleID, const FIndex3i& NewVertices, bool bRemoveIsolatedVertices = true)"
  },
  {
    "label": "SplitEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitEdge(int EdgeAB, FEdgeSplitInfo& SplitInfo, double SplitParameterT = 0.5)"
  },
  {
    "label": "SplitEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitEdge(int EdgeVertA, int EdgeVertB, FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "FlipEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "FlipEdge(int EdgeAB, FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "FlipEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "FlipEdge(int EdgeVertA, int EdgeVertB, FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "SplitVertex()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SplitVertex(int VertexID, const TArrayView<const int>& TrianglesToUpdate, FVertexSplitInfo& SplitInfo)"
  },
  {
    "label": "SplitVertexWouldLeaveIsolated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitVertexWouldLeaveIsolated(int VertexID, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "CanCollapseEdge()",
    "kind": "Method",
    "detail": "Function (struct FCollapseEdgeOptions { bool bAllowHoleCollapse = false ; bool bAllowCollapsingInternalEdgeWithBoundaryVertices = false ; bool bAllowTetrahedronCollapse = false ; } ; EMeshResult)",
    "insertText": "CanCollapseEdge(int vKeep, int vRemove, const FCollapseEdgeOptions& Options)"
  },
  {
    "label": "CanCollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CanCollapseEdge(int vKeep, int vRemove, double EdgeParameterT = 0)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, double EdgeParameterT, const FCollapseEdgeOptions& Options, FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, const FCollapseEdgeOptions& Options, FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, double EdgeParameterT, FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "CollapseEdge()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CollapseEdge(int KeepVertID, int RemoveVertID, FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "MergeEdges(int KeepEdgeID, int DiscardEdgeID, double InterpolationT, FMergeEdgesInfo& MergeInfo, bool bCheckValidOrientation = true)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "MergeEdges(int KeepEdgeID, int DiscardEdgeID, FMergeEdgesInfo& MergeInfo, bool bCheckValidOrientation=true)"
  },
  {
    "label": "MergeVertices()",
    "kind": "Method",
    "detail": "Function (struct FMergeVerticesOptions { bool bAllowNonBoundaryBowtieCreation = false ; } ; EMeshResult)",
    "insertText": "MergeVertices(int KeepVid, int DiscardVid, double InterpolationT, const FMergeVerticesOptions& Options, FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "MergeVertices()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "MergeVertices(int KeepVid, int DiscardVid, double InterpolationT, FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "MergeVertices()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "MergeVertices(int KeepVid, int DiscardVid, FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "PokeTriangle()",
    "kind": "Method",
    "detail": "Function (} EMeshResult)",
    "insertText": "PokeTriangle(int TriangleID, const FVector3d& BaryCoordinates, FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "PokeTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "PokeTriangle(int TriangleID, FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "MeshInfoString()",
    "kind": "Method",
    "detail": "Function (} public : FString)",
    "insertText": "MeshInfoString()"
  },
  {
    "label": "SetVID()",
    "kind": "Method",
    "detail": "Function (struct FSameAsOptions { bool bCheckConnectivity = true ; bool bCheckEdgeIDs = false ; bool bCheckNormals = false ; bool bCheckColors = false ; bool bCheckUVs = false ; bool bCheckGroups = false ; bool bCheckAttributes = false ; bool bIgnoreDataLayout = false ; float Epsilon = TMathUtil<float>::Epsilon ; } ; struct FMeshDifferenceInfo { enum class EReason { Unknown,VertexCount,TriangleCount,EdgeCount,Vertex,Triangle,Edge,Connectivity,Normal,Color,UV,Group,Attribute } ; EReason Reason = EReason::Unknown ; FString Detail ; enum class EIDType { None,Vertex,Triangle,Edge } ; int32 ID = InvalidID ; int32 OtherID = InvalidID ; EIDType IDType = EIDType::None ; void)",
    "insertText": "SetVID(int32 VID, int32 OtherVID = InvalidID)"
  },
  {
    "label": "SetTID()",
    "kind": "Method",
    "detail": "Function (ID = VID ; OtherID = OtherVID ; IDType = EIDType::Vertex ; } void)",
    "insertText": "SetTID(int32 TID, int32 OtherTID = InvalidID)"
  },
  {
    "label": "SetEID()",
    "kind": "Method",
    "detail": "Function (ID = TID ; OtherID = OtherTID ; IDType = EIDType::Triangle ; } void)",
    "insertText": "SetEID(int32 EID, int32 OtherEID = InvalidID)"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (ID = EID ; OtherID = OtherEID ; IDType = EIDType::Edge ; } } ; bool)",
    "insertText": "IsSameAs(const FDynamicMesh3& OtherMesh, const FSameAsOptions& Options)"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSameAs(const FDynamicMesh3& OtherMesh, const FSameAsOptions& Options, FMeshDifferenceInfo& OutMeshDifferenceInfo)"
  },
  {
    "label": "IsSameAs_Helper()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSameAs_Helper(const FDynamicMesh3& OtherMesh, const FSameAsOptions& Options, FMeshDifferenceInfo* OutMeshDifferenceInfo = nullptr)"
  },
  {
    "label": "FValidityOptions()",
    "kind": "Method",
    "detail": "Function (public : struct FValidityOptions { bool bAllowNonManifoldVertices = false ; bool bAllowAdjacentFacesReverseOrientation = false ;)",
    "insertText": "FValidityOptions(bool bAllowNonManifoldVertices = false, bool bAllowAdjacentFacesReverseOrientation = false) : bAllowNonManifoldVertices(bAllowNonManifoldVertices) , bAllowAdjacentFacesReverseOrientation(bAllowAdjacentFacesReverseOrientation)"
  },
  {
    "label": "Permissive()",
    "kind": "Method",
    "detail": "Function (} FValidityOptions)",
    "insertText": "Permissive()"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (FValidityOptions ToRet ; ToRet . bAllowAdjacentFacesReverseOrientation = true ; ToRet . bAllowNonManifoldVertices = true ; return ToRet ; } } ; bool)",
    "insertText": "CheckValidity(FValidityOptions ValidityOptions = FValidityOptions(), EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check)"
  },
  {
    "label": "SetTriangleInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetTriangleInternal(int TriangleID, int v0, int v1, int v2)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (Triangles [ TriangleID ] =)",
    "insertText": "FIndex3i(v0, v1, v2)"
  },
  {
    "label": "SetTriangleEdgesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleEdgesInternal(int TriangleID, int e0, int e1, int e2)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (TriangleEdges [ TriangleID ] =)",
    "insertText": "FIndex3i(e0, e1, e2)"
  },
  {
    "label": "AddEdgeInternal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddEdgeInternal(int vA, int vB, int tA, int tB = InvalidID)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (int t = vB ; vB = vA ; vA = t ; } int eid = EdgeRefCounts .)",
    "insertText": "Allocate()"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "InsertAt(FEdge{ {vA, vB},{tA, tB} }, eid)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (VertexEdgeLists .)",
    "insertText": "Insert(vA, eid)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (VertexEdgeLists .)",
    "insertText": "Insert(vB, eid)"
  },
  {
    "label": "ReplaceTriangleVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceTriangleVertex(int TriangleID, int vOld, int vNew)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FIndex3i& Triangle = Triangles [ TriangleID ] ;)",
    "insertText": "for(int i : {0, 1, 2})"
  },
  {
    "label": "AllocateEdgesList()",
    "kind": "Method",
    "detail": "Function (Triangle [ i ] = vNew ; return 0 ; } } return - 1 ; } void)",
    "insertText": "AllocateEdgesList(int VertexID)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (VertexEdgeLists .)",
    "insertText": "Clear(VertexID)"
  },
  {
    "label": "AllocateAt()",
    "kind": "Method",
    "detail": "Function (} VertexEdgeLists .)",
    "insertText": "AllocateAt(VertexID)"
  },
  {
    "label": "GetVertexEdgesList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetVertexEdgesList(int VertexID, TArray<int>& EdgesOut)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EdgesOut .)",
    "insertText": "Add(eid)"
  },
  {
    "label": "SetEdgeVerticesInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetEdgeVerticesInternal(int EdgeID, int a, int b)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(a,b)"
  },
  {
    "label": "SetEdgeTrianglesInternal()",
    "kind": "Method",
    "detail": "Function (} Edges [ EdgeID ] . Vert [ 0 ] = a ; Edges [ EdgeID ] . Vert [ 1 ] = b ; } void)",
    "insertText": "SetEdgeTrianglesInternal(int EdgeID, int t0, int t1)"
  },
  {
    "label": "ReplaceEdgeVertex()",
    "kind": "Method",
    "detail": "Function (Edges [ EdgeID ] . Tri [ 0 ] = t0 ; Edges [ EdgeID ] . Tri [ 1 ] = t1 ; } int)",
    "insertText": "ReplaceEdgeVertex(int EdgeID, int vOld, int vNew)"
  },
  {
    "label": "ReplaceEdgeTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceEdgeTriangle(int EdgeID, int tOld, int tNew)"
  },
  {
    "label": "ReplaceTriangleEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReplaceTriangleEdge(int EdgeID, int eOld, int eNew)"
  },
  {
    "label": "TriangleHasVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriangleHasVertex(int TriangleID, int VertexID)"
  },
  {
    "label": "TriHasSequentialVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TriHasSequentialVertices(int TriangleID, int vA, int vB)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FIndex3i& Tri = Triangles [ TriangleID ] ;)",
    "insertText": "return((Tri.A == vA && Tri.B == vB) || (Tri.B == vA && Tri.C == vB) || (Tri.C == vA && Tri.A == vB))"
  },
  {
    "label": "FindTriangleEdge()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "FindTriangleEdge(int TriangleID, int vA, int vB)"
  },
  {
    "label": "FindEdgeInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindEdgeInternal(int32 vA, int32 vB, bool& bIsBoundary)"
  },
  {
    "label": "EdgeHasVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EdgeHasVertex(int EdgeID, int VertexID)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Verts = Edges [ EdgeID ] . Vert ;)",
    "insertText": "return(Verts[0] == VertexID) || (Verts[1] == VertexID)"
  },
  {
    "label": "EdgeHasTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EdgeHasTriangle(int EdgeID, int TriangleID)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Tris = Edges [ EdgeID ] . Tri ;)",
    "insertText": "return(Tris[0] == TriangleID) || (Tris[1] == TriangleID)"
  },
  {
    "label": "GetOtherEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetOtherEdgeVertex(int EdgeID, int VertexID)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Verts = Edges [ EdgeID ] . Vert ;)",
    "insertText": "return(Verts[0] == VertexID) ? Verts[1] : ((Verts[1] == VertexID) ? Verts[0] : InvalidID)"
  },
  {
    "label": "GetOtherEdgeTriangle()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetOtherEdgeTriangle(int EdgeID, int TriangleID)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Tris = Edges [ EdgeID ] . Tri ;)",
    "insertText": "return(Tris[0] == TriangleID) ? Tris[1] : ((Tris[1] == TriangleID) ? Tris[0] : InvalidID)"
  },
  {
    "label": "AddTriangleEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangleEdge(int TriangleID, int v0, int v1, int j, int EdgeID)"
  },
  {
    "label": "ElementAt()",
    "kind": "Method",
    "detail": "Function (FIndex3i& TriEdges = TriangleEdges .)",
    "insertText": "ElementAt(TriangleID, FIndex3i(InvalidID, InvalidID, InvalidID))"
  },
  {
    "label": "AddEdgeInternal()",
    "kind": "Method",
    "detail": "Function (Edges [ EdgeID ] . Tri [ 1 ] = TriangleID ; TriEdges [ j ] = EdgeID ; } else { TriEdges [ j ] =)",
    "insertText": "AddEdgeInternal(v0, v1, TriangleID)"
  },
  {
    "label": "GetOrderedOneRingEdgeTris()",
    "kind": "Method",
    "detail": "Function (} } FIndex2i)",
    "insertText": "GetOrderedOneRingEdgeTris(int VertexID, int EdgeID)"
  },
  {
    "label": "GetOtherEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const FIndex2i Tris = Edges [ EdgeID ] . Tri ; int vOther =)",
    "insertText": "GetOtherEdgeVertex(EdgeID, VertexID)"
  },
  {
    "label": "et1()",
    "kind": "Method",
    "detail": "Function (int et1 = Tris [ 1 ] ;)",
    "insertText": "et1(et1 != InvalidID && TriHasSequentialVertices(et1, VertexID, vOther))"
  },
  {
    "label": "TriHasSequentialVertices()",
    "kind": "Method",
    "detail": "Function (int et0 = Tris [ 0 ] ; return)",
    "insertText": "TriHasSequentialVertices(et0, VertexID, vOther) ? FIndex2i(et0, et1) : FIndex2i(et1, InvalidID)"
  },
  {
    "label": "ReverseTriOrientationInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReverseTriOrientationInternal(int TriangleID)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (template<int Variant> void)",
    "insertText": "SerializeInternal(FArchive& Ar, void* Ptr)"
  },
  {
    "label": "CanCollapseEdgeInternal()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "CanCollapseEdgeInternal(int vKeep, int vRemove, double collapse_t, FEdgeCollapseInfo* OutCollapseInfo)"
  },
  {
    "label": "CanCollapseEdgeInternal()",
    "kind": "Method",
    "detail": "Function (private : EMeshResult)",
    "insertText": "CanCollapseEdgeInternal(int vKeep, int vRemove, double collapse_t, const FCollapseEdgeOptions& Options, FEdgeCollapseInfo* OutCollapseInfo)"
  },
  {
    "label": "StashDebugMesh()",
    "kind": "Method",
    "detail": "Function (} ; namespace Debug { void)",
    "insertText": "StashDebugMesh(const FDynamicMesh3& Mesh, FString DebugMeshName)"
  },
  {
    "label": "FetchDebugMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchDebugMesh(FString DebugMeshName, FDynamicMesh3& MeshOut, bool bClear)"
  },
  {
    "label": "ClearAllDebugMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllDebugMeshes()"
  }
]