[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FIoBatchImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBatchImpl"
  },
  {
    "label": "FIoDirectoryIndexReaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDirectoryIndexReaderImpl"
  },
  {
    "label": "FIoDispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDispatcher"
  },
  {
    "label": "FIoDispatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDispatcherImpl"
  },
  {
    "label": "FIoRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequest"
  },
  {
    "label": "FIoRequestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequestImpl"
  },
  {
    "label": "FIoStoreEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreEnvironment"
  },
  {
    "label": "FIoStoreReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreReader"
  },
  {
    "label": "FIoStoreReaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreReaderImpl"
  },
  {
    "label": "FPackageId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageId"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "IMappedFileRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileRegion"
  },
  {
    "label": "FFileRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileRegion"
  },
  {
    "label": "IIoDispatcherBackend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IIoDispatcherBackend"
  },
  {
    "label": "FIoOffsetAndLength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoOffsetAndLength"
  },
  {
    "label": "TStringBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringBuilderBase"
  },
  {
    "label": "TOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptional"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIoReadOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoReadOptions"
  },
  {
    "label": "FIoBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBatch"
  },
  {
    "label": "FIoRequestStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequestStats"
  },
  {
    "label": "FIoMappedRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoMappedRegion"
  },
  {
    "label": "FIoDispatcherMountedContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoDispatcherMountedContainer"
  },
  {
    "label": "FIoSignatureError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoSignatureError"
  },
  {
    "label": "FIoSignatureErrorEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoSignatureErrorEvent"
  },
  {
    "label": "FIoQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoQueue"
  },
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FIoDirectoryIndexHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDirectoryIndexHandle"
  },
  {
    "label": "FIoDirectoryIndexReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDirectoryIndexReader"
  },
  {
    "label": "FIoContainerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerSettings"
  },
  {
    "label": "FIoStoreTocChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocChunkInfo"
  },
  {
    "label": "FIoStoreTocCompressedBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreTocCompressedBlockInfo"
  },
  {
    "label": "FIoStoreCompressedBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreCompressedBlockInfo"
  },
  {
    "label": "FIoStoreCompressedReadResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoStoreCompressedReadResult"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / PlatformFile . h \" # include \" HAL / UnrealMemory . h \" # include \" IO / IoBuffer . h \" # include \" IO / IoChunkId . h \" # include \" IO / IoContainerId . h \" # include \" IO / IoDispatcherPriority . h \" # include \" IO / IoHash . h \" # include \" IO / IoStatus . h \" # include \" Logging / LogMacros . h \" # include \" Math / NumericLimits . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / MemoryView . h \" # include \" Misc / AES . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Misc / ByteSwap . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Misc / IEngineCrypto . h \" # include \" Misc / SecureHash . h \" # include \" Serialization / Archive . h \" # include \" Serialization / FileRegions . h \" # include \" String / BytesToHex . h \" # include \" Tasks / Task . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FEvent ; class FIoBatchImpl ; class FIoDirectoryIndexReaderImpl ; class FIoDispatcher ; class FIoDispatcherImpl ; class FIoRequest ; class FIoRequestImpl ; class FIoStoreEnvironment ; class FIoStoreReader ; class FIoStoreReaderImpl ; class FPackageId ; class IMappedFileHandle ; class IMappedFileRegion ; struct FFileRegion ; struct IIoDispatcherBackend ; struct FIoOffsetAndLength ; template<CharType> class TStringBuilderBase ; template<OptionalType> struct TOptional ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogIoDispatcher, Log, All)"
  },
  {
    "label": "FIoStoreEnvironment()",
    "kind": "Method",
    "detail": "Function (class FIoStoreEnvironment { public :)",
    "insertText": "FIoStoreEnvironment()"
  },
  {
    "label": "InitializeFileEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFileEnvironment(FStringView InPath, int32 InOrder = 0)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPath()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (public : uint32)",
    "insertText": "GetTypeHash(const FIoChunkHash& InChunkHash)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 5 3 8 1 ;)",
    "insertText": "for(int i = 0; i < sizeof Hash; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result = Result* 3 3 + InChunkHash . Hash [ i ] ; } return Result ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoChunkHash& ChunkHash)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(&ChunkHash.Hash, sizeof Hash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIoChunkHash& Rhs)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToIoHash()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "ToIoHash()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (FIoHash IoHash ;)",
    "insertText": "Memcpy(IoHash.GetBytes(), Hash, sizeof(FIoHash))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (FIoChunkHash Result ;)",
    "insertText": "Memcpy(Result.Hash, &IoHash, sizeof IoHash)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Result.Hash + 20, 0, 12)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} private : uint8 Hash [ 3 2 ] ; } ; enum class EIoReadOptionsFlags : uint32 { None = 0,HardwareTargetBuffer = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EIoReadOptionsFlags)"
  },
  {
    "label": "FIoReadOptions()",
    "kind": "Method",
    "detail": "Function (class FIoReadOptions { public :)",
    "insertText": "FIoReadOptions()"
  },
  {
    "label": "FIoReadOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoReadOptions(uint64 InOffset, uint64 InSize) : RequestedOffset(InOffset) , RequestedSize(InSize)"
  },
  {
    "label": "FIoReadOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoReadOptions(uint64 InOffset, uint64 InSize, void* InTargetVa) : RequestedOffset(InOffset) , RequestedSize(InSize) , TargetVa(InTargetVa)"
  },
  {
    "label": "FIoReadOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIoReadOptions(uint64 InOffset, uint64 InSize, void* InTargetVa, EIoReadOptionsFlags InFlags) : RequestedOffset(InOffset) , RequestedSize(InSize) , TargetVa(InTargetVa) , Flags(InFlags)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRange(uint64 Offset, uint64 Size)"
  },
  {
    "label": "SetTargetVa()",
    "kind": "Method",
    "detail": "Function (RequestedOffset = Offset ; RequestedSize = Size ; } void)",
    "insertText": "SetTargetVa(void* InTargetVa)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (TargetVa = InTargetVa ; } void)",
    "insertText": "SetFlags(EIoReadOptionsFlags InValue)"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (Flags = InValue ; } uint64)",
    "insertText": "GetOffset()"
  },
  {
    "label": "FIoRequest()",
    "kind": "Method",
    "detail": "Function (void* TargetVa = nullptr ; EIoReadOptionsFlags Flags = EIoReadOptionsFlags::None ; } ; class FIoRequest final { public :)",
    "insertText": "FIoRequest()"
  },
  {
    "label": "FIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoRequest(const FIoRequest& Other)"
  },
  {
    "label": "FIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoRequest(FIoRequest&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoRequest&)",
    "insertText": "operator(const FIoRequest& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoRequest&)",
    "insertText": "operator(FIoRequest&& Other)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "Status()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (const FIoBuffer*)",
    "insertText": "GetResult()"
  },
  {
    "label": "GetResultOrDie()",
    "kind": "Method",
    "detail": "Function (const FIoBuffer&)",
    "insertText": "GetResultOrDie()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(uint32 NewPriority)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "FIoRequest()",
    "kind": "Method",
    "detail": "Function (private : FIoRequestImpl* Impl = nullptr ;)",
    "insertText": "FIoRequest(FIoRequestImpl* InImpl)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class FIoDispatcher ; class FIoDispatcherImpl ; class FIoBatch ; } ; using FIoReadCallback = TFunction<)",
    "insertText": "void(TIoStatusOr<FIoBuffer>)"
  },
  {
    "label": "ConvertToIoDispatcherPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConvertToIoDispatcherPriority(EAsyncIOPriorityAndFlags AIOP)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (int32 AIOPriorityToIoDispatcherPriorityMap [ ] = { IoDispatcherPriority_Min,IoDispatcherPriority_Low,IoDispatcherPriority_Medium - 1,IoDispatcherPriority_Medium,IoDispatcherPriority_High,IoDispatcherPriority_Max } ;)",
    "insertText": "static_assert(AIOP_NUM == UE_ARRAY_COUNT(AIOPriorityToIoDispatcherPriorityMap), \"IoDispatcher and AIO priorities mismatch\")"
  },
  {
    "label": "FIoBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoBatch(FIoBatch&& Other)"
  },
  {
    "label": "FIoBatch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIoBatch()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoBatch&)",
    "insertText": "operator(FIoBatch&& Other)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (FIoRequest)",
    "insertText": "Read(const FIoChunkId& Chunk, FIoReadOptions Options, int32 Priority)"
  },
  {
    "label": "ReadWithCallback()",
    "kind": "Method",
    "detail": "Function (FIoRequest)",
    "insertText": "ReadWithCallback(const FIoChunkId& ChunkId, const FIoReadOptions& Options, int32 Priority, FIoReadCallback&& Callback)"
  },
  {
    "label": "Issue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Issue()"
  },
  {
    "label": "IssueWithCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueWithCallback(TFunction<void()>&& Callback)"
  },
  {
    "label": "IssueAndTriggerEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueAndTriggerEvent(FEvent* Event)"
  },
  {
    "label": "IssueAndDispatchSubsequents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueAndDispatchSubsequents(FGraphEventRef Event)"
  },
  {
    "label": "FIoBatch()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FIoBatch(FIoDispatcherImpl& InDispatcher)"
  },
  {
    "label": "ReadInternal()",
    "kind": "Method",
    "detail": "Function (FIoRequestImpl*)",
    "insertText": "ReadInternal(const FIoChunkId& ChunkId, const FIoReadOptions& Options, int32 Priority)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FIoDispatcherImpl* Dispatcher ; FIoRequestImpl* HeadRequest = nullptr ; FIoRequestImpl* TailRequest = nullptr ; } ; struct FIoMappedRegion { IMappedFileHandle* MappedFileHandle = nullptr ; IMappedFileRegion* MappedFileRegion = nullptr ; } ; struct FIoDispatcherMountedContainer { FIoStoreEnvironment Environment ; FIoContainerId ContainerId ; } ; struct FIoSignatureError { FString ContainerName ; int32 BlockIndex = INDEX_NONE ; FSHAHash ExpectedHash ; FSHAHash ActualHash ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FIoSignatureErrorDelegate, const FIoSignatureError&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FIoContainerMountedDelegate, const FIoContainerId&)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (class FIoDispatcher final { public :)",
    "insertText": "DECLARE_EVENT_OneParam(FIoDispatcher, FIoContainerMountedEvent, const FIoDispatcherMountedContainer&)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FIoDispatcher, FIoContainerUnmountedEvent, const FIoDispatcherMountedContainer&)"
  },
  {
    "label": "FIoDispatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoDispatcher()"
  },
  {
    "label": "Mount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mount(TSharedRef<IIoDispatcherBackend> Backend, int32 Priority = 0)"
  },
  {
    "label": "NewBatch()",
    "kind": "Method",
    "detail": "Function (FIoBatch)",
    "insertText": "NewBatch()"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoMappedRegion>)",
    "insertText": "OpenMapped(const FIoChunkId& ChunkId, const FIoReadOptions& Options)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetTotalLoaded()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotalLoaded()"
  },
  {
    "label": "OnSignatureError()",
    "kind": "Method",
    "detail": "Function (FIoSignatureErrorDelegate&)",
    "insertText": "OnSignatureError()"
  },
  {
    "label": "FIoDispatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoDispatcher(const FIoDispatcher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoDispatcher&)",
    "insertText": "operator(const FIoDispatcher&)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "Initialize()"
  },
  {
    "label": "InitializePostSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePostSettings()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FIoDispatcher&)",
    "insertText": "Get()"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId, const FIoOffsetAndLength& ChunkRange)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId, const FIoOffsetAndLength& ChunkRange, uint64& OutAvailable)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (FIoDispatcherImpl* Impl = nullptr ; class FIoRequest ; class FIoBatch ; class FIoQueue ; class FBulkData ; } ; class FIoDirectoryIndexHandle { uint32 InvalidHandle = ~)",
    "insertText": "uint32(0)"
  },
  {
    "label": "FIoDirectoryIndexHandle()",
    "kind": "Method",
    "detail": "Function (uint32 RootHandle = 0 ; public :)",
    "insertText": "FIoDirectoryIndexHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "RootDirectory()",
    "kind": "Method",
    "detail": "Function (} FIoDirectoryIndexHandle)",
    "insertText": "RootDirectory()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FIoDirectoryIndexHandle)",
    "insertText": "Invalid()"
  },
  {
    "label": "FIoDirectoryIndexHandle()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FIoDirectoryIndexHandle(uint32 InHandle) : Handle(InHandle)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} uint32 Handle = InvalidHandle ; } ; using FDirectoryIndexVisitorFunction = TFunctionRef<)",
    "insertText": "bool(FStringView, const uint32)"
  },
  {
    "label": "FIoDirectoryIndexReader()",
    "kind": "Method",
    "detail": "Function (class FIoDirectoryIndexReader { public :)",
    "insertText": "FIoDirectoryIndexReader()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "Initialize(TArray<uint8>& InBuffer, FAES::FAESKey InDecryptionKey)"
  },
  {
    "label": "GetMountPoint()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetMountPoint()"
  },
  {
    "label": "GetChildDirectory()",
    "kind": "Method",
    "detail": "Function (FIoDirectoryIndexHandle)",
    "insertText": "GetChildDirectory(FIoDirectoryIndexHandle Directory)"
  },
  {
    "label": "GetNextDirectory()",
    "kind": "Method",
    "detail": "Function (FIoDirectoryIndexHandle)",
    "insertText": "GetNextDirectory(FIoDirectoryIndexHandle Directory)"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (FIoDirectoryIndexHandle)",
    "insertText": "GetFile(FIoDirectoryIndexHandle Directory)"
  },
  {
    "label": "GetNextFile()",
    "kind": "Method",
    "detail": "Function (FIoDirectoryIndexHandle)",
    "insertText": "GetNextFile(FIoDirectoryIndexHandle File)"
  },
  {
    "label": "GetDirectoryName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetDirectoryName(FIoDirectoryIndexHandle Directory)"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetFileName(FIoDirectoryIndexHandle File)"
  },
  {
    "label": "GetFileData()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFileData(FIoDirectoryIndexHandle File)"
  },
  {
    "label": "IterateDirectoryIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryIndex(FIoDirectoryIndexHandle Directory, FStringView Path, FDirectoryIndexVisitorFunction Visit)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UE_NONCOPYABLE(FIoDirectoryIndexReader)"
  },
  {
    "label": "Compressed()",
    "kind": "Method",
    "detail": "Function (FIoDirectoryIndexReaderImpl* Impl ; } ; enum class EIoContainerFlags : uint8 { None,)",
    "insertText": "Compressed(1 << 0), Encrypted = (1 << 1), Signed = (1 << 2), Indexed = (1 << 3), OnDemand = (1 << 4)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EIoContainerFlags)"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (struct FIoContainerSettings { FIoContainerId ContainerId ; EIoContainerFlags ContainerFlags = EIoContainerFlags::None ; FGuid EncryptionKeyGuid ; FAES::FAESKey EncryptionKey ; FRSAKeyHandle SigningKey ; bool bGenerateDiffPatch = false ; bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "IsEncrypted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEncrypted()"
  },
  {
    "label": "IsSigned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSigned()"
  },
  {
    "label": "IsIndexed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIndexed()"
  },
  {
    "label": "IsOnDemand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOnDemand()"
  },
  {
    "label": "FIoStoreTocChunkInfo()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FString FileName ; uint64 Offset ; uint64 OffsetOnDisk ; uint64 Size ; uint64 CompressedSize ; uint32 NumCompressedBlocks ; int32 PartitionIndex ; EIoChunkType ChunkType ; bool bHasValidFileName ; bool bForceUncompressed ; bool bIsMemoryMapped ; bool bIsCompressed ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FIoStoreTocChunkInfo()"
  },
  {
    "label": "FIoStoreTocChunkInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoStoreTocChunkInfo(const FIoStoreTocChunkInfo&)"
  },
  {
    "label": "FIoStoreTocChunkInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIoStoreTocChunkInfo(FIoStoreTocChunkInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoStoreTocChunkInfo&)",
    "insertText": "operator(FIoStoreTocChunkInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIoStoreTocChunkInfo&)",
    "insertText": "operator(FIoStoreTocChunkInfo&&)"
  },
  {
    "label": "FIoStoreReader()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } ; struct FIoStoreTocCompressedBlockInfo { uint64 Offset ; uint32 CompressedSize ; uint32 UncompressedSize ; uint8 CompressionMethodIndex ; } ; struct FIoStoreCompressedBlockInfo { FName CompressionMethod ; uint32 CompressedSize ; uint32 UncompressedSize ; uint32 AlignedSize ; uint64 OffsetInBuffer ; } ; struct FIoStoreCompressedReadResult { FIoBuffer IoBuffer ; TArray<FIoStoreCompressedBlockInfo> Blocks ; uint64 UncompressedOffset = 0 ; uint64 UncompressedSize = 0 ; uint64 TotalCompressedSize = 0 ; } ; class FIoStoreReader { public :)",
    "insertText": "FIoStoreReader()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoStatus)",
    "insertText": "Initialize(FStringView ContainerPath, const TMap<FGuid, FAES::FAESKey>& InDecryptionKeys)"
  },
  {
    "label": "GetContainerId()",
    "kind": "Method",
    "detail": "Function (FIoContainerId)",
    "insertText": "GetContainerId()"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetVersion()"
  },
  {
    "label": "GetContainerFlags()",
    "kind": "Method",
    "detail": "Function (EIoContainerFlags)",
    "insertText": "GetContainerFlags()"
  },
  {
    "label": "GetEncryptionKeyGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetEncryptionKeyGuid()"
  },
  {
    "label": "GetChunkCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkCount()"
  },
  {
    "label": "GetContainerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContainerName()"
  },
  {
    "label": "EnumerateChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateChunks(TFunction<bool(FIoStoreTocChunkInfo&&)>&& Callback)"
  },
  {
    "label": "GetChunkInfo()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoStoreTocChunkInfo>)",
    "insertText": "GetChunkInfo(const FIoChunkId& Chunk)"
  },
  {
    "label": "GetChunkInfo()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoStoreTocChunkInfo>)",
    "insertText": "GetChunkInfo(const uint32 TocEntryIndex)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "Read(const FIoChunkId& Chunk, const FIoReadOptions& Options)"
  },
  {
    "label": "ReadAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::TTask<TIoStatusOr<FIoBuffer>>)",
    "insertText": "ReadAsync(const FIoChunkId& Chunk, const FIoReadOptions& Options)"
  },
  {
    "label": "ReadCompressed()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoStoreCompressedReadResult>)",
    "insertText": "ReadCompressed(const FIoChunkId& Chunk, const FIoReadOptions& Options, bool bDecrypt = true)"
  },
  {
    "label": "GetDirectoryIndexReader()",
    "kind": "Method",
    "detail": "Function (const FIoDirectoryIndexReader&)",
    "insertText": "GetDirectoryIndexReader()"
  },
  {
    "label": "GetFilenamesByBlockIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilenamesByBlockIndex(const TArray<int32>& InBlockIndexList, TArray<FString>& OutFileList)"
  },
  {
    "label": "GetFilenames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilenames(TArray<FString>& OutFileList)"
  },
  {
    "label": "GetCompressionBlockSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCompressionBlockSize()"
  },
  {
    "label": "GetCompressionMethods()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetCompressionMethods()"
  },
  {
    "label": "EnumerateCompressedBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateCompressedBlocks(TFunction<bool(const FIoStoreTocCompressedBlockInfo&)>&& Callback)"
  },
  {
    "label": "EnumerateCompressedBlocksForChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateCompressedBlocksForChunk(const FIoChunkId& Chunk, TFunction<bool(const FIoStoreTocCompressedBlockInfo&)>&& Callback)"
  },
  {
    "label": "GetContainerFilePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContainerFilePaths(TArray<FString>& OutPaths)"
  }
]