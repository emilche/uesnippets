[
  {
    "label": "PacketReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketReceiver"
  },
  {
    "label": "Demuxer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Demuxer"
  },
  {
    "label": "DirectTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectTransport"
  },
  {
    "label": "Demuxer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_DIRECT_TRANSPORT_H_ # define TEST_DIRECT_TRANSPORT_H_ # include<memory> # include \" api / call / transport . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / test / simulated_network . h \" # include \" call / call . h \" # include \" call / simulated_packet_receiver . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class PacketReceiver ; namespace test { class Demuxer { public :)",
    "insertText": "Demuxer(const std::map<uint8_t, MediaType>& payload_type_map)"
  },
  {
    "label": "Demuxer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Demuxer()"
  },
  {
    "label": "Demuxer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Demuxer(const Demuxer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Demuxer&)",
    "insertText": "operator(const Demuxer&)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (MediaType)",
    "insertText": "GetMediaType(const uint8_t* packet_data, size_t packet_length)"
  },
  {
    "label": "DirectTransport()",
    "kind": "Method",
    "detail": "Function (const std::map<uint8_t,MediaType> payload_type_map_ ; } ; class DirectTransport : public Transport { public :)",
    "insertText": "DirectTransport(TaskQueueBase* task_queue, std::unique_ptr<SimulatedPacketReceiverInterface> pipe, Call* send_call, const std::map<uint8_t, MediaType>& payload_type_map)"
  },
  {
    "label": "DirectTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DirectTransport()"
  },
  {
    "label": "SetReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiver(PacketReceiver* receiver)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* data, size_t length, const PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* data, size_t length)"
  },
  {
    "label": "GetAverageDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAverageDelayMs()"
  },
  {
    "label": "ProcessPackets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessPackets() RTC_EXCLUSIVE_LOCKS_REQUIRED(&process_lock_)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket(const uint8_t* data, size_t length)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Call* const send_call_ ; TaskQueueBase* const task_queue_ ; Mutex process_lock_ ; RepeatingTaskHandle next_process_task_)",
    "insertText": "RTC_GUARDED_BY(&process_lock_)"
  }
]