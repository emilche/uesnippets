[
  {
    "label": "VertexDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VertexDescriptor"
  },
  {
    "label": "FaceVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaceVertex"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_BFR_VERTEX_DESCRIPTOR_H # define OPENSUBDIV3_BFR_VERTEX_DESCRIPTOR_H # include \" . . / version . h \" # include \" . . / vtr / stackBuffer . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Bfr { class VertexDescriptor { public : bool)",
    "insertText": "Initialize(int numIncidentFaces)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManifold(bool isManifold)"
  },
  {
    "label": "SetBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundary(bool isOnBoundary)"
  },
  {
    "label": "SetIncidentFaceSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncidentFaceSize(int faceIndex, int faceSize)"
  },
  {
    "label": "ClearIncidentFaceSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIncidentFaceSizes()"
  },
  {
    "label": "SetVertexSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexSharpness(float sharpness)"
  },
  {
    "label": "ClearVertexSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearVertexSharpness()"
  },
  {
    "label": "SetManifoldEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManifoldEdgeSharpness(int edgeIndex, float edgeSharpness)"
  },
  {
    "label": "SetIncidentFaceEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncidentFaceEdgeSharpness(int faceIndex, float leadingEdgeSharp, float trailingEdgeSharp)"
  },
  {
    "label": "ClearEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEdgeSharpness()"
  },
  {
    "label": "IsManifold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsManifold()"
  },
  {
    "label": "IsBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundary()"
  },
  {
    "label": "HasIncidentFaceSizes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIncidentFaceSizes()"
  },
  {
    "label": "GetIncidentFaceSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIncidentFaceSize(int faceIndex)"
  },
  {
    "label": "HasVertexSharpness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexSharpness()"
  },
  {
    "label": "GetVertexSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVertexSharpness()"
  },
  {
    "label": "HasEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdgeSharpness()"
  },
  {
    "label": "GetManifoldEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetManifoldEdgeSharpness(int edgeIndex)"
  },
  {
    "label": "GetIncidentFaceEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIncidentFaceEdgeSharpness(int faceIndex, float * leadingEdgeSharp, float * trailingEdgeSharp)"
  },
  {
    "label": "VertexDescriptor()",
    "kind": "Method",
    "detail": "Function (protected : class FaceVertex ;)",
    "insertText": "VertexDescriptor()"
  },
  {
    "label": "initFaceSizes()",
    "kind": "Method",
    "detail": "Function (} typedef Vtr::internal::StackBuffer<int,8,true> IntBuffer ; typedef Vtr::internal::StackBuffer<float,1 6,true> FloatBuffer ; void)",
    "insertText": "initFaceSizes()"
  },
  {
    "label": "initEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initEdgeSharpness()"
  },
  {
    "label": "SetIncidentFaceSize()",
    "kind": "Method",
    "detail": "Function (_hasFaceSizes = false ; } void)",
    "insertText": "SetIncidentFaceSize(int incFaceIndex, int faceSize)"
  },
  {
    "label": "GetIncidentFaceSize()",
    "kind": "Method",
    "detail": "Function (_faceSizeOffsets [ incFaceIndex ] = faceSize ; } int)",
    "insertText": "GetIncidentFaceSize(int incFaceIndex)"
  },
  {
    "label": "SetVertexSharpness()",
    "kind": "Method",
    "detail": "Function (_vertSharpness = 0 . 0 f ; } void)",
    "insertText": "SetVertexSharpness(float vertSharpness)"
  },
  {
    "label": "SetManifoldEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (_hasEdgeSharpness = false ; } void)",
    "insertText": "SetManifoldEdgeSharpness(int edgeIndex, float sharpness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_faceEdgeSharpness [ 2* edgeIndex ] = sharpness ; })",
    "insertText": "if(edgeIndex > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_faceEdgeSharpness [ 2* edgeIndex - 1 ] = sharpness ; } else)",
    "insertText": "if(!IsBoundary())"
  },
  {
    "label": "SetIncidentFaceEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIncidentFaceEdgeSharpness(int faceIndex, float leadingEdgeSharpness, float trailingEdgeSharpness)"
  },
  {
    "label": "GetIncidentFaceEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (_faceEdgeSharpness [ 2* faceIndex ] = leadingEdgeSharpness ; _faceEdgeSharpness [ 2* faceIndex + 1 ] = trailingEdgeSharpness ; } void)",
    "insertText": "GetIncidentFaceEdgeSharpness(int faceIndex, float * leadingEdgeSharpness, float * trailingEdgeSharpness)"
  }
]