[
  {
    "label": "FFileIoStoreCompressionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreCompressionContext"
  },
  {
    "label": "FFileIoStoreContainerFilePartition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreContainerFilePartition"
  },
  {
    "label": "FFileIoStoreBlockSignatureTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreBlockSignatureTable"
  },
  {
    "label": "FFileIoStoreContainerFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreContainerFile"
  },
  {
    "label": "FFileIoStoreBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreBuffer"
  },
  {
    "label": "FFileIoStoreBlockKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreBlockKey"
  },
  {
    "label": "FFileIoStoreBlockScatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreBlockScatter"
  },
  {
    "label": "FFileIoStoreResolvedRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreResolvedRequest"
  },
  {
    "label": "FFileIoStoreCompressedBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreCompressedBlock"
  },
  {
    "label": "FFileIoStoreReadRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreReadRequest"
  },
  {
    "label": "EQueueStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EQueueStatus"
  },
  {
    "label": "FFileIoStoreReadRequestListStealingIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreReadRequestListStealingIterator"
  },
  {
    "label": "FFileIoStoreReadRequestList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreReadRequestList"
  },
  {
    "label": "FFileIoStoreReadRequestListIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreReadRequestListIterator"
  },
  {
    "label": "FFileIoStoreStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreStats"
  },
  {
    "label": "FFileIoStoreBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreBufferAllocator"
  },
  {
    "label": "FFileIoStoreBlockCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreBlockCache"
  },
  {
    "label": "FCachedBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedBlock"
  },
  {
    "label": "FFileIoStoreReadRequestSortKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreReadRequestSortKey"
  },
  {
    "label": "FFileIoStoreOffsetSortedRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreOffsetSortedRequestQueue"
  },
  {
    "label": "FFileIoStoreRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreRequestQueue"
  },
  {
    "label": "FFileIoStoreReadRequestLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreReadRequestLink"
  },
  {
    "label": "FFileIoStoreRequestAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreRequestAllocator"
  },
  {
    "label": "FFileIoStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStore"
  },
  {
    "label": "FFileIoStoreRequestTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreRequestTracker"
  },
  {
    "label": "FFileIoStoreReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreReader"
  },
  {
    "label": "FInitializePlatformFileIoStoreParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializePlatformFileIoStoreParams"
  },
  {
    "label": "IPlatformFileIoStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformFileIoStore"
  },
  {
    "label": "IPlatformFileIoStoreModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformFileIoStoreModule"
  },
  {
    "label": "PREPROCESSOR_TO_STRING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IO / IoAllocators . h \" # include \" IO / IoStore . h \" # include \" IO / IoDispatcherBackend . h \" # include \" Async / MappedFileHandle . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" ProfilingDebugging / CountersTrace . h \" # include \" Containers / Ticker . h \" # include \" Modules / ModuleInterface . h \" # ifndef PLATFORM_IMPLEMENTS_IO # define PLATFORM_IMPLEMENTS_IO 0 # endif # ifndef PLATFORM_IODISPATCHER_MODULE # define PLATFORM_IODISPATCHER_MODULE)",
    "insertText": "PREPROCESSOR_TO_STRING(PREPROCESSOR_JOIN(PLATFORM_HEADER_NAME, PlatformIoDispatcher)) #endif #define UE_FILEIOSTORE_STATS_ENABLED (COUNTERSTRACE_ENABLED || CSV_PROFILER_STATS)"
  },
  {
    "label": "FFileIoStoreContainerFilePartition()",
    "kind": "Method",
    "detail": "Function (struct FFileIoStoreContainerFilePartition {)",
    "insertText": "FFileIoStoreContainerFilePartition()"
  },
  {
    "label": "FFileIoStoreContainerFilePartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreContainerFilePartition(FFileIoStoreContainerFilePartition&&)"
  },
  {
    "label": "FFileIoStoreContainerFilePartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreContainerFilePartition(const FFileIoStoreContainerFilePartition&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreContainerFilePartition&)",
    "insertText": "operator(FFileIoStoreContainerFilePartition&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreContainerFilePartition&)",
    "insertText": "operator(const FFileIoStoreContainerFilePartition&)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (uint64 FileHandle = 0 ; uint64 FileSize = 0 ; uint32 ContainerFileIndex = 0 ; FString FilePath ; TUniquePtr<IMappedFileHandle> MappedFileHandle ; std::atomic<int32> StartedReadRequestsCount = 0 ; } ; struct FFileIoStoreBlockSignatureTable { TArray<FSHAHash> Hashes ; void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (+ + RefCount ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "FFileIoStoreContainerFile()",
    "kind": "Method",
    "detail": "Function (delete this ; } } private : std::atomic<int64> RefCount = 0 ; } ; struct FFileIoStoreContainerFile {)",
    "insertText": "FFileIoStoreContainerFile()"
  },
  {
    "label": "FFileIoStoreContainerFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreContainerFile(FFileIoStoreContainerFile&&)"
  },
  {
    "label": "FFileIoStoreContainerFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreContainerFile(const FFileIoStoreContainerFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreContainerFile&)",
    "insertText": "operator(FFileIoStoreContainerFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreContainerFile&)",
    "insertText": "operator(const FFileIoStoreContainerFile&)"
  },
  {
    "label": "GetPartitionAndOffset()",
    "kind": "Method",
    "detail": "Function (uint64 PartitionSize = 0 ; uint64 CompressionBlockSize = 0 ; TArray<FName> CompressionMethods ; TArray<FIoStoreTocCompressedBlockEntry> CompressionBlocks ; FString FilePath ; FGuid EncryptionKeyGuid ; FAES::FAESKey EncryptionKey ; EIoContainerFlags ContainerFlags ; TRefCountPtr<FFileIoStoreBlockSignatureTable> BlockSignatureTable ; TArray<FFileIoStoreContainerFilePartition> Partitions ; uint32 ContainerInstanceId = 0 ; void)",
    "insertText": "GetPartitionAndOffset(uint64 TocOffset, FFileIoStoreContainerFilePartition*& OutPartition, uint64& OutOffset)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 PartitionIndex =)",
    "insertText": "int32(TocOffset / PartitionSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutPartition =& Partitions [ PartitionIndex ] ; OutOffset = TocOffset % PartitionSize ; } } ; struct FFileIoStoreBuffer { FFileIoStoreBuffer* Next = nullptr ; uint8* Memory = nullptr ; } ; struct FFileIoStoreBlockKey { union { struct { uint32 FileIndex ; uint32 BlockIndex ; } ; uint64 Hash ; } ; bool)",
    "insertText": "operator(const FFileIoStoreBlockKey& A, const FFileIoStoreBlockKey& B)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFileIoStoreBlockScatter { struct FFileIoStoreResolvedRequest* Request = nullptr ; uint64 DstOffset = 0 ; uint64 SrcOffset = 0 ; uint64 Size = 0 ; } ; struct FFileIoStoreCompressedBlock { FFileIoStoreCompressedBlock* Next = nullptr ; FFileIoStoreBlockKey Key ; FName CompressionMethod ; uint64 RawOffset =)",
    "insertText": "uint64(-1)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 UncompressedSize =)",
    "insertText": "uint32(-1)"
  },
  {
    "label": "FFileIoStoreReadRequest()",
    "kind": "Method",
    "detail": "Function (uint32 RefCount = 0 ; uint32 UnfinishedRawBlocksCount = 0 ; TArray<struct FFileIoStoreReadRequest*,TInlineAllocator<2>> RawBlocks ; TArray<FFileIoStoreBlockScatter,TInlineAllocator<2>> ScatterList ; FFileIoStoreCompressionContext* CompressionContext = nullptr ; uint8* CompressedDataBuffer = nullptr ; FAES::FAESKey EncryptionKey ; TRefCountPtr<FFileIoStoreBlockSignatureTable> BlockSignatureTable ; const FSHAHash* SignatureHash = nullptr ; bool bFailed = false ; bool bCancelled = false ; } ; struct FFileIoStoreReadRequest { enum EQueueStatus { QueueStatus_NotInQueue,QueueStatus_InQueue,QueueStatus_Started,QueueStatus_Completed } ;)",
    "insertText": "FFileIoStoreReadRequest() : Sequence(NextSequence++) , CreationTime(FPlatformTime::Cycles64())"
  },
  {
    "label": "CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreBlockKey Key ; FFileIoStoreBuffer* Buffer = nullptr ; uint32 RefCount = 0 ; uint32 BufferRefCount = 0 ; TArray<FFileIoStoreCompressedBlock*,TInlineAllocator<8>> CompressedBlocks ; const uint32 Sequence ; int32 Priority = 0 ; uint64 CreationTime ; FFileIoStoreBlockScatter ImmediateScatter ; uint32 BytesUsed = 0 ; bool bIsCustomRequest = false ; bool bFailed = false ; bool bCancelled = false ; EQueueStatus QueueStatus = QueueStatus_NotInQueue ; # if DO_CHECK uint32 ListCookie = 0 ; # endif private : uint32 NextSequence ; } ; # define)",
    "insertText": "CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP(DO_CHECK && 0)"
  },
  {
    "label": "FFileIoStoreReadRequestListStealingIterator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FFileIoStoreReadRequestListStealingIterator(const FFileIoStoreReadRequestListStealingIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequestListStealingIterator&)",
    "insertText": "operator(const FFileIoStoreReadRequestListStealingIterator&)"
  },
  {
    "label": "FFileIoStoreReadRequestListStealingIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreReadRequestListStealingIterator(FFileIoStoreReadRequestListStealingIterator&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Current = Other . Current ; Next = Other . Next ; Other . Current = Other . Next = nullptr ; } FFileIoStoreReadRequestListStealingIterator&)",
    "insertText": "operator(FFileIoStoreReadRequestListStealingIterator&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Current = Other . Current ; Next = Other . Next ; Other . Current = Other . Next = nullptr ; return* this ; } void)",
    "insertText": "operator()"
  },
  {
    "label": "AdvanceTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTo(Next)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP)",
    "insertText": "for(FFileIoStoreReadRequest* Cursor = InHead; Cursor; Cursor = Cursor->Next)"
  },
  {
    "label": "AdvanceTo()",
    "kind": "Method",
    "detail": "Function (Cursor -> ListCookie = 0 ; } # endif)",
    "insertText": "AdvanceTo(InHead)"
  },
  {
    "label": "AdvanceTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceTo(FFileIoStoreReadRequest* NewCurrent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Current = NewCurrent ;)",
    "insertText": "if(Current)"
  },
  {
    "label": "FFileIoStoreReadRequestListIterator()",
    "kind": "Method",
    "detail": "Function (Next = Current -> Next ; Current -> Next = nullptr ; } else { Next = nullptr ; } } FFileIoStoreReadRequest* Current = nullptr ; FFileIoStoreReadRequest* Next = nullptr ; ; } ; class FFileIoStoreReadRequestListIterator { public :)",
    "insertText": "FFileIoStoreReadRequestListIterator(const FFileIoStoreReadRequestListIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequestListIterator&)",
    "insertText": "operator(const FFileIoStoreReadRequestListIterator&)"
  },
  {
    "label": "FFileIoStoreReadRequestList()",
    "kind": "Method",
    "detail": "Function (Next = Current -> Next ; } else { Next = nullptr ; } } FFileIoStoreReadRequest* Current = nullptr ; FFileIoStoreReadRequest* Next = nullptr ; } ; class FFileIoStoreReadRequestList { public :)",
    "insertText": "FFileIoStoreReadRequestList() #if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP : ListCookie(++NextListCookie)"
  },
  {
    "label": "FFileIoStoreReadRequestList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileIoStoreReadRequestList(const FFileIoStoreReadRequestList& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequestList&)",
    "insertText": "operator(const FFileIoStoreReadRequestList& Other)"
  },
  {
    "label": "FFileIoStoreReadRequestList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreReadRequestList(FFileIoStoreReadRequestList&& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Head = Other . Head ; Tail = Other . Tail ; Other . Head = Other . Tail = nullptr ; # if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP)",
    "insertText": "for(FFileIoStoreReadRequest* Cursor = Head; Cursor; Cursor = Cursor->Next)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Cursor -> ListCookie = ListCookie ; } # endif } FFileIoStoreReadRequestList&)",
    "insertText": "operator(FFileIoStoreReadRequestList&& Other)"
  },
  {
    "label": "FFileIoStoreReadRequestList()",
    "kind": "Method",
    "detail": "Function (Cursor -> ListCookie = ListCookie ; } # endif return* this ; } # if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP ~)",
    "insertText": "FFileIoStoreReadRequestList()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } # endif bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} # endif FFileIoStoreReadRequest* OldHead = Head ;)",
    "insertText": "Clear()"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequestListIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequestListIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequestListIterator)",
    "insertText": "end()"
  },
  {
    "label": "PeekHead()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequest*)",
    "insertText": "PeekHead()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP)",
    "insertText": "check(Request->ListCookie == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Request -> ListCookie = ListCookie ; # endif)",
    "insertText": "if(Tail)"
  },
  {
    "label": "AppendSteal()",
    "kind": "Method",
    "detail": "Function (Tail -> Next = Request ; Request -> Previous = Tail ; } else { Head = Request ; Request -> Previous = nullptr ; } Tail = Request ; Request -> Next = nullptr ; } void)",
    "insertText": "AppendSteal(FFileIoStoreReadRequestList& List)"
  },
  {
    "label": "AppendSteal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSteal(ListHead, ListTail)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP)",
    "insertText": "check(Request)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Request -> ListCookie = 0 ; # endif)",
    "insertText": "if(Head == Request && Tail == Request)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Head = Tail = nullptr ; } else)",
    "insertText": "if(Head == Request)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Head = Request -> Next ; Head -> Previous = nullptr ; Request -> Next = nullptr ; } else)",
    "insertText": "if(Tail == Request)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Tail = Request -> Previous ; Tail -> Next = nullptr ; Request -> Previous = nullptr ; } else {)",
    "insertText": "check(Request->Next != nullptr && Request->Previous != nullptr)"
  },
  {
    "label": "AppendSteal()",
    "kind": "Method",
    "detail": "Function (Cursor -> ListCookie = 0 ; } # endif Head = Tail = nullptr ; } private : FFileIoStoreReadRequest* Head = nullptr ; FFileIoStoreReadRequest* Tail = nullptr ; # if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP uint32 ListCookie ; uint32 NextListCookie ; # endif void)",
    "insertText": "AppendSteal(FFileIoStoreReadRequest* ListHead, FFileIoStoreReadRequest* ListTail)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if CHECK_IO_STORE_READ_REQUEST_LIST_MEMBERSHIP)",
    "insertText": "for(FFileIoStoreReadRequest* Cursor = ListHead; Cursor; Cursor = Cursor->Next)"
  },
  {
    "label": "FFileIoStoreBufferAllocator()",
    "kind": "Method",
    "detail": "Function (Tail -> Next = ListHead ; ListHead -> Previous = Tail ; } else { Head = ListHead ; ListHead -> Previous = nullptr ; } Tail = ListTail ; } } ; class FFileIoStoreStats ; class FFileIoStoreBufferAllocator { public :)",
    "insertText": "FFileIoStoreBufferAllocator(FFileIoStoreStats& InStats) : Stats(InStats)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(uint64 MemorySize, uint64 BufferSize, uint32 BufferAlignment)"
  },
  {
    "label": "AllocBuffer()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreBuffer*)",
    "insertText": "AllocBuffer()"
  },
  {
    "label": "FreeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBuffer(FFileIoStoreBuffer* Buffer)"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "FFileIoStoreBlockCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFileIoStoreBlockCache()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(uint64 CacheMemorySize, uint64 ReadBufferSize)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(FFileIoStoreReadRequest* Block)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Store(const FFileIoStoreReadRequest* Block)"
  },
  {
    "label": "FFileIoStoreReadRequestSortKey()",
    "kind": "Method",
    "detail": "Function (private : struct FCachedBlock { FCachedBlock* LruPrev = nullptr ; FCachedBlock* LruNext = nullptr ; uint64 Key = 0 ; uint8* Buffer = nullptr ; } ; FFileIoStoreStats& Stats ; uint8* CacheMemory = nullptr ; TMap<uint64,FCachedBlock*> CachedBlocks ; FCachedBlock CacheLruHead ; FCachedBlock CacheLruTail ; uint64 ReadBufferSize = 0 ; } ; struct FFileIoStoreReadRequestSortKey { uint64 Offset = 0 ; uint64 Handle = 0 ; int32 Priority = 0 ;)",
    "insertText": "FFileIoStoreReadRequestSortKey()"
  },
  {
    "label": "FFileIoStoreReadRequestSortKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileIoStoreReadRequestSortKey(FFileIoStoreReadRequest* Request) : Offset(Request->Offset), Handle(Request->ContainerFilePartition->FileHandle), Priority(Request->Priority)"
  },
  {
    "label": "FFileIoStoreOffsetSortedRequestQueue()",
    "kind": "Method",
    "detail": "Function (} } ; class FFileIoStoreOffsetSortedRequestQueue { public :)",
    "insertText": "FFileIoStoreOffsetSortedRequestQueue(int32 InPriority)"
  },
  {
    "label": "FFileIoStoreOffsetSortedRequestQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreOffsetSortedRequestQueue(const FFileIoStoreOffsetSortedRequestQueue&)"
  },
  {
    "label": "FFileIoStoreOffsetSortedRequestQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFileIoStoreOffsetSortedRequestQueue(FFileIoStoreOffsetSortedRequestQueue&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreOffsetSortedRequestQueue&)",
    "insertText": "operator(const FFileIoStoreOffsetSortedRequestQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreOffsetSortedRequestQueue&)",
    "insertText": "operator(FFileIoStoreOffsetSortedRequestQueue&&)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPriority()"
  },
  {
    "label": "StealRequests()",
    "kind": "Method",
    "detail": "Function (} TArray<FFileIoStoreReadRequest*>)",
    "insertText": "StealRequests()"
  },
  {
    "label": "RemoveMisprioritizedRequests()",
    "kind": "Method",
    "detail": "Function (TArray<FFileIoStoreReadRequest*>)",
    "insertText": "RemoveMisprioritizedRequests()"
  },
  {
    "label": "RemoveCancelledRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCancelledRequests(TArray<FFileIoStoreReadRequest*>& OutCancelled)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequest*)",
    "insertText": "Pop(FFileIoStoreReadRequestSortKey LastSortKey)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "HandleContainerUnmounted()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HandleContainerUnmounted(const FFileIoStoreContainerFile& ContainerFile)"
  },
  {
    "label": "GetNextInternal()",
    "kind": "Method",
    "detail": "Function (private : int32 Priority ; int32 PeekRequestIndex = INDEX_NONE ; TArray<FFileIoStoreReadRequest*> Requests ; FFileIoStoreReadRequestList RequestsBySequence ; FFileIoStoreReadRequest*)",
    "insertText": "GetNextInternal(FFileIoStoreReadRequestSortKey LastSortKey, bool bPop)"
  },
  {
    "label": "RequestSortProjection()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequestSortKey)",
    "insertText": "RequestSortProjection(FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "RequestSortPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequestSortPredicate(const FFileIoStoreReadRequestSortKey& A, const FFileIoStoreReadRequestSortKey& B)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} ; class FFileIoStoreRequestQueue { public : FFileIoStoreReadRequest*)",
    "insertText": "Pop()"
  },
  {
    "label": "PopCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopCancelled(TArray<FFileIoStoreReadRequest*>& OutCancelled)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(FFileIoStoreReadRequest& Request)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(FFileIoStoreReadRequestList& Requests)"
  },
  {
    "label": "UpdateOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrder()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "QueueSortFunc()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "QueueSortFunc(const FFileIoStoreReadRequest& A, const FFileIoStoreReadRequest& B)"
  },
  {
    "label": "PushToPriorityQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushToPriorityQueues(FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "QueuePriorityProjection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "QueuePriorityProjection(const FFileIoStoreOffsetSortedRequestQueue& A)"
  },
  {
    "label": "FFileIoStoreReadRequestLink()",
    "kind": "Method",
    "detail": "Function (} bool bSortRequestsByOffset = false ; TArray<FFileIoStoreReadRequest*> Heap ; FCriticalSection CriticalSection ; TArray<FFileIoStoreOffsetSortedRequestQueue> SortedPriorityQueues ; FFileIoStoreReadRequestSortKey LastSortKey ; # if ! UE_BUILD_SHIPPING TMap<int32,uint32> RequestPriorityCounts ; # endif } ; template<T,uint16 SlabSize = 4 0 9 6> using TIoDispatcherSingleThreadedSlabAllocator = TSingleThreadedSlabAllocator<T,SlabSize> ; struct FFileIoStoreReadRequestLink {)",
    "insertText": "FFileIoStoreReadRequestLink(FFileIoStoreReadRequest& InReadRequest) : ReadRequest(InReadRequest)"
  },
  {
    "label": "GetLiveReadRequestsCount()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequestLink* Next = nullptr ; FFileIoStoreReadRequest& ReadRequest ; } ; class FFileIoStoreRequestAllocator { public : int64)",
    "insertText": "GetLiveReadRequestsCount()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(FFileIoStoreResolvedRequest* ResolvedRequest)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (ResolvedRequestAllocator .)",
    "insertText": "Destroy(ResolvedRequest)"
  },
  {
    "label": "AllocReadRequest()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequest*)",
    "insertText": "AllocReadRequest()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (+ + LiveReadRequestsCount ; return ReadRequestAllocator .)",
    "insertText": "Construct()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(FFileIoStoreReadRequest* ReadRequest)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (ReadRequestAllocator .)",
    "insertText": "Destroy(ReadRequest)"
  },
  {
    "label": "AllocCompressedBlock()",
    "kind": "Method",
    "detail": "Function (- - LiveReadRequestsCount ; } FFileIoStoreCompressedBlock*)",
    "insertText": "AllocCompressedBlock()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(FFileIoStoreCompressedBlock* CompressedBlock)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (CompressedBlockAllocator .)",
    "insertText": "Destroy(CompressedBlock)"
  },
  {
    "label": "AllocRequestLink()",
    "kind": "Method",
    "detail": "Function (} FFileIoStoreReadRequestLink*)",
    "insertText": "AllocRequestLink(FFileIoStoreReadRequest* ReadRequest)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(FFileIoStoreReadRequestLink* RequestLink)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (RequestLinkAllocator .)",
    "insertText": "Destroy(RequestLink)"
  },
  {
    "label": "FFileIoStoreResolvedRequest()",
    "kind": "Method",
    "detail": "Function (} private : TIoDispatcherSingleThreadedSlabAllocator<FFileIoStoreResolvedRequest> ResolvedRequestAllocator ; TIoDispatcherSingleThreadedSlabAllocator<FFileIoStoreReadRequest> ReadRequestAllocator ; TIoDispatcherSingleThreadedSlabAllocator<FFileIoStoreCompressedBlock> CompressedBlockAllocator ; TIoDispatcherSingleThreadedSlabAllocator<FFileIoStoreReadRequestLink> RequestLinkAllocator ; int64 LiveReadRequestsCount = 0 ; } ; struct FFileIoStoreResolvedRequest { public :)",
    "insertText": "FFileIoStoreResolvedRequest(FIoRequestImpl& InDispatcherRequest, FFileIoStoreContainerFile* InContainerFile, uint64 InResolvedOffset, uint64 InResolvedSize, int32 InPriority)"
  },
  {
    "label": "GetContainerFile()",
    "kind": "Method",
    "detail": "Function (const FFileIoStoreContainerFile*)",
    "insertText": "GetContainerFile()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateBuffer(uint64 Size)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (DispatcherRequest ->)",
    "insertText": "CreateBuffer(Size)"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (} FIoBuffer&)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "AddReadRequestLink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReadRequestLink(FFileIoStoreReadRequestLink* ReadRequestLink)"
  },
  {
    "label": "FFileIoStoreStats()",
    "kind": "Method",
    "detail": "Function (private : FIoRequestImpl* DispatcherRequest = nullptr ; FFileIoStoreContainerFile* ContainerFile ; FFileIoStoreReadRequestLink* ReadRequestsHead = nullptr ; FFileIoStoreReadRequestLink* ReadRequestsTail = nullptr ; const uint64 ResolvedOffset ; const uint64 ResolvedSize ; int32 Priority = 0 ; uint32 UnfinishedReadsCount = 0 ; bool bFailed = false ; bool bCancelled = false ; class FFileIoStore ; class FFileIoStoreRequestTracker ; } ; # if UE_FILEIOSTORE_STATS_ENABLED class FFileIoStoreStats { public :)",
    "insertText": "FFileIoStoreStats()"
  },
  {
    "label": "OnFilesystemReadStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesystemReadStarted(const FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "OnFilesystemReadsStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesystemReadsStarted(const FFileIoStoreReadRequestList& Requests)"
  },
  {
    "label": "OnFilesystemReadCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesystemReadCompleted(const FFileIoStoreReadRequest* Request)"
  },
  {
    "label": "OnFilesystemReadsCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesystemReadsCompleted(const FFileIoStoreReadRequestList& CompletedRequests)"
  },
  {
    "label": "BytesToApproxMB()",
    "kind": "Method",
    "detail": "Function (FTSTicker::FDelegateHandle TickerHandle ; float)",
    "insertText": "BytesToApproxMB(uint64 Bytes)"
  },
  {
    "label": "BytesToApproxKB()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "BytesToApproxKB(uint64 Bytes)"
  },
  {
    "label": "CsvTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CsvTick(float DeltaTime)"
  },
  {
    "label": "OnReadRequestsQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadRequestsQueued(const FFileIoStoreReadRequestList& Requests)"
  },
  {
    "label": "OnReadRequestsCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadRequestsCompleted(const FFileIoStoreReadRequestList& Requests)"
  },
  {
    "label": "OnDecompressQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecompressQueued(const FFileIoStoreCompressedBlock* CompressedBlock)"
  },
  {
    "label": "OnDecompressComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecompressComplete(const FFileIoStoreCompressedBlock* CompressedBlock)"
  },
  {
    "label": "OnBytesScattered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBytesScattered(int64 BytesScattered)"
  },
  {
    "label": "OnBlockCacheStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlockCacheStore(uint64 NumBytes)"
  },
  {
    "label": "OnBlockCacheHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlockCacheHit(uint64 NumBytes)"
  },
  {
    "label": "OnBlockCacheMiss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlockCacheMiss(uint64 NumBytes)"
  },
  {
    "label": "OnSequentialRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequentialRead()"
  },
  {
    "label": "OnSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeek(uint64 LastOffset, uint64 NewOffset)"
  },
  {
    "label": "OnHandleChangeSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHandleChangeSeek()"
  },
  {
    "label": "OnTocMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTocMounted(uint64 AllocatedSize)"
  },
  {
    "label": "OnTocUnmounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTocUnmounted(uint64 AllocatedSize)"
  },
  {
    "label": "OnBufferReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferReleased()"
  },
  {
    "label": "OnBufferAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferAllocated()"
  },
  {
    "label": "IPlatformFileIoStore()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FInitializePlatformFileIoStoreParams { const FWakeUpIoDispatcherThreadDelegate* WakeUpDispatcherThreadDelegate = nullptr ; FFileIoStoreRequestAllocator* RequestAllocator = nullptr ; FFileIoStoreBufferAllocator* BufferAllocator = nullptr ; FFileIoStoreBlockCache* BlockCache = nullptr ; FFileIoStoreStats* Stats = nullptr ; } ; class IPlatformFileIoStore { public : ~)",
    "insertText": "IPlatformFileIoStore()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FInitializePlatformFileIoStoreParams& Params)"
  },
  {
    "label": "OpenContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenContainer(const TCHAR* ContainerFilePath, uint64& ContainerFileHandle, uint64& ContainerFileSize)"
  },
  {
    "label": "CloseContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseContainer(uint64 ContainerFileHandle)"
  },
  {
    "label": "CreateCustomRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCustomRequests(FFileIoStoreResolvedRequest& ResolvedRequest, FFileIoStoreReadRequestList& OutRequests)"
  },
  {
    "label": "StartRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRequests(FFileIoStoreRequestQueue& RequestQueue)"
  },
  {
    "label": "GetCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompletedRequests(FFileIoStoreReadRequestList& OutRequests)"
  },
  {
    "label": "ServiceNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceNotify()"
  },
  {
    "label": "ServiceWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceWait()"
  },
  {
    "label": "CreatePlatformFileIoStore()",
    "kind": "Method",
    "detail": "Function (} ; class IPlatformFileIoStoreModule : public IModuleInterface { public : TUniquePtr<IPlatformFileIoStore>)",
    "insertText": "CreatePlatformFileIoStore()"
  }
]