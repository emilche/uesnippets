[
  {
    "label": "LambdaResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LambdaResolver"
  },
  {
    "label": "LambdaResolver()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_LAMBDARESOLVER_H # define LLVM_EXECUTIONENGINE_ORC_LAMBDARESOLVER_H # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ExecutionEngine / RuntimeDyld . h \" # include<memory> # include<vector> namespace llvm { namespace orc { template<ExternalLookupFtorT,DylibLookupFtorT> class LambdaResolver : public RuntimeDyld::SymbolResolver { public :)",
    "insertText": "LambdaResolver(ExternalLookupFtorT ExternalLookupFtor, DylibLookupFtorT DylibLookupFtor) : ExternalLookupFtor(ExternalLookupFtor), DylibLookupFtor(DylibLookupFtor)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} RuntimeDyld::SymbolInfo)",
    "insertText": "findSymbol(const std::string &Name)"
  },
  {
    "label": "findSymbolInLogicalDylib()",
    "kind": "Method",
    "detail": "Function (} RuntimeDyld::SymbolInfo)",
    "insertText": "findSymbolInLogicalDylib(const std::string &Name)"
  },
  {
    "label": "createLambdaResolver()",
    "kind": "Method",
    "detail": "Function (} private : ExternalLookupFtorT ExternalLookupFtor ; DylibLookupFtorT DylibLookupFtor ; } ; template<ExternalLookupFtorT,DylibLookupFtorT> std::unique_ptr<LambdaResolver<ExternalLookupFtorT,DylibLookupFtorT>>)",
    "insertText": "createLambdaResolver(ExternalLookupFtorT ExternalLookupFtor, DylibLookupFtorT DylibLookupFtor)"
  },
  {
    "label": "LR()",
    "kind": "Method",
    "detail": "Function (typedef LambdaResolver<ExternalLookupFtorT,DylibLookupFtorT> LR ; return make_unique<)",
    "insertText": "LR(std::move(ExternalLookupFtor), std::move(DylibLookupFtor))"
  }
]