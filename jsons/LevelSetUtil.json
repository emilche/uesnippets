[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "GridOrTreeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridOrTreeType"
  },
  {
    "label": "MaskInteriorVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskInteriorVoxels"
  },
  {
    "label": "MaskInteriorTiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskInteriorTiles"
  },
  {
    "label": "PopulateTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PopulateTree"
  },
  {
    "label": "LabelBoundaryVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LabelBoundaryVoxels"
  },
  {
    "label": "FlipRegionSign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlipRegionSign"
  },
  {
    "label": "FindMinVoxelValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindMinVoxelValue"
  },
  {
    "label": "FindMinTileValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindMinTileValue"
  },
  {
    "label": "SDFVoxelsToFogVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDFVoxelsToFogVolume"
  },
  {
    "label": "SDFTilesToFogVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDFTilesToFogVolume"
  },
  {
    "label": "FillMaskBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FillMaskBoundary"
  },
  {
    "label": "TreeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeType"
  },
  {
    "label": "TreeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeType"
  },
  {
    "label": "MaskIsovalueCrossingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskIsovalueCrossingVoxels"
  },
  {
    "label": "NodeMaskSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeMaskSegment"
  },
  {
    "label": "NodeMaskSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeMaskSegment"
  },
  {
    "label": "SegmentNodeMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SegmentNodeMask"
  },
  {
    "label": "SegmentNodeMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SegmentNodeMask"
  },
  {
    "label": "ConnectNodeMaskSegments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConnectNodeMaskSegments"
  },
  {
    "label": "ConnectNodeMaskSegments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConnectNodeMaskSegments"
  },
  {
    "label": "MaskSegmentGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSegmentGroup"
  },
  {
    "label": "MaskSegmentGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskSegmentGroup"
  },
  {
    "label": "ExpandLeafNodeRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandLeafNodeRegion"
  },
  {
    "label": "ExpandLeafNodeRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandLeafNodeRegion"
  },
  {
    "label": "FillLeafNodeVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FillLeafNodeVoxels"
  },
  {
    "label": "ExpandNarrowbandMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandNarrowbandMask"
  },
  {
    "label": "FloodFillSign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FloodFillSign"
  },
  {
    "label": "MaskedCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskedCopy"
  },
  {
    "label": "Copy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Copy"
  },
  {
    "label": "Copy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Copy"
  },
  {
    "label": "ComputeActiveVoxelCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeActiveVoxelCount"
  },
  {
    "label": "GreaterCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GreaterCount"
  },
  {
    "label": "GridOrTreeConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridOrTreeConstructor"
  },
  {
    "label": "GridOrTreeConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridOrTreeConstructor"
  },
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "GridOrTreeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridOrTreeType"
  },
  {
    "label": "extractIsosurfaceMask()",
    "kind": "Method",
    "detail": "Function (ValueConverter<bool>::Type::Ptr)",
    "insertText": "extractIsosurfaceMask(const GridOrTreeType& volume, typename GridOrTreeType::ValueType isovalue)"
  },
  {
    "label": "extractActiveVoxelSegmentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractActiveVoxelSegmentMasks(const GridOrTreeType& volume,\n    std::vector<typename GridOrTreeType::template ValueConverter<bool>::Type::Ptr>& masks)"
  },
  {
    "label": "segmentActiveVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segmentActiveVoxels(const GridOrTreeType& volume,\n    std::vector<typename GridOrTreeType::Ptr>& segments)"
  },
  {
    "label": "segmentSDF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segmentSDF(const GridOrTreeType& volume, std::vector<typename GridOrTreeType::Ptr>& segments)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "acc(*mTreePt)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskAcc(*mFillMask)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "distAcc(*mTree)"
  },
  {
    "label": "BoolLeafNodeType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "BoolLeafNodeType(origin, false)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<CharTreeType>)",
    "insertText": "maskAcc(*maskTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(tree)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (BoolTreeType::ValueAllIter)",
    "insertText": "it(*maskTree)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Index(-1)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "distAcc(*mDistTree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (BoolTreeType>)",
    "insertText": "maskAcc(*mMaskTree)"
  },
  {
    "label": "newMaskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<BoolTreeType>)",
    "insertText": "newMaskAcc(mNewMaskTree)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "distAcc(*mTree)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ExpandLeafNodeRegion<TreeType>)",
    "insertText": "op(distTree, narrowBandMask, nodes)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (Copy)",
    "insertText": "op(*mTree, nodes)"
  },
  {
    "label": "inputAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "inputAcc(*mInputTree)"
  },
  {
    "label": "outputAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "outputAcc(*mOutputTreePtr)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(tree)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (TreeType::ValueAllIter)",
    "insertText": "it(*newTree)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (TreeType::ValueAllIter)",
    "insertText": "it(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (level_set_util_internal::MaskIsovalueCrossingVoxels<TreeType>)",
    "insertText": "op(tree, nodes, *mask, isovalue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (segment)",
    "insertText": "for(size_t n = 0, N = leafnodes.size()"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (level_set_util_internal::MaskSegmentGroup<BoolTreeType>)",
    "insertText": "op(segmentGroup)"
  },
  {
    "label": "outputSegmentArray()",
    "kind": "Method",
    "detail": "Function (std::vector<TreePtrType>)",
    "insertText": "outputSegmentArray(numSegments)"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, numSegments)"
  },
  {
    "label": "outputSegmentArray()",
    "kind": "Method",
    "detail": "Function (std::vector<TreePtrType>)",
    "insertText": "outputSegmentArray(numSegments)"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, numSegments)"
  }
]