[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FKConvexGeomRenderInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKConvexGeomRenderInfo"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" PhysicsEngine / ConvexElem . h \" # include \" PhysicsEngine / LevelSetElem . h \" # include \" PhysicsEngine / BoxElem . h \" # include \" PhysicsEngine / SkinnedLevelSetElem . h \" # include \" PhysicsEngine / SphereElem . h \" # include \" PhysicsEngine / SphylElem . h \" # include \" PhysicsEngine / TaperedCapsuleElem . h \" # include \" Async / Mutex . h \" # include \" AggregateGeom . generated . h \" class FMaterialRenderProxy ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, editfixedsize, Category = \"Aggregate Geometry\", meta = (DisplayName = \"Spheres\", TitleProperty = \"Name\"))"
  },
  {
    "label": "FKAggregateGeom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKAggregateGeom() : RenderInfoPtr(nullptr)"
  },
  {
    "label": "FKAggregateGeom()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKAggregateGeom(const FKAggregateGeom& Other) : RenderInfoPtr(nullptr)"
  },
  {
    "label": "CloneAgg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneAgg(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FKAggregateGeom&)",
    "insertText": "operator(const FKAggregateGeom& Other)"
  },
  {
    "label": "FreeRenderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeRenderInfo()"
  },
  {
    "label": "GetElementCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetElementCount(EAggCollisionShape::Type Type)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (} FKShapeElem*)",
    "insertText": "GetElement(const EAggCollisionShape::Type Type, const int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Index = InIndex ;)",
    "insertText": "if(Index < SphereElems.Num())"
  },
  {
    "label": "FKSphereElem()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex = GetElementIndexByName<)",
    "insertText": "FKSphereElem(MakeArrayView(SphereElems), InName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = 0 ;)",
    "insertText": "if(FoundIndex != INDEX_NONE)"
  },
  {
    "label": "FKBoxElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKBoxElem(MakeArrayView(BoxElems), InName)"
  },
  {
    "label": "FKSphylElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKSphylElem(MakeArrayView(SphylElems), InName)"
  },
  {
    "label": "FKConvexElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKConvexElem(MakeArrayView(ConvexElems), InName)"
  },
  {
    "label": "FKTaperedCapsuleElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKTaperedCapsuleElem(MakeArrayView(TaperedCapsuleElems), InName)"
  },
  {
    "label": "FKLevelSetElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKLevelSetElem(MakeArrayView(LevelSetElems), InName)"
  },
  {
    "label": "FKSkinnedLevelSetElem()",
    "kind": "Method",
    "detail": "Function (FoundIndex = GetElementIndexByName<)",
    "insertText": "FKSkinnedLevelSetElem(MakeArrayView(SkinnedLevelSetElems), InName)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "CleanUp(auto& Elems)"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (Elems .)",
    "insertText": "RemoveAllSwap([](const FKShapeElem& Elem) { return Elem.bIsGenerated == false; })"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CleanUp(BoxElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(ConvexElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(SphylElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(SphereElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(TaperedCapsuleElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(LevelSetElems)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(SkinnedLevelSetElems)"
  },
  {
    "label": "EmptyElements()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "EmptyElements()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BoxElems .)",
    "insertText": "Empty()"
  },
  {
    "label": "FixupDeprecated()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA void)",
    "insertText": "FixupDeprecated(FArchive& Ar)"
  },
  {
    "label": "GetAggGeom()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetAggGeom(const FTransform& Transform, const FColor Color, const FMaterialRenderProxy* MatInst, bool bPerHullColor, bool bDrawSolid, bool bOutputVelocity, int32 ViewIndex, class FMeshElementCollector& Collector)"
  },
  {
    "label": "CalcAABB()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "CalcAABB(const FTransform& Transform)"
  },
  {
    "label": "CalcBoxSphereBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcBoxSphereBounds(FBoxSphereBounds& Output, const FTransform& LocalToWorld)"
  },
  {
    "label": "GetScaledVolume()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetScaledVolume(const FVector& Scale3D)"
  },
  {
    "label": "MakeDDCKey()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "MakeDDCKey()"
  },
  {
    "label": "CloneAgg()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CloneAgg(const FKAggregateGeom& Other)"
  },
  {
    "label": "GetElementByName()",
    "kind": "Method",
    "detail": "Function (SphereElems = Other . SphereElems ; BoxElems = Other . BoxElems ; SphylElems = Other . SphylElems ; ConvexElems = Other . ConvexElems ; TaperedCapsuleElems = Other . TaperedCapsuleElems ; LevelSetElems = Other . LevelSetElems ; SkinnedLevelSetElems = Other . SkinnedLevelSetElems ; } template<class T> const FKShapeElem*)",
    "insertText": "GetElementByName(TArrayView<const T> Elements, const FName InName)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FKShapeElem* FoundElem = Elements .)",
    "insertText": "FindByPredicate([InName](const T& Elem) { return InName == Elem.GetName(); })"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex = Elements .)",
    "insertText": "IndexOfByPredicate([InName](const T& Elem) { return InName == Elem.GetName(); })"
  }
]