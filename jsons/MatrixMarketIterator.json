[
  {
    "label": "MatrixMarketIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixMarketIterator"
  },
  {
    "label": "dirent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dirent"
  },
  {
    "label": "MatrixMarketIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BROWSE_MATRICES_H # define EIGEN_BROWSE_MATRICES_H namespace Eigen { enum { SPD = 0 x100,NonSymmetric = 0 x0 } ; template<Scalar> class MatrixMarketIterator { typedef NumTraits<Scalar>::Real RealScalar ; public : typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef SparseMatrix<Scalar,ColMajor> MatrixType ; public :)",
    "insertText": "MatrixMarketIterator(const std::string &folder) : m_sym(0), m_isvalid(false), m_matIsLoaded(false), m_hasRhs(false), m_hasrefX(false), m_folder(folder)"
  },
  {
    "label": "opendir()",
    "kind": "Method",
    "detail": "Function (m_folder_id =)",
    "insertText": "opendir(folder.c_str())"
  },
  {
    "label": "MatrixMarketIterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MatrixMarketIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MatrixMarketIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Getnextvalidmatrix()",
    "kind": "Method",
    "detail": "Function (m_matIsLoaded = false ; m_hasrefX = false ; m_hasRhs = false ;)",
    "insertText": "Getnextvalidmatrix()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string matrix_file = m_folder + \" / \" + m_matname + \" . mtx \" ;)",
    "insertText": "if(!loadMarket(m_mat, matrix_file))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Warning loadMarket failed when loading \\ \" \"<<matrix_file<<\" \\ \" \"<<std::endl ; m_matIsLoaded = false ; return m_mat ; } m_matIsLoaded = true ;)",
    "insertText": "if(m_sym != NonSymmetric)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (RealScalar diag_norm = m_mat .)",
    "insertText": "diagonal().norm()"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (RealScalar lower_norm = m_mat . template triangularView<)",
    "insertText": "Lower().norm()"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (RealScalar upper_norm = m_mat . template triangularView<)",
    "insertText": "Upper().norm()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "tmp(m_mat)"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (m_mat = tmp . template selfadjointView<)",
    "insertText": "Lower()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(upper_norm>diag_norm && lower_norm==diag_norm)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (m_mat = tmp . template selfadjointView<)",
    "insertText": "Upper()"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (} } return m_mat ; } VectorType&)",
    "insertText": "rhs()"
  },
  {
    "label": "Fileexists()",
    "kind": "Method",
    "detail": "Function (std::string rhs_file ; rhs_file = m_folder + \" / \" + m_matname + \" _b . mtx \" ; m_hasRhs =)",
    "insertText": "Fileexists(rhs_file)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_rhs .)",
    "insertText": "resize(m_mat.cols())"
  },
  {
    "label": "loadMarketVector()",
    "kind": "Method",
    "detail": "Function (m_hasRhs =)",
    "insertText": "loadMarketVector(m_rhs, rhs_file)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!m_hasRhs)"
  },
  {
    "label": "setRandom()",
    "kind": "Method",
    "detail": "Function (m_refX .)",
    "insertText": "setRandom()"
  },
  {
    "label": "refX()",
    "kind": "Method",
    "detail": "Function (m_rhs = m_mat* m_refX ; m_hasrefX = true ; m_hasRhs = true ; } return m_rhs ; } VectorType&)",
    "insertText": "refX()"
  },
  {
    "label": "Fileexists()",
    "kind": "Method",
    "detail": "Function (std::string lhs_file ; lhs_file = m_folder + \" / \" + m_matname + \" _x . mtx \" ; m_hasrefX =)",
    "insertText": "Fileexists(lhs_file)"
  },
  {
    "label": "loadMarketVector()",
    "kind": "Method",
    "detail": "Function (m_hasrefX =)",
    "insertText": "loadMarketVector(m_refX, lhs_file)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else m_refX .)",
    "insertText": "resize(0)"
  },
  {
    "label": "Fileexists()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "Fileexists(std::string file)"
  },
  {
    "label": "file_id()",
    "kind": "Method",
    "detail": "Function (std::ifstream)",
    "insertText": "file_id(file.c_str())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (m_isvalid = false ;)",
    "insertText": "while((m_curs_id = readdir(m_folder_id)) != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isvalid = false ; std::string curfile ; curfile = m_folder + \" / \" + m_curs_id -> d_name ;)",
    "insertText": "if(m_curs_id->d_type == DT_DIR)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool isvector,iscomplex = false ;)",
    "insertText": "if(!getMarketHeader(curfile,m_sym,iscomplex,isvector))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iscomplex)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (} std::string filename = m_curs_id -> d_name ; m_matname = filename .)",
    "insertText": "substr(0, filename.length()-4)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_t found = m_matname .)",
    "insertText": "find(\"SPD\")"
  }
]