[
  {
    "label": "blake3_flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "blake3_flags"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BLAKE3_IMPL_H # define BLAKE3_IMPL_H # include<assert . h> # include<stdbool . h> # include<stddef . h> # include<stdint . h> # include<string . h> # include \" blake3 . h \" enum blake3_flags { CHUNK_START = 1<<0,CHUNK_END = 1<<1,PARENT = 1<<2,ROOT = 1<<3,KEYED_HASH = 1<<4,DERIVE_KEY_CONTEXT = 1<<5,DERIVE_KEY_MATERIAL = 1<<6,} ; # if)",
    "insertText": "defined(_MSC_VER) #define INLINE static __forceinline #else #define INLINE static inline __attribute__((always_inline)) #endif #if defined(__x86_64__) || defined(_M_X64) #define IS_X86 #define IS_X86_64 #endif #if defined(__i386__) || defined(_M_IX86) #define IS_X86 #define IS_X86_32 #endif #if defined(__aarch64__) || defined(_M_ARM64) #define IS_AARCH64 #endif #if defined(IS_X86) #if defined(_MSC_VER) #include <intrin.h> #endif #include <immintrin.h> #endif #if !defined(BLAKE3_USE_NEON) #if defined(IS_AARCH64) #define BLAKE3_USE_NEON 1 #else #define BLAKE3_USE_NEON 0 #endif #endif #if defined(IS_X86) #define MAX_SIMD_DEGREE 16 #elif BLAKE3_USE_NEON == 1 #define MAX_SIMD_DEGREE 4 #else #define MAX_SIMD_DEGREE 1 #endif #define MAX_SIMD_DEGREE_OR_2 (MAX_SIMD_DEGREE > 2 ? MAX_SIMD_DEGREE : 2)"
  },
  {
    "label": "highest_one()",
    "kind": "Method",
    "detail": "Function (0 x6A09E667UL,0 xBB67AE85UL,0 x3C6EF372UL,0 xA54FF53AUL,0 x510E527FUL,0 x9B05688CUL,0 x1F83D9ABUL,0 x5BE0CD19UL } ; const uint8_t MSG_SCHEDULE [ 7 ] [ 1 6 ] = { { 0,1,2,3,4,5,6,7,8,9,1 0,1 1,1 2,1 3,1 4,1 5 },{ 2,6,3,1 0,7,0,4,1 3,1,1 1,1 2,5,9,1 4,1 5,8 },{ 3,4,1 0,1 2,1 3,2,7,1 4,6,5,9,0,1 1,1 5,8,1 },{ 1 0,7,1 2,9,1 4,3,1 3,1 5,4,0,1 1,2,5,8,1,6 },{ 1 2,1 3,9,1 1,1 5,1 0,1 4,8,7,2,5,3,0,1,6,4 },{ 9,1 4,1 1,5,8,1 2,1 5,1,1 3,3,0,1 0,2,6,4,7 },{ 1 1,1 5,5,0,1,9,8,6,1 4,1 0,2,1 2,3,4,7,1 3 },} ; unsigned int)",
    "insertText": "highest_one(uint64_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) return 63 ^ __builtin_clzll(x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && defined(IS_X86_64)"
  },
  {
    "label": "_BitScanReverse64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanReverse64(&index, x)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (unsigned long index ;)",
    "insertText": "_BitScanReverse(&index, (unsigned long)(x >> 32))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x>> = 3 2 ; c + = 3 2 ; })",
    "insertText": "if(x & 0x00000000ffff0000ULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x>> = 1 6 ; c + = 1 6 ; })",
    "insertText": "if(x & 0x000000000000ff00ULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x>> = 8 ; c + = 8 ; })",
    "insertText": "if(x & 0x00000000000000f0ULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x>> = 4 ; c + = 4 ; })",
    "insertText": "if(x & 0x000000000000000cULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x>> = 2 ; c + = 2 ; })",
    "insertText": "if(x & 0x0000000000000002ULL)"
  },
  {
    "label": "popcnt()",
    "kind": "Method",
    "detail": "Function (c + = 1 ; } return c ; # endif } unsigned int)",
    "insertText": "popcnt(uint64_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) return __builtin_popcountll(x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# else unsigned int count = 0 ;)",
    "insertText": "while(x != 0)"
  },
  {
    "label": "round_down_to_power_of_2()",
    "kind": "Method",
    "detail": "Function (count + = 1 ; x& = x - 1 ; } return count ; # endif } uint64_t)",
    "insertText": "round_down_to_power_of_2(uint64_t x)"
  },
  {
    "label": "counter_low()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "counter_low(uint64_t counter)"
  },
  {
    "label": "counter_high()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "counter_high(uint64_t counter)"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "load32(const void *src)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "p(const uint8_t *)"
  },
  {
    "label": "load_key_words()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_key_words(const uint8_t key[BLAKE3_KEY_LEN], uint32_t key_words[8])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 0 ] =)",
    "insertText": "load32(&key[0 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 1 ] =)",
    "insertText": "load32(&key[1 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 2 ] =)",
    "insertText": "load32(&key[2 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 3 ] =)",
    "insertText": "load32(&key[3 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 4 ] =)",
    "insertText": "load32(&key[4 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 5 ] =)",
    "insertText": "load32(&key[5 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 6 ] =)",
    "insertText": "load32(&key[6 * 4])"
  },
  {
    "label": "load32()",
    "kind": "Method",
    "detail": "Function (key_words [ 7 ] =)",
    "insertText": "load32(&key[7 * 4])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store32(void *dst, uint32_t w)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "p(uint8_t *)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint8_t)(w >> 0)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint8_t)(w >> 8)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint8_t)(w >> 16)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint8_t)(w >> 24)"
  },
  {
    "label": "store_cv_words()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_cv_words(uint8_t bytes_out[32], uint32_t cv_words[8])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[0 * 4], cv_words[0])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[1 * 4], cv_words[1])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[2 * 4], cv_words[2])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[3 * 4], cv_words[3])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[4 * 4], cv_words[4])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[5 * 4], cv_words[5])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[6 * 4], cv_words[6])"
  },
  {
    "label": "store32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store32(&bytes_out[7 * 4], cv_words[7])"
  },
  {
    "label": "blake3_compress_in_place()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "blake3_compress_in_place(uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags)"
  },
  {
    "label": "blake3_compress_xof()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_xof(const uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags, uint8_t out[64])"
  },
  {
    "label": "blake3_hash_many()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_hash_many(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "blake3_simd_degree()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "blake3_simd_degree(void)"
  },
  {
    "label": "blake3_compress_in_place_portable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_in_place_portable(uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags)"
  },
  {
    "label": "blake3_compress_xof_portable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_xof_portable(const uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags, uint8_t out[64])"
  },
  {
    "label": "blake3_hash_many_portable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_hash_many_portable(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(IS_X86) #if !defined(BLAKE3_NO_SSE2) void blake3_compress_in_place_sse2(uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags)"
  },
  {
    "label": "blake3_compress_xof_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_xof_sse2(const uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags, uint8_t out[64])"
  },
  {
    "label": "blake3_hash_many_sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_hash_many_sse2(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(BLAKE3_NO_SSE41) void blake3_compress_in_place_sse41(uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags)"
  },
  {
    "label": "blake3_compress_xof_sse41()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_xof_sse41(const uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags, uint8_t out[64])"
  },
  {
    "label": "blake3_hash_many_sse41()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_hash_many_sse41(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(BLAKE3_NO_AVX2) void blake3_hash_many_avx2(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(BLAKE3_NO_AVX512) void blake3_compress_in_place_avx512(uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags)"
  },
  {
    "label": "blake3_compress_xof_avx512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_compress_xof_avx512(const uint32_t cv[8], const uint8_t block[BLAKE3_BLOCK_LEN], uint8_t block_len, uint64_t counter, uint8_t flags, uint8_t out[64])"
  },
  {
    "label": "blake3_hash_many_avx512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blake3_hash_many_avx512(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  },
  {
    "label": "blake3_hash_many_neon()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if BLAKE3_USE_NEON = = 1 void)",
    "insertText": "blake3_hash_many_neon(const uint8_t *const *inputs, size_t num_inputs, size_t blocks, const uint32_t key[8], uint64_t counter, bool increment_counter, uint8_t flags, uint8_t flags_start, uint8_t flags_end, uint8_t *out)"
  }
]