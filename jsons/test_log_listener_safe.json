[
  {
    "label": "TestLogListenerSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestLogListenerSafe"
  },
  {
    "label": "SimpleTestLogListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTestLogListener"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_TEST_LOG_LISTENER_SAFE_H_ # define BASE_FUCHSIA_TEST_LOG_LISTENER_SAFE_H_ # include<fuchsia / logger / cpp / fidl_test_base . h> # include<lib / fidl / cpp / binding . h> # include<lib / zx / time . h> # include<memory> # include<string> # include<vector> # include \" base / callback . h \" # include \" base / containers / circular_deque . h \" # include \" base / strings / string_piece . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class TestLogListenerSafe final : public fuchsia::logger::testing::LogListenerSafe_TestBase { public : using OnLogMessageCallback = base::RepeatingCallback<)",
    "insertText": "void(const fuchsia::logger::LogMessage&)"
  },
  {
    "label": "TestLogListenerSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLogListenerSafe()"
  },
  {
    "label": "TestLogListenerSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLogListenerSafe(const TestLogListenerSafe&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestLogListenerSafe&)",
    "insertText": "operator(const TestLogListenerSafe&)"
  },
  {
    "label": "set_on_log_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_on_log_message(OnLogMessageCallback callback)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Log(fuchsia::logger::LogMessage message, LogCallback callback)"
  },
  {
    "label": "LogMany()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMany(std::vector<fuchsia::logger::LogMessage> messages, LogManyCallback callback)"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Done()"
  },
  {
    "label": "NotImplemented_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotImplemented_(const std::string& name)"
  },
  {
    "label": "SimpleTestLogListener()",
    "kind": "Method",
    "detail": "Function (OnLogMessageCallback on_log_message_ ; } ; class SimpleTestLogListener { public :)",
    "insertText": "SimpleTestLogListener()"
  },
  {
    "label": "SimpleTestLogListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTestLogListener(const SimpleTestLogListener&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleTestLogListener&)",
    "insertText": "operator(const SimpleTestLogListener&)"
  },
  {
    "label": "ListenToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListenToLog(fuchsia::logger::Log* log, std::unique_ptr<fuchsia::logger::LogFilterOptions> options)"
  },
  {
    "label": "RunUntilMessageReceived()",
    "kind": "Method",
    "detail": "Function (absl::optional<fuchsia::logger::LogMessage>)",
    "insertText": "RunUntilMessageReceived(base::StringPiece expected_string)"
  },
  {
    "label": "PushLoggedMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushLoggedMessage(const fuchsia::logger::LogMessage& message)"
  }
]