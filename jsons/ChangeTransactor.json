[
  {
    "label": "FChangeTransactor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeTransactor"
  },
  {
    "label": "FScopedCompoundTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCompoundTransaction"
  },
  {
    "label": "FChangeTransactor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Change . h \" # include \" Engine / Engine . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Misc / ITransaction . h \" # if WITH_EDITOR namespace UE { struct FChangeTransactor {)",
    "insertText": "FChangeTransactor() : TransactionObject(nullptr), PendingTransactionIndex(INDEX_NONE), TransactedChanges(0)"
  },
  {
    "label": "FChangeTransactor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChangeTransactor(UObject* InTransactionObject) : TransactionObject(InTransactionObject), PendingTransactionIndex(INDEX_NONE), TransactedChanges(0)"
  },
  {
    "label": "FChangeTransactor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChangeTransactor()"
  },
  {
    "label": "SetTransactionObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransactionObject(UObject* InTransactionObject)"
  },
  {
    "label": "OpenTransaction()",
    "kind": "Method",
    "detail": "Function (TransactionObject = InTransactionObject ; } void)",
    "insertText": "OpenTransaction(const FText& TransactionDescription)"
  },
  {
    "label": "FCompoundChangeInput()",
    "kind": "Method",
    "detail": "Function (CompoundChangeData = MakeUnique<)",
    "insertText": "FCompoundChangeInput()"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (PendingTransactionIndex = GEngine ->)",
    "insertText": "BeginTransaction(TEXT(\"FChangeTransactor\"), TransactionDescription, TransactionObject.Get())"
  },
  {
    "label": "CloseTransaction()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CloseTransaction()"
  },
  {
    "label": "FCompoundChange()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FCompoundChange> CompoundAction = MakeUnique<)",
    "insertText": "FCompoundChange(MoveTemp(*CompoundChangeData))"
  },
  {
    "label": "StoreUndo()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "StoreUndo(TransactionObject.Get(), MoveTemp(CompoundAction))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(PendingTransactionIndex != -1)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (GEngine ->)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} PendingTransactionIndex = - 1 ; CompoundChangeData .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsTransactionPending()",
    "kind": "Method",
    "detail": "Function (TransactedChanges = 0 ; } bool)",
    "insertText": "IsTransactionPending()"
  },
  {
    "label": "AddTransactionChange()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> void)",
    "insertText": "AddTransactionChange(TArgs&&... Args)"
  },
  {
    "label": "CheckTransactionObject()",
    "kind": "Method",
    "detail": "Function (const bool bSwapBasedChange = TPointerIsConvertibleFromTo<T,FSwapChange>::Value ;)",
    "insertText": "CheckTransactionObject()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<T> Change = MakeUnique<)",
    "insertText": "T(Forward<TArgs>(Args)...)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CompoundChangeData -> Subchanges .)",
    "insertText": "Add(MoveTemp(Change))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(GUndo)"
  },
  {
    "label": "StoreUndo()",
    "kind": "Method",
    "detail": "Function (GUndo ->)",
    "insertText": "StoreUndo(TransactionObject.Get(), MoveTemp(Change))"
  },
  {
    "label": "CanTransactChanges()",
    "kind": "Method",
    "detail": "Function (+ + TransactedChanges ; } } } bool)",
    "insertText": "CanTransactChanges()"
  },
  {
    "label": "FScopedCompoundTransaction()",
    "kind": "Method",
    "detail": "Function (} private : TWeakObjectPtr<UObject> TransactionObject ; int32 PendingTransactionIndex ; TUniquePtr<FCompoundChangeInput> CompoundChangeData ; int32 TransactedChanges ; } ; struct FScopedCompoundTransaction {)",
    "insertText": "FScopedCompoundTransaction(FChangeTransactor& InTransactor, const FText& InDescription) : Transactor(InTransactor), bCreated(false)"
  },
  {
    "label": "OpenTransaction()",
    "kind": "Method",
    "detail": "Function (Transactor .)",
    "insertText": "OpenTransaction(InDescription)"
  },
  {
    "label": "FScopedCompoundTransaction()",
    "kind": "Method",
    "detail": "Function (bCreated = true ; } } ~)",
    "insertText": "FScopedCompoundTransaction()"
  }
]