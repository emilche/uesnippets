[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDrawTextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawTextInfo"
  },
  {
    "label": "FTooltipDrawState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Math / Color . h \" # include \" Templates / SharedPointer . h \" struct FSlateBrush ; namespace UE::Insights { class FDrawContext ; } class FTooltipDrawState { public : float BorderX = 6 . 0 f ; float BorderY = 3 . 0 f ; float MinWidth = 1 2 8 . 0 f ; float MinHeight = 0 . 0 f ; float DefaultTitleHeight = 1 4 . 0 f ; float DefaultLineHeight = 1 4 . 0 f ; float NameValueDX = 2 . 0 f ; FLinearColor DefaultTitleColor ; FLinearColor DefaultNameColor ; FLinearColor DefaultValueColor ; private : enum class FDrawTextType { Misc,Title,Name,Value,} ; struct FDrawTextInfo { float X ; float Y ; FVector2D TextSize ; FString Text ; FLinearColor Color ; FDrawTextType Type ; } ; public :)",
    "insertText": "FTooltipDrawState()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetContent()"
  },
  {
    "label": "AddTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTitle(FStringView Title)"
  },
  {
    "label": "AddTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTitle(FStringView Title, const FLinearColor& Color)"
  },
  {
    "label": "AddNameValueTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNameValueTextLine(FStringView Name, FStringView Value)"
  },
  {
    "label": "AddTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextLine(FStringView Text, const FLinearColor& Color)"
  },
  {
    "label": "AddTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextLine(const float X, const float Y, FStringView Text, const FLinearColor& Color)"
  },
  {
    "label": "UpdateLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayout()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "GetOpacity()",
    "kind": "Method",
    "detail": "Function (BackgroundColor = InBackgroundColor ; } float)",
    "insertText": "GetOpacity()"
  },
  {
    "label": "GetDesiredOpacity()",
    "kind": "Method",
    "detail": "Function (Opacity = InOpacity ; } float)",
    "insertText": "GetDesiredOpacity()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (DesiredOpacity = InDesiredOpacity ; } const FVector2D&)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (const FVector2D&)",
    "insertText": "GetPosition()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(const float PosX, const float PosY)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (Position . X = PosX ; Position . Y = PosY ; } void)",
    "insertText": "Draw(const UE::Insights::FDrawContext& DrawContext)"
  },
  {
    "label": "SetFontScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFontScale(float InFontScale)"
  },
  {
    "label": "GetFontScale()",
    "kind": "Method",
    "detail": "Function (FontScale = InFontScale ; } float)",
    "insertText": "GetFontScale()"
  }
]