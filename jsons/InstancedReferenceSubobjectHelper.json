[
  {
    "label": "FInstancedPropertyPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedPropertyPath"
  },
  {
    "label": "FPropertyLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyLink"
  },
  {
    "label": "FInstancedSubObjRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedSubObjRef"
  },
  {
    "label": "FFindInstancedReferenceSubobjectHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInstancedReferenceSubobjectHelper"
  },
  {
    "label": "FPropertyLink()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealType . h \" struct FInstancedPropertyPath { private : struct FPropertyLink {)",
    "insertText": "FPropertyLink(const FProperty* Property, int32 ArrayIndexIn, bool bIsMapValueIn) : PropertyPtr(Property), ArrayIndex(ArrayIndexIn), bIsMapValue(bIsMapValueIn)"
  },
  {
    "label": "FInstancedPropertyPath()",
    "kind": "Method",
    "detail": "Function (} const FProperty* PropertyPtr ; int32 ArrayIndex ; bool bIsMapValue ; } ; public :)",
    "insertText": "FInstancedPropertyPath(FProperty* RootProperty, int32 ArrayIndex = INDEX_NONE, bool bIsMapValue = false)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(RootProperty, ArrayIndex, bIsMapValue)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(const FProperty* Property, int32 ArrayIndex = INDEX_NONE, bool bIsMapValue = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PropertyChain .)",
    "insertText": "Add(FPropertyLink(Property, ArrayIndex, bIsMapValue))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Pop()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (PropertyChain .)",
    "insertText": "RemoveAt(PropertyChain.Num() - 1)"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (} const FProperty*)",
    "insertText": "Head()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "Resolve(const UObject* Container)"
  },
  {
    "label": "FInstancedSubObjRef()",
    "kind": "Method",
    "detail": "Function (private : TArray<FPropertyLink> PropertyChain ; } ; struct FInstancedSubObjRef {)",
    "insertText": "FInstancedSubObjRef(UObject* SubObj, const FInstancedPropertyPath& PropertyPathIn) : SubObjInstance(SubObj) , PropertyPath(PropertyPathIn)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "UObject()"
  },
  {
    "label": "GetInstancedSubObjects()",
    "kind": "Method",
    "detail": "Function (} UObject* SubObjInstance ; FInstancedPropertyPath PropertyPath ; } ; class FFindInstancedReferenceSubobjectHelper { public : template<T> void)",
    "insertText": "GetInstancedSubObjects(const UObject* Container, T& OutObjects)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (const UClass* ContainerClass = Container ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "RootPropertyPath()",
    "kind": "Method",
    "detail": "Function (FInstancedPropertyPath)",
    "insertText": "RootPropertyPath(Prop, ArrayIdx)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (const uint8* ValuePtr = Prop -> ContainerPtrToValuePtr<)",
    "insertText": "uint8(Container, ArrayIdx)"
  },
  {
    "label": "GetInstancedSubObjectsRecursive()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "GetInstancedSubObjectsRecursive(const UObject* Container, T& OutObjects)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Duplicate(UObject* OldObject, UObject* NewObject, TMap<UObject*, UObject*>& ReferenceReplacementMap, TArray<UObject*>& DuplicatedObjects, TMap<UObject*, UObject*>* OptionalMappings)"
  },
  {
    "label": "ForEachInstancedSubObject()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "ForEachInstancedSubObject(FInstancedPropertyPath& PropertyPath, T ContainerAddress, TFunctionRef<void(const FInstancedSubObjRef& Ref, T PropertyValueAddress)> ObjRefFunc)"
  }
]