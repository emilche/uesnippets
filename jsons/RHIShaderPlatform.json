[
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FGenericStaticShaderPlatform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericStaticShaderPlatform"
  },
  {
    "label": "SP_StaticPlatform_Last()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / AssertionMacros . h \" # include \" RHIDefinitions . h \" # include \" HAL / Platform . h \" enum EShaderPlatform : uint16 { SP_PCD3D_SM5 = 0,SP_METAL = 1 1,SP_METAL_MRT = 1 2,SP_PCD3D_ES3_1 = 1 4,SP_OPENGL_PCES3_1 = 1 5,SP_METAL_SM5 = 1 6,SP_VULKAN_PCES3_1 = 1 7,SP_VULKAN_SM5 = 2 0,SP_VULKAN_ES3_1_ANDROID = 2 1,SP_METAL_MACES3_1 = 2 2,SP_OPENGL_ES3_1_ANDROID = 2 4,SP_METAL_MRT_MAC = 2 7,SP_METAL_TVOS = 3 0,SP_METAL_MRT_TVOS = 3 1,# define DDPI_NUM_STATIC_SHADER_PLATFORMS 1 6 SP_StaticPlatform_First = 3 2,# ifdef DDPI_EXTRA_SHADERPLATFORMS DDPI_EXTRA_SHADERPLATFORMS # endif)",
    "insertText": "SP_StaticPlatform_Last(SP_StaticPlatform_First + DDPI_NUM_STATIC_SHADER_PLATFORMS - 1), SP_VULKAN_SM5_ANDROID = SP_StaticPlatform_Last + 1, SP_PCD3D_SM6 = SP_StaticPlatform_Last + 2, SP_VULKAN_SM6 = SP_StaticPlatform_Last + 4, SP_METAL_SM6 = SP_StaticPlatform_Last + 5, SP_METAL_SIM = SP_StaticPlatform_Last + 6, SP_CUSTOM_PLATFORM_FIRST, SP_CUSTOM_PLATFORM_LAST = (SP_CUSTOM_PLATFORM_FIRST + 100)"
  },
  {
    "label": "FGenericStaticShaderPlatform()",
    "kind": "Method",
    "detail": "Function (struct FGenericStaticShaderPlatform final {)",
    "insertText": "FGenericStaticShaderPlatform(const EShaderPlatform InPlatform) : Platform(InPlatform)"
  },
  {
    "label": "EShaderPlatform()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "EShaderPlatform()"
  },
  {
    "label": "IsCustomPlatform()",
    "kind": "Method",
    "detail": "Function (# endif EShaderPlatform GMaxRHIShaderPlatform ; bool)",
    "insertText": "IsCustomPlatform(const FStaticShaderPlatform Platform)"
  }
]