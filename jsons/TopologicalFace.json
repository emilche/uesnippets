[
  {
    "label": "FCADKernelArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCADKernelArchive"
  },
  {
    "label": "FCriteriaGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriteriaGrid"
  },
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "FSurfacicSampling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicSampling"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBBoxWithNormal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBBoxWithNormal"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FFaceSubset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFaceSubset"
  },
  {
    "label": "FTopologicalFace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADEntity . h \" # include \" Core / HaveStates . h \" # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Geo / Sampling / PolylineTools . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Math / Boundary . h \" # include \" Math / Curvature . h \" # include \" Math / Point . h \" # include \" Topo / TopologicalEdge . h \" # include \" Topo / TopologicalEntity . h \" # include \" Topo / TopologicalLoop . h \" # include \" Topo / TopologicalShapeEntity . h \" # include \" Mesh / Structure / EdgeSegment . h \" # include \" Mesh / Structure / ThinZone2D . h \" # ifdef CADKERNEL_DEV # include \" UI / DefineForDebug . h \" # endif namespace UE::CADKernel { class FCADKernelArchive ; class FCriteriaGrid ; class FCriterion ; class FCurve ; class FDatabase ; class FModelMesh ; class FTopologicalVertex ; struct FSurfacicSampling ; enum class EStatut : uint8 { Interior = 0,Exterior,Border } ; enum class EQuadType : uint8 { Unset = 0,Quadrangular,Triangular,Other } ; struct FBBoxWithNormal ; class FTopologicalFace : public FTopologicalShapeEntity { class FEntity ; protected : TSharedPtr<FSurface> CarrierSurface ; TArray<TSharedPtr<FTopologicalLoop>> Loops ; TCache<FSurfacicBoundary> Boundary ; TSharedPtr<FFaceMesh> Mesh ; FCoordinateGrid MeshCuttingCoordinates ; FCoordinateGrid CrossingCoordinates ; FCoordinateGrid CrossingPointDeltaMins ; FCoordinateGrid CrossingPointDeltaMaxs ; double EstimatedMinimalElementLength = DOUBLE_BIG_NUMBER ;)",
    "insertText": "FTopologicalFace(const TSharedPtr<FSurface>& InCarrierSurface) : FTopologicalShapeEntity() , CarrierSurface(InCarrierSurface) , Mesh(TSharedPtr<FFaceMesh>())"
  },
  {
    "label": "ResetElementStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementStatus()"
  },
  {
    "label": "FTopologicalFace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTopologicalFace()"
  },
  {
    "label": "ComputeBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBoundary()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, CarrierSurface)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TSharedPtr<FEntity>>&) Loops)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(Loops)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "GetIsoTolerance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetIsoTolerance(EIso Iso)"
  },
  {
    "label": "GetBoundary()",
    "kind": "Method",
    "detail": "Function (} const FSurfacicBoundary&)",
    "insertText": "GetBoundary()"
  },
  {
    "label": "FaceCount()",
    "kind": "Method",
    "detail": "Function (} return Boundary ; } ; int32)",
    "insertText": "FaceCount()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutFaces .)",
    "insertText": "Emplace(this)"
  },
  {
    "label": "SetMarker1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarker1()"
  },
  {
    "label": "CompleteMetaData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CompleteMetaData()"
  },
  {
    "label": "CompleteMetaDataWithHostMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteMetaDataWithHostMetaData()"
  },
  {
    "label": "PropagateBodyOrientation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PropagateBodyOrientation()"
  },
  {
    "label": "RemoveLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLoop(const TSharedPtr<FTopologicalLoop>& Loop)"
  },
  {
    "label": "AddLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoop(const TSharedPtr<FTopologicalLoop>& Loop)"
  },
  {
    "label": "SetSurface()",
    "kind": "Method",
    "detail": "Function (Loop ->)",
    "insertText": "SetSurface(this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Loops .)",
    "insertText": "Add(Loop)"
  },
  {
    "label": "AddLoops()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddLoops(const TArray<TSharedPtr<FTopologicalLoop>>& Loops, int32& DoubtfulLoopOrientationCount)"
  },
  {
    "label": "AddLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLoops(const TArray<TSharedPtr<FCurve>>& Restrictions)"
  },
  {
    "label": "ApplyNaturalLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNaturalLoops()"
  },
  {
    "label": "ApplyNaturalLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNaturalLoops(const FSurfacicBoundary& Boundaries)"
  },
  {
    "label": "LoopCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoopCount()"
  },
  {
    "label": "GetLoops()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedPtr<FTopologicalLoop>>&)",
    "insertText": "GetLoops()"
  },
  {
    "label": "Get2DLoopSampling()",
    "kind": "Method",
    "detail": "Function (const void)",
    "insertText": "Get2DLoopSampling(TArray<TArray<FPoint2D>>& OutLoopSamplings)"
  },
  {
    "label": "GetLinkedEdge()",
    "kind": "Method",
    "detail": "Function (const FTopologicalEdge*)",
    "insertText": "GetLinkedEdge(const FTopologicalEdge& LinkedEdge)"
  },
  {
    "label": "GetEdgeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEdgeIndex(const FTopologicalEdge& Edge, int32& OutBoundaryIndex, int32& OutEdgeIndex)"
  },
  {
    "label": "EdgeCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EdgeCount(int32& EdgeCount)"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (EdgeCount + = Loop ->)",
    "insertText": "GetEdges().Num()"
  },
  {
    "label": "GetActiveEdges()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetActiveEdges(TArray<TSharedPtr<FTopologicalEdge>>& OutEdges)"
  },
  {
    "label": "GetActiveEdges()",
    "kind": "Method",
    "detail": "Function (Loop ->)",
    "insertText": "GetActiveEdges(OutEdges)"
  },
  {
    "label": "EdgeCount()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "EdgeCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 EdgeNum = 0 ;)",
    "insertText": "for(const TSharedPtr<FTopologicalLoop>& Loop : Loops)"
  },
  {
    "label": "GetCarrierSurface()",
    "kind": "Method",
    "detail": "Function (} return EdgeNum ; } TSharedRef<FSurface>)",
    "insertText": "GetCarrierSurface()"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& Coordinates, FSurfacicSampling& OutPoints, bool bComputeNormals = false)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (CarrierSurface ->)",
    "insertText": "EvaluatePointGrid(Coordinates, OutPoints, bComputeNormals)"
  },
  {
    "label": "EvaluateGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateGrid(FGrid& Grid)"
  },
  {
    "label": "UpdateBBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBBox(int32 IsoCount, const double ApproximationFactor, FBBoxWithNormal& BBox)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(TArray<FTopologicalEdge*>* NewBorderEdges = nullptr)"
  },
  {
    "label": "Disjoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disjoin(NewBorderEdges)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# ifndef DONT_DELETE_FACE_FOR_DEBUG CarrierSurface .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsANonManifoldFace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsANonManifoldFace()"
  },
  {
    "label": "IsABorderFace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsABorderFace()"
  },
  {
    "label": "IsAFullyNonManifoldFace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAFullyNonManifoldFace()"
  },
  {
    "label": "IsADuplicatedFace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsADuplicatedFace()"
  },
  {
    "label": "HasSameBoundariesAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSameBoundariesAs(const FTopologicalFace* OtherFace)"
  },
  {
    "label": "Disjoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disjoin(TArray<FTopologicalEdge*>* NewBorderEdges = nullptr)"
  },
  {
    "label": "DeleteNonmanifoldLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNonmanifoldLink()"
  },
  {
    "label": "FillTopologyReport()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV void)",
    "insertText": "FillTopologyReport(FTopologyReport& Report)"
  },
  {
    "label": "GetOrCreateMesh()",
    "kind": "Method",
    "detail": "Function (# endif FFaceMesh&)",
    "insertText": "GetOrCreateMesh(FModelMesh& ModelMesh)"
  },
  {
    "label": "HasTesselation()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "HasTesselation()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} FFaceMesh*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "InitDeltaUs()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "InitDeltaUs()"
  },
  {
    "label": "GetCuttingCoordinatesAlongIso()",
    "kind": "Method",
    "detail": "Function (const TArray<double>&)",
    "insertText": "GetCuttingCoordinatesAlongIso(EIso Iso)"
  },
  {
    "label": "ApplyCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCriteria(const TArray<TSharedPtr<FCriterion>>& Criteria, const FCriteriaGrid& Grid)"
  },
  {
    "label": "GetCrossingPointDeltaMins()",
    "kind": "Method",
    "detail": "Function (const TArray<double>&)",
    "insertText": "GetCrossingPointDeltaMins(EIso Iso)"
  },
  {
    "label": "SetHasThinZoneMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasThinZoneMarker()"
  },
  {
    "label": "ResetHasThinSurface()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::ThinZone ; } void)",
    "insertText": "ResetHasThinSurface()"
  },
  {
    "label": "IsBackOriented()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::ThinZone ; } bool)",
    "insertText": "IsBackOriented()"
  },
  {
    "label": "SwapOrientation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapOrientation()"
  },
  {
    "label": "ResetBackOriented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBackOriented()"
  },
  {
    "label": "SetBackOriented()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetBackOriented()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsBackOriented ; } void)",
    "insertText": "Remove(const FTopologicalShapeEntity*)"
  },
  {
    "label": "MoveThinZones()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FThinZone2D> ThinZones ; public : void)",
    "insertText": "MoveThinZones(TArray<FThinZone2D>& InThinZones)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ThinZones =)",
    "insertText": "MoveTemp(InThinZones)"
  },
  {
    "label": "GetThinZones()",
    "kind": "Method",
    "detail": "Function (} const TArray<FThinZone2D>&)",
    "insertText": "GetThinZones()"
  },
  {
    "label": "GetCurvatures()",
    "kind": "Method",
    "detail": "Function (const FSurfaceCurvature&)",
    "insertText": "GetCurvatures()"
  },
  {
    "label": "DefineSurfaceType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSurfaceType()"
  },
  {
    "label": "GetSideProperties()",
    "kind": "Method",
    "detail": "Function (const TArray<FEdge2DProperties>&)",
    "insertText": "GetSideProperties()"
  },
  {
    "label": "MeshedSideRatio()",
    "kind": "Method",
    "detail": "Function (LengthOfMeshedSide + = Length ; } double)",
    "insertText": "MeshedSideRatio()"
  },
  {
    "label": "GetEdgeIndex()",
    "kind": "Method",
    "detail": "Function (int32 EdgeIndex = Loops [ 0 ] ->)",
    "insertText": "GetEdgeIndex(Edge)"
  },
  {
    "label": "GetSideIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSideIndex(int32 EdgeIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 SideIndex = 0; SideIndex < StartSideIndices.Num() - 1; ++SideIndex)"
  },
  {
    "label": "SetEstimatedMinimalElementLength()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetEstimatedMinimalElementLength(double Value)"
  },
  {
    "label": "GetEstimatedMinimalElementLength()",
    "kind": "Method",
    "detail": "Function (EstimatedMinimalElementLength = Value ; } } double)",
    "insertText": "GetEstimatedMinimalElementLength()"
  },
  {
    "label": "SetMainBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainBody(TMap<FTopologicalShapeEntity*, int32>& BodyToFaceCount)"
  },
  {
    "label": "SetMainName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainName(TMap<FString, int32>& NameToFaceCount)"
  },
  {
    "label": "SetMainColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainColor(TMap<uint32, int32>& ColorToFaceCount)"
  },
  {
    "label": "SetMainMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainMaterial(TMap<uint32, int32>& MaterialToFaceCount)"
  },
  {
    "label": "FBBoxWithNormal()",
    "kind": "Method",
    "detail": "Function (} ; struct FBBoxWithNormal { FPoint Max ; FPoint Min ; FPoint MaxPoints [ 3 ] ; FPoint MinPoints [ 3 ] ; FPoint2D MaxCoordinates [ 3 ] ; FPoint2D MinCoordinates [ 3 ] ; FVector MaxPointNormals [ 3 ] ; FVector MinPointNormals [ 3 ] ; bool MaxNormalNeedUpdate [ 3 ] = { true,true,true } ; bool MinNormalNeedUpdate [ 3 ] = { true,true,true } ;)",
    "insertText": "FBBoxWithNormal() : Max(-HUGE_VALUE, -HUGE_VALUE, -HUGE_VALUE) , Min(HUGE_VALUE, HUGE_VALUE, HUGE_VALUE)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Length()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (int32 GoodOrientation = 0 ; int32 WrongOrientation = 0 ; const FVector BBoxNormals [ ] = {)",
    "insertText": "FVector(1., 0., 0.) , FVector(0., 1., 0.) , FVector(0., 0., 1.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GoodOrientation + + ; } else)",
    "insertText": "if(DotProduct < DOUBLE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GoodOrientation + + ; } else)",
    "insertText": "if(DotProduct > DOUBLE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "bHasWrongOrientation()",
    "kind": "Method",
    "detail": "Function (WrongOrientation + + ; } })",
    "insertText": "bHasWrongOrientation(GoodOrientation < WrongOrientation)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(const FPolylineBBox& PolylineBBox, const EIso IsoType, double IsoCoordinate)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Max [ Index ] = PolylineBBox . Max [ Index ] ; MaxPoints [ Index ] = PolylineBBox . MaxPoints [ Index ] ; MaxCoordinates [)",
    "insertText": "Index(IsoType == IsoU) ? FPoint2D(IsoCoordinate, PolylineBBox.CoordinateOfMaxPoint[Index]) : FPoint2D(PolylineBBox.CoordinateOfMaxPoint[Index], IsoCoordinate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxNormalNeedUpdate [ Index ] = true ; })",
    "insertText": "if(PolylineBBox.Min[Index] < Min[Index])"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Min [ Index ] = PolylineBBox . Min [ Index ] ; MinPoints [ Index ] = PolylineBBox . MinPoints [ Index ] ; MinCoordinates [)",
    "insertText": "Index(IsoType == IsoU) ? FPoint2D(IsoCoordinate, PolylineBBox.CoordinateOfMinPoint[Index]) : FPoint2D(PolylineBBox.CoordinateOfMinPoint[Index], IsoCoordinate)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (MinNormalNeedUpdate [ Index ] = true ; } } } void)",
    "insertText": "Update(const FPoint& Point, const FPoint2D InPoint2D)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Max [ Index ] = Point [ Index ] ; MaxPoints [ Index ] = Point ; MaxCoordinates [ Index ] = InPoint2D ; MaxNormalNeedUpdate [ Index ] = true ; })",
    "insertText": "if(Point[Index] < Min[Index])"
  },
  {
    "label": "UpdateNormal()",
    "kind": "Method",
    "detail": "Function (Min [ Index ] = Point [ Index ] ; MinPoints [ Index ] = Point ; MinCoordinates [ Index ] = InPoint2D ; MinNormalNeedUpdate [ Index ] = true ; } } } void)",
    "insertText": "UpdateNormal(const FTopologicalFace& Face)"
  },
  {
    "label": "EvaluateNormal()",
    "kind": "Method",
    "detail": "Function (MaxPointNormals [ Index ] = Surface .)",
    "insertText": "EvaluateNormal(MaxCoordinates[Index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxPointNormals [ Index ]* = - 1 . ; } MaxNormalNeedUpdate [ Index ] = false ; })",
    "insertText": "if(MinNormalNeedUpdate[Index])"
  },
  {
    "label": "EvaluateNormal()",
    "kind": "Method",
    "detail": "Function (MinPointNormals [ Index ] = Surface .)",
    "insertText": "EvaluateNormal(MinCoordinates[Index])"
  }
]