[
  {
    "label": "FGestureRecognizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGestureRecognizer"
  },
  {
    "label": "UPlayerInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayerInput"
  },
  {
    "label": "FGestureRecognizer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" class FGestureRecognizer { public :)",
    "insertText": "FGestureRecognizer() : bIsReadyForPinch(false), AnchorDistanceSq(0.0f), StartAngle(0.0f), bIsReadyForFlick(false), FlickTime(0.0f), PreviousTouchCount(0)"
  },
  {
    "label": "DetectGestures()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DetectGestures(const FVector (&Touches)[EKeys::NUM_TOUCH_KEYS], class UPlayerInput* PlayerInput, float DeltaTime)"
  },
  {
    "label": "SetAnchorDistanceSquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnchorDistanceSquared(const FVector2D FirstPoint, const FVector2D SecontPoint)"
  },
  {
    "label": "HandleGesture()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HandleGesture(class UPlayerInput* PlayerInput, FKey Gesture, bool bStarted, bool bEnded)"
  }
]