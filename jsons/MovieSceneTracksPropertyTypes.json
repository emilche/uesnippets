[
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FObjectComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectComponent"
  },
  {
    "label": "FVectorPropertyMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorPropertyMetaData"
  },
  {
    "label": "FFloatIntermediateVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatIntermediateVector"
  },
  {
    "label": "FDoubleIntermediateVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDoubleIntermediateVector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIntermediateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntermediateColor"
  },
  {
    "label": "FIntermediate3DTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntermediate3DTransform"
  },
  {
    "label": "FFloatIntermediateVector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Vector2D . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Math / Rotator . h \" # include \" Math / Color . h \" # include \" EulerTransform . h \" # include \" Styling / SlateColor . h \" # include \" EntitySystem / MovieSceneComponentDebug . h \" # include \" Misc / LargeWorldCoordinates . h \" class USceneComponent ; namespace UE { namespace MovieScene { struct FObjectComponent ; struct FVectorPropertyMetaData { uint8 NumChannels = 0 ; } ; struct FFloatIntermediateVector { double X,Y,Z,W ;)",
    "insertText": "FFloatIntermediateVector() : X(0), Y(0), Z(0), W(0)"
  },
  {
    "label": "FFloatIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFloatIntermediateVector(double InX, double InY) : X(InX), Y(InY), Z(0), W(0)"
  },
  {
    "label": "FFloatIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFloatIntermediateVector(double InX, double InY, double InZ) : X(InX), Y(InY), Z(InZ), W(0)"
  },
  {
    "label": "FFloatIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFloatIntermediateVector(double InX, double InY, double InZ, double InW) : X(InX), Y(InY), Z(InZ), W(InW)"
  },
  {
    "label": "FDoubleIntermediateVector()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDoubleIntermediateVector { double X,Y,Z,W ;)",
    "insertText": "FDoubleIntermediateVector() : X(0), Y(0), Z(0), W(0)"
  },
  {
    "label": "FDoubleIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDoubleIntermediateVector(double InX, double InY) : X(InX), Y(InY), Z(0), W(0)"
  },
  {
    "label": "FDoubleIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDoubleIntermediateVector(double InX, double InY, double InZ) : X(InX), Y(InY), Z(InZ), W(0)"
  },
  {
    "label": "FDoubleIntermediateVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDoubleIntermediateVector(double InX, double InY, double InZ, double InW) : X(InX), Y(InY), Z(InZ), W(InW)"
  },
  {
    "label": "FIntermediateColor()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EColorPropertyType : uint8 { Undefined,Slate,Linear,Color,} ; struct FIntermediateColor { double R,G,B,A ;)",
    "insertText": "FIntermediateColor() : R(0.f), G(0.f), B(0.f), A(0.f)"
  },
  {
    "label": "FIntermediateColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntermediateColor(double InR, double InG, double InB, double InA) : R(InR), G(InG), B(InB), A(InA)"
  },
  {
    "label": "FIntermediateColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntermediateColor(const FLinearColor& InColor) : R(InColor.R), G(InColor.G), B(InColor.B), A(InColor.A)"
  },
  {
    "label": "FIntermediateColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntermediateColor(const FColor& InColor)"
  },
  {
    "label": "FromSRGBColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor NewColor =)",
    "insertText": "FromSRGBColor(InColor)"
  },
  {
    "label": "FIntermediateColor()",
    "kind": "Method",
    "detail": "Function (R = NewColor . R ; G = NewColor . G ; B = NewColor . B ; A = NewColor . A ; })",
    "insertText": "FIntermediateColor(const FSlateColor& InSlateColor)"
  },
  {
    "label": "GetSpecifiedColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor SpecifiedColor = InSlateColor .)",
    "insertText": "GetSpecifiedColor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (R = SpecifiedColor . R ; G = SpecifiedColor . G ; B = SpecifiedColor . B ; A = SpecifiedColor . A ; } double)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (} FColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetLinearColor()",
    "kind": "Method",
    "detail": "Function (const bool bConvertBackToSRgb = true ; const FColor SRgbColor =)",
    "insertText": "GetLinearColor().ToFColor(bConvertBackToSRgb)"
  },
  {
    "label": "GetSlateColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetSlateColor()"
  },
  {
    "label": "FIntermediate3DTransform()",
    "kind": "Method",
    "detail": "Function (} } ; struct FIntermediate3DTransform { double T_X,T_Y,T_Z,R_X,R_Y,R_Z,S_X,S_Y,S_Z ;)",
    "insertText": "FIntermediate3DTransform() : T_X(0.), T_Y(0.), T_Z(0.), R_X(0.), R_Y(0.), R_Z(0.), S_X(0.), S_Y(0.), S_Z(0.)"
  },
  {
    "label": "FIntermediate3DTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntermediate3DTransform(double InT_X, double InT_Y, double InT_Z, double InR_X, double InR_Y, double InR_Z, double InS_X, double InS_Y, double InS_Z) : T_X(InT_X), T_Y(InT_Y), T_Z(InT_Z), R_X(InR_X), R_Y(InR_Y), R_Z(InR_Z), S_X(InS_X), S_Y(InS_Y), S_Z(InS_Z)"
  },
  {
    "label": "FIntermediate3DTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIntermediate3DTransform(const FVector& InLocation, const FRotator& InRotation, const FVector& InScale) : T_X(InLocation.X), T_Y(InLocation.Y), T_Z(InLocation.Z) , R_X(InRotation.Roll), R_Y(InRotation.Pitch), R_Z(InRotation.Yaw) , S_X(InScale.X), S_Y(InScale.Y), S_Z(InScale.Z)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetRotation()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetScale()"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyTo(USceneComponent* SceneComponent)"
  },
  {
    "label": "ApplyTransformTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransformTo(USceneComponent* SceneComponent, const FIntermediate3DTransform& Transform)"
  },
  {
    "label": "ApplyTranslationAndRotationTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTranslationAndRotationTo(USceneComponent* SceneComponent, const FIntermediate3DTransform& Transform)"
  },
  {
    "label": "GetComponentTransform()",
    "kind": "Method",
    "detail": "Function (} ; FIntermediate3DTransform)",
    "insertText": "GetComponentTransform(const UObject* Object)"
  },
  {
    "label": "SetComponentTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentTransform(USceneComponent* SceneComponent, const FIntermediate3DTransform& InTransform)"
  },
  {
    "label": "SetComponentTransformAndVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentTransformAndVelocity(UObject* Object, const FIntermediate3DTransform& InTransform)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(float In, double& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(double In, float& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FIntermediate3DTransform& In, FEulerTransform& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FEulerTransform& In, FIntermediate3DTransform& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FIntermediate3DTransform& In, FTransform& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FTransform& In, FIntermediate3DTransform& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FIntermediateColor& InColor, FColor& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FIntermediateColor& InColor, FLinearColor& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FIntermediateColor& InColor, FSlateColor& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FColor& InColor, FIntermediateColor& OutIntermediate)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FLinearColor& InColor, FIntermediateColor& OutIntermediate)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FSlateColor& InColor, FIntermediateColor& OutIntermediate)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FFloatIntermediateVector& InVector, FVector2f& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FFloatIntermediateVector& InVector, FVector3f& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FFloatIntermediateVector& InVector, FVector4f& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector2f& In, FFloatIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector3f& In, FFloatIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector4f& In, FFloatIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FDoubleIntermediateVector& InVector, FVector2d& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FDoubleIntermediateVector& InVector, FVector3d& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FDoubleIntermediateVector& InVector, FVector4d& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector2d& In, FDoubleIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector3d& In, FDoubleIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FVector4d& In, FDoubleIntermediateVector& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(const FObjectComponent& In, UObject*& Out)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(UObject* In, FObjectComponent& Out)"
  }
]