[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FPSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheParams"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "ECanBeCharacterBase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanBeCharacterBase"
  },
  {
    "label": "FSpriteCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpriteCategoryInfo"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRendererStencilMaskEvaluation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRendererStencilMaskEvaluation"
  },
  {
    "label": "FPredicateOverlapHasSameActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredicateOverlapHasSameActor"
  },
  {
    "label": "FPredicateOverlapHasDifferentActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredicateOverlapHasDifferentActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "ESceneDepthPriorityGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneDepthPriorityGroup"
  },
  {
    "label": "ESceneDepthPriorityGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneDepthPriorityGroup"
  },
  {
    "label": "EHitProxyPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHitProxyPriority"
  },
  {
    "label": "ECanBeCharacterBase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanBeCharacterBase"
  },
  {
    "label": "ECanBeCharacterBase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanBeCharacterBase"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneInfoAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneInfoAdapter"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FStaticLightingPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingPrimitiveInfo"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "UActorTextureStreamingBuildDataComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorTextureStreamingBuildDataComponent"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specific",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specific"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "FStaticMeshComponentBulkReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentBulkReregisterContext"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "based",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "based"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FPrimitiveComponentInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveComponentInstanceData"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPrimitiveComponent()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UPrimitiveComponent(FVTableHelper& Helper)"
  },
  {
    "label": "SetLightmapType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightmapType(ELightmapType InLightmapType)"
  },
  {
    "label": "SetGenerateOverlapEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerateOverlapEvents(bool bInGenerateOverlapEvents)"
  },
  {
    "label": "SetLightingChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)"
  },
  {
    "label": "InvalidateLumenSurfaceCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLumenSurfaceCache()"
  },
  {
    "label": "SetExcludedFromHLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel, bool bExcluded)"
  },
  {
    "label": "SetExcludeForSpecificHLODLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludeForSpecificHLODLevels(const TArray<int32>& InExcludeForSpecificHLODLevels)"
  },
  {
    "label": "SetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastRenderTime(float InLastRenderTime)"
  },
  {
    "label": "SetMeshDrawCommandStatsCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshDrawCommandStatsCategory(FName StatsCategory)"
  },
  {
    "label": "SetupPrecachePSOParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPrecachePSOParams(FPSOPrecacheParams& Params)"
  },
  {
    "label": "RequestRecreateRenderStateWhenPSOPrecacheFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRecreateRenderStateWhenPSOPrecacheFinished(const FGraphEventArray& PSOPrecacheCompileEvents)"
  },
  {
    "label": "CheckPSOPrecachingAndBoostPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPSOPrecachingAndBoostPriority(EPSOPrecachePriority PSOPrecachePriority = EPSOPrecachePriority::High)"
  },
  {
    "label": "IgnoreActorWhenMoving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore)"
  },
  {
    "label": "ClearMoveIgnoreActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMoveIgnoreActors()"
  },
  {
    "label": "IgnoreComponentWhenMoving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore)"
  },
  {
    "label": "SetMoveIgnoreMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveIgnoreMask(FMaskFilter InMoveIgnoreMask)"
  },
  {
    "label": "ShouldComponentIgnoreHitResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldComponentIgnoreHitResult(FHitResult const& TestHit, EMoveComponentFlags MoveFlags)"
  },
  {
    "label": "SetScalarParameterForCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value)"
  },
  {
    "label": "SetVectorParameterForCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorParameterForCustomPrimitiveData(FName ParameterName, FVector4 Value)"
  },
  {
    "label": "SetCustomPrimitiveDataFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPrimitiveDataFloat(int32 DataIndex, float Value)"
  },
  {
    "label": "SetCustomPrimitiveDataVector2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPrimitiveDataVector2(int32 DataIndex, FVector2D Value)"
  },
  {
    "label": "SetCustomPrimitiveDataVector3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPrimitiveDataVector3(int32 DataIndex, FVector Value)"
  },
  {
    "label": "SetCustomPrimitiveDataVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPrimitiveDataVector4(int32 DataIndex, FVector4 Value)"
  },
  {
    "label": "ResetCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCustomPrimitiveData()"
  },
  {
    "label": "SetScalarParameterForDefaultCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value)"
  },
  {
    "label": "SetVectorParameterForDefaultCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, FVector4 Value)"
  },
  {
    "label": "SetDefaultCustomPrimitiveDataFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveDataFloat(int32 DataIndex, float Value)"
  },
  {
    "label": "SetDefaultCustomPrimitiveDataVector2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveDataVector2(int32 DataIndex, FVector2D Value)"
  },
  {
    "label": "SetDefaultCustomPrimitiveDataVector3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveDataVector3(int32 DataIndex, FVector Value)"
  },
  {
    "label": "SetDefaultCustomPrimitiveDataVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveDataVector4(int32 DataIndex, FVector4 Value)"
  },
  {
    "label": "SetCustomPrimitiveDataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPrimitiveDataInternal(int32 DataIndex, const TArray<float>& Values)"
  },
  {
    "label": "SetDefaultCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveData(int32 DataIndex, const TArray<float>& Values)"
  },
  {
    "label": "ConvertSweptOverlapsToCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertSweptOverlapsToCurrentOverlaps(TArray<FOverlapInfo, AllocatorType>& OutOverlapsAtEndLocation, const TOverlapArrayView& SweptOverlaps, int32 SweptOverlapsIndex, const FVector& EndLocation, const FQuat& EndRotationQuat)"
  },
  {
    "label": "ConvertRotationOverlapsToCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertRotationOverlapsToCurrentOverlaps(TArray<FOverlapInfo, AllocatorType>& OutOverlapsAtEndLocation, const TOverlapArrayView& CurrentOverlaps)"
  },
  {
    "label": "BeginComponentOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginComponentOverlap(const FOverlapInfo& OtherOverlap, bool bDoNotifies)"
  },
  {
    "label": "EndComponentOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndComponentOverlap(const FOverlapInfo& OtherOverlap, bool bDoNotifies=true, bool bSkipNotifySelf=false)"
  },
  {
    "label": "SetBoundsScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundsScale(float NewBoundsScale=1.f)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetMaterial(ElementIndex)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, class UMaterialInterface* Material)"
  },
  {
    "label": "SetMaterialByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* Material)"
  },
  {
    "label": "SetWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWalkableSlopeOverride(const FWalkableSlopeOverride& NewOverride)"
  },
  {
    "label": "SetSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulatePhysics(bool bSimulate)"
  },
  {
    "label": "SetStaticWhenNotMoveable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable)"
  },
  {
    "label": "CanEditSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSimulatePhysics()"
  },
  {
    "label": "SetConstraintMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintMode(EDOFMode::Type ConstraintMode)"
  },
  {
    "label": "AddImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulse(FVector Impulse, FName BoneName = NAME_None, bool bVelChange = false)"
  },
  {
    "label": "AddAngularImpulseInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAngularImpulseInRadians(FVector Impulse, FName BoneName = NAME_None, bool bVelChange = false)"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName = NAME_None)"
  },
  {
    "label": "AddVelocityChangeImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVelocityChangeImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName = NAME_None)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(FVector Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bVelChange = false)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(FVector Force, FName BoneName = NAME_None, bool bAccelChange = false)"
  },
  {
    "label": "AddForceAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtLocation(FVector Force, FVector Location, FName BoneName = NAME_None)"
  },
  {
    "label": "AddForceAtLocationLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName = NAME_None)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(FVector Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bAccelChange = false)"
  },
  {
    "label": "AddTorqueInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorqueInRadians(FVector Torque, FName BoneName = NAME_None, bool bAccelChange = false)"
  },
  {
    "label": "SetPhysicsLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent = false, FName BoneName = NAME_None)"
  },
  {
    "label": "GetPhysicsLinearVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPhysicsLinearVelocity(FName BoneName = NAME_None)"
  },
  {
    "label": "GetPhysicsLinearVelocityAtPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName = NAME_None)"
  },
  {
    "label": "SetAllPhysicsLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent = false)"
  },
  {
    "label": "SetPhysicsAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent = false, FName BoneName = NAME_None)"
  },
  {
    "label": "SetPhysicsMaxAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent = false, FName BoneName = NAME_None)"
  },
  {
    "label": "SetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName = NAME_None)"
  },
  {
    "label": "WakeRigidBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeRigidBody(FName BoneName = NAME_None)"
  },
  {
    "label": "PutRigidBodyToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutRigidBodyToSleep(FName BoneName = NAME_None)"
  },
  {
    "label": "SetNotifyRigidBodyCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)"
  },
  {
    "label": "SetOwnerNoSee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerNoSee(bool bNewOwnerNoSee)"
  },
  {
    "label": "SetOnlyOwnerSee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnlyOwnerSee(bool bNewOnlyOwnerSee)"
  },
  {
    "label": "SetVisibleInRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleInRayTracing(bool bNewVisibleInRayTracing)"
  },
  {
    "label": "SetCastShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCastShadow(bool NewCastShadow)"
  },
  {
    "label": "SetEmissiveLightSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEmissiveLightSource(bool NewEmissiveLightSource)"
  },
  {
    "label": "SetCastHiddenShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCastHiddenShadow(bool NewCastHiddenShadow)"
  },
  {
    "label": "SetSingleSampleShadowFromStationaryLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights)"
  },
  {
    "label": "SetTranslucentSortPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslucentSortPriority(int32 NewTranslucentSortPriority)"
  },
  {
    "label": "SetTranslucencySortDistanceOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset)"
  },
  {
    "label": "SetAffectDistanceFieldLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting)"
  },
  {
    "label": "SetReceivesDecals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceivesDecals(bool bNewReceivesDecals)"
  },
  {
    "label": "SetHoldout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoldout(bool bNewHoldout)"
  },
  {
    "label": "SetAffectDynamicIndirectLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting)"
  },
  {
    "label": "SetAffectIndirectLightingWhileHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden)"
  },
  {
    "label": "SetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionEnabled(ECollisionEnabled::Type NewType)"
  },
  {
    "label": "SetCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps=true)"
  },
  {
    "label": "SetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionObjectType(ECollisionChannel Channel)"
  },
  {
    "label": "K2_LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit)"
  },
  {
    "label": "K2_SphereTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit)"
  },
  {
    "label": "K2_BoxOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_BoxOverlapComponent(FVector InBoxCentre, const FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit)"
  },
  {
    "label": "K2_SphereOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit)"
  },
  {
    "label": "SetRenderCustomDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderCustomDepth(bool bValue)"
  },
  {
    "label": "SetCustomDepthStencilValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthStencilValue(int32 Value)"
  },
  {
    "label": "SetCustomDepthStencilWriteMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit)"
  },
  {
    "label": "SetRenderInMainPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderInMainPass(bool bValue)"
  },
  {
    "label": "SetRenderInDepthPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderInDepthPass(bool bValue)"
  },
  {
    "label": "SetVisibleInSceneCaptureOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleInSceneCaptureOnly(bool bValue)"
  },
  {
    "label": "SetHiddenInSceneCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenInSceneCapture(bool bValue)"
  },
  {
    "label": "SetFirstPersonPrimitiveType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFirstPersonPrimitiveType(EFirstPersonPrimitiveType Value)"
  },
  {
    "label": "AssignSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSceneProxy(FPrimitiveSceneProxy* SceneProxy)"
  },
  {
    "label": "ReleaseSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSceneProxy()"
  },
  {
    "label": "SetLODParentPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLODParentPrimitive(UPrimitiveComponent* InLODParentPrimitive)"
  },
  {
    "label": "HasStaticLighting()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasStaticLighting()"
  },
  {
    "label": "BuildTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTextureStreamingData(ETextureStreamingBuildType BuildType, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<FGuid>& DependentResources)"
  },
  {
    "label": "BuildTextureStreamingDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTextureStreamingDataImpl(ETextureStreamingBuildType BuildType, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<FGuid>& DependentResources, bool& bOutSupportsBuildTextureStreamingData)"
  },
  {
    "label": "GetUsedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedTextures(TArray<UTexture*>& OutTextures, EMaterialQualityLevel::Type QualityLevel)"
  },
  {
    "label": "SyncComponentToRBPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncComponentToRBPhysics()"
  },
  {
    "label": "ReceiveComponentDamage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveComponentDamage(float DamageAmount, FDamageEvent const& DamageEvent, AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "WeldTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeldTo(class USceneComponent* InParent, FName InSocketName = NAME_None, bool bWeldToKinematicParent = false)"
  },
  {
    "label": "WeldToImplementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WeldToImplementation(USceneComponent * InParent, FName ParentSocketName = NAME_None, bool bWeldSimulatedChild = true, bool bWeldToKinematicParent = false)"
  },
  {
    "label": "UnWeldFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnWeldFromParent()"
  },
  {
    "label": "UnWeldChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnWeldChildren()"
  },
  {
    "label": "GetWeldedBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeldedBodies(TArray<FBodyInstance*> & OutWeldedBodies, TArray<FName> & OutLabels, bool bIncludingAutoWeld = false)"
  },
  {
    "label": "GetComponentTransformFromBodyInstance()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentTransformFromBodyInstance(FBodyInstance* UseBI)"
  },
  {
    "label": "SendRenderDebugPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDebugPhysics(FPrimitiveSceneProxy* OverrideSceneProxy = nullptr)"
  },
  {
    "label": "BatchSendRenderDebugPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchSendRenderDebugPhysics(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "UpdatePhysicsToRBChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsToRBChannels()"
  },
  {
    "label": "SendPhysicsTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPhysicsTransform(ETeleportType Teleport)"
  },
  {
    "label": "EnsurePhysicsStateCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePhysicsStateCreated()"
  },
  {
    "label": "MarkChildPrimitiveComponentRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkChildPrimitiveComponentRenderStateDirty()"
  },
  {
    "label": "UpdateCollisionProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionProfile()"
  },
  {
    "label": "UpdateOcclusionBoundsSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOcclusionBoundsSlack(float NewSlack)"
  },
  {
    "label": "DispatchBlockingHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchBlockingHit(AActor& OutOwner, FHitResult const& BlockingHit)"
  },
  {
    "label": "DispatchWakeEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchWakeEvents(ESleepEvent WakeEvent, FName BoneName)"
  },
  {
    "label": "PushSelectionToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSelectionToProxy()"
  },
  {
    "label": "PushLevelInstanceEditingStateToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLevelInstanceEditingStateToProxy(bool bInEditingState)"
  },
  {
    "label": "PushHoveredToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushHoveredToProxy(const bool bInHovered)"
  },
  {
    "label": "PushEditorVisibilityToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEditorVisibilityToProxy( uint64 InVisibility )"
  },
  {
    "label": "PushPrimitiveColorToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPrimitiveColorToProxy(const FLinearColor& InPrimitiveColor)"
  },
  {
    "label": "SetIsTemporarilyHiddenInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTemporarilyHiddenInEditor(const bool bInIsHidden)"
  },
  {
    "label": "SetIsBeingMovedByEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsBeingMovedByEditor(bool bNewIsBeingMoved)"
  },
  {
    "label": "SetSelectionOutlineColorIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionOutlineColorIndex(uint8 SelectionOutlineColorIndex)"
  },
  {
    "label": "SetOverlayColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayColor(FColor OverlayColor)"
  },
  {
    "label": "RemoveOverlayColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlayColor()"
  },
  {
    "label": "ResetSceneVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSceneVelocity()"
  },
  {
    "label": "SetAllPhysicsAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsAngularVelocityInRadians(const FVector& NewAngVel, bool bAddToCurrent = false)"
  },
  {
    "label": "SetAllPhysicsPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsPosition(FVector NewPos)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(FRotator NewRot)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(const FQuat& NewRot)"
  },
  {
    "label": "WakeAllRigidBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeAllRigidBodies()"
  },
  {
    "label": "SetEnableGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableGravity(bool bGravityEnabled)"
  },
  {
    "label": "SetUpdateKinematicFromSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateKinematicFromSimulation(bool bUpdateKinematicFromSimulation)"
  },
  {
    "label": "SetLinearDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDamping(float InDamping)"
  },
  {
    "label": "SetAngularDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDamping(float InDamping)"
  },
  {
    "label": "SetMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMassScale(FName BoneName = NAME_None, float InMassScale = 1.f)"
  },
  {
    "label": "SetAllMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllMassScale(float InMassScale = 1.f)"
  },
  {
    "label": "SetMassOverrideInKg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMassOverrideInKg(FName BoneName = NAME_None, float MassInKg = 1.f, bool bOverrideMass = true)"
  },
  {
    "label": "CalculateMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateMass(FName BoneName = NAME_None)"
  },
  {
    "label": "GetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDepenetrationVelocity(FName BoneName = NAME_None)"
  },
  {
    "label": "SetMaxDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDepenetrationVelocity(FName BoneName = NAME_None, float InMaxDepenetrationVelocity = -1.0f)"
  },
  {
    "label": "SetUseCCD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseCCD(bool InUseCCD, FName BoneName = NAME_None)"
  },
  {
    "label": "SetAllUseCCD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUseCCD(bool InUseCCD)"
  },
  {
    "label": "SetUseMACD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseMACD(bool InUseMACD, FName BoneName = NAME_None)"
  },
  {
    "label": "SetAllUseMACD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUseMACD(bool InUseMACD)"
  },
  {
    "label": "PutAllRigidBodiesToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutAllRigidBodiesToSleep()"
  },
  {
    "label": "IsAnyRigidBodyAwake()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyRigidBodyAwake()"
  },
  {
    "label": "SetCollisionResponseToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetCollisionResponseToAllChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToAllChannels(ECollisionResponse NewResponse)"
  },
  {
    "label": "SetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToChannels(const FCollisionResponseContainer& NewReponses)"
  },
  {
    "label": "OnComponentCollisionSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentCollisionSettingsChanged(bool bUpdateOverlaps=true)"
  },
  {
    "label": "OnGenerateOverlapEventsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateOverlapEventsChanged()"
  },
  {
    "label": "ClearComponentOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearComponentOverlaps(bool bDoNotifies, bool bSkipNotifySelf)"
  },
  {
    "label": "SetRigidBodyReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRigidBodyReplicatedTarget(FRigidBodyState& UpdatedState, const FName BoneName = NAME_None, int32 ServerFrame = 0, int32 ServerHandle = 0)"
  },
  {
    "label": "GetRigidBodyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRigidBodyState(FRigidBodyState& OutState, FName BoneName = NAME_None)"
  },
  {
    "label": "SetPhysMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)"
  },
  {
    "label": "SetCullDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCullDistance(float NewCullDistance)"
  },
  {
    "label": "SetCachedMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedMaxDrawDistance(const float NewCachedMaxDrawDistance)"
  },
  {
    "label": "SetDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepthPriorityGroup(ESceneDepthPriorityGroup NewDepthPriorityGroup)"
  },
  {
    "label": "SetViewOwnerDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewOwnerDepthPriorityGroup(\n\t\tbool bNewUseViewOwnerDepthPriorityGroup,\n\t\tESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup\n\t\t)"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent( FHitResult& OutHit, const FVector Start, const FVector End, const FCollisionQueryParams& Params )"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent(FHitResult& OutHit, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "SweepComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FQuat& ShapeWorldRotation, const FCollisionShape &CollisionShape, bool bTraceComplex=false)"
  },
  {
    "label": "SweepComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FQuat& ShapeWorldRotation, const FPhysicsGeometry& Geometry, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "ComponentOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponent(class UPrimitiveComponent* PrimComp, const FVector Pos, const FQuat& Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponent(class UPrimitiveComponent* PrimComp, const FVector Pos, const FRotator Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapComponentImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponentImpl(class UPrimitiveComponent* PrimComp, const FVector Pos, const FQuat& Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComputePenetration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePenetration(FMTDResult & OutMTD, const FCollisionShape& CollisionShape, const FVector& Pos, const FQuat& Rot)"
  },
  {
    "label": "SetCustomNavigableGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomNavigableGeometry(const EHasCustomNavigableGeometry::Type InType)"
  },
  {
    "label": "DispatchMouseOverEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchMouseOverEvents(UPrimitiveComponent* CurrentComponent, UPrimitiveComponent* NewComponent)"
  },
  {
    "label": "DispatchTouchOverEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchTouchOverEvents(ETouchIndex::Type FingerIndex, UPrimitiveComponent* CurrentComponent, UPrimitiveComponent* NewComponent)"
  },
  {
    "label": "DispatchOnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnClicked(FKey ButtonClicked = EKeys::LeftMouseButton)"
  },
  {
    "label": "DispatchOnReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnReleased(FKey ButtonReleased = EKeys::LeftMouseButton)"
  },
  {
    "label": "DispatchOnInputTouchBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnInputTouchBegin(const ETouchIndex::Type Key)"
  },
  {
    "label": "DispatchOnInputTouchEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnInputTouchEnd(const ETouchIndex::Type Key)"
  },
  {
    "label": "FPrimitiveComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPrimitiveComponentInstanceData(const UPrimitiveComponent* SourceComponent)"
  },
  {
    "label": "ComponentOverlapMultiImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentOverlapMultiImpl(OutOverlaps, InWorld, Pos, Rot, TestChannel, Params, ObjectQueryParams)"
  },
  {
    "label": "ComponentOverlapComponentImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentOverlapComponentImpl(PrimComp, Pos, Rot, Params)"
  },
  {
    "label": "ComponentOverlapComponentWithResultImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComponentOverlapComponentWithResultImpl(PrimComp, Pos, Rot, Params, OutOverlap)"
  },
  {
    "label": "IsCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsCollisionEnabled()"
  },
  {
    "label": "IsQueryCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsQueryCollisionEnabled()"
  },
  {
    "label": "IsPhysicsCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsPhysicsCollisionEnabled()"
  }
]