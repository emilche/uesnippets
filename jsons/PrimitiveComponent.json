[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FPSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheParams"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "ECanBeCharacterBase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECanBeCharacterBase"
  },
  {
    "label": "FSpriteCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpriteCategoryInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRendererStencilMaskEvaluation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRendererStencilMaskEvaluation"
  },
  {
    "label": "FPredicateOverlapHasSameActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredicateOverlapHasSameActor"
  },
  {
    "label": "FPredicateOverlapHasDifferentActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredicateOverlapHasDifferentActor"
  },
  {
    "label": "ESceneDepthPriorityGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESceneDepthPriorityGroup"
  },
  {
    "label": "EHitProxyPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHitProxyPriority"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneInfoAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneInfoAdapter"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "FStaticLightingPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingPrimitiveInfo"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FLightingBuildOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingBuildOptions"
  },
  {
    "label": "UActorTextureStreamingBuildDataComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorTextureStreamingBuildDataComponent"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "FStaticMeshComponentBulkReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentBulkReregisterContext"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "FPrimitiveComponentInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveComponentInstanceData"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / Copy . h \" # include \" EngineStats . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Misc / Guid . h \" # include \" Interfaces / IPhysicsComponent . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / ScopedMovementUpdate . h \" # include \" Components / SceneComponent . h \" # include \" Components / ActorPrimitiveComponentInterface . h \" # include \" RenderCommandFence . h \" # include \" GameFramework / Actor . h \" # include \" CollisionQueryParams . h \" # include \" SceneTypes . h \" # include \" Engine / EngineTypes . h \" # include \" PhysicsEngine / BodyInstance . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" AI / Navigation / NavRelevantInterface . h \" # include \" VT / RuntimeVirtualTextureEnum . h \" # include \" HitProxies . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" HLOD / HLODBatchingPolicy . h \" # include \" HLOD / HLODLevelExclusion . h \" # include \" Stats / Stats2 . h \" # include \" PSOPrecacheFwd . h \" # include \" MeshDrawCommandStatsDefines . h \" # include \" PrimitiveSceneInfoData . h \" # include \" PrimitiveComponent . generated . h \")",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BeginComponentOverlap\"), STAT_BeginComponentOverlap, STATGROUP_Game, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"MoveComponent FastOverlap\"), STAT_MoveComponent_FastOverlap, STATGROUP_Game, ENGINE_API)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (class AController ; class FPrimitiveSceneProxy ; class UMaterialInterface ; class UPrimitiveComponent ; class UTexture ; class URuntimeVirtualTexture ; struct FCollisionShape ; struct FConvexVolume ; struct FEngineShowFlags ; struct FNavigableGeometryExport ; struct FPSOPrecacheParams ; struct FOverlapResult ; namespace PrimitiveComponentCVars { float HitDistanceToleranceCVar ; float InitialOverlapToleranceCVar ; int32 bAllowCachedOverlapsCVar ; int32 bEnableFastOverlapCheck ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ECB_No)",
    "insertText": "UMETA(DisplayName=\"No\"), ECB_Yes UMETA(DisplayName=\"Yes\"), ECB_Owner UMETA(DisplayName=\"(Owner)\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ERSM_Default)",
    "insertText": "UMETA(DisplayName = \"Default\"), ERSM_255 UMETA(DisplayName = \"All bits (255), ignore depth\"), ERSM_1 UMETA(DisplayName = \"First bit (1), ignore depth\"), ERSM_2 UMETA(DisplayName = \"Second bit (2), ignore depth\"), ERSM_4 UMETA(DisplayName = \"Third bit (4), ignore depth\"), ERSM_8 UMETA(DisplayName = \"Fourth bit (8), ignore depth\"), ERSM_16 UMETA(DisplayName = \"Fifth bit (16), ignore depth\"), ERSM_32 UMETA(DisplayName = \"Sixth bit (32), ignore depth\"), ERSM_64 UMETA(DisplayName = \"Seventh bit (64), ignore depth\"), ERSM_128 UMETA(DisplayName = \"Eighth bit (128), ignore depth\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (CP_0_NEVER_CULL)",
    "insertText": "UMETA(DisplayName = \"0 - Never cull\"), CP_1 UMETA(DisplayName = \"1\"), CP_2 UMETA(DisplayName = \"2\"), CP_3 UMETA(DisplayName = \"3\"), CP_4_DEFAULT UMETA(DisplayName = \"4 - Default\"), CP_5 UMETA(DisplayName = \"5\"), CP_6 UMETA(DisplayName = \"6\"), CP_7 UMETA(DisplayName = \"7\"), CP_8_QUICKLY_CULL UMETA(DisplayName = \"8 - Quickly cull\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None)",
    "insertText": "UMETA(DisplayName = \"None\"), FirstPerson UMETA(DisplayName = \"First Person\")"
  },
  {
    "label": "ToStencilMask()",
    "kind": "Method",
    "detail": "Function (struct FRendererStencilMaskEvaluation { EStencilMask)",
    "insertText": "ToStencilMask(const ERendererStencilMask InEnum)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator() (const FOverlapInfo& Info)"
  },
  {
    "label": "FPredicateOverlapHasDifferentActor()",
    "kind": "Method",
    "detail": "Function (} private : const TWeakObjectPtr<const AActor> MyOwnerPtr ; } ; struct FPredicateOverlapHasDifferentActor {)",
    "insertText": "FPredicateOverlapHasDifferentActor(const AActor& Owner) : MyOwnerPtr(&Owner)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} private : const TWeakObjectPtr<const AActor> MyOwnerPtr ; } ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (Created,Destroyed } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FiveParams(FComponentHitSignature, UPrimitiveComponent, OnComponentHit, UPrimitiveComponent*, HitComponent, AActor*, OtherActor, UPrimitiveComponent*, OtherComp, FVector, NormalImpulse, const FHitResult&, Hit)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_SixParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_SixParams(FComponentBeginOverlapSignature, UPrimitiveComponent, OnComponentBeginOverlap, UPrimitiveComponent*, OverlappedComponent, AActor*, OtherActor, UPrimitiveComponent*, OtherComp, int32, OtherBodyIndex, bool, bFromSweep, const FHitResult &, SweepResult)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_FourParams(FComponentEndOverlapSignature, UPrimitiveComponent, OnComponentEndOverlap, UPrimitiveComponent*, OverlappedComponent, AActor*, OtherActor, UPrimitiveComponent*, OtherComp, int32, OtherBodyIndex)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentWakeSignature, UPrimitiveComponent, OnComponentWake, UPrimitiveComponent*, WakingComponent, FName, BoneName)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentSleepSignature, UPrimitiveComponent, OnComponentSleep, UPrimitiveComponent*, SleepingComponent, FName, BoneName)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FComponentCollisionSettingsChangedSignature, UPrimitiveComponent, OnComponentCollisionSettingsChangedEvent, UPrimitiveComponent*, ChangedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentPhysicsStateChanged, UPrimitiveComponent, OnComponentPhysicsStateChanged, UPrimitiveComponent*, ChangedComponent, EComponentPhysicsStateChange, StateChange)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FComponentBeginCursorOverSignature, UPrimitiveComponent, OnBeginCursorOver, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FComponentEndCursorOverSignature, UPrimitiveComponent, OnEndCursorOver, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentOnClickedSignature, UPrimitiveComponent, OnClicked, UPrimitiveComponent*, TouchedComponent , FKey, ButtonPressed)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentOnReleasedSignature, UPrimitiveComponent, OnReleased, UPrimitiveComponent*, TouchedComponent, FKey, ButtonReleased)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentOnInputTouchBeginSignature, UPrimitiveComponent, OnInputTouchBegin, ETouchIndex::Type, FingerIndex, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentOnInputTouchEndSignature, UPrimitiveComponent, OnInputTouchEnd, ETouchIndex::Type, FingerIndex, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentBeginTouchOverSignature, UPrimitiveComponent, OnInputTouchEnter, ETouchIndex::Type, FingerIndex, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FComponentEndTouchOverSignature, UPrimitiveComponent, OnInputTouchLeave, ETouchIndex::Type, FingerIndex, UPrimitiveComponent*, TouchedComponent)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(abstract, HideCategories=(Mobility, VirtualTexture), ShowCategories=(PhysicsVolume), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UPrimitiveComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UPrimitiveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPrimitiveComponent(FVTableHelper& Helper)"
  },
  {
    "label": "UPrimitiveComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UPrimitiveComponent()"
  },
  {
    "label": "GetLightmapType()",
    "kind": "Method",
    "detail": "Function (ELightmapType)",
    "insertText": "GetLightmapType()"
  },
  {
    "label": "SetLightmapType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightmapType(ELightmapType InLightmapType)"
  },
  {
    "label": "IsAttachedToStreamingManager()",
    "kind": "Method",
    "detail": "Function (uint8 bAttachedToStreamingManagerAsStatic : 1 ; uint8 bAttachedToStreamingManagerAsDynamic : 1 ; uint8 bHandledByStreamingManagerAsDynamic : 1 ; uint8 bIgnoreStreamingManagerUpdate : 1 ; uint8 bAttachedToCoarseMeshStreamingManager : 1 ; uint8 bBulkReregister : 1 ; bool)",
    "insertText": "IsAttachedToStreamingManager()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint8 bIgnoreBoundsForEditorFocus : 1 ; public : # if UE_WITH_PSO_PRECACHING EPSOPrecachePriority PSOPrecacheRequestPriority : 2 ;)",
    "insertText": "static_assert((int)EPSOPrecachePriority::Highest < 1 << 2)"
  },
  {
    "label": "GetRuntimeVirtualTextures()",
    "kind": "Method",
    "detail": "Function (TArray<URuntimeVirtualTexture*> const&)",
    "insertText": "GetRuntimeVirtualTextures()"
  },
  {
    "label": "AreAllCollideableDescendantsRelative()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AreAllCollideableDescendantsRelative(bool bAllowCachedValue = true)"
  },
  {
    "label": "UE_DECLARE_COMPONENT_ACTOR_INTERFACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_COMPONENT_ACTOR_INTERFACE(PrimitiveComponent)"
  },
  {
    "label": "GetSceneData()",
    "kind": "Method",
    "detail": "Function (# if MESH_DRAW_COMMAND_STATS FName MeshDrawCommandStatsCategory ; # endif class FPrimitiveSceneInfo ; struct FPrimitiveSceneInfoAdapter ; public : FPrimitiveSceneInfoData&)",
    "insertText": "GetSceneData()"
  },
  {
    "label": "SetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastRenderTime(float InLastRenderTime)"
  },
  {
    "label": "GetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastRenderTime()"
  },
  {
    "label": "GetLastRenderTimeOnScreen()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastRenderTimeOnScreen()"
  },
  {
    "label": "SetMeshDrawCommandStatsCategory()",
    "kind": "Method",
    "detail": "Function (# if MESH_DRAW_COMMAND_STATS void)",
    "insertText": "SetMeshDrawCommandStatsCategory(FName StatsCategory)"
  },
  {
    "label": "GetMeshDrawCommandStatsCategory()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMeshDrawCommandStatsCategory()"
  },
  {
    "label": "SetupPrecachePSOParams()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetupPrecachePSOParams(FPSOPrecacheParams& Params)"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrecachePSOs()"
  },
  {
    "label": "RequestRecreateRenderStateWhenPSOPrecacheFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRecreateRenderStateWhenPSOPrecacheFinished(const FGraphEventArray& PSOPrecacheCompileEvents)"
  },
  {
    "label": "IsPSOPrecaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPSOPrecaching()"
  },
  {
    "label": "ShouldRenderProxyFallbackToDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderProxyFallbackToDefaultMaterial()"
  },
  {
    "label": "CheckPSOPrecachingAndBoostPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPSOPrecachingAndBoostPriority(EPSOPrecachePriority PSOPrecachePriority = EPSOPrecachePriority::High)"
  },
  {
    "label": "GetUsedMaterialPropertyDesc()",
    "kind": "Method",
    "detail": "Function (protected : FPrimitiveMaterialPropertyDescriptor)",
    "insertText": "GetUsedMaterialPropertyDesc(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "UsePSOPrecacheRenderProxyDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsePSOPrecacheRenderProxyDelay()"
  },
  {
    "label": "GetMoveIgnoreActors()",
    "kind": "Method",
    "detail": "Function (const TArray<AActor*>&)",
    "insertText": "GetMoveIgnoreActors()"
  },
  {
    "label": "GetMoveIgnoreComponents()",
    "kind": "Method",
    "detail": "Function (const TArray<UPrimitiveComponent*>&)",
    "insertText": "GetMoveIgnoreComponents()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (MoveIgnoreComponents .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetMoveIgnoreMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMoveIgnoreMask(FMaskFilter InMoveIgnoreMask)"
  },
  {
    "label": "GetMoveIgnoreMask()",
    "kind": "Method",
    "detail": "Function (FMaskFilter)",
    "insertText": "GetMoveIgnoreMask()"
  },
  {
    "label": "SetMaskFilterOnBodyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaskFilterOnBodyInstance(FMaskFilter InMaskFilter)"
  },
  {
    "label": "SetMaskFilter()",
    "kind": "Method",
    "detail": "Function (BodyInstance .)",
    "insertText": "SetMaskFilter(InMaskFilter)"
  },
  {
    "label": "GetMaskFilterOnBodyInstance()",
    "kind": "Method",
    "detail": "Function (} FMaskFilter)",
    "insertText": "GetMaskFilterOnBodyInstance(FMaskFilter InMaskFilter)"
  },
  {
    "label": "GetCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (const FCustomPrimitiveData&)",
    "insertText": "GetCustomPrimitiveData()"
  },
  {
    "label": "GetDefaultCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (const FCustomPrimitiveData&)",
    "insertText": "GetDefaultCustomPrimitiveData()"
  },
  {
    "label": "SetCustomPrimitiveDataInternal()",
    "kind": "Method",
    "detail": "Function (FSelectionOverride SelectionOverrideDelegate ; # endif protected : void)",
    "insertText": "SetCustomPrimitiveDataInternal(int32 DataIndex, const TArray<float>& Values)"
  },
  {
    "label": "SetDefaultCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultCustomPrimitiveData(int32 DataIndex, const TArray<float>& Values)"
  },
  {
    "label": "ConvertSweptOverlapsToCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (TArray<FOverlapInfo> OverlappingComponents ; private : template<AllocatorType> bool)",
    "insertText": "ConvertSweptOverlapsToCurrentOverlaps(TArray<FOverlapInfo, AllocatorType>& OutOverlapsAtEndLocation, const TOverlapArrayView& SweptOverlaps, int32 SweptOverlapsIndex, const FVector& EndLocation, const FQuat& EndRotationQuat)"
  },
  {
    "label": "ConvertRotationOverlapsToCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> bool)",
    "insertText": "ConvertRotationOverlapsToCurrentOverlaps(TArray<FOverlapInfo, AllocatorType>& OutOverlapsAtEndLocation, const TOverlapArrayView& CurrentOverlaps)"
  },
  {
    "label": "GetOverlapsWithActor_Template()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> bool)",
    "insertText": "GetOverlapsWithActor_Template(const AActor* Actor, TArray<FOverlapInfo, AllocatorType>& OutOverlaps)"
  },
  {
    "label": "BeginComponentOverlap()",
    "kind": "Method",
    "detail": "Function (FScopedMovementUpdate ; public : void)",
    "insertText": "BeginComponentOverlap(const FOverlapInfo& OtherOverlap, bool bDoNotifies)"
  },
  {
    "label": "EndComponentOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndComponentOverlap(const FOverlapInfo& OtherOverlap, bool bDoNotifies=true, bool bSkipNotifySelf=false)"
  },
  {
    "label": "IsOverlappingComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverlappingComponent(const FOverlapInfo& Overlap)"
  },
  {
    "label": "GetOverlapsWithActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverlapsWithActor(const AActor* Actor, TArray<FOverlapInfo>& OutOverlaps)"
  },
  {
    "label": "GetOverlappingActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingActors(TSet<AActor*>& OverlappingActors, TSubclassOf<AActor> ClassFilter=nullptr)"
  },
  {
    "label": "GetOverlappingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingComponents(TSet<UPrimitiveComponent*>& OutOverlappingComponents)"
  },
  {
    "label": "GetOverlapInfos()",
    "kind": "Method",
    "detail": "Function (const TArray<FOverlapInfo>&)",
    "insertText": "GetOverlapInfos()"
  },
  {
    "label": "UpdateOverlapsImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOverlapsImpl(const TOverlapArrayView* NewPendingOverlaps=nullptr, bool bDoNotifies=true, const TOverlapArrayView* OverlapsAtEndLocation=nullptr)"
  },
  {
    "label": "UpdatePhysicsVolume()",
    "kind": "Method",
    "detail": "Function (bIgnoreBoundsForEditorFocus = bIgnore ; } void)",
    "insertText": "UpdatePhysicsVolume(bool bTriggerNotifiers)"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FQuat& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const struct FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FRotator& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const struct FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "GetLightingAttachmentRoot()",
    "kind": "Method",
    "detail": "Function (const UPrimitiveComponent*)",
    "insertText": "GetLightingAttachmentRoot()"
  },
  {
    "label": "ComponentOverlapMultiImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ComponentOverlapMultiImpl(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FQuat& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "AddAngularImpulseInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAngularImpulseInRadians(FMath::DegreesToRadians(Impulse), BoneName, bVelChange)"
  },
  {
    "label": "AddTorqueInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorqueInRadians(FMath::DegreesToRadians(Torque), BoneName, bAccelChange)"
  },
  {
    "label": "SetPhysicsAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsAngularVelocityInRadians(FMath::DegreesToRadians(NewAngVel), bAddToCurrent, BoneName)"
  },
  {
    "label": "SetPhysicsMaxAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsMaxAngularVelocityInRadians(FMath::DegreesToRadians(NewMaxAngVel), bAddToCurrent, BoneName)"
  },
  {
    "label": "GetSceneProxy()",
    "kind": "Method",
    "detail": "Function (uint32 GlobalOverlapEventsCounter ; FPrimitiveSceneProxy* SceneProxy ; FPrimitiveSceneProxy*)",
    "insertText": "GetSceneProxy()"
  },
  {
    "label": "ReleaseSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSceneProxy()"
  },
  {
    "label": "IsAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlwaysVisible()"
  },
  {
    "label": "SetLODParentPrimitive()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetLODParentPrimitive(UPrimitiveComponent* InLODParentPrimitive)"
  },
  {
    "label": "GetLODParentPrimitive()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "GetLODParentPrimitive()"
  },
  {
    "label": "ShouldGenerateAutoLOD()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const bool)",
    "insertText": "ShouldGenerateAutoLOD(const int32 HierarchicalLevelIndex)"
  },
  {
    "label": "ShouldRenderSelected()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldRenderSelected()"
  },
  {
    "label": "GetLevelInstanceEditingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLevelInstanceEditingState()"
  },
  {
    "label": "IsComponentIndividuallySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentIndividuallySelected()"
  },
  {
    "label": "HasStaticLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStaticLighting()"
  },
  {
    "label": "CanSkipGetTextureStreamingRenderAssetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSkipGetTextureStreamingRenderAssetInfo()"
  },
  {
    "label": "GetStreamingScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStreamingScale()"
  },
  {
    "label": "UsesOnlyUnlitMaterials()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesOnlyUnlitMaterials()"
  },
  {
    "label": "GetLightMapResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLightMapResolution(int32& Width, int32& Height)"
  },
  {
    "label": "GetStaticLightMapResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStaticLightMapResolution()"
  },
  {
    "label": "GetStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetStaticLightingInfo(struct FStaticLightingPrimitiveInfo& OutPrimitiveInfo,const TArray<class ULightComponent*>& InRelevantLights,const class FLightingBuildOptions& Options)"
  },
  {
    "label": "AddMapBuildDataGUIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMapBuildDataGUIDs(TSet<FGuid>& InGUIDs)"
  },
  {
    "label": "RemapActorTextureStreamingBuiltDataToLevel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemapActorTextureStreamingBuiltDataToLevel(const class UActorTextureStreamingBuildDataComponent* InActorTextureBuildData)"
  },
  {
    "label": "GetStreamingRenderAssetInfoWithNULLRemoval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStreamingRenderAssetInfoWithNULLRemoval(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets)"
  },
  {
    "label": "BuildTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTextureStreamingData(ETextureStreamingBuildType BuildType, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<FGuid>& DependentResources)"
  },
  {
    "label": "BuildTextureStreamingDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTextureStreamingDataImpl(ETextureStreamingBuildType BuildType, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<FGuid>& DependentResources, bool& bOutSupportsBuildTextureStreamingData)"
  },
  {
    "label": "GetStaticDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (ESceneDepthPriorityGroup)",
    "insertText": "GetStaticDepthPriorityGroup()"
  },
  {
    "label": "GetUsedTextures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetUsedTextures(TArray<UTexture*>& OutTextures, EMaterialQualityLevel::Type QualityLevel)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "GetRenderMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetRenderMatrix()"
  },
  {
    "label": "GetBodyInstance()",
    "kind": "Method",
    "detail": "Function (FBodyInstance*)",
    "insertText": "GetBodyInstance(FName BoneName = NAME_None, bool bGetWelded = true, int32 Index = INDEX_NONE)"
  },
  {
    "label": "GetSquaredDistanceToCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSquaredDistanceToCollision(const FVector& Point, float& OutSquaredDistance, FVector& OutClosestPointOnCollision)"
  },
  {
    "label": "GetDistanceToCollision()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceToCollision(const FVector& Point, FVector& ClosestPointOnCollision)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float DistanceSqr = - 1 . f ;)",
    "insertText": "return(GetSquaredDistanceToCollision(Point, DistanceSqr, ClosestPointOnCollision) ? FMath::Sqrt(DistanceSqr) : -1.f)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "WeldTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeldTo(class USceneComponent* InParent, FName InSocketName = NAME_None, bool bWeldToKinematicParent = false)"
  },
  {
    "label": "WeldToImplementation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WeldToImplementation(USceneComponent * InParent, FName ParentSocketName = NAME_None, bool bWeldSimulatedChild = true, bool bWeldToKinematicParent = false)"
  },
  {
    "label": "UnWeldFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnWeldFromParent()"
  },
  {
    "label": "UnWeldChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnWeldChildren()"
  },
  {
    "label": "GetWeldedBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeldedBodies(TArray<FBodyInstance*> & OutWeldedBodies, TArray<FName> & OutLabels, bool bIncludingAutoWeld = false)"
  },
  {
    "label": "IsWelded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWelded()"
  },
  {
    "label": "GetComponentTransformFromBodyInstance()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentTransformFromBodyInstance(FBodyInstance* UseBI)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "SupportsWorldPositionOffsetVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsWorldPositionOffsetVelocity()"
  },
  {
    "label": "ComponentIsTouchingSelectionBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsTouchingSelectionBox(const FBox& InSelBBox, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "ComponentIsTouchingSelectionFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsTouchingSelectionFrustum(const FConvexVolume& InFrustum, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "SupportsStaticLighting()",
    "kind": "Method",
    "detail": "Function (# endif protected : class FStaticMeshComponentRecreateRenderStateContext ; bool)",
    "insertText": "SupportsStaticLighting()"
  },
  {
    "label": "BatchSendRenderDebugPhysics()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BatchSendRenderDebugPhysics(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (class FStaticMeshComponentBulkReregisterContext ; public : # endif using Super::SendRenderDynamicData_Concurrent ; void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "OnActorEnableCollisionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorEnableCollisionChanged()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "HasValidPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidPhysicsState()"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "OnComponentDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDestroyed(bool bDestroyingHierarchy)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "GetActorDescProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorDescProperties(FPropertyPairsMap& PropertyPairsMap)"
  },
  {
    "label": "UpdatePhysicsToRBChannels()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "UpdatePhysicsToRBChannels()"
  },
  {
    "label": "SendPhysicsTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPhysicsTransform(ETeleportType Teleport)"
  },
  {
    "label": "EnsurePhysicsStateCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePhysicsStateCreated()"
  },
  {
    "label": "MarkChildPrimitiveComponentRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkChildPrimitiveComponentRenderStateDirty()"
  },
  {
    "label": "ConditionalNotifyStreamingPrimitiveUpdated_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalNotifyStreamingPrimitiveUpdated_Concurrent()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForClient()"
  },
  {
    "label": "NeedsLoadForServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForServer()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "UpdateCollisionProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionProfile()"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "OnAttachmentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachmentChanged()"
  },
  {
    "label": "IsSimulatingPhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulatingPhysics(FName BoneName = NAME_None)"
  },
  {
    "label": "MoveComponentImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit = NULL, EMoveComponentFlags MoveFlags = MOVECOMP_NoFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "IsWorldGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldGeometry()"
  },
  {
    "label": "GetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (const FCollisionResponseContainer&)",
    "insertText": "GetCollisionResponseToChannels()"
  },
  {
    "label": "GetComponentVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetComponentVelocity()"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "GetNumUncachedStaticLightingInteractions()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetNumUncachedStaticLightingInteractions()"
  },
  {
    "label": "UpdateOcclusionBoundsSlack()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateOcclusionBoundsSlack(float NewSlack)"
  },
  {
    "label": "DispatchBlockingHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchBlockingHit(AActor& OutOwner, FHitResult const& BlockingHit)"
  },
  {
    "label": "DispatchWakeEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchWakeEvents(ESleepEvent WakeEvent, FName BoneName)"
  },
  {
    "label": "ShouldDispatchWakeEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDispatchWakeEvents(FName BoneName)"
  },
  {
    "label": "InitSweepCollisionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSweepCollisionParams(FCollisionQueryParams &OutParams, FCollisionResponseParams& OutResponseParam)"
  },
  {
    "label": "GetCollisionShape()",
    "kind": "Method",
    "detail": "Function (struct FCollisionShape)",
    "insertText": "GetCollisionShape(float Inflation = 0.0f)"
  },
  {
    "label": "AreSymmetricRotations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSymmetricRotations(const FQuat& A, const FQuat& B, const FVector& Scale3D)"
  },
  {
    "label": "PushSelectionToProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushSelectionToProxy()"
  },
  {
    "label": "PushLevelInstanceEditingStateToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLevelInstanceEditingStateToProxy(bool bInEditingState)"
  },
  {
    "label": "PushHoveredToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushHoveredToProxy(const bool bInHovered)"
  },
  {
    "label": "PushEditorVisibilityToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEditorVisibilityToProxy(uint64 InVisibility)"
  },
  {
    "label": "GetEmissiveBoost()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEmissiveBoost(int32 ElementIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) ENGINE_API void PushPrimitiveColorToProxy(const FLinearColor& InPrimitiveColor)"
  },
  {
    "label": "GetHiddenEditorViews()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR uint64)",
    "insertText": "GetHiddenEditorViews()"
  },
  {
    "label": "IsTemporarilyHiddenInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemporarilyHiddenInEditor(const bool bIncludeParent)"
  },
  {
    "label": "SetIsTemporarilyHiddenInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTemporarilyHiddenInEditor(const bool bInIsHidden)"
  },
  {
    "label": "SetIsBeingMovedByEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsBeingMovedByEditor(bool bNewIsBeingMoved)"
  },
  {
    "label": "SetSelectionOutlineColorIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionOutlineColorIndex(uint8 SelectionOutlineColorIndex)"
  },
  {
    "label": "SetOverlayColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayColor(FColor OverlayColor)"
  },
  {
    "label": "RemoveOverlayColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlayColor()"
  },
  {
    "label": "ResetSceneVelocity()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ResetSceneVelocity()"
  },
  {
    "label": "SetAllPhysicsAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsAngularVelocityInRadians(FMath::DegreesToRadians(NewAngVel), bAddToCurrent)"
  },
  {
    "label": "SetAllPhysicsPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsPosition(FVector NewPos)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(FRotator NewRot)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(const FQuat& NewRot)"
  },
  {
    "label": "CalculateMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateMass(FName BoneName = NAME_None)"
  },
  {
    "label": "PutAllRigidBodiesToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutAllRigidBodiesToSleep()"
  },
  {
    "label": "RigidBodyIsAwake()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RigidBodyIsAwake(FName BoneName = NAME_None)"
  },
  {
    "label": "SetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToChannels(const FCollisionResponseContainer& NewReponses)"
  },
  {
    "label": "OnComponentCollisionSettingsChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnComponentCollisionSettingsChanged(bool bUpdateOverlaps=true)"
  },
  {
    "label": "OnGenerateOverlapEventsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateOverlapEventsChanged()"
  },
  {
    "label": "ClearComponentOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearComponentOverlaps(bool bDoNotifies, bool bSkipNotifySelf)"
  },
  {
    "label": "WarnInvalidPhysicsOperations_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "WarnInvalidPhysicsOperations_Internal(const FText& ActionText, const FBodyInstance* BodyInstanceRequiresSimulation, FName BoneName)"
  },
  {
    "label": "SetRigidBodyReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetRigidBodyReplicatedTarget(FRigidBodyState& UpdatedState, const FName BoneName = NAME_None, int32 ServerFrame = 0, int32 ServerHandle = 0)"
  },
  {
    "label": "CanBeUsedInPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanBeUsedInPhysicsReplication(const FName BoneName = NAME_None)"
  },
  {
    "label": "ShouldComponentAddToScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldComponentAddToScene()"
  },
  {
    "label": "SetCachedMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedMaxDrawDistance(const float NewCachedMaxDrawDistance)"
  },
  {
    "label": "SetDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepthPriorityGroup(ESceneDepthPriorityGroup NewDepthPriorityGroup)"
  },
  {
    "label": "SetViewOwnerDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, ESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup)"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FCollisionQueryParams& Params)"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent(FHitResult& OutHit, const FVector Start, const FVector End, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "SweepComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FQuat& ShapeWorldRotation, const FCollisionShape &CollisionShape, bool bTraceComplex=false)"
  },
  {
    "label": "SweepComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FQuat& ShapeWorldRotation, const FPhysicsGeometry& Geometry, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams)"
  },
  {
    "label": "ComponentOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponent(class UPrimitiveComponent* PrimComp, const FVector Pos, const FQuat& Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponent(class UPrimitiveComponent* PrimComp, const FVector Pos, const FRotator Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapComponentWithResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponentWithResult(const class UPrimitiveComponent* const PrimComp, const FVector& Pos, const FQuat& Rot, const FCollisionQueryParams& Params, TArray<FOverlapResult>& OutOverlap)"
  },
  {
    "label": "ComponentOverlapComponentWithResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponentWithResult(const class UPrimitiveComponent* const PrimComp, const FVector& Pos, const FRotator& Rot, const FCollisionQueryParams& Params, TArray<FOverlapResult>& OutOverlap)"
  },
  {
    "label": "ComponentOverlapComponentImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ComponentOverlapComponentImpl(class UPrimitiveComponent* PrimComp, const FVector Pos, const FQuat& Rot, const FCollisionQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapComponentWithResultImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponentWithResultImpl(const class UPrimitiveComponent* const PrimComp, const FVector& Pos, const FQuat& Rot, const FCollisionQueryParams& Params, TArray<FOverlapResult>& OutOverlap)"
  },
  {
    "label": "OverlapComponent()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "OverlapComponent(const FVector& Pos, const FQuat& Rot, const FCollisionShape& CollisionShape)"
  },
  {
    "label": "OverlapComponentWithResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapComponentWithResult(const FVector& Pos, const FQuat& Rot, const FCollisionShape& CollisionShape, TArray<FOverlapResult>& OutOverlap)"
  },
  {
    "label": "OverlapComponentWithResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapComponentWithResult(const FVector& Pos, const FQuat& Rot, const FPhysicsGeometry& Geometry, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams, TArray<FOverlapResult>& OutOverlap)"
  },
  {
    "label": "ComputePenetration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePenetration(FMTDResult & OutMTD, const FCollisionShape& CollisionShape, const FVector& Pos, const FQuat& Rot)"
  },
  {
    "label": "GetNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavigationData(FNavigationRelevantData& OutData)"
  },
  {
    "label": "GetNavigationBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavigationBounds()"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationRelevant()"
  },
  {
    "label": "GetNavigableGeometryBodySetup()",
    "kind": "Method",
    "detail": "Function (UBodySetup*)",
    "insertText": "GetNavigableGeometryBodySetup()"
  },
  {
    "label": "GetNavigableGeometryTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetNavigableGeometryTransform()"
  },
  {
    "label": "HasCustomNavigableGeometry()",
    "kind": "Method",
    "detail": "Function (EHasCustomNavigableGeometry::Type)",
    "insertText": "HasCustomNavigableGeometry()"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "ShouldCheckOverlapFlagToQueueOverlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckOverlapFlagToQueueOverlaps(const UPrimitiveComponent& ThisComponent)"
  },
  {
    "label": "SetCustomNavigableGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomNavigableGeometry(const EHasCustomNavigableGeometry::Type InType)"
  },
  {
    "label": "DispatchMouseOverEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchMouseOverEvents(UPrimitiveComponent* CurrentComponent, UPrimitiveComponent* NewComponent)"
  },
  {
    "label": "DispatchTouchOverEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchTouchOverEvents(ETouchIndex::Type FingerIndex, UPrimitiveComponent* CurrentComponent, UPrimitiveComponent* NewComponent)"
  },
  {
    "label": "DispatchOnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnClicked(FKey ButtonClicked = EKeys::LeftMouseButton)"
  },
  {
    "label": "DispatchOnReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnReleased(FKey ButtonReleased = EKeys::LeftMouseButton)"
  },
  {
    "label": "DispatchOnInputTouchBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnInputTouchBegin(const ETouchIndex::Type Key)"
  },
  {
    "label": "DispatchOnInputTouchEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnInputTouchEnd(const ETouchIndex::Type Key)"
  },
  {
    "label": "GetPhysicsObjectById()",
    "kind": "Method",
    "detail": "Function (public : Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectById(Chaos::FPhysicsObjectId Id)"
  },
  {
    "label": "GetPhysicsObjectByName()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectByName(const FName& Name)"
  },
  {
    "label": "GetAllPhysicsObjects()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::FPhysicsObject*>)",
    "insertText": "GetAllPhysicsObjects()"
  },
  {
    "label": "GetIdFromGTParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObjectId)",
    "insertText": "GetIdFromGTParticle(Chaos::FGeometryParticle* Particle)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FPrimitiveComponentInstanceData()"
  },
  {
    "label": "FPrimitiveComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimitiveComponentInstanceData(const UPrimitiveComponent* SourceComponent)"
  },
  {
    "label": "FPrimitiveComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPrimitiveComponentInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(UActorComponent* Component, const ECacheApplyPhase CacheApplyPhase)"
  },
  {
    "label": "FindAndReplaceInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndReplaceInstances(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetComponentTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetComponentTransform()"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FColor OverlayColor ; # endif } ; bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FQuat& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionObjectQueryParams& ObjectQueryParams)"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FRotator& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionObjectQueryParams& ObjectQueryParams)"
  },
  {
    "label": "K2_IsQueryCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "K2_IsQueryCollisionEnabled()"
  },
  {
    "label": "K2_IsPhysicsCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "K2_IsPhysicsCollisionEnabled()"
  },
  {
    "label": "GetGenerateOverlapEvents()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetGenerateOverlapEvents()"
  },
  {
    "label": "GetCurrentScopedMovement()",
    "kind": "Method",
    "detail": "Function (const FScopedMovementUpdate* CurrentUpdate = ThisComponent .)",
    "insertText": "GetCurrentScopedMovement()"
  },
  {
    "label": "ConvertSweptOverlapsToCurrentOverlaps()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<AllocatorType> bool)",
    "insertText": "ConvertSweptOverlapsToCurrentOverlaps(TArray<FOverlapInfo, AllocatorType>& OverlapsAtEndLocation, const TOverlapArrayView& SweptOverlaps, int32 SweptOverlapsIndex, const FVector& EndLocation, const FQuat& EndRotationQuat)"
  },
  {
    "label": "ShouldCheckOverlapFlagToQueueOverlaps()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ; const bool bForceGatherOverlaps = !)",
    "insertText": "ShouldCheckOverlapFlagToQueueOverlaps(*this)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (const AActor* Actor =)",
    "insertText": "GetOwner()"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_MoveComponent_FastOverlap)"
  },
  {
    "label": "UnusedQueryParams()",
    "kind": "Method",
    "detail": "Function (const FCollisionQueryParams)",
    "insertText": "UnusedQueryParams(NAME_None, FCollisionQueryParams::GetUnknownStatId())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumSweptOverlaps = SweptOverlaps .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OverlapsAtEndLocation .)",
    "insertText": "Reserve(OverlapsAtEndLocation.Num() + NumSweptOverlaps)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (const FOverlapInfo& OtherOverlap = SweptOverlaps [ Index ] ; UPrimitiveComponent* OtherPrimitive = OtherOverlap . OverlapInfo .)",
    "insertText": "GetComponent()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OverlapsAtEndLocation .)",
    "insertText": "Add(OtherOverlap)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "checkfSlow(OverlapsAtEndLocation.FindByPredicate(FPredicateOverlapHasSameActor(*Actor)) == nullptr, TEXT(\"Child overlaps should not be included in the SweptOverlaps() array in UPrimitiveComponent::ConvertSweptOverlapsToCurrentOverlaps().\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } else {)",
    "insertText": "if(SweptOverlaps.Num() == 0 && AreAllCollideableDescendantsRelative())"
  },
  {
    "label": "GetOverlapsWithActor_Template()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlapsWithActor_Template(Actor, OverlapsAtEndLocation)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutOverlapsAtEndLocation .)",
    "insertText": "Reserve(OutOverlapsAtEndLocation.Num() + CurrentOverlaps.Num())"
  },
  {
    "label": "CopyIf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyIf(CurrentOverlaps, OutOverlapsAtEndLocation, FPredicateOverlapHasDifferentActor(*Actor))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent const* const PrimComp = OverlappingComponents [ OverlapIdx ] . OverlapInfo . Component .)",
    "insertText": "Get()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutOverlaps .)",
    "insertText": "Add(OverlappingComponents[OverlapIdx])"
  }
]