[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "UTickableTransformConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableTransformConstraint"
  },
  {
    "label": "FIntermediate3DTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntermediate3DTransform"
  },
  {
    "label": "F3DTransformTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F3DTransformTrackEditor"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FTransformPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformPropertyInfo"
  },
  {
    "label": "F3DTransformTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Layout / Visibility . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" ISequencerSection . h \" # include \" Framework / Commands / UICommandList . h \" # include \" ISequencerTrackEditor . h \" # include \" KeyframeTrackEditor . h \" # include \" Tracks / MovieScene3DTransformTrack . h \" # include \" Sections / MovieScene3DTransformSection . h \" # include \" SequencerKeyParams . h \" # include \" EditorUndoClient . h \" class AActor ; struct FAssetData ; class FLevelEditorViewportClient ; class SHorizontalBox ; class UTickableTransformConstraint ; namespace UE { namespace MovieScene { struct FIntermediate3DTransform ; } } class F3DTransformTrackEditor : public FKeyframeTrackEditor<UMovieScene3DTransformTrack>,public FEditorUndoClient { public :)",
    "insertText": "F3DTransformTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "F3DTransformTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "F3DTransformTrackEditor()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ProcessKeyOperation(FFrameNumber InKeyTime, const UE::Sequencer::FKeyOperation& Operation, ISequencer& InSequencer)"
  },
  {
    "label": "BuildObjectBindingColumnWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingColumnWidgets(TFunctionRef<TSharedRef<SHorizontalBox>()> GetEditBox, const UE::Sequencer::TViewModelPtr<UE::Sequencer::FObjectBindingModel>& ObjectBinding, const UE::Sequencer::FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindinsg, const UClass* ObjectClass)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "HasTransformKeyBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTransformKeyBindings()"
  },
  {
    "label": "OnAddTransformKeysForSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTransformKeysForSelectedObjects(EMovieSceneTransformChannel Channel)"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSaveWorld(UWorld* World)"
  },
  {
    "label": "OnPostSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSaveWorld(UWorld* World)"
  },
  {
    "label": "MatchesContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesContext(const FTransactionContext& InContext, const TArray<TPair<UObject*, FTransactionObjectEvent>>& TransactionObjects)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "GetKeyedStatusInSection()",
    "kind": "Method",
    "detail": "Function (} private : EPropertyKeyedStatus)",
    "insertText": "GetKeyedStatusInSection(const UMovieScene3DTransformSection& Section, const TRange<FFrameNumber>& Range, EMovieSceneTransformChannel TransformChannel, TConstArrayView<int32> ChannelIndices)"
  },
  {
    "label": "GetPropertyKeyedStatus()",
    "kind": "Method",
    "detail": "Function (EPropertyKeyedStatus)",
    "insertText": "GetPropertyKeyedStatus(const IPropertyHandle& PropertyHandle, EMovieSceneTransformChannel TransformChannel)"
  },
  {
    "label": "OnTransformPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformPropertyChanged(const FPropertyChangedParams& PropertyChangedParams, EMovieSceneTransformChannel TransformChannel)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyOperation(UObject* ObjectToKey, TArrayView<const UE::Sequencer::FKeySectionOperation> SectionsToKey, ISequencer& InSequencer, FFrameNumber KeyTime)"
  },
  {
    "label": "CanAddTransformTrackForActorHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddTransformTrackForActorHandle(FGuid ActorHandle)"
  },
  {
    "label": "HasTransformTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTransformTrack(UObject& InObject)"
  },
  {
    "label": "OnPreTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreTransformChanged(UObject& InObject)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformChanged(UObject& InObject)"
  },
  {
    "label": "OnPrePropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPrePropertyChanged(UObject* InObject, const class FEditPropertyChain& InPropertyChain)"
  },
  {
    "label": "OnPostPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostPropertyChanged(UObject* InObject, struct FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "IsCameraVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsCameraVisible(FGuid ObjectGuid)"
  },
  {
    "label": "IsCameraLocked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsCameraLocked(FGuid ObjectGuid)"
  },
  {
    "label": "OnLockCameraClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockCameraClicked(ECheckBoxState CheckBoxState, FGuid ObjectGuid)"
  },
  {
    "label": "GetLockCameraToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockCameraToolTip(FGuid ObjectGuid)"
  },
  {
    "label": "IsCameraBindingLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCameraBindingLocked(FGuid ObjectGuid)"
  },
  {
    "label": "LockCameraBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockCameraBinding(bool bLock, FGuid ObjectGuid, FLevelEditorViewportClient* ViewportClient = nullptr, bool bRemoveCinematicLock = true)"
  },
  {
    "label": "GetTransformKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransformKeys(const TOptional<FTransformData>& LastTransform, const FTransformData& CurrentTransform, EMovieSceneTransformChannel ChannelsToKey, UObject* Object, UMovieSceneSection* Section, FGeneratedTrackKeys& OutGeneratedKeys)"
  },
  {
    "label": "GetTransformOrigin()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTransformOrigin()"
  },
  {
    "label": "AddTransformKeysForHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformKeysForHandle(TArray<FGuid> ObjectHandles, EMovieSceneTransformChannel ChannelToKey, ESequencerKeyMode KeyMode)"
  },
  {
    "label": "AddTransformKeysForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformKeysForObject(UObject* Object, EMovieSceneTransformChannel ChannelToKey, ESequencerKeyMode KeyMode)"
  },
  {
    "label": "AddTransformKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransformKeys(UObject* ObjectToKey, const TOptional<FTransformData>& LastTransform, const FTransformData& CurrentTransform, EMovieSceneTransformChannel ChannelsToKey, ESequencerKeyMode KeyMode)"
  },
  {
    "label": "RecomposeTransform()",
    "kind": "Method",
    "detail": "Function (FTransformData)",
    "insertText": "RecomposeTransform(const FTransformData& InTransformData, UObject* AnimatedObject, UMovieSceneSection* Section)"
  },
  {
    "label": "ImportAnimSequenceTransforms()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ImportAnimSequenceTransforms(const FAssetData& Asset, UMovieScene3DTransformTrack* TransformTrack)"
  },
  {
    "label": "ImportAnimSequenceTransformsEnterPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportAnimSequenceTransformsEnterPressed(const TArray<FAssetData>& Asset, UMovieScene3DTransformTrack* TransformTrack)"
  },
  {
    "label": "HandleOnConstraintAdded()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnSceneComponentConstrainedHandle ; void)",
    "insertText": "HandleOnConstraintAdded(IMovieSceneConstrainedSection* InSection, FMovieSceneConstraintChannel* InConstraintChannel)"
  },
  {
    "label": "HandleConstraintKeyDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintKeyDeleted(IMovieSceneConstrainedSection* InSection, const FMovieSceneConstraintChannel* InConstraintChannel, const TArray<FKeyAddOrDeleteEventItem>& InDeletedItems)"
  },
  {
    "label": "HandleConstraintKeyMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintKeyMoved(IMovieSceneConstrainedSection* InSection, const FMovieSceneConstraintChannel* InConstraintChannel, const TArray<FKeyMoveEventItem>& InMovedItems)"
  },
  {
    "label": "HandleConstraintRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintRemoved(IMovieSceneConstrainedSection* InSection)"
  },
  {
    "label": "HandleConstraintPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintPropertyChanged(UTickableTransformConstraint* InConstraint, const FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "ClearOutConstraintDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOutConstraintDelegates()"
  },
  {
    "label": "BuildAssetPickerSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAssetPickerSubMenu(FMenuBuilder& InMenuBuilder, UMovieScene3DTransformTrack* InTransformTrack)"
  }
]