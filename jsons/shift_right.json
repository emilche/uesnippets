[
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SHIFT_RIGHT_H # define _LIBCPP___ALGORITHM_SHIFT_RIGHT_H # include<__algorithm / move . h> # include<__algorithm / move_backward . h> # include<__algorithm / swap_ranges . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / swap . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 template <class _ForwardIterator> inline _LIBCPP_INLINE_VISIBILITY constexpr _ForwardIterator shift_right(_ForwardIterator __first, _ForwardIterator __last, typename iterator_traits<_ForwardIterator>::difference_type __n)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decltype(__n)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(__is_cpp17_bidirectional_iterator<_ForwardIterator>::value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __m = __last ;)",
    "insertText": "for(; __n > 0; --__n)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(__first, __trail, __ret)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__trail =)",
    "insertText": "move(__mid, __ret, __trail)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(__first, __mid, __trail)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __mid ; + + __trail ; + + __lead ;)",
    "insertText": "if(__mid == __ret)"
  }
]