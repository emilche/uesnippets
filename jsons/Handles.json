[
  {
    "label": "THandleArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandleArray"
  },
  {
    "label": "THandleHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandleHeap"
  },
  {
    "label": "TConstHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstHandle"
  },
  {
    "label": "THandleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandleData"
  },
  {
    "label": "THandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandle"
  },
  {
    "label": "FHandleEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHandleEntry"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosArchive . h \" # include \" Chaos / Core . h \" # include \" ChaosCheck . h \" namespace Chaos { template<ElementType,uint32 IndexWidth,uint32 GenerationWidth> class THandleArray ; template<ElementType,uint32 IndexWidth,uint32 GenerationWidth> class THandleHeap ; template<ElementType,uint32 IndexWidth,uint32 GenerationWidth> class TConstHandle ; template<uint32 IndexWidth,uint32 GenerationWidth> class THandleData { public :)",
    "insertText": "static_assert((IndexWidth + GenerationWidth) / 8 == sizeof(uint32), \"Sum of widths does not match data type\")"
  },
  {
    "label": "THandleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THandleData() : Index(0) , Generation(0)"
  },
  {
    "label": "THandleData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleData(uint32 InIndex, uint32 InGeneration) : Index(InIndex) , Generation(InGeneration)"
  },
  {
    "label": "THandleData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleData(uint32 FullHandle) : Index(FullHandle >> GenerationWidth) , Generation(FullHandle)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "InUint()",
    "kind": "Method",
    "detail": "Function (Generation = InUint<<IndexWidth ; Index = InUint>> GenerationWidth ; Generation =)",
    "insertText": "InUint((1 << IndexWidth) - 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, THandleData<IndexWidth, GenerationWidth>& InHandle)"
  },
  {
    "label": "AsUint()",
    "kind": "Method",
    "detail": "Function (uint32 Packed = InHandle .)",
    "insertText": "AsUint()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Packed ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "FromUint()",
    "kind": "Method",
    "detail": "Function (InHandle .)",
    "insertText": "FromUint(Packed)"
  },
  {
    "label": "THandle()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } protected : uint32 Index : IndexWidth ; uint32 Generation : GenerationWidth ; } ; template<ElementType,uint32 IndexWidth,uint32 GenerationWidth> class THandle : public THandleData<IndexWidth,GenerationWidth> { public : THandleArray<ElementType,IndexWidth,GenerationWidth> ; THandleHeap<ElementType,IndexWidth,GenerationWidth> ; TConstHandle<ElementType,IndexWidth,GenerationWidth> ;)",
    "insertText": "THandle()"
  },
  {
    "label": "THandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THandle(uint32 InIndex, uint32 InGeneration) : THandleData<IndexWidth, GenerationWidth>(InIndex, InGeneration)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const THandle<ElementType, IndexWidth, GenerationWidth>& A, const THandle<ElementType, IndexWidth, GenerationWidth>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, THandle<ElementType, IndexWidth, GenerationWidth>& InHandle)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar((THandleData<IndexWidth, GenerationWidth>*)&InHandle)"
  },
  {
    "label": "TConstHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TConstHandle(uint32 InIndex, uint32 InGeneration) : THandleData<IndexWidth, GenerationWidth>(InIndex, InGeneration)"
  },
  {
    "label": "TConstHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstHandle(const THandle<ElementType, IndexWidth, GenerationWidth>& InNonConstHandle) : THandleData<IndexWidth, GenerationWidth>(InNonConstHandle.Index, InNonConstHandle.Generation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TConstHandle<ElementType, IndexWidth, GenerationWidth>& A, const TConstHandle<ElementType, IndexWidth, GenerationWidth>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TConstHandle<ElementType, IndexWidth, GenerationWidth>& InHandle)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T ElementSize =)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uint32 ElementGrowth = 4 ; uint32 InvalidFreeIndex = TNumericLimits<uint32)",
    "insertText": "Max()"
  },
  {
    "label": "THandleArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THandleArray(const THandleArray<ElementType, IndexWidth, GenerationWidth>& Other) : THandleArray(0)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(Other)"
  },
  {
    "label": "THandleArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleArray(THandleArray<ElementType, IndexWidth, GenerationWidth>&& Other) : THandleArray(0)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFrom(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} THandleArray&)",
    "insertText": "operator(const THandleArray<ElementType, IndexWidth, GenerationWidth>& Other)"
  },
  {
    "label": "THandleArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleArray(int32 InitialNum) : FreeList(InvalidFreeIndex) , Data(nullptr) , NumData(0) , Capacity(0) , NumActive(0)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(ElementType*)FMemory::Malloc(InitialNum * ElementSize, ElementAlign)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (NumData = Capacity = InitialNum ; HandleEntries .)",
    "insertText": "AddDefaulted(NumData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HandleEntries [ Index - 1 ] . NextFree = Index ; } FreeList = 0 ; Validity .)",
    "insertText": "Add(false, NumData)"
  },
  {
    "label": "THandleArray()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "THandleArray()"
  },
  {
    "label": "DestroyItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyItems()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "Get(FHandle InHandle)"
  },
  {
    "label": "Generation()",
    "kind": "Method",
    "detail": "Function (const FHandleEntry& Entry = HandleEntries [ InHandle . Index ] ; return Entry . Generation = = InHandle .)",
    "insertText": "Generation(Data[InHandle.Index])"
  },
  {
    "label": "CHAOS_ENSURE_MSG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "CHAOS_ENSURE_MSG(false, TEXT(\"Failed to access handle (%u, %u). NumEntries = %d, NumFlags = %d\"), InHandle.Index, InHandle.Generation, HandleEntries.Num(), Validity.Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } const ElementType*)",
    "insertText": "Get(FConstHandle InHandle)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "ensureMsgf(false, TEXT(\"Failed to access handle (%u, %u). NumEntries = %d, NumFlags = %d\"), InHandle.Index, InHandle.Generation, HandleEntries.Num(), Validity.Num())"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } FHandle)",
    "insertText": "GetHandle(uint32 InIndex)"
  },
  {
    "label": "FHandle()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FHandle()"
  },
  {
    "label": "GetConstHandle()",
    "kind": "Method",
    "detail": "Function (} FConstHandle)",
    "insertText": "GetConstHandle(uint32 InIndex)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<. . . ConstructionArgs> FHandle)",
    "insertText": "Create(ConstructionArgs&&... InConstructionArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = INDEX_NONE ;)",
    "insertText": "if(FreeList != InvalidFreeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewIndex = FreeList ; FHandleEntry& ReusedEntry = HandleEntries [ FreeList ] ; Validity [ FreeList ] = true ; FreeList = ReusedEntry . NextFree ; ReusedEntry . NextFree = InvalidFreeIndex ; } else {)",
    "insertText": "if(NumData == Capacity)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(ElementType*)FMemory::Realloc(Data, ElementSize * (Capacity + ElementGrowth), ElementAlign)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Capacity + = ElementGrowth ; } NewIndex = NumData ; HandleEntries .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Validity .)",
    "insertText": "Add(true)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (+ + NumData ; })",
    "insertText": "new(Data + NewIndex) ElementType(Forward<ConstructionArgs>(InConstructionArgs)...)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (NumActive + + ; return)",
    "insertText": "GetHandle(NewIndex)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy(FHandle InHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FHandleEntry& Entry = HandleEntries [ InHandle . Index ] ;)",
    "insertText": "if(Entry.Generation != InHandle.Generation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Validity [ InHandle . Index ] = false ; NumActive - - ;)",
    "insertText": "if(Entry.Generation == 0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (HandleEntries [ InHandle . Index ] . NextFree = FreeList ; FreeList = InHandle . Index ; } else { FreeList = InHandle . Index ; } } } uint32)",
    "insertText": "Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, THandleArray& Array)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Data(ElementType*)FMemory::Realloc(Array.Data, Array.Capacity * ElementSize, ElementAlign)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (Array . Data [ Index ] =)",
    "insertText": "ElementType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Array . Data [ Index ] ; } } else {)",
    "insertText": "for(int32 Index = 0; Index < Array.NumData; ++Index)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(Data + Index)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Free(Data)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FreeList = InvalidFreeIndex ; Capacity = 0 ; NumData = 0 ; NumActive = 0 ; Data = nullptr ; Validity .)",
    "insertText": "Reset()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyFrom(const THandleArray& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Capacity = Other . Capacity ; HandleEntries = Other . HandleEntries ; Validity = Other . Validity ; FreeList = Other . FreeList ;)",
    "insertText": "if(Capacity > 0)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Data(ElementType*)FMemory::Malloc(Capacity * ElementSize, ElementAlign)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumData = Other . NumData ; NumActive = Other . NumActive ;)",
    "insertText": "for(int32 Index = 0; Index < NumData; ++Index)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (ConstructItems<)",
    "insertText": "ElementType(Data + Index, Other.Data + Index, 1)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "MoveFrom(THandleArray& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "MoveTemp(Other.Data)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NumData = Other . NumData ; NumActive = Other . NumActive ; } HandleEntries =)",
    "insertText": "MoveTemp(Other.HandleEntries)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Validity =)",
    "insertText": "MoveTemp(Other.Validity)"
  },
  {
    "label": "FHandleEntry()",
    "kind": "Method",
    "detail": "Function (FreeList = Other . FreeList ; Other . FreeList = InvalidFreeIndex ; Other . Capacity = 0 ; Other . NumData = 0 ; Other . NumActive = 0 ; Other . Data = nullptr ; } class FHandleEntry { public :)",
    "insertText": "FHandleEntry() : NextFree(InvalidFreeIndex) , Generation(1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32 NextFree : IndexWidth ; uint32 Generation : GenerationWidth ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FHandleEntry& InHandleEntry)"
  },
  {
    "label": "Packed()",
    "kind": "Method",
    "detail": "Function (InHandleEntry . NextFree = Packed>> GenerationWidth ; InHandleEntry . Generation =)",
    "insertText": "Packed((1 << IndexWidth) - 1)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } } ; uint32 FreeList ; TArray<FHandleEntry> HandleEntries ; TBitArray<> Validity ; ElementType* Data ; int32 NumData ; int32 Capacity ; int32 NumActive ; } ; template<ElementType,uint32 IndexWidth = 2 4,uint32 GenerationWidth = 8> class THandleHeap { public :)",
    "insertText": "static_assert(TIsTrivial<ElementType>::Value, \"Handle managed data must be trivial\")"
  },
  {
    "label": "THandleHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THandleHeap(int32 ReserveNum) : FreeList(InvalidFreeIndex) , NumActive(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (HandleEntries .)",
    "insertText": "Reserve(ReserveNum)"
  },
  {
    "label": "THandleHeap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleHeap(const THandleHeap<ElementType, IndexWidth, GenerationWidth>& Other) : THandleHeap(0)"
  },
  {
    "label": "THandleHeap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleHeap(THandleHeap<ElementType, IndexWidth, GenerationWidth>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} THandleHeap&)",
    "insertText": "operator(const THandleHeap<ElementType, IndexWidth, GenerationWidth>& Other)"
  },
  {
    "label": "THandleHeap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "THandleHeap()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (FHandleEntry& Entry = HandleEntries [ InHandle . Index ] ;)",
    "insertText": "return(Entry.Generation == InHandle.Generation && Validity[InHandle.Index])"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<. . . ConstructionArgs> FHandle)",
    "insertText": "Create(ConstructionArgs... Args)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (NewIndex = FreeList ; FHandleEntry& ReusedEntry = HandleEntries [ FreeList ] ; ReusedEntry . Ptr = new)",
    "insertText": "ElementType(Forward<ConstructionArgs>(Args)...)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (FHandleEntry& NewEntry = HandleEntries .)",
    "insertText": "Last()"
  },
  {
    "label": "GetNumActive()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumActive()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(GetHandle(Index))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} HandleEntries .)",
    "insertText": "Empty(bShrink ? 0 : HandleEntries.GetAllocatedSize())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FreeList = InvalidFreeIndex ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, THandleHeap& Array)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<* Entry . Ptr ; } } else {)",
    "insertText": "for(int32 Index = 0; Index < NumEntries; ++Index)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (continue ; } FHandleEntry& Entry = Array . HandleEntries [ Index ] ; Ar<<* Entry . Ptr ; } } return Ar ; } private : void)",
    "insertText": "CopyFrom(const THandleHeap<ElementType, IndexWidth, GenerationWidth>& Other)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FreeList = Other . FreeList ; NumActive = Other . NumActive ; Validity = Other . Validity ; HandleEntries .)",
    "insertText": "Reserve(Other.Num())"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (NewEntry . NextFree = Entry . NextFree ; NewEntry . Generation = Entry . Generation ; NewEntry . Ptr = Entry . Ptr ? new)",
    "insertText": "ElementType(*Entry.Ptr)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveFrom(THandleHeap<ElementType, IndexWidth, GenerationWidth>& Other)"
  },
  {
    "label": "FHandleEntry()",
    "kind": "Method",
    "detail": "Function (Other . NumActive = 0 ; } class FHandleEntry { public :)",
    "insertText": "FHandleEntry() : NextFree(InvalidFreeIndex) , Generation(1) , Ptr(nullptr)"
  }
]