[
  {
    "label": "FHttpRequestCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestCommon"
  },
  {
    "label": "FCurlMultiWaitIOManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlMultiWaitIOManager"
  },
  {
    "label": "FCurlMultiWaitIOManagerIOAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlMultiWaitIOManagerIOAccess"
  },
  {
    "label": "FParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParams"
  },
  {
    "label": "FCurlMultiWaitEventLoopHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlMultiWaitEventLoopHttpThread"
  },
  {
    "label": "FCurlMultiWaitIOManagerIOAccess()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if WITH_CURL # if WITH_CURL_MULTIWAIT # include \" EventLoopHttpThread . h \" # include \" EventLoop / EventLoop . h \" # include \" Templates / Function . h \" # if PLATFORM_MICROSOFT # include \" Microsoft / AllowMicrosoftPlatformTypes . h \" # endif # ifdef PLATFORM_CURL_INCLUDE # include PLATFORM_CURL_INCLUDE # else # include \" curl / curl . h \" # endif # if PLATFORM_MICROSOFT # include \" Microsoft / HideMicrosoftPlatformTypes . h \" # endif class FHttpRequestCommon ; class FCurlMultiWaitIOManager ; class FCurlMultiWaitIOManagerIOAccess final : public FNoncopyable { public :)",
    "insertText": "FCurlMultiWaitIOManagerIOAccess(FCurlMultiWaitIOManager& InIOManager)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : FCurlMultiWaitIOManager& IOManager ; } ; class FCurlMultiWaitIOManager final : public UE::EventLoop::IIOManager { public : using FIOAccess = FCurlMultiWaitIOManagerIOAccess ; struct FParams { CURLM* MultiHandle = nullptr ; TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FCurlMultiWaitIOManager()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FCurlMultiWaitIOManager(UE::EventLoop::IEventLoop& EventLoop, FParams&& Params)"
  },
  {
    "label": "FCurlMultiWaitIOManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCurlMultiWaitIOManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Poll(FTimespan WaitTime)"
  },
  {
    "label": "GetIOAccess()",
    "kind": "Method",
    "detail": "Function (FIOAccess&)",
    "insertText": "GetIOAccess()"
  },
  {
    "label": "FCurlMultiWaitEventLoopHttpThread()",
    "kind": "Method",
    "detail": "Function (FIOAccess IOAccess ; UE::EventLoop::IEventLoop& EventLoop ; FParams Params ; int32 EmptySequentialWaitCount ; } ; class FCurlMultiWaitEventLoopHttpThread : public FEventLoopHttpThread { public :)",
    "insertText": "FCurlMultiWaitEventLoopHttpThread()"
  },
  {
    "label": "StartThreadedRequest()",
    "kind": "Method",
    "detail": "Function (protected : PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "StartThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CompleteThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CreateEventLoop()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : void)",
    "insertText": "CreateEventLoop()"
  },
  {
    "label": "DestroyEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEventLoop()"
  },
  {
    "label": "UpdateEventLoopConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventLoopConfigs()"
  },
  {
    "label": "GetEventLoop()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop*)",
    "insertText": "GetEventLoop()"
  },
  {
    "label": "GetEventLoopChecked()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop&)",
    "insertText": "GetEventLoopChecked()"
  },
  {
    "label": "ProcessCurlRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCurlRequests()"
  }
]