[
  {
    "label": "FSlateInvalidationWidgetPreHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetPreHeap"
  },
  {
    "label": "FWidgetOrderLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetOrderLess"
  },
  {
    "label": "FSlateInvalidationWidgetPostHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetPostHeap"
  },
  {
    "label": "FWidgetOrderGreater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetOrderGreater"
  },
  {
    "label": "FScopeWidgetCannotBeAdded",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeWidgetCannotBeAdded"
  },
  {
    "label": "FSlateInvalidationWidgetPrepassHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetPrepassHeap"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FastUpdate / SlateInvalidationWidgetIndex . h \" # include \" FastUpdate / SlateInvalidationWidgetList . h \" # include \" FastUpdate / SlateInvalidationWidgetSortOrder . h \" # ifndef UE_SLATE_WITH_INVALIDATIONWIDGETHEAP_DEBUGGING # define UE_SLATE_WITH_INVALIDATIONWIDGETHEAP_DEBUGGING DO_CHECK # endif namespace UE::Slate::Private { # if UE_SLATE_WITH_INVALIDATIONWIDGETHEAP_DEBUGGING bool GSlateInvalidationWidgetHeapVerifyWidgetContains ; # endif } class FSlateInvalidationWidgetPreHeap { public : using FElement = FSlateInvalidationWidgetHeapElement ; struct FWidgetOrderLess { bool)",
    "insertText": "operator()(const FElement& A, const FElement& B)"
  },
  {
    "label": "FSlateInvalidationWidgetPreHeap()",
    "kind": "Method",
    "detail": "Function (} } ; using SortPredicate = FWidgetOrderLess ; int32 NumberOfPreAllocatedElement = 3 2 ; using FElementContainer = TArray<FElement,TInlineAllocator<NumberOfPreAllocatedElement>> ;)",
    "insertText": "FSlateInvalidationWidgetPreHeap(FSlateInvalidationWidgetList& InOwnerList) : OwnerList(InOwnerList)"
  },
  {
    "label": "HeapPushUnique()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "HeapPushUnique(FSlateInvalidationWidgetList::InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "HeapPush()",
    "kind": "Method",
    "detail": "Function (InvalidationWidget . bContainedByWidgetPreHeap = true ; Heap .)",
    "insertText": "HeapPush(FElement{ InvalidationWidget.Index, FSlateInvalidationWidgetSortOrder{OwnerList, InvalidationWidget.Index} }, SortPredicate())"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (} } [ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "HeapPop()"
  },
  {
    "label": "HeapTop()",
    "kind": "Method",
    "detail": "Function (FSlateInvalidationWidgetIndex Result = Heap .)",
    "insertText": "HeapTop().GetWidgetIndex()"
  },
  {
    "label": "HeapPopDiscard()",
    "kind": "Method",
    "detail": "Function (Heap .)",
    "insertText": "HeapPopDiscard(SortPredicate(), EAllowShrinking::No)"
  },
  {
    "label": "HeapPopDiscard()",
    "kind": "Method",
    "detail": "Function (OwnerList [ Result ] . bContainedByWidgetPreHeap = false ; return Result ; } void)",
    "insertText": "HeapPopDiscard()"
  },
  {
    "label": "HeapPeek()",
    "kind": "Method",
    "detail": "Function (OwnerList [ Result ] . bContainedByWidgetPreHeap = false ; } [ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "HeapPeek()"
  },
  {
    "label": "HeapPeekElement()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FElement&)",
    "insertText": "HeapPeekElement()"
  },
  {
    "label": "RemoveRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RemoveRange(const FSlateInvalidationWidgetList::FIndexRange& Range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 RemoveCount = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < Heap.Num(); ++Index)"
  },
  {
    "label": "GetWidgetIndex()",
    "kind": "Method",
    "detail": "Function (const FSlateInvalidationWidgetIndex WidgetIndex = Heap [ Index ] .)",
    "insertText": "GetWidgetIndex()"
  },
  {
    "label": "HeapRemoveAt()",
    "kind": "Method",
    "detail": "Function (OwnerList [ WidgetIndex ] . bContainedByWidgetPreHeap = false ; Heap .)",
    "insertText": "HeapRemoveAt(Index, SortPredicate())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Index = INDEX_NONE ; } } return RemoveCount ; } void)",
    "insertText": "Reset(bool bResetContained)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } Heap .)",
    "insertText": "Empty(NumberOfPreAllocatedElement)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] int32)",
    "insertText": "Num()"
  },
  {
    "label": "Contains_Debug()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "Contains_Debug(const FSlateInvalidationWidgetIndex WidgetIndex)"
  },
  {
    "label": "IsValidHeap_Debug()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsValidHeap_Debug()"
  },
  {
    "label": "GetRaw()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FElementContainer&)",
    "insertText": "GetRaw()"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(Element)"
  },
  {
    "label": "VerifyContainsFlag()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "VerifyContainsFlag(const FSlateInvalidationWidgetList::InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_WITH_INVALIDATIONWIDGETHEAP_DEBUGGING)",
    "insertText": "if(UE::Slate::Private::GSlateInvalidationWidgetHeapVerifyWidgetContains)"
  },
  {
    "label": "FSlateInvalidationWidgetPostHeap()",
    "kind": "Method",
    "detail": "Function (} } ; using SortPredicate = FWidgetOrderGreater ; int32 NumberOfPreAllocatedElement = 1 0 0 ; using FElementContainer = TArray<FElement,TInlineAllocator<NumberOfPreAllocatedElement>> ;)",
    "insertText": "FSlateInvalidationWidgetPostHeap(FSlateInvalidationWidgetList& InOwnerList) : OwnerList(InOwnerList) , WidgetCannotBeAdded(FSlateInvalidationWidgetIndex::Invalid) , bIsHeap(false)"
  },
  {
    "label": "PushBackUnique()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PushBackUnique(FSlateInvalidationWidgetList::InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InvalidationWidget . bContainedByWidgetPostHeap = true ; Heap .)",
    "insertText": "Emplace(InvalidationWidget.Index, FSlateInvalidationWidgetSortOrder{OwnerList, InvalidationWidget.Index})"
  },
  {
    "label": "PushBackOrHeapUnique()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PushBackOrHeapUnique(FSlateInvalidationWidgetList::InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "HeapPushUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapPushUnique(InvalidationWidget)"
  },
  {
    "label": "PushBackUnique()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PushBackUnique(InvalidationWidget)"
  },
  {
    "label": "HeapTop()",
    "kind": "Method",
    "detail": "Function (FElement Result = Heap .)",
    "insertText": "HeapTop()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 RemoveCount = 0 ;)",
    "insertText": "for(int32 Index = Heap.Num() -1; Index >= 0 ; --Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (OwnerList [ WidgetIndex ] . bContainedByWidgetPostHeap = false ; Heap .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "Heapify()",
    "kind": "Method",
    "detail": "Function (bIsHeap = false ; } void)",
    "insertText": "Heapify()"
  },
  {
    "label": "Heapify()",
    "kind": "Method",
    "detail": "Function (Heap .)",
    "insertText": "Heapify(SortPredicate())"
  },
  {
    "label": "IsHeap()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsHeap()"
  },
  {
    "label": "FScopeWidgetCannotBeAdded()",
    "kind": "Method",
    "detail": "Function (} } public : struct FScopeWidgetCannotBeAdded {)",
    "insertText": "FScopeWidgetCannotBeAdded(FSlateInvalidationWidgetPostHeap& InHeap, FSlateInvalidationWidgetList::InvalidationWidgetType& InInvalidationWidget) : Heap(InHeap) , InvalidationWidget(InInvalidationWidget) , WidgetIndex(InvalidationWidget.Index)"
  },
  {
    "label": "FScopeWidgetCannotBeAdded()",
    "kind": "Method",
    "detail": "Function (Heap . WidgetCannotBeAdded = InvalidationWidget . Index ; InvalidationWidget . bContainedByWidgetPostHeap = true ; } ~)",
    "insertText": "FScopeWidgetCannotBeAdded()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Heap . WidgetCannotBeAdded = FSlateInvalidationWidgetIndex::Invalid ;)",
    "insertText": "check(Heap.OwnerList.IsValidIndex(WidgetIndex))"
  },
  {
    "label": "FSlateInvalidationWidgetPrepassHeap()",
    "kind": "Method",
    "detail": "Function (} } ; using SortPredicate = FWidgetOrderGreater ; int32 NumberOfPreAllocatedElement = 3 2 ; using FElementContainer = TArray<FElement,TInlineAllocator<NumberOfPreAllocatedElement>> ;)",
    "insertText": "FSlateInvalidationWidgetPrepassHeap(FSlateInvalidationWidgetList& InOwnerList) : OwnerList(InOwnerList) , bIsHeap(false)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InvalidationWidget . bContainedByWidgetPrepassList = true ; Heap .)",
    "insertText": "Emplace(InvalidationWidget.Index, FSlateInvalidationWidgetSortOrder{ OwnerList, InvalidationWidget.Index })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 RemoveCount = 0 ;)",
    "insertText": "for(int32 Index = Heap.Num() - 1; Index >= 0; --Index)"
  }
]