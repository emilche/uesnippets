[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Argument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Argument"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "TerminatorInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TerminatorInst"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "SparseSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSolver"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "AbstractLatticeFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbstractLatticeFunction"
  },
  {
    "label": "AbstractLatticeFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_SPARSEPROPAGATION_H # define LLVM_ANALYSIS_SPARSEPROPAGATION_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include<set> # include<vector> namespace llvm { class Value ; class Constant ; class Argument ; class Instruction ; class PHINode ; class TerminatorInst ; class BasicBlock ; class Function ; class SparseSolver ; class raw_ostream ; template<T> class SmallVectorImpl ; class AbstractLatticeFunction { public : typedef void* LatticeVal ; private : LatticeVal UndefVal,OverdefinedVal,UntrackedVal ; public :)",
    "insertText": "AbstractLatticeFunction(LatticeVal undefVal, LatticeVal overdefinedVal, LatticeVal untrackedVal)"
  },
  {
    "label": "AbstractLatticeFunction()",
    "kind": "Method",
    "detail": "Function (UndefVal = undefVal ; OverdefinedVal = overdefinedVal ; UntrackedVal = untrackedVal ; } ~)",
    "insertText": "AbstractLatticeFunction()"
  },
  {
    "label": "getUndefVal()",
    "kind": "Method",
    "detail": "Function (LatticeVal)",
    "insertText": "getUndefVal()"
  },
  {
    "label": "IsSpecialCasedPHI()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpecialCasedPHI(PHINode *PN)"
  },
  {
    "label": "MergeValues()",
    "kind": "Method",
    "detail": "Function (} LatticeVal)",
    "insertText": "MergeValues(LatticeVal X, LatticeVal Y)"
  },
  {
    "label": "ComputeInstructionState()",
    "kind": "Method",
    "detail": "Function (} LatticeVal)",
    "insertText": "ComputeInstructionState(Instruction &I, SparseSolver &SS)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintValue(LatticeVal V, raw_ostream &OS)"
  },
  {
    "label": "SparseSolver()",
    "kind": "Method",
    "detail": "Function (} ; class SparseSolver { typedef AbstractLatticeFunction::LatticeVal LatticeVal ; AbstractLatticeFunction* LatticeFunc ; DenseMap<Value*,LatticeVal> ValueState ; SmallPtrSet<BasicBlock*,1 6> BBExecutable ; std::vector<Instruction*> InstWorkList ; std::vector<BasicBlock*> BBWorkList ; typedef std::pair<BasicBlock*,BasicBlock*> Edge ; std::set<Edge> KnownFeasibleEdges ;)",
    "insertText": "SparseSolver(const SparseSolver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SparseSolver&)"
  },
  {
    "label": "SparseSolver()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SparseSolver(AbstractLatticeFunction *Lattice) : LatticeFunc(Lattice)"
  },
  {
    "label": "SparseSolver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseSolver()"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (delete LatticeFunc ; } void)",
    "insertText": "Solve(Function &F)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(Function &F, raw_ostream &OS)"
  },
  {
    "label": "getLatticeState()",
    "kind": "Method",
    "detail": "Function (LatticeVal)",
    "insertText": "getLatticeState(Value *V)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<Value*,LatticeVal>::const_iterator I = ValueState .)",
    "insertText": "find(V)"
  },
  {
    "label": "getOrInitValueState()",
    "kind": "Method",
    "detail": "Function (} LatticeVal)",
    "insertText": "getOrInitValueState(Value *V)"
  },
  {
    "label": "isEdgeFeasible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEdgeFeasible(BasicBlock *From, BasicBlock *To, bool AggressiveUndef = false)"
  },
  {
    "label": "isBlockExecutable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBlockExecutable(BasicBlock *BB)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateState(Instruction &Inst, LatticeVal V)"
  },
  {
    "label": "MarkBlockExecutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlockExecutable(BasicBlock *BB)"
  },
  {
    "label": "markEdgeExecutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markEdgeExecutable(BasicBlock *Source, BasicBlock *Dest)"
  },
  {
    "label": "getFeasibleSuccessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFeasibleSuccessors(TerminatorInst &TI, SmallVectorImpl<bool> &Succs, bool AggressiveUndef)"
  },
  {
    "label": "visitInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitInst(Instruction &I)"
  },
  {
    "label": "visitPHINode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitPHINode(PHINode &I)"
  },
  {
    "label": "visitTerminatorInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitTerminatorInst(TerminatorInst &TI)"
  }
]