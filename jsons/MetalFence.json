[
  {
    "label": "FMetalFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalFence"
  },
  {
    "label": "FMetalFencePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalFencePool"
  },
  {
    "label": "FMetalFence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" Containers / LockFreeList . h \" # pragma clang diagnostic ignored \" - Wnullability - completeness \" class FMetalFence { public :)",
    "insertText": "FMetalFence() : NumRefs(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FMetalFence()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetalFence(FMetalFence const& Other) : NumRefs(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(Other)"
  },
  {
    "label": "FMetalFence()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMetalFence()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMetalFence&)",
    "insertText": "operator(FMetalFence const& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Fence = Other . Fence ; } return* this ; } void)",
    "insertText": "Reset(void)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (WriteNum = 0 ; WaitNum = 0 ; } void)",
    "insertText": "Write()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (WriteNum + + ; } void)",
    "insertText": "Wait()"
  },
  {
    "label": "NumWrite()",
    "kind": "Method",
    "detail": "Function (WaitNum + + ; } int8)",
    "insertText": "NumWrite()"
  },
  {
    "label": "FMetalFencePool()",
    "kind": "Method",
    "detail": "Function (Fence = InFence ; } private : MTL::Fence* Fence ; int8 WriteNum ; int8 WaitNum ; int32 NumRefs ; } ; class FMetalFencePool { enum { NumFences = 2 0 4 8 } ; public :)",
    "insertText": "FMetalFencePool()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FMetalFencePool&)",
    "insertText": "Get()"
  },
  {
    "label": "Initialise()",
    "kind": "Method",
    "detail": "Function (FMetalFencePool sSelf ; return sSelf ; } void)",
    "insertText": "Initialise(MTL::Device* InDevice)"
  },
  {
    "label": "AllocateFence()",
    "kind": "Method",
    "detail": "Function (FMetalFence*)",
    "insertText": "AllocateFence()"
  },
  {
    "label": "ReleaseFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFence(FMetalFence* InFence)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Max()"
  }
]