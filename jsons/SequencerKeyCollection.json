[
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerKeyCollectionSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerKeyCollectionSignature"
  },
  {
    "label": "FSequencerKeyCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerKeyCollection"
  },
  {
    "label": "FSequencerKeyCollectionSignature()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreTypes . h \" # include \" Math / Range . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Misc / OptionalFwd . h \" # include \" Templates / SharedPointer . h \" class IKeyArea ; class UMovieSceneSection ; namespace UE { namespace Sequencer { class FViewModel ; } } enum class EFindKeyDirection { Backwards,Forwards } ; enum class EFindKeyType : uint8 { FKT_Keys,FKT_Sections,FKT_All } ; struct FSequencerKeyCollectionSignature { using FViewModel = UE::Sequencer::FViewModel ;)",
    "insertText": "FSequencerKeyCollectionSignature()"
  },
  {
    "label": "FromNodes()",
    "kind": "Method",
    "detail": "Function (} FSequencerKeyCollectionSignature)",
    "insertText": "FromNodes(const TArray<TSharedRef<FViewModel>>& InNodes, FFrameNumber InDuplicateThreshold)"
  },
  {
    "label": "FromNodesRecursive()",
    "kind": "Method",
    "detail": "Function (FSequencerKeyCollectionSignature)",
    "insertText": "FromNodesRecursive(const TArray<TSharedRef<FViewModel>>& InNodes, FFrameNumber InDuplicateThreshold)"
  },
  {
    "label": "FromNodeRecursive()",
    "kind": "Method",
    "detail": "Function (FSequencerKeyCollectionSignature)",
    "insertText": "FromNodeRecursive(TSharedRef<FViewModel> InNode, UMovieSceneSection* InSection, FFrameNumber InDuplicateThreshold)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSequencerKeyCollectionSignature& A, const FSequencerKeyCollectionSignature& B)"
  },
  {
    "label": "GetKeyAreas()",
    "kind": "Method",
    "detail": "Function (const TMap<TSharedRef<IKeyArea>,FGuid>&)",
    "insertText": "GetKeyAreas()"
  },
  {
    "label": "FindFirstKeyInRange()",
    "kind": "Method",
    "detail": "Function (FFrameNumber DuplicateThresholdTime ; TMap<TSharedRef<IKeyArea>,FGuid> KeyAreaToSignature ; TMap<FGuid,TRange<FFrameNumber>> SignatureToSectionBounds ; } ; class FSequencerKeyCollection { public : TOptional<FFrameNumber>)",
    "insertText": "FindFirstKeyInRange(const TRange<FFrameNumber>& Range, EFindKeyDirection Direction, EFindKeyType FindKeyType = EFindKeyType::FKT_All)"
  },
  {
    "label": "GetKeysInRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FFrameNumber>)",
    "insertText": "GetKeysInRange(const TRange<FFrameNumber>& Range, EFindKeyType FindKeyType = EFindKeyType::FKT_All)"
  },
  {
    "label": "GetNextKey()",
    "kind": "Method",
    "detail": "Function (} TOptional<FFrameNumber>)",
    "insertText": "GetNextKey(FFrameNumber FrameNumber, EFindKeyDirection Direction, const TRange<FFrameNumber>& Range, EFindKeyType FindKeyType = EFindKeyType::FKT_All)"
  },
  {
    "label": "GetSignature()",
    "kind": "Method",
    "detail": "Function (} const FSequencerKeyCollectionSignature&)",
    "insertText": "GetSignature()"
  }
]