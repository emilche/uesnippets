[
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (# ifndef RADAUDIO_COMMON_H # define RADAUDIO_COMMON_H # define MAX_VALID_VERSION 1 # include \" rrCore . h \" # ifdef RADAUDIO_DEVELOPMENT # include \" rrTime . h \" # endif # include \" radaudio_sse . h \" # define)",
    "insertText": "FFT_ALIGN(type, name) RAD_ALIGN(type, name, 64)"
  },
  {
    "label": "NUM_SELECTOR_MODES()",
    "kind": "Method",
    "detail": "Function (false,true } ; # endif # define RADAUDIO_LONG_BLOCK_LEN 1 0 2 4 # define RADAUDIO_SHORT_BLOCK_LEN 1 2 8 # define MAX_BANDS 2 4 # define MAX_COEFFS 1 0 2 4 # define MAX_SUBBANDS 7 2 # define MAX_SUBBANDS_QUANTIZED 5 6 # define MAX_MDCT_SAMPLES 2 0 4 8 # define MAX_RADAUD_CHANNELS 2 # define MAX_COEFF_PER_BAND 5 1 2 # define MAX_COEFF_PER_SUBBAND 3 2 # define MAX_RUNLEN 2 4 0 # define END_OF_ZERORUN 2 5 5 # define COARSE_RUNLEN_THRESHOLD 6 0 # define PREDICT_FIRST_BAND_EXP 0 # define MAX_FINE_ENERGY_BITS 1 6 # define COEFFS_PER_SUBBAND 1 6 # define EXPONENT_NEGATIVE_INFINITY - 1 7 # define EXPONENT_NEGATIVE_16 - 1 6 # define EXPONENT_ZERO 0 # define EXPONENT_POSITIVE_14 1 4 # define BAND_EXPONENT_NONE - 1 7 # define SUBBANDS_SKIP_EMPTY_BANDS true # define MACRO_BAND_SIZE 3 # define LARGEST_BIASED_SUBBAND 6 3 # define SUBBAND_BIAS_CENTER 1 2 # define NUM_NZ_MODE 4 # define)",
    "insertText": "NUM_SELECTOR_MODES(NUM_NZ_MODE+1) #define NUM_NZ_SELECTOR 4 #define NUM_NZ_HUFF 6 #define MAX_NZ_BLOCKS 12 #define CLAMPED_INTEGER_EXPONENT_TO_CODED_EXPONENT(is_neg_inf, n) \\ (is_neg_inf ? EXPONENT_NEGATIVE_INFINITY \\ : (n)) #define CODED_EXPONENT_TO_INTEGER(n) (n)"
  },
  {
    "label": "FFT_ALIGN()",
    "kind": "Method",
    "detail": "Function (# ifdef __RADX86__ U8 has_sse2 ; U8 has_ssse3 ; U8 has_sse4_1 ; U8 has_popcnt ; U8 has_avx2 ; U8 padding [ 3 ] ; # else U8 dummy [ 8 ] ; # endif } radaudio_cpu_features ; typedef enum { RADA_48000,RADA_44100,RADA_32000,RADA_24000 } radaudio_samprate_code ; # define RADAUDIO_NUM_RATES 4 enum { RADAUDIO_LONG,RADAUDIO_SHORT,} ; typedef struct { U16 bytes_bias [ 2 ] [ 3 ] ; } radaudio_block_header_biases ; typedef struct { U32 version ; int num_channels ; int sample_rate_mode ; int sample_rate ; S8 mantissa_param [ 2 ] [ MAX_BANDS ] [ 2 ] ; U8 subband_predicted_sum [ MAX_BANDS ] ; S8 subband_bias [ MAX_BANDS ] ; U16 bytes_bias ; U8 nzmode_num64 [ NUM_NZ_MODE ] ; S8 nzmode_huff [ 3 ] [ 1 2 ] ; U8 nzmode_selectors [ NUM_NZ_SELECTOR ] [ NUM_SELECTOR_MODES ] ; } radaudio_stream_header_unpacked ; typedef struct { U8 num_8byte_chunks ; U8 huffman_table_for_chunk [ MAX_NZ_BLOCKS ] ; U8 invert_chunk [ MAX_NZ_BLOCKS ] ; U8 num_chunks_per_huff [ NUM_NZ_HUFF ] ; U8 source_pos [ 3 ] [ MAX_NZ_BLOCKS ] ; } radaudio_nonzero_blockmode_descriptor ; typedef struct { int num_bands ; int num_quantized_subbands ; int num_quantized_coeffs ; int band_exponent [ MAX_BANDS ] ; U8 band_mantissa_bitcount [ MAX_BANDS ] ; int band_mantissa [ MAX_BANDS ] ; U16 quantized_subbands [ MAX_SUBBANDS + 7 ] ; S8 quantized_coeff_decode [ MAX_COEFFS ] ; union { int quantized_coeff_encode [ MAX_COEFFS ] ;)",
    "insertText": "FFT_ALIGN(F32, dequantized_coeff_decode[MAX_COEFFS])"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } radaudio_block_data ; typedef struct { int rate ; int num_bands ; int num_quantized_coeffs ; int num_coeffs ; int num_subbands ; int num_quantized_subbands ; int num_bands_without_subbands ; int num_coeffs_for_band [ MAX_BANDS ] ; int num_subbands_for_band [ MAX_BANDS ] ; int first_subband_for_band [ MAX_BANDS ] ; int first_coeff_for_band [ MAX_BANDS ] ; int num_coeffs_for_subband [ MAX_SUBBANDS ] ; int first_coeff_for_subband [ MAX_SUBBANDS ] ; float band_scale_encode [ MAX_BANDS ] ; float band_scale_decode [ MAX_BANDS ] ; } radaudio_rate_info ; typedef struct { rrbool final_block ; rrbool prev_block_short ; rrbool this_block_short ; rrbool next_block_short ; rrbool mid_side_encoded ; unsigned int num_channels_encoded ; rrbool disable_final_subband_predict ; rrbool predict_stereo_subband ; rrbool predict_stereo_exponent ; rrbool mid_side_bands ; unsigned int nonzero_bitarray_mode ; U32 block_bytes ; U32 num_runlength_array ; U32 vbstream0_length ; U32 final_samples_discard ; } radaudio_block_header_unpacked ; typedef struct { U8 length ; U8 symbol ; } radaudio_huff_symbol ; typedef struct { U16 code ; U8 length ; } radaudio_huff_code ; typedef struct { # ifdef HUFFMAN_ENCODE radaudio_huff_code encode [ 2 5 6 ] ; # endif # ifdef HUFFMAN_DECODE radaudio_huff_symbol decode [ 2 0 4 8 ] ; # endif # if !)",
    "insertText": "defined(HUFFMAN_ENCODE) && !defined(HUFFMAN_DECODE)"
  },
  {
    "label": "lcg()",
    "kind": "Method",
    "detail": "Function (# endif } radaudio_huffman ; # define LCG_MUL 2 1 4 7 0 0 1 3 2 5 # define LCG_ADD 7 1 5 1 3 6 3 0 5 RADINLINE U32)",
    "insertText": "lcg(U32 value)"
  }
]