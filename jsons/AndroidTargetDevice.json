[
  {
    "label": "FAndroidTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroidTargetDevice"
  },
  {
    "label": "FTargetDeviceId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetDeviceId"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FTargetDeviceProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceProcessInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAndroidTargetDeviceOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroidTargetDeviceOutput"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FAndroidTargetDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Interfaces / ITargetDevice . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Templates / SharedPointer . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformProcess . h \" class FAndroidTargetDevice ; class FTargetDeviceId ; class ITargetPlatform ; struct FTargetDeviceProcessInfo ; enum class ETargetDeviceFeatures ; enum class ETargetDeviceTypes ; typedef TSharedPtr<class FAndroidTargetDevice,ESPMode::ThreadSafe> FAndroidTargetDevicePtr ; typedef TSharedRef<class FAndroidTargetDevice,ESPMode::ThreadSafe> FAndroidTargetDeviceRef ; typedef TSharedPtr<class FAndroidTargetDeviceOutput,ESPMode::ThreadSafe> FAndroidTargetDeviceOutputPtr ; class FAndroidTargetDevice : public ITargetDevice { public :)",
    "insertText": "FAndroidTargetDevice(const ITargetPlatformControls& InTargetPlatformControls, const FString& InSerialNumber, const FString& InAndroidVariant) : AndroidVariant(InAndroidVariant) , bConnected(false) , bIsDeviceAuthorized(false) , AndroidSDKVersion(INDEX_NONE) , DeviceName(InSerialNumber) , Model(InSerialNumber) , SerialNumber(InSerialNumber) , TargetPlatformControls(InTargetPlatformControls)"
  },
  {
    "label": "SetConnected()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetConnected(bool bInConnected)"
  },
  {
    "label": "SetAuthorized()",
    "kind": "Method",
    "detail": "Function (bConnected = bInConnected ; } void)",
    "insertText": "SetAuthorized(bool bInIsAuthorized)"
  },
  {
    "label": "SetVersions()",
    "kind": "Method",
    "detail": "Function (bIsDeviceAuthorized = bInIsAuthorized ; } void)",
    "insertText": "SetVersions(int32 InSDKVersion, const FString& InReleaseVersion)"
  },
  {
    "label": "SetDeviceName()",
    "kind": "Method",
    "detail": "Function (AndroidSDKVersion = InSDKVersion ; AndroidVersionString = InReleaseVersion ; } void)",
    "insertText": "SetDeviceName(const FString& InDeviceName)"
  },
  {
    "label": "SetModel()",
    "kind": "Method",
    "detail": "Function (DeviceName = InDeviceName ; } void)",
    "insertText": "SetModel(const FString& InNodel)"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (Model = InNodel ; } FString)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (} ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetModelId()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetModelId()"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "PowerOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PowerOn()"
  },
  {
    "label": "GetAllDevicesDefaultVariant()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAllDevicesDefaultVariant()"
  },
  {
    "label": "TerminateLaunchedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TerminateLaunchedProcess(const FString& ProcessIdentifier)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFeature(ETargetDeviceFeatures Feature)"
  },
  {
    "label": "TerminateProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TerminateProcess(const int64 ProcessId)"
  },
  {
    "label": "SetUserCredentials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserCredentials(const FString& UserName, const FString& UserPassword)"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "ExecuteConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteConsoleCommand(const FString& ExecCommand)"
  },
  {
    "label": "CreateDeviceOutputRouter()",
    "kind": "Method",
    "detail": "Function (ITargetDeviceOutputPtr)",
    "insertText": "CreateDeviceOutputRouter(FOutputDevice* Output)"
  },
  {
    "label": "GetAdbFullFilename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAdbFullFilename(FString& OutFilename)"
  },
  {
    "label": "ExecuteAdbCommand()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ExecuteAdbCommand(const FString& Params, FString* OutStdOut, FString* OutStdErr)"
  }
]