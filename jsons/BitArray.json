[
  {
    "label": "BitArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitArray"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_CORE_BITARRAY_H # define NV_CORE_BITARRAY_H # include<nvcore / nvcore . h> # include<nvcore / Containers . h> namespace nv { uint)",
    "insertText": "bitsSet(uint8 x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint count = 0 ;)",
    "insertText": "for(; x != 0; x >>= 1)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "count(x & 1)"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (} return count ; } uint)",
    "insertText": "bitsSet(uint32 x, int bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint count = 0 ;)",
    "insertText": "for(; x != 0 && bits != 0; x >>= 1, bits--)"
  },
  {
    "label": "BitArray()",
    "kind": "Method",
    "detail": "Function (} return count ; } class BitArray { public :)",
    "insertText": "BitArray()"
  },
  {
    "label": "BitArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitArray(uint sz)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(sz)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(uint sz)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_size = sz ; m_bitArray .)",
    "insertText": "resize((m_size + 7) >> 3)"
  },
  {
    "label": "bitAt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bitAt(uint b)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(b < m_size)"
  },
  {
    "label": "setBitAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBitAt(uint b)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (m_bitArray [)",
    "insertText": "b(1 << (b & 7))"
  },
  {
    "label": "clearBitAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearBitAt(uint b)"
  },
  {
    "label": "clearAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearAll()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_bitArray.unsecureBuffer(), 0, m_bitArray.size())"
  },
  {
    "label": "setAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAll()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_bitArray.unsecureBuffer(), 0xFF, m_bitArray.size())"
  },
  {
    "label": "toggleAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "toggleAll()"
  },
  {
    "label": "byteAt()",
    "kind": "Method",
    "detail": "Function (m_bitArray [ b ] ^ = 0 xFF ; } } const uint8&)",
    "insertText": "byteAt(uint index)"
  },
  {
    "label": "countSetBits()",
    "kind": "Method",
    "detail": "Function (m_bitArray [ index ] = b ; } uint)",
    "insertText": "countSetBits()"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (count + =)",
    "insertText": "bitsSet(m_bitArray[i])"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (} count + =)",
    "insertText": "bitsSet(m_bitArray[num-1], m_size & 0x7)"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (count + =)",
    "insertText": "bitsSet(~m_bitArray[i])"
  },
  {
    "label": "bitsSet()",
    "kind": "Method",
    "detail": "Function (} count + =)",
    "insertText": "bitsSet(~m_bitArray[num-1], m_size & 0x7)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.m_size, b.m_size)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(a.m_bitArray, b.m_bitArray)"
  }
]