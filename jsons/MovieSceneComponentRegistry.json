[
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "TPropertyComponents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyComponents"
  },
  {
    "label": "FNewComponentTypeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewComponentTypeParams"
  },
  {
    "label": "FComponentRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentRegistry"
  },
  {
    "label": "FNewComponentTypeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" # include \" EntitySystem / MovieSceneEntityFactory . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" HAL / Platform . h \" # include \" Misc / GeneratedTypeName . h \" class UScriptStruct ; namespace UE { namespace MovieScene { template<> struct TPropertyComponents ; struct FNewComponentTypeParams {)",
    "insertText": "FNewComponentTypeParams() : ReferenceCollectionCallback(nullptr) , Flags(EComponentTypeFlags::None)"
  },
  {
    "label": "FNewComponentTypeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNewComponentTypeParams(EComponentTypeFlags InFlags) : ReferenceCollectionCallback(nullptr) , Flags(InFlags)"
  },
  {
    "label": "FNewComponentTypeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNewComponentTypeParams(FComponentReferenceCollectionPtr RefCollectionPtr, EComponentTypeFlags InFlags) : ReferenceCollectionCallback(RefCollectionPtr) , Flags(InFlags)"
  },
  {
    "label": "FComponentRegistry()",
    "kind": "Method",
    "detail": "Function (} FComponentReferenceCollectionPtr ReferenceCollectionCallback ; EComponentTypeFlags Flags ; } ; struct FComponentRegistry { public : FEntityFactories Factories ;)",
    "insertText": "FComponentRegistry()"
  },
  {
    "label": "FComponentRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentRegistry(const FComponentRegistry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComponentRegistry&)",
    "insertText": "operator(const FComponentRegistry&)"
  },
  {
    "label": "FComponentRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentRegistry(FComponentRegistry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComponentRegistry&)",
    "insertText": "operator(FComponentRegistry&&)"
  },
  {
    "label": "NewTag()",
    "kind": "Method",
    "detail": "Function (public : FComponentTypeID)",
    "insertText": "NewTag(const TCHAR* const DebugName, EComponentTypeFlags Flags = EComponentTypeFlags::None)"
  },
  {
    "label": "NewComponentType()",
    "kind": "Method",
    "detail": "Function (template<T> TComponentTypeID<T>)",
    "insertText": "NewComponentType(const TCHAR* const DebugName, const FNewComponentTypeParams& Params = FNewComponentTypeParams())"
  },
  {
    "label": "NewComponentTypeNoAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (template<T> TComponentTypeID<T>)",
    "insertText": "NewComponentTypeNoAddReferencedObjects(const TCHAR* const DebugName, const FNewComponentTypeParams& Params = FNewComponentTypeParams())"
  },
  {
    "label": "NewComponentType()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "NewComponentType(TComponentTypeID<T>* Ref, const TCHAR* const DebugName, const FNewComponentTypeParams& Params = FNewComponentTypeParams())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* Ref = NewComponentType<)",
    "insertText": "T(DebugName, Params)"
  },
  {
    "label": "NewComponentTypeNoAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "NewComponentTypeNoAddReferencedObjects(TComponentTypeID<T>* Ref, const TCHAR* const DebugName, const FNewComponentTypeParams& Params = FNewComponentTypeParams())"
  },
  {
    "label": "NewPropertyType()",
    "kind": "Method",
    "detail": "Function (} template<PropertyTraits> void)",
    "insertText": "NewPropertyType(TPropertyComponents<PropertyTraits>& OutComponents, const TCHAR* DebugName)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# if UE_MOVIESCENE_ENTITY_DEBUG FString InitialValueDebugName =)",
    "insertText": "FString(TEXT(\"Initial \"))"
  },
  {
    "label": "NewTag()",
    "kind": "Method",
    "detail": "Function (OutComponents . PropertyTag =)",
    "insertText": "NewTag(DebugName, EComponentTypeFlags::CopyToChildren)"
  },
  {
    "label": "NewComponentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewComponentType(&OutComponents.InitialValue, *InitialValueDebugName, EComponentTypeFlags::Preserved)"
  },
  {
    "label": "NewTag()",
    "kind": "Method",
    "detail": "Function (# else OutComponents . PropertyTag =)",
    "insertText": "NewTag(nullptr, EComponentTypeFlags::CopyToChildren)"
  },
  {
    "label": "NewComponentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewComponentType(&OutComponents.InitialValue, nullptr, EComponentTypeFlags::Preserved)"
  },
  {
    "label": "GetComponentTypeChecked()",
    "kind": "Method",
    "detail": "Function (# endif } const FComponentTypeInfo&)",
    "insertText": "GetComponentTypeChecked(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "DestroyComponentTypeSafe()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DestroyComponentTypeSafe(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "DestroyComponentUnsafeFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyComponentUnsafeFast(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "GetDataComponentTypes()",
    "kind": "Method",
    "detail": "Function (public : const FComponentMask&)",
    "insertText": "GetDataComponentTypes()"
  },
  {
    "label": "MakeComponentTypeInfoWithoutComponentOps()",
    "kind": "Method",
    "detail": "Function (template<T> FComponentTypeInfo)",
    "insertText": "MakeComponentTypeInfoWithoutComponentOps(const TCHAR* const DebugName, const FNewComponentTypeParams& Params)"
  }
]