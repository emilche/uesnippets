[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "SMajorTabWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Docking / TabManager . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Insights / IUnrealInsightsModule . h \" class FActiveTimerHandle ; class FMenuBuilder ; class FUICommandList ; class SDockTab ; class SWindow ; namespace Insights { class SMajorTabWindow : public SCompoundWidget { public :)",
    "insertText": "SMajorTabWindow(const FName& InMajorTabId)"
  },
  {
    "label": "SMajorTabWindow()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SMajorTabWindow()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SMajorTabWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() const FName& GetMajorTabId()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<SDockTab>& ConstructUnderMajorTab, const TSharedPtr<SWindow>& ConstructUnderWindow)"
  },
  {
    "label": "ShowTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTab(const FName& TabId)"
  },
  {
    "label": "HideTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideTab(const FName& TabId)"
  },
  {
    "label": "ShowHideTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideTab(const FName& TabId, bool bShow)"
  },
  {
    "label": "ShowTab()",
    "kind": "Method",
    "detail": "Function (bShow ?)",
    "insertText": "ShowTab(TabId) : HideTab(TabId)"
  },
  {
    "label": "CloseAllOpenTabs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CloseAllOpenTabs()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FWindowClosedEvent)"
  },
  {
    "label": "GetWindowClosedEvent()",
    "kind": "Method",
    "detail": "Function (FWindowClosedEvent&)",
    "insertText": "GetWindowClosedEvent()"
  },
  {
    "label": "CreateWorkspaceMenuGroup()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FWorkspaceItem>)",
    "insertText": "CreateWorkspaceMenuGroup()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTabSpawners()"
  },
  {
    "label": "CreateDefaultTabLayout()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTabManager::FLayout>)",
    "insertText": "CreateDefaultTabLayout()"
  },
  {
    "label": "CreateToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateToolbar(TSharedPtr<FExtender> Extender)"
  },
  {
    "label": "SetCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCommandList(const TSharedPtr<FUICommandList> InCommandList)"
  },
  {
    "label": "AddOpenTab()",
    "kind": "Method",
    "detail": "Function (CommandList = InCommandList ; } void)",
    "insertText": "AddOpenTab(const TSharedRef<SDockTab>& DockTab)"
  },
  {
    "label": "RemoveOpenTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOpenTab(const TSharedRef<SDockTab>& DockTab)"
  },
  {
    "label": "FillMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FillMenu(FMenuBuilder& MenuBuilder, const TSharedPtr<FTabManager> TabManager)"
  },
  {
    "label": "IsValidSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSession()"
  },
  {
    "label": "UpdateActiveDuration()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateActiveDuration(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  }
]