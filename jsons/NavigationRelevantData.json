[
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FNavigationRelevantDataFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantDataFilter"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "FNavDataConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavDataConfig"
  },
  {
    "label": "FCollisionDataHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionDataHeader"
  },
  {
    "label": "FNavigationRelevantDataFilter()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" UObject / ObjectMacros . h \" # include \" AI / Navigation / NavigationTypes . h \" # endif # include \" AI / NavigationModifier . h \" # include \" NavigationDirtyArea . h \" struct FNavigationElement ; struct FNavigationRelevantDataFilter { uint32 bIncludeGeometry : 1 ; uint32 bIncludeOffmeshLinks : 1 ; uint32 bIncludeAreas : 1 ; uint32 bIncludeMetaAreas : 1 ; uint32 bExcludeLoadedData : 1 ;)",
    "insertText": "FNavigationRelevantDataFilter() : bIncludeGeometry(false) , bIncludeOffmeshLinks(false) , bIncludeAreas(false) , bIncludeMetaAreas(false) , bExcludeLoadedData(false)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNavigationRelevantData : public TSharedFromThis<FNavigationRelevantData,ESPMode::ThreadSafe> {)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FFilterNavDataDelegate, const struct FNavDataConfig*)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FCollisionDataHeader { int32 DataSize ; bool)",
    "insertText": "IsValid(const uint8* RawData, int32 RawDataSize)"
  },
  {
    "label": "FNavigationRelevantData()",
    "kind": "Method",
    "detail": "Function (# endif TSharedRef<const FNavigationElement> SourceElement ; uint32 bPendingLazyGeometryGathering : 1 ; uint32 bPendingLazyModifiersGathering : 1 ; uint32 bPendingChildLazyModifiersGathering : 1 ; uint32 bSupportsGatheringGeometrySlices : 1 ; uint32 bShouldSkipDirtyAreaOnAddOrRemove : 1 ; uint32 bLoadedData : 1 ;)",
    "insertText": "FNavigationRelevantData()"
  },
  {
    "label": "FNavigationRelevantData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationRelevantData(const TSharedRef<const FNavigationElement>& Source) : SourceElement(Source) , bPendingLazyGeometryGathering(false) , bPendingLazyModifiersGathering(false) , bPendingChildLazyModifiersGathering(false) , bSupportsGatheringGeometrySlices(false) , bShouldSkipDirtyAreaOnAddOrRemove(false) , bLoadedData(false)"
  },
  {
    "label": "FNavigationRelevantData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationRelevantData(const FNavigationRelevantData& Other)"
  },
  {
    "label": "FNavigationRelevantData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationRelevantData(FNavigationRelevantData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavigationRelevantData&)",
    "insertText": "operator(FNavigationRelevantData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavigationRelevantData&)",
    "insertText": "operator(const FNavigationRelevantData& Other)"
  },
  {
    "label": "HasModifiers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasModifiers()"
  },
  {
    "label": "HasDynamicModifiers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDynamicModifiers()"
  },
  {
    "label": "IsPendingLazyGeometryGathering()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPendingLazyGeometryGathering()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetGeometryAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetGeometryAllocatedSize()"
  },
  {
    "label": "GetDirtyFlag()",
    "kind": "Method",
    "detail": "Function (} ENavigationDirtyFlag)",
    "insertText": "GetDirtyFlag()"
  },
  {
    "label": "HasGeometry()",
    "kind": "Method",
    "detail": "Function (const bool bSetGeometryFlag =)",
    "insertText": "HasGeometry() || IsPendingLazyGeometryGathering() || Modifiers.GetFillCollisionUnderneathForNavmesh() || Modifiers.GetMaskFillCollisionUnderneathForNavmesh() || (Modifiers.GetNavMeshResolution() != ENavigationDataResolution::Invalid)"
  },
  {
    "label": "GetModifierForAgent()",
    "kind": "Method",
    "detail": "Function (} FCompositeNavModifier)",
    "insertText": "GetModifierForAgent(const FNavAgentProperties* NavAgent = nullptr)"
  },
  {
    "label": "HasPerInstanceTransforms()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerInstanceTransforms()"
  },
  {
    "label": "IsMatchingFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMatchingFilter(const FNavigationRelevantDataFilter& Filter)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "IsCollisionDataValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollisionDataValid()"
  },
  {
    "label": "ValidateAndShrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAndShrink()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} else { CollisionData .)",
    "insertText": "Empty()"
  }
]