[
  {
    "label": "RtpSenderInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpSenderInternal"
  },
  {
    "label": "RtpSenderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpSenderBase"
  },
  {
    "label": "SetStreamsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetStreamsObserver"
  },
  {
    "label": "LocalAudioSinkAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalAudioSinkAdapter"
  },
  {
    "label": "AudioRtpSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioRtpSender"
  },
  {
    "label": "VideoRtpSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoRtpSender"
  },
  {
    "label": "UnimplementedRtpParameterHasValue()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTP_SENDER_H_ # define PC_RTP_SENDER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / crypto / frame_encryptor_interface . h \" # include \" api / dtls_transport_interface . h \" # include \" api / dtmf_sender_interface . h \" # include \" api / frame_transformer_interface . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / rtc_error . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_sender_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" media / base / audio_source . h \" # include \" media / base / media_channel . h \" # include \" pc / dtmf_sender . h \" # include \" pc / legacy_stats_collector_interface . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { bool)",
    "insertText": "UnimplementedRtpParameterHasValue(const RtpParameters& parameters)"
  },
  {
    "label": "SetMediaChannel()",
    "kind": "Method",
    "detail": "Function (class RtpSenderInternal : public RtpSenderInterface { public : void)",
    "insertText": "SetMediaChannel(cricket::MediaChannel* media_channel)"
  },
  {
    "label": "SetSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSsrc(uint32_t ssrc)"
  },
  {
    "label": "set_stream_ids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stream_ids(const std::vector<std::string>& stream_ids)"
  },
  {
    "label": "set_init_send_encodings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_init_send_encodings(const std::vector<RtpEncodingParameters>& init_send_encodings)"
  },
  {
    "label": "set_transport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_transport(rtc::scoped_refptr<DtlsTransportInterface> dtls_transport)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetParametersInternal()",
    "kind": "Method",
    "detail": "Function (RtpParameters)",
    "insertText": "GetParametersInternal()"
  },
  {
    "label": "SetParametersInternal()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetParametersInternal(const RtpParameters& parameters)"
  },
  {
    "label": "GetParametersInternalWithAllLayers()",
    "kind": "Method",
    "detail": "Function (RtpParameters)",
    "insertText": "GetParametersInternalWithAllLayers()"
  },
  {
    "label": "SetParametersInternalWithAllLayers()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetParametersInternalWithAllLayers(const RtpParameters& parameters)"
  },
  {
    "label": "CheckSVCParameters()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "CheckSVCParameters(const RtpParameters& parameters)"
  },
  {
    "label": "AttachmentId()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AttachmentId()"
  },
  {
    "label": "DisableEncodingLayers()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "DisableEncodingLayers(const std::vector<std::string>& rid)"
  },
  {
    "label": "SetTransceiverAsStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransceiverAsStopped()"
  },
  {
    "label": "SetVideoCodecPreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecPreferences(std::vector<cricket::VideoCodec> codec_preferences)"
  },
  {
    "label": "SetStreamsObserver()",
    "kind": "Method",
    "detail": "Function (} ; class RtpSenderBase : public RtpSenderInternal,public ObserverInterface { public : class SetStreamsObserver { public : ~)",
    "insertText": "SetStreamsObserver()"
  },
  {
    "label": "OnSetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetStreams()"
  },
  {
    "label": "SetTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTrack(MediaStreamTrackInterface* track)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<MediaStreamTrackInterface>)",
    "insertText": "track()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetParameters(const RtpParameters& parameters)"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread_)"
  },
  {
    "label": "SetStreams()",
    "kind": "Method",
    "detail": "Function (stream_ids_ = stream_ids ; } void)",
    "insertText": "SetStreams(const std::vector<std::string>& stream_ids)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "id()"
  },
  {
    "label": "init_send_encodings()",
    "kind": "Method",
    "detail": "Function (init_parameters_ . encodings = init_send_encodings ; } std::vector<RtpEncodingParameters>)",
    "insertText": "init_send_encodings()"
  },
  {
    "label": "dtls_transport()",
    "kind": "Method",
    "detail": "Function (dtls_transport_ = dtls_transport ; } rtc::scoped_refptr<DtlsTransportInterface>)",
    "insertText": "dtls_transport()"
  },
  {
    "label": "GetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<FrameEncryptorInterface>)",
    "insertText": "GetFrameEncryptor()"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelector(std::unique_ptr<VideoEncoderFactory::EncoderSelectorInterface> encoder_selector)"
  },
  {
    "label": "SetEncoderSelectorOnChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelectorOnChannel()"
  },
  {
    "label": "RtpSenderBase()",
    "kind": "Method",
    "detail": "Function (video_codec_preferences_ = codec_preferences ; } protected :)",
    "insertText": "RtpSenderBase(rtc::Thread* worker_thread, const std::string& id, SetStreamsObserver* set_streams_observer)"
  },
  {
    "label": "can_send_track()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "can_send_track()"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSend()"
  },
  {
    "label": "ClearSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSend()"
  },
  {
    "label": "AttachTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachTrack()"
  },
  {
    "label": "DetachTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DetachTrack()"
  },
  {
    "label": "AddTrackToStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTrackToStats()"
  },
  {
    "label": "RemoveTrackFromStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveTrackFromStats()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread* const signaling_thread_ ; rtc::Thread* const worker_thread_ ; uint32_t ssrc_ = 0 ; bool stopped_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "LocalAudioSinkAdapter()",
    "kind": "Method",
    "detail": "Function (int attachment_id_ = 0 ; const std::string id_ ; std::vector<std::string> stream_ids_ ; RtpParameters init_parameters_ ; std::vector<cricket::VideoCodec> video_codec_preferences_ ; cricket::MediaChannel* media_channel_ = nullptr ; rtc::scoped_refptr<MediaStreamTrackInterface> track_ ; rtc::scoped_refptr<DtlsTransportInterface> dtls_transport_ ; rtc::scoped_refptr<FrameEncryptorInterface> frame_encryptor_ ; absl::optional<std::string> last_transaction_id_ ; std::vector<std::string> disabled_rids_ ; SetStreamsObserver* set_streams_observer_ = nullptr ; rtc::scoped_refptr<FrameTransformerInterface> frame_transformer_ ; std::unique_ptr<VideoEncoderFactory::EncoderSelectorInterface> encoder_selector_ ; } ; class LocalAudioSinkAdapter : public AudioTrackSinkInterface,public cricket::AudioSource { public :)",
    "insertText": "LocalAudioSinkAdapter()"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnData(const void* audio_data, int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames, absl::optional<int64_t> absolute_capture_timestamp_ms)"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnData(const void* audio_data, int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames)"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnData(audio_data, bits_per_sample, sample_rate, number_of_channels, number_of_frames, absl::nullopt)"
  },
  {
    "label": "NumPreferredChannels()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumPreferredChannels()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (cricket::AudioSource::Sink* sink_ ; Mutex lock_ ; int num_preferred_channels_ = - 1 ; } ; class AudioRtpSender : public DtmfProviderInterface,public RtpSenderBase { public : rtc::scoped_refptr<AudioRtpSender>)",
    "insertText": "Create(rtc::Thread* worker_thread, const std::string& id, LegacyStatsCollectorInterface* stats, SetStreamsObserver* set_streams_observer)"
  },
  {
    "label": "AudioRtpSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioRtpSender()"
  },
  {
    "label": "CanInsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertDtmf()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(int code, int duration)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "GenerateKeyFrame(const std::vector<std::string>& rids)"
  },
  {
    "label": "AudioRtpSender()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "AudioRtpSender(rtc::Thread* worker_thread, const std::string& id, LegacyStatsCollectorInterface* legacy_stats, SetStreamsObserver* set_streams_observer)"
  },
  {
    "label": "voice_media_channel()",
    "kind": "Method",
    "detail": "Function (private : cricket::VoiceMediaChannel*)",
    "insertText": "voice_media_channel()"
  },
  {
    "label": "audio_track()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<AudioTrackInterface>)",
    "insertText": "audio_track()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} LegacyStatsCollectorInterface* legacy_stats_ = nullptr ; rtc::scoped_refptr<DtmfSender> dtmf_sender_ ; rtc::scoped_refptr<DtmfSenderInterface> dtmf_sender_proxy_ ; bool cached_track_enabled_ = false ; std::unique_ptr<LocalAudioSinkAdapter> sink_adapter_ ; } ; class VideoRtpSender : public RtpSenderBase { public : rtc::scoped_refptr<VideoRtpSender>)",
    "insertText": "Create(rtc::Thread* worker_thread, const std::string& id, SetStreamsObserver* set_streams_observer)"
  },
  {
    "label": "VideoRtpSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoRtpSender()"
  },
  {
    "label": "VideoRtpSender()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "VideoRtpSender(rtc::Thread* worker_thread, const std::string& id, SetStreamsObserver* set_streams_observer)"
  },
  {
    "label": "video_media_channel()",
    "kind": "Method",
    "detail": "Function (private : cricket::VideoMediaChannel*)",
    "insertText": "video_media_channel()"
  },
  {
    "label": "video_track()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<VideoTrackInterface>)",
    "insertText": "video_track()"
  }
]