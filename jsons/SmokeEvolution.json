[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSmokeEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSmokeEvolution"
  },
  {
    "label": "TSmokeEvolution()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayFaceND . h \" # include \" Chaos / ArrayND . h \" # include \" Chaos / KinematicGeometryParticles . h \" # include \" Chaos / UniformGrid . h \" # include<cmath> namespace Chaos { template<class T,int d> class TSmokeEvolution { public :)",
    "insertText": "TSmokeEvolution(const TUniformGrid<T, d>& Grid, TKinematicGeometryParticles<T, d>&& GeometryParticles, TKinematicGeometryParticles<T, d>&& SourceParticles) : MGrid(Grid), MVelocity(MGrid), MDensity(MGrid), MDirichlet(MGrid), MNeumann(MGrid), MCollisionParticles(MoveTemp(GeometryParticles)), MSourceParticles(MoveTemp(SourceParticles))"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (MVelocity .)",
    "insertText": "Fill(0)"
  },
  {
    "label": "TSmokeEvolution()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSmokeEvolution()"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceOneTimeStep(const T Dt)"
  },
  {
    "label": "AddForceFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceFunction(TFunction<void(const TUniformGrid<T, d>&, TArrayFaceND<T, d>&, const T, const Pair<int32, TVector<int32, d>>)> ForceFunction)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MForceRules .)",
    "insertText": "Add(ForceFunction)"
  },
  {
    "label": "SetAdvectionFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAdvectionFunction(TFunction<void(const TUniformGrid<T, d>&, TArrayND<T, d>&, const TArrayND<T, d>&, const TArrayFaceND<T, d>&, const T, const TVector<int32, d>)> AdvectionFunction)"
  },
  {
    "label": "SetConvectionFunction()",
    "kind": "Method",
    "detail": "Function (MAdvectionRule = AdvectionFunction ; } void)",
    "insertText": "SetConvectionFunction(TFunction<void(const TUniformGrid<T, d>&, TArrayND<T, d>&, const TArrayND<T, d>&, const TArrayFaceND<T, d>&, const T, const TVector<int32, d>)> ConvectionFunction)"
  },
  {
    "label": "SetProjectionFunction()",
    "kind": "Method",
    "detail": "Function (MConvectionRule = ConvectionFunction ; } void)",
    "insertText": "SetProjectionFunction(TFunction<void(const TUniformGrid<T, d>&, TArrayFaceND<T, d>&, const TArrayND<bool, d>&, const TArrayFaceND<bool, d>&, const T)> ProjectionFunction)"
  },
  {
    "label": "Grid()",
    "kind": "Method",
    "detail": "Function (MProjectionRule = ProjectionFunction ; } const TUniformGrid<T,d>&)",
    "insertText": "Grid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T Divergence = 0 ;)",
    "insertText": "for(int32 i = 0; i < MGrid.GetNumCells(); ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T LocalDivergence = 0 ;)",
    "insertText": "for(int32 j = 0; j < d; ++j)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const TVector<int32,d> index = MGrid .)",
    "insertText": "GetIndex(i)"
  },
  {
    "label": "LocalDivergence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalDivergence(MVelocity(MakePair(j, MGrid.ClampIndex(index + TVector<int32, d>::AxisVector(j)))) - MVelocity(MakePair(j, index))) / MGrid.Dx()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} Divergence + =)",
    "insertText": "Abs(LocalDivergence)"
  },
  {
    "label": "Divergence()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Divergence(T)MGrid.Counts().Product()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TUniformGrid<T,d> MGrid ; TArrayFaceND<T,d> MVelocity ; TArrayND<T,d> MDensity ; TArrayND<bool,d> MDirichlet ; TArrayFaceND<bool,d> MNeumann ; TKinematicGeometryParticles<T,d> MCollisionParticles,MSourceParticles ; TArray<TFunction<)",
    "insertText": "void(const TUniformGrid<T, d>&, TArrayFaceND<T, d>&, const T, const Pair<int32, TVector<int32, d>>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const TUniformGrid<T, d>&, TArrayND<T, d>&, const TArrayND<T, d>&, const TArrayFaceND<T, d>&, const T, const TVector<int32, d>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const TUniformGrid<T, d>&, TArrayFaceND<T, d>&, const TArrayND<bool, d>&, const TArrayFaceND<bool, d>&, const T)"
  }
]