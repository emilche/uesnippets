[
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FOrientedCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / OrientedEntity . h \" # include \" Geo / Curves / Curve . h \" namespace UE::CADKernel { struct FCurvePoint ; class FOrientedCurve : public TOrientedEntity<FCurve> { public :)",
    "insertText": "FOrientedCurve(TSharedPtr<FCurve>& InEntity, EOrientation InDirection) : TOrientedEntity(InEntity, InDirection)"
  },
  {
    "label": "FOrientedCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOrientedCurve() : TOrientedEntity()"
  },
  {
    "label": "FCompositeCurve()",
    "kind": "Method",
    "detail": "Function (} } ; class FCompositeCurve : public FCurve { class FEntity ; protected : TArray<FOrientedCurve> Curves ; TArray<double> Coordinates ;)",
    "insertText": "FCompositeCurve(const TArray<TSharedPtr<FCurve>>& Curves, bool bDoInversions = false)"
  },
  {
    "label": "FCompositeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompositeCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, (TArray<TOrientedEntity<FEntity>>&) Curves)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Coordinates)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<TOrientedEntity<FEntity>>&) Curves)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "GetCurve(int32 Index)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableCoordinates(const FLinearBoundary& InBoundary, int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  }
]