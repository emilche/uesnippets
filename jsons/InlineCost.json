[
  {
    "label": "AssumptionCacheTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCacheTracker"
  },
  {
    "label": "CallSite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSite"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "TargetTransformInfoWrapperPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfoWrapperPass"
  },
  {
    "label": "InlineCost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineCost"
  },
  {
    "label": "SentinelValues",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SentinelValues"
  },
  {
    "label": "InlineCostAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineCostAnalysis"
  },
  {
    "label": "InlineCost()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_INLINECOST_H # define LLVM_ANALYSIS_INLINECOST_H # include \" llvm / Analysis / CallGraphSCCPass . h \" # include<cassert> # include<climits> namespace llvm { class AssumptionCacheTracker ; class CallSite ; class DataLayout ; class Function ; class TargetTransformInfoWrapperPass ; namespace InlineConstants { const int InstrCost = 5 ; const int IndirectCallThreshold = 1 0 0 ; const int CallPenalty = 2 5 ; const int LastCallToStaticBonus = - 1 5 0 0 0 ; const int ColdccPenalty = 2 0 0 0 ; const int NoreturnPenalty = 1 0 0 0 0 ; const unsigned TotalAllocaSizeRecursiveCaller = 1 0 2 4 ; } class InlineCost { enum SentinelValues { AlwaysInlineCost = INT_MIN,NeverInlineCost = INT_MAX } ; const int Cost ; const int Threshold ;)",
    "insertText": "InlineCost(int Cost, int Threshold) : Cost(Cost), Threshold(Threshold)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} public : InlineCost)",
    "insertText": "get(int Cost, int Threshold)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Cost > AlwaysInlineCost && \"Cost crosses sentinel value\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Cost < NeverInlineCost && \"Cost crosses sentinel value\")"
  },
  {
    "label": "getAlways()",
    "kind": "Method",
    "detail": "Function (} InlineCost)",
    "insertText": "getAlways()"
  },
  {
    "label": "getNever()",
    "kind": "Method",
    "detail": "Function (} InlineCost)",
    "insertText": "getNever()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "getCost()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getCost()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isVariable() && \"Invalid access of InlineCost\")"
  },
  {
    "label": "InlineCostAnalysis()",
    "kind": "Method",
    "detail": "Function (} } ; class InlineCostAnalysis : public CallGraphSCCPass { TargetTransformInfoWrapperPass* TTIWP ; AssumptionCacheTracker* ACT ; public : char ID ;)",
    "insertText": "InlineCostAnalysis()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "runOnSCC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnSCC(CallGraphSCC &SCC)"
  },
  {
    "label": "getInlineCost()",
    "kind": "Method",
    "detail": "Function (InlineCost)",
    "insertText": "getInlineCost(CallSite CS, int Threshold)"
  },
  {
    "label": "getInlineCost()",
    "kind": "Method",
    "detail": "Function (InlineCost)",
    "insertText": "getInlineCost(CallSite CS, Function *Callee, int Threshold)"
  },
  {
    "label": "isInlineViable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInlineViable(Function &Callee)"
  }
]