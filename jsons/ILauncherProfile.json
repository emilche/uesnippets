[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "ILauncherProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherProfile"
  },
  {
    "label": "ILauncherSimpleProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherSimpleProfile"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "LexToStringLocalized()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" ILauncherDeviceGroup . h \" # include \" ILauncherProfileLaunchRole . h \" class Error ; class FJsonObject ; class ILauncherProfile ; class ILauncherSimpleProfile ; namespace ELauncherProfileBuildModes { enum Type { Auto,Build,DoNotBuild,} ; } namespace ELauncherProfileCookModes { enum Type { DoNotCook,ByTheBook,OnTheFly,ByTheBookInEditor,OnTheFlyInEditor,} ; } namespace ELauncherProfileCookedMaps { enum Type { AllMaps,NoMaps,SelectedMaps } ; } namespace ELauncherProfileDeploymentModes { enum Type { DoNotDeploy,CopyToDevice,FileServer,CopyRepository,} ; } namespace ELauncherProfileLaunchModes { enum Type { DoNotLaunch,CustomRoles,DefaultRole } ; } namespace ELauncherProfilePackagingModes { enum Type { DoNotPackage,Locally,SharedRepository } ; } namespace ELauncherProfileValidationErrors { enum Type { CopyToDeviceRequiresCookByTheBook,CustomRolesNotSupportedYet,DeployedDeviceGroupRequired,InitialCultureNotAvailable,InitialMapNotAvailable,MalformedLaunchCommandLine,NoBuildConfigurationSelected,NoCookedCulturesSelected,NoLaunchRoleDeviceAssigned,NoPlatformSelected,NoProjectSelected,NoPackageDirectorySpecified,NoPlatformSDKInstalled,UnversionedAndIncrimental,GeneratingPatchesCanOnlyRunFromByTheBookCookMode,GeneratingMultiLevelPatchesRequiresGeneratePatch,StagingBaseReleasePaksWithoutABaseReleaseVersion,GeneratingChunksRequiresCookByTheBook,GeneratingChunksRequiresUnrealPak,GeneratingHttpChunkDataRequiresGeneratingChunks,GeneratingHttpChunkDataRequiresValidDirectoryAndName,ShippingDoesntSupportCommandlineOptionsCantUseCookOnTheFly,CookOnTheFlyDoesntSupportServer,NoArchiveDirectorySpecified,LaunchDeviceIsUnauthorized,IoStoreRequiresPakFiles,BuildTargetCookVariantMismatch,BuildTargetIsRequired,FallbackBuildTargetIsRequired,CopyToDeviceRequiresNoPackaging,Count } ; } FString)",
    "insertText": "LexToStringLocalized(ELauncherProfileValidationErrors::Type Value)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (typedef TSharedPtr<class ILauncherSimpleProfile> ILauncherSimpleProfilePtr ; typedef TSharedRef<class ILauncherSimpleProfile> ILauncherSimpleProfileRef ; class ILauncherSimpleProfile { public : const FString&)",
    "insertText": "GetDeviceName()"
  },
  {
    "label": "GetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDeviceVariant()"
  },
  {
    "label": "GetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (EBuildConfiguration)",
    "insertText": "GetBuildConfiguration()"
  },
  {
    "label": "GetCookMode()",
    "kind": "Method",
    "detail": "Function (ELauncherProfileCookModes::Type)",
    "insertText": "GetCookMode()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const FJsonObject& Object)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(TJsonWriter<>& Writer)"
  },
  {
    "label": "SetDeviceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceName(const FString& InDeviceName)"
  },
  {
    "label": "SetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceVariant(FName InVariant)"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildConfiguration(EBuildConfiguration InConfiguration)"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookMode(ELauncherProfileCookModes::Type InMode)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Archive)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaults()"
  },
  {
    "label": "ILauncherSimpleProfile()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ILauncherSimpleProfile()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSharedPtr<class ILauncherProfile> ILauncherProfilePtr ; typedef TSharedRef<class ILauncherProfile> ILauncherProfileRef ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnLauncherProfileDeployedDeviceGroupChanged, const ILauncherDeviceGroupPtr&) DECLARE_MULTICAST_DELEGATE(FOnProfileProjectChanged)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnProfileBuildTargetOptionsChanged)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FIsCookFinishedDelegate)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FCookCanceledDelegate)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (class ILauncherProfile { public : FGuid)",
    "insertText": "GetId()"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFileName()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "HasValidationError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidationError()"
  },
  {
    "label": "HasValidationError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidationError(ELauncherProfileValidationErrors::Type Error)"
  },
  {
    "label": "GetInvalidPlatform()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInvalidPlatform()"
  },
  {
    "label": "IsDeployablePlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeployablePlatform(const FString& PlatformName)"
  },
  {
    "label": "IsValidForLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidForLaunch()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const FString& NewName)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDescription(const FString& NewDescription)"
  },
  {
    "label": "SetNotForLicensees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotForLicensees()"
  },
  {
    "label": "OnIsCookFinished()",
    "kind": "Method",
    "detail": "Function (FIsCookFinishedDelegate&)",
    "insertText": "OnIsCookFinished()"
  },
  {
    "label": "OnCookCanceled()",
    "kind": "Method",
    "detail": "Function (FCookCanceledDelegate&)",
    "insertText": "OnCookCanceled()"
  },
  {
    "label": "HasBuildTargetSpecified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBuildTargetSpecified()"
  },
  {
    "label": "GetBuildTarget()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBuildTarget()"
  },
  {
    "label": "GetCookConfiguration()",
    "kind": "Method",
    "detail": "Function (EBuildConfiguration)",
    "insertText": "GetCookConfiguration()"
  },
  {
    "label": "GetCookOptions()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCookOptions()"
  },
  {
    "label": "GetSkipCookingEditorContent()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "GetSkipCookingEditorContent()"
  },
  {
    "label": "SetSkipCookingEditorContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkipCookingEditorContent(const bool InSkipCookingEditorContent)"
  },
  {
    "label": "GetCookedCultures()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetCookedCultures()"
  },
  {
    "label": "GetCookedMaps()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetCookedMaps()"
  },
  {
    "label": "GetCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetCookedPlatforms()"
  },
  {
    "label": "GetDefaultLaunchRole()",
    "kind": "Method",
    "detail": "Function (const ILauncherProfileLaunchRoleRef&)",
    "insertText": "GetDefaultLaunchRole()"
  },
  {
    "label": "GetDeployedDeviceGroup()",
    "kind": "Method",
    "detail": "Function (ILauncherDeviceGroupPtr)",
    "insertText": "GetDeployedDeviceGroup()"
  },
  {
    "label": "GetDefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDefaultDeployPlatform()"
  },
  {
    "label": "GetDeploymentMode()",
    "kind": "Method",
    "detail": "Function (ELauncherProfileDeploymentModes::Type)",
    "insertText": "GetDeploymentMode()"
  },
  {
    "label": "GetForceClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceClose()"
  },
  {
    "label": "GetLaunchMode()",
    "kind": "Method",
    "detail": "Function (ELauncherProfileLaunchModes::Type)",
    "insertText": "GetLaunchMode()"
  },
  {
    "label": "GetLaunchRoles()",
    "kind": "Method",
    "detail": "Function (const TArray<ILauncherProfileLaunchRolePtr>&)",
    "insertText": "GetLaunchRoles()"
  },
  {
    "label": "GetLaunchRolesFor()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetLaunchRolesFor(const FString& DeviceId, TArray<ILauncherProfileLaunchRolePtr>& OutRoles)"
  },
  {
    "label": "GetPackagingMode()",
    "kind": "Method",
    "detail": "Function (ELauncherProfilePackagingModes::Type)",
    "insertText": "GetPackagingMode()"
  },
  {
    "label": "GetPackageDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackageDirectory()"
  },
  {
    "label": "IsArchiving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArchiving()"
  },
  {
    "label": "GetArchiveDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveDirectory()"
  },
  {
    "label": "HasProjectSpecified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProjectSpecified()"
  },
  {
    "label": "GetProjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectName()"
  },
  {
    "label": "GetProjectBasePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectBasePath()"
  },
  {
    "label": "GetProjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectPath()"
  },
  {
    "label": "GetAdditionalCommandLineParameters()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAdditionalCommandLineParameters()"
  },
  {
    "label": "GetTimeout()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTimeout()"
  },
  {
    "label": "IsGeneratingPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGeneratingPatch()"
  },
  {
    "label": "ShouldAddPatchLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAddPatchLevel()"
  },
  {
    "label": "ShouldStageBaseReleasePaks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStageBaseReleasePaks()"
  },
  {
    "label": "GetBuildMode()",
    "kind": "Method",
    "detail": "Function (ELauncherProfileBuildModes::Type)",
    "insertText": "GetBuildMode()"
  },
  {
    "label": "ShouldBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBuild()"
  },
  {
    "label": "IsBuildingUAT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildingUAT()"
  },
  {
    "label": "IsCookingIncrementally()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookingIncrementally()"
  },
  {
    "label": "IsIterateSharedCookedBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIterateSharedCookedBuild()"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "IsEncryptingIniFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEncryptingIniFiles()"
  },
  {
    "label": "IsForDistribution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForDistribution()"
  },
  {
    "label": "IsCookingUnversioned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookingUnversioned()"
  },
  {
    "label": "IsDeployingIncrementally()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeployingIncrementally()"
  },
  {
    "label": "IsFileServerHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileServerHidden()"
  },
  {
    "label": "IsFileServerStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileServerStreaming()"
  },
  {
    "label": "IsPackingWithUnrealPak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackingWithUnrealPak()"
  },
  {
    "label": "IsIncludingPrerequisites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncludingPrerequisites()"
  },
  {
    "label": "IsGeneratingChunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGeneratingChunks()"
  },
  {
    "label": "IsGenerateHttpChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGenerateHttpChunkData()"
  },
  {
    "label": "GetHttpChunkDataDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHttpChunkDataDirectory()"
  },
  {
    "label": "GetHttpChunkDataReleaseName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHttpChunkDataReleaseName()"
  },
  {
    "label": "SupportsEngineMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEngineMaps()"
  },
  {
    "label": "SetEditorExe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorExe(const FString& EditorExe)"
  },
  {
    "label": "GetEditorExe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEditorExe()"
  },
  {
    "label": "AddCookedCulture()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddCookedCulture(const FString& CultureName)"
  },
  {
    "label": "AddCookedMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookedMap(const FString& MapName)"
  },
  {
    "label": "AddCookedPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookedPlatform(const FString& PlatformName)"
  },
  {
    "label": "SetDefaultDeployPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultDeployPlatform(const FName PlatformName)"
  },
  {
    "label": "ClearCookedCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedCultures()"
  },
  {
    "label": "ClearCookedMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedMaps()"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "CreateLaunchRole()",
    "kind": "Method",
    "detail": "Function (ILauncherProfileLaunchRolePtr)",
    "insertText": "CreateLaunchRole()"
  },
  {
    "label": "RemoveCookedCulture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedCulture(const FString& CultureName)"
  },
  {
    "label": "RemoveCookedMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedMap(const FString& MapName)"
  },
  {
    "label": "RemoveCookedPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPlatform(const FString& PlatformName)"
  },
  {
    "label": "RemoveLaunchRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLaunchRole(const ILauncherProfileLaunchRoleRef& Role)"
  },
  {
    "label": "SetBuildMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildMode(ELauncherProfileBuildModes::Type Mode)"
  },
  {
    "label": "SetBuildUAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildUAT(bool Build)"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetBuildTargetSpecified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildTargetSpecified(bool Specified)"
  },
  {
    "label": "FallbackBuildTargetUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FallbackBuildTargetUpdated()"
  },
  {
    "label": "SetBuildTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildTarget(const FString& TargetName)"
  },
  {
    "label": "SetCookConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookMode(ELauncherProfileCookModes::Type Mode)"
  },
  {
    "label": "SetCookOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookOptions(const FString& Options)"
  },
  {
    "label": "SetDeployWithUnrealPak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeployWithUnrealPak(bool UseUnrealPak)"
  },
  {
    "label": "SetGenerateChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerateChunks(bool bGenerateChunks)"
  },
  {
    "label": "SetGenerateHttpChunkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGenerateHttpChunkData(bool bGenerateHttpChunkData)"
  },
  {
    "label": "SetHttpChunkDataDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHttpChunkDataDirectory(const FString& InHttpChunkDataDirectory)"
  },
  {
    "label": "SetHttpChunkDataReleaseName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHttpChunkDataReleaseName(const FString& InHttpChunkDataReleaseName)"
  },
  {
    "label": "SetDeployedDeviceGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeployedDeviceGroup(const ILauncherDeviceGroupPtr& DeviceGroup)"
  },
  {
    "label": "SetDeploymentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeploymentMode(ELauncherProfileDeploymentModes::Type Mode)"
  },
  {
    "label": "IsCreatingReleaseVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreatingReleaseVersion()"
  },
  {
    "label": "SetCreateReleaseVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateReleaseVersion(bool InCreateReleaseVersion)"
  },
  {
    "label": "GetCreateReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCreateReleaseVersionName()"
  },
  {
    "label": "SetCreateReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateReleaseVersionName(const FString& InCreateReleaseVersionName)"
  },
  {
    "label": "GetBasedOnReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBasedOnReleaseVersionName()"
  },
  {
    "label": "SetBasedOnReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBasedOnReleaseVersionName(const FString& InBasedOnReleaseVersion)"
  },
  {
    "label": "GetOriginalReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOriginalReleaseVersionName()"
  },
  {
    "label": "SetOriginalReleaseVersionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOriginalReleaseVersionName(const FString& InOriginalReleaseVersion)"
  },
  {
    "label": "GetReferenceContainerGlobalFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferenceContainerGlobalFileName()"
  },
  {
    "label": "SetReferenceContainerGlobalFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceContainerGlobalFileName(const FString& InReferenceContainerGlobalFileName)"
  },
  {
    "label": "GetReferenceContainerCryptoKeysFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferenceContainerCryptoKeysFileName()"
  },
  {
    "label": "SetReferenceContainerCryptoKeysFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceContainerCryptoKeysFileName(const FString& InReferenceContainerCryptoKeysFileName)"
  },
  {
    "label": "SetGeneratePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeneratePatch(bool InShouldGeneratePatch)"
  },
  {
    "label": "SetAddPatchLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddPatchLevel(bool InAddPatchLevel)"
  },
  {
    "label": "SetStageBaseReleasePaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStageBaseReleasePaks(bool InStageBaseReleasePaks)"
  },
  {
    "label": "IsCreatingDLC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreatingDLC()"
  },
  {
    "label": "SetCreateDLC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateDLC(bool InBuildDLC)"
  },
  {
    "label": "GetDLCName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDLCName()"
  },
  {
    "label": "SetDLCName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDLCName(const FString& InDLCName)"
  },
  {
    "label": "IsDLCIncludingEngineContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDLCIncludingEngineContent()"
  },
  {
    "label": "SetDLCIncludeEngineContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDLCIncludeEngineContent(bool InDLCIncludeEngineContent)"
  },
  {
    "label": "SetForceClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceClose(bool Close)"
  },
  {
    "label": "SetHideFileServerWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHideFileServerWindow(bool Hide)"
  },
  {
    "label": "SetIncrementalCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncrementalCooking(bool Incremental)"
  },
  {
    "label": "SetIterateSharedCookedBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIterateSharedCookedBuild(bool IterateSharedCookedBuild)"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompressed(bool Enable)"
  },
  {
    "label": "SetEncryptingIniFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncryptingIniFiles(bool Enabled)"
  },
  {
    "label": "SetForDistribution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForDistribution(bool Enabled)"
  },
  {
    "label": "SetIncrementalDeploying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncrementalDeploying(bool Incremental)"
  },
  {
    "label": "SetLaunchMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLaunchMode(ELauncherProfileLaunchModes::Type Mode)"
  },
  {
    "label": "SetPackagingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackagingMode(ELauncherProfilePackagingModes::Type Mode)"
  },
  {
    "label": "SetPackageDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageDirectory(const FString& Dir)"
  },
  {
    "label": "SetArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchive(bool bArchive)"
  },
  {
    "label": "SetArchiveDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArchiveDirectory(const FString& Dir)"
  },
  {
    "label": "SetProjectSpecified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectSpecified(bool Specified)"
  },
  {
    "label": "FallbackProjectUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FallbackProjectUpdated()"
  },
  {
    "label": "SetProjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectPath(const FString& Path)"
  },
  {
    "label": "SetAdditionalCommandLineParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalCommandLineParameters(const FString& Params)"
  },
  {
    "label": "SetStreamingFileServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamingFileServer(bool Streaming)"
  },
  {
    "label": "SetIncludePrerequisites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncludePrerequisites(bool InValue)"
  },
  {
    "label": "SetTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeout(uint32 InTime)"
  },
  {
    "label": "SetUnversionedCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnversionedCooking(bool Unversioned)"
  },
  {
    "label": "OnProjectChanged()",
    "kind": "Method",
    "detail": "Function (FOnProfileProjectChanged&)",
    "insertText": "OnProjectChanged()"
  },
  {
    "label": "OnBuildTargetOptionsChanged()",
    "kind": "Method",
    "detail": "Function (FOnProfileBuildTargetOptionsChanged&)",
    "insertText": "OnBuildTargetOptionsChanged()"
  },
  {
    "label": "SetUseIoStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseIoStore(bool bUseIoStore)"
  },
  {
    "label": "IsUsingIoStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingIoStore()"
  },
  {
    "label": "SetUseZenStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseZenStore(bool bUseZenStore)"
  },
  {
    "label": "IsUsingZenStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingZenStore()"
  },
  {
    "label": "SetMakeBinaryConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMakeBinaryConfig(bool bMakeBinaryConfig)"
  },
  {
    "label": "MakeBinaryConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeBinaryConfig()"
  },
  {
    "label": "SetShouldUpdateDeviceFlash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldUpdateDeviceFlash(bool bInShouldUpdateFlash)"
  },
  {
    "label": "ShouldUpdateDeviceFlash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateDeviceFlash()"
  },
  {
    "label": "SetDeviceIsASimulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceIsASimulator(bool bInIsDeviceASimualtor)"
  },
  {
    "label": "IsDeviceASimulator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceASimulator()"
  },
  {
    "label": "GetExplicitBuildTargetNames()",
    "kind": "Method",
    "detail": "Function (public : TArray<FString>)",
    "insertText": "GetExplicitBuildTargetNames()"
  },
  {
    "label": "RequiresExplicitBuildTargetName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresExplicitBuildTargetName()"
  },
  {
    "label": "ILauncherProfile()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ILauncherProfile()"
  }
]