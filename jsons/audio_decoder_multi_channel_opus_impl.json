[
  {
    "label": "AudioDecoderMultiChannelOpusImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderMultiChannelOpusImpl"
  },
  {
    "label": "MakeAudioDecoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_DECODER_MULTI_CHANNEL_OPUS_IMPL_H_ # define MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_DECODER_MULTI_CHANNEL_OPUS_IMPL_H_ # include<stddef . h> # include<memory> # include<vector> # include \" api / audio_codecs / audio_decoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / audio_codecs / opus / audio_decoder_multi_channel_opus_config . h \" # include \" modules / audio_coding / codecs / opus / opus_interface . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class AudioDecoderMultiChannelOpusImpl final : public AudioDecoder { public : std::unique_ptr<AudioDecoderMultiChannelOpusImpl>)",
    "insertText": "MakeAudioDecoder(AudioDecoderMultiChannelOpusConfig config)"
  },
  {
    "label": "AudioDecoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioDecoderMultiChannelOpusImpl()"
  },
  {
    "label": "AudioDecoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDecoderMultiChannelOpusImpl(const AudioDecoderMultiChannelOpusImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoderMultiChannelOpusImpl&)",
    "insertText": "operator(const AudioDecoderMultiChannelOpusImpl&)"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDuration(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "PacketDurationRedundant()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDurationRedundant(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "PacketHasFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PacketHasFec(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<AudioDecoderMultiChannelOpusConfig>)",
    "insertText": "SdpToConfig(const SdpAudioFormat& format)"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (protected : int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "DecodeRedundantInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeRedundantInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "AudioDecoderMultiChannelOpusImpl()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AudioDecoderMultiChannelOpusImpl(OpusDecInst* dec_state, AudioDecoderMultiChannelOpusConfig config)"
  }
]