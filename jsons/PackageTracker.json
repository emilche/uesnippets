[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FInstigator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstigator"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FRecompileShaderRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecompileShaderRequest"
  },
  {
    "label": "FPackageDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDatas"
  },
  {
    "label": "FThreadSafeQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeQueue"
  },
  {
    "label": "FThreadSafeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSafeSet"
  },
  {
    "label": "FThreadSafeUnsolicitedPackagesList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeUnsolicitedPackagesList"
  },
  {
    "label": "FPackageTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTracker"
  },
  {
    "label": "UObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectBase"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / Set . h \" # include \" CookRequests . h \" # include \" CookTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UObjectArray . h \" class ITargetPlatform ; class UPackage ; namespace UE::Cook { struct FInstigator ; } namespace UE::Cook { struct FPackageData ; } namespace UE::Cook { struct FRecompileShaderRequest ; } namespace UE::Cook { struct FPackageDatas ; template<Type> struct FThreadSafeQueue { private : FCriticalSection SynchronizationObject ; TRingBuffer<Type> Items ; public : void)",
    "insertText": "Enqueue(const Type& Item)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Enqueue(Type&& Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(MoveTempIfPossible(Item))"
  },
  {
    "label": "EnqueueUnique()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueUnique(const Type& Item)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Dequeue(Type* Result)"
  },
  {
    "label": "PopFrontValue()",
    "kind": "Method",
    "detail": "Function (* Result = Items .)",
    "insertText": "PopFrontValue()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Results .)",
    "insertText": "Reserve(Results.Num() + Items.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Results .)",
    "insertText": "Add(Items.PopFrontValue())"
  },
  {
    "label": "HasItems()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasItems()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const Type& Item)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Remove(Item)"
  },
  {
    "label": "CopyItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyItems(const TArray<Type>& InItems)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Empty(InItems.Num())"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "PushBack(Item)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class FThreadSafeSet { TSet<T> InnerSet ; FCriticalSection SetCritical ; public : void)",
    "insertText": "Add(T InValue)"
  },
  {
    "label": "SetLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "SetLock(&SetCritical)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InnerSet .)",
    "insertText": "Add(InValue)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddUnique(T InValue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(T InValue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InnerSet .)",
    "insertText": "Remove(InValue)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValues(TSet<T>& OutSet)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutSet .)",
    "insertText": "Append(InnerSet)"
  },
  {
    "label": "AddCookedPackage()",
    "kind": "Method",
    "detail": "Function (} } ; struct FThreadSafeUnsolicitedPackagesList { void)",
    "insertText": "AddCookedPackage(const FFilePlatformRequest& PlatformRequest)"
  },
  {
    "label": "GetPackagesForPlatformAndRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackagesForPlatformAndRemove(const ITargetPlatform* Platform, TArray<FName>& PackageNames)"
  },
  {
    "label": "FPackageTracker()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection SyncObject ; TArray<FFilePlatformRequest> CookedPackages ; } ; struct FPackageTracker : public FUObjectArray::FUObjectCreateListener,public FUObjectArray::FUObjectDeleteListener { public :)",
    "insertText": "FPackageTracker(UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "FPackageTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackageTracker()"
  },
  {
    "label": "GetNewPackages()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FInstigator>)",
    "insertText": "GetNewPackages()"
  },
  {
    "label": "MarkLoadedPackagesAsNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkLoadedPackagesAsNew()"
  },
  {
    "label": "NotifyUObjectCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUObjectCreated(const class UObjectBase* Object, int32 Index)"
  },
  {
    "label": "NotifyUObjectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUObjectDeleted(const class UObjectBase* Object, int32 Index)"
  },
  {
    "label": "OnUObjectArrayShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUObjectArrayShutdown()"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "ForEachLoadedPackage()",
    "kind": "Method",
    "detail": "Function (UCookOnTheFlyServer& COTFS ; FThreadSafeUnsolicitedPackagesList UnsolicitedCookedPackages ; FThreadSafeQueue<FRecompileShaderRequest> RecompileRequests ; FThreadSafeSet<FName> NeverCookPackageList ; FThreadSafeSet<FName> UncookedEditorOnlyPackages ; TFastPointerMap<const ITargetPlatform*,TSet<FName>> PlatformSpecificNeverCookPackages ; template<FunctionType> void)",
    "insertText": "ForEachLoadedPackage(FunctionType Function)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ScopeLock(Lock)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Package)"
  },
  {
    "label": "NumLoadedPackages()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "NumLoadedPackages()"
  },
  {
    "label": "AddExpectedNeverLoadPackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExpectedNeverLoadPackages(const TSet<FName>& PackageNames)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ExpectedNeverLoadPackages .)",
    "insertText": "Append(PackageNames)"
  },
  {
    "label": "ClearExpectedNeverLoadPackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearExpectedNeverLoadPackages()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "InitializeTracking()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InitializeTracking()"
  }
]