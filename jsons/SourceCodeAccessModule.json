[
  {
    "label": "FSourceCodeAccessModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourceCodeAccessModule"
  },
  {
    "label": "FSourceCodeAccessModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISourceCodeAccessModule . h \" # include \" DefaultSourceCodeAccessor . h \" class FSourceCodeAccessModule : public ISourceCodeAccessModule { public :)",
    "insertText": "FSourceCodeAccessModule()"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "CanAccessSourceCode()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanAccessSourceCode()"
  },
  {
    "label": "CanCompileSourceCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCompileSourceCode()"
  },
  {
    "label": "GetAccessor()",
    "kind": "Method",
    "detail": "Function (ISourceCodeAccessor&)",
    "insertText": "GetAccessor()"
  },
  {
    "label": "SetAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccessor(const FName& InName)"
  },
  {
    "label": "OnLaunchingCodeAccessor()",
    "kind": "Method",
    "detail": "Function (FLaunchingCodeAccessor&)",
    "insertText": "OnLaunchingCodeAccessor()"
  },
  {
    "label": "OnDoneLaunchingCodeAccessor()",
    "kind": "Method",
    "detail": "Function (FDoneLaunchingCodeAccessor&)",
    "insertText": "OnDoneLaunchingCodeAccessor()"
  },
  {
    "label": "OnOpenFileFailed()",
    "kind": "Method",
    "detail": "Function (FOpenFileFailed&)",
    "insertText": "OnOpenFileFailed()"
  },
  {
    "label": "HandleModularFeatureRegistered()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleModularFeatureRegistered(const FName& Type, IModularFeature* ModularFeature)"
  },
  {
    "label": "HandleModularFeatureUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleModularFeatureUnregistered(const FName& Type, IModularFeature* ModularFeature)"
  },
  {
    "label": "IsSourceCodeAccessorAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceCodeAccessorAvailable(FName Name)"
  }
]