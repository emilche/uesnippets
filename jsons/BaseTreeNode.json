[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBaseTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseTreeNode"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "FGroupNodeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroupNodeData"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" InsightsCore / Common / SimpleRtti . h \" struct FSlateBrush ; namespace UE::Insights { class ITableCellValueSorter ; enum class ESortMode ; class FBaseTreeNode ; typedef TSharedPtr<class FBaseTreeNode> FBaseTreeNodePtr ; typedef TSharedRef<class FBaseTreeNode> FBaseTreeNodeRef ; typedef TSharedRef<const class FBaseTreeNode> FBaseTreeNodeRefConst ; typedef TWeakPtr<class FBaseTreeNode> FBaseTreeNodeWeak ; class FBaseTreeNode : public TSharedFromThis<FBaseTreeNode> {)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(FBaseTreeNode)"
  },
  {
    "label": "FBaseTreeNode()",
    "kind": "Method",
    "detail": "Function (None = 0,IsExpanded = 1<<0,} ; struct FGroupNodeData { TArray<FBaseTreeNodePtr> Children ; TArray<FBaseTreeNodePtr>* FilteredChildrenPtr =& Children ; EGroupNodeFlags Flags = EGroupNodeFlags::None ; } ; public :)",
    "insertText": "FBaseTreeNode(const FName InName, bool bInIsGroup) : DefaultSortOrder(0) , Name(InName) , Parent(nullptr) , GroupData(bInIsGroup ? new FGroupNodeData() : &DefaultGroupData)"
  },
  {
    "label": "FBaseTreeNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBaseTreeNode()"
  },
  {
    "label": "RemoveGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGroupData()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetExtraDisplayName()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetExtraDisplayName()"
  },
  {
    "label": "HasExtraDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExtraDisplayName()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetDefaultIcon()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetDefaultIcon(bool bIsGroupNode)"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIcon()"
  },
  {
    "label": "GetDefaultIconColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetDefaultIconColor(bool bIsGroupNode)"
  },
  {
    "label": "GetIconColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetIconColor()"
  },
  {
    "label": "GetDefaultColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetDefaultColor(bool bIsGroupNode)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetParentWeak()",
    "kind": "Method",
    "detail": "Function (} FBaseTreeNodeWeak)",
    "insertText": "GetParentWeak()"
  },
  {
    "label": "IsGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGroup()"
  },
  {
    "label": "FGroupNodeData()",
    "kind": "Method",
    "detail": "Function (GroupData = new)",
    "insertText": "FGroupNodeData()"
  },
  {
    "label": "GetChildrenCount()",
    "kind": "Method",
    "detail": "Function (delete GroupData -> FilteredChildrenPtr ; } delete GroupData ; GroupData =& DefaultGroupData ; } } int32)",
    "insertText": "GetChildrenCount()"
  },
  {
    "label": "EnumerateChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateChildren(TFunction<bool(const FBaseTreeNodePtr&)> Callback)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (break ; } } } const TArray<FBaseTreeNodePtr>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> void)",
    "insertText": "SortChildren(PredicateType Predicate)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (GroupData -> Children .)",
    "insertText": "Sort(Predicate)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(const FBaseTreeNodePtr& ChildPtr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GroupData -> Children .)",
    "insertText": "Add(ChildPtr)"
  },
  {
    "label": "AddChildAndSetParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChildAndSetParent(const FBaseTreeNodePtr& ChildPtr)"
  },
  {
    "label": "AsWeak()",
    "kind": "Method",
    "detail": "Function (ChildPtr -> Parent =)",
    "insertText": "AsWeak()"
  },
  {
    "label": "RemoveFromParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromParent()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (FBaseTreeNodePtr ParentNodePtr = Parent .)",
    "insertText": "Pin()"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (ParentNodePtr -> GroupData -> Children .)",
    "insertText": "RemoveSingle(AsShared())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} Parent .)",
    "insertText": "Reset()"
  },
  {
    "label": "RemoveFromParentSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromParentSwap()"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (ParentNodePtr -> GroupData -> Children .)",
    "insertText": "RemoveSwap(AsShared())"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RemoveChild(const FBaseTreeNodePtr& ChildPtr)"
  },
  {
    "label": "SetParentForChildren()",
    "kind": "Method",
    "detail": "Function (Parent = InParentWeak ; } void)",
    "insertText": "SetParentForChildren()"
  },
  {
    "label": "SetParentForChildrenRec()",
    "kind": "Method",
    "detail": "Function (NodePtr -> Parent = ThisNode ; } } void)",
    "insertText": "SetParentForChildrenRec()"
  },
  {
    "label": "ResetParentForChildren()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetParentForChildren()"
  },
  {
    "label": "ResetParentForChildrenRec()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetParentForChildrenRec()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearChildren(int32 NewSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (GroupData -> Children .)",
    "insertText": "Reset(NewSize)"
  },
  {
    "label": "SwapChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapChildren(TArray<FBaseTreeNodePtr>& NewChildren)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(NewChildren, GroupData->Children)"
  },
  {
    "label": "SwapChildrenFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapChildrenFast(TArray<FBaseTreeNodePtr>& NewChildren)"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFiltered()"
  },
  {
    "label": "GetFilteredChildNode()",
    "kind": "Method",
    "detail": "Function (} const FBaseTreeNodePtr&)",
    "insertText": "GetFilteredChildNode(int32 Index)"
  },
  {
    "label": "EnumerateFilteredChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateFilteredChildren(TFunction<bool(const FBaseTreeNodePtr&)> Callback)"
  },
  {
    "label": "GetFilteredChildren()",
    "kind": "Method",
    "detail": "Function (break ; } } } const TArray<FBaseTreeNodePtr>&)",
    "insertText": "GetFilteredChildren()"
  },
  {
    "label": "SortFilteredChildren()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> void)",
    "insertText": "SortFilteredChildren(PredicateType Predicate)"
  },
  {
    "label": "ClearFilteredChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearFilteredChildren(int32 NewSize = 0)"
  },
  {
    "label": "FBaseTreeNodePtr()",
    "kind": "Method",
    "detail": "Function (GroupData -> FilteredChildrenPtr = new TArray<)",
    "insertText": "FBaseTreeNodePtr()"
  },
  {
    "label": "AddFilteredChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddFilteredChild(const FBaseTreeNodePtr& ChildPtr)"
  },
  {
    "label": "ResetFilteredChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetFilteredChildren()"
  },
  {
    "label": "ResetFilteredChildrenRec()",
    "kind": "Method",
    "detail": "Function (delete GroupData -> FilteredChildrenPtr ; GroupData -> FilteredChildrenPtr =& GroupData -> Children ; } } void)",
    "insertText": "ResetFilteredChildrenRec()"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExpansion(bool bOnOff)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (GroupData ->)",
    "insertText": "Flags(EGroupNodeFlags)((uint32)GroupData->Flags | (uint32)EGroupNodeFlags::IsExpanded)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (} else { GroupData ->)",
    "insertText": "Flags(EGroupNodeFlags)((uint32)GroupData->Flags & ~(uint32)EGroupNodeFlags::IsExpanded)"
  },
  {
    "label": "GetDefaultSortOrder()",
    "kind": "Method",
    "detail": "Function (} } } uint32)",
    "insertText": "GetDefaultSortOrder()"
  },
  {
    "label": "GetChildrenMutable()",
    "kind": "Method",
    "detail": "Function (DefaultSortOrder = Order ; } protected : TArray<FBaseTreeNodePtr>&)",
    "insertText": "GetChildrenMutable()"
  }
]