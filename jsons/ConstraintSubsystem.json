[
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FConstraintsInWorld",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintsInWorld"
  },
  {
    "label": "UConstraintSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConstraintSubsystem"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ConstraintsEvaluationGraph . h \" # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Subsystems / EngineSubsystem . h \" # include \" ConstraintsManager . h \" # include \" Engine / World . h \" # include \" ConstraintSubsystem . generated . h \" class UTickableConstraint ; class ULevel ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() UPROPERTY(transient)"
  },
  {
    "label": "RemoveConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraints(UWorld* World)"
  },
  {
    "label": "GetEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (FConstraintsEvaluationGraph&)",
    "insertText": "GetEvaluationGraph()"
  },
  {
    "label": "InvalidateGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGraph()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FConstraintsEvaluationGraph> EvaluationGraph = nullptr ; } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FOnConstraintAddedToSystem, UConstraintSubsystem, OnConstraintAddedToSystem_BP, UConstraintSubsystem*, Mananger, UTickableConstraint*, Constraint)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams(FOnConstraintRemovedFromSystem, UConstraintSubsystem, OnConstraintRemovedFromSystem_BP, UConstraintSubsystem*, Mananger, UTickableConstraint*, Constraint, bool, bDoNotCompensate)"
  },
  {
    "label": "UConstraintSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UConstraintSubsystem()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UConstraintSubsystem*)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "SetConstraintDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintDependencies(FConstraintTickFunction* InFunctionToTickBefore, FConstraintTickFunction* InFunctionToTickAfter)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetConstraints(const UWorld* InWorld)"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (const TArray<TWeakObjectPtr<UTickableConstraint>>&)",
    "insertText": "GetConstraintsArray(const UWorld* InWorld)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraint(UWorld* InWorld, UTickableConstraint* InConstraint)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(UWorld* InWorld, UTickableConstraint* InConstraint, bool bDoNoCompensate)"
  },
  {
    "label": "HasConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConstraint(UWorld* InWorld, UTickableConstraint* InConstraint)"
  },
  {
    "label": "GetEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (FConstraintsEvaluationGraph&)",
    "insertText": "GetEvaluationGraph(UWorld* InWorld)"
  },
  {
    "label": "InvalidateConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateConstraints()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "OnWorldInit()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnWorldInitHandle ; void)",
    "insertText": "OnWorldInit(UWorld* World, const UWorld::InitializationValues IVS)"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnWorldCleanupHandle ; void)",
    "insertText": "OnWorldCleanup(UWorld* World, bool bSessionEnded, bool bCleanupResources)"
  },
  {
    "label": "OnPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnPostGarbageCollectHandle ; void)",
    "insertText": "OnPostGarbageCollect()"
  },
  {
    "label": "RegisterWorldDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWorldDelegates()"
  },
  {
    "label": "ConstraintsInWorldFind()",
    "kind": "Method",
    "detail": "Function (bool bNeedsCleanup = false ; const FConstraintsInWorld*)",
    "insertText": "ConstraintsInWorldFind(const UWorld* InWorld)"
  },
  {
    "label": "ConstraintsInWorldFindOrAdd()",
    "kind": "Method",
    "detail": "Function (FConstraintsInWorld&)",
    "insertText": "ConstraintsInWorldFindOrAdd(UWorld* InWorld)"
  },
  {
    "label": "GetConstraintsInWorldIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintsInWorldIndex(const UWorld* InWorld)"
  },
  {
    "label": "CleanupInvalidConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupInvalidConstraints()"
  }
]