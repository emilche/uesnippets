[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "FCurveEditorViewAxisID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorViewAxisID"
  },
  {
    "label": "INumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INumericTypeInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveEditorAxis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorAxis"
  },
  {
    "label": "FLinearCurveEditorAxis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearCurveEditorAxis"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" class FCurveEditor ; class SCurveEditorView ; struct FCurveEditorViewAxisID ; template<NumericType> struct INumericTypeInterface ; enum class ECurveEditorAxisOrientation : uint8 { Horizontal = 1,Vertical = 2,Both = Horizontal | Vertical,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECurveEditorAxisOrientation)"
  },
  {
    "label": "FCurveEditorAxis()",
    "kind": "Method",
    "detail": "Function (class FCurveEditorAxis { public : ~)",
    "insertText": "FCurveEditorAxis()"
  },
  {
    "label": "HasLabels()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLabels()"
  },
  {
    "label": "MakeLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "MakeLabel(double Value)"
  },
  {
    "label": "GetGridLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGridLines(const FCurveEditor& CurveEditor, const SCurveEditorView& View, FCurveEditorViewAxisID AxisID, TArray<double>& OutMajorGridLines, TArray<double>& OutMinorGridLines, ECurveEditorAxisOrientation Axis)"
  }
]