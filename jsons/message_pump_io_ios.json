[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpIOSForIO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpIOSForIO"
  },
  {
    "label": "MessagePumpIOSForIOTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpIOSForIOTest"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_IO_IOS_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_IO_IOS_H_ # include \" base / base_export . h \" # include \" base / mac / scoped_cffiledescriptorref . h \" # include \" base / mac / scoped_cftyperef . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / weak_ptr . h \" # include \" base / message_loop / message_pump_mac . h \" # include \" base / message_loop / watchable_io_message_pump_posix . h \" # include \" base / threading / thread_checker . h \" namespace base { class BASE_EXPORT MessagePumpIOSForIO : public MessagePumpNSRunLoop,public WatchableIOMessagePumpPosix { public : class FdWatchController : public FdWatchControllerInterface { public :)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FdWatchController(const FdWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FdWatchController&)",
    "insertText": "operator(const FdWatchController&)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FdWatchController()"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpIOSForIO ; class MessagePumpIOSForIOTest ; void)",
    "insertText": "Init(CFFileDescriptorRef fdref, CFOptionFlags callback_types, CFRunLoopSourceRef fd_source, bool is_persistent)"
  },
  {
    "label": "set_pump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_pump(base::WeakPtr<MessagePumpIOSForIO> pump)"
  },
  {
    "label": "pump()",
    "kind": "Method",
    "detail": "Function (pump_ = pump ; } const base::WeakPtr<MessagePumpIOSForIO>&)",
    "insertText": "pump()"
  },
  {
    "label": "OnFileCanReadWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (watcher_ = watcher ; } void)",
    "insertText": "OnFileCanReadWithoutBlocking(int fd, MessagePumpIOSForIO* pump)"
  },
  {
    "label": "OnFileCanWriteWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCanWriteWithoutBlocking(int fd, MessagePumpIOSForIO* pump)"
  },
  {
    "label": "MessagePumpIOSForIO()",
    "kind": "Method",
    "detail": "Function (bool is_persistent_ = false ; base::mac::ScopedCFFileDescriptorRef fdref_ ; CFOptionFlags callback_types_ = 0 ; base::ScopedCFTypeRef<CFRunLoopSourceRef> fd_source_ ; base::WeakPtr<MessagePumpIOSForIO> pump_ ; FdWatcher* watcher_ = nullptr ; } ;)",
    "insertText": "MessagePumpIOSForIO()"
  },
  {
    "label": "MessagePumpIOSForIO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpIOSForIO(const MessagePumpIOSForIO&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpIOSForIO&)",
    "insertText": "operator(const MessagePumpIOSForIO&)"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, int mode, FdWatchController* controller, FdWatcher* delegate)"
  },
  {
    "label": "RemoveRunLoopSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRunLoopSource(CFRunLoopSourceRef source)"
  },
  {
    "label": "HandleFdIOEvent()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpIOSForIOTest ; void)",
    "insertText": "HandleFdIOEvent(CFFileDescriptorRef fdref, CFOptionFlags callback_types, void* context)"
  }
]