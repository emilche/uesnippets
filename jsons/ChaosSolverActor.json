[
  {
    "label": "UChaosGameplayEventDispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChaosGameplayEventDispatcher"
  },
  {
    "label": "TGeometryParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosDebugSubstepControl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosDebugSubstepControl"
  },
  {
    "label": "FDataflowRigidSolverProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowRigidSolverProxy"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "AChaosSolverActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AChaosSolverActor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" Components / BillboardComponent . h \" # include \" UObject / ObjectMacros . h \" # include \" Chaos / ChaosSolver . h \" # include \" Chaos / ChaosSolverComponentTypes . h \" # include \" Chaos / ClusterCreationParameters . h \" # include \" Physics / Experimental / PhysScene_Chaos . h \" # include \" ChaosSolverConfiguration . h \" # include \" SolverEventFilters . h \" # include \" Dataflow / Interfaces / DataflowPhysicsSolver . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" ChaosSolverActor . generated . h \" class UChaosGameplayEventDispatcher ; namespace Chaos { template<,int> class TGeometryParticle ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Chaos_PointImplicit = Chaos::FClusterCreationParameters::PointImplicit,Chaos_DelaunayTriangulation = Chaos::FClusterCreationParameters::DelaunayTriangulation)",
    "insertText": "UMETA(Hidden), Chaos_MinimalSpanningSubsetDelaunayTriangulation = Chaos::FClusterCreationParameters::MinimalSpanningSubsetDelaunayTriangulation, Chaos_PointImplicitAugmentedWithMinimalDelaunay = Chaos::FClusterCreationParameters::PointImplicitAugmentedWithMinimalDelaunay, Chaos_BoundsOverlapFilteredDelaunayTriangulation = Chaos::FClusterCreationParameters::BoundsOverlapFilteredDelaunayTriangulation, Chaos_None = Chaos::FClusterCreationParameters::None UMETA(Hidden), Chaos_EClsuterCreationParameters_Max UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FChaosDebugSubstepControl() : bPause(false), bSubstep(false), bStep(false)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FSimpleDelegate OnPauseChanged ; # endif } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FDataflowRigidSolverProxy() : FDataflowPhysicsSolverProxy()"
  },
  {
    "label": "FDataflowRigidSolverProxy()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDataflowRigidSolverProxy()"
  },
  {
    "label": "AdvanceSolverDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSolverDatas(const float DeltaTime)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} Chaos::FPhysicsSolver* Solver = nullptr ; TArray<Chaos::FPushPhysicsData*> PushDatas = { } ; } ; template<> struct TStructOpsTypeTraits<FDataflowRigidSolverProxy> : public TStructOpsTypeTraitsBase2<FDataflowRigidSolverProxy> { enum { WithCopy = false } ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, Category = \"Chaos\", meta=(ShowOnlyInnerProperties))"
  },
  {
    "label": "GetSimulationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSimulationName()"
  },
  {
    "label": "GetSimulationAsset()",
    "kind": "Method",
    "detail": "Function (} ; FDataflowSimulationAsset&)",
    "insertText": "GetSimulationAsset()"
  },
  {
    "label": "ResetSimulationProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSimulationProxy()"
  },
  {
    "label": "WriteToSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToSimulation(const float DeltaTime, const bool bAsyncTask)"
  },
  {
    "label": "ReadFromSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFromSimulation(const float DeltaTime, const bool bAsyncTask)"
  },
  {
    "label": "GetGameplayEventDispatcher()",
    "kind": "Method",
    "detail": "Function (UChaosGameplayEventDispatcher*)",
    "insertText": "GetGameplayEventDispatcher()"
  },
  {
    "label": "PreInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreInitializeComponents()"
  },
  {
    "label": "PostUnregisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUnregisterAllComponents()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type ReasonEnd)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(EDuplicateMode::Type DuplicateMode)"
  },
  {
    "label": "MakeFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeFloor()"
  },
  {
    "label": "MigrateSolver()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPhysScene_Chaos> PhysScene ; FDataflowRigidSolverProxy RigidSolverProxy ; void)",
    "insertText": "MigrateSolver()"
  }
]