[
  {
    "label": "FAutoConsoleCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommand"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "FWorldPartitionDebugHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDebugHelper"
  },
  {
    "label": "IsDebugDataLayerShown()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / NameTypes . h \" # include \" ProfilingDebugging / ProfilingHelpers . h \" # include \" HAL / IConsoleManager . h \" class FAutoConsoleCommand ; class UCanvas ; class UFont ; struct FLinearColor ; class FWorldPartitionDebugHelper { public : bool)",
    "insertText": "IsDebugDataLayerShown(FName DataLayerName)"
  },
  {
    "label": "AreDebugDataLayersShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDebugDataLayersShown(const TArray<FName>& DataLayerNames)"
  },
  {
    "label": "IsDebugStreamingStatusShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugStreamingStatusShown(EStreamingStatus StreamingStatus)"
  },
  {
    "label": "IsDebugRuntimeHashGridShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugRuntimeHashGridShown(FName Name)"
  },
  {
    "label": "IsDebugCellNameShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugCellNameShown(const FString& Name)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawText(UCanvas* Canvas, const FString& Text, const UFont* Font, const FColor& Color, FVector2D& Pos, float* MaxTextWidth = nullptr)"
  },
  {
    "label": "DrawLegendItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLegendItem(UCanvas* Canvas, const FString& Text, const UFont* Font, const FColor& Color, const FColor& TextColor, FVector2D& Pos, float* MaxItemWidth = nullptr)"
  }
]