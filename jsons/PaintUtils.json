[
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "WidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WidgetStyle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "MAKE_PAINT_GEOMETRY_PT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / FontMeasure . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Rendering / DrawElements . h \" # include \" InsightsCore / Config . h \" # define)",
    "insertText": "MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y) Geometry.ToPaintGeometry(FSlateLayoutTransform(1.0f, FVector2D(X, Y))) #define MAKE_PAINT_GEOMETRY_RC(Geometry, X, Y, W, H) Geometry.ToPaintGeometry(FVector2D(W, H), FSlateLayoutTransform(1.0f, FVector2D(X, Y)))"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (class FSlateRect ; class WidgetStyle ; enum class ESlateDrawEffect : uint8 ; class FSlateWindowElementList ; # if UE_INSIGHTS_CORE_BACKWARD_COMPATIBILITY_UE54 struct FDrawContext ; # endif namespace UE::Insights { class FDrawContext { public :)",
    "insertText": "FDrawContext(const FGeometry& InGeometry, const FSlateRect& InCullingRect, const FWidgetStyle& InWidgetStyle, const ESlateDrawEffect InDrawEffects, FSlateWindowElementList& InOutElementList, int32& InOutLayerId) : Geometry(InGeometry) , CullingRect(InCullingRect) , WidgetStyle(InWidgetStyle) , DrawEffects(InDrawEffects) , ElementList(InOutElementList) , LayerId(InOutLayerId)"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDrawContext(const FDrawContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDrawContext&)",
    "insertText": "operator(const FDrawContext&)"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (# if UE_INSIGHTS_CORE_BACKWARD_COMPATIBILITY_UE54 PRAGMA_DISABLE_DEPRECATION_WARNINGS using FDrawContextOld =::FDrawContext ;)",
    "insertText": "FDrawContext(FDrawContextOld&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FDrawContext&)",
    "insertText": "operator(FDrawContextOld&)"
  },
  {
    "label": "FDrawContextOld()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FDrawContextOld()"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS # endif void)",
    "insertText": "DrawBox(const float X, const float Y, const float W, const float H, const FSlateBrush* Brush, const FLinearColor& Color)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(ElementList, LayerId, MAKE_PAINT_GEOMETRY_RC(Geometry, X, Y, W, H), Brush, DrawEffects, Color)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawBox(const int32 InLayer, const float X, const float Y, const float W, const float H, const FSlateBrush* Brush, const FLinearColor& Color)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(ElementList, InLayer, MAKE_PAINT_GEOMETRY_RC(Geometry, X, Y, W, H), Brush, DrawEffects, Color)"
  },
  {
    "label": "DrawRotatedBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawRotatedBox(const float X, const float Y, const float W, const float H, const FSlateBrush* Brush, const FLinearColor& Color, float Angle, TOptional<FVector2D> RotationPoint)"
  },
  {
    "label": "MakeRotatedBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRotatedBox(ElementList, LayerId, MAKE_PAINT_GEOMETRY_RC(Geometry, X, Y, W, H), Brush, DrawEffects, Angle, RotationPoint, FSlateDrawElement::RelativeToElement, Color)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawText(const float X, const float Y, const FString& Text, const FSlateFontInfo& Font, const FLinearColor& Color)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(ElementList, LayerId, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Text, Font, DrawEffects, Color)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawText(const int32 InLayer, const float X, const float Y, const FString& Text, const FSlateFontInfo& Font, const FLinearColor& Color)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(ElementList, InLayer, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Text, Font, DrawEffects, Color)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawText(const float X, const float Y, const FString& Text, const int32 StartIndex, const int32 EndIndex, const FSlateFontInfo& Font, const FLinearColor& Color)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(ElementList, LayerId, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Text, StartIndex, EndIndex, Font, DrawEffects, Color)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawText(const int32 InLayer, const float X, const float Y, const FString& Text, const int32 StartIndex, const int32 EndIndex, const FSlateFontInfo& Font, const FLinearColor& Color)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(ElementList, InLayer, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Text, StartIndex, EndIndex, Font, DrawEffects, Color)"
  },
  {
    "label": "DrawTextAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawTextAligned(EHorizontalAlignment HAlign, const float X, const float Y, const FString& Text, const FSlateFontInfo& Font, const FLinearColor& Color)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float TextX = X ;)",
    "insertText": "if(HAlign == HAlign_Right || HAlign == HAlign_Center)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FSlateFontMeasure> FontMeasureService =)",
    "insertText": "Get().GetRenderer()->GetFontMeasureService()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float FontScale = Geometry . Scale ; const float TextWidth = static_cast<)",
    "insertText": "float(FontMeasureService->Measure(Text, Font, FontScale).X / FontScale)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (TextX - = TextWidth ; } else { TextX - = TextWidth / 2 ; } })",
    "insertText": "MakeText(ElementList, LayerId, MAKE_PAINT_GEOMETRY_PT(Geometry, TextX, Y), Text, Font, DrawEffects, Color)"
  },
  {
    "label": "DrawSpline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawSpline(uint32 InLayer, const float X, const float Y, const FVector2D& InStart, const FVector2D& InStartDir, const FVector2D& InEnd, const FVector2D& InEndDir, float InThickness = 0.0f, const FLinearColor& InTint=FLinearColor::White)"
  },
  {
    "label": "MakeSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSpline(ElementList, InLayer, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), InStart, InStartDir, InEnd, InEndDir, InThickness, DrawEffects, InTint)"
  },
  {
    "label": "DrawLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawLines(uint32 InLayer, const float X, const float Y, const TArray<FVector2D>& Points, const FLinearColor& InTint = FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeLines(ElementList, InLayer, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Points, DrawEffects, InTint, bAntialias, Thickness)"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (} public : const FGeometry& Geometry ; const FSlateRect& CullingRect ; const FWidgetStyle& WidgetStyle ; const ESlateDrawEffect DrawEffects ; FSlateWindowElementList& ElementList ; int32& LayerId ; } ; } # if UE_INSIGHTS_CORE_BACKWARD_COMPATIBILITY_UE54 struct FDrawContext final : public UE::Insights::FDrawContext {)",
    "insertText": "FDrawContext(const FGeometry& InGeometry, const FSlateRect& InCullingRect, const FWidgetStyle& InWidgetStyle, const ESlateDrawEffect InDrawEffects, FSlateWindowElementList& InOutElementList, int32& InOutLayerId) : UE::Insights::FDrawContext(InGeometry, InCullingRect, InWidgetStyle, InDrawEffects, InOutElementList, InOutLayerId)"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDrawContext(UE::Insights::FDrawContext& Other) : UE::Insights::FDrawContext(Other.Geometry, Other.CullingRect, Other.WidgetStyle, Other.DrawEffects, Other.ElementList, Other.LayerId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDrawContext&)",
    "insertText": "operator(UE::Insights::FDrawContext& Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FDrawContext(Other.Geometry, Other.CullingRect, Other.WidgetStyle, Other.DrawEffects, Other.ElementList, Other.LayerId)"
  },
  {
    "label": "DrawLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawLines(uint32 InLayer, const float X, const float Y, const TArray<FVector2D>& Points, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeLines(ElementList, InLayer, MAKE_PAINT_GEOMETRY_PT(Geometry, X, Y), Points, InDrawEffects, InTint, bAntialias, Thickness)"
  },
  {
    "label": "FDrawContext()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::Insights { PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FDrawContext(FDrawContextOld& Other) : FDrawContext(Other.Geometry, Other.CullingRect, Other.WidgetStyle, Other.DrawEffects, Other.ElementList, Other.LayerId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDrawContext&)",
    "insertText": "operator(FDrawContextOld& Other)"
  }
]