[
  {
    "label": "__join_view_iterator_category",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__join_view_iterator_category"
  },
  {
    "label": "_View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_View"
  },
  {
    "label": "join_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "join_view"
  },
  {
    "label": "__iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__iterator"
  },
  {
    "label": "__sentinel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__sentinel"
  },
  {
    "label": "_V2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_V2"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_JOIN_VIEW_H # define _LIBCPP___RANGES_JOIN_VIEW_H # include<__concepts / constructible . h> # include<__concepts / convertible_to . h> # include<__concepts / copyable . h> # include<__concepts / derived_from . h> # include<__concepts / equality_comparable . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / all . h> # include<__ranges / concepts . h> # include<__ranges / non_propagating_cache . h> # include<__ranges / range_adaptor . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<optional> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_View()",
    "kind": "Method",
    "detail": "Function (template<class> struct __join_view_iterator_category { } ; template<class _View> requires is_reference_v<range_reference_t<_View>>&& forward_range<_View>&& forward_range<range_reference_t<_View>> struct __join_view_iterator_category<_View> { using _OuterC = iterator_traits<iterator_t<_View>>::iterator_category ; using _InnerC = iterator_traits<iterator_t<range_reference_t<_View>>>::iterator_category ; using iterator_category = _If<derived_from<_OuterC,bidirectional_iterator_tag>&& derived_from<_InnerC,bidirectional_iterator_tag>&& common_range<range_reference_t<_View>>,bidirectional_iterator_tag,_If<derived_from<_OuterC,forward_iterator_tag>&& derived_from<_InnerC,forward_iterator_tag>,forward_iterator_tag,input_iterator_tag>> ; } ; template<input_range _View> requires view<_View>&& input_range<range_reference_t<_View>> class join_view : public view_interface<join_view<_View>> { private : using _InnerRange = range_reference_t<_View> ; template<bool> struct __iterator ; template<bool> struct __sentinel ; bool _UseCache = ! is_reference_v<_InnerRange> ; using _Cache = _If<_UseCache,__non_propagating_cache<remove_cvref_t<_InnerRange>>,__empty_cache> ; _LIBCPP_NO_UNIQUE_ADDRESS _Cache __cache_ ; _LIBCPP_NO_UNIQUE_ADDRESS _View __base_ =)",
    "insertText": "_View()"
  },
  {
    "label": "join_view()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "join_view()"
  },
  {
    "label": "join_view()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "join_view(_View __base) : __base_(std::move(__base))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _View)",
    "insertText": "base()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "begin()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (bool __use_const = __simple_view<_View>&& is_reference_v<range_reference_t<_View>> ; return __iterator<__use_const> {* this,)",
    "insertText": "begin(__base_)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (* this,)",
    "insertText": "end(__base_)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using _ConstInnerRange = range_reference_t<const _View> ; if)",
    "insertText": "constexpr(forward_range<const _View> && is_reference_v<_ConstInnerRange> && forward_range<_ConstInnerRange> && common_range<const _View> && common_range<_ConstInnerRange>)"
  },
  {
    "label": "_Base()",
    "kind": "Method",
    "detail": "Function (} else { return __sentinel<true> {* this } ; } } } ; template<input_range _View> requires view<_View>&& input_range<range_reference_t<_View>> template<bool _Const> struct join_view<_View>::__sentinel { template<bool> struct __sentinel ; private : using _Parent = __maybe_const<_Const,join_view> ; using _Base = __maybe_const<_Const,_View> ; sentinel_t<_Base> __end_ = sentinel_t<)",
    "insertText": "_Base()"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel()"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel(_Parent& __parent) : __end_(ranges::end(__parent.__base_))"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel(__sentinel<!_Const> __s) requires _Const && convertible_to<sentinel_t<_View>, sentinel_t<_Base>> : __end_(std::move(__s.__end_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<bool _OtherConst> requires sentinel_for<sentinel_t<_Base>,iterator_t<__maybe_const<_OtherConst,_View>>> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const __iterator<_OtherConst>& __x, const __sentinel& __y)"
  },
  {
    "label": "__satisfy()",
    "kind": "Method",
    "detail": "Function (private : optional<_Inner> __inner_ ; _Parent* __parent_ = nullptr ; _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__satisfy()"
  },
  {
    "label": "__inner()",
    "kind": "Method",
    "detail": "Function (auto&&)",
    "insertText": "__inner()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (__inner_ =)",
    "insertText": "begin(__inner)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(__ref_is_glvalue) __inner_.reset()"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (} public : using iterator_concept = _If<__ref_is_glvalue&& bidirectional_range<_Base>&& bidirectional_range<range_reference_t<_Base>>&& common_range<range_reference_t<_Base>>,bidirectional_iterator_tag,_If<__ref_is_glvalue&& forward_range<_Base>&& forward_range<range_reference_t<_Base>>,forward_iterator_tag,input_iterator_tag>> ; using value_type = range_value_t<range_reference_t<_Base>> ; using difference_type = common_type_t<range_difference_t<_Base>,range_difference_t<range_reference_t<_Base>>> ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator()"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator(_Parent& __parent, _Outer __outer) : __outer_(std::move(__outer)) , __parent_(std::addressof(__parent))"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator(__iterator<!_Const> __i) requires _Const && convertible_to<iterator_t<_View>, _Outer> && convertible_to<iterator_t<_InnerRange>, _Inner> : __outer_(std::move(__i.__outer_)) , __inner_(std::move(__i.__inner_)) , __parent_(__i.__parent_)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator*()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; + +* this ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI __iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (__inner_ =)",
    "insertText": "end(*--__outer_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; - -* this ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const __iterator& __x, const __iterator& __y)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "iter_swap(const __iterator& __x, const __iterator& __y) noexcept(noexcept(ranges::iter_swap(*__x.__inner_, *__y.__inner_)))"
  },
  {
    "label": "join_view()",
    "kind": "Method",
    "detail": "Function (join_view<views::all_t<_Range>>)",
    "insertText": "join_view(_Range&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace views { namespace __join_view { struct __fn : __range_adaptor_closure<__fn> { template<class _Range> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Range&& __range) const noexcept(noexcept(join_view<all_t<_Range&&>>(std::forward<_Range>(__range)))) -> decltype( join_view<all_t<_Range&&>>(std::forward<_Range>(__range)))"
  }
]