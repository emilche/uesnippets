[
  {
    "label": "_cef_focus_handler_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_focus_handler_t"
  },
  {
    "label": "_cef_browser_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_browser_t"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_FOCUS_HANDLER_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_FOCUS_HANDLER_CAPI_H_ # pragma once # include \" include / capi / cef_base_capi . h \" # include \" include / capi / cef_browser_capi . h \" # include \" include / capi / cef_dom_capi . h \" # include \" include / capi / cef_frame_capi . h \" # ifdef __cplusplus \" C \" { # endif typedef struct _cef_focus_handler_t { cef_base_ref_counted_t base ;)",
    "insertText": "void(CEF_CALLBACK* on_take_focus)(struct _cef_focus_handler_t* self, struct _cef_browser_t* browser, int next)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* on_set_focus)(struct _cef_focus_handler_t* self, struct _cef_browser_t* browser, cef_focus_source_t source)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* on_got_focus)(struct _cef_focus_handler_t* self, struct _cef_browser_t* browser)"
  }
]