[
  {
    "label": "FInstanceRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceRegistry"
  },
  {
    "label": "TChildEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TChildEntityInitializer"
  },
  {
    "label": "TStaticChildEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticChildEntityInitializer"
  },
  {
    "label": "TDuplicateChildEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDuplicateChildEntityInitializer"
  },
  {
    "label": "TConditionalDuplicateChildEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConditionalDuplicateChildEntityInitializer"
  },
  {
    "label": "FObjectFactoryBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectFactoryBatch"
  },
  {
    "label": "FBoundObjectTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoundObjectTask"
  },
  {
    "label": "FEntityMutationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityMutationData"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityRange . h \" # include \" EntitySystem / MovieSceneEntityFactory . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" EntitySystem / MovieSceneComponentRegistry . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneComponentAccessors . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" EntitySystem / MovieSceneEntitySystemDirectedGraph . h \" # include<type_traits> namespace UE { namespace MovieScene { struct FInstanceRegistry ; using FBoundObjectResolver =)",
    "insertText": "UObject(*)(UObject*)"
  },
  {
    "label": "TChildEntityInitializer()",
    "kind": "Method",
    "detail": "Function (template<ParentComponentType,ChildComponentType> struct TChildEntityInitializer : FChildEntityInitializer {)",
    "insertText": "TChildEntityInitializer(TComponentTypeID<ParentComponentType> InParentComponent, TComponentTypeID<ChildComponentType> InChildComponent) : FChildEntityInitializer(InParentComponent, InChildComponent)"
  },
  {
    "label": "GetParentComponent()",
    "kind": "Method",
    "detail": "Function (} TComponentTypeID<ParentComponentType>)",
    "insertText": "GetParentComponent()"
  },
  {
    "label": "GetChildComponent()",
    "kind": "Method",
    "detail": "Function (} TComponentTypeID<ChildComponentType>)",
    "insertText": "GetChildComponent()"
  },
  {
    "label": "GetParentComponents()",
    "kind": "Method",
    "detail": "Function (} TComponentLock<TRead<ParentComponentType>>)",
    "insertText": "GetParentComponents(const FEntityAllocation* Allocation)"
  },
  {
    "label": "GetChildComponents()",
    "kind": "Method",
    "detail": "Function (} TComponentLock<TWrite<ChildComponentType>>)",
    "insertText": "GetChildComponents(const FEntityAllocation* Allocation)"
  },
  {
    "label": "TStaticChildEntityInitializer()",
    "kind": "Method",
    "detail": "Function (} } ; template<ParentComponentType,ChildComponentType,InitializerType> struct TStaticChildEntityInitializer : TChildEntityInitializer<ParentComponentType,ChildComponentType> { InitializerType Callback ;)",
    "insertText": "TStaticChildEntityInitializer(TComponentTypeID<ParentComponentType> InParentComponent, TComponentTypeID<ChildComponentType> InChildComponent, InitializerType InCallback) : TChildEntityInitializer<ParentComponentType, ChildComponentType>(InParentComponent, InChildComponent) , Callback(InCallback)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run(const FEntityRange& ChildRange, const FEntityAllocation* ParentAllocation, TArrayView<const int32> ParentAllocationOffsets)"
  },
  {
    "label": "ReadComponents()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TRead<ParentComponentType>> ParentComponents = ParentAllocation ->)",
    "insertText": "ReadComponents(this->GetParentComponent())"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TWrite<ChildComponentType>> ChildComponents = ChildRange . Allocation ->)",
    "insertText": "WriteComponents(this->GetChildComponent(), FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (const int32 ParentIndex = ParentAllocationOffsets [ Index ] ; const int32 ChildIndex = ChildRange . ComponentStartOffset + Index ;)",
    "insertText": "Callback(ParentComponents[ParentIndex], ChildComponents[ChildIndex])"
  },
  {
    "label": "TDuplicateChildEntityInitializer()",
    "kind": "Method",
    "detail": "Function (} } } ; template<ComponentType> struct TDuplicateChildEntityInitializer : FChildEntityInitializer {)",
    "insertText": "TDuplicateChildEntityInitializer(TComponentTypeID<ComponentType> InComponent) : FChildEntityInitializer(InComponent, InComponent)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} TComponentTypeID<ComponentType>)",
    "insertText": "GetComponent()"
  },
  {
    "label": "ReadComponents()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TRead<ComponentType>> ParentComponents = ParentAllocation ->)",
    "insertText": "ReadComponents(GetComponent())"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TWrite<ComponentType>> ChildComponents = ChildRange . Allocation ->)",
    "insertText": "WriteComponents(GetComponent(), FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (TArrayView<ComponentType> ChildComponentSlice = ChildComponents .)",
    "insertText": "Slice(ChildRange.ComponentStartOffset, ChildRange.Num)"
  },
  {
    "label": "TConditionalDuplicateChildEntityInitializer()",
    "kind": "Method",
    "detail": "Function (ChildComponentSlice [ Index ] = ParentComponents [ ParentAllocationOffsets [ Index ] ] ; } } } ; template<ComponentType> struct TConditionalDuplicateChildEntityInitializer : TDuplicateChildEntityInitializer<ComponentType> {)",
    "insertText": "TConditionalDuplicateChildEntityInitializer(TComponentTypeID<ComponentType> InComponent, FComponentMask InParentComponentMask) : TDuplicateChildEntityInitializer<ComponentType>(InComponent) , ParentComponentMask(InParentComponentMask)"
  },
  {
    "label": "IsRelevant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRelevant(const FComponentMask& InParentType, const FComponentMask& InChildType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FComponentMask ParentComponentMask ; } ; struct FObjectFactoryBatch : FChildEntityFactory { void)",
    "insertText": "Add(int32 EntityIndex, UObject* BoundObject)"
  },
  {
    "label": "GenerateDerivedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDerivedType(FComponentMask& OutNewEntityType)"
  },
  {
    "label": "InitializeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllocation(UMovieSceneEntitySystemLinker* Linker, const FComponentMask& ParentType, const FComponentMask& ChildType, const FEntityAllocation* ParentAllocation, TArrayView<const int32> ParentAllocationOffsets, const FEntityRange& InChildEntityRange)"
  },
  {
    "label": "PostInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitialize(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "FBoundObjectTask()",
    "kind": "Method",
    "detail": "Function (TMap<TTuple<UObject*,FMovieSceneEntityID>,FMovieSceneEntityID>* StaleEntitiesToPreserve ; private : TSortedMap<FMovieSceneEntityID,FMovieSceneEntityID> PreservedEntities ; TArray<UObject*> ObjectsToAssign ; } ; struct FBoundObjectTask {)",
    "insertText": "FBoundObjectTask(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply()"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocation(FEntityAllocationProxy AllocationProxy, FReadEntityIDs EntityIDs, TRead<FInstanceHandle> Instances, TRead<FGuid> ObjectBindings, TReadOptional<FBoundObjectResolver> Resolvers)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask()"
  },
  {
    "label": "DuplicateChildComponent()",
    "kind": "Method",
    "detail": "Function (private : struct FEntityMutationData { FMovieSceneEntityID EntityID ; FComponentTypeID ComponentTypeID ; bool bAddComponent ; } ; TMap<TTuple<UObject*,FMovieSceneEntityID>,FMovieSceneEntityID> StaleEntitiesToPreserve ; TMap<FEntityAllocationProxy,FObjectFactoryBatch> Batches ; TArray<FMovieSceneEntityID> EntitiesToDiscard ; TArray<FEntityMutationData> EntityMutations ; protected : UMovieSceneEntitySystemLinker* Linker ; } ; template<ComponentType> void)",
    "insertText": "DuplicateChildComponent(TComponentTypeID<ComponentType> InComponent)"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineChildComponent(TDuplicateChildEntityInitializer<ComponentType>(InComponent))"
  },
  {
    "label": "ConditionallyDuplicateChildComponent()",
    "kind": "Method",
    "detail": "Function (} template<ComponentType> void)",
    "insertText": "ConditionallyDuplicateChildComponent(TComponentTypeID<ComponentType> InComponent, FComponentMask InParentComponentMask)"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineChildComponent(TConditionalDuplicateChildEntityInitializer<ComponentType>(InComponent, InParentComponentMask))"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (} template<ParentComponent,ChildComponent,InitializerCallback> void)",
    "insertText": "DefineChildComponent(TComponentTypeID<ParentComponent> InParentType, TComponentTypeID<ChildComponent> InChildType, InitializerCallback&& InInitializer)"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (using FInitializer = TStaticChildEntityInitializer<ParentComponent,ChildComponent,InitializerCallback> ;)",
    "insertText": "DefineChildComponent(InParentType, InChildType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildInitializers .)",
    "insertText": "Add(FInitializer(InParentType, InChildType, Forward<InitializerCallback>(InInitializer)))"
  },
  {
    "label": "MakeComponentTypeInfoWithoutComponentOps()",
    "kind": "Method",
    "detail": "Function (} template<T> FComponentTypeInfo)",
    "insertText": "MakeComponentTypeInfoWithoutComponentOps(const TCHAR* const DebugName, const FNewComponentTypeParams& Params)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 ComponentTypeSize =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (const uint32 Alignment =)",
    "insertText": "alignof(T)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (FComponentTypeInfo NewTypeInfo ; NewTypeInfo . Sizeof = ComponentTypeSize ; NewTypeInfo . Alignment = Alignment ; NewTypeInfo . bIsZeroConstructType = TIsZeroConstructType<T>::Value ; NewTypeInfo . bIsTriviallyDestructable = std::is_trivially_destructible_v<T> ; NewTypeInfo . bIsTriviallyCopyAssignable = TIsTriviallyCopyAssignable<T>::Value ; NewTypeInfo . bIsPreserved =)",
    "insertText": "EnumHasAnyFlags(Params.Flags, EComponentTypeFlags::Preserved)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . bIsCopiedToOutput =)",
    "insertText": "EnumHasAnyFlags(Params.Flags, EComponentTypeFlags::CopyToOutput)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . bIsMigratedToOutput =)",
    "insertText": "EnumHasAnyFlags(Params.Flags, EComponentTypeFlags::MigrateToOutput)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . bHasReferencedObjects = false ; # if UE_MOVIESCENE_ENTITY_DEBUG NewTypeInfo . DebugInfo = MakeUnique<TComponentTypeDebugInfo<)",
    "insertText": "T()"
  },
  {
    "label": "NewComponentType()",
    "kind": "Method",
    "detail": "Function (# endif return NewTypeInfo ; } template<T> TComponentTypeID<T>)",
    "insertText": "NewComponentType(const TCHAR* const DebugName, const FNewComponentTypeParams& Params)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FComponentTypeInfo NewTypeInfo = FComponentRegistry::MakeComponentTypeInfoWithoutComponentOps<)",
    "insertText": "T(DebugName, Params)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . bHasReferencedObjects = Params . ReferenceCollectionCallback ! = nullptr | | THasAddReferencedObjectForComponent<T>::Value ;)",
    "insertText": "if(Params.ReferenceCollectionCallback)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . MakeComplexComponentOps<)",
    "insertText": "T(Params.ReferenceCollectionCallback)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!NewTypeInfo.bIsZeroConstructType || !NewTypeInfo.bIsTriviallyDestructable || !NewTypeInfo.bIsTriviallyCopyAssignable || NewTypeInfo.bHasReferencedObjects)"
  },
  {
    "label": "NewComponentTypeInternal()",
    "kind": "Method",
    "detail": "Function (} FComponentTypeID NewTypeID =)",
    "insertText": "NewComponentTypeInternal(MoveTemp(NewTypeInfo))"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (Factories .)",
    "insertText": "DefineChildComponent(TDuplicateChildEntityInitializer<T>(TypedTypeID))"
  },
  {
    "label": "NewComponentTypeNoAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} return TypedTypeID ; } template<T> TComponentTypeID<T>)",
    "insertText": "NewComponentTypeNoAddReferencedObjects(const TCHAR* const DebugName, const FNewComponentTypeParams& Params)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewTypeInfo . bHasReferencedObjects = false ;)",
    "insertText": "if(!NewTypeInfo.bIsZeroConstructType || !NewTypeInfo.bIsTriviallyDestructable || !NewTypeInfo.bIsTriviallyCopyAssignable)"
  }
]