[
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "FGeometryCollectionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionPhysicsProxy"
  },
  {
    "label": "FRigidClustering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClustering"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FStrainModifierAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStrainModifierAccessor"
  },
  {
    "label": "FStrainedProxyModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStrainedProxyModifier"
  },
  {
    "label": "FStrainedProxyIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStrainedProxyIterator"
  },
  {
    "label": "FStrainedProxyRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStrainedProxyRange"
  },
  {
    "label": "EStrainTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStrainTypes"
  },
  {
    "label": "FStrainedProxyAndRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStrainedProxyAndRoot"
  },
  {
    "label": "CastToGeometryCollectionProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" ParticleHandleFwd . h \" class IPhysicsProxyBase ; class FGeometryCollectionPhysicsProxy ; namespace Chaos { class FRigidClustering ; class FClusterUnionPhysicsProxy ; class FStrainModifierAccessor ; class FStrainedProxyModifier ; class FStrainedProxyIterator ; class FStrainedProxyRange ; class FStrainModifierAccessor ; enum EStrainTypes : uint8 { InternalStrain = 1<<0,ExternalStrain = 1<<1,CollisionStrain = 1<<2 } ; struct FStrainedProxyAndRoot { FGeometryCollectionPhysicsProxy* Proxy = nullptr ; Chaos::FPBDRigidClusteredParticleHandle* ParticleHandle = nullptr ; bool bPartialDestruction = false ; FGeometryCollectionPhysicsProxy*)",
    "insertText": "CastToGeometryCollectionProxy()"
  },
  {
    "label": "IsPartialDestruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartialDestruction()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Chaos::FStrainedProxyAndRoot& Other)"
  },
  {
    "label": "FStrainedProxyModifier()",
    "kind": "Method",
    "detail": "Function (} ; class FStrainedProxyModifier { public :)",
    "insertText": "FStrainedProxyModifier(FRigidClustering& InRigidClustering, FStrainedProxyAndRoot InProxyAndRoot) : RigidClustering(InRigidClustering) , ProxyAndRoot(InProxyAndRoot) , RestChildren(InitRestChildren(InProxyAndRoot.CastToGeometryCollectionProxy()))"
  },
  {
    "label": "FStrainedProxyModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStrainedProxyModifier(const FStrainedProxyModifier& Other) : RigidClustering(Other.RigidClustering) , ProxyAndRoot(Other.ProxyAndRoot) , RestChildren(Other.RestChildren)"
  },
  {
    "label": "GetProxy()",
    "kind": "Method",
    "detail": "Function (} const IPhysicsProxyBase*)",
    "insertText": "GetProxy()"
  },
  {
    "label": "GetOriginalRootHandle()",
    "kind": "Method",
    "detail": "Function (const Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetOriginalRootHandle()"
  },
  {
    "label": "GetParticleHandle()",
    "kind": "Method",
    "detail": "Function (const Chaos::FPBDRigidParticleHandle*)",
    "insertText": "GetParticleHandle()"
  },
  {
    "label": "GetNumRestBreakables()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumRestBreakables()"
  },
  {
    "label": "GetNumBreakingStrains()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBreakingStrains(bool bDoubleCount = true, const uint8 StrainTypes = EStrainTypes::ExternalStrain | EStrainTypes::CollisionStrain)"
  },
  {
    "label": "GetMaxBreakStrainRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxBreakStrainRatio(const float FatigueThresholdPercent, const float FatigueThresholdMinimum, bool bRelative, const uint8 StrainTypes)"
  },
  {
    "label": "GetStrainUsedForBreakRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStrainUsedForBreakRatio(const float FatigueThresholdPercent, const float FatigueThresholdMinimum, bool bRelative, const uint8 StrainTypes)"
  },
  {
    "label": "ClearStrains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStrains()"
  },
  {
    "label": "AdjustStrainForBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustStrainForBreak(const float FatigueThresholdPercent, const float FatigueThresholdMinimum, const uint8 StrainTypes)"
  },
  {
    "label": "InitRestChildren()",
    "kind": "Method",
    "detail": "Function (private : const TSet<int32>*)",
    "insertText": "InitRestChildren(FGeometryCollectionPhysicsProxy* Proxy)"
  },
  {
    "label": "FStrainedProxyIterator()",
    "kind": "Method",
    "detail": "Function (FRigidClustering& RigidClustering ; FStrainedProxyAndRoot ProxyAndRoot ; const TSet<int32>* RestChildren ; } ; class FStrainedProxyIterator { public :)",
    "insertText": "FStrainedProxyIterator(FRigidClustering& InRigidClustering, TArray<FStrainedProxyAndRoot>& InProxyAndRoots, int32 InIndex) : RigidClustering(InRigidClustering) , ProxyAndRoots(InProxyAndRoots) , Index(InIndex)"
  },
  {
    "label": "FStrainedProxyIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStrainedProxyIterator(const FStrainedProxyIterator& Other) : RigidClustering(Other.RigidClustering) , ProxyAndRoots(Other.ProxyAndRoots) , Index(Other.Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStrainedProxyModifier)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FStrainedProxyIterator& Other)"
  },
  {
    "label": "FStrainedProxyRange()",
    "kind": "Method",
    "detail": "Function (} private : FRigidClustering& RigidClustering ; TArray<FStrainedProxyAndRoot>& ProxyAndRoots ; int32 Index ; } ; class FStrainedProxyRange { public :)",
    "insertText": "FStrainedProxyRange(Chaos::FRigidClustering& InRigidClustering, bool bRootLevelOnly, const TArray<FPBDRigidClusteredParticleHandle*>* InStrainedParticles)"
  },
  {
    "label": "FStrainedProxyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStrainedProxyRange(const FStrainedProxyRange& Other) : RigidClustering(Other.RigidClustering) , ProxyAndRoots(Other.ProxyAndRoots)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FStrainedProxyIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FStrainedProxyIterator)",
    "insertText": "end()"
  },
  {
    "label": "FStrainModifierAccessor()",
    "kind": "Method",
    "detail": "Function (} private : FRigidClustering& RigidClustering ; TArray<FStrainedProxyAndRoot> ProxyAndRoots ; const TArray<FPBDRigidClusteredParticleHandle*>* StrainedParticles ; } ; class FStrainModifierAccessor { public :)",
    "insertText": "FStrainModifierAccessor(FRigidClustering& InRigidClustering, const TArray<FPBDRigidClusteredParticleHandle*>* InStrainedParticles = nullptr) : RigidClustering(InRigidClustering) , StrainedParticles(InStrainedParticles)"
  },
  {
    "label": "GetStrainedProxies()",
    "kind": "Method",
    "detail": "Function (} FStrainedProxyRange)",
    "insertText": "GetStrainedProxies(bool bRootLevelOnly = true)"
  }
]