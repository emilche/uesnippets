[
  {
    "label": "FNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationConfig"
  },
  {
    "label": "FSlateAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleMessageHandler"
  },
  {
    "label": "IInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputInterface"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IPlatformTextField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformTextField"
  },
  {
    "label": "ISlateSoundDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateSoundDevice"
  },
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "IVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualKeyboardEntry"
  },
  {
    "label": "IWidgetReflector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetReflector"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FSlateVirtualUserHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateVirtualUserHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPopupSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupSupport"
  },
  {
    "label": "FClickSubscriber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClickSubscriber"
  },
  {
    "label": "ISlateInputManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateInputManager"
  },
  {
    "label": "FSlateDefaultInputMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDefaultInputMapping"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputPreprocessorRegistrationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputPreprocessorRegistrationKey"
  },
  {
    "label": "FInputPreprocessorRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputPreprocessorRegistration"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FGlobalTabmanager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalTabmanager"
  },
  {
    "label": "FStyleNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStyleNode"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FEventRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventRouter"
  },
  {
    "label": "FDrawWindowArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawWindowArgs"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "FStyleNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStyleNode"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "InputPreProcessorsHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputPreProcessorsHelper"
  },
  {
    "label": "SendNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNotifications( const FWidgetPath& WidgetsUnderCursor )"
  },
  {
    "label": "RegisterClickNotification()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterClickNotification(const TSharedRef<SWidget>& NotifyWhenClickedOutsideMe, const FOnClickedOutside& InNotification)"
  },
  {
    "label": "UnregisterClickNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterClickNotification(FDelegateHandle InHandle)"
  },
  {
    "label": "GetUserIndexForController()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetUserIndexForController(ControllerId)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "Create(const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "InitializeAsStandaloneApplication()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "InitializeAsStandaloneApplication(const TSharedRef< class FSlateRenderer >& PlatformRenderer)"
  },
  {
    "label": "InitializeAsStandaloneApplication()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "InitializeAsStandaloneApplication(const TSharedRef< class FSlateRenderer >& PlatformRenderer, const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "InitializeCoreStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCoreStyle()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(bool bShutdownPlatform = true)"
  },
  {
    "label": "GetGlobalTabManager()",
    "kind": "Method",
    "detail": "Function (FGlobalTabmanager>)",
    "insertText": "GetGlobalTabManager()"
  },
  {
    "label": "InitHighDPI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHighDPI(const bool bForceEnable)"
  },
  {
    "label": "InitializeRenderer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeRenderer( TSharedRef<FSlateRenderer> InRenderer, bool bQuietMode = false )"
  },
  {
    "label": "InitializeSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSound( const TSharedRef<ISlateSoundDevice>& InSlateSoundDevice )"
  },
  {
    "label": "OverridePlatformTextField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformTextField(TUniquePtr<IPlatformTextField> PlatformTextField)"
  },
  {
    "label": "UsePlatformCursorForCursorUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsePlatformCursorForCursorUser(bool bUsePlatformCursor)"
  },
  {
    "label": "SetPlatformCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformCursorVisibility(bool bNewVisibility)"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGameDeviceState()"
  },
  {
    "label": "FinishedInputThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedInputThisFrame()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(ESlateTickType TickType = ESlateTickType::All)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages()"
  },
  {
    "label": "AddModalWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModalWindow( TSharedRef<SWindow> InSlateWindow, const TSharedPtr<const SWidget> InParentWidget, bool bSlowTaskWindow = false )"
  },
  {
    "label": "SetModalWindowStackStartedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModalWindowStackStartedDelegate(FModalWindowStackStarted StackStartedDelegate)"
  },
  {
    "label": "SetModalWindowStackEndedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModalWindowStackEndedDelegate(FModalWindowStackEnded StackEndedDelegate)"
  },
  {
    "label": "AddWindowAsNativeChild()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "AddWindowAsNativeChild( TSharedRef<SWindow> InSlateWindow, TSharedRef<SWindow> InParentWindow, const bool bShowImmediately = true )"
  },
  {
    "label": "PushMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushMenu(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<SWidget>& InContent, const UE::Slate::FDeprecateVector2DParameter& SummonLocation, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately = true, const UE::Slate::FDeprecateVector2DParameter& SummonLocationSize = FVector2f::ZeroVector, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushHostedMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushHostedMenu(const TSharedRef<SWidget>& InParentWidget, const FWidgetPath& InOwnerPath, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushHostedMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushHostedMenu(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "DismissAllMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissAllMenus()"
  },
  {
    "label": "DismissMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissMenu(const TSharedPtr<IMenu>& InFromMenu)"
  },
  {
    "label": "DismissMenuByWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissMenuByWidget(const TSharedRef<SWidget>& InWidgetInMenu)"
  },
  {
    "label": "DestroyWindowImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowImmediately( TSharedRef<SWindow> WindowToDestroy )"
  },
  {
    "label": "ExternalModalStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalModalStart()"
  },
  {
    "label": "ExternalModalStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalModalStop()"
  },
  {
    "label": "InvalidateAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllViewports()"
  },
  {
    "label": "RegisterGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGameViewport( TSharedRef<SViewport> InViewport )"
  },
  {
    "label": "RegisterViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterViewport(TSharedRef<SViewport> InViewport)"
  },
  {
    "label": "UnregisterGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterGameViewport()"
  },
  {
    "label": "RegisterVirtualWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterVirtualWindow(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "UnregisterVirtualWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterVirtualWindow(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FlushRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderState()"
  },
  {
    "label": "SetUserFocusToGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserFocusToGameViewport(uint32 UserIndex, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetAllUserFocusToGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocusToGameViewport(EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ActivateGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameViewport()"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(uint32 UserIndex, const TSharedPtr<SWidget>& WidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocus(const TSharedPtr<SWidget>& WidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUserFocus(uint32 UserIndex, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllUserFocus(EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetKeyboardFocus(const TSharedPtr<SWidget>& OptionalWidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearKeyboardFocus(const EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ResetToDefaultInputSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaultInputSettings()"
  },
  {
    "label": "ResetToDefaultPointerInputSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaultPointerInputSettings()"
  },
  {
    "label": "ReleaseAllPointerCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllPointerCapture()"
  },
  {
    "label": "ReleaseMouseCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMouseCapture()"
  },
  {
    "label": "ReleaseAllPointerCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllPointerCapture(int32 UserIndex)"
  },
  {
    "label": "ReleaseMouseCaptureForUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMouseCaptureForUser(int32 UserIndex)"
  },
  {
    "label": "SetExitRequestedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExitRequestedHandler( const FSimpleDelegate& OnExitRequestedHandler )"
  },
  {
    "label": "SetWidgetReflector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetReflector( const TSharedRef<IWidgetReflector>& WidgetReflector )"
  },
  {
    "label": "CancelDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelDragDrop()"
  },
  {
    "label": "EnterDebuggingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterDebuggingMode()"
  },
  {
    "label": "LeaveDebuggingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveDebuggingMode( bool bLeavingDebugForSingleStep = false )"
  },
  {
    "label": "FScopedPreventDebuggingMode()",
    "kind": "Method",
    "detail": "Function (UE_NODISCARD_CTOR)",
    "insertText": "FScopedPreventDebuggingMode(FText Reason)"
  },
  {
    "label": "EnableMenuAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMenuAnimations( const bool bEnableAnimations )"
  },
  {
    "label": "SetPlatformApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformApplication(const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "OverridePlatformApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformApplication(TSharedPtr<class GenericApplication> InPlatformApplication)"
  },
  {
    "label": "SetAppIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAppIcon(const FSlateBrush* const InAppIcon)"
  },
  {
    "label": "ShowVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowVirtualKeyboard( bool bShow, int32 UserIndex, TSharedPtr<IVirtualKeyboardEntry> TextEntryWidget = nullptr )"
  },
  {
    "label": "AllowMoveCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMoveCursor()"
  },
  {
    "label": "ForceRedrawWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRedrawWindow( const TSharedRef<SWindow>& InWindowToDraw )"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeScreenshot(const TSharedRef<SWidget>& Widget, TArray<FColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeHDRScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeHDRScreenshot(const TSharedRef<SWidget>& Widget, TArray<FLinearColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeScreenshot(const TSharedRef<SWidget>& Widget, const FIntRect& InnerWidgetArea, TArray<FColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeHDRScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeHDRScreenshot(const TSharedRef<SWidget>& Widget, const FIntRect& InnerWidgetArea, TArray<FLinearColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateUser>)",
    "insertText": "GetUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "GetUserFromPlatformUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateUser>)",
    "insertText": "GetUserFromPlatformUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "FindOrCreateVirtualUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateVirtualUserHandle>)",
    "insertText": "FindOrCreateVirtualUser(int32 VirtualUserIndex)"
  },
  {
    "label": "UnregisterUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterUser(int32 UserIndex)"
  },
  {
    "label": "SetFixedDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedDeltaTime(double InSeconds)"
  },
  {
    "label": "RegisterNewUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "RegisterNewUser(int32 UserIndex, bool bIsVirtual = false)"
  },
  {
    "label": "RegisterNewUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "RegisterNewUser(FPlatformUserId PlatformUserId, bool bIsVirtual = false)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(int32 UserIndex)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(FPlatformUserId PlatformUserId)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(FInputDeviceId DeviceId)"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "DestroyRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderer()"
  },
  {
    "label": "TickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickTime()"
  },
  {
    "label": "TickPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPlatform(float DeltaTime)"
  },
  {
    "label": "TickAndDrawWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAndDrawWidgets(float DeltaTime)"
  },
  {
    "label": "DrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindows()"
  },
  {
    "label": "PrivateDrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrivateDrawWindows( TSharedPtr<SWindow> DrawOnlyThisWindow = nullptr )"
  },
  {
    "label": "DrawPrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPrepass( TSharedPtr<SWindow> DrawOnlyThisWindow )"
  },
  {
    "label": "DrawWindowAndChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindowAndChildren( const TSharedRef<SWindow>& WindowToDraw, struct FDrawWindowArgs& DrawWindowArgs )"
  },
  {
    "label": "GetAllVisibleChildWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVisibleChildWindows(TArray< TSharedRef<SWindow> >& OutWindows, TSharedRef<SWindow> CurrentWindow)"
  },
  {
    "label": "ThrottleApplicationBasedOnMouseMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrottleApplicationBasedOnMouseMovement()"
  },
  {
    "label": "SetupPhysicalSensitivities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPhysicalSensitivities()"
  },
  {
    "label": "ProcessMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseMoveEvent( const FPointerEvent& MouseEvent, bool bIsSynthetic = false )"
  },
  {
    "label": "ProcessMouseButtonDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonDownEvent(const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ProcessMouseButtonUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonUpEvent( const FPointerEvent& MouseEvent )"
  },
  {
    "label": "ProcessMouseButtonDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonDoubleClickEvent( const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "ProcessMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseWheelOrGestureEvent( const FPointerEvent& InWheelEvent, const FPointerEvent* InGestureEvent )"
  },
  {
    "label": "ProcessKeyCharEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyCharEvent( const FCharacterEvent& InCharacterEvent )"
  },
  {
    "label": "ProcessKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyDownEvent( const FKeyEvent& InKeyEvent )"
  },
  {
    "label": "ProcessKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyUpEvent( const FKeyEvent& InKeyEvent )"
  },
  {
    "label": "ProcessAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAnalogInputEvent(const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "ProcessDragEnterEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessDragEnterEvent( TSharedRef<SWindow> WindowEntered, const FDragDropEvent& DragDropEvent )"
  },
  {
    "label": "ProcessTouchStartedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchStartedEvent( const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InTouchEvent )"
  },
  {
    "label": "ProcessTouchMovedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchMovedEvent( const FPointerEvent& InTouchEvent )"
  },
  {
    "label": "ProcessTouchEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchEndedEvent( const FPointerEvent& InTouchEvent )"
  },
  {
    "label": "ProcessMotionDetectedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMotionDetectedEvent( const FMotionEvent& InMotionEvent )"
  },
  {
    "label": "ProcessWindowActivatedEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessWindowActivatedEvent( const FWindowActivateEvent& ActivateEvent )"
  },
  {
    "label": "ProcessApplicationActivationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessApplicationActivationEvent( bool InAppActivated )"
  },
  {
    "label": "SetNavigationConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationConfig(TSharedRef<FNavigationConfig> InNavigationConfig)"
  },
  {
    "label": "CloseAllWindowsImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllWindowsImmediately()"
  },
  {
    "label": "DestroyWindowsImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowsImmediately()"
  },
  {
    "label": "ProcessExternalReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExternalReply(const FWidgetPath& CurrentEventPath, const FReply TheReply, const int32 UserIndex = 0, const int32 PointerIndex = 10 /* todo: use the enum */)"
  },
  {
    "label": "ProcessReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReply(const FWidgetPath& CurrentEventPath, const FReply& TheReply, const FWidgetPath* WidgetsUnderMouse, const FPointerEvent* InMouseEvent, const uint32 UserIndex = 0)"
  },
  {
    "label": "QueryCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryCursor()"
  },
  {
    "label": "ProcessCursorReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCursorReply(const FCursorReply& CursorReply)"
  },
  {
    "label": "SpawnToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnToolTip( const TSharedRef<IToolTip>& InToolTip, const UE::Slate::FDeprecateVector2DParameter& InSpawnLocation )"
  },
  {
    "label": "CloseToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseToolTip()"
  },
  {
    "label": "UpdateToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToolTip( bool bAllowSpawningOfNewToolTips )"
  },
  {
    "label": "GetAllVisibleWindowsOrdered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVisibleWindowsOrdered(TArray< TSharedRef<SWindow> >& OutWindows)"
  },
  {
    "label": "SetGameIsFakingTouchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameIsFakingTouchEvents(const bool bIsFaking, FVector2D* CursorLocation = nullptr)"
  },
  {
    "label": "SetGameAllowsFakingTouchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameAllowsFakingTouchEvents(const bool bAllowFaking)"
  },
  {
    "label": "SetUnhandledKeyDownEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnhandledKeyDownEventHandler( const FOnKeyEvent& NewHandler )"
  },
  {
    "label": "SetUnhandledKeyUpEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnhandledKeyUpEventHandler(const FOnKeyEvent& NewHandler)"
  },
  {
    "label": "SetDragTriggerDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDragTriggerDistance( float ScreenPixels )"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const int32 Index)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const EInputPreProcessorType Type)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const FInputPreprocessorRegistrationKey& Info)"
  },
  {
    "label": "UnregisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor)"
  },
  {
    "label": "SetCursorRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorRadius(float NewRadius)"
  },
  {
    "label": "SetAllowTooltips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowTooltips(bool bCanShow)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragEnter( const TSharedRef< SWindow >& Window, const TSharedRef<FExternalDragOperation>& DragDropOperation )"
  },
  {
    "label": "RoutePointerDownEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RoutePointerDownEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "RoutePointerUpEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RoutePointerUpEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "RoutePointerMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RoutePointerMoveEvent( const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent, bool bIsSynthetic )"
  },
  {
    "label": "RoutePointerDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RoutePointerDoubleClickEvent( const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent )"
  },
  {
    "label": "RouteMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RouteMouseWheelOrGestureEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& InWheelEvent, const FPointerEvent* InGestureEvent = nullptr)"
  },
  {
    "label": "SetInputManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputManager(TSharedRef<ISlateInputManager> InputManager)"
  },
  {
    "label": "RegisterOnWindowActionNotification()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnWindowActionNotification(const FOnWindowAction& Notification)"
  },
  {
    "label": "UnregisterOnWindowActionNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnWindowActionNotification(FDelegateHandle Handle)"
  },
  {
    "label": "NavigateToWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToWidget(const uint32 UserIndex, const TSharedPtr<SWidget>& NavigationDestination, ENavigationSource NavigationSource = ENavigationSource::FocusedWidget)"
  },
  {
    "label": "NavigateFromWidgetUnderCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateFromWidgetUnderCursor(const uint32 InUserIndex, EUINavigation InNavigationType, TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FindBestParentWindowForDialogs()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindBestParentWindowForDialogs(const TSharedPtr<SWidget>& InWidget, const ESlateParentWindowSearchMethod InParentWindowSearchMethod = ESlateParentWindowSearchMethod::ActiveWindow)"
  },
  {
    "label": "PrivateDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrivateDestroyWindow( const TSharedRef<SWindow>& DestroyedWindow )"
  },
  {
    "label": "AttemptNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptNavigation(const FWidgetPath& NavigationSource, const FNavigationEvent& NavigationEvent, const FNavigationReply& NavigationReply, const FArrangedWidget& BoundaryWidget)"
  },
  {
    "label": "ExecuteNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteNavigation(const FWidgetPath& NavigationSource, TSharedPtr<SWidget> DestinationWidget, const uint32 UserIndex, bool bAlwaysHandleNavigationAttempt)"
  },
  {
    "label": "OnMenuDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuDestroyed(const TSharedRef<IMenu>& Menu)"
  },
  {
    "label": "FSlateApplication()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FSlateApplication()"
  },
  {
    "label": "SetLastUserInteractionTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastUserInteractionTime(const double InCurrentTime)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(FSlateUser& User, const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "OnVirtualDesktopSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVirtualDesktopSizeChanged(const FDisplayMetrics& NewDisplayMetric)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const float DeltaTime, FSlateApplication& SlateApp, TSharedRef<ICursor> Cursor)"
  },
  {
    "label": "HandleKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyDownEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyUpEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAnalogInputEvent(FSlateApplication& SlateApp, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "HandleMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseMoveEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonDownEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonUpEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonDoubleClickEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseWheelOrGestureEvent(FSlateApplication& SlateApp, const FPointerEvent& WheelEvent, const FPointerEvent* GestureEvent)"
  },
  {
    "label": "HandleMotionDetectedEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMotionDetectedEvent(FSlateApplication& SlateApp, const FMotionEvent& MotionEvent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(const FInputPreprocessorRegistration& Registration)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(TSharedPtr<IInputProcessor> InputProcessor)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(const FInputPreprocessorRegistration& Registration)"
  }
]