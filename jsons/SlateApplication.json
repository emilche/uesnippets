[
  {
    "label": "FNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationConfig"
  },
  {
    "label": "FSlateAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleMessageHandler"
  },
  {
    "label": "IInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputInterface"
  },
  {
    "label": "IInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputProcessor"
  },
  {
    "label": "IPlatformTextField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformTextField"
  },
  {
    "label": "ISlateSoundDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateSoundDevice"
  },
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "IVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualKeyboardEntry"
  },
  {
    "label": "IWidgetReflector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetReflector"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FSlateVirtualUserHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateVirtualUserHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPopupSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPopupSupport"
  },
  {
    "label": "FClickSubscriber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClickSubscriber"
  },
  {
    "label": "ISlateInputManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateInputManager"
  },
  {
    "label": "FSlateDefaultInputMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDefaultInputMapping"
  },
  {
    "label": "FInputPreprocessorRegistrationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputPreprocessorRegistrationKey"
  },
  {
    "label": "FInputPreprocessorRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputPreprocessorRegistration"
  },
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "FGlobalTabmanager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalTabmanager"
  },
  {
    "label": "FStyleNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStyleNode"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "FEventRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventRouter"
  },
  {
    "label": "FDrawWindowArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawWindowArgs"
  },
  {
    "label": "InputPreProcessorsHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputPreProcessorsHelper"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . h \" # include \" HAL / IConsoleManager . h \" # include \" Framework / Application / IMenu . h \" # include \" Layout / Visibility . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" Styling / SlateColor . h \" # include \" Layout / SlateRect . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" GenericPlatform / GenericPlatformInputDeviceMapper . h \" # include \" Input / Events . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SWindow . h \" # include \" Application / SlateWindowHelper . h \" # include \" Rendering / SlateRenderer . h \" # include \" Application / SlateApplicationBase . h \" # include \" Application / ThrottleManager . h \" # include \" Widgets / IToolTip . h \" # include \" Layout / WidgetPath . h \" # include \" Framework / Application / MenuStack . h \" # include \" Framework / SlateDelegates . h \" # include \" Framework / Application / GestureDetector . h \" # include \" SlateApplication . generated . h \" class FNavigationConfig ; # if WITH_ACCESSIBILITY class FSlateAccessibleMessageHandler ; # endif class IInputInterface ; class IInputProcessor ; class IPlatformTextField ; class ISlateSoundDevice ; class ITextInputMethodSystem ; class IVirtualKeyboardEntry ; class IWidgetReflector ; class SNotificationItem ; class SViewport ; class FSlateUser ; class FSlateVirtualUserHandle ; enum class ESlateDebuggingInputEvent : uint8 ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FQueryAccessSourceCode)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FModalWindowStackStarted) DECLARE_DELEGATE(FModalWindowStackEnded) DECLARE_DELEGATE_RetVal_TwoParams(bool, FOnWindowAction, const TSharedRef<FGenericWindow>&, EWindowAction::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FDragDropCheckingOverride)"
  },
  {
    "label": "SendNotifications()",
    "kind": "Method",
    "detail": "Function (class FPopupSupport { public : void)",
    "insertText": "SendNotifications(const FWidgetPath& WidgetsUnderCursor)"
  },
  {
    "label": "RegisterClickNotification()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterClickNotification(const TSharedRef<SWidget>& NotifyWhenClickedOutsideMe, const FOnClickedOutside& InNotification)"
  },
  {
    "label": "UnregisterClickNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterClickNotification(FDelegateHandle InHandle)"
  },
  {
    "label": "FClickSubscriber()",
    "kind": "Method",
    "detail": "Function (private : struct FClickSubscriber {)",
    "insertText": "FClickSubscriber(const TSharedRef<SWidget>& DetectClicksOutsideThisWidget, const FOnClickedOutside& InNotification ) : DetectClicksOutsideMe( DetectClicksOutsideThisWidget ) , Notification( InNotification)"
  },
  {
    "label": "ShouldKeep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldKeep()"
  },
  {
    "label": "GetUserIndexForMouse()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SWidget> DetectClicksOutsideMe ; FOnClickedOutside Notification ; } ; TArray<FClickSubscriber> ClickZoneNotifications ; } ; class ISlateInputManager { public : int32)",
    "insertText": "GetUserIndexForMouse()"
  },
  {
    "label": "GetUserIndexForKeyboard()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUserIndexForKeyboard()"
  },
  {
    "label": "GetInputDeviceIdForMouse()",
    "kind": "Method",
    "detail": "Function (FInputDeviceId)",
    "insertText": "GetInputDeviceIdForMouse()"
  },
  {
    "label": "GetInputDeviceIdForKeyboard()",
    "kind": "Method",
    "detail": "Function (FInputDeviceId)",
    "insertText": "GetInputDeviceIdForKeyboard()"
  },
  {
    "label": "GetUserIndexForInputDevice()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetUserIndexForInputDevice(FInputDeviceId InputDeviceId)"
  },
  {
    "label": "GetUserIndexForPlatformUser()",
    "kind": "Method",
    "detail": "Function (} TOptional<int32>)",
    "insertText": "GetUserIndexForPlatformUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "GetUserIndexForController()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUserIndexForController(int32 ControllerId)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ESlateTickType : uint8 { Time = 1<<0,PlatformAndInput = 1<<1,Widgets = 1<<2,TimeAndWidgets = Time | Widgets,All = Time | PlatformAndInput | Widgets,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESlateTickType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Overlay = 0,PreEngine,Engine,PreEditor,Editor,PreGame,Game,Count } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(Config)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInputPreprocessorRegistrationKey& Other)"
  },
  {
    "label": "GetAverageDeltaTime()",
    "kind": "Method",
    "detail": "Function (public : const float)",
    "insertText": "GetAverageDeltaTime()"
  },
  {
    "label": "GetAverageDeltaTimeForResponsiveness()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAverageDeltaTimeForResponsiveness()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "Create(const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "InitializeAsStandaloneApplication()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "InitializeAsStandaloneApplication(const TSharedRef< class FSlateRenderer >& PlatformRenderer)"
  },
  {
    "label": "InitializeAsStandaloneApplication()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateApplication>)",
    "insertText": "InitializeAsStandaloneApplication(const TSharedRef< class FSlateRenderer >& PlatformRenderer, const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "InitializeCoreStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCoreStyle()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FSlateApplication&)",
    "insertText": "Get()"
  },
  {
    "label": "GetGlobalTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FGlobalTabmanager>)",
    "insertText": "GetGlobalTabManager()"
  },
  {
    "label": "InitHighDPI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHighDPI(const bool bForceEnable)"
  },
  {
    "label": "GetRootStyle()",
    "kind": "Method",
    "detail": "Function (const class FStyleNode*)",
    "insertText": "GetRootStyle()"
  },
  {
    "label": "InitializeRenderer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeRenderer(TSharedRef<FSlateRenderer> InRenderer, bool bQuietMode = false)"
  },
  {
    "label": "InitializeSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSound(const TSharedRef<ISlateSoundDevice>& InSlateSoundDevice)"
  },
  {
    "label": "PlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound(const FSlateSound& SoundToPlay, int32 UserIndex = 0)"
  },
  {
    "label": "GetSoundDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSoundDuration(const FSlateSound& Sound)"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "SupportsSystemHelp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsSystemHelp()"
  },
  {
    "label": "ShowSystemHelp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowSystemHelp()"
  },
  {
    "label": "GetTextInputMethodSystem()",
    "kind": "Method",
    "detail": "Function (} ITextInputMethodSystem*)",
    "insertText": "GetTextInputMethodSystem()"
  },
  {
    "label": "SetCursorPos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCursorPos(const FVector2D& MouseCoordinate)"
  },
  {
    "label": "OverridePlatformTextField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformTextField(TUniquePtr<IPlatformTextField> PlatformTextField)"
  },
  {
    "label": "UsePlatformCursorForCursorUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsePlatformCursorForCursorUser(bool bUsePlatformCursor)"
  },
  {
    "label": "SetPlatformCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformCursorVisibility(bool bNewVisibility)"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGameDeviceState()"
  },
  {
    "label": "FinishedInputThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedInputThisFrame()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(ESlateTickType TickType = ESlateTickType::All)"
  },
  {
    "label": "IsTicking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTicking()"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages()"
  },
  {
    "label": "CanAddModalWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddModalWindow()"
  },
  {
    "label": "CanDisplayWindows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDisplayWindows()"
  },
  {
    "label": "GetNavigationDirectionFromKey()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetNavigationDirectionFromAnalog()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromAnalog(const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "GetNavigationActionFromKey()",
    "kind": "Method",
    "detail": "Function (EUINavigationAction)",
    "insertText": "GetNavigationActionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "AddModalWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModalWindow(TSharedRef<SWindow> InSlateWindow, const TSharedPtr<const SWidget> InParentWidget, bool bSlowTaskWindow = false)"
  },
  {
    "label": "SetModalWindowStackStartedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModalWindowStackStartedDelegate(FModalWindowStackStarted StackStartedDelegate)"
  },
  {
    "label": "SetModalWindowStackEndedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModalWindowStackEndedDelegate(FModalWindowStackEnded StackEndedDelegate)"
  },
  {
    "label": "AddWindowAsNativeChild()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "AddWindowAsNativeChild(TSharedRef<SWindow> InSlateWindow, TSharedRef<SWindow> InParentWindow, const bool bShowImmediately = true)"
  },
  {
    "label": "PushMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushMenu(const TSharedRef<SWidget>& InParentWidget, const FWidgetPath& InOwnerPath, const TSharedRef<SWidget>& InContent, const UE::Slate::FDeprecateVector2DParameter& SummonLocation, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately = true, const UE::Slate::FDeprecateVector2DParameter& SummonLocationSize = FVector2f::ZeroVector, TOptional<EPopupMethod> Method = TOptional<EPopupMethod>(), const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushMenu(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<SWidget>& InContent, const UE::Slate::FDeprecateVector2DParameter& SummonLocation, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately = true, const UE::Slate::FDeprecateVector2DParameter& SummonLocationSize = FVector2f::ZeroVector, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushHostedMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushHostedMenu(const TSharedRef<SWidget>& InParentWidget, const FWidgetPath& InOwnerPath, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushHostedMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "PushHostedMenu(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "HasOpenSubMenus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOpenSubMenus(TSharedPtr<IMenu> InMenu)"
  },
  {
    "label": "AnyMenusVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyMenusVisible()"
  },
  {
    "label": "FindMenuInWidgetPath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "FindMenuInWidgetPath(const FWidgetPath& InWidgetPath)"
  },
  {
    "label": "GetVisibleMenuWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetVisibleMenuWindow()"
  },
  {
    "label": "GetMenuHostWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetMenuHostWidget()"
  },
  {
    "label": "DismissAllMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissAllMenus()"
  },
  {
    "label": "DismissMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissMenu(const TSharedPtr<IMenu>& InFromMenu)"
  },
  {
    "label": "DismissMenuByWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissMenuByWidget(const TSharedRef<SWidget>& InWidgetInMenu)"
  },
  {
    "label": "DestroyWindowImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowImmediately(TSharedRef<SWindow> WindowToDestroy)"
  },
  {
    "label": "ExternalModalStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalModalStart()"
  },
  {
    "label": "ExternalModalStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalModalStop()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSlateApplication, FSlateTickEvent, float)"
  },
  {
    "label": "OnPreTick()",
    "kind": "Method",
    "detail": "Function (FSlateTickEvent&)",
    "insertText": "OnPreTick()"
  },
  {
    "label": "OnUserRegistered()",
    "kind": "Method",
    "detail": "Function (FUserRegisteredEvent&)",
    "insertText": "OnUserRegistered()"
  },
  {
    "label": "OnWindowBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (FOnWindowBeingDestroyed&)",
    "insertText": "OnWindowBeingDestroyed()"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (FOnFocusChanging&)",
    "insertText": "OnFocusChanging()"
  },
  {
    "label": "RegisterGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGameViewport(TSharedRef<SViewport> InViewport)"
  },
  {
    "label": "RegisterViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterViewport(TSharedRef<SViewport> InViewport)"
  },
  {
    "label": "GetGameViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SViewport>)",
    "insertText": "GetGameViewport()"
  },
  {
    "label": "UnregisterGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterGameViewport()"
  },
  {
    "label": "RegisterVirtualWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterVirtualWindow(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "UnregisterVirtualWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterVirtualWindow(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FlushRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderState()"
  },
  {
    "label": "SetUserFocusToGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserFocusToGameViewport(uint32 UserIndex, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetAllUserFocusToGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocusToGameViewport(EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ActivateGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameViewport()"
  },
  {
    "label": "GetTransformFullscreenMouseInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTransformFullscreenMouseInput()"
  },
  {
    "label": "TryDumpNavigationConfig()",
    "kind": "Method",
    "detail": "Function (# if WITH_SLATE_DEBUGGING void)",
    "insertText": "TryDumpNavigationConfig(TSharedPtr<FNavigationConfig> InNavigationConfig)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "SetUserFocus(uint32 UserIndex, const TSharedPtr<SWidget>& WidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocus(const TSharedPtr<SWidget>& WidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUserFocus(uint32 UserIndex, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllUserFocus(EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetKeyboardFocus(const TSharedPtr<SWidget>& OptionalWidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearKeyboardFocus(const EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_EVENT_OneParam(FSlateApplication, FOnApplicationPreInputKeyDownListener, const FKeyEvent&)"
  },
  {
    "label": "OnApplicationPreInputKeyDownListener()",
    "kind": "Method",
    "detail": "Function (FOnApplicationPreInputKeyDownListener&)",
    "insertText": "OnApplicationPreInputKeyDownListener()"
  },
  {
    "label": "OnApplicationMousePreInputButtonDownListener()",
    "kind": "Method",
    "detail": "Function (FOnApplicationMousePreInputButtonDownListener&)",
    "insertText": "OnApplicationMousePreInputButtonDownListener()"
  },
  {
    "label": "OnWindowDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (FOnWindowDPIScaleChanged&)",
    "insertText": "OnWindowDPIScaleChanged()"
  },
  {
    "label": "ResetToDefaultInputSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaultInputSettings()"
  },
  {
    "label": "ResetToDefaultPointerInputSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefaultPointerInputSettings()"
  },
  {
    "label": "SetHandleDeviceInputWhenApplicationNotActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandleDeviceInputWhenApplicationNotActive(bool bAllow)"
  },
  {
    "label": "GetHandleDeviceInputWhenApplicationNotActive()",
    "kind": "Method",
    "detail": "Function (bHandleDeviceInputWhenApplicationNotActive = bAllow ; } bool)",
    "insertText": "GetHandleDeviceInputWhenApplicationNotActive()"
  },
  {
    "label": "ReleaseAllPointerCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllPointerCapture()"
  },
  {
    "label": "ReleaseAllPointerCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllPointerCapture(int32 UserIndex)"
  },
  {
    "label": "GetActiveModalWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetActiveModalWindow()"
  },
  {
    "label": "SetExitRequestedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExitRequestedHandler(const FSimpleDelegate& OnExitRequestedHandler)"
  },
  {
    "label": "GeneratePathToWidgetUnchecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePathToWidgetUnchecked(TSharedRef<const SWidget> InWidget, FWidgetPath& OutWidgetPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "GeneratePathToWidgetChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePathToWidgetChecked(TSharedRef<const SWidget> InWidget, FWidgetPath& OutWidgetPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "FindWidgetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindWidgetWindow(TSharedRef<const SWidget> InWidget)"
  },
  {
    "label": "IsUsingHighPrecisionMouseMovment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHighPrecisionMouseMovment()"
  },
  {
    "label": "IsUsingTrackpad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingTrackpad()"
  },
  {
    "label": "IsMouseAttached()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMouseAttached()"
  },
  {
    "label": "IsGamepadAttached()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGamepadAttached()"
  },
  {
    "label": "SetWidgetReflector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWidgetReflector(const TSharedRef<IWidgetReflector>& WidgetReflector)"
  },
  {
    "label": "SetWidgetReflectorSourceAccessDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetReflectorSourceAccessDelegate(FAccessSourceCode AccessDelegate)"
  },
  {
    "label": "SetWidgetReflectorQuerySourceAccessDelegate()",
    "kind": "Method",
    "detail": "Function (SourceCodeAccessDelegate = AccessDelegate ; } void)",
    "insertText": "SetWidgetReflectorQuerySourceAccessDelegate(FQueryAccessSourceCode QueryAccessDelegate)"
  },
  {
    "label": "SetWidgetReflectorAssetAccessDelegate()",
    "kind": "Method",
    "detail": "Function (QuerySourceCodeAccessDelegate = QueryAccessDelegate ; } void)",
    "insertText": "SetWidgetReflectorAssetAccessDelegate(FAccessAsset AccessDelegate)"
  },
  {
    "label": "SetApplicationScale()",
    "kind": "Method",
    "detail": "Function (AssetAccessDelegate = AccessDelegate ; } void)",
    "insertText": "SetApplicationScale(float InScale)"
  },
  {
    "label": "GetInitialDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (Scale = InScale ; } void)",
    "insertText": "GetInitialDisplayMetrics(FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetInitialDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (PlatformApplication ->)",
    "insertText": "GetInitialDisplayMetrics(OutDisplayMetrics)"
  },
  {
    "label": "IsDragDropping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDragDropping()"
  },
  {
    "label": "IsDragDroppingAffected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragDroppingAffected(const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "GetDragDroppingContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FDragDropOperation>)",
    "insertText": "GetDragDroppingContent()"
  },
  {
    "label": "CancelDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelDragDrop()"
  },
  {
    "label": "GetNormalExecutionAttribute()",
    "kind": "Method",
    "detail": "Function (const TAttribute<bool>&)",
    "insertText": "GetNormalExecutionAttribute()"
  },
  {
    "label": "LeaveDebuggingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveDebuggingMode(bool bLeavingDebugForSingleStep = false)"
  },
  {
    "label": "FScopedPreventDebuggingMode()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FScopedPreventDebuggingMode { UE_NODISCARD_CTOR)",
    "insertText": "FScopedPreventDebuggingMode(FText Reason)"
  },
  {
    "label": "FScopedPreventDebuggingMode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedPreventDebuggingMode()"
  },
  {
    "label": "CalculatePopupWindowPosition()",
    "kind": "Method",
    "detail": "Function (private : int32 Id ; } ; # endif UE::Slate::FDeprecateVector2DResult)",
    "insertText": "CalculatePopupWindowPosition(const FSlateRect& InAnchor, const UE::Slate::FDeprecateVector2DParameter& InSize, bool bAutoAdjustForDPIScale = true, const UE::Slate::FDeprecateVector2DParameter& InProposedPlacement = FVector2f::ZeroVector, const EOrientation Orientation = Orient_Vertical)"
  },
  {
    "label": "CalculateTooltipWindowPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "CalculateTooltipWindowPosition(const FSlateRect& InAnchorRect, const UE::Slate::FDeprecateVector2DParameter& InSize, bool bAutoAdjustForDPIScale)"
  },
  {
    "label": "IsWindowInDestroyQueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowInDestroyQueue(TSharedRef<SWindow> Window)"
  },
  {
    "label": "IsRunningAtTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningAtTargetFrameRate()"
  },
  {
    "label": "AreMenuAnimationsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMenuAnimationsEnabled()"
  },
  {
    "label": "SetPlatformApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformApplication(const TSharedRef<class GenericApplication>& InPlatformApplication)"
  },
  {
    "label": "OverridePlatformApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformApplication(TSharedPtr<class GenericApplication> InPlatformApplication)"
  },
  {
    "label": "ExternalUIChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalUIChange(bool bIsOpening)"
  },
  {
    "label": "ShowVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (bIsExternalUIOpened = bIsOpening ; } void)",
    "insertText": "ShowVirtualKeyboard(bool bShow, int32 UserIndex, TSharedPtr<IVirtualKeyboardEntry> TextEntryWidget = nullptr)"
  },
  {
    "label": "AllowMoveCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMoveCursor()"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetWorkArea(const FSlateRect& InRect)"
  },
  {
    "label": "NativeApp_ShowKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeApp_ShowKeyboard(bool bShow, FString InitialString = \"\", int32 SelectionStart = -1, int32 SelectionEnd = -1)"
  },
  {
    "label": "SupportsSourceAccess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsSourceAccess()"
  },
  {
    "label": "GotoLineInSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoLineInSource(const FString& FileName, int32 LineNumber)"
  },
  {
    "label": "GetPopupSupport()",
    "kind": "Method",
    "detail": "Function (FPopupSupport&)",
    "insertText": "GetPopupSupport()"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeScreenshot(const TSharedRef<SWidget>& Widget, TArray<FColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeHDRScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeHDRScreenshot(const TSharedRef<SWidget>& Widget, TArray<FLinearColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeScreenshot(const TSharedRef<SWidget>& Widget, const FIntRect& InnerWidgetArea, TArray<FColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "TakeHDRScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeHDRScreenshot(const TSharedRef<SWidget>& Widget, const FIntRect& InnerWidgetArea, TArray<FLinearColor>& OutColorData, FIntVector& OutSize)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSlateUser>)",
    "insertText": "GetUser(int32 UserIndex)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSlateUser>)",
    "insertText": "GetUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSlateUser>)",
    "insertText": "GetUser(const FInputEvent& InputEvent)"
  },
  {
    "label": "GetUserFromControllerId()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSlateUser>)",
    "insertText": "GetUserFromControllerId(int32 ControllerId)"
  },
  {
    "label": "GetUserIndexForController()",
    "kind": "Method",
    "detail": "Function (TOptional<int32> UserIndex =)",
    "insertText": "GetUserIndexForController(ControllerId)"
  },
  {
    "label": "GetUserFromPlatformUser()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<FSlateUser>)",
    "insertText": "GetUserFromPlatformUser(FPlatformUserId PlatformUser)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FSlateUser> SlateUser =)",
    "insertText": "GetUser(CursorUserIndex)"
  },
  {
    "label": "UnregisterUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterUser(int32 UserIndex)"
  },
  {
    "label": "ForEachUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachUser(TFunctionRef<void(FSlateUser&)> InPredicate, bool bIncludeVirtualUsers = false)"
  },
  {
    "label": "RegisterNewUser()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FSlateUser>)",
    "insertText": "RegisterNewUser(int32 UserIndex, bool bIsVirtual = false)"
  },
  {
    "label": "RegisterNewUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "RegisterNewUser(FPlatformUserId PlatformUserId, bool bIsVirtual = false)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(int32 UserIndex)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(FPlatformUserId PlatformUserId)"
  },
  {
    "label": "GetOrCreateUser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "GetOrCreateUser(FInputDeviceId DeviceId)"
  },
  {
    "label": "TransformPointerEvent()",
    "kind": "Method",
    "detail": "Function (} class FEventRouter ; FPointerEvent)",
    "insertText": "TransformPointerEvent(const FPointerEvent& PointerEvent, const TSharedPtr<SWindow>& Window)"
  },
  {
    "label": "DoesWidgetHaveMouseCaptureByUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveMouseCaptureByUser(const TSharedPtr<const SWidget> Widget, int32 UserIndex, TOptional<int32> PointerIndex)"
  },
  {
    "label": "DoesWidgetHaveMouseCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveMouseCapture(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "HasUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasUserFocus(const TSharedPtr<const SWidget> Widget, int32 UserIndex)"
  },
  {
    "label": "HasAnyUserFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasAnyUserFocus(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetDirectlyHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDirectlyHovered(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "ShowUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUserFocus(const TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "GetRelevantNavConfig()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FNavigationConfig>)",
    "insertText": "GetRelevantNavConfig(int32 UserIndex)"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "DestroyRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderer()"
  },
  {
    "label": "TickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickTime()"
  },
  {
    "label": "TickPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPlatform(float DeltaTime)"
  },
  {
    "label": "TickAndDrawWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAndDrawWidgets(float DeltaTime)"
  },
  {
    "label": "DrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindows()"
  },
  {
    "label": "PrivateDrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrivateDrawWindows(TSharedPtr<SWindow> DrawOnlyThisWindow = nullptr)"
  },
  {
    "label": "DrawPrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPrepass(TSharedPtr<SWindow> DrawOnlyThisWindow)"
  },
  {
    "label": "DrawWindowAndChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindowAndChildren(const TSharedRef<SWindow>& WindowToDraw, struct FDrawWindowArgs& DrawWindowArgs)"
  },
  {
    "label": "GetAllVisibleChildWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVisibleChildWindows(TArray< TSharedRef<SWindow> >& OutWindows, TSharedRef<SWindow> CurrentWindow)"
  },
  {
    "label": "ThrottleApplicationBasedOnMouseMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrottleApplicationBasedOnMouseMovement()"
  },
  {
    "label": "LocateWidgetInWindow()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "LocateWidgetInWindow(UE::Slate::FDeprecateVector2DParameter ScreenspaceMouseCoordinate, const TSharedRef<SWindow>& Window, bool bIgnoreEnabledStatus, int32 UserIndex)"
  },
  {
    "label": "SetupPhysicalSensitivities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPhysicalSensitivities()"
  },
  {
    "label": "ProcessMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ProcessMouseMoveEvent(const FPointerEvent& MouseEvent, bool bIsSynthetic = false)"
  },
  {
    "label": "ProcessMouseButtonDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonDownEvent(const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ProcessMouseButtonUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonUpEvent(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ProcessMouseButtonDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseButtonDoubleClickEvent(const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ProcessMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMouseWheelOrGestureEvent(const FPointerEvent& InWheelEvent, const FPointerEvent* InGestureEvent)"
  },
  {
    "label": "ProcessKeyCharEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyCharEvent(const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "ProcessKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyDownEvent(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "ProcessKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyUpEvent(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "ProcessAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAnalogInputEvent(const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "ProcessDragEnterEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessDragEnterEvent(TSharedRef<SWindow> WindowEntered, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "ProcessTouchStartedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchStartedEvent(const TSharedPtr< FGenericWindow >& PlatformWindow, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "ProcessTouchMovedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchMovedEvent(const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "ProcessTouchEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTouchEndedEvent(const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "ProcessMotionDetectedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMotionDetectedEvent(const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "ProcessWindowActivatedEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessWindowActivatedEvent(const FWindowActivateEvent& ActivateEvent)"
  },
  {
    "label": "ProcessApplicationActivationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessApplicationActivationEvent(bool InAppActivated)"
  },
  {
    "label": "IsProcessingInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessingInput()"
  },
  {
    "label": "CloseAllWindowsImmediately()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "CloseAllWindowsImmediately()"
  },
  {
    "label": "DestroyWindowsImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowsImmediately()"
  },
  {
    "label": "ProcessExternalReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExternalReply(const FWidgetPath& CurrentEventPath, const FReply TheReply, const int32 UserIndex = 0, const int32 PointerIndex = 10)"
  },
  {
    "label": "ProcessReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReply(const FWidgetPath& CurrentEventPath, const FReply& TheReply, const FWidgetPath* WidgetsUnderMouse, const FPointerEvent* InMouseEvent, const uint32 UserIndex = 0)"
  },
  {
    "label": "QueryCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryCursor()"
  },
  {
    "label": "ProcessCursorReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCursorReply(const FCursorReply& CursorReply)"
  },
  {
    "label": "SpawnToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnToolTip(const TSharedRef<IToolTip>& InToolTip, const UE::Slate::FDeprecateVector2DParameter& InSpawnLocation)"
  },
  {
    "label": "CloseToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseToolTip()"
  },
  {
    "label": "UpdateToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToolTip(bool bAllowSpawningOfNewToolTips)"
  },
  {
    "label": "GetInteractiveTopLevelWindows()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SWindow>>)",
    "insertText": "GetInteractiveTopLevelWindows()"
  },
  {
    "label": "GetAllVisibleWindowsOrdered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVisibleWindowsOrdered(TArray< TSharedRef<SWindow> >& OutWindows)"
  },
  {
    "label": "IsFakingTouchEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFakingTouchEvents()"
  },
  {
    "label": "SetGameIsFakingTouchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameIsFakingTouchEvents(const bool bIsFaking, FVector2D* CursorLocation = nullptr)"
  },
  {
    "label": "SetGameAllowsFakingTouchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameAllowsFakingTouchEvents(const bool bAllowFaking)"
  },
  {
    "label": "SetUnhandledKeyDownEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnhandledKeyDownEventHandler(const FOnKeyEvent& NewHandler)"
  },
  {
    "label": "SetUnhandledKeyUpEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnhandledKeyUpEventHandler(const FOnKeyEvent& NewHandler)"
  },
  {
    "label": "GetLastUserInteractionTimeUpdateEvent()",
    "kind": "Method",
    "detail": "Function (FSlateLastUserInteractionTimeUpdateEvent&)",
    "insertText": "GetLastUserInteractionTimeUpdateEvent()"
  },
  {
    "label": "GetDragTriggerDistanceSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDragTriggerDistanceSquared()"
  },
  {
    "label": "HasTraveledFarEnoughToTriggerDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTraveledFarEnoughToTriggerDrag(const FPointerEvent& PointerEvent, const UE::Slate::FDeprecateVector2DParameter ScreenSpaceOrigin)"
  },
  {
    "label": "HasTraveledFarEnoughToTriggerDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTraveledFarEnoughToTriggerDrag(const FPointerEvent& PointerEvent, const UE::Slate::FDeprecateVector2DParameter ScreenSpaceOrigin, EOrientation Orientation)"
  },
  {
    "label": "SetDragTriggerDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDragTriggerDistance(float ScreenPixels)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const int32 Index)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const EInputPreProcessorType Type)"
  },
  {
    "label": "RegisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const FInputPreprocessorRegistrationKey& Info)"
  },
  {
    "label": "UnregisterInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor)"
  },
  {
    "label": "FindInputPreProcessor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindInputPreProcessor(TSharedPtr<class IInputProcessor> InputProcessor, const EInputPreProcessorType& Type)"
  },
  {
    "label": "SetCursorRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorRadius(float NewRadius)"
  },
  {
    "label": "GetCursorRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCursorRadius()"
  },
  {
    "label": "SetAllowTooltips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowTooltips(bool bCanShow)"
  },
  {
    "label": "GetAllowTooltips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowTooltips()"
  },
  {
    "label": "IsRenderingOffScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderingOffScreen()"
  },
  {
    "label": "ArrangeWindowToFrontVirtual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeWindowToFrontVirtual(TArray<TSharedRef<SWindow>>& Windows, const TSharedRef<SWindow>& WindowToBringToFront)"
  },
  {
    "label": "ArrangeWindowToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeWindowToFront(Windows, WindowToBringToFront)"
  },
  {
    "label": "FindPathToWidget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindPathToWidget(TSharedRef<const SWidget> InWidget, FWidgetPath& OutWidgetPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (} return true ; } const double)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "GetActiveTopLevelRegularWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetActiveTopLevelRegularWindow()"
  },
  {
    "label": "GetAppIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAppIcon()"
  },
  {
    "label": "GetAppIconSmall()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAppIconSmall()"
  },
  {
    "label": "GetApplicationScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetApplicationScale()"
  },
  {
    "label": "GetCursorPos()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCursorPos()"
  },
  {
    "label": "GetLastCursorPos()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetLastCursorPos()"
  },
  {
    "label": "GetCursorSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCursorSize()"
  },
  {
    "label": "GetKeyboardFocusedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetKeyboardFocusedWidget()"
  },
  {
    "label": "GetWindowTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetWindowTransparencySupport()"
  },
  {
    "label": "GetMouseCaptorImpl()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<SWidget>)",
    "insertText": "GetMouseCaptorImpl()"
  },
  {
    "label": "HasAnyMouseCaptor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasAnyMouseCaptor()"
  },
  {
    "label": "HasUserMouseCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserMouseCapture(int32 UserIndex)"
  },
  {
    "label": "GetPreferredWorkArea()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetPreferredWorkArea()"
  },
  {
    "label": "HasFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusedDescendants(const TSharedRef<const SWidget>& Widget)"
  },
  {
    "label": "HasUserFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserFocusedDescendants(const TSharedRef< const SWidget >& Widget, int32 UserIndex)"
  },
  {
    "label": "IsExternalUIOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalUIOpened()"
  },
  {
    "label": "LocateWindowUnderMouse()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "LocateWindowUnderMouse(UE::Slate::FDeprecateVector2DParameter ScreenspaceMouseCoordinate, const TArray<TSharedRef<SWindow>>& Windows, bool bIgnoreEnabledStatus = false, int32 UserIndex = INDEX_NONE)"
  },
  {
    "label": "IsWindowHousingInteractiveTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowHousingInteractiveTooltip(const TSharedRef<const SWindow>& WindowToTest)"
  },
  {
    "label": "MakeImage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SImage>)",
    "insertText": "MakeImage(const TAttribute<const FSlateBrush*>& Image, const TAttribute<FSlateColor>& Color, const TAttribute<EVisibility>& Visibility)"
  },
  {
    "label": "MakeWindowTitleBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWindowTitleBar(const FWindowTitleBarArgs& InArgs, TSharedPtr<IWindowTitleBar>& OutTitleBar)"
  },
  {
    "label": "MakeToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IToolTip>)",
    "insertText": "MakeToolTip(const TAttribute<FText>& ToolTipText)"
  },
  {
    "label": "MakeToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IToolTip>)",
    "insertText": "MakeToolTip(const FText& ToolTipText)"
  },
  {
    "label": "RequestDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDestroyWindow(TSharedRef<SWindow> WindowToDestroy)"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetKeyboardFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(const uint32 InUserIndex, const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetAllUserFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "SetAllUserFocusAllowingDescendantFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUserFocusAllowingDescendantFocus(const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "GetUserFocusedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetUserFocusedWidget(uint32 UserIndex)"
  },
  {
    "label": "GetCurrentDebugContextWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetCurrentDebugContextWidget()"
  },
  {
    "label": "GetTopLevelWindows()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<SWindow>>)",
    "insertText": "GetTopLevelWindows()"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyChar(const TCHAR Character, const bool IsRepeat)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyDown(const int32 KeyCode, const uint32 CharacterCode, const bool IsRepeat)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyUp(const int32 KeyCode, const uint32 CharacterCode, const bool IsRepeat)"
  },
  {
    "label": "OnInputLanguageChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputLanguageChanged()"
  },
  {
    "label": "OnMouseDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseDown(const TSharedPtr< FGenericWindow >& PlatformWindow, const EMouseButtons::Type Button)"
  },
  {
    "label": "OnMouseDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseDown(const TSharedPtr< FGenericWindow >& PlatformWindow, const EMouseButtons::Type Button, const FVector2D CursorPos)"
  },
  {
    "label": "OnMouseUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseUp(const EMouseButtons::Type Button)"
  },
  {
    "label": "OnMouseUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseUp(const EMouseButtons::Type Button, const FVector2D CursorPos)"
  },
  {
    "label": "OnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseDoubleClick(const TSharedPtr< FGenericWindow >& PlatformWindow, const EMouseButtons::Type Button)"
  },
  {
    "label": "OnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseDoubleClick(const TSharedPtr< FGenericWindow >& PlatformWindow, const EMouseButtons::Type Button, const FVector2D CursorPos)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseWheel(const float Delta)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseWheel(const float Delta, const FVector2D CursorPos)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMouseMove()"
  },
  {
    "label": "OnRawMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRawMouseMove(const int32 X, const int32 Y)"
  },
  {
    "label": "OnCursorSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnCursorSet()"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchGesture(EGestureEvent GestureType, const FVector2D& Delta, float WheelDelta, bool bIsDirectionInvertedFromDevice)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchStarted(const TSharedPtr< FGenericWindow >& Window, const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceId)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchMoved(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchEnded(const FVector2D& Location, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchForceChanged(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnTouchFirstMove(const FVector2D& Location, float Force, int32 TouchIndex, FPlatformUserId PlatformUserId, FInputDeviceId DeviceID)"
  },
  {
    "label": "ShouldSimulateGesture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShouldSimulateGesture(EGestureEvent Gesture, bool bEnable)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMotionDetected(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId)"
  },
  {
    "label": "OnControllerAnalog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnControllerAnalog(FGamepadKeyNames::Type KeyName, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId, float AnalogValue)"
  },
  {
    "label": "OnControllerButtonPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnControllerButtonPressed(FGamepadKeyNames::Type KeyName, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId, bool IsRepeat)"
  },
  {
    "label": "OnControllerButtonReleased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnControllerButtonReleased(FGamepadKeyNames::Type KeyName, FPlatformUserId PlatformUserId, FInputDeviceId InputDeviceId, bool IsRepeat)"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSizeChanged(const TSharedRef< FGenericWindow >& PlatformWindow, const int32 Width, const int32 Height, bool bWasMinimized = false)"
  },
  {
    "label": "OnOSPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOSPaint(const TSharedRef< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "GetSizeLimitsForWindow()",
    "kind": "Method",
    "detail": "Function (FWindowSizeLimits)",
    "insertText": "GetSizeLimitsForWindow(const TSharedRef<FGenericWindow>& Window)"
  },
  {
    "label": "OnResizingWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResizingWindow(const TSharedRef< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "BeginReshapingWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginReshapingWindow(const TSharedRef< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "FinishedReshapingWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedReshapingWindow(const TSharedRef< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "SignalSystemDPIChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalSystemDPIChanged(const TSharedRef<FGenericWindow>& Window)"
  },
  {
    "label": "HandleDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDPIScaleChanged(const TSharedRef<FGenericWindow>& Window)"
  },
  {
    "label": "OnMovedWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovedWindow(const TSharedRef< FGenericWindow >& PlatformWindow, const int32 X, const int32 Y)"
  },
  {
    "label": "OnWindowActivationChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnWindowActivationChanged(const TSharedRef< FGenericWindow >& PlatformWindow, const EWindowActivation ActivationType)"
  },
  {
    "label": "OnApplicationActivationChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnApplicationActivationChanged(const bool IsActive)"
  },
  {
    "label": "OnConvertibleLaptopModeChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnConvertibleLaptopModeChanged()"
  },
  {
    "label": "GetWindowZoneForPoint()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetWindowZoneForPoint(const TSharedRef< FGenericWindow >& PlatformWindow, const int32 X, const int32 Y)"
  },
  {
    "label": "OnWindowClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowClose(const TSharedRef< FGenericWindow >& PlatformWindow)"
  },
  {
    "label": "OnDragEnterText()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragEnterText(const TSharedRef< FGenericWindow >& Window, const FString& Text)"
  },
  {
    "label": "OnDragEnterFiles()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragEnterFiles(const TSharedRef< FGenericWindow >& Window, const TArray< FString >& Files)"
  },
  {
    "label": "OnDragEnterExternal()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragEnterExternal(const TSharedRef< FGenericWindow >& Window, const FString& Text, const TArray< FString >& Files)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragEnter(const TSharedRef< SWindow >& Window, const TSharedRef<FExternalDragOperation>& DragDropOperation)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragOver(const TSharedPtr< FGenericWindow >& Window)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const TSharedPtr< FGenericWindow >& Window)"
  },
  {
    "label": "OnDragDrop()",
    "kind": "Method",
    "detail": "Function (EDropEffect::Type)",
    "insertText": "OnDragDrop(const TSharedPtr< FGenericWindow >& Window)"
  },
  {
    "label": "OnWindowAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnWindowAction(const TSharedRef< FGenericWindow >& PlatformWindow, const EWindowAction::Type InActionType)"
  },
  {
    "label": "RoutePointerDownEvent()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "RoutePointerDownEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "RoutePointerUpEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RoutePointerUpEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "RoutePointerMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RoutePointerMoveEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent, bool bIsSynthetic)"
  },
  {
    "label": "RoutePointerDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RoutePointerDoubleClickEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "RouteMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RouteMouseWheelOrGestureEvent(const FWidgetPath& WidgetsUnderPointer, const FPointerEvent& InWheelEvent, const FPointerEvent* InGestureEvent = nullptr)"
  },
  {
    "label": "GetUserIndexForController()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetUserIndexForController(int32 ControllerId, FKey InKey)"
  },
  {
    "label": "SetInputManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputManager(TSharedRef<ISlateInputManager> InputManager)"
  },
  {
    "label": "RegisterOnWindowActionNotification()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnWindowActionNotification(const FOnWindowAction& Notification)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSlateApplication, FOnModalLoopTickEvent, float)"
  },
  {
    "label": "GetOnModalLoopTickEvent()",
    "kind": "Method",
    "detail": "Function (FOnModalLoopTickEvent&)",
    "insertText": "GetOnModalLoopTickEvent()"
  },
  {
    "label": "NavigateToWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToWidget(const uint32 UserIndex, const TSharedPtr<SWidget>& NavigationDestination, ENavigationSource NavigationSource = ENavigationSource::FocusedWidget)"
  },
  {
    "label": "NavigateFromWidgetUnderCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateFromWidgetUnderCursor(const uint32 InUserIndex, EUINavigation InNavigationType, TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FindBestParentWindowForDialogs()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindBestParentWindowForDialogs(const TSharedPtr<SWidget>& InWidget, const ESlateParentWindowSearchMethod InParentWindowSearchMethod = ESlateParentWindowSearchMethod::ActiveWindow)"
  },
  {
    "label": "FindBestParentWindowHandleForDialogs()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "FindBestParentWindowHandleForDialogs(const TSharedPtr<SWidget>& InWidget, const ESlateParentWindowSearchMethod InParentWindowSearchMethod = ESlateParentWindowSearchMethod::ActiveWindow)"
  },
  {
    "label": "GetPressedMouseButtons()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITORONLY_DATA FDragDropCheckingOverride OnDragDropCheckOverride ; # endif const TSet<FKey>&)",
    "insertText": "GetPressedMouseButtons()"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow(TSharedRef<SWindow> InSlateWindow, const bool bShowImmediately)"
  },
  {
    "label": "PrivateDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrivateDestroyWindow(const TSharedRef<SWindow>& DestroyedWindow)"
  },
  {
    "label": "AttemptNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptNavigation(const FWidgetPath& NavigationSource, const FNavigationEvent& NavigationEvent, const FNavigationReply& NavigationReply, const FArrangedWidget& BoundaryWidget)"
  },
  {
    "label": "ExecuteNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteNavigation(const FWidgetPath& NavigationSource, TSharedPtr<SWidget> DestinationWidget, const uint32 UserIndex, bool bAlwaysHandleNavigationAttempt)"
  },
  {
    "label": "OnMenuDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuDestroyed(const TSharedRef<IMenu>& Menu)"
  },
  {
    "label": "FSlateApplication()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSlateApplication()"
  },
  {
    "label": "SetLastUserInteractionTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastUserInteractionTime(const double InCurrentTime)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(FSlateUser& User, const FWidgetPath& InFocusPath, const EFocusCause InCause)"
  },
  {
    "label": "OnVirtualDesktopSizeChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnVirtualDesktopSizeChanged(const FDisplayMetrics& NewDisplayMetric)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateApplication> CurrentApplication ; TSet<FKey> PressedMouseButtons ; bool bAppIsActive ; bool bSlateWindowActive ; bool bRenderOffScreen ; float Scale ; float DragTriggerDistance ; TArray<TSharedRef<SWindow>> SlateWindows ; TArray<TSharedRef<SWindow>> SlateVirtualWindows ; TWeakPtr<SWindow> ActiveTopLevelWindow ; TArray<TSharedPtr<SWindow>> ActiveModalWindows ; TArray<TSharedRef<SWindow>> WindowDestroyQueue ; FMenuStack MenuStack ; float CursorRadius ; TArray<TSharedPtr<FSlateUser>> Users ; TArray<TWeakPtr<FSlateVirtualUserHandle>> VirtualUsers ; TWeakPtr<SWidget> LastAllUsersFocusWidget ; EFocusCause LastAllUsersFocusCause ; TWeakPtr<SWidget> CurrentDebugContextWidget ; TWeakPtr<SWindow> CurrentDebuggingWindow ; FThrottleRequest MouseButtonDownResponsivnessThrottle ; FThrottleRequest UserInteractionResponsivnessThrottle ; double LastUserInteractionTime ; double LastUserInteractionTimeForThrottling ; FSlateLastUserInteractionTimeUpdateEvent LastUserInteractionTimeUpdateEvent ; double LastMouseMoveTime ; FPopupSupport PopupSupport ; TWeakPtr<SViewport> GameViewportWidget ; # if WITH_EDITOR TSet<TWeakPtr<SViewport>> AllGameViewports ; TArray<TPair<FText,int32>> PreventDebuggingModeStack ; # endif TWeakPtr<SNotificationItem> DebuggingModeNotificationMessage ; TSharedPtr<ISlateSoundDevice> SlateSoundDevice ; double CurrentTime ; double LastTickTime ; float AverageDeltaTime ; float AverageDeltaTimeForResponsiveness ; FSimpleDelegate OnExitRequested ; TWeakPtr<IWidgetReflector> WidgetReflectorPtr ; FAccessSourceCode SourceCodeAccessDelegate ; FQueryAccessSourceCode QuerySourceCodeAccessDelegate ; FAccessAsset AssetAccessDelegate ; int32 NumExternalModalWindowsActive ; TArray<FOnWindowAction> OnWindowActionNotifications ; const class FStyleNode* RootStyleNode ; bool bRequestLeaveDebugMode ; bool bLeaveDebugForSingleStep ; TAttribute<bool> NormalExecutionGetter ; FModalWindowStackStarted ModalWindowStackStartedDelegate ; FModalWindowStackEnded ModalWindowStackEndedDelegate ; bool bIsExternalUIOpened ; FThrottleRequest ThrottleHandle ; bool DragIsHandled ; TUniquePtr<IPlatformTextField> SlateTextField ; bool bIsFakingTouch ; bool bIsGameFakingTouch ; bool bIsFakingTouched ; bool bAllowFakingTouch ; bool bHandleDeviceInputWhenApplicationNotActive ; FOnKeyEvent UnhandledKeyDownEventHandler ; FOnKeyEvent UnhandledKeyUpEventHandler ; bool bTouchFallbackToMouse ; bool bSoftwareCursorAvailable ; bool bMenuAnimationsEnabled ; const FSlateBrush* AppIcon ; FApplicationActivationStateChangedEvent ApplicationActivationStateChangedEvent ; FSlateRect VirtualDesktopRect ; TSharedRef<FNavigationConfig> NavigationConfig ; # if WITH_EDITOR TSharedRef<FNavigationConfig> EditorNavigationConfig ; # endif TBitArray<FDefaultBitArrayAllocator> SimulateGestures ; FSlateTickEvent PreTickEvent ; FSlateTickEvent PostTickEvent ; FSimpleMulticastDelegate PreShutdownEvent ; FUserRegisteredEvent UserRegisteredEvent ; FOnWindowBeingDestroyed WindowBeingDestroyedEvent ; FOnMenuDestroyed MenuBeingDestroyedEvent ; FOnModalLoopTickEvent ModalLoopTickEvent ; FOnFocusChanging FocusChangingDelegate ; FCriticalSection SlateTickCriticalSection ; int32 ProcessingInput ; bool bSynthesizedCursorMove = false ; bool bIsTicking = false ; uint64 PlatformMouseMovementEvents = 0 ; double FixedDeltaTime ; class InputPreProcessorsHelper { public : void)",
    "insertText": "Tick(const float DeltaTime, FSlateApplication& SlateApp, TSharedRef<ICursor> Cursor)"
  },
  {
    "label": "HandleKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyDownEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyUpEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAnalogInputEvent(FSlateApplication& SlateApp, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "HandleMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseMoveEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonDownEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonUpEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseButtonDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseButtonDoubleClickEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseWheelOrGestureEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseWheelOrGestureEvent(FSlateApplication& SlateApp, const FPointerEvent& WheelEvent, const FPointerEvent* GestureEvent)"
  },
  {
    "label": "HandleMotionDetectedEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMotionDetectedEvent(FSlateApplication& SlateApp, const FMotionEvent& MotionEvent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(const FInputPreprocessorRegistration& Registration)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(TSharedPtr<IInputProcessor> InputProcessor)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Find(TSharedPtr<IInputProcessor> InputProcessor, const EInputPreProcessorType& Type)"
  },
  {
    "label": "PreProcessInput()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PreProcessInput(ESlateDebuggingInputEvent InputEvent, TFunctionRef<bool(IInputProcessor&)> InputProcessFunc)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(const FInputPreprocessorRegistration& Registration)"
  },
  {
    "label": "TInlineSparseArrayAllocator()",
    "kind": "Method",
    "detail": "Function (using FProcessorTypeStorage = TArray<TSharedPtr<IInputProcessor>> ; using FInputProcessorStorage = TSparseArray<FProcessorTypeStorage,)",
    "insertText": "TInlineSparseArrayAllocator(uint32)"
  }
]