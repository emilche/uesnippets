[
  {
    "label": "CountComponents()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / Count . h \" # include \" Algo / Find . h \" # include \" GameFramework / Actor . h \" # include \" Engine / Selection . h \" # include \" InteractiveToolBuilder . h \" namespace ToolBuilderUtil { int)",
    "insertText": "CountComponents(const FToolBuilderState& InputState, const TFunction<bool(UActorComponent*)>& Predicate)"
  },
  {
    "label": "FindFirstComponent()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindFirstComponent(const FToolBuilderState& InputState, const TFunction<bool(UActorComponent*)>& Predicate)"
  },
  {
    "label": "FindAllComponents()",
    "kind": "Method",
    "detail": "Function (TArray<UActorComponent*>)",
    "insertText": "FindAllComponents(const FToolBuilderState& InputState, const TFunction<bool(UActorComponent*)>& Predicate)"
  },
  {
    "label": "CountSelectedComponentsOfType()",
    "kind": "Method",
    "detail": "Function (template<ComponentType> int)",
    "insertText": "CountSelectedComponentsOfType(const FToolBuilderState& InputState)"
  },
  {
    "label": "FindFirstComponentOfType()",
    "kind": "Method",
    "detail": "Function (template<ComponentType> ComponentType*)",
    "insertText": "FindFirstComponentOfType(const FToolBuilderState& InputState)"
  },
  {
    "label": "EnumerateComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateComponents(const FToolBuilderState& InputState, TFunctionRef<void(UActorComponent*)> ComponentFunc)"
  },
  {
    "label": "CountActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountActors(const FToolBuilderState& InputState, const TFunction<bool(AActor*)>& Predicate)"
  },
  {
    "label": "FindFirstActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "FindFirstActor(const FToolBuilderState& InputState, const TFunction<bool(AActor*)>& Predicate)"
  },
  {
    "label": "FindAllActors()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "FindAllActors(const FToolBuilderState& InputState, const TFunction<bool(AActor*)>& Predicate)"
  },
  {
    "label": "CountSelectedActorsOfType()",
    "kind": "Method",
    "detail": "Function (template<ActorType> int)",
    "insertText": "CountSelectedActorsOfType(const FToolBuilderState& InputState)"
  },
  {
    "label": "FindFirstActorOfType()",
    "kind": "Method",
    "detail": "Function (template<ActorType> ActorType*)",
    "insertText": "FindFirstActorOfType(const FToolBuilderState& InputState)"
  },
  {
    "label": "ComponentTypeCouldHaveUVs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentTypeCouldHaveUVs(const UActorComponent& Component)"
  },
  {
    "label": "IsVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolume(const UActorComponent& Component)"
  },
  {
    "label": "FindFirstActor()",
    "kind": "Method",
    "detail": "Function (AActor* Found =)",
    "insertText": "FindFirstActor(InputState, [](AActor* Actor) { return Cast<ActorType>(Actor) != nullptr; })"
  }
]