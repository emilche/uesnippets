[
  {
    "label": "UFoliageType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageType"
  },
  {
    "label": "UProceduralFoliageSpawner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProceduralFoliageSpawner"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "UProceduralFoliageTile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProceduralFoliageTile"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Math / RandomStream . h \" # include \" InstancedFoliage . h \" # include \" ProceduralFoliageInstance . h \" # include \" ProceduralFoliageBroadphase . h \" # include \" ProceduralFoliageTile . generated . h \" class UFoliageType ; class UProceduralFoliageSpawner ; struct FBodyInstance ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() FOLIAGE_API void Simulate(const UProceduralFoliageSpawner* InFoliageSpawner, const int32 RandomSeed, const int32 MaxNumSteps, const int32 InLastCancel)"
  },
  {
    "label": "ExtractDesiredInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractDesiredInstances(TArray<FDesiredFoliageInstance>& OutDesiredInstances, const FTransform& WorldTM, const FVector2D& ActorVolumeLocation, FVector::FReal ActorVolumeMaxExtent, const FGuid& ProceduralGuid, const FVector::FReal HalfHeight, const FBodyInstance* VolumeBodyInstance, bool bEmptyTileInfo = true)"
  },
  {
    "label": "CopyInstancesToTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInstancesToTile(UProceduralFoliageTile* ToTile, const FBox2D& LocalAABB, const FTransform& RelativeTM, const float Overlap)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstance(FProceduralFoliageInstance* Inst)"
  },
  {
    "label": "RemoveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstances()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "InitSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSimulation(const UProceduralFoliageSpawner* InFoliageSpawner, const int32 InRandomSeed)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetInstancesInAABB()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GetInstancesInAABB(const FBox2D& LocalAABB, TArray<FProceduralFoliageInstance* >& OutInstances, bool bFullyContainedOnly = true)"
  },
  {
    "label": "AddInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstances(const TArray<FProceduralFoliageInstance*>& NewInstances, const FTransform& ToLocalTM, const FBox2D& InnerLocalAABB)"
  },
  {
    "label": "InstancesToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstancesToArray()"
  },
  {
    "label": "RunSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSimulation(const int32 MaxNumSteps, bool bOnlyInShade)"
  },
  {
    "label": "StepSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepSimulation()"
  },
  {
    "label": "AddRandomSeeds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRandomSeeds(TArray<FProceduralFoliageInstance*>& OutInstances)"
  },
  {
    "label": "HandleOverlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleOverlaps(FProceduralFoliageInstance* Instance)"
  },
  {
    "label": "NewSeed()",
    "kind": "Method",
    "detail": "Function (FProceduralFoliageInstance*)",
    "insertText": "NewSeed(const FVector& Location, float Scale, const UFoliageType* Type, float InAge, bool bBlocker = false)"
  },
  {
    "label": "SpreadSeeds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpreadSeeds(TArray<FProceduralFoliageInstance*>& NewSeeds)"
  },
  {
    "label": "AgeSeeds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AgeSeeds()"
  },
  {
    "label": "MarkPendingRemoval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPendingRemoval(FProceduralFoliageInstance* ToRemove)"
  },
  {
    "label": "FlushPendingRemovals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingRemovals()"
  },
  {
    "label": "UserCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UserCancelled()"
  },
  {
    "label": "GetRandomGaussian()",
    "kind": "Method",
    "detail": "Function (int32 SimulationStep ; FProceduralFoliageBroadphase Broadphase ; int32 RandomSeed ; FRandomStream RandomStream ; bool bSimulateOnlyInShade ; int32 LastCancel ; private : float)",
    "insertText": "GetRandomGaussian()"
  },
  {
    "label": "GetSeedOffset()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetSeedOffset(const UFoliageType* Type, float MinDistance)"
  }
]