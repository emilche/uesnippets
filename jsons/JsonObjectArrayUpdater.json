[
  {
    "label": "FJsonObjectArrayUpdater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJsonObjectArrayUpdater"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Dom / JsonObject . h \" # include \" Dom / JsonValue . h \" template<ElementType,KeyType> struct FJsonObjectArrayUpdater {)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(KeyType, FGetElementKey, const ElementType&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FTryGetJsonObjectKey, const FJsonObject&, KeyType&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FUpdateJsonObject, const ElementType&, FJsonObject&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSortArray, TArray<TSharedPtr<FJsonValue>>&)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FJsonObject& JsonObject, const FString& ArrayName, const TArray<ElementType>& SourceArray, FGetElementKey GetElementKey, FTryGetJsonObjectKey TryGetJsonObjectKey, FUpdateJsonObject UpdateJsonObject, FSortArray SortJsonArray = FSortArray())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FJsonValue>> NewJsonValues ; { const TArray<TSharedPtr<FJsonValue>>* ExistingJsonValues ;)",
    "insertText": "if(JsonObject.TryGetArrayField(ArrayName, ExistingJsonValues))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<KeyType,const ElementType*> ElementsMap ;)",
    "insertText": "for(const ElementType& Element : SourceArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementsMap .)",
    "insertText": "Add(GetElementKey.Execute(Element), &Element)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TSharedPtr<FJsonValue> ExistingJsonValue : *ExistingJsonValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FJsonObject>* ExistingJsonValueAsObject ;)",
    "insertText": "if(ExistingJsonValue->TryGetObject(ExistingJsonValueAsObject))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (KeyType ElementKey ;)",
    "insertText": "if(TryGetJsonObjectKey.Execute(**ExistingJsonValueAsObject, ElementKey))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (UpdateJsonObject .)",
    "insertText": "Execute(**ElementPtr, **ExistingJsonValueAsObject)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewJsonValues .)",
    "insertText": "Add(ExistingJsonValue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ElementsMap .)",
    "insertText": "Remove(ElementKey)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "for(auto It = ElementsMap.CreateConstIterator(); It; ++It)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject> NewJsonObject =)",
    "insertText": "MakeShareable(new FJsonObject)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (UpdateJsonObject .)",
    "insertText": "Execute(*It.Value(), *NewJsonObject.Get())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewJsonValues .)",
    "insertText": "Add(MakeShareable(new FJsonValueObject(NewJsonObject)))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (UpdateJsonObject .)",
    "insertText": "Execute(Element, *NewJsonObject.Get())"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} } } SortJsonArray .)",
    "insertText": "ExecuteIfBound(NewJsonValues)"
  },
  {
    "label": "SetArrayField()",
    "kind": "Method",
    "detail": "Function (JsonObject .)",
    "insertText": "SetArrayField(ArrayName, NewJsonValues)"
  },
  {
    "label": "RemoveField()",
    "kind": "Method",
    "detail": "Function (} else { JsonObject .)",
    "insertText": "RemoveField(ArrayName)"
  }
]