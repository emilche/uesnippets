[
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "FPackageTableColumns",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTableColumns"
  },
  {
    "label": "FPackageTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTable"
  },
  {
    "label": "FPackageTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" UObject / NameTypes . h \" # include \" InsightsCore / Table / ViewModels / Table . h \" # include \" Insights / CookProfiler / ViewModels / PackageEntry . h \" namespace UE::Insights { class FTableColumn ; } namespace UE::Insights::CookProfiler { struct FPackageTableColumns { const FName IdColumnId ; const FName NameColumnId ; const FName LoadTimeInclColumnId ; const FName LoadTimeExclColumnId ; const FName SaveTimeInclColumnId ; const FName SaveTimeExclColumnId ; const FName BeginCacheForCookedPlatformDataTimeInclColumnId ; const FName BeginCacheForCookedPlatformDataTimeExclColumnId ; const FName GetIsCachedCookedPlatformDataLoadedInclColumnId ; const FName GetIsCachedCookedPlatformDataLoadedExclColumnId ; const FName PackageAssetClassColumnId ; } ; class FPackageTable : public FTable { public :)",
    "insertText": "FPackageTable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetPackageEntries()",
    "kind": "Method",
    "detail": "Function (TArray<FPackageEntry>&)",
    "insertText": "GetPackageEntries()"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} const FPackageEntry*)",
    "insertText": "GetPackage(int32 InIndex)"
  },
  {
    "label": "GetPackageChecked()",
    "kind": "Method",
    "detail": "Function (} const FPackageEntry&)",
    "insertText": "GetPackageChecked(int32 InIndex)"
  }
]