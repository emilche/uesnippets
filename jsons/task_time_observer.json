[
  {
    "label": "TaskTimeObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTimeObserver"
  },
  {
    "label": "TaskTimeObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TASK_TIME_OBSERVER_H_ # define BASE_TASK_SEQUENCE_MANAGER_TASK_TIME_OBSERVER_H_ # include \" base / time / time . h \" namespace base { namespace sequence_manager { class TaskTimeObserver { public :)",
    "insertText": "TaskTimeObserver()"
  },
  {
    "label": "TaskTimeObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskTimeObserver(const TaskTimeObserver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskTimeObserver&)",
    "insertText": "operator(const TaskTimeObserver&)"
  },
  {
    "label": "WillProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillProcessTask(TimeTicks start_time)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidProcessTask(TimeTicks start_time, TimeTicks end_time)"
  }
]