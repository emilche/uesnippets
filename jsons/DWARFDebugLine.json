[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DWARFDebugLine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFDebugLine"
  },
  {
    "label": "FileNameEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileNameEntry"
  },
  {
    "label": "Prologue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Prologue"
  },
  {
    "label": "Row",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Row"
  },
  {
    "label": "Sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sequence"
  },
  {
    "label": "LineTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LineTable"
  },
  {
    "label": "ParsingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParsingState"
  },
  {
    "label": "DWARFDebugLine()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_DEBUGINFO_DWARFDEBUGLINE_H # define LLVM_LIB_DEBUGINFO_DWARFDEBUGLINE_H # include \" llvm / DebugInfo / DIContext . h \" # include \" llvm / DebugInfo / DWARF / DWARFRelocMap . h \" # include \" llvm / Support / DataExtractor . h \" # include<map> # include<string> # include<vector> namespace llvm { class raw_ostream ; class DWARFDebugLine { public :)",
    "insertText": "DWARFDebugLine(const RelocAddrMap* LineInfoRelocMap) : RelocMap(LineInfoRelocMap)"
  },
  {
    "label": "FileNameEntry()",
    "kind": "Method",
    "detail": "Function (} struct FileNameEntry {)",
    "insertText": "FileNameEntry() : Name(nullptr), DirIdx(0), ModTime(0), Length(0)"
  },
  {
    "label": "Prologue()",
    "kind": "Method",
    "detail": "Function (} const char* Name ; uint64_t DirIdx ; uint64_t ModTime ; uint64_t Length ; } ; struct Prologue {)",
    "insertText": "Prologue()"
  },
  {
    "label": "sizeofTotalLength()",
    "kind": "Method",
    "detail": "Function (uint64_t TotalLength ; uint16_t Version ; uint64_t PrologueLength ; uint8_t MinInstLength ; uint8_t MaxOpsPerInst ; uint8_t DefaultIsStmt ; int8_t LineBase ; uint8_t LineRange ; uint8_t OpcodeBase ; std::vector<uint8_t> StandardOpcodeLengths ; std::vector<const char*> IncludeDirectories ; std::vector<FileNameEntry> FileNames ; bool IsDWARF64 ; uint32_t)",
    "insertText": "sizeofTotalLength()"
  },
  {
    "label": "getStatementTableLength()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getStatementTableLength()"
  },
  {
    "label": "getMaxLineIncrementForSpecialOpcode()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getMaxLineIncrementForSpecialOpcode()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(raw_ostream &OS)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(DataExtractor debug_line_data, uint32_t *offset_ptr)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (} ; struct Row {)",
    "insertText": "Row(bool default_is_stmt = false)"
  },
  {
    "label": "postAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postAppend()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(bool default_is_stmt)"
  },
  {
    "label": "orderByAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "orderByAddress(const Row& LHS, const Row& RHS)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "orderByLowPC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "orderByLowPC(const Sequence& LHS, const Sequence& RHS)"
  },
  {
    "label": "containsPC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "containsPC(uint64_t pc)"
  },
  {
    "label": "LineTable()",
    "kind": "Method",
    "detail": "Function (} } ; struct LineTable {)",
    "insertText": "LineTable()"
  },
  {
    "label": "appendRow()",
    "kind": "Method",
    "detail": "Function (const uint32_t UnknownRowIndex = UINT32_MAX ; void)",
    "insertText": "appendRow(const DWARFDebugLine::Row &R)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Rows .)",
    "insertText": "push_back(R)"
  },
  {
    "label": "appendSequence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "appendSequence(const DWARFDebugLine::Sequence &S)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Sequences .)",
    "insertText": "push_back(S)"
  },
  {
    "label": "lookupAddress()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "lookupAddress(uint64_t address)"
  },
  {
    "label": "lookupAddressRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lookupAddressRange(uint64_t address, uint64_t size, std::vector<uint32_t> &result)"
  },
  {
    "label": "getFileNameByIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFileNameByIndex(uint64_t FileIndex, const char *CompDir, DILineInfoSpecifier::FileLineInfoKind Kind, std::string &Result)"
  },
  {
    "label": "getFileLineInfoForAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFileLineInfoForAddress(uint64_t Address, const char *CompDir, DILineInfoSpecifier::FileLineInfoKind Kind, DILineInfo &Result)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(DataExtractor debug_line_data, const RelocAddrMap *RMap, uint32_t *offset_ptr)"
  },
  {
    "label": "findRowInSeq()",
    "kind": "Method",
    "detail": "Function (struct Prologue Prologue ; typedef std::vector<Row> RowVector ; typedef RowVector::const_iterator RowIter ; typedef std::vector<Sequence> SequenceVector ; typedef SequenceVector::const_iterator SequenceIter ; RowVector Rows ; SequenceVector Sequences ; private : uint32_t)",
    "insertText": "findRowInSeq(const DWARFDebugLine::Sequence &seq, uint64_t address)"
  },
  {
    "label": "getLineTable()",
    "kind": "Method",
    "detail": "Function (} ; const LineTable*)",
    "insertText": "getLineTable(uint32_t offset)"
  },
  {
    "label": "getOrParseLineTable()",
    "kind": "Method",
    "detail": "Function (const LineTable*)",
    "insertText": "getOrParseLineTable(DataExtractor debug_line_data, uint32_t offset)"
  },
  {
    "label": "ParsingState()",
    "kind": "Method",
    "detail": "Function (private : struct ParsingState {)",
    "insertText": "ParsingState(struct LineTable *LT)"
  },
  {
    "label": "resetRowAndSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetRowAndSequence()"
  },
  {
    "label": "appendRowToMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendRowToMatrix(uint32_t offset)"
  }
]