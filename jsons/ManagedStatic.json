[
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "object_creator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "object_creator"
  },
  {
    "label": "object_deleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "object_deleter"
  },
  {
    "label": "ManagedStaticBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ManagedStaticBase"
  },
  {
    "label": "Creator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Creator"
  },
  {
    "label": "Deleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Deleter"
  },
  {
    "label": "ManagedStatic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ManagedStatic"
  },
  {
    "label": "llvm_shutdown_obj",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "llvm_shutdown_obj"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_MANAGEDSTATIC_H # define LLVM_SUPPORT_MANAGEDSTATIC_H # include<atomic> # include<cstddef> namespace llvm { template<class C> struct object_creator { void*)",
    "insertText": "call()"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct object_deleter { void)",
    "insertText": "call(void *Ptr)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(T *)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if !)",
    "insertText": "defined(_MSC_VER) || (_MSC_VER >= 1925) || defined(__clang__)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : # ifdef LLVM_USE_CONSTEXPR_CTOR std::atomic<void*> Ptr { } ;)",
    "insertText": "void(*DeleterFn)(void *)"
  },
  {
    "label": "RegisterManagedStatic()",
    "kind": "Method",
    "detail": "Function (const ManagedStaticBase* Next ; # endif void)",
    "insertText": "RegisterManagedStatic(void *(*creator)(), void (*deleter)(void*))"
  },
  {
    "label": "ManagedStaticBase()",
    "kind": "Method",
    "detail": "Function (public : # ifdef LLVM_USE_CONSTEXPR_CTOR)",
    "insertText": "ManagedStaticBase()"
  },
  {
    "label": "isConstructed()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "isConstructed()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class C,class Creator = object_creator<C>,class Deleter = object_deleter<C>> class ManagedStatic : public ManagedStaticBase { public : C&)",
    "insertText": "operator()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (void* Tmp = Ptr .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "llvm_shutdown()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "llvm_shutdown()"
  },
  {
    "label": "llvm_shutdown_obj()",
    "kind": "Method",
    "detail": "Function (struct llvm_shutdown_obj {)",
    "insertText": "llvm_shutdown_obj()"
  }
]