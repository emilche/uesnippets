[
  {
    "label": "Element",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Element"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_TRAVERSAL_H # define MATERIALX_TRAVERSAL_H # include<MaterialXCore / Exception . h> MATERIALX_NAMESPACE_BEGIN class Element ; using ElementPtr = shared_ptr<Element> ; using ConstElementPtr = shared_ptr<const Element> ; class Edge { public :)",
    "insertText": "Edge(ElementPtr elemDown, ElementPtr elemConnect, ElementPtr elemUp) : _elemDown(elemDown), _elemConnect(elemConnect), _elemUp(elemUp)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Edge()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Edge& rhs)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "getDownstreamElement()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getDownstreamElement()"
  },
  {
    "label": "TreeIterator()",
    "kind": "Method",
    "detail": "Function (private : ElementPtr _elemDown ; ElementPtr _elemConnect ; ElementPtr _elemUp ; } ; class TreeIterator { public :)",
    "insertText": "TreeIterator(ElementPtr elem) : _elem(elem), _prune(false), _holdCount(0)"
  },
  {
    "label": "TreeIterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TreeIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : using StackFrame = std::pair<ElementPtr,size_t> ; public : bool)",
    "insertText": "operator(const TreeIterator& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementPtr)",
    "insertText": "operator()"
  },
  {
    "label": "getElement()",
    "kind": "Method",
    "detail": "Function (ElementPtr)",
    "insertText": "getElement()"
  },
  {
    "label": "setPruneSubtree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPruneSubtree(bool prune)"
  },
  {
    "label": "getPruneSubtree()",
    "kind": "Method",
    "detail": "Function (_prune = prune ; } bool)",
    "insertText": "getPruneSubtree()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (_holdCount = holdCount ; return* this ; } const TreeIterator&)",
    "insertText": "end()"
  },
  {
    "label": "GraphIterator()",
    "kind": "Method",
    "detail": "Function (private : ElementPtr _elem ; vector<StackFrame> _stack ; bool _prune ; size_t _holdCount ; } ; class GraphIterator { public :)",
    "insertText": "GraphIterator(ElementPtr elem) : _upstreamElem(elem), _prune(false), _holdCount(0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (_pathElems .)",
    "insertText": "insert(elem)"
  },
  {
    "label": "GraphIterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GraphIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : using ElementSet = std::set<ElementPtr> ; using StackFrame = std::pair<ElementPtr,size_t> ; public : bool)",
    "insertText": "operator(const GraphIterator& rhs)"
  },
  {
    "label": "getConnectingElement()",
    "kind": "Method",
    "detail": "Function (} ElementPtr)",
    "insertText": "getConnectingElement()"
  },
  {
    "label": "getElementDepth()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getElementDepth()"
  },
  {
    "label": "getNodeDepth()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNodeDepth()"
  },
  {
    "label": "setPruneSubgraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPruneSubgraph(bool prune)"
  },
  {
    "label": "getPruneSubgraph()",
    "kind": "Method",
    "detail": "Function (_prune = prune ; } bool)",
    "insertText": "getPruneSubgraph()"
  },
  {
    "label": "extendPathUpstream()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "extendPathUpstream(ElementPtr upstreamElem, ElementPtr connectingElem)"
  },
  {
    "label": "returnPathDownstream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "returnPathDownstream(ElementPtr upstreamElem)"
  },
  {
    "label": "InheritanceIterator()",
    "kind": "Method",
    "detail": "Function (private : ElementPtr _upstreamElem ; ElementPtr _connectingElem ; ElementSet _pathElems ; vector<StackFrame> _stack ; bool _prune ; size_t _holdCount ; } ; class InheritanceIterator { public :)",
    "insertText": "InheritanceIterator(ConstElementPtr elem) : _elem(elem), _holdCount(0)"
  },
  {
    "label": "InheritanceIterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "InheritanceIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : using ConstElementSet = std::set<ConstElementPtr> ; public : bool)",
    "insertText": "operator(const InheritanceIterator& rhs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (InheritanceIterator&)",
    "insertText": "begin(size_t holdCount = 0)"
  }
]