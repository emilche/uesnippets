[
  {
    "label": "FXPBDLongRangeConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDLongRangeConstraints"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDLongRangeConstraintsBase . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos XPBD Long Range Constraint\"), STAT_XPBD_LongRange, STATGROUP_Chaos)"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { class FXPBDLongRangeConstraints final : public FPBDLongRangeConstraintsBase { public : typedef FPBDLongRangeConstraintsBase Base ; typedef Base::FTether FTether ; FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "FXPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FXPBDLongRangeConstraints(const FSolverParticles& Particles, const int32 InParticleOffset, const int32 InParticleCount, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal MeshScale) : FPBDLongRangeConstraintsBase( Particles, InParticleOffset, InParticleCount, InTethers, WeightMaps.FindRef(GetXPBDTetherStiffnessString(PropertyCollection, XPBDTetherStiffnessName.ToString())), WeightMaps.FindRef(GetXPBDTetherScaleString(PropertyCollection, XPBDTetherScaleName.ToString())), FSolverVec2(GetWeightedFloatXPBDTetherStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDTetherScale(PropertyCollection, 1.f)), MaxStiffness, MeshScale) , XPBDTetherStiffnessIndex(PropertyCollection) , XPBDTetherScaleIndex(PropertyCollection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumTethers = 0 ;)",
    "insertText": "for(const TConstArrayView<FTether>& TetherBatch : Tethers)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumTethers + = TetherBatch .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} Lambdas .)",
    "insertText": "Reserve(NumTethers)"
  },
  {
    "label": "FXPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDLongRangeConstraints(const FSolverParticles& Particles, const int32 InParticleOffset, const int32 InParticleCount, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& ScaleMultipliers, const FSolverVec2& InStiffness = FSolverVec2::UnitVector, const FSolverVec2& InScale = FSolverVec2::UnitVector) : FPBDLongRangeConstraintsBase( Particles, InParticleOffset, InParticleCount, InTethers, StiffnessMultipliers, ScaleMultipliers, InStiffness, InScale, MaxStiffness) , XPBDTetherStiffnessIndex(ForceInit) , XPBDTetherScaleIndex(ForceInit)"
  },
  {
    "label": "FXPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDLongRangeConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, FSolverReal MeshScale)"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2)",
    "insertText": "WeightedValue(GetWeightedFloatXPBDTetherStiffness(PropertyCollection))"
  },
  {
    "label": "GetXPBDTetherStiffnessString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetXPBDTetherStiffnessString(PropertyCollection)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (Stiffness =)",
    "insertText": "FPBDStiffness(WeightedValue, WeightMaps.FindRef(WeightMapName), ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { Stiffness .)",
    "insertText": "SetWeightedValue(WeightedValue, MaxStiffness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(IsXPBDTetherScaleMutable(PropertyCollection))"
  },
  {
    "label": "FSolverVec2()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2 WeightedValue =)",
    "insertText": "FSolverVec2(GetWeightedFloatXPBDTetherScale(PropertyCollection)).ClampAxes(MinTetherScale, MaxTetherScale)"
  },
  {
    "label": "GetXPBDTetherScaleString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetXPBDTetherScaleString(PropertyCollection)"
  },
  {
    "label": "FPBDWeightMap()",
    "kind": "Method",
    "detail": "Function (TetherScale =)",
    "insertText": "FPBDWeightMap(WeightedValue, WeightMaps.FindRef(WeightMapName), ParticleCount)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { TetherScale .)",
    "insertText": "SetWeightedValue(WeightedValue)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InTetherScale, FSolverReal MeshScale = (FSolverReal)1)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (TetherScale .)",
    "insertText": "SetWeightedValue(InTetherScale.ClampAxes(MinTetherScale, MaxTetherScale) * MeshScale)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal , const int32)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyXPBDValues(MaxStiffness)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (TetherScale .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "AddZeroed(NumTethers)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& Particles, const FSolverReal Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_XPBD_LongRange)"
  },
  {
    "label": "GetMinParallelBatchSize()",
    "kind": "Method",
    "detail": "Function (const int32 MinParallelSize =)",
    "insertText": "GetMinParallelBatchSize()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(TetherBatch.Num(), [this, &Particles, Dt, &TetherBatch, ConstraintOffset](int32 Index) { const FTether& Tether = TetherBatch[Index]; const int32 LocalParticleIndex = GetEndIndex(Tether); const FSolverReal Scale = TetherScale[LocalParticleIndex]; const FSolverReal ExpStiffnessValue = Stiffness[LocalParticleIndex]; Apply(Particles, Dt, Tether, ConstraintOffset + Index, ExpStiffnessValue, Scale); }, TetherBatch.Num() < MinParallelSize)"
  },
  {
    "label": "ScaleValue()",
    "kind": "Method",
    "detail": "Function (} } else { const FSolverReal)",
    "insertText": "ScaleValue(FSolverReal)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(TetherBatch.Num(), [this, &Particles, Dt, &TetherBatch, ScaleValue, ConstraintOffset](int32 Index) { const FTether& Tether = TetherBatch[Index]; const int32 LocalParticleIndex = GetEndIndex(Tether); const FSolverReal ExpStiffnessValue = Stiffness[LocalParticleIndex]; Apply(Particles, Dt, Tether, ConstraintOffset + Index, ExpStiffnessValue, ScaleValue); }, TetherBatch.Num() < MinParallelSize)"
  },
  {
    "label": "ExpStiffnessValue()",
    "kind": "Method",
    "detail": "Function (} } } else { const FSolverReal)",
    "insertText": "ExpStiffnessValue(FSolverReal)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(TetherBatch.Num(), [this, &Particles, Dt, &TetherBatch, ExpStiffnessValue, ConstraintOffset](int32 Index) { const FTether& Tether = TetherBatch[Index]; const int32 LocalParticleIndex = GetEndIndex(Tether); const FSolverReal Scale = TetherScale[LocalParticleIndex]; Apply(Particles, Dt, Tether, ConstraintOffset + Index, ExpStiffnessValue, Scale); }, TetherBatch.Num() < MinParallelSize)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(TetherBatch.Num(), [this, &Particles, Dt, &TetherBatch, ExpStiffnessValue, ScaleValue, ConstraintOffset](int32 Index) { const FTether& Tether = TetherBatch[Index]; Apply(Particles, Dt, Tether, ConstraintOffset + Index, ExpStiffnessValue, ScaleValue); }, TetherBatch.Num() < MinParallelSize)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } } } private : void)",
    "insertText": "Apply(FSolverParticles& Particles, const FSolverReal Dt, const FTether& Tether, int32 ConstraintIndex, const FSolverReal InStiffness, const FSolverReal InScale)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (FSolverReal& Lambda = Lambdas [ ConstraintIndex ] ; const FSolverReal)",
    "insertText": "Alpha(FSolverReal)1 / (InStiffness * Dt * Dt)"
  },
  {
    "label": "DLambda()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "DLambda(Offset - Alpha * Lambda) / ((FSolverReal)1. + Alpha)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(GetEndParticle(Tether))"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (Lambda + = DLambda ; } using Base::MinTetherScale ; using Base::MaxTetherScale ; using Base::Tethers ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::Stiffness ; using Base::TetherScale ; TArray<FSolverReal> Lambdas ; int32 NumTethers ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDTetherStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDTetherScale, float)"
  }
]