[
  {
    "label": "AggregatedCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AggregatedCounter"
  },
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "Samples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Samples"
  },
  {
    "label": "StatsCounterObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCounterObserver"
  },
  {
    "label": "AggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AggregatedStats"
  },
  {
    "label": "StatsCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCounter"
  },
  {
    "label": "AvgCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AvgCounter"
  },
  {
    "label": "MaxCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaxCounter"
  },
  {
    "label": "PercentCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PercentCounter"
  },
  {
    "label": "PermilleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PermilleCounter"
  },
  {
    "label": "RateCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateCounter"
  },
  {
    "label": "RateAccCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateAccCounter"
  },
  {
    "label": "counter()",
    "kind": "Method",
    "detail": "Function (AvgCounter)",
    "insertText": "counter(&clock, nullptr)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (AggregatedStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "ProcessAndGetStats()",
    "kind": "Method",
    "detail": "Function (AggregatedStats)",
    "insertText": "ProcessAndGetStats()"
  },
  {
    "label": "ProcessAndPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndPause()"
  },
  {
    "label": "ProcessAndPauseForDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndPauseForDuration(int64_t min_pause_time_ms)"
  },
  {
    "label": "ProcessAndStopPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndStopPause()"
  },
  {
    "label": "StatsCounter()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "StatsCounter(Clock* clock,\n               int64_t process_intervals_ms,\n               bool include_empty_intervals,\n               StatsCounterObserver* observer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t sample, uint32_t stream_id)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast(int64_t sample, uint32_t stream_id)"
  },
  {
    "label": "TimeToProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeToProcess(int* num_elapsed_intervals)"
  },
  {
    "label": "TryProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryProcess()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "ResumeIfMinTimePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeIfMinTimePassed()"
  },
  {
    "label": "AvgCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "AvgCounter(Clock* clock,\n             StatsCounterObserver* observer,\n             bool include_empty_intervals)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "MaxCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "MaxCounter(Clock* clock,\n             StatsCounterObserver* observer,\n             int64_t process_intervals_ms)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "PercentCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PercentCounter(Clock* clock, StatsCounterObserver* observer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(bool sample)"
  },
  {
    "label": "PermilleCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "PermilleCounter(Clock* clock, StatsCounterObserver* observer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(bool sample)"
  },
  {
    "label": "RateCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RateCounter(Clock* clock,\n              StatsCounterObserver* observer,\n              bool include_empty_intervals)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "RateAccCounter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RateAccCounter(Clock* clock,\n                 StatsCounterObserver* observer,\n                 bool include_empty_intervals)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t sample, uint32_t stream_id)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast(int64_t sample, uint32_t stream_id)"
  }
]