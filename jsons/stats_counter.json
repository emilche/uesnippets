[
  {
    "label": "AggregatedCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AggregatedCounter"
  },
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "Samples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Samples"
  },
  {
    "label": "StatsCounterObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCounterObserver"
  },
  {
    "label": "AggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AggregatedStats"
  },
  {
    "label": "StatsCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCounter"
  },
  {
    "label": "AvgCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AvgCounter"
  },
  {
    "label": "MaxCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaxCounter"
  },
  {
    "label": "PercentCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PercentCounter"
  },
  {
    "label": "PermilleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PermilleCounter"
  },
  {
    "label": "RateCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateCounter"
  },
  {
    "label": "RateAccCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateAccCounter"
  },
  {
    "label": "OnMetricUpdated()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_STATS_COUNTER_H_ # define VIDEO_STATS_COUNTER_H_ # include<memory> # include<string> namespace webrtc { class AggregatedCounter ; class Clock ; class Samples ; class StatsCounterObserver { public : void)",
    "insertText": "OnMetricUpdated(int sample)"
  },
  {
    "label": "StatsCounterObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StatsCounterObserver()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } ; struct AggregatedStats { std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToStringWithMultiplier()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToStringWithMultiplier(int multiplier)"
  },
  {
    "label": "StatsCounter()",
    "kind": "Method",
    "detail": "Function (int64_t num_samples = 0 ; int min = - 1 ; int max = - 1 ; int average = - 1 ; } ; class StatsCounter { public : ~)",
    "insertText": "StatsCounter()"
  },
  {
    "label": "GetMetric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMetric(int* metric)"
  },
  {
    "label": "GetValueForEmptyInterval()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetValueForEmptyInterval()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (AggregatedStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "ProcessAndGetStats()",
    "kind": "Method",
    "detail": "Function (AggregatedStats)",
    "insertText": "ProcessAndGetStats()"
  },
  {
    "label": "ProcessAndPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndPause()"
  },
  {
    "label": "ProcessAndPauseForDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndPauseForDuration(int64_t min_pause_time_ms)"
  },
  {
    "label": "ProcessAndStopPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndStopPause()"
  },
  {
    "label": "HasSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSample()"
  },
  {
    "label": "StatsCounter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "StatsCounter(Clock* clock, int64_t process_intervals_ms, bool include_empty_intervals, StatsCounterObserver* observer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int sample)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t sample, uint32_t stream_id)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast(int64_t sample, uint32_t stream_id)"
  },
  {
    "label": "TimeToProcess()",
    "kind": "Method",
    "detail": "Function (const bool include_empty_intervals_ ; const int64_t process_intervals_ms_ ; const std::unique_ptr<AggregatedCounter> aggregated_counter_ ; const std::unique_ptr<Samples> samples_ ; private : bool)",
    "insertText": "TimeToProcess(int* num_elapsed_intervals)"
  },
  {
    "label": "TryProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryProcess()"
  },
  {
    "label": "ReportMetricToAggregatedCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMetricToAggregatedCounter(int value, int num_values_to_add)"
  },
  {
    "label": "IncludeEmptyIntervals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IncludeEmptyIntervals()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "ResumeIfMinTimePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeIfMinTimePassed()"
  },
  {
    "label": "AvgCounter()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const std::unique_ptr<StatsCounterObserver> observer_ ; int64_t last_process_time_ms_ ; bool paused_ ; int64_t pause_time_ms_ ; int64_t min_pause_time_ms_ ; } ; class AvgCounter : public StatsCounter { public :)",
    "insertText": "AvgCounter(Clock* clock, StatsCounterObserver* observer, bool include_empty_intervals)"
  },
  {
    "label": "AvgCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AvgCounter()"
  },
  {
    "label": "AvgCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AvgCounter(const AvgCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AvgCounter&)",
    "insertText": "operator(const AvgCounter&)"
  },
  {
    "label": "MaxCounter()",
    "kind": "Method",
    "detail": "Function (} ; class MaxCounter : public StatsCounter { public :)",
    "insertText": "MaxCounter(Clock* clock, StatsCounterObserver* observer, int64_t process_intervals_ms)"
  },
  {
    "label": "MaxCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MaxCounter()"
  },
  {
    "label": "MaxCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MaxCounter(const MaxCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MaxCounter&)",
    "insertText": "operator(const MaxCounter&)"
  },
  {
    "label": "PercentCounter()",
    "kind": "Method",
    "detail": "Function (} ; class PercentCounter : public StatsCounter { public :)",
    "insertText": "PercentCounter(Clock* clock, StatsCounterObserver* observer)"
  },
  {
    "label": "PercentCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PercentCounter()"
  },
  {
    "label": "PercentCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PercentCounter(const PercentCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PercentCounter&)",
    "insertText": "operator(const PercentCounter&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(bool sample)"
  },
  {
    "label": "PermilleCounter()",
    "kind": "Method",
    "detail": "Function (} ; class PermilleCounter : public StatsCounter { public :)",
    "insertText": "PermilleCounter(Clock* clock, StatsCounterObserver* observer)"
  },
  {
    "label": "PermilleCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PermilleCounter()"
  },
  {
    "label": "PermilleCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PermilleCounter(const PermilleCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PermilleCounter&)",
    "insertText": "operator(const PermilleCounter&)"
  },
  {
    "label": "RateCounter()",
    "kind": "Method",
    "detail": "Function (} ; class RateCounter : public StatsCounter { public :)",
    "insertText": "RateCounter(Clock* clock, StatsCounterObserver* observer, bool include_empty_intervals)"
  },
  {
    "label": "RateCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RateCounter()"
  },
  {
    "label": "RateCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RateCounter(const RateCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RateCounter&)",
    "insertText": "operator(const RateCounter&)"
  },
  {
    "label": "RateAccCounter()",
    "kind": "Method",
    "detail": "Function (} ; class RateAccCounter : public StatsCounter { public :)",
    "insertText": "RateAccCounter(Clock* clock, StatsCounterObserver* observer, bool include_empty_intervals)"
  },
  {
    "label": "RateAccCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RateAccCounter()"
  },
  {
    "label": "RateAccCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RateAccCounter(const RateAccCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RateAccCounter&)",
    "insertText": "operator(const RateAccCounter&)"
  }
]