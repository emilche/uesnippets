[
  {
    "label": "AGameplayDebuggerPlayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameplayDebuggerPlayerManager"
  },
  {
    "label": "FGameplayDebuggerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerModule"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleManager . h \" # include \" Engine / World . h \" # include \" GameplayDebugger . h \" # include \" GameplayDebuggerAddonManager . h \" class AGameplayDebuggerPlayerManager ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnLocalControllerInitialized) DECLARE_MULTICAST_DELEGATE(FOnLocalControllerUninitialized) DECLARE_MULTICAST_DELEGATE(FOnDebuggerEdMode)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "RegisterCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCategory(FName CategoryName, IGameplayDebugger::FOnGetCategory MakeInstanceDelegate, EGameplayDebuggerCategoryState CategoryState, int32 SlotIdx)"
  },
  {
    "label": "UnregisterCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCategory(FName CategoryName)"
  },
  {
    "label": "NotifyCategoriesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyCategoriesChanged()"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtension(FName ExtensionName, IGameplayDebugger::FOnGetExtension MakeInstanceDelegate)"
  },
  {
    "label": "UnregisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExtension(FName ExtensionName)"
  },
  {
    "label": "NotifyExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyExtensionsChanged()"
  },
  {
    "label": "GetPlayerManager()",
    "kind": "Method",
    "detail": "Function (AGameplayDebuggerPlayerManager&)",
    "insertText": "GetPlayerManager(UWorld* World)"
  },
  {
    "label": "OnWorldInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldInitialized(UWorld* World, const UWorld::InitializationValues IVS)"
  }
]