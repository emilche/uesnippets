[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "ICustomHitTestPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomHitTestPath"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FDebuggingFindNextFocusableWidgetArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebuggingFindNextFocusableWidgetArgs"
  },
  {
    "label": "FWidgetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWidgetSortData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetSortData"
  },
  {
    "label": "FWidgetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetData"
  },
  {
    "label": "FWidgetIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetIndex"
  },
  {
    "label": "FIndexAndDistance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexAndDistance"
  },
  {
    "label": "FGridTestingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridTestingParams"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FAppendedGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAppendedGridData"
  },
  {
    "label": "ICustomHitTestPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FastUpdate / SlateInvalidationWidgetSortOrder . h \" # include \" Layout / SlateRect . h \" # include \" Layout / ArrangedWidget . h \" # include \" Layout / Clipping . h \" # include \" Input / Events . h \" # include \" Widgets / SWidget . h \" class FArrangedChildren ; class ICustomHitTestPath { public : ~)",
    "insertText": "ICustomHitTestPath()"
  },
  {
    "label": "GetBubblePathAndVirtualCursors()",
    "kind": "Method",
    "detail": "Function (} TArray<FWidgetAndPointer>)",
    "insertText": "GetBubblePathAndVirtualCursors(const FGeometry& InGeometry, FVector2D DesktopSpaceCoordinate, bool bIgnoreEnabledStatus)"
  },
  {
    "label": "ArrangeCustomHitTestChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeCustomHitTestChildren(FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "TranslateMouseCoordinateForCustomHitTestChild()",
    "kind": "Method",
    "detail": "Function (TOptional<FVirtualPointerPosition>)",
    "insertText": "TranslateMouseCoordinateForCustomHitTestChild(const SWidget& ChildWidget, const FGeometry& MyGeometry, const FVector2D ScreenSpaceMouseCoordinate, const FVector2D LastScreenSpaceMouseCoordinate)"
  },
  {
    "label": "FHittestGrid()",
    "kind": "Method",
    "detail": "Function (} ; class FHittestGrid : public FNoncopyable { public :)",
    "insertText": "FHittestGrid()"
  },
  {
    "label": "GetBubblePath()",
    "kind": "Method",
    "detail": "Function (TArray<FWidgetAndPointer>)",
    "insertText": "GetBubblePath(UE::Slate::FDeprecateVector2DParameter DesktopSpaceCoordinate, float CursorRadius, bool bIgnoreEnabledStatus, int32 UserIndex = INDEX_NONE)"
  },
  {
    "label": "SetHittestArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHittestArea(const UE::Slate::FDeprecateVector2DParameter& HittestPositionInDesktop, const UE::Slate::FDeprecateVector2DParameter& HittestDimensions, const UE::Slate::FDeprecateVector2DParameter& HitestOffsetInWindow = FVector2f::ZeroVector)"
  },
  {
    "label": "InsertCustomHitTestPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertCustomHitTestPath(const SWidget* InWidget, const TSharedRef<ICustomHitTestPath>& CustomHitTestPath)"
  },
  {
    "label": "SetUserIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserIndex(int32 UserIndex)"
  },
  {
    "label": "SetCullingRect()",
    "kind": "Method",
    "detail": "Function (CurrentUserIndex = UserIndex ; } void)",
    "insertText": "SetCullingRect(const FSlateRect& InCullingRect)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (CullingRect = InCullingRect ; } void)",
    "insertText": "SetOwner(const SWidget* InOwner)"
  },
  {
    "label": "GetUserIndex()",
    "kind": "Method",
    "detail": "Function (Owner = InOwner ; } int32)",
    "insertText": "GetUserIndex()"
  },
  {
    "label": "GetGridSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetGridSize()"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(const SWidget* InWidget, int32 InBatchPriorityGroup, int32 InLayerId, FSlateInvalidationWidgetSortOrder InSecondarySort)"
  },
  {
    "label": "RemoveWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidget(const SWidget* InWidget)"
  },
  {
    "label": "UpdateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidget(const SWidget* InWidget, FSlateInvalidationWidgetSortOrder InSecondarySort)"
  },
  {
    "label": "ContainsWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsWidget(const SWidget* InWidget)"
  },
  {
    "label": "AddGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGrid(const TSharedRef<const FHittestGrid>& OtherGrid)"
  },
  {
    "label": "RemoveGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGrid(const TSharedRef<const FHittestGrid>& OtherGrid)"
  },
  {
    "label": "RemoveGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGrid(const SWidget* OtherGridOwner)"
  },
  {
    "label": "FWidgetResult()",
    "kind": "Method",
    "detail": "Function (struct FDebuggingFindNextFocusableWidgetArgs { struct FWidgetResult { const TSharedPtr<const SWidget> Widget ; const FText Result ;)",
    "insertText": "FWidgetResult(const TSharedPtr<const SWidget>& InWidget, FText InResult) : Widget(InWidget), Result(InResult)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ; const FArrangedWidget StartingWidget ; const EUINavigation Direction ; const FNavigationReply NavigationReply ; const FArrangedWidget RuleWidget ; const int32 UserIndex ; const TSharedPtr<const SWidget> Result ; TArray<FWidgetResult> IntermediateResults ; } ; # if WITH_SLATE_DEBUGGING)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FDebuggingFindNextFocusableWidget, const FHittestGrid* , const FDebuggingFindNextFocusableWidgetArgs&)"
  },
  {
    "label": "LogGrid()",
    "kind": "Method",
    "detail": "Function (FDebuggingFindNextFocusableWidget OnFindNextFocusableWidgetExecuted ; void)",
    "insertText": "LogGrid()"
  },
  {
    "label": "DisplayGrid()",
    "kind": "Method",
    "detail": "Function (enum class EDisplayGridFlags { None = 0,HideDisabledWidgets = 1<<0,HideUnsupportedKeyboardFocusWidgets = 1<<1,UseFocusBrush = 1<<2,} ; void)",
    "insertText": "DisplayGrid(int32 InLayer, const FGeometry& AllottedGeometry, FSlateWindowElementList& WindowElementList, EDisplayGridFlags DisplayFlags = EDisplayGridFlags::UseFocusBrush)"
  },
  {
    "label": "GetAllWidgetSortDatas()",
    "kind": "Method",
    "detail": "Function (struct FWidgetSortData { const TWeakPtr<SWidget> WeakWidget ; int64 PrimarySort ; FSlateInvalidationWidgetSortOrder SecondarySort ; } ; TArray<FWidgetSortData>)",
    "insertText": "GetAllWidgetSortDatas()"
  },
  {
    "label": "FWidgetData()",
    "kind": "Method",
    "detail": "Function (# endif private : struct FWidgetData {)",
    "insertText": "FWidgetData(const TWeakPtr<SWidget>& InWidget, const FIntPoint& InUpperLeftCell, const FIntPoint& InLowerRightCell, int64 InPrimarySort, FSlateInvalidationWidgetSortOrder InSecondarySort, int32 InUserIndex) : WeakWidget(InWidget) , UpperLeftCell(InUpperLeftCell) , LowerRightCell(InLowerRightCell) , PrimarySort(InPrimarySort) , SecondarySort(InSecondarySort) , UserIndex(InUserIndex)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SWidget> WeakWidget ; TWeakPtr<ICustomHitTestPath> CustomPath ; FIntPoint UpperLeftCell ; FIntPoint LowerRightCell ; int64 PrimarySort ; FSlateInvalidationWidgetSortOrder SecondarySort ; int32 UserIndex ; TSharedPtr<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "FWidgetIndex()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWidgetIndex {)",
    "insertText": "FWidgetIndex() : Grid(nullptr) , WidgetIndex(INDEX_NONE)"
  },
  {
    "label": "FWidgetIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetIndex(const FHittestGrid* InHittestGrid, int32 InIndex) : Grid(InHittestGrid) , WidgetIndex(InIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetWidgetData()",
    "kind": "Method",
    "detail": "Function (} const FWidgetData&)",
    "insertText": "GetWidgetData()"
  },
  {
    "label": "GetCullingRect()",
    "kind": "Method",
    "detail": "Function (const FSlateRect&)",
    "insertText": "GetCullingRect()"
  },
  {
    "label": "FIndexAndDistance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndexAndDistance(FWidgetIndex WidgetIndex, float InDistanceSq) : FWidgetIndex(WidgetIndex) , DistanceSqToWidget(InDistanceSq)"
  },
  {
    "label": "GetDistanceSqToWidget()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDistanceSqToWidget()"
  },
  {
    "label": "AddIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIndex(int32 WidgetIndex)"
  },
  {
    "label": "RemoveIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIndex(int32 WidgetIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetWidgetIndexes()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetWidgetIndexes()"
  },
  {
    "label": "IsValidCellCoord()",
    "kind": "Method",
    "detail": "Function (} const SWidget* CachedOwner ; TWeakPtr<const FHittestGrid> Grid ; } ; bool)",
    "insertText": "IsValidCellCoord(const FIntPoint& CellCoord)"
  },
  {
    "label": "IsValidCellCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCellCoord(const int32 XCoord, const int32 YCoord)"
  },
  {
    "label": "ClearInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInternal(int32 TotalCells)"
  },
  {
    "label": "GetHitIndexFromCellIndex()",
    "kind": "Method",
    "detail": "Function (FIndexAndDistance)",
    "insertText": "GetHitIndexFromCellIndex(const FGridTestingParams& Params)"
  },
  {
    "label": "IsDescendantOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDescendantOf(const SWidget* Parent, const FWidgetData& ChildData)"
  },
  {
    "label": "FindFocusableWidget()",
    "kind": "Method",
    "detail": "Function (template<TCompareFunc,TSourceSideFunc,TDestSideFunc> TSharedPtr<SWidget>)",
    "insertText": "FindFocusableWidget(const FSlateRect WidgetRect, const FSlateRect SweptRect, int32 AxisIndex, int32 Increment, const EUINavigation Direction, const FNavigationReply& NavigationReply, TCompareFunc CompareFunc, TSourceSideFunc SourceSideFunc, TDestSideFunc DestSideFunc, int32 UserIndex, TArray<FDebuggingFindNextFocusableWidgetArgs::FWidgetResult>* IntermediatedResultPtr, TSet<TSharedPtr<SWidget>>* DisabledDestinations)"
  },
  {
    "label": "GetCellCoordinate()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetCellCoordinate(UE::Slate::FDeprecateVector2DParameter Position)"
  },
  {
    "label": "SameSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SameSize(const FHittestGrid* OtherGrid)"
  },
  {
    "label": "GetCollapsedHittestGrid()",
    "kind": "Method",
    "detail": "Function (using FCollapsedHittestGridArray = TArray<const FHittestGrid*,TInlineAllocator<1 6>> ; void)",
    "insertText": "GetCollapsedHittestGrid(FCollapsedHittestGridArray& OutResult)"
  },
  {
    "label": "GetCollapsedWidgets()",
    "kind": "Method",
    "detail": "Function (using FCollapsedWidgetsArray = TArray<FWidgetIndex,TInlineAllocator<1 0 0>> ; void)",
    "insertText": "GetCollapsedWidgets(FCollapsedWidgetsArray& Out, const int32 X, const int32 Y)"
  },
  {
    "label": "RemoveStaleAppendedHittestGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaleAppendedHittestGrid()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : TMap<const SWidget*,int32> WidgetMap ; TSparseArray<FWidgetData> WidgetArray ; TArray<FCell> Cells ; TArray<FAppendedGridData> AppendedGridArray ; const SWidget* Owner ; FSlateRect CullingRect ; FIntPoint NumCells ; FVector2f GridOrigin ; FVector2f GridWindowOrigin ; FVector2f GridSize ; int32 CurrentUserIndex ; } ; # if WITH_SLATE_DEBUGGING)",
    "insertText": "ENUM_CLASS_FLAGS(FHittestGrid::EDisplayGridFlags)"
  }
]