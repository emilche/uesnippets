[
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "FNetworkPredictionData_Server_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server_Character"
  },
  {
    "label": "FSavedMove_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "INavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationData"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "FCharacterMovementComponentPostPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPostPhysicsTickFunction"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FCharacterMovementComponentPrePhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPrePhysicsTickFunction"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FSavedMove_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "INavigationDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationDataInterface"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FCharacterMovementComponentPrePhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPrePhysicsTickFunction"
  },
  {
    "label": "FCharacterMovementComponentPostPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPostPhysicsTickFunction"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FNetworkPredictionData_Client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client"
  },
  {
    "label": "FNetworkPredictionData_Server",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "FNetworkPredictionData_Server_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server_Character"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "FNetworkPredictionData_Server_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server_Character"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAvoidanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAvoidanceManager"
  },
  {
    "label": "FSavedMove_Character_FixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character_FixLayout"
  },
  {
    "label": "FSavedMove_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "EPostUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPostUpdateMode"
  },
  {
    "label": "CompressedFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CompressedFlags"
  },
  {
    "label": "FCharacterReplaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterReplaySample"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "FNetworkPredictionData_Server_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server_Character"
  },
  {
    "label": "braking()",
    "kind": "Method",
    "detail": "Function (when)",
    "insertText": "braking(whenever Acceleration = 0, or if character is exceeding max speed)"
  },
  {
    "label": "SetAvoidanceGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceGroup(int32 GroupFlags)"
  },
  {
    "label": "SetAvoidanceGroupMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceGroupMask(const FNavAvoidanceMask& GroupMask)"
  },
  {
    "label": "SetGroupsToAvoid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToAvoid(int32 GroupFlags)"
  },
  {
    "label": "SetGroupsToAvoidMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToAvoidMask(const FNavAvoidanceMask& GroupMask)"
  },
  {
    "label": "SetGroupsToIgnore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToIgnore(int32 GroupFlags)"
  },
  {
    "label": "SetGroupsToIgnoreMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToIgnoreMask(const FNavAvoidanceMask& GroupMask)"
  },
  {
    "label": "SetAvoidanceEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceEnabled(bool bEnable)"
  },
  {
    "label": "SetMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMovementMode(EMovementMode NewMovementMode, uint8 NewCustomMode = 0)"
  },
  {
    "label": "SetGroundMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroundMovementMode(EMovementMode NewGroundMovementMode)"
  },
  {
    "label": "OnMovementModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovementModeChanged(EMovementMode PreviousMovementMode, uint8 PreviousCustomMode)"
  },
  {
    "label": "ApplyNetworkMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNetworkMovementMode(const uint8 ReceivedMode)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "DisableMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMovement()"
  },
  {
    "label": "PerformAirControlForPathFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAirControlForPathFollowing(FVector Direction, float ZDiff)"
  },
  {
    "label": "StartFalling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFalling(int32 Iterations, float remainingTime, float timeTick, const FVector& Delta, const FVector& subLoc)"
  },
  {
    "label": "ShouldCatchAir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCatchAir(const FFindFloorResult& OldFloor, const FFindFloorResult& NewFloor)"
  },
  {
    "label": "HandleWalkingOffLedge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)"
  },
  {
    "label": "AdjustFloorHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustFloorHeight()"
  },
  {
    "label": "MaybeUpdateBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateBasedMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBasedMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateBasedRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBasedRotation(FRotator& FinalRotation, const FRotator& ReducedRotation)"
  },
  {
    "label": "MaybeSaveBaseLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSaveBaseLocation()"
  },
  {
    "label": "SaveBaseLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveBaseLocation()"
  },
  {
    "label": "ApplyImpartedMovementBaseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpartedMovementBaseVelocity()"
  },
  {
    "label": "StartNewPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartNewPhysics(float deltaTime, int32 Iterations)"
  },
  {
    "label": "DoJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoJump(bool bReplayingMoves)"
  },
  {
    "label": "DoJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoJump(bool bReplayingMoves, float DeltaTime)"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Launch(FVector const& LaunchVel)"
  },
  {
    "label": "HandlePendingLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePendingLaunch()"
  },
  {
    "label": "JumpOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpOff(AActor* MovementBaseActor)"
  },
  {
    "label": "ShouldJumpOutOfWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldJumpOutOfWater(FVector& JumpDir)"
  },
  {
    "label": "JumpOutOfWater()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpOutOfWater(FVector WallNormal)"
  },
  {
    "label": "ApplyRequestedMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRequestedMove(float DeltaTime, float MaxAccel, float MaxSpeed, float Friction, float BrakingDeceleration, FVector& OutAcceleration, float& OutRequestedSpeed)"
  },
  {
    "label": "NotifyJumpApex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyJumpApex()"
  },
  {
    "label": "CalcVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)"
  },
  {
    "label": "StepUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StepUp(const FVector& GravDir, const FVector& Delta, const FHitResult &Hit, FStepDownResult* OutStepDownResult = NULL)"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBase(UPrimitiveComponent* NewBase, const FName BoneName = NAME_None, bool bNotifyActor=true)"
  },
  {
    "label": "SetBaseFromFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseFromFloor(const FFindFloorResult& FloorResult)"
  },
  {
    "label": "ApplyDownwardForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDownwardForce(float DeltaSeconds)"
  },
  {
    "label": "ApplyRepulsionForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRepulsionForce(float DeltaSeconds)"
  },
  {
    "label": "ApplyAccumulatedForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAccumulatedForces(float DeltaSeconds)"
  },
  {
    "label": "ClearAccumulatedForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAccumulatedForces()"
  },
  {
    "label": "UpdateCharacterStateBeforeMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCharacterStateBeforeMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateCharacterStateAfterMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCharacterStateAfterMovement(float DeltaSeconds)"
  },
  {
    "label": "StartSwimming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSwimming(FVector OldLocation, FVector OldVelocity, float timeTick, float remainingTime, int32 Iterations)"
  },
  {
    "label": "Swim()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Swim(FVector Delta, FHitResult& Hit)"
  },
  {
    "label": "FindWaterLine()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindWaterLine(FVector Start, FVector End)"
  },
  {
    "label": "PhysFalling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysFalling(float deltaTime, int32 Iterations)"
  },
  {
    "label": "GetFallingLateralAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFallingLateralAcceleration(float DeltaTime)"
  },
  {
    "label": "GetAirControl()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAirControl(float DeltaTime, float TickAirControl, const FVector& FallAcceleration)"
  },
  {
    "label": "SetGravityDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityDirection(const FVector& GravityDir)"
  },
  {
    "label": "BoostAirControl()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "BoostAirControl(float DeltaTime, float TickAirControl, const FVector& FallAcceleration)"
  },
  {
    "label": "LimitAirControl()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "LimitAirControl(float DeltaTime, const FVector& FallAcceleration, const FHitResult& HitResult, bool bCheckForValidLandingSpot)"
  },
  {
    "label": "ProcessLanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLanded(const FHitResult& Hit, float remainingTime, int32 Iterations)"
  },
  {
    "label": "SetPostLandedPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostLandedPhysics(const FHitResult& Hit)"
  },
  {
    "label": "ControlledCharacterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControlledCharacterMove(const FVector& InputVector, float DeltaSeconds)"
  },
  {
    "label": "SetNavWalkingPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavWalkingPhysics(bool bEnable)"
  },
  {
    "label": "TryToLeaveNavWalking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToLeaveNavWalking()"
  },
  {
    "label": "ProjectLocationFromNavMesh()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectLocationFromNavMesh(float DeltaSeconds, const FVector& CurrentFeetLocation, const FVector& TargetNavLocation, float UpOffset, float DownOffset)"
  },
  {
    "label": "Crouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Crouch(bool bClientSimulation = false)"
  },
  {
    "label": "UnCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnCrouch(bool bClientSimulation = false)"
  },
  {
    "label": "SetCrouchedHalfHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrouchedHalfHeight(const float NewValue)"
  },
  {
    "label": "CheckFall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFall(const FFindFloorResult& OldFloor, const FHitResult& Hit, const FVector& Delta, const FVector& OldLocation, float remainingTime, float timeTick, int32 Iterations, bool bMustJump)"
  },
  {
    "label": "RevertMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RevertMove(const FVector& OldLocation, UPrimitiveComponent* OldBase, const FVector& InOldBaseLocation, const FFindFloorResult& OldFloor, bool bFailMove)"
  },
  {
    "label": "PhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsRotation(float DeltaTime)"
  },
  {
    "label": "SetDefaultMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMovementMode()"
  },
  {
    "label": "MoveSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSmooth(const FVector& InVelocity, const float DeltaSeconds, FStepDownResult* OutStepDownResult = NULL )"
  },
  {
    "label": "UpdateProxyAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProxyAcceleration()"
  },
  {
    "label": "AddImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulse( FVector Impulse, bool bVelocityChange = false )"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce( FVector Force )"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "CheckWaterJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckWaterJump(FVector CheckPoint, FVector& WallNormal)"
  },
  {
    "label": "SetWalkableFloorAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWalkableFloorAngle(float InWalkableFloorAngle)"
  },
  {
    "label": "SetWalkableFloorZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWalkableFloorZ(float InWalkableFloorZ)"
  },
  {
    "label": "PrePhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrePhysicsTickComponent(float DeltaTime, FCharacterMovementComponentPrePhysicsTickFunction& ThisTickFunction)"
  },
  {
    "label": "PostPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPhysicsTickComponent(float DeltaTime, FCharacterMovementComponentPostPhysicsTickFunction& ThisTickFunction)"
  },
  {
    "label": "PhysWalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysWalking(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysNavWalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysNavWalking(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysFlying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysFlying(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysSwimming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysSwimming(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysCustom(float deltaTime, int32 Iterations)"
  },
  {
    "label": "HandleSwimmingWallHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSwimmingWallHit(const FHitResult& Hit, float DeltaTime)"
  },
  {
    "label": "MoveAlongFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAlongFloor(const FVector& InVelocity, float DeltaSeconds, FStepDownResult* OutStepDownResult = NULL)"
  },
  {
    "label": "OnCharacterStuckInGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCharacterStuckInGeometry(const FHitResult* Hit)"
  },
  {
    "label": "MaintainHorizontalGroundVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaintainHorizontalGroundVelocity()"
  },
  {
    "label": "ApplyImpactPhysicsForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpactPhysicsForces(const FHitResult& Impact, const FVector& ImpactAcceleration, const FVector& ImpactVelocity)"
  },
  {
    "label": "ApplyVelocityBraking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityBraking(float DeltaTime, float Friction, float BrakingDeceleration)"
  },
  {
    "label": "CapsuleTouched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)"
  },
  {
    "label": "AdjustProxyCapsuleSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustProxyCapsuleSize()"
  },
  {
    "label": "OnMovementUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovementUpdated(float DeltaSeconds, const FVector& OldLocation, const FVector& OldVelocity)"
  },
  {
    "label": "CallMovementUpdateDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallMovementUpdateDelegate(float DeltaSeconds, const FVector& OldLocation, const FVector& OldVelocity)"
  },
  {
    "label": "OnUnableToFollowBaseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnableToFollowBaseMove(const FVector& DeltaPosition, const FVector& OldLocation, const FHitResult& MoveOnBaseHit)"
  },
  {
    "label": "AccumulateRootMotionForAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateRootMotionForAsync(float DeltaSeconds, FRootMotionAsyncData& RootMotion)"
  },
  {
    "label": "FillAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAsyncInput(const FVector& InputVector, FCharacterMovementComponentAsyncInput& AsyncInput)"
  },
  {
    "label": "BuildAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAsyncInput()"
  },
  {
    "label": "PostBuildAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostBuildAsyncInput()"
  },
  {
    "label": "ApplyAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncOutput(FCharacterMovementComponentAsyncOutput& Output)"
  },
  {
    "label": "ProcessAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncOutput()"
  },
  {
    "label": "RegisterAsyncCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsyncCallback()"
  },
  {
    "label": "PerformMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformMovement(float DeltaTime)"
  },
  {
    "label": "SimulatedTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulatedTick(float DeltaSeconds)"
  },
  {
    "label": "SimulateMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateMovement(float DeltaTime)"
  },
  {
    "label": "ForceReplicationUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceReplicationUpdate()"
  },
  {
    "label": "ForceClientAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceClientAdjustment()"
  },
  {
    "label": "PackYawAndPitchTo32()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackYawAndPitchTo32(const float Yaw, const float Pitch)"
  },
  {
    "label": "SmoothClientPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothClientPosition(float DeltaSeconds)"
  },
  {
    "label": "SmoothClientPosition_Interpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothClientPosition_Interpolate(float DeltaSeconds)"
  },
  {
    "label": "SmoothClientPosition_UpdateVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothClientPosition_UpdateVisuals()"
  },
  {
    "label": "ReplicateMoveToServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicateMoveToServer(float DeltaTime, const FVector& NewAcceleration)"
  },
  {
    "label": "ClientUpdatePositionAfterServerUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientUpdatePositionAfterServerUpdate()"
  },
  {
    "label": "CallServerMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallServerMove(const FSavedMove_Character* NewMove, const FSavedMove_Character* OldMove)"
  },
  {
    "label": "CallServerMovePacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallServerMovePacked(const FSavedMove_Character* NewMove, const FSavedMove_Character* PendingMove, const FSavedMove_Character* OldMove)"
  },
  {
    "label": "ServerMoveHandleClientError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveHandleClientError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerCheckClientError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerCheckClientError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerExceedsAllowablePositionError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerExceedsAllowablePositionError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerShouldUseAuthoritativePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerShouldUseAuthoritativePosition(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "MoveAutonomous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAutonomous( float ClientTimeStamp, float DeltaTime, uint8 CompressedFlags, const FVector& NewAccel)"
  },
  {
    "label": "UpdateFromCompressedFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromCompressedFlags(uint8 Flags)"
  },
  {
    "label": "CanDelaySendingMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelaySendingMove(const FSavedMovePtr& NewMove)"
  },
  {
    "label": "TickCharacterPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCharacterPose(float DeltaTime)"
  },
  {
    "label": "UpdateFloorFromAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFloorFromAdjustment()"
  },
  {
    "label": "VerifyClientTimeStamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyClientTimeStamp(float TimeStamp, FNetworkPredictionData_Server_Character & ServerData)"
  },
  {
    "label": "OnClientTimeStampResetDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientTimeStampResetDetected()"
  },
  {
    "label": "ProcessClientTimeStampForTimeDiscrepancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClientTimeStampForTimeDiscrepancy(float ClientTimeStamp, FNetworkPredictionData_Server_Character& ServerData)"
  },
  {
    "label": "OnTimeDiscrepancyDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeDiscrepancyDetected(float CurrentTimeDiscrepancy, float LifetimeRawTimeDiscrepancy, float Lifetime, float CurrentMoveError)"
  },
  {
    "label": "ServerMovePacked_ClientSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked_ClientSend(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ServerMovePacked_ServerReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked_ServerReceive(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "MoveResponsePacked_ServerSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveResponsePacked_ServerSend(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "MoveResponsePacked_ClientReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveResponsePacked_ClientReceive(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ClientAckGoodMove_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckGoodMove_Implementation(float TimeStamp)"
  },
  {
    "label": "ClientVeryShortAdjustPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVeryShortAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionPosition_Implementation(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionSourcePosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionSourcePosition_Implementation(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ServerMove_HandleMoveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_HandleMoveData(const FCharacterNetworkMoveDataContainer& MoveDataContainer)"
  },
  {
    "label": "ServerMove_PerformMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_PerformMovement(const FCharacterNetworkMoveData& MoveData)"
  },
  {
    "label": "ServerSendMoveResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSendMoveResponse(const FClientAdjustment& PendingAdjustment)"
  },
  {
    "label": "ClientHandleMoveResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientHandleMoveResponse(const FCharacterMoveResponseDataContainer& MoveResponse)"
  },
  {
    "label": "ServerMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMove_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDual_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDual_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveDualHybridRootMotion_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualHybridRootMotion_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveOld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveOld_Implementation(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveOld_Validate(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ClientAckGoodMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckGoodMove(float TimeStamp)"
  },
  {
    "label": "ClientAdjustPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustPosition(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientVeryShortAdjustPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVeryShortAdjustPosition(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionSourcePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionSourcePosition(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "OnClientCorrectionReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientCorrectionReceived(class FNetworkPredictionData_Client_Character& ClientData, float TimeStamp, FVector NewLocation, FVector NewVelocity, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode, FVector ServerGravityDirection)"
  },
  {
    "label": "ApplyRootMotionSource()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "ApplyRootMotionSource(TSharedPtr<FRootMotionSource> SourcePtr)"
  },
  {
    "label": "OnRootMotionSourceBeingApplied()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootMotionSourceBeingApplied(const FRootMotionSource* Source)"
  },
  {
    "label": "GetRootMotionSource()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRootMotionSource>)",
    "insertText": "GetRootMotionSource(FName InstanceName)"
  },
  {
    "label": "GetRootMotionSourceByID()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRootMotionSource>)",
    "insertText": "GetRootMotionSourceByID(uint16 RootMotionSourceID)"
  },
  {
    "label": "RemoveRootMotionSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRootMotionSource(FName InstanceName)"
  },
  {
    "label": "RemoveRootMotionSourceByID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRootMotionSourceByID(uint16 RootMotionSourceID)"
  },
  {
    "label": "ConvertRootMotionServerIDsToLocalIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRootMotionServerIDsToLocalIDs(const FRootMotionSourceGroup& LocalRootMotionToMatchWith, FRootMotionSourceGroup& InOutServerRootMotion, float TimeStamp)"
  },
  {
    "label": "RestorePreAdditiveRootMotionVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePreAdditiveRootMotionVelocity()"
  },
  {
    "label": "ApplyRootMotionToVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRootMotionToVelocity(float deltaTime)"
  },
  {
    "label": "DecayFormerBaseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecayFormerBaseVelocity(float deltaTime)"
  },
  {
    "label": "ConvertLocalRootMotionToWorld()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ConvertLocalRootMotionToWorld(const FTransform& InLocalRootMotion, float DeltaSeconds)"
  },
  {
    "label": "SimulateRootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateRootMotion(float DeltaSeconds, const FTransform& LocalRootMotionTransform)"
  },
  {
    "label": "CalcAvoidanceVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcAvoidanceVelocity(float DeltaTime)"
  },
  {
    "label": "PostProcessAvoidanceVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessAvoidanceVelocity(FVector& NewVelocity)"
  },
  {
    "label": "FlushServerMoves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushServerMoves()"
  },
  {
    "label": "UpdateDefaultAvoidance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDefaultAvoidance()"
  },
  {
    "label": "SetAvoidanceVelocityLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceVelocityLock(class UAvoidanceManager* Avoidance, float Duration)"
  },
  {
    "label": "IsMovingOnGround()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsMovingOnGround()"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSavedMove_Character()"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSavedMove_Character(const FSavedMove_Character&)"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSavedMove_Character(FSavedMove_Character&&)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "SetMoveFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveFor(ACharacter* C, float InDeltaTime, FVector const& NewAccel, class FNetworkPredictionData_Client_Character & ClientData)"
  },
  {
    "label": "SetInitialPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialPosition(ACharacter* C)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdate(ACharacter* C, EPostUpdateMode PostUpdateMode)"
  },
  {
    "label": "CombineWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineWith(const FSavedMove_Character* OldMove, ACharacter* InCharacter, APlayerController* PC, const FVector& OldStartLocation)"
  },
  {
    "label": "PrepMoveFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepMoveFor(ACharacter* C)"
  },
  {
    "label": "FNetworkPredictionData_Client_Character()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FNetworkPredictionData_Client_Character(const UCharacterMovementComponent& ClientMovement)"
  },
  {
    "label": "AckMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckMove(int32 AckedMoveIndex, UCharacterMovementComponent& CharacterMovementComponent)"
  },
  {
    "label": "AllocateNewMove()",
    "kind": "Method",
    "detail": "Function (FSavedMovePtr)",
    "insertText": "AllocateNewMove()"
  },
  {
    "label": "FreeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMove(const FSavedMovePtr& Move)"
  },
  {
    "label": "CreateSavedMove()",
    "kind": "Method",
    "detail": "Function (FSavedMovePtr)",
    "insertText": "CreateSavedMove()"
  },
  {
    "label": "UpdateTimeStampAndDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateTimeStampAndDeltaTime(float DeltaTime, ACharacter & CharacterOwner, class UCharacterMovementComponent & CharacterMovementComponent)"
  },
  {
    "label": "FNetworkPredictionData_Server_Character()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FNetworkPredictionData_Server_Character(const UCharacterMovementComponent& ServerMovement)"
  }
]