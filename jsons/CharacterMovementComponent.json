[
  {
    "label": "ACharacter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACharacter"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "FNetworkPredictionData_Server_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server_Character"
  },
  {
    "label": "FSavedMove_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "INavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationData"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "FCharacterMovementComponentPostPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPostPhysicsTickFunction"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FCharacterMovementComponentPrePhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMovementComponentPrePhysicsTickFunction"
  },
  {
    "label": "EMovementMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMovementMode"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "INavigationDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationDataInterface"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FNetworkPredictionData_Client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client"
  },
  {
    "label": "FNetworkPredictionData_Server",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Server"
  },
  {
    "label": "FNetworkPredictionData_Client_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPredictionData_Client_Character"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAvoidanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAvoidanceManager"
  },
  {
    "label": "FSavedMove_Character_FixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character_FixLayout"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "EPostUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPostUpdateMode"
  },
  {
    "label": "CompressedFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CompressedFlags"
  },
  {
    "label": "FCharacterReplaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterReplaySample"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / RandomStream . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Engine / NetSerialization . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" WorldCollision . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimMontage . h \" # include \" GameFramework / RootMotionSource . h \" # include \" AI / Navigation / NavigationAvoidanceTypes . h \" # include \" AI / RVOAvoidanceInterface . h \" # include \" GameFramework / PawnMovementComponent . h \" # include \" GameFramework / CharacterMovementReplication . h \" # include \" Interfaces / NetworkPredictionInterface . h \" # include \" CharacterMovementComponentAsync . h \" # include \" CharacterMovementComponent . generated . h \" class ACharacter ; class FDebugDisplayInfo ; class FNetworkPredictionData_Server_Character ; class FSavedMove_Character ; class UPrimitiveComponent ; class INavigationData ; class UCharacterMovementComponent ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(FTransform, FOnProcessRootMotion, const FTransform&, UCharacterMovementComponent*, float)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (const float MAX_STEP_SIDE_Z ; const float VERTICAL_SLOPE_NORMAL_Z ; } namespace CharacterMovementCVars { int32 AsyncCharacterMovement ; int32 ForceJumpPeakSubstep ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, enum ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage()"
  },
  {
    "label": "DiagnosticContext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DiagnosticContext(bool bDetailed)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FCharacterMovementComponentPrePhysicsTickFunction> : public TStructOpsTypeTraitsBase2<FCharacterMovementComponentPrePhysicsTickFunction> { enum { WithCopy = false } ; } ; typedef TSharedPtr<class FSavedMove_Character> FSavedMovePtr ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UCharacterMovementComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.0, \"Public access to this property is deprecated, and it will become private in a future release. Please use SetCrouchedHalfHeight and GetCrouchedHalfHeight instead.\") UPROPERTY(Category=\"Character Movement (General Settings)\", EditAnywhere, BlueprintReadWrite, BlueprintSetter=SetCrouchedHalfHeight, BlueprintGetter=GetCrouchedHalfHeight, meta=(ClampMin=\"0\", UIMin=\"0\", ForceUnits=cm))"
  },
  {
    "label": "ComputeAnalogInputModifier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeAnalogInputModifier()"
  },
  {
    "label": "GetLastUpdateQuat()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetLastUpdateQuat()"
  },
  {
    "label": "GetLastServerMovementBase()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "GetLastServerMovementBase()"
  },
  {
    "label": "ShouldCorrectRotation()",
    "kind": "Method",
    "detail": "Function (FVector AvoidanceLockVelocity ; float AvoidanceLockTimer ; public : bool)",
    "insertText": "ShouldCorrectRotation()"
  },
  {
    "label": "SetGroundMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroundMovementMode(EMovementMode NewGroundMovementMode)"
  },
  {
    "label": "GetGroundMovementMode()",
    "kind": "Method",
    "detail": "Function (EMovementMode)",
    "insertText": "GetGroundMovementMode()"
  },
  {
    "label": "PackNetworkMovementMode()",
    "kind": "Method",
    "detail": "Function (public : uint8)",
    "insertText": "PackNetworkMovementMode()"
  },
  {
    "label": "UnpackNetworkMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpackNetworkMovementMode(const uint8 ReceivedMode, TEnumAsByte<EMovementMode>& OutMode, uint8& OutCustomMode, TEnumAsByte<EMovementMode>& OutGroundMode)"
  },
  {
    "label": "ApplyNetworkMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNetworkMovementMode(const uint8 ReceivedMode)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Archive)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "RegisterComponentTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentTickFunctions(bool bRegister)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "GetMaxSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxSpeed()"
  },
  {
    "label": "StopActiveMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopActiveMovement()"
  },
  {
    "label": "IsCrouching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCrouching()"
  },
  {
    "label": "IsFalling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFalling()"
  },
  {
    "label": "IsMovingOnGround()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovingOnGround()"
  },
  {
    "label": "IsSwimming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSwimming()"
  },
  {
    "label": "IsFlying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlying()"
  },
  {
    "label": "GetGravityZ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGravityZ()"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(const FVector& Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(const FVector& Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bVelChange)"
  },
  {
    "label": "IsMovementInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovementInProgress()"
  },
  {
    "label": "RequestDirectMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDirectMove(const FVector& MoveVelocity, bool bForceMaxSpeed)"
  },
  {
    "label": "RequestPathMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPathMove(const FVector& MoveInput)"
  },
  {
    "label": "CanStartPathFollowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStartPathFollowing()"
  },
  {
    "label": "CanStopPathFollowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStopPathFollowing()"
  },
  {
    "label": "GetPathFollowingBrakingDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPathFollowingBrakingDistance(float MaxSpeed)"
  },
  {
    "label": "NotifyBumpedPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBumpedPawn(APawn* BumpedPawn)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "HasValidData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidData()"
  },
  {
    "label": "PerformAirControlForPathFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAirControlForPathFollowing(FVector Direction, float ZDiff)"
  },
  {
    "label": "ShouldPerformAirControlForPathFollowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPerformAirControlForPathFollowing()"
  },
  {
    "label": "StartFalling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFalling(int32 Iterations, float remainingTime, float timeTick, const FVector& Delta, const FVector& subLoc)"
  },
  {
    "label": "ShouldCatchAir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCatchAir(const FFindFloorResult& OldFloor, const FFindFloorResult& NewFloor)"
  },
  {
    "label": "HandleWalkingOffLedge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta)"
  },
  {
    "label": "AdjustFloorHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustFloorHeight()"
  },
  {
    "label": "MaybeUpdateBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateBasedMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateBasedMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBasedMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateBasedRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBasedRotation(FRotator& FinalRotation, const FRotator& ReducedRotation)"
  },
  {
    "label": "MaybeSaveBaseLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSaveBaseLocation()"
  },
  {
    "label": "SaveBaseLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveBaseLocation()"
  },
  {
    "label": "ApplyImpartedMovementBaseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpartedMovementBaseVelocity()"
  },
  {
    "label": "StartNewPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartNewPhysics(float deltaTime, int32 Iterations)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"This function has been deprecated. Please call DoJump(bool bReplayingMoves, float DeltaTime)\") ENGINE_API virtual bool DoJump(bool bReplayingMoves)"
  },
  {
    "label": "DoJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoJump(bool bReplayingMoves, float DeltaTime)"
  },
  {
    "label": "CanAttemptJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAttemptJump()"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Launch(FVector const& LaunchVel)"
  },
  {
    "label": "HandlePendingLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePendingLaunch()"
  },
  {
    "label": "JumpOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpOff(AActor* MovementBaseActor)"
  },
  {
    "label": "GetBestDirectionOffActor()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBestDirectionOffActor(AActor* BaseActor)"
  },
  {
    "label": "ShouldJumpOutOfWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldJumpOutOfWater(FVector& JumpDir)"
  },
  {
    "label": "JumpOutOfWater()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpOutOfWater(FVector WallNormal)"
  },
  {
    "label": "GetDeltaRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetDeltaRotation(float DeltaTime)"
  },
  {
    "label": "ComputeOrientToMovementRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "ComputeOrientToMovementRotation(const FRotator& CurrentRotation, float DeltaTime, FRotator& DeltaRotation)"
  },
  {
    "label": "ApplyRequestedMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRequestedMove(float DeltaTime, float MaxAccel, float MaxSpeed, float Friction, float BrakingDeceleration, FVector& OutAcceleration, float& OutRequestedSpeed)"
  },
  {
    "label": "NotifyJumpApex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyJumpApex()"
  },
  {
    "label": "NewFallVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "NewFallVelocity(const FVector& InitialVelocity, const FVector& Gravity, float DeltaTime)"
  },
  {
    "label": "ImmersionDepth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ImmersionDepth()"
  },
  {
    "label": "CanStepUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStepUp(const FHitResult& Hit)"
  },
  {
    "label": "StepUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StepUp(const FVector& GravDir, const FVector& Delta, const FHitResult &Hit, FStepDownResult* OutStepDownResult = NULL)"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBase(UPrimitiveComponent* NewBase, const FName BoneName = NAME_None, bool bNotifyActor=true)"
  },
  {
    "label": "SetBaseFromFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseFromFloor(const FFindFloorResult& FloorResult)"
  },
  {
    "label": "ApplyDownwardForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDownwardForce(float DeltaSeconds)"
  },
  {
    "label": "ApplyRepulsionForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRepulsionForce(float DeltaSeconds)"
  },
  {
    "label": "ApplyAccumulatedForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAccumulatedForces(float DeltaSeconds)"
  },
  {
    "label": "UpdateCharacterStateBeforeMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCharacterStateBeforeMovement(float DeltaSeconds)"
  },
  {
    "label": "UpdateCharacterStateAfterMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCharacterStateAfterMovement(float DeltaSeconds)"
  },
  {
    "label": "StartSwimming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSwimming(FVector OldLocation, FVector OldVelocity, float timeTick, float remainingTime, int32 Iterations)"
  },
  {
    "label": "Swim()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Swim(FVector Delta, FHitResult& Hit)"
  },
  {
    "label": "FindWaterLine()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindWaterLine(FVector Start, FVector End)"
  },
  {
    "label": "PhysFalling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysFalling(float deltaTime, int32 Iterations)"
  },
  {
    "label": "GetFallingLateralAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFallingLateralAcceleration(float DeltaTime)"
  },
  {
    "label": "ShouldLimitAirControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLimitAirControl(float DeltaTime, const FVector& FallAcceleration)"
  },
  {
    "label": "GetAirControl()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAirControl(float DeltaTime, float TickAirControl, const FVector& FallAcceleration)"
  },
  {
    "label": "RotateWorldToGravity()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "RotateWorldToGravity(const FVector& Gravity)"
  },
  {
    "label": "ProjectToGravityFloor()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "ProjectToGravityFloor(const FVector& Vector)"
  },
  {
    "label": "GetGravitySpaceZ()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetGravitySpaceZ(const FVector& Vector)"
  },
  {
    "label": "GetGravitySpaceComponentZ()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetGravitySpaceComponentZ(const FVector& Vector)"
  },
  {
    "label": "SetGravitySpaceZ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGravitySpaceZ(FVector& Vector, const FVector::FReal Z)"
  },
  {
    "label": "ProjectToGravityFloor()",
    "kind": "Method",
    "detail": "Function (Vector =)",
    "insertText": "ProjectToGravityFloor(Vector) - Z * GetGravityDirection()"
  },
  {
    "label": "BoostAirControl()",
    "kind": "Method",
    "detail": "Function (} protected : float)",
    "insertText": "BoostAirControl(float DeltaTime, float TickAirControl, const FVector& FallAcceleration)"
  },
  {
    "label": "LimitAirControl()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "LimitAirControl(float DeltaTime, const FVector& FallAcceleration, const FHitResult& HitResult, bool bCheckForValidLandingSpot)"
  },
  {
    "label": "ProcessLanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLanded(const FHitResult& Hit, float remainingTime, int32 Iterations)"
  },
  {
    "label": "SetPostLandedPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostLandedPhysics(const FHitResult& Hit)"
  },
  {
    "label": "ControlledCharacterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControlledCharacterMove(const FVector& InputVector, float DeltaSeconds)"
  },
  {
    "label": "SetNavWalkingPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavWalkingPhysics(bool bEnable)"
  },
  {
    "label": "GetNavData()",
    "kind": "Method",
    "detail": "Function (const class INavigationDataInterface*)",
    "insertText": "GetNavData()"
  },
  {
    "label": "TryToLeaveNavWalking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToLeaveNavWalking()"
  },
  {
    "label": "ProjectLocationFromNavMesh()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectLocationFromNavMesh(float DeltaSeconds, const FVector& CurrentFeetLocation, const FVector& TargetNavLocation, float UpOffset, float DownOffset)"
  },
  {
    "label": "FindBestNavMeshLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBestNavMeshLocation(const FVector& TraceStart, const FVector& TraceEnd, const FVector& CurrentFeetLocation, const FVector& TargetNavLocation, FHitResult& OutHitResult)"
  },
  {
    "label": "ShouldComputeAccelerationToReachRequestedVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldComputeAccelerationToReachRequestedVelocity(const float RequestedSpeed)"
  },
  {
    "label": "OnTeleported()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnTeleported()"
  },
  {
    "label": "Crouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Crouch(bool bClientSimulation = false)"
  },
  {
    "label": "UnCrouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnCrouch(bool bClientSimulation = false)"
  },
  {
    "label": "CanCrouchInCurrentState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCrouchInCurrentState()"
  },
  {
    "label": "CheckLedgeDirection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckLedgeDirection(const FVector& OldLocation, const FVector& SideStep, const FFindFloorResult& OldFloor)"
  },
  {
    "label": "GetLedgeMove()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLedgeMove(const FVector& OldLocation, const FVector& Delta, const FFindFloorResult& OldFloor)"
  },
  {
    "label": "CheckFall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFall(const FFindFloorResult& OldFloor, const FHitResult& Hit, const FVector& Delta, const FVector& OldLocation, float remainingTime, float timeTick, int32 Iterations, bool bMustJump)"
  },
  {
    "label": "RevertMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RevertMove(const FVector& OldLocation, UPrimitiveComponent* OldBase, const FVector& InOldBaseLocation, const FFindFloorResult& OldFloor, bool bFailMove)"
  },
  {
    "label": "PhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsRotation(float DeltaTime)"
  },
  {
    "label": "ShouldRemainVertical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRemainVertical()"
  },
  {
    "label": "PhysicsVolumeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsVolumeChanged(class APhysicsVolume* NewVolume)"
  },
  {
    "label": "SetDefaultMovementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMovementMode()"
  },
  {
    "label": "MoveSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSmooth(const FVector& InVelocity, const float DeltaSeconds, FStepDownResult* OutStepDownResult = NULL)"
  },
  {
    "label": "UpdateProxyAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProxyAcceleration()"
  },
  {
    "label": "SetUpdatedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdatedComponent(USceneComponent* NewUpdatedComponent)"
  },
  {
    "label": "GetMovementName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMovementName()"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(class UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "VisualizeMovement()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "VisualizeMovement()"
  },
  {
    "label": "CheckWaterJump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckWaterJump(FVector CheckPoint, FVector& WallNormal)"
  },
  {
    "label": "CanWalkOffLedges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanWalkOffLedges()"
  },
  {
    "label": "PrePhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (struct FCharacterMovementComponentPrePhysicsTickFunction PrePhysicsTickFunction ; void)",
    "insertText": "PrePhysicsTickComponent(float DeltaTime, FCharacterMovementComponentPrePhysicsTickFunction& ThisTickFunction)"
  },
  {
    "label": "PostPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPhysicsTickComponent(float DeltaTime, FCharacterMovementComponentPostPhysicsTickFunction& ThisTickFunction)"
  },
  {
    "label": "PhysWalking()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PhysWalking(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysNavWalking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysNavWalking(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysFlying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysFlying(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysSwimming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysSwimming(float deltaTime, int32 Iterations)"
  },
  {
    "label": "PhysCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysCustom(float deltaTime, int32 Iterations)"
  },
  {
    "label": "HandleSwimmingWallHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSwimmingWallHit(const FHitResult& Hit, float DeltaTime)"
  },
  {
    "label": "ComputeGroundMovementDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeGroundMovementDelta(const FVector& Delta, const FHitResult& RampHit, const bool bHitFromLineTrace)"
  },
  {
    "label": "MoveAlongFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAlongFloor(const FVector& InVelocity, float DeltaSeconds, FStepDownResult* OutStepDownResult = NULL)"
  },
  {
    "label": "OnCharacterStuckInGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCharacterStuckInGeometry(const FHitResult* Hit)"
  },
  {
    "label": "MaintainHorizontalGroundVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaintainHorizontalGroundVelocity()"
  },
  {
    "label": "GetPenetrationAdjustment()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPenetrationAdjustment(const FHitResult& Hit)"
  },
  {
    "label": "ResolvePenetrationImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePenetrationImpl(const FVector& Adjustment, const FHitResult& Hit, const FQuat& NewRotation)"
  },
  {
    "label": "HandleImpact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleImpact(const FHitResult& Hit, float TimeSlice=0.f, const FVector& MoveDelta = FVector::ZeroVector)"
  },
  {
    "label": "ApplyImpactPhysicsForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpactPhysicsForces(const FHitResult& Impact, const FVector& ImpactAcceleration, const FVector& ImpactVelocity)"
  },
  {
    "label": "SlideAlongSurface()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SlideAlongSurface(const FVector& Delta, float Time, const FVector& Normal, FHitResult& Hit, bool bHandleImpact)"
  },
  {
    "label": "TwoWallAdjust()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TwoWallAdjust(FVector& WorldSpaceDelta, const FHitResult& Hit, const FVector& OldHitNormal)"
  },
  {
    "label": "ComputeSlideVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeSlideVector(const FVector& Delta, const float Time, const FVector& Normal, const FHitResult& Hit)"
  },
  {
    "label": "HandleSlopeBoosting()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "HandleSlopeBoosting(const FVector& SlideResult, const FVector& Delta, const float Time, const FVector& Normal, const FHitResult& Hit)"
  },
  {
    "label": "ApplyVelocityBraking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityBraking(float DeltaTime, float Friction, float BrakingDeceleration)"
  },
  {
    "label": "IsWithinEdgeTolerance()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsWithinEdgeTolerance(const FVector& CapsuleLocation, const FVector& TestImpactPoint, const float CapsuleRadius)"
  },
  {
    "label": "FindFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFloor(const FVector& CapsuleLocation, FFindFloorResult& OutFloorResult, bool bCanUseCachedLocation, const FHitResult* DownwardSweepResult = NULL)"
  },
  {
    "label": "ComputeFloorDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFloorDist(const FVector& CapsuleLocation, float LineDistance, float SweepDistance, FFindFloorResult& OutFloorResult, float SweepRadius, const FHitResult* DownwardSweepResult = NULL)"
  },
  {
    "label": "FloorSweepTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FloorSweepTest(struct FHitResult& OutHit, const FVector& Start, const FVector& End, ECollisionChannel TraceChannel, const struct FCollisionShape& CollisionShape, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParam)"
  },
  {
    "label": "IsValidLandingSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidLandingSpot(const FVector& CapsuleLocation, const FHitResult& Hit)"
  },
  {
    "label": "ShouldCheckForValidLandingSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckForValidLandingSpot(float DeltaTime, const FVector& Delta, const FHitResult& Hit)"
  },
  {
    "label": "ShouldComputePerchResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldComputePerchResult(const FHitResult& InHit, bool bCheckRadius = true)"
  },
  {
    "label": "ComputePerchResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePerchResult(const float TestRadius, const FHitResult& InHit, const float InMaxFloorDist, FFindFloorResult& OutPerchFloorResult)"
  },
  {
    "label": "GetPawnCapsuleExtent()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPawnCapsuleExtent(const EShrinkCapsuleExtent ShrinkMode, const float CustomShrinkAmount = 0.f)"
  },
  {
    "label": "GetPawnCapsuleCollisionShape()",
    "kind": "Method",
    "detail": "Function (FCollisionShape)",
    "insertText": "GetPawnCapsuleCollisionShape(const EShrinkCapsuleExtent ShrinkMode, const float CustomShrinkAmount = 0.f)"
  },
  {
    "label": "AdjustProxyCapsuleSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustProxyCapsuleSize()"
  },
  {
    "label": "ConstrainInputAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConstrainInputAcceleration(const FVector& InputAcceleration)"
  },
  {
    "label": "ScaleInputAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ScaleInputAcceleration(const FVector& InputAcceleration)"
  },
  {
    "label": "OnMovementUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovementUpdated(float DeltaSeconds, const FVector& OldLocation, const FVector& OldVelocity)"
  },
  {
    "label": "CallMovementUpdateDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallMovementUpdateDelegate(float DeltaSeconds, const FVector& OldLocation, const FVector& OldVelocity)"
  },
  {
    "label": "OnUnableToFollowBaseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnableToFollowBaseMove(const FVector& DeltaPosition, const FVector& OldLocation, const FHitResult& MoveOnBaseHit)"
  },
  {
    "label": "AccumulateRootMotionForAsync()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AccumulateRootMotionForAsync(float DeltaSeconds, FRootMotionAsyncData& RootMotion)"
  },
  {
    "label": "FillAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAsyncInput(const FVector& InputVector, FCharacterMovementComponentAsyncInput& AsyncInput)"
  },
  {
    "label": "BuildAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAsyncInput()"
  },
  {
    "label": "PostBuildAsyncInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostBuildAsyncInput()"
  },
  {
    "label": "ApplyAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncOutput(FCharacterMovementComponentAsyncOutput& Output)"
  },
  {
    "label": "ProcessAsyncOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncOutput()"
  },
  {
    "label": "RegisterAsyncCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsyncCallback()"
  },
  {
    "label": "IsAsyncCallbackRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncCallbackRegistered()"
  },
  {
    "label": "FindNavFloor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "FindNavFloor(const FVector& TestLocation, FNavLocation& NavFloorLocation)"
  },
  {
    "label": "PerformMovement()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PerformMovement(float DeltaTime)"
  },
  {
    "label": "SimulatedTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulatedTick(float DeltaSeconds)"
  },
  {
    "label": "SimulateMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateMovement(float DeltaTime)"
  },
  {
    "label": "ServerAutonomousProxyTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerAutonomousProxyTick(float DeltaSeconds)"
  },
  {
    "label": "ForceReplicationUpdate()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "ForceReplicationUpdate()"
  },
  {
    "label": "ForceClientAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceClientAdjustment()"
  },
  {
    "label": "GetNetworkSafeRandomAngleDegrees()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNetworkSafeRandomAngleDegrees()"
  },
  {
    "label": "RoundAcceleration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RoundAcceleration(FVector InAccel)"
  },
  {
    "label": "SendClientAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientAdjustment()"
  },
  {
    "label": "ForcePositionUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForcePositionUpdate(float DeltaTime)"
  },
  {
    "label": "SmoothCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothCorrection(const FVector& OldLocation, const FQuat& OldRotation, const FVector& NewLocation, const FQuat& NewRotation)"
  },
  {
    "label": "GetPredictionData_Client()",
    "kind": "Method",
    "detail": "Function (class FNetworkPredictionData_Client*)",
    "insertText": "GetPredictionData_Client()"
  },
  {
    "label": "GetPredictionData_Server()",
    "kind": "Method",
    "detail": "Function (class FNetworkPredictionData_Server*)",
    "insertText": "GetPredictionData_Server()"
  },
  {
    "label": "GetPredictionData_Client_Character()",
    "kind": "Method",
    "detail": "Function (class FNetworkPredictionData_Client_Character*)",
    "insertText": "GetPredictionData_Client_Character()"
  },
  {
    "label": "GetPredictionData_Server_Character()",
    "kind": "Method",
    "detail": "Function (class FNetworkPredictionData_Server_Character*)",
    "insertText": "GetPredictionData_Server_Character()"
  },
  {
    "label": "HasPredictionData_Client()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPredictionData_Client()"
  },
  {
    "label": "HasPredictionData_Server()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPredictionData_Server()"
  },
  {
    "label": "ResetPredictionData_Client()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPredictionData_Client()"
  },
  {
    "label": "ResetPredictionData_Server()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPredictionData_Server()"
  },
  {
    "label": "PackYawAndPitchTo32()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackYawAndPitchTo32(const float Yaw, const float Pitch)"
  },
  {
    "label": "SmoothClientPosition()",
    "kind": "Method",
    "detail": "Function (protected : class FNetworkPredictionData_Client_Character* ClientPredictionData ; class FNetworkPredictionData_Server_Character* ServerPredictionData ; FRandomStream RandomStream ; void)",
    "insertText": "SmoothClientPosition(float DeltaSeconds)"
  },
  {
    "label": "SmoothClientPosition_Interpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothClientPosition_Interpolate(float DeltaSeconds)"
  },
  {
    "label": "SmoothClientPosition_UpdateVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothClientPosition_UpdateVisuals()"
  },
  {
    "label": "ReplicateMoveToServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicateMoveToServer(float DeltaTime, const FVector& NewAcceleration)"
  },
  {
    "label": "ClientUpdatePositionAfterServerUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClientUpdatePositionAfterServerUpdate()"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(CallServerMove, CallServerMovePacked) ENGINE_API virtual void CallServerMove(const FSavedMove_Character* NewMove, const FSavedMove_Character* OldMove)"
  },
  {
    "label": "CallServerMovePacked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallServerMovePacked(const FSavedMove_Character* NewMove, const FSavedMove_Character* PendingMove, const FSavedMove_Character* OldMove)"
  },
  {
    "label": "ServerMoveHandleClientError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMoveHandleClientError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerCheckClientError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerCheckClientError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerExceedsAllowablePositionError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerExceedsAllowablePositionError(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerShouldUseAuthoritativePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerShouldUseAuthoritativePosition(float ClientTimeStamp, float DeltaTime, const FVector& Accel, const FVector& ClientWorldLocation, const FVector& RelativeClientLocation, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "MoveAutonomous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAutonomous(float ClientTimeStamp, float DeltaTime, uint8 CompressedFlags, const FVector& NewAccel)"
  },
  {
    "label": "UpdateFromCompressedFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromCompressedFlags(uint8 Flags)"
  },
  {
    "label": "CanDelaySendingMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelaySendingMove(const FSavedMovePtr& NewMove)"
  },
  {
    "label": "GetClientNetSendDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClientNetSendDeltaTime(const APlayerController* PC, const FNetworkPredictionData_Client_Character* ClientData, const FSavedMovePtr& NewMove)"
  },
  {
    "label": "TickCharacterPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCharacterPose(float DeltaTime)"
  },
  {
    "label": "ShouldCancelAdaptiveReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCancelAdaptiveReplication()"
  },
  {
    "label": "UpdateFloorFromAdjustment()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateFloorFromAdjustment()"
  },
  {
    "label": "VerifyClientTimeStamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyClientTimeStamp(float TimeStamp, FNetworkPredictionData_Server_Character & ServerData)"
  },
  {
    "label": "IsClientTimeStampValid()",
    "kind": "Method",
    "detail": "Function (protected : float LastTimeStampResetServerTime ; bool)",
    "insertText": "IsClientTimeStampValid(float TimeStamp, const FNetworkPredictionData_Server_Character& ServerData, bool& bTimeStampResetDetected)"
  },
  {
    "label": "OnClientTimeStampResetDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClientTimeStampResetDetected()"
  },
  {
    "label": "ProcessClientTimeStampForTimeDiscrepancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClientTimeStampForTimeDiscrepancy(float ClientTimeStamp, FNetworkPredictionData_Server_Character& ServerData)"
  },
  {
    "label": "OnTimeDiscrepancyDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeDiscrepancyDetected(float CurrentTimeDiscrepancy, float LifetimeRawTimeDiscrepancy, float Lifetime, float CurrentMoveError)"
  },
  {
    "label": "ServerMovePacked_ClientSend()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ServerMovePacked_ClientSend(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ServerMovePacked_ServerReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMovePacked_ServerReceive(const FCharacterServerMovePackedBits& PackedBits)"
  },
  {
    "label": "ShouldUsePackedMovementRPCs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUsePackedMovementRPCs()"
  },
  {
    "label": "MoveResponsePacked_ServerSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveResponsePacked_ServerSend(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "MoveResponsePacked_ClientReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveResponsePacked_ClientReceive(const FCharacterMoveResponsePackedBits& PackedBits)"
  },
  {
    "label": "ClientAckGoodMove_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAckGoodMove_Implementation(float TimeStamp)"
  },
  {
    "label": "ClientAdjustPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode, TOptional<FRotator> OptionalRotation = TOptional<FRotator>())"
  },
  {
    "label": "ClientVeryShortAdjustPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientVeryShortAdjustPosition_Implementation(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionPosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionPosition_Implementation(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ClientAdjustRootMotionSourcePosition_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientAdjustRootMotionSourcePosition_Implementation(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "ServerMove_HandleMoveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_HandleMoveData(const FCharacterNetworkMoveDataContainer& MoveDataContainer)"
  },
  {
    "label": "ServerMove_PerformMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerMove_PerformMovement(const FCharacterNetworkMoveData& MoveData)"
  },
  {
    "label": "ServerSendMoveResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerSendMoveResponse(const FClientAdjustment& PendingAdjustment)"
  },
  {
    "label": "ClientHandleMoveResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientHandleMoveResponse(const FCharacterMoveResponseDataContainer& MoveResponse)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMove, ServerMovePacked_ClientSend) ENGINE_API virtual void ServerMove(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMove_Implementation, ServerMove_PerformMovement) ENGINE_API virtual void ServerMove_Implementation(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMove_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMove_Validate(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDual, ServerMovePacked_ClientSend) ENGINE_API virtual void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDual_Implementation, ServerMove_PerformMovement) ENGINE_API virtual void ServerMoveDual_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDual_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDual_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualHybridRootMotion, ServerMovePacked_ClientSend) ENGINE_API virtual void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveDualHybridRootMotion_Implementation, ServerMove_PerformMovement) ENGINE_API virtual void ServerMoveDualHybridRootMotion_Implementation(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "ServerMoveDualHybridRootMotion_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveDualHybridRootMotion_Validate(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveOld, ServerMovePacked_ClientSend) ENGINE_API virtual void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ServerMoveOld_Implementation, ServerMove_PerformMovement) ENGINE_API virtual void ServerMoveOld_Implementation(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "ServerMoveOld_Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ServerMoveOld_Validate(float OldTimeStamp, FVector_NetQuantize10 OldAccel, uint8 OldMoveFlags)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAckGoodMove, ClientHandleMoveResponse) ENGINE_API virtual void ClientAckGoodMove(float TimeStamp)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustPosition, ClientHandleMoveResponse) ENGINE_API virtual void ClientAdjustPosition(float TimeStamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientVeryShortAdjustPosition, ClientHandleMoveResponse) ENGINE_API virtual void ClientVeryShortAdjustPosition(float TimeStamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionPosition, ClientHandleMoveResponse) ENGINE_API virtual void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(ClientAdjustRootMotionSourcePosition, ClientHandleMoveResponse) ENGINE_API virtual void ClientAdjustRootMotionSourcePosition(float TimeStamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode)"
  },
  {
    "label": "OnClientCorrectionReceived()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnClientCorrectionReceived(class FNetworkPredictionData_Client_Character& ClientData, float TimeStamp, FVector NewLocation, FVector NewVelocity, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode, FVector ServerGravityDirection)"
  },
  {
    "label": "SetNetworkMoveDataContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkMoveDataContainer(FCharacterNetworkMoveDataContainer& PersistentDataStorage)"
  },
  {
    "label": "GetNetworkMoveDataContainer()",
    "kind": "Method",
    "detail": "Function (NetworkMoveDataContainerPtr =& PersistentDataStorage ; } FCharacterNetworkMoveDataContainer&)",
    "insertText": "GetNetworkMoveDataContainer()"
  },
  {
    "label": "SetMoveResponseDataContainer()",
    "kind": "Method",
    "detail": "Function (CurrentNetworkMoveData = CurrentData ; } void)",
    "insertText": "SetMoveResponseDataContainer(FCharacterMoveResponseDataContainer& PersistentDataStorage)"
  },
  {
    "label": "GetMoveResponseDataContainer()",
    "kind": "Method",
    "detail": "Function (MoveResponseDataContainerPtr =& PersistentDataStorage ; } FCharacterMoveResponseDataContainer&)",
    "insertText": "GetMoveResponseDataContainer()"
  },
  {
    "label": "GetCurrentReplayedSavedMove()",
    "kind": "Method",
    "detail": "Function (CurrentReplayedSavedMove = SavedMove ; } public : const FSavedMove_Character*)",
    "insertText": "GetCurrentReplayedSavedMove()"
  },
  {
    "label": "HasRootMotionSources()",
    "kind": "Method",
    "detail": "Function (FRootMotionAsyncData AsyncRootMotion ; bool)",
    "insertText": "HasRootMotionSources()"
  },
  {
    "label": "ApplyRootMotionSource()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "ApplyRootMotionSource(TSharedPtr<FRootMotionSource> SourcePtr)"
  },
  {
    "label": "OnRootMotionSourceBeingApplied()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootMotionSourceBeingApplied(const FRootMotionSource* Source)"
  },
  {
    "label": "GetRootMotionSource()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRootMotionSource>)",
    "insertText": "GetRootMotionSource(FName InstanceName)"
  },
  {
    "label": "GetRootMotionSourceByID()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRootMotionSource>)",
    "insertText": "GetRootMotionSourceByID(uint16 RootMotionSourceID)"
  },
  {
    "label": "RemoveRootMotionSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRootMotionSource(FName InstanceName)"
  },
  {
    "label": "RemoveRootMotionSourceByID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRootMotionSourceByID(uint16 RootMotionSourceID)"
  },
  {
    "label": "ConvertRootMotionServerIDsToLocalIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRootMotionServerIDsToLocalIDs(const FRootMotionSourceGroup& LocalRootMotionToMatchWith, FRootMotionSourceGroup& InOutServerRootMotion, float TimeStamp)"
  },
  {
    "label": "TInlineAllocator()",
    "kind": "Method",
    "detail": "Function (enum class ERootMotionMapping : uint32 { MapSize = 1 6 } ; TArray<FRootMotionServerToLocalIDMapping,)",
    "insertText": "TInlineAllocator(uint32)"
  },
  {
    "label": "RestorePreAdditiveRootMotionVelocity()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RestorePreAdditiveRootMotionVelocity()"
  },
  {
    "label": "ApplyRootMotionToVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRootMotionToVelocity(float deltaTime)"
  },
  {
    "label": "DecayFormerBaseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecayFormerBaseVelocity(float deltaTime)"
  },
  {
    "label": "HasAnimRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnimRootMotion()"
  },
  {
    "label": "SimulateRootMotion()",
    "kind": "Method",
    "detail": "Function (FOnProcessRootMotion ProcessRootMotionPreConvertToWorld ; FOnProcessRootMotion ProcessRootMotionPostConvertToWorld ; void)",
    "insertText": "SimulateRootMotion(float DeltaSeconds, const FTransform& LocalRootMotionTransform)"
  },
  {
    "label": "CalcAnimRootMotionVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalcAnimRootMotionVelocity(const FVector& RootMotionDeltaMove, float DeltaSeconds, const FVector& CurrentVelocity)"
  },
  {
    "label": "ConstrainAnimRootMotionVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConstrainAnimRootMotionVelocity(const FVector& RootMotionVelocity, const FVector& CurrentVelocity)"
  },
  {
    "label": "CalcAvoidanceVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcAvoidanceVelocity(float DeltaTime)"
  },
  {
    "label": "PostProcessAvoidanceVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessAvoidanceVelocity(FVector& NewVelocity)"
  },
  {
    "label": "FlushServerMoves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushServerMoves()"
  },
  {
    "label": "GetTeleportType()",
    "kind": "Method",
    "detail": "Function (ETeleportType)",
    "insertText": "GetTeleportType()"
  },
  {
    "label": "UpdateDefaultAvoidance()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateDefaultAvoidance()"
  },
  {
    "label": "SetAvoidanceVelocityLock()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetAvoidanceVelocityLock(class UAvoidanceManager* Avoidance, float Duration)"
  },
  {
    "label": "SetRVOAvoidanceUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRVOAvoidanceUID(int32 UID)"
  },
  {
    "label": "GetRVOAvoidanceUID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRVOAvoidanceUID()"
  },
  {
    "label": "SetRVOAvoidanceWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRVOAvoidanceWeight(float Weight)"
  },
  {
    "label": "GetRVOAvoidanceWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRVOAvoidanceWeight()"
  },
  {
    "label": "GetRVOAvoidanceOrigin()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetRVOAvoidanceOrigin()"
  },
  {
    "label": "GetRVOAvoidanceRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRVOAvoidanceRadius()"
  },
  {
    "label": "GetRVOAvoidanceHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRVOAvoidanceHeight()"
  },
  {
    "label": "GetRVOAvoidanceConsiderationRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRVOAvoidanceConsiderationRadius()"
  },
  {
    "label": "GetVelocityForRVOConsideration()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetVelocityForRVOConsideration()"
  },
  {
    "label": "SetAvoidanceGroupMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceGroupMask(int32 GroupFlags)"
  },
  {
    "label": "GetAvoidanceGroupMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAvoidanceGroupMask()"
  },
  {
    "label": "SetGroupsToAvoidMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToAvoidMask(int32 GroupFlags)"
  },
  {
    "label": "GetGroupsToAvoidMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupsToAvoidMask()"
  },
  {
    "label": "SetGroupsToIgnoreMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToIgnoreMask(int32 GroupFlags)"
  },
  {
    "label": "GetGroupsToIgnoreMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupsToIgnoreMask()"
  },
  {
    "label": "GetRVOAvoidanceUIDFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRVOAvoidanceUIDFast()"
  },
  {
    "label": "CompressAxisToShort()",
    "kind": "Method",
    "detail": "Function (const uint32 YawShort =)",
    "insertText": "CompressAxisToShort(Yaw)"
  },
  {
    "label": "CompressAxisToShort()",
    "kind": "Method",
    "detail": "Function (const uint32 PitchShort =)",
    "insertText": "CompressAxisToShort(Pitch)"
  },
  {
    "label": "Rotation32()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Rotation32(YawShort << 16)"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (} ; class FSavedMove_Character : public FSavedMove_Character_FixLayout { public :)",
    "insertText": "FSavedMove_Character()"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavedMove_Character(const FSavedMove_Character&)"
  },
  {
    "label": "FSavedMove_Character()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavedMove_Character(FSavedMove_Character&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSavedMove_Character&)",
    "insertText": "operator(const FSavedMove_Character&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSavedMove_Character&)",
    "insertText": "operator(FSavedMove_Character&&)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (ACharacter* CharacterOwner ; uint8 bPressedJump : 1 ; uint8 bWantsToCrouch : 1 ; uint8 bForceMaxAccel : 1 ; uint8 bForceNoCombine : 1 ; uint8 bOldTimeStampBeforeReset : 1 ; uint8 bWasJumping : 1 ;)",
    "insertText": "UE_DEPRECATED_FORGAME(4.20, \"This property is deprecated, use StartPackedMovementMode or EndPackedMovementMode instead.\")"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (uint8 StartPackedMovementMode ; uint8 EndPackedMovementMode ; float TimeStamp ; float DeltaTime ; float CustomTimeDilation ; float JumpKeyHoldTime ; float JumpForceTimeRemaining ; int32 JumpMaxCount ; int32 JumpCurrentCount ; FVector StartLocation ; FVector StartRelativeLocation ; FVector StartVelocity ; FFindFloorResult StartFloor ; FRotator StartRotation ; FRotator StartControlRotation ; FQuat StartBaseRotation ; float StartCapsuleRadius ; float StartCapsuleHalfHeight ; TWeakObjectPtr<UPrimitiveComponent> StartBase ; FName StartBoneName ; uint32 StartActorOverlapCounter ; uint32 StartComponentOverlapCounter ; TWeakObjectPtr<USceneComponent> StartAttachParent ; FName StartAttachSocketName ; FVector StartAttachRelativeLocation ; FRotator StartAttachRelativeRotation ; FVector SavedLocation ; FRotator SavedRotation ; FVector SavedVelocity ; FVector SavedRelativeLocation ; FVector SavedRelativeAcceleration ; FRotator SavedControlRotation ; TWeakObjectPtr<UPrimitiveComponent> EndBase ; FName EndBoneName ; uint32 EndActorOverlapCounter ; uint32 EndComponentOverlapCounter ; TWeakObjectPtr<USceneComponent> EndAttachParent ; FName EndAttachSocketName ; FVector EndAttachRelativeLocation ; FRotator EndAttachRelativeRotation ; FVector Acceleration ; float MaxSpeed ; FVector AccelNormal ; float AccelMag ; TWeakObjectPtr<class UAnimMontage> RootMotionMontage ; float RootMotionTrackPosition ; float RootMotionPreviousTrackPosition ; float RootMotionPlayRateWithScale ; FRootMotionMovementParams RootMotionMovement ; FRootMotionSourceGroup SavedRootMotion ; float AccelDotThreshold ; float AccelMagThreshold ; float AccelDotThresholdCombine ; float MaxSpeedThresholdCombine ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "SetMoveFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveFor(ACharacter* C, float InDeltaTime, FVector const& NewAccel, class FNetworkPredictionData_Client_Character & ClientData)"
  },
  {
    "label": "SetInitialPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialPosition(ACharacter* C)"
  },
  {
    "label": "IsImportantMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportantMove(const FSavedMovePtr& LastAckedMove)"
  },
  {
    "label": "GetRevertedLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetRevertedLocation()"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (enum EPostUpdateMode { PostUpdate_Record,PostUpdate_Replay,} ; void)",
    "insertText": "PostUpdate(ACharacter* C, EPostUpdateMode PostUpdateMode)"
  },
  {
    "label": "CanCombineWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCombineWith(const FSavedMovePtr& NewMove, ACharacter* InCharacter, float MaxDelta)"
  },
  {
    "label": "CombineWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineWith(const FSavedMove_Character* OldMove, ACharacter* InCharacter, APlayerController* PC, const FVector& OldStartLocation)"
  },
  {
    "label": "PrepMoveFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepMoveFor(ACharacter* C)"
  },
  {
    "label": "GetCompressedFlags()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCompressedFlags()"
  },
  {
    "label": "IsMatchingStartControlRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMatchingStartControlRotation(const APlayerController* PC)"
  },
  {
    "label": "GetPackedAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackedAngles(uint32& YawAndPitchPack, uint8& RollPack)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "FCharacterReplaySample()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS class FCharacterReplaySample { public :)",
    "insertText": "FCharacterReplaySample() : RemoteViewPitch( 0 ), Time( 0.0f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FCharacterReplaySample& V)"
  },
  {
    "label": "FNetworkPredictionData_Client_Character()",
    "kind": "Method",
    "detail": "Function (FVector Location ; FRotator Rotation ; FVector Velocity ; FVector Acceleration ; uint8 RemoteViewPitch ; float Time ; } ; class FNetworkPredictionData_Client_Character : public FNetworkPredictionData_Client,protected FNoncopyable { using Super = FNetworkPredictionData_Client ; public :)",
    "insertText": "FNetworkPredictionData_Client_Character(const UCharacterMovementComponent& ClientMovement)"
  },
  {
    "label": "FNetworkPredictionData_Client_Character()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetworkPredictionData_Client_Character()"
  },
  {
    "label": "GetSavedMoveIndex()",
    "kind": "Method",
    "detail": "Function (float ClientUpdateRealTime ; float CurrentTimeStamp ; float LastReceivedAckRealTime ; TArray<FSavedMovePtr> SavedMoves ; TArray<FSavedMovePtr> FreeMoves ; FSavedMovePtr PendingMove ; FSavedMovePtr LastAckedMove ; int32 MaxFreeMoveCount ; int32 MaxSavedMoveCount ; uint32 bUpdatePosition : 1 ; FVector OriginalMeshTranslationOffset ; FVector MeshTranslationOffset ; FQuat OriginalMeshRotationOffset ; FQuat MeshRotationOffset ; FQuat MeshRotationTarget ; float LastCorrectionDelta ; float LastCorrectionTime ; float MaxClientSmoothingDeltaTime ; double SmoothingServerTimeStamp ; double SmoothingClientTimeStamp ; float MaxSmoothNetUpdateDist ; float NoSmoothNetUpdateDist ; float SmoothNetUpdateTime ; float SmoothNetUpdateRotationTime ; float MaxMoveDeltaTime ; FVector LastSmoothLocation ; FVector LastServerLocation ; float SimulatedDebugDrawTime ; TArray<FCharacterReplaySample> ReplaySamples ; int32)",
    "insertText": "GetSavedMoveIndex(float TimeStamp)"
  },
  {
    "label": "AckMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckMove(int32 AckedMoveIndex, UCharacterMovementComponent& CharacterMovementComponent)"
  },
  {
    "label": "AllocateNewMove()",
    "kind": "Method",
    "detail": "Function (FSavedMovePtr)",
    "insertText": "AllocateNewMove()"
  },
  {
    "label": "FreeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMove(const FSavedMovePtr& Move)"
  },
  {
    "label": "CreateSavedMove()",
    "kind": "Method",
    "detail": "Function (FSavedMovePtr)",
    "insertText": "CreateSavedMove()"
  },
  {
    "label": "UpdateTimeStampAndDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateTimeStampAndDeltaTime(float DeltaTime, ACharacter & CharacterOwner, class UCharacterMovementComponent & CharacterMovementComponent)"
  },
  {
    "label": "FNetworkPredictionData_Server_Character()",
    "kind": "Method",
    "detail": "Function (float DebugForcedPacketLossTimerStart ; } ; class FNetworkPredictionData_Server_Character : public FNetworkPredictionData_Server,protected FNoncopyable { public :)",
    "insertText": "FNetworkPredictionData_Server_Character(const UCharacterMovementComponent& ServerMovement)"
  },
  {
    "label": "FNetworkPredictionData_Server_Character()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetworkPredictionData_Server_Character()"
  },
  {
    "label": "GetServerMoveDeltaTime()",
    "kind": "Method",
    "detail": "Function (FClientAdjustment PendingAdjustment ; float CurrentClientTimeStamp ; float LastReceivedClientTimeStamp ; double ServerAccumulatedClientTimeStamp ; float LastUpdateTime ; float ServerTimeStampLastServerMove ; float MaxMoveDeltaTime ; uint32 bForceClientUpdate : 1 ; float LifetimeRawTimeDiscrepancy ; float TimeDiscrepancy ; bool bResolvingTimeDiscrepancy ; float TimeDiscrepancyResolutionMoveDeltaOverride ; float TimeDiscrepancyAccumulatedClientDeltasSinceLastServerTick ; float WorldCreationTime ; float)",
    "insertText": "GetServerMoveDeltaTime(float ClientTimeStamp, float ActorTimeDilation)"
  },
  {
    "label": "GetBaseServerMoveDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBaseServerMoveDeltaTime(float ClientTimeStamp, float ActorTimeDilation)"
  }
]