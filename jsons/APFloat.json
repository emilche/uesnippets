[
  {
    "label": "fltSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fltSemantics"
  },
  {
    "label": "APSInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APSInt"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "lostFraction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "lostFraction"
  },
  {
    "label": "APFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APFloat"
  },
  {
    "label": "cmpResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "cmpResult"
  },
  {
    "label": "roundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "roundingMode"
  },
  {
    "label": "opStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "opStatus"
  },
  {
    "label": "fltCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "fltCategory"
  },
  {
    "label": "uninitializedTag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "uninitializedTag"
  },
  {
    "label": "IlogbErrorKinds",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IlogbErrorKinds"
  },
  {
    "label": "semanticsPrecision()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_APFLOAT_H # define LLVM_ADT_APFLOAT_H # include \" llvm / ADT / APInt . h \" namespace llvm { struct fltSemantics ; class APSInt ; class StringRef ; enum lostFraction { lfExactlyZero,lfLessThanHalf,lfExactlyHalf,lfMoreThanHalf } ; class APFloat { public : typedef signed short ExponentType ; const fltSemantics IEEEhalf ; const fltSemantics IEEEsingle ; const fltSemantics IEEEdouble ; const fltSemantics IEEEquad ; const fltSemantics PPCDoubleDouble ; const fltSemantics x87DoubleExtended ; const fltSemantics Bogus ; unsigned int)",
    "insertText": "semanticsPrecision(const fltSemantics &)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (enum cmpResult { cmpLessThan,cmpEqual,cmpGreaterThan,cmpUnordered } ; enum roundingMode { rmNearestTiesToEven,rmTowardPositive,rmTowardNegative,rmTowardZero,rmNearestTiesToAway } ; enum opStatus { opOK = 0 x00,opInvalidOp = 0 x01,opDivByZero = 0 x02,opOverflow = 0 x04,opUnderflow = 0 x08,opInexact = 0 x10 } ; enum fltCategory { fcInfinity,fcNaN,fcNormal,fcZero } ; enum uninitializedTag { uninitialized } ;)",
    "insertText": "APFloat(const fltSemantics &)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(const fltSemantics &, StringRef)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(const fltSemantics &, integerPart)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(const fltSemantics &, uninitializedTag)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(const fltSemantics &, const APInt &)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(double d)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(float f)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(const APFloat &)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "APFloat(APFloat &&)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "APFloat()"
  },
  {
    "label": "needsCleanup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "needsCleanup()"
  },
  {
    "label": "getZero()",
    "kind": "Method",
    "detail": "Function (} APFloat)",
    "insertText": "getZero(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "Val(Sem, uninitialized)"
  },
  {
    "label": "makeZero()",
    "kind": "Method",
    "detail": "Function (Val .)",
    "insertText": "makeZero(Negative)"
  },
  {
    "label": "makeInf()",
    "kind": "Method",
    "detail": "Function (Val .)",
    "insertText": "makeInf(Negative)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "fill(64, type)"
  },
  {
    "label": "getQNaN()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getQNaN(Sem, Negative, nullptr)"
  },
  {
    "label": "getQNaN()",
    "kind": "Method",
    "detail": "Function (} } APFloat)",
    "insertText": "getQNaN(const fltSemantics &Sem, bool Negative = false, const APInt *payload = nullptr)"
  },
  {
    "label": "getSNaN()",
    "kind": "Method",
    "detail": "Function (} APFloat)",
    "insertText": "getSNaN(const fltSemantics &Sem, bool Negative = false, const APInt *payload = nullptr)"
  },
  {
    "label": "getLargest()",
    "kind": "Method",
    "detail": "Function (} APFloat)",
    "insertText": "getLargest(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "getSmallest()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getSmallest(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "getSmallestNormalized()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getSmallestNormalized(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "getAllOnesValue()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getAllOnesValue(unsigned BitWidth, bool isIEEE = false)"
  },
  {
    "label": "getSizeInBits()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSizeInBits(const fltSemantics &Sem)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Profile(FoldingSetNodeID &NID)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "add(const APFloat &, roundingMode)"
  },
  {
    "label": "subtract()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "subtract(const APFloat &, roundingMode)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "multiply(const APFloat &, roundingMode)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "divide(const APFloat &, roundingMode)"
  },
  {
    "label": "remainder()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "remainder(const APFloat &)"
  },
  {
    "label": "mod()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "mod(const APFloat &, roundingMode)"
  },
  {
    "label": "fusedMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "fusedMultiplyAdd(const APFloat &, const APFloat &, roundingMode)"
  },
  {
    "label": "roundToIntegral()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "roundToIntegral(roundingMode)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "next(bool nextDown)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "operator(const APFloat &RHS)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (APFloat Result =* this ; Result .)",
    "insertText": "add(RHS, rmNearestTiesToEven)"
  },
  {
    "label": "subtract()",
    "kind": "Method",
    "detail": "Function (APFloat Result =* this ; Result .)",
    "insertText": "subtract(RHS, rmNearestTiesToEven)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (APFloat Result =* this ; Result .)",
    "insertText": "multiply(RHS, rmNearestTiesToEven)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (APFloat Result =* this ; Result .)",
    "insertText": "divide(RHS, rmNearestTiesToEven)"
  },
  {
    "label": "clearSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearSign()"
  },
  {
    "label": "copySign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copySign(const APFloat &)"
  },
  {
    "label": "copySign()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "copySign(APFloat Value, const APFloat &Sign)"
  },
  {
    "label": "copySign()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "copySign(Sign)"
  },
  {
    "label": "convertToInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertToInteger(integerPart *, unsigned int, bool, roundingMode, bool *)"
  },
  {
    "label": "convertToInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertToInteger(APSInt &, roundingMode, bool *)"
  },
  {
    "label": "convertFromAPInt()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromAPInt(const APInt &, bool, roundingMode)"
  },
  {
    "label": "convertFromSignExtendedInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromSignExtendedInteger(const integerPart *, unsigned int, bool, roundingMode)"
  },
  {
    "label": "convertFromZeroExtendedInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromZeroExtendedInteger(const integerPart *, unsigned int, bool, roundingMode)"
  },
  {
    "label": "convertFromString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromString(StringRef, roundingMode)"
  },
  {
    "label": "bitcastToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "bitcastToAPInt()"
  },
  {
    "label": "convertToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "convertToFloat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const APFloat &)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (cmpResult)",
    "insertText": "compare(const APFloat &)"
  },
  {
    "label": "bitwiseIsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bitwiseIsEqual(const APFloat &)"
  },
  {
    "label": "convertToHexString()",
    "kind": "Method",
    "detail": "Function (# if 0 unsigned int)",
    "insertText": "convertToHexString(char *dst, unsigned int hexDigits, bool upperCase, roundingMode)"
  },
  {
    "label": "isNegative()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "isNegative()"
  },
  {
    "label": "isFinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFinite()"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isZero()"
  },
  {
    "label": "isInfinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInfinity()"
  },
  {
    "label": "getCategory()",
    "kind": "Method",
    "detail": "Function (fltCategory)",
    "insertText": "getCategory()"
  },
  {
    "label": "isPosZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPosZero()"
  },
  {
    "label": "isNegZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNegZero()"
  },
  {
    "label": "isSmallest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSmallest()"
  },
  {
    "label": "isLargest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLargest()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APFloat&)",
    "insertText": "operator(APFloat &&)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const APFloat &Arg)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toString(SmallVectorImpl<char> &Str, unsigned FormatPrecision = 0, unsigned FormatMaxPadding = 3)"
  },
  {
    "label": "getExactInverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getExactInverse(APFloat *inv)"
  },
  {
    "label": "ilogb()",
    "kind": "Method",
    "detail": "Function (enum IlogbErrorKinds { IEK_Zero = INT_MIN + 1,IEK_NaN = INT_MIN,IEK_Inf = INT_MAX } ; int)",
    "insertText": "ilogb(const APFloat &Arg)"
  },
  {
    "label": "significandParts()",
    "kind": "Method",
    "detail": "Function (private : integerPart*)",
    "insertText": "significandParts()"
  },
  {
    "label": "partCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "partCount()"
  },
  {
    "label": "addSignificand()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "addSignificand(const APFloat &)"
  },
  {
    "label": "subtractSignificand()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "subtractSignificand(const APFloat &, integerPart)"
  },
  {
    "label": "addOrSubtractSignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "addOrSubtractSignificand(const APFloat &, bool subtract)"
  },
  {
    "label": "multiplySignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "multiplySignificand(const APFloat &, const APFloat *)"
  },
  {
    "label": "divideSignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "divideSignificand(const APFloat &)"
  },
  {
    "label": "incrementSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementSignificand()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const fltSemantics *)"
  },
  {
    "label": "shiftSignificandLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftSignificandLeft(unsigned int)"
  },
  {
    "label": "shiftSignificandRight()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "shiftSignificandRight(unsigned int)"
  },
  {
    "label": "significandLSB()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "significandLSB()"
  },
  {
    "label": "significandMSB()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "significandMSB()"
  },
  {
    "label": "zeroSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zeroSignificand()"
  },
  {
    "label": "isSignificandAllOnes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSignificandAllOnes()"
  },
  {
    "label": "isSignificandAllZeros()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSignificandAllZeros()"
  },
  {
    "label": "addOrSubtractSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "addOrSubtractSpecials(const APFloat &, bool subtract)"
  },
  {
    "label": "divideSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "divideSpecials(const APFloat &)"
  },
  {
    "label": "multiplySpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "multiplySpecials(const APFloat &)"
  },
  {
    "label": "modSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "modSpecials(const APFloat &)"
  },
  {
    "label": "makeLargest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeLargest(bool Neg = false)"
  },
  {
    "label": "makeSmallest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeSmallest(bool Neg = false)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeNaN(bool SNaN = false, bool Neg = false, const APInt *fill = nullptr)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "makeNaN(const fltSemantics &Sem, bool SNaN, bool Negative, const APInt *fill)"
  },
  {
    "label": "makeInf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeInf(bool Neg = false)"
  },
  {
    "label": "makeZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeZero(bool Neg = false)"
  },
  {
    "label": "convertFromStringSpecials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertFromStringSpecials(StringRef str)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "normalize(roundingMode, lostFraction)"
  },
  {
    "label": "addOrSubtract()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "addOrSubtract(const APFloat &, roundingMode, bool subtract)"
  },
  {
    "label": "compareAbsoluteValue()",
    "kind": "Method",
    "detail": "Function (cmpResult)",
    "insertText": "compareAbsoluteValue(const APFloat &)"
  },
  {
    "label": "handleOverflow()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "handleOverflow(roundingMode)"
  },
  {
    "label": "roundAwayFromZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "roundAwayFromZero(roundingMode, lostFraction, unsigned int)"
  },
  {
    "label": "convertToSignExtendedInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertToSignExtendedInteger(integerPart *, unsigned int, bool, roundingMode, bool *)"
  },
  {
    "label": "convertFromUnsignedParts()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromUnsignedParts(const integerPart *, unsigned int, roundingMode)"
  },
  {
    "label": "convertFromHexadecimalString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromHexadecimalString(StringRef, roundingMode)"
  },
  {
    "label": "convertFromDecimalString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromDecimalString(StringRef, roundingMode)"
  },
  {
    "label": "convertNormalToHexString()",
    "kind": "Method",
    "detail": "Function (# if 0 char*)",
    "insertText": "convertNormalToHexString(char *dst, unsigned int hexDigits, bool upperCase, roundingMode rounding_mode)"
  },
  {
    "label": "roundSignificandWithExponent()",
    "kind": "Method",
    "detail": "Function (# endif opStatus)",
    "insertText": "roundSignificandWithExponent(const integerPart *, unsigned int, int, roundingMode)"
  },
  {
    "label": "convertHalfAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertHalfAPFloatToAPInt()"
  },
  {
    "label": "convertFloatAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertFloatAPFloatToAPInt()"
  },
  {
    "label": "convertDoubleAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertDoubleAPFloatToAPInt()"
  },
  {
    "label": "convertQuadrupleAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertQuadrupleAPFloatToAPInt()"
  },
  {
    "label": "convertF80LongDoubleAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertF80LongDoubleAPFloatToAPInt()"
  },
  {
    "label": "convertPPCDoubleDoubleAPFloatToAPInt()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "convertPPCDoubleDoubleAPFloatToAPInt()"
  },
  {
    "label": "initFromAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromAPInt(const fltSemantics *Sem, const APInt &api)"
  },
  {
    "label": "initFromHalfAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromHalfAPInt(const APInt &api)"
  },
  {
    "label": "initFromFloatAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromFloatAPInt(const APInt &api)"
  },
  {
    "label": "initFromDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromDoubleAPInt(const APInt &api)"
  },
  {
    "label": "initFromQuadrupleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromQuadrupleAPInt(const APInt &api)"
  },
  {
    "label": "initFromF80LongDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromF80LongDoubleAPInt(const APInt &api)"
  },
  {
    "label": "initFromPPCDoubleDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromPPCDoubleDoubleAPInt(const APInt &api)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(const APFloat &)"
  },
  {
    "label": "copySignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copySignificand(const APFloat &)"
  },
  {
    "label": "freeSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeSignificand()"
  },
  {
    "label": "scalbn()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "scalbn(APFloat X, int Exp)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "abs(APFloat X)"
  },
  {
    "label": "maxnum()",
    "kind": "Method",
    "detail": "Function (} LLVM_READONLY APFloat)",
    "insertText": "maxnum(const APFloat &A, const APFloat &B)"
  }
]