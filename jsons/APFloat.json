[
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "fltSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fltSemantics"
  },
  {
    "label": "APSInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APSInt"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "lostFraction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "lostFraction"
  },
  {
    "label": "APFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APFloat"
  },
  {
    "label": "cmpResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "cmpResult"
  },
  {
    "label": "roundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "roundingMode"
  },
  {
    "label": "opStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "opStatus"
  },
  {
    "label": "fltCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "fltCategory"
  },
  {
    "label": "used",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "used"
  },
  {
    "label": "uninitializedTag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "uninitializedTag"
  },
  {
    "label": "IlogbErrorKinds",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IlogbErrorKinds"
  },
  {
    "label": "semanticsPrecision()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "semanticsPrecision(const fltSemantics &)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "APFloat(double d)"
  },
  {
    "label": "APFloat()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "APFloat(float f)"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "Val(Sem, uninitialized)"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "Val(Sem, uninitialized)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (APInt)",
    "insertText": "fill(64, type)"
  },
  {
    "label": "getQNaN()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getQNaN(Sem, Negative, &fill)"
  },
  {
    "label": "getQNaN()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getQNaN(Sem, Negative, nullptr)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "makeNaN(Sem, false, Negative, payload)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "makeNaN(Sem, true, Negative, payload)"
  },
  {
    "label": "getLargest()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getLargest(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "getSmallest()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getSmallest(const fltSemantics &Sem, bool Negative = false)"
  },
  {
    "label": "getSmallestNormalized()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getSmallestNormalized(const fltSemantics &Sem,\n                                       bool Negative = false)"
  },
  {
    "label": "getAllOnesValue()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getAllOnesValue(unsigned BitWidth, bool isIEEE = false)"
  },
  {
    "label": "getSizeInBits()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSizeInBits(const fltSemantics &Sem)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "add(const APFloat &, roundingMode)"
  },
  {
    "label": "subtract()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "subtract(const APFloat &, roundingMode)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "multiply(const APFloat &, roundingMode)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "divide(const APFloat &, roundingMode)"
  },
  {
    "label": "remainder()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "remainder(const APFloat &)"
  },
  {
    "label": "mod()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "mod(const APFloat &, roundingMode)"
  },
  {
    "label": "fusedMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "fusedMultiplyAdd(const APFloat &, const APFloat &, roundingMode)"
  },
  {
    "label": "roundToIntegral()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "roundToIntegral(roundingMode)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "next(bool nextDown)"
  },
  {
    "label": "changeSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeSign()"
  },
  {
    "label": "clearSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearSign()"
  },
  {
    "label": "copySign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copySign(const APFloat &)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convert(const fltSemantics &, roundingMode, bool *)"
  },
  {
    "label": "convertFromAPInt()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromAPInt(const APInt &, bool, roundingMode)"
  },
  {
    "label": "convertFromSignExtendedInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromSignExtendedInteger(const integerPart *, unsigned int,\n                                          bool, roundingMode)"
  },
  {
    "label": "convertFromZeroExtendedInteger()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromZeroExtendedInteger(const integerPart *, unsigned int,\n                                          bool, roundingMode)"
  },
  {
    "label": "convertFromString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromString(StringRef, roundingMode)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const APFloat &Arg)"
  },
  {
    "label": "scalbn()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "scalbn(APFloat X, int Exp)"
  },
  {
    "label": "addSignificand()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "addSignificand(const APFloat &)"
  },
  {
    "label": "subtractSignificand()",
    "kind": "Method",
    "detail": "Function (integerPart)",
    "insertText": "subtractSignificand(const APFloat &, integerPart)"
  },
  {
    "label": "addOrSubtractSignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "addOrSubtractSignificand(const APFloat &, bool subtract)"
  },
  {
    "label": "multiplySignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "multiplySignificand(const APFloat &, const APFloat *)"
  },
  {
    "label": "divideSignificand()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "divideSignificand(const APFloat &)"
  },
  {
    "label": "incrementSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementSignificand()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const fltSemantics *)"
  },
  {
    "label": "shiftSignificandLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shiftSignificandLeft(unsigned int)"
  },
  {
    "label": "shiftSignificandRight()",
    "kind": "Method",
    "detail": "Function (lostFraction)",
    "insertText": "shiftSignificandRight(unsigned int)"
  },
  {
    "label": "zeroSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zeroSignificand()"
  },
  {
    "label": "addOrSubtractSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "addOrSubtractSpecials(const APFloat &, bool subtract)"
  },
  {
    "label": "divideSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "divideSpecials(const APFloat &)"
  },
  {
    "label": "multiplySpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "multiplySpecials(const APFloat &)"
  },
  {
    "label": "modSpecials()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "modSpecials(const APFloat &)"
  },
  {
    "label": "makeLargest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeLargest(bool Neg = false)"
  },
  {
    "label": "makeSmallest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeSmallest(bool Neg = false)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeNaN(bool SNaN = false, bool Neg = false,\n               const APInt *fill = nullptr)"
  },
  {
    "label": "makeNaN()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "makeNaN(const fltSemantics &Sem, bool SNaN, bool Negative,\n                         const APInt *fill)"
  },
  {
    "label": "makeInf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeInf(bool Neg = false)"
  },
  {
    "label": "makeZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeZero(bool Neg = false)"
  },
  {
    "label": "convertFromStringSpecials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertFromStringSpecials(StringRef str)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "normalize(roundingMode, lostFraction)"
  },
  {
    "label": "addOrSubtract()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "addOrSubtract(const APFloat &, roundingMode, bool subtract)"
  },
  {
    "label": "handleOverflow()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "handleOverflow(roundingMode)"
  },
  {
    "label": "convertFromUnsignedParts()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromUnsignedParts(const integerPart *, unsigned int,\n                                    roundingMode)"
  },
  {
    "label": "convertFromHexadecimalString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromHexadecimalString(StringRef, roundingMode)"
  },
  {
    "label": "convertFromDecimalString()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "convertFromDecimalString(StringRef, roundingMode)"
  },
  {
    "label": "roundSignificandWithExponent()",
    "kind": "Method",
    "detail": "Function (opStatus)",
    "insertText": "roundSignificandWithExponent(const integerPart *, unsigned int, int,\n                                        roundingMode)"
  },
  {
    "label": "initFromAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromAPInt(const fltSemantics *Sem, const APInt &api)"
  },
  {
    "label": "initFromHalfAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromHalfAPInt(const APInt &api)"
  },
  {
    "label": "initFromFloatAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromFloatAPInt(const APInt &api)"
  },
  {
    "label": "initFromDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromDoubleAPInt(const APInt &api)"
  },
  {
    "label": "initFromQuadrupleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromQuadrupleAPInt(const APInt &api)"
  },
  {
    "label": "initFromF80LongDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromF80LongDoubleAPInt(const APInt &api)"
  },
  {
    "label": "initFromPPCDoubleDoubleAPInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFromPPCDoubleDoubleAPInt(const APInt &api)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(const APFloat &)"
  },
  {
    "label": "copySignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copySignificand(const APFloat &)"
  },
  {
    "label": "freeSignificand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeSignificand()"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const APFloat &Arg)"
  },
  {
    "label": "scalbn()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "scalbn(APFloat X, int Exp)"
  }
]