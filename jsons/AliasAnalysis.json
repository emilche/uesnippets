[
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "VAArgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VAArgInst"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "MemTransferInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemTransferInst"
  },
  {
    "label": "MemIntrinsic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemIntrinsic"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "AliasResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AliasResult"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "ModRefResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModRefResult"
  },
  {
    "label": "ModRefBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModRefBehavior"
  },
  {
    "label": "InitializeAliasAnalysis()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_ALIASANALYSIS_H # define LLVM_ANALYSIS_ALIASANALYSIS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / IR / CallSite . h \" # include \" llvm / IR / Metadata . h \" # include \" llvm / Analysis / MemoryLocation . h \" namespace llvm { class LoadInst ; class StoreInst ; class VAArgInst ; class DataLayout ; class TargetLibraryInfo ; class Pass ; class AnalysisUsage ; class MemTransferInst ; class MemIntrinsic ; class DominatorTree ; enum AliasResult { NoAlias = 0,MayAlias,PartialAlias,MustAlias,} ; class AliasAnalysis { protected : const DataLayout* DL ; const TargetLibraryInfo* TLI ; private : AliasAnalysis* AA ; protected : void)",
    "insertText": "InitializeAliasAnalysis(Pass *P, const DataLayout *DL)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "AliasAnalysis()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "AliasAnalysis() : DL(nullptr), TLI(nullptr), AA(nullptr)"
  },
  {
    "label": "AliasAnalysis()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AliasAnalysis()"
  },
  {
    "label": "getTargetLibraryInfo()",
    "kind": "Method",
    "detail": "Function (const TargetLibraryInfo*)",
    "insertText": "getTargetLibraryInfo()"
  },
  {
    "label": "alias()",
    "kind": "Method",
    "detail": "Function (AliasResult)",
    "insertText": "alias(const MemoryLocation &LocA, const MemoryLocation &LocB)"
  },
  {
    "label": "alias()",
    "kind": "Method",
    "detail": "Function (AliasResult)",
    "insertText": "alias(const Value *V1, uint64_t V1Size, const Value *V2, uint64_t V2Size)"
  },
  {
    "label": "alias()",
    "kind": "Method",
    "detail": "Function (} AliasResult)",
    "insertText": "alias(const Value *V1, const Value *V2)"
  },
  {
    "label": "isNoAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoAlias(const MemoryLocation &LocA, const MemoryLocation &LocB)"
  },
  {
    "label": "isNoAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoAlias(const Value *V1, uint64_t V1Size, const Value *V2, uint64_t V2Size)"
  },
  {
    "label": "isNoAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoAlias(const Value *V1, const Value *V2)"
  },
  {
    "label": "isMustAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMustAlias(const MemoryLocation &LocA, const MemoryLocation &LocB)"
  },
  {
    "label": "isMustAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMustAlias(const Value *V1, const Value *V2)"
  },
  {
    "label": "pointsToConstantMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "pointsToConstantMemory(const MemoryLocation &Loc, bool OrLocal = false)"
  },
  {
    "label": "pointsToConstantMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pointsToConstantMemory(const Value *P, bool OrLocal = false)"
  },
  {
    "label": "getArgModRefInfo()",
    "kind": "Method",
    "detail": "Function (} enum ModRefResult { NoModRef = 0,Ref = 1,Mod = 2,ModRef = 3 } ; enum { Nowhere = 0,ArgumentPointees = 4,Anywhere = 8 | ArgumentPointees } ; enum ModRefBehavior { DoesNotAccessMemory = Nowhere | NoModRef,OnlyReadsArgumentPointees = ArgumentPointees | Ref,OnlyAccessesArgumentPointees = ArgumentPointees | ModRef,OnlyReadsMemory = Anywhere | Ref,UnknownModRefBehavior = Anywhere | ModRef } ; ModRefResult)",
    "insertText": "getArgModRefInfo(ImmutableCallSite CS, unsigned ArgIdx)"
  },
  {
    "label": "getModRefBehavior()",
    "kind": "Method",
    "detail": "Function (ModRefBehavior)",
    "insertText": "getModRefBehavior(ImmutableCallSite CS)"
  },
  {
    "label": "getModRefBehavior()",
    "kind": "Method",
    "detail": "Function (ModRefBehavior)",
    "insertText": "getModRefBehavior(const Function *F)"
  },
  {
    "label": "doesNotAccessMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesNotAccessMemory(ImmutableCallSite CS)"
  },
  {
    "label": "doesNotAccessMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesNotAccessMemory(const Function *F)"
  },
  {
    "label": "onlyReadsMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyReadsMemory(ImmutableCallSite CS)"
  },
  {
    "label": "onlyReadsMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyReadsMemory(const Function *F)"
  },
  {
    "label": "onlyReadsMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyReadsMemory(ModRefBehavior MRB)"
  },
  {
    "label": "onlyAccessesArgPointees()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyAccessesArgPointees(ModRefBehavior MRB)"
  },
  {
    "label": "doesAccessArgPointees()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesAccessArgPointees(ModRefBehavior MRB)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const Instruction *I)"
  },
  {
    "label": "getModRefBehavior()",
    "kind": "Method",
    "detail": "Function (auto MRB =)",
    "insertText": "getModRefBehavior(CS)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const Instruction *I, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (default : return NoModRef ; } } ModRefResult)",
    "insertText": "getModRefInfo(const Instruction *I, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(ImmutableCallSite CS, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(ImmutableCallSite CS, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const CallInst *C, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const CallInst *C, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const InvokeInst *I, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const InvokeInst *I, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const LoadInst *L, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const LoadInst *L, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const StoreInst *S, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const StoreInst *S, const Value *P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const FenceInst *S, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const AtomicCmpXchgInst *CX, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const AtomicCmpXchgInst *CX, const Value *P, unsigned Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const AtomicRMWInst *RMW, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const AtomicRMWInst *RMW, const Value *P, unsigned Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(const VAArgInst *I, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const VAArgInst* I, const Value* P, uint64_t Size)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (} ModRefResult)",
    "insertText": "getModRefInfo(Instruction *I, ImmutableCallSite Call)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(ImmutableCallSite CS1, ImmutableCallSite CS2)"
  },
  {
    "label": "callCapturesBefore()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "callCapturesBefore(const Instruction *I, const MemoryLocation &MemLoc, DominatorTree *DT)"
  },
  {
    "label": "callCapturesBefore()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "callCapturesBefore(const Instruction *I, const Value *P, uint64_t Size, DominatorTree *DT)"
  },
  {
    "label": "canBasicBlockModify()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canBasicBlockModify(const BasicBlock &BB, const MemoryLocation &Loc)"
  },
  {
    "label": "canBasicBlockModify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canBasicBlockModify(const BasicBlock &BB, const Value *P, uint64_t Size)"
  },
  {
    "label": "canInstructionRangeModRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canInstructionRangeModRef(const Instruction &I1, const Instruction &I2, const MemoryLocation &Loc, const ModRefResult Mode)"
  },
  {
    "label": "canInstructionRangeModRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canInstructionRangeModRef(const Instruction &I1, const Instruction &I2, const Value *Ptr, uint64_t Size, const ModRefResult Mode)"
  },
  {
    "label": "deleteValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleteValue(Value *V)"
  },
  {
    "label": "addEscapingUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEscapingUse(Use &U)"
  },
  {
    "label": "replaceWithNewValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceWithNewValue(Value *Old, Value *New)"
  },
  {
    "label": "deleteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteValue(Old)"
  },
  {
    "label": "isNoAliasCall()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "isNoAliasCall(const Value *V)"
  },
  {
    "label": "isNoAliasArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNoAliasArgument(const Value *V)"
  },
  {
    "label": "isIdentifiedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentifiedObject(const Value *V)"
  },
  {
    "label": "isIdentifiedFunctionLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentifiedFunctionLocal(const Value *V)"
  }
]