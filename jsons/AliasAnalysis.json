[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "VAArgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VAArgInst"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "MemTransferInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemTransferInst"
  },
  {
    "label": "MemIntrinsic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemIntrinsic"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AliasResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AliasResult"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "ModRefResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModRefResult"
  },
  {
    "label": "ModRefBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ModRefBehavior"
  },
  {
    "label": "InitializeAliasAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAliasAnalysis(Pass *P, const DataLayout *DL)"
  },
  {
    "label": "getTypeStoreSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getTypeStoreSize(Type *Ty)"
  },
  {
    "label": "alias()",
    "kind": "Method",
    "detail": "Function (AliasResult)",
    "insertText": "alias(const MemoryLocation &LocA,\n                            const MemoryLocation &LocB)"
  },
  {
    "label": "alias()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "alias(V1, MemoryLocation::UnknownSize, V2,\n                 MemoryLocation::UnknownSize)"
  },
  {
    "label": "pointsToConstantMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pointsToConstantMemory(const MemoryLocation &Loc,\n                                      bool OrLocal = false)"
  },
  {
    "label": "getArgModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getArgModRefInfo(ImmutableCallSite CS, unsigned ArgIdx)"
  },
  {
    "label": "getModRefBehavior()",
    "kind": "Method",
    "detail": "Function (ModRefBehavior)",
    "insertText": "getModRefBehavior(ImmutableCallSite CS)"
  },
  {
    "label": "getModRefBehavior()",
    "kind": "Method",
    "detail": "Function (ModRefBehavior)",
    "insertText": "getModRefBehavior(const Function *F)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(ImmutableCallSite CS,\n                                     const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const LoadInst *L, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const StoreInst *S, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const AtomicCmpXchgInst *CX,\n                             const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const AtomicRMWInst *RMW,\n                             const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(const VAArgInst *I, const MemoryLocation &Loc)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(Instruction *I,\n                             ImmutableCallSite Call)"
  },
  {
    "label": "getModRefInfo()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "getModRefInfo(ImmutableCallSite CS1,\n                                     ImmutableCallSite CS2)"
  },
  {
    "label": "callCapturesBefore()",
    "kind": "Method",
    "detail": "Function (ModRefResult)",
    "insertText": "callCapturesBefore(const Instruction *I,\n                                  const MemoryLocation &MemLoc,\n                                  DominatorTree *DT)"
  },
  {
    "label": "canBasicBlockModify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canBasicBlockModify(const BasicBlock &BB, const MemoryLocation &Loc)"
  },
  {
    "label": "canInstructionRangeModRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canInstructionRangeModRef(const Instruction &I1, const Instruction &I2,\n                                 const MemoryLocation &Loc,\n                                 const ModRefResult Mode)"
  },
  {
    "label": "deleteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteValue(Value *V)"
  },
  {
    "label": "addEscapingUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addEscapingUse(Use &U)"
  },
  {
    "label": "isNoAliasCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNoAliasCall(const Value *V)"
  },
  {
    "label": "isNoAliasArgument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNoAliasArgument(const Value *V)"
  },
  {
    "label": "isIdentifiedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentifiedObject(const Value *V)"
  },
  {
    "label": "isIdentifiedFunctionLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentifiedFunctionLocal(const Value *V)"
  }
]