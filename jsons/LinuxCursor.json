[
  {
    "label": "FLinuxCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxCursor"
  },
  {
    "label": "FLinuxCursor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector2D . h \" # include \" GenericPlatform / ICursor . h \" # include \" SDL . h \" typedef SDL_Cursor* SDL_HCursor ; class FLinuxCursor : public ICursor { public :)",
    "insertText": "FLinuxCursor()"
  },
  {
    "label": "IsCreateCursorFromRGBABufferSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCreateCursorFromRGBABufferSupported()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetPosition()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(const int32 X, const int32 Y)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const EMouseCursor::Type InNewCursor)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(bool bShow)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(const RECT* const Bounds)"
  },
  {
    "label": "SetTypeShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTypeShape(EMouseCursor::Type InCursorType, void* CursorHandle)"
  },
  {
    "label": "SetCustomShape()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCustomShape(SDL_HCursor CursorHandle)"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "InvalidateCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCaches()"
  },
  {
    "label": "SetCachedPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedPosition(const int32 X, const int32 Y)"
  }
]