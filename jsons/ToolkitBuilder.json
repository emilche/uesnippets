[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FToolElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolElement"
  },
  {
    "label": "WIDGETREGISTRATION_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WIDGETREGISTRATION_API"
  },
  {
    "label": "FToolkitBuilderArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolkitBuilderArgs"
  },
  {
    "label": "FToolPalette()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" FToolkitWidgetStyle . h \" # include \" IDetailsView . h \" # include \" Framework / MultiBox / SToolBarButtonBlock . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" ToolElementRegistry . h \" # include \" ToolkitBuilderConfig . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Layout / CategoryDrivenContentBuilderBase . h \" class SWidget ; class FToolElement ; struct FToolkitSections { TSharedPtr<STextBlock> ModeWarningArea = nullptr ; TSharedPtr<STextBlock> ToolWarningArea = nullptr ; TSharedPtr<SWidget> ToolPresetArea = nullptr ; TSharedPtr<IDetailsView> DetailsView = nullptr ; TSharedPtr<SWidget> Footer = nullptr ; } ; struct FToolPalette : TSharedFromThis<FToolPalette> {)",
    "insertText": "FToolPalette(TSharedPtr<FUICommandInfo> InLoadToolPaletteAction, const TArray<TSharedPtr< FUICommandInfo >>& InPaletteActions) : LoadToolPaletteAction(InLoadToolPaletteAction)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FButtonArgs> Button =)",
    "insertText": "MakeShareable(new FButtonArgs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Button -> Command = CommandInfo ; PaletteActions .)",
    "insertText": "Add(Button.ToSharedRef())"
  },
  {
    "label": "FEditablePalette()",
    "kind": "Method",
    "detail": "Function (} } const TSharedPtr<FUICommandInfo> LoadToolPaletteAction ; TArray<TSharedRef<FButtonArgs>> PaletteActions ; TSharedPtr<FUICommandList> PaletteActionsCommandList ; } ; struct FEditablePalette : public FToolPalette {)",
    "insertText": "FEditablePalette(TSharedPtr<FUICommandInfo> InLoadToolPaletteAction, TSharedPtr<FUICommandInfo> InAddToPaletteAction, TSharedPtr<FUICommandInfo> InRemoveFromPaletteAction, FName InEditablePaletteName = FName(), FGetEditableToolPaletteConfigManager InGetConfigManager = FGetEditableToolPaletteConfigManager())"
  },
  {
    "label": "IsInPalette()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandInfo> AddToPaletteAction ; const TSharedPtr<FUICommandInfo> RemoveFromPaletteAction ; FSimpleDelegate OnPaletteEdited ; bool)",
    "insertText": "IsInPalette(const FName CommandName)"
  },
  {
    "label": "GetPaletteCommandNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPaletteCommandNames()"
  },
  {
    "label": "AddCommandToPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommandToPalette(const FString CommandNameString)"
  },
  {
    "label": "RemoveCommandFromPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCommandFromPalette(const FString CommandNameString)"
  },
  {
    "label": "SaveToConfig()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SaveToConfig()"
  },
  {
    "label": "LoadFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromConfig()"
  },
  {
    "label": "FToolkitBuilderArgs()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FString> PaletteCommandNameArray ; FName EditablePaletteName ; FGetEditableToolPaletteConfigManager GetConfigManager ; } ; struct FToolkitBuilderArgs ; struct FToolkitBuilderArgs : public FCategoryDrivenContentBuilderArgs {)",
    "insertText": "FToolkitBuilderArgs(const FName InToolbarCustomizationName)"
  },
  {
    "label": "FToolkitBuilder()",
    "kind": "Method",
    "detail": "Function (FName ToolbarCustomizationName ; TSharedPtr<FUICommandList> ToolkitCommandList ; TSharedPtr<FToolkitSections> ToolkitSections ; EVisibility SelectedCategoryTitleVisibility ; } ; class FToolkitBuilder : public FCategoryDrivenContentBuilderBase { public :)",
    "insertText": "FToolkitBuilder(FName ToolbarCustomizationName, TSharedPtr<FUICommandList> InToolkitCommandList, TSharedPtr<FToolkitSections> InToolkitSections)"
  },
  {
    "label": "FToolkitBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FToolkitBuilder(FToolkitBuilderArgs& Args)"
  },
  {
    "label": "FToolkitBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FToolkitBuilder()"
  },
  {
    "label": "SetActivePaletteCommandsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivePaletteCommandsVisibility(EVisibility Visibility)"
  },
  {
    "label": "GetActivePaletteCommandsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetActivePaletteCommandsVisibility()"
  },
  {
    "label": "AddPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPalette(TSharedPtr<FToolPalette> Palette)"
  },
  {
    "label": "AddPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPalette(TSharedPtr<FEditablePalette> Palette)"
  },
  {
    "label": "ResetWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWidget()"
  },
  {
    "label": "UpdateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidget()"
  },
  {
    "label": "HasActivePalette()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActivePalette()"
  },
  {
    "label": "SetActivePaletteOnLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActivePaletteOnLoad(const FUICommandInfo* Command)"
  },
  {
    "label": "IsActiveToolPalette()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsActiveToolPalette(FName CommandName)"
  },
  {
    "label": "InitializeCategoryToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCategoryToolbar()"
  },
  {
    "label": "InitializeCategoryToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCategoryToolbar(bool bInitLoadToolPaletteMap)"
  },
  {
    "label": "SetActiveToolDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveToolDisplayName(FText InActiveToolDisplayName)"
  },
  {
    "label": "GetActiveToolDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActiveToolDisplayName()"
  },
  {
    "label": "GetCommandsForEditablePalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandsForEditablePalette(TSharedRef<FEditablePalette> EditablePalette, TArray<TSharedPtr<const FUICommandInfo>>& OutCommands)"
  },
  {
    "label": "GetActivePaletteName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetActivePaletteName()"
  },
  {
    "label": "UpdateEditablePalette()",
    "kind": "Method",
    "detail": "Function (FName ToolbarCustomizationName ; TMap<FString,TSharedPtr<FButtonArgs>> PaletteCommandNameToButtonArgsMap ; TMap<FString,TSharedPtr<FToolPalette>> LoadCommandNameToToolPaletteMap ; TMap<FString,TSharedPtr<const FUICommandInfo>> PaletteCommandInfos ; TSharedPtr<FUICommandList> ToolkitCommandList ; TArray<TSharedRef<FEditablePalette>> EditablePalettesArray ; TSharedPtr<FToolPalette> ActivePalette ; TSharedPtr<SVerticalBox> ToolPaletteWidget ; TMap<FName,TSharedPtr<FToolBarBuilder>> LoadCommandNameToPaletteToolbarBuilderMap ; void)",
    "insertText": "UpdateEditablePalette(TSharedRef<FEditablePalette> EditablePalette)"
  },
  {
    "label": "OnEditablePaletteEdited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditablePaletteEdited(TSharedRef<FEditablePalette> EditablePalette)"
  },
  {
    "label": "ResetToolPaletteWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToolPaletteWidget()"
  },
  {
    "label": "CreatePalette()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FToolElement>> ToolPaletteElementArray ; private : void)",
    "insertText": "CreatePalette(TSharedPtr<FToolPalette> Palette)"
  },
  {
    "label": "TogglePalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePalette(TSharedPtr<FToolPalette> Palette)"
  },
  {
    "label": "GetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContextMenuContent(const FName CommandName)"
  },
  {
    "label": "GetToolPaletteWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToolPaletteWidget()"
  },
  {
    "label": "CreatePaletteWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePaletteWidget(FToolPalette& Palette, FToolElement& Element)"
  },
  {
    "label": "ToggleCommandInPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCommandInPalette(TSharedRef<FEditablePalette> Palette, FString CommandNameString)"
  },
  {
    "label": "HasSelectedToolSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedToolSet()"
  },
  {
    "label": "UpdateContentForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContentForCategory(FName ActiveCategoryName = NAME_None, FText InActiveCategoryText = FText::GetEmpty())"
  },
  {
    "label": "GetActiveToolTitleVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetActiveToolTitleVisibility()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (EVisibility SelectedCategoryTitleVisibility = EVisibility::Collapsed ; TSharedPtr<FToolkitSections> ToolkitSections ; EVisibility ActivePaletteButtonVisibility = EVisibility::Visible ; FText ActiveToolDisplayName =)",
    "insertText": "GetEmpty()"
  }
]