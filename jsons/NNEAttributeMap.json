[
  {
    "label": "FAttributeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeMap"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NNEAttributeValue . h \" namespace UE::NNE { class FAttributeMap { public : void)",
    "insertText": "SetAttribute(const FString& Name, const FNNEAttributeValue& Value)"
  },
  {
    "label": "bIsUnique()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK const bool)",
    "insertText": "bIsUnique(nullptr == Attributes.FindByPredicate([Name](const FEntry& Other) { return Other.Name == Name; }))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (# endif Attributes .)",
    "insertText": "Emplace(Name, Value)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "GetValue(const FString& Name)"
  },
  {
    "label": "GetAttributeValue()",
    "kind": "Method",
    "detail": "Function (const FNNEAttributeValue* Value =)",
    "insertText": "GetAttributeValue(Name)"
  },
  {
    "label": "GetValueOrDefault()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "GetValueOrDefault(const FString& Name, T Default)"
  },
  {
    "label": "GetAttributeValue()",
    "kind": "Method",
    "detail": "Function (} const FNNEAttributeValue*)",
    "insertText": "GetAttributeValue(const FString& Name)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FEntry* entry = Attributes .)",
    "insertText": "FindByPredicate([Name](const FEntry& Other) { return Other.Name == Name; })"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetName(int32 Idx)"
  }
]