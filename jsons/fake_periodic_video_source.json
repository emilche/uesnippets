[
  {
    "label": "FakePeriodicVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePeriodicVideoSource"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "FakePeriodicVideoSource()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_FAKE_PERIODIC_VIDEO_SOURCE_H_ # define PC_TEST_FAKE_PERIODIC_VIDEO_SOURCE_H_ # include<memory> # include \" api / video / video_source_interface . h \" # include \" media / base / fake_frame_source . h \" # include \" media / base / video_broadcaster . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / task_utils / repeating_task . h \" namespace webrtc { class FakePeriodicVideoSource final : public rtc::VideoSourceInterface<VideoFrame> { public : int kDefaultFrameIntervalMs = 3 3 ; int kDefaultWidth = 6 4 0 ; int kDefaultHeight = 4 8 0 ; struct Config { int width = kDefaultWidth ; int height = kDefaultHeight ; int frame_interval_ms = kDefaultFrameIntervalMs ; VideoRotation rotation = kVideoRotation_0 ; int64_t timestamp_offset_ms = 0 ; } ;)",
    "insertText": "FakePeriodicVideoSource() : FakePeriodicVideoSource(Config())"
  },
  {
    "label": "FakePeriodicVideoSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FakePeriodicVideoSource(Config config) : frame_source_( config.width, config.height, config.frame_interval_ms * rtc::kNumMicrosecsPerMillisec, config.timestamp_offset_ms * rtc::kNumMicrosecsPerMillisec), task_queue_(std::make_unique<TaskQueueForTest>( \"FakePeriodicVideoTrackSource\"))"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (thread_checker_ .)",
    "insertText": "Detach()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (frame_source_ .)",
    "insertText": "SetRotation(config.rotation)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (TimeDelta frame_interval =)",
    "insertText": "Millis(config.frame_interval_ms)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(task_queue_->Get(), [this, frame_interval] { if (broadcaster_.wants().rotation_applied) { broadcaster_.OnFrame(frame_source_.GetFrameRotationApplied()); } else { broadcaster_.OnFrame(frame_source_.GetFrame()); } return frame_interval; })"
  },
  {
    "label": "wants()",
    "kind": "Method",
    "detail": "Function (} rtc::VideoSinkWants)",
    "insertText": "wants()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(thread_checker_.IsCurrent())"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (broadcaster_ .)",
    "insertText": "RemoveSink(sink)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (wants_ = wants ; } broadcaster_ .)",
    "insertText": "AddOrUpdateSink(sink, wants)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(task_queue_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (task_queue_ .)",
    "insertText": "reset()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : SequenceChecker thread_checker_ ; rtc::VideoBroadcaster broadcaster_ ; cricket::FakeFrameSource frame_source_ ; Mutex mutex_ ; rtc::VideoSinkWants wants_)",
    "insertText": "RTC_GUARDED_BY(&mutex_)"
  }
]