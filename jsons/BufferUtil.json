[
  {
    "label": "CountValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<CoreMinimal . h> namespace BufferUtil { template<T> int)",
    "insertText": "CountValid(const TArray<T>& Data, const TFunction<bool(T)>& Predicate, int MaxIndex = -1, int StartIndex = 0)"
  },
  {
    "label": "StopIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StopIndex(MaxIndex == -1) ? Data.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int NumValid = 0 ;)",
    "insertText": "for(int i = StartIndex; i < StopIndex; ++i)"
  },
  {
    "label": "FilterInPlace()",
    "kind": "Method",
    "detail": "Function (NumValid + + ; } } return NumValid ; } template<T> int)",
    "insertText": "FilterInPlace(TArray<T>& Data, const TFunction<bool(T)>& Predicate, int MaxIndex = -1, int StartIndex = 0)"
  },
  {
    "label": "AppendElements()",
    "kind": "Method",
    "detail": "Function (Data [ StoreIndex + + ] = Data [ i ] ; } } return StoreIndex ; } template<T,EnumerableType> void)",
    "insertText": "AppendElements(TArray<T>& AppendTo, EnumerableType Enumerable)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AppendTo .)",
    "insertText": "Add(value)"
  }
]