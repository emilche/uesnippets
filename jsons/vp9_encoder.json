[
  {
    "label": "VP9EncoderConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9EncoderConfig"
  },
  {
    "label": "vpx_rc_mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "vpx_rc_mode"
  },
  {
    "label": "TplDepStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TplDepStats"
  },
  {
    "label": "TplDepFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TplDepFrame"
  },
  {
    "label": "TileDataEnc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileDataEnc"
  },
  {
    "label": "RowMTInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RowMTInfo"
  },
  {
    "label": "MultiThreadHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiThreadHandle"
  },
  {
    "label": "RD_COUNTS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RD_COUNTS"
  },
  {
    "label": "ThreadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadData"
  },
  {
    "label": "EncWorkerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncWorkerData"
  },
  {
    "label": "ActiveMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveMap"
  },
  {
    "label": "IMAGE_STAT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMAGE_STAT"
  },
  {
    "label": "ARNRFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ARNRFilterData"
  },
  {
    "label": "scale_factors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scale_factors"
  },
  {
    "label": "EncFrameBuf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncFrameBuf"
  },
  {
    "label": "KMEANS_DATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KMEANS_DATA"
  },
  {
    "label": "PARTITION_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PARTITION_INFO"
  },
  {
    "label": "MOTION_VECTOR_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOTION_VECTOR_INFO"
  },
  {
    "label": "GOP_COMMAND",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GOP_COMMAND"
  },
  {
    "label": "ENCODE_FRAME_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENCODE_FRAME_TYPE"
  },
  {
    "label": "RATE_QSTEP_MODEL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RATE_QSTEP_MODEL"
  },
  {
    "label": "ENCODE_COMMAND",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENCODE_COMMAND"
  },
  {
    "label": "VP9_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9_COMP"
  },
  {
    "label": "lookahead_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lookahead_ctx"
  },
  {
    "label": "lookahead_entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lookahead_entry"
  },
  {
    "label": "vpx_codec_pkt_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_pkt_list"
  },
  {
    "label": "ALT_REF_AQ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ALT_REF_AQ"
  },
  {
    "label": "VP9BitstreamWorkerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9BitstreamWorkerData"
  },
  {
    "label": "IMAGE_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMAGE_BUFFER"
  },
  {
    "label": "RATE_QINDEX_HISTORY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RATE_QINDEX_HISTORY"
  },
  {
    "label": "ENCODE_FRAME_RESULT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENCODE_FRAME_RESULT"
  },
  {
    "label": "is_lossless_requested()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_ENCODER_VP9_ENCODER_H_ # define VPX_VP9_ENCODER_VP9_ENCODER_H_ # include<stdio . h> # include \" . / vpx_config . h \" # include \" vpx / internal / vpx_codec_internal . h \" # include \" vpx / vpx_ext_ratectrl . h \" # include \" vpx / vp8cx . h \" # if CONFIG_INTERNAL_STATS # include \" vpx_dsp / ssim . h \" # endif # include \" vpx_dsp / variance . h \" # include \" vpx_dsp / psnr . h \" # include \" vpx_ports / system_state . h \" # include \" vpx_util / vpx_thread . h \" # include \" vpx_util / vpx_timestamp . h \" # include \" vp9 / common / vp9_alloccommon . h \" # include \" vp9 / common / vp9_ppflags . h \" # include \" vp9 / common / vp9_entropymode . h \" # include \" vp9 / common / vp9_thread_common . h \" # include \" vp9 / common / vp9_onyxc_int . h \" # if ! CONFIG_REALTIME_ONLY # include \" vp9 / encoder / vp9_alt_ref_aq . h \" # endif # include \" vp9 / encoder / vp9_aq_cyclicrefresh . h \" # include \" vp9 / encoder / vp9_context_tree . h \" # include \" vp9 / encoder / vp9_encodemb . h \" # include \" vp9 / encoder / vp9_ethread . h \" # include \" vp9 / encoder / vp9_ext_ratectrl . h \" # include \" vp9 / encoder / vp9_firstpass . h \" # include \" vp9 / encoder / vp9_job_queue . h \" # include \" vp9 / encoder / vp9_lookahead . h \" # include \" vp9 / encoder / vp9_mbgraph . h \" # include \" vp9 / encoder / vp9_mcomp . h \" # include \" vp9 / encoder / vp9_noise_estimate . h \" # include \" vp9 / encoder / vp9_quantize . h \" # include \" vp9 / encoder / vp9_ratectrl . h \" # include \" vp9 / encoder / vp9_rd . h \" # include \" vp9 / encoder / vp9_speed_features . h \" # include \" vp9 / encoder / vp9_svc_layercontext . h \" # include \" vp9 / encoder / vp9_tokenize . h \" # if CONFIG_VP9_TEMPORAL_DENOISING # include \" vp9 / encoder / vp9_denoiser . h \" # endif # ifdef __cplusplus \" C \" { # endif # define TICKS_PER_SEC 1 0 0 0 0 0 0 0 typedef struct { int nmvjointcost [ MV_JOINTS ] ; int nmvcosts [ 2 ] [ MV_VALS ] ; int nmvcosts_hp [ 2 ] [ MV_VALS ] ; vpx_prob segment_pred_probs [ PREDICTION_PROBS ] ; unsigned char* last_frame_seg_map_copy ; signed char last_ref_lf_deltas [ MAX_REF_LF_DELTAS ] ; signed char last_mode_lf_deltas [ MAX_MODE_LF_DELTAS ] ; FRAME_CONTEXT fc ; } CODING_CONTEXT ; typedef enum { ENCODE_BREAKOUT_DISABLED = 0,ENCODE_BREAKOUT_ENABLED = 1,ENCODE_BREAKOUT_LIMITED = 2 } ENCODE_BREAKOUT_TYPE ; typedef enum { NORMAL = 0,FOURFIVE = 1,THREEFIVE = 2,ONETWO = 3 } VPX_SCALING ; typedef enum { GOOD,BEST,REALTIME } MODE ; typedef enum { FRAMEFLAGS_KEY = 1<<0,FRAMEFLAGS_GOLDEN = 1<<1,FRAMEFLAGS_ALTREF = 1<<2,} FRAMETYPE_FLAGS ; typedef enum { NO_AQ = 0,VARIANCE_AQ = 1,COMPLEXITY_AQ = 2,CYCLIC_REFRESH_AQ = 3,EQUATOR360_AQ = 4,PERCEPTUAL_AQ = 5,PSNR_AQ = 6,LOOKAHEAD_AQ = 7,AQ_MODE_COUNT } AQ_MODE ; typedef enum { RESIZE_NONE = 0,RESIZE_FIXED = 1,RESIZE_DYNAMIC = 2 } RESIZE_TYPE ; typedef enum { kInvalid = 0,kLowSadLowSumdiff = 1,kLowSadHighSumdiff = 2,kHighSadLowSumdiff = 3,kHighSadHighSumdiff = 4,kLowVarHighSumdiff = 5,kVeryHighSad = 6,} CONTENT_STATE_SB ; typedef enum { LOOPFILTER_ALL = 0,LOOPFILTER_REFERENCE = 1,NO_LOOPFILTER = 2,} LOOPFILTER_CONTROL ; typedef struct VP9EncoderConfig { BITSTREAM_PROFILE profile ; vpx_bit_depth_t bit_depth ; int width ; int height ; unsigned int input_bit_depth ; double init_framerate ; vpx_rational_t g_timebase ; vpx_rational64_t g_timebase_in_ts ; int64_t target_bandwidth ; int noise_sensitivity ; int sharpness ; int speed ; unsigned int rc_max_intra_bitrate_pct ; unsigned int rc_max_inter_bitrate_pct ; unsigned int gf_cbr_boost_pct ; MODE mode ; int pass ; int auto_key ; int key_freq ; int lag_in_frames ; enum vpx_rc_mode rc_mode ; int under_shoot_pct ; int over_shoot_pct ; int64_t starting_buffer_level_ms ; int64_t optimal_buffer_level_ms ; int64_t maximum_buffer_size_ms ; int drop_frames_water_mark ; int fixed_q ; int worst_allowed_q ; int best_allowed_q ; int cq_level ; AQ_MODE aq_mode ; int alt_ref_aq ; RESIZE_TYPE resize_mode ; int scaled_frame_width ; int scaled_frame_height ; int frame_periodic_boost ; int two_pass_vbrbias ; int two_pass_vbrmin_section ; int two_pass_vbrmax_section ; int vbr_corpus_complexity ; int ss_number_layers ; int ts_number_layers ; int layer_target_bitrate [ VPX_MAX_LAYERS ] ; int ss_target_bitrate [ VPX_SS_MAX_LAYERS ] ; int ss_enable_auto_arf [ VPX_SS_MAX_LAYERS ] ; int ts_rate_decimator [ VPX_TS_MAX_LAYERS ] ; int enable_auto_arf ; int encode_breakout ; unsigned int error_resilient_mode ; unsigned int frame_parallel_decoding_mode ; int arnr_max_frames ; int arnr_strength ; int min_gf_interval ; int max_gf_interval ; int tile_columns ; int tile_rows ; int enable_tpl_model ; int max_threads ; unsigned int target_level ; vpx_fixed_buf_t two_pass_stats_in ; vp8e_tuning tuning ; vp9e_tune_content content ; # if CONFIG_VP9_HIGHBITDEPTH int use_highbitdepth ; # endif vpx_color_space_t color_space ; vpx_color_range_t color_range ; int render_width ; int render_height ; VP9E_TEMPORAL_LAYERING_MODE temporal_layering_mode ; int row_mt ; unsigned int motion_vector_unit_test ; int delta_q_uv ; int use_simple_encode_api ; } VP9EncoderConfig ; int)",
    "insertText": "is_lossless_requested(const VP9EncoderConfig *cfg)"
  },
  {
    "label": "gop_command_off()",
    "kind": "Method",
    "detail": "Function (gop_command -> use = 1 ; gop_command -> show_frame_count = show_frame_count ; gop_command -> use_alt_ref = use_alt_ref ; } void)",
    "insertText": "gop_command_off(GOP_COMMAND *gop_command)"
  },
  {
    "label": "gop_command_coding_frame_count()",
    "kind": "Method",
    "detail": "Function (gop_command -> use = 0 ; gop_command -> show_frame_count = 0 ; gop_command -> use_alt_ref = 0 ; } int)",
    "insertText": "gop_command_coding_frame_count(const GOP_COMMAND *gop_command)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(0)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "abort()"
  },
  {
    "label": "encode_command_set_external_quantize_index()",
    "kind": "Method",
    "detail": "Function (encode_command -> gop_command = gop_command ; } void)",
    "insertText": "encode_command_set_external_quantize_index(ENCODE_COMMAND *encode_command, int quantize_index)"
  },
  {
    "label": "encode_command_reset_external_quantize_index()",
    "kind": "Method",
    "detail": "Function (encode_command -> use_external_quantize_index = 1 ; encode_command -> external_quantize_index = quantize_index ; } void)",
    "insertText": "encode_command_reset_external_quantize_index(ENCODE_COMMAND *encode_command)"
  },
  {
    "label": "encode_command_set_target_frame_bits()",
    "kind": "Method",
    "detail": "Function (encode_command -> use_external_quantize_index = 0 ; encode_command -> external_quantize_index = - 1 ; } void)",
    "insertText": "encode_command_set_target_frame_bits(ENCODE_COMMAND *encode_command, int target_frame_bits, double target_frame_bits_error_percent)"
  },
  {
    "label": "encode_command_reset_target_frame_bits()",
    "kind": "Method",
    "detail": "Function (encode_command -> use_external_target_frame_bits = 1 ; encode_command -> target_frame_bits = target_frame_bits ; encode_command -> target_frame_bits_error_percent = target_frame_bits_error_percent ; } void)",
    "insertText": "encode_command_reset_target_frame_bits(ENCODE_COMMAND *encode_command)"
  },
  {
    "label": "encode_command_init()",
    "kind": "Method",
    "detail": "Function (encode_command -> use_external_target_frame_bits = 0 ; encode_command -> target_frame_bits = - 1 ; encode_command -> target_frame_bits_error_percent = 0 ; } void)",
    "insertText": "encode_command_init(ENCODE_COMMAND *encode_command)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(*encode_command)"
  },
  {
    "label": "encode_command_reset_external_quantize_index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "encode_command_reset_external_quantize_index(encode_command)"
  },
  {
    "label": "encode_command_reset_target_frame_bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "encode_command_reset_target_frame_bits(encode_command)"
  },
  {
    "label": "gop_command_off()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gop_command_off(&encode_command->gop_command)"
  },
  {
    "label": "get_num_unit_4x4()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_num_unit_4x4(int size)"
  },
  {
    "label": "get_num_unit_16x16()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_num_unit_16x16(int size)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (} # endif typedef struct VP9_COMP { FRAME_INFO frame_info ; QUANTS quants ; ThreadData td ; MB_MODE_INFO_EXT* mbmi_ext_base ;)",
    "insertText": "DECLARE_ALIGNED(16, int16_t, y_dequant[QINDEX_RANGE][8])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, int16_t, uv_dequant[QINDEX_RANGE][8])"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (VP9_COMMON common ; VP9EncoderConfig oxcf ; struct lookahead_ctx* lookahead ; struct lookahead_entry* alt_ref_source ; YV12_BUFFER_CONFIG* Source ; YV12_BUFFER_CONFIG* Last_Source ; YV12_BUFFER_CONFIG* un_scaled_source ; YV12_BUFFER_CONFIG scaled_source ; YV12_BUFFER_CONFIG* unscaled_last_source ; YV12_BUFFER_CONFIG scaled_last_source ; # ifdef ENABLE_KF_DENOISE YV12_BUFFER_CONFIG raw_unscaled_source ; YV12_BUFFER_CONFIG raw_scaled_source ; # endif YV12_BUFFER_CONFIG* raw_source_frame ; BLOCK_SIZE tpl_bsize ; TplDepFrame tpl_stats [ MAX_ARF_GOP_SIZE ] ; YV12_BUFFER_CONFIG* tpl_recon_frames [ REF_FRAMES ] ; EncFrameBuf enc_frame_buf [ REF_FRAMES ] ; # if CONFIG_MULTITHREAD pthread_mutex_t kmeans_mutex ; # endif int kmeans_data_arr_alloc ; KMEANS_DATA* kmeans_data_arr ; int kmeans_data_size ; int kmeans_data_stride ; double kmeans_ctr_ls [ MAX_KMEANS_GROUPS ] ; double kmeans_boundary_ls [ MAX_KMEANS_GROUPS ] ; int kmeans_count_ls [ MAX_KMEANS_GROUPS ] ; int kmeans_ctr_num ; # if CONFIG_NON_GREEDY_MV MotionFieldInfo motion_field_info ; int tpl_ready ; int_mv* select_mv_arr ; # endif TileDataEnc* tile_data ; int allocated_tiles ; int scaled_ref_idx [ REFS_PER_FRAME ] ; int lst_fb_idx ; int gld_fb_idx ; int alt_fb_idx ; int ref_fb_idx [ REF_FRAMES ] ; int refresh_last_frame ; int refresh_golden_frame ; int refresh_alt_ref_frame ; int ext_refresh_frame_flags_pending ; int ext_refresh_last_frame ; int ext_refresh_golden_frame ; int ext_refresh_alt_ref_frame ; int ext_refresh_frame_context_pending ; int ext_refresh_frame_context ; int64_t norm_wiener_variance ; int64_t* mb_wiener_variance ; int mb_wiener_var_rows ; int mb_wiener_var_cols ; double* mi_ssim_rdmult_scaling_factors ; YV12_BUFFER_CONFIG last_frame_uf ; TOKENEXTRA* tile_tok [ 4 ] [ 1<<6 ] ; TOKENLIST* tplist [ 4 ] [ 1<<6 ] ; int64_t ambient_err ; RD_CONTROL rd_ctrl ; RD_OPT rd ; CODING_CONTEXT coding_context ; int* nmvcosts [ 2 ] ; int* nmvcosts_hp [ 2 ] ; int* nmvsadcosts [ 2 ] ; int* nmvsadcosts_hp [ 2 ] ; int64_t last_time_stamp_seen ; int64_t last_end_time_stamp_seen ; int64_t first_time_stamp_ever ; RATE_CONTROL rc ; double framerate ; int interp_filter_selected [ REF_FRAMES ] [ SWITCHABLE ] ; struct vpx_codec_pkt_list* output_pkt_list ; MBGRAPH_FRAME_STATS mbgraph_stats [ MAX_LAG_BUFFERS ] ; int mbgraph_n_frames ; int static_mb_pct ; int ref_frame_flags ; SPEED_FEATURES sf ; uint32_t max_mv_magnitude ; int mv_step_param ; int allow_comp_inter_inter ; ENCODE_BREAKOUT_TYPE allow_encode_breakout ; int encode_breakout ; uint8_t* segmentation_map ; uint8_t* skin_map ; int segment_encode_breakout [ MAX_SEGMENTS ] ; CYCLIC_REFRESH* cyclic_refresh ; ActiveMap active_map ; fractional_mv_step_fp* find_fractional_mv_step ; struct scale_factors me_sf ; vp9_diamond_search_fn_t diamond_search_sad ; vp9_variance_fn_ptr_t fn_ptr [ BLOCK_SIZES ] ; uint64_t time_receive_data ; uint64_t time_compress_data ; uint64_t time_pick_lpf ; uint64_t time_encode_sb_row ; TWO_PASS twopass ; uint8_t force_update_segmentation ; YV12_BUFFER_CONFIG alt_ref_buffer ; struct ALT_REF_AQ* alt_ref_aq ; # if CONFIG_INTERNAL_STATS unsigned int mode_chosen_counts [ MAX_MODES ] ; int count ; uint64_t total_sq_error ; uint64_t total_samples ; ImageStat psnr ; uint64_t totalp_sq_error ; uint64_t totalp_samples ; ImageStat psnrp ; double total_blockiness ; double worst_blockiness ; int bytes ; double summed_quality ; double summed_weights ; double summedp_quality ; double summedp_weights ; unsigned int tot_recode_hits ; double worst_ssim ; ImageStat ssimg ; ImageStat fastssim ; ImageStat psnrhvs ; int b_calculate_ssimg ; int b_calculate_blockiness ; int b_calculate_consistency ; double total_inconsistency ; double worst_consistency ; Ssimv* ssim_vars ; Metrics metrics ; # endif int b_calculate_psnr ; int droppable ; int initial_width ; int initial_height ; int initial_mbs ; int use_svc ; SVC svc ; diff* source_diff_var ; unsigned int source_var_thresh ; int frames_till_next_var_check ; int frame_flags ; search_site_config ss_cfg ; int mbmode_cost [ INTRA_MODES ] ; unsigned int inter_mode_cost [ INTER_MODE_CONTEXTS ] [ INTER_MODES ] ; int intra_uv_mode_cost [ FRAME_TYPES ] [ INTRA_MODES ] [ INTRA_MODES ] ; int y_mode_costs [ INTRA_MODES ] [ INTRA_MODES ] [ INTRA_MODES ] ; int switchable_interp_costs [ SWITCHABLE_FILTER_CONTEXTS ] [ SWITCHABLE_FILTERS ] ; int partition_cost [ PARTITION_CONTEXTS ] [ PARTITION_TYPES ] ; int tx_size_cost [ TX_SIZES - 1 ] [ TX_SIZE_CONTEXTS ] [ TX_SIZES ] ; # if CONFIG_VP9_TEMPORAL_DENOISING VP9_DENOISER denoiser ; # endif int resize_pending ; RESIZE_STATE resize_state ; int external_resize ; int resize_scale_num ; int resize_scale_den ; int resize_avg_qp ; int resize_buffer_underflow ; int resize_count ; int use_skin_detection ; int target_level ; NOISE_ESTIMATE noise_estimate ; uint8_t* consec_zero_mv ; int64_t vbp_thresholds [ 4 ] ; int64_t vbp_threshold_minmax ; int64_t vbp_threshold_sad ; int64_t vbp_threshold_copy ; BLOCK_SIZE vbp_bsize_min ; int num_workers ; VPxWorker* workers ; struct EncWorkerData* tile_thr_data ; VP9LfSync lf_row_sync ; struct VP9BitstreamWorkerData* vp9_bitstream_worker_data ; int keep_level_stats ; Vp9LevelInfo level_info ; MultiThreadHandle multi_thread_ctxt ;)",
    "insertText": "void(*row_mt_sync_read_ptr)(VP9RowMTSync *const, int, int)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*row_mt_sync_write_ptr)(VP9RowMTSync *const, int, int, const int)"
  },
  {
    "label": "partition_info_init()",
    "kind": "Method",
    "detail": "Function (ARNRFilterData arnr_filter_data ; int row_mt ; unsigned int row_mt_bit_exact ; BLOCK_SIZE* prev_partition ; int8_t* prev_segment_id ; uint8_t* prev_variance_low ; uint8_t* copied_frame_cnt ; uint8_t max_copied_frame ; uint8_t last_frame_dropped ; uint8_t* content_state_sb_fd ; int compute_source_sad_onepass ; int compute_frame_low_motion_onepass ; LevelConstraint level_constraint ; uint8_t* count_arf_frame_usage ; uint8_t* count_lastgolden_frame_usage ; int multi_layer_arf ; vpx_roi_map_t roi ; LOOPFILTER_CONTROL loopfilter_ctrl ; # if CONFIG_RATE_CTRL ENCODE_COMMAND encode_command ; PARTITION_INFO* partition_info ; MOTION_VECTOR_INFO* motion_vector_info ; MOTION_VECTOR_INFO* fp_motion_vector_info ; TplDepStats* tpl_stats_info ; RATE_QSTEP_MODEL rq_model [ ENCODE_FRAME_TYPES ] ; # endif EXT_RATECTRL ext_ratectrl ; } VP9_COMP ; # if CONFIG_RATE_CTRL void)",
    "insertText": "partition_info_init(struct VP9_COMP *cpi)"
  },
  {
    "label": "get_num_unit_4x4()",
    "kind": "Method",
    "detail": "Function (VP9_COMMON* const cm =& cpi -> common ; const int unit_width =)",
    "insertText": "get_num_unit_4x4(cpi->frame_info.frame_width)"
  },
  {
    "label": "get_num_unit_4x4()",
    "kind": "Method",
    "detail": "Function (const int unit_height =)",
    "insertText": "get_num_unit_4x4(cpi->frame_info.frame_height)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(cpi->partition_info, 0, unit_width * unit_height * sizeof(PARTITION_INFO))"
  },
  {
    "label": "free_partition_info()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "free_partition_info(struct VP9_COMP *cpi)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(cpi->partition_info)"
  },
  {
    "label": "reset_mv_info()",
    "kind": "Method",
    "detail": "Function (cpi -> partition_info = NULL ; } void)",
    "insertText": "reset_mv_info(MOTION_VECTOR_INFO *mv_info)"
  },
  {
    "label": "motion_vector_info_init()",
    "kind": "Method",
    "detail": "Function (mv_info -> ref_frame [ 0 ] = NONE ; mv_info -> ref_frame [ 1 ] = NONE ; mv_info -> mv [ 0 ] . as_int = INVALID_MV ; mv_info -> mv [ 1 ] . as_int = INVALID_MV ; } void)",
    "insertText": "motion_vector_info_init(struct VP9_COMP *cpi)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(cpi->motion_vector_info, 0, unit_width * unit_height * sizeof(MOTION_VECTOR_INFO))"
  },
  {
    "label": "free_motion_vector_info()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "free_motion_vector_info(struct VP9_COMP *cpi)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(cpi->motion_vector_info)"
  },
  {
    "label": "tpl_stats_info_init()",
    "kind": "Method",
    "detail": "Function (cpi -> motion_vector_info = NULL ; } void)",
    "insertText": "tpl_stats_info_init(struct VP9_COMP *cpi)"
  },
  {
    "label": "CHECK_MEM_ERROR()",
    "kind": "Method",
    "detail": "Function (VP9_COMMON* const cm =& cpi -> common ;)",
    "insertText": "CHECK_MEM_ERROR(cm, cpi->tpl_stats_info, (TplDepStats *)vpx_calloc(MAX_LAG_BUFFERS, sizeof(TplDepStats)))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(cpi->tpl_stats_info, 0, MAX_LAG_BUFFERS * sizeof(TplDepStats))"
  },
  {
    "label": "free_tpl_stats_info()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "free_tpl_stats_info(struct VP9_COMP *cpi)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(cpi->tpl_stats_info)"
  },
  {
    "label": "fp_motion_vector_info_init()",
    "kind": "Method",
    "detail": "Function (cpi -> tpl_stats_info = NULL ; } void)",
    "insertText": "fp_motion_vector_info_init(struct VP9_COMP *cpi)"
  },
  {
    "label": "get_num_unit_16x16()",
    "kind": "Method",
    "detail": "Function (VP9_COMMON* const cm =& cpi -> common ; const int unit_width =)",
    "insertText": "get_num_unit_16x16(cpi->frame_info.frame_width)"
  },
  {
    "label": "get_num_unit_16x16()",
    "kind": "Method",
    "detail": "Function (const int unit_height =)",
    "insertText": "get_num_unit_16x16(cpi->frame_info.frame_height)"
  },
  {
    "label": "fp_motion_vector_info_reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fp_motion_vector_info_reset(int frame_width, int frame_height, MOTION_VECTOR_INFO *fp_motion_vector_info)"
  },
  {
    "label": "get_num_unit_16x16()",
    "kind": "Method",
    "detail": "Function (const int unit_width =)",
    "insertText": "get_num_unit_16x16(frame_width)"
  },
  {
    "label": "get_num_unit_16x16()",
    "kind": "Method",
    "detail": "Function (const int unit_height =)",
    "insertText": "get_num_unit_16x16(frame_height)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i < unit_width * unit_height; ++i)"
  },
  {
    "label": "reset_mv_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset_mv_info(fp_motion_vector_info + i)"
  },
  {
    "label": "free_fp_motion_vector_info()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "free_fp_motion_vector_info(struct VP9_COMP *cpi)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(cpi->fp_motion_vector_info)"
  },
  {
    "label": "vp9_init_encode_frame_result()",
    "kind": "Method",
    "detail": "Function (cpi -> fp_motion_vector_info = NULL ; } typedef struct IMAGE_BUFFER { int allocated ; int plane_width [ 3 ] ; int plane_height [ 3 ] ; uint8_t* plane_buffer [ 3 ] ; } IMAGE_BUFFER ; # define RATE_CTRL_MAX_RECODE_NUM 7 typedef struct RATE_QINDEX_HISTORY { int recode_count ; int q_index_history [ RATE_CTRL_MAX_RECODE_NUM ] ; int rate_history [ RATE_CTRL_MAX_RECODE_NUM ] ; int q_index_high ; int q_index_low ; } RATE_QINDEX_HISTORY ; # endif typedef struct ENCODE_FRAME_RESULT { int show_idx ; FRAME_UPDATE_TYPE update_type ; # if CONFIG_RATE_CTRL int frame_coding_index ; int ref_frame_coding_indexes [ MAX_INTER_REF_FRAMES ] ; int ref_frame_valid_list [ MAX_INTER_REF_FRAMES ] ; double psnr ; uint64_t sse ; FRAME_COUNTS frame_counts ; const PARTITION_INFO* partition_info ; const MOTION_VECTOR_INFO* motion_vector_info ; const TplDepStats* tpl_stats_info ; IMAGE_BUFFER coded_frame ; RATE_QINDEX_HISTORY rq_history ; # endif int quantize_index ; } ENCODE_FRAME_RESULT ; void)",
    "insertText": "vp9_init_encode_frame_result(ENCODE_FRAME_RESULT *encode_frame_result)"
  },
  {
    "label": "vp9_initialize_enc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_initialize_enc(void)"
  },
  {
    "label": "vp9_update_compressor_with_img_fmt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_update_compressor_with_img_fmt(VP9_COMP *cpi, vpx_img_fmt_t img_fmt)"
  },
  {
    "label": "vp9_create_compressor()",
    "kind": "Method",
    "detail": "Function (struct VP9_COMP*)",
    "insertText": "vp9_create_compressor(const VP9EncoderConfig *oxcf, BufferPool *const pool)"
  },
  {
    "label": "vp9_remove_compressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_remove_compressor(VP9_COMP *cpi)"
  },
  {
    "label": "vp9_change_config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_change_config(VP9_COMP *cpi, const VP9EncoderConfig *oxcf)"
  },
  {
    "label": "vp9_receive_raw_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_receive_raw_frame(VP9_COMP *cpi, vpx_enc_frame_flags_t frame_flags, YV12_BUFFER_CONFIG *sd, int64_t time_stamp, int64_t end_time)"
  },
  {
    "label": "vp9_get_compressed_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_compressed_data(VP9_COMP *cpi, unsigned int *frame_flags, size_t *size, uint8_t *dest, int64_t *time_stamp, int64_t *time_end, int flush, ENCODE_FRAME_RESULT *encode_frame_result)"
  },
  {
    "label": "vp9_get_preview_raw_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_preview_raw_frame(VP9_COMP *cpi, YV12_BUFFER_CONFIG *dest, vp9_ppflags_t *flags)"
  },
  {
    "label": "vp9_use_as_reference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_use_as_reference(VP9_COMP *cpi, int ref_frame_flags)"
  },
  {
    "label": "vp9_update_reference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_update_reference(VP9_COMP *cpi, int ref_frame_flags)"
  },
  {
    "label": "vp9_copy_reference_enc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_copy_reference_enc(VP9_COMP *cpi, VP9_REFFRAME ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "vp9_set_reference_enc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_set_reference_enc(VP9_COMP *cpi, VP9_REFFRAME ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "vp9_update_entropy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_update_entropy(VP9_COMP *cpi, int update)"
  },
  {
    "label": "vp9_set_active_map()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_set_active_map(VP9_COMP *cpi, unsigned char *new_map_16x16, int rows, int cols)"
  },
  {
    "label": "vp9_get_active_map()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_active_map(VP9_COMP *cpi, unsigned char *new_map_16x16, int rows, int cols)"
  },
  {
    "label": "vp9_set_internal_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_set_internal_size(VP9_COMP *cpi, VPX_SCALING horiz_mode, VPX_SCALING vert_mode)"
  },
  {
    "label": "vp9_set_size_literal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_set_size_literal(VP9_COMP *cpi, unsigned int width, unsigned int height)"
  },
  {
    "label": "vp9_set_svc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_svc(VP9_COMP *cpi, int use_svc)"
  },
  {
    "label": "vp9_check_reset_rc_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_check_reset_rc_flag(VP9_COMP *cpi)"
  },
  {
    "label": "vp9_set_rc_buffer_sizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_rc_buffer_sizes(VP9_COMP *cpi)"
  },
  {
    "label": "stack_pop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stack_pop(int *stack, int stack_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int idx ; const int r = stack [ 0 ] ;)",
    "insertText": "for(idx = 1; idx < stack_size; ++idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int idx ;)",
    "insertText": "for(idx = stack_size; idx > 0; --idx)"
  },
  {
    "label": "stack_init()",
    "kind": "Method",
    "detail": "Function (stack [ 0 ] = new_item ; } void)",
    "insertText": "stack_init(int *stack, int length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int idx ;)",
    "insertText": "for(idx = 0; idx < length; ++idx)"
  },
  {
    "label": "vp9_get_quantizer()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_get_quantizer(const VP9_COMP *cpi)"
  },
  {
    "label": "frame_is_kf_gf_arf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "frame_is_kf_gf_arf(const VP9_COMP *cpi)"
  },
  {
    "label": "ref_frame_to_flag()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ref_frame_to_flag(int8_t ref_frame)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (const int kVp9RefFlagList [ 4 ] = { 0,VP9_LAST_FLAG,VP9_GOLD_FLAG,VP9_ALT_FLAG } ;)",
    "insertText": "assert(ref_frame >= LAST_FRAME && ref_frame <= ALTREF_FRAME)"
  },
  {
    "label": "get_ref_frame_map_idx()",
    "kind": "Method",
    "detail": "Function (const VP9_COMMON* const cm =& cpi -> common ; const int map_idx =)",
    "insertText": "get_ref_frame_map_idx(cpi, ref_frame)"
  },
  {
    "label": "get_ref_cnt_buffer()",
    "kind": "Method",
    "detail": "Function (} RefCntBuffer*)",
    "insertText": "get_ref_cnt_buffer(const VP9_COMMON *cm, int fb_idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const VP9_COMMON* const cm =& cpi -> common ; MV_REFERENCE_FRAME ref_frame ;)",
    "insertText": "for(ref_frame = LAST_FRAME; ref_frame < MAX_REF_FRAMES; ++ref_frame)"
  },
  {
    "label": "get_ref_frame_buf_idx()",
    "kind": "Method",
    "detail": "Function (int ref_frame_buf_idx =)",
    "insertText": "get_ref_frame_buf_idx(cpi, ref_frame)"
  },
  {
    "label": "mv_ref_frame_to_inter_ref_idx()",
    "kind": "Method",
    "detail": "Function (int inter_ref_idx =)",
    "insertText": "mv_ref_frame_to_inter_ref_idx(ref_frame)"
  },
  {
    "label": "get_ref_cnt_buffer()",
    "kind": "Method",
    "detail": "Function (ref_frame_bufs [ inter_ref_idx ] =)",
    "insertText": "get_ref_cnt_buffer(cm, ref_frame_buf_idx)"
  },
  {
    "label": "get_ref_frame_buffer()",
    "kind": "Method",
    "detail": "Function (} } YV12_BUFFER_CONFIG*)",
    "insertText": "get_ref_frame_buffer(const VP9_COMP *const cpi, MV_REFERENCE_FRAME ref_frame)"
  },
  {
    "label": "allocated_tokens()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "allocated_tokens(TileInfo tile)"
  },
  {
    "label": "tile_mb_rows()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tile_mb_rows(tile.mi_row_end - tile.mi_row_start + 1)"
  },
  {
    "label": "tile_mb_cols()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tile_mb_cols(tile.mi_col_end - tile.mi_col_start + 1)"
  },
  {
    "label": "get_start_tok()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "get_start_tok(VP9_COMP *cpi, int tile_row, int tile_col, int mi_row, TOKENEXTRA **tok)"
  },
  {
    "label": "tile_mb_cols()",
    "kind": "Method",
    "detail": "Function (VP9_COMMON* const cm =& cpi -> common ; const int tile_cols = 1<<cm -> log2_tile_cols ; TileDataEnc* this_tile =& cpi -> tile_data [ tile_row* tile_cols + tile_col ] ; const TileInfo* const tile_info =& this_tile -> tile_info ; int)",
    "insertText": "tile_mb_cols(tile_info->mi_col_end - tile_info->mi_col_start + 1)"
  },
  {
    "label": "mb_row()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "mb_row(mi_row - tile_info->mi_row_start)"
  },
  {
    "label": "get_token_alloc()",
    "kind": "Method",
    "detail": "Function (* tok = cpi -> tile_tok [ tile_row ] [ tile_col ] +)",
    "insertText": "get_token_alloc(mb_row, tile_mb_cols)"
  },
  {
    "label": "vp9_get_y_sse()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "vp9_get_y_sse(const YV12_BUFFER_CONFIG *a, const YV12_BUFFER_CONFIG *b)"
  },
  {
    "label": "vp9_highbd_get_y_sse()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH int64_t)",
    "insertText": "vp9_highbd_get_y_sse(const YV12_BUFFER_CONFIG *a, const YV12_BUFFER_CONFIG *b)"
  },
  {
    "label": "vp9_scale_references()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "vp9_scale_references(VP9_COMP *cpi)"
  },
  {
    "label": "vp9_update_reference_frames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_update_reference_frames(VP9_COMP *cpi)"
  },
  {
    "label": "vp9_get_ref_frame_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_get_ref_frame_info(FRAME_UPDATE_TYPE update_type, int ref_frame_flags, RefCntBuffer *ref_frame_bufs[MAX_INTER_REF_FRAMES], int *ref_frame_coding_indexes, int *ref_frame_valid_list)"
  },
  {
    "label": "vp9_set_high_precision_mv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_high_precision_mv(VP9_COMP *cpi, int allow_high_precision_mv)"
  },
  {
    "label": "vp9_svc_twostage_scale()",
    "kind": "Method",
    "detail": "Function (YV12_BUFFER_CONFIG*)",
    "insertText": "vp9_svc_twostage_scale(VP9_COMMON *cm, YV12_BUFFER_CONFIG *unscaled, YV12_BUFFER_CONFIG *scaled, YV12_BUFFER_CONFIG *scaled_temp, INTERP_FILTER filter_type, int phase_scaler, INTERP_FILTER filter_type2, int phase_scaler2)"
  },
  {
    "label": "vp9_scale_if_required()",
    "kind": "Method",
    "detail": "Function (YV12_BUFFER_CONFIG*)",
    "insertText": "vp9_scale_if_required(VP9_COMMON *cm, YV12_BUFFER_CONFIG *unscaled, YV12_BUFFER_CONFIG *scaled, int use_normative_scaler, INTERP_FILTER filter_type, int phase_scaler)"
  },
  {
    "label": "vp9_apply_encoding_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_apply_encoding_flags(VP9_COMP *cpi, vpx_enc_frame_flags_t flags)"
  },
  {
    "label": "is_one_pass_cbr_svc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "is_one_pass_cbr_svc(const struct VP9_COMP *const cpi)"
  },
  {
    "label": "denoise_svc()",
    "kind": "Method",
    "detail": "Function (} # if CONFIG_VP9_TEMPORAL_DENOISING int)",
    "insertText": "denoise_svc(const struct VP9_COMP *const cpi)"
  },
  {
    "label": "is_altref_enabled()",
    "kind": "Method",
    "detail": "Function (} # endif # define MIN_LOOKAHEAD_FOR_ARFS 4 int)",
    "insertText": "is_altref_enabled(const VP9_COMP *const cpi)"
  },
  {
    "label": "set_ref_ptrs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_ref_ptrs(const VP9_COMMON *const cm, MACROBLOCKD *xd, MV_REFERENCE_FRAME ref0, MV_REFERENCE_FRAME ref1)"
  },
  {
    "label": "get_chessboard_index()",
    "kind": "Method",
    "detail": "Function (xd -> block_refs [ 0 ] =& cm -> frame_refs [ ref0> = LAST_FRAME ? ref0 - LAST_FRAME : 0 ] ; xd -> block_refs [ 1 ] =& cm -> frame_refs [ ref1> = LAST_FRAME ? ref1 - LAST_FRAME : 0 ] ; } int)",
    "insertText": "get_chessboard_index(const int frame_index)"
  },
  {
    "label": "num_vert_units()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_vert_units(tile.mi_row_end - tile.mi_row_start + (1 << shift) - 1)"
  },
  {
    "label": "num_cols()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_cols(tile.mi_col_end - tile.mi_col_start + (1 << shift) - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i < VP9_LEVELS; ++i)"
  },
  {
    "label": "log_tile_cols_from_picsize_level()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } int)",
    "insertText": "log_tile_cols_from_picsize_level(uint32_t width, uint32_t height)"
  },
  {
    "label": "VPXMAX()",
    "kind": "Method",
    "detail": "Function (int i ; const uint32_t pic_size = width* height ; const uint32_t pic_breadth =)",
    "insertText": "VPXMAX(width, height)"
  },
  {
    "label": "vp9_get_level()",
    "kind": "Method",
    "detail": "Function (} } return INT_MAX ; } VP9_LEVEL)",
    "insertText": "vp9_get_level(const Vp9LevelSpec *const level_spec)"
  },
  {
    "label": "vp9_set_roi_map()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_set_roi_map(VP9_COMP *cpi, unsigned char *map, unsigned int rows, unsigned int cols, int delta_q[8], int delta_lf[8], int skip[8], int ref_frame[8])"
  },
  {
    "label": "vp9_new_framerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_new_framerate(VP9_COMP *cpi, double framerate)"
  },
  {
    "label": "vp9_set_row_mt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_row_mt(VP9_COMP *cpi)"
  },
  {
    "label": "vp9_get_psnr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_psnr(const VP9_COMP *cpi, PSNR_STATS *psnr)"
  }
]