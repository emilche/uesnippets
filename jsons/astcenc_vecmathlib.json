[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_H_INCLUDED # define ASTC_VECMATHLIB_H_INCLUDED # if ASTCENC_SSE ! = 0 | | ASTCENC_AVX ! = 0 # include<immintrin . h> # elif ASTCENC_NEON ! = 0 # include<arm_neon . h> # endif # if !)",
    "insertText": "defined(__clang__) && defined(_MSC_VER) #define ASTCENC_SIMD_INLINE __forceinline #define ASTCENC_NO_INLINE #elif defined(__GNUC__) && !defined(__clang__) #define ASTCENC_SIMD_INLINE __attribute__((always_inline)) inline #define ASTCENC_NO_INLINE __attribute__ ((noinline)) #else #define ASTCENC_SIMD_INLINE __attribute__((always_inline, nodebug)) inline #define ASTCENC_NO_INLINE __attribute__ ((noinline))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ASTCENC_NO_INVARIANCE)"
  },
  {
    "label": "round_down_to_simd_multiple_8()",
    "kind": "Method",
    "detail": "Function (# else using vfloatacc = vfloat4 ; # endif using vint = vint8 ; using vmask = vmask8 ; auto loada = vfloat8::loada ; auto load1 = vfloat8::load1 ; # elif ASTCENC_SSE> = 2 0 # include \" astcenc_vecmathlib_sse_4 . h \" # include \" astcenc_vecmathlib_common_4 . h \" # define ASTCENC_SIMD_WIDTH 4 using vfloat = vfloat4 ; using vfloatacc = vfloat4 ; using vint = vint4 ; using vmask = vmask4 ; auto loada = vfloat4::loada ; auto load1 = vfloat4::load1 ; # elif ASTCENC_NEON> 0 # include \" astcenc_vecmathlib_neon_4 . h \" # include \" astcenc_vecmathlib_common_4 . h \" # define ASTCENC_SIMD_WIDTH 4 using vfloat = vfloat4 ; using vfloatacc = vfloat4 ; using vint = vint4 ; using vmask = vmask4 ; auto loada = vfloat4::loada ; auto load1 = vfloat4::load1 ; # else # include \" astcenc_vecmathlib_none_4 . h \" # include \" astcenc_vecmathlib_common_4 . h \" # define ASTCENC_SIMD_WIDTH 4 using vfloat = vfloat4 ; using vfloatacc = vfloat4 ; using vint = vint4 ; using vmask = vmask4 ; auto loada = vfloat4::loada ; auto load1 = vfloat4::load1 ; # endif ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "round_down_to_simd_multiple_8(unsigned int count)"
  },
  {
    "label": "round_down_to_simd_multiple_4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "round_down_to_simd_multiple_4(unsigned int count)"
  },
  {
    "label": "round_down_to_simd_multiple_vla()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "round_down_to_simd_multiple_vla(unsigned int count)"
  },
  {
    "label": "round_up_to_simd_multiple_vla()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "round_up_to_simd_multiple_vla(unsigned int count)"
  },
  {
    "label": "multiples()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "multiples(count + ASTCENC_SIMD_WIDTH - 1)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (vint ia =)",
    "insertText": "float_as_int(a)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (vint ib =)",
    "insertText": "float_as_int(b)"
  },
  {
    "label": "sign_mask()",
    "kind": "Method",
    "detail": "Function (vint)",
    "insertText": "sign_mask(static_cast<int>(0x80000000))"
  },
  {
    "label": "ia()",
    "kind": "Method",
    "detail": "Function (vint r =)",
    "insertText": "ia(ib & sign_mask)"
  },
  {
    "label": "atan()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat)",
    "insertText": "atan(vfloat x)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (vmask c =)",
    "insertText": "abs(x) > vfloat(1.0f)"
  },
  {
    "label": "change_sign()",
    "kind": "Method",
    "detail": "Function (vfloat z =)",
    "insertText": "change_sign(vfloat(astc::PI_OVER_TWO), x)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (vfloat y =)",
    "insertText": "select(x, vfloat(1.0f) / x, c)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "y(y * y * vfloat(0.28f) + vfloat(1.0f))"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat)",
    "insertText": "atan2(vfloat y, vfloat x)"
  },
  {
    "label": "atan()",
    "kind": "Method",
    "detail": "Function (vfloat z =)",
    "insertText": "atan(abs(y / x))"
  },
  {
    "label": "vmask()",
    "kind": "Method",
    "detail": "Function (vmask xmask =)",
    "insertText": "vmask(float_as_int(x).m)"
  },
  {
    "label": "unit4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "unit4()"
  },
  {
    "label": "unit3()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "unit3()"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (float val = 0 . 5 7 7 3 5 0 2 5 8 8 2 7 2 0 9 4 7 3 f ; return)",
    "insertText": "vfloat4(val, val, val, 0.0f)"
  },
  {
    "label": "unit2()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "unit2()"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (float val = 0 . 7 0 7 1 0 6 7 6 9 0 8 4 9 3 0 4 2 0 f ; return)",
    "insertText": "vfloat4(val, val, 0.0f, 0.0f)"
  },
  {
    "label": "vfloat3()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "vfloat3(float a, float b, float c)"
  },
  {
    "label": "vfloat2()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "vfloat2(float a, float b)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "normalize(vfloat4 a)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (vfloat4 length =)",
    "insertText": "dot(a, a)"
  },
  {
    "label": "normalize_safe()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "normalize_safe(vfloat4 a, vfloat4 safe)"
  },
  {
    "label": "POLY0()",
    "kind": "Method",
    "detail": "Function (} return safe ; } # define)",
    "insertText": "POLY0(x, c0) ( c0) #define POLY1(x, c0, c1) ((POLY0(x, c1) * x) + c0) #define POLY2(x, c0, c1, c2) ((POLY1(x, c1, c2) * x) + c0) #define POLY3(x, c0, c1, c2, c3) ((POLY2(x, c1, c2, c3) * x) + c0) #define POLY4(x, c0, c1, c2, c3, c4) ((POLY3(x, c1, c2, c3, c4) * x) + c0) #define POLY5(x, c0, c1, c2, c3, c4, c5) ((POLY4(x, c1, c2, c3, c4, c5) * x) + c0) static ASTCENC_SIMD_INLINE vfloat4 exp2(vfloat4 x)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "clamp(-126.99999f, 129.0f, x)"
  },
  {
    "label": "float_to_int()",
    "kind": "Method",
    "detail": "Function (vint4 ipart =)",
    "insertText": "float_to_int(x - 0.5f)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (vfloat4 fpart = x -)",
    "insertText": "int_to_float(ipart)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (vfloat4 iexp =)",
    "insertText": "int_as_float(lsl<23>(ipart + 127))"
  },
  {
    "label": "POLY5()",
    "kind": "Method",
    "detail": "Function (vfloat4 fexp =)",
    "insertText": "POLY5(fpart, 9.9999994e-1f, 6.9315308e-1f, 2.4015361e-1f, 5.5826318e-2f, 8.9893397e-3f, 1.8775767e-3f)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "exp(0x7F800000)"
  },
  {
    "label": "mant()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "mant(0x007FFFFF)"
  },
  {
    "label": "one()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "one(0x3F800000)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (vint4 i =)",
    "insertText": "float_as_int(x)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (vfloat4 e =)",
    "insertText": "int_to_float(lsr<23>(i & exp) - 127)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (vfloat4 m =)",
    "insertText": "int_as_float((i & mant) | one)"
  },
  {
    "label": "POLY4()",
    "kind": "Method",
    "detail": "Function (vfloat4 p =)",
    "insertText": "POLY4(m, 2.8882704548164776201f, -2.52074962577807006663f, 1.48116647521213171641f, -0.465725644288844778798f, 0.0596515482674574969533f)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "p(m - 1.0f)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vmask4 zero_mask = y = =)",
    "insertText": "vfloat4(0.0f)"
  },
  {
    "label": "exp2()",
    "kind": "Method",
    "detail": "Function (vfloat4 estimate =)",
    "insertText": "exp2(log2(x) * y)"
  },
  {
    "label": "clz()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "clz(vint4 a)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(~lsr<8>(a))"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "float_as_int(int_to_float(a))"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "vint4(127 + 31) - lsr<23>(a)"
  },
  {
    "label": "two_to_the_n()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "two_to_the_n(vint4 a)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(all(a < vint4(31)))"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (vint4 exp = a + 1 2 7 ; exp =)",
    "insertText": "lsl(exp)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (vfloat4 f =)",
    "insertText": "int_as_float(exp)"
  },
  {
    "label": "unorm16_to_sf16()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "unorm16_to_sf16(vint4 p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vint4 fp16_one =)",
    "insertText": "vint4(0x3C00)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (vint4 fp16_small =)",
    "insertText": "lsl(p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vmask4 is_one = p = =)",
    "insertText": "vint4(0xFFFF)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vmask4 is_small = p<)",
    "insertText": "vint4(4)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) && defined(_MSC_VER) vint4 a = (~lsr<8>(p))"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (vint4 lz =)",
    "insertText": "clamp(0, 32, a)"
  },
  {
    "label": "clz()",
    "kind": "Method",
    "detail": "Function (# else vint4 lz =)",
    "insertText": "clz(p)"
  },
  {
    "label": "two_to_the_n()",
    "kind": "Method",
    "detail": "Function (# endif p = p*)",
    "insertText": "two_to_the_n(lz + 1)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "lsr(p)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (p = p |)",
    "insertText": "lsl(vint4(14) - lz)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (vint4 r =)",
    "insertText": "select(p, fp16_one, is_one)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "select(r, fp16_small, is_small)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vint4 mc_512 = mc* 3 ; vmask4 mask_512 = mc<)",
    "insertText": "vint4(512)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vint4 mc_1536 = mc* 4 - 5 1 2 ; vmask4 mask_1536 = mc<)",
    "insertText": "vint4(1536)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (vint4 mc_else = mc* 5 - 2 0 4 8 ; vint4 mt = mc_else ; mt =)",
    "insertText": "select(mt, mc_1536, mask_1536)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (mt =)",
    "insertText": "select(mt, mc_512, mask_512)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (vint4 res =)",
    "insertText": "lsl(ec) | lsr<3>(mt)"
  },
  {
    "label": "frexp()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "frexp(vfloat4 a, vint4& exp)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exp(lsr<23>(ai) & 0xFF)"
  },
  {
    "label": "manti()",
    "kind": "Method",
    "detail": "Function (vint4)",
    "insertText": "manti(ai & static_cast<int>(0x807FFFFF))"
  },
  {
    "label": "float_to_lns()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "float_to_lns(vfloat4 a)"
  },
  {
    "label": "frexp()",
    "kind": "Method",
    "detail": "Function (vint4 exp ; vfloat4 mant =)",
    "insertText": "frexp(a, exp)"
  },
  {
    "label": "mask_underflow_nan()",
    "kind": "Method",
    "detail": "Function (vmask4)",
    "insertText": "mask_underflow_nan(a > vfloat4(1.0f / 67108864.0f))"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vmask4 mask_infinity = a> =)",
    "insertText": "vfloat4(65536.0f)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vmask4 exp_lt_m13 = exp<)",
    "insertText": "vint4(-13)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (vfloat4 a1a = a* 3 3 5 5 4 4 3 2 . 0 f ; vint4 expa =)",
    "insertText": "zero()"
  },
  {
    "label": "a1b()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "a1b(mant - 0.5f)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (vint4 expb = exp + 1 4 ; a =)",
    "insertText": "select(a1b, a1a, exp_lt_m13)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (exp =)",
    "insertText": "select(expb, expa, exp_lt_m13)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vmask4 a_lt_384 = a<)",
    "insertText": "vfloat4(384.0f)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vmask4 a_lt_1408 = a<=)",
    "insertText": "vfloat4(1408.0f)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (vfloat4 a2a =)",
    "insertText": "a(4.0f / 3.0f)"
  },
  {
    "label": "a2c()",
    "kind": "Method",
    "detail": "Function (vfloat4 a2b = a + 1 2 8 . 0 f ; vfloat4)",
    "insertText": "a2c(a + 512.0f) * (4.0f / 5.0f)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a = a2c ; a =)",
    "insertText": "select(a, a2b, a_lt_1408)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "select(a, a2a, a_lt_384)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "a(int_to_float(exp) * 2048.0f)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "select(a, vfloat4(65535.0f), mask_infinity)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "select(a, vfloat4::zero(), mask_underflow_nan)"
  }
]