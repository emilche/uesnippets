[
  {
    "label": "FNetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetResult"
  },
  {
    "label": "TNetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNetResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsEnum . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / ReflectedTypeAccessors . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" namespace UE { namespace Net { struct FNetResult ; template<> struct TNetResult ; template<T,= TEnableIf<TIsEnum<T>::Value>::Type> TNetResult<T>*)",
    "insertText": "Cast(FNetResult* InResult)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (template<T,= TEnableIf<TIsEnum<T>::Value>::Type> const TNetResult<T>*)",
    "insertText": "Cast(const FNetResult* InResult)"
  },
  {
    "label": "NetResultToString()",
    "kind": "Method",
    "detail": "Function (enum class ENetResultString : uint8 { WithoutChain,WithChain,ResultEnumOnly } ; namespace Private { void)",
    "insertText": "NetResultToString(FString& OutResultStr, const TCHAR* LexResult, const FString& ErrorContext, ENetResultString ConversionType)"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (} struct FNetResult { template<> struct TNetResult ; private :)",
    "insertText": "FNetResult(uint64 InResult, const UEnum* InResultEnumObj) : Result(InResult) , ResultEnumObj(InResultEnumObj) , RawResultEnumObj(InResultEnumObj)"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetResult(uint64 InResult, const UEnum* InResultEnumObj, const FString& InErrorContext) : Result(InResult) , ResultEnumObj(InResultEnumObj) , RawResultEnumObj(InResultEnumObj) , ErrorContext(InErrorContext)"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetResult(uint64 InResult, const UEnum* InResultEnumObj, FString&& InErrorContext) : Result(InResult) , ResultEnumObj(InResultEnumObj) , RawResultEnumObj(InResultEnumObj) , ErrorContext(MoveTemp(InErrorContext))"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FNetResult(const FNetResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResult&)",
    "insertText": "operator(const FNetResult&)"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetResult(FNetResult&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResult&)",
    "insertText": "operator(FNetResult&&)"
  },
  {
    "label": "FNetResult()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetResult()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FNetResult& A)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TNetResult<T>* ReturnVal = nullptr ;)",
    "insertText": "if(InResult != nullptr && InResult->RawResultEnumObj == StaticEnum<T>())"
  },
  {
    "label": "DynamicToString()",
    "kind": "Method",
    "detail": "Function (} return ReturnVal ; } FString)",
    "insertText": "DynamicToString(ENetResultString ConversionType=ENetResultString::WithoutChain)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(FNetResult const& Hash)"
  },
  {
    "label": "AddChainResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChainResult(FNetResult&& InResult)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FNetResult* ChainEnd = this ;)",
    "insertText": "while(ChainEnd->NextResult.IsValid())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ChainEnd = ChainEnd -> NextResult .)",
    "insertText": "Get()"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (} ChainEnd -> NextResult = MakePimpl<FNetResult,)",
    "insertText": "DeepCopy(MoveTemp(InResult))"
  },
  {
    "label": "AddChainResult()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsEnum<T>::Value>::Type> void)",
    "insertText": "AddChainResult(TNetResult<T>&& InResult)"
  },
  {
    "label": "HasChainResult()",
    "kind": "Method",
    "detail": "Function (} template<ResultEnum,= TEnableIf<TIsEnum<ResultEnum>::Value>::Type> bool)",
    "insertText": "HasChainResult(ResultEnum A)"
  },
  {
    "label": "ResultEnum()",
    "kind": "Method",
    "detail": "Function (const TNetResult<ResultEnum>* CurResult = Cast<)",
    "insertText": "ResultEnum(&*It)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "AddToChainResultPtr()",
    "kind": "Method",
    "detail": "Function (} } private : const FNetResult* CurResult ; } ; private : uint64 Result = 0 ; TWeakObjectPtr<const UEnum> ResultEnumObj ; const void* RawResultEnumObj = nullptr ; FString ErrorContext ; TPimplPtr<FNetResult,EPimplPtrMode::DeepCopy> NextResult ; } ; void)",
    "insertText": "AddToChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, FNetResult&& Result)"
  },
  {
    "label": "AddChainResult()",
    "kind": "Method",
    "detail": "Function (ResultPtr ->)",
    "insertText": "AddChainResult(MoveTemp(Result))"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (} else { ResultPtr = MakePimpl<FNetResult,)",
    "insertText": "DeepCopy(MoveTemp(Result))"
  },
  {
    "label": "AddToAndConsumeChainResultPtr()",
    "kind": "Method",
    "detail": "Function (} } FNetResult)",
    "insertText": "AddToAndConsumeChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, FNetResult&& Result)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const bool bValidResultPtr = ResultPtr .)",
    "insertText": "IsValid()"
  },
  {
    "label": "ReturnVal()",
    "kind": "Method",
    "detail": "Function (FNetResult)",
    "insertText": "ReturnVal(bValidResultPtr ? MoveTemp(*ResultPtr) : MoveTemp(Result))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} return ReturnVal ; } template<ResultEnum> struct TNetResult final : public FNetResult {)",
    "insertText": "static_assert(TIsEnum<ResultEnum>::Value, \"ResultEnum must be an enum\")"
  },
  {
    "label": "__underlying_type()",
    "kind": "Method",
    "detail": "Function (using UnderlyingResultType =)",
    "insertText": "__underlying_type(ResultEnum)"
  },
  {
    "label": "TNetResult()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TNetResult(ResultEnum InResult=ResultEnum::Unknown) : FNetResult(static_cast<UnderlyingResultType>(InResult), StaticEnum<ResultEnum>())"
  },
  {
    "label": "DefaultErrorContext()",
    "kind": "Method",
    "detail": "Function (ErrorContext =)",
    "insertText": "DefaultErrorContext(InResult)"
  },
  {
    "label": "TNetResult()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TNetResult(ResultEnum InResult, const FString& InErrorContext) : FNetResult(static_cast<UnderlyingResultType>(InResult), StaticEnum<ResultEnum>())"
  },
  {
    "label": "ErrorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ErrorContext(InErrorContext.IsEmpty() ? DefaultErrorContext(InResult) : InErrorContext)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "ToString(ENetResultString ConversionType=ENetResultString::WithoutChain)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net::Private ; FString ReturnVal ; const bool bIncludeChain = ConversionType = = ENetResultString::WithChain ;)",
    "insertText": "for(FConstIterator It(*this); It; ++It)"
  },
  {
    "label": "ToCStr()",
    "kind": "Method",
    "detail": "Function (const TCHAR* ResultLex =)",
    "insertText": "ToCStr(LexToString(static_cast<ResultEnum>(It->Result)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bIncludeChain)"
  },
  {
    "label": "WasSuccessful()",
    "kind": "Method",
    "detail": "Function (break ; } } return ReturnVal ; } bool)",
    "insertText": "WasSuccessful()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} ResultEnum)",
    "insertText": "GetResult()"
  },
  {
    "label": "GetErrorContext()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetErrorContext()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(ResultEnum A)"
  },
  {
    "label": "AddToChainResultPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, TNetResult&& Result)"
  },
  {
    "label": "AddToChainResultPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToChainResultPtr(ResultPtr, static_cast<FNetResult&&>(Result))"
  },
  {
    "label": "AddToAndConsumeChainResultPtr()",
    "kind": "Method",
    "detail": "Function (} FNetResult)",
    "insertText": "AddToAndConsumeChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, TNetResult&& Result)"
  },
  {
    "label": "DefaultErrorContext()",
    "kind": "Method",
    "detail": "Function (} private : const TCHAR*)",
    "insertText": "DefaultErrorContext(ResultEnum InResult)"
  },
  {
    "label": "DECLARE_NETRESULT_ENUM()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DECLARE_NETRESULT_ENUM(EnumType)"
  },
  {
    "label": "AddToChainResultPtr()",
    "kind": "Method",
    "detail": "Function (\\ namespace Net \\ { \\ void)",
    "insertText": "AddToChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, TNetResult<EnumType>&& Result)"
  },
  {
    "label": "AddToAndConsumeChainResultPtr()",
    "kind": "Method",
    "detail": "Function (\\ FNetResult)",
    "insertText": "AddToAndConsumeChainResultPtr(TPimplPtr<FNetResult, EPimplPtrMode::DeepCopy>& ResultPtr, TNetResult<EnumType>&& Result)"
  }
]