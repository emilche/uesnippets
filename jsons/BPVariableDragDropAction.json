[
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateColor"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FNodeConstructionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeConstructionParams"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditor . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Engine / Blueprint . h \" # include \" GraphEditorDragDropAction . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Math / Vector2D . h \" # include \" MyBlueprintItemDragDropAction . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class UBlueprint ; class UEdGraph ; class UEdGraphNode ; struct FEdGraphSchemaAction ; struct FSlateBrush ; struct FSlateColor ; class FKismetVariableDragDropAction : public FMyBlueprintItemDragDropAction { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FKismetVariableDragDropAction, FMyBlueprintItemDragDropAction) virtual void HoverTargetChanged()"
  },
  {
    "label": "DroppedOnPin()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnPin(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnNode(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnPanel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnPanel(const TSharedRef< class SWidget >& Panel, FVector2D ScreenPosition, FVector2D GraphPosition, UEdGraph& Graph)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FKismetVariableDragDropAction>)",
    "insertText": "New(TSharedPtr<FEdGraphSchemaAction> InAction, FName InVariableName, UStruct* InVariableSource, FNodeCreationAnalytic AnalyticCallback)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FKismetVariableDragDropAction> Operation =)",
    "insertText": "MakeShareable(new FKismetVariableDragDropAction)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Operation -> VariableName = InVariableName ; Operation -> VariableSource = InVariableSource ; Operation -> AnalyticCallback = AnalyticCallback ; Operation -> SourceAction = InAction ; Operation ->)",
    "insertText": "Construct()"
  },
  {
    "label": "FKismetVariableDragDropAction()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected :)",
    "insertText": "FKismetVariableDragDropAction()"
  },
  {
    "label": "GetDefaultStatusSymbol()",
    "kind": "Method",
    "detail": "Function (struct FNodeConstructionParams { FVector2D GraphPosition ; UEdGraph* Graph ; FName VariableName ; TWeakObjectPtr<UStruct> VariableSource ; } ; void)",
    "insertText": "GetDefaultStatusSymbol(const FSlateBrush*& PrimaryBrushOut, FSlateColor& IconColorOut, FSlateBrush const*& SecondaryBrushOut, FSlateColor& SecondaryColorOut)"
  },
  {
    "label": "GetSourceBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetSourceBlueprint()"
  },
  {
    "label": "MakeGetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeGetter(FNodeConstructionParams InParams)"
  },
  {
    "label": "MakeSetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSetter(FNodeConstructionParams InParams)"
  },
  {
    "label": "CanExecuteMakeSetter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteMakeSetter(FNodeConstructionParams InParams, FProperty* InVariableProperty)"
  },
  {
    "label": "GetLinksThatWillBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinksThatWillBreak(UEdGraphNode* Node, FProperty* NewVariableProperty, TArray<class UEdGraphPin*>& OutBroken)"
  },
  {
    "label": "WillBreakLinks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillBreakLinks(UEdGraphNode* Node, FProperty* NewVariableProperty)"
  },
  {
    "label": "GetLinksThatWillBreak()",
    "kind": "Method",
    "detail": "Function (TArray<class UEdGraphPin*> BadLinks ;)",
    "insertText": "GetLinksThatWillBreak(Node,NewVariableProperty,BadLinks)"
  },
  {
    "label": "CanVariableBeDropped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanVariableBeDropped(const FProperty* InVariableProperty, const UEdGraph& InGraph)"
  },
  {
    "label": "GetLocalVariableScope()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetLocalVariableScope()"
  }
]