[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGrainEnvelope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrainEnvelope"
  },
  {
    "label": "FGrainData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrainData"
  },
  {
    "label": "FGranularSynth",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGranularSynth"
  },
  {
    "label": "FGrain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrain"
  },
  {
    "label": "FGrainParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrainParam"
  },
  {
    "label": "FGrainEnvelope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / Osc . h \" # include \" DSP / SampleBufferReader . h \" # include \" DSP / Envelope . h \" # include \" DSP / Amp . h \" # include \" DSP / DynamicsProcessor . h \" # include \" SampleBuffer . h \" namespace Audio { enum class EGranularSynthMode : uint8 { Synthesis,Granulation,Count,} ; enum class EGrainEnvelopeType { Rectangular,Triangle,DownwardTriangle,UpwardTriangle,ExponentialDecay,ExponentialIncrease,Gaussian,Hanning,Lanczos,Cosine,CosineSquared,Welch,Blackman,BlackmanHarris,Count } ; class FGrainEnvelope { public :)",
    "insertText": "FGrainEnvelope()"
  },
  {
    "label": "GenerateEnvelope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateEnvelope(const EGrainEnvelopeType EnvelopeType, const int32 NumFrames)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValue(const float Fraction)"
  },
  {
    "label": "FGrain()",
    "kind": "Method",
    "detail": "Function (private : EGrainEnvelopeType CurrentType ; TArray<float> GrainEnvelope ; } ; struct FGrainData { EOsc::Type OscType ; float BufferSeekTime ; float DurationSeconds ; float PitchScale ; float Frequency ; float Volume ; float Pan ; } ; class FGranularSynth ; class FGrain { public :)",
    "insertText": "FGrain(const int32 InGrainId, FGranularSynth* InParent)"
  },
  {
    "label": "FGrain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGrain()"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(const FGrainData& InGrainData)"
  },
  {
    "label": "SetOscType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOscType(const EOsc::Type InType)"
  },
  {
    "label": "SetOscFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOscFrequency(const float InFrequency)"
  },
  {
    "label": "SetOscFrequencyModuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOscFrequencyModuation(const float InFrequencyModulation)"
  },
  {
    "label": "SetPitchModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitchModulation(const float InPitchModulation)"
  },
  {
    "label": "SetVolumeModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeModulation(const float InVolumeModulation)"
  },
  {
    "label": "SetPanModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPanModulation(const float InPanModulation)"
  },
  {
    "label": "SetDurationScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDurationScale(const float InDurationScale)"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "GenerateFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateFrame(float* OutStereoFrame)"
  },
  {
    "label": "GetEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetEnvelopeValue()"
  },
  {
    "label": "FGranularSynth()",
    "kind": "Method",
    "detail": "Function (int32 GrainId ; FGranularSynth* Parent ; FGrainData GrainData ; FSampleBufferReader SampleBufferReader ; FOsc Osc ; float CurrentPitch ; float CurrentFrequency ; float CurrentVolumeScale ; float CurrentPan ; float DurationScale ; float CurrentFrameCount ; float EndFrameCount ; TArray<float> SpeakerMap ; TArray<float> FrameScratch ; } ; class FGranularSynth { public :)",
    "insertText": "FGranularSynth()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const int32 InSampleRate, const int32 InNumInitialGrains)"
  },
  {
    "label": "LoadSampleBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSampleBuffer(const TSampleBuffer<int16>& InSampleBuffer)"
  },
  {
    "label": "NoteOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteOn(const uint32 InMidiNote, const float InVelocity, const float InDurationSec = INDEX_NONE)"
  },
  {
    "label": "NoteOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteOff(const uint32 InMidiNote, const bool bKill)"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(const float InAttackTimeMSec)"
  },
  {
    "label": "SetDecayTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecayTime(const float InDecayTimeMSec)"
  },
  {
    "label": "SetSustainGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSustainGain(const float InSustainGain)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(const float InReleaseTimeMSec)"
  },
  {
    "label": "SeekTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekTime(const float InTimeSec, const float LerpTimeSec = 0.0f, const ESeekType::Type InSeekType = ESeekType::FromBeginning)"
  },
  {
    "label": "SetScrubMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubMode(const bool bIsScrubMode)"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(const float InPlaybackSpeed)"
  },
  {
    "label": "SetGrainsPerSecond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainsPerSecond(const float InNumberOfGrainsPerSecond)"
  },
  {
    "label": "SetGrainProbability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainProbability(const float InGrainProbability)"
  },
  {
    "label": "SetGrainEnvelopeType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainEnvelopeType(const EGrainEnvelopeType InGrainEnvelopeType)"
  },
  {
    "label": "SetGrainOscType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainOscType(const EOsc::Type InGrainOscType)"
  },
  {
    "label": "SetGrainVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainVolume(const float InBaseVolume, const FVector2D InVolumeRange = FVector2D::ZeroVector)"
  },
  {
    "label": "SetGrainVolumeModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainVolumeModulation(const float InVolumeModulation)"
  },
  {
    "label": "SetGrainPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainPitch(const float InBasePitch, const FVector2D InPitchRange = FVector2D::ZeroVector)"
  },
  {
    "label": "SetGrainFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainFrequency(const float InFrequency, const FVector2D InPitchRange = FVector2D::ZeroVector)"
  },
  {
    "label": "SetGrainFrequencyModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainFrequencyModulation(const float InFrequencyModulation)"
  },
  {
    "label": "SetGrainPitchModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainPitchModulation(const float InPitchModulation)"
  },
  {
    "label": "SetGrainPan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainPan(const float InBasePan, const FVector2D InPanRange = FVector2D::ZeroVector)"
  },
  {
    "label": "SetGrainPanModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainPanModulation(const float InPanModulation)"
  },
  {
    "label": "SetGrainDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainDuration(const float InBaseDuration, const FVector2D InDurationRange = FVector2D::ZeroVector)"
  },
  {
    "label": "SetGrainDurationScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainDurationScale(const float InDurationScale)"
  },
  {
    "label": "GetNumActiveGrains()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveGrains()"
  },
  {
    "label": "GetCurrentPlayheadTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentPlayheadTime()"
  },
  {
    "label": "GetSampleDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleDuration()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Generate(float* OutAudiobuffer, const int32 NumFrames)"
  },
  {
    "label": "SpawnGrain()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SpawnGrain()"
  },
  {
    "label": "GetWrappedPlayheadPosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWrappedPlayheadPosition(float PlayheadFrame)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (struct FGrainParam { float Modulation ; float Base ; FVector2D Range ; float)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetModulation()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetModulation()"
  }
]