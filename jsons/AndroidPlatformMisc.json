[
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAndroidMisc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidMisc"
  },
  {
    "label": "FCPUStatTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCPUStatTime"
  },
  {
    "label": "FCPUState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCPUState"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "TArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArray"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "EBatteryState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBatteryState"
  },
  {
    "label": "FBatteryState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatteryState"
  },
  {
    "label": "siginfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "siginfo"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "PLATFORM_BREAK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Android / AndroidSystemIncludes . h \" # include \" GenericPlatform / GenericPlatformMisc . h \" template<FuncType> class TFunction ; # define)",
    "insertText": "PLATFORM_BREAK() raise(SIGTRAP) #define UE_DEBUG_BREAK_IMPL() PLATFORM_BREAK()"
  },
  {
    "label": "RequestExit()",
    "kind": "Method",
    "detail": "Function (struct FAndroidMisc : public FGenericPlatformMisc { void)",
    "insertText": "RequestExit(bool Force, const TCHAR* CallSite = nullptr)"
  },
  {
    "label": "RestartApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestartApplication()"
  },
  {
    "label": "LocalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalPrint(const TCHAR *Message)"
  },
  {
    "label": "IsLocalPrintThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalPrintThreadSafe()"
  },
  {
    "label": "PlatformInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformInit()"
  },
  {
    "label": "PlatformTearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformTearDown()"
  },
  {
    "label": "PlatformHandleSplashScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformHandleSplashScreen(bool ShowSplashScreen)"
  },
  {
    "label": "GetDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (EDeviceScreenOrientation)",
    "insertText": "GetDeviceOrientation()"
  },
  {
    "label": "SetAllowedDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowedDeviceOrientation(EDeviceScreenOrientation NewAllowedDeviceOrientation)"
  },
  {
    "label": "SetCellularPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCellularPreference(int32 Value)"
  },
  {
    "label": "GetCellularPreference()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCellularPreference()"
  },
  {
    "label": "GetEnvironmentVariable()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnvironmentVariable(const TCHAR* VariableName)"
  },
  {
    "label": "GetSystemErrorMessage()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetSystemErrorMessage(TCHAR* OutBuffer, int32 BufferCount, int32 Error)"
  },
  {
    "label": "MessageBoxExt()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type)",
    "insertText": "MessageBoxExt(EAppMsgType::Type MsgType, const TCHAR* Text, const TCHAR* Caption)"
  },
  {
    "label": "UseRenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseRenderThread()"
  },
  {
    "label": "HasPlatformFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlatformFeature(const TCHAR* FeatureName)"
  },
  {
    "label": "SupportsES30()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsES30()"
  },
  {
    "label": "SetStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName, const FString& InValue)"
  },
  {
    "label": "GetStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName, FString& OutValue)"
  },
  {
    "label": "DeleteStoredValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteStoredValue(const FString& InStoreId, const FString& InSectionName, const FString& InKeyName)"
  },
  {
    "label": "DeleteStoredSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteStoredSection(const FString& InStoreId, const FString& InSectionName)"
  },
  {
    "label": "AllowThreadHeartBeat()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "AllowThreadHeartBeat()"
  },
  {
    "label": "GetCPUState()",
    "kind": "Method",
    "detail": "Function (struct FCPUStatTime { uint64_t TotalTime ; uint64_t UserTime ; uint64_t NiceTime ; uint64_t SystemTime ; uint64_t SoftIRQTime ; uint64_t IRQTime ; uint64_t IdleTime ; uint64_t IOWaitTime ; } ; struct FCPUState { const int32 MaxSupportedCores = 1 6 ; int32 CoreCount ; int32 ActivatedCoreCount ; ANSICHAR Name [ 6 ] ; FAndroidMisc::FCPUStatTime CurrentUsage [ MaxSupportedCores ] ; FAndroidMisc::FCPUStatTime PreviousUsage [ MaxSupportedCores ] ; int32 Status [ MaxSupportedCores ] ; double Utilization [ MaxSupportedCores ] ; double AverageUtilization ; } ; FCPUState&)",
    "insertText": "GetCPUState()"
  },
  {
    "label": "NumberOfCores()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfCores()"
  },
  {
    "label": "NumberOfCoresIncludingHyperthreads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfCoresIncludingHyperthreads()"
  },
  {
    "label": "SupportsLocalCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLocalCaching()"
  },
  {
    "label": "CreateGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGuid(struct FGuid& Result)"
  },
  {
    "label": "SetCrashHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrashHandler(void (* CrashHandler)(const FGenericCrashContext& Context))"
  },
  {
    "label": "GetValidTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidTargetPlatforms(class TArray<class FString>& TargetPlatformNames)"
  },
  {
    "label": "GetUseVirtualJoysticks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseVirtualJoysticks()"
  },
  {
    "label": "SupportsTouchInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTouchInput()"
  },
  {
    "label": "GetDefaultDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDefaultDeviceProfileName()"
  },
  {
    "label": "GetVolumeButtonsHandledBySystem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetVolumeButtonsHandledBySystem()"
  },
  {
    "label": "SetVolumeButtonsHandledBySystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeButtonsHandledBySystem(bool enabled)"
  },
  {
    "label": "GetVolumeState()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVolumeState(double* OutTimeOfChangeInSec = nullptr)"
  },
  {
    "label": "GetDeviceVolume()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeviceVolume()"
  },
  {
    "label": "GamePersistentDownloadDir()",
    "kind": "Method",
    "detail": "Function (# if USE_ANDROID_FILE const TCHAR*)",
    "insertText": "GamePersistentDownloadDir()"
  },
  {
    "label": "GetLoginId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLoginId()"
  },
  {
    "label": "GetDeviceId()",
    "kind": "Method",
    "detail": "Function (# endif # if USE_ANDROID_JNI FString)",
    "insertText": "GetDeviceId()"
  },
  {
    "label": "GetUniqueAdvertisingId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUniqueAdvertisingId()"
  },
  {
    "label": "GetCPUVendor()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetCPUVendor()"
  },
  {
    "label": "GetCPUBrand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPUBrand()"
  },
  {
    "label": "GetCPUChipset()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCPUChipset()"
  },
  {
    "label": "GetPrimaryGPUBrand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPrimaryGPUBrand()"
  },
  {
    "label": "GetOSVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOSVersions(FString& out_OSVersionLabel, FString& out_OSSubVersionLabel)"
  },
  {
    "label": "GetDiskTotalAndFreeSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDiskTotalAndFreeSpace(const FString& InPath, uint64& TotalNumberOfBytes, uint64& NumberOfFreeBytes)"
  },
  {
    "label": "GetBatteryState()",
    "kind": "Method",
    "detail": "Function (enum EBatteryState { BATTERY_STATE_UNKNOWN = 1,BATTERY_STATE_CHARGING,BATTERY_STATE_DISCHARGING,BATTERY_STATE_NOT_CHARGING,BATTERY_STATE_FULL } ; struct FBatteryState { FAndroidMisc::EBatteryState State ; int Level ; float Temperature ; } ; FBatteryState)",
    "insertText": "GetBatteryState()"
  },
  {
    "label": "GetBatteryLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBatteryLevel()"
  },
  {
    "label": "IsRunningOnBattery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningOnBattery()"
  },
  {
    "label": "IsInLowPowerMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInLowPowerMode()"
  },
  {
    "label": "GetDeviceTemperatureLevel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeviceTemperatureLevel()"
  },
  {
    "label": "AreHeadPhonesPluggedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreHeadPhonesPluggedIn()"
  },
  {
    "label": "GetNetworkConnectionType()",
    "kind": "Method",
    "detail": "Function (ENetworkConnectionType)",
    "insertText": "GetNetworkConnectionType()"
  },
  {
    "label": "HasActiveWiFiConnection()",
    "kind": "Method",
    "detail": "Function (# if USE_ANDROID_JNI bool)",
    "insertText": "HasActiveWiFiConnection()"
  },
  {
    "label": "RegisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RegisterForRemoteNotifications()"
  },
  {
    "label": "UnregisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForRemoteNotifications()"
  },
  {
    "label": "IsAllowedRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedRemoteNotifications()"
  },
  {
    "label": "GetSystemFontBytes()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "GetSystemFontBytes()"
  },
  {
    "label": "GetPlatformChunkInstall()",
    "kind": "Method",
    "detail": "Function (IPlatformChunkInstall*)",
    "insertText": "GetPlatformChunkInstall()"
  },
  {
    "label": "PrepareMobileHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareMobileHaptics(EMobileHapticsType Type)"
  },
  {
    "label": "TriggerMobileHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMobileHaptics()"
  },
  {
    "label": "ReleaseMobileHaptics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMobileHaptics()"
  },
  {
    "label": "ShareURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShareURL(const FString& URL, const FText& Description, int32 LocationHintX, int32 LocationHintY)"
  },
  {
    "label": "LoadTextFileFromPlatformPackage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LoadTextFileFromPlatformPackage(const FString& RelativePath)"
  },
  {
    "label": "FileExistsInPlatformPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExistsInPlatformPackage(const FString& RelativePath)"
  },
  {
    "label": "SetVersionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVersionInfo(FString AndroidVersion, int32 InTargetSDKVersion, FString DeviceMake, FString DeviceModel, FString DeviceBuildNumber, FString OSLanguage, FString ProductName)"
  },
  {
    "label": "GetAndroidVersion()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetAndroidVersion()"
  },
  {
    "label": "GetAndroidMajorVersion()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAndroidMajorVersion()"
  },
  {
    "label": "GetTargetSDKVersion()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTargetSDKVersion()"
  },
  {
    "label": "GetDeviceMake()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetDeviceMake()"
  },
  {
    "label": "GetDeviceModel()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetDeviceModel()"
  },
  {
    "label": "GetOSLanguage()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetOSLanguage()"
  },
  {
    "label": "GetProductName()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetProductName()"
  },
  {
    "label": "GetDeviceBuildNumber()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetDeviceBuildNumber()"
  },
  {
    "label": "GetProjectVersion()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetProjectVersion()"
  },
  {
    "label": "GetDefaultLocale()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultLocale()"
  },
  {
    "label": "GetGPUFamily()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGPUFamily()"
  },
  {
    "label": "GetGLVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGLVersion()"
  },
  {
    "label": "SupportsFloatingPointRenderTargets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFloatingPointRenderTargets()"
  },
  {
    "label": "SupportsShaderFramebufferFetch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsShaderFramebufferFetch()"
  },
  {
    "label": "SupportsShaderIOBlocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsShaderIOBlocks()"
  },
  {
    "label": "GetAndroidBuildVersion()",
    "kind": "Method",
    "detail": "Function (# if USE_ANDROID_JNI int)",
    "insertText": "GetAndroidBuildVersion()"
  },
  {
    "label": "IsSupportedAndroidDevice()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsSupportedAndroidDevice()"
  },
  {
    "label": "SetForceUnsupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceUnsupported(bool bInOverride)"
  },
  {
    "label": "GetConfigRulesTMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,FString>&)",
    "insertText": "GetConfigRulesTMap()"
  },
  {
    "label": "GetConfigRulesVariable()",
    "kind": "Method",
    "detail": "Function (FString*)",
    "insertText": "GetConfigRulesVariable(const FString& Key)"
  },
  {
    "label": "HasVulkanDriverSupport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVulkanDriverSupport()"
  },
  {
    "label": "IsVulkanAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVulkanAvailable()"
  },
  {
    "label": "IsDesktopVulkanAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDesktopVulkanAvailable()"
  },
  {
    "label": "ShouldUseVulkan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseVulkan()"
  },
  {
    "label": "ShouldUseDesktopVulkan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseDesktopVulkan()"
  },
  {
    "label": "GetVulkanVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVulkanVersion()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(void* NewNativeHandle)"
  },
  {
    "label": "GetOnReInitWindowCallback()",
    "kind": "Method",
    "detail": "Function (ReInitWindowCallbackType)",
    "insertText": "GetOnReInitWindowCallback()"
  },
  {
    "label": "SetOnReInitWindowCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnReInitWindowCallback(ReInitWindowCallbackType InOnReInitWindowCallback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "GetOnReleaseWindowCallback()",
    "kind": "Method",
    "detail": "Function (ReleaseWindowCallbackType)",
    "insertText": "GetOnReleaseWindowCallback()"
  },
  {
    "label": "SetOnReleaseWindowCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnReleaseWindowCallback(ReleaseWindowCallbackType InOnReleaseWindowCallback)"
  },
  {
    "label": "GetOSVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOSVersion()"
  },
  {
    "label": "GetOverrideResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideResolution(int32 &ResX, int32& ResY)"
  },
  {
    "label": "GetOnPauseCallback()",
    "kind": "Method",
    "detail": "Function (OnPauseCallBackType)",
    "insertText": "GetOnPauseCallback()"
  },
  {
    "label": "SetOnPauseCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnPauseCallback(OnPauseCallBackType InOnPauseCallback)"
  },
  {
    "label": "TriggerCrashHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerCrashHandler(ECrashContextType InType, const TCHAR* InErrorMessage, const TCHAR* OverrideCallstack = nullptr)"
  },
  {
    "label": "GetFatalSignalMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFatalSignalMessage(int Signal, siginfo* Info)"
  },
  {
    "label": "OverrideFatalSignalHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideFatalSignalHandler(void (*FatalSignalHandlerOverrideFunc)(int Signal, struct siginfo* Info, void* Context, uint32 CrashingThreadId))"
  },
  {
    "label": "IsInSignalHandler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSignalHandler()"
  },
  {
    "label": "IsDebuggerPresent()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "IsDebuggerPresent()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "__sync_synchronize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__sync_synchronize()"
  },
  {
    "label": "BeginNamedEventFrame()",
    "kind": "Method",
    "detail": "Function (} # if STATS | | ENABLE_STATNAMEDEVENTS void)",
    "insertText": "BeginNamedEventFrame()"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNamedEvent(const struct FColor& Color, const TCHAR* Text)"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNamedEvent(const struct FColor& Color, const ANSICHAR* Text)"
  },
  {
    "label": "EndNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNamedEvent()"
  },
  {
    "label": "CustomNamedStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomNamedStat(const TCHAR* Text, float Value, const TCHAR* Graph, const TCHAR* Unit)"
  },
  {
    "label": "CustomNamedStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomNamedStat(const ANSICHAR* Text, float Value, const ANSICHAR* Graph, const ANSICHAR* Unit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(STATS || ENABLE_STATNAMEDEVENTS)"
  },
  {
    "label": "GetCoreFrequency()",
    "kind": "Method",
    "detail": "Function (# endif FString AndroidVersion ; int32 AndroidMajorVersion ; int32 TargetSDKVersion ; FString DeviceMake ; FString DeviceModel ; FString DeviceBuildNumber ; FString OSLanguage ; FString ProductName ; int32 AndroidBuildVersion ; TMap<FString,FString> ConfigRulesVariables ; bool VolumeButtonsHandledBySystem ; bool bNeedsRestartAfterPSOPrecompile ; enum class ECoreFrequencyProperty { CurrentFrequency,MaxFrequency,MinFrequency,} ; uint32)",
    "insertText": "GetCoreFrequency(int32 CoreIndex, ECoreFrequencyProperty CoreFrequencyProperty)"
  },
  {
    "label": "GetCPUTemperature()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCPUTemperature()"
  },
  {
    "label": "UpdateDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceOrientation()"
  },
  {
    "label": "SaveDeviceOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDeviceOrientation(EDeviceScreenOrientation NewDeviceOrentation)"
  },
  {
    "label": "UnlockAndroidWindow()",
    "kind": "Method",
    "detail": "Function (DeviceOrientation = NewDeviceOrentation ; } void)",
    "insertText": "UnlockAndroidWindow()"
  },
  {
    "label": "GetSupportedNativeDisplayRefreshRates()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetSupportedNativeDisplayRefreshRates()"
  },
  {
    "label": "SetNativeDisplayRefreshRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNativeDisplayRefreshRate(int32 RefreshRate)"
  },
  {
    "label": "GetNativeDisplayRefreshRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNativeDisplayRefreshRate()"
  },
  {
    "label": "Expand16BitIndicesTo32BitOnLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Expand16BitIndicesTo32BitOnLoad()"
  },
  {
    "label": "GetMobilePropagateAlphaSetting()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMobilePropagateAlphaSetting()"
  },
  {
    "label": "SupportsBackbufferSampling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBackbufferSampling()"
  },
  {
    "label": "SetMemoryWarningHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMemoryWarningHandler(void (*Handler)(const FGenericMemoryWarningContext& Context))"
  },
  {
    "label": "HasMemoryWarningHandler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMemoryWarningHandler()"
  },
  {
    "label": "NonReentrantRequestExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NonReentrantRequestExit()"
  },
  {
    "label": "RegisterThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterThreadName(const char* Name, uint32 ThreadId)"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetThreadName(uint32 ThreadId)"
  },
  {
    "label": "ShowConsoleWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConsoleWindow()"
  },
  {
    "label": "AddNetworkListener()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddNetworkListener(FOnNetworkConnectionChangedDelegate&& InNewDelegate)"
  },
  {
    "label": "RemoveNetworkListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNetworkListener(FDelegateHandle Handle)"
  },
  {
    "label": "CodeToString()",
    "kind": "Method",
    "detail": "Function (private : const ANSICHAR*)",
    "insertText": "CodeToString(int Signal, int si_code)"
  },
  {
    "label": "GetAndroidScreenOrientation()",
    "kind": "Method",
    "detail": "Function (EDeviceScreenOrientation DeviceOrientation ; # if USE_ANDROID_JNI enum class EAndroidScreenOrientation { SCREEN_ORIENTATION_UNSPECIFIED = - 1,SCREEN_ORIENTATION_LANDSCAPE = 0,SCREEN_ORIENTATION_PORTRAIT = 1,SCREEN_ORIENTATION_USER = 2,SCREEN_ORIENTATION_BEHIND = 3,SCREEN_ORIENTATION_SENSOR = 4,SCREEN_ORIENTATION_NOSENSOR = 5,SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 6,SCREEN_ORIENTATION_SENSOR_PORTRAIT = 7,SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8,SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9,SCREEN_ORIENTATION_FULL_SENSOR = 1 0,SCREEN_ORIENTATION_USER_LANDSCAPE = 1 1,SCREEN_ORIENTATION_USER_PORTRAIT = 1 2,} ; int32)",
    "insertText": "GetAndroidScreenOrientation(EDeviceScreenOrientation ScreenOrientation)"
  }
]