[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FEditorViewportSelectability",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportSelectability"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HMovieSceneKeyProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HMovieSceneKeyProxy"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "UMovieScene3DTransformTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformTrack"
  },
  {
    "label": "FMovieSceneEvaluationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrack"
  },
  {
    "label": "FMovieSceneInterrogationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationData"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "FSequencerSelectabilityTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelectabilityTool"
  },
  {
    "label": "FMarqueeDragTool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarqueeDragTool"
  },
  {
    "label": "FMeshTrailData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshTrailData"
  },
  {
    "label": "ASequencerMeshTrail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASequencerMeshTrail"
  },
  {
    "label": "FSequencerEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEdMode"
  },
  {
    "label": "ASequencerKeyActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASequencerKeyActor"
  },
  {
    "label": "FSequencerEdModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEdModeTool"
  },
  {
    "label": "FMarqueeDragTool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" EditorDragTools . h \" # include \" EditorModeTools . h \" # include \" EdMode . h \" # include \" Misc / FrameTime . h \" # include \" Engine / Texture2D . h \" class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FEditorViewportSelectability ; class ISequencer ; class FSequencer ; class FViewport ; struct HMovieSceneKeyProxy ; class UMovieScene3DTransformSection ; class UMovieScene3DTransformTrack ; struct FMovieSceneEvaluationTrack ; struct FMovieSceneInterrogationData ; class USequencerSettings ; class FSequencerSelectabilityTool ; struct FMarqueeDragTool {)",
    "insertText": "FMarqueeDragTool()"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "MakeDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDragTool(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "UsingDragTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingDragTool()"
  },
  {
    "label": "Render3DDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render3DDragTool(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "RenderDragTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDragTool(const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "FMeshTrailData()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FDragTool> DragTool ; bool bIsDeletingDragTool = false ; } ; struct FMeshTrailData { TObjectPtr<class UMovieScene3DTransformTrack> Track ; TObjectPtr<class ASequencerMeshTrail> Trail ;)",
    "insertText": "FMeshTrailData(class UMovieScene3DTransformTrack* InTrack, class ASequencerMeshTrail* InTrail) : Track(InTrack), Trail(InTrail)"
  },
  {
    "label": "FSequencerEdMode()",
    "kind": "Method",
    "detail": "Function (} } ; class FSequencerEdMode : public FEdMode { public : const FEditorModeID EM_SequencerMode ; public :)",
    "insertText": "FSequencerEdMode()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View,FViewport* Viewport,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InX, int32 InY)"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves(FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *InHitProxy, const FViewportClick &InClick)"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelect(FBox& InBox, bool InSelect)"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient,float DeltaTime)"
  },
  {
    "label": "IsPressingMoveTimeSlider()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPressingMoveTimeSlider(FViewport* InViewport)"
  },
  {
    "label": "IsDoingDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDoingDrag(FViewport* InViewport)"
  },
  {
    "label": "IsMovingCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovingCamera(FViewport* InViewport)"
  },
  {
    "label": "AddSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSequencer(TWeakPtr<FSequencer> InSequencer)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Sequencers .)",
    "insertText": "AddUnique(InSequencer)"
  },
  {
    "label": "RemoveSequencer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveSequencer(TWeakPtr<FSequencer> InSequencer)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Sequencers .)",
    "insertText": "Remove(InSequencer)"
  },
  {
    "label": "GetSequencerSettings()",
    "kind": "Method",
    "detail": "Function (} USequencerSettings*)",
    "insertText": "GetSequencerSettings()"
  },
  {
    "label": "OnSequencerReceivedFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequencerReceivedFocus(TWeakPtr<FSequencer> InSequencer)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Sequencers .)",
    "insertText": "Sort([=](TWeakPtr<FSequencer> A, TWeakPtr<FSequencer> B){ return A == InSequencer; })"
  },
  {
    "label": "OnKeySelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnKeySelected(FViewport* Viewport, HMovieSceneKeyProxy* KeyProxy)"
  },
  {
    "label": "DrawMeshTransformTrailFromKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMeshTransformTrailFromKey(const class ASequencerKeyActor* KeyActor)"
  },
  {
    "label": "CleanUpMeshTrails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpMeshTrails()"
  },
  {
    "label": "IsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportSelectionLimited()"
  },
  {
    "label": "EnableSelectabilityTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSelectabilityTool(const bool bInEnabled)"
  },
  {
    "label": "IsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectSelectableInViewport(UObject* const InObject)"
  },
  {
    "label": "GetFirstActiveSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer>)",
    "insertText": "GetFirstActiveSequencer()"
  },
  {
    "label": "DrawTracks3D()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DrawTracks3D(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawTransformTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTransformTrack(const TSharedPtr<ISequencer>& Sequencer, FPrimitiveDrawInterface* PDI, UMovieScene3DTransformTrack* TransformTrack, TArrayView<const TWeakObjectPtr<>> BoundObjects, const bool bIsSelected)"
  },
  {
    "label": "DrawAudioTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAudioTracks(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "FSequencerEdModeTool()",
    "kind": "Method",
    "detail": "Function (private : TArray<TWeakPtr<FSequencer>> Sequencers ; TArray<FMeshTrailData> MeshTrails ; TSharedPtr<FMovieSceneInterrogationData> InterrogationData ; bool bDrawMeshTrails ; UTexture2D* AudioTexture ; bool bIsTracking = false ; TOptional<int32> StartXValue ; FFrameNumber StartFrameNumber ; FMarqueeDragTool DragToolHandler ; bool bUpdatePivot = false ; TSharedPtr<class FSequencerEdModeTool> DefaultTool ; TSharedPtr<FSequencerSelectabilityTool> SelectabilityTool ; } ; class FSequencerEdModeTool : public FModeTool { public :)",
    "insertText": "FSequencerEdModeTool(FSequencerEdMode* InSequencerEdMode)"
  },
  {
    "label": "FSequencerEdModeTool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerEdModeTool()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  }
]