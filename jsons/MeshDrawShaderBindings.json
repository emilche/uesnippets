[
  {
    "label": "FMeshDrawShaderBindingsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawShaderBindingsLayout"
  },
  {
    "label": "FMeshDrawShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawShaderBindings"
  },
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FReadOnlyMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadOnlyMeshDrawSingleShaderBindings"
  },
  {
    "label": "ParameterType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterType"
  },
  {
    "label": "FMeshDrawShaderBindingsLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Shader . h \" # define VALIDATE_MESH_COMMAND_BINDINGS DO_GUARD_SLOW class FMeshDrawShaderBindingsLayout { protected : const FShaderParameterMapInfo& ParameterMapInfo ; public :)",
    "insertText": "FMeshDrawShaderBindingsLayout(const TShaderRef<FShader>& Shader) : ParameterMapInfo(Shader->ParameterMapInfo)"
  },
  {
    "label": "GetParameterMapInfo()",
    "kind": "Method",
    "detail": "Function (} # if DO_GUARD_SLOW const FShaderParameterMapInfo&)",
    "insertText": "GetParameterMapInfo()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 DataSize = 0 ;)",
    "insertText": "for(const FShaderLooseParameterBufferInfo& Info : ParameterMapInfo.LooseParameterBuffers)"
  },
  {
    "label": "GetDataSizeBytes()",
    "kind": "Method",
    "detail": "Function (DataSize + = Info . Size ; } return DataSize ; } uint32)",
    "insertText": "GetDataSizeBytes()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 DataSize =)",
    "insertText": "sizeof(void*) * (ParameterMapInfo.UniformBuffers.Num() + ParameterMapInfo.TextureSamplers.Num() + ParameterMapInfo.SRVs.Num())"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (DataSize + =)",
    "insertText": "DivideAndRoundUp(ParameterMapInfo.SRVs.Num(), 8)"
  },
  {
    "label": "GetLooseDataSizeBytes()",
    "kind": "Method",
    "detail": "Function (DataSize + =)",
    "insertText": "GetLooseDataSizeBytes()"
  },
  {
    "label": "GetUniformBufferOffset()",
    "kind": "Method",
    "detail": "Function (} protected : uint32)",
    "insertText": "GetUniformBufferOffset()"
  },
  {
    "label": "GetSRVOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSRVOffset()"
  },
  {
    "label": "GetSRVTypeOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSRVTypeOffset()"
  },
  {
    "label": "GetLooseDataOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLooseDataOffset()"
  },
  {
    "label": "FMeshDrawSingleShaderBindings()",
    "kind": "Method",
    "detail": "Function (} class FMeshDrawShaderBindings ; } ; class FMeshDrawSingleShaderBindings : public FMeshDrawShaderBindingsLayout { class FReadOnlyMeshDrawSingleShaderBindings ; public :)",
    "insertText": "FMeshDrawSingleShaderBindings(const FMeshDrawShaderBindingsLayout& InLayout, uint8* InData) : FMeshDrawShaderBindingsLayout(InLayout)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Data = InData ; } template<UniformBufferStructType> void)",
    "insertText": "Add(const TShaderUniformBufferParameter<UniformBufferStructType>& Parameter, const TUniformBufferRef<UniformBufferStructType>& Value)"
  },
  {
    "label": "WriteBindingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingUniformBuffer(Value.GetReference(), Parameter.GetBaseIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } template<UniformBufferStructType> void)",
    "insertText": "Add(const TShaderUniformBufferParameter<UniformBufferStructType>& Parameter, const TUniformBuffer<UniformBufferStructType>& Value)"
  },
  {
    "label": "WriteBindingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingUniformBuffer(Value.GetUniformBufferRHI(), Parameter.GetBaseIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Add(const FShaderUniformBufferParameter& Parameter, const FRHIUniformBuffer* Value)"
  },
  {
    "label": "WriteBindingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingUniformBuffer(Value, Parameter.GetBaseIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Add(FShaderResourceParameter Parameter, FRHIShaderResourceView* Value)"
  },
  {
    "label": "WriteBindingSRV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingSRV(Value, Parameter.GetBaseIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Add(FShaderResourceParameter SamplerParameter, FRHISamplerState* SamplerStateRHI)"
  },
  {
    "label": "WriteBindingSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingSampler(SamplerStateRHI, SamplerParameter.GetBaseIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Add(FShaderResourceParameter TextureParameter, FRHITexture* TextureRHI)"
  },
  {
    "label": "WriteBindingTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingTexture(TextureRHI, TextureParameter.GetBaseIndex())"
  },
  {
    "label": "AddTexture()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddTexture(FShaderResourceParameter TextureParameter, FShaderResourceParameter SamplerParameter, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TextureParameter, TextureRHI)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(SamplerParameter, SamplerStateRHI)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<class ParameterType> void)",
    "insertText": "Add(FShaderParameter Parameter, const ParameterType& Value)"
  },
  {
    "label": "GetLooseDataStart()",
    "kind": "Method",
    "detail": "Function (bool bFoundParameter = false ; uint8* LooseDataOffset =)",
    "insertText": "GetLooseDataStart()"
  },
  {
    "label": "LooseParameterBuffers()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FShaderLooseParameterBufferInfo>)",
    "insertText": "LooseParameterBuffers(ParameterMapInfo.LooseParameterBuffers)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FShaderLooseParameterBufferInfo& LooseParameterBuffer = LooseParameterBuffers [ LooseBufferIndex ] ;)",
    "insertText": "if(LooseParameterBuffer.BaseIndex == Parameter.GetBufferIndex())"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FShaderLooseParameterInfo>)",
    "insertText": "Parameters(LooseParameterBuffer.Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FShaderLooseParameterInfo LooseParameter = Parameters [ LooseParameterIndex ] ;)",
    "insertText": "if(Parameter.GetBaseIndex() == LooseParameter.BaseIndex)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 NumBytesToSet = FMath::Min<)",
    "insertText": "int32(sizeof(ParameterType), Parameter.GetNumBytes())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(LooseDataOffset, &Value, NumBytesToSet)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 NumBytesToClear = FMath::Min<)",
    "insertText": "int32(0, Parameter.GetNumBytes() - NumBytesToSet)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(LooseDataOffset + NumBytesToSet, 0x00, NumBytesToClear)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (bFoundParameter = true ; break ; } LooseDataOffset + = LooseParameter . Size ; } break ; } LooseDataOffset + = LooseParameterBuffer . Size ; })",
    "insertText": "checkfSlow(bFoundParameter, TEXT(\"Attempted to set loose parameter at BaseIndex %u, Size %u which was never in the shader's parameter map.\"), Parameter.GetBaseIndex(), Parameter.GetNumBytes())"
  },
  {
    "label": "GetUniformBufferStart()",
    "kind": "Method",
    "detail": "Function (} } private : uint8* Data ; const FRHIUniformBuffer**)",
    "insertText": "GetUniformBufferStart()"
  },
  {
    "label": "GetSamplerStart()",
    "kind": "Method",
    "detail": "Function (} FRHISamplerState**)",
    "insertText": "GetSamplerStart()"
  },
  {
    "label": "GetSamplerOffset()",
    "kind": "Method",
    "detail": "Function (uint8* SamplerDataStart = Data +)",
    "insertText": "GetSamplerOffset()"
  },
  {
    "label": "GetSRVStart()",
    "kind": "Method",
    "detail": "Function (} FRHIResource**)",
    "insertText": "GetSRVStart()"
  },
  {
    "label": "GetSRVTypeStart()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetSRVTypeStart()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int Index = 0 ; int Size = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int LeftoverSize = Size % 2 ; Size = Size / 2 ; const int CheckIndex = Index + Size ; const int IndexIfLess = CheckIndex + LeftoverSize ; Index = Array [ CheckIndex ] . BaseIndex<BaseIndex ? IndexIfLess : Index ; } const int ArrayEnd =)",
    "insertText": "Min(Index + Size + 1, Array.Num())"
  },
  {
    "label": "FindSortedArrayBaseIndex()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex =)",
    "insertText": "FindSortedArrayBaseIndex(MakeArrayView(ParameterMapInfo.UniformBuffers), BaseIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if VALIDATE_UNIFORM_BUFFER_LIFETIME)",
    "insertText": "if(const FRHIUniformBuffer* Previous = GetUniformBufferStart()[FoundIndex])"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 NumMeshCommandReferencesForDebugging = - - Previous -> NumMeshCommandReferencesForDebugging ;)",
    "insertText": "check(NumMeshCommandReferencesForDebugging >= 0)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkfSlow(FoundIndex >= 0, TEXT(\"Attempted to set a uniform buffer at BaseIndex %u which was never in the shader's parameter map.\"), BaseIndex)"
  },
  {
    "label": "WriteBindingSampler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteBindingSampler(FRHISamplerState* Value, uint32 BaseIndex)"
  },
  {
    "label": "FindSortedArrayBaseIndex()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex =)",
    "insertText": "FindSortedArrayBaseIndex(MakeArrayView(ParameterMapInfo.TextureSamplers), BaseIndex)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkfSlow(FoundIndex >= 0, TEXT(\"Attempted to set a texture sampler at BaseIndex %u which was never in the shader's parameter map.\"), BaseIndex)"
  },
  {
    "label": "WriteBindingSRV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteBindingSRV(FRHIShaderResourceView* Value, uint32 BaseIndex)"
  },
  {
    "label": "FindSortedArrayBaseIndex()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex =)",
    "insertText": "FindSortedArrayBaseIndex(MakeArrayView(ParameterMapInfo.SRVs), BaseIndex)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkfSlow(FoundIndex >= 0, TEXT(\"Attempted to set SRV at BaseIndex %u which was never in the shader's parameter map.\"), BaseIndex)"
  },
  {
    "label": "WriteBindingTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteBindingTexture(FRHITexture* Value, uint32 BaseIndex)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkfSlow(FoundIndex >= 0, TEXT(\"Attempted to set Texture at BaseIndex %u which was never in the shader's parameter map.\"), BaseIndex)"
  }
]