[
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Policies / PrettyJsonPrintPolicy . h \" # include \" Policies / CondensedJsonPrintPolicy . h \" # include \" Serialization / JsonDataBag . h \" # include \" Serialization / JsonTypes . h \" # include \" Serialization / JsonReader . h \" # include \" Serialization / JsonSerializer . h \" # include \" Serialization / JsonSerializable . h \" # include \" Serialization / JsonSerializerBase . h \" # include \" Serialization / JsonSerializerReader . h \" # include \" Serialization / JsonSerializerWriter . h \" # include \" JsonGlobals . h \" # define BEGIN_JSON_SERIALIZER \\ void)",
    "insertText": "Serialize(FJsonSerializerBase& Serializer, bool bFlatObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!bFlatObject)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (Serializer .)",
    "insertText": "StartObject()"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (Serializer .)",
    "insertText": "EndObject()"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} \\ } # define)",
    "insertText": "JSON_SERIALIZE(JsonName, JsonValue) \\ Serializer.Serialize(TEXTVIEW(JsonName), JsonValue) #define JSON_SERIALIZE_WITHDEFAULT(JsonName, JsonValue, DefaultJsonValue) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!Serializer.GetObject()->HasField(TEXTVIEW(JsonName)))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ JsonValue = DefaultJsonValue ; \\ } \\ } \\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), JsonValue)"
  },
  {
    "label": "JSON_SERIALIZE_OPTIONAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "JSON_SERIALIZE_OPTIONAL(JsonName, OptionalJsonValue) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Serializer.GetObject()->HasField(TEXTVIEW(JsonName)))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), OptionalJsonValue.Emplace())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ else \\ { \\)",
    "insertText": "if(OptionalJsonValue.IsSet())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), OptionalJsonValue.GetValue())"
  },
  {
    "label": "JSON_SERIALIZE_OPTIONAL_MAP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "JSON_SERIALIZE_OPTIONAL_MAP(JsonName, JsonMap) \\ if (Serializer.IsLoading() && !JsonMap.IsSet() && Serializer.GetObject().IsValid() && Serializer.GetObject()->HasTypedField<EJson::Object>(TEXTVIEW(JsonName)))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (\\ JsonMap .)",
    "insertText": "Emplace()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\)",
    "insertText": "if(JsonMap.IsSet())"
  },
  {
    "label": "SerializeMap()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "SerializeMap(TEXTVIEW(JsonName), JsonMap.GetValue())"
  },
  {
    "label": "JSON_SERIALIZE_OPTIONAL_ARRAY()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_OPTIONAL_ARRAY(JsonName, JsonArray) \\ if (Serializer.IsLoading() && !JsonArray.IsSet() && Serializer.GetObject().IsValid() && Serializer.GetObject()->HasTypedField<EJson::Array>(TEXTVIEW(JsonName)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\)",
    "insertText": "if(JsonArray.IsSet())"
  },
  {
    "label": "SerializeArray()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "SerializeArray(TEXTVIEW(JsonName), JsonArray.GetValue())"
  },
  {
    "label": "JSON_SERIALIZE_ARRAY()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_ARRAY(JsonName, JsonArray) \\ Serializer.SerializeArray(TEXTVIEW(JsonName), JsonArray) #define JSON_SERIALIZE_ARRAY_WITHDEFAULT(JsonName, JsonArray, DefaultArray) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "SerializeArray()",
    "kind": "Method",
    "detail": "Function (\\ JsonArray = DefaultArray ; \\ } \\ } \\ Serializer .)",
    "insertText": "SerializeArray(TEXTVIEW(JsonName), JsonArray)"
  },
  {
    "label": "JSON_SERIALIZE_OBJECT_WITHDEFAULT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "JSON_SERIALIZE_OBJECT_WITHDEFAULT(JsonName, JsonObject, DefaultObject) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "JSON_SERIALIZE_MAP()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "JSON_SERIALIZE_MAP(JsonName, JsonMap) \\ Serializer.SerializeMap(TEXTVIEW(JsonName), JsonMap) #define JSON_SERIALIZE_SIMPLECOPY(JsonMap) \\ Serializer.SerializeSimpleMap(JsonMap) #define JSON_SERIALIZE_MAP_SAFE(JsonName, JsonMap) \\ Serializer.SerializeMapSafe(TEXTVIEW(JsonName), JsonMap) #define JSON_SERIALIZE_SERIALIZABLE(JsonName, JsonValue) \\ JsonValue.Serialize(Serializer, false) #define JSON_SERIALIZE_RAW_JSON_STRING(JsonName, JsonValue) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Serializer.GetObject()->HasTypedField<EJson::Object>(TEXTVIEW(JsonName)))"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (\\ TSharedPtr<FJsonObject> JsonObject = Serializer .)",
    "insertText": "GetObject()->GetObjectField(TEXTVIEW(JsonName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(JsonObject.IsValid())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ auto Writer = TJsonWriterFactory<TCHAR,TCondensedJsonPrintPolicy<TCHAR>)",
    "insertText": "Create(&JsonValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Serialize(JsonObject.ToSharedRef(), Writer)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ else \\ { \\ JsonValue =)",
    "insertText": "FString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ else \\ { \\)",
    "insertText": "if(!JsonValue.IsEmpty())"
  },
  {
    "label": "WriteIdentifierPrefix()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "WriteIdentifierPrefix(TEXTVIEW(JsonName))"
  },
  {
    "label": "WriteRawJSONValue()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "WriteRawJSONValue(*JsonValue)"
  },
  {
    "label": "JSON_SERIALIZE_ARRAY_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "JSON_SERIALIZE_ARRAY_SERIALIZABLE(JsonName, JsonArray, ElementType) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Serializer.GetObject()->HasTypedField<EJson::Array>(TEXTVIEW(JsonName)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto It = Serializer.GetObject()->GetArrayField(TEXTVIEW(JsonName)).CreateConstIterator(); It; ++It)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (\\ ElementType& Obj = JsonArray .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (\\ Obj .)",
    "insertText": "FromJson((*It)->AsObject())"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ else \\ { \\ Serializer .)",
    "insertText": "StartArray(TEXTVIEW(JsonName))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto It = JsonArray.CreateIterator(); It; ++It)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ It ->)",
    "insertText": "Serialize(Serializer, false)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (\\ } \\ Serializer .)",
    "insertText": "EndArray()"
  },
  {
    "label": "JSON_SERIALIZE_ARRAY_SERIALIZABLE_WITHDEFAULT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_ARRAY_SERIALIZABLE_WITHDEFAULT(JsonName, JsonArray, ElementType, DefaultArray) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "JSON_SERIALIZE_OPTIONAL_ARRAY_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_OPTIONAL_ARRAY_SERIALIZABLE(JsonName, OptionalJsonArray, ElementType) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ else \\ { \\)",
    "insertText": "if(OptionalJsonArray.IsSet())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto It = OptionalJsonArray->CreateIterator(); It; ++It)"
  },
  {
    "label": "JSON_SERIALIZE_MAP_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "JSON_SERIALIZE_MAP_SERIALIZABLE(JsonName, JsonMap, ElementType) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto MapIt = JsonObj->Values.CreateConstIterator(); MapIt; ++MapIt)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (\\ ElementType NewEntry ; \\ NewEntry .)",
    "insertText": "FromJson(MapIt.Value()->AsObject())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ JsonMap .)",
    "insertText": "Add(MapIt.Key(), NewEntry)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ else \\ { \\ Serializer .)",
    "insertText": "StartObject(TEXTVIEW(JsonName))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto It = JsonMap.CreateIterator(); It; ++It)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "StartObject(MakeStringView(It.Key()))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (\\ It .)",
    "insertText": "Value().Serialize(Serializer, true)"
  },
  {
    "label": "JSON_SERIALIZE_MAP_ARRAY_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_MAP_ARRAY_SERIALIZABLE(JsonName, JsonMap, ElementType) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ TArray<ElementType> NewEntry ; \\)",
    "insertText": "for(auto ArrayIt : MapIt.Value()->AsArray())"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (\\ NewEntry .)",
    "insertText": "Add_GetRef(ElementType()).FromJson(ArrayIt->AsObject())"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (\\ Serializer .)",
    "insertText": "StartArray(It.Key())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(auto ArrayEntry : It.Value())"
  },
  {
    "label": "JSON_SERIALIZE_OBJECT_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_OBJECT_SERIALIZABLE(JsonName, JsonSerializableObject) \\ \\ if (Serializer.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(JsonObj.IsValid())"
  },
  {
    "label": "JSON_SERIALIZE_OBJECT_SERIALIZABLE_WITHDEFAULT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_OBJECT_SERIALIZABLE_WITHDEFAULT(JsonName, JsonSerializableObject, JsonSerializableObjectDefault) \\ \\ if (Serializer.IsLoading())"
  },
  {
    "label": "JSON_SERIALIZE_OPTIONAL_OBJECT_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_OPTIONAL_OBJECT_SERIALIZABLE(JsonName, JsonSerializableObject) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using ObjectType = TRemoveReference<)",
    "insertText": "decltype(JsonSerializableObject.GetValue())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (\\ JsonSerializableObject = ObjectType { } ; \\ JsonSerializableObject .)",
    "insertText": "GetValue().FromJson(JsonObj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ else \\ { \\)",
    "insertText": "if(JsonSerializableObject.IsSet())"
  },
  {
    "label": "JSON_SERIALIZE_DATETIME_UNIX_TIMESTAMP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "JSON_SERIALIZE_DATETIME_UNIX_TIMESTAMP(JsonName, JsonDateTime) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ int64 UnixTimestampValue ; \\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), UnixTimestampValue)"
  },
  {
    "label": "FromUnixTimestamp()",
    "kind": "Method",
    "detail": "Function (\\ JsonDateTime =)",
    "insertText": "FromUnixTimestamp(UnixTimestampValue)"
  },
  {
    "label": "ToUnixTimestamp()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else \\ { \\ int64 UnixTimestampValue = JsonDateTime .)",
    "insertText": "ToUnixTimestamp()"
  },
  {
    "label": "JSON_SERIALIZE_DATETIME_UNIX_TIMESTAMP_MILLISECONDS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_DATETIME_UNIX_TIMESTAMP_MILLISECONDS(JsonName, JsonDateTime) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ int64 UnixTimestampValueInMilliseconds ; \\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), UnixTimestampValueInMilliseconds)"
  },
  {
    "label": "FromUnixTimestamp()",
    "kind": "Method",
    "detail": "Function (\\ JsonDateTime =)",
    "insertText": "FromUnixTimestamp(UnixTimestampValueInMilliseconds / 1000)"
  },
  {
    "label": "JSON_SERIALIZE_ENUM()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_ENUM(JsonName, JsonEnum) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (\\ FString JsonTextValue ; \\ Serializer .)",
    "insertText": "Serialize(TEXTVIEW(JsonName), JsonTextValue)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "LexFromString(JsonEnum, *JsonTextValue)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else \\ { \\ FString JsonTextValue =)",
    "insertText": "LexToString(JsonEnum)"
  },
  {
    "label": "JSON_SERIALIZE_ENUM_ARRAY()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "JSON_SERIALIZE_ENUM_ARRAY(JsonName, JsonArray, EnumType) \\ if (Serializer.IsLoading())"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "LexFromString(EnumValue, *(*It)->AsString())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ JsonArray .)",
    "insertText": "Add(EnumValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(EnumType& EnumValue : JsonArray)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (\\ FString JsonTextValue =)",
    "insertText": "LexToString(EnumValue)"
  }
]