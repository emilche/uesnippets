[
  {
    "label": "ThreadTypeToNiceValuePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadTypeToNiceValuePair"
  },
  {
    "label": "ThreadPriorityToNiceValuePairForTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadPriorityToNiceValuePairForTest"
  },
  {
    "label": "ThreadTypeToNiceValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_PLATFORM_THREAD_INTERNAL_POSIX_H_ # define BASE_THREADING_PLATFORM_THREAD_INTERNAL_POSIX_H_ # include \" base / base_export . h \" # include \" base / threading / platform_thread . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace internal { struct ThreadTypeToNiceValuePair { ThreadType thread_type ; int nice_value ; } ; struct ThreadPriorityToNiceValuePairForTest { ThreadPriorityForTest priority ; int nice_value ; } ; const ThreadTypeToNiceValuePair kThreadTypeToNiceValueMap [ 6 ] ; const ThreadPriorityToNiceValuePairForTest kThreadPriorityToNiceValueMapForTest [ 4 ] ; int)",
    "insertText": "ThreadTypeToNiceValue(ThreadType thread_type)"
  },
  {
    "label": "CanSetThreadTypeToRealtimeAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetThreadTypeToRealtimeAudio()"
  },
  {
    "label": "SetCurrentThreadTypeForPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentThreadTypeForPlatform(ThreadType thread_type, MessagePumpType pump_type_hint)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) BASE_EXPORT void InvalidateTidCache()"
  },
  {
    "label": "NiceValueToThreadPriorityForTest()",
    "kind": "Method",
    "detail": "Function (# endif ThreadPriorityForTest)",
    "insertText": "NiceValueToThreadPriorityForTest(int nice_value)"
  },
  {
    "label": "GetCurrentThreadPriorityForPlatformForTest()",
    "kind": "Method",
    "detail": "Function (absl::optional<ThreadPriorityForTest>)",
    "insertText": "GetCurrentThreadPriorityForPlatformForTest()"
  },
  {
    "label": "GetCurrentThreadNiceValue()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCurrentThreadNiceValue()"
  }
]