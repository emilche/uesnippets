[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FCascade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCascade"
  },
  {
    "label": "FEditorCommonDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCommonDrawHelper"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SCascadePreviewViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCascadePreviewViewport"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FInputKeyEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyEventArgs"
  },
  {
    "label": "FCascadeEdPreviewViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCascadeEdPreviewViewportClient"
  },
  {
    "label": "EDrawElements",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDrawElements"
  },
  {
    "label": "FCascadeEdPreviewViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorViewportClient . h \" # include \" InputCoreTypes . h \" # include \" Math / Axis . h \" # include \" Math / Color . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" PreviewScene . h \" # include \" Templates / SharedPointer . h \" # include \" Utils . h \" class FCanvas ; class FCascade ; class FEditorCommonDrawHelper ; class FPrimitiveDrawInterface ; class FReferenceCollector ; class FSceneInterface ; class FSceneView ; class FViewport ; class SCascadePreviewViewport ; class UStaticMeshComponent ; struct FInputKeyEventArgs ; class FCascadeEdPreviewViewportClient : public FEditorViewportClient { public :)",
    "insertText": "FCascadeEdPreviewViewportClient(TWeakPtr<FCascade> InCascade, const TSharedRef<SCascadePreviewViewport>& InCascadeViewport)"
  },
  {
    "label": "FCascadeEdPreviewViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCascadeEdPreviewViewportClient()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& InEventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId DeviceId, FKey Key, float Delta, float DeltaTime, int32 NumSamples = 1, bool bGamepad = false)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "GetScene()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "ShouldOrbitCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOrbitCamera()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "SetPreviewCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewCamera(const FRotator& NewPreviewAngle, float NewPreviewDistance)"
  },
  {
    "label": "UpdateMemoryInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryInformation()"
  },
  {
    "label": "CreateThumbnail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateThumbnail()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (enum EDrawElements { ParticleCounts = 0 x001,ParticleEvents = 0 x002,ParticleTimes = 0 x004,ParticleMemory = 0 x008,VectorFields = 0 x010,Bounds = 0 x020,WireSphere = 0 x040,OriginAxis = 0 x080,Orbit = 0 x100,ParticleSystemCompleted = 0 x200,EmitterTickTimes = 0 x400 } ; FPreviewScene&)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "GetDrawElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDrawElement(EDrawElements Element)"
  },
  {
    "label": "ToggleDrawElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDrawElement(EDrawElements Element)"
  },
  {
    "label": "GetPreviewBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetPreviewBackgroundColor()"
  },
  {
    "label": "GetFloorComponent()",
    "kind": "Method",
    "detail": "Function (UStaticMeshComponent*)",
    "insertText": "GetFloorComponent()"
  },
  {
    "label": "GetDrawHelper()",
    "kind": "Method",
    "detail": "Function (FEditorCommonDrawHelper&)",
    "insertText": "GetDrawHelper()"
  },
  {
    "label": "GetWireSphereRadius()",
    "kind": "Method",
    "detail": "Function (float&)",
    "insertText": "GetWireSphereRadius()"
  },
  {
    "label": "GetCascade()",
    "kind": "Method",
    "detail": "Function (FCascade*)",
    "insertText": "GetCascade()"
  }
]