[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FGraphActionListBuilderBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphActionListBuilderBase"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / CoreMiscDefines . h \" # include \" SGraphActionMenu . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class FDragDropEvent ; class SInlineEditableTextBlock ; class SWidget ; struct FEdGraphSchemaAction ; struct FGeometry ; struct FGraphActionListBuilderBase ; struct FPointerEvent ; struct FSlateBrush ; struct FSlateFontInfo ; class SGraphPaletteItem : public SCompoundWidget { public : FCreateWidgetMouseButtonDown MouseButtonDownDelegate ; TWeakPtr<FEdGraphSchemaAction> ActionPtr ; TSharedPtr<SInlineEditableTextBlock> InlineRenameWidget ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPaletteItem)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, FCreateWidgetForActionData* const InCreateData)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateIconWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "CreateIconWidget(const FText& IconToolTip, const FSlateBrush* IconBrush, const FSlateColor& IconColor, const FString& DocLink, const FString& DocExcerpt, const FSlateBrush* SecondaryIconBrush, const FSlateColor& SecondaryColor)"
  },
  {
    "label": "CreateIconWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateIconWidget(const FText& IconToolTip, const FSlateBrush* IconBrush, const FSlateColor& IconColor)"
  },
  {
    "label": "CreateTextSlotWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "CreateTextSlotWidget(FCreateWidgetForActionData* const InCreateData, TAttribute<bool> bIsReadOnly)"
  },
  {
    "label": "OnNameTextVerifyChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnNameTextVerifyChanged(const FText& InNewText, FText& OutErrorMessage)"
  },
  {
    "label": "OnNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "GetDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayText()"
  },
  {
    "label": "GetItemTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemTooltip()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SGraphPalette : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPalette)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_AutoExpandActionMenu = false ; })",
    "insertText": "SLATE_ARGUMENT(bool, AutoExpandActionMenu ) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SGraphPalette()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SGraphPalette()"
  },
  {
    "label": "OnCreateWidgetForAction()",
    "kind": "Method",
    "detail": "Function (} ; protected : TSharedRef<SWidget>)",
    "insertText": "OnCreateWidgetForAction(FCreateWidgetForActionData* const InCreateData)"
  },
  {
    "label": "OnActionDragged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnActionDragged(const TArray< TSharedPtr<FEdGraphSchemaAction> >& InActions, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "RefreshActionsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshActionsList(bool bPreserveExpansion)"
  },
  {
    "label": "CollectAllActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAllActions(FGraphActionListBuilderBase& OutAllActions)"
  }
]