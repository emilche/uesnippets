[
  {
    "label": "FMeshBoolean",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBoolean"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshBoolean()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" GeometryTypes . h \" # include \" DynamicMeshEditor . h \" # include \" Spatial / FastWinding . h \" # include \" DynamicMesh / DynamicMeshAABBTree3 . h \" # include \" Util / ProgressCancel . h \" namespace UE { namespace Geometry { class FMeshBoolean { public : const FDynamicMesh3* Meshes [ 2 ] ; const FTransformSRT3d Transforms [ 2 ] ; enum class EBooleanOp { Union,Difference,Intersect,TrimInside,TrimOutside,NewGroupInside,NewGroupOutside } ; EBooleanOp Operation ; double SnapTolerance = FMathf::ZeroTolerance* 1 . 0 ; bool bCollapseDegenerateEdgesOnCut = true ; double DegenerateEdgeTolFactor = 1 . 5 ; double WindingThreshold = . 5 ; bool bPutResultInInputSpace = true ; bool bWeldSharedEdges = true ; bool bTrackAllNewEdges = false ; FProgressCancel* Progress = nullptr ; bool bSimplifyAlongNewEdges = false ; double SimplificationAngleTolerance = . 1 ; double TryToImproveTriQualityThreshold = . 5 ; bool bPreserveTriangleGroups = true ; bool bPreserveVertexUVs = true ; bool bPreserveOverlayUVs = true ; float UVDistortTolerance = FMathf::ZeroTolerance ; bool bPreserveVertexNormals = true ; float NormalDistortTolerance = . 0 1 f ; int PreserveUVsOnlyForMesh = - 1 ; FDynamicMesh3* Result ; FTransformSRT3d ResultTransform ; TArray<int> CreatedBoundaryEdges ; TSet<int32> AllNewEdges ; bool bPopulateSecondMeshGroupMap = false ; FIndexMapi SecondMeshGroupMap ; public :)",
    "insertText": "FMeshBoolean(const FDynamicMesh3* MeshA, const FTransformSRT3d& TransformA, const FDynamicMesh3* MeshB, const FTransformSRT3d& TransformB, FDynamicMesh3* OutputMesh, EBooleanOp Operation)"
  },
  {
    "label": "Operation()",
    "kind": "Method",
    "detail": "Function (MeshA,MeshB },Transforms { TransformA,TransformB },)",
    "insertText": "Operation(Operation), Result(OutputMesh)"
  },
  {
    "label": "FMeshBoolean()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshBoolean(const FDynamicMesh3* MeshA, const FDynamicMesh3* MeshB, FDynamicMesh3* OutputMesh, EBooleanOp Operation)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (MeshA,MeshB },Transforms {)",
    "insertText": "Identity(), FTransformSRT3d::Identity() }, Operation(Operation), Result(OutputMesh)"
  },
  {
    "label": "FMeshBoolean()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMeshBoolean()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} EOperationValidationResult)",
    "insertText": "Validate()"
  },
  {
    "label": "Cancelled()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Cancelled()"
  },
  {
    "label": "FindNearestEdge()",
    "kind": "Method",
    "detail": "Function (} private : int)",
    "insertText": "FindNearestEdge(const FDynamicMesh3& OnMesh, const TArray<int>& EIDs, FVector3d Pos)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeEdges(const FMeshIndexMappings& IndexMaps, FDynamicMesh3* CutMesh[2], const TArray<int> CutBoundaryEdges[2], const TMap<int, int>& AllVIDMatches)"
  },
  {
    "label": "SimplifyAlongNewEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimplifyAlongNewEdges(int NumMeshesToProcess, FDynamicMesh3* CutMesh[2], TArray<int> CutBoundaryEdges[2], TMap<int, int>& AllVIDMatches)"
  }
]