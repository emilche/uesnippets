[
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FPSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheParams"
  },
  {
    "label": "FPSOPrecacheVertexFactoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheVertexFactoryData"
  },
  {
    "label": "FPSOPrecacheVertexFactoryDataPerMaterialIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheVertexFactoryDataPerMaterialIndex"
  },
  {
    "label": "FMaterialInterfacePSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInterfacePSOPrecacheParams"
  },
  {
    "label": "FShaderPreloadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreloadData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPSOPrecacheData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheData"
  },
  {
    "label": "FMaterialPSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialPSOPrecacheParams"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPSOPrecacheParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" RHIFeatureLevel . h \" # include \" RHIResources . h \" # include \" Engine / EngineTypes . h \" # include \" PipelineStateCache . h \" # include \" PSOPrecacheFwd . h \" # include \" Shader . h \" class FVertexFactoryType ; struct FPSOPrecacheParams {)",
    "insertText": "FPSOPrecacheParams()"
  },
  {
    "label": "PrimitiveType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimitiveType(uint8)"
  },
  {
    "label": "Mobility()",
    "kind": "Method",
    "detail": "Function (bDefaultMaterial = false ; bCanvasMaterial = false ; bRenderInMainPass = true ; bRenderInDepthPass = true ; bStaticLighting = true ; bCastShadow = true ; bRenderCustomDepth = false ; bAffectDynamicIndirectLighting = true ; bReverseCulling = false ; bDisableBackFaceCulling = false ; bCastShadowAsTwoSided = false ; bForceLODModel = false ;)",
    "insertText": "Mobility(uint8)"
  },
  {
    "label": "StencilWriteMask()",
    "kind": "Method",
    "detail": "Function (bAnyMaterialHasWorldPositionOffset = false ;)",
    "insertText": "StencilWriteMask(uint8)"
  },
  {
    "label": "BasePassPixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasePassPixelFormat(uint16)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Unused = 0 ; } bool)",
    "insertText": "operator(const FPSOPrecacheParams& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPSOPrecacheParams& Params)"
  },
  {
    "label": "SetMobility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMobility(EComponentMobility::Type InMobility)"
  },
  {
    "label": "GetMobility()",
    "kind": "Method",
    "detail": "Function (} TEnumAsByte<EComponentMobility::Type>)",
    "insertText": "GetMobility()"
  },
  {
    "label": "IsMoveable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMoveable()"
  },
  {
    "label": "GetStencilWriteMask()",
    "kind": "Method",
    "detail": "Function (} TEnumAsByte<EStencilMask>)",
    "insertText": "GetStencilWriteMask()"
  },
  {
    "label": "SetBassPixelFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBassPixelFormat(EPixelFormat InBasePassPixelFormat)"
  },
  {
    "label": "GetBassPixelFormat()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "GetBassPixelFormat()"
  },
  {
    "label": "FPSOPrecacheVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (} union { struct { uint64 PrimitiveType : 6 ; uint64 bDefaultMaterial : 1 ; uint64 bCanvasMaterial : 1 ; uint64 bRenderInMainPass : 1 ; uint64 bRenderInDepthPass : 1 ; uint64 bStaticLighting : 1 ; uint64 bCastShadow : 1 ; uint64 bRenderCustomDepth : 1 ; uint64 bUsesIndirectLightingCache : 1 ; uint64 bAffectDynamicIndirectLighting : 1 ; uint64 bReverseCulling : 1 ; uint64 bDisableBackFaceCulling : 1 ; uint64 bCastShadowAsTwoSided : 1 ; uint64 bForceLODModel : 1 ; uint64 Mobility : 4 ; uint64 bAnyMaterialHasWorldPositionOffset : 1 ; uint64 StencilWriteMask : 4 ; uint64 BasePassPixelFormat : 1 6 ; uint64 Unused : 2 0 ; } ; uint64 Data ; } ; } ; using FVertexDeclarationElementListID = uint16 ; struct FPSOPrecacheVertexFactoryData {)",
    "insertText": "FPSOPrecacheVertexFactoryData()"
  },
  {
    "label": "FPSOPrecacheVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPSOPrecacheVertexFactoryData(const FVertexFactoryType* InVertexFactoryType) : VertexFactoryType(InVertexFactoryType), CustomDefaultVertexDeclaration(nullptr)"
  },
  {
    "label": "FPSOPrecacheVertexFactoryData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPSOPrecacheVertexFactoryData(const FVertexFactoryType* InVertexFactoryType, const FVertexDeclarationElementList& ElementList)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FVertexFactoryType* VertexFactoryType = nullptr ; FRHIVertexDeclaration* CustomDefaultVertexDeclaration = nullptr ; bool)",
    "insertText": "operator(const FPSOPrecacheVertexFactoryData& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPSOPrecacheVertexFactoryData& Params)"
  },
  {
    "label": "AddMaterialInterfacePSOPrecacheParamsToList()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TArray<FPSOPrecacheVertexFactoryData,TInlineAllocator<2>> FPSOPrecacheVertexFactoryDataList ; struct FPSOPrecacheVertexFactoryDataPerMaterialIndex { int16 MaterialIndex ; FPSOPrecacheVertexFactoryDataList VertexFactoryDataList ; } ; typedef TArray<FPSOPrecacheVertexFactoryDataPerMaterialIndex,TInlineAllocator<4>> FPSOPrecacheVertexFactoryDataPerMaterialIndexList ; struct FMaterialInterfacePSOPrecacheParams { EPSOPrecachePriority Priority = EPSOPrecachePriority::Medium ; UMaterialInterface* MaterialInterface = nullptr ; FPSOPrecacheParams PSOPrecacheParams ; FPSOPrecacheVertexFactoryDataList VertexFactoryDataList ; } ; void)",
    "insertText": "AddMaterialInterfacePSOPrecacheParamsToList(const FMaterialInterfacePSOPrecacheParams& EntryToAdd, FMaterialInterfacePSOPrecacheParamsList& List)"
  },
  {
    "label": "FShaderPreloadData()",
    "kind": "Method",
    "detail": "Function (struct FShaderPreloadData {)",
    "insertText": "FShaderPreloadData()"
  },
  {
    "label": "FShaderPreloadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderPreloadData(const TShaderRef<FShader>& InShader)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Shaders .)",
    "insertText": "Emplace(InShader)"
  },
  {
    "label": "FShaderPreloadData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderPreloadData(TArray<TShaderRef<FShader>, TInlineAllocator<3>>&& InShaders) : Shaders(MoveTemp(InShaders))"
  },
  {
    "label": "GetPSOPrecacheMode()",
    "kind": "Method",
    "detail": "Function (} TArray<TShaderRef<FShader>,TInlineAllocator<3>> Shaders ; } ; enum class EPSOPrecacheMode : uint8 { PSO = 0,PreloadShader = 1,} ; EPSOPrecacheMode)",
    "insertText": "GetPSOPrecacheMode()"
  },
  {
    "label": "FPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (struct FPSOPrecacheData {)",
    "insertText": "FPSOPrecacheData() : Type(EType::Graphics), bRequired(true) #if PSO_PRECACHING_VALIDATE , PSOCollectorIndex(INDEX_NONE) , bDefaultMaterial(0) , VertexFactoryType(nullptr)"
  },
  {
    "label": "SetComputeShader()",
    "kind": "Method",
    "detail": "Function (} enum class EType : uint8 { Graphics,Compute,} ; EType Type ; bool bRequired ; union { FGraphicsPipelineStateInitializer GraphicsPSOInitializer ; FRHIComputeShader* ComputeShader ; } ; FShaderPreloadData ShaderPreloadData ; void)",
    "insertText": "SetComputeShader(const TShaderRef<FShader>& InComputeShader)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ShaderPreloadData . Shaders .)",
    "insertText": "Emplace(InComputeShader)"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (} else { ComputeShader = InComputeShader .)",
    "insertText": "GetComputeShader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } # if PSO_PRECACHING_VALIDATE int32 PSOCollectorIndex : 3 1 ; int32 bDefaultMaterial : 1 ; const FVertexFactoryType* VertexFactoryType ; # endif } ; typedef TArray<FPSOPrecacheData> FPSOPrecacheDataArray ; typedef TArray<FPSOPrecacheRequestResult,TInlineAllocator<4>> FPSOPrecacheRequestResultArray ; struct FMaterialPSOPrecacheParams { ERHIFeatureLevel::Type FeatureLevel = ERHIFeatureLevel::Num ; FMaterial* Material = nullptr ; FPSOPrecacheVertexFactoryData VertexFactoryData ; FPSOPrecacheParams PrecachePSOParams ; bool)",
    "insertText": "operator(const FMaterialPSOPrecacheParams& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FMaterialPSOPrecacheParams& Params)"
  },
  {
    "label": "IsComponentPSOPrecachingEnabled()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "IsComponentPSOPrecachingEnabled()"
  },
  {
    "label": "IsResourcePSOPrecachingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourcePSOPrecachingEnabled()"
  },
  {
    "label": "ShouldBoostPSOPrecachePriorityOnDraw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBoostPSOPrecachePriorityOnDraw()"
  },
  {
    "label": "IsPSOShaderPreloadingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPSOShaderPreloadingEnabled()"
  },
  {
    "label": "GetPSOPrecacheProxyCreationStrategy()",
    "kind": "Method",
    "detail": "Function (enum class EPSOPrecacheProxyCreationStrategy : uint8 { AlwaysCreate = 0,DelayUntilPSOPrecached = 1,UseDefaultMaterialUntilPSOPrecached = 2 } ; EPSOPrecacheProxyCreationStrategy)",
    "insertText": "GetPSOPrecacheProxyCreationStrategy()"
  },
  {
    "label": "ProxyCreationWhenPSOReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProxyCreationWhenPSOReady()"
  },
  {
    "label": "BoostPrecachedPSORequestsOnDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostPrecachedPSORequestsOnDraw(const class FPrimitiveSceneInfo* SceneInfo)"
  }
]